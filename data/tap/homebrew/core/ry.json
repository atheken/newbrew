{
  "name": "ry",
  "full_name": "ry",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Ruby virtual env tool",
  "license": "MIT",
  "homepage": "https://github.com/jneen/ry",
  "versions": {
    "stable": "0.5.2",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/jneen/ry/archive/v0.5.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "b53b51569dfa31233654b282d091b76af9f6b8af266e889b832bb374beeb1f59"
    },
    "head": {
      "url": "https://github.com/jneen/ry.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 2,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ry/blobs/sha256:f877d1b934d03d73ec0fb2a11021a5eafa08d057a9c3c0e9e52883e6cf9f51c2",
          "sha256": "f877d1b934d03d73ec0fb2a11021a5eafa08d057a9c3c0e9e52883e6cf9f51c2"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ry/blobs/sha256:f877d1b934d03d73ec0fb2a11021a5eafa08d057a9c3c0e9e52883e6cf9f51c2",
          "sha256": "f877d1b934d03d73ec0fb2a11021a5eafa08d057a9c3c0e9e52883e6cf9f51c2"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ry/blobs/sha256:4df5abf69ebfc48335682ce491e2dec93750d1f7247fcec40f9c32fa16653895",
          "sha256": "4df5abf69ebfc48335682ce491e2dec93750d1f7247fcec40f9c32fa16653895"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ry/blobs/sha256:f877d1b934d03d73ec0fb2a11021a5eafa08d057a9c3c0e9e52883e6cf9f51c2",
          "sha256": "f877d1b934d03d73ec0fb2a11021a5eafa08d057a9c3c0e9e52883e6cf9f51c2"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ry/blobs/sha256:f877d1b934d03d73ec0fb2a11021a5eafa08d057a9c3c0e9e52883e6cf9f51c2",
          "sha256": "f877d1b934d03d73ec0fb2a11021a5eafa08d057a9c3c0e9e52883e6cf9f51c2"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ry/blobs/sha256:3ad95cc81d14e2844234bec25236dca63e31404dfe7e57bef41ab3e4a638047a",
          "sha256": "3ad95cc81d14e2844234bec25236dca63e31404dfe7e57bef41ab3e4a638047a"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ry/blobs/sha256:b82b9243f4e89e24608f21a9a46e55cad5708224749ee07da18841c3d50e38d2",
          "sha256": "b82b9243f4e89e24608f21a9a46e55cad5708224749ee07da18841c3d50e38d2"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ry/blobs/sha256:835c360df374f5ca94a753b1ce79ba61dfc9fc14e54a2bf064367b9094909677",
          "sha256": "835c360df374f5ca94a753b1ce79ba61dfc9fc14e54a2bf064367b9094909677"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ry/blobs/sha256:3e2e0b1e4104b9856ef6f5ad05caa4100ba209850c84c1db759f788eed042740",
          "sha256": "3e2e0b1e4104b9856ef6f5ad05caa4100ba209850c84c1db759f788eed042740"
        },
        "sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ry/blobs/sha256:3e2e0b1e4104b9856ef6f5ad05caa4100ba209850c84c1db759f788eed042740",
          "sha256": "3e2e0b1e4104b9856ef6f5ad05caa4100ba209850c84c1db759f788eed042740"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ry/blobs/sha256:fff90c674fd9f8f96903b8e1d51a24fe2a201e9597a422b10828f867f99f939b",
          "sha256": "fff90c674fd9f8f96903b8e1d51a24fe2a201e9597a422b10828f867f99f939b"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "bash-completion",
    "ruby-build"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": "Please add to your profile:\n  which ry &>/dev/null && eval \"$(ry setup)\"\n\nIf you want your Rubies to persist across updates you\nshould set the `RY_RUBIES` variable in your profile, i.e.\n  export RY_RUBIES=\"$HOMEBREW_PREFIX/var/ry/rubies\"\n",
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/ry.rb",
  "ruby_source_checksum": {
    "sha256": "967dd5c7461baabaa7f694c339d22aa3f276306f8311b6f9d88171323bd3081e"
  },
  "date_added": "2014-04-01T14:11:01-05:00",
  "readme": "# ry: the simplest ruby virtual env\n\n## Installation\n\nIf you're on a Mac with homebrew installed, you may simply `brew install ry` and follow the instructions.\n\nOtherwise, install the files from the repo to your favorite prefix (I use `~/.local`, which is the default).\n\n``` bash\ngit clone git://github.com/jneen/ry\ncd ry\nPREFIX=$HOME/.local make install\n```\n\nand add the following lines to your bashrc (or zshrc):\n\n``` bash\n# If you're using the default ~/.local prefix,\n# make sure ~/.local/bin is on your $PATH.\nexport PATH=\"$HOME/.local/bin:$PATH\"\neval \"$(ry setup)\"\n```\n\nor, if you don't like `eval`, you can do it manually:\n\n``` bash\nexport PATH=\"$PREFIX/lib/ry/current/bin:$PATH\"\n```\n\nFor ZSH completion, see [this](https://github.com/jneen/ry/blob/master/share/ry.zsh_completion).\n\nIf you want to specify a different directory for installing rubies:\n\n```bash\n# rubies are installed into $RY_PREFIX/lib/ry/rubies\n# set RY_RUBIES for an alternate location\nexport RY_RUBIES=\"$HOME/.rubies\"\n```\n\n## Usage\n\nRy is a bit different from [other][rvm] [version][rbenv] [managers][nvm].  The major design goal of ry is to be explicit, unobtrusive, and easy to query.  In the vein of the [n][] package manager for node, there are no subshells, and the only thing it needs to add to your environment is a single entry to your `$PATH` (also tab completion if you like).  For example, here's how you create a new installation:\n\n[rvm]: http://rvm.io/\n[nvm]: https://github.com/creationix/nvm\n[rbenv]: https://github.com/sstephenson/rbenv\n[n]: https://github.com/visionmedia/n\n\n``` bash\nry install http://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.3-p125.tar.gz mri-1.9.3\n```\n\nThis creates an installation of Ruby called `mri-1.9.3` using the tarball from `ruby-lang.org`.  To switch to this ruby, use\n\n``` bash\nry use mri-1.9.3 # or: ry mri-1.9.3\n```\n\nWant to use a custom commit?\n\n``` bash\nry install https://github.com/ruby/ruby/tarball/<hash> mri-custom\n```\n\n### ruby-build\nIf you have `ruby-build` installed, you can use it very easily with ry:\n\n``` bash\nry install 1.9.3-p125\n```\n\n### shell-local ruby selection\n\nBecause `ry use` changes a symlink, that ruby is globally activated across all shells.  To use a shell-local ruby, simply set your `$PATH` to include that ruby's bin dir.  The easiest way to do this is to use the `ry fullpath <ruby>` helper, which outputs a copy of your `$PATH` variable modified for use with ry.\n\n``` bash\nexport PATH=\"$(ry fullpath my-cool-ruby)\"\n```\n\nYou can activate this automatically with something like [direnv](http://direnv.net/).\n\nFor more information, see `ry help`.\n\n## Developing\n\nAll of the magic is in the bash script `bin/ry`.  Here are a couple of bash features I use that aren't common elsewhere:\n\n* Poor man's namespacing - the character `:` is a perfectly valid character to use in a bash function's name.  All of ry's subcommands are implemented as functions looking like `ry::foo`.  At the bottom of the file is the function `ry` which essentially delegates to `ry::$1` - so to add a new subcommand, all you need to do is define the bash function and document it in `ry::usage`.\n\n* Piping from heredocs is awesome.  The syntax `cmd <<<\"$variable\"` runs `cmd` with stdin as the content of `$variable`.  I use this extensively, and you should too."
}
