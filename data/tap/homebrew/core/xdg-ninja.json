{
  "name": "xdg-ninja",
  "full_name": "xdg-ninja",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Check your $HOME for unwanted files and directories",
  "license": "MIT",
  "homepage": "https://github.com/b3nj5m1n/xdg-ninja",
  "versions": {
    "stable": "0.2.0.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/b3nj5m1n/xdg-ninja/archive/refs/tags/v0.2.0.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "f4f9ab4500e7cf865ff8b68c343537e27b9ff1e6068cb1387e516e608f77cec8"
    },
    "head": {
      "url": "https://github.com/b3nj5m1n/xdg-ninja.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/xdg-ninja/blobs/sha256:143b6fed536da8327d4cb7068108e6cd787eee32d9e297f8c435f781044fb755",
          "sha256": "143b6fed536da8327d4cb7068108e6cd787eee32d9e297f8c435f781044fb755"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "glow",
    "jq"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/xdg-ninja.rb",
  "ruby_source_checksum": {
    "sha256": "b7eea1f55d8431a6d9c5c0ce9e574fd665ff900bd1aab1c130f3b54254e2e604"
  },
  "date_added": "2022-07-09T15:01:00+00:00",
  "readme": "<div>\n  <h1 align=\"center\">xdg-ninja</h1>\n  <h5 align=\"center\">Because you wouldn't let just anyone into your <i>$HOME</i></h5>\n</div>\n\nA shell script which checks your _$HOME_ for unwanted files and directories.\n\n<p align=\"center\">\n  <img src=\"https://s11.gifyu.com/images/68747470733a2f2f73382e67696679752e636f6d2f696d616765732f5065656b2d323032322d30352d31332d31362d30372e676966.gif\" width=\"500\"/>\n</p>\n\nWhen it encounters a file it knows about, it will tell you whether it's possible to move this file to an appropriate location, and how to do it.\n\nThe configurations are from the [arch wiki page on XDG_BASE_DIR](https://wiki.archlinux.org/title/XDG_Base_Directory), [antidot](https://github.com/doron-cohen/antidot) (thanks to Scr0nch for writing a conversion tool), and contributed by other users.\n\n## Running\n\n### Using nix\n\nIf you're using [nix](https://nixos.org) and have flakes turned on, you can just run the following command:\n```sh\nnix run github:b3nj5m1n/xdg-ninja\n```\n\n### Cloning Manually\n\nClone the repository somewhere, then run the _./xdg-ninja.sh_ script.\n\nThis will run every test in the default configuration.\n\n### Installing with Homebrew\n\nTo install xdg-ninja with [Homebrew](https://brew.sh), run `brew install xdg-ninja` to install the script and all of its dependencies, then run the `xdg-ninja` command.\n\n## Dependencies\n\n- your favorite POSIX-compliant shell ([bash](https://repology.org/project/bash/packages), [zsh](https://repology.org/project/zsh/packages), [dash](https://repology.org/project/dash-shell/packages), ...)\n- [jq](https://repology.org/project/jq/packages) for parsing the json files\n\n### Optional\n\n- [glow](https://repology.org/project/glow/packages) for rendering Markdown in the terminal ([bat](https://repology.org/project/bat-cat/packages), [pygmentize](https://repology.org/project/pygments/versions) or [highlight](https://repology.org/project/highlight/packages) can be used as fallback, but glow's output is clearer and therefore glow is recommended)\n\n## Configuration\n\nThe configuration is done in the _programs/_ directory, which should be located in the same working directory as the xdg-ninja.sh script. This can be overriden with the `XN_PROGRAMS_DIR` environment variable.\n\nYou define a program, and then a list of files and directories which this program ruthlessly puts into your _$HOME_ directory.\n\nFor each file/directory, you specify if it can be (re)moved.\n\nIf this is the case, you also specify instructions on how to accomplish this in Markdown.\n\nFiles in this directory can have any name, but using the name of the program is encouraged.\n\n### Automatically Generating Configuration\n\nYou can download the _xdgnj_ executable from the releases page. Alternatively, you can use the nix flake or build it from scratch using _cabal_, _stack_, or the provided docker image in _build/_. (To be clear, this is just a tool that will help you automatically generate the config files, you still only need your shell to run the tests)\n\nAvailable commands:\n```sh\nxdgnj add # Adds a new configuration\nxdgnj prev programs/FILE.json # Preview the configuration for a program\nxdgnj edit programs/FILE.json # Edit the configuration for a program\nxdgnj run # Mostly the same as running the shell script\n```\n\n#### Using nix\n\nIf you're using [nix](https://nixos.org) and have flakes turned on, you can just run the following command:\n```sh\nnix run github:b3nj5m1n/xdg-ninja#xdgnj-bin ...\n```\n\n#### Building from scratch\n\nYou can use `cabal build`, `stack build`, or the provided dockerfile in _build/_.\n\n### Manually\n\nWe're going to use _git_ as an example.\n\nIt puts the file _.gitconfig_ into _$HOME_.\n\nLuckily, the XDG spec is supported by git, so we can simply move the file to _XDG_CONFIG_HOME/git/config_.\n\nWe can use that last sentence as our instructions. In this case, there are no newlines, so escaping this string for use in json is trivial, however, this is how you should generally approach it:\n```sh\necho \"Luckily, the XDG spec is supported by git, so we can simply move the file to _XDG_CONFIG_HOME/git/config_.\" | jq -aRs .\n```\n\nLet's see what the output of this command looks like for something a little more sophisticated.\nHere's an example file:\n```sh\ncat example.md\n```\n```\nCurrently not fixable.\n\n_(But you can probably just delete the dir)_\n```\nHere's what catting this file to the _jq_ command produces:\n```sh\ncat example.md | jq -aRs .\n```\n```\n\"Currently not fixable.\\n\\n_(But you can probably just delete the dir)_\\n\"\n```\n\nNow, we can assemble our final json file:\n```json\n{\n    \"name\": \"git\",\n    \"files\": [\n        {\n            \"path\": \"$HOME/.gitconfig\",\n            \"movable\": true,\n            \"help\": \"Luckily, the XDG spec is supported by git, so we can simply move the file to _XDG_CONFIG_HOME/git/config_.\\n\"\n        }\n    ]\n}\n```\n\nSaving this as _git.json_ in the _programs/_ directory will result in the script picking it up and checking the file.\n\nIf you've created a configuration for a file that isn't in the official repository yet, make sure to create a pull request so that other people can benefit from it as well."
}
