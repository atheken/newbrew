{
  "name": "eg-examples",
  "full_name": "eg-examples",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Useful examples at the command-line",
  "license": "MIT",
  "homepage": "https://github.com/srsudar/eg",
  "versions": {
    "stable": "1.2.2",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://files.pythonhosted.org/packages/5f/3f/f55eef404adae2d5429728722d6a81ad6ac50a80e9b47be046cfbe97bc44/eg-1.2.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "8d3745eceb2a4c91507b1923193747b7ae88888e6257eb8aaccf7deae2a300a7"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/eg-examples/blobs/sha256:1f330e1f5d275b7b3a99733158c3f1f30d5784d0e3c08fcef84f0db7015b9ba3",
          "sha256": "1f330e1f5d275b7b3a99733158c3f1f30d5784d0e3c08fcef84f0db7015b9ba3"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/eg-examples/blobs/sha256:1f330e1f5d275b7b3a99733158c3f1f30d5784d0e3c08fcef84f0db7015b9ba3",
          "sha256": "1f330e1f5d275b7b3a99733158c3f1f30d5784d0e3c08fcef84f0db7015b9ba3"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/eg-examples/blobs/sha256:1f330e1f5d275b7b3a99733158c3f1f30d5784d0e3c08fcef84f0db7015b9ba3",
          "sha256": "1f330e1f5d275b7b3a99733158c3f1f30d5784d0e3c08fcef84f0db7015b9ba3"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/eg-examples/blobs/sha256:719513828804556f4ee23b00a34b2043761640d853173a5eb061625b2750c073",
          "sha256": "719513828804556f4ee23b00a34b2043761640d853173a5eb061625b2750c073"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/eg-examples/blobs/sha256:719513828804556f4ee23b00a34b2043761640d853173a5eb061625b2750c073",
          "sha256": "719513828804556f4ee23b00a34b2043761640d853173a5eb061625b2750c073"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/eg-examples/blobs/sha256:719513828804556f4ee23b00a34b2043761640d853173a5eb061625b2750c073",
          "sha256": "719513828804556f4ee23b00a34b2043761640d853173a5eb061625b2750c073"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/eg-examples/blobs/sha256:63d235ccf95c73511899a4de3ec81424dc71d2b264167ffe3e0a7e173e183676",
          "sha256": "63d235ccf95c73511899a4de3ec81424dc71d2b264167ffe3e0a7e173e183676"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "python@3.11"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/eg-examples.rb",
  "ruby_source_checksum": {
    "sha256": "ae4dae8e6aa0b5d70f4994e1e2a91385882522254dc7487c9562084af051608c"
  },
  "date_added": "2018-10-20T21:24:48+02:00",
  "readme": "# eg\n\n> Useful examples at the command line.\n\n[![Build Status](https://travis-ci.org/srsudar/eg.svg?branch=master)](https://travis-ci.org/srsudar/eg)\n\n## Overview\n\n`eg` provides examples of common uses of command line tools.\n\nMan pages are great. How does `find` work, again? `man find` will tell you, but\nyou'll have to pore through all the flags and options just to figure out a\nbasic usage. And what about using `tar`? Even with the man pages `tar` is\n[famously inscrutable without the googling for examples](http://xkcd.com/1168/).\n\nNo more!\n\n`eg` will give you useful examples right at the command line. Think of it as a\ncompanion tool for `man`.\n\n> `eg` comes from _exempli gratia_, and is pronounced like the letters: \"ee\ngee\".\n\n![eg Demo](./eg-demo.gif)\n\n\n## Installation\n\n### With `pip`\n\n```shell\npip install eg\n```\n\n### With `brew`\n\n```shell\nbrew install eg-examples\n```\n\n### Run from source\n\nClone the repo and create a symlink to `eg_exec.py`. Make sure the location you\nchoose for the symlink is on your path:\n\n\n```shell\ngit clone https://github.com/srsudar/eg ./\nln -s /absolute/path/to/eg-repo/eg_exec.py /usr/local/bin/eg\n```\n\n> Note that the location of `eg_exec.py` changed in version 0.1.x in order to\nsupport Python 3 as well as 2. Old symlinks will print a message explaining the\nchange, but you'll have to update your links to point at the new location. Or\nyou can install with `pip` or `brew`.\n\n`eg` doesn't ship with a binary. Dependencies are very modest and should not\nrequire you to install anything (other than [pytest](https://docs.pytest.org) if\nyou want to run the tests).  If you find otherwise, open an issue.\n\n\n## Usage\n\n`eg <program>`\n\n`eg` takes an argument that is the name of a program for which it contains\nexamples.\n\n`eg find` will provide examples for the `find` command.\n\n`eg --list` will show all the commands for which `eg` has examples.\n\nThe complete usage statement, as shown by `eg --help`, is:\n\n```\neg [-h] [-v] [-f CONFIG_FILE] [-e EXAMPLES_DIR] [-c CUSTOM_DIR] [-p PAGER_CMD]\n   [-l] [--color] [-s] [--no-color] [program]\n```\n\n\n## How it Works\n\nFiles full of examples live in `examples/`. A naming convention is followed\nsuch that the file is the name of the tool with `.md`. E.g. the examples for\n`find` are in `find.md`.\n\n`eg find` will pipe the contents of `find.md` through `less` (although it tries\nto respect the `PAGER` environment variable).\n\n\n## Configuration and Extension\n\n`eg` works out of the box, no configuration required.\n\nIf you want to get fancy, however, `eg` can be fancy.\n\nFor example, maybe a team member always sends you bzipped tarballs and you can\nnever remember the flag for bzipping--why can't that guy just use gzip\nlike everybody else? You can create an example for untarring and unzipping\nbzipped tarballs, stick it in a file called `tar.md`, and tell `eg` where to\nfind it.\n\nThe way to think about what `eg` does is that it takes a program name, for\nexample `find`, and looks for files named `find.md` in the default and custom\ndirectories (including subdirectories). If it finds them, it pipes them through\n`less`, with the custom files at the top. Easy.\n\nThe default and custom directories can be specified at the command line like\nso:\n\n```shell\neg --examples-dir='the/default/dir' --custom-dir='my/fancy/dir' find\n```\n\nInstead of doing this every time, you can define a configuration file. It must\nbegin with a section called `eg-config` and can contain two keys: `custom-dir`\nand `examples-dir`. Here is an example of a valid config file:\n\n    [eg-config]\n    examples-dir = ~/examples-dir\n    custom-dir = ~/my/fancy/custom/dir\n\nThe config file is looked for first at `${XDG_CONFIG_HOME}/eg/egrc` and then at\n`~/.egrc`. You can also specify a different location at the command line like\nso:\n\n```shell\neg --config-file=myfile find\n```\n\n## Editing Your Custom Examples\n\nIf you want to edit one of your custom examples, you can edit the file directly\nor you can just use the `-e` or `--edit` flag.\n\nTo edit your `find` examples, for example, you could say:\n\n```shell\neg -e find\n```\n\nThis will dump you into an editor. The contents will be piped before the default\nexamples the next time you run `eg find`.\n\n## Formatting Output\n\n`eg` is highly customizable when it comes to output. You have three ways to try\nand customize what is piped out the pager, applied in this order:\n\n1. Color\n1. Squeezing out excess blank lines\n1. Regex-based substitutions\n\n### Color\n\n`eg` is colorful. The default colors were chosen to be pretty-ish while boring\nenough to not create problems for basic terminals. If you want to override\nthese colors, you can do so in the egrc in a `color` section.\n\nThings that can be colored are:\n\n* `pound`: pound sign before headings\n* `heading`: the text of headings\n* `code`: anything indented four spaces other than a leading `$`\n* `prompt`: a `$` that is indented four spaces\n* `backticks`: anything between two backticks\n\nValues passed to these options must be string literals. This allows escape\ncharacters to be inserted as needed. An egrc with heading text a nice burnt\norange might look like this:\n\n    [eg-config]\n    custom-dir = ~/my/fancy/custom/dir\n\n    [color]\n    heading = '\\x1b[38;5;172m'\n\nTo remove color altogether, for example if the color formatting is messing up\nyour output somehow, you can either pass the `--no-color` flag to `eg`, or you\ncan add an option to your egrc under the `eg-config` section like so:\n\n    [eg-config]\n    color = false\n\n\n### Squeezing Blank Lines\n\nThe example files use a lot of blank lines to try and be readable at a glance.\nNot everyone likes this many blank lines. If you hate all duplicate lines, you\ncan use your favorite pager to remove all duplicate commands, like:\n\n```\neg --pager-cmd 'less -sR' find\n```\n\nThis will use `less -sR` to page, which will format color correctly (`-R`) and\nremove all duplicate blank lines (`-s`).\n\n`eg` also provides its own custom squeezed output format, removing all blank\nlines within a single example and only putting duplicate blank lines between\nsections. This can be configured at the command line with `--squeeze` or in\nthe egrc with the `squeeze` option, like:\n\n    [eg-config]\n    squeeze = true\n\nRunning `eg --squeeze find` removes excess newlines like so:\n\n![Squeezed Output](./squeezed_output.png)\n\n\n### Regex Substitutions\n\nAdditional changes to the output can be accomplished with regular expressions\nand the egrc. Patterns and replacements are applied using Python's `re` module,\nso look to the [documentation](https://docs.python.org/2/library/re.html) for\nspecifics. Substitutions should be specified in the egrc as a list with the\nsyntax: `[pattern, replacement, compile_as_multiline]`. If\n`compile_as_multiline` is absent or `False`, the pattern will not be compiled\nas multiline, which affects the syntax expected by `re`. The `re.sub` method is\ncalled with the compiled pattern and `replacement`.\n\nSubstitutions must be named and must be in the `[substitutions]` section of the\negrc. For example, this would remove all the four-space indents beginning\nlines:\n\n    [substitutions]\n    remove-indents = ['^    ', '', True]\n\nThis powerful feature can be used to perform complex transformations, including\nsupport additional coloring of output beyond what is supported natively by\n`eg`. If you wish there was an option to remove or add blank lines, color\nsomething new, remove section symbols, etc, this is a good place to start.\n\nIf multiple substitutions are present, they are sorted by alphabetically by\nname before being applied.\n\n\n## Paging\n\nBy default, `eg` pages using `less -RMFXK`. The `-R` switch tells `less` to\ninterpret ANSI escape sequences like color rather than showing them raw. `-M`\ntells it to show line number information in the bottom of the screen. `-F` to\nautomatically quit if the entire example fits on the screen. `-X` tells it not\nto clear the screen. Finally, `-K` makes `less` exit in response to `Ctrl-C`.\n\nYou can specify a different pager using the `--pager-cmd` option at the command\nline or the `pager-cmd` option in the egrc. If specified in the egrc, the value\nmust be a string literal. For example, this egrc would use `cat` to page:\n\n    [eg-config]\n    pager-cmd = 'cat'\n\n`pydoc.pager()` does a lot of friendly error checking, so it might still be\nuseful in some situations. If you want to use `pydoc.pager()` to page, you can\npass the `pydoc.pager` as the `pager-cmd`.\n\n\n\n\n## Format and Content of Examples\n\nExample documents are written in [markdown](http://daringfireball.net/projects/markdown/syntax).\nDocuments in markdown are easily read at the command line as well as online.\nThey all follow the same basic format.\n\nThis section explains the format so that you better understand how to quickly\ngrok the examples.\n\nContributors should also pay close attention to these guidelines to keep\nexamples consistent.\n\n\n## Overview\n\nAnything indented four spaces or surrounded by backticks \\`like this\\` are\nmeant to be input or output at the command line. A single line indented four\nspaces is a user-entered command. If a block is indented four spaces, only the\nlines beginning with `$` are user-entered--anything else is output.\n\n\n### Name of the Command\n\nThe first section heading should be simply the name of the tool. It should be\nfollowed by the most rudimentary examples. Users that are familiar with the\ncommand but just forget the precise syntax should be able to see what they need\nwithout scrolling. Example commands should be as real-world as possible, with\nfile names and arguments as illustrative as possible. Examples for the `cp`\ncommand, for instance, might be:\n\n    cp original.txt copy.txt\n\nHere the `.txt` extensions indicate that these are file names, while the names\nthemselves make clear which is the already existing file and which will be the\nnewly created copy.\n\nThis section shouldn't show output and should not include the `$` to indicate\nthat we are at the command line.\n\n**This section should be a quick glance for users that know what the tool does,\nknow a basic usage is what they are trying to do, and are just looking for a\nreminder.**\n\n\n### Basic Usage\n\nNext a Basic Usage section explains the most basic usage without using real\nfile names. This section gives users that might not know the usual syntax a\nmore abstract example than the first section. It is intended to provide a more\nuseful explanation than the first entry in the man page, which typically shows\nall possible flags and arguments in a way that is not immediately obvious to\nnew users of the command. The SYNOPSIS section of the man page for `cp`, for\nexample, shows:\n\n    cp [-R [-H | -L | -P]] [-fi | -n] [-apvX] source_file ... target_directory\n\n**The Basic Usage is intended to provide less verbose, more immediately\npractical versions of the man page's SYNOPSIS section.**\n\nCommands and flags that will affect the behavior are shown as would be entered\nin the command line, while user-entered filenames and arguments that do not\nalter the command's behaviors are shown in `< >`. Examples in the Basic Usage\nsection for the `cp` command, for instance, might be:\n\n    cp -R <original_directory> <copied_directory>\n\nIn this command the `cp -R` indicate the command and behavior and thus are not\ngiven in `< >`. Case-dependent components of the command, in this case the\ndirectory to be copied and the name of the copy, are surrounded with `< >`.\nEach is wrapped in separate `< >` to make clear that it is in fact two\ndistinct arguments.\n\n### Additional Sections\n\nSubsequent subsections can be added for common uses of the tools, as\nappropriate.\n\n### Formatting\n\nAlthough markdown is readable, it can still be tricky without syntax\nhighlighting. We use spacing to help the eye.\n\n1. All code snippets are followed by at two blank lines, unless overruled by 2.\n\n2. Each line beginning a section (i.e. the first character on the line is `#`)\nshould be preceded by exactly three lines.\n\n3. Files should end with two blank lines.\n\n4. Lines should not exceed 80 characters, unless to accommodate a necessarily\n   long command or long output.\n\n\n## Contributing\n\nAdditions of new tools and new or more useful examples are welcome. `eg` should\nbe something that people want to have on their machines. If it has a man page,\nit should be included in `eg`.\n\nPlease read the Format of Examples section and review existing example files to\nget a feel for how `eg` pages should be structured.\n\nIf you find yourself turning to the internet for the same command again and\nagain, consider adding it to the examples.\n\n`eg` examples do not intend to replace man pages! `man` is useful in its own\nright. `eg` should provide quick examples in practice. Do not list all the\nflags for the sake of listing them. Assume that users will have `man`\navailable.\n\n\n### Building and Running Tests\n\n`eg` depends only on standard libraries and Python 2.x/3.x, so building should\nbe a simple matter of cloning the repo and running the executable `eg/eg.py`.\n\n`eg` uses pytest for testing, so you'll have to have it installed to run tests.\nOnce you have it, run `py.test` from **the root directory of the repo**.\n\nTests should always be expected to pass. If they fail, please open an issue,\neven if only so that we can better elucidate `eg`'s dependencies.\n\n\n## Grace Hopper Approves\n\nAlias `eg` to `woman` for something that is like `man` but a little more\npractical:\n\n```shell\n$ alias woman=eg\n$ man find\n$ woman find\n```"
}
