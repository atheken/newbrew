{
  "name": "protoc-gen-grpc-web",
  "full_name": "protoc-gen-grpc-web",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Protoc plugin that generates code for gRPC-Web clients",
  "license": "Apache-2.0",
  "homepage": "https://github.com/grpc/grpc-web",
  "versions": {
    "stable": "1.4.2",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/grpc/grpc-web/archive/1.4.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "376937b22095bdbea00f8bcd9442c1824419a99cbc37caf0967e4a0fa8b16658"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/protoc-gen-grpc-web/blobs/sha256:54e59010fc995ac571f6c76369721c28dad336723404e858cce02e893db30e61",
          "sha256": "54e59010fc995ac571f6c76369721c28dad336723404e858cce02e893db30e61"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/protoc-gen-grpc-web/blobs/sha256:b7ad14af33ee7f73663972c1ceb97727bc0fea026c1e4c16ba2913272208578d",
          "sha256": "b7ad14af33ee7f73663972c1ceb97727bc0fea026c1e4c16ba2913272208578d"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/protoc-gen-grpc-web/blobs/sha256:9d8551246e95b74f03875968666431ed0a5b9db6282c752ed49e106eb5e70034",
          "sha256": "9d8551246e95b74f03875968666431ed0a5b9db6282c752ed49e106eb5e70034"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/protoc-gen-grpc-web/blobs/sha256:70b8eac814308965112d0101ab8033ad5897c4e3c509ee9c9755583a0bccb55b",
          "sha256": "70b8eac814308965112d0101ab8033ad5897c4e3c509ee9c9755583a0bccb55b"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/protoc-gen-grpc-web/blobs/sha256:f5435c6bc4f25d62a67d56904a593640ddf4a7c868e8255f9d86620693a34873",
          "sha256": "f5435c6bc4f25d62a67d56904a593640ddf4a7c868e8255f9d86620693a34873"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/protoc-gen-grpc-web/blobs/sha256:52b8503b1b9053fc90043c83d7d3b86767a97616955b89841f4d59ab6269daa8",
          "sha256": "52b8503b1b9053fc90043c83d7d3b86767a97616955b89841f4d59ab6269daa8"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/protoc-gen-grpc-web/blobs/sha256:b839a0129eca03ab237945ff1a81249b860bb3421814dc42ca52132cb5303ecb",
          "sha256": "b839a0129eca03ab237945ff1a81249b860bb3421814dc42ca52132cb5303ecb"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/protoc-gen-grpc-web/blobs/sha256:95f9dcef9a241e6104e446900dc34fc9daafa8bc38886d3ba55cbf49b1f66cd4",
          "sha256": "95f9dcef9a241e6104e446900dc34fc9daafa8bc38886d3ba55cbf49b1f66cd4"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [
    "protobuf@3"
  ],
  "test_dependencies": [
    "node",
    "typescript"
  ],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/protoc-gen-grpc-web.rb",
  "ruby_source_checksum": {
    "sha256": "17bd6040a79b34a60e53cc1eb19488e2a708d5dbedd428119ed39af5638c742b"
  },
  "date_added": "2020-02-22T21:29:17+01:00",
  "readme": "# gRPC Web &middot; [![npm version](https://img.shields.io/npm/v/grpc-web.svg?style=flat)](https://www.npmjs.com/package/grpc-web)\n\nA JavaScript implementation of [gRPC][] for browser clients. For more information,\nincluding a **quick start**, see the [gRPC-web documentation][grpc-web-docs].\n\ngRPC-web clients connect to gRPC services via a special proxy; by default,\ngRPC-web uses [Envoy][].\n\nIn the future, we expect gRPC-web to be supported in language-specific web\nframeworks for languages such as Python, Java, and Node. For details, see the\n[roadmap](doc/roadmap.md).\n\n## Streaming Support\ngRPC-web currently supports 2 RPC modes:\n- Unary RPCs ([example](#make-a-unary-rpc-call))\n- Server-side Streaming RPCs ([example](#server-side-streaming)) (NOTE: Only when [`grpcwebtext`](#wire-format-mode) mode is used.)\n\nClient-side and Bi-directional streaming is not currently supported (see [streaming roadmap](doc/streaming-roadmap.md)).\n\n## Quick Start\n\nEager to get started? Try the [Hello World example][]. From this example, you'll\nlearn how to do the following:\n\n - Define your service using protocol buffers\n - Implement a simple gRPC Service using NodeJS\n - Configure the Envoy proxy\n - Generate protobuf message classes and client service stub for the client\n - Compile all the JS dependencies into a static library that can be consumed\n   by the browser easily\n\n## Advanced Demo: Browser Echo App\n\nYou can also try to run a more advanced Echo app from the browser with a\nstreaming example.\n\nFrom the repo root directory:\n\n```sh\n$ docker-compose pull prereqs node-server envoy commonjs-client\n$ docker-compose up node-server envoy commonjs-client\n```\n\nOpen a browser tab, and visit http://localhost:8081/echotest.html.\n\nTo shutdown: `docker-compose down`.\n\n## Runtime Library\n\nThe gRPC-web runtime library is available at `npm`:\n\n```sh\n$ npm i grpc-web\n```\n\n## Code Generator Plugin\n\nYou can download the `protoc-gen-grpc-web` protoc plugin from our\n[release](https://github.com/grpc/grpc-web/releases) page:\n\nIf you don't already have `protoc` installed, you will have to download it\nfirst from [here](https://github.com/protocolbuffers/protobuf-javascript/releases).\n\n> **NOTE:** Javascript output is no longer supported by `protocolbuffers/protobuf` package as it previously did. Please use the releases from [protocolbuffers/protobuf-javascript](https://github.com/protocolbuffers/protobuf-javascript/releases) instead.\n\nMake sure they are both executable and are discoverable from your PATH.\n\nFor example, in MacOS, you can do:\n\n```\n$ sudo mv ~/Downloads/protoc-gen-grpc-web-1.4.2-darwin-x86_64 \\\n    /usr/local/bin/protoc-gen-grpc-web\n$ chmod +x /usr/local/bin/protoc-gen-grpc-web\n```\n\n## Client Configuration Options\n\nTypically, you will run the following command to generate the proto messages\nand the service client stub from your `.proto` definitions:\n\n```sh\n$ protoc -I=$DIR echo.proto \\\n    --js_out=import_style=commonjs:$OUT_DIR \\\n    --grpc-web_out=import_style=commonjs,mode=grpcwebtext:$OUT_DIR\n```\n\nYou can then use Browserify, Webpack, Closure Compiler, etc. to resolve imports\nat compile time.\n\n### Import Style\n\n`import_style=closure`: The default generated code has\n[Closure](https://developers.google.com/closure/library/) `goog.require()`\nimport style.\n\n`import_style=commonjs`: The\n[CommonJS](https://requirejs.org/docs/commonjs.html) style `require()` is\nalso supported.\n\n`import_style=commonjs+dts`: (Experimental) In addition to above, a `.d.ts`\ntypings file will also be generated for the protobuf messages and service stub.\n\n`import_style=typescript`: (Experimental) The service stub will be generated\nin TypeScript. See **TypeScript Support** below for information on how to\ngenerate TypeScript files.\n\n**Note: The `commonjs+dts` and `typescript` styles are only supported by\n`--grpc-web_out=import_style=...`, not by `--js_out=import_style=...`.**\n\n### Wire Format Mode\n\nFor more information about the gRPC-web wire format, see the\n[specification](https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-WEB.md#protocol-differences-vs-grpc-over-http2).\n\n`mode=grpcwebtext`: The default generated code sends the payload in the\n`grpc-web-text` format.\n\n  - `Content-type: application/grpc-web-text`\n  - Payload are base64-encoded.\n  - Both unary and server streaming calls are supported.\n\n`mode=grpcweb`: A binary protobuf format is also supported.\n\n  - `Content-type: application/grpc-web+proto`\n  - Payload are in the binary protobuf format.\n  - Only unary calls are supported for now.\n\n## How It Works\n\nLet's take a look at how gRPC-web works with a simple example. You can find out\nhow to build, run and explore the example yourself in\n[Build and Run the Echo Example](net/grpc/gateway/examples/echo).\n\n### 1. Define your service\n\nThe first step when creating any gRPC service is to define it. Like all gRPC\nservices, gRPC-web uses\n[protocol buffers](https://developers.google.com/protocol-buffers) to define\nits RPC service methods and their message request and response types.\n\n```protobuf\nmessage EchoRequest {\n  string message = 1;\n}\n\n...\n\nservice EchoService {\n  rpc Echo(EchoRequest) returns (EchoResponse);\n\n  rpc ServerStreamingEcho(ServerStreamingEchoRequest)\n      returns (stream ServerStreamingEchoResponse);\n}\n```\n\n### 2. Run the server and proxy\n\nNext you need to have a gRPC server that implements the service interface and a\ngateway proxy that allows the client to connect to the server. Our example\nbuilds a simple Node gRPC backend server and the Envoy proxy.\n\nFor the Echo service: see the\n[service implementations](net/grpc/gateway/examples/echo/node-server/server.js).\n\nFor the Envoy proxy: see the\n[config yaml file](net/grpc/gateway/examples/echo/envoy.yaml).\n\n### 3. Write your JS client\n\nOnce the server and gateway are up and running, you can start making gRPC calls\nfrom the browser!\n\nCreate your client:\n\n```js\nvar echoService = new proto.mypackage.EchoServiceClient(\n  'http://localhost:8080');\n```\n\n#### Make a unary RPC call:\n\n```js\nvar request = new proto.mypackage.EchoRequest();\nrequest.setMessage(msg);\nvar metadata = {'custom-header-1': 'value1'};\nechoService.echo(request, metadata, function(err, response) {\n  if (err) {\n    console.log(err.code);\n    console.log(err.message);\n  } else {\n    console.log(response.getMessage());\n  }\n});\n```\n\n#### Server-side streaming:\n\n```js\nvar stream = echoService.serverStreamingEcho(streamRequest, metadata);\nstream.on('data', function(response) {\n  console.log(response.getMessage());\n});\nstream.on('status', function(status) {\n  console.log(status.code);\n  console.log(status.details);\n  console.log(status.metadata);\n});\nstream.on('end', function(end) {\n  // stream end signal\n});\n\n// to close the stream\nstream.cancel()\n```\n\nFor an in-depth tutorial, see [this\npage](net/grpc/gateway/examples/echo/tutorial.md).\n\n## Setting Deadline\n\nYou can set a deadline for your RPC by setting a `deadline` header. The value\nshould be a Unix timestamp, in milliseconds.\n\n```js\nvar deadline = new Date();\ndeadline.setSeconds(deadline.getSeconds() + 1);\n\nclient.sayHelloAfterDelay(request, {deadline: deadline.getTime().toString()},\n  (err, response) => {\n    // err will be populated if the RPC exceeds the deadline\n    ...\n  });\n```\n\n## TypeScript Support\n\nThe `grpc-web` module can now be imported as a TypeScript module. This is\ncurrently an experimental feature. Any feedback welcome!\n\nWhen using the `protoc-gen-grpc-web` protoc plugin, mentioned above, pass in\neither:\n\n - `import_style=commonjs+dts`: existing CommonJS style stub + `.d.ts` typings\n - `import_style=typescript`: full TypeScript output\n\nDo *not* use `import_style=typescript` for `--js_out`, it will silently be\nignored. Instead you should use `--js_out=import_style=commonjs`, or\n`--js_out=import_style=commonjs,binary` if you are using `mode=grpcweb`. The\n`--js_out` plugin will generate JavaScript code (`echo_pb.js`), and the\n`-grpc-web_out` plugin will generate a TypeScript definition file for it\n(`echo_pb.d.ts`). This is a temporary hack until the `--js_out` supports\nTypeScript itself.\n\nFor example, this is the command you should use to generate TypeScript code\nusing the binary wire format\n\n```sh\n$ protoc -I=$DIR echo.proto \\\n  --js_out=import_style=commonjs,binary:$OUT_DIR \\\n  --grpc-web_out=import_style=typescript,mode=grpcweb:$OUT_DIR\n```\n\nIt will generate the following files:\n\n* `EchoServiceClientPb.ts` - Generated by `--grpc-web_out`, contains the\nTypeScript gRPC-web code.\n* `echo_pb.js` - Generated by `--js_out`, contains the JavaScript Protobuf\ncode.\n* `echo_pb.d.ts` - Generated by `--grpc-web_out`, contains TypeScript\ndefinitions for `echo_pb.js`.\n\n```ts\nimport * as grpcWeb from 'grpc-web';\nimport {EchoServiceClient} from './EchoServiceClientPb';\nimport {EchoRequest, EchoResponse} from './echo_pb';\n\nconst echoService = new EchoServiceClient('http://localhost:8080', null, null);\n\nconst request = new EchoRequest();\nrequest.setMessage('Hello World!');\n\nconst call = echoService.echo(request, {'custom-header-1': 'value1'},\n  (err: grpcWeb.RpcError, response: EchoResponse) => {\n    console.log(response.getMessage());\n  });\ncall.on('status', (status: grpcWeb.Status) => {\n  // ...\n});\n```\n\nFor the full TypeScript example, see\n[ts-example/client.ts](net/grpc/gateway/examples/echo/ts-example/client.ts) with the [instructions](net/grpc/gateway/examples/echo/ts-example) to run.\n\n## Ecosystem\n\n### Proxy Interoperability\n\nMultiple proxies support the gRPC-web protocol.\n\n1. The current **default proxy** is [Envoy][], which supports gRPC-web out of the box.\n\n\t```sh\n\t$ docker-compose up -d node-server envoy commonjs-client\n\t```\n\n2. You can also try the [gRPC-web Go proxy][].\n\n\t```sh\n\t$ docker-compose up -d node-server grpcwebproxy binary-client\n\t```\n\n3. Apache [APISIX](https://apisix.apache.org/) has also added grpc-web support, and more details can be found [here](https://apisix.apache.org/blog/2022/01/25/apisix-grpc-web-integration/).\n\n4. [Nginx](https://www.nginx.com/) has a grpc-web module ([doc](https://nginx.org/en/docs/http/ngx_http_grpc_module.html), [announcement](https://www.nginx.com/blog/nginx-1-13-10-grpc/))), and seems to work with simple configs, according to user [feedback](https://github.com/grpc/grpc-web/discussions/1322).\n\n### Web Frameworks with gRPC-Web support\n- [Armeria (JVM)](https://armeria.dev/docs/server-grpc/#grpc-web)\n- [Tonic (Rust)](https://docs.rs/tonic-web/latest/tonic_web/)\n\n[Envoy]: https://www.envoyproxy.io\n[gRPC]: https://grpc.io\n[grpc-web-docs]: https://grpc.io/docs/languages/web\n[gRPC-web Go Proxy]: https://github.com/improbable-eng/grpc-web/tree/master/go/grpcwebproxy\n[Hello World example]: net/grpc/gateway/examples/helloworld"
}
