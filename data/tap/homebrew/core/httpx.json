{
  "name": "httpx",
  "full_name": "httpx",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Fast and multi-purpose HTTP toolkit",
  "license": "MIT",
  "homepage": "https://github.com/projectdiscovery/httpx",
  "versions": {
    "stable": "1.3.4",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/projectdiscovery/httpx/archive/refs/tags/v1.3.4.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "f9005cd1279bc1921915268d96e56556ecf99e85d564e4fd7dd65dd219ba1513"
    },
    "head": {
      "url": "https://github.com/projectdiscovery/httpx.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/httpx/blobs/sha256:cf38baa316240c7decce035664de8a5e8a5c6c45a2eaa1d6d7490b199b584890",
          "sha256": "cf38baa316240c7decce035664de8a5e8a5c6c45a2eaa1d6d7490b199b584890"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/httpx/blobs/sha256:b69063d1284094d5a0e7793432f913240d21790ba2f121013564654dedef744f",
          "sha256": "b69063d1284094d5a0e7793432f913240d21790ba2f121013564654dedef744f"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/httpx/blobs/sha256:6a79e3b42b70fc00164ca0ed048a2834b94c29f7c26d7e86e8a842cf009d75e6",
          "sha256": "6a79e3b42b70fc00164ca0ed048a2834b94c29f7c26d7e86e8a842cf009d75e6"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/httpx/blobs/sha256:acbe19638db8a571fbf67cf3cab6323eb80dddd202fe040f3a94e1fe76c1c90c",
          "sha256": "acbe19638db8a571fbf67cf3cab6323eb80dddd202fe040f3a94e1fe76c1c90c"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/httpx/blobs/sha256:7db049324bc8a4db56ff074c459c7160468ef88b1019fbeff792d53482c9f201",
          "sha256": "7db049324bc8a4db56ff074c459c7160468ef88b1019fbeff792d53482c9f201"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/httpx/blobs/sha256:f78513f35c97b5374a4ca4bc164dc9d3d6d28d75c56a5192dbaaaaf23c5c3fe5",
          "sha256": "f78513f35c97b5374a4ca4bc164dc9d3d6d28d75c56a5192dbaaaaf23c5c3fe5"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/httpx/blobs/sha256:0d1e86a283db2e647ed59717da387d66b2ca8a4b6433c5cebe3ad7ed4b87f200",
          "sha256": "0d1e86a283db2e647ed59717da387d66b2ca8a4b6433c5cebe3ad7ed4b87f200"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/httpx.rb",
  "ruby_source_checksum": {
    "sha256": "5b503da3557adbabb2e91ccc92e4840158face21f0581bfa23d37a16c7402bb0"
  },
  "date_added": "2020-09-02T07:52:56+00:00",
  "readme": "<h1 align=\"center\">\n  <img src=\"static/httpx-logo.png\" alt=\"httpx\" width=\"200px\">\n  <br>\n</h1>\n\n\n\n<p align=\"center\">\n<a href=\"https://opensource.org/licenses/MIT\"><img src=\"https://img.shields.io/badge/license-MIT-_red.svg\"></a>\n<a href=\"https://goreportcard.com/badge/github.com/projectdiscovery/httpx\"><img src=\"https://goreportcard.com/badge/github.com/projectdiscovery/httpx\"></a>\n<a href=\"https://github.com/projectdiscovery/httpx/releases\"><img src=\"https://img.shields.io/github/release/projectdiscovery/httpx\"></a>\n<a href=\"https://hub.docker.com/r/projectdiscovery/httpx\"><img src=\"https://img.shields.io/docker/pulls/projectdiscovery/httpx.svg\"></a>\n<a href=\"https://twitter.com/pdiscoveryio\"><img src=\"https://img.shields.io/twitter/follow/pdiscoveryio.svg?logo=twitter\"></a>\n<a href=\"https://discord.gg/projectdiscovery\"><img src=\"https://img.shields.io/discord/695645237418131507.svg?logo=discord\"></a>\n</p>\n\n<p align=\"center\">\n  <a href=\"#features\">Features</a> •\n  <a href=\"#installation-instructions\">Installation</a> •\n  <a href=\"#usage\">Usage</a> •\n  <a href=\"#running-httpx\">Running httpx</a> •\n  <a href=\"#notes\">Notes</a> •\n  <a href=\"https://discord.gg/projectdiscovery\">Join Discord</a>\n</p>\n\n\n`httpx` is a fast and multi-purpose HTTP toolkit that allows running multiple probes using the [retryablehttp](https://github.com/projectdiscovery/retryablehttp-go) library. It is designed to maintain result reliability with an increased number of threads.\n\n# Features\n\n<h1 align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/8293321/135731750-4c1d38b1-bd2a-40f9-88e9-3c4b9f6da378.png\" alt=\"httpx\" width=\"700px\">\n  <br>\n</h1>\n\n - Simple and modular code base making it easy to contribute.\n - Fast And fully configurable flags to probe multiple elements.\n - Supports multiple HTTP based probings.\n - Smart auto fallback from https to http as default. \n - Supports hosts, URLs and CIDR as input.\n - Handles edge cases doing retries, backoffs etc for handling WAFs.\n\n### Supported probes\n\n| Probes          | Default check | Probes         | Default check |\n|-----------------|---------------|----------------|---------------|\n| URL             | true          | IP             | true          |\n| Title           | true          | CNAME          | true          |\n| Status Code     | true          | Raw HTTP       | false         |\n| Content Length  | true          | HTTP2          | false         |\n| TLS Certificate | true          | HTTP Pipeline  | false         |\n| CSP Header      | true          | Virtual host   | false         |\n| Line Count      | true          | Word Count     | true          |\n| Location Header | true          | CDN            | false         |\n| Web Server      | true          | Paths          | false         |\n| Web Socket      | true          | Ports          | false         |\n| Response Time   | true          | Request Method | true          |\n| Favicon Hash    | false         | Probe  Status  | false         |\n| Body Hash       | true          | Header  Hash   | true          |\n| Redirect chain  | false         | URL Scheme     | true          |\n| JARM Hash       | false         | ASN            | false         |\n\n# Installation Instructions\n\n`httpx` requires **go1.20** to install successfully. Run the following command to get the repo:\n\n```sh\ngo install -v github.com/projectdiscovery/httpx/cmd/httpx@latest\n```\n\n| :exclamation:  **Disclaimer**  |\n|---------------------------------|\n| **This project is in active development**. Expect breaking changes with releases. Review the changelog before updating. |\n| This project was primarily built to be used as a standalone CLI tool. **Running it as a service may pose security risks.** It's recommended to use with caution and additional security measures. |\n\n# Usage\n\n```sh\nhttpx -h\n```\n\nThis will display help for the tool. Here are all the switches it supports.\n\n\n```console\nUsage:\n  ./httpx [flags]\n\nFlags:\nINPUT:\n   -l, -list string      input file containing list of hosts to process\n   -rr, -request string  file containing raw request\n   -u, -target string[]  input target host(s) to probe\n\nPROBES:\n   -sc, -status-code     display response status-code\n   -cl, -content-length  display response content-length\n   -ct, -content-type    display response content-type\n   -location             display response redirect location\n   -favicon              display mmh3 hash for '/favicon.ico' file\n   -hash string          display response body hash (supported: md5,mmh3,simhash,sha1,sha256,sha512)\n   -jarm                 display jarm fingerprint hash\n   -rt, -response-time   display response time\n   -lc, -line-count      display response body line count\n   -wc, -word-count      display response body word count\n   -title                display page title\n   -server, -web-server  display server name\n   -td, -tech-detect     display technology in use based on wappalyzer dataset\n   -method               display http request method\n   -websocket            display server using websocket\n   -ip                   display host ip\n   -cname                display host cname\n   -asn                  display host asn information\n   -cdn                  display cdn in use\n   -probe                display probe status\n\nHEADLESS:\n   -ss, -screenshot  enable saving screenshot of the page using headless browser\n   -system-chrome    enable using local installed chrome for screenshot\n\nMATCHERS:\n   -mc, -match-code string            match response with specified status code (-mc 200,302)\n   -ml, -match-length string          match response with specified content length (-ml 100,102)\n   -mlc, -match-line-count string     match response body with specified line count (-mlc 423,532)\n   -mwc, -match-word-count string     match response body with specified word count (-mwc 43,55)\n   -mfc, -match-favicon string[]      match response with specified favicon hash (-mfc 1494302000)\n   -ms, -match-string string          match response with specified string (-ms admin)\n   -mr, -match-regex string           match response with specified regex (-mr admin)\n   -mcdn, -match-cdn string[]         match host with specified cdn provider (incapsula, oracle, google, azure, cloudflare, cloudfront, fastly, akamai, sucuri, leaseweb)\n   -mrt, -match-response-time string  match response with specified response time in seconds (-mrt '< 1')\n   -mdc, -match-condition string      match response with dsl expression condition\n\nEXTRACTOR:\n   -er, -extract-regex string[]   display response content with matched regex\n   -ep, -extract-preset string[]  display response content matched by a pre-defined regex (url,ipv4,mail)\n\nFILTERS:\n   -fc, -filter-code string            filter response with specified status code (-fc 403,401)\n   -fep, -filter-error-page            filter response with ML based error page detection\n   -fl, -filter-length string          filter response with specified content length (-fl 23,33)\n   -flc, -filter-line-count string     filter response body with specified line count (-flc 423,532)\n   -fwc, -filter-word-count string     filter response body with specified word count (-fwc 423,532)\n   -ffc, -filter-favicon string[]      filter response with specified favicon hash (-mfc 1494302000)\n   -fs, -filter-string string          filter response with specified string (-fs admin)\n   -fe, -filter-regex string           filter response with specified regex (-fe admin)\n   -fcdn, -filter-cdn string[]         filter host with specified cdn provider (google, leaseweb, stackpath, cloudfront, fastly)\n   -frt, -filter-response-time string  filter response with specified response time in seconds (-frt '> 1')\n   -fdc, -filter-condition string      filter response with dsl expression condition\n\nRATE-LIMIT:\n   -t, -threads int              number of threads to use (default 50)\n   -rl, -rate-limit int          maximum requests to send per second (default 150)\n   -rlm, -rate-limit-minute int  maximum number of requests to send per minute\n\nMISCELLANEOUS:\n   -pa, -probe-all-ips        probe all the ips associated with same host\n   -p, -ports string[]        ports to probe (nmap syntax: eg http:1,2-10,11,https:80)\n   -path string               path or list of paths to probe (comma-separated, file)\n   -tls-probe                 send http probes on the extracted TLS domains (dns_name)\n   -csp-probe                 send http probes on the extracted CSP domains\n   -tls-grab                  perform TLS(SSL) data grabbing\n   -pipeline                  probe and display server supporting HTTP1.1 pipeline\n   -http2                     probe and display server supporting HTTP2\n   -vhost                     probe and display server supporting VHOST\n   -ldv, -list-dsl-variables  list json output field keys name that support dsl matcher/filter\n\nUPDATE:\n   -up, -update                 update httpx to latest version\n   -duc, -disable-update-check  disable automatic httpx update check\n\nOUTPUT:\n   -o, -output string                  file to write output results\n   -oa, -output-all                    filename to write output results in all formats\n   -sr, -store-response                store http response to output directory\n   -srd, -store-response-dir string    store http response to custom directory\n   -csv                                store output in csv format\n   -csvo, -csv-output-encoding string  define output encoding\n   -json                               store output in JSONL(ines) format\n   -irr, -include-response             include http request/response in JSON output (-json only)\n   -irrb, -include-response-base64     include base64 encoded http request/response in JSON output (-json only)\n   -include-chain                      include redirect http chain in JSON output (-json only)\n   -store-chain                        include http redirect chain in responses (-sr only)\n\nCONFIGURATIONS:\n   -r, -resolvers string[]       list of custom resolver (file or comma separated)\n   -allow string[]               allowed list of IP/CIDR's to process (file or comma separated)\n   -deny string[]                denied list of IP/CIDR's to process (file or comma separated)\n   -sni, -sni-name string        custom TLS SNI name\n   -random-agent                 enable Random User-Agent to use (default true)\n   -H, -header string[]          custom http headers to send with request\n   -http-proxy, -proxy string    http proxy to use (eg http://127.0.0.1:8080)\n   -unsafe                       send raw requests skipping golang normalization\n   -resume                       resume scan using resume.cfg\n   -fr, -follow-redirects        follow http redirects\n   -maxr, -max-redirects int     max number of redirects to follow per host (default 10)\n   -fhr, -follow-host-redirects  follow redirects on the same host\n   -vhost-input                  get a list of vhosts as input\n   -x string                     request methods to probe, use 'all' to probe all HTTP methods\n   -body string                  post body to include in http request\n   -s, -stream                   stream mode - start elaborating input targets without sorting\n   -sd, -skip-dedupe             disable dedupe input items (only used with stream mode)\n   -ldp, -leave-default-ports    leave default http/https ports in host header (eg. http://host:80 - https://host:443\n   -ztls                         use ztls library with autofallback to standard one for tls13\n   -no-decode                    avoid decoding body\n   -tlsi, -tls-impersonate  enable random tls client (ja3) impersonation (experimental)\n   -no-stdin                     Disable Stdin processing\n\nDEBUG:\n   -health-check, -hc        run diagnostic check up\n   -debug                    display request/response content in cli\n   -debug-req                display request content in cli\n   -debug-resp               display response content in cli\n   -version                  display httpx version\n   -stats                    display scan statistic\n   -profile-mem string       optional httpx memory profile dump file\n   -silent                   silent mode\n   -v, -verbose              verbose mode\n   -si, -stats-interval int  number of seconds to wait between showing a statistics update (default: 5)\n   -nc, -no-color            disable colors in cli output\n\nOPTIMIZATIONS:\n   -nf, -no-fallback                  display both probed protocol (HTTPS and HTTP)\n   -nfs, -no-fallback-scheme          probe with protocol scheme specified in input \n   -maxhr, -max-host-error int        max error count per host before skipping remaining path/s (default 30)\n   -ec, -exclude-cdn                  skip full port scans for CDNs (only checks for 80,443)\n   -retries int                       number of retries\n   -timeout int                       timeout in seconds (default 5)\n   -delay duration                    duration between each http request (eg: 200ms, 1s) (default -1ns)\n   -rsts, -response-size-to-save int  max response size to save in bytes (default 2147483647)\n   -rstr, -response-size-to-read int  max response size to read in bytes (default 2147483647)\n```\n\n# Running httpX\n\n### URL Probe\n\nThis will run the tool against all the hosts and subdomains in `hosts.txt` and returns URLs running HTTP webserver. \n\n```console\ncat hosts.txt | httpx \n\n    __    __  __       _  __\n   / /_  / /_/ /_____ | |/ /\n  / __ \\/ __/ __/ __ \\|   / \n / / / / /_/ /_/ /_/ /   |  \n/_/ /_/\\__/\\__/ .___/_/|_|   v1.1.1  \n             /_/            \n\n    projectdiscovery.io\n\n[WRN] Use with caution. You are responsible for your actions\n[WRN] Developers assume no liability and are not responsible for any misuse or damage.\n\nhttps://mta-sts.managed.hackerone.com\nhttps://mta-sts.hackerone.com\nhttps://mta-sts.forwarding.hackerone.com\nhttps://docs.hackerone.com\nhttps://www.hackerone.com\nhttps://resources.hackerone.com\nhttps://api.hackerone.com\nhttps://support.hackerone.com\n```\n\n### File Input\n\nThis will run the tool with the `-probe` flag against all the hosts in **hosts.txt** and return URLs with probed status.\n\n```console\nhttpx -list hosts.txt -silent -probe\n\nhttp://ns.hackerone.com [FAILED]\nhttps://docs.hackerone.com [SUCCESS]\nhttps://mta-sts.hackerone.com [SUCCESS]\nhttps://mta-sts.managed.hackerone.com [SUCCESS]\nhttp://email.hackerone.com [FAILED]\nhttps://mta-sts.forwarding.hackerone.com [SUCCESS]\nhttp://links.hackerone.com [FAILED]\nhttps://api.hackerone.com [SUCCESS]\nhttps://www.hackerone.com [SUCCESS]\nhttp://events.hackerone.com [FAILED]\nhttps://support.hackerone.com [SUCCESS]\nhttps://gslink.hackerone.com [SUCCESS]\nhttp://o1.email.hackerone.com [FAILED]\nhttp://info.hackerone.com [FAILED]\nhttps://resources.hackerone.com [SUCCESS]\nhttp://o2.email.hackerone.com [FAILED]\nhttp://o3.email.hackerone.com [FAILED]\nhttp://go.hackerone.com [FAILED]\nhttp://a.ns.hackerone.com [FAILED]\nhttp://b.ns.hackerone.com [FAILED]\n```\n\n### CIDR Input   \n\n```console\necho 173.0.84.0/24 | httpx -silent\n\nhttps://173.0.84.29\nhttps://173.0.84.43\nhttps://173.0.84.31\nhttps://173.0.84.44\nhttps://173.0.84.12\nhttps://173.0.84.4\nhttps://173.0.84.36\nhttps://173.0.84.45\nhttps://173.0.84.14\nhttps://173.0.84.25\nhttps://173.0.84.46\nhttps://173.0.84.24\nhttps://173.0.84.32\nhttps://173.0.84.9\nhttps://173.0.84.13\nhttps://173.0.84.6\nhttps://173.0.84.16\nhttps://173.0.84.34\n```\n### AS Number Input\n```console\necho AS14421 | httpx -silent\n\nhttps://216.101.17.248\nhttps://216.101.17.249\nhttps://216.101.17.250\nhttps://216.101.17.251\nhttps://216.101.17.252\n```\n\n### Tool Chain\n\n\n```console\nsubfinder -d hackerone.com -silent| httpx -title -tech-detect -status-code\n\n    __    __  __       _  __\n   / /_  / /_/ /_____ | |/ /\n  / __ \\/ __/ __/ __ \\|   /\n / / / / /_/ /_/ /_/ /   |\n/_/ /_/\\__/\\__/ .___/_/|_|\n             /_/              v1.1.1\n\n    projectdiscovery.io\n\nUse with caution. You are responsible for your actions\nDevelopers assume no liability and are not responsible for any misuse or damage.\nhttps://mta-sts.managed.hackerone.com [404] [Page not found · GitHub Pages] [Varnish,GitHub Pages,Ruby on Rails]\nhttps://mta-sts.hackerone.com [404] [Page not found · GitHub Pages] [Varnish,GitHub Pages,Ruby on Rails]\nhttps://mta-sts.forwarding.hackerone.com [404] [Page not found · GitHub Pages] [GitHub Pages,Ruby on Rails,Varnish]\nhttps://docs.hackerone.com [200] [HackerOne Platform Documentation] [Ruby on Rails,jsDelivr,Gatsby,React,webpack,Varnish,GitHub Pages]\nhttps://support.hackerone.com [301,302,301,200] [HackerOne] [Cloudflare,Ruby on Rails,Ruby]\nhttps://resources.hackerone.com [301,301,404] [Sorry, no Folders found.]\n```\n\n### Error Page Classifier and Filtering\n\nThe Error Page Classifier and Filtering feature aims to add intelligence to the tool by enabling it to classify and filter out common error pages returned by web applications. It is an enhancement to the existing httpx capabilities and is geared towards reducing the noise in the results and helping users focus on what matters most.\n\n```console\nhttpx -l urls.txt -path /v1/api -fep\n\n    __    __  __       _  __\n   / /_  / /_/ /_____ | |/ /\n  / __ \\/ __/ __/ __ \\|   /\n / / / / /_/ /_/ /_/ /   |\n/_/ /_/\\__/\\__/ .___/_/|_|\n             /_/\n\n                projectdiscovery.io\n\n[INF] Current httpx version v1.3.3 (latest)\nhttps://scanme.sh/v1/api\n```\n\nFiltered error pages are stored to predefined file `filtered_error_page.json` in jsonline format when `-filter-error-page` option is used.\n\n### Favicon Hash\n\n\n```console\nsubfinder -d hackerone.com -silent | httpx -favicon\n\n    __    __  __       _  __\n   / /_  / /_/ /_____ | |/ /\n  / __ \\/ __/ __/ __ \\|   /\n / / / / /_/ /_/ /_/ /   |\n/_/ /_/\\__/\\__/ .___/_/|_|\n             /_/              v1.1.5\n\n      projectdiscovery.io\n\nUse with caution. You are responsible for your actions.\nDevelopers assume no liability and are not responsible for any misuse or damage.\nhttps://docs.hackerone.com/favicon.ico [595148549]\nhttps://hackerone.com/favicon.ico [595148549]\nhttps://mta-sts.managed.hackerone.com/favicon.ico [-1700323260]\nhttps://mta-sts.forwarding.hackerone.com/favicon.ico [-1700323260]\nhttps://support.hackerone.com/favicon.ico [-1279294674]\nhttps://gslink.hackerone.com/favicon.ico [1506877856]\nhttps://resources.hackerone.com/favicon.ico [-1840324437]\nhttps://api.hackerone.com/favicon.ico [566218143]\nhttps://mta-sts.hackerone.com/favicon.ico [-1700323260]\nhttps://www.hackerone.com/favicon.ico [778073381]\n```\n\n### [JARM Fingerprint](https://github.com/salesforce/jarm)\n\n\n```console\nsubfinder -d hackerone.com -silent | httpx -jarm\n    __    __  __       _  __\n   / /_  / /_/ /_____ | |/ /\n  / __ \\/ __/ __/ __ \\|   /\n / / / / /_/ /_/ /_/ /   |\n/_/ /_/\\__/\\__/ .___/_/|_|\n             /_/              v1.2.1\n\n      projectdiscovery.io\n\nUse with caution. You are responsible for your actions.\nDevelopers assume no liability and are not responsible for any misuse or damage.\nhttps://www.hackerone.com [29d3dd00029d29d00042d43d00041d5de67cc9954cc85372523050f20b5007]\nhttps://mta-sts.hackerone.com [29d29d00029d29d00042d43d00041d2aa5ce6a70de7ba95aef77a77b00a0af]\nhttps://mta-sts.managed.hackerone.com [29d29d00029d29d00042d43d00041d2aa5ce6a70de7ba95aef77a77b00a0af]\nhttps://docs.hackerone.com [29d29d00029d29d00042d43d00041d2aa5ce6a70de7ba95aef77a77b00a0af]\nhttps://support.hackerone.com [29d3dd00029d29d00029d3dd29d29d5a74e95248e58a6162e37847a24849f7]\nhttps://api.hackerone.com [29d3dd00029d29d00042d43d00041d5de67cc9954cc85372523050f20b5007]\nhttps://mta-sts.forwarding.hackerone.com [29d29d00029d29d00042d43d00041d2aa5ce6a70de7ba95aef77a77b00a0af]\nhttps://resources.hackerone.com [2ad2ad0002ad2ad0002ad2ad2ad2ad043bfbd87c13813505a1b60adf4f6ff5]\n```\n\n### ASN Fingerprint\n\n\n```console\nsubfinder -d hackerone.com -silent | httpx -asn\n    __    __  __       _  __\n   / /_  / /_/ /_____ | |/ /\n  / __ \\/ __/ __/ __ \\|   /\n / / / / /_/ /_/ /_/ /   |\n/_/ /_/\\__/\\__/ .___/_/|_|\n             /_/              v1.2.1\n\n      projectdiscovery.io\n\nUse with caution. You are responsible for your actions.\nDevelopers assume no liability and are not responsible for any misuse or damage.\nhttps://mta-sts.managed.hackerone.com [AS54113, FASTLY, US]\nhttps://gslink.hackerone.com [AS16509, AMAZON-02, US]\nhttps://www.hackerone.com [AS13335, CLOUDFLARENET, US]\nhttps://mta-sts.forwarding.hackerone.com [AS54113, FASTLY, US]\nhttps://resources.hackerone.com [AS16509, AMAZON-02, US]\nhttps://support.hackerone.com [AS13335, CLOUDFLARENET, US]\nhttps://mta-sts.hackerone.com [AS54113, FASTLY, US]\nhttps://docs.hackerone.com [AS54113, FASTLY, US]\nhttps://api.hackerone.com [AS13335, CLOUDFLARENET, US]\n```\n\n\n### File/Path Bruteforce\n\n\n```console\nhttpx -l urls.txt -path /v1/api -sc\n\n    __    __  __       _  __\n   / /_  / /_/ /_____ | |/ /\n  / __ \\/ __/ __/ __ \\|   /\n / / / / /_/ /_/ /_/ /   |\n/_/ /_/\\__/\\__/ .___/_/|_|\n             /_/              v1.1.5\n\n      projectdiscovery.io\n\nUse with caution. You are responsible for your actions.\nDevelopers assume no liability and are not responsible for any misuse or damage.\nhttps://mta-sts.managed.hackerone.com/v1/api [404]\nhttps://mta-sts.hackerone.com/v1/api [404]\nhttps://mta-sts.forwarding.hackerone.com/v1/api [404]\nhttps://docs.hackerone.com/v1/api [404]\nhttps://api.hackerone.com/v1/api [401]\nhttps://hackerone.com/v1/api [302]\nhttps://support.hackerone.com/v1/api [404]\nhttps://resources.hackerone.com/v1/api [301]\nhttps://gslink.hackerone.com/v1/api [404]\nhttp://www.hackerone.com/v1/api [301]\n```\n\n### Docker Run\n\n```console\ncat sub_domains.txt | docker run -i projectdiscovery/httpx\n\n    __    __  __       _  __\n   / /_  / /_/ /_____ | |/ /\n  / __ \\/ __/ __/ __ \\|   /\n / / / / /_/ /_/ /_/ /   |\n/_/ /_/\\__/\\__/ .___/_/|_|\n             /_/              v1.1.2\n\n      projectdiscovery.io\n\nUse with caution. You are responsible for your actions\nDevelopers assume no liability and are not responsible for any misuse or damage.\nhttps://mta-sts.forwarding.hackerone.com\nhttps://mta-sts.hackerone.com\nhttps://mta-sts.managed.hackerone.com\nhttps://www.hackerone.com\nhttps://api.hackerone.com\nhttps://gslink.hackerone.com\nhttps://resources.hackerone.com\nhttps://docs.hackerone.com\nhttps://support.hackerone.com\n```\n\n### Screenshot\n\nLatest addition to the project, the addition of the `-screenshot` option in httpx, a powerful new feature that allows users to take screenshots of target URLs, pages, or endpoints along with the rendered DOM. This functionality enables the **visual content discovery process**, providing a comprehensive view of the target's visual appearance.\n\nRendered DOM body is also included in json line output when `-screenshot` option is used with `-json` option.\n\n#### 🚩 Usage\n\nTo use the screenshot feature, simply add the `-screenshot` flag to your httpx command:\n\n```console\nhttpx -screenshot -u https://example.com\n```\n\n🎯 Domain, Subdomain, and Path Support\nThe `-screenshot` option is versatile and can be used to capture screenshots for domains, subdomains, and even specific paths when used in conjunction with the `-path` option:\n\n```console\nhttpx -screenshot -u example.com\nhttpx -screenshot -u https://example.com/login\nhttpx -screenshot -path fuzz_path.txt -u https://example.com\n```\n\nUsing with other tools:\n\n```console\nsubfinder -d example.com | httpx -screenshot\n```\n\n#### 🌐 System Chrome\n\nBy default, httpx will use the go-rod library to install and manage Chrome for taking screenshots. However, if you prefer to use your locally installed system Chrome, add the `-system-chrome` flag:\n\n```console\nhttpx -screenshot -system-chrome -u https://example.com\n```\n\n#### 📁 Output Directory\n\nScreenshots are stored in the output/screenshot directory by default. To specify a custom output directory, use the `-srd` option:\n\n```console\nhttpx -screenshot -srd /path/to/custom/directory -u https://example.com\n```\n\n#### ⏳ Performance Considerations\n\nPlease note that since screenshots are captured using a headless browser, httpx runs will be slower when using the `-screenshot` option.\n\n### Using `httpx` as a library\n`httpx` can be used as a library by creating an instance of the `Option` struct and populating it with the same options that would be specified via CLI. Once validated, the struct should be passed to a runner instance (to be closed at the end of the program) and the `RunEnumeration` method should be called. A minimal example of how to do it is in the [examples](examples/) folder\n\n# Notes\n\n- As default, `httpx` probe with **HTTPS** scheme and fall-back to **HTTP** only if **HTTPS** is not reachable.\n- The `-no-fallback` flag can be used to probe and display both **HTTP** and **HTTPS** result.\n- Custom scheme for ports can be defined, for example `-ports http:443,http:80,https:8443`\n- Custom resolver supports multiple protocol (**doh|tcp|udp**) in form of `protocol:resolver:port` (e.g. `udp:127.0.0.1:53`)\n- The following flags should be used for specific use cases instead of running them as default with other probes:\n   - `-ports`\n   - `-path`\n   - `-vhost`\n   - `-screenshot`\n   - `-csp-probe`\n   - `-tls-probe`\n   - `-favicon`\n   - `-http2`\n   - `-pipeline`\n   - `-tls-impersonate`\n\n\n# Acknowledgement\n\nProbing feature is inspired by [@tomnomnom/httprobe](https://github.com/tomnomnom/httprobe) work ❤️\n\n\n--------\n\n<div align=\"center\">\n\n`httpx` is made with 💙 by the [projectdiscovery](https://projectdiscovery.io) team and distributed under [MIT License](LICENSE.md).\n\n\n<a href=\"https://discord.gg/projectdiscovery\"><img src=\"https://raw.githubusercontent.com/projectdiscovery/nuclei-burp-plugin/main/static/join-discord.png\" width=\"300\" alt=\"Join Discord\"></a>\n\n</div>"
}
