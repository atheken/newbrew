{
  "name": "cargo-outdated",
  "full_name": "cargo-outdated",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Cargo subcommand for displaying when Rust dependencies are out of date",
  "license": "MIT",
  "homepage": "https://github.com/kbknapp/cargo-outdated",
  "versions": {
    "stable": "0.13.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/kbknapp/cargo-outdated/archive/v0.13.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "571910b0c44f0bcf0b6e5c24184247e4603f474c7bde5f0eaa1203ce802b4a4a"
    },
    "head": {
      "url": "https://github.com/kbknapp/cargo-outdated.git",
      "branch": "master"
    }
  },
  "revision": 1,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cargo-outdated/blobs/sha256:a091b1d33b8993cccaadd3226b18e47123387abf7926d0077c457942e70b7dfe",
          "sha256": "a091b1d33b8993cccaadd3226b18e47123387abf7926d0077c457942e70b7dfe"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cargo-outdated/blobs/sha256:20e674b341efba24dd8c4d8e5b35e138d348f5f62d0a0883ef348f44f540ef54",
          "sha256": "20e674b341efba24dd8c4d8e5b35e138d348f5f62d0a0883ef348f44f540ef54"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cargo-outdated/blobs/sha256:2b811bb18b558bbe8290c62f9b3c8de03305a8ef80f4361f7f98aa8ba6f27546",
          "sha256": "2b811bb18b558bbe8290c62f9b3c8de03305a8ef80f4361f7f98aa8ba6f27546"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cargo-outdated/blobs/sha256:488b9c21900f86bce7ec670eb513bd1a567e3d5fec37cfa2532a8bf6912f2c5e",
          "sha256": "488b9c21900f86bce7ec670eb513bd1a567e3d5fec37cfa2532a8bf6912f2c5e"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cargo-outdated/blobs/sha256:6682da0e97842b793ec175289492b8e53c9943d0fc5cc34a8de99f29d2db3e47",
          "sha256": "6682da0e97842b793ec175289492b8e53c9943d0fc5cc34a8de99f29d2db3e47"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cargo-outdated/blobs/sha256:3c990f4910559e35b00487de1ed368f14f047c6ce9d18597fe2bedcd224da740",
          "sha256": "3c990f4910559e35b00487de1ed368f14f047c6ce9d18597fe2bedcd224da740"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cargo-outdated/blobs/sha256:f869e828ca53e03d6b976af8bd71cba0c5b558713b80b8bf5703f2b0049048d2",
          "sha256": "f869e828ca53e03d6b976af8bd71cba0c5b558713b80b8bf5703f2b0049048d2"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "pkg-config",
    "rust"
  ],
  "dependencies": [
    "libgit2",
    "openssl@3"
  ],
  "test_dependencies": [
    "rustup-init"
  ],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/cargo-outdated.rb",
  "ruby_source_checksum": {
    "sha256": "69468210d9009157543938872aa3b45e87afe7ca499544a6f27efadffe73dc3b"
  },
  "date_added": "2021-08-23T16:00:14+00:00",
  "readme": "# cargo-outdated\n\n[![Join the chat at https://gitter.im/kbknapp/cargo-outdated](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/kbknapp/cargo-outdated?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) [![crates.io](https://img.shields.io/crates/v/cargo-outdated.svg)](https://crates.io/crates/cargo-outdated)\nLinux: [![Build Status](https://travis-ci.org/kbknapp/cargo-outdated.svg?branch=master)](https://travis-ci.org/kbknapp/cargo-outdated)\n\nA cargo subcommand for displaying when Rust dependencies are out of date\n\n## About\n\n`cargo-outdated` is for displaying when dependencies have newer versions available.\n\n## How it works\n\nThe functionality of `cargo-outdated` largely depends on the `cargo` builtin command `cargo update`.\n\nTo retrieve the list of available SemVer compatible dependencies, `cargo-outdated` firstly creates a temporary workspace, then executes `cargo update` against it, finally compares the temporary dependency tree with the original one.\n\nSimilarly, to check the latest dependencies, `cargo-outdated` replaces the SemVer requirements of *direct* dependencies with wildcards then goes through the same process.\n\n## Demo\n\nOnce installed (see below) running `cargo outdated` in a project directory looks like the following:\n\n```text\n$ cargo outdated\nName             Project  Compat  Latest   Kind         Platform\n----             -------  ------  ------   ----         --------\nclap             2.20.0   2.20.5  2.26.0   Normal       ---\nclap->bitflags   0.7.0    ---     0.9.1    Normal       ---\nclap->libc       0.2.18   0.2.29  Removed  Normal       ---\nclap->term_size  0.2.1    0.2.3   0.3.0    Normal       ---\nclap->vec_map    0.6.0    ---     0.8.0    Normal       ---\nnum_cpus         1.6.0    ---     1.6.2    Development  ---\nnum_cpus->libc   0.2.18   0.2.29  0.2.29   Normal       ---\npkg-config       0.3.8    0.3.9   0.3.9    Build        ---\nterm             0.4.5    ---     0.4.6    Normal       ---\nterm_size->libc  0.2.18   0.2.29  0.2.29   Normal       cfg(not(target_os = \"windows\"))\n```\n\n## Installing\n\n<a href=\"https://repology.org/project/cargo-outdated/versions\"><img align=\"right\" src=\"https://repology.org/badge/vertical-allrepos/cargo-outdated.svg\" alt=\"Packaging status\"></a>\n\nThe latest version of `cargo-outdated` can be installed or updated with `cargo install`:\n\n```sh\ncargo install --locked cargo-outdated\n```\nor\n\n```sh\ncargo install --locked --git https://github.com/kbknapp/cargo-outdated\n```\n\n## Compiling\n\nFollow these instructions to compile `cargo-outdated`, then skip down to Installation.\n\n 1. Ensure you have current version of `cargo` and [Rust](https://www.rust-lang.org) installed\n 2. Clone the project `$ git clone https://github.com/kbknapp/cargo-outdated && cd cargo-outdated`\n 3. Build the project `$ cargo build --release`\n 4. Once complete, the binary will be located at `target/release/cargo-outdated`\n\n## Installation and Usage\n\nAll you need to do is place `cargo-outdated` somewhere in your `$PATH`. Then run `cargo outdated` anywhere in your project directory. For full details see below.\n\n### Linux / OS X\n\nYou have two options, place `cargo-outdated` into a directory that is already located in your `$PATH` variable (To see which directories those are, open a terminal and type `echo \"${PATH//:/\\n}\"`, the quotation marks are important), or you can add a custom directory to your `$PATH`\n\n**Option 1**\nIf you have write permission to a directory listed in your `$PATH` or you have root permission (or via `sudo`), simply copy the `cargo-outdated` to that directory `# sudo cp cargo-outdated /usr/local/bin`\n\n**Option 2**\nIf you do not have root, `sudo`, or write permission to any directory already in `$PATH` you can create a directory inside your home directory, and add that. Many people use `$HOME/.bin` to keep it hidden (and not clutter your home directory), or `$HOME/bin` if you want it to be always visible. Here is an example to make the directory, add it to `$PATH`, and copy `cargo-outdated` there.\n\nSimply change `bin` to whatever you'd like to name the directory, and `.bashrc` to whatever your shell startup file is (usually `.bashrc`, `.bash_profile`, or `.zshrc`)\n\n```sh\nmkdir ~/bin\necho \"export PATH=$PATH:$HOME/bin\" >> ~/.bashrc\ncp cargo-outdated ~/bin\nsource ~/.bashrc\n```\n\n### MacOS\n\nThis library depends on OpenSSL. On MacOS a newer version of OpenSSL than is installed by default is needed. This can be installed with Homebrew via `brew install openssl` or openssl can be vendored in with `--features vendored-openssl`. [Learn more about building OpenSSL here](https://docs.rs/openssl/0.10.30/openssl/#building),\n\n### Windows\n\nOn Windows 7/8 you can add directory to the `PATH` variable by opening a command line as an administrator and running\n\n```sh\nsetx path \"%path%;C:\\path\\to\\cargo-outdated\\binary\"\n```\n\nOtherwise, ensure you have the `cargo-outdated` binary in the directory which you operating in the command line from, because Windows automatically adds your current directory to PATH (i.e. if you open a command line to `C:\\my_project\\` to use `cargo-outdated` ensure `cargo-outdated.exe` is inside that directory as well).\n\n\n### Options\n\nThere are a few options for using `cargo-outdated` which should be somewhat self explanatory.\n\n```text\nDisplays information about project dependency versions\n\nUSAGE:\n    cargo outdated [options]\n\nOptions:\n    -a, --aggressive            Ignores channels for latest updates\n    -h, --help                  Prints help information\n        --format FORMAT         Output formatting [default: list]\n                                [values: list, json]\n    -i, --ignore DEPENDENCIES   Comma separated list of dependencies to not print in the output\n    -x, --exclude DEPENDENCIES  Comma separated list of dependencies to exclude from building\n    -q, --quiet                 Suppresses warnings\n    -R, --root-deps-only        Only check root dependencies (Equivalent to --depth=1)\n    -V, --version               Prints version information\n    -v, --verbose ...           Use verbose output\n    -w, --workspace             Checks updates for all workspace members rather than\n                                only the root package\n        --color COLOR           Coloring: auto, always, never [default: auto]\n                                [values: auto, always, never]\n    -d, --depth NUM             How deep in the dependency chain to search\n                                (Defaults to all dependencies when omitted)\n        --exit-code NUM         The exit code to return on new versions found [default: 0]\n        --features FEATURES     Space-separated list of features\n    -m, --manifest-path FILE    Path to the Cargo.toml file to use\n                                (Defaults to Cargo.toml in project root)\n    -p, --packages PKGS         Packages to inspect for updates\n    -r, --root ROOT             Package to treat as the root package\n```\n\n## Minimum Supported Rust Version (MSRV)\n\nThe MSRV of this crate is what is required to _run_ `cargo outdated`, you may be able to compile \n`cargo outdated` itself on an earlier version of Rust. However, because `cargo oudated` uses \n`cargo` internally, it requires a specific minimum version to run successfully.\n\nThe current MSRV can be found in the `Cargo.toml` under the `package.rust-version` field.\n\n## License\n\n`cargo-outdated` is released under the terms of either the MIT or Apache 2.0 license. See the LICENSE-MIT or LICENSE-APACHE file for the details."
}
