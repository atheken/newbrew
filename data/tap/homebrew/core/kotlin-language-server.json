{
  "name": "kotlin-language-server",
  "full_name": "kotlin-language-server",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Intelligent Kotlin support for any editor/IDE using the Language Server Protocol",
  "license": "MIT",
  "homepage": "https://github.com/fwcd/kotlin-language-server",
  "versions": {
    "stable": "1.3.3",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/fwcd/kotlin-language-server/archive/refs/tags/1.3.3.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "11d405dc6d499fdb6c6c6fa0b58cce83af936c10b47d96dcc459ef0df9d97401"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kotlin-language-server/blobs/sha256:ccf99a91267d4a134f52c11f349421c211f16a6635645a8a0317d6fd6bbc9561",
          "sha256": "ccf99a91267d4a134f52c11f349421c211f16a6635645a8a0317d6fd6bbc9561"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kotlin-language-server/blobs/sha256:040ccb58cd945d930e9b4f82c61f112b507088daa84a8c5ed2cbcb1519061e5c",
          "sha256": "040ccb58cd945d930e9b4f82c61f112b507088daa84a8c5ed2cbcb1519061e5c"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kotlin-language-server/blobs/sha256:043173010ab473c51450df4bad41f1dde203cc7e4236935d220863a2a082cd20",
          "sha256": "043173010ab473c51450df4bad41f1dde203cc7e4236935d220863a2a082cd20"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kotlin-language-server/blobs/sha256:4d55f1cd808cd1e0c9aa3aa080092f61033463186bdd465aeb631220a16e1357",
          "sha256": "4d55f1cd808cd1e0c9aa3aa080092f61033463186bdd465aeb631220a16e1357"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kotlin-language-server/blobs/sha256:d5406fb2155b3d1e7e6bfb8de885c24c6770fda1d934c5c79bde1074fccdcbce",
          "sha256": "d5406fb2155b3d1e7e6bfb8de885c24c6770fda1d934c5c79bde1074fccdcbce"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kotlin-language-server/blobs/sha256:19941a5706422aa317aa632f88e8f163c1ad06c5a4236eb8e8508e645fc9b61f",
          "sha256": "19941a5706422aa317aa632f88e8f163c1ad06c5a4236eb8e8508e645fc9b61f"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kotlin-language-server/blobs/sha256:b9ff93fa5087d11852f12d15d921da00518fdd6f55fa80ac52662cc2e117737e",
          "sha256": "b9ff93fa5087d11852f12d15d921da00518fdd6f55fa80ac52662cc2e117737e"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "gradle"
  ],
  "dependencies": [
    "openjdk@17"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/kotlin-language-server.rb",
  "ruby_source_checksum": {
    "sha256": "0b6cf13ea0aed987dde6596c84d7203cd74bdf953f1dd2efaf9f9bdfd0cccfc1"
  },
  "date_added": "2021-03-04T12:02:47+00:00",
  "readme": "# Kotlin Language Server\n\n[![Release](https://img.shields.io/github/release/fwcd/kotlin-language-server)](https://github.com/fwcd/kotlin-language-server/releases)\n[![Build](https://github.com/fwcd/kotlin-language-server/actions/workflows/build.yml/badge.svg)](https://github.com/fwcd/kotlin-language-server/actions/workflows/build.yml)\n[![Downloads](https://img.shields.io/github/downloads/fwcd/kotlin-language-server/total)](https://github.com/fwcd/kotlin-language-server/releases)\n[![Chat](https://img.shields.io/badge/chat-on%20discord-7289da)](https://discord.gg/cNtppzN)\n\nA [language server](https://microsoft.github.io/language-server-protocol/) that provides smart code completion, diagnostics, hover, document symbols, definition lookup, method signature help and more for [Kotlin](https://kotlinlang.org).\n\n![Icon](Icon128.png)\n\nAny editor conforming to LSP is supported, including [VSCode](https://github.com/fwcd/vscode-kotlin) and [Atom](https://github.com/fwcd/atom-ide-kotlin).\n\n## Getting Started\n\n* See [BUILDING.md](BUILDING.md) for build instructions\n* See [Editor Integration](EDITORS.md) for editor-specific instructions\n* See [Troubleshooting](TROUBLESHOOTING.md) for tips on troubleshooting errors\n* See [Roadmap](https://github.com/fwcd/kotlin-language-server/projects/1) for features, planned additions, bugfixes and changes\n* See [Kotlin Quick Start](https://github.com/fwcd/kotlin-quick-start) for a sample project\n* See [Kotlin Debug Adapter](https://github.com/fwcd/kotlin-debug-adapter) for editor-agnostic launch and debug support of Kotlin/JVM programs\n* See [tree-sitter-kotlin](https://github.com/fwcd/tree-sitter-kotlin) for an experimental [Tree-Sitter](https://tree-sitter.github.io/tree-sitter/) grammar\n\n## Packaging\n\n[![Packaging status](https://repology.org/badge/vertical-allrepos/kotlin-language-server.svg)](https://repology.org/project/kotlin-language-server/versions)\n\n## This repository needs your help!\n\n[The original author](https://github.com/georgewfraser) created this project while he was considering using Kotlin in his work. He ended up deciding not to and is not really using Kotlin these days though this is a pretty fully-functional language server that just needs someone to use it every day for a while and iron out the last few pesky bugs.\n\nThere are two hard parts of implementing a language server:\n- Figuring out the dependencies\n- Incrementally re-compiling as the user types\n\nThe project uses the internal APIs of the [Kotlin compiler](https://github.com/JetBrains/kotlin/tree/master/compiler).\n\n### Figuring out the dependencies\n\nDependencies are determined by the [DefaultClassPathResolver.kt](shared/src/main/kotlin/org/javacs/kt/classpath/DefaultClassPathResolver.kt), which invokes Maven or Gradle to get a list of classpath JARs. Alternatively, projects can also 'manually' provide a list of dependencies through a shell script, located either at `[project root]/kls-classpath` or `[config root]/kotlin-language-server/classpath`, which outputs a list of JARs. Depending on your platform, the scripts also can be suffixed with `.{sh,bat,cmd}`.\n\n* Example of the `~/.config/kotlin-language-server/classpath` on Linux:\n```bash\n#!/bin/bash\necho /my/path/kotlin-compiler-1.4.10/lib/kotlin-stdlib.jar:/my/path/my-lib.jar\n```\n\n* Example of the `%HOMEPATH%\\.config\\kotlin-language-server\\classpath.bat` on Windows:\n```cmd\n@echo off\necho C:\\my\\path\\kotlin-compiler-1.4.10\\lib\\kotlin-stdlib.jar;C:\\my\\path\\my-lib.jar\n```\n\n### Incrementally re-compiling as the user types\n\nI get incremental compilation at the file-level by keeping the same `KotlinCoreEnvironment` alive between compilations in [Compiler.kt](server/src/main/kotlin/org/javacs/kt/compiler/Compiler.kt). There is a performance benchmark in [OneFilePerformance.kt](server/src/test/kotlin/org/javacs/kt/OneFilePerformance.kt) that verifies this works.\n\nGetting incremental compilation at the expression level is a bit more complicated:\n- Fully compile a file and store in [CompiledFile](server/src/main/kotlin/org/javacs/kt/CompiledFile.kt):\n    - `val content: String` A snapshot of the source code\n    - `val parse: KtFile` The parsed AST\n    - `val compile: BindingContext` Additional information about the AST from typechecking\n- After the user edits the file:\n    - Find the smallest section the encompasses all the user changes\n    - Get the `LexicalScope` encompassing this region from the `BindingContext` that was generated by the full-compile\n    - Create a fake, in-memory .kt file with just the expression we want to re-compile\n        - [Add space](https://github.com/fwcd/kotlin-language-server/blob/427cfa7a688d6d2ff202625ebad1ea605e3b8c37/server/src/main/kotlin/org/javacs/kt/CompiledFile.kt#L125) at the top of the file so the line numbers match up\n    - Re-compile this tiny fake file\n\nThe incremental expression compilation logic is all in [CompiledFile.kt](server/src/main/kotlin/org/javacs/kt/CompiledFile.kt). The Kotlin AST has a built-in repair API, which seems to be how IntelliJ works, but as far as I can tell this API does not work if the surrounding IntelliJ machinery is not present. Hence I created the \"fake tiny file\" incremental-compilation mechanism, which seems to be quite fast and predictable.\n\nThere is an extensive suite of behavioral [tests](server/src/test/kotlin/org/javacs/kt), which are all implemented in terms of the language server protocol, so you should be able to refactor the code any way you like and the tests should still work.\n\n## Modules\n\n| Name | Description |\n| ---- | ----------- |\n| server | The language server executable |\n| shared | Classpath resolution and utilities |\n\n## Scripts\n\n| Name | Command | Description |\n| ---- | ------- | ----------- |\n| release_version.py | `python3 scripts/release_version.py` | Creates a tag for the current version and bumps the development version |\n\n## Protocol Extensions\n\nThe Kotlin language server supports some non-standard requests through LSP. See [KotlinProtocolExtensions](server/src/main/kotlin/org/javacs/kt/KotlinProtocolExtensions.kt) for a description of the interface. The general syntax for these methods is `kotlin/someCustomMethod`.\n\n## Initialization Options\n\nThe Kotlin language server supports some custom initialization options via the `initializationOptions` property in the `initialize` request parameters. See `InitializationOptions` in [Configuration](server/src/main/kotlin/org/javacs/kt/Configuration.kt) for a list of supported properties.\n\n## Features\n\n### Autocomplete\n![Autocomplete](images/Autocomplete.png)\n\n### Signature help\n![Signature Help](images/SignatureHelp.png)\n\n### Hover\n![Hover](images/Hover.png)\n\n### Go-to-definition, find all references\n![Find all references](images/FindAllReferences.png)\n\n### Document symbols\n![Document symbols](images/DocumentSymbols.png)\n\n### Global symbols\n![Global symbols](images/GlobalSymbols.png)\n\n\n## Authors\n* [georgewfraser](https://github.com/georgewfraser)\n* [fwcd](https://github.com/fwcd)"
}
