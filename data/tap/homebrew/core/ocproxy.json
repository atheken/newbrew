{
  "name": "ocproxy",
  "full_name": "ocproxy",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "User-level SOCKS and port forwarding proxy",
  "license": "BSD-3-Clause",
  "homepage": "https://github.com/cernekee/ocproxy",
  "versions": {
    "stable": "1.60",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/cernekee/ocproxy/archive/v1.60.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "a7367647f07df33869e2f79da66b6f104f6495ae806b12a8b8d9ca82fb7899ac"
    },
    "head": {
      "url": "https://github.com/cernekee/ocproxy.git",
      "branch": "master"
    }
  },
  "revision": 1,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/ocproxy/blobs/sha256:a30cfaf7533957b5a7fab43d8123047d97ad5e989189556dfff3b539c6d771aa",
          "sha256": "a30cfaf7533957b5a7fab43d8123047d97ad5e989189556dfff3b539c6d771aa"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/ocproxy/blobs/sha256:e7ef216d7ca89c5c390833fd8272b5e114d45b9740d4b0a21b1c751363405b87",
          "sha256": "e7ef216d7ca89c5c390833fd8272b5e114d45b9740d4b0a21b1c751363405b87"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/ocproxy/blobs/sha256:d598c7b18b39b70d0bff1cc24b044a7351f8161ada44ef860649bc658323734a",
          "sha256": "d598c7b18b39b70d0bff1cc24b044a7351f8161ada44ef860649bc658323734a"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/ocproxy/blobs/sha256:ddd7dee9b0d0f05232a844a56e2a9264504ba6abc0a16742640e92c408561ad9",
          "sha256": "ddd7dee9b0d0f05232a844a56e2a9264504ba6abc0a16742640e92c408561ad9"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/ocproxy/blobs/sha256:27e6a065435fd38f0b59ec01a38a424272d914574c2c1b36f5e90df3f05baeba",
          "sha256": "27e6a065435fd38f0b59ec01a38a424272d914574c2c1b36f5e90df3f05baeba"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/ocproxy/blobs/sha256:c215e90cdcbcd59674c111bd2bbdf157ad554247c65025560c6688677d25be53",
          "sha256": "c215e90cdcbcd59674c111bd2bbdf157ad554247c65025560c6688677d25be53"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/ocproxy/blobs/sha256:53016c9f83444b015e71e2f1678b1aab1e7914f42a8c5d8de1ab581fca130ef8",
          "sha256": "53016c9f83444b015e71e2f1678b1aab1e7914f42a8c5d8de1ab581fca130ef8"
        },
        "mojave": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/ocproxy/blobs/sha256:786f0c42a3d282b78d8dc2fa18c36e46707451f4ac848e9af7dd82ab31b40f6d",
          "sha256": "786f0c42a3d282b78d8dc2fa18c36e46707451f4ac848e9af7dd82ab31b40f6d"
        },
        "high_sierra": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/ocproxy/blobs/sha256:0cd70ac67ebd419b869ad4dd70c6cd1217248c8e7b7a57d3a7c8e15c7d2f7dfc",
          "sha256": "0cd70ac67ebd419b869ad4dd70c6cd1217248c8e7b7a57d3a7c8e15c7d2f7dfc"
        },
        "sierra": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/ocproxy/blobs/sha256:8e33eae007c082ec9b6787210096a4e20992151a7b2c5f345941f68c478ae0e2",
          "sha256": "8e33eae007c082ec9b6787210096a4e20992151a7b2c5f345941f68c478ae0e2"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ocproxy/blobs/sha256:04fbf035ccc8cc3ab0073c0d2299d47276268f8d47aa298cac9b8897cc9065e1",
          "sha256": "04fbf035ccc8cc3ab0073c0d2299d47276268f8d47aa298cac9b8897cc9065e1"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "autoconf",
    "automake"
  ],
  "dependencies": [
    "libevent"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/ocproxy.rb",
  "ruby_source_checksum": {
    "sha256": "e4db10bf78a5ca61bcb235425278edc11cf8fec6b05a7359aed3e938c5e98141"
  },
  "date_added": "2016-01-31T00:56:48+00:00",
  "readme": "ocproxy\n=======\n\nocproxy is a user-level SOCKS and port forwarding proxy for\n[OpenConnect](http://www.infradead.org/openconnect/)\nbased on lwIP.  When using ocproxy, OpenConnect only handles network\nactivity that the user specifically asks to proxy, so the VPN interface\nno longer \"hijacks\" all network traffic on the host.\n\nBasic usage\n-----------\n\nCommonly used options include:\n\n      -D port                   Set up a SOCKS5 server on PORT\n      -L lport:rhost:rport      Connections to localhost:LPORT will be redirected\n                                over the VPN to RHOST:RPORT\n      -g                        Allow non-local clients.\n      -k interval               Send TCP keepalive every INTERVAL seconds, to\n                                prevent connection timeouts\n\nocproxy should not be run directly.  Instead, it should be started by\nopenconnect using the --script-tun option:\n\n    openconnect --script-tun --script \\\n        \"./ocproxy -L 2222:unix-host:22 -L 3389:win-host:3389 -D 11080\" \\\n        vpn.example.com\n\nOnce ocproxy is running, connections can be established over the VPN link\nby connecting directly to a forwarded port or by utilizing the builtin\nSOCKS server:\n\n    ssh -p2222 localhost\n    rdesktop localhost\n    socksify ssh unix-host\n    tsocks ssh 172.16.1.2\n    ...\n\nOpenConnect can (and should) be run as a non-root user when using ocproxy.\n\n\nUsing the SOCKS5 proxy\n----------------------\n\ntsocks, Dante, or similar wrappers can be used with non-SOCKS-aware\napplications.\n\nSample tsocks.conf (no DNS):\n\n    server = 127.0.0.1\n    server_type = 5\n    server_port = 11080\n\nSample socks.conf for Dante (DNS lookups via SOCKS5 \"DOMAIN\" addresses):\n\n    resolveprotocol: fake\n    route {\n            from: 0.0.0.0/0 to: 0.0.0.0/0 via: 127.0.0.1 port = 11080\n            command: connect\n            proxyprotocol: socks_v5\n    }\n\n[FoxyProxy](http://getfoxyproxy.org/) can be used to tunnel Firefox or Chrome\nbrowsing through the SOCKS5 server.  This will send DNS queries through the\nVPN connection, and unqualified internal hostnames (e.g. http://intranet/)\nshould work.  FoxyProxy also allows the user to route requests based on URL\npatterns, so that (for instance) certain domains always use the proxy server\nbut all other traffic connects directly.\n\nIt is possible to start several different instances of Firefox, each with\nits own separate profile (and hence, proxy settings):\n\n    # initial setup\n    firefox -no-remote -ProfileManager\n\n    # run with previous configured profile \"vpn\"\n    firefox -no-remote -P vpn\n\n\nBuilding ocproxy\n----------------\n\nDependencies:\n\n * libevent &gt;= 2.0: *.so library and headers\n * autoconf\n * automake\n * gcc, binutils, make, etc.\n\nBuilding from git:\n\n    ./autogen.sh\n    ./configure\n    make\n\n\nOther possible uses for ocproxy\n-------------------------------\n\n * Routing traffic from different applications/browsers through different VPNs\n(or no VPN)\n * Connecting to multiple VPNs or sites concurrently, even if their IP ranges\noverlap or their DNS settings are incompatible\n * Situations in which root access is unavailable or undesirable; multiuser\nsystems\n\nIt is possible to write a proxy autoconfig (PAC) script that decides whether\neach request should use ocproxy or a direct connection, based on the domain\nor other criteria.\n\nocproxy also works with OpenVPN; the necessary patches are posted\n[here](http://thread.gmane.org/gmane.network.openvpn.devel/8478).\n\n\nNetwork configuration\n---------------------\n\nocproxy normally reads its network configuration from the following\nenvironment variables set by OpenConnect:\n\n * `INTERNAL_IP4_ADDRESS`: IPv4 address\n * `INTERNAL_IP4_MTU`: interface MTU\n * `INTERNAL_IP4_DNS`: DNS server list (optional but recommended)\n * `CISCO_DEF_DOMAIN`: default domain name (optional)\n\nThe `VPNFD` environment variable tells ocproxy which file descriptor is used\nto pass the tunneled traffic.\n\n\nvpnns (experimental)\n--------------------\n\nAnother approach to solving this problem is to create a separate network\nnamespace (netns).  This is supported by Linux kernels &gt;= v3.8.\n\nThis starts up an application in a fresh user/net/uts/mount namespace:\n\n    vpnns -- google-chrome --user-data-dir=/tmp/vpntest\n    \n    vpnns -- firefox -no-remote -P vpn\n\n    vpnns -- transmission-gtk\n\nInitially it will not have any network access as the only interface\npresent in the netns is the loopback device.  The application should still\nbe able to talk to Xorg through UNIX sockets in /tmp.\n\nThe next step is to connect to a VPN and invoke `vpnns --attach` to pass\nthe VPN traffic back and forth:\n\n    openconnect --script \"vpnns --attach\" --script-tun vpn.example.com\n\n    openvpn --script-security 2 --config example.ovpn \\\n            --dev \"|HOME=$HOME vpnns --attach\"\n\nThese commands connect to an ocserv or openvpn gateway, then tell vpnns\nto set up a tunnel device, default route, and resolv.conf inside the\nnamespace created above.  On success, the web browser will have connectivity.\nWhen the VPN disconnects, the browser will lose all connectivity, preventing\nleaks.\n\n`vpnns` can be rerun multiple times if the connection fails or if the VPN\nclient crashes.  If run without arguments, it will open a shell inside the\nnamespace.\n\nSome differences between vpnns and ocproxy:\n\n * No proxies are involved, so apps should not require any special\nconfiguration.\n * vpnns is better-suited for hard-to-proxy protocols such as VOIP or\nBitTorrent.\n * vpnns will only ever run on Linux.\n * vpnns may interfere with dbus connections.\n\nUnlike previous approaches to the problem (e.g. anything that involves\nrunning `ip netns`), vpnns does not require root privileges or changing\nthe host network configuration.\n\nThe `--name` option allows additional (and separate) namespaces to be\ncreated.\n\nIf your X server is a version that uses abstract sockets only (and UNIX\nsockets in /tmp are disabled), you can re-enable UNIX sockets by adding\n`-listen unix` to `/etc/X11/xinit/xserverrc`.\n\nThe OpenVPN example requires out-of-tree patches.  Updated openvpn and\nocproxy packages are available for Ubuntu 14.04 LTS and 16.04 LTS:\n\n    sudo -s\n    apt-get install software-properties-common\n    add-apt-repository --yes ppa:cernekee\n    apt-get update\n    apt-get install ocproxy openvpn\n\n\nCredits\n-------\n\nOriginal author: David Edmondson &lt;dme@dme.org&gt;\n\nCurrent maintainer: Kevin Cernekee &lt;cernekee@gmail.com&gt;\n\nProject home page: https://github.com/cernekee/ocproxy"
}
