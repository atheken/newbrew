{
  "name": "yaegi",
  "full_name": "yaegi",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Yet another elegant Go interpreter",
  "license": "Apache-2.0",
  "homepage": "https://github.com/traefik/yaegi",
  "versions": {
    "stable": "0.15.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/traefik/yaegi/archive/v0.15.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "4f0894158f6331153522f48065db9c87237462e08c14652c84a65e3d28e6368b"
    },
    "head": {
      "url": "https://github.com/traefik/yaegi.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/yaegi/blobs/sha256:a9e254b5ae147e0039257b152e26d141a7de35ec7dda8055ff499c8b361ee87e",
          "sha256": "a9e254b5ae147e0039257b152e26d141a7de35ec7dda8055ff499c8b361ee87e"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/yaegi/blobs/sha256:a9e254b5ae147e0039257b152e26d141a7de35ec7dda8055ff499c8b361ee87e",
          "sha256": "a9e254b5ae147e0039257b152e26d141a7de35ec7dda8055ff499c8b361ee87e"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/yaegi/blobs/sha256:a9e254b5ae147e0039257b152e26d141a7de35ec7dda8055ff499c8b361ee87e",
          "sha256": "a9e254b5ae147e0039257b152e26d141a7de35ec7dda8055ff499c8b361ee87e"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/yaegi/blobs/sha256:fa07402b69b8ac8433d5790857d44ed5d5ba3002c5eb2e854c8738670445db33",
          "sha256": "fa07402b69b8ac8433d5790857d44ed5d5ba3002c5eb2e854c8738670445db33"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/yaegi/blobs/sha256:fa07402b69b8ac8433d5790857d44ed5d5ba3002c5eb2e854c8738670445db33",
          "sha256": "fa07402b69b8ac8433d5790857d44ed5d5ba3002c5eb2e854c8738670445db33"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/yaegi/blobs/sha256:fa07402b69b8ac8433d5790857d44ed5d5ba3002c5eb2e854c8738670445db33",
          "sha256": "fa07402b69b8ac8433d5790857d44ed5d5ba3002c5eb2e854c8738670445db33"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/yaegi/blobs/sha256:5657b3d88c8ce1d60aca7d7cf2ade108e2dda1d4ff1ab41a538d2dc2df7ccbd2",
          "sha256": "5657b3d88c8ce1d60aca7d7cf2ade108e2dda1d4ff1ab41a538d2dc2df7ccbd2"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/yaegi.rb",
  "ruby_source_checksum": {
    "sha256": "f230d98c73097a76c87340b3a7462a507f76d31ab9e89f27023e9b9019860e1b"
  },
  "date_added": "2020-01-06T14:13:23+00:00",
  "readme": "<p align=\"center\">\n<img width=\"400\" src=\"doc/images/yaegi.png\" alt=\"Yaegi\" title=\"Yaegi\" />\n</p>\n\n[![release](https://img.shields.io/github/tag-date/traefik/yaegi.svg?label=alpha)](https://github.com/traefik/yaegi/releases)\n[![Build Status](https://github.com/traefik/yaegi/actions/workflows/main.yml/badge.svg)](https://github.com/traefik/yaegi/actions/workflows/main.yml)\n[![GoDoc](https://godoc.org/github.com/traefik/yaegi?status.svg)](https://pkg.go.dev/mod/github.com/traefik/yaegi)\n\nYaegi is Another Elegant Go Interpreter.\nIt powers executable Go scripts and plugins, in embedded interpreters or interactive shells, on top of the Go runtime.\n\n## Features\n\n* Complete support of [Go specification][specs]\n* Written in pure Go, using only the standard library\n* Simple interpreter API: `New()`, `Eval()`, `Use()`\n* Works everywhere Go works\n* All Go & runtime resources accessible from script (with control)\n* Security: `unsafe` and `syscall` packages neither used nor exported by default\n* Support the latest 2 major releases of Go (Go 1.19 and Go 1.20)\n\n## Install\n\n### Go package\n\n```go\nimport \"github.com/traefik/yaegi/interp\"\n```\n\n### Command-line executable\n\n```bash\ngo install github.com/traefik/yaegi/cmd/yaegi@latest\n```\n\nNote that you can use [rlwrap](https://github.com/hanslub42/rlwrap) (install with your favorite package manager),\nand alias the `yaegi` command in `alias yaegi='rlwrap yaegi'` in your `~/.bashrc`, to have history and command line edition.\n\n### CI Integration\n\n```bash\ncurl -sfL https://raw.githubusercontent.com/traefik/yaegi/master/install.sh | bash -s -- -b $GOPATH/bin v0.9.0\n```\n\n## Usage\n\n### As an embedded interpreter\n\nCreate an interpreter with `New()`, run Go code with `Eval()`:\n\n```go\npackage main\n\nimport (\n\t\"github.com/traefik/yaegi/interp\"\n\t\"github.com/traefik/yaegi/stdlib\"\n)\n\nfunc main() {\n\ti := interp.New(interp.Options{})\n\n\ti.Use(stdlib.Symbols)\n\n\t_, err := i.Eval(`import \"fmt\"`)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t_, err = i.Eval(`fmt.Println(\"Hello Yaegi\")`)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n```\n\n[Go Playground](https://play.golang.org/p/2n-EpZbMYI9)\n\n### As a dynamic extension framework\n\nThe following program is compiled ahead of time, except `bar()` which is interpreted, with the following steps:\n\n1. use of `i.Eval(src)` to evaluate the script in the context of interpreter\n2. use of `v, err := i.Eval(\"foo.Bar\")` to get the symbol from the interpreter context,  as a `reflect.Value`\n3. application of `Interface()` method and type assertion to convert `v` into `bar`, as if it was compiled\n\n```go\npackage main\n\nimport \"github.com/traefik/yaegi/interp\"\n\nconst src = `package foo\nfunc Bar(s string) string { return s + \"-Foo\" }`\n\nfunc main() {\n\ti := interp.New(interp.Options{})\n\n\t_, err := i.Eval(src)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tv, err := i.Eval(\"foo.Bar\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tbar := v.Interface().(func(string) string)\n\n\tr := bar(\"Kung\")\n\tprintln(r)\n}\n```\n\n[Go Playground](https://play.golang.org/p/WvwH4JqrU-p)\n\n### As a command-line interpreter\n\nThe Yaegi command can run an interactive Read-Eval-Print-Loop:\n\n```console\n$ yaegi\n> 1 + 2\n3\n> import \"fmt\"\n> fmt.Println(\"Hello World\")\nHello World\n>\n```\n\nNote that in interactive mode, all stdlib package are pre-imported,\nyou can use them directly:\n\n```console\n$ yaegi\n> reflect.TypeOf(time.Date)\n: func(int, time.Month, int, int, int, int, int, *time.Location) time.Time\n>\n```\n\nOr interpret Go packages, directories or files, including itself:\n\n```console\n$ yaegi -syscall -unsafe -unrestricted github.com/traefik/yaegi/cmd/yaegi\n>\n```\n\nOr for Go scripting in the shebang line:\n\n```console\n$ cat /tmp/test\n#!/usr/bin/env yaegi\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(\"test\")\n}\n$ ls -la /tmp/test\n-rwxr-xr-x 1 dow184 dow184 93 Jan  6 13:38 /tmp/test\n$ /tmp/test\ntest\n```\n\n## Documentation\n\nDocumentation about Yaegi commands and libraries can be found at usual [godoc.org][docs].\n\n## Limitations\n\nBeside the known [bugs] which are supposed to be fixed in the short term, there are some limitations not planned to be addressed soon:\n\n- Assembly files (`.s`) are not supported.\n- Calling C code is not supported (no virtual \"C\" package).\n- Directives about the compiler, the linker, or embedding files are not supported.\n- Interfaces to be used from the pre-compiled code can not be added dynamically, as it is required to pre-compile interface wrappers.\n- Representation of types by `reflect` and printing values using %T may give different results between compiled mode and interpreted mode.\n- Interpreting computation intensive code is likely to remain significantly slower than in compiled mode.\n\nGo modules are not supported yet. Until that, it is necessary to install the source into `$GOPATH/src/github.com/traefik/yaegi` to pass all the tests.\n\n## Contributing\n\n[Contributing guide](CONTRIBUTING.md).\n\n## License\n\n[Apache 2.0][License].\n\n[specs]: https://golang.org/ref/spec\n[docs]: https://pkg.go.dev/github.com/traefik/yaegi\n[license]: https://github.com/traefik/yaegi/blob/master/LICENSE\n[github]: https://github.com/traefik/yaegi\n[bugs]: https://github.com/traefik/yaegi/issues?q=is%3Aissue+is%3Aopen+label%3Abug"
}
