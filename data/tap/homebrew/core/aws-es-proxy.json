{
  "name": "aws-es-proxy",
  "full_name": "aws-es-proxy",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Small proxy between HTTP client and AWS Elasticsearch",
  "license": "Apache-2.0",
  "homepage": "https://github.com/abutaha/aws-es-proxy",
  "versions": {
    "stable": "1.5",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/abutaha/aws-es-proxy/archive/v1.5.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "ac6dca6cc271f57831ccf4a413e210d175641932e13dcd12c8d6036e8030e3a5"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/aws-es-proxy/blobs/sha256:b2b1415650725652e3282217d2c09464410645b225f954101259df3827b4a135",
          "sha256": "b2b1415650725652e3282217d2c09464410645b225f954101259df3827b4a135"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/aws-es-proxy/blobs/sha256:b2b1415650725652e3282217d2c09464410645b225f954101259df3827b4a135",
          "sha256": "b2b1415650725652e3282217d2c09464410645b225f954101259df3827b4a135"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/aws-es-proxy/blobs/sha256:b2b1415650725652e3282217d2c09464410645b225f954101259df3827b4a135",
          "sha256": "b2b1415650725652e3282217d2c09464410645b225f954101259df3827b4a135"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/aws-es-proxy/blobs/sha256:ca006b5fff25e619563f739d83881a461d0c763c9501d144b355da1940075468",
          "sha256": "ca006b5fff25e619563f739d83881a461d0c763c9501d144b355da1940075468"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/aws-es-proxy/blobs/sha256:ca006b5fff25e619563f739d83881a461d0c763c9501d144b355da1940075468",
          "sha256": "ca006b5fff25e619563f739d83881a461d0c763c9501d144b355da1940075468"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/aws-es-proxy/blobs/sha256:ca006b5fff25e619563f739d83881a461d0c763c9501d144b355da1940075468",
          "sha256": "ca006b5fff25e619563f739d83881a461d0c763c9501d144b355da1940075468"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/aws-es-proxy/blobs/sha256:11d0bf2df2385efb683589d960858d194c89ba11db563faebc76d6405f07c078",
          "sha256": "11d0bf2df2385efb683589d960858d194c89ba11db563faebc76d6405f07c078"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": "Before you can use these tools you must export some variables to your $SHELL.\n  export AWS_ACCESS_KEY=\"<Your AWS Access ID>\"\n  export AWS_SECRET_KEY=\"<Your AWS Secret Key>\"\n  export AWS_CREDENTIAL_FILE=\"<Path to the credentials file>\"\n",
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "2706c66e8def3eeba4d9bf1adf66221c8ad70701",
  "ruby_source_path": "Formula/aws-es-proxy.rb",
  "ruby_source_checksum": {
    "sha256": "7bf856fce0f2aa49ea7556e4128eee1deabc8cfc6a3b09569139a71c350384a5"
  },
  "date_added": "2018-04-10T11:18:37+02:00",
  "readme": "# aws-es-proxy\n\n[![Docker Pulls](https://img.shields.io/docker/pulls/abutaha/aws-es-proxy.svg)](https://hub.docker.com/r/abutaha/aws-es-proxy/)\n\n**aws-es-proxy** is a small web server application sitting between your HTTP client (browser, curl, etc...) and Amazon Elasticsearch service. It will sign your requests using latest [AWS Signature Version 4](http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html) before sending the request to Amazon Elasticsearch. When response is back from Amazon Elasticsearch, this response will be sent back to your HTTP client.\n\nKibana requests are also signed automatically.\n\n## Installation\n\n### Download binary executable\n\n**aws-es-proxy** has single executable binaries for Linux, Mac and Windows.\n\nDownload the latest [aws-es-proxy release](https://github.com/abutaha/aws-es-proxy/releases/).\n\n### Docker\n\nThere is an official docker image available for aws-es-proxy. To run the image:\n\n```sh\n# v0.9 and newer (latest always point to the latest release):\n\ndocker run --rm -v ~/.aws:/root/.aws -p 9200:9200 abutaha/aws-es-proxy:v1.0 -endpoint https://dummy-host.ap-southeast-2.es.amazonaws.com -listen 0.0.0.0:9200\n\nv.08:\n\ndocker run --rm -it abutaha/aws-es-proxy ./aws-es-proxy -endpoint https://dummy-host.ap-southeast-2.es.amazonaws.com\n\n```\n\nTo expose a port number other than the default 9200, pass an environment variable of `PORT_NUM` to docker with the port number you wish to expose for your service.\n\n### Via homebrew\n\n```sh\nbrew install aws-es-proxy\n```\n\n### Build from Source\n\n#### Dependencies:\n* go1.14+\n\n```sh\n#requires go1.14\ngo build github.com/abutaha/aws-es-proxy\n```\n\n## Configuring Credentials\n\nBefore using **aws-es-proxy**, ensure that you've configured your AWS IAM user credentials. The best way to configure credentials on a development machine is to use the `~/.aws/credentials` file, which might look like:\n\n```\n[default]\naws_access_key_id = AKID1234567890\naws_secret_access_key = MY-SECRET-KEY\n```\n\nAlternatively, you can set the following environment variables:\n\n```\nexport AWS_ACCESS_KEY_ID=AKID1234567890\nexport AWS_SECRET_ACCESS_KEY=MY-SECRET-KEY\n```\n\n**aws-es-proxy** also supports `IAM roles`. To use IAM roles, you need to modify your Amazon Elasticsearch access policy to allow access from that role. Below is an Amazon Elasticsearch `access policy` example allowing access from any EC2 instance with an IAM role called `ec2-aws-elasticsearch`.\n\n```json\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"AWS\": \"arn:aws:iam::012345678910:role/ec2-aws-elasticsearch\"\n      },\n      \"Action\": \"es:*\",\n      \"Resource\": \"arn:aws:es:eu-west-1:012345678910:domain/test-es-domain/*\"\n    }\n  ]\n}\n```\n\n\n\n## Usage example:\n\nYou can use either argument `-endpoint` OR environment variable `ENDPOINT` to specify AWS ElasticSearch endpoint.\n\n```sh\n./aws-es-proxy -endpoint https://test-es-somerandomvalue.eu-west-1.es.amazonaws.com\nListening on 127.0.0.1:9200\n```\n\n```sh\nexport ENDPOINT=https://test-es-somerandomvalue.eu-west-1.es.amazonaws.com\n\n./aws-es-proxy  -listen 10.0.0.1:9200 -verbose\nListening on 10.0.0.1:9200\n```\n\n*aws-es-proxy* listens on 127.0.0.1:9200 if no additional argument is provided. You can change the IP and Port passing the argument `-listen`\n\n```sh\n./aws-es-proxy -listen :8080 -endpoint ...\n./aws-es-proxy -listen 10.0.0.1:9200 -endpoint ...\n```\n\nBy default, *aws-es-proxy* will not display any message in the console. However, it has the ability to print requests being sent to Amazon Elasticsearch, and the duration it takes to receive the request back. This can be enabled using the option `-verbose`\n\n```sh\n./aws-es-proxy -verbose ...\nListening on 127.0.0.1:9200\n2016/10/31 19:48:23  -> GET / 200 1.054s\n2016/10/31 19:48:30  -> GET /_cat/indices?v 200 0.199s\n2016/10/31 19:48:37  -> GET /_cat/shards?v 200 0.196s\n2016/10/31 19:48:49  -> GET /_cat/allocation?v 200 0.179s\n2016/10/31 19:49:10  -> PUT /my-test-index 200 0.347s\n```\n\nFor a full list of available options, use `-h`:\n\n```sh\n./aws-es-proxy -h\nUsage of ./aws-es-proxy:\n  -auth\n        Require HTTP Basic Auth\n  -debug\n        Print debug messages\n  -endpoint string\n        Amazon ElasticSearch Endpoint (e.g: https://dummy-host.eu-west-1.es.amazonaws.com)\n  -listen string\n        Local TCP port to listen on (default \"127.0.0.1:9200\")\n  -log-to-file\n        Log user requests and ElasticSearch responses to files\n  -no-sign-reqs\n        Disable AWS Signature v4\n  -password string\n        HTTP Basic Auth Password\n  -pretty\n        Prettify verbose and file output\n  -realm string\n        Authentication Required\n  -remote-terminate\n        Allow HTTP remote termination\n  -timeout int\n        Set a request timeout to ES. Specify in seconds, defaults to 15 (default 15)\n  -username string\n        HTTP Basic Auth Username\n  -verbose\n        Print user requests\n  -version\n        Print aws-es-proxy version\n```\n\n\n## Using HTTP Clients\n\nAfter you run *aws-es-proxy*, you can now open your Web browser on [http://localhost:9200](http://localhost:9200). Everything should be working as you have your own instance of ElasticSearch running on port 9200.\n\nTo access Kibana, use [http://localhost:9200/_plugin/kibana/app/kibana](http://localhost:9200/_plugin/kibana/app/kibana)"
}
