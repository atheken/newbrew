{
  "name": "zlint",
  "full_name": "zlint",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "X.509 Certificate Linter focused on Web PKI standards and requirements",
  "license": "Apache-2.0",
  "homepage": "https://github.com/zmap/zlint",
  "versions": {
    "stable": "3.5.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/zmap/zlint.git",
      "tag": "v3.5.0",
      "revision": "45e8dff6fe0d2a6989366a3dbd44713c360afc8f",
      "checksum": null
    },
    "head": {
      "url": "https://github.com/zmap/zlint.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zlint/blobs/sha256:4c6e2db91078b648c70b65e045f265291a93d1936c35bd5f50de67d6ffed7e67",
          "sha256": "4c6e2db91078b648c70b65e045f265291a93d1936c35bd5f50de67d6ffed7e67"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zlint/blobs/sha256:870a9b3d865c07dcee5df61c933bcc06964c7f67e98888472b70faf3880efbbb",
          "sha256": "870a9b3d865c07dcee5df61c933bcc06964c7f67e98888472b70faf3880efbbb"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zlint/blobs/sha256:487c8eab86c4ae89f047d6ebcea40f4707fdd0f93bf0b724a51a6d2f1a31a10e",
          "sha256": "487c8eab86c4ae89f047d6ebcea40f4707fdd0f93bf0b724a51a6d2f1a31a10e"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zlint/blobs/sha256:c3e18791e097ac32f17e9bd87ec0d92932ecf9465a1c6be96a38c2fe9a3d1b56",
          "sha256": "c3e18791e097ac32f17e9bd87ec0d92932ecf9465a1c6be96a38c2fe9a3d1b56"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zlint/blobs/sha256:4cce97370e576d5aa6d83d20b1a09281a17b47f6b2f7010d58f69ac7d0d98b4a",
          "sha256": "4cce97370e576d5aa6d83d20b1a09281a17b47f6b2f7010d58f69ac7d0d98b4a"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zlint/blobs/sha256:44f78c1721863740ea49fff58a01230f743d2adbe7d6d9afa21acb287c8ad1ba",
          "sha256": "44f78c1721863740ea49fff58a01230f743d2adbe7d6d9afa21acb287c8ad1ba"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zlint/blobs/sha256:ff883e8663c390615278f11e60038a814ee3143cdff144f4789ba47de7257124",
          "sha256": "ff883e8663c390615278f11e60038a814ee3143cdff144f4789ba47de7257124"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/zlint.rb",
  "ruby_source_checksum": {
    "sha256": "b76431301bdcc947c564281b5c8945a61c122f369a70b0fea0230fc1b0ec94fd"
  },
  "date_added": "2023-03-13T12:16:21+00:00",
  "readme": "ZLint\n=====\n\n[![CI Status](https://github.com/zmap/zlint/workflows/Go/badge.svg)](https://github.com/zmap/zlint/actions?query=workflow%3AGo)\n[![Integration Tests](https://github.com/zmap/zlint/workflows/integration-test/badge.svg)](https://github.com/zmap/zlint/actions?query=workflow%3Aintegration-test)\n[![Lint Status](https://github.com/zmap/zlint/workflows/golangci-lint/badge.svg)](https://github.com/zmap/zlint/actions?query=workflow%3Agolangci-lint)\n[![Go Report Card](https://goreportcard.com/badge/github.com/zmap/zlint)](https://goreportcard.com/report/github.com/zmap/zlint)\n\nZLint is a X.509 certificate linter written in Go that checks for consistency\nwith standards (e.g. [RFC 5280]) and other relevant PKI requirements (e.g.\n[CA/Browser Forum Baseline Requirements][BR v1.4.8]).\n\nIt can be used as a command line tool or as a library integrated into CA\nsoftware.\n\n[RFC 5280]: https://www.ietf.org/rfc/rfc5280.txt\n[BR v1.4.8]: https://cabforum.org/wp-content/uploads/CA-Browser-Forum-BR-1.4.8.pdf\n\nRequirements\n------------\n\nZLint requires [Go 1.16.x or newer](https://golang.org/doc/install) be\ninstalled. The command line setup instructions assume the `go` command is in\nyour `$PATH`.\n\nLint Sources\n------------\n\nHistorically ZLint was focused on only [RFC 5280] and [v1.4.8][BR v1.4.8] of the\n[CA/Browser Forum baseline requirements][BRs]. A detailed list of the original\nBR coverage can be found [in this spreadsheet][Coverage Spreadsheet].\n\nMore recently ZLint has been restructured to make it easier to add lints based\non other sources. While not complete, presently ZLint has lints sourced from:\n\n* [CA/Browser Forum EV SSL Certificate Guidelines][CABF EV]\n* [ETSI ESI]\n* [Mozilla's PKI policy][MozPolicy]\n* [Apple's CT policy][AppleCT]\n* Various RFCs (e.g. [RFC 6818], [RFC 4055], [RFC 8399])\n\nBy default ZLint will apply applicable lints from all sources but consumers may\nalso customize which lints are used by including/exclduing specific sources.\n\n[BRs]: https://cabforum.org/baseline-requirements-documents/\n[Coverage Spreadsheet]: https://docs.google.com/spreadsheets/d/1ywp0op9mkTaggigpdF2YMTubepowJ50KQBhc_b00e-Y\n[CABF EV]: https://cabforum.org/extended-validation/\n[MozPolicy]: https://github.com/mozilla/pkipolicy\n[ETSI ESI]: https://www.etsi.org/technologies/digital-signature\n[AppleCT]: https://support.apple.com/en-us/HT205280\n[RFC 6818]: https://www.ietf.org/rfc/rfc6818.txt\n[RFC 4055]: https://www.ietf.org/rfc/rfc4055.txt\n[RFC 8399]: https://www.ietf.org/rfc/rfc8399.txt\n\n\nVersioning and Releases\n-----------------------\n\nZLint aims to follow [semantic versioning](https://semver.org/). The addition of\nnew lints will generally result in a MINOR version revision. Since downstream\nprojects depend on lint results and names for policy decisions changes of this\nnature will result in MAJOR version revision.\n\nWhere possible we will try to make available a release candidate (RC) a week\nbefore finalizing a production ready release tag. We encourage users to test RC\nreleases to provide feedback early enough for bugs to be addressed before the\nfinal release is made available.\n\nPlease subscribe to the [ZLint Announcements][zlint-announce] mailing list to\nreceive notifications of new releases/release candidates. This low-volumne\nannouncements mailing list is only used for new ZLint releases and major\nproject announcements, not questions/support/bug reports.\n\n[zlint-announce]:  https://groups.google.com/forum/#!forum/zlint-announcements\n\n\nCommand Line Usage\n------------------\n\nZLint can be used on the command-line through a simple bundled executable\n_ZLint_ as well as through\n[ZCertificate](https://github.com/zmap/zcertificate), a more full-fledged\ncommand-line certificate parser that links against ZLint.\n\nExample ZLint CLI usage:\n\n\tgo get github.com/zmap/zlint/v3/cmd/zlint\n\techo \"Lint mycert.pem with all applicable lints\"\n\tzlint mycert.pem\n\n\techo \"Lint mycert.pem with just the two named lints\"\n\tzlint -includeNames=e_mp_exponent_cannot_be_one,e_mp_modulus_must_be_divisible_by_8 mycert.pem\n\n\techo \"List available lint sources\"\n\tzlint -list-lints-source\n\n\techo \"Lint mycert.pem with all of the lints except for ETSI ESI sourced lints\"\n\tzlint -excludeSources=ETSI_ESI mycert.pem\n\n\techo \"Receive a copy of the full (default) configuration for all configurable lints\"\n\tzlint -exampleConfig\n\n\techo \"Lint mycert.pem using a custom configuration for any configurable lints\"\n\tzlint -config configFile.toml mycert.pem\n\n\techo \"List available lint profiles. A profile is a pre-defined collection of lints.\"\n\tzlint -list-profiles\n\nSee `zlint -h` for all available command line options.\n\n### Linting Certificate Revocation Lists\nNo special flags are necessary when running lints against a certificate revocation list. However, the CRL in question MUST be a PEM encoded ASN.1 with the `X509 CRL` PEM armor.\n\nThe following is an example of a parseable CRL PEM file.\n```\n-----BEGIN X509 CRL-----\nMIIBnjCBhwIBATANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDEw1BbWlyIHdhcyBI\nZXJlFw0yMzAzMTMwNTUyNTVaFw0yMzAzMTQwNTUyNTVaoDswOTArBgNVHSMEJDAi\ngCAywvCJz28KsE/6Wf9E1nuiihBFWlUyq7X/RDgn5SllIDAKBgNVHRQEAwIBATAN\nBgkqhkiG9w0BAQsFAAOCAQEAakioBhLs31svWHGmolDhUg6O1daN6zXSAz/avgzl\n38aTKfRSNQ+vM7qgrvCoRojnamziJgXe1hz+/dc8H0/+WEBwVgp1rBzr8f25dSZC\nlXBHT1cNI5RL+wU0pFMouUiwWqwUg8o9iGYkqvhuko4AQIcpAoBuf0OggjCuj48r\nFX7UN7Kz4pc/4ufengKGkf7EeEQffY3zlS0DAtWv+exoQ6Dt+otDr0PbINJZg+46\nTJ/+0w6RsLGoe4Sh/PYPfaCngMyezENUgJgR1+vF6hbVUweeOB+4nFRNxvHMup0G\nGEA4yfzQtHWL8rizWUCyuqXEMPZLzyJT0rv5cLgoOvs+8Q==\n-----END X509 CRL-----\n```\n\nLibrary Usage\n-------------\n\nZLint can also be used as a library. To lint a certificate with all applicable\nlints is as simple as using `zlint.LintCertificate` with a parsed certificate:\n\n```go\nimport (\n\t\"github.com/zmap/zcrypto/x509\"\n\t\"github.com/zmap/zlint/v3\"\n)\n\nvar certDER []byte = ...\nparsed, err := x509.ParseCertificate(certDER)\nif err != nil {\n\t// If x509.ParseCertificate fails, the certificate is too broken to lint.\n\t// This should be treated as ZLint rejecting the certificate\n\tlog.Fatal(\"unable to parse certificate:\", err)\n}\nzlintResultSet := zlint.LintCertificate(parsed)\n```\n\nTo lint a certificate with a subset of lints (e.g. based on lint source, or\nname) filter the global lint registry and use it with `zlint.LintCertificateEx`:\n\n```go\nimport (\n\t\"github.com/zmap/zcrypto/x509\"\n\t\"github.com/zmap/zlint/v3\"\n\t\"github.com/zmap/zlint/v3/lint\"\n)\n\nvar certDER []byte = ...\nparsed, err := x509.ParseCertificate(certDER)\nif err != nil {\n\t// If x509.ParseCertificate fails, the certificate is too broken to lint.\n\t// This should be treated as ZLint rejecting the certificate\n\tlog.Fatal(\"unable to parse certificate:\", err)\n}\n\nregistry, err := lint.GlobalRegistry().Filter(lint.FilterOptions{\n  ExcludeSources: []lint.LintSource{lint.EtsiEsi},\n})\nif err != nil {\n\tlog.Fatal(\"lint registry filter failed to apply:\", err)\n}\nzlintResultSet := zlint.LintCertificateEx(parsed, registry)\n```\n\nTo lint a certificate in the presence of a particular configuration file, you must first construct the configuration and then make a call to `SetConfiguration` in the `Registry` interface.\n\nA `Configuration` may be constructed using any of the following functions:\n\n* `lint.NewConfig(r io.Reader) (Configuration, error)`\n* `lint.NewConfigFromFile(path string) (Configuration, error)`\n* `lint.NewConfigFromString(config string) (Configuration, error)`\n\nThe contents of the input to all three constructors must be a valid TOML document.\n\n```go\nimport (\n\t\"github.com/zmap/zcrypto/x509\"\n\t\"github.com/zmap/zlint/v3\"\n)\n\nvar certDER []byte = ...\nparsed, err := x509.ParseCertificate(certDER)\nif err != nil {\n\t// If x509.ParseCertificate fails, the certificate is too broken to lint.\n\t// This should be treated as ZLint rejecting the certificate\n\tlog.Fatal(\"unable to parse certificate:\", err)\n}\nconfiguration, err := lint.NewConfigFromString(`\n        [some_configurable_lint]\n        IsWebPki = true\n        NumIterations = 42\n        \n        [some_configurable_lint.AnySubMapping]\n        something = \"else\"\n        anything = \"at all\"\n`)\nif err != nil {\n\tlog.Fatal(\"unable to parse configuration:\", err)\n}\nlint.GlobalRegistry().SetConfigutration(configuration)\nzlintResultSet := zlint.LintCertificate(parsed)\n```\n\nSee [the `zlint` command][zlint cmd]'s source code for an example.\n\n[zlint cmd]: https://github.com/zmap/zlint/blob/master/v3/cmd/zlint/main.go\n\n\nExtending ZLint\n----------------\n\nFor information on extending ZLint with new lints see [CONTRIBUTING.md]\n\n[CONTRIBUTING.md]: https://github.com/zmap/zlint/blob/master/CONTRIBUTING.md\n\n\nZlint Users/Integrations\n-------------------------\n\nPre-issuance linting is **strongly recommended** by the [Mozilla root\nprogram](https://wiki.allizom.org/CA/Required_or_Recommended_Practices#Pre-Issuance_Linting).\nHere are some projects/CAs known to integrate with ZLint in some fashion:\n\n* [Actalis](https://www.actalis.it/en/home.aspx)\n* [ANF AC](https://www.anf.es/)\n* [Camerfirma](https://www.camerfirma.com/)\n* [CFSSL](https://github.com/cloudflare/cfssl)\n* [Digicert](https://www.digicert.com/)\n* [EJBCA](https://download.primekey.com/docs/EJBCA-Enterprise/6_11_1/adminguide.html#Post%20Processing%20Validators%20(Pre-Certificate%20or%20Certificate%20Validation))\n* [Entrust](https://www.entrust.com/)\n* [Globalsign](https://www.globalsign.com/en/)\n* [GoDaddy](https://www.godaddy.com)\n* [Google Trust Services](https://pki.goog/)\n* [Government of Spain, FNMT](http://www.fnmt.es/)\n* [Izenpe](https://www.izenpe.eus/)\n* [Let's Encrypt](https://letsencrypt.org) and [Boulder](https://github.com/letsencrypt/boulder)\n* [Microsec](https://www.microsec.com/)\n* [Microsoft](https://www.microsoft.com)\n* [Nexus Certificate Manager](https://doc.nexusgroup.com/display/PUB/Smart+ID+Certificate+Manager)\n* [QuoVadis](https://www.quovadisglobal.com/)\n* [Sectigo](https://sectigo.com/) and [crt.sh](https://crt.sh)\n* [Siemens](https://siemens.com/pki)\n* [SSL.com](https://www.ssl.com/)\n* [PKI Insights](https://www.codegic.com/pki-insights-health-monitoring-for-microsoft-ca/)\n\nPlease submit a pull request to update the README if you are aware of\nanother CA/project that uses zlint.\n\n\nLicense and Copyright\n---------------------\n\nZMap Copyright 2021 Regents of the University of Michigan\n\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed\nunder the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\nCONDITIONS OF ANY KIND, either express or implied. See LICENSE for the specific\nlanguage governing permissions and limitations under the License."
}
