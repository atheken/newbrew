{
  "name": "tre-command",
  "full_name": "tre-command",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Tree command, improved",
  "license": "MIT",
  "homepage": "https://github.com/dduan/tre",
  "versions": {
    "stable": "0.4.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/dduan/tre/archive/v0.4.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "280243cfa837661f0c3fff41e4a63c6768631073c9f6ce9982d9ed08e038788a"
    },
    "head": {
      "url": "https://github.com/dduan/tre.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tre-command/blobs/sha256:f787031ef204c5d4e4dd52c3dc5481060a511566ec3ef62e384a9db088f1cdf8",
          "sha256": "f787031ef204c5d4e4dd52c3dc5481060a511566ec3ef62e384a9db088f1cdf8"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tre-command/blobs/sha256:cfbf9c430e051dbdd5760442116b9f8ac7460303eb9d8a56b1c9e8cb43c0c1db",
          "sha256": "cfbf9c430e051dbdd5760442116b9f8ac7460303eb9d8a56b1c9e8cb43c0c1db"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tre-command/blobs/sha256:ba30451c10d70726bb77ed8778270a6c49dae005705c414ed0393b12c32b0c02",
          "sha256": "ba30451c10d70726bb77ed8778270a6c49dae005705c414ed0393b12c32b0c02"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tre-command/blobs/sha256:977aceaa612ec136e51822d3b2a41104b8ad894c0df446978281de0ad33fd3fa",
          "sha256": "977aceaa612ec136e51822d3b2a41104b8ad894c0df446978281de0ad33fd3fa"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tre-command/blobs/sha256:fdc8517f7b935c90ef76f8e34d5848b94c8465748d1ef11482c3b2a7fd317fed",
          "sha256": "fdc8517f7b935c90ef76f8e34d5848b94c8465748d1ef11482c3b2a7fd317fed"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tre-command/blobs/sha256:a0fa68cab885f6f6df3d68728f8ae1fd5a37d70193e446b0c8f323987f57842a",
          "sha256": "a0fa68cab885f6f6df3d68728f8ae1fd5a37d70193e446b0c8f323987f57842a"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tre-command/blobs/sha256:8b8e4a41a926e429fdb9aecc7838e5362e193b1054a7ea3e2e8622dac360e6fd",
          "sha256": "8b8e4a41a926e429fdb9aecc7838e5362e193b1054a7ea3e2e8622dac360e6fd"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tre-command/blobs/sha256:08bc7da0c42d6496d0cfdd537d6668ae0250df89f0c1bf0aee5f580c7455be88",
          "sha256": "08bc7da0c42d6496d0cfdd537d6668ae0250df89f0c1bf0aee5f580c7455be88"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "982192bf852eebace6c92c1e792d894990b8620e",
  "ruby_source_path": "Formula/tre-command.rb",
  "ruby_source_checksum": {
    "sha256": "8f99e4f05e6745a5b5cb816335e167dbcdbd1048517067bcec9821ae3d2b60e6"
  },
  "date_added": "2020-06-17T13:41:36+00:00",
  "readme": "# tre\n\nA modern alternative to the `tree` command that:\n\n* lists directory structure in a tree-like diagram, like the classics.\n* skips ignored files in git repositories per `.gitignore` setting.\n* creates shell aliases for each listing that opens the files for you.\n* output in colors, respecting [LS_COLORS][] settings when they exist.\n\nCommand aliasing demo:\n\n![Aliasing In Action](alias_demo.gif)\n\n… in case you missed it: `[8]` is shown in front of \"README.md\" and typing `e8`\nopened the file! See [how to set this up](#editor-aliasing).\n\n[LS_COLORS]: https://man7.org/linux/man-pages/man5/dir_colors.5.html\n\n## Install\n\n#### Via a package manager\n\nTre is available in the following package managers.\n\n| Manager / OS            | Command                      |\n| ----------------------- | ---------------------------- |\n| Homebrew / macOS        | `brew install tre-command`   |\n| MacPorts / macOS        | `port install tre-tree`      |\n| Debian (testing)        | `apt install tre-command`    |\n| Scoop / Windows         | `scoop install tre-command`  |\n| Windows Package Manager | `winget install tre-command` |\n| Cargo                   | `cargo install tre-command`  |\n| AUR / Arch Linux        | `yay -S tre-command`         |\n| pkgsrc / NetBSD 9.1+    | `pkgin install tre-command`  |\n| Nixpkgs / NixOS         | Use `tre-command`            |\n| Nix flake               | Use `github:dduan/tre`       |\n\n_The commands above are basic instructions. Use your favorite alternatives if\nyou have one. For example, use a config file for Nix; or other method to install\nfrom AUR; pkgsrc can be use on OSes other than NetBSD etc._\n\n### Pre-built executable\n\nChoose an pre-built executable from the [release page][] that fits your\nplatform to download. Unpack it somewhere you'd like to run it from.\n\n[release page]: https://github.com/dduan/tre/releases\n\n### From Source\n\n1. Clone this repository: `git clone https://github.com/dduan/tre.git`.\n2. Ensure you have Rust and Cargo installed. If not, follow instruction [here](https://rustup.rs).\n3. In the root level of this repo, run `cargo build --release`.\n4. Move `target/release/tre` to somewhere in your PATH environment variable.\n\n## Editor aliasing\n\ntre provides a `-e` flag that, when used, turns on the \"editor aliasing\"\nfeature. Some shell configuration will make this work better.\n\n### macOS/Linux\nBy default, the environment variable `$EDITOR` is used as the editor. If a\nvalue following `-e` is supplied (`tre -e emacs` instead of `tre -e`), then\nthe command specified by this value will be used instead of `$EDITOR`. Update\nthe script in the next section accordingly.\n\n#### Bash or Zsh\n\nIn `~/.bashrc` or `~/.zshrc` (for example)\n\n```bash\ntre() { command tre \"$@\" -e && source \"/tmp/tre_aliases_$USER\" 2>/dev/null; }\n```\n\n#### Fish\n\nCreate `~/.config/fish/functions/tre.fish`:\n\n```fish\nfunction tre\n  command tre $argv -e; and source /tmp/tre_aliases_$USER ^/dev/null\nend\n```\n\n### Windows (10+)\n\nInstead of directly executing `tre.exe`, we'll set up a script that's\navailable in your `PATH` environment variable. For example, you can add\n`\\Users\\yourname\\bin` to your `PATH` environment variable, and created the\nscript there. When you use `tre`, this script executes `tre.exe`, and do some\nadditional work. The content of the script is different for PowerShell and\nCommand Prompt.\n\nBy default, the default program known by Windows will be used to open the\nfile. If a value following `-e` is supplied (`tre -e notepad.exe` instead of\n`tre -e`), then the command specified by this value will be used. Update the\nscripts in the next section accordingly.\n\n#### PowerShell\n\nAdd a `tre.ps1` file:\n\n```ps1\nif (Get-Module PSReadLine) {\n  Remove-Module -Force PSReadLine\n}\ntre.exe $args -e\n. $Env:TEMP\\tre_aliases_$env:USERNAME.ps1\n```\n\n#### Command Prompt (CMD.exe)\n\nAdd a `tre.bat`:\n\n```\n@echo off\ntre.exe %* -e\ncall %TEMP%\\tre_aliases_%USERNAME%.bat\n```\n\n### How it works\n\nThe first thing you'll notice is some numbers in front of each file name in\ntre's output. If pick a number, say, \"3\", and enter `e3` in the shell, the file\nafter \"3\" will open in your default program (specified by the environment\nvariable `EDITOR` in macOS/Linux, and picked by Windows).\n\nEverytime tre runs with `-e`, it updates a file in a temporary directory, and\nadds an alias for each result it displays. And the additional configuration\nsimply sources this file after the command. You can manually run\n\nin Bash/Zsh/Fish:\n```bash\nsource /tmp/tre_aliases_$USER\n```\n\nor\n\nin PowerShell\n```ps1\n. $Env:TEMP\\tre_aliases_$env:USERNAME.ps1\n```\n\nor\n\nin Command Prompt\n\n```\ncall %TEMP%\\tre_aliases_%USERNAME%.bat\n```\n\n… instead of configuring your system (if you are _that_ patient!).\n\n## Everything else\n\nHere's the output from `tre -h`, showing all available options provided by tre:\n\n```\nUSAGE:\n    tre [OPTIONS] [PATH]\n\nARGS:\n    <PATH>    [default: .]\n\nOPTIONS:\n    -a, --all                   Print all files and directories, including hidden ones\n    -c, --color <WHEN>          When to color the output. `automatic` means when printing to a\n                                terminal, tre will include colors; otherwise it will disable colors\n                                [default: automatic] [possible values: automatic, always, never]\n    -d, --directories           Only list directories in output\n    -e, --editor [<COMMAND>]    Create aliases for each displayed result, and add a number in front\n                                of file name to indicate the alias name. For example, a number \"42\"\n                                means an shell alias \"e42\" has been created. Running \"e42\" will\n                                cause the associated file or directory to be open with $EDITOR (or a\n                                default program for the file type on Windows), or a command\n                                specified along with this command\n    -E, --exclude <PATTERN>     Exclude paths matching a regex pattern. Repeatable\n    -h, --help                  Print help information\n    -j, --json                  Output JSON instead of tree diagram\n    -l, --limit <LIMIT>         Limit depth of the tree in output\n    -p, --portable              Generate portable (absolute) paths for editor aliases. By default,\n                                aliases use relative paths for better performance\n    -s, --simple                Use normal print despite gitignore settings. '-a' has higher\n                                priority\n    -V, --version               Print version information\n```\n\nIf you like the editor aliasing feature, you may want to check out [ea][].\n\n[ea]: https://github.com/dduan/ea\n\n## Packaging\n\n`tre` is a standard Cargo-managed Rust project.\nA unix manual is available at `manual/tre.1`.\nCompletion scripts for various shells are at `scripts/completion`.\n\n## License\n\nMIT. See `LICENSE.md`."
}
