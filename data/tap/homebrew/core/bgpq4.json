{
  "name": "bgpq4",
  "full_name": "bgpq4",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "BGP filtering automation for Cisco, Juniper, BIRD and OpenBGPD routers",
  "license": "BSD-2-Clause",
  "homepage": "https://github.com/bgp/bgpq4",
  "versions": {
    "stable": "1.11",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/bgp/bgpq4/archive/refs/tags/1.11.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "0e5325633f607e00262a6b96d1d246a9d27b4b869bbcf582a46e8a43c5fa4e18"
    },
    "head": {
      "url": "https://github.com/bgp/bgpq4.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bgpq4/blobs/sha256:9b5c9a1871de533c0d74a3052489400ced52e49e6e99475e258a6442e0a4041e",
          "sha256": "9b5c9a1871de533c0d74a3052489400ced52e49e6e99475e258a6442e0a4041e"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bgpq4/blobs/sha256:417f0f9521bd293a97185c7f792987e9a4fb0b5d8b7a92b54b571f24a9658878",
          "sha256": "417f0f9521bd293a97185c7f792987e9a4fb0b5d8b7a92b54b571f24a9658878"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bgpq4/blobs/sha256:31d0cbfc96c55a284a9532853d086127bfa521789c729a326bd5bb3408108411",
          "sha256": "31d0cbfc96c55a284a9532853d086127bfa521789c729a326bd5bb3408108411"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bgpq4/blobs/sha256:3ffbdc6135d1e5a964933b27d6f3d46f576ae9dd797c0d14657b139c5b5703ca",
          "sha256": "3ffbdc6135d1e5a964933b27d6f3d46f576ae9dd797c0d14657b139c5b5703ca"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bgpq4/blobs/sha256:7b5aa6a92d074e95581a838ffee72d444566e3a234060a5097933f666b725f5a",
          "sha256": "7b5aa6a92d074e95581a838ffee72d444566e3a234060a5097933f666b725f5a"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bgpq4/blobs/sha256:54aea55941a349a5f272e684d4edab343e99f955f295f80ce5ab7574ed0eb733",
          "sha256": "54aea55941a349a5f272e684d4edab343e99f955f295f80ce5ab7574ed0eb733"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bgpq4/blobs/sha256:3bc9b45b4b4af4e3f171006c2d967907aa43bba2e9d024ed072f559493edbf8a",
          "sha256": "3bc9b45b4b4af4e3f171006c2d967907aa43bba2e9d024ed072f559493edbf8a"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "autoconf",
    "automake",
    "libtool"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "2706c66e8def3eeba4d9bf1adf66221c8ad70701",
  "ruby_source_path": "Formula/bgpq4.rb",
  "ruby_source_checksum": {
    "sha256": "904c35f1b5cb70b6ab8e809b5623ce797f57c3ce11c6131cc55d1f70fce3f426"
  },
  "date_added": "2021-06-16T17:10:50+00:00",
  "readme": "# NAME\n\n**bgpq4** - bgp filtering automation tool\n\n# SYNOPSIS\n\n**bgpq4**\n\\[**-h**&nbsp;*host\\[:port]*]\n\\[**-S**&nbsp;*sources*]\n\\[**-EPz**]\n\\[**-f**&nbsp;*asn*&nbsp;|\n**-F**&nbsp;*fmt*&nbsp;|\n**-G**&nbsp;*asn*\n**-H**&nbsp;*asn*\n**-t**]\n\\[**-46ABbDdJjNnpsXU**]\n\\[**-a**&nbsp;*asn*]\n\\[**-r**&nbsp;*len*]\n\\[**-R**&nbsp;*len*]\n\\[**-m**&nbsp;*max*]\n\\[**-W**&nbsp;*len*]\n*OBJECTS*\n\\[...]\n\\[EXCEPT&nbsp;OBJECTS]\n\n# DESCRIPTION\n\nThe\n**bgpq4**\nutility is used to generate configurations (prefix-lists, extended\naccess-lists, policy-statement terms and as-path lists) based on IRR data.\n\nIt's options are as follows:\n\n**-4**\n\n> generate IPv4 prefix/access-lists (default).\n\n**-6**\n\n> generate IPv6 prefix/access-lists (IPv4 by default).\n\n**-A**\n\n> try to aggregate prefix-lists as much as possible (not all output\n> formats supported).\n\n**-a** *asn*\n\n> specify what asn shall be denied in case of empty prefix-list (OpenBGPD)\n\n**-B**\n\n> generate output in OpenBGPD format (default: Cisco)\n\n**-b**\n\n> generate output in BIRD format (default: Cisco).\n\n**-d**\n\n> enable some debugging output.\n\n**-e**\n\n> generate output in Arista EOS format (default: Cisco).\n\n**-E**\n\n> generate extended access-list (Cisco), policy-statement term using\n> route-filters (Juniper), \\[ip|ipv6]-prefix-list (Nokia) or prefix-sets\n> (OpenBGPd).\n\n**-f** *number*\n\n> generate input as-path access-list.\n\n**-F** *fmt*\n\n> generate output in user-defined format.\n\n**-G** *number*\n\n> generate output as-path access-list.\n\n**-H** *number*\n\n> generate output as-list for JunOS 21.3R1+ `as-path-origin` filter (JunOS only)\n\n**-h** *host\\[:port]*\n\n> host running IRRD database (default: rr.ntt.net).\n\n**-J**\n\n> generate config for Juniper (default: Cisco).\n\n**-j**\n\n> generate output in JSON format (default: Cisco).\n\n**-K**\n\n> generate config for Mikrotik ROSv6 (default: Cisco).\n\n**-K7**\n\n> generate config for Mikrotik ROSv7 (default: Cisco).\n\n**-l** *name*\n\n> name of generated entry.\n\n**-L** *limit*\n\n> limit recursion depth when expanding as-sets.\n\n**-m** *len*\n\n> maximum prefix-length of accepted prefixes (default: 32 for IPv4 and\n> 128 for IPv6).\n\n**-M** *match*\n\n> extra match conditions for Juniper route-filters.\n\n**-n**\n\n> generate config for Nokia SR OS MD-CLI (Cisco IOS by default)\n\n**-n2**\n\n> generate config for Nokia SR Linux (Cisco IOS by default)\n\n**-N**\n\n> generate config for Nokia SR OS classic CLI (Cisco IOS by default).\n\n**-p**\n\n> emit prefixes where the origin ASN is in the private ASN range\n> (disabled by default).\n\n**-r** *len*\n\n> allow more specific routes starting with specified masklen too.\n\n**-R** *len*\n\n> allow more specific routes up to specified masklen too.\n\n**-s**\n\n> generate sequence numbers in IOS-style prefix-lists.\n\n**-S** *sources*\n\n> use specified sources only (recommended: RPKI,AFRINIC,ARIN,APNIC,LACNIC,RIPE).\n\n**-t**\n\n> generate as-sets for OpenBGPd, BIRD and JSON formats.\n\n**-T**\n\n> disable pipelining (not recommended).\n\n**-W** *len*\n\n> generate as-path strings of no more than len items (use 0 for infinity).\n\n**-U**\n\n> generate config for Huawei devices (Cisco IOS by default)\n\n**-u**\n\n> generate output in Huawei XPL format.\n\n**-X**\n\n> generate config for Cisco IOS XR devices (plain IOS by default).\n\n**-z**\n\n> generate route-filter-lists (JunOS 16.2+).\n\n*OBJECTS*\n\n> means networks (in prefix format), autonomous systems, as-sets and route-sets.\n\n*EXCEPT OBJECTS*\n\n> those objects will be excluded from expansion.\n\n# EXAMPLES\n\nGenerating named juniper prefix-filter for AS20597:\n\n\t$ bgpq4 -Jl eltel AS20597\n\tpolicy-options {\n\treplace:\n\t prefix-list eltel {\n\t    81.9.0.0/20;\n\t    81.9.32.0/20;\n\t    81.9.96.0/20;\n\t    81.222.128.0/20;\n\t    81.222.192.0/18;\n\t    85.249.8.0/21;\n\t    85.249.224.0/19;\n\t    89.112.0.0/19;\n\t    89.112.4.0/22;\n\t    89.112.32.0/19;\n\t    89.112.64.0/19;\n\t    217.170.64.0/20;\n\t    217.170.80.0/20;\n\t }\n\t}\n\nFor Cisco we can use aggregation (-A) flag to make this prefix-filter\nmore compact:\n\n\t$ bgpq4 -Al eltel AS20597\n\tno ip prefix-list eltel\n\tip prefix-list eltel permit 81.9.0.0/20\n\tip prefix-list eltel permit 81.9.32.0/20\n\tip prefix-list eltel permit 81.9.96.0/20\n\tip prefix-list eltel permit 81.222.128.0/20\n\tip prefix-list eltel permit 81.222.192.0/18\n\tip prefix-list eltel permit 85.249.8.0/21\n\tip prefix-list eltel permit 85.249.224.0/19\n\tip prefix-list eltel permit 89.112.0.0/18 ge 19 le 19\n\tip prefix-list eltel permit 89.112.4.0/22\n\tip prefix-list eltel permit 89.112.64.0/19\n\tip prefix-list eltel permit 217.170.64.0/19 ge 20 le 20\n\nPrefixes 89.112.0.0/19 and 89.112.32.0/19 now aggregated\ninto single entry 89.112.0.0/18 ge 19 le 19.\n\nWell, for Juniper we can generate even more interesting policy-options,\nusing -M &lt;extra match conditions&gt;, -R &lt;len&gt; and hierarchical names:\n\n\t$ bgpq4 -AJEl eltel/specifics -r 29 -R 32 -M \"community blackhole\" AS20597\n\tpolicy-options {\n\t policy-statement eltel {\n\t  term specifics {\n\treplace:\n\t   from {\n\t    community blackhole;\n\t    route-filter 81.9.0.0/20 prefix-length-range /29-/32;\n\t    route-filter 81.9.32.0/20 prefix-length-range /29-/32;\n\t    route-filter 81.9.96.0/20 prefix-length-range /29-/32;\n\t    route-filter 81.222.128.0/20 prefix-length-range /29-/32;\n\t    route-filter 81.222.192.0/18 prefix-length-range /29-/32;\n\t    route-filter 85.249.8.0/21 prefix-length-range /29-/32;\n\t    route-filter 85.249.224.0/19 prefix-length-range /29-/32;\n\t    route-filter 89.112.0.0/17 prefix-length-range /29-/32;\n\t    route-filter 217.170.64.0/19 prefix-length-range /29-/32;\n\t   }\n\t  }\n\t }\n\t}\n\ngenerated policy-option term now allows all specifics with prefix-length\nbetween /29 and /32 for eltel networks if they match with special community\nblackhole (defined elsewhere in configuration).\n\nOf course, this version supports IPv6 (-6):\n\n\t$ bgpq4 -6l as-retn-6 AS-RETN6\n\tno ipv6 prefix-list as-retn-6\n\tipv6 prefix-list as-retn-6 permit 2001:7fb:fe00::/48\n\tipv6 prefix-list as-retn-6 permit 2001:7fb:fe01::/48\n\t[....]\n\nand assumes your device supports 32-bit ASNs\n\n\t$ bgpq4 -Jf 112 AS-SPACENET\n\tpolicy-options {\n\treplace:\n\t as-path-group NN {\n\t  as-path a0 \"^112(112)*$\";\n\t  as-path a1 \"^112(.)*(1898|5539|8495|8763|8878|12136|12931|15909)$\";\n\t  as-path a2 \"^112(.)*(21358|23456|23600|24151|25152|31529|34127|34906)$\";\n\t  as-path a3 \"^112(.)*(35052|41720|43628|44450|196611)$\";\n\t }\n\t}\n\nsee \\`AS196611\\` in the end of the list ? That's a 32-bit ASN.\n\n# USER-DEFINED FORMAT\n\nIf you want to generate configuration not for routers, but for some\nother programs/systems, you may use user-defined formatting, like in\nexample below:\n\n\t$ bgpq4 -F \"ipfw add pass all from %n/%l to any\\n\" as3254\n\tipfw add pass all from 62.244.0.0/18 to any\n\tipfw add pass all from 91.219.29.0/24 to any\n\tipfw add pass all from 91.219.30.0/24 to any\n\tipfw add pass all from 193.193.192.0/19 to any\n\nRecognized format sequences are:\n\n**%n**\n\n> network\n\n**%l**\n\n> mask length\n\n**%a**\n\n> aggregate low mask length\n\n**%A**\n\n> aggregate high mask length\n\n**%N**\n\n> object name\n\n**%m**\n\n> object mask\n\n**%i**\n\n> inversed mask\n\n**&#92;n**\n\n> new line\n\n**&#92;t**\n\n> tabulation\n\nPlease note that no new lines inserted automatically after each sentence,\nyou have to add them into format string manually, elsewhere output will\nbe in one line (sometimes it makes sense):\n\n\t$ bgpq4 -6F \"%n/%l; \" as-eltel\n\t2001:1b00::/32; 2620:4f:8000::/48; 2a04:bac0::/29; 2a05:3a80::/48;\n\n# NOTES ON SOURCES\n\nBy default *bgpq4* trusts data from all databases mirrored into NTT's IRR service.\nUnfortunately, not all these databases are equal in how much can we trust their\ndata.\nRIR maintained databases (AFRINIC, ARIN, APNIC, LACNIC and RIPE)\nshall be trusted more than the others because they have the knowledge about\nwhich address space is allocated to each ASN, other databases lack this\nknowledge and can (and actually do) contain some stale data: nobody but RIRs\ncare to remove outdated route-objects when address space is revoked from one\nASN and allocated to another. In order to keep their filters both compact and\ncurrent, *bgpq4 users* are encouraged to use one of two method to limit\ndatabase sources to only ones they trust.\n\nOne option is to use the '-S' flag. This limits all queries to a specific data\nsource. For example, the following command tells IIRd to only use data from\nthe RIPE RIR DB to build the prefix list for the AS-SET:\n\n\t$./bgpq4 -S RIPE AS-VOSTRON\n\tno ip prefix-list NN\n\tip prefix-list NN permit 89.21.224.0/19\n\tip prefix-list NN permit 134.0.64.0/21\n\nBe aware though, than an AS-SET may contain members from other data sources.\nIn this case IRRd won't respond to the bgpq4 query will all the prefixes in the\nAS-SET tree. Make sure to use the '-S' flag with all the data sources required\nfor the AS-SET being expanded:\n\n\t$./bgpq4 -S RIPE,ARIN AS-VOSTRON\n\tno ip prefix-list NN\n\tip prefix-list NN permit 89.21.224.0/19\n\tip prefix-list NN permit 134.0.64.0/21\n\tip prefix-list NN permit 208.86.232.0/24\n\tip prefix-list NN permit 208.86.233.0/24\n\tip prefix-list NN permit 208.86.234.0/24\n\tip prefix-list NN permit 208.86.235.0/24\n\nThe other option is to specify a source for an AS-SET or Route Set using the\n\"::\" notation. When bgpq4 detects this, it will look for \"::\" in the specified\nAS-SET or RS on the CLI, and in all members of the AS-SET/RS, and for each\nmember with a data source specified in \"::\" format, it will set the IRRd data\nsource to the given value, query the AS-SET/RS, then reset the data sources back\n to the default list for the next object in the tree.\n\n\t$./bgpq4 RIPE::AS-VOSTRON\n\tno ip prefix-list NN\n\tip prefix-list NN permit 89.21.224.0/19\n\tip prefix-list NN permit 134.0.64.0/21\n\tip prefix-list NN permit 208.86.232.0/22\n\tip prefix-list NN permit 208.86.232.0/24\n\tip prefix-list NN permit 208.86.233.0/24\n\tip prefix-list NN permit 208.86.234.0/24\n\tip prefix-list NN permit 208.86.235.0/24\n\nIn comparison to the '-S' flag, this method return all the prefixes under the\nAS-SET, but the root of the tree \"AS-VOSTRON\" was queries from RIPE only. None\nof the member objects used the \"::\" notation so they were queries from the\ndefault source list (which is all sources).\n\n\nGeneral recommendations:\n\nUse minimal set of RIR databases (only those in which you and your\ncustomers have registered route-objects).\n\nAvoid using ARIN-NONAUTH and RIPE-NONAUTH as trusted sources: these records\nwere created in database but for address space allocated to different RIR,\nso the NONAUTH databases have no chance to confirm validity of this route\nobject.\n\n\t$ bgpq4 -S RIPE,RADB as-space\n\tno ip prefix-list NN\n\tip prefix-list NN permit 195.190.32.0/19\n\t\n\t$ bgpq4 -S RADB,RIPE as-space\n\tno ip prefix-list NN\n\tip prefix-list NN permit 45.4.4.0/22\n\tip prefix-list NN permit 45.4.132.0/22\n\tip prefix-list NN permit 45.6.128.0/22\n\tip prefix-list NN permit 45.65.184.0/22\n\t[...]\n\nWhen known, use the \"::\" notation to speicy the authortative data source for\nan AS-SET or RS instead of the -S flag.\n\n# PERFORMANCE\n\nTo improve \\`bgpq4\\` performance when expanding extra-large AS-SETs you\nshall tune OS settings to enlarge TCP send buffer.\n\nFreeBSD can be tuned in the following way:\n\n\tsysctl -w net.inet.tcp.sendbuf_max=2097152\n\nLinux can be tuned in the following way:\n\n\tsysctl -w net.ipv4.tcp_window_scaling=1\n\n\tsysctl -w net.core.rmem_max=2097152\n\n\tsysctl -w net.core.wmem_max=2097152\n\n\tsysctl -w net.ipv4.tcp_rmem=\"4096 87380 2097152\"\n\n\tsysctl -w net.ipv4.tcp_wmem=\"4096 65536 2097152\"\n\n# CONTAINER IMAGE\n\nA multi-arch (linux/amd64 and linux/arm64) container image is built automatically for all tagged releases and `main` branch. The image is based on Alpine Linux and is available on [GitHub Container Registry](https://github.com/bgp/bgpq4/pkgs/container/bgpq4).\n\nUsing the image is as simple as:\n\n\t```\n\tdocker run --rm ghcr.io/bgp/bgpq4:latest -Jl eltel AS20597\n\tpolicy-options {\n\t\treplace:\n\t\tprefix-list eltel {\n\t\t\t81.9.0.0/20;\n\t\t\t81.9.32.0/20;\n\t\t\t81.9.96.0/20;\n\t\t\t81.222.128.0/20;\n\t\t\t81.222.160.0/20;\n\t\t\t81.222.192.0/18;\n\t\t\t85.249.8.0/21;\n\t\t\t85.249.224.0/19;\n\t\t\t89.112.0.0/17;\n\t\t\t217.170.64.0/19;\n\t\t}\n\t\t}\n\t```\n\n# BUILDING\n\nThis project uses autotools. If you are building from the repository,\nrun the following command to prepare the build system:\n\n\t./bootstrap\n\nIn order to compile the software, run:\n\n\t./configure\n\n\tmake\n\n\tmake install\n\nIf you wish to remove the generated build system files from your\nworking tree, run:\n\n\tmake maintainer-clean\n\nIn order to create a distribution archive, run:\n\n\tmake dist\n\n# DIAGNOSTICS\n\nWhen everything is OK,\n**bgpq4**\ngenerates access-list to standard output and exits with status == 0.\nIn case of errors they are printed to stderr and the program exits with\nnon-zero status.\n\n# TESTS\n\nThe [tests/](tests/) folder contains reference output data in [text files](tests/reference/). The [generate_outputs.sh](tests/generate_outputs.sh) script is used in the [Github workflow](.github/workflows/unit-tests.yml) to generate the same output data, using the latest commit, and compare the output data to the stored \"known-good\" reference data, and check there are no changes.\n\nTo update the reference data (i.e. if the bgpq4 output is modified), simply run the script again (`./tests/generate_outputs.sh ./bgpq4 tests/reference`) and commit the changes.\n\n# AUTHORS\n\nAlexandre Snarskii, Christian David, Claudio Jeker, Job Snijders,\nMassimiliano Stucchi, Michail Litvak, Peter Schoenmaker, Roelf Wichertjes,\nand contributions from many others.\n\n# SEE ALSO\n\n**https://github.com/bgp/bgpq4**\nBGPQ4 on Github.\n\n**http://bgpfilterguide.nlnog.net/**\nNLNOG's BGP Filter Guide.\n\n**https://tcp0.com/cgi-bin/mailman/listinfo/bgpq4**\nUsers and interested parties can subscribe to the BGPQ4 mailing list bgpq4@tcp0.com\n\n# PROJECT MAINTAINER\n\nJob Snijders &lt;job@sobornost.net&gt;"
}
