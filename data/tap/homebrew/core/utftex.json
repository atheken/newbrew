{
  "name": "utftex",
  "full_name": "utftex",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Pretty print math in monospace fonts, using a TeX-like syntax",
  "license": "GPL-3.0-only",
  "homepage": "https://github.com/bartp5/libtexprintf",
  "versions": {
    "stable": "1.25",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/bartp5/libtexprintf/archive/refs/tags/v1.25.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "c50a44e33eba551526ff553c0af0bdd3f3a219d8ed60f11fcd9d7b30cd028af1"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/utftex/blobs/sha256:73dc2f438c0c50b6a443aa39a102520bd3f524bb2710729ecc8f2f908c7d497b",
          "sha256": "73dc2f438c0c50b6a443aa39a102520bd3f524bb2710729ecc8f2f908c7d497b"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/utftex/blobs/sha256:0810afd3a4807c93ecaaf60b948ebc54d669b5b199c7e34ef06e3962abdb5b05",
          "sha256": "0810afd3a4807c93ecaaf60b948ebc54d669b5b199c7e34ef06e3962abdb5b05"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/utftex/blobs/sha256:2d42b33bf2be0776e1927f78d85e2a264b4a99cceaee85678c2f77d000863304",
          "sha256": "2d42b33bf2be0776e1927f78d85e2a264b4a99cceaee85678c2f77d000863304"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/utftex/blobs/sha256:48ad8ca0fca773183943258a5000b80ac87a92fbcf643b5d5ae6308549f4679f",
          "sha256": "48ad8ca0fca773183943258a5000b80ac87a92fbcf643b5d5ae6308549f4679f"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/utftex/blobs/sha256:4612a84d1625b774f4eea4e64c764dad77ca3b85e3fb80eadba71cb7febcc31e",
          "sha256": "4612a84d1625b774f4eea4e64c764dad77ca3b85e3fb80eadba71cb7febcc31e"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/utftex/blobs/sha256:972ff7102230d15986fd1cfe3b0275d47ca7c8fe99483e1009250cebcc96295a",
          "sha256": "972ff7102230d15986fd1cfe3b0275d47ca7c8fe99483e1009250cebcc96295a"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/utftex/blobs/sha256:765d49e6c14eb18ed03f6898866b5f1ef95cf3e7e3355e1881e2a5c966b33719",
          "sha256": "765d49e6c14eb18ed03f6898866b5f1ef95cf3e7e3355e1881e2a5c966b33719"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "autoconf",
    "automake",
    "libtool"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/utftex.rb",
  "ruby_source_checksum": {
    "sha256": "75997b71c26f8a7a8d3099395dd5056d4b09f58153c5f11ea8ba4b08c4aa19d9"
  },
  "date_added": "2023-02-05T04:53:19+00:00",
  "readme": "libtexprintf & utftex\n=====================\n[![CI](https://github.com/bartp5/libtexprintf/workflows/CI/badge.svg)](https://github.com/bartp5/libtexprintf/actions?query=workflow%3ACI)\n\nThe utftex program and underlying libtexprintf library provide tools to\npretty print math in mono-space fonts, using a tex-like syntax. It \nproduces UTF-8 encoded text. The program was inspired by \n[asciiTeX](http://asciitex.sourceforge.net/), and the improved \n[asciiTeX fork](https://github.com/larseggert/asciiTeX). However, \nutftex supports much more TeX syntax and contains extensive Unicode \ntables to map latex commands to Unicode symbols. Use \nlibtexprintf/utftex to unlock the math capabilities of Unicode in \nmono-space text applications.\n\nNote that how the equations look depends strongly on the font you use. \nNaturally, one needs a monospace font with good Unicode support for the \nsymbols you use. A good monospace font for math is, for example,  \n[JuliaMono](https://juliamono.netlify.app/).\n\nlibtexprintf\n------------\nThe core library to pretty print math in mono-space font. Use it to \nenable your c or c++ code to print out formatted math. The calls are \nmodeled after the printf family to produce formatted output.   \n\n\nutftex\n------\nThe utftex program uses libtexprinf to implement a command-line utility \nto format math. For example:  \n\n    > utftex '\\frac{\\alpha}{\\beta+x}'  \ngives\n \n     α   \n    ───  \n    β+x  \n\n\nThe texprintf library provides a fairly full featured tex-like syntax\nwith arrays, brackets, many symbols, and even font style (note that \ntexprintf outputs UTF-8 and as such cannot change the fonts. However,\nUnicode does provide several font-styles like mathematical calligraphic\nstyle, or italic). For example:\n\n    > utftex -F mathnormal '\\frac{1}{a+x}' \ngives  \n\n     1\n    ───\n    𝑎+𝑥\n\nIt also supports some diacritical combining marks, to do things like\n\n    utftex '\\vec x' \nto get\n \n    x⃗.\n\nA bit more elaborate example is this small table of Laplace transforms:\n\n    > utftex '\\begin{array}{|l|l|}  \n    \\hline  \n    f(t) & \\mathscr{L}[f(t)]=F(s) \\\\\\hline  \n    1 & \\frac{1}{s} \\\\\\hline  \n    e^{at}f(t) & F(s-a) \\\\\\hline  \n    \\delta\\left(t\\right) & 1 \\\\\\hline  \n    \\delta\\left(t-t_0\\right) & e^{-st_0} \\\\\\hline  \n    \\int_0^t f(x)g(t-x)dx & F(s)G(s)\\hline  \n    \\end{array}'  \n\n    ┌────────────────┬──────────────┐ \n    │f(t)            │ 𝓛[f(t)]=F(s) │  \n    ├────────────────┼──────────────┤  \n    │                │ 1            │  \n    │1               │ ─            │  \n    │                │ s            │  \n    ├────────────────┼──────────────┤  \n    │ at             │              │  \n    │e  f(t)         │ F(s-a)       │  \n    ├────────────────┼──────────────┤  \n    │δ(t)            │ 1            │  \n    ├────────────────┼──────────────┤  \n    │                │  -st         │  \n    │                │     0        │  \n    │δ⎛t-t ⎞         │ e            │  \n    │ ⎝   0⎠         │              │  \n    ├────────────────┼──────────────┤  \n    │ t              │              │  \n    │⌠               │              │  \n    │⎮  f(x)g(t-x)dx │ F(s)G(s)     │  \n    │⌡               │              │  \n    │ 0              │              │  \n    └────────────────┴──────────────┘  \n\n\nNote that if the table borders do not properly align you are not viewing \nthe table in monospace fonts. \n\nutfstringinfo\n-------------\nUtility to analyze UTF-8 strings. The utfstringinfo  program reads \narguments or, if no arguments are provided, stdin and for every single \ncharacter it finds it shows  the  UTF-8  byte sequence, the Unicode \ncode-point and, if applicable, the utftex command that can be used to \ngenerate the symbol.  \n\n\nQuestions One Might Ask (QOMA)\n------------------------------\n\n* Why is my equation all misaligned?\n\t- Make sure you are using mono-space fonts.\n\t\n* I am using mono-space fonts, why are my equations still poorly aligned?\n\t- Most fonts do not support all Unicode characters. Your program \n\t   may use some variable-width fallback fonts.\n\t   \n* Why are some symbols are not displayed (properly)?\n\t- Most fonts do not support all Unicode characters. Perhaps your \n\t   font engine just gave up? This also often happens when using \n\t   combining diacritical marks. Find the right set of font engine \n\t   and fonts to use.\n\t   \n* Can you recommend a good mono-space symbol font?\n\t- Best is if the monospace font you use supports lots of symbols by\n\t  itself. There are various fonts that support a great deal of \n\t  Unicode. See for example \n\t  [this discussion](https://stackoverflow.com/a/73313342/3662120).\n\t  As mentioned before I recommend \n\t  [JuliaMono](https://juliamono.netlify.app/).\n\t- Make your own out of your favorite (variable-space) fonts! The \n\t   great \"monospacifier\" will do that for you. Get it at \n\t   https://github.com/cpitclaudel/monospacifier\n\n* How do I specify the fallback fonts in <insert some program/system>?\n\t- This will depend on your system and/or program you are using. If \n\t   your system uses fontconfig you may try that to set up an \n\t   appropriate mono-space fallback font.\n\n* How do I specify the fallback fonts in with fontconfig?\n\t- Let us assume you use some mono-space font called \"MONO\" and we \n\t   have some symbol mono-space fallback font for it \"SYMBOLMONO\". \n\t   Here are the steps:\n\t   1. Install all fonts (e.g. copy font files to \n\t      ~/.local/share/fonts and run \"fc-cache -f -v\")\n\t   2. Then create a fontconfig file in \n\t      ~/.config/fontconfig/fonts.conf\n\t      It could look something like (replace the font names with the \n\t      appropriate values):\n\t      \n```\n<?xml version=\"1.0\"?>\n<!DOCTYPE fontconfig SYSTEM \"fonts.dtd\">\n<fontconfig>\n <alias>\n   <family>monospace</family>\n   <prefer>\n     <family>MONO</family>\n     <family>SYMBOLMONO</family>\n   </prefer>\n </alias>\n</fontconfig>\t   \n```\t     "
}
