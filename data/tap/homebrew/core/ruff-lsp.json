{
  "name": "ruff-lsp",
  "full_name": "ruff-lsp",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Language Server Protocol implementation for Ruff",
  "license": "MIT",
  "homepage": "https://github.com/astral-sh/ruff-lsp",
  "versions": {
    "stable": "0.0.35",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/astral-sh/ruff-lsp/archive/refs/tags/v0.0.35.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "49e2ce87b266c162056e65f121457f193956a6299360a87e45de623b5f697a09"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ruff-lsp/blobs/sha256:e6d958e83118ba75b9bcce40615f0bfab778a7af306ecc7499ce62722208015d",
          "sha256": "e6d958e83118ba75b9bcce40615f0bfab778a7af306ecc7499ce62722208015d"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ruff-lsp/blobs/sha256:338884417c6175e2ec556661ad72b3afa6d6bb47187398c197961a3f70f44794",
          "sha256": "338884417c6175e2ec556661ad72b3afa6d6bb47187398c197961a3f70f44794"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ruff-lsp/blobs/sha256:ee11619b033915e4a472bd17c05e119d3beffabbe7be4b386e216d9e54d4733d",
          "sha256": "ee11619b033915e4a472bd17c05e119d3beffabbe7be4b386e216d9e54d4733d"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ruff-lsp/blobs/sha256:0b2f0620f7625e4bff86140aa9216ad923ec8f244200caa11e3c2bc2c7342088",
          "sha256": "0b2f0620f7625e4bff86140aa9216ad923ec8f244200caa11e3c2bc2c7342088"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ruff-lsp/blobs/sha256:bcf8667fa668cf1f954c28634d0d58e7365277d0ec64f8b56f8bc4801717ee32",
          "sha256": "bcf8667fa668cf1f954c28634d0d58e7365277d0ec64f8b56f8bc4801717ee32"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ruff-lsp/blobs/sha256:21705992cc225f284d5f01502f9ca105f0bf65670890c0da1aa634e40a94e560",
          "sha256": "21705992cc225f284d5f01502f9ca105f0bf65670890c0da1aa634e40a94e560"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ruff-lsp/blobs/sha256:78b62008ccb994e459d8bd1a5a45131038837ba7326d60cf460411c0dc561091",
          "sha256": "78b62008ccb994e459d8bd1a5a45131038837ba7326d60cf460411c0dc561091"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "python-typing-extensions",
    "python@3.11",
    "ruff"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/ruff-lsp.rb",
  "ruby_source_checksum": {
    "sha256": "343052a14d14737d9491fb7c05ca407eb2ad450be1eb99f9b25dd88a2ec25457"
  },
  "date_added": "2023-07-11T12:45:56-07:00",
  "readme": "# ruff-lsp\n\n[![Ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json)](https://github.com/astral-sh/ruff)\n[![image](https://img.shields.io/pypi/v/ruff-lsp.svg)](https://pypi.python.org/pypi/ruff-lsp)\n[![image](https://img.shields.io/pypi/l/ruff-lsp.svg)](https://pypi.python.org/pypi/ruff-lsp)\n[![image](https://img.shields.io/pypi/pyversions/ruff-lsp.svg)](https://pypi.python.org/pypi/ruff-lsp)\n[![Actions status](https://github.com/astral-sh/ruff-lsp/workflows/CI/badge.svg)](https://github.com/astral-sh/ruff-lsp/actions)\n\nA [Language Server Protocol](https://microsoft.github.io/language-server-protocol/) implementation for\n[Ruff](https://github.com/astral-sh/ruff), an extremely fast Python linter and code transformation\ntool, written in Rust.\n\nEnables Ruff to be used in any editor that supports the LSP, including [Neovim](#example-neovim),\n[Sublime Text](#example-sublime-text), Emacs and more.\n\nFor Visual Studio Code, check out the [Ruff VS Code extension](https://github.com/astral-sh/ruff-vscode).\n\nruff-lsp supports surfacing Ruff diagnostics and providing Code Actions to fix them, but is intended to be used\nalongside another Python LSP in order to support features like navigation and autocompletion.\n\n## Highlights\n\n### \"Quick Fix\" actions for auto-fixable violations (like unused imports)\n\n![](https://user-images.githubusercontent.com/1309177/205176932-44cfc03a-120f-4bad-b710-612bdd7765d6.gif)\n\n### \"Fix all\": automatically fix all auto-fixable violations\n\n![](https://user-images.githubusercontent.com/1309177/205175763-cf34871d-5c05-4abf-9916-440afc82dbf8.gif)\n\n### \"Organize Imports\": `isort`-compatible import sorting\n\n![](https://user-images.githubusercontent.com/1309177/205175987-82e23e21-14bb-467d-9ef0-027f24b75865.gif)\n\n## Installation and Usage\n\n`ruff-lsp` is available as [`ruff-lsp`](https://pypi.org/project/ruff-lsp/) on PyPI:\n\n```shell\npip install ruff-lsp\n```\n\nFrom there, `ruff-lsp` can be used with any editor that supports the Language Server Protocol,\nincluding Neovim, Emacs, Sublime Text, and more.\n\n### Example: Neovim\n\nFor example, to use `ruff-lsp` with Neovim, install `ruff-lsp` from PyPI along with\n[`nvim-lspconfig`](https://github.com/neovim/nvim-lspconfig). Then, add something like the following\nto your `init.lua`:\n\n```lua\n-- See: https://github.com/neovim/nvim-lspconfig/tree/54eb2a070a4f389b1be0f98070f81d23e2b1a715#suggested-configuration\nlocal opts = { noremap=true, silent=true }\nvim.keymap.set('n', '<space>e', vim.diagnostic.open_float, opts)\nvim.keymap.set('n', '[d', vim.diagnostic.goto_prev, opts)\nvim.keymap.set('n', ']d', vim.diagnostic.goto_next, opts)\nvim.keymap.set('n', '<space>q', vim.diagnostic.setloclist, opts)\n\n-- Use an on_attach function to only map the following keys\n-- after the language server attaches to the current buffer\nlocal on_attach = function(client, bufnr)\n  -- Enable completion triggered by <c-x><c-o>\n  vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')\n\n  -- Mappings.\n  -- See `:help vim.lsp.*` for documentation on any of the below functions\n  local bufopts = { noremap=true, silent=true, buffer=bufnr }\n  vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, bufopts)\n  vim.keymap.set('n', 'gd', vim.lsp.buf.definition, bufopts)\n  vim.keymap.set('n', 'K', vim.lsp.buf.hover, bufopts)\n  vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, bufopts)\n  vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, bufopts)\n  vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, bufopts)\n  vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, bufopts)\n  vim.keymap.set('n', '<space>wl', function()\n    print(vim.inspect(vim.lsp.buf.list_workspace_folders()))\n  end, bufopts)\n  vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, bufopts)\n  vim.keymap.set('n', '<space>rn', vim.lsp.buf.rename, bufopts)\n  vim.keymap.set('n', '<space>ca', vim.lsp.buf.code_action, bufopts)\n  vim.keymap.set('n', 'gr', vim.lsp.buf.references, bufopts)\n  vim.keymap.set('n', '<space>f', function() vim.lsp.buf.format { async = true } end, bufopts)\nend\n\n-- Configure `ruff-lsp`.\n-- See: https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md#ruff_lsp\n-- For the default config, along with instructions on how to customize the settings\nrequire('lspconfig').ruff_lsp.setup {\n  on_attach = on_attach,\n  init_options = {\n    settings = {\n      -- Any extra CLI arguments for `ruff` go here.\n      args = {},\n    }\n  }\n}\n```\n\nUpon successful installation, you should see Ruff's diagnostics surfaced directly in your editor:\n\n![Code Actions available in Neovim](https://user-images.githubusercontent.com/1309177/208278707-25fa37e4-079d-4597-ad35-b95dba066960.png)\n\nNote that if you're using Ruff alongside another LSP (like Pyright), you may want to defer to that\nLSP for certain capabilities, like `textDocument/hover`:\n\n```lua\nlocal on_attach = function(client, bufnr)\n  -- Disable hover in favor of Pyright\n  client.server_capabilities.hoverProvider = false\nend\n\nrequire('lspconfig').ruff_lsp.setup {\n  on_attach = on_attach,\n}\n```\n\nRuff also integrates with [`coc.nvim`](https://github.com/neoclide/coc.nvim/wiki/Language-servers#using-ruff-lsp):\n\n```json\n\"languageserver\": {\n  \"ruff-lsp\": {\n    \"command\": \"ruff-lsp\",\n    \"filetypes\": [\"python\"]\n  }\n}\n```\n\n### Example: Sublime Text\n\nTo use `ruff-lsp` with Sublime Text, install Sublime Text's [LSP](https://github.com/sublimelsp/LSP)\nand [LSP-ruff](https://github.com/sublimelsp/LSP-ruff) package.\n\nUpon successful installation, you should see errors surfaced directly in your editor:\n\n![Code Actions available in Sublime Text](https://user-images.githubusercontent.com/1309177/208266375-331ad8e5-8ac1-4735-bca8-07734eb38536.png)\n\n### Example: Helix\n\nTo use `ruff-lsp` with [Helix](https://helix-editor.com/), add something like the following to\n`~/.config/helix/languages.toml`:\n\n```toml\n[[language]]\nname = \"python\"\nscope = \"source.python\"\nlanguage-server = { command = \"ruff-lsp\" }\nconfig = { settings = { args = [] } }\n```\n\nUpon successful installation, you should see errors surfaced directly in your editor:\n\n![](https://user-images.githubusercontent.com/1309177/209262106-71e34f8d-73cc-4889-89f7-3f54a4481c52.png)\n\n### Example: Lapce\n\nTo use `ruff-lsp` with [Lapce](https://lapce.dev/), install the [`lapce-ruff-lsp`](https://plugins.lapce.dev/plugins/abreumatheus/lapce-ruff-lsp)\nplugin (which wraps `ruff-lsp`) from the Lapce plugins panel.\n\nUpon successful installation, you should see errors surfaced directly in your editor:\n\n![](https://user-images.githubusercontent.com/1309177/209418462-ae106d1f-dbc3-4d53-bae2-66bfccc3e841.png)\n\n### Example: Kate\n\nTo use `ruff-lsp` with [Kate](https://kate-editor.org/), add something like the following to\nthe LSP client's `settings.json`:\n\n```json\n{\n  \"servers\": {\n    \"python\": {\n      \"command\": [\"ruff-lsp\"],\n      \"url\": \"https://github.com/astral-sh/ruff-lsp\",\n      \"highlightingModeRegex\": \"^Python$\"\n    }\n  }\n}\n```\n\n## Settings\n\nThe exact mechanism by which settings will be passed to `ruff-lsp` will vary by editor. However,\nthe following settings are supported:\n\n| Settings                             | Default  | Description                                                                                                                                                                                                                                                 |\n| ------------------------------------ | -------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| args                                 | `[]`     | Additional command-line arguments to pass to `ruff`, e.g., `\"args\": [\"--config=/path/to/pyproject.toml\"]`. Supports a subset of Ruff's command-line arguments, ignoring those that are required to operate the LSP, like `--force-exclude` and `--verbose`. |\n| logLevel                             | `error`  | Sets the tracing level for the extension: `error`, `warn`, `info`, or `debug`.                                                                                                                                                                              |\n| path                                 | `[]`     | Path to a custom `ruff` executable, e.g., `[\"/path/to/ruff\"]`.                                                                                                                                                                                              |\n| interpreter                          | `[]`     | Path to a Python interpreter to use to run the linter server.                                                                                                                                                                                               |\n| run                                  | `onType` | Run Ruff on every keystroke (`onType`) or on save (`onSave`).                                                                                                                                                                                               |\n| organizeImports                      | `true`   | Whether to register Ruff as capable of handling `source.organizeImports` actions.                                                                                                                                                                           |\n| fixAll                               | `true`   | Whether to register Ruff as capable of handling `source.fixAll` actions.                                                                                                                                                                                    |\n| codeAction.fixViolation.enable       | `true`   | Whether to display Quick Fix actions to autofix violations.                                                                                                                                                                                                 |\n| codeAction.disableRuleComment.enable | `true`   | Whether to display Quick Fix actions to disable rules via `noqa` suppression comments.                                                                                                                                                                      |\n\n## Development\n\n- Install [`just`](https://github.com/casey/just), or see the `justfile` for corresponding commands.\n- Create and activate a virtual environment (e.g., `python -m venv .venv && source .venv/bin/activate`).\n- Install development dependencies (`just install`). To run the `test_format.py` test, you need to install a custom ruff build with `--features format`, e.g. `maturin develop --features format -m ../ruff/crates/ruff_cli/Cargo.toml`.\n- To automatically format the codebase, run: `just fmt`.\n- To run lint and type checks, run: `just check`.\n- To run tests, run: `just test`. This is just a wrapper around pytest, which you can use as usual.\n\n## License\n\nMIT\n\n<div align=\"center\">\n  <a target=\"_blank\" href=\"https://astral.sh\" style=\"background:none\">\n    <img src=\"https://raw.githubusercontent.com/astral-sh/ruff/main/assets/svg/Astral.svg\">\n  </a>\n</div>"
}
