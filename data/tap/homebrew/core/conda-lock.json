{
  "name": "conda-lock",
  "full_name": "conda-lock",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Lightweight lockfile for conda environments",
  "license": "MIT",
  "homepage": "https://github.com/conda/conda-lock",
  "versions": {
    "stable": "2.1.1",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://files.pythonhosted.org/packages/58/64/e9b4414cc3c694d1116df084faf08b4b46de6ac4c32cdedce5a570b82a7e/conda_lock-2.1.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "20dc776f38b68e952671cffd4b97e46e8592070d670906839601d10250c71c8d"
    }
  },
  "revision": 1,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/conda-lock/blobs/sha256:cfd883563559854e598c702d2ee0171532bd718b4f88590d30e4776f8f99a3f2",
          "sha256": "cfd883563559854e598c702d2ee0171532bd718b4f88590d30e4776f8f99a3f2"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/conda-lock/blobs/sha256:e32589e80ba4544e5dc15ebd75af8d0e48bc4384c005c934eaac59a6088f7ecc",
          "sha256": "e32589e80ba4544e5dc15ebd75af8d0e48bc4384c005c934eaac59a6088f7ecc"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/conda-lock/blobs/sha256:2b2c770b6582dc41ccefed6a66fb23f9567c99514b494a47b361214933d415a0",
          "sha256": "2b2c770b6582dc41ccefed6a66fb23f9567c99514b494a47b361214933d415a0"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/conda-lock/blobs/sha256:5645c53e3d28d4331ad41ee92ff37274e8ee19fb357abeab17a7bf06f753e9ca",
          "sha256": "5645c53e3d28d4331ad41ee92ff37274e8ee19fb357abeab17a7bf06f753e9ca"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/conda-lock/blobs/sha256:66de35afe5945124dad90f4b2a3c6150c0f5615242c43c56331d5225dc5d65d0",
          "sha256": "66de35afe5945124dad90f4b2a3c6150c0f5615242c43c56331d5225dc5d65d0"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/conda-lock/blobs/sha256:ddbee08d6890e4e25c62243d6ed4a1308ed9b5a6bc950c0f883e93d5dfa62511",
          "sha256": "ddbee08d6890e4e25c62243d6ed4a1308ed9b5a6bc950c0f883e93d5dfa62511"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/conda-lock/blobs/sha256:4ee976fdd578b772cfc4a18b40ebf5c1705fe7c2241ba47e1c1ac6e3eb231fc7",
          "sha256": "4ee976fdd578b772cfc4a18b40ebf5c1705fe7c2241ba47e1c1ac6e3eb231fc7"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [
    "keyring",
    "python-typing-extensions",
    "python@3.11",
    "pyyaml",
    "six",
    "virtualenv"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/conda-lock.rb",
  "ruby_source_checksum": {
    "sha256": "1b6f6c0842da7fc9c393f50bab00dcbe64bb0c8416cf577b0378e36f66bb2a39"
  },
  "date_added": "2023-06-13T18:46:02+02:00",
  "readme": "# conda-lock\n\n[![GitHub deployments](https://img.shields.io/github/deployments/conda/conda-lock/github-pages?label=docs&style=for-the-badge)](https://conda.github.io/conda-lock/)\n[![PyPI](https://img.shields.io/pypi/v/conda-lock?style=for-the-badge)](https://pypi.org/project/conda-lock/)\n[![Conda](https://img.shields.io/conda/v/conda-forge/conda-lock?style=for-the-badge)](https://github.com/conda-forge/conda-lock-feedstock)\n[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?style=for-the-badge)](https://results.pre-commit.ci/latest/github/conda/conda-lock/main)\n[![codecov](https://img.shields.io/codecov/c/github/conda/conda-lock/main?style=for-the-badge)](https://codecov.io/gh/conda/conda-lock)\n\nConda lock is a lightweight library that can be used to generate fully reproducible lock files for [conda][conda]\nenvironments.\n\nIt does this by performing a conda solve for each platform you desire a lockfile for.\n\nThis also has the added benefit of acting as an external pre-solve for conda as the lockfiles it generates\nresults in the conda solver *not* being invoked when installing the packages from the generated lockfile.\n\n## Why?\n\nConda [`environment.yml`][envyaml] files are very useful for defining desired environments but there are times when we want to\nbe able to EXACTLY reproduce an environment by just installing and downloading the packages needed.\n\nThis is particularly handy in the context of a gitops style setup where you use conda to provision environments in\nvarious places.\n\n## Installation\n\nUse *one* of the following commands:\n\n```bash\npipx install conda-lock\ncondax install conda-lock\npip install conda-lock\nconda install --channel=conda-forge --name=base conda-lock\nmamba install --channel=conda-forge --name=base conda-lock\n```\n\nThe first two options are recommended since they install conda-lock into an isolated environment. (Otherwise there is a risk of dependency conflicts.)\n\n## Basic usage\n\n```bash\n# generate a multi-platform lockfile\nconda-lock -f environment.yml -p osx-64 -p linux-64\n\n# optionally, update the previous solution, using the latest version of\n# pydantic that is compatible with the source specification\nconda-lock --update pydantic\n\n# create an environment from the lockfile\nconda-lock install [-p {prefix}|-n {name}]\n\n# alternatively, render a single-platform lockfile and use conda command directly\nconda-lock render -p linux-64\nconda create -n my-locked-env --file conda-linux-64.lock\n```\n\n### Pre 1.0 compatible usage (explicit per platform locks)\n\nIf you were making use of conda-lock before the 1.0 release that added unified lockfiles\nyou can still get that behaviour by making use of the `explicit` output kind.\n\n```bash\nconda-lock --kind explicit -f environment.yml\n```\n\n## Advanced usage\n\n### File naming\n\nBy default, `conda-lock` store its output in `conda-lock.yml` in the current\nworking directory. This file will also be used by default for render, install,\nand update operations. You can supply a different filename with e.g.\n\n```bash\nconda-lock --lockfile superspecial.conda-lock.yml\n```\n\nThe extension `.conda-lock.yml` will be added if not present. Rendered\nenvironment files (env or explicit) must end with `.lock` and will be named as\n`\"conda-{platform}.lock\"` by default.\n\nIf you want to override that call conda-lock as follows.\n```bash\nconda-lock -k explicit --filename-template \"specific-{platform}.conda.lock\"\n```\n\n### Compound specification\n\nConda-lock will build a spec list from several files if requested.\n\n```bash\nconda-lock -f base.yml -f specific.yml -p linux-64 --filename-template \"specific-{platform}.lock\"\n````\n\nIn this case all dependencies are combined, and the ordered union of all `channels` is used as the final\nspecification.\n\nThis works for all supported file types.\n\n#### channel overrides\n\nYou can override the channels that are used by conda-lock in case you need to override the ones specified in\nan [environment.yml][envyaml]\n\n```bash\nconda-lock -c conda-forge -p linux-64\n```\n\n#### platform specification\n\nYou may specify the platforms you wish to target by default directly in an [environment.yml][envyaml] using the (nonstandard) `platforms` key:\n\n```yaml\n# environment.yml\nchannels:\n  - conda-forge\ndependencies:\n  - python=3.9\n  - pandas\nplatforms:\n  - linux-64\n  - osx-64\n  - win-64\n  - osx-arm64  # For Apple Silicon, e.g. M1/M2\n  - linux-aarch64  # aka arm64, use for Docker on Apple Silicon\n  - linux-ppc64le\n```\n\nIf you specify target platforms on the command line with `-p`, these will\noverride the values in the environment specification. If neither `platforms` nor\n`-p` are provided, `conda-lock` will fall back to a default set of platforms.\n\n#### default category\n\nYou can may wish to split your dependencies into separate files for better\norganization, e.g. a `environment.yml` for production dependencies and a\n`dev-environment.yml` for development dependencies. You can assign all the\ndependencies parsed from a single file to a category using the (nonstandard)\n`category` key.\n\n```yaml\n# dev-environment.yml\nchannels:\n  - conda-forge\ndependencies:\n  - pytest\n  - mypy=0.910\ncategory: dev\n```\n\nThe default category is `main`.\n\n### pip support\n\n`conda-lock` can also lock the `dependencies.pip` section of\n[environment.yml][envyaml], using a vendored copy of [Poetry's][poetry] dependency solver.\n\n### private pip repositories\nRight now `conda-lock` only supports [legacy](https://warehouse.pypa.io/api-reference/legacy.html) pypi repos with basic auth. Most self-hosted repositories like Nexus, Artifactory etc. use this. To use this feature, add your private repo into Poetry's config _including_ the basic auth in the url:\n\n```bash\npoetry config repositories.foo https://username:password@foo.repo/simple/\n```\n\nThe private repo will be used in addition to `pypi.org`. For projects using `pyproject.toml`, it is possible to [disable `pypi.org` entirely](#disabling-pypiorg).\n\n### --dev-dependencies/--no-dev-dependencies\n\nBy default conda-lock will include dev dependencies in the specification of the lock (if the files that the lock\nis being built from support them).  This can be disabled easily\n\n```bash\nconda-lock --no-dev-dependencies -f ./recipe/meta.yaml\n```\n### --check-input-hash\n\nUnder some situation you may want to run conda lock in some kind of automated way (eg as a precommit) and want to not\nneed to regenerate the lockfiles if the underlying input specification for that particular lock as not changed.\n\n```bash\nconda-lock --check-input-hash -p linux-64\n```\n\nWhen the input_hash of the input files, channels match those present in a given lockfile, that lockfile will not be regenerated.\n\n### --strip-auth, --auth and --auth-file\n\nBy default `conda-lock` will leave basic auth credentials for private conda channels in the lock file. If you wish to strip authentication from the file, provide the `--strip-auth` argument.\n\n```\nconda-lock --strip-auth -f environment.yml\n```\n\nIn order to `conda-lock install` a lock file with its basic auth credentials stripped, you will need to create an authentication file in `.json` format like this:\n\n```json\n{\n  \"domain\": \"username:password\"\n}\n```\n\nIf you have multiple channels that require different authentication within the same domain, you can additionally specify the channel like this:\n\n```json\n{\n  \"domain.org/channel1\": \"username1:password1\",\n  \"domain.org/channel2\": \"username2:password2\"\n}\n```\n\nYou can provide the authentication either as string through `--auth` or as a filepath through `--auth-file`.\n\n```bash\nconda-lock install --auth-file auth.json conda-linux-64.lock\n```\n\n### --virtual-package-spec\n\nConda makes use of [virtual packages](https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-virtual.html) that are available at\nruntime to gate dependency on system features.  Due to these not generally existing on your local execution platform conda-lock will inject\nthem into the solution environment with a reasonable guess at what a default system configuration should be.\n\nIf you want to override which virtual packages are injected you can create a file like\n\n```yaml\n# virtual-packages.yml\nsubdirs:\n  linux-64:\n    packages:\n      __glibc: \"2.17\"\n      __cuda: \"11.4\"\n  win-64:\n    packages:\n      __cuda: \"11.4\"\n```\n\nconda-lock will automatically use a `virtual-packages.yml` it finds in the the current working directory.  Alternatively one can be specified\nexplicitly via the flag.\n\n```bash\nconda lock --virtual-package-spec virtual-packages-cuda.yml -p linux-64\n```\n\n#### Input hash stability\n\nVirtual packages take part in the input hash so if you build an environment with a different set of virtual packages the input hash will change.\nAdditionally the default set of virtual packages may be augmented in future versions of conda-lock.  If you desire very stable input hashes\nwe recommend creating a `virtual-packages.yml` file to lock down the virtual packages considered.\n\n#### ⚠️ in conjunction with micromamba\n\nMicromamba does not presently support some of the overrides to remove all discovered virtual packages, consequently the set of virtual packages\navailable at solve time may be larger than those specified in your specification.\n\n## Supported file sources\n\nConda lock supports more than just [environment.yml][envyaml] specifications!\n\nAdditionally conda-lock supports [meta.yaml][metayaml] (conda-build)\nand `pyproject.toml` (\n[flit](https://flit.readthedocs.io/en/latest/), [pdm](https://pdm.fming.dev) and\n[poetry](https://python-poetry.org) based).  These do come with some gotchas but\nare generally good enough for the 90% use-case.\n\n### meta.yaml\n\nConda-lock will attempt to make an educated guess at the desired environment spec in a meta.yaml.  This is\nnot guaranteed to work for complex recipes with many selectors and outputs.  For multi-output recipes, conda-lock\nwill fuse all the dependencies together.  If that doesn't work for your case fall back to specifying the specification\nas an [environment.yml][envyaml]\n\nSince a meta.yaml doesn't contain channel information we make use of the following extra key to specify channels\n\n```yaml\n# meta.yaml\n\nextra:\n  channels:\n    - conda-forge\n    - defaults\n```\n\n### pyproject.toml\n\nSince `pyproject.toml` files are commonly used by python packages it can be desirable to create a lock\nfile directly from those dependencies to single-source a package's dependencies.  This makes use of some\nconda-forge infrastructure ([pypi-mapping][mapping]) to do a lookup of the PyPI package name to a corresponding\nconda package name (e.g. `docker` -> `docker-py`).  In cases where there exists no lookup for the package it assumes that\nthe PyPI name, and the conda name are the same.\n\n#### Channels\n\n```toml\n# pyproject.toml\n\n[tool.conda-lock]\nchannels = [\n    'conda-forge', 'defaults'\n]\n```\n\n#### Platforms\n\nLike in [environment.yml][envyaml], you can specify default platforms to target:\n\n```toml\n# pyproject.toml\n\n[tool.conda-lock]\nplatforms = [\n    'osx-arm64', 'linux-64'\n]\n```\n\n#### Extras\n\nIf your pyproject.toml file contains optional dependencies/extras these can be referred to by using the `--extras` flag\n\n```toml\n# pyproject.toml\n\n[tool.poetry.dependencies]\nmandatory = \"^1.0\"\npsycopg2 = { version = \"^2.7\", optional = true }\nmysqlclient = { version = \"^1.3\", optional = true }\n\n[tool.poetry.extras]\nmysql = [\"mysqlclient\"]\npgsql = [\"psycopg2\"]\n\n```\n\nThese can be referened as follows\n\n```\nconda-lock --extra mysql --extra pgsql -f pyproject.toml\n```\n\nWhen generating lockfiles that make use of extras it is recommended to make use of `--filename-template` covered [here](#file-naming).\n\n##### Filtering extras\n\n By default conda-lock will attempt to solve for *ALL* extras/categories it discovers in sources.  This allows you to render explicit locks with subset of extras, without needing a new solve.\n\nHowever this does make the assumption that your extras can all be installed in conjunction with each other.  If you want extras filtering\nto happen at the solve stage use the flag `--filter-extras`\n\n```sh\nconda-lock --extra incompatiblea --filter-extras -f pyproject.toml\n```\n\n#### Extra conda dependencies\n\nSince in a `pyproject.toml` all the definitions are python dependencies if you need\nto specify some non-python dependencies as well this can be accomplished by adding\nthe following sections to the `pyproject.toml`\n\n```toml\n# pyproject.toml\n\n[tool.conda-lock.dependencies]\nsqlite = \">=3.34\"\n```\n#### pip dependencies\n\nIf a dependency refers directly to a URL rather than a package name and version,\n`conda-lock` will assume it is pip-installable, e.g.:\n\n```toml\n# pyproject.toml\n[tool.poetry.dependencies]\npython = \"3.9\"\npymage = {url = \"https://github.com/MickaelRigault/pymage/archive/v1.0.tar.gz#sha256=11e99c4ea06b76ca7fb5b42d1d35d64139a4fa6f7f163a2f0f9cc3ea0b3c55eb\"}\n```\n\nSimilarly, if a dependency is explicitly marked with `source = \"pypi\"`, it will\nbe treated as a `pip` dependency, e.g.:\n\n```toml\n[tool.poetry.dependencies]\npython = \"3.9\"\nampel-ztf = {version = \"^0.8.0-alpha.2\", source = \"pypi\"}\n```\n\nA dependency will also be treated as a `pip` dependency if explicitly marked with `source = \"pypi\"` in the `[tool.conda-lock.dependencies]` section, e.g.:\n\n```toml\n[tool.conda-lock.dependencies]\nampel-ztf = {source = \"pypi\"}\n```\n##### Defaulting non-conda dependency sources to PyPI\n\nAlternatively, the above behavior is defaulted for all dependencies defined outside of `[tool.conda-lock.dependencies]`, i.e.:\n- Default to `pip` dependencies for `[tool.poetry.dependencies]`, `[project.dependencies]`, etc.\n- Default to `conda` dependencies for `[tool.conda-lock.dependencies]`\n\nby explicitly providing  `default-non-conda-source = \"pip\"` in `[tool.conda-lock]` section, e.g.:\n```toml\n[tool.conda-lock]\ndefault-non-conda-source = \"pip\"\n```\n\nIn all cases, the dependencies of `pip`-installable packages will also be\ninstalled with `pip`, unless they were already requested by a `conda`\ndependency.\n\n#### Disabling pypi.org\n\nWhen using private pip repos, it is possible to disable `pypi.org` entirely. This can be useful when using `conda-lock` behind a network proxy that does not allow access to `pypi.org`.\n```toml\n[tool.conda-lock]\nallow-pypi-requests = false\n```\n\n## Dockerfile example\n\nIn order to use conda-lock in a docker-style context you want to add the lockfile to the\ndocker container.  In order to refresh the lock file just run `conda-lock` again.\n\nGiven a file tree like\n```\n  Dockerfile\n  environment.yaml\n* conda-linux-64.lock\n```\n\nYou want a dockerfile that is structured something similar to this\n\n```Dockerfile\n# Dockerfile\n\n# Build container\nFROM continuumio/miniconda:latest as conda\n\nADD conda-linux-64.lock /locks/conda-linux-64.lock\nRUN conda create -p /opt/env --copy --file /locks/conda-linux-64.lock\n\n# Primary container\n\nFROM gcr.io/distroless/base-debian10\n\nCOPY --from=conda /opt/env /opt/env\n```\n\n[conda]: https://docs.conda.io/projects/conda\n[metayaml]: https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html\n[mapping]: https://github.com/regro/cf-graph-countyfair/blob/master/mappings/pypi/grayskull_pypi_mapping.yaml\n[envyaml]: https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#create-env-file-manually\n[poetry]: https://python-poetry.org"
}
