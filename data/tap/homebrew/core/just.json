{
  "name": "just",
  "full_name": "just",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Handy way to save and run project-specific commands",
  "license": "CC0-1.0",
  "homepage": "https://github.com/casey/just",
  "versions": {
    "stable": "1.14.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/casey/just/archive/1.14.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "021d4dee59ddfd86ab87b9c9423b9a8126932c844da9765a35eb1ccb8f6cf4ce"
    },
    "head": {
      "url": "https://github.com/casey/just.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/just/blobs/sha256:1d7b2cd7fb280dbe9bdfb365b0eba775fbe467d51760a247130ddc2f23ef382e",
          "sha256": "1d7b2cd7fb280dbe9bdfb365b0eba775fbe467d51760a247130ddc2f23ef382e"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/just/blobs/sha256:085625e36867272e81b8870907a063babaa9c14c3fdfd04e4584e7c808363c14",
          "sha256": "085625e36867272e81b8870907a063babaa9c14c3fdfd04e4584e7c808363c14"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/just/blobs/sha256:e91a75faf9d618a388d0f7245f92edd72d3c7654682a40f4f57bbd396ebacf5f",
          "sha256": "e91a75faf9d618a388d0f7245f92edd72d3c7654682a40f4f57bbd396ebacf5f"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/just/blobs/sha256:cf499f26cdb67badc7bbc6e562d7adbfad300b29a64d1eb76febca245a26d8cf",
          "sha256": "cf499f26cdb67badc7bbc6e562d7adbfad300b29a64d1eb76febca245a26d8cf"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/just/blobs/sha256:5d2116df04de9e9f00b4754c4f60152991bc81ae0b3acd61c369348e08d72b55",
          "sha256": "5d2116df04de9e9f00b4754c4f60152991bc81ae0b3acd61c369348e08d72b55"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/just/blobs/sha256:e33d9aa36f7e32a029cc5ab371b48be1250c2dab0c76f1823f6f2ad3b52714b3",
          "sha256": "e33d9aa36f7e32a029cc5ab371b48be1250c2dab0c76f1823f6f2ad3b52714b3"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/just/blobs/sha256:cec55b92f82be562549c029523a8e8e758c9d823adb96e0a04f80bb3e8e0932d",
          "sha256": "cec55b92f82be562549c029523a8e8e758c9d823adb96e0a04f80bb3e8e0932d"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/just.rb",
  "ruby_source_checksum": {
    "sha256": "5f7b53eb7960a7899ee6d8253c31628d03430d9be1f679c3ed08c9751df74c5c"
  },
  "date_added": "2017-11-07T10:43:34-06:00",
  "readme": "↖️ Table of Contents\n\n<h1 align=\"center\"><code>just</code></h1>\n\n<div align=\"center\">\n  <a href=\"https://crates.io/crates/just\">\n    <img src=\"https://img.shields.io/crates/v/just.svg\" alt=\"crates.io version\">\n  </a>\n  <a href=\"https://github.com/casey/just/actions\">\n    <img src=\"https://github.com/casey/just/workflows/Build/badge.svg\" alt=\"build status\">\n  </a>\n  <a href=\"https://github.com/casey/just/releases\">\n    <img src=\"https://img.shields.io/github/downloads/casey/just/total.svg\" alt=\"downloads\">\n  </a>\n  <a href=\"https://discord.gg/ezYScXR\">\n    <img src=\"https://img.shields.io/discord/695580069837406228?logo=discord\" alt=\"chat on discord\">\n  </a>\n  <a href=\"mailto:casey@rodarmor.com?subject=Thanks%20for%20Just!\">\n    <img src=\"https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg\" alt=\"say thanks\">\n  </a>\n</div>\n<br>\n\n`just` is a handy way to save and run project-specific commands.\n\nThis readme is also available as a [book](https://just.systems/man/en/).\n\n(中文文档在 [这里](https://github.com/casey/just/blob/master/README.中文.md), 快看过来!)\n\nCommands, called recipes, are stored in a file called `justfile` with syntax inspired by `make`:\n\n![screenshot](https://raw.githubusercontent.com/casey/just/master/screenshot.png)\n\nYou can then run them with `just RECIPE`:\n\n```sh\n$ just test-all\ncc *.c -o main\n./test --all\nYay, all your tests passed!\n```\n\n`just` has a ton of useful features, and many improvements over `make`:\n\n- `just` is a command runner, not a build system, so it avoids much of [`make`'s complexity and idiosyncrasies](#what-are-the-idiosyncrasies-of-make-that-just-avoids). No need for `.PHONY` recipes!\n\n- Linux, MacOS, and Windows are supported with no additional dependencies. (Although if your system doesn't have an `sh`, you'll need to [choose a different shell](#shell).)\n\n- Errors are specific and informative, and syntax errors are reported along with their source context.\n\n- Recipes can accept [command line arguments](#recipe-parameters).\n\n- Wherever possible, errors are resolved statically. Unknown recipes and circular dependencies are reported before anything runs.\n\n- `just` [loads `.env` files](#dotenv-integration), making it easy to populate environment variables.\n\n- Recipes can be [listed from the command line](#listing-available-recipes).\n\n- Command line completion scripts are [available for most popular shells](#shell-completion-scripts).\n\n- Recipes can be written in [arbitrary languages](#writing-recipes-in-other-languages), like Python or NodeJS.\n\n- `just` can be invoked from any subdirectory, not just the directory that contains the `justfile`.\n\n- And [much more](https://just.systems/man/en/)!\n\nIf you need help with `just` please feel free to open an issue or ping me on [Discord](https://discord.gg/ezYScXR). Feature requests and bug reports are always welcome!\n\nInstallation\n------------\n\n### Prerequisites\n\n`just` should run on any system with a reasonable `sh`, including Linux, MacOS, and the BSDs.\n\nOn Windows, `just` works with the `sh` provided by [Git for Windows](https://git-scm.com), [GitHub Desktop](https://desktop.github.com), or [Cygwin](http://www.cygwin.com).\n\nIf you'd rather not install `sh`, you can use the `shell` setting to use the shell of your choice.\n\nLike PowerShell:\n\n```just\n# use PowerShell instead of sh:\nset shell := [\"powershell.exe\", \"-c\"]\n\nhello:\n  Write-Host \"Hello, world!\"\n```\n\n…or `cmd.exe`:\n\n```just\n# use cmd.exe instead of sh:\nset shell := [\"cmd.exe\", \"/c\"]\n\nlist:\n  dir\n```\n\nYou can also set the shell using command-line arguments. For example, to use PowerShell, launch `just` with `--shell powershell.exe --shell-arg -c`.\n\n(PowerShell is installed by default on Windows 7 SP1 and Windows Server 2008 R2 S1 and later, and `cmd.exe` is quite fiddly, so PowerShell is recommended for most Windows users.)\n\n### Packages\n\n<table>\n  <thead>\n    <tr>\n      <th>Operating System</th>\n      <th>Package Manager</th>\n      <th>Package</th>\n      <th>Command</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><a href=\"https://forge.rust-lang.org/release/platform-support.html\">Various</a></td>\n      <td><a href=\"https://www.rust-lang.org\">Cargo</a></td>\n      <td><a href=\"https://crates.io/crates/just\">just</a></td>\n      <td><code>cargo install just</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://en.wikipedia.org/wiki/Microsoft_Windows\">Microsoft Windows</a></td>\n      <td><a href=\"https://scoop.sh\">Scoop</a></td>\n      <td><a href=\"https://github.com/ScoopInstaller/Main/blob/master/bucket/just.json\">just</a></td>\n      <td><code>scoop install just</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://docs.brew.sh/Installation\">Various</a></td>\n      <td><a href=\"https://brew.sh\">Homebrew</a></td>\n      <td><a href=\"https://formulae.brew.sh/formula/just\">just</a></td>\n      <td><code>brew install just</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://en.wikipedia.org/wiki/MacOS\">macOS</a></td>\n      <td><a href=\"https://www.macports.org\">MacPorts</a></td>\n      <td><a href=\"https://ports.macports.org/port/just/summary\">just</a></td>\n      <td><code>port install just</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://www.archlinux.org\">Arch Linux</a></td>\n      <td><a href=\"https://wiki.archlinux.org/title/Pacman\">pacman</a></td>\n      <td><a href=\"https://archlinux.org/packages/community/x86_64/just/\">just</a></td>\n      <td><code>pacman -S just</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://nixos.org/download.html#download-nix\">Various</a></td>\n      <td><a href=\"https://nixos.org/nix/\">Nix</a></td>\n      <td><a href=\"https://github.com/NixOS/nixpkgs/blob/master/pkgs/development/tools/just/default.nix\">just</a></td>\n      <td><code>nix-env -iA nixpkgs.just</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://nixos.org/nixos/\">NixOS</a></td>\n      <td><a href=\"https://nixos.org/nix/\">Nix</a></td>\n      <td><a href=\"https://github.com/NixOS/nixpkgs/blob/master/pkgs/development/tools/just/default.nix\">just</a></td>\n      <td><code>nix-env -iA nixos.just</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://getsol.us\">Solus</a></td>\n      <td><a href=\"https://getsol.us/articles/package-management/basics/en\">eopkg</a></td>\n      <td><a href=\"https://dev.getsol.us/source/just/\">just</a></td>\n      <td><code>eopkg install just</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://voidlinux.org\">Void Linux</a></td>\n      <td><a href=\"https://wiki.voidlinux.org/XBPS\">XBPS</a></td>\n      <td><a href=\"https://github.com/void-linux/void-packages/blob/master/srcpkgs/just/template\">just</a></td>\n      <td><code>xbps-install -S just</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://www.freebsd.org\">FreeBSD</a></td>\n      <td><a href=\"https://www.freebsd.org/doc/handbook/pkgng-intro.html\">pkg</a></td>\n      <td><a href=\"https://www.freshports.org/deskutils/just/\">just</a></td>\n      <td><code>pkg install just</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://alpinelinux.org\">Alpine Linux</a></td>\n      <td><a href=\"https://wiki.alpinelinux.org/wiki/Alpine_Linux_package_management\">apk-tools</a></td>\n      <td><a href=\"https://pkgs.alpinelinux.org/package/edge/community/x86_64/just\">just</a></td>\n      <td><code>apk add just</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://getfedora.org\">Fedora Linux</a></td>\n      <td><a href=\"https://dnf.readthedocs.io/en/latest/\">DNF</a></td>\n      <td><a href=\"https://src.fedoraproject.org/rpms/rust-just\">just</a></td>\n      <td><code>dnf install just</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://www.gentoo.org\">Gentoo Linux</a></td>\n      <td><a href=\"https://wiki.gentoo.org/wiki/Portage\">Portage</a></td>\n      <td><a href=\"https://github.com/gentoo-mirror/dm9pZCAq/tree/master/sys-devel/just\">dm9pZCAq/sys-devel/just</a></td>\n      <td>\n        <code>eselect repository enable dm9pZCAq</code><br>\n        <code>emerge --sync dm9pZCAq</code><br>\n        <code>emerge sys-devel/just</code>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"https://docs.conda.io/en/latest/miniconda.html#system-requirements\">Various</a></td>\n      <td><a href=\"https://docs.conda.io/projects/conda/en/latest/index.html\">Conda</a></td>\n      <td><a href=\"https://anaconda.org/conda-forge/just\">just</a></td>\n      <td><code>conda install -c conda-forge just</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://en.wikipedia.org/wiki/Microsoft_Windows\">Microsoft Windows</a></td>\n      <td><a href=\"https://chocolatey.org\">Chocolatey</a></td>\n      <td><a href=\"https://github.com/michidk/just-choco\">just</a></td>\n      <td><code>choco install just</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://snapcraft.io/docs/installing-snapd\">Various</a></td>\n      <td><a href=\"https://snapcraft.io\">Snap</a></td>\n      <td><a href=\"https://snapcraft.io/just\">just</a></td>\n      <td><code>snap install --edge --classic just</code></td>\n    </tr>\n    <tr>\n      <td><a href=\"https://github.com/casey/just/releases\">Various</a></td>\n      <td><a href=\"https://asdf-vm.com\">asdf</a></td>\n      <td><a href=\"https://github.com/olofvndrhr/asdf-just\">just</a></td>\n      <td>\n        <code>asdf plugin add just</code><br>\n        <code>asdf install just &lt;version&gt;</code>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"https://debian.org\">Debian</a> and <a href=\"https://ubuntu.com\">Ubuntu</a> derivatives</td>\n      <td><a href=\"https://mpr.makedeb.org\">MPR</a></td>\n      <td><a href=\"https://mpr.makedeb.org/packages/just\">just</a></td>\n      <td>\n        <code>git clone 'https://mpr.makedeb.org/just'</code><br>\n        <code>cd just</code><br>\n        <code>makedeb -si</code>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"https://debian.org\">Debian</a> and <a href=\"https://ubuntu.com\">Ubuntu</a> derivatives</td>\n      <td><a href=\"https://docs.makedeb.org/prebuilt-mpr\">Prebuilt-MPR</a></td>\n      <td><a href=\"https://mpr.makedeb.org/packages/just\">just</a></td>\n      <td>\n        <sup><b>You must have the <a href=\"https://docs.makedeb.org/prebuilt-mpr/getting-started/#setting-up-the-repository\">Prebuilt-MPR set up</a> on your system in order to run this command.</b></sup><br>\n        <code>sudo apt install just</code>\n      </td>\n    </tr>\n    <tr>\n      <td><a href=\"https://en.wikipedia.org/wiki/Microsoft_Windows\">Microsoft Windows</a></td>\n      <td><a href=\"https://learn.microsoft.com/en-us/windows/package-manager/\">Windows Package Manager</a></td>\n      <td><a href=\"https://github.com/microsoft/winget-pkgs/tree/master/manifests/c/Casey/Just\">Casey/Just</a></td>\n      <td><code>winget install --id Casey.Just --exact</code></td>\n    </tr>\n  </tbody>\n</table>\n\n![package version table](https://repology.org/badge/vertical-allrepos/just.svg)\n\n### Pre-Built Binaries\n\nPre-built binaries for Linux, MacOS, and Windows can be found on [the releases page](https://github.com/casey/just/releases).\n\nYou can use the following command on Linux, MacOS, or Windows to download the latest release, just replace `DEST` with the directory where you'd like to put `just`:\n\n```sh\ncurl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to DEST\n```\n\nFor example, to install `just` to `~/bin`:\n\n```sh\n# create ~/bin\nmkdir -p ~/bin\n\n# download and extract just to ~/bin/just\ncurl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to ~/bin\n\n# add `~/bin` to the paths that your shell searches for executables\n# this line should be added to your shells initialization file,\n# e.g. `~/.bashrc` or `~/.zshrc`\nexport PATH=\"$PATH:$HOME/bin\"\n\n# just should now be executable\njust --help\n```\n\nNote that `install.sh` may fail on GitHub actions, or in other environments\nwhere many machines share IP addresses. `install.sh` calls GitHub APIs in order\nto determine the latest version of `just` to install, and those API calls are\nrate-limited on a per-IP basis. To make `install.sh` more reliable in such\ncircumstances, pass a specific tag to install with `--tag`.\n\n### GitHub Actions\n\nWith [extractions/setup-just](https://github.com/extractions/setup-just):\n\n```yaml\n- uses: extractions/setup-just@v1\n  with:\n    just-version: 0.8 # optional semver specification, otherwise latest\n```\n\nWith [taiki-e/install-action](https://github.com/taiki-e/install-action):\n\n```yaml\n- uses: taiki-e/install-action@just\n```\n\n### Release RSS Feed\n\nAn [RSS feed](https://en.wikipedia.org/wiki/RSS) of `just` releases is available [here](https://github.com/casey/just/releases.atom).\n\n### Node.js Installation\n\n[just-install](https://npmjs.com/package/just-install) can be used to automate installation of `just` in Node.js applications.\n\n`just` is a great, more robust alternative to npm scripts. If you want to include `just` in the dependencies of a Node.js application, `just-install` will install a local, platform-specific binary as part of the `npm install` command. This removes the need for every developer to install `just` independently using one of the processes mentioned above. After installation, the `just` command will work in npm scripts or with npx. It's great for teams who want to make the set up process for their project as easy as possible.\n\nFor more information, see the [just-install README file](https://github.com/brombal/just-install#readme).\n\nBackwards Compatibility\n-----------------------\n\nWith the release of version 1.0, `just` features a strong commitment to backwards compatibility and stability.\n\nFuture releases will not introduce backwards incompatible changes that make existing `justfile`s stop working, or break working invocations of the command-line interface.\n\nThis does not, however, preclude fixing outright bugs, even if doing so might break `justfiles` that rely on their behavior.\n\nThere will never be a `just` 2.0. Any desirable backwards-incompatible changes will be opt-in on a per-`justfile` basis, so users may migrate at their leisure.\n\nFeatures that aren't yet ready for stabilization are gated behind the `--unstable` flag. Features enabled by `--unstable` may change in backwards incompatible ways at any time.\n\nEditor Support\n--------------\n\n`justfile` syntax is close enough to `make` that you may want to tell your editor to use `make` syntax highlighting for `just`.\n\n### Vim and Neovim\n\n#### `vim-just`\n\nThe [vim-just](https://github.com/NoahTheDuke/vim-just) plugin provides syntax highlighting for `justfile`s.\n\nInstall it with your favorite package manager, like [Plug](https://github.com/junegunn/vim-plug):\n\n```vim\ncall plug#begin()\n\nPlug 'NoahTheDuke/vim-just'\n\ncall plug#end()\n```\n\nOr with Vim's built-in package support:\n\n```sh\nmkdir -p ~/.vim/pack/vendor/start\ncd ~/.vim/pack/vendor/start\ngit clone https://github.com/NoahTheDuke/vim-just.git\n```\n\n`vim-just` is also available from [vim-polyglot](https://github.com/sheerun/vim-polyglot), a multi-language Vim plugin.\n\n#### `tree-sitter-just`\n\n[tree-sitter-just](https://github.com/IndianBoy42/tree-sitter-just) is an [Nvim Treesitter](https://github.com/nvim-treesitter/nvim-treesitter) plugin for Neovim.\n\n#### Makefile Syntax Highlighting\n\nVim's built-in makefile syntax highlighting isn't perfect for `justfile`s, but it's better than nothing. You can put the following in `~/.vim/filetype.vim`:\n\n```vimscript\nif exists(\"did_load_filetypes\")\n  finish\nendif\n\naugroup filetypedetect\n  au BufNewFile,BufRead justfile setf make\naugroup END\n```\n\nOr add the following to an individual `justfile` to enable `make` mode on a per-file basis:\n\n```text\n# vim: set ft=make :\n```\n\n### Emacs\n\n[just-mode](https://github.com/leon-barrett/just-mode.el) provides syntax highlighting and automatic indentation of `justfile`s. It is available on [MELPA](https://melpa.org/) as [just-mode](https://melpa.org/#/just-mode).\n\n[justl](https://github.com/psibi/justl.el) provides commands for executing and listing recipes.\n\nYou can add the following to an individual `justfile` to enable `make` mode on a per-file basis:\n\n```text\n# Local Variables:\n# mode: makefile\n# End:\n```\n\n### Visual Studio Code\n\nAn extension for VS Code by [skellock](https://github.com/skellock) is [available here](https://marketplace.visualstudio.com/items?itemName=skellock.just) ([repository](https://github.com/skellock/vscode-just)), but is no longer actively developed.\n\nYou can install it from the command line by running:\n\n```sh\ncode --install-extension skellock.just\n```\n\nAn more recently active fork by [sclu1034](https://github.com/sclu1034) is available [here](https://github.com/sclu1034/vscode-just).\n\n### JetBrains IDEs\n\nA plugin for JetBrains IDEs by [linux_china](https://github.com/linux-china) is [available here](https://plugins.jetbrains.com/plugin/18658-just).\n\n### Kakoune\n\nKakoune supports `justfile` syntax highlighting out of the box, thanks to TeddyDD.\n\n### Helix\n\n[Helix](https://helix-editor.com/) supports `justfile` syntax highlighting out-of-the-box since version 23.05.\n\n### Sublime Text\n\nThe [Just package](https://github.com/nk9/just_sublime) by [nk9](https://github.com/nk9) with `just` syntax and some other tools is available on [PackageControl](https://packagecontrol.io/packages/Just).\n\n### Other Editors\n\nFeel free to send me the commands necessary to get syntax highlighting working in your editor of choice so that I may include them here.\n\nQuick Start\n-----------\n\nSee [the installation section](#installation) for how to install `just` on your computer. Try running `just --version` to make sure that it's installed correctly.\n\nFor an overview of the syntax, check out [this cheatsheet](https://cheatography.com/linux-china/cheat-sheets/justfile/).\n\nOnce `just` is installed and working, create a file named `justfile` in the root of your project with the following contents:\n\n```just\nrecipe-name:\n  echo 'This is a recipe!'\n\n# this is a comment\nanother-recipe:\n  @echo 'This is another recipe.'\n```\n\nWhen you invoke `just` it looks for file `justfile` in the current directory and upwards, so you can invoke it from any subdirectory of your project.\n\nThe search for a `justfile` is case insensitive, so any case, like `Justfile`, `JUSTFILE`, or `JuStFiLe`, will work. `just` will also look for files with the name `.justfile`, in case you'd like to hide a `justfile`.\n\nRunning `just` with no arguments runs the first recipe in the `justfile`:\n\n```sh\n$ just\necho 'This is a recipe!'\nThis is a recipe!\n```\n\nOne or more arguments specify the recipe(s) to run:\n\n```sh\n$ just another-recipe\nThis is another recipe.\n```\n\n`just` prints each command to standard error before running it, which is why `echo 'This is a recipe!'` was printed. This is suppressed for lines starting with `@`, which is why `echo 'This is another recipe.'` was not printed.\n\nRecipes stop running if a command fails. Here `cargo publish` will only run if `cargo test` succeeds:\n\n```just\npublish:\n  cargo test\n  # tests passed, time to publish!\n  cargo publish\n```\n\nRecipes can depend on other recipes. Here the `test` recipe depends on the `build` recipe, so `build` will run before `test`:\n\n```just\nbuild:\n  cc main.c foo.c bar.c -o main\n\ntest: build\n  ./test\n\nsloc:\n  @echo \"`wc -l *.c` lines of code\"\n```\n\n```sh\n$ just test\ncc main.c foo.c bar.c -o main\n./test\ntesting… all tests passed!\n```\n\nRecipes without dependencies will run in the order they're given on the command line:\n\n```sh\n$ just build sloc\ncc main.c foo.c bar.c -o main\n1337 lines of code\n```\n\nDependencies will always run first, even if they are passed after a recipe that depends on them:\n\n```sh\n$ just test build\ncc main.c foo.c bar.c -o main\n./test\ntesting… all tests passed!\n```\n\nExamples\n--------\n\nA variety of example `justfile`s can be found in the [examples directory](https://github.com/casey/just/tree/master/examples).\n\nFeatures\n--------\n\n### The Default Recipe\n\nWhen `just` is invoked without a recipe, it runs the first recipe in the `justfile`. This recipe might be the most frequently run command in the project, like running the tests:\n\n```just\ntest:\n  cargo test\n```\n\nYou can also use dependencies to run multiple recipes by default:\n\n```just\ndefault: lint build test\n\nbuild:\n  echo Building…\n\ntest:\n  echo Testing…\n\nlint:\n  echo Linting…\n```\n\nIf no recipe makes sense as the default recipe, you can add a recipe to the beginning of your `justfile` that lists the available recipes:\n\n```just\ndefault:\n  just --list\n```\n\n### Listing Available Recipes\n\nRecipes can be listed in alphabetical order with `just --list`:\n\n```sh\n$ just --list\nAvailable recipes:\n    build\n    test\n    deploy\n    lint\n```\n\n`just --summary` is more concise:\n\n```sh\n$ just --summary\nbuild test deploy lint\n```\n\nPass `--unsorted` to print recipes in the order they appear in the `justfile`:\n\n```just\ntest:\n  echo 'Testing!'\n\nbuild:\n  echo 'Building!'\n```\n\n```sh\n$ just --list --unsorted\nAvailable recipes:\n    test\n    build\n```\n\n```sh\n$ just --summary --unsorted\ntest build\n```\n\nIf you'd like `just` to default to listing the recipes in the `justfile`, you can use this as your default recipe:\n\n```just\ndefault:\n  @just --list\n```\n\nNote that you may need to add `--justfile {{justfile()}}` to the line above above. Without it, if you executed `just -f /some/distant/justfile -d .` or `just -f ./non-standard-justfile`, the plain `just --list` inside the recipe would not necessarily use the file you provided. It would try to find a justfile in your current path, maybe even resulting in a `No justfile found` error.\n\nThe heading text can be customized with `--list-heading`:\n\n```sh\n$ just --list --list-heading $'Cool stuff…\\n'\nCool stuff…\n    test\n    build\n```\n\nAnd the indentation can be customized with `--list-prefix`:\n\n```sh\n$ just --list --list-prefix ····\nAvailable recipes:\n····test\n····build\n```\n\nThe argument to `--list-heading` replaces both the heading and the newline following it, so it should contain a newline if non-empty. It works this way so you can suppress the heading line entirely by passing the empty string:\n\n```sh\n$ just --list --list-heading ''\n    test\n    build\n```\n\n### Aliases\n\nAliases allow recipes to be invoked with alternative names:\n\n```just\nalias b := build\n\nbuild:\n  echo 'Building!'\n```\n\n```sh\n$ just b\nbuild\necho 'Building!'\nBuilding!\n```\n\n### Settings\n\nSettings control interpretation and execution. Each setting may be specified at most once, anywhere in the `justfile`.\n\nFor example:\n\n```just\nset shell := [\"zsh\", \"-cu\"]\n\nfoo:\n  # this line will be run as `zsh -cu 'ls **/*.txt'`\n  ls **/*.txt\n```\n\n#### Table of Settings\n\n| Name                      | Value              | Default | Description                                                                                   |\n| ------------------------- | ------------------ | ------- |---------------------------------------------------------------------------------------------- |\n| `allow-duplicate-recipes` | boolean            | `false` | Allow recipes appearing later in a `justfile` to override earlier recipes with the same name. |\n| `dotenv-load`             | boolean            | `false` | Load a `.env` file, if present.                                                               |\n| `export`                  | boolean            | `false` | Export all variables as environment variables.                                                |\n| `fallback`                | boolean            | `false` | Search `justfile` in parent directory if the first recipe on the command line is not found.   |\n| `ignore-comments`         | boolean            | `false` | Ignore recipe lines beginning with `#`.                                                       |\n| `positional-arguments`    | boolean            | `false` | Pass positional arguments.                                                                    |\n| `shell`                   | `[COMMAND, ARGS…]` | -       | Set the command used to invoke recipes and evaluate backticks.                                |\n| `tempdir`                 | string             | -       | Create temporary directories in `tempdir` instead of the system default temporary directory.  |\n| `windows-powershell`      | boolean            | `false` | Use PowerShell on Windows as default shell. (Deprecated. Use `windows-shell` instead.         |\n| `windows-shell`           | `[COMMAND, ARGS…]` | -       | Set the command used to invoke recipes and evaluate backticks.                                |\n\nBoolean settings can be written as:\n\n```justfile\nset NAME\n```\n\nWhich is equivalent to:\n\n```justfile\nset NAME := true\n```\n\n#### Allow Duplicate Recipes\n\nIf `allow-duplicate-recipes` is set to `true`, defining multiple recipes with the same name is not an error and the last definition is used. Defaults to `false`.\n\n```just\nset allow-duplicate-recipes\n\n@foo:\n  echo foo\n\n@foo:\n  echo bar\n```\n\n```sh\n$ just foo\nbar\n```\n\n#### Dotenv Load\n\nIf `dotenv-load` is `true`, a `.env` file will be loaded if present. Defaults to `false`.\n\n#### Export\n\nThe `export` setting causes all `just` variables to be exported as environment variables. Defaults to `false`.\n\n```just\nset export\n\na := \"hello\"\n\n@foo b:\n  echo $a\n  echo $b\n```\n\n```sh\n$ just foo goodbye\nhello\ngoodbye\n```\n\n#### Positional Arguments\n\nIf `positional-arguments` is `true`, recipe arguments will be passed as positional arguments to commands. For linewise recipes, argument `$0` will be the name of the recipe.\n\nFor example, running this recipe:\n\n```just\nset positional-arguments\n\n@foo bar:\n  echo $0\n  echo $1\n```\n\nWill produce the following output:\n\n```sh\n$ just foo hello\nfoo\nhello\n```\n\nWhen using an `sh`-compatible shell, such as `bash` or `zsh`, `$@` expands to the positional arguments given to the recipe, starting from one. When used within double quotes as `\"$@\"`, arguments including whitespace will be passed on as if they were double-quoted. That is, `\"$@\"` is equivalent to `\"$1\" \"$2\"`… When there are no positional parameters, `\"$@\"` and `$@` expand to nothing (i.e., they are removed).\n\nThis example recipe will print arguments one by one on separate lines:\n\n```just\nset positional-arguments\n\n@test *args='':\n  bash -c 'while (( \"$#\" )); do echo - $1; shift; done' -- \"$@\"\n```\n\nRunning it with _two_ arguments:\n\n```sh\n$ just test foo \"bar baz\"\n- foo\n- bar baz\n```\n\n#### Shell\n\nThe `shell` setting controls the command used to invoke recipe lines and backticks. Shebang recipes are unaffected.\n\n```just\n# use python3 to execute recipe lines and backticks\nset shell := [\"python3\", \"-c\"]\n\n# use print to capture result of evaluation\nfoos := `print(\"foo\" * 4)`\n\nfoo:\n  print(\"Snake snake snake snake.\")\n  print(\"{{foos}}\")\n```\n\n`just` passes the command to be executed as an argument. Many shells will need an additional flag, often `-c`, to make them evaluate the first argument.\n\n##### Windows Shell\n\n`just` uses `sh` on Windows by default. To use a different shell on Windows, use `windows-shell`:\n\n```just\nset windows-shell := [\"powershell.exe\", \"-NoLogo\", \"-Command\"]\n\nhello:\n  Write-Host \"Hello, world!\"\n```\n\nSee [powershell.just](https://github.com/casey/just/blob/master/examples/powershell.just) for a justfile that uses PowerShell on all platforms.\n\n##### Windows PowerShell\n\n*`set windows-powershell` uses the legacy `powershell.exe` binary, and is no longer recommended. See the `windows-shell` setting above for a more flexible way to control which shell is used on Windows.*\n\n`just` uses `sh` on Windows by default. To use `powershell.exe` instead, set `windows-powershell` to true.\n\n```just\nset windows-powershell := true\n\nhello:\n  Write-Host \"Hello, world!\"\n```\n\n##### Python 3\n\n```just\nset shell := [\"python3\", \"-c\"]\n```\n\n##### Bash\n\n```just\nset shell := [\"bash\", \"-uc\"]\n```\n\n##### Z Shell\n\n```just\nset shell := [\"zsh\", \"-uc\"]\n```\n\n##### Fish\n\n```just\nset shell := [\"fish\", \"-c\"]\n```\n\n##### Nushell\n\n```just\nset shell := [\"nu\", \"-c\"]\n```\n\nIf you want to change the default table mode to `light`:\n\n```just\nset shell := ['nu', '-m', 'light', '-c']\n```\n\n*[Nushell](https://github.com/nushell/nushell) was written in Rust, and **has cross-platform support for Windows / macOS and Linux**.*\n\n### Documentation Comments\n\nComments immediately preceding a recipe will appear in `just --list`:\n\n```just\n# build stuff\nbuild:\n  ./bin/build\n\n# test stuff\ntest:\n  ./bin/test\n```\n\n```sh\n$ just --list\nAvailable recipes:\n    build # build stuff\n    test # test stuff\n```\n\n### Dotenv Integration\n\nIf [`dotenv-load`](#dotenv-load) is set, `just` will load environment variables from a file named `.env`. This file can be located in the same directory as your `justfile` or in a parent directory. These variables are environment variables, not `just` variables, and so must be accessed using `$VARIABLE_NAME` in recipes and backticks.\n\nFor example, if your `.env` file contains:\n\n```sh\n# a comment, will be ignored\nDATABASE_ADDRESS=localhost:6379\nSERVER_PORT=1337\n```\n\nAnd your `justfile` contains:\n\n```just\nset dotenv-load\n\nserve:\n  @echo \"Starting server with database $DATABASE_ADDRESS on port $SERVER_PORT…\"\n  ./server --database $DATABASE_ADDRESS --port $SERVER_PORT\n```\n\n`just serve` will output:\n\n```sh\n$ just serve\nStarting server with database localhost:6379 on port 1337…\n./server --database $DATABASE_ADDRESS --port $SERVER_PORT\n```\n\n### Variables and Substitution\n\nVariables, strings, concatenation, path joining, and substitution using `{{…}}` are supported:\n\n```just\ntmpdir  := `mktemp`\nversion := \"0.2.7\"\ntardir  := tmpdir / \"awesomesauce-\" + version\ntarball := tardir + \".tar.gz\"\n\npublish:\n  rm -f {{tarball}}\n  mkdir {{tardir}}\n  cp README.md *.c {{tardir}}\n  tar zcvf {{tarball}} {{tardir}}\n  scp {{tarball}} me@server.com:release/\n  rm -rf {{tarball}} {{tardir}}\n```\n\n#### Joining Paths\n\nThe `/` operator can be used to join two strings with a slash:\n\n```just\nfoo := \"a\" / \"b\"\n```\n\n```\n$ just --evaluate foo\na/b\n```\n\nNote that a `/` is added even if one is already present:\n\n```just\nfoo := \"a/\"\nbar := foo / \"b\"\n```\n\n```\n$ just --evaluate bar\na//b\n```\n\nAbsolute paths can also be constructed<sup>1.5.0</sup>:\n\n```just\nfoo := / \"b\"\n```\n\n```\n$ just --evaluate foo\n/b\n```\n\nThe `/` operator uses the `/` character, even on Windows. Thus, using the `/` operator should be avoided with paths that use universal naming convention (UNC), i.e., those that start with `\\?`, since forward slashes are not supported with UNC paths.\n\n#### Escaping `{{`\n\nTo write a recipe containing `{{`, use `{{{{`:\n\n```just\nbraces:\n  echo 'I {{{{LOVE}} curly braces!'\n```\n\n(An unmatched `}}` is ignored, so it doesn't need to be escaped.)\n\nAnother option is to put all the text you'd like to escape inside of an interpolation:\n\n```just\nbraces:\n  echo '{{'I {{LOVE}} curly braces!'}}'\n```\n\nYet another option is to use `{{ \"{{\" }}`:\n\n```just\nbraces:\n  echo 'I {{ \"{{\" }}LOVE}} curly braces!'\n```\n\n### Strings\n\nDouble-quoted strings support escape sequences:\n\n```just\nstring-with-tab             := \"\\t\"\nstring-with-newline         := \"\\n\"\nstring-with-carriage-return := \"\\r\"\nstring-with-double-quote    := \"\\\"\"\nstring-with-slash           := \"\\\\\"\nstring-with-no-newline      := \"\\\n\"\n```\n\n```sh\n$ just --evaluate\n\"tring-with-carriage-return := \"\nstring-with-double-quote    := \"\"\"\nstring-with-newline         := \"\n\"\nstring-with-no-newline      := \"\"\nstring-with-slash           := \"\\\"\nstring-with-tab             := \"     \"\n```\n\nStrings may contain line breaks:\n\n```just\nsingle := '\nhello\n'\n\ndouble := \"\ngoodbye\n\"\n```\n\nSingle-quoted strings do not recognize escape sequences:\n\n```just\nescapes := '\\t\\n\\r\\\"\\\\'\n```\n\n```sh\n$ just --evaluate\nescapes := \"\\t\\n\\r\\\"\\\\\"\n```\n\nIndented versions of both single- and double-quoted strings, delimited by triple single- or triple double-quotes, are supported. Indented string lines are stripped of leading whitespace common to all non-blank lines:\n\n```just\n# this string will evaluate to `foo\\nbar\\n`\nx := '''\n  foo\n  bar\n'''\n\n# this string will evaluate to `abc\\n  wuv\\nbar\\n`\ny := \"\"\"\n  abc\n    wuv\n  xyz\n\"\"\"\n```\n\nSimilar to unindented strings, indented double-quoted strings process escape sequences, and indented single-quoted strings ignore escape sequences. Escape sequence processing takes place after unindentation. The unindentation algorithm does not take escape-sequence produced whitespace or newlines into account.\n\n### Ignoring Errors\n\nNormally, if a command returns a non-zero exit status, execution will stop. To continue execution after a command, even if it fails, prefix the command with `-`:\n\n```just\nfoo:\n  -cat foo\n  echo 'Done!'\n```\n\n```sh\n$ just foo\ncat foo\ncat: foo: No such file or directory\necho 'Done!'\nDone!\n```\n\n### Functions\n\n`just` provides a few built-in functions that might be useful when writing recipes.\n\n#### System Information\n\n- `arch()` — Instruction set architecture. Possible values are: `\"aarch64\"`, `\"arm\"`, `\"asmjs\"`, `\"hexagon\"`, `\"mips\"`, `\"msp430\"`, `\"powerpc\"`, `\"powerpc64\"`, `\"s390x\"`, `\"sparc\"`, `\"wasm32\"`, `\"x86\"`, `\"x86_64\"`, and `\"xcore\"`.\n- `num_cpus()` - Number of logical CPUs.\n- `os()` — Operating system. Possible values are: `\"android\"`, `\"bitrig\"`, `\"dragonfly\"`, `\"emscripten\"`, `\"freebsd\"`, `\"haiku\"`, `\"ios\"`, `\"linux\"`, `\"macos\"`, `\"netbsd\"`, `\"openbsd\"`, `\"solaris\"`, and `\"windows\"`.\n- `os_family()` — Operating system family; possible values are: `\"unix\"` and `\"windows\"`.\n\nFor example:\n\n```just\nsystem-info:\n  @echo \"This is an {{arch()}} machine\".\n```\n\n```sh\n$ just system-info\nThis is an x86_64 machine\n```\n\nThe `os_family()` function can be used to create cross-platform `justfile`s that work on various operating systems. For an example, see [cross-platform.just](https://github.com/casey/just/blob/master/examples/cross-platform.just) file.\n\n#### Environment Variables\n\n- `env_var(key)` — Retrieves the environment variable with name `key`, aborting if it is not present.\n\n```just\nhome_dir := env_var('HOME')\n\ntest:\n  echo \"{{home_dir}}\"\n```\n\n```sh\n$ just\n/home/user1\n```\n\n- `env_var_or_default(key, default)` — Retrieves the environment variable with name `key`, returning `default` if it is not present.\n\n#### Invocation Directory\n\n- `invocation_directory()` - Retrieves the absolute path to the current\n  directory when `just` was invoked, before  `just` changed it (chdir'd) prior\n  to executing commands. On Windows, `invocation_directory()` uses `cygpath` to\n  convert the invocation directory to a Cygwin-compatible `/`-separated path.\n  Use `invocation_directory_native()` to return the verbatim invocation\n  directory on all platforms.\n\nFor example, to call `rustfmt` on files just under the \"current directory\"\n(from the user/invoker's perspective), use the following rule:\n\n```just\nrustfmt:\n  find {{invocation_directory()}} -name \\*.rs -exec rustfmt {} \\;\n```\n\nAlternatively, if your command needs to be run from the current directory, you\ncould use (e.g.):\n\n```just\nbuild:\n  cd {{invocation_directory()}}; ./some_script_that_needs_to_be_run_from_here\n```\n\n- `invocation_directory_native()` - Retrieves the absolute path to the current\n  directory when `just` was invoked, before  `just` changed it (chdir'd) prior\n  to executing commands.\n\n#### Justfile and Justfile Directory\n\n- `justfile()` - Retrieves the path of the current `justfile`.\n\n- `justfile_directory()` - Retrieves the path of the parent directory of the current `justfile`.\n\nFor example, to run a command relative to the location of the current `justfile`:\n\n```just\nscript:\n  ./{{justfile_directory()}}/scripts/some_script\n```\n\n#### Just Executable\n\n- `just_executable()` - Absolute path to the `just` executable.\n\nFor example:\n\n```just\nexecutable:\n  @echo The executable is at: {{just_executable()}}\n```\n\n```sh\n$ just\nThe executable is at: /bin/just\n```\n\n#### String Manipulation\n\n- `quote(s)` - Replace all single quotes with `'\\''` and prepend and append single quotes to `s`. This is sufficient to escape special characters for many shells, including most Bourne shell descendants.\n- `replace(s, from, to)` - Replace all occurrences of `from` in `s` to `to`.\n- `replace_regex(s, regex, replacement)` - Replace all occurrences of `regex` in `s` to `replacement`. Regular expressions are provided by the [Rust `regex` crate](https://docs.rs/regex/latest/regex/). See the [syntax documentation](https://docs.rs/regex/latest/regex/#syntax) for usage examples.\n- `trim(s)` - Remove leading and trailing whitespace from `s`.\n- `trim_end(s)` - Remove trailing whitespace from `s`.\n- `trim_end_match(s, pat)` - Remove suffix of `s` matching `pat`.\n- `trim_end_matches(s, pat)` - Repeatedly remove suffixes of `s` matching `pat`.\n- `trim_start(s)` - Remove leading whitespace from `s`.\n- `trim_start_match(s, pat)` - Remove prefix of `s` matching `pat`.\n- `trim_start_matches(s, pat)` - Repeatedly remove prefixes of `s` matching `pat`.\n\n#### Case Conversion\n\n- `capitalize(s)`<sup>1.7.0</sup> - Convert first character of `s` to uppercase and the rest to lowercase.\n- `kebabcase(s)`<sup>1.7.0</sup> - Convert `s` to `kebab-case`.\n- `lowercamelcase(s)`<sup>1.7.0</sup> - Convert `s` to `lowerCamelCase`.\n- `lowercase(s)` - Convert `s` to lowercase.\n- `shoutykebabcase(s)`<sup>1.7.0</sup> - Convert `s` to `SHOUTY-KEBAB-CASE`.\n- `shoutysnakecase(s)`<sup>1.7.0</sup> - Convert `s` to `SHOUTY_SNAKE_CASE`.\n- `snakecase(s)`<sup>1.7.0</sup> - Convert `s` to `snake_case`.\n- `titlecase(s)`<sup>1.7.0</sup> - Convert `s` to `Title Case`.\n- `uppercamelcase(s)`<sup>1.7.0</sup> - Convert `s` to `UpperCamelCase`.\n- `uppercase(s)` - Convert `s` to uppercase.\n\n#### Path Manipulation\n\n##### Fallible\n\n- `absolute_path(path)` - Absolute path to relative `path` in the working directory. `absolute_path(\"./bar.txt\")` in directory `/foo` is `/foo/bar.txt`.\n- `extension(path)` - Extension of `path`. `extension(\"/foo/bar.txt\")` is `txt`.\n- `file_name(path)` - File name of `path` with any leading directory components removed. `file_name(\"/foo/bar.txt\")` is `bar.txt`.\n- `file_stem(path)` - File name of `path` without extension. `file_stem(\"/foo/bar.txt\")` is `bar`.\n- `parent_directory(path)` - Parent directory of `path`. `parent_directory(\"/foo/bar.txt\")` is `/foo`.\n- `without_extension(path)` - `path` without extension. `without_extension(\"/foo/bar.txt\")` is `/foo/bar`.\n\nThese functions can fail, for example if a path does not have an extension, which will halt execution.\n\n##### Infallible\n\n- `clean(path)` - Simplify `path` by removing extra path separators, intermediate `.` components, and `..` where possible. `clean(\"foo//bar\")` is `foo/bar`, `clean(\"foo/..\")` is `.`, `clean(\"foo/./bar\")` is `foo/bar`.\n- `join(a, b…)` - *This function uses `/` on Unix and `\\` on Windows, which can be lead to unwanted behavior. The `/` operator, e.g., `a / b`, which always uses `/`, should be considered as a replacement unless `\\`s are specifically desired on Windows.* Join path `a` with path `b`. `join(\"foo/bar\", \"baz\")` is `foo/bar/baz`. Accepts two or more arguments.\n\n#### Filesystem Access\n\n- `path_exists(path)` - Returns `true` if the path points at an existing entity and `false` otherwise. Traverses symbolic links, and returns `false` if the path is inaccessible or points to a broken symlink.\n\n##### Error Reporting\n\n- `error(message)` - Abort execution and report error `message` to user.\n\n#### UUID and Hash Generation\n\n- `sha256(string)` - Return the SHA-256 hash of `string` as a hexadecimal string.\n- `sha256_file(path)` - Return the SHA-256 hash of the file at `path` as a hexadecimal string.\n- `uuid()` - Return a randomly generated UUID.\n\n### Recipe Attributes\n\nRecipes may be annotated with attributes that change their behavior.\n\n| Name                | Description                                     |\n| ------------------- | ----------------------------------------------- |\n| `[no-cd]`           | Don't change directory before executing recipe. |\n| `[no-exit-message]` | Don't print an error message if recipe fails.   |\n| `[linux]`           | Enable recipe on Linux.                         |\n| `[macos]`           | Enable recipe on MacOS.                         |\n| `[unix]`            | Enable recipe on Unixes. (Includes MacOS).      |\n| `[windows]`         | Enable recipe on Windows.                       |\n| `[private]`         | See [Private Recipes](#private-recipes).        |\n\nA recipe can have multiple attributes, either on multiple lines:\n\n```just\n[no-cd]\n[private]\nfoo:\n    echo \"foo\"\n```\n\nOr separated by commas on a single line:\n\n```just\n[no-cd, private]\nfoo:\n    echo \"foo\"\n```\n\n#### Enabling and Disabling Recipes\n\nThe `[linux]`, `[macos]`, `[unix]`, and `[windows]` attributes are\nconfiguration attributes. By default, recipes are always enabled. A recipe with\none or more configuration attributes will only be enabled when one or more of\nthose configurations is active.\n\nThis can be used to write `justfile`s that behave differently depending on\nwhich operating system they run on. The `run` recipe in this `justfile` will\ncompile and run `main.c`, using a different C compiler and using the correct\noutput binary name for that compiler depending on the operating system:\n\n```just\n[unix]\nrun:\n  cc main.c\n  ./a.out\n\n[windows]\nrun:\n  cl main.c\n  main.exe\n```\n\n#### Disabling Changing Directory<sup>1.9.0</sup>\n\n`just` normally executes recipes with the current directory set to the\ndirectory that contains the `justfile`. This can be disabled using the\n`[no-cd]` attribute. This can be used to create recipes which use paths\nrelative to the invocation directory, or which operate on the current\ndirectory.\n\nFor example, this `commit` recipe:\n\n```just\n[no-cd]\ncommit file:\n  git add {{file}}\n  git commit\n```\n\nCan be used with paths that are relative to the current directory, because\n`[no-cd]` prevents `just` from changing the current directory when executing\n`commit`.\n\n### Command Evaluation Using Backticks\n\nBackticks can be used to store the result of commands:\n\n```just\nlocalhost := `dumpinterfaces | cut -d: -f2 | sed 's/\\/.*//' | sed 's/ //g'`\n\nserve:\n  ./serve {{localhost}} 8080\n```\n\nIndented backticks, delimited by three backticks, are de-indented in the same manner as indented strings:\n\n````just\n# This backtick evaluates the command `echo foo\\necho bar\\n`, which produces the value `foo\\nbar\\n`.\nstuff := ```\n    echo foo\n    echo bar\n  ```\n````\n\nSee the [Strings](#strings) section for details on unindenting.\n\nBackticks may not start with `#!`. This syntax is reserved for a future upgrade.\n\n### Conditional Expressions\n\n`if`/`else` expressions evaluate different branches depending on if two expressions evaluate to the same value:\n\n```just\nfoo := if \"2\" == \"2\" { \"Good!\" } else { \"1984\" }\n\nbar:\n  @echo \"{{foo}}\"\n```\n\n```sh\n$ just bar\nGood!\n```\n\nIt is also possible to test for inequality:\n\n```just\nfoo := if \"hello\" != \"goodbye\" { \"xyz\" } else { \"abc\" }\n\nbar:\n  @echo {{foo}}\n```\n\n```sh\n$ just bar\nxyz\n```\n\nAnd match against regular expressions:\n\n```just\nfoo := if \"hello\" =~ 'hel+o' { \"match\" } else { \"mismatch\" }\n\nbar:\n  @echo {{foo}}\n```\n\n```sh\n$ just bar\nmatch\n```\n\nRegular expressions are provided by the [regex crate](https://github.com/rust-lang/regex), whose syntax is documented on [docs.rs](https://docs.rs/regex/1.5.4/regex/#syntax). Since regular expressions commonly use backslash escape sequences, consider using single-quoted string literals, which will pass slashes to the regex parser unmolested.\n\nConditional expressions short-circuit, which means they only evaluate one of their branches. This can be used to make sure that backtick expressions don't run when they shouldn't.\n\n```just\nfoo := if env_var(\"RELEASE\") == \"true\" { `get-something-from-release-database` } else { \"dummy-value\" }\n```\n\nConditionals can be used inside of recipes:\n\n```just\nbar foo:\n  echo {{ if foo == \"bar\" { \"hello\" } else { \"goodbye\" } }}\n```\n\nNote the space after the final `}`! Without the space, the interpolation will be prematurely closed.\n\nMultiple conditionals can be chained:\n\n```just\nfoo := if \"hello\" == \"goodbye\" {\n  \"xyz\"\n} else if \"a\" == \"a\" {\n  \"abc\"\n} else {\n  \"123\"\n}\n\nbar:\n  @echo {{foo}}\n```\n\n```sh\n$ just bar\nabc\n```\n\n### Stopping execution with error\n\nExecution can be halted with the `error` function. For example:\n\n```just\nfoo := if \"hello\" == \"goodbye\" {\n  \"xyz\"\n} else if \"a\" == \"b\" {\n  \"abc\"\n} else {\n  error(\"123\")\n}\n```\n\nWhich produce the following error when run:\n\n```\nerror: Call to function `error` failed: 123\n   |\n16 |   error(\"123\")\n```\n\n### Setting Variables from the Command Line\n\nVariables can be overridden from the command line.\n\n```just\nos := \"linux\"\n\ntest: build\n  ./test --test {{os}}\n\nbuild:\n  ./build {{os}}\n```\n\n```sh\n$ just\n./build linux\n./test --test linux\n```\n\nAny number of arguments of the form `NAME=VALUE` can be passed before recipes:\n\n```sh\n$ just os=plan9\n./build plan9\n./test --test plan9\n```\n\nOr you can use the `--set` flag:\n\n```sh\n$ just --set os bsd\n./build bsd\n./test --test bsd\n```\n\n### Getting and Setting Environment Variables\n\n#### Exporting `just` Variables\n\nAssignments prefixed with the `export` keyword will be exported to recipes as environment variables:\n\n```just\nexport RUST_BACKTRACE := \"1\"\n\ntest:\n  # will print a stack trace if it crashes\n  cargo test\n```\n\nParameters prefixed with a `$` will be exported as environment variables:\n\n```just\ntest $RUST_BACKTRACE=\"1\":\n  # will print a stack trace if it crashes\n  cargo test\n```\n\nExported variables and parameters are not exported to backticks in the same scope.\n\n```just\nexport WORLD := \"world\"\n# This backtick will fail with \"WORLD: unbound variable\"\nBAR := `echo hello $WORLD`\n```\n\n```just\n# Running `just a foo` will fail with \"A: unbound variable\"\na $A $B=`echo $A`:\n  echo $A $B\n```\n\nWhen [export](#export) is set, all `just` variables are exported as environment variables.\n\n#### Getting Environment Variables from the environment\n\nEnvironment variables from the environment are passed automatically to the recipes.\n\n```just\nprint_home_folder:\n  echo \"HOME is: '${HOME}'\"\n```\n\n```sh\n$ just\nHOME is '/home/myuser'\n```\n#### Loading Environment Variables from a `.env` File\n\n`just` will load environment variables from a `.env` file if [dotenv-load](#dotenv-load) is set. The variables in the file will be available as environment variables to the recipes. See [dotenv-integration](#dotenv-integration) for more information.\n\n#### Setting `just` Variables from Environment Variables\n\nEnvironment variables can be propagated to `just` variables using the functions `env_var()` and `env_var_or_default()`.\nSee [environment-variables](#environment-variables).\n\n### Recipe Parameters\n\nRecipes may have parameters. Here recipe `build` has a parameter called `target`:\n\n```just\nbuild target:\n  @echo 'Building {{target}}…'\n  cd {{target}} && make\n```\n\nTo pass arguments on the command line, put them after the recipe name:\n\n```sh\n$ just build my-awesome-project\nBuilding my-awesome-project…\ncd my-awesome-project && make\n```\n\nTo pass arguments to a dependency, put the dependency in parentheses along with the arguments:\n\n```just\ndefault: (build \"main\")\n\nbuild target:\n  @echo 'Building {{target}}…'\n  cd {{target}} && make\n```\n\nVariables can also be passed as arguments to dependencies:\n\n```just\ntarget := \"main\"\n\n_build version:\n  @echo 'Building {{version}}…'\n  cd {{version}} && make\n\nbuild: (_build target)\n```\n\nA command's arguments can be passed to dependency by putting the dependency in parentheses along with the arguments:\n\n```just\nbuild target:\n  @echo \"Building {{target}}…\"\n\npush target: (build target)\n  @echo 'Pushing {{target}}…'\n```\n\nParameters may have default values:\n\n```just\ndefault := 'all'\n\ntest target tests=default:\n  @echo 'Testing {{target}}:{{tests}}…'\n  ./test --tests {{tests}} {{target}}\n```\n\nParameters with default values may be omitted:\n\n```sh\n$ just test server\nTesting server:all…\n./test --tests all server\n```\n\nOr supplied:\n\n```sh\n$ just test server unit\nTesting server:unit…\n./test --tests unit server\n```\n\nDefault values may be arbitrary expressions, but concatenations or path joins must be parenthesized:\n\n```just\narch := \"wasm\"\n\ntest triple=(arch + \"-unknown-unknown\") input=(arch / \"input.dat\"):\n  ./test {{triple}}\n```\n\nThe last parameter of a recipe may be variadic, indicated with either a `+` or a `*` before the argument name:\n\n```just\nbackup +FILES:\n  scp {{FILES}} me@server.com:\n```\n\nVariadic parameters prefixed with `+` accept _one or more_ arguments and expand to a string containing those arguments separated by spaces:\n\n```sh\n$ just backup FAQ.md GRAMMAR.md\nscp FAQ.md GRAMMAR.md me@server.com:\nFAQ.md                  100% 1831     1.8KB/s   00:00\nGRAMMAR.md              100% 1666     1.6KB/s   00:00\n```\n\nVariadic parameters prefixed with `*` accept _zero or more_ arguments and expand to a string containing those arguments separated by spaces, or an empty string if no arguments are present:\n\n```just\ncommit MESSAGE *FLAGS:\n  git commit {{FLAGS}} -m \"{{MESSAGE}}\"\n```\n\nVariadic parameters can be assigned default values. These are overridden by arguments passed on the command line:\n\n```just\ntest +FLAGS='-q':\n  cargo test {{FLAGS}}\n```\n\n`{{…}}` substitutions may need to be quoted if they contain spaces. For example, if you have the following recipe:\n\n```just\nsearch QUERY:\n  lynx https://www.google.com/?q={{QUERY}}\n```\n\nAnd you type:\n\n```sh\n$ just search \"cat toupee\"\n```\n\n`just` will run the command `lynx https://www.google.com/?q=cat toupee`, which will get parsed by `sh` as `lynx`, `https://www.google.com/?q=cat`, and `toupee`, and not the intended `lynx` and `https://www.google.com/?q=cat toupee`.\n\nYou can fix this by adding quotes:\n\n```just\nsearch QUERY:\n  lynx 'https://www.google.com/?q={{QUERY}}'\n```\n\nParameters prefixed with a `$` will be exported as environment variables:\n\n```just\nfoo $bar:\n  echo $bar\n```\n\n### Running Recipes at the End of a Recipe\n\nNormal dependencies of a recipes always run before a recipe starts. That is to say, the dependee always runs before the depender. These dependencies are called \"prior dependencies\".\n\nA recipe can also have subsequent dependencies, which run after the recipe and are introduced with an `&&`:\n\n```just\na:\n  echo 'A!'\n\nb: a && c d\n  echo 'B!'\n\nc:\n  echo 'C!'\n\nd:\n  echo 'D!'\n```\n\n…running _b_ prints:\n\n```sh\n$ just b\necho 'A!'\nA!\necho 'B!'\nB!\necho 'C!'\nC!\necho 'D!'\nD!\n```\n\n### Running Recipes in the Middle of a Recipe\n\n`just` doesn't support running recipes in the middle of another recipe, but you can call `just` recursively in the middle of a recipe. Given the following `justfile`:\n\n```just\na:\n  echo 'A!'\n\nb: a\n  echo 'B start!'\n  just c\n  echo 'B end!'\n\nc:\n  echo 'C!'\n```\n\n…running _b_ prints:\n\n```sh\n$ just b\necho 'A!'\nA!\necho 'B start!'\nB start!\necho 'C!'\nC!\necho 'B end!'\nB end!\n```\n\nThis has limitations, since recipe `c` is run with an entirely new invocation of `just`: Assignments will be recalculated, dependencies might run twice, and command line arguments will not be propagated to the child `just` process.\n\n### Writing Recipes in Other Languages\n\nRecipes that start with `#!` are called shebang recipes, and are executed by\nsaving the recipe body to a file and running it. This lets you write recipes in\ndifferent languages:\n\n```just\npolyglot: python js perl sh ruby nu\n\npython:\n  #!/usr/bin/env python3\n  print('Hello from python!')\n\njs:\n  #!/usr/bin/env node\n  console.log('Greetings from JavaScript!')\n\nperl:\n  #!/usr/bin/env perl\n  print \"Larry Wall says Hi!\\n\";\n\nsh:\n  #!/usr/bin/env sh\n  hello='Yo'\n  echo \"$hello from a shell script!\"\n\nnu:\n  #!/usr/bin/env nu\n  let hello = 'Hola'\n  echo $\"($hello) from a nushell script!\"\n\nruby:\n  #!/usr/bin/env ruby\n  puts \"Hello from ruby!\"\n```\n\n```sh\n$ just polyglot\nHello from python!\nGreetings from JavaScript!\nLarry Wall says Hi!\nYo from a shell script!\nHola from a nushell script!\nHello from ruby!\n```\n\nOn Unix-like operating systems, including Linux and MacOS, shebang recipes are\nexecuted by saving the recipe body to a file in a temporary directory, marking\nthe file as executable, and executing it. The OS then parses the shebang line\ninto a command line and invokes it, including the path to the file. For\nexample, if a recipe starts with `#!/usr/bin/env bash`, the final command that\nthe OS runs will be something like `/usr/bin/env bash\n/tmp/PATH_TO_SAVED_RECIPE_BODY`. Keep in mind that different operating systems\nsplit shebang lines differently.\n\nWindows does not support shebang lines. On Windows, `just` splits the shebang\nline into a command and arguments, saves the recipe body to a file, and invokes\nthe split command and arguments, adding the path to the saved recipe body as\nthe final argument.\n\n### Safer Bash Shebang Recipes\n\nIf you're writing a `bash` shebang recipe, consider adding `set -euxo pipefail`:\n\n```just\nfoo:\n  #!/usr/bin/env bash\n  set -euxo pipefail\n  hello='Yo'\n  echo \"$hello from Bash!\"\n```\n\nIt isn't strictly necessary, but `set -euxo pipefail` turns on a few useful features that make `bash` shebang recipes behave more like normal, linewise `just` recipe:\n\n- `set -e` makes `bash` exit if a command fails.\n\n- `set -u` makes `bash` exit if a variable is undefined.\n\n- `set -x` makes `bash` print each script line before it's run.\n\n- `set -o pipefail` makes `bash` exit if a command in a pipeline fails. This is `bash`-specific, so isn't turned on in normal linewise `just` recipes.\n\nTogether, these avoid a lot of shell scripting gotchas.\n\n#### Shebang Recipe Execution on Windows\n\nOn Windows, shebang interpreter paths containing a `/` are translated from Unix-style paths to Windows-style paths using `cygpath`, a utility that ships with [Cygwin](http://www.cygwin.com).\n\nFor example, to execute this recipe on Windows:\n\n```just\necho:\n  #!/bin/sh\n  echo \"Hello!\"\n```\n\nThe interpreter path `/bin/sh` will be translated to a Windows-style path using `cygpath` before being executed.\n\nIf the interpreter path does not contain a `/` it will be executed without being translated. This is useful if `cygpath` is not available, or you wish to pass a Windows-style path to the interpreter.\n\n### Setting Variables in a Recipe\n\nRecipe lines are interpreted by the shell, not `just`, so it's not possible to set `just` variables in the middle of a recipe:\n\n```mf\nfoo:\n  x := \"hello\" # This doesn't work!\n  echo {{x}}\n```\n\nIt is possible to use shell variables, but there's another problem. Every recipe line is run by a new shell instance, so variables set in one line won't be set in the next:\n\n```just\nfoo:\n  x=hello && echo $x # This works!\n  y=bye\n  echo $y            # This doesn't, `y` is undefined here!\n```\n\nThe best way to work around this is to use a shebang recipe. Shebang recipe bodies are extracted and run as scripts, so a single shell instance will run the whole thing:\n\n```just\nfoo:\n  #!/usr/bin/env bash\n  set -euxo pipefail\n  x=hello\n  echo $x\n```\n\n### Sharing Environment Variables Between Recipes\n\nEach line of each recipe is executed by a fresh shell, so it is not possible to share environment variables between recipes.\n\n#### Using Python Virtual Environments\n\nSome tools, like [Python's venv](https://docs.python.org/3/library/venv.html), require loading environment variables in order to work, making them challenging to use with `just`. As a workaround, you can execute the virtual environment binaries directly:\n\n```just\nvenv:\n  [ -d foo ] || python3 -m venv foo\n\nrun: venv\n  ./foo/bin/python3 main.py\n```\n\n### Changing the Working Directory in a Recipe\n\nEach recipe line is executed by a new shell, so if you change the working directory on one line, it won't have an effect on later lines:\n\n```just\nfoo:\n  pwd    # This `pwd` will print the same directory…\n  cd bar\n  pwd    # …as this `pwd`!\n```\n\nThere are a couple ways around this. One is to call `cd` on the same line as the command you want to run:\n\n```just\nfoo:\n  cd bar && pwd\n```\n\nThe other is to use a shebang recipe. Shebang recipe bodies are extracted and run as scripts, so a single shell instance will run the whole thing, and thus a `pwd` on one line will affect later lines, just like a shell script:\n\n```just\nfoo:\n  #!/usr/bin/env bash\n  set -euxo pipefail\n  cd bar\n  pwd\n```\n\n### Indentation\n\nRecipe lines can be indented with spaces or tabs, but not a mix of both. All of a recipe's lines must have the same indentation, but different recipes in the same `justfile` may use different indentation.\n\n### Multi-Line Constructs\n\nRecipes without an initial shebang are evaluated and run line-by-line, which means that multi-line constructs probably won't do what you want.\n\nFor example, with the following `justfile`:\n\n```mf\nconditional:\n  if true; then\n    echo 'True!'\n  fi\n```\n\nThe extra leading whitespace before the second line of the `conditional` recipe will produce a parse error:\n\n```sh\n$ just conditional\nerror: Recipe line has extra leading whitespace\n  |\n3 |         echo 'True!'\n  |     ^^^^^^^^^^^^^^^^\n```\n\nTo work around this, you can write conditionals on one line, escape newlines with slashes, or add a shebang to your recipe. Some examples of multi-line constructs are provided for reference.\n\n#### `if` statements\n\n```just\nconditional:\n  if true; then echo 'True!'; fi\n```\n\n```just\nconditional:\n  if true; then \\\n    echo 'True!'; \\\n  fi\n```\n\n```just\nconditional:\n  #!/usr/bin/env sh\n  if true; then\n    echo 'True!'\n  fi\n```\n\n#### `for` loops\n\n```just\nfor:\n  for file in `ls .`; do echo $file; done\n```\n\n```just\nfor:\n  for file in `ls .`; do \\\n    echo $file; \\\n  done\n```\n\n```just\nfor:\n  #!/usr/bin/env sh\n  for file in `ls .`; do\n    echo $file\n  done\n```\n\n#### `while` loops\n\n```just\nwhile:\n  while `server-is-dead`; do ping -c 1 server; done\n```\n\n```just\nwhile:\n  while `server-is-dead`; do \\\n    ping -c 1 server; \\\n  done\n```\n\n```just\nwhile:\n  #!/usr/bin/env sh\n  while `server-is-dead`; do\n    ping -c 1 server\n  done\n```\n\n### Command Line Options\n\n`just` supports a number of useful command line options for listing, dumping, and debugging recipes and variable:\n\n```sh\n$ just --list\nAvailable recipes:\n  js\n  perl\n  polyglot\n  python\n  ruby\n$ just --show perl\nperl:\n  #!/usr/bin/env perl\n  print \"Larry Wall says Hi!\\n\";\n$ just --show polyglot\npolyglot: python js perl sh ruby\n```\n\nRun `just --help` to see all the options.\n\n### Private Recipes\n\nRecipes and aliases whose name starts with a `_` are omitted from `just --list`:\n\n```just\ntest: _test-helper\n  ./bin/test\n\n_test-helper:\n  ./bin/super-secret-test-helper-stuff\n```\n\n```sh\n$ just --list\nAvailable recipes:\n    test\n```\n\nAnd from `just --summary`:\n\n```sh\n$ just --summary\ntest\n```\n\nThe `[private]` attribute<sup>1.10.0</sup> may also be used to hide recipes or aliases without needing to change the name:\n\n```just\n[private]\nfoo:\n\n[private]\nalias b := bar\n\nbar:\n```\n\n```sh\n$ just --list\nAvailable recipes:\n    bar\n```\n\nThis is useful for helper recipes which are only meant to be used as dependencies of other recipes.\n\n### Quiet Recipes\n\nA recipe name may be prefixed with `@` to invert the meaning of `@` before each line:\n\n```just\n@quiet:\n  echo hello\n  echo goodbye\n  @# all done!\n```\n\nNow only the lines starting with `@` will be echoed:\n\n```sh\n$ j quiet\nhello\ngoodbye\n# all done!\n```\n\nShebang recipes are quiet by default:\n\n```just\nfoo:\n  #!/usr/bin/env bash\n  echo 'Foo!'\n```\n\n```sh\n$ just foo\nFoo!\n```\n\nAdding `@` to a shebang recipe name makes `just` print the recipe before executing it:\n\n```just\n@bar:\n  #!/usr/bin/env bash\n  echo 'Bar!'\n```\n\n```sh\n$ just bar\n#!/usr/bin/env bash\necho 'Bar!'\nBar!\n```\n\n`just` normally prints error messages when a recipe line fails. These error\nmessages can be suppressed using the `[no-exit-message]` attribute. You may find\nthis especially useful with a recipe that recipe wraps a tool:\n\n```just\ngit *args:\n    @git {{args}}\n```\n\n```sh\n$ just git status\nfatal: not a git repository (or any of the parent directories): .git\nerror: Recipe `git` failed on line 2 with exit code 128\n```\n\nAdd the attribute to suppress the exit error message when the tool exits with a\nnon-zero code:\n\n```just\n[no-exit-message]\ngit *args:\n    @git {{args}}\n```\n\n```sh\n$ just git status\nfatal: not a git repository (or any of the parent directories): .git\n```\n\n### Selecting Recipes to Run With an Interactive Chooser\n\nThe `--choose` subcommand makes `just` invoke a chooser to select which recipes to run. Choosers should read lines containing recipe names from standard input and print one or more of those names separated by spaces to standard output.\n\nBecause there is currently no way to run a recipe that requires arguments with `--choose`, such recipes will not be given to the chooser. Private recipes and aliases are also skipped.\n\nThe chooser can be overridden with the `--chooser` flag. If `--chooser` is not given, then `just` first checks if `$JUST_CHOOSER` is set. If it isn't, then the chooser defaults to `fzf`, a popular fuzzy finder.\n\nArguments can be included in the chooser, i.e. `fzf --exact`.\n\nThe chooser is invoked in the same way as recipe lines. For example, if the chooser is `fzf`, it will be invoked with `sh -cu 'fzf'`, and if the shell, or the shell arguments are overridden, the chooser invocation will respect those overrides.\n\nIf you'd like `just` to default to selecting recipes with a chooser, you can use this as your default recipe:\n\n```just\ndefault:\n  @just --choose\n```\n\n### Invoking `justfile`s in Other Directories\n\nIf the first argument passed to `just` contains a `/`, then the following occurs:\n\n1.  The argument is split at the last `/`.\n\n2.  The part before the last `/` is treated as a directory. `just` will start its search for the `justfile` there, instead of in the current directory.\n\n3.  The part after the last slash is treated as a normal argument, or ignored if it is empty.\n\nThis may seem a little strange, but it's useful if you wish to run a command in a `justfile` that is in a subdirectory.\n\nFor example, if you are in a directory which contains a subdirectory named `foo`, which contains a `justfile` with the recipe `build`, which is also the default recipe, the following are all equivalent:\n\n```sh\n$ (cd foo && just build)\n$ just foo/build\n$ just foo/\n```\n\nAdditional recipes after the first are sought in the same `justfile`. For\nexample, the following are both equivalent:\n\n```sh\n$ just foo/a b\n$ (cd foo && just a b)\n```\n\nAnd will both invoke recipes `a` and `b` in `foo/justfile`.\n\n### Include Directives\n\nThe `!include` directive, currently unstable, can be used to include the\nverbatim text of another file.\n\nIf you have the following `justfile`:\n\n```mf\n!include foo/bar.just\n\na: b\n  @echo A\n\n```\n\nAnd the following text in `foo/bar.just`:\n\n```mf\nb:\n  @echo B\n```\n\n`foo/bar.just` will be included in `justfile` and recipe `b` will be defined:\n\n```sh\n$ just --unstable b\nB\n$ just --unstable a\nB\nA\n```\n\nThe `!include` directive path can be absolute or relative to the location of\nthe justfile containing it. `!include` directives must appear at the beginning\nof a line.\n\nJustfiles are insensitive to order, so included files can reference variables\nand recipes defined after the `!include` directive.\n\n`!include` directives are only processed before the first non-blank,\nnon-comment line.\n\nIncluded files can themselves contain `!include` directives, which are\nprocessed recursively.\n\n### Hiding `justfile`s\n\n`just` looks for `justfile`s named `justfile` and `.justfile`, which can be used to keep a `justfile` hidden.\n\n### Just Scripts\n\nBy adding a shebang line to the top of a `justfile` and making it executable, `just` can be used as an interpreter for scripts:\n\n```sh\n$ cat > script <<EOF\n#!/usr/bin/env just --justfile\n\nfoo:\n  echo foo\nEOF\n$ chmod +x script\n$ ./script foo\necho foo\nfoo\n```\n\nWhen a script with a shebang is executed, the system supplies the path to the script as an argument to the command in the shebang. So, with a shebang of `#!/usr/bin/env just --justfile`, the command will be `/usr/bin/env just --justfile PATH_TO_SCRIPT`.\n\nWith the above shebang, `just` will change its working directory to the location of the script. If you'd rather leave the working directory unchanged, use `#!/usr/bin/env just --working-directory . --justfile`.\n\nNote: Shebang line splitting is not consistent across operating systems. The previous examples have only been tested on macOS. On Linux, you may need to pass the `-S` flag to `env`:\n\n```just\n#!/usr/bin/env -S just --justfile\n\ndefault:\n  echo foo\n```\n\n### Formatting and dumping `justfile`s\n\nEach `justfile` has a canonical formatting with respect to whitespace and\nnewlines.\n\nYou can overwrite the current justfile with a canonically-formatted version\nusing the currently-unstable `--fmt` flag:\n\n```sh\n$ cat justfile\n# A lot of blank lines\n\n\n\n\n\nsome-recipe:\n  echo \"foo\"\n$ just --fmt --unstable\n$ cat justfile\n# A lot of blank lines\n\nsome-recipe:\n    echo \"foo\"\n```\n\nInvoking `just --fmt --check --unstable` runs `--fmt` in check mode. Instead of\noverwriting the `justfile`, `just` will exit with an exit code of 0 if it is\nformatted correctly, and will exit with 1 and print a diff if it is not.\n\nYou can use the `--dump` command to output a formatted version of the\n`justfile` to stdout:\n\n```sh\n$ just --dump > formatted-justfile\n```\n\nThe `--dump` command can be used with `--dump-format json` to print a JSON\nrepresentation of a `justfile`.\n\n### Fallback to parent `justfile`s\n\nIf a recipe is not found in a `justfile` and the `fallback` setting is set,\n`just` will look for `justfile`s in the parent directory and up, until it\nreaches the root directory. `just` will stop after it reaches a `justfile` in\nwhich the `fallback` setting is `false` or unset.\n\nAs an example, suppose the current directory contains this `justfile`:\n\n```just\nset fallback\nfoo:\n  echo foo\n```\n\nAnd the parent directory contains this `justfile`:\n\n```just\nbar:\n  echo bar\n```\n\n```sh\n$ just bar\nTrying ../justfile\necho bar\nbar\n```\n\n### Avoiding Argument Splitting\n\nGiven this `justfile`:\n\n```just\nfoo argument:\n  touch {{argument}}\n```\n\nThe following command will create two files, `some` and `argument.txt`:\n\n```sh\n$ just foo \"some argument.txt\"\n```\n\nThe users shell will parse `\"some argument.txt\"` as a single argument, but when `just` replaces `touch {{argument}}` with `touch some argument.txt`, the quotes are not preserved, and `touch` will receive two arguments.\n\nThere are a few ways to avoid this: quoting, positional arguments, and exported arguments.\n\n#### Quoting\n\nQuotes can be added around the `{{argument}}` interpolation:\n\n```just\nfoo argument:\n  touch '{{argument}}'\n```\n\nThis preserves `just`'s ability to catch variable name typos before running, for example if you were to write `{{argument}}`, but will not do what you want if the value of `argument` contains single quotes.\n\n#### Positional Arguments\n\nThe `positional-arguments` setting causes all arguments to be passed as positional arguments, allowing them to be accessed with `$1`, `$2`, …, and `$@`, which can be then double-quoted to avoid further splitting by the shell:\n\n```just\nset positional-arguments\n\nfoo argument:\n  touch \"$1\"\n```\n\nThis defeats `just`'s ability to catch typos, for example if you type `$2`, but works for all possible values of `argument`, including those with double quotes.\n\n#### Exported Arguments\n\nAll arguments are exported when the `export` setting is set:\n\n```just\nset export\n\nfoo argument:\n  touch \"$argument\"\n```\n\nOr individual arguments may be exported by prefixing them with `$`:\n\n```just\nfoo $argument:\n  touch \"$argument\"\n```\n\nThis defeats `just`'s ability to catch typos, for example if you type `$argumant`, but works for all possible values of `argument`, including those with double quotes.\n\n### Configuring the Shell\n\nThere are a number of ways to configure the shell for linewise recipes, which are the default when a recipe does not start with a `#!` shebang. Their precedence, from highest to lowest, is:\n\n1. The `--shell` and `--shell-arg` command line options. Passing either of these will cause `just` to ignore any settings in the current justfile.\n2. `set windows-shell := [...]`\n3. `set windows-powershell` (deprecated)\n4. `set shell := [...]`\n\nSince `set windows-shell` has higher precedence than `set shell`, you can use `set windows-shell` to pick a shell on Windows, and `set shell` to pick a shell for all other platforms.\n\nChangelog\n---------\n\nA changelog for the latest release is available in [CHANGELOG.md](https://raw.githubusercontent.com/casey/just/master/CHANGELOG.md). Changelogs for previous releases are available on [the releases page](https://github.com/casey/just/releases). `just --changelog` can also be used to make a `just` binary print its changelog.\n\nMiscellanea\n-----------\n\n### Companion Tools\n\nTools that pair nicely with `just` include:\n\n- [`watchexec`](https://github.com/mattgreen/watchexec) — a simple tool that watches a path and runs a command whenever it detects modifications.\n\n### Shell Alias\n\nFor lightning-fast command running, put `alias j=just` in your shell's configuration file.\n\nIn `bash`, the aliased command may not keep the shell completion functionality described in the next section. Add the following line to your `.bashrc` to use the same completion function as `just` for your aliased command:\n\n```sh\ncomplete -F _just -o bashdefault -o default j\n```\n\n### Shell Completion Scripts\n\nShell completion scripts for Bash, Zsh, Fish, PowerShell, and Elvish are available in the [completions](https://github.com/casey/just/tree/master/completions) directory. Please refer to your shell's documentation for how to install them.\n\nThe `just` binary can also generate the same completion scripts at runtime, using the `--completions` command:\n\n```sh\n$ just --completions zsh > just.zsh\n```\n\n*macOS Note:* Recent versions of macOS use zsh as the default shell. If you use Homebrew to install `just`, it will automatically install the most recent copy of the zsh completion script in the Homebrew zsh directory, which the built-in version of zsh doesn't know about by default. It's best to use this copy of the script if possible, since it will be updated whenever you update `just` via Homebrew. Also, many other Homebrew packages use the same location for completion scripts, and the built-in zsh doesn't know about those either. To take advantage of `just` completion in zsh in this scenario, you can set `fpath` to the Homebrew location before calling `compinit`. Note also that Oh My Zsh runs `compinit` by default. So your `.zshrc` file could look like this:\n\n```zsh\n# Init Homebrew, which adds environment variables\neval \"$(brew shellenv)\"\n\nfpath=($HOMEBREW_PREFIX/share/zsh/site-functions $fpath)\n\n# Then choose one of these options:\n# 1. If you're using Oh My Zsh, you can initialize it here\n# source $ZSH/oh-my-zsh.sh\n\n# 2. Otherwise, run compinit yourself\n# autoload -U compinit\n# compinit\n```\n\n### Grammar\n\nA non-normative grammar of `justfile`s can be found in [GRAMMAR.md](https://github.com/casey/just/blob/master/GRAMMAR.md).\n\n### just.sh\n\nBefore `just` was a fancy Rust program it was a tiny shell script that called `make`. You can find the old version in [extras/just.sh](https://github.com/casey/just/blob/master/extras/just.sh).\n\n### User `justfile`s\n\nIf you want some recipes to be available everywhere, you have a few options.\n\nFirst, create a `justfile` in `~/.user.justfile` with some recipes.\n\n#### Recipe Aliases\n\nIf you want to call the recipes in `~/.user.justfile` by name, and don't mind creating an alias for every recipe, add the following to your shell's initialization script:\n\n```sh\nfor recipe in `just --justfile ~/.user.justfile --summary`; do\n  alias $recipe=\"just --justfile ~/.user.justfile --working-directory . $recipe\"\ndone\n```\n\nNow, if you have a recipe called `foo` in `~/.user.justfile`, you can just type `foo` at the command line to run it.\n\nIt took me way too long to realize that you could create recipe aliases like this. Notwithstanding my tardiness, I am very pleased to bring you this major advance in `justfile` technology.\n\n#### Forwarding Alias\n\nIf you'd rather not create aliases for every recipe, you can create a single alias:\n\n```sh\nalias .j='just --justfile ~/.user.justfile --working-directory .'\n```\n\nNow, if you have a recipe called `foo` in `~/.user.justfile`, you can just type `.j foo` at the command line to run it.\n\nI'm pretty sure that nobody actually uses this feature, but it's there.\n\n¯\\\\\\_(ツ)\\_/¯\n\n#### Customization\n\nYou can customize the above aliases with additional options. For example, if you'd prefer to have the recipes in your `justfile` run in your home directory, instead of the current directory:\n\n```sh\nalias .j='just --justfile ~/.user.justfile --working-directory ~'\n```\n\n### Node.js `package.json` Script Compatibility\n\nThe following export statement gives `just` recipes access to local Node module binaries, and makes `just` recipe commands behave more like `script` entries in Node.js `package.json` files:\n\n```just\nexport PATH := \"./node_modules/.bin:\" + env_var('PATH')\n```\n\n### Alternatives and Prior Art\n\nThere is no shortage of command runners! Some more or less similar alternatives to `just` include:\n\n- [make](https://en.wikipedia.org/wiki/Make_(software)): The Unix build tool that inspired `just`. There are a few different modern day descendents of the original `make`, including [FreeBSD Make](https://www.freebsd.org/cgi/man.cgi?make(1)) and [GNU Make](https://www.gnu.org/software/make/).\n- [task](https://github.com/go-task/task): A YAML-based command runner written in Go.\n- [maid](https://github.com/egoist/maid): A Markdown-based command runner written in JavaScript.\n- [microsoft/just](https://github.com/microsoft/just): A JavaScript-based command runner written in JavaScript.\n- [cargo-make](https://github.com/sagiegurari/cargo-make): A command runner for Rust projects.\n- [mmake](https://github.com/tj/mmake): A wrapper around `make` with a number of improvements, including remote includes.\n- [robo](https://github.com/tj/robo): A YAML-based command runner written in Go.\n- [mask](https://github.com/jakedeichert/mask): A Markdown-based command runner written in Rust.\n- [makesure](https://github.com/xonixx/makesure): A simple and portable command runner written in AWK and shell.\n- [haku](https://github.com/VladimirMarkelov/haku): A make-like command runner written in Rust.\n\nContributing\n------------\n\n`just` welcomes your contributions! `just` is released under the maximally permissive [CC0](https://creativecommons.org/publicdomain/zero/1.0/legalcode.txt) public domain dedication and fallback license, so your changes must also be released under this license.\n\n### Janus\n\n[Janus](https://github.com/casey/janus) is a tool that collects and analyzes `justfile`s, and can determine if a new version of `just` breaks or changes the interpretation of existing `justfile`s.\n\nBefore merging a particularly large or gruesome change, Janus should be run to make sure that nothing breaks. Don't worry about running Janus yourself, Casey will happily run it for you on changes that need it.\n\n### Minimum Supported Rust Version\n\nThe minimum supported Rust version, or MSRV, is current stable Rust. It may build on older versions of Rust, but this is not guaranteed.\n\n### New Releases\n\nNew releases of `just` are made frequently so that users quickly get access to new features.\n\nRelease commit messages use the following template:\n\n```\nRelease x.y.z\n\n- Bump version: x.y.z → x.y.z\n- Update changelog\n- Update changelog contributor credits\n- Update dependencies\n- Update man page\n- Update version references in readme\n```\n\nFrequently Asked Questions\n--------------------------\n\n### What are the idiosyncrasies of Make that Just avoids?\n\n`make` has some behaviors which are confusing, complicated, or make it unsuitable for use as a general command runner.\n\nOne example is that under some circumstances, `make` won't actually run the commands in a recipe. For example, if you have a file called `test` and the following makefile:\n\n```just\ntest:\n  ./test\n```\n\n`make` will refuse to run your tests:\n\n```sh\n$ make test\nmake: `test' is up to date.\n```\n\n`make` assumes that the `test` recipe produces a file called `test`. Since this file exists and the recipe has no other dependencies, `make` thinks that it doesn't have anything to do and exits.\n\nTo be fair, this behavior is desirable when using `make` as a build system, but not when using it as a command runner. You can disable this behavior for specific targets using `make`'s built-in [`.PHONY` target name](https://www.gnu.org/software/make/manual/html_node/Phony-Targets.html), but the syntax is verbose and can be hard to remember. The explicit list of phony targets, written separately from the recipe definitions, also introduces the risk of accidentally defining a new non-phony target. In `just`, all recipes are treated as if they were phony.\n\nOther examples of `make`'s idiosyncrasies include the difference between `=` and `:=` in assignments, the confusing error messages that are produced if you mess up your makefile, needing `$$` to use environment variables in recipes, and incompatibilities between different flavors of `make`.\n\n### What's the relationship between Just and Cargo build scripts?\n\n[`cargo` build scripts](http://doc.crates.io/build-script.html) have a pretty specific use, which is to control how `cargo` builds your Rust project. This might include adding flags to `rustc` invocations, building an external dependency, or running some kind of codegen step.\n\n`just`, on the other hand, is for all the other miscellaneous commands you might run as part of development. Things like running tests in different configurations, linting your code, pushing build artifacts to a server, removing temporary files, and the like.\n\nAlso, although `just` is written in Rust, it can be used regardless of the language or build system your project uses.\n\nFurther Ramblings\n-----------------\n\nI personally find it very useful to write a `justfile` for almost every project, big or small.\n\nOn a big project with multiple contributors, it's very useful to have a file with all the commands needed to work on the project close at hand.\n\nThere are probably different commands to test, build, lint, deploy, and the like, and having them all in one place is useful and cuts down on the time you have to spend telling people which commands to run and how to type them.\n\nAnd, with an easy place to put commands, it's likely that you'll come up with other useful things which are part of the project's collective wisdom, but which aren't written down anywhere, like the arcane commands needed for some part of your revision control workflow, install all your project's dependencies, or all the random flags you might need to pass to the build system.\n\nSome ideas for recipes:\n\n- Deploying/publishing the project\n\n- Building in release mode vs debug mode\n\n- Running in debug mode or with logging enabled\n\n- Complex git workflows\n\n- Updating dependencies\n\n- Running different sets of tests, for example fast tests vs slow tests, or running them with verbose output\n\n- Any complex set of commands that you really should write down somewhere, if only to be able to remember them\n\nEven for small, personal projects it's nice to be able to remember commands by name instead of ^Reverse searching your shell history, and it's a huge boon to be able to go into an old project written in a random language with a mysterious build system and know that all the commands you need to do whatever you need to do are in the `justfile`, and that if you type `just` something useful (or at least interesting!) will probably happen.\n\nFor ideas for recipes, check out [this project's `justfile`](https://github.com/casey/just/blob/master/justfile), or some of the `justfile`s [out in the wild](https://github.com/search?q=path%3A**%2Fjustfile&type=code).\n\nAnyways, I think that's about it for this incredibly long-winded README.\n\nI hope you enjoy using `just` and find great success and satisfaction in all your computational endeavors!\n\n😸"
}
