{
  "name": "libavif",
  "full_name": "libavif",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Library for encoding and decoding .avif files",
  "license": "BSD-2-Clause",
  "homepage": "https://github.com/AOMediaCodec/libavif",
  "versions": {
    "stable": "0.11.1",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/AOMediaCodec/libavif/archive/refs/tags/v0.11.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "0eb49965562a0e5e5de58389650d434cff32af84c34185b6c9b7b2fccae06d4e"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libavif/blobs/sha256:9b4735a70692b1e1cb060a3239bc22b2226cb663c7321474aaaa7b237772a68c",
          "sha256": "9b4735a70692b1e1cb060a3239bc22b2226cb663c7321474aaaa7b237772a68c"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libavif/blobs/sha256:7894a74f1c218445038333053255a70edd4e5bbd7db601df3f9544c53c19b5e6",
          "sha256": "7894a74f1c218445038333053255a70edd4e5bbd7db601df3f9544c53c19b5e6"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libavif/blobs/sha256:89dae84c1c6432e7fce025d72236606fe3cad655b596a19638754e593d608092",
          "sha256": "89dae84c1c6432e7fce025d72236606fe3cad655b596a19638754e593d608092"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libavif/blobs/sha256:920c5bcf0ebdcd67b5c8fb124b3be365d81fef5b44aaa9e82f0d487aace15a79",
          "sha256": "920c5bcf0ebdcd67b5c8fb124b3be365d81fef5b44aaa9e82f0d487aace15a79"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libavif/blobs/sha256:62c3120e7b162a29839b38a1eb53db3f25caa15495aee7cf5c9c54b353d9c965",
          "sha256": "62c3120e7b162a29839b38a1eb53db3f25caa15495aee7cf5c9c54b353d9c965"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libavif/blobs/sha256:cd42d557da81863120e2a542200c5bebc56b0fec042758157b7c2dec6ac557c7",
          "sha256": "cd42d557da81863120e2a542200c5bebc56b0fec042758157b7c2dec6ac557c7"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libavif/blobs/sha256:b7d1c39830e03db3700c701faad8f9df4ea9ac61f52034a49777b0fbd998474c",
          "sha256": "b7d1c39830e03db3700c701faad8f9df4ea9ac61f52034a49777b0fbd998474c"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/libavif/blobs/sha256:b519a99be7b7bf73c940eb53f1bd89cb8d06317f4888e6d71c217b03242e15a7",
          "sha256": "b519a99be7b7bf73c940eb53f1bd89cb8d06317f4888e6d71c217b03242e15a7"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake",
    "nasm"
  ],
  "dependencies": [
    "aom",
    "jpeg-turbo",
    "libpng"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "zlib"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/libavif.rb",
  "ruby_source_checksum": {
    "sha256": "90179d927f6c680843bd6c30c3e5b283e502bf620f1cb68bb9d4f4278bc1bb8c"
  },
  "date_added": "2021-09-21T05:52:14+00:00",
  "readme": "# libavif [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/github/louquillio/libavif?branch=master&svg=true)](https://ci.appveyor.com/project/louquillio/libavif) [![Travis Build Status](https://travis-ci.com/AOMediaCodec/libavif.svg?branch=master)](https://travis-ci.com/AOMediaCodec/libavif)\n\nThis library aims to be a friendly, portable C implementation of the AV1 Image\nFile Format, as described here:\n\n<https://aomediacodec.github.io/av1-avif/>\n\nIt is a work-in-progress, but can already encode and decode all AOM supported\nYUV formats and bit depths (with alpha).\n\nFor now, it is recommended that you check out/use\n[tagged releases](https://github.com/AOMediaCodec/libavif/releases) instead of\njust using the master branch. I will regularly create new versions as bugfixes\nand features are added.\n\n## Usage\n\nPlease see the examples in the \"examples\" directory. If you're already building\n`libavif`, enable the CMake option `AVIF_BUILD_EXAMPLES` in order to build and\nrun the examples too.\n\n## Build Notes\n\nBuilding libavif requires [CMake](https://cmake.org/).\n\nNo AV1 codecs are enabled by default. Enable them by enabling any of the\nfollowing CMake options (e.g. `-DAVIF_CODEC_AOM=ON`):\n\n* `AVIF_CODEC_AOM` for [libaom](https://aomedia.googlesource.com/aom/) (encoder\n  and decoder)\n* `AVIF_CODEC_DAV1D` for [dav1d](https://code.videolan.org/videolan/dav1d)\n  (decoder)\n* `AVIF_CODEC_LIBGAV1` for\n  [libgav1](https://chromium.googlesource.com/codecs/libgav1/) (decoder)\n* `AVIF_CODEC_RAV1E` for [rav1e](https://github.com/xiph/rav1e) (encoder)\n* `AVIF_CODEC_SVT` for [SVT-AV1](https://gitlab.com/AOMediaCodec/SVT-AV1)\n  (encoder)\n\nThese libraries (in their C API form) must be externally available\n(discoverable via CMake's `FIND_LIBRARY`) to use them, or if libavif is\na child CMake project, the appropriate CMake target must already exist\nby the time libavif's CMake scripts are executed.\n\n### Local / Static Builds\n\nThe `ext/` subdirectory contains a handful of basic scripts which each pull\ndown a known-good copy of an AV1 codec and make a local static library build.\nMost scripts require CMake, Ninja and NASM. dav1d uses Meson instead of CMake,\nand rav1e uses cargo (Rust). Check each library's documentation for an exact\nlist of requirements.\n\nIf you want to statically link any codec into your local (static) build of\nlibavif, building using one of these scripts and then enabling the associated\n`AVIF_LOCAL_*` is a convenient method, but you must make sure to disable\n`BUILD_SHARED_LIBS` in CMake to instruct it to make a static libavif library.\n\nIf you want to build/install shared libraries for AV1 codecs, you can still\npeek inside of each script to see where the current known-good SHA is for each\ncodec.\n\n### Tests\n\nA few tests written in C can be built by enabling the `AVIF_BUILD_TESTS` CMake\noption.\n\nThe remaining tests can be built by enabling the `AVIF_BUILD_TESTS` and\n`AVIF_ENABLE_GTEST` CMake options. They require GoogleTest to be built locally\nwith ext/googletest.cmd or installed on the system.\n\n## Prebuilt Library (Windows)\n\nIf you're building on Windows with Visual Studio 2022 and want to try out\nlibavif without going through the build process, static library builds for both\nDebug and Release are available on\n[AppVeyor](https://ci.appveyor.com/project/louquillio/libavif).\n\n## Development Notes\n\nlibavif is written in C99.\n\n### Formatting\n\nUse [clang-format](https://clang.llvm.org/docs/ClangFormat.html) to format the C\nsources from the top-level folder:\n\n```sh\nclang-format -style=file -i \\\n  apps/*.c apps/shared/avifexif.* apps/shared/avifjpeg.* \\\n  apps/shared/avifpng.* apps/shared/avifutil.* apps/shared/y4m.* \\\n  examples/*.c include/avif/*.h src/*.c tests/*.c \\\n  tests/gtest/*.h tests/gtest/*.cc tests/oss-fuzz/*.cc\n```\n\nUse [cmake-format](https://github.com/cheshirekow/cmake_format) to format the\nCMakeLists.txt files from the top-level folder:\n\n```sh\ncmake-format -i \\\n  CMakeLists.txt \\\n  tests/CMakeLists.txt \\\n  cmake/Modules/Find*.cmake \\\n  contrib/CMakeLists.txt \\\n  contrib/gdk-pixbuf/CMakeLists.txt \\\n  android_jni/avifandroidjni/src/main/jni/CMakeLists.txt\n```\n\n---\n\n## License\n\nReleased under the BSD License.\n\n```markdown\nCopyright 2019 Joe Drago. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation\nand/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n```"
}
