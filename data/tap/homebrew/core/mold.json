{
  "name": "mold",
  "full_name": "mold",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Modern Linker",
  "license": "MIT",
  "homepage": "https://github.com/rui314/mold",
  "versions": {
    "stable": "2.0.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/rui314/mold/archive/refs/tags/v2.0.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "2ae8a22db09cbff626df74c945079fa29c1e5f60bbe02502dcf69191cf43527b"
    },
    "head": {
      "url": "https://github.com/rui314/mold.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mold/blobs/sha256:8b5d5c32ac041c6d535d803477ae5859794808333d2147b0017126c04b41f5e7",
          "sha256": "8b5d5c32ac041c6d535d803477ae5859794808333d2147b0017126c04b41f5e7"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mold/blobs/sha256:f7159047337e6a1152241321ea9b7490597a852fced4200dac71ef30e48e0ff9",
          "sha256": "f7159047337e6a1152241321ea9b7490597a852fced4200dac71ef30e48e0ff9"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mold/blobs/sha256:ef08b475f6507cd6cda8c0795a46271d7e71c24c4ce883f02a5505cde915a61e",
          "sha256": "ef08b475f6507cd6cda8c0795a46271d7e71c24c4ce883f02a5505cde915a61e"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mold/blobs/sha256:a32a6251a8f319d2c35f7b5ce784d9a5375af24646c60e8d6d7c5b8016ce805e",
          "sha256": "a32a6251a8f319d2c35f7b5ce784d9a5375af24646c60e8d6d7c5b8016ce805e"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mold/blobs/sha256:3e08b8b4fe6c16538fa0cb083d722f2c89b321748407db5a55d778f902ab3b68",
          "sha256": "3e08b8b4fe6c16538fa0cb083d722f2c89b321748407db5a55d778f902ab3b68"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mold/blobs/sha256:dd02ea90a0432a4ecb1762b63cf8ad094a0534898c2d74c886c17fe1419c0bcb",
          "sha256": "dd02ea90a0432a4ecb1762b63cf8ad094a0534898c2d74c886c17fe1419c0bcb"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mold/blobs/sha256:520d831c82593d5e8359e75ffb7d3043f3d58ffcc903ea711e1ab62ad59ee0b5",
          "sha256": "520d831c82593d5e8359e75ffb7d3043f3d58ffcc903ea711e1ab62ad59ee0b5"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [
    "tbb",
    "zstd",
    "mimalloc",
    "openssl@3"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "zlib"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": "Support for Mach-O targets has been removed.\nSee https://github.com/bluewhalesystems/sold for macOS/iOS support.\n",
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/mold.rb",
  "ruby_source_checksum": {
    "sha256": "f0654567fbdc2a1b7a8783bf5d5cf86fe44bd408431c301b34f0b0a8f3259ca7"
  },
  "date_added": "2021-12-30T08:45:05+00:00",
  "readme": "# mold: A Modern Linker\n\n<i>This repository contains a free version of the mold linker.\nIf you are looking for a commercial version that supports macOS\nplease visit the\n[repository of the sold linker](https://github.com/bluewhalesystems/sold).</i>\n\nmold is a faster drop-in replacement for existing Unix linkers. It is several\ntimes quicker than the LLVM lld linker, the second-fastest open-source linker,\nwhich I initially developed a few years ago. mold aims to enhance developer\nproductivity by minimizing build time, particularly in rapid\ndebug-edit-rebuild cycles.\n\nHere is a performance comparison of GNU gold, LLVM lld, and mold when linking\nfinal debuginfo-enabled executables for major large programs on a simulated\n8-core, 16-thread machine.\n\n![Link speed comparison](docs/comparison.png)\n\n| Program (linker output size)  | GNU gold | LLVM lld | mold\n|-------------------------------|----------|----------|--------\n| Chrome 96 (1.89 GiB)          | 53.86s   | 11.74s   | 2.21s\n| Clang 13 (3.18 GiB)           | 64.12s   | 5.82s    | 2.90s\n| Firefox 89 libxul (1.64 GiB)  | 32.95s   | 6.80s    | 1.42s\n\nmold is so fast that it is only 2x _slower_ than the `cp` command on the same\nmachine. If you find that mold is not faster than other linkers, please feel\nfree to [file a bug report](https://github.com/rui314/mold/issues).\n\nmold supports x86-64, i386, ARM64, ARM32, 64-bit/32-bit little/big-endian\nRISC-V, 32-bit PowerPC, 64-bit big-endian PowerPC ELFv1, 64-bit little-endian\nPowerPC ELFv2, s390x, 64-bit/32-bit LoongArch, SPARC64, m68k, SH-4, and DEC\nAlpha.\n\nmold/macOS is commercial software. For mold/macOS, please visit\nhttps://github.com/bluewhalesystems/sold.\n\n## Why does linking speed matter?\n\nIf you are using a compiled language such as C, C++, or Rust, a build consists\nof two phases. In the first phase, a compiler compiles source files into\nobject files (`.o` files). In the second phase, a linker takes all object\nfiles and combines them into a single executable or shared library file.\n\nThe second phase can be time-consuming if your build output is large. mold can\nspeed up this process, saving you time and preventing distractions while\nwaiting for a lengthy build to finish. The difference is most noticeable\nduring rapid debug-edit-rebuild cycles.\n\n## Installation\n\nBinary packages for the following systems are currently available:\n\n[![Packaging status](https://repology.org/badge/vertical-allrepos/mold.svg)](https://repology.org/project/mold/versions)\n\n## How to Build\n\nmold is written in C++20, so if you build mold yourself, you will need a\nrecent version of a C++ compiler and a C++ standard library. We recommend GCC\n10.2 or Clang 12.0.0 (or later) and libstdc++ 10 or libc++ 7 (or later).\n\n### Install Dependencies\n\nTo install build dependencies, run `./install-build-deps.sh` in this\ndirectory. It will detect your Linux distribution and attempt to install the\nnecessary packages. You may need to run it as root.\n\n### Compile mold\n\n```shell\ngit clone https://github.com/rui314/mold.git\nmkdir mold/build\ncd mold/build\ngit checkout v2.1.0\n../install-build-deps.sh\ncmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=c++ ..\ncmake --build . -j $(nproc)\nsudo cmake --install .\n```\n\nYou might need to pass a C++20 compiler command name to `cmake`. In the\nexample above, `c++` is passed. If that doesn't work for you, try a specific\nversion of a compiler, such as `g++-10` or `clang++-12`.\n\nBy default, `mold` is installed to `/usr/local/bin`. You can change the\ninstallation location by passing `-DCMAKE_INSTALL_PREFIX=<directory>`.\nFor other cmake options, see the comments in `CMakeLists.txt`.\n\nIf you are not using a recent enough Linux distribution, or if `cmake` does\nnot work for you for any reason, you can use Docker to build mold in a Docker\nenvironment. To do so, run `./dist.sh` in this directory instead of using\n`cmake`. The shell script will pull a Docker image, build mold and auxiliary\nfiles inside it, and package them into a single tar file named\n`mold-$version-$arch-linux.tar.gz`. You can extract the tar file anywhere and\nuse the mold executable within it.\n\n## How to use\n\n<details><summary>A classic way to use mold</summary>\n\nOn Unix, the linker command (usually `/usr/bin/ld`) is indirectly invoked by\nthe compiler driver (typically `cc`, `gcc`, or `clang`), which is in turn\nindirectly invoked by `make` or another build system command.\n\nIf you can specify an additional command line option for your compiler driver\nby modifying the build system's config files, add one of the following flags\nto use mold instead of `/usr/bin/ld`:\n\n- For Clang: pass `-fuse-ld=mold`\n\n- For GCC 12.1.0 or later: pass `-fuse-ld=mold`\n\n- For GCC before 12.1.0: the `-fuse-ld` option does not accept `mold` as a\n  valid argument, so you need to use the `-B` option instead. The `-B` option\n  tells GCC where to look for external commands like `ld`.\n\n  If you have installed mold with `make install`, there should be a directory\n  named `/usr/libexec/mold` (or `/usr/local/libexec/mold`, depending on your\n  `$PREFIX`), and the `ld` command should be there. The `ld` is actually a\n  symlink to `mold`. So, all you need is to pass `-B/usr/libexec/mold` (or\n  `-B/usr/local/libexec/mold`) to GCC.\n\nIf you haven't installed `ld.mold` to any `$PATH`, you can still pass\n`-fuse-ld=/absolute/path/to/mold` to clang to use mold. However, GCC does not\naccept an absolute path as an argument for `-fuse-ld`.\n\n</details>\n\n<details><summary>If you are using Rust</summary>\n\nCreate `.cargo/config.toml` in your project directory with the following:\n\n```toml\n[target.x86_64-unknown-linux-gnu]\nlinker = \"clang\"\nrustflags = [\"-C\", \"link-arg=-fuse-ld=/path/to/mold\"]\n```\n\nwhere `/path/to/mold` is an absolute path to the mold executable. In the\nexample above, we use `clang` as a linker driver since it always accepts the\n`-fuse-ld` option. If your GCC is recent enough to recognize the option, you\nmay be able to remove the `linker = \"clang\"` line.\n\n```toml\n[target.x86_64-unknown-linux-gnu]\nrustflags = [\"-C\", \"link-arg=-fuse-ld=/path/to/mold\"]\n```\n\nIf you want to use mold for all projects, add the above snippet to\n`~/.cargo/config.toml`.\n\n</details>\n\n<details><summary>If you are using Nim</summary>\n\nCreate `config.nims` in your project directory with the following:\n\n```nim\nwhen findExe(\"mold\").len > 0 and defined(linux):\n  switch(\"passL\", \"-fuse-ld=mold\")\n```\n\nwhere `mold` must be included in the `PATH` environment variable. In this\nexample, `gcc` is used as the linker driver. Use the `-fuse-ld` option if your\nGCC is recent enough to recognize this option.\n\nIf you want to use mold for all projects, add the above snippet to\n`~/.config/config.nims`.\n\n</details>\n\n<details><summary>mold -run</summary>\n\nIt is sometimes very hard to pass an appropriate command line option to `cc`\nto specify an alternative linker. To address this situation, mold has a\nfeature to intercept all invocations of `ld`, `ld.lld`, or `ld.gold` and\nredirect them to itself. To use this feature, run `make` (or another build\ncommand) as a subcommand of mold as follows:\n\n```shell\nmold -run make <make-options-if-any>\n```\n\nInternally, mold invokes the given command with the `LD_PRELOAD` environment\nvariable set to its companion shared object file. The shared object file\nintercepts all function calls to `exec(3)`-family functions to replace\n`argv[0]` with `mold` if it is `ld`, `ld.gold`, or `ld.lld`.\n\n</details>\n\n<details><summary>GitHub Actions</summary>\n\nYou can use our [setup-mold](https://github.com/rui314/setup-mold) GitHub\nAction to speed up GitHub-hosted continuous builds. Although GitHub Actions\nrun on a two-core machine, mold is still significantly faster than the default\nGNU linker, especially when linking large programs.\n\n</details>\n\n<details><summary>Verify that you are using mold</summary>\n\nmold leaves its identification string in the `.comment` section of an output\nfile. You can print it out to verify that you are actually using mold.\n\n```shell\n$ readelf -p .comment <executable-file>\n\nString dump of section '.comment':\n  [     0]  GCC: (Ubuntu 10.2.0-5ubuntu1~20.04) 10.2.0\n  [    2b]  mold 9a1679b47d9b22012ec7dfbda97c8983956716f7\n```\n\nIf `mold` is present in the `.comment` section, the file was created by mold.\n\n</details>\n\n<details><summary>Online manual</summary>\n\nSince mold is a drop-in replacement, you should be able to use it without\nreading its manual. However, if you need it, [mold's man page](docs/mold.md)\nis available. You can read the same manual by running `man mold`.\n\n</details>\n\n## Why is mold so fast?\n\nOne reason is that it utilizes faster algorithms and more efficient data\nstructures compared to other linkers. Another reason is that mold is highly\nparallelized.\n\nHere is a side-by-side comparison of per-core CPU usage for lld (left) and\nmold (right), linking the same program, a Chromium executable.\n\n![CPU usage comparison in htop animation](docs/htop.gif)\n\nAs you can see, mold uses all available cores throughout its execution and\nfinishes quickly. In contrast, lld fails to utilize available cores most of\nthe time. In this demo, the maximum parallelism is artificially capped at 16,\nso that the bars fit in the GIF.\n\nFor details, please see the [design notes](docs/design.md).\n\n## Sponsors\n\nWe accept donations via [GitHub Sponsors](https://github.com/sponsors/rui314)\nand [OpenCollective](https://opencollective.com/mold-linker). We thank\neveryone who sponsors our project. In particular, we'd like to acknowledge the\nfollowing people and organizations who have sponsored $128/month or more:\n\n### Corporate sponsors\n\n<a href=\"https://mercury.com\"><img src=\"docs/mercury-logo.png\" align=center height=120 width=400 alt=Mercury></a>\n\n<a href=\"https://cybozu-global.com\"><img src=\"docs/cyboze-logo.png\" align=center height=120 width=133 alt=Cybozu></a>\n\n<a href=\"https://www.emergetools.com\"><img src=\"docs/emerge-tools-logo.png\" align=center height=120 width=240 alt=\"Emerge Tools\"></a><br>\n\n- [Uber](https://uber.com)\n- [G-Research](https://www.gresearch.co.uk)\n- [Signal Slot Inc.](https://github.com/signal-slot)\n\n### Individual sponsors\n\n- [300baud](https://github.com/300baud)\n- [Johan Andersson](https://github.com/repi)\n- [Wei Wu](https://github.com/lazyparser)\n- [kyle-elliott](https://github.com/kyle-elliott)"
}
