{
  "name": "leetup",
  "full_name": "leetup",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Command-line tool to solve Leetcode problems",
  "license": "MIT",
  "homepage": "https://github.com/dragfire/leetup",
  "versions": {
    "stable": "1.2.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/dragfire/leetup/archive/v1.2.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "d4c424d994531ed034c264611774ae258f499ee9819061c49ece1321bb96434d"
    },
    "head": {
      "url": "https://github.com/dragfire/leetup.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/leetup/blobs/sha256:4cb6b79c2c9a64149f91a259d62c7e327f30c523385db8c8d7dbc572cdf24332",
          "sha256": "4cb6b79c2c9a64149f91a259d62c7e327f30c523385db8c8d7dbc572cdf24332"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/leetup/blobs/sha256:723100f866721b6c8fb7417084e2496e1d68f3fc09ad2b26382781efc11fb82b",
          "sha256": "723100f866721b6c8fb7417084e2496e1d68f3fc09ad2b26382781efc11fb82b"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/leetup/blobs/sha256:9690647835bfade04169b89f477dc310a872487cd32836706f6bc37d83788a47",
          "sha256": "9690647835bfade04169b89f477dc310a872487cd32836706f6bc37d83788a47"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/leetup/blobs/sha256:f393756f6886ec72181eadfb0f546e520d613dc897a658d3c50b9c88614c4c8d",
          "sha256": "f393756f6886ec72181eadfb0f546e520d613dc897a658d3c50b9c88614c4c8d"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/leetup/blobs/sha256:931ee49f796084d159b3e92ac3c1a2bc9b38bc1fce76fd99e4c77c1c7a8dc5f1",
          "sha256": "931ee49f796084d159b3e92ac3c1a2bc9b38bc1fce76fd99e4c77c1c7a8dc5f1"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/leetup/blobs/sha256:1c0137b2499d6c3c13af9bfd17aa1c77d7640244b447632d1072d937bd3ae2bb",
          "sha256": "1c0137b2499d6c3c13af9bfd17aa1c77d7640244b447632d1072d937bd3ae2bb"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/leetup/blobs/sha256:a88fa3418b7ded7a3f3b3e23cef5265e75d0b1e94baab86d2796ada55a3656bd",
          "sha256": "a88fa3418b7ded7a3f3b3e23cef5265e75d0b1e94baab86d2796ada55a3656bd"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/leetup.rb",
  "ruby_source_checksum": {
    "sha256": "ff44effacda8102e67431015e396a174e42b26643d02175ac18d0836a5fca1e4"
  },
  "date_added": "2023-02-22T04:39:45+00:00",
  "readme": "> If you use neovim, try this Neovim plugin [leetup.nvim](https://github.com/dragfire/leetup.nvim)\n\n<h1 align=\"center\">\n\n![Rust](https://github.com/dragfire/leetup/workflows/Rust/badge.svg) [![crates](https://img.shields.io/crates/v/leetup.svg)](https://crates.io/crates/leetup) ![Downloads](https://img.shields.io/crates/d/leetup)\n\n</h1>\n\n<h4 align=\"center\">Solve Leetcode problems</h4>\n\n![](assets/leetup.gif)\n\n## Install\n- MacOS:\n```sh\nbrew install leetup\n```\n- Linux:  \nDownload from [releases](https://github.com/dragfire/leetup/releases). Extract the zipped file and set the PATH.\n- Cargo:\n```sh\ncargo install leetup\n```\n- Windows:  \nDownload from [releases](https://github.com/dragfire/leetup/releases). Extract the zipped x86_64 windows target file.\n> Note: You will need to add `leetup.exe` to PATH to access from Command Prompt.\n\n## Quick Start:\n- Login using Cookie: `leetup user -c`\n  - You need to login on leetcode.com first.\n  - Copy `csrftoken` and `LEETCODE_SESSION` from cookie storage in the browser.\n- Pick a problem: `leetup pick -l python 1`\n- Test a problem: `leetup test two-sum.py -t \"[1,2]\\n3\"`\n- Submit a problem: `leetup submit two-sum.py`\n- List/Show problems: `leetup list`\n    - Search by keyword: `leetup list <keyword>`\n    - Query easy: `leetup list -q e`\n    - Order by Id, Title, Difficulty: `leetup list -qE -oIdT`  \n- [More Commands](docs/usage.md)\n\n## Inject code fragments:\nYou can inject pieces of code that you frequently use in certain positions of the generated code file. Example: Standard library imports for each language can be put into a config. `Leetup` will pick it up and insert into the generated file.  \n\n### Config:\nCreate `~/.leetup/config.json` and customize according to your preference:\n```json\n{\n    \"inject_code\": {\n        \"rust\": {\n            \"before_code\": [\"use std::rc::Rc;\", \"use std::collections::{HashMap, VecDeque};\", \"use std::cell::RefCell;\"],\n            \"before_code_exclude\": [\"// Test comment\", \"// Test code\"],\n            \"after_code\": \"\\nstruct Solution; \\n\\nfn main() {\\n    let solution = Solution::$func();\\n\\n}\\n\",\n            \"before_function_definition\": null\n        },\n        \"java\": {\n            \"before_code\": \"import java.util.*;\",\n            \"before_code_exclude\": [\"// Test comment\", \"// Test code\"],\n            \"after_code\": null,\n            \"before_function_definition\": null\n        },\n        \"python3\": {\n            \"before_code\": \"import math\",\n            \"before_code_exclude\": [\"# Test comment\", \"# Test code\"],\n            \"after_code\": [\"if __name__ = \\\"__main__\\\":\", \"    solution = Solution()\"],\n            \"before_function_definition\": null\n        }\n    }\n}\n```\nGenerated code looks something like this in Rust:\n```rust\n// @leetup=custom\n// @leetup=info id=1 lang=rust slug=two-sum\n\n/*\n* [SNIP]\n*/\n// @leetup=custom\n\n// @leetup=inject:before_code_ex\n// Test comment\n// Test code\n// @leetup=inject:before_code_ex\n\n// @leetup=code\n\n// @leetup=inject:before_code\nuse std::cell::RefCell;\nuse std::collections::{HashMap, VecDeque};\nuse std::rc::Rc;\n// @leetup=inject:before_code\n\nimpl Solution {\n    pub fn two_sum(nums: Vec<i32>, target: i32) -> Vec<i32> {}\n}\n// @leetup=code\n\n// @leetup=inject:after_code\n// This is helpful when you want to run this program locally\n// and avoid writing this boilerplate code for each problem.\nstruct Solution;\n\nfn main() {\n    let solution = Solution::two_sum();\n}\n\n// @leetup=inject:after_code\n```\n\nDuring testing and submitting to Leetcode, only the chunk of code between `@leetup=code` will be submitted:\n```rust\n// @leetup=inject:before_code\nuse std::cell::RefCell;\nuse std::collections::{HashMap, VecDeque};\nuse std::rc::Rc;\n// @leetup=inject:before_code\n\nimpl Solution {\n    pub fn two_sum(nums: Vec<i32>, target: i32) -> Vec<i32> {\n    }\n}\n```\nOthers are ignored!\n\n## Hook up script for Pick:\nRun scripts before/after code generation. It's useful when you want more ergonomics to move \naround the generated file e.g. create a directory, move the generated file to the directory, rename, etc.\n`@leetup=working_dir` will be replaced by `working_dir` in config.  \n`@leetup=problem` will be replaced by the current problem tile e.g. `two-sum`.\n```json\n{\n    \"inject_code\": {\n        ...SNIP...\n    },\n    \"pick_hook\": {\n        \"rust\": {\n            \"working_dir\": \"~/lc/rust\",\n            \"script\": {\n                \"pre_generation\": [\"cd @leetup=working_dir; mkdir -p @leetup=problem\"],\n                \"post_generation\": [\"mv @leetup=working_dir/@leetup=problem.rs @leetup=working_dir/@leetup=problem/Solution.rs\"]\n            }\n        },\n        \"java\": {\n            \"working_dir\": \"~/lc/java\",\n            \"script\": {\n                \"pre_generation\": [\"cd @leetup=working_dir\", \"mvn archetype:generate -DartifactId=@leetup=problem  -DgroupId=leetup  -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false\"], \n                \"post_generation\": [\"mv @leetup=working_dir/@leetup=problem.java @leetup=working_dir/@leetup=problem/src/main/java/App.java\"]\n            }\n        }\n    }\n}\n```\n\n### Credit:\nThis project is inspired by: https://github.com/leetcode-tools/leetcode-cli"
}
