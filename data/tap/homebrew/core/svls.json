{
  "name": "svls",
  "full_name": "svls",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "SystemVerilog language server",
  "license": "MIT",
  "homepage": "https://github.com/dalance/svls",
  "versions": {
    "stable": "0.2.9",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/dalance/svls/archive/refs/tags/v0.2.9.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "627887f4b105a024c31cd09c9baee9389e70652e85fa8231e5c52079db8dfeb3"
    },
    "head": {
      "url": "https://github.com/dalance/svls.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/svls/blobs/sha256:b06287783f54ef95e571ffd12a214bd81de29c817255ead7258a5e467807daeb",
          "sha256": "b06287783f54ef95e571ffd12a214bd81de29c817255ead7258a5e467807daeb"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/svls/blobs/sha256:7f78f78fc86bff699caa5832095c15e37b7d8f0b259deac4b86785b86048142c",
          "sha256": "7f78f78fc86bff699caa5832095c15e37b7d8f0b259deac4b86785b86048142c"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/svls/blobs/sha256:0e671644f9f09d8f210f8bc02ccdeb11e26551ed6456a4e0ac91e6c5f951a948",
          "sha256": "0e671644f9f09d8f210f8bc02ccdeb11e26551ed6456a4e0ac91e6c5f951a948"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/svls/blobs/sha256:98f6fe41cc18bb5f1d507780ea69a440d86b5fcb3826b5fe8f854bb4f5e94173",
          "sha256": "98f6fe41cc18bb5f1d507780ea69a440d86b5fcb3826b5fe8f854bb4f5e94173"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/svls/blobs/sha256:b0e1874174a3b202d0f18ea02a1518944335f81717ca744dda7473370d79c40a",
          "sha256": "b0e1874174a3b202d0f18ea02a1518944335f81717ca744dda7473370d79c40a"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/svls/blobs/sha256:4005d141644426bed9ebebba0342fd61aa7a0d1a9c2d7bbe76b29ebfd0313f0f",
          "sha256": "4005d141644426bed9ebebba0342fd61aa7a0d1a9c2d7bbe76b29ebfd0313f0f"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/svls/blobs/sha256:f69b4da91e6b1d0a49751e5426042a184795acb3b54a7d9c560934fabe96f16c",
          "sha256": "f69b4da91e6b1d0a49751e5426042a184795acb3b54a7d9c560934fabe96f16c"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/svls.rb",
  "ruby_source_checksum": {
    "sha256": "ab221db1ceed7bb9afcf08d2dee8553972dd783c5da4befc96695d611cfe463f"
  },
  "date_added": "2023-05-11T16:06:46-04:00",
  "readme": "# svls\n\nSystemVerilog language server\n\n[![Actions Status](https://github.com/dalance/svls/workflows/Regression/badge.svg)](https://github.com/dalance/svls/actions)\n\n[![Crates.io](https://img.shields.io/crates/v/svls.svg)](https://crates.io/crates/svls)\n[![svlint](https://snapcraft.io/svls/badge.svg)](https://snapcraft.io/svls)\n[![AUR version](https://img.shields.io/aur/version/svls?logo=Arch-Linux)](https://aur.archlinux.org/packages/svls/)\n\n![test](https://user-images.githubusercontent.com/4331004/68925756-23478f00-07c7-11ea-84f3-2afd23ed2764.gif)\n\n## Feature\n\n* Linter based on [svlint](https://github.com/dalance/svlint).\n\n## Installation\n\n### Download binary\n\nDownload from [release page](https://github.com/dalance/svls/releases/latest), and extract to the directory in PATH.\n\n### snapcraft\n\nYou can install from [snapcraft](https://snapcraft.io/svls)\n\n```\nsudo snap install svls\n```\n\n### Cargo\n\nYou can install by [cargo](https://crates.io/crates/svls).\n\n```\ncargo install svls\n```\n\n## Configuration\n\n### Language server\n\nsvls uses `.svls.toml` at the root of repository.\nThe example of `.svls.toml` is below:\n\n```toml\n[verilog]\ninclude_paths = [\"src/header\"]\ndefines = [\"DEBUG\", \"VAR=1\"]\nplugins = [\"path/to/libfoo.so\", \"path/to/libbar.so\"]\n\n[option]\nlinter = true\n```\n\n#### `[verilog]` section\n\n`include_paths` is include paths from the root of repository.\n`defines` is define strings.\n`plugins` is paths to svlint plugins from the working directory.\n\n#### `[option]` section\n\n`linter` shows whether linter feature is enabled.\n\n### Linter\n\nLinter uses `.svlint.toml` at the root of repository.\nIf `.svlint.toml` can't be used, all lint rules are enabled.\nPlease see [svlint#configuration](https://github.com/dalance/svlint#configuration) for the detailed information.\n\n## Usage\n\n### Visual Studio Code\n\nPlease install [svls-vscode](https://marketplace.visualstudio.com/items?itemName=dalance.svls-vscode) extension from marketplace.\n\n### Vim/Neovim with [LanguageClient-neovim](https://github.com/autozimu/LanguageClient-neovim)\n\n```viml\nlet g:LanguageClient_serverCommands = {\n    \\ 'systemverilog': ['svls'],\n    \\ }\n```\n\n### Vim/Neovim with [vim-lsp](https://github.com/prabirshrestha/vim-lsp)\n\n```viml\nif executable('svls')\n    au User lsp_setup call lsp#register_server({\n        \\ 'name': 'svls',\n        \\ 'cmd': {server_info->['svls']},\n        \\ 'whitelist': ['systemverilog'],\n        \\ })\nendif\n```\n\n### Vim/Neovim with [coc.nvim](https://github.com/neoclide/coc.nvim)\n\nIn configuration file\n```json\n\"languageserver\": {\n    \"svls\": {\n        \"command\": \"svls\",\n        \"filetypes\": [\"systemverilog\"]\n    }\n}\n```\n\n### Emacs with [lsp-mode](https://github.com/emacs-lsp/lsp-mode)\n\n```emacs-lisp\n(use-package flycheck\n  :ensure t\n  :defer t\n  :init (global-flycheck-mode t))\n\n(use-package company\n  :ensure t\n  :defer t\n  :init (global-company-mode t)\n  :config\n  ;; Company Flx adds fuzzy matching to company, powered by the sophisticated\n  ;; sorting heuristics  in =flx=\n  (use-package company-flx\n    :ensure t\n    :after company\n    :init (company-flx-mode t))\n  ;; Company Quickhelp\n  ;; When idling on a completion candidate the documentation for the\n  ;; candidate will pop up after `company-quickhelp-delay' seconds.\n  (use-package company-quickhelp\n    :after company\n    :ensure t\n    ;; :init (company-quickhelp-mode t)\n    :hook (prog-mode . (lambda ()\n                         (when (window-system)\n                           (company-quickhelp-local-mode))))\n    :config\n    (setq company-quickhelp-delay 0.2\n          company-quickhelp-max-lines nil)))\n\n(use-package lsp-mode\n  :defer t\n  :ensure t\n  :commands lsp\n  :config\n  (setq lsp-log-io nil\n        lsp-auto-configure t\n        lsp-auto-guess-root t\n        lsp-enable-completion-at-point t\n        lsp-enable-xref t\n        lsp-prefer-flymake nil\n        lsp-use-native-json t\n        lsp-enable-indentation t\n        lsp-response-timeout 10\n        lsp-restart 'auto-restart\n        lsp-keep-workspace-alive t\n        lsp-eldoc-render-all nil\n        lsp-enable-snippet nil\n        lsp-enable-folding t)\n   ;;; lsp-ui gives us the blue documentation boxes and the sidebar info\n  (use-package lsp-ui\n    :defer t\n    :ensure t\n    :after lsp\n    :commands lsp-ui-mode\n    :config\n    (setq lsp-ui-sideline-ignore-duplicate t\n          lsp-ui-sideline-delay 0.5\n          lsp-ui-sideline-show-symbol t\n          lsp-ui-sideline-show-hover t\n          lsp-ui-sideline-show-diagnostics t\n          lsp-ui-sideline-show-code-actions t\n          lsp-ui-peek-always-show t\n          lsp-ui-doc-use-childframe t)\n    :bind\n    (:map lsp-ui-mode-map\n          ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)\n          ([remap xref-find-references] . lsp-ui-peek-find-references))\n    :hook\n    ((lsp-mode . lsp-ui-mode)\n     (lsp-after-open . (lambda ()\n                         (lsp-ui-flycheck-enable t)\n                         (lsp-ui-sideline-enable t)\n                         (lsp-ui-imenu-enable t)\n                         (lsp-lens-mode t)\n                         (lsp-ui-peek-enable t)\n                         (lsp-ui-doc-enable t)))))\n  ;;; company lsp\n  ;; install LSP company backend for LSP-driven completion\n  (use-package company-lsp\n    :defer t\n    :ensure t\n    :after company\n    :commands company-lsp\n    :config\n    (setq company-lsp-cache-candidates t\n          company-lsp-enable-recompletion t\n          company-lsp-enable-snippet t\n          company-lsp-async t)\n    ;; avoid, as this changes it globally do it in the major mode instead (push\n    ;; 'company-lsp company-backends) better set it locally\n    :hook (lsp-after-open . (lambda()\n                              (add-to-list (make-local-variable 'company-backends)\n                                           'company-lsp)))))\n\n(use-package verilog-mode\n  :defer t\n  :config\n  (require 'lsp)\n  (lsp-register-client\n   (make-lsp-client :new-connection (lsp-stdio-connection '(\"svls\"))\n   :major-modes '(verilog-mode)\n   :priority -1\n   ))\n  :hook (verilog-mode . (lambda()\n      (lsp)\n      (flycheck-mode t)\n      (add-to-list 'lsp-language-id-configuration '(verilog-mode . \"verilog\")))))\n```"
}
