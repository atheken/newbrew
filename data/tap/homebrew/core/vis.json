{
  "name": "vis",
  "full_name": "vis",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Vim-like text editor",
  "license": "ISC",
  "homepage": "https://github.com/martanne/vis",
  "versions": {
    "stable": "0.8",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/martanne/vis/archive/v0.8.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "61b10d40f15c4db2ce16e9acf291dbb762da4cbccf0cf2a80b28d9ac998a39bd"
    },
    "head": {
      "url": "https://github.com/martanne/vis.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": "/opt/homebrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/vis/blobs/sha256:32908c8b3e0251376b5a5020fde49c276c652a71eeee6a624dea98ab61211260",
          "sha256": "32908c8b3e0251376b5a5020fde49c276c652a71eeee6a624dea98ab61211260"
        },
        "arm64_monterey": {
          "cellar": "/opt/homebrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/vis/blobs/sha256:4175e1489036cb6b42e68c2073e4b5626cfb2ae3fadfba52e2e32d0a7e324dc3",
          "sha256": "4175e1489036cb6b42e68c2073e4b5626cfb2ae3fadfba52e2e32d0a7e324dc3"
        },
        "arm64_big_sur": {
          "cellar": "/opt/homebrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/vis/blobs/sha256:067127470533d46e86b8ef7c6aba0e203061347fa1e6a74933e0fbc833d81ff2",
          "sha256": "067127470533d46e86b8ef7c6aba0e203061347fa1e6a74933e0fbc833d81ff2"
        },
        "ventura": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/vis/blobs/sha256:8311b635e107ec0cb5282cf86920bee36d5cc32219fb9b41a0b77f0980c4b745",
          "sha256": "8311b635e107ec0cb5282cf86920bee36d5cc32219fb9b41a0b77f0980c4b745"
        },
        "monterey": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/vis/blobs/sha256:fc879a20d56fbe7eb9956dda54fd0f603f4d14d4a3f903462946f23fba5766a0",
          "sha256": "fc879a20d56fbe7eb9956dda54fd0f603f4d14d4a3f903462946f23fba5766a0"
        },
        "big_sur": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/vis/blobs/sha256:6d2d2178c60f3d091818d80c9e9c86744e946661f1dede662d3b248c2cb1a858",
          "sha256": "6d2d2178c60f3d091818d80c9e9c86744e946661f1dede662d3b248c2cb1a858"
        },
        "x86_64_linux": {
          "cellar": "/home/linuxbrew/.linuxbrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/vis/blobs/sha256:98848b044f51a151d7ca4cc2ad97b8d1c33a1002c3dd3eb2ce27ef6be0fd263c",
          "sha256": "98848b044f51a151d7ca4cc2ad97b8d1c33a1002c3dd3eb2ce27ef6be0fd263c"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "pkg-config"
  ],
  "dependencies": [
    "libtermkey",
    "lpeg",
    "lua"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    {
      "unzip": "build"
    },
    "ncurses"
  ],
  "uses_from_macos_bounds": [
    {},
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/vis.rb",
  "ruby_source_checksum": {
    "sha256": "5c5e88ecd8a1600e6aff21a4fed417de2e644e3b806d04b24398dc14cc7e6bdb"
  },
  "date_added": "2016-04-07T15:56:22-04:00",
  "readme": "# Vis - Combining Modal Editing with Structural Regular Expressions\n\n[![builds.sr.ht status](https://builds.sr.ht/~martanne/vis/commits.svg)](https://builds.sr.ht/~martanne/vis/commits?)\n[![Coverity Scan Build Status](https://scan.coverity.com/projects/3939/badge.svg)](https://scan.coverity.com/projects/3939)\n[![codecov](https://codecov.io/gh/martanne/vis/branch/master/graph/badge.svg)](https://codecov.io/gh/martanne/vis)\n[![Documentation Status](https://readthedocs.org/projects/vis/badge/?version=master)](http://vis.readthedocs.io/en/master/?badge=master)\n[![#vis-editor on libera](https://img.shields.io/badge/IRC-%23vis--editor-blue.svg)](ircs://irc.libera.chat:6697/vis-editor)\n\nVis aims to be a modern, legacy-free, simple yet efficient editor,\ncombining the strengths of both vi(m) and sam.\n\nIt extends vi's modal editing with built-in support for multiple\ncursors/selections and combines it with [sam's](http://sam.cat-v.org/)\n[structural regular expression](http://doc.cat-v.org/bell_labs/structural_regexps/)\nbased [command language](http://doc.cat-v.org/bell_labs/sam_lang_tutorial/).\n\nA universal editor, it has decent Unicode support and should cope with arbitrary\nfiles, including large, binary or single-line ones.\n\nEfficient syntax highlighting is provided using\n[Parsing Expression Grammars](https://en.wikipedia.org/wiki/Parsing_expression_grammar),\nwhich can be conveniently expressed using [Lua](http://www.lua.org/)\nin the form of [LPeg](http://www.inf.puc-rio.br/~roberto/lpeg/).\n\nThe editor core is written in a reasonable amount of clean (your mileage\nmay vary), modern and legacy-free C code, enabling it to run in\nresource-constrained environments. The implementation should be easy to hack on\nand encourages experimentation. There is also a Lua API for in-process\nextensions.\n\nVis strives to be *simple* and focuses on its core task: efficient text\nmanagement. Clipboard and digraph handling as well as a fuzzy file open\ndialog are all provided by independent utilities. There exist plans to use\na client/server architecture, delegating window management to your windowing\nsystem or favorite terminal multiplexer.\n\nThe intention is *not* to be bug-for-bug compatible with vi(m). Instead,  \nwe aim to provide more powerful editing features based on an elegant design\nand clean implementation.\n\n[![vis demo](https://asciinema.org/a/41361.png)](https://asciinema.org/a/41361)\n\nBuild instructions\n------------------\n\nIn order to build vis you will need a\n[C99](http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf)\ncompiler, a [POSIX.1-2008](http://pubs.opengroup.org/onlinepubs/9699919799/)\ncompatible environment as well as:\n\n * [libtermkey](http://www.leonerd.org.uk/code/libtermkey/)\n * [curses](https://en.wikipedia.org/wiki/Curses_(programming_library)) (recommended)\n * [Lua](http://www.lua.org/) >= 5.2 (optional)\n * [LPeg](http://www.inf.puc-rio.br/~roberto/lpeg/) >= 0.12\n   (optional runtime dependency required for syntax highlighting)\n * [TRE](http://laurikari.net/tre/) (optional for more memory efficient regex search)\n\nAssuming these dependencies are met, execute:\n\n    $ ./configure && make && sudo make install\n\nBy default the `configure` script will try to auto detect support for\nLua using `pkg-config(1)`. See `configure --help` for a list of supported\noptions. You can also manually tweak the generated `config.mk` file.\n\nOr simply use one of the\n[distribution provided packages](https://github.com/martanne/vis/wiki/Distribution-Packages).\n\nDocumentation\n-------------\n\nEnd user documentation can be found in the\n[`vis(1)` manual page](http://martanne.github.io/vis/man/vis.1.html)\nand the [Wiki](https://github.com/martanne/vis/wiki). Read the\n[FAQ](https://github.com/martanne/vis/wiki/FAQ) for common questions.\nLearn about some differences compared to\n[`sam(1)`](https://github.com/martanne/vis/wiki/Differences-from-Sam) and\n[`vim(1)`](https://github.com/martanne/vis/wiki/Differences-from-Vi(m)),\nrespectively.\n\n[C API](https://vis.readthedocs.io/) as well as [Lua API](http://martanne.github.io/vis/doc/)\ndocumentation is also available.\n\nNon Goals\n---------\n\n  Some features which will *not* be implemented:\n\n   - tabs / multiple workspaces / advanced window management\n   - file and directory browser\n   - support for file archives (tar, zip, ...)\n   - support for network protocols (ftp, http, ssh ...)\n   - encryption\n   - compression\n   - GUIs (neither x11, motif, gtk, win32 ...) although the codebase\n     should make it easy to add them\n   - VimL\n   - right-to-left text\n   - ex mode, we have more elegant structural regexp\n   - diff mode\n   - vimgrep\n   - internal spell checker\n   - lots of compile time configurable features / `#ifdef` mess\n\nHow to help?\n------------\n\nThere are plenty of ways to contribute, below are a few ideas:\n\n * Artwork\n    - [Color Themes](https://github.com/martanne/vis/wiki/Themes)\n    - [Name](https://github.com/martanne/vis/issues/338) +\n      [Logo](https://github.com/martanne/vis/issues/328)\n    - Homepage?\n * Documentation\n    - [Manual Pages](https://github.com/martanne/vis/wiki/Developer-Overview#manual-pages)\n    - Improve `:help` output\n * Lua\n    - [API Documentation](https://github.com/martanne/vis/wiki/Developer-Overview#api-documentation)\n      and Examples\n    - [Unit Tests](https://github.com/martanne/vis-test/tree/master/lua)\n    - [Plugin Development](https://github.com/martanne/vis/wiki/Plugins)\n    - [API Design](https://github.com/martanne/vis/issues/292)\n * [Testing Infrastructure](https://github.com/martanne/vis-test)\n * [Distribution Packaging](https://github.com/martanne/vis/wiki/Distribution-Packages)\n * [Core Editor Design](https://github.com/martanne/vis/issues?q=is%3Aopen+is%3Aissue+label%3Adesign)\n\nCheckout the [Developer Overview](https://github.com/martanne/vis/wiki/Developer-Overview)\nto get started and do not hesitate to ask question in the `#vis-editor`\nIRC channel on libera ([join via your browser](https://web.libera.chat/#vis-editor))."
}
