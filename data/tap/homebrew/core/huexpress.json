{
  "name": "huexpress",
  "full_name": "huexpress",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "PC Engine emulator",
  "license": "GPL-2.0",
  "homepage": "https://github.com/kallisti5/huexpress",
  "versions": {
    "stable": "3.0.4",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/kallisti5/huexpress/archive/3.0.4.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "76589f02d1640fc5063d48a47f017077c6b7557431221defe9e38679d86d4db8"
    },
    "head": {
      "url": "https://github.com/kallisti5/huexpress.git",
      "branch": "master"
    }
  },
  "revision": 2,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/huexpress/blobs/sha256:d69fc8ce360f304a6c9e95a8120196d5efaec9f77f02a82b0e5c3e4cab6b84da",
          "sha256": "d69fc8ce360f304a6c9e95a8120196d5efaec9f77f02a82b0e5c3e4cab6b84da"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/huexpress/blobs/sha256:a0919bd5024f7f197c262f0ba1dd5c57871506308bd7a4bfd98b5f18f04dbb50",
          "sha256": "a0919bd5024f7f197c262f0ba1dd5c57871506308bd7a4bfd98b5f18f04dbb50"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/huexpress/blobs/sha256:2709e20246d6ab1a14329ccc842e49eefd9276c6b1e3ef90bcadc85c2213a394",
          "sha256": "2709e20246d6ab1a14329ccc842e49eefd9276c6b1e3ef90bcadc85c2213a394"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/huexpress/blobs/sha256:3fc6ef796681ae0b49b2f6386add406c8ace5aa450160b2530fe0174205d6b7e",
          "sha256": "3fc6ef796681ae0b49b2f6386add406c8ace5aa450160b2530fe0174205d6b7e"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/huexpress/blobs/sha256:5c02e7de59a65392f1347c65df445e2d447daaac2eb508c920f8ce452628dbd5",
          "sha256": "5c02e7de59a65392f1347c65df445e2d447daaac2eb508c920f8ce452628dbd5"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/huexpress/blobs/sha256:37272d08ed74984450ae2f08e17e9b41fdf32cc487aee1c0ab0832c10177474a",
          "sha256": "37272d08ed74984450ae2f08e17e9b41fdf32cc487aee1c0ab0832c10177474a"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/huexpress/blobs/sha256:9e714566437e60a45c978daeade8dbb3515ee37c5d2b6de1a203443f243917d8",
          "sha256": "9e714566437e60a45c978daeade8dbb3515ee37c5d2b6de1a203443f243917d8"
        },
        "x86_64_linux": {
          "cellar": "/home/linuxbrew/.linuxbrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/huexpress/blobs/sha256:8f5ca6b63b8fc347e8221765dc09ac1000f4b6a62e53424fb578bb14103c8952",
          "sha256": "8f5ca6b63b8fc347e8221765dc09ac1000f4b6a62e53424fb578bb14103c8952"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "pkg-config",
    "scons"
  ],
  "dependencies": [
    "libvorbis",
    "libzip",
    "sdl2",
    "sdl2_mixer",
    "mesa",
    "mesa-glu"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/huexpress.rb",
  "ruby_source_checksum": {
    "sha256": "86b394c0f6b4390472ed2a28fc09315c90f909e9a3dddaa5c44b9bfa177c4246"
  },
  "date_added": "2017-02-08T10:08:53+00:00",
  "readme": "\n         _______         _______\n        |   |   |.--.--.|    ___|.--.--.-----.----.-----.-----.-----.\n        |       ||  |  ||    ___||_   _|  _  |   _|  -__|__ --|__ --|\n        |___|___||_____||_______||__.__|   __|__| |_____|_____|_____|\n                                       |__|\n\n                CoreGrafx / PC Engine / TurboGrafx-16 Emulator\n                               Version 3.0.4\n                            November 25th, 2017\n\n--[ DISCLAIMER ]-------------------------------------------------------------\n\n    I can't be held responsible for any misuse of this software, it comes\n    with absolutely no warranty. Use it at your own risk.\n\n    The developer of HuExpress does *NOT* condone piracy. Please only\n    use HuExpress to play PC Engine games and backups you legally own.\n\n--[ INTRODUCTION ]-----------------------------------------------------------\n\n    This is the first release of HuExpress, a multi-platform PC Engine\n    emulator.\n\n    Bugs are expected as this is all new code. Please report any\n    bugs to the issue tracker at https://github.com/kallisti5/huexpress\n\n    If you are looking for the original Hu-Go! PC Engine emulator\n    see zeograd.com\n\n--[ FORK ]-------------------------------------------------------------------\n\n    HuExpress is a fork of the great Hu-Go! machine emulator by\n    zeograd which is based on a PC Engine emulator produced by\n    \"Bero\" (http://www.geocities.co.jp/Playtown/2004/)\n \n    Plus improvements at Hmmx's Homepage\n    (formerly, http://www.geocities.co.jp/SiliconValley/7052/).\n\n--[ HOW TO INSTALL IT ? ]----------------------------------------------------\n\n    Check the INSTALL file for further instructions on compiling the source\n    distribution under Haiku.\n\t\n--[ HOW TO USE IT ? ]--------------------------------------------------------\n\n    You can use hugo by just typing\n\thuexpress [ROM] [BACKUPMEM] [OPTION]\n    \n    where ROM is the name of the ROM, ISO, ISQ, ZIP, or HCD.\n\n    Check out the HCD section later for details.\n    If ROM has no extension, HuExpress! will look for ROM.PCE then ROM.ZIP.\n\n    ISO games must be specified with ISO extension to be recognized.\n\n    For OPTIONS, see below...\n\n    BACKUPMEM is the name of the file containing the backup RAM.\n    These two last are optionals. The order shouldn't import but the ROM name\n    must be before the name of backup RAM.\n\n--[ HOW TO CONFIGURE HuExpress FOR PLAYING CDS ? ]------------------------------\n\n    Under linux, you first have to configure the cd path\n    (ie /dev/cdrom or such) either on the command line (-i <path>),\n    or in the .ini file (variable cd_path).\n\n    FreeBSD doesn't have yet the CD support.\n    For any platform, choose the system card rom location. It's the\n    rom which actually boots the CD, and it's called syscard.pce\n    or such. As for all commercial roms, you can only use it if you've\n    bought a system card hucard or an hardware containing it\n    (Any duo for instance).\n\n--[ SYSTEM REQUIREMENTS ]----------------------------------------------------\n\n    -- SDL 2.0 or later\n\n    -- SDL Mixer 2.0 or later\n\n    -- libzip\n\n    -- A graphics card that supports OpenGL (or software OpenGL)\n\n    -- A sound card (only if you want to hear sound, of course).\n\n    -- A supported platform\n\n       -- Linux\n       -- FreeBSD (untested, patches welcome)\n       -- Haiku\n       -- Mac OS X (homebrew)\n\n--[ KNOWN ISSUES / BUGS ] ---------------------------------------------------\n\n    -- Fullscreen mode is currently broken (doesn't scale)\n\n    -- Netplay is not non-tested / functional\n\n    -- Game state save is known to crash\n\n--[ KEYBOARD CONTROLS ]------------------------------------------------------\n\n    Cursor keys          Direction\n    z                    Button 1\n    x                    Button 2\n    Tab                  Select key\n    Enter                Start key\n    a                    Toggle Autofire 1\n    s                    Toggle autofire 2\n\n    (These are default keys for all players)\n    You can edit yours using the huexpress.ini file\n\n    Special keys:\n\n    Can't be changed (you can always assign these keys to \"normal\" ones,\n    it will mostly have the \"special\" effects, eventually followed by the\n    \"normal\" ones)\n    \n\n    tilde key (under ESC key)   Display the number of frame elapsed\n             since the beginning of the track (to create subtitles)\n    1 on alpha pad   Toggle the sprites display\n    2 on alpha pad   Toggle the background display\n\n-- alpha keys --\n   3,4,5,6,7 and 8 on alpha pad\n                     May unblock some isos\n-- alpha keys --\n\n    - on alpha pad   Lower the sound level\n    = on alpha pad   Raise the sound level\n    9 on alpha pad   Lower the sound quality\n    0 on alpha pad   Raise the sound quality\n    F1               Enter a value to search for (See details later)\n    F2               Set a value in RAM (See details later)\n    F3               Freeze a value in RAM (See details later)\n    F4               Test purpose key, now display the draft gui\n    F5               Save ScreenShot (named pict????.pcx) (disabled right now)\n\tF9\t\t\t\t Toggle full screen mode\n    ESC, F12         Exit (not really useful)\n    F6               Save game progression (named ROM.SAV where ROM is the\n                     ROM name, Also work for iso file in file names ISO.SVI,\n                     For games on CD, only 1 saved game is allowed, whatever the CD)\n    F7               Load game progression\n    'Num Lock'       Toggle sound dumping mode\n\n    Keys Used on Numeric Keypad\n    /                Toggle image dumping mode (in VIDEO/*.PCX)\n    +                Skip one more frame per sec.\n    -                Skip one less frame per sec.\n\n--[ OPTIONS ]----------------------------------------------------------------\n\n    There are two kinds of options. Command line or huexpress.cfg options. The\n    emu first reads in the INI file then the command line, so you can\n    over-ride general options.\n\n    ** Command line options\n    Can be either -FV or -F V where F is the flag and V the value\n\n   -- c : CD emulation (This way of emulating ISO is no more compulsory\n\t\tbut still works, is compulsory for using CDs)\n        0 -> Only Hu-card emulation (Default)\n        1 -> CD emulation on\n        2 -> ISO file emulation on\n        3 -> ISQ file emulation on\n        4 -> BIN file emulation on (it's a raw full dump, only 1 track supported\n             right now, and only if <280 Mb)\n\t\t  \n\t-- f : Fullscreen model\n\t\t0 -> Start in window mode\n\t\t1 -> Start in fullscreen mode\n\n    -- m : No bios mode\n        0 -> Use bios as much as possible (Default, faster but sometime less\n                                           accurate)\n        1 -> Use no bios at all as possible (slower but make more game works)\n\n    -- u : US encoded rom\n        0 -> Normal rom (Default)\n        1 -> US encoded rom, with invertion of bits\n        HuExpress should automaticaly recognize such rom but if not (i.e.\n       it works only is -u1 is specified) tell me so that I can add it\n       to the database.\n\t\n\t-- w : Window size multiplier\n\t\t1 -> normal window size (Default)\n\t\t2 -> doubled window size\n\t\t3 -> tripled window size\n\t\t4 -> the meaning of this option is let to the reader's attention\t\t\n\n    ** Initialisation file options\n    This file accepts comments in lines beginning with a #, the form is\n    F=V where F the name of the option and V the value.\n\n    --KEYS : it's a bit long to explain in details but I'll explain the\n    method. Each function is represented by a string (\"UP\",\"DOWN\",\"LEFT\",\n    \"RIGHT\",\"I\",\"II\",\"SELECT\",\"START\",\"AUTOI\",\"AUTOII\") immediately followed\n    by the number of the contoller. The value is then the scancode as you\n    can find it in the SCANCODE.TXT.\n    When mapping a joypad related configuration, you can also use \"PI\",\"PII\",\n   \"PSELECT\", \"PSTART\", \"PAUTOI\", \"PAUTOII\" to map button I, II, Select, Start\n    and autoI, autoII. The given value of the right being the number of the\n    button on your pad, of course.\n    Now, you can create up to 15 different configs by using sections like\n    [config5]. These sections must be at the end of the INI files. They\n    contain key definitions as explained above but also info on controllers\n    e.g. putting input2=key3 will make the 2nd pad of the PC Engine to be\n    controlled by the 3rd keyboard mapping (UP3, LEFT3,...). As valid strings\n    you have 'input1' to 'input5' for the 5 PC Engine Gamepads (only 4\n    emulated so far), and 'key1' to 'key5' for 5 key mappings, 'joy1' to\n    'joy4' for 4 different joypads, 'mouse1' and 'mouse2' for 2 mice (not yet\n    implemented) and 'synaplink' for a direct synaptic link (also not\n    implemented ;)\n\n    E.G. :\n    Setting in the INI file\n\n     config=1\n\n     [config1]\n\n       input1=key1\n\n       UP1=0x16\n       LEFT1=0x23\n       DOWN1=0x24\n       RIGHT1=0x25\n\n       input2=joy1\n\n    This will change direction keys for the first player to 'u','h','j','k'\n    while the second player will play with the first joypad. Note that when\n    you specify a joy input, only the directions and the 2 buttons are\n    remapped so you can still choose keys for select, start, autoI and\n    autoII. As an example, the config1 is just a standard input with 1 player\n    using a joypad so if you want to play with a joypad just uncomment the\n    line with config=1. It's not very clear but the built-in menu allows easier\n\tconfiguration.\n\n    -- rom_dir : Directory of your roms. It's the default directory the\n    fileselector will look in. Use either '/' or '\\'.\n    (If no value given, current path is assumed)\n\n    -- snd_freq : Frequency of the PCM sound output. The higher, the best\n    quality but the slower. Use 11025 on slow machines and 22050 or 44100\n    on fast machines. You can also give intermediate values.\n       22050 Hz is default\n\n    -- buffer_size : Size of the buffer used for PCM sound output. the best\n    I can tell you here is to make tests. All depends of the frequency you use\n    and your machine speed. 256 bytes is the default (Fine for XP1900+) you can\n\talso try 512 or 1024 if you got sound which stops at times.\n\t\n\t-- cd_path : Device name of the cd drive under UN*X systems.\n\t   /dev/cdrom is default\n\t   \n\t-- window_size : Zoom factor when in windowed mode\n\t   1 to 4 are valid zoom factor (1 being the default)\n\t   \n\n--[ HCD ]--------------------------------------------------------------------\n\n    HCD is a definition file included with TurboGrafx and PC Engine CD games.\n\n    The HCD contains information on the game, as well as information on the\n    audio CD tracks included.\n\n    HCDFormat in doc/ documents the current HCD format for HuExpress.\n\n    HuExpress uses a new 1.1 revision format, but should be backwards\n    compatible with the old HuGO 1.0 revision.\n\n--[ CHEATING ]---------------------------------------------------------------\n\n    Cheating is very primitive and there is no visual help so you\n    can't see what you type...\n\n    BUT...\n\n    It works! If you want to cheat with the number of lives in a game,\n    first you run your game, then you type F1, the game stops. This is\n    normal. It's waiting for the value to search. Then you enter the number\n    of lives you actually have (In fact, it only considers the lower byte of\n    the value you entered), then it makes a search and shows you the result.\n    Play around and lose a life, repeat the same as above, pressing F1 and\n    entering the current value. Repeat it again and again until the search\n    only finds one value..\n    Note carefully this value, it's the offset in RAM of a variable that\n    contains the value you've entered. Is it the correct value? Easy, press\n    F2, the game stops then enter the offset noted before and the new value.\n    Normally you should have as many lives as you want.\n    If you got a 'SEARCH FAILED' then ... it failed, see below for help.\n    Using this method, the value is only changed once, but if you press F3\n    then enter the offset and the value, it will be changed to the specified\n    value 60 times per sec., so it looks like it is frozen. Pressing F3 then\n    the address will unfreeze the value.\n    Now, you can research value using a relative method. that's to say that\n    instead of searching exact values, you can simply tell hu-go! to search\n    for variation of the variable. e.g. each time you lose a life, you can\n    make a research on -1, i.e. the variable you're looking for have been\n    decreased by 1. With this method, you don't have to worry about the base\n    value used to represent the variable (see hints concerning this).\n    When you want to make a relative research, you have to use F1 as\n    previously but instead of typing the plain number, you must prefix it\n    with '+' or '-'. For the first research, you don't have to worry about\n    the value you're giving, it's simply used to initialize the temporary\n    file containing all the possible variables with all the current values.\n    Once done, you can press F1 then '+1' or '-3' and such. From a technical\n    point of view, it's possible to mix normal and relative research but if\n    you do absolute research, there's no point on doing relative one.\n\n--[ CHEATING HINTS ]---------------------------------------------------------\n\n    -- Be careful, you may think the cheat didn't work, in fact, some\n    variables aren't updated each frame so try to lose a life or if you\n    modified money try to buy something... then you may see the difference.\n    -- You aren't obliged to search for altered values, you can make a\n    search for 2 lifes then 5 sec. later you search for 2 lifes again,...\n    I suggest you search for the same value twice very quickly. If you look\n    twice for the same value with only a half a sec. interval, you will\n    certainly eliminate a good amount of 'bad' variables.\n    -- Once a search is complete and you no longer get a lot values each\n    time you search, you may stay stuck because two variables have the same\n    value at the same moment (often for core and screen purposes). If that\n    is the case go and check the file named ROM.FP0 (where ROM is the name\n    of the rom), this contains the different possible offsets. It's up to\n    you.\n    -- Sessions of research are kept between two launches of the emulator.\n    -- If you want to start a new session, just make a 'SEARCH FAILED'\n    (Search for 25 then 6 then 79 in a very reduced interval, if you can't\n    get an 'SEARCH FAILED' then you will be the next on my guinea pig list\n    for trying the direct synaptic link ;).\n    -- Sometimes, the value on screen isn't stored like shown, e.g. if you\n    have 5 lives, maybe the variable 'LIFE' is set at 4 or 6, try to search\n    for 'value'+1 or 'value'-1, it may work... (like the number of balls in\n    Devil Cr*sh).\n    The best to avoid this kind of problem is using relative value research.\n    -- The search only works on bytes but a variable may take 2, 3 or more\n    bytes. In this case try modifying the byte just 1 byte above or below\n    the one you found (e.g. if you've found that putting a value at address\n    X would change the money a bit, putting a value at address X+1 will\n    certainly change the money a lot).\n\n--[ DEVELOPERS CORNER ]------------------------------------------------------\n\n    HuExpress exposes a large part of the current game internal variables\n    via shared memory (only linux/freebsd for now, soon windows too).\n    You can use the shared memory of identifier 25679. It contains a structure\n    of type struct_hard_pce as defined in shared_memory.h (you should grab the\n    source archive of course). You can then alter or read all the quite self\n    explanatory variables out there. As for controlling the cpu, you can use\n    the s_external_control_cpu field.\n         -1  => Full speed\n          0  => Emulation paused\n         >0  => Number of opcodes to run before pausing\n\n--[ FREQUENTLY ASKED QUESTIONS ]---------------------------------------------\n\n    -Q Where is the Windows version?\n    -A I honestly lack the time and interest. You *may* be\n       able to compile HuExpress with mingw.  No clue how though.\n\n    -Q Where is the Mac OS X version?\n    -A If an SDL version could be easily created for OS X, patches welcome.\n       No coca or XCode crap will be accepted however.\n\n    -Q Where can I obtain games to play?\n    -A Ebay, Pawn shops, Japan. Anywhere except the author.\n\n    -Q Why would you fork Hu-GO?\n    -A I decided to fork Hu-Go! because the Hu-Go! project seemed to be\n       abandoned (no updates since 2005), in addition to this the BeOS\n       support has been slowly breaking since 2.10.\n\n--[ ORIGINAL HU-GO AUTHORS ]-------------------------------------------------\n\nThe following people helped out with Hu-GO.  I don't want to omit them\nas they helped Zeograd write Hu-GO. (Even though I've rewritten a lot of\ntheir code ^_^)\n\n- David Shadoff (new kernel code, ideas, ...)\n- Nyef (cd emulation, ...)\n- Ixion (linux coding, sdl joypad, cd emulation, sound emulation, ...)\n- Black- (gfx bug fixes, gp32 port, ...)\n- Cleaner (freeBSD port fixes)\n- Laurent Desnogues (cpu coding, ps2 port, ...)\n- Erich Kitzmuller (sound improvement, dma bug fixes)\n- Pit (gfx)\n- David Michel (ideas, ...)\n- Lester Barrow (linux coding, joypad support, ...)\n- Mooz (ideas, ...)\n- Bt Garner (ideas, ...)\n- Littletux (mandrake packages, ...)\n- Zoop & his gf (gfx bug fixes)\n\nTests by :\n- Raph\n- Fagemul\n- NaMco\n- Fixo\n- sALTY\n- Gato\n- Nostromo\n- Cissou\n- Leeloo\n- Sir Jaguar"
}
