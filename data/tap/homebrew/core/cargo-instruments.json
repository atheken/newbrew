{
  "name": "cargo-instruments",
  "full_name": "cargo-instruments",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Easily generate Instruments traces for your rust crate",
  "license": "MIT",
  "homepage": "https://github.com/cmyr/cargo-instruments",
  "versions": {
    "stable": "0.4.8",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/cmyr/cargo-instruments/archive/v0.4.8.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "c5fc2a4133a888633ce132f41c3ec542788de41cd03848ac34e36cfb8bafcce0"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cargo-instruments/blobs/sha256:e53774bdc10813969f128afed67d151e2ea73e2da3642d90fceb5a2ce0ab2fb2",
          "sha256": "e53774bdc10813969f128afed67d151e2ea73e2da3642d90fceb5a2ce0ab2fb2"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cargo-instruments/blobs/sha256:517f55d64777be77eabe09fcc2318486acac7d2d72ea05a251150d9e9508672f",
          "sha256": "517f55d64777be77eabe09fcc2318486acac7d2d72ea05a251150d9e9508672f"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cargo-instruments/blobs/sha256:ea43a6b13ee8bab547c14182fe8022b8f4f2cd9de9d10f68b69067cd57308ffc",
          "sha256": "ea43a6b13ee8bab547c14182fe8022b8f4f2cd9de9d10f68b69067cd57308ffc"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cargo-instruments/blobs/sha256:9a2a75de53ca739155bf9a38d0e7b611544f3c647641fe3569d3194cec9b0639",
          "sha256": "9a2a75de53ca739155bf9a38d0e7b611544f3c647641fe3569d3194cec9b0639"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cargo-instruments/blobs/sha256:739e75a78c51709fb30681eb383c7978bf813732ebac4006a91e79cd87c2bebf",
          "sha256": "739e75a78c51709fb30681eb383c7978bf813732ebac4006a91e79cd87c2bebf"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cargo-instruments/blobs/sha256:34087ee37b15a2d460386633797f6b19562c87beefae8609c5d8ec766b1620bb",
          "sha256": "34087ee37b15a2d460386633797f6b19562c87beefae8609c5d8ec766b1620bb"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cargo-instruments/blobs/sha256:8d957e40b0d946cfa58d041c63536a0fe205a9893b4e2122811dc7ee98596eb3",
          "sha256": "8d957e40b0d946cfa58d041c63536a0fe205a9893b4e2122811dc7ee98596eb3"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [
    "openssl@3"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [
    {
      "name": "macos",
      "cask": null,
      "download": null,
      "version": null,
      "contexts": [],
      "specs": [
        "stable"
      ]
    }
  ],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/cargo-instruments.rb",
  "ruby_source_checksum": {
    "sha256": "f06781bcb4e58bf355a06ee816e5262eedb524ca74353c8bc93ea1f823d65020"
  },
  "date_added": "2020-02-22T11:28:53-05:00",
  "readme": "# cargo-instruments\n\nEasily profile your rust crate with Xcode [Instruments].\n\n`cargo-instruments` is the glue between Cargo and Xcode's bundled profiling\nsuite. It allows you to easily profile any binary in your crate, generating\nfiles that can be viewed in the Instruments app.\n\n![Instruments Time Profiler](https://raw.githubusercontent.com/cmyr/cargo-instruments/screenshots/instruments_time1.png)\n![Instruments System Trace](https://raw.githubusercontent.com/cmyr/cargo-instruments/screenshots/instruments_sys1.png)\n\n## Pre-requisites\n\n### Xcode Instruments\n\nThis crate only works on macOS because it uses [Instruments] for profiling\nand creating the trace file. The benefit is that Instruments provides great\ntemplates and UI to explore the Profiling Trace.\n\nTo install Xcode Instruments, simply install the Command Line Tools:\n\n```sh\n$ xcode-select --install\n```\n\n### Compatibility\n\nThis crate works on macOS 10.13+. In practice, it transparently detects and\nuses the appropriate Xcode Instruments version based on your macOS version:\neither `/usr/bin/instruments` on older macOS, or starting with macOS 10.15, the\nnew `xcrun xctrace`.\n\n## Installation\n\n### brew\n\nThe simplest way to install is via Homebrew:\n\n```sh\n$ brew install cargo-instruments\n```\n\nAlternatively, you can install from source.\n\n### Building from Source\n\nFirst, ensure that you are running macOS, with Cargo, Xcode, and the Xcode\nCommand Line Tools installed.\n\nIf OpenSSL is installed (e.g., via `brew`), then install with\n\n```sh\n$ cargo install cargo-instruments\n```\n\nIf OpenSSL is not installed or if `cargo install` fails with an error message starting with \"Could not find directory of OpenSSL installation, and this `-sys` crate cannot proceed without this knowledge,\" then install with\n\n```sh\n$ cargo install --features vendored-openssl cargo-instruments\n```\n\n#### Building from Source on nix\n\nIf you're using [nix](https://nixos.org/guides/install-nix.html), this command should provide all dependencies and build `cargo-instruments` from source:\n\n```sh\n$ nix-shell --command 'cargo install cargo-instruments' --pure -p \\\n\tdarwin.apple_sdk.frameworks.SystemConfiguration \\\n\tdarwin.apple_sdk.frameworks.CoreServices \\\n\trustc cargo sccache libgit2 pkg-config libiconv \\\n\tllvmPackages_13.libclang openssl\n```\n\n## Usage\n\n### Basic\n\n`cargo-instruments` requires a binary target to run. By default, it will try to\nbuild the current crate's `main.rs`. You can specify an alternative binary by\nusing the `--bin` or `--example` flags, or a benchmark target with the `--bench`\nflag.\n\nAssuming your crate has one binary target named `mybin`, and you want to profile\nusing the `Allocations` Instruments template:\n\n_Generate a new trace file_ (by default saved in `target/instruments`)\n\n```sh\n$ cargo instruments -t Allocations\n```\n\n_Open the trace file in Instruments.app manually_\n\nBy default the trace file will immediatly be opened with `Instruments.app`. If you do not want this behavior use the `--no-open` flag.\n\n```sh\n$ open target/instruments/mybin_Allocations_2021-05-09T12_34_56.trace\n```\n\nIf there are mutliple packages, you can specify the package to profile with\nthe `--package` flag.\n\nFor example, you use Cargo's workspace to manage multiple packages. To profile\nthe bin `bar` of the package `foo`:\n\n```sh\n$ cargo instruments --package foo --template alloc --bin bar\n```\n\nIn many cases, a package only has one binary. In this case `--package` behaves the\nsame as `--bin`.\n\n### Profiling application in release mode\n\nWhen profiling the application in release mode the compiler doesn't provide\ndebugging symbols in the default configuration.\n\nTo let the compiler generate the debugging symbols even in release mode you\ncan append the following section in your `Cargo.toml`.\n\n```toml\n[profile.release]\ndebug = true\n```\n\n### All options\n\nAs usual, thanks to Clap, running `cargo instruments -h` prints the compact help.\n\n```\ncargo-instruments 0.4.8\nProfile a binary with Xcode Instruments.\n\nBy default, cargo-instruments will build your main binary.\n\nUSAGE:\n    cargo instruments [FLAGS] [OPTIONS] --template <TEMPLATE> [ARGS]...\n\nFLAGS:\n    -h, --help                   Prints help information\n    -l, --list-templates         List available templates\n        --no-open                Do not open the generated trace file in Instruments.app\n        --release                Pass --release to cargo\n    -V, --version                Prints version information\n        --all-features           Activate all features for the selected target\n        --no-default-features    Do not activate the default features for the selected target\n\nOPTIONS:\n        --bench <NAME>                 Benchmark target to run\n        --bin <NAME>                   Binary to run\n        --example <NAME>               Example binary to run\n        --features <CARGO-FEATURES>    Features to pass to cargo\n        --manifest-path <PATH>         Path to Cargo.toml\n    -p, --package <NAME>               Specify package for example/bin/bench\n        --profile <NAME>               Pass --profile NAME to cargo\n    -t, --template <TEMPLATE>          Specify the instruments template to run\n        --time-limit <MILLIS>          Limit recording time to the specified value (in milliseconds)\n    -o, --output <PATH>                Output .trace file to the given path\n\nARGS:\n    <ARGS>...    Arguments passed to the target binary\n\nEXAMPLE:\n    cargo instruments -t time    Profile main binary with the (recommended) Time Profiler.\n```\n\nAnd `cargo instruments --help` provides more detail.\n\n### Templates\n\nInstruments has the concept of 'templates', which describe sets of dtrace\nprobes that can be enabled. You can ask `cargo-instruments` to list available\ntemplates, including your custom ones (see help above). If you don't provide a\ntemplate name, you will be prompted to choose one.\n\nTypically, the built-in templates are\n\n    built-in            abbrev\n    --------------------------\n    Activity Monitor\n    Allocations         (alloc)\n    Animation Hitches\n    App Launch\n    Core Data\n    Counters\n    Energy Log\n    File Activity       (io)\n    Game Performance\n    Leaks\n    Logging\n    Metal System Trace\n    Network\n    SceneKit\n    SwiftUI\n    System Trace        (sys)\n    Time Profiler       (time)\n    Zombies\n\n### Examples\n\n```sh\n# View all args and options\n$ cargo instruments --help\n```\n\n```sh\n# View all built-in and custom templates\n$ cargo instruments --list-templates\n```\n\n```sh\n# profile the main binary with the Allocations template\n$ cargo instruments -t alloc\n```\n\n```sh\n# profile examples/my_example.rs, with the Allocations template,\n# for 10 seconds, and open the trace when finished\n$ cargo instruments -t Allocations --example my_example --time-limit 10000 --open\n```\n\n## Resources\n\n[Instruments Help][instruments]\n\n### WWDC videos\n\nThe best source of information about Instruments is likely the various WWDC\nsessions over the years:\n\n- [Profiling in Depth](https://developer.apple.com/videos/play/wwdc2015/412/)\n- [Using Time Profiler in Instruments](https://developer.apple.com/videos/play/wwdc2016/418/)\n- [System Trace in Depth](https://developer.apple.com/videos/play/wwdc2016/411/)\n- [Creating Custom Instruments](https://developer.apple.com/videos/play/wwdc2018/410/)\n\n[instruments]: https://help.apple.com/instruments/mac/10.0/\n[time profiler]: https://help.apple.com/instruments/mac/10.0/#/dev44b2b437"
}
