{
  "name": "git-when-merged",
  "full_name": "git-when-merged",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Find where a commit was merged in git",
  "license": "GPL-2.0-only",
  "homepage": "https://github.com/mhagger/git-when-merged",
  "versions": {
    "stable": "1.2.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/mhagger/git-when-merged/archive/v1.2.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "46ba5076981862ac2ad0fa0a94b9a5401ef6b5c5b0506c6e306b76e5798e1f58"
    },
    "head": {
      "url": "https://github.com/mhagger/git-when-merged.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 2,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-when-merged/blobs/sha256:1475d839dbfbe0fcf5132c9291a9f4467f118a9c899f5571f11cdf09568dc097",
          "sha256": "1475d839dbfbe0fcf5132c9291a9f4467f118a9c899f5571f11cdf09568dc097"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [
    "python@3.11"
  ],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "python"
  ],
  "uses_from_macos_bounds": [
    {
      "since": "catalina"
    }
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/git-when-merged.rb",
  "ruby_source_checksum": {
    "sha256": "f758cabfcbc3eec423273d18f3f08e5ac5ac5f2ea955d28f92483092f1490c77"
  },
  "date_added": "2016-01-17T14:25:39+00:00",
  "readme": "# `git when-merged`\n\n`git when-merged` helps you figure out when and why a commit was merged into a branch.\n\nIf you use standard Git workflows, then you create a feature branch for each feature that you are working on. When the feature is complete, you merge it into your `master` branch. You might even have sub-feature branches that are merged into a feature branch before the latter is merged.\n\nIn such a workflow, the first-parent history of `master` consists mainly of merges of feature branches into the mainline. `git when-merged` can be used to ask, \"When (and why) was commit C merged into the current branch?\" The simplest way to use it is\n\n```ShellSession\n$ git when-merged 87c248f\nrefs/heads/master                      50f577451448a407ee8e78ed62aa09d209c91652\n```\n\nThis command looks along the first-parent history of the current branch to find the merge commit that first brought commit `87c248f` into the branch's history. The guilty merge commit in this case is `50f5774`. Add the `-l` option to see the log for that merge, which will hopefully explain what feature was being merged and by whom:\n\n```ShellSession\n$ git when-merged -l 87c248f\nrefs/heads/master                      50f577451448a407ee8e78ed62aa09d209c91652\ncommit 50f577451448a407ee8e78ed62aa09d209c91652 (github/master, master)\nMerge: f79a45d 87c248f\nAuthor: Michael Haggerty <mhagger@alum.mit.edu>\nDate:   Mon Jul 11 07:55:19 2016 +0200\n\n    Merge pull request #9 from mhagger/recursive-option\n\n    Add a `--recursive`/`-r` option\n```\n\nThere are many more options; see below.\n\n\n## Installation\n\n**_Note: If you are using 2.6 <= Python <= 3.6, you MUST use Option 3 or 4._**\n\n<details open>\n<summary><h3>Option 1: Install as a stand-alone command line tool.</h3></summary>\n<br>\n\n> pipx is a tool to help you install and run end-user applications written in Python.\n\n1. [Install `pipx`](https://pipxproject.github.io/pipx/installation/):\n\n   ``` sh\n   python3 -m pip install --user pipx\n   ```\n\n   - Tip: [Homebrew](https://formulae.brew.sh/formula/pipx) as well as newer versions of some Linux distributions (e.g. [Debian 10](https://packages.debian.org/buster/pipx), [Ubuntu 19.04](https://packages.ubuntu.com/disco/pipx), etc.) offer native packages for `pipx`.\n\n   <br>\n\n   ``` sh\n   python3 -m pipx ensurepath\n   ```\n\n   - Note: You may need to restart your terminal for the `$PATH` updates to take effect.\n\n2. Use `pipx` to install [`git-when-merged` from PyPI](https://pypi.org/project/git-when-merged/):\n\n   ``` sh\n   pipx install git-when-merged\n   ```\n\n3. Test the installation:\n\n   ``` sh\n   git-when-merged --help\n   ```\n\n- Use `pipx` to uninstall at any time:\n\n   ``` sh\n   pipx uninstall git-when-merged\n   ```\n\nSee Python's [Installing stand alone command line tools](https://packaging.python.org/guides/installing-stand-alone-command-line-tools/) guide for more information.\n</details>\n\n<details>\n<summary><h3>Option 2: Create an ephemeral installation.</h3></summary>\n<br>\n\n> Python \"Virtual Environments\" allow Python packages to be installed in an isolated location for a particular application, rather than being installed globally.\n\n1. Use the built-in [`venv`](https://docs.python.org/3/library/venv.html) module to create a virtual environment:\n\n   ``` sh\n   python3 -m venv ./venv-gwm\n   ```\n\n2. Use `pip` to install [`git-when-merged` from PyPI](https://pypi.org/project/git-when-merged/) into the virtual environment:\n\n   ``` sh\n   venv-gwm/bin/pip install git-when-merged\n   ```\n\n3. Test the installation:\n\n   ``` sh\n   venv-gwm/bin/git-when-merged --help\n   ```\n\n   - Tip: Some users find it more convenient to \"activate\" the virtual environment (which prepends the virtual environment's `bin/` to `$PATH`):\n\n      ``` sh\n      source venv-gwm/bin/activate\n      git-when-merged --help\n      deactivate\n      ```\n\n- Remove the virtual environment to uninstall at any time:\n\n   ``` sh\n   rm --recursive venv-gwm/\n   ```\n\nSee Python's [Installing Packages](https://packaging.python.org/tutorials/installing-packages/) tutorial for more information.\n</details>\n\n<details>\n<summary><h3>Option 3: Clone and add to <code>$PATH</code>.</h3></summary>\n<br>\n\n1. Clone the repo somewhere on your system.\n\n2. Ensure that `<somewhere>/bin/git-when-merged` is executable.\n\n3. Put the contents of `<somewhere>/bin` on your `$PATH`.\n\nThat's it!\n</details>\n\n<details>\n<summary><h3>Option 4 (MacOS Users): Install from Homebrew.</h3></summary>\n<br>\n\n```ShellSession\n$ brew update\n$ brew install git-when-merged\n```\n</details>\n\n## Usage\n\n    git when-merged [OPTIONS] COMMIT [BRANCH...]\n\nFind the merge commit that brought `COMMIT` into the specified `BRANCH`(es). Specifically, look for the oldest commit on the first-parent history of each `BRANCH` that contains the `COMMIT` as an ancestor.\n\n```\npositional arguments:\n  commit                The commit whose destiny you would like to determine.\n  branch                The destination branch(es) into which <commit> might\n                        have been merged. (Actually, BRANCH can be an\n                        arbitrary commit, specified in any way that is\n                        understood by git-rev-parse(1).) If neither <branch>\n                        nor --pattern/-p nor --default/-s is specified, then\n                        HEAD is used.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --pattern PATTERN, -p PATTERN\n                        Show when COMMIT was merged to the references matching\n                        the specified regexp. If the regexp has parentheses\n                        for grouping, then display in the output the part of\n                        the reference name matching the first group.\n  --name NAME, -n NAME  Show when COMMIT was merged to the references matching\n                        the configured pattern(s) with the given name (see\n                        whenmerged.<name>.pattern below under CONFIGURATION).\n  --default, -s         Shorthand for \"--name=default\".\n  --recursive, -r       Follow merges back recursively.\n  --show-commit, -c     Display only the SHA-1 of the merge commit. Exit with\n                        a nonzero exit code if the commit was not merged via a\n                        merge commit.\n  --show-branch, -b     Display the range of commits that were merged at the\n                        same time as the specified commit. Exit with a nonzero\n                        exit code if the commit was not merged via a merge\n                        commit. This option also affects the behavior of --log\n                        and --visualize.\n  --abbrev N            Abbreviate commit SHA-1s to the specified number of\n                        characters (or more if needed to avoid ambiguity). See\n                        also whenmerged.abbrev below under CONFIGURATION.\n  --no-abbrev           Do not abbreviate commit SHA-1s.\n  --describe            Describe the merge commit in terms of the most recent\n                        tag reachable from the commit (see git-describe(1))\n  --describe-contains   Describe the merge commit in terms of a nearby tag\n                        that contains it (see git-describe(1))\n  --log, -l             Show the log for the merge commit. When used with\n                        \"--show-branch/-b\", show the log for all of the\n                        commits that were merged at the same time as the\n                        specified commit.\n  --diff, -d            Show the diff for the merge commit.\n  --visualize, -v       Visualize the merge commit using gitk. When used with\n                        \"--show-branch/-b\", only show the branch(es) that were\n                        merged at the same time as the specified commit.\n\nExamples:\n  git when-merged 0a1b                   # Find the merge commit that brought\n                                         # commit 0a1b into the current branch\n  git when-merged 0a1b v1.10 v1.11       # Find merge into given tags/branches\n  git when-merged 0a1b -p feature-[0-9]+ # Specify tags/branches by regex\n  git when-merged 0a1b -n releases       # Use whenmerged.releases.pattern\n  git when-merged 0a1b -s                # Use whenmerged.default.pattern\n\n  git when-merged -r 0a1b                # If the commit was merged indirectly,\n                                         # show each intermediate merge.\n  git when-merged -l 0a1b                # Show the log for the merge commit\n  git when-merged -lb 0a1b               # Show log for the whole merged branch\n  git when-merged -v 0a1b                # Visualize the merge commit in gitk\n  git when-merged -vb 0a1b               # Visualize the whole merged branch\n  git when-merged -d 0a1b                # Show the diff for the merge commit\n  git when-merged -c 0a1b                # Print only the merge's SHA-1\n\nConfiguration:\n  whenmerged.<name>.pattern\n      Regular expressions that match reference names for the pattern\n      called <name>.  A regexp is sought in the full reference name,\n      in the form \"refs/heads/master\".  This option can be multivalued, in\n      which case references matching any of the patterns are considered.\n      Typically the pattern will be chosen to match master and/or significant\n      release branches or tags, or perhaps their remote-tracking equivalents.\n      For example,\n\n          git config whenmerged.default.pattern '^refs/heads/master$'\n          git config --add whenmerged.default.pattern '^refs/heads/maint$'\n\n      or\n\n          git config whenmerged.releases.pattern '^refs/tags/release-'\n\n  whenmerged.abbrev\n      If this value is set to a positive integer, then Git SHA-1s are\n      abbreviated to this number of characters (or longer if needed to\n      avoid ambiguity).  This value can be overridden using --abbrev=N\n      or --no-abbrev.\n```\n\n`git when-merged` is originally based on [the suggestion here](http://stackoverflow.com/questions/8475448/find-merge-commit-which-include-a-specific-commit)."
}
