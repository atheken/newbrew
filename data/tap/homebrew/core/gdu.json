{
  "name": "gdu",
  "full_name": "gdu",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Disk usage analyzer with console interface written in Go",
  "license": "MIT",
  "homepage": "https://github.com/dundee/gdu",
  "versions": {
    "stable": "5.25.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/dundee/gdu/archive/v5.25.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "83fe876d953b4f2f7a856552e758aae4aa0cd9569dcf1aded61bdc834b834275"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gdu/blobs/sha256:7ddc42b8da31e35f87c722fe3c1912e338b15e4af553e1d0bb1d8ac7a4dd600e",
          "sha256": "7ddc42b8da31e35f87c722fe3c1912e338b15e4af553e1d0bb1d8ac7a4dd600e"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gdu/blobs/sha256:7ddc42b8da31e35f87c722fe3c1912e338b15e4af553e1d0bb1d8ac7a4dd600e",
          "sha256": "7ddc42b8da31e35f87c722fe3c1912e338b15e4af553e1d0bb1d8ac7a4dd600e"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gdu/blobs/sha256:7ddc42b8da31e35f87c722fe3c1912e338b15e4af553e1d0bb1d8ac7a4dd600e",
          "sha256": "7ddc42b8da31e35f87c722fe3c1912e338b15e4af553e1d0bb1d8ac7a4dd600e"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gdu/blobs/sha256:aa1ba23f987df2ec8403887234196d7d548819f4725935e4333ed9802d6bacae",
          "sha256": "aa1ba23f987df2ec8403887234196d7d548819f4725935e4333ed9802d6bacae"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gdu/blobs/sha256:aa1ba23f987df2ec8403887234196d7d548819f4725935e4333ed9802d6bacae",
          "sha256": "aa1ba23f987df2ec8403887234196d7d548819f4725935e4333ed9802d6bacae"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gdu/blobs/sha256:aa1ba23f987df2ec8403887234196d7d548819f4725935e4333ed9802d6bacae",
          "sha256": "aa1ba23f987df2ec8403887234196d7d548819f4725935e4333ed9802d6bacae"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gdu/blobs/sha256:6830146fdaba73d2c0bd32cfd4de1fcd9f1c5d3b097acd6fa0d062ad81a3e5e5",
          "sha256": "6830146fdaba73d2c0bd32cfd4de1fcd9f1c5d3b097acd6fa0d062ad81a3e5e5"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": "To avoid a conflict with `coreutils`, `gdu` has been installed as `gdu-go`.\n",
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/gdu.rb",
  "ruby_source_checksum": {
    "sha256": "eda18eaa190c9e1b52dae78624d6b2d771e748904ff0544a953266da50fa0c42"
  },
  "date_added": "2021-01-12T09:02:40+00:00",
  "readme": "# go DiskUsage()\n\n[![Codecov](https://codecov.io/gh/dundee/gdu/branch/master/graph/badge.svg)](https://codecov.io/gh/dundee/gdu)\n[![Go Report Card](https://goreportcard.com/badge/github.com/dundee/gdu)](https://goreportcard.com/report/github.com/dundee/gdu)\n[![Maintainability](https://api.codeclimate.com/v1/badges/30d793274607f599e658/maintainability)](https://codeclimate.com/github/dundee/gdu/maintainability)\n[![CodeScene Code Health](https://codescene.io/projects/13129/status-badges/code-health)](https://codescene.io/projects/13129)\n\nPretty fast disk usage analyzer written in Go.\n\nGdu is intended primarily for SSD disks where it can fully utilize parallel processing.\nHowever HDDs work as well, but the performance gain is not so huge.\n\n[![asciicast](https://asciinema.org/a/382738.svg)](https://asciinema.org/a/382738)\n\n<a href=\"https://repology.org/project/gdu/versions\">\n    <img src=\"https://repology.org/badge/vertical-allrepos/gdu.svg\" alt=\"Packaging status\" align=\"right\">\n</a>\n\n## Installation\n\nHead for the [releases page](https://github.com/dundee/gdu/releases) and download the binary for your system.\n\nUsing curl:\n\n    curl -L https://github.com/dundee/gdu/releases/latest/download/gdu_linux_amd64.tgz | tar xz\n    chmod +x gdu_linux_amd64\n    mv gdu_linux_amd64 /usr/bin/gdu\n\n[Arch Linux](https://archlinux.org/packages/community/x86_64/gdu/):\n\n    pacman -S gdu\n\n[Debian](https://packages.debian.org/bullseye/gdu):\n\n    apt install gdu\n\n[Ubuntu](https://launchpad.net/~daniel-milde/+archive/ubuntu/gdu)\n\n    add-apt-repository ppa:daniel-milde/gdu\n    apt-get update\n    apt-get install gdu\n\n\n[NixOS](https://search.nixos.org/packages?channel=unstable&show=gdu&query=gdu):\n\n    nix-env -iA nixos.gdu\n\n[Homebrew](https://formulae.brew.sh/formula/gdu):\n\n    brew install -f gdu\n    brew link --overwrite gdu  # if you have coreutils installed as well\n\n[Snap](https://snapcraft.io/gdu-disk-usage-analyzer):\n\n    snap install gdu-disk-usage-analyzer\n    snap connect gdu-disk-usage-analyzer:mount-observe :mount-observe\n    snap connect gdu-disk-usage-analyzer:system-backup :system-backup\n    snap alias gdu-disk-usage-analyzer.gdu gdu\n\n[Binenv](https://github.com/devops-works/binenv)\n\n    binenv install gdu\n\n[Go](https://pkg.go.dev/github.com/dundee/gdu):\n\n    go install github.com/dundee/gdu/v5/cmd/gdu@latest\n\n[Winget](https://github.com/microsoft/winget-pkgs/tree/master/manifests/d/dundee/gdu):\n\n    winget install gdu\n\n## Usage\n\n```\n  gdu [flags] [directory_to_scan]\n\nFlags:\n      --config-file string            Read config from file (default is $HOME/.gdu.yaml)\n  -g, --const-gc                      Enable memory garbage collection during analysis with constant level set by GOGC\n      --enable-profiling              Enable collection of profiling data and provide it on http://localhost:6060/debug/pprof/\n  -L, --follow-symlinks               Follow symlinks for files, i.e. show the size of the file to which symlink points to (symlinks to directories are not followed)\n  -h, --help                          help for gdu\n  -i, --ignore-dirs strings           Absolute paths to ignore (separated by comma) (default [/proc,/dev,/sys,/run])\n  -I, --ignore-dirs-pattern strings   Absolute path patterns to ignore (separated by comma)\n  -X, --ignore-from string            Read absolute path patterns to ignore from file\n  -f, --input-file string             Import analysis from JSON file\n  -l, --log-file string               Path to a logfile (default \"/dev/null\")\n  -m, --max-cores int                 Set max cores that GDU will use. 8 cores available (default 8)\n  -c, --no-color                      Do not use colorized output\n  -x, --no-cross                      Do not cross filesystem boundaries\n  -H, --no-hidden                     Ignore hidden directories (beginning with dot)\n      --no-mouse                      Do not use mouse\n      --no-prefix                     Show sizes as raw numbers without any prefixes (SI or binary) in non-interactive mode\n  -p, --no-progress                   Do not show progress in non-interactive mode\n  -n, --non-interactive               Do not run in interactive mode\n  -o, --output-file string            Export all info into file as JSON\n  -a, --show-apparent-size            Show apparent size\n  -d, --show-disks                    Show all mounted disks\n  -B, --show-relative-size            Show relative size\n      --si                            Show sizes with decimal SI prefixes (kB, MB, GB) instead of binary prefixes (KiB, MiB, GiB)\n  -s, --summarize                     Show only a total in non-interactive mode\n  -v, --version                       Print version\n      --write-config                  Write current configuration to file (default is $HOME/.gdu.yaml)\n\nIn interactive mode:\n  ↑ or k                              Move cursor up\n  ↓ or j                              Move cursor down\n  → or Enter                          Go to highlighted directory\n  ← or h                              Go to parent directory\n  d                                   Delete the selected file or directory\n  e                                   Empty the selected directory\n  n                                   Sort by name\n  s                                   Sort by size\n  c                                   Show number of items in directory\n```\n\n## Examples\n\n    gdu                                   # analyze current dir\n    gdu -a                                # show apparent size instead of disk usage\n    gdu <some_dir_to_analyze>             # analyze given dir\n    gdu -d                                # show all mounted disks\n    gdu -l ./gdu.log <some_dir>           # write errors to log file\n    gdu -i /sys,/proc /                   # ignore some paths\n    gdu -I '.*[abc]+'                     # ignore paths by regular pattern\n    gdu -X ignore_file /                  # ignore paths by regular patterns from file\n    gdu -c /                              # use only white/gray/black colors\n\n    gdu -n /                              # only print stats, do not start interactive mode\n    gdu -np /                             # do not show progress, useful when using its output in a script\n    gdu -nps /some/dir                    # show only total usage for given dir\n    gdu / > file                          # write stats to file, do not start interactive mode\n\n    gdu -o- / | gzip -c >report.json.gz   # write all info to JSON file for later analysis\n    zcat report.json.gz | gdu -f-         # read analysis from file\n\n## Modes\n\nGdu has three modes: interactive (default), non-interactive and export.\n\nNon-interactive mode is started automatically when TTY is not detected (using [go-isatty](https://github.com/mattn/go-isatty)), for example if the output is being piped to a file, or it can be started explicitly by using a flag.\n\nExport mode (flag `-o`) outputs all usage data as JSON, which can be later opened using the `-f` flag.\n\nHard links are counted only once.\n\n## File flags\n\nFiles and directories may be prefixed by a one-character\nflag with following meaning:\n\n* `!` An error occurred while reading this directory.\n\n* `.` An error occurred while reading a subdirectory, size may be not correct.\n\n* `@` File is symlink or socket.\n\n* `H` Same file was already counted (hard link).\n\n* `e` Directory is empty.\n\n## Configuration file\n\nGdu can read (and write) YAML configuration file.\n\n`$HOME/.config/gdu/gdu.yaml` and `$HOME/.gdu.yaml` are checked for the presense of the config file by default.\n\n### Examples\n\n* To configure gdu to permanently run in gray-scale color mode:\n\n```\necho \"no-color: true\" >> ~/.gdu.yaml\n```\n\n* To set default sorting in configuration file:\n\n```\nsorting:\n    by: name // size, name, itemCount, mtime\n    order: desc\n```\n\n* To configure gdu to set CWD variable when browsing directories:\n\n```\necho \"change-cwd: true\" >> ~/.gdu.yaml\n```\n\n* To save the current configuration\n\n```\ngdu --write-config\n```\n\n## Styling\n\nThere are wast ways how terminals can be colored.\nSome gdu primitives (like basic text) addapt to different color schemas, but the selected/highlighted row does not.\n\nIf the default look is not sufficient, it can be changed in configuration file, e.g.:\n\n```\nstyle:\n    selected-row:\n        text-color: black\n        background-color: \"#ff0000\"\n```\n\n## Memory usage\n\n### Automatic balancing\n\nGdu tries to balance performance and memory usage.\n\nWhen less memory is used by gdu than the total free memory of the host,\nthen Garbage Collection is disabled during the analysis phase completely to gain maximum speed.\n\nOtherwise GC is enabled.\nThe more memory is used and the less memory is free, the more often will the GC happen.\n\n### Manual memory usage control\n\nIf you want manual control over Garbage Collection, you can use `--const-gc` / `-g` flag.\nIt will run Garbage Collection during the analysis phase with constant level of aggressiveness.\nAs a result, the analysis will be about 25% slower and will consume about 30% less memory.\nTo change the level, you can set the `GOGC` environment variable to specify how often the garbage collection will happen.\nLower value (than 100) means GC will run more often. Higher means less often. Negative number will stop GC.\n\nExample running gdu with constant GC, but not so aggressive as default:\n\n```\nGOGC=200 gdu -g /\n```\n\n## Running tests\n\n    make install-dev-dependencies\n    make test\n\n## Benchmarks\n\nBenchmarks were performed on 50G directory (100k directories, 400k files) on 500 GB SSD using [hyperfine](https://github.com/sharkdp/hyperfine).\nSee `benchmark` target in [Makefile](Makefile) for more info.\n\n## Profiling\n\nGdu can collect profiling data when the `--enable-profiling` flag is set.\nThe data are provided via embedded http server on URL `http://localhost:6060/debug/pprof/`.\n\nYou can then use e.g. `go tool pprof -web http://localhost:6060/debug/pprof/heap`\nto open the heap profile as SVG image in your web browser.\n\n### Cold cache\n\nFilesystem cache was cleared using `sync; echo 3 | sudo tee /proc/sys/vm/drop_caches`.\n\n| Command | Mean [s] | Min [s] | Max [s] | Relative |\n|:---|---:|---:|---:|---:|\n| `gdu -npc ~` | 4.995 ± 0.032 | 4.964 | 5.083 | 1.00 |\n| `gdu -gnpc ~` | 5.080 ± 0.132 | 5.000 | 5.339 | 1.02 ± 0.03 |\n| `diskus ~` | 5.174 ± 0.042 | 5.113 | 5.231 | 1.04 ± 0.01 |\n| `pdu ~` | 5.940 ± 0.011 | 5.918 | 5.956 | 1.19 ± 0.01 |\n| `dua ~` | 6.176 ± 0.012 | 6.160 | 6.195 | 1.24 ± 0.01 |\n| `dust -d0 ~` | 6.556 ± 0.497 | 6.217 | 7.319 | 1.31 ± 0.10 |\n| `du -hs ~` | 24.105 ± 0.061 | 24.045 | 24.220 | 4.83 ± 0.03 |\n| `ncdu -0 -o /dev/null ~` | 25.065 ± 0.071 | 24.970 | 25.180 | 5.02 ± 0.04 |\n| `duc index ~` | 25.711 ± 3.168 | 24.550 | 34.723 | 5.15 ± 0.64 |\n\n### Warm cache\n\n| Command | Mean [ms] | Min [ms] | Max [ms] | Relative |\n|:---|---:|---:|---:|---:|\n| `pdu ~` | 354.9 ± 3.9 | 350.1 | 363.2 | 1.00 |\n| `diskus ~` | 406.5 ± 6.9 | 395.2 | 419.2 | 1.15 ± 0.02 |\n| `dua ~` | 525.0 ± 10.0 | 506.8 | 536.7 | 1.48 ± 0.03 |\n| `dust -d0 ~` | 592.1 ± 15.5 | 567.8 | 626.7 | 1.67 ± 0.05 |\n| `gdu -npc ~` | 711.4 ± 9.8 | 702.9 | 734.8 | 2.00 ± 0.04 |\n| `gdu -gnpc ~` | 847.7 ± 11.1 | 827.2 | 861.2 | 2.39 ± 0.04 |\n| `du -hs ~` | 1387.0 ± 6.5 | 1379.9 | 1398.3 | 3.91 ± 0.05 |\n| `duc index ~` | 1638.3 ± 5.1 | 1630.7 | 1646.7 | 4.62 ± 0.05 |\n| `ncdu -0 -o /dev/null ~` | 2348.9 ± 9.1 | 2330.5 | 2364.5 | 6.62 ± 0.08 |\n\n## Alternatives\n\n* [ncdu](https://dev.yorhel.nl/ncdu) - NCurses based tool written in pure C\n* [godu](https://github.com/viktomas/godu) - Analyzer with carousel like user interface\n* [dua](https://github.com/Byron/dua-cli) - Tool written in Rust with interface similar to gdu (and ncdu)\n* [diskus](https://github.com/sharkdp/diskus) - Very simple but very fast tool written in Rust\n* [duc](https://duc.zevv.nl/) - Collection of tools with many possibilities for inspecting and visualising disk usage\n* [dust](https://github.com/bootandy/dust) - Tool written in Rust showing tree like structures of disk usage\n* [pdu](https://github.com/KSXGitHub/parallel-disk-usage) - Tool written in Rust showing tree like structures of disk usage"
}
