{
  "name": "kumo",
  "full_name": "kumo",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Word Clouds in Java",
  "license": "MIT",
  "homepage": "https://github.com/kennycason/kumo",
  "versions": {
    "stable": "1.28",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://search.maven.org/remotecontent?filepath=com/kennycason/kumo-cli/1.28/kumo-cli-1.28.jar",
      "tag": null,
      "revision": null,
      "checksum": "43e4e2ea9da62a2230deed9151d8484f80bd6ae5fef304eaadf3301378f45fb6"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kumo/blobs/sha256:596af3ddc1bc9b8881fbc386ae85804fe999cee118a99fc13e123db2c5acefe1",
          "sha256": "596af3ddc1bc9b8881fbc386ae85804fe999cee118a99fc13e123db2c5acefe1"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "openjdk"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/kumo.rb",
  "ruby_source_checksum": {
    "sha256": "a18cdac85e673f866d7d98698bf06233bddce4ab93113cd0bc741bc8eb1caaf4"
  },
  "date_added": "2018-01-04T10:45:58-08:00",
  "readme": "\n\n# <img src=\"logo/Kumo02.png\" alt=\"Kumo\" height=\"28px\"> Kumo\n\nKumo's goal is to create a powerful and user friendly Word Cloud API in Java. Kumo directly generates an image file without the need to create an applet as many other libraries do.\n\nPlease feel free to jump in and help improve Kumo! There are many places for performance optimization in Kumo!\n\n[![Maven Central](https://maven-badges.herokuapp.com/maven-central/com.kennycason/kumo-core/badge.svg?style=flat)](https://maven-badges.herokuapp.com/maven-central/com.kennycason/kumo-core)  [![CircleCI](https://circleci.com/gh/kennycason/kumo.svg?style=svg)](https://circleci.com/gh/kennycason/kumo)<br/>\n\n### Current Features\n\n- Draw Rectangle, Circle or Image Overlay word clouds. Image Overlay will draw words over all non-transparent pixels.\n- Linear, Square-Root Font Scalars. Fully extendable.\n- Variable Font Sizes.\n- Word Rotation. Just provide a Start Angle, End Angle, and number of slices.\n- Custom BackGround Color. Fully customizable BackGrounds coming soon.\n- Word Padding.\n- Load Custom Color Palettes. Also supports color gradients.\n- Two Modes that of Collision and Padding: PIXEL_PERFECT and RECTANGLE.\n- Polar Word Clouds. Draw two opposing word clouds in one image to easily compare/contrast date sets.\n- Layered Word Clouds. Overlay multiple word clouds.\n- WhiteSpace and Chinese Word Tokenizer. Fully extendable. \n- Frequency Analyzer to tokenize, filter and compute word counts.\n- Command Line Interface\n\n#### CLI Install via Brew (NEW!)\n\n`brew install kumo`\n\n### Available from Maven Central\n\n```xml\n<dependency>\n    <groupId>com.kennycason</groupId>\n    <artifactId>kumo-core</artifactId>\n    <version>1.28</version>\n</dependency>\n```\n\nInclude `kumo-tokenizers` if you want Chinese serialization. More languages to come.\n```xml\n<dependency>\n    <groupId>com.kennycason</groupId>\n    <artifactId>kumo-tokenizers</artifactId>\n    <version>1.28</version>\n</dependency>\n```\n\n### Screenshots\n\n<table>\n<tr><td>\n<img src=\"kumo-core/output/whale_wordcloud_large_impact.png?raw=true\" width=\"300\"/>\n</td><td>\n<img src=\"kumo-core/output/simplymeasured.png?raw=true\" width=\"300\"/>\n</td></tr>\n<tr><td>\n<img src=\"kumo-core/output/layered_haskell.png?raw=true\" width=\"300\"/>\n</td><td>\n<img src=\"kumo-core/output/layered_pho_bowl.png?raw=true\" width=\"300\"/>\n</td></tr>\n<tr><td>\n<img src=\"kumo-core/output/polar_newyork_rectangle_blur.png?raw=true\" width=\"300\"/>\n</td><td>\n<img src=\"kumo-core/output/polar_tide_chinese_vs_english2.png?raw=true\" width=\"300\"/>\n</td></tr>\n<tr><td>\n<img src=\"kumo-core/output/datarank_wordcloud_circle_sqrt_font.png?raw=true\" width=\"300\"/>\n</td><td>\n<img src=\"kumo-core/output/chinese_language_circle.png?raw=true\" width=\"300\"/>\n</td></tr>\n<tr><td>\n<img src=\"kumo-core/output/polar_newyork_whale_large_blur.png?raw=true\" width=\"300\"/>\n</td><td>\n<img src=\"kumo-core/output/layered_word_cloud.png?raw=true\" width=\"300\"/>\n</td></tr>\n<tr><td>\n<img src=\"kumo-core/output/whale_wordcloud_large_angles.png?raw=true\" width=\"300\"/>\n</td><td>\n<img src=\"kumo-core/output/wordcloud_rectangle.png?raw=true\" width=\"300\"/>\n</td></tr>\n<tr><td>\n<img src=\"kumo-core/output/wordcloud_gradient_redbluegreen.png?raw=true\" width=\"300\"/>\n</td><td>\n<img src=\"kumo-core/output/wordcloud_gradient_whiteredblue.png?raw=true\" width=\"300\"/>\n</td></tr>\n<tr><td>\n<img src=\"kumo-core/output/bubbletext.png?raw=true\" width=\"300\"/>\n</td><td>\n<img src=\"kumo-core/output/wordcloud_emoji.png?raw=true\" width=\"300\"/>\n</td></tr>\n</table>\n\n### Examples\n\nExample to generate a Word Cloud on top of an image.\n\n```java\nfinal FrequencyAnalyzer frequencyAnalyzer = new FrequencyAnalyzer();\nfrequencyAnalyzer.setWordFrequenciesToReturn(300);\nfrequencyAnalyzer.setMinWordLength(4);\nfrequencyAnalyzer.setStopWords(loadStopWords());\n\nfinal List<WordFrequency> wordFrequencies = frequencyAnalyzer.load(\"text/datarank.txt\");\nfinal Dimension dimension = new Dimension(500, 312);\nfinal WordCloud wordCloud = new WordCloud(dimension, CollisionMode.PIXEL_PERFECT);\nwordCloud.setPadding(2);\nwordCloud.setBackground(new PixelBoundryBackground(\"backgrounds/whale_small.png\"));\nwordCloud.setColorPalette(new ColorPalette(new Color(0x4055F1), new Color(0x408DF1), new Color(0x40AAF1), new Color(0x40C5F1), new Color(0x40D3F1), new Color(0xFFFFFF)));\nwordCloud.setFontScalar(new LinearFontScalar(10, 40));\nwordCloud.build(wordFrequencies);\nwordCloud.writeToFile(\"kumo-core/output/whale_wordcloud_small.png\");\n```\n\nExample to generate a circular Word Cloud.\n\n```java\nfinal FrequencyAnalyzer frequencyAnalyzer = new FrequencyAnalyzer();\nfinal List<WordFrequency> wordFrequencies = frequencyAnalyzer.load(\"text/my_text_file.txt\");\nfinal Dimension dimension = new Dimension(600, 600);\nfinal WordCloud wordCloud = new WordCloud(dimension, CollisionMode.PIXEL_PERFECT);\nwordCloud.setPadding(2);\nwordCloud.setBackground(new CircleBackground(300));\nwordCloud.setColorPalette(new ColorPalette(new Color(0x4055F1), new Color(0x408DF1), new Color(0x40AAF1), new Color(0x40C5F1), new Color(0x40D3F1), new Color(0xFFFFFF)));\nwordCloud.setFontScalar(new SqrtFontScalar(10, 40));\nwordCloud.build(wordFrequencies);\nwordCloud.writeToFile(\"kumo-core/output/datarank_wordcloud_circle_sqrt_font.png\");\n```\n\nExample to generate a rectangle Word Cloud\n\n```java\nfinal FrequencyAnalyzer frequencyAnalyzer = new FrequencyAnalyzer();\nfinal List<WordFrequency> wordFrequencies = frequencyAnalyzer.load(\"text/my_text_file.txt\");\nfinal Dimension dimension = new Dimension(600, 600);\nfinal WordCloud wordCloud = new WordCloud(dimension, CollisionMode.RECTANGLE);\nwordCloud.setPadding(0);\nwordCloud.setBackground(new RectangleBackground(dimension));\nwordCloud.setColorPalette(new ColorPalette(Color.RED, Color.GREEN, Color.YELLOW, Color.BLUE));\nwordCloud.setFontScalar(new LinearFontScalar(10, 40));\nwordCloud.build(wordFrequencies);\nwordCloud.writeToFile(\"kumo-core/output/wordcloud_rectangle.png\");\n```\n\n\nExample using Linear Color Gradients\n\n```java\nfinal FrequencyAnalyzer frequencyAnalyzer = new FrequencyAnalyzer();\nfrequencyAnalyzer.setWordFrequenciesToReturn(500);\nfrequencyAnalyzer.setMinWordLength(4); \nfinal List<WordFrequency> wordFrequencies = frequencyAnalyzer.load(\"text/my_text_file.txt\");\nfinal Dimension dimension = new Dimension(600, 600);\nfinal WordCloud wordCloud = new WordCloud(dimension, CollisionMode.PIXEL_PERFECT);\nwordCloud.setPadding(2);\nwordCloud.setBackground(new CircleBackground(300));\n// colors followed by and steps between\nwordCloud.setColorPalette(new LinearGradientColorPalette(Color.RED, Color.BLUE, Color.GREEN, 30, 30));\nwordCloud.setFontScalar( new SqrtFontScalar(10, 40));\nwordCloud.build(wordFrequencies);\nwordCloud.writeToFile(\"kumo-core/output/wordcloud_gradient_redbluegreen.png\");\n```\n\nExample of tokenizing chinese text into a circle\n\n```java\nfinal FrequencyAnalyzer frequencyAnalyzer = new FrequencyAnalyzer();\nfrequencyAnalyzer.setWordFrequenciesToReturn(600);\nfrequencyAnalyzer.setMinWordLength(2);\nfrequencyAnalyzer.setWordTokenizer(new ChineseWordTokenizer());\n\nfinal List<WordFrequency> wordFrequencies = frequencyAnalyzer.load(\"text/chinese_language.txt\");\nfinal Dimension dimension = new Dimension(600, 600);\nfinal WordCloud wordCloud = new WordCloud(dimension, CollisionMode.PIXEL_PERFECT);\nwordCloud.setPadding(2);\nwordCloud.setBackground(new CircleBackground(300));\nwordCloud.setColorPalette(new ColorPalette(new Color(0xD5CFFA), new Color(0xBBB1FA), new Color(0x9A8CF5), new Color(0x806EF5)));\nwordCloud.setFontScalar(new SqrtFontScalar(12, 45));\nwordCloud.build(wordFrequencies);\nwordCloud.writeToFile(\"kumo-core/output/chinese_language_circle.png\");\n```\n\nCreate a polarity word cloud to contrast two datasets\n\n```java\nfinal FrequencyAnalyzer frequencyAnalyzer = new FrequencyAnalyzer();\nfrequencyAnalyzer.setWordFrequenciesToReturn(750);\nfrequencyAnalyzer.setMinWordLength(4);\nfrequencyAnalyzer.setStopWords(loadStopWords());\n\nfinal List<WordFrequency> wordFrequencies = frequencyAnalyzer.load(\"text/new_york_positive.txt\");\nfinal List<WordFrequency> wordFrequencies2 = frequencyAnalyzer.load(\"text/new_york_negative.txt\");\nfinal Dimension dimension = new Dimension(600, 600);\nfinal PolarWordCloud wordCloud = new PolarWordCloud(dimension, CollisionMode.PIXEL_PERFECT, PolarBlendMode.BLUR);\nwordCloud.setPadding(2);\nwordCloud.setBackground(new CircleBackground(300));\nwordCloud.setFontScalar(new SqrtFontScalar(10, 40));\nwordCloud.build(wordFrequencies, wordFrequencies2);\nwordCloud.writeToFile(\"kumo-core/output/polar_newyork_circle_blur_sqrt_font.png\");\n```\n\n\nCreate a Layered Word Cloud from two images/two word sets\n\n```java\nfinal FrequencyAnalyzer frequencyAnalyzer = new FrequencyAnalyzer();\nfrequencyAnalyzer.setWordFrequenciesToReturn(300);\nfrequencyAnalyzer.setMinWordLength(5);\nfrequencyAnalyzer.setStopWords(loadStopWords());\n\nfinal List<WordFrequency> wordFrequencies = frequencyAnalyzer.load(\"text/new_york_positive.txt\");\nfinal List<WordFrequency> wordFrequencies2 = frequencyAnalyzer.load(\"text/new_york_negative.txt\");\nfinal Dimension dimension = new Dimension(600, 386);\nfinal LayeredWordCloud layeredWordCloud = new LayeredWordCloud(2, dimension, CollisionMode.PIXEL_PERFECT);\n\nlayeredWordCloud.setPadding(0, 1);\nlayeredWordCloud.setPadding(1, 1);\n\nlayeredWordCloud.setFontOptions(0, new KumoFont(\"LICENSE PLATE\", FontWeight.BOLD));\nlayeredWordCloud.setFontOptions(1, new KumoFont(\"Comic Sans MS\", FontWeight.BOLD));\n\nlayeredWordCloud.setBackground(0, new PixelBoundryBackground(\"backgrounds/cloud_bg.bmp\"));\nlayeredWordCloud.setBackground(1, new PixelBoundryBackground(\"backgrounds/cloud_fg.bmp\"));\n\nlayeredWordCloud.setColorPalette(0, new ColorPalette(new Color(0xABEDFF), new Color(0x82E4FF), new Color(0x55D6FA)));\nlayeredWordCloud.setColorPalette(1, new ColorPalette(new Color(0xFFFFFF), new Color(0xDCDDDE), new Color(0xCCCCCC)));\n\nlayeredWordCloud.setFontScalar(0, new SqrtFontScalar(10, 40));\nlayeredWordCloud.setFontScalar(1, new SqrtFontScalar(10, 40));\n\nlayeredWordCloud.build(0, wordFrequencies);\nlayeredWordCloud.build(1, wordFrequencies2);\nlayeredWordCloud.writeToFile(\"kumo-core/output/layered_word_cloud.png\");\n```\n\nCreate a ParallelLayeredWordCloud using 4 distinct Rectangles.<br>\nEvery Rectangle will be processed in a separate thread, thus minimizing build-time significantly\nNOTE: This will eventually be natively handled along with better internal data structures.\n\n```java\nfinal Dimension dimension = new Dimension(2000, 2000);\nParallelLayeredWordCloud parallelLayeredWordCloud = new ParallelLayeredWordCloud(4, dimension, CollisionMode.PIXEL_PERFECT);\n\n// Setup parts for word clouds\nfinal Normalizer[] NORMALIZERS = new Normalizer[] { \n    new UpperCaseNormalizer(), \n    new LowerCaseNormalizer(),\n    new BubbleTextNormalizer(),\n    new StringToHexNormalizer() \n};\nfinal Font[] FONTS = new Font[] { \n            new Font(\"Lucida Sans\", Font.PLAIN, 10), \n            new Font(\"Comic Sans\", Font.PLAIN, 10),\n            new Font(\"Yu Gothic Light\", Font.PLAIN, 10), \n            new Font(\"Meiryo\", Font.PLAIN, 10) \n};\nfinal List<List<WordFrequency>> listOfWordFrequencies = new ArrayList<>();\nfinal Point[] positions = new Point][] { new Point(0, 0), new Point(0, 1000), new Point(1000, 0), new Point(1000, 1000) };\nfinal Color[] colors = new Color[] { Color.RED, Color.WHITE, new Color(0x008080)/* TEAL */, Color.GREEN };\n\n// set up word clouds\nfor (int i = 0; i < lwc.getLayers(); i++) {\n    final FrequencyAnalyzer frequencyAnalyzer = new FrequencyAnalyzer();\n    frequencyAnalyzer.setMinWordLength(3);\n    frequencyAnalyzer.setNormalizer(NORMALIZERS[i]);\n    frequencyAnalyzer.setWordFrequenciesToReturn(1000);\n    listOfWordFrequencies.add(frequencyAnalyzer.load(\"text/english_tide.txt\"));\n\n    final WordCloud worldCloud = parallelLayeredWordCloud.getAt(i);\n    worldCloud.setAngleGenerator(new AngleGenerator(0));\n    worldCloud.setPadding(3);\n    worldCloud.setWordStartStrategy(new CenterWordStart());\n    worldCloud.setKumoFont(new KumoFont(FONTS[i]));\n    worldCloud.setColorPalette(new ColorPalette(colors[i]));\n\n    worldCloud.setBackground(new RectangleBackground(positions[i], dimension));\n    worldCloud.setFontScalar(new LinearFontScalar(10, 40));\n}\n\n// start building\nfor (int i = 0; i < lwc.getLayers(); i++) {\n    parallelLayeredWordCloud.build(i, listOfWordFreqs.get(i));\n}\n\nparallelLayeredWordCloud.writeToFile(\"parallelBubbleText.png\");\n```\n\nRefer to JPanelDemo.java for an example integrating into a JPanel.\n\n\n### Word Frequency File / Analyzer\n\nThe most common way to generate word frequencies is to pass a String of text directly to `FrequencyAnalyzer`.\nThe `FrequencyAnalyzer` contains many options to process and normalize input text.\n\nSometimes the word counts and word frequencies are already known and a consumer would like to load them directly into Kumo.\nTo do so, you can manually construct the `List<WordFrequency>` yourself, or you can load in a text file containing the word frequency and word pairs.\nThe `FrequencyFileLoader` can be used to load such files. The required format is:\n```\n100: frog\n94: dog\n43: cog\n20: bog\n3: fog\n1: log\n1: pog\n```\n\nOrder does not matter as the `FrequencyFileLoader` will automatically sort the pairs.\n\n### Tokenizers\n\nTokenizers are the code that splits a sentence/text into a list of words. Currently only two tokenizers are built into Kumo.\nTo add your own just create a class that override the `Tokenizer` interface and call the `FrequencyAnalyzer.setTokenizer()` or `FrequencyAnalyzer.addTokenizer()`.\n\n| Tokenizer   |\n|-------------|\n| WhiteSpaceWordTokenizer |\n| ChineseWordTokenizer |\n\n\n### Filters\n\nAfter tokenization, filters are applied to each word to determine whether or not should be omitted from the word list. \n\nTo add set the filter, call `FrequencyAnalyzer.setFilter()` or `FrequencyAnalyzer.addFilter()`\n\n\n| Tokenizer   | Description |\n|-------------|-------------|\n| UrlFilter | A filter to remove words that are urls. |\n| CompositeFilter | A wrapper of a collection of filters. |\n| StopWordFilter | Internally used, the FrequencyAnalyzer makes this filter easy to use via `FrequencyAnalyzer.setStopWords()`. |\n| WordSizeFilter | Internally used, the FrequencyAnalyzer makes this filter easy to use via `FrequencyAnalyzer.setMinWordLength()` and `FrequencyAnalyzer.setMaxWordLength()`. |\n\n### Normalizers\n\nAfter word tokenization and filtering has occurred you can further transform each word via a normalizer.\nThe default normalizer ia `lowerCase•characterStripping*trimToEmpty(word)`, the normalizer is even named `DefaultNormalizer`\n\nTo add set the normalizer, call `FrequencyAnalyzer.setNormalizer()` or `FrequencyAnalyzer.addNormalizer()`\n\n| Normalizers | Description |\n|-------------|-------------|\n| CharacterStrippingNormalizer | Constructed with a Pattern, it will replace all matched occurrences with a configurable 'replaceWith' string. The default pattern is `\\\\.|:|;|\\\\(|\\\\)|\\\"|,|\\\\?|,|!|<|>|/`|\n| LowerCaseNormalizer | Converts all text to lowercase. |\n| UpperCaseNormalizer | Converts all text to uppercase. |\n| TrimToEmptyNormalizer | Trims the text down to an empty string, even if null. |\n| UpsideDownNormalizer | Converts A-Z,a-z,0-9 character to an upside-down variant. |\n| StringToHexNormalizer | Converts each character to it's hex value and concatenates them. |\n| DefaultNormalizer | Combines the TrimToEmptyNormalizer, CharacterStrippingNormalizer, and LowerCaseNormalizer. |\n| BubbleTextNormalizer | Replaces A-Z,a-z with characters enclosed in Bubbles ⓐ-ⓩⒶ-Ⓩ (requires a supporting font) |\n\n\n### Command Line Interface (CLI)\n\nKumo can now be accessed via CLI. It is not quite as flexible as the programmatic interface yet but should support most of the common needs.\n\nThe CLI Documentation can be found [here](https://github.com/kennycason/kumo/blob/master/CLI.md).\n\nThe below examples assume you have the jar installed under the name of \"kumo\". To install via Brew run the following command.\n\n`brew install https://raw.githubusercontent.com/kennycason/kumo/master/script/kumo.rb`\n\nExamples:\n\nCreate a standard word cloud.\n```\nkumo --input \"https://en.wikipedia.org/wiki/Nintendo\" --output \"/tmp/wordcloud.png\"\n```\n\nCreate a standard word cloud excluding stop words.\n```\nkumo --input \"https://en.wikipedia.org/wiki/Nintendo\" --output \"/tmp/wordcloud.png\" --stop-words \"nintendo,the\"\n```\n\nCreate a standard word cloud with a limited word count.\n```\nkumo --input \"https://en.wikipedia.org/wiki/Nintendo\" --output \"/tmp/wordcloud.png\" --word-count 10\n```\n\nCreate a standard word cloud with a custom width and height.\n```\nkumo --input \"https://en.wikipedia.org/wiki/Nintendo\" --output \"/tmp/wordcloud.png\" --width 256 --height 256\n```\n\nCreate a standard word cloud with custom font configuration.\n```\nkumo --input \"https://en.wikipedia.org/wiki/Nintendo\" --output \"/tmp/wordcloud.png\" --font-scalar sqrt --font-type Impact --font-weight plain --font-size-min 4 --font-size-max 60\n```\n\nCreate a standard word cloud with a custom shape.\n```\nkumo --input \"https://en.wikipedia.org/wiki/Nintendo\" --output \"/tmp/wordcloud.png\" --width 990 --height 618 --background \"https://raw.githubusercontent.com/kennycason/kumo/master/src/test/resources/backgrounds/whale.png\n```\n\nCreate a standard word cloud with a custom color palette.\n```\nkumo --input \"https://en.wikipedia.org/wiki/Nintendo\" --output \"/tmp/wordcloud.png\" --color \"(255,0,0),(0,255,0),(0,0,255)\"\n```\n```\nkumo --input \"https://en.wikipedia.org/wiki/Nintendo\" --output \"/tmp/wordcloud.png\" --color \"(0xffffff),(0xcccccc),(0x999999),(0x666666),(0x333333)\"\n```\n\nCreate a standard word cloud using a Chinese tokenizer\n```\nkumo --input \"https://zh.wikipedia.org/wiki/%E4%BB%BB%E5%A4%A9%E5%A0%82\" --output \"/tmp/wordcloud.png\" --tokenizer chinese\n```\n\nCreate a polar word cloud\n```\nkumo --input \"https://en.wikipedia.org/wiki/Nintendo,https://en.wikipedia.org/wiki/PlayStation\" --output \"/tmp/nintendo_vs_playstation.png\" --type polar --color \"(0x00ff00),(0x00dd00),(0x007700)|(0xff0000),(0xdd0000),(0x770000)\"\n```\n\nCreate a layered word cloud\n```\nkumo --input \"https://www.haskell.org/, https://en.wikipedia.org/wiki/Haskell_(programming_language)\" --output \"/tmp/nintendo_vs_playstation.png\" --type layered --background \"https://raw.githubusercontent.com/kennycason/kumo/master/src/test/resources/backgrounds/haskell_1.bmp,https://raw.githubusercontent.com/kennycason/kumo/master/src/test/resources/backgrounds/haskell_2.bmp\" --color \"(0xFA6C07),(0xFF7614),(0xFF8936)|(0x080706),(0x3B3029),(0x47362A)\"\n```\n\n\n### Contributing\n\nMy primary IDE of choice is IntelliJ due to their robust tooling as well as code analysis/inspections. If using [IntelliJ IDEA](https://www.jetbrains.com/idea/), I recommend importing `KumoIntelliJInspections.xml`. I am also considering adding Checkstyle support.\n\nNew tests that write images should write images out to `kumo-core/output_test/` instead of `kumo-core/output/` which is now used for images to showcase Kumo."
}
