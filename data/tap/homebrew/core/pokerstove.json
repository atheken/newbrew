{
  "name": "pokerstove",
  "full_name": "pokerstove",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Poker evaluation and enumeration software",
  "license": "BSD-3-Clause",
  "homepage": "https://github.com/andrewprock/pokerstove",
  "versions": {
    "stable": "1.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/andrewprock/pokerstove/archive/v1.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "68503e7fc5a5b2bac451c0591309eacecba738d787874d5421c81f59fde2bc74"
    }
  },
  "revision": 5,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/pokerstove/blobs/sha256:354a7b64304cd6c7a0e04200a5eda12393737e7a4a96ce12470fe40ad80ff4ef",
          "sha256": "354a7b64304cd6c7a0e04200a5eda12393737e7a4a96ce12470fe40ad80ff4ef"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/pokerstove/blobs/sha256:6565611ac56460fed1619e63506259fb19ffc5e619715d292d008c6286345bdb",
          "sha256": "6565611ac56460fed1619e63506259fb19ffc5e619715d292d008c6286345bdb"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/pokerstove/blobs/sha256:612152599b7e4fbe9328967b9770e6bb8bb3cd45a8f07d03c30027633bffa52f",
          "sha256": "612152599b7e4fbe9328967b9770e6bb8bb3cd45a8f07d03c30027633bffa52f"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/pokerstove/blobs/sha256:77d153f1b85e2dc127cc78a7839e58ccfc52d53580665ecec3a56e7faa1e8d8c",
          "sha256": "77d153f1b85e2dc127cc78a7839e58ccfc52d53580665ecec3a56e7faa1e8d8c"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/pokerstove/blobs/sha256:4d77e43f1ea5baa87e1b0e226885f86d939819a33ba4c84fd73c47c0e6a8c96d",
          "sha256": "4d77e43f1ea5baa87e1b0e226885f86d939819a33ba4c84fd73c47c0e6a8c96d"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/pokerstove/blobs/sha256:8542c066554cf7309317c8fa3be1ccfe91e4056576f0b8f99fef568d5da04f3c",
          "sha256": "8542c066554cf7309317c8fa3be1ccfe91e4056576f0b8f99fef568d5da04f3c"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pokerstove/blobs/sha256:20618ea7f04f4bf92a7606f18df854a90268948e8f903c1484b4ea9154c7799c",
          "sha256": "20618ea7f04f4bf92a7606f18df854a90268948e8f903c1484b4ea9154c7799c"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake",
    "googletest"
  ],
  "dependencies": [
    "boost@1.76"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": true,
  "deprecation_date": "2023-05-10",
  "deprecation_reason": "does_not_build",
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/pokerstove.rb",
  "ruby_source_checksum": {
    "sha256": "a7a53a16b0e5e818fdc82b63823b9074e8a5c108ac9207b31601411e8c933243"
  },
  "date_added": "2019-08-28T11:13:25+02:00",
  "readme": "PokerStove\n==========\n\n[![OpenHUB Metrics](https://www.openhub.net/p/pokerstove/widgets/project_thin_badge.gif)](https://www.openhub.net/p/pokerstove)\n\nPokerStove is a highly hand optimized C++ poker hand evaluation library.  The Win32 Hold'em\nGUI was first released in 2002, and has been available as freeware since\nit's first release.\n\nThe core libraries of pokerstove are being open sourced.  The project is\ncurrently in the process of reviewing and publishing the code.  As code is\nreviewed and code sanitized further commits will be added.\n\nPlease find the old installer in the win32 directory.  That installer should\ninstall a version of PokerStove which will not expire at any time.  You can also\nfind the apk file for the Android version of the utility in the android folder.\n\n## Libraries\n\n### peval\n\nThis is a c++ poker hand evaluation library.  The main design goals of the library\nare generality, extensibility, and ease of use.  There are evaluators for fourteen\nvariants of poker.  Additionally, there are various card manipulation and query tools built\ninto the CardSet class.\n\n## Programs\n\n### ps-eval\n\nA tool for poker hand evaluation.  It demonstrates how to use the peval library, and to create\nevaluators for the different variants of poker.\n\n### ps-colex\n\nA utility for viewing colexicographical index for sets of cards.\n\n## Building\n\nThe pokerstove libraries come with build scripts for cmake.  This\nshould allow you to build it on any platform with minimal\ntweaking.  This project has been successfully build under linux/g++,\nwindows/vc2010 and OSX/XCode so far.\n\nIn order to build the libraries you'll need the following\ninstalled on your platform of choice:\n\n* boost, version 1.46 or higher\n* cmake, version 3.14 or higher\n\n### Linux\n\nTo install the dependencies with apt get:\n\n    apt-get install libboost-all-dev cmake\n\nTo build under linux using cmake, create a build directory,\ninvoke cmake on the programs directory, then build.\n\n    git clone https://github.com/andrewprock/pokerstove.git\n    mkdir pokerstove/build\n    cd pokerstove/build\n    cmake -DCMAKE_BUILD_TYPE=Release ..\n    make && make test\n\nYou should then be able to execute the simple command line\nexample:\n\n    pokerstove/build $ ./bin/ps-eval\n    Allowed options:\n      -? [ --help ]          produce help message\n      -g [ --game ] arg (=h) game to use for evaluation\n      -b [ --board ] arg     community cards for he/o/o8\n      -h [ --hand ] arg      a hand for evaluation\n      -q [ --quiet ]         produce no output\n\n       For the --game option, one of the follwing games may be\n       specified.\n         h     hold'em\n         o     omaha/8\n         O     omaha high\n         r     razz\n         s     stud\n         e     stud/8\n         q     stud high/low no qualifier\n         d     draw high\n         l     lowball (A-5)\n         k     Kansas City lowball (2-7)\n         t     triple draw lowball (2-7)\n         T     triple draw lowball (A-5)\n         b     badugi\n         3     three-card poker\n\n       examples:\n           ps-eval acas\n           ps-eval AcAs Kh4d --board 5c8s9h\n           ps-eval AcAs Kh4d --board 5c8s9h\n           ps-eval --game l 7c5c4c3c2c\n           ps-eval --game k 7c5c4c3c2c\n           ps-eval --game kansas-city-lowball 7c5c4c3c2c\n\n\n### Windows\n\nGetting boost to work under windows can be a bit of a challenge.\nOne of the easier ways is to install precompiled librares.  There\nis a batch of them available at sourceforge. If you're working\nwith Visual Studio 2010, you will probably need the 32 bit\nlibraries.  [boost precomplied libraries]\n(http://sourceforge.net/projects/boost/files/boost-binaries/1.53.0/)\n\nUnder windows, the cmake gui can be used to construct solution\nand project files for Visual Studio 2010.  To do this, browse\nsource to locate the programs directory git/pokerstove/programs.\nThen create a build dir for the project.  At the bottom of the\ngui click Configure, then Generate.  You may have to edit the\ngit/pokerstove/programs/CMakeLists.txt to point cmake to your\ninstallation of boost.\n\nOnce you've done that, you should be able to select\n\n    Menu->Build->Build Solution\n\nto build the sample program.\n\n\n### OSX\n\nIn order to build under Max OSX, you'll need to install XCode,\ngit, cmake, macports, and boost.  The first four can be installed\nin the conventional manner, with XCode coming form the App Store, cmake,\ngit and macports downloaded from the web.  The macports package is a\ntypical unix package management utility and is required to install boost.\nOnce you've installed and selfupdate'd macports, you can install boost:\n\n    sudo port install boost -no_static\n\nOr\n\n    brew install boost cmake\n\nFrom there you can run the cmake gui as in windows.  This will create\nan XCode project which should compile the sample utility. Alternatively,\nfollow the command  line `cmake` instructions in the [Linux section](#linux)."
}
