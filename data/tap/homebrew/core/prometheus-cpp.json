{
  "name": "prometheus-cpp",
  "full_name": "prometheus-cpp",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Prometheus Client Library for Modern C++",
  "license": "MIT",
  "homepage": "https://github.com/jupp0r/prometheus-cpp",
  "versions": {
    "stable": "1.1.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/jupp0r/prometheus-cpp.git",
      "tag": "v1.1.0",
      "revision": "c9ffcdda9086ffd9e1283ea7a0276d831f3c8a8d",
      "checksum": null
    },
    "head": {
      "url": "https://github.com/jupp0r/prometheus-cpp.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/prometheus-cpp/blobs/sha256:d6e257e9946b0cde088a86af5d0a839e2236972c662c2983b813557b7eb02ede",
          "sha256": "d6e257e9946b0cde088a86af5d0a839e2236972c662c2983b813557b7eb02ede"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/prometheus-cpp/blobs/sha256:1878e13f58c5fd8a0372e1e3f2716b87fc44b38463c684eca1630c6f6fbdb689",
          "sha256": "1878e13f58c5fd8a0372e1e3f2716b87fc44b38463c684eca1630c6f6fbdb689"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/prometheus-cpp/blobs/sha256:2f0502684fa4c30929c1cfdf07f9aa7e5d4d38b4d0714e01c329115fada715f2",
          "sha256": "2f0502684fa4c30929c1cfdf07f9aa7e5d4d38b4d0714e01c329115fada715f2"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/prometheus-cpp/blobs/sha256:1c91c6b106e041efdade1811e5924c883e6c7e69a56008ce50bec35a98f318a5",
          "sha256": "1c91c6b106e041efdade1811e5924c883e6c7e69a56008ce50bec35a98f318a5"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/prometheus-cpp/blobs/sha256:f40470268823a385b19db6ba6341573ad006901f4702f9b6db2fe7165278b497",
          "sha256": "f40470268823a385b19db6ba6341573ad006901f4702f9b6db2fe7165278b497"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/prometheus-cpp/blobs/sha256:8d2f91d1402fc65e4a5e0803dbf8c315b6d14db84559a32fe024c741f520e9a6",
          "sha256": "8d2f91d1402fc65e4a5e0803dbf8c315b6d14db84559a32fe024c741f520e9a6"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/prometheus-cpp/blobs/sha256:1d472883a72631b29594c8c06b342300c717a6dc36f8dcd5edccdf629e7bdd5b",
          "sha256": "1d472883a72631b29594c8c06b342300c717a6dc36f8dcd5edccdf629e7bdd5b"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/prometheus-cpp/blobs/sha256:19eec03c31caaf8bc45b222a578b81a90fefe8a7ae5be01a9377d3cb257058c4",
          "sha256": "19eec03c31caaf8bc45b222a578b81a90fefe8a7ae5be01a9377d3cb257058c4"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "curl",
    "zlib"
  ],
  "uses_from_macos_bounds": [
    {},
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/prometheus-cpp.rb",
  "ruby_source_checksum": {
    "sha256": "4e7312d5617fbb2ca60a36b08b5f8e266542d81b075f44db365c8a3a00c2ad86"
  },
  "date_added": "2020-09-14T07:46:33+00:00",
  "readme": "# Prometheus Client Library for Modern C++\n\n[![CI Status](https://github.com/jupp0r/prometheus-cpp/workflows/Continuous%20Integration/badge.svg)](https://github.com/jupp0r/prometheus-cpp/actions?workflow=Continuous+Integration)\n[![Travis Status](https://travis-ci.org/jupp0r/prometheus-cpp.svg?branch=master)](https://travis-ci.org/jupp0r/prometheus-cpp)\n[![Coverage Status](https://coveralls.io/repos/github/jupp0r/prometheus-cpp/badge.svg?branch=master)](https://coveralls.io/github/jupp0r/prometheus-cpp?branch=master)\n[![Coverity Scan](https://scan.coverity.com/projects/10567/badge.svg)](https://scan.coverity.com/projects/jupp0r-prometheus-cpp)\n\nThis library aims to enable\n[Metrics-Driven Development](https://sookocheff.com/post/mdd/mdd/) for\nC++ services. It implements the\n[Prometheus Data Model](https://prometheus.io/docs/concepts/data_model/),\na powerful abstraction on which to collect and expose metrics. We\noffer the possibility for metrics to be collected by Prometheus, but\nother push/pull collections can be added as plugins.\n\n## Usage\n\nSee https://jupp0r.github.io/prometheus-cpp for more detailed interface documentation.\n\n``` c++\n#include <prometheus/counter.h>\n#include <prometheus/exposer.h>\n#include <prometheus/registry.h>\n\n#include <array>\n#include <chrono>\n#include <cstdlib>\n#include <memory>\n#include <string>\n#include <thread>\n\nint main() {\n  using namespace prometheus;\n\n  // create an http server running on port 8080\n  Exposer exposer{\"127.0.0.1:8080\"};\n\n  // create a metrics registry\n  // @note it's the users responsibility to keep the object alive\n  auto registry = std::make_shared<Registry>();\n\n  // add a new counter family to the registry (families combine values with the\n  // same name, but distinct label dimensions)\n  //\n  // @note please follow the metric-naming best-practices:\n  // https://prometheus.io/docs/practices/naming/\n  auto& packet_counter = BuildCounter()\n                             .Name(\"observed_packets_total\")\n                             .Help(\"Number of observed packets\")\n                             .Register(*registry);\n\n  // add and remember dimensional data, incrementing those is very cheap\n  auto& tcp_rx_counter =\n      packet_counter.Add({{\"protocol\", \"tcp\"}, {\"direction\", \"rx\"}});\n  auto& tcp_tx_counter =\n      packet_counter.Add({{\"protocol\", \"tcp\"}, {\"direction\", \"tx\"}});\n  auto& udp_rx_counter =\n      packet_counter.Add({{\"protocol\", \"udp\"}, {\"direction\", \"rx\"}});\n  auto& udp_tx_counter =\n      packet_counter.Add({{\"protocol\", \"udp\"}, {\"direction\", \"tx\"}});\n\n  // add a counter whose dimensional data is not known at compile time\n  // nevertheless dimensional values should only occur in low cardinality:\n  // https://prometheus.io/docs/practices/naming/#labels\n  auto& http_requests_counter = BuildCounter()\n                                    .Name(\"http_requests_total\")\n                                    .Help(\"Number of HTTP requests\")\n                                    .Register(*registry);\n\n  // ask the exposer to scrape the registry on incoming HTTP requests\n  exposer.RegisterCollectable(registry);\n\n  for (;;) {\n    std::this_thread::sleep_for(std::chrono::seconds(1));\n    const auto random_value = std::rand();\n\n    if (random_value & 1) tcp_rx_counter.Increment();\n    if (random_value & 2) tcp_tx_counter.Increment();\n    if (random_value & 4) udp_rx_counter.Increment();\n    if (random_value & 8) udp_tx_counter.Increment();\n\n    const std::array<std::string, 4> methods = {\"GET\", \"PUT\", \"POST\", \"HEAD\"};\n    auto method = methods.at(random_value % methods.size());\n    // dynamically calling Family<T>.Add() works but is slow and should be\n    // avoided\n    http_requests_counter.Add({{\"method\", method}}).Increment();\n  }\n  return 0;\n}\n\n```\n\n## Requirements\n\nUsing `prometheus-cpp` requires a C++11 compliant compiler. It has been successfully tested with GNU GCC 7.4 on Ubuntu Bionic (18.04) and Visual Studio 2017.\n\n## Building\n\nThere are two supported ways to build\n`prometheus-cpp` - [CMake](https://cmake.org)\nand [bazel](https://bazel.io). Both are tested in CI and should work\non master and for all releases.\n\nIn case these instructions don't work for you, looking at\nthe [GitHub Workflows](.github/workflows) might help.\n\n### via CMake\n\nFor CMake builds don't forget to fetch the submodules first. Please note that\n[zlib](https://zlib.net/) and [libcurl](https://curl.se/) are not provided by\nthe included submodules. In the example below their usage is disabled.\n\nThen build as usual.\n\n``` shell\n# fetch third-party dependencies\ngit submodule init\ngit submodule update\n\nmkdir _build\ncd _build\n\n# run cmake\ncmake .. -DBUILD_SHARED_LIBS=ON -DENABLE_PUSH=OFF -DENABLE_COMPRESSION=OFF\n\n# build\ncmake --build . --parallel 4\n\n# run tests\nctest -V\n\n# install the libraries and headers\ncmake --install .\n```\n\n### via Bazel\n\nInstall [bazel](https://www.bazel.io).  Bazel makes it easy to add\nthis repo to your project as a dependency. Just add the following\nto your `WORKSPACE`:\n\n```python\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\", \"http_file\")\nhttp_archive(\n    name = \"com_github_jupp0r_prometheus_cpp\",\n    strip_prefix = \"prometheus-cpp-master\",\n    urls = [\"https://github.com/jupp0r/prometheus-cpp/archive/master.zip\"],\n)\n\nload(\"@com_github_jupp0r_prometheus_cpp//bazel:repositories.bzl\", \"prometheus_cpp_repositories\")\n\nprometheus_cpp_repositories()\n```\n\nThen, you can reference this library in your own `BUILD` file, as\ndemonstrated with the sample server included in this repository:\n\n```python\ncc_binary(\n    name = \"sample_server\",\n    srcs = [\"sample_server.cc\"],\n    deps = [\"@com_github_jupp0r_prometheus_cpp//pull\"],\n)\n```\n\nWhen you call `prometheus_cpp_repositories()` in your `WORKSPACE` file,\nyou load the following dependencies, if they do not exist yet, into your project:\n\n* `civetweb` for [Civetweb](https://github.com/civetweb/civetweb)\n* `com_google_googletest` for [Google Test](https://github.com/google/googletest)\n* `com_github_google_benchmark` for [Google Benchmark](https://github.com/google/benchmark)\n* `com_github_curl` for [curl](https://curl.haxx.se/)\n* `net_zlib_zlib` for [zlib](http://www.zlib.net/)\n\nThe list of dependencies is also available from file [repositories.bzl](bazel/repositories.bzl).\n\n## Packaging\n\nBy configuring CPack you can generate an installer like a\nDebian package (.deb) or RPM (.rpm) for the static or dynamic\nlibraries so they can be easily installed on\nother systems.\n\nPlease refer to the [CPack](https://cmake.org/cmake/help/latest/module/CPack.html)\ndocumentation for all available generators and their\nconfiguration options.\n\nTo generate a Debian package you could follow these steps:\n\n``` shell\n# fetch third-party dependencies\ngit submodule update --init\n\n# run cmake\ncmake -B_build -DCPACK_GENERATOR=DEB -DBUILD_SHARED_LIBS=ON # or OFF for static libraries\n\n# build and package\ncmake --build _build --target package --parallel $(nproc)\n```\n\nThis will place an appropriately named .deb in the\n`_build` folder. To build a RPM package set the `CPACK_GENERATOR`\nvariable to `RPM`. \n\n## Consuming the installed project\n\n### CMake\n\nConsuming prometheus-cpp via CMake is the preferred way because all the dependencies\nbetween the three prometheus-cpp libraries are handled correctly.\n\nThe `cmake/project-import` directory contains an\nexample project and minimal [CMakeLists.txt](cmake/project-import-cmake/CMakeLists.txt).\n\n### vcpkg\n\nThe [vcpkg](https://github.com/microsoft/vcpkg) package manager contains a\nprometheus-cpp port which has been tested on Linux, macOS, and Windows.\n\n### Conan\n\n[Conan](https://conan.io/) package manager contains prometheus-cpp package as well\nin [ConanCenter](https://conan.io/center/prometheus-cpp) repository\n\n### Plain Makefiles\n\nWhen manually linking prometheus-cpp the library order matters. The needed\nlibraries depend on the individual use case but the following should work for the pull metrics approach:\n\n```\n-lprometheus-cpp-pull -lprometheus-cpp-core -lz\n```\n\nFor the push-workflow please try:\n\n```\n-lprometheus-cpp-push -lprometheus-cpp-core -lcurl -lz\n```\n\n## Contributing\n\nPlease adhere to the [Google C++ Style\nGuide](https://google.github.io/styleguide/cppguide.html). Make sure\nto clang-format your patches before opening a PR. Also make sure to\nadhere to [these commit message\nguidelines](https://chris.beams.io/posts/git-commit/).\n\nYou can check out this repo and build the library using\n``` bash\nbazel build //...\n```\n\nRun the unit tests using\n```\nbazel test //...\n```\n\nThere is also an integration test that\nuses [telegraf](https://github.com/influxdata/telegraf) to scrape a\nsample server. With telegraf installed, it can be run using\n```\nbazel test //pull/tests/integration:scrape-test\n```\n\n## Benchmarks\n\nThere's a benchmark suite you can run:\n\n```\nbazel run -c opt //core/benchmarks\n\nINFO: Analysed target //core/benchmarks:benchmarks (0 packages loaded, 0 targets configured).\nINFO: Found 1 target...\nTarget //core/benchmarks:benchmarks up-to-date:\n  bazel-bin/core/benchmarks/benchmarks\nINFO: Elapsed time: 0.356s, Critical Path: 0.01s, Remote (0.00% of the time): [queue: 0.00%, setup: 0.00%, process: 0.00%]\nINFO: 0 processes.\nINFO: Build completed successfully, 1 total action\nINFO: Build completed successfully, 1 total action\n2018-11-30 15:13:14\nRun on (4 X 2200 MHz CPU s)\nCPU Caches:\n  L1 Data 32K (x2)\n  L1 Instruction 32K (x2)\n  L2 Unified 262K (x2)\n  L3 Unified 4194K (x1)\n-----------------------------------------------------------------------------------\nBenchmark                                            Time           CPU Iterations\n-----------------------------------------------------------------------------------\nBM_Counter_Increment                                13 ns         12 ns   55616469\nBM_Counter_Collect                                   7 ns          7 ns   99823170\nBM_Gauge_Increment                                  12 ns         12 ns   51511873\nBM_Gauge_Decrement                                  12 ns         12 ns   56831098\nBM_Gauge_SetToCurrentTime                          184 ns        183 ns    3928964\nBM_Gauge_Collect                                     6 ns          6 ns  117223478\nBM_Histogram_Observe/0                             134 ns        124 ns    5665310\nBM_Histogram_Observe/1                             122 ns        120 ns    5937185\nBM_Histogram_Observe/8                             137 ns        135 ns    4652863\nBM_Histogram_Observe/64                            143 ns        143 ns    4835957\nBM_Histogram_Observe/512                           259 ns        257 ns    2334750\nBM_Histogram_Observe/4096                         1545 ns       1393 ns     620754\nBM_Histogram_Collect/0                             103 ns        102 ns    5654829\nBM_Histogram_Collect/1                             100 ns        100 ns    7015153\nBM_Histogram_Collect/8                             608 ns        601 ns    1149652\nBM_Histogram_Collect/64                           1438 ns       1427 ns     515236\nBM_Histogram_Collect/512                          5178 ns       5159 ns     114619\nBM_Histogram_Collect/4096                        33527 ns      33280 ns      20785\nBM_Registry_CreateFamily                           320 ns        316 ns    2021567\nBM_Registry_CreateCounter/0                        128 ns        128 ns    5487140\nBM_Registry_CreateCounter/1                       2066 ns       2058 ns     386002\nBM_Registry_CreateCounter/8                       7672 ns       7634 ns      91328\nBM_Registry_CreateCounter/64                     63270 ns      62761 ns      10780\nBM_Registry_CreateCounter/512                   560714 ns     558328 ns       1176\nBM_Registry_CreateCounter/4096                18672798 ns   18383000 ns         35\nBM_Summary_Observe/0/iterations:262144            9351 ns       9305 ns     262144\nBM_Summary_Observe/1/iterations:262144            9242 ns       9169 ns     262144\nBM_Summary_Observe/8/iterations:262144           14344 ns      14195 ns     262144\nBM_Summary_Observe/64/iterations:262144          19176 ns      18950 ns     262144\nBM_Summary_Collect/0/0                              31 ns         30 ns   24873766\nBM_Summary_Collect/1/0                             166 ns        166 ns    4266706\nBM_Summary_Collect/8/0                            1040 ns       1036 ns     660527\nBM_Summary_Collect/64/0                           4529 ns       4489 ns     155600\nBM_Summary_Collect/0/1                              28 ns         28 ns   24866697\nBM_Summary_Collect/1/1                             190 ns        188 ns    3930354\nBM_Summary_Collect/8/1                            1372 ns       1355 ns     535779\nBM_Summary_Collect/64/1                           9901 ns       9822 ns      64632\nBM_Summary_Collect/0/8                              29 ns         29 ns   24922651\nBM_Summary_Collect/1/8                             217 ns        215 ns    3278381\nBM_Summary_Collect/8/8                            2275 ns       2256 ns     282503\nBM_Summary_Collect/64/8                          56790 ns      55804 ns      13878\nBM_Summary_Collect/0/64                             32 ns         31 ns   22548350\nBM_Summary_Collect/1/64                            395 ns        389 ns    1817073\nBM_Summary_Collect/8/64                          10187 ns      10064 ns      71928\nBM_Summary_Collect/64/64                        374835 ns     373560 ns       1812\nBM_Summary_Collect/0/512                            28 ns         28 ns   25234228\nBM_Summary_Collect/1/512                          1710 ns       1639 ns     802285\nBM_Summary_Collect/8/512                         50355 ns      49335 ns      15975\nBM_Summary_Collect/64/512                      2520972 ns    2493417 ns        295\nBM_Summary_Collect/0/4096                           31 ns         31 ns   24059034\nBM_Summary_Collect/1/4096                         2719 ns       2698 ns     286186\nBM_Summary_Collect/8/4096                       121689 ns     119995 ns       5647\nBM_Summary_Collect/64/4096                     5660131 ns    5587634 ns        134\nBM_Summary_Collect/0/32768                          29 ns         29 ns   22217567\nBM_Summary_Collect/1/32768                        4344 ns       4294 ns     138135\nBM_Summary_Collect/8/32768                      331563 ns     326403 ns       2017\nBM_Summary_Collect/64/32768                   16363553 ns   16038182 ns         44\nBM_Summary_Collect/0/262144                         27 ns         27 ns   23923036\nBM_Summary_Collect/1/262144                      10457 ns      10332 ns      67690\nBM_Summary_Collect/8/262144                     930434 ns     869234 ns        792\nBM_Summary_Collect/64/262144                  39217069 ns   39054846 ns         13\nBM_Summary_Observe_Common/iterations:262144       5587 ns       5557 ns     262144\nBM_Summary_Collect_Common/0                        676 ns        673 ns    1054630\nBM_Summary_Collect_Common/1                        709 ns        705 ns     990659\nBM_Summary_Collect_Common/8                       1030 ns       1025 ns     685649\nBM_Summary_Collect_Common/64                      2066 ns       2055 ns     339969\nBM_Summary_Collect_Common/512                     5754 ns       5248 ns     156895\nBM_Summary_Collect_Common/4096                   23894 ns      23292 ns      31096\nBM_Summary_Collect_Common/32768                  49831 ns      49292 ns      13492\nBM_Summary_Collect_Common/262144                128723 ns     126987 ns       5579\n```\n\n## Project Status\nStable and used in production.\n\nParts of the library are instrumented by itself\n(bytes scraped, number of scrapes, scrape request latencies).  There\nis a working [example](pull/tests/integration/sample_server.cc) that's\nscraped by telegraf as part of integration tests.\n\n## FAQ\n\n### What scrape formats do you support\n\nOnly the [Prometheus Text Exposition\nFormat](https://github.com/prometheus/docs/blob/master/content/docs/instrumenting/exposition_formats.md#text-format-details).\nSupport for the protobuf format was removed because it's been removed\nfrom Prometheus 2.0.\n\n## License\n\nMIT"
}
