{
  "name": "z3",
  "full_name": "z3",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "High-performance theorem prover",
  "license": "MIT",
  "homepage": "https://github.com/Z3Prover/z3",
  "versions": {
    "stable": "4.12.2",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/Z3Prover/z3/archive/z3-4.12.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "9f58f3710bd2094085951a75791550f547903d75fe7e2fcb373c5f03fc761b8f"
    },
    "head": {
      "url": "https://github.com/Z3Prover/z3.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/z3/blobs/sha256:e8006cc04b33c0d2f834c7b73f2887b9832f979600488851b7a5091d13239a7c",
          "sha256": "e8006cc04b33c0d2f834c7b73f2887b9832f979600488851b7a5091d13239a7c"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/z3/blobs/sha256:431799c83071ea311fbaf551e6857edc93242e2858beadb8487f564575bd8128",
          "sha256": "431799c83071ea311fbaf551e6857edc93242e2858beadb8487f564575bd8128"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/z3/blobs/sha256:56e46cd536c280cc8fb5e960f0cae7b70cccc0c7891e658aeec1c8a8717dc7b3",
          "sha256": "56e46cd536c280cc8fb5e960f0cae7b70cccc0c7891e658aeec1c8a8717dc7b3"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/z3/blobs/sha256:70990b1e46735ced52fe8ee0f8746982d13dbb0ba104b4af21755795e9e79cc1",
          "sha256": "70990b1e46735ced52fe8ee0f8746982d13dbb0ba104b4af21755795e9e79cc1"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/z3/blobs/sha256:80ce63d42c4377b4e4d30299bbb9a99f3adfd2d878936ad6717e63bd73fd28d9",
          "sha256": "80ce63d42c4377b4e4d30299bbb9a99f3adfd2d878936ad6717e63bd73fd28d9"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/z3/blobs/sha256:6bb2b22e2ac439e31e786f17b4cc6d64e2449b438fbf899b3cd9cc004351ba24",
          "sha256": "6bb2b22e2ac439e31e786f17b4cc6d64e2449b438fbf899b3cd9cc004351ba24"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/z3/blobs/sha256:2f947a5b0ea9e97728008bff971b390dc6140849cebe059a431a7a41dab5ea13",
          "sha256": "2f947a5b0ea9e97728008bff971b390dc6140849cebe059a431a7a41dab5ea13"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake",
    "python@3.11"
  ],
  "dependencies": [],
  "test_dependencies": [
    "python@3.11"
  ],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/z3.rb",
  "ruby_source_checksum": {
    "sha256": "d4d7a692b39249c31ab86fedd9f0005e0aad29b07234f7d6f6e120d8b44a7596"
  },
  "date_added": "2015-10-15T14:26:55+01:00",
  "readme": "# Z3\n\nZ3 is a theorem prover from Microsoft Research. \nIt is licensed under the [MIT license](LICENSE.txt).\n\nIf you are not familiar with Z3, you can start [here](https://github.com/Z3Prover/z3/wiki#background).\n\nPre-built binaries for stable and nightly releases are available from [here](https://github.com/Z3Prover/z3/releases).\n\nZ3 can be built using [Visual Studio][1], a [Makefile][2] or using [CMake][3]. It provides\n[bindings for several programming languages][4]. \n\nSee the [release notes](RELEASE_NOTES.md) for notes on various stable releases of Z3.\n\n## Build status\n\n| Azure Pipelines | Code Coverage | Open Bugs | Android Build | WASM Build | \n| --------------- | --------------|-----------|---------------|------------|\n| [![Build Status](https://dev.azure.com/Z3Public/Z3/_apis/build/status/Z3Prover.z3?branchName=master)](https://dev.azure.com/Z3Public/Z3/_build/latest?definitionId=1&branchName=master) | [![CodeCoverage](https://github.com/Z3Prover/z3/actions/workflows/coverage.yml/badge.svg)](https://github.com/Z3Prover/z3/actions/workflows/coverage.yml) | [![Open Issues](https://github.com/Z3Prover/z3/actions/workflows/wip.yml/badge.svg)](https://github.com/Z3Prover/z3/actions/workflows/wip.yml) |[![Android Build](https://github.com/Z3Prover/z3/actions/workflows/android-build.yml/badge.svg)](https://github.com/Z3Prover/z3/actions/workflows/android-build.yml) | [![WASM Build](https://github.com/Z3Prover/z3/actions/workflows/wasm.yml/badge.svg)](https://github.com/Z3Prover/z3/actions/workflows/wasm.yml) |\n\n<a href=\"https://github.com/z3prover/z3/pkgs/container/z3\">Docker image</a>.\n\n[1]: #building-z3-on-windows-using-visual-studio-command-prompt\n[2]: #building-z3-using-make-and-gccclang\n[3]: #building-z3-using-cmake\n[4]: #z3-bindings\n\n## Building Z3 on Windows using Visual Studio Command Prompt\n\n32-bit builds, start with:\n\n```bash\npython scripts/mk_make.py\n```\n\nor instead, for a 64-bit build:\n\n```bash\npython scripts/mk_make.py -x\n```\n\nthen:\n\n```bash\ncd build\nnmake\n```\n\nZ3 uses C++17. The recommended version of Visual Studio is therefore VS2019. \n\n## Building Z3 using make and GCC/Clang\n\nExecute:\n\n```bash\npython scripts/mk_make.py\ncd build\nmake\nsudo make install\n```\n\nNote by default ``g++`` is used as the C++ compiler if it is available. If you\nwould prefer to use Clang change the ``mk_make.py`` invocation to:\n\n```bash\nCXX=clang++ CC=clang python scripts/mk_make.py\n```\n\nNote that Clang < 3.7 does not support OpenMP.\n\nYou can also build Z3 for Windows using Cygwin and the Mingw-w64 cross-compiler.\nTo configure that case correctly, make sure to use Cygwin's own python and not\nsome Windows installation of Python.\n\nFor a 64 bit build (from Cygwin64), configure Z3's sources with\n```bash\nCXX=x86_64-w64-mingw32-g++ CC=x86_64-w64-mingw32-gcc AR=x86_64-w64-mingw32-ar python scripts/mk_make.py\n```\nA 32 bit build should work similarly (but is untested); the same is true for 32/64 bit builds from within Cygwin32.\n\nBy default, it will install z3 executable at ``PREFIX/bin``, libraries at\n``PREFIX/lib``, and include files at ``PREFIX/include``, where ``PREFIX``\ninstallation prefix is inferred by the ``mk_make.py`` script. It is usually\n``/usr`` for most Linux distros, and ``/usr/local`` for FreeBSD and macOS. Use\nthe ``--prefix=`` command line option to change the install prefix. For example:\n\n```bash\npython scripts/mk_make.py --prefix=/home/leo\ncd build\nmake\nmake install\n```\n\nTo uninstall Z3, use\n\n```bash\nsudo make uninstall\n```\n\nTo clean Z3 you can delete the build directory and run the ``mk_make.py`` script again.\n\n## Building Z3 using CMake\n\nZ3 has a build system using CMake. Read the [README-CMake.md](README-CMake.md)\nfile for details. It is recommended for most build tasks, \nexcept for building OCaml bindings.\n\n## Building Z3 using vcpkg\n\nvcpkg is a full platform package manager, you can easily install libzmq with vcpkg.\n \nExecute:\n\n```bash\ngit clone https://github.com/microsoft/vcpkg.git\n./bootstrap-vcpkg.bat # For powershell\n./bootstrap-vcpkg.sh # For bash\n./vcpkg install z3\n```\n\n## Dependencies\nZ3 itself has few dependencies. It uses C++ runtime libraries, including pthreads for multi-threading.\nIt is optionally possible to use GMP for multi-precision integers, but Z3 contains its own self-contained \nmulti-precision functionality. Python is required to build Z3. To build Java, .Net, OCaml, \nJulia APIs requires installing relevant tool chains.\n\n## Z3 bindings\n\nZ3 has bindings for various programming languages.\n\n### ``.NET``\n\nYou can install a nuget package for the latest release Z3 from [nuget.org](https://www.nuget.org/packages/Microsoft.Z3/).\n\nUse the ``--dotnet`` command line flag with ``mk_make.py`` to enable building these.\n\n\nSee [``examples/dotnet``](examples/dotnet) for examples.\n\n### ``C``\n\nThese are always enabled.\n\nSee [``examples/c``](examples/c) for examples.\n\n### ``C++``\n\nThese are always enabled.\n\nSee [``examples/c++``](examples/c++) for examples.\n\n### ``Java``\n\nUse the ``--java`` command line flag with ``mk_make.py`` to enable building these.\n\nSee [``examples/java``](examples/java) for examples.\n\n### ``OCaml``\n\nUse the ``--ml`` command line flag with ``mk_make.py`` to enable building these.\n\nSee [``examples/ml``](examples/ml) for examples.\n\n### ``Python``\n\nYou can install the Python wrapper for Z3 for the latest release from pypi using the command\n\n```bash\n   pip install z3-solver\n```\n\nUse the ``--python`` command line flag with ``mk_make.py`` to enable building these.\n\nNote that it is required on certain platforms that the Python package directory\n(``site-packages`` on most distributions and ``dist-packages`` on Debian based\ndistributions) live under the install prefix. If you use a non standard prefix\nyou can use the ``--pypkgdir`` option to change the Python package directory\nused for installation. For example:\n\n```bash\npython scripts/mk_make.py --prefix=/home/leo --python --pypkgdir=/home/leo/lib/python-2.7/site-packages\n```\n\nIf you do need to install to a non standard prefix a better approach is to use\na [Python virtual environment](https://virtualenv.readthedocs.org/en/latest/)\nand install Z3 there. Python packages also work for Python3.\nUnder Windows, recall to build inside the Visual C++ native command build environment.\nNote that the ``build/python/z3`` directory should be accessible from where python is used with Z3 \nand it depends on ``libz3.dll`` to be in the path.\n\n```bash\nvirtualenv venv\nsource venv/bin/activate\npython scripts/mk_make.py --python\ncd build\nmake\nmake install\n# You will find Z3 and the Python bindings installed in the virtual environment\nvenv/bin/z3 -h\n...\npython -c 'import z3; print(z3.get_version_string())'\n...\n```\n\nSee [``examples/python``](examples/python) for examples.\n\n### ``Julia``\n\nThe Julia package [Z3.jl](https://github.com/ahumenberger/Z3.jl) wraps the C++ API of Z3. Information about updating and building the Julia bindings can be found in [src/api/julia](src/api/julia).\n\n### ``Web Assembly`` / ``TypeScript`` / ``JavaScript``\n\nA WebAssembly build with associated TypeScript typings is published on npm as [z3-solver](https://www.npmjs.com/package/z3-solver). Information about building these bindings can be found in [src/api/js](src/api/js).\n\n### Smalltalk (``Pharo`` / ``Smalltalk/X``)\n\nProject [MachineArithmetic](https://github.com/shingarov/MachineArithmetic) provides Smalltalk interface\nto Z3's C API. For more information, see [MachineArithmetic/README.md](https://github.com/shingarov/MachineArithmetic/blob/pure-z3/MachineArithmetic/README.md)\n\n## System Overview\n\n![System Diagram](https://github.com/Z3Prover/doc/blob/master/programmingz3/images/Z3Overall.jpg)\n\n## Interfaces\n\n* Default input format is [SMTLIB2](http://smtlib.cs.uiowa.edu)\n\n* Other native foreign function interfaces:\n* [C++ API](https://z3prover.github.io/api/html/group__cppapi.html)\n* [.NET API](https://z3prover.github.io/api/html/namespace_microsoft_1_1_z3.html)\n* [Java API](https://z3prover.github.io/api/html/namespacecom_1_1microsoft_1_1z3.html)\n* [Python API](https://z3prover.github.io/api/html/namespacez3py.html) (also available in [pydoc format](https://z3prover.github.io/api/html/z3.html))\n* C\n* OCaml\n* [Julia](https://github.com/ahumenberger/Z3.jl)\n* [Smalltalk](https://github.com/shingarov/MachineArithmetic/blob/pure-z3/MachineArithmetic/README.md) (supports Pharo and Smalltalk/X)"
}
