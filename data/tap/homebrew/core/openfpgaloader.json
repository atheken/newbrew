{
  "name": "openfpgaloader",
  "full_name": "openfpgaloader",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Universal utility for programming FPGA",
  "license": "Apache-2.0",
  "homepage": "https://github.com/trabucayre/openFPGALoader",
  "versions": {
    "stable": "0.10.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/trabucayre/openFPGALoader/archive/v0.10.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "966b4629df86b1d520ddd8a4e0a3fc00060b26b5ab4e172b596bd9d4659a196e"
    },
    "head": {
      "url": "https://github.com/trabucayre/openFPGALoader.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/openfpgaloader/blobs/sha256:d4b309035e824959bfc0a802e0d4f31501082e1508fbea0c622ec95576220a5c",
          "sha256": "d4b309035e824959bfc0a802e0d4f31501082e1508fbea0c622ec95576220a5c"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/openfpgaloader/blobs/sha256:0a8a0865cee8216b22463607eef522eb9b5a0530f55e8cf2946890f8eaca49f4",
          "sha256": "0a8a0865cee8216b22463607eef522eb9b5a0530f55e8cf2946890f8eaca49f4"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/openfpgaloader/blobs/sha256:206a214c5ca198b8e105d3311426965b8467bee1bc5f4bd2dcd32e3927d40ae0",
          "sha256": "206a214c5ca198b8e105d3311426965b8467bee1bc5f4bd2dcd32e3927d40ae0"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/openfpgaloader/blobs/sha256:d32d70c3674b960046f995f1014bd299f7446c9b052f1b4d114eedb80bd80157",
          "sha256": "d32d70c3674b960046f995f1014bd299f7446c9b052f1b4d114eedb80bd80157"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/openfpgaloader/blobs/sha256:48bb9db99d81f75cae462f7097e6c9f76b8dba57ca4d2752353323111bac957b",
          "sha256": "48bb9db99d81f75cae462f7097e6c9f76b8dba57ca4d2752353323111bac957b"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/openfpgaloader/blobs/sha256:178b66c07d0c8241f131f87225369e674cc3a900b2e40edb41c475affccb17cb",
          "sha256": "178b66c07d0c8241f131f87225369e674cc3a900b2e40edb41c475affccb17cb"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/openfpgaloader/blobs/sha256:666014c49ff365fcbd120ddbbf0569b4044c521133985e09acc44c35bbda6d6f",
          "sha256": "666014c49ff365fcbd120ddbbf0569b4044c521133985e09acc44c35bbda6d6f"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake",
    "pkg-config"
  ],
  "dependencies": [
    "libftdi",
    "libusb"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "zlib"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/openfpgaloader.rb",
  "ruby_source_checksum": {
    "sha256": "a933a6c3b2f3b775b77af0d6a88eab3b8900fe26cf481ab1c61c0e34e15dc411"
  },
  "date_added": "2021-07-17T17:36:52+00:00",
  "readme": "# openFPGALoader\n\n<p align=\"right\">\n  <a title=\"Documentation\" href=\"https://trabucayre.github.io/openFPGALoader\"><img src=\"https://img.shields.io/website.svg?label=trabucayre.github.io%2FopenFPGALoader&longCache=true&style=flat-square&url=http%3A%2F%2Ftrabucayre.github.io%2FopenFPGALoader%2Findex.html&logo=GitHub\"></a><!--\n  -->\n  <a title=\"'Test' workflow Status\" href=\"https://github.com/trabucayre/openFPGALoader/actions/workflows/Test.yml\"><img alt=\"'Test' workflow Status\" src=\"https://img.shields.io/github/actions/workflow/status/trabucayre/openFPGALoader/Test.yml?branch=master&longCache=true&style=flat-square&label=Test&logo=github%20actions&logoColor=fff\"></a><!--\n  -->\n  <a title=\"Releases\" href=\"https://github.com/trabucayre/openFPGALoader/releases\"><img src=\"https://img.shields.io/github/commits-since/trabucayre/openFPGALoader/latest.svg?longCache=true&style=flat-square&logo=git&logoColor=fff\"></a>\n</p>\n\n<p align=\"center\">\n  <strong><a href=\"https://trabucayre.github.io/openFPGALoader/guide/first-steps.html\">First steps</a> • <a href=\"https://trabucayre.github.io/openFPGALoader/guide/install.html\">Install</a> • <a href=\"https://trabucayre.github.io/openFPGALoader/guide/troubleshooting.html\">Troubleshooting</a></strong> • <a href=\"https://trabucayre.github.io/openFPGALoader/guide/advanced.html\">Advanced usage</a>\n</p>\n\nUniversal utility for programming FPGAs. Compatible with many boards, cables and FPGA from major manufacturers (Xilinx, Altera/Intel, Lattice, Gowin, Efinix, Anlogic, Cologne Chip). openFPGALoader works on Linux, Windows and macOS.\n\nNot sure if your hardware is supported? Check the hardware compatibility lists:\n\n * [FPGA compatibility list](https://trabucayre.github.io/openFPGALoader/compatibility/fpga.html)\n * [Board compatibility list](https://trabucayre.github.io/openFPGALoader/compatibility/board.html)\n * [Cable compatibility list](https://trabucayre.github.io/openFPGALoader/compatibility/cable.html)\n\nAlso checkout the vendor-specific documentation:\n[Anlogic](https://trabucayre.github.io/openFPGALoader/vendors/anlogic.html),\n[Cologne Chip](https://trabucayre.github.io/openFPGALoader/vendors/colognechip.html),\n[Efinix](https://trabucayre.github.io/openFPGALoader/vendors/efinix.html),\n[Gowin](https://trabucayre.github.io/openFPGALoader/vendors/gowin.html),\n[Intel/Altera](https://trabucayre.github.io/openFPGALoader/vendors/intel.html),\n[Lattice](https://trabucayre.github.io/openFPGALoader/vendors/lattice.html),\n[Xilinx](https://trabucayre.github.io/openFPGALoader/vendors/xilinx.html).\n\nOpenFPGALoader has a dedicated channel: [#openFPGALoader at libera.chat](https://web.libera.chat/#openFPGALoader).\n\n## Quick Usage\n\n`arty` in the example below is one of the many FPGA board configurations listed [here](https://trabucayre.github.io/openFPGALoader/compatibility/board.html).\n\n```bash\nopenFPGALoader -b arty arty_bitstream.bit # Loading in SRAM\nopenFPGALoader -b arty -f arty_bitstream.bit # Writing in flash\n```\n\nYou can also specify a JTAG cable model (complete list [here](https://trabucayre.github.io/openFPGALoader/compatibility/cable.html)) instead of the board model:\n\n```bash\nopenFPGALoader -c cmsisdap fpga_bitstream.bit\n```\n\n## Usage\n\n```\nUsage: openFPGALoader [OPTION...] BIT_FILE\nopenFPGALoader -- a program to flash FPGA\n\n      --altsetting arg          DFU interface altsetting (only for DFU mode)\n      --bitstream arg           bitstream\n      --secondary-bitstream arg\n                                secondary bitstream (some Xilinx UltraScale\n                                boards)\n  -b, --board arg               board name, may be used instead of cable\n  -B, --bridge arg              disable spiOverJtag model detection by\n                                providing bitstream(intel/xilinx)\n  -c, --cable arg               jtag interface\n      --invert-read-edge        JTAG mode / FTDI: read on negative edge\n                                instead of positive\n      --vid arg                 probe Vendor ID\n      --pid arg                 probe Product ID\n      --cable-index arg         probe index (FTDI and cmsisDAP)\n      --busdev-num arg          select a probe by it bus and device number\n                                (bus_num:device_addr)\n      --ftdi-serial arg         FTDI chip serial number\n      --ftdi-channel arg        FTDI chip channel number (channels 0-3 map to\n                                A-D)\n      --detect                  detect FPGA\n      --dfu                     DFU mode\n      --dump-flash              Dump flash mode\n      --bulk-erase              Bulk erase flash\n      --target-flash arg        for boards with multiple flash chips (some\n                                Xilinx UltraScale boards), select the target\n                                flash: primary (default), secondary or both\n      --external-flash          select ext flash for device with internal and\n                                external storage\n      --file-size arg           provides size in Byte to dump, must be used\n                                with dump-flash\n      --file-type arg           provides file type instead of let's deduced\n                                by using extension\n      --flash-sector arg        flash sector (Lattice parts only)\n      --fpga-part arg           fpga model flavor + package\n      --freq arg                jtag frequency (Hz)\n  -f, --write-flash             write bitstream in flash (default: false)\n      --index-chain arg         device index in JTAG-chain\n      --ip arg                  IP address (XVC and remote bitbang client)\n      --list-boards             list all supported boards\n      --list-cables             list all supported cables\n      --list-fpga               list all supported FPGA\n  -m, --write-sram              write bitstream in SRAM (default: true)\n  -o, --offset arg              Start address (in bytes) for read/write into\n                                non volatile memory (default: 0)\n      --pins arg                pin config TDI:TDO:TCK:TMS\n      --probe-firmware arg      firmware for JTAG probe (usbBlasterII)\n      --protect-flash arg       protect SPI flash area\n      --quiet                   Produce quiet output (no progress bar)\n  -r, --reset                   reset FPGA after operations\n      --scan-usb                scan USB to display connected probes\n      --skip-load-bridge        skip writing bridge to SRAM when in\n                                write-flash mode\n      --skip-reset              skip resetting the device when in write-flash\n                                mode\n      --spi                     SPI mode (only for FTDI in serial mode)\n      --unprotect-flash         Unprotect flash blocks\n  -v, --verbose                 Produce verbose output\n      --verbose-level arg       verbose level -1: quiet, 0: normal,\n                                1:verbose, 2:debug\n  -h, --help                    Give this help list\n      --verify                  Verify write operation (SPI Flash only)\n      --port arg                Xilinx Virtual Cable and remote bitbang Port\n                                (default 3721)\n      --mcufw arg               Microcontroller firmware\n      --conmcu                  Connect JTAG to MCU\n  -V, --Version                 Print program version\n\nMandatory or optional arguments to long options are also mandatory or optional\nfor any corresponding short options.\n\nReport bugs to <gwenhael.goavec-merou@trabucayre.com>.\n```\n\nBy default **spiOverJtag** are search into `${CMAKE_INSTALL_FULL_DATAROOTDIR}`\n(*/usr/local/share/* by default). It's possible to change this behaviour by\nusing an environment variable:\n\n```bash\nexport OPENFPGALOADER_SOJ_DIR=/somewhere\nopenFPGALoader xxxx\n```\n\nor\n\n```\nOPENFPGALOADER_SOJ_DIR=/somewhere openFPGALoader xxxx\n```\n\n`OPENFPGALOADER_SOJ_DIR` must point to directory containing **spiOverJtag**\nbitstreams."
}
