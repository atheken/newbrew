{
  "name": "urh",
  "full_name": "urh",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Universal Radio Hacker",
  "license": "GPL-3.0-only",
  "homepage": "https://github.com/jopohl/urh",
  "versions": {
    "stable": "2.9.4",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://files.pythonhosted.org/packages/1c/20/45c108e7c89db910d68b8cccd988603789b1886acb94f79a716b89dffa19/urh-2.9.4.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "da5ee5acf9af62a8261e35cf2f2e40c37dc0898f0d84a3efd5f4ea21e5fb9ced"
    },
    "head": {
      "url": "https://github.com/jopohl/urh.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/urh/blobs/sha256:8f11a16384870bcfb788b151fe6a5971083100cd6351cdfab7a363fd7347e184",
          "sha256": "8f11a16384870bcfb788b151fe6a5971083100cd6351cdfab7a363fd7347e184"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/urh/blobs/sha256:2b6e639d82196f76d76781d2122419986c9e643dcb4eded2e3432d5ee00fcf74",
          "sha256": "2b6e639d82196f76d76781d2122419986c9e643dcb4eded2e3432d5ee00fcf74"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/urh/blobs/sha256:7b1121f0d2d9780940c50cdf50482b13fe96ae7f6cab38462569ed19094c1b0e",
          "sha256": "7b1121f0d2d9780940c50cdf50482b13fe96ae7f6cab38462569ed19094c1b0e"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/urh/blobs/sha256:94e865b02d6809295da8755a8186051648e7bafa15cac1b5a26aad83317d9bdc",
          "sha256": "94e865b02d6809295da8755a8186051648e7bafa15cac1b5a26aad83317d9bdc"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/urh/blobs/sha256:2ec3e3b3e9978326034a42efdb988b6cfdf4c4253ea26eb49a6c9d21787f2bf3",
          "sha256": "2ec3e3b3e9978326034a42efdb988b6cfdf4c4253ea26eb49a6c9d21787f2bf3"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/urh/blobs/sha256:48352e9abdfa048dbcc5b0cb39aef14fd40d5d4fdcbadc7b40db3e95c0606be3",
          "sha256": "48352e9abdfa048dbcc5b0cb39aef14fd40d5d4fdcbadc7b40db3e95c0606be3"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/urh/blobs/sha256:c9c5389cf8319dbc575ef300f37c57f982dddc2e77f7563010b3de395eae935d",
          "sha256": "c9c5389cf8319dbc575ef300f37c57f982dddc2e77f7563010b3de395eae935d"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "pkg-config"
  ],
  "dependencies": [
    "hackrf",
    "libcython",
    "numpy",
    "pyqt@5",
    "python@3.11"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/urh.rb",
  "ruby_source_checksum": {
    "sha256": "03b69bef7aa6a4f450249bdb5f74b4ef0a3f1e8fe8ac80351b0dcbe9b1ac4e9d"
  },
  "date_added": "2017-03-14T01:20:48+01:00",
  "readme": "![URH image](https://raw.githubusercontent.com/jopohl/urh/master/data/icons/banner.png)\n\n[![CI](https://github.com/jopohl/urh/actions/workflows/ci.yml/badge.svg)](https://github.com/jopohl/urh/actions/workflows/ci.yml)\n[![PyPI version](https://badge.fury.io/py/urh.svg)](https://badge.fury.io/py/urh)\n[![Packaging status](https://repology.org/badge/tiny-repos/urh.svg)](https://repology.org/project/urh/versions)\n [![Blackhat Arsenal 2017](https://rawgit.com/toolswatch/badges/master/arsenal/usa/2017.svg)](http://www.toolswatch.org/2017/06/the-black-hat-arsenal-usa-2017-phenomenal-line-up-announced/)\n [![Blackhat Arsenal 2018](https://rawgit.com/toolswatch/badges/master/arsenal/europe/2018.svg)](http://www.toolswatch.org/2018/09/black-hat-arsenal-europe-2018-lineup-announced/)\n\n\nThe Universal Radio Hacker (URH) is a complete suite for wireless protocol investigation with native support for [many](https://github.com/jopohl/urh/wiki/Supported-devices) common __Software Defined Radios__.\nURH allows __easy demodulation__ of signals combined with an [automatic](https://dl.acm.org/doi/10.1145/3375894.3375896) detection of modulation parameters making it a breeze to identify the bits and bytes that fly over the air. \nAs data often gets _encoded_ before transmission, URH offers __customizable decodings__ to crack even sophisticated encodings like CC1101 data whitening.\nWhen it comes to __protocol reverse-engineering__, URH is helpful in two ways. You can either manually assign protocol fields and message types or let URH __automatically infer protocol fields__ with a [rule-based intelligence](https://www.usenix.org/conference/woot19/presentation/pohl).\nFinally, URH entails a __fuzzing component__ aimed at stateless protocols and a __simulation environment__ for stateful attacks.\n\n### Getting started\nIn order to get started\n - view the [installation instructions](#Installation) on this page,\n - download the [official userguide (PDF)](https://github.com/jopohl/urh/releases/download/v2.0.0/userguide.pdf), \n - watch the [demonstration videos (YouTube)](https://www.youtube.com/watch?v=kuubkTDAxwA&index=1&list=PLlKjreY6G-1EKKBs9sucMdk8PwzcFuIPB),\n - check out the [wiki](https://github.com/jopohl/urh/wiki) for more information such as supported devices or\n - read some [articles about URH](#Articles) for inspiration.\n\nIf you like URH, please :star: this repository and [join our Slack channel](https://join.slack.com/t/stralsundsecurity/shared_invite/enQtMjEwOTIxNzMzODc3LTk3NmE4MGVjYjEyYTMzYTdmN2RlNzUzYzg0NTNjNTQ2ODBkMzI3MDZlOWY3MjE4YjBkNTM4ZjJlNTJlZmJhNDg). We appreciate your support!\n\n### Citing URH\nWe encourage researchers working with URH to cite [this](https://www.usenix.org/conference/woot18/presentation/pohl) WOOT'18 paper or directly use the following BibTeX entry.\n \n <details>\n <summary> <b>URH BibTeX entry for your research paper</b> </summary>\n \n  ```bibtex\n@inproceedings {220562,\nauthor = {Johannes Pohl and Andreas Noack},\ntitle = {Universal Radio Hacker: A Suite for Analyzing and Attacking Stateful Wireless Protocols},\nbooktitle = {12th {USENIX} Workshop on Offensive Technologies ({WOOT} 18)},\nyear = {2018},\naddress = {Baltimore, MD},\nurl = {https://www.usenix.org/conference/woot18/presentation/pohl},\npublisher = {{USENIX} Association},\n}\n```\n\n </details> \n\n## Installation\nURH runs on Windows, Linux and macOS. Click on your operating system below to view installation instructions.\n\n<details>\n <summary><b>Windows</b></summary><br/>\n\n On Windows, URH can be installed with its [Installer](https://github.com/jopohl/urh/releases). No further dependencies are required.\n \nIf you get an error about missing ```api-ms-win-crt-runtime-l1-1-0.dll```, run Windows Update or directly install [KB2999226](https://support.microsoft.com/en-us/help/2999226/update-for-universal-c-runtime-in-windows).\n\n</details>\n\n<details>\n<summary><b>Linux</b></summary>\n\n\n<details open>\n<summary><i>Generic Installation with pip (recommended)</i></summary><br/>\n\nURH is available on [PyPi](https://pypi.org/project/urh/) so you can install it with \n```bash \n# IMPORTANT: Make sure your pip is up to date\nsudo python3 -m pip install --upgrade pip  # Update your pip installation\nsudo python3 -m pip install urh            # Install URH\n``` \nThis is the recommended way to install URH on Linux because it comes with __all native extensions__ precompiled.\n\nIn order to access your SDR as non-root user, install the according __udev rules__. You can find them [in the wiki](https://github.com/jopohl/urh/wiki/SDR-udev-rules).\n\n</details>\n\n<details>\n<summary><i>Install via Package Manager</i></summary><br/>\n\nURH is included in the repositories of many linux distributions such as __Arch Linux__, __Gentoo__, __Fedora__, __openSUSE__ or __NixOS__. There is also a package for __FreeBSD__.  If available, simply use your package manager to install URH.\n\n__Note__: For native support, you must install the according ```-dev``` package(s) of your SDR(s) such as ```hackrf-dev``` __before__ installing URH.\n</details>\n\n<details>\n<summary><i>Snap</i></summary><br/>\n\nURH is available as a snap: https://snapcraft.io/urh\n\n</details>\n\n<details>\n<summary><i>Docker Image</i></summary><br/>\n\nThe official URH docker image is available [here](https://hub.docker.com/r/jopohl/urh/). It has all native backends included and ready to operate. \n</details>\n\n</details>\n\n\n<details>\n<summary><b>macOS</b></summary>\n\n<details open>\n<summary><i>Using DMG</i></summary><br/>\n\nIt is recommended to use __at least macOS 10.14__ when using the DMG available [here](https://github.com/jopohl/urh/releases).\n\n</details>\n\n<details>\n<summary><i>With pip</i></summary><br/>\n\n1. Install [Python 3 for Mac OS X](https://www.python.org/downloads/mac-osx/). \n   _If you experience issues with preinstalled Python, make sure you update to a recent version using the given link._\n2. (Optional) Install desired native libs e.g. ```brew install librtlsdr``` for \ncorresponding native device support.\n3. In a terminal, type: ```pip3 install urh```.\n4. Type ```urh``` in a terminal to get it started.\n\n</details>\n\n</details>\n\n<details>\n<summary><b>Update your installation</b></summary><br/>\n\nIf you installed URH via pip you can keep it up to date with ``` python3 -m pip install --upgrade urh ```.\n\n</details>\n\n<details>\n<summary><b>Running from source</b></summary>\n\n<details>\n<summary><i>Without installation</i></summary><br/>\n\nTo execute the Universal Radio Hacker without installation, just run:\n```bash\ngit clone https://github.com/jopohl/urh/\ncd urh/src/urh\n./main.py\n```\n\nNote, before first usage the C++ extensions will be built.\n\n\n</details>\n\n<details>\n<summary><i>Installing from source</i></summary><br/>\n\nTo install URH from source you need to have ```python-setuptools``` installed. You can get them with ```python3 -m pip install setuptools```. \nOnce the setuptools are installed execute: \n```bash\ngit clone https://github.com/jopohl/urh/\ncd urh\npython setup.py install\n```\n\nAnd start the application by typing ```urh``` in a terminal.\n\n</details>\n\n</details>\n\n## Articles\n### Hacking stuff with URH\n* [Hacking Burger Pagers](https://www.rtl-sdr.com/using-a-hackrf-to-reverse-engineer-and-control-restaurant-pagers/)\n* [Reverse-engineer and Clone a Remote Control](https://www.rtl-sdr.com/video-tutorial-using-universal-radio-hacker-an-rtl-sdr-and-a-microcontroller-to-clone-433-mhz-remotes/)\n* [Reverse-engineering Weather Station RF Signals](https://www.rtl-sdr.com/tag/universal-radio-hacker/)\n* [Reverse-engineering Wireless Blinds](https://www.rtl-sdr.com/reverse-engineering-wireless-blinds-with-an-rtl-sdr-and-controlling-them-with-amazon-alexa/)\n* [Attacking Logitech Wireless Presenters (German Article)](https://www.heise.de/security/meldung/Wireless-Presenter-von-Logitech-und-Inateck-anfaellig-fuer-Angriffe-ueber-Funk-4439795.html)\n* [Attacking Wireless Keyboards](https://threatpost.com/fujitsu-wireless-keyboard-unpatched-flaws/149477/)\n* [Reverse-engineering a 433MHz Remote-controlled Power Socket for use with Arduino](http://www.ignorantofthings.com/2018/11/reverse-engineering-433mhz-remote.html)\n\n### General presentations and tutorials on URH\n* [Hackaday Article](https://hackaday.com/2017/02/23/universal-radio-hacker/)\n* [RTL-SDR.com Article](https://www.rtl-sdr.com/reverse-engineering-signals-universal-radio-hacker-software/)\n* [Short Tutorial on URH with LimeSDR Mini](https://www.crowdsupply.com/lime-micro/limesdr-mini/updates/investigating-wireless-protocols-with-universal-radio-hacker)\n* [Brute-forcing a RF Device: a Step-by-step Guide](https://pandwarf.com/news/brute-forcing-a-new-device-a-step-by-step-guide/)\n* [Hacking wireless sockets like a NOOB](https://olof-astrand.medium.com/hacking-wireless-sockets-like-a-noob-b57d4b4812d5)\n\n## External decodings\nSee [wiki](https://github.com/jopohl/urh/wiki/External-decodings) for a list of external decodings provided by our community! Thanks for that!\n\n## Screenshots\n### Get the data out of raw signals\n![Interpretation phase](http://i.imgur.com/Wy17Zv3.png)\n\n### Keep an overview even on complex protocols\n ![Analysis phase](http://i.imgur.com/ubAL3pE.png)\n\n### Record and send signals\n ![Record](http://i.imgur.com/BfQpg23.png)"
}
