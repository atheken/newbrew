{
  "name": "stylua",
  "full_name": "stylua",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Opinionated Lua code formatter",
  "license": "MPL-2.0",
  "homepage": "https://github.com/JohnnyMorganz/StyLua",
  "versions": {
    "stable": "0.18.1",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/JohnnyMorganz/StyLua/archive/refs/tags/v0.18.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "e06bd0e2befcfebfa312930f282acdc6e2cffff7c1cabce648be4d88e7e5f7c0"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/stylua/blobs/sha256:8fe4df5883d0e30e743b8ca50f99b10ef7fb17e1367f6de340a482e6f3bb7a8a",
          "sha256": "8fe4df5883d0e30e743b8ca50f99b10ef7fb17e1367f6de340a482e6f3bb7a8a"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/stylua/blobs/sha256:98b62a18dcd8c00a4e45d277511fabb0e80424e0cd21e9b9405722abd5c66c53",
          "sha256": "98b62a18dcd8c00a4e45d277511fabb0e80424e0cd21e9b9405722abd5c66c53"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/stylua/blobs/sha256:103d3e62872a1284baa00508eb6a0955f6d61b03a495debf49d8bdf9ae7b050d",
          "sha256": "103d3e62872a1284baa00508eb6a0955f6d61b03a495debf49d8bdf9ae7b050d"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/stylua/blobs/sha256:7db646947b6a9b3ab9ea281a2394c6a1a47b4e513a16fa4072a1add80d9ebaaf",
          "sha256": "7db646947b6a9b3ab9ea281a2394c6a1a47b4e513a16fa4072a1add80d9ebaaf"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/stylua/blobs/sha256:ff5dc0941de18dc55652bc91f1303831a9b90ca4bf491e12a9866583059a211a",
          "sha256": "ff5dc0941de18dc55652bc91f1303831a9b90ca4bf491e12a9866583059a211a"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/stylua/blobs/sha256:ff3457d9416296e4f7dc8dfa5c8bf4b211209a40e14f0adef072b1686215fe50",
          "sha256": "ff3457d9416296e4f7dc8dfa5c8bf4b211209a40e14f0adef072b1686215fe50"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/stylua/blobs/sha256:4273919d452cae6e0a851f697748827e9d398a1823af2b466d4efe4cc98021f3",
          "sha256": "4273919d452cae6e0a851f697748827e9d398a1823af2b466d4efe4cc98021f3"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/stylua.rb",
  "ruby_source_checksum": {
    "sha256": "160d1c4bc545cc2af7df99ce3868d2689bc079c4c77af6f134842f57166ec180"
  },
  "date_added": "2021-08-01T08:47:58+00:00",
  "readme": "<div align=\"center\">\n\t<h1>\n\t\tStyLua<br>\n\t\t<a href=\"https://crates.io/crates/stylua\"><img src=\"https://img.shields.io/crates/v/stylua.svg\"></a>\n    <a href=\"https://github.com/JohnnyMorganz/StyLua/actions/workflows/ci.yml\"><img src=\"https://github.com/JohnnyMorganz/StyLua/actions/workflows/ci.yml/badge.svg\"></a>\n    <a href=\"https://codecov.io/gh/JohnnyMorganz/StyLua\"><img src=\"https://codecov.io/gh/JohnnyMorganz/StyLua/branch/main/graph/badge.svg\"/></a>\n\t</h1>\n</div>\n\nAn opinionated code formatter for Lua 5.1, 5.2, 5.3, 5.4 and [Luau](https://roblox.github.io/luau/), built using [full-moon](https://github.com/Kampfkarren/full-moon).\nStyLua is inspired by the likes of [prettier](https://github.com/prettier/prettier), it parses your Lua codebase, and prints it back out from scratch,\nenforcing a consistent code style.\n\nStyLua mainly follows the [Roblox Lua Style Guide](https://roblox.github.io/lua-style-guide/), with a few deviations.\n\n## Installation\n\nThere are multiple ways to install StyLua:\n\n### With Github Releases\n\nPre-built binaries are available on the [GitHub Releases Page](https://github.com/JohnnyMorganz/StyLua/releases).\n\nBy default, these are built with **all syntax variants enabled (Lua 5.2, 5.3, 5.4 and Luau)**, to cover all possible codebases.\nIf you would like to format a specific Lua version only, see [installing from crates.io](#from-cratesio).\n\n### From Crates.io\n\nIf you have [Rust](https://www.rust-lang.org/) installed, you can install StyLua using cargo.\nBy default, this builds for just Lua 5.1.\nYou can pass the `--features <flag>` argument to build for Lua 5.2 (`lua52`), Lua 5.3 (`lua53`), Lua 5.4 (`lua54`) or Luau (`luau`)\n\n```sh\ncargo install stylua\ncargo install stylua --features lua52\ncargo install stylua --features lua53\ncargo install stylua --features lua54\ncargo install stylua --features luau\n```\n\n### GitHub Actions\n\nYou can use the [stylua-action](https://github.com/marketplace/actions/stylua) GitHub Action in your CI to install and run StyLua.\nThis action uses the prebuilt GitHub release binaries, instead of running cargo install, for faster CI times.\n\n### pre-commit\n\nYou can use StyLua with [pre-commit](https://pre-commit.com/).\nThere are 3 possible pre-commit hooks available:\n\n- `stylua`: installs via cargo - requires the Rust toolchain\n- `stylua-system`: runs a `stylua` binary available on the PATH. The binary must be pre-installed\n- `stylua-github`: automatically installs the relevant prebuilt binary from GitHub Actions\n\nAdd the following to your `.pre-commit-config.yaml` file:\n\n```yaml\n- repo: https://github.com/JohnnyMorganz/StyLua\n  rev: v0.18.1\n  hooks:\n    - id: stylua # or stylua-system / stylua-github\n```\n\n### npm\n\nStyLua is available as a binary [published to npm](https://www.npmjs.com/package/@johnnymorganz/stylua-bin) as `@johnnymorganz/stylua-bin`.\nThis is a thin wrapper which installs the binary and allows it to be run through npm.\n\n```sh\nnpx @johnnymorganz/stylua-bin --help\n```\n\nStyLua is also available as a WASM library at [@johnnymorganz/stylua](https://www.npmjs.com/package/@johnnymorganz/stylua).\nIt is usable in Node.js, or in the browser (using a bundler).\n\n### Docker\n\nStyLua is available on the [Docker Hub](https://hub.docker.com/r/johnnymorganz/stylua).\n\nIf you are using Docker, the easiest way to install StyLua is:\n\n```dockerfile\nCOPY --from=JohnnyMorganz/StyLua:0.18.0 /stylua /usr/bin/stylua\n```\n\n### Homebrew\n\nStyLua is available on macOS via the [Homebrew](https://brew.sh) package manager.\n\n```sh\nbrew install stylua\n```\n\n### Other Installation Methods\n\n- [VSCode Extension](https://marketplace.visualstudio.com/items?itemName=JohnnyMorganz.stylua)\n- [Aftman](https://github.com/LPGhatguy/aftman)\n\n```sh\naftman add johnnymorganz/stylua@0.14.2\n```\n\n- A community maintained package repository. Please note, these packages are maintained by third-parties and we do not control their packaging manifests.\n\n[![Community Packages](https://repology.org/badge/vertical-allrepos/stylua.svg?header=Community%20Packages)](https://repology.org/project/stylua/versions)\n\n### Other Editor Integrations\n\nNote that these integrations require the StyLua binary to already be installed and available on your system.\n\n- Sublime: [Sublime Text Package](https://github.com/aerobounce/Sublime-Pretty-Lua)\n- Neovim: [stylua-nvim](https://github.com/ckipp01/stylua-nvim) / [stylua.nvim](https://github.com/wesleimp/stylua.nvim)\n\n## Usage\n\nOnce installed, pass the files to format to the CLI:\n\n```sh\nstylua src/ foo.lua bar.lua\n```\n\nThis command will format the `foo.lua` and `bar.lua` file, and search down the `src` directory to format any files within it.\nStyLua can also read from stdin, by using `-` as the file name.\n\n### Glob Filtering\n\nBy default, when searching through a directory, StyLua looks for all files matching the glob `**/*.lua` (or `**/*.luau` when `luau` is enabled) to format.\nYou can also specify an explicit glob pattern to match against when searching:\n\n```sh\nstylua --glob '**/*.luau' -- src # format all files in src matching **/*.luau\nstylua -g '*.lua' -g '!*.spec.lua' -- . # format all Lua files except test files ending with `.spec.lua`\n```\n\nNote, if you are using the glob argument, it can take in multiple strings, so `--` is required to break between the glob pattern and the files to format.\n\nGlob Filtering is only used for directory searching - passing a file directly (e.g. `stylua foo.txt`) will override the glob.\n\n### Filtering using `.styluaignore`\n\nYou can create a `.styluaignore` file, with a format similar to `.gitignore`.\nAny files matching the globs in the ignore file will be ignored by StyLua.\nFor example, for a `.styluaignore` file with the following contents:\n\n```\nvendor/\n```\n\nrunning `stylua .` will ignore the `vendor/` directory.\n\n### `--check`: Checking files for formatting\n\nTo check whether files have been formatted (but not write directly to them), use the `--check` flag.\nIt will take files as input, and output a diff to stdout instead of rewriting the file contents.\nIf there are files which haven't been fully formatted, StyLua will exit with status code 1.\n\nBy default, we provide a custom Standard diff view, but this can be configured:\n\n- `--output-format=unified`: output a unified diff, which can be consumed by tools like `patch` or `delta`\n- `--output-format=json`: output JSON representing the changes, useful for machine-readable output\n\n### `--verify`: Verifying formatting output\n\nAs a safety measure, the `--verify` flag can be passed to StyLua, and StyLua will verify the output of all formatting\nbefore saving it to a file.\n\nIf enabled, the tool will re-parse the formatted output to verify if the AST is still valid (no syntax errors) and is similar to the input (possible semantic changes).\n\nUseful when adopting StyLua in a large codebase, where it is difficult to verify all formatting is correct.\nNote that this may produce false positives and negatives - we recommend manual verification as well as running tests to confirm.\n\n### Ignoring parts of a file\n\nTo skip formatting a particular part of a file, you can add `-- stylua: ignore` before it.\nThis may be useful if there is a particular style you want to preseve for readability, e.g.:\n\n```lua\n-- stylua: ignore\nlocal matrix = {\n    { 0, 0, 0 },\n    { 0, 0, 0 },\n    { 0, 0, 0 },\n}\n```\n\nFormatting can also be skipped over a block of code using `-- stylua: ignore start` and `-- stylua: ignore end`:\n\n```lua\nlocal foo = true\n-- stylua: ignore start\nlocal   bar   =   false\nlocal  baz      = 0\n-- stylua: ignore end\nlocal foobar = false\n```\n\nNote that ignoring cannot cross scope boundaries - once a block is exited, formatting will be re-enabled.\n\n### Formatting Ranges\n\nTo format a specific range within a file, use `--range-start <num>` and/or `--range-end <num>`.\nBoth arguments are inclusive and optional - if an argument is not provided, the start/end of the file will be used respectively.\n\nOnly whole statements lying within the range will be formatted.\nIf part of a statement falls outside the range, the statement will be ignored.\n\nIn editors, `Format Selection` is supported.\n\n### Requires Sorting\n\nStyLua has built-in support for sorting require statements. We group consecutive require statements into a single \"block\",\nand then requires are sorted only within that block. Blocks of requires do not move around the file.\n\nWe only include requires of the form `local NAME = require(EXPR)`, and sort lexicographically based on `NAME`.\n(We also sort Roblox services of the form `local NAME = game:GetService(EXPR)`)\n\nRequires sorting is off by default. To enable it, add the following to your `stylua.toml`:\n\n```toml\n[sort_requires]\nenabled = true\n```\n\n## Configuration\n\nStyLua is **opinionated**, so only a few options are provided.\n\n### Finding the configuration\n\nThe CLI looks for `stylua.toml` or `.stylua.toml` in the directory where the tool was executed.\nIf not found, we search for an `.editorconfig` file, otherwise fall back to the default configuration.\nThis feature can be disabled using `--no-editorconfig`.\nSee [EditorConfig](https://editorconfig.org/) for more details.\n\nA custom path can be provided using `--config-path <path>`.\nIf the path provided is not found/malformed, StyLua will exit with an error.\n\nBy default, the tool does not search further than the current directory.\nRecursively searching parent directories can be enabled using `--search-parent-directories`.\nThis will keep searching ancestors. If not found, it will then look in `$XDG_CONFIG_HOME` / `$XDG_CONFIG_HOME/stylua`.\n\n**Note: enabling searching outside of the current directory is NOT recommended due to possibilities of conflicting formatting:**\n\nIt is recommended to keep a `.stylua.toml` file in your project root so that other developers can make use of the same configuration.\n\nIf a project uses the default configuration of StyLua without a configuration file present, enabling external searching may cause conflicting formatting.\n\n### Options\n\nStyLua only offers the following options:\n\n| Option                      | Default            | Description|\n| --------------------------- | ------------------ ||\n| `column_width`              | `120`              | Approximate line length for printing. Used as a guide for line wrapping - this is not a hard requirement: lines may fall under or over the limit.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     |\n| `line_endings`              | `Unix`             | Line endings type. Possible options: `Unix` (LF) or `Windows`|\n| `indent_type`               | `Tabs`             | Indent type. Possible options: `Tabs` or `Spaces`                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     |\n| `indent_width`              | `4`                | Character size of single indentation. If `indent_type` is set to `Tabs`, this option is used as a heuristic to determine column width only.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| `quote_style`               | `AutoPreferDouble` | Quote style for string literals. Possible options: `AutoPreferDouble`, `AutoPreferSingle`, `ForceDouble`, `ForceSingle`. `AutoPrefer` styles will prefer the specified quote style, but fall back to the alternative if it has fewer string escapes. `Force` styles always use the specified style regardless of escapes.                                                                                                                                                                                                                                                                                                                                                                                                                             |\n| `call_parentheses`          | `Always`           | Whether parentheses should be applied on function calls with a single string/table argument. Possible options: `Always`, `NoSingleString`, `NoSingleTable`, `None`, `Input`. `Always` applies parentheses in all cases. `NoSingleString` omits parentheses on calls with a single string argument. Similarly, `NoSingleTable` omits parentheses on calls with a single table argument. `None` omits parentheses in both cases. Note: parentheses are still kept in situations where removal can lead to obscurity (e.g. `foo \"bar\".setup -> foo(\"bar\").setup`, since the index is on the call result, not the string). `Input` removes all automation and preserves parentheses only if they were present in input code: consistency is not enforced. |\n| `collapse_simple_statement` | `Never`            | Specify whether to collapse simple statements. Possible options: `Never`, `FunctionOnly`, `ConditionalOnly`, or `Always`|\n\nDefault `stylua.toml`, note you do not need to explicitly specify each option if you want to use the defaults:\n\n```toml\ncolumn_width = 120\nline_endings = \"Unix\"\nindent_type = \"Tabs\"\nindent_width = 4\nquote_style = \"AutoPreferDouble\"\ncall_parentheses = \"Always\"\ncollapse_simple_statement = \"Never\"\n\n[sort_requires]\nenabled = false\n```"
}
