{
  "name": "r3",
  "full_name": "r3",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "High-performance URL router library",
  "license": "MIT",
  "homepage": "https://github.com/c9s/r3",
  "versions": {
    "stable": "1.3.4",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/c9s/r3/archive/1.3.4.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "db1fb91e51646e523e78b458643c0250231a2640488d5781109f95bd77c5eb82"
    },
    "head": {
      "url": "https://github.com/c9s/r3.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/r3/blobs/sha256:fa1e649709ce6c6d16c631a2192d2dd7fea34b7398e55eabe5f7bd51953745ab",
          "sha256": "fa1e649709ce6c6d16c631a2192d2dd7fea34b7398e55eabe5f7bd51953745ab"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/r3/blobs/sha256:2f26748893003e7e0b99a574126c06c451222144979b0230babe37128328214f",
          "sha256": "2f26748893003e7e0b99a574126c06c451222144979b0230babe37128328214f"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/r3/blobs/sha256:be0883f3dfc67b2469eef537376a04bbae36ec3aab8ca58ffb66491a81e6db5d",
          "sha256": "be0883f3dfc67b2469eef537376a04bbae36ec3aab8ca58ffb66491a81e6db5d"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/r3/blobs/sha256:95f67c8b6bd1c106e6c61623df3ea82a5faf030928bb4a996fb1bea738f27679",
          "sha256": "95f67c8b6bd1c106e6c61623df3ea82a5faf030928bb4a996fb1bea738f27679"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/r3/blobs/sha256:a33cc32d0cfb9190bb99931d5dc9dba21899df9103ef7d892b8b083672d78662",
          "sha256": "a33cc32d0cfb9190bb99931d5dc9dba21899df9103ef7d892b8b083672d78662"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/r3/blobs/sha256:c9fa16048947ebd0c297b700ff7a528c7e45f46bd719cd196d4f7c74de7b491d",
          "sha256": "c9fa16048947ebd0c297b700ff7a528c7e45f46bd719cd196d4f7c74de7b491d"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/r3/blobs/sha256:96787f402bbc3a37207c3d5c3468d3b98028a12335a66d176d18d268e2406462",
          "sha256": "96787f402bbc3a37207c3d5c3468d3b98028a12335a66d176d18d268e2406462"
        },
        "mojave": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/r3/blobs/sha256:f136221b1d7a0a4ee057ea0551a2b742d1a49cb50011e5651e8fa5c96327b0b0",
          "sha256": "f136221b1d7a0a4ee057ea0551a2b742d1a49cb50011e5651e8fa5c96327b0b0"
        },
        "high_sierra": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/r3/blobs/sha256:5239e5302b1952367f6cdc066e43483de6b0d30fa70f1dcf2e9f03b10983890f",
          "sha256": "5239e5302b1952367f6cdc066e43483de6b0d30fa70f1dcf2e9f03b10983890f"
        },
        "sierra": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/r3/blobs/sha256:d39c22ae9e69454cc7c205ff0cecc3dd6084a38a1e1742091f55df389e5a8f4a",
          "sha256": "d39c22ae9e69454cc7c205ff0cecc3dd6084a38a1e1742091f55df389e5a8f4a"
        },
        "el_capitan": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/r3/blobs/sha256:6122bbc3566581f130e54cd563ed69f169598f5ce62d6319e7b5a95b10b802ef",
          "sha256": "6122bbc3566581f130e54cd563ed69f169598f5ce62d6319e7b5a95b10b802ef"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/r3/blobs/sha256:36037bda00ae1253fb158f5cdf2619c2194a33a6ddb6598f9fb7901f37928348",
          "sha256": "36037bda00ae1253fb158f5cdf2619c2194a33a6ddb6598f9fb7901f37928348"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "autoconf",
    "automake",
    "libtool",
    "pkg-config"
  ],
  "dependencies": [
    "jemalloc",
    "pcre"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/r3.rb",
  "ruby_source_checksum": {
    "sha256": "a3f70edcd3c8a70eac2f10672d401c470fa27482f9d8f9e7100a5e92bfea506c"
  },
  "date_added": "2014-06-05T11:36:23-05:00",
  "readme": "R3\n================\n\n[![Build Status](https://travis-ci.org/c9s/r3.svg?branch=2.0)](https://travis-ci.org/c9s/r3)\n\n[![Coverage Status](https://coveralls.io/repos/c9s/r3/badge.svg)](https://coveralls.io/r/c9s/r3)\n\nR3 is an URL router library with high performance, thus, it's implemented in C.\nIt compiles your R3Route paths into a prefix trie.\n\nBy using the prefix tree constructed in the start-up time, you can dispatch\nthe path to the controller with high efficiency.\n\n\n\nRequirement\n-----------------------\n\n### Build Requirement\n\n* autoconf\n* automake\n* check\n* pkg-config\n\n### Runtime Requirement\n\n* pcre\n* (optional) graphviz version 2.38.0 (20140413.2041)\n* (optional) libjson-c-dev\n\nPattern Syntax\n-----------------------\n\n    /blog/post/{id}      use [^/]+ regular expression by default.\n    /blog/post/{id:\\d+}  use `\\d+` regular expression instead of default.\n\n\nAPI\n------------------------\n\n```c\n#include <r3/r3.h>\n\n// create a router tree with 10 children capacity (this capacity can grow dynamically)\nR3Node *n = r3_tree_create(10);\n\nint route_data = 3;\n\n// insert the R3Route path into the router tree\nr3_tree_insert_path(n, \"/bar\", &route_data); // ignore the length of path\n\nr3_tree_insert_pathl(n, \"/zoo\", strlen(\"/zoo\"), &route_data );\nr3_tree_insert_pathl(n, \"/foo/bar\", strlen(\"/foo/bar\"), &route_data );\n\nr3_tree_insert_pathl(n ,\"/post/{id}\", strlen(\"/post/{id}\") , &route_data );\n\nr3_tree_insert_pathl(n, \"/user/{id:\\\\d+}\", strlen(\"/user/{id:\\\\d+}\"), &route_data );\n\n\n// if you want to catch error, you may call the extended path function for insertion\nint data = 10;\nchar *errstr = NULL;\nR3Node *ret = r3_tree_insert_pathl_ex(n, \"/foo/{name:\\\\d{5}\", strlen(\"/foo/{name:\\\\d{5}\"), NULL, &data, &errstr);\nif (ret == NULL) {\n    // failed insertion\n    printf(\"error: %s\\n\", errstr);\n    free(errstr); // errstr is created from `asprintf`, so you have to free it manually.\n}\n\n\n// let's compile the tree!\nchar *errstr = NULL;\nint err = r3_tree_compile(n, &errstr);\nif (err != 0) {\n    // fail\n    printf(\"error: %s\\n\", errstr);\n    free(errstr); // errstr is created from `asprintf`, so you have to free it manually.\n}\n\n\n// dump the compiled tree\nr3_tree_dump(n, 0);\n\n// match a route\nR3Node *matched_node = r3_tree_matchl(n, \"/foo/bar\", strlen(\"/foo/bar\"), NULL);\nif (matched_node) {\n    int ret = *( (int*) matched_node->data );\n}\n\n// release the tree\nr3_tree_free(n);\n```\n\n\n**Capture Dynamic Variables**\n\nIf you want to capture the variables from regular expression, you will need to\ncreate a `match_entry` object and pass the object to `r3_tree_matchl` function,\nthe catched variables will be pushed into the match entry structure:\n\n```c\nmatch_entry * entry = match_entry_create(\"/foo/bar\");\n\n// free the match entry\nmatch_entry_free(entry);\n```\n\nAnd you can even specify the request method restriction:\n\n```c\nentry->request_method = METHOD_GET;\nentry->request_method = METHOD_POST;\nentry->request_method = METHOD_GET | METHOD_POST;\n```\n\nWhen using `match_entry`, you may match the R3Route with `r3_tree_match_entry` function:\n\n```c\nR3Node * matched_node = r3_tree_match_entry(n, entry);\n```\n\n\n\n\n**Release Memory**\n\nTo release the memory, you may call `r3_tree_free(R3Node *tree)` to release the whole tree structure,\n`node*`, `edge*`, `route*` objects that were inserted into the tree will be freed.\n\n\n\n\n\n\n### Routing with conditions\n\n```c\n// create a router tree with 10 children capacity (this capacity can grow dynamically)\nn = r3_tree_create(10);\n\nint route_data = 3;\n\n// insert the R3Route path into the router tree\nr3_tree_insert_routel(n, METHOD_GET | METHOD_POST, \"/blog/post\", sizeof(\"/blog/post\") - 1, &route_data );\n\nchar *errstr = NULL;\nint err = r3_tree_compile(n, &errstr);\nif (err != 0) {\n    // fail\n    printf(\"error: %s\\n\", errstr);\n    free(errstr); // errstr is created from `asprintf`, so you have to free it manually.\n}\n\n\n// in your http server handler\n\n// create the match entry for capturing dynamic variables.\nmatch_entry * entry = match_entry_create(\"/blog/post\");\nentry->request_method = METHOD_GET;\n\n\nR3Route *matched_R3Route = r3_tree_match_route(n, entry);\nmatched_route->data; // get the data from matched route\n\n// free the objects at the end\nmatch_entry_free(entry);\nr3_tree_free(n);\n```\n\nSlug\n-----------------------\nA slug is a placeholder, which captures the string from the URL as a variable.\nSlugs will be compiled into regular expression patterns.\n\nSlugs without patterns (like `/user/{userId}`) will be compiled into the `[^/]+` pattern.\n\nTo specify the pattern of a slug, you may write a colon to separate the slug name and the pattern:\n\n    \"/user/{userId:\\\\d+}\"\n\nThe above R3Route will use `\\d+` as its pattern.\n\n\nOptimization\n-----------------------\nSimple regular expressions are optimized through a regexp pattern to opcode\ntranslator, which translates simple patterns into small & fast scanners.\n\nBy using this method, r3 reduces the matching overhead of pcre library.\n\nOptimized patterns are: `[a-z]+`, `[0-9]+`, `\\d+`, `\\w+`, `[^/]+`, `[^-]+` or `.*`.\n\nSlugs without specified regular expression will be compiled into the `[^/]+` pattern. therefore, it's optimized too.\n\nComplex regular expressions will still use libpcre to match URL (partially).\n\n\nPerformance\n-----------------------\nThe routing benchmark from stevegraham/rails' PR <https://github.com/stevegraham/rails/pull/1>:\n\n                 omg    10462.0 (±6.7%) i/s -      52417 in   5.030416s\n\nAnd here is the result of the router journey:\n\n                 omg     9932.9 (±4.8%) i/s -      49873 in   5.033452s\n\nr3 uses the same R3Route path data for benchmarking, and here is the benchmark:\n\n                3 runs, 5000000 iterations each run, finished in 1.308894 seconds\n                11460057.83 i/sec\n\n\n### The Route Paths Of Benchmark\n\nThe R3Route path generator is from <https://github.com/stevegraham/rails/pull/1>:\n\n```ruby\n#!/usr/bin/env ruby\narr    = [\"foo\", \"bar\", \"baz\", \"qux\", \"quux\", \"corge\", \"grault\", \"garply\"]\npaths  = arr.permutation(3).map { |a| \"/#{a.join '/'}\" }\npaths.each do |path|\n    puts \"r3_tree_insert_path(n, \\\"#{path}\\\", NULL);\"\nend\n```\n\nFunction prefix mapping\n-----------------------\n\n|Function Prefix   |Description                                                                         |\n|------------------|------------------------------------------------------------------------------------|\n|`r3_tree_*`       |Tree related operations, which require a node to operate a whole tree               |\n|`r3_node_*`       |Single node related operations, which do not go through its own children or parent. |\n|`r3_edge_*`       |Edge related operations                                                             |\n|`r3_route_*`      |Route related operations, which are needed only when the tree is defined by routes  |\n|`match_entry_*`   |Match entry related operations, a `match_entry` is just like the request parameters |\n\n\n\n\nRendering Routes With Graphviz\n---------------------------------------\n\nThe `r3_tree_render_file` API let you render the whole R3Route trie into a image.\n\nTo use graphviz, you need to enable graphviz while you run `configure`:\n\n\n    ./configure --enable-graphviz\n\n\nHere is the sample code of generating graph output:\n\n\n```c\nR3Node * n = r3_tree_create(1);\n\nr3_tree_insert_path(n, \"/foo/bar/baz\",  NULL);\nr3_tree_insert_path(n, \"/foo/bar/qux\",  NULL);\nr3_tree_insert_path(n, \"/foo/bar/quux\",  NULL);\nr3_tree_insert_path(n, \"/foo/bar/corge\",  NULL);\nr3_tree_insert_path(n, \"/foo/bar/grault\",  NULL);\nr3_tree_insert_path(n, \"/garply/grault/foo\",  NULL);\nr3_tree_insert_path(n, \"/garply/grault/bar\",  NULL);\nr3_tree_insert_path(n, \"/user/{id}\",  NULL);\nr3_tree_insert_path(n, \"/post/{title:\\\\w+}\",  NULL);\n\nchar *errstr = NULL;\nint err;\nerr = r3_tree_compile(n, &errstr);\nif (err != 0) {\n    // fail\n    printf(\"error: %s\\n\", errstr);\n    free(errstr); // errstr is created from `asprintf`, so you have to free it manually.\n}\n\nr3_tree_render_file(n, \"png\", \"check_gvc.png\");\nr3_tree_free(n);\n```\n\n\n![Imgur](http://imgur.com/HrUoEbI.png)\n\nOr you can even export it with dot format:\n\n```dot\ndigraph g {\n\tgraph [bb=\"0,0,205.1,471\"];\n\tnode [label=\"\\N\"];\n\t\"{root}\"\t [height=0.5,\n\t\tpos=\"35.097,453\",\n\t\twidth=0.97491];\n\t\"#1\"\t [height=0.5,\n\t\tpos=\"35.097,366\",\n\t\twidth=0.75];\n        ....\n```\n\n### Graphviz Related Functions\n\n```c\nint r3_tree_render_file(const R3Node * tree, const char * format, const char * filename);\n\nint r3_tree_render(const R3Node * tree, const char *layout, const char * format, FILE *fp);\n\nint r3_tree_render_dot(const R3Node * tree, const char *layout, FILE *fp);\n\nint r3_tree_render_file(const R3Node * tree, const char * format, const char * filename);\n```\n\n\nJSON Output\n----------------------------------------\n\nYou can render the whole tree structure into json format output.\n\nPlease run `configure` with the `--enable-json` option.\n\nHere is the sample code to generate JSON string:\n\n```c\njson_object * obj = r3_node_to_json_object(n);\n\nconst char *json = r3_node_to_json_pretty_string(n);\nprintf(\"Pretty JSON: %s\\n\",json);\n\nconst char *json = r3_node_to_json_string(n);\nprintf(\"JSON: %s\\n\",json);\n```\n\n\nUse case in PHP\n-----------------------\n**not implemented yet**\n\n```php\n// Here is the paths data structure\n$paths = [\n    '/blog/post/{id}' => [ 'controller' => 'PostController' , 'action' => 'item'   , 'method'   => 'GET' ] ,\n    '/blog/post'      => [ 'controller' => 'PostController' , 'action' => 'list'   , 'method'   => 'GET' ] ,\n    '/blog/post'      => [ 'controller' => 'PostController' , 'action' => 'create' , 'method' => 'POST' ]  ,\n    '/blog'           => [ 'controller' => 'BlogController' , 'action' => 'list'   , 'method'   => 'GET' ] ,\n];\n$rs = r3_compile($paths, 'persisten-table-id');\n$ret = r3_dispatch($rs, '/blog/post/3' );\nlist($complete, $route, $variables) = $ret;\n\n// matched conditions aren't done yet\nlist($error, $message) = r3_validate($route); // validate R3Route conditions\nif ( $error ) {\n    echo $message; // \"Method not allowed\", \"...\";\n}\n```\n\nInstall\n----------------------\n\n    sudo apt-get install check libpcre3 libpcre3-dev libjemalloc-dev libjemalloc1 build-essential libtool automake autoconf pkg-config\n    sudo apt-get install graphviz-dev graphviz  # if you want graphviz\n    ./autogen.sh\n    ./configure && make\n    sudo make install\n\nAnd we support debian-based distro now!\n\n    sudo apt-get install build-essential autoconf automake libpcre3-dev pkg-config debhelper libtool check\n    mv dist-debian debian\n    dpkg-buildpackage -b -us -uc\n    sudo gdebi ../libr3*.deb\n\n\n#### Run Unit Tests\n\n    ./configure --enable-check\n    make check\n\n#### Enable Graphviz\n\n    ./configure --enable-graphviz\n\n#### With jemalloc\n\n    ./configure --with-malloc=jemalloc\n\nubuntu PPA\n----------------------\n\nThe PPA for libr3 can be found in <https://launchpad.net/~r3-team/+archive/libr3-daily>.\n\nBinding For Other Languages\n---------------------------\n\n* Perl Router::R3 by @CindyLinz <https://metacpan.org/pod/Router::R3>\n* Python pyr3 by @lucemia <https://github.com/lucemia/pyr3>\n* Python pyr3 by @thedrow <https://github.com/thedrow/pyr3>\n* Haskell r3 by @MnO2 <https://github.com/MnO2/r3>\n* Vala r3-vala by @Ronmi <https://github.com/Ronmi/r3-vala>\n\nNode.js\n\n* node-r3 by @othree <https://github.com/othree/node-r3>\n* node-libr3 by @caasi <https://github.com/caasi/node-r3>\n\nRuby\n\n* Ruby rr3 by @tonytonyjan <https://github.com/tonytonyjan/rr3>\n* mruby r3 <https://github.com/rail44/mruby-r3>\n* mruby rake r3 <https://github.com/rail44/mruby-rack-r3>\n\n\nLicense\n--------------------\nThis software is released under MIT License."
}
