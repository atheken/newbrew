{
  "name": "docker-credential-helper-ecr",
  "full_name": "docker-credential-helper-ecr",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Docker Credential Helper for Amazon ECR",
  "license": "Apache-2.0",
  "homepage": "https://github.com/awslabs/amazon-ecr-credential-helper",
  "versions": {
    "stable": "0.7.1",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/awslabs/amazon-ecr-credential-helper.git",
      "tag": "v0.7.1",
      "revision": "adf1bafd791ae7d4ff098108b1e91f36a4da5404",
      "checksum": null
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/docker-credential-helper-ecr/blobs/sha256:1ea097da1828cff0652a2004c52785da654c81ac65722eb52108a129bce51a67",
          "sha256": "1ea097da1828cff0652a2004c52785da654c81ac65722eb52108a129bce51a67"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/docker-credential-helper-ecr/blobs/sha256:1ea097da1828cff0652a2004c52785da654c81ac65722eb52108a129bce51a67",
          "sha256": "1ea097da1828cff0652a2004c52785da654c81ac65722eb52108a129bce51a67"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/docker-credential-helper-ecr/blobs/sha256:1ea097da1828cff0652a2004c52785da654c81ac65722eb52108a129bce51a67",
          "sha256": "1ea097da1828cff0652a2004c52785da654c81ac65722eb52108a129bce51a67"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/docker-credential-helper-ecr/blobs/sha256:6e3203cb66dd05a916e756bc0e58e41f70124b57ed6878fd9537ae17f199ca7b",
          "sha256": "6e3203cb66dd05a916e756bc0e58e41f70124b57ed6878fd9537ae17f199ca7b"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/docker-credential-helper-ecr/blobs/sha256:6e3203cb66dd05a916e756bc0e58e41f70124b57ed6878fd9537ae17f199ca7b",
          "sha256": "6e3203cb66dd05a916e756bc0e58e41f70124b57ed6878fd9537ae17f199ca7b"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/docker-credential-helper-ecr/blobs/sha256:6e3203cb66dd05a916e756bc0e58e41f70124b57ed6878fd9537ae17f199ca7b",
          "sha256": "6e3203cb66dd05a916e756bc0e58e41f70124b57ed6878fd9537ae17f199ca7b"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/docker-credential-helper-ecr/blobs/sha256:e1ac67bd6087eba7840fc12e21e48644dd7f51862398eb7d070f4e5101bfe095",
          "sha256": "e1ac67bd6087eba7840fc12e21e48644dd7f51862398eb7d070f4e5101bfe095"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/docker-credential-helper-ecr.rb",
  "ruby_source_checksum": {
    "sha256": "48032b4a2d67207032dce0d8438c43a8a479c22678a5d172cd5cc00214b8bc26"
  },
  "date_added": "2018-08-10T15:41:51+02:00",
  "readme": "# Amazon ECR Docker Credential Helper\n\n![Amazon ECR logo](docs/ecr.png \"Amazon ECR\")\n\n[![Build](https://github.com/awslabs/amazon-ecr-credential-helper/actions/workflows/build.yaml/badge.svg)](https://github.com/awslabs/amazon-ecr-credential-helper/actions/workflows/build.yaml)\n[![Go Report Card](https://goreportcard.com/badge/github.com/awslabs/amazon-ecr-credential-helper)](https://goreportcard.com/report/github.com/awslabs/amazon-ecr-credential-helper)\n[![latest packaged version(s)](https://repology.org/badge/latest-versions/amazon-ecr-credential-helper.svg)](https://repology.org/project/amazon-ecr-credential-helper/versions)\n\nThe Amazon ECR Docker Credential Helper is a\n[credential helper](https://github.com/docker/docker-credential-helpers)\nfor the Docker daemon that makes it easier to use\n[Amazon Elastic Container Registry](https://aws.amazon.com/ecr/).\n\n## Prerequisites\n\nYou must have at least Docker 1.11 installed on your system.\n\nYou also must have AWS credentials available.  See the [AWS credentials section](#aws-credentials) for details on how to\nuse different AWS credentials.\n\n## Installing\n\n### Amazon Linux 2023 (AL2023)\nYou can install the Amazon ECR Credential Helper from the Amazon Linux 2023 repositories.\n\n```bash\n$ sudo dnf install -y amazon-ecr-credential-helper\n```\n\nOnce you have installed the credential helper, see the\n[Configuration section](#configuration) for instructions on how to configure\nDocker to work with the helper.\n\n### Amazon Linux 2 (AL2)\nYou can install the Amazon ECR Credential Helper from the [`docker` or `ecs`\nextras](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/amazon-linux-ami-basics.html#extras-library).\n\n```bash\n$ sudo amazon-linux-extras enable docker\n$ sudo yum install amazon-ecr-credential-helper\n```\n\nOnce you have installed the credential helper, see the\n[Configuration section](#configuration) for instructions on how to configure\nDocker to work with the helper.\n\n### Mac OS\nA community-maintained Homebrew formula is available in the core tap.\n\n[![Homebrew package](https://repology.org/badge/version-for-repo/homebrew/amazon-ecr-credential-helper.svg)](https://repology.org/project/amazon-ecr-credential-helper/versions)\n\n```bash\n$ brew install docker-credential-helper-ecr\n```\n\nOn macOS, another community-maintained installation method is to use MacPorts.\n\n[![MacPorts package](https://repology.org/badge/version-for-repo/macports/amazon-ecr-credential-helper.svg)](https://repology.org/project/amazon-ecr-credential-helper/versions)\n\n```bash\n$ sudo port install docker-credential-helper-ecr\n```\n\nOnce you have installed the credential helper, see the\n[Configuration section](#configuration) for instructions on how to configure\nDocker to work with the helper.\n\n### Debian Buster (and future versions)\nYou can install the Amazon ECR Credential Helper from the Debian Buster\narchives.  This package will also be included in future releases of Debian.\n\n[![Debian 10 package](https://repology.org/badge/version-for-repo/debian_10/amazon-ecr-credential-helper.svg)](https://repology.org/project/amazon-ecr-credential-helper/versions)\n[![Debian 11 package](https://repology.org/badge/version-for-repo/debian_11/amazon-ecr-credential-helper.svg)](https://repology.org/project/amazon-ecr-credential-helper/versions)\n[![Debian 12 package](https://repology.org/badge/version-for-repo/debian_12/amazon-ecr-credential-helper.svg)](https://repology.org/project/amazon-ecr-credential-helper/versions)\n[![Debian Unstable package](https://repology.org/badge/version-for-repo/debian_unstable/amazon-ecr-credential-helper.svg)](https://repology.org/metapackage/amazon-ecr-credential-helper/versions)\n\n```bash\n$ sudo apt update\n$ sudo apt install amazon-ecr-credential-helper\n```\n\nOnce you have installed the credential helper, see the\n[Configuration section](#configuration) for instructions on how to configure\nDocker to work with the helper.\n\n### Ubuntu 19.04 Disco Dingo and newer\nYou can install the Amazon ECR Credential Helper from the Ubuntu 19.04 Disco\nDingo (and newer) archives.\n\n[![Ubuntu 20.04 package](https://repology.org/badge/version-for-repo/ubuntu_20_04/amazon-ecr-credential-helper.svg)](https://repology.org/project/amazon-ecr-credential-helper/versions)\n[![Ubuntu 22.04 package](https://repology.org/badge/version-for-repo/ubuntu_22_04/amazon-ecr-credential-helper.svg)](https://repology.org/project/amazon-ecr-credential-helper/versions)\n\n```bash\n$ sudo apt update\n$ sudo apt install amazon-ecr-credential-helper\n```\n\nOnce you have installed the credential helper, see the\n[Configuration section](#configuration) for instructions on how to configure\nDocker to work with the helper.\n\n### Arch Linux\nA community-maintained package is available in the Arch User Repository.\n\n[![AUR package](https://repology.org/badge/version-for-repo/aur/amazon-ecr-credential-helper.svg)](https://repology.org/metapackage/amazon-ecr-credential-helper/versions)\n\n```bash\n$ git clone https://aur.archlinux.org/amazon-ecr-credential-helper.git\n$ cd amazon-ecr-credential-helper\n$ makepkg -si\n```\n\nOnce you have installed the credential helper, see the\n[Configuration section](#configuration) for instructions on how to configure\nDocker to work with the helper.\n\n### From Source\nTo build and install the Amazon ECR Docker Credential Helper, we suggest Go\n1.19 or later, `git` and `make` installed on your system.\n\nIf you just installed Go, make sure you also have added it to your PATH or \nEnvironment Vars (Windows). For example:\n\n```\n$ export GOPATH=$HOME/go\n$ export PATH=$PATH:$GOPATH/bin\n```\n\nOr in Windows:\n\n```\nsetx GOPATH %USERPROFILE%\\go\n<your existing PATH definitions>;%USERPROFILE%\\go\\bin\n```\n\nIf you haven't defined the PATH, the command below will fail silently, and\nrunning `docker-credential-ecr-login` will output: `command not found`\n\nYou can install this via the `go` command line tool.\n\nTo install run:\n\n```\ngo install github.com/awslabs/amazon-ecr-credential-helper/ecr-login/cli/docker-credential-ecr-login@latest\n```\n\nIf you already have Docker environment, just clone this repository anywhere\nand run `make docker`. This command builds the binary with Go inside the Docker\ncontainer and output it to local directory.\n\nWith `TARGET_GOOS` environment variable, you can also cross compile the binary.\n\nOnce you have installed the credential helper, see the\n[Configuration section](#configuration) for instructions on how to configure\nDocker to work with the helper.\n\n## Configuration\n\n### Docker\n\nPlace the `docker-credential-ecr-login` binary on your `PATH` and set the\ncontents of your `~/.docker/config.json` file to be:\n\n```json\n{\n\t\"credsStore\": \"ecr-login\"\n}\n```\nThis configures the Docker daemon to use the credential helper for all Amazon\nECR registries.\n\nThe Amazon ECR Docker Credential Helper can be used alongside your existing docker login authentication tokens: \n\n```json\n{\n\t\"credsStore\": \"ecr-login\",\n\t\"auths\": {\n\t\t\"https://index.docker.io/v1/\": {\n\t\t\t\"auth\": [docker.io-auth-token]\n\t\t},\n\t\t\"registry.gitlab.com\": {\n\t\t\t\"auth\": [gitlab-auth-token]\n\t\t},\n\t}\n}\n```\n\nWith Docker 1.13.0 or greater, you can configure Docker to use different\ncredential helpers for different ECR registries. To use this credential helper for\na specific ECR registry, create a `credHelpers` section with the URI of your\nECR registry:\n\n```json\n{\n\t\"credHelpers\": {\n\t\t\"public.ecr.aws\": \"ecr-login\",\n\t\t\"<aws_account_id>.dkr.ecr.<region>.amazonaws.com\": \"ecr-login\"\n\t}\n}\n```\n\nThis is useful if you use `docker` to operate on registries that use different\nauthentication credentials.\n\n### AWS credentials\n\nThe Amazon ECR Docker Credential Helper allows you to use AWS credentials stored in different locations.  Standard ones\ninclude:\n\n* The shared credentials file (`~/.aws/credentials`)\n* The `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY` environment variables\n* An [IAM role for an Amazon ECS task](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html)\n* An [IAM role for Amazon EC2](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html)\n\nTo use credentials associated with a different named profile in the shared credentials file (`~/.aws/credentials`), you\nmay set the `AWS_PROFILE` environment variable. \n\nThe Amazon ECR Docker Credential Helper reads and supports some configuration options specified in the AWS\nshared configuration file (`~/.aws/config`).  To disable these options, you must set the `AWS_SDK_LOAD_CONFIG` environment\nvariable to `false`.  The supported options include:\n\n* Assumed roles specified with `role_arn` and `source_profile`\n* External credential processes specified with `credential_process`\n* Web Identities like [IAM Roles for Service Accounts in\n  Kubernetes](https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html) (*Note: Kubernetes\n  users using containers with a non-root user may encounter permission issues described in [this\n  bug](https://github.com/kubernetes-sigs/external-dns/pull/1185) and may need to employ a workaround adjusting the\n  Kubernetes `securityContext`.*)\n\nThe Amazon ECR Docker Credential Helper uses the same credentials as the AWS\nCLI and the AWS SDKs. For more information about configuring AWS credentials,\nsee\n[Configuration and Credential Files](http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html#cli-config-files)\nin the *AWS Command Line Interface User Guide*.\n\nThe credentials must have a policy applied that\n[allows access to Amazon ECR](http://docs.aws.amazon.com/AmazonECR/latest/userguide/ecr_managed_policies.html).\n\n### Amazon ECR Docker Credential Helper \n\n| Environment Variable  | Sample Value  | Description                                                        |\n| --------------------- | ------------- | ------------------------------------------------------------------ |\n| AWS_ECR_DISABLE_CACHE | true          | Disables the local file auth cache if set to a non-empty value     |\n| AWS_ECR_CACHE_DIR     | ~/.ecr        | Specifies the local file auth cache directory location             |\n\n## Usage\n\n`docker pull 123456789012.dkr.ecr.us-west-2.amazonaws.com/my-repository:my-tag`\n\n`docker push 123456789012.dkr.ecr.us-west-2.amazonaws.com/my-repository:my-tag`\n\n`docker pull public.ecr.aws/amazonlinux/amazonlinux:latest`\n\nIf you have configured additional profiles for use with the AWS CLI, you can use\nthose profiles by specifying the `AWS_PROFILE` environment variable when invoking `docker`.\nFor example:\n\n`AWS_PROFILE=myprofile docker pull 123456789012.dkr.ecr.us-west-2.amazonaws.com/my-repository:my-tag`\n\nThere is no need to use `docker login` or `docker logout`.\n\n## Troubleshooting\n\nIf you have previously authenticated with an ECR repository by using the `docker login` command manually\nthen Docker may have stored an auth token which has since expired.\nDocker will continue to attempt to use that cached auth token\ninstead of utilizing the credential helper. You must explicitly remove the previously cached expired\ntoken using `docker logout 123456789012.dkr.ecr.us-west-2.amazonaws.com/my-repository`. After that\nDocker will start utilizing the ECR credential helper to fetch fresh credentials, and you will no longer\nneed to use `docker login` or `docker logout`.\n\nLogs from the Amazon ECR Docker Credential Helper are stored in `~/.ecr/log`.\n\nFor more information about Amazon ECR, see the the\n[Amazon Elastic Container Registry User Guide](http://docs.aws.amazon.com/AmazonECR/latest/userguide/what-is-ecr.html).\n\n## Security disclosures\n\nIf you think you’ve found a potential security issue, please do not post it in the Issues.  Instead, please follow the instructions [here](https://aws.amazon.com/security/vulnerability-reporting/) or [email AWS security directly](mailto:aws-security@amazon.com).\n\n## License\n\nThe Amazon ECR Docker Credential Helper is licensed under the Apache 2.0\nLicense."
}
