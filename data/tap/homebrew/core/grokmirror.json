{
  "name": "grokmirror",
  "full_name": "grokmirror",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Framework to smartly mirror git repositories",
  "license": "GPL-3.0-or-later",
  "homepage": "https://github.com/mricon/grokmirror",
  "versions": {
    "stable": "2.0.11",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://files.pythonhosted.org/packages/b0/ef/ffad6177d84dafb7403ccaca2fef735745d5d43200167896a2068422ae89/grokmirror-2.0.11.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "6bc1310dc9a0e97836201e6bb14ecbbee332b0f812b9ff345a8386cb267c908c"
    },
    "head": {
      "url": "https://github.com/mricon/grokmirror.git",
      "branch": "master"
    }
  },
  "revision": 2,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/grokmirror/blobs/sha256:73ae89acb4c7def53559729f8f7a37c18140aa65e2d1836e97e2640510a5cc69",
          "sha256": "73ae89acb4c7def53559729f8f7a37c18140aa65e2d1836e97e2640510a5cc69"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/grokmirror/blobs/sha256:94f0c4f7ad10d5301396cfce4389cca18b7b208e2299ddcf81a943d1f723ff69",
          "sha256": "94f0c4f7ad10d5301396cfce4389cca18b7b208e2299ddcf81a943d1f723ff69"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/grokmirror/blobs/sha256:43045fb385768269c06856aae331a93cbe24ea9b769fb88739be724a7c7067f3",
          "sha256": "43045fb385768269c06856aae331a93cbe24ea9b769fb88739be724a7c7067f3"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/grokmirror/blobs/sha256:5481325e57b39888152baa254d0f091c55f7d603050d5e61102b2b518b185b5e",
          "sha256": "5481325e57b39888152baa254d0f091c55f7d603050d5e61102b2b518b185b5e"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/grokmirror/blobs/sha256:37446fc2f9ba8e008dced680ec6c08881c44c9d857537fcb57d5b87eb5bfd928",
          "sha256": "37446fc2f9ba8e008dced680ec6c08881c44c9d857537fcb57d5b87eb5bfd928"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/grokmirror/blobs/sha256:f648228c496b4775915812f408d1fb583dec08e0eb228001684d53b005fb3115",
          "sha256": "f648228c496b4775915812f408d1fb583dec08e0eb228001684d53b005fb3115"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/grokmirror/blobs/sha256:fef19a72c9865114e655c208d4040d12548165d2f0a3992c5b86cb715f932671",
          "sha256": "fef19a72c9865114e655c208d4040d12548165d2f0a3992c5b86cb715f932671"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "python@3.11"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/grokmirror.rb",
  "ruby_source_checksum": {
    "sha256": "2462306e432446dd1013395775191ad77eabd20faf55a9dc67a1f6370b1a82cc"
  },
  "date_added": "2021-01-29T08:34:49+00:00",
  "readme": "GROKMIRROR\n==========\n--------------------------------------------\nFramework to smartly mirror git repositories\n--------------------------------------------\n\n:Author:    konstantin@linuxfoundation.org\n:Date:      2020-09-18\n:Copyright: The Linux Foundation and contributors\n:License:   GPLv3+\n:Version:   2.0.0\n\nDESCRIPTION\n-----------\nGrokmirror was written to make replicating large git repository\ncollections more efficient. Grokmirror uses the manifest file published\nby the origin server in order to figure out which repositories to clone,\nand to track which repositories require updating. The process is\nlightweight and efficient both for the primary and for the replicas.\n\nCONCEPTS\n--------\nThe origin server publishes a json-formatted manifest file containing\ninformation about all git repositories that it carries. The format of\nthe manifest file is as follows::\n\n    {\n      \"/path/to/bare/repository.git\": {\n        \"description\": \"Repository description\",\n        \"head\":        \"ref: refs/heads/branchname\",\n        \"reference\":   \"/path/to/reference/repository.git\",\n        \"forkgroup\":   \"forkgroup-guid\",\n        \"modified\":    timestamp,\n        \"fingerprint\": sha1sum(git show-ref),\n        \"symlinks\": [\n            \"/location/to/symlink\",\n            ...\n        ],\n       }\n       ...\n    }\n\nThe manifest file is usually gzip-compressed to preserve bandwidth.\n\nEach time a commit is made to one of the git repositories, it\nautomatically updates the manifest file using an appropriate git hook,\nso the manifest.js file should always contain the most up-to-date\ninformation about the state of all repositories.\n\nThe mirroring clients will poll the manifest.js file and download the\nupdated manifest if it is newer than the locally stored copy (using\n``Last-Modified`` and ``If-Modified-Since`` http headers). After\ndownloading the updated manifest.js file, the mirrors will parse it to\nfind out which repositories have been updated and which new repositories\nhave been added.\n\nObject Storage Repositories\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\nGrokmirror 2.0 introduces the concept of \"object storage repositories\",\nwhich aims to optimize how repository forks are stored on disk and\nserved to the cloning clients.\n\nWhen grok-fsck runs, it will automatically recognize related\nrepositories by analyzing their root commits. If it finds two or more\nrelated repositories, it will set up a unified \"object storage\" repo and\nfetch all refs from each related repository into it.\n\nFor example, you can have two forks of linux.git:\n  torvalds/linux.git:\n    refs/heads/master\n    refs/tags/v5.0-rc3\n    ...\n\nand its fork:\n\n  maintainer/linux.git:\n    refs/heads/master\n    refs/heads/devbranch\n    refs/tags/v5.0-rc3\n    ...\n\nGrok-fsck will set up an object storage repository and fetch all refs from\nboth repositories:\n\n  objstore/[random-guid-name].git\n     refs/virtual/[sha1-of-torvalds/linux.git:12]/heads/master\n     refs/virtual/[sha1-of-torvalds/linux.git:12]/tags/v5.0-rc3\n     ...\n     refs/virtual/[sha1-of-maintainer/linux.git:12]/heads/master\n     refs/virtual/[sha1-of-maintainer/linux.git:12]/heads/devbranch\n     refs/virtual/[sha1-of-maintainer/linux.git:12]/tags/v5.0-rc3\n     ...\n\nThen both torvalds/linux.git and maintainer/linux.git with be configured\nto use objstore/[random-guid-name].git via objects/info/alternates\nand repacked to just contain metadata and no objects.\n\nThe alternates repository will be repacked with \"delta islands\" enabled,\nwhich should help optimize clone operations for each \"sibling\"\nrepository.\n\nPlease see the example grokmirror.conf for more details about\nconfiguring objstore repositories.\n\n\nORIGIN SETUP\n------------\nInstall grokmirror on the origin server using your preferred way.\n\n**IMPORTANT: Only bare git repositories are supported.**\n\nYou will need to add a hook to each one of your repositories that would\nupdate the manifest upon repository modification. This can either be a\npost-receive hook, or a post-update hook. The hook must call the\nfollowing command::\n\n    /usr/bin/grok-manifest -m /var/www/html/manifest.js.gz \\\n        -t /var/lib/gitolite3/repositories -n `pwd`\n\nThe **-m** flag is the path to the manifest.js file. The git process\nmust be able to write to it and to the directory the file is in (it\ncreates a manifest.js.randomstring file first, and then moves it in\nplace of the old one for atomicity).\n\nThe **-t** flag is to help grokmirror trim the irrelevant toplevel disk\npath, so it is trimmed from the top.\n\nThe **-n** flag tells grokmirror to use the current timestamp instead of\nthe exact timestamp of the commit (much faster this way).\n\nBefore enabling the hook, you will need to generate the manifest.js of\nall your git repositories. In order to do that, run the same command,\nbut omit the -n and the \\`pwd\\` argument. E.g.::\n\n    /usr/bin/grok-manifest -m /var/www/html/manifest.js.gz \\\n        -t /var/lib/gitolite3/repositories\n\nThe last component you need to set up is to automatically purge deleted\nrepositories from the manifest. As this can't be added to a git hook,\nyou can either run the ``--purge`` command from cron::\n\n    /usr/bin/grok-manifest -m /var/www/html/manifest.js.gz \\\n        -t /var/lib/gitolite3/repositories -p\n\nOr add it to your gitolite's ``D`` command using the ``--remove`` flag::\n\n    /usr/bin/grok-manifest -m /var/www/html/manifest.js.gz \\\n        -t /var/lib/gitolite3/repositories -x $repo.git\n\nIf you would like grok-manifest to honor the ``git-daemon-export-ok``\nmagic file and only add to the manifest those repositories specifically\nmarked as exportable, pass the ``--check-export-ok`` flag. See\n``git-daemon(1)`` for more info on ``git-daemon-export-ok`` file.\n\nYou will need to have some kind of httpd server to serve the manifest\nfile.\n\nREPLICA SETUP\n-------------\nInstall grokmirror on the replica using your preferred way.\n\nLocate grokmirror.conf and modify it to reflect your needs. The default\nconfiguration file is heavily commented to explain what each option\ndoes.\n\nMake sure the user \"mirror\" (or whichever user you specified) is able to\nwrite to the toplevel and log locations specified in grokmirror.conf.\n\nYou can either run grok-pull manually, from cron, or as a\nsystemd-managed daemon (see contrib). If you do it more frequently than\nonce every few hours, you should definitely run it as a daemon in order\nto improve performance.\n\nGROK-FSCK\n---------\nGit repositories should be routinely repacked and checked for\ncorruption. This utility will perform the necessary optimizations and\nreport any problems to the email defined via fsck.report_to ('root' by\ndefault). It should run weekly from cron or from the systemd timer (see\ncontrib).\n\nPlease examine the example grokmirror.conf file for various things you\ncan tweak.\n\nFAQ\n---\nWhy is it called \"grok mirror\"?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nBecause it's developed at kernel.org and \"grok\" is a mirror of \"korg\".\nAlso, because it groks git mirroring.\n\nWhy not just use rsync?\n~~~~~~~~~~~~~~~~~~~~~~~\nRsync is extremely inefficient for the purpose of mirroring git trees\nthat mostly consist of a lot of small files that very rarely change.\nSince rsync must calculate checksums on each file during each run, it\nmostly results in a lot of disk thrashing.\n\nAdditionally, if several repositories share objects between each-other,\nunless the disk paths are exactly the same on both the remote and local\nmirror, this will result in broken git repositories.\n\nIt is also a bit silly, considering git provides its own extremely\nefficient mechanism for specifying what changed between revision X and\nrevision Y."
}
