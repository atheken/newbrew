{
  "name": "um",
  "full_name": "um",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Command-line utility for creating and maintaining personal man pages",
  "license": "MIT",
  "homepage": "https://github.com/sinclairtarget/um",
  "versions": {
    "stable": "4.2.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/sinclairtarget/um/archive/4.2.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "f8c3f4bc5933cb4ab9643dcef7b01b8e8edf2dcbcd8062ef3ef214d1673ae64e"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/um/blobs/sha256:0e762de5b91a07098e4c24148a58d32e431ce4bbddce1980665137a60b1c5ca7",
          "sha256": "0e762de5b91a07098e4c24148a58d32e431ce4bbddce1980665137a60b1c5ca7"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/um/blobs/sha256:0e762de5b91a07098e4c24148a58d32e431ce4bbddce1980665137a60b1c5ca7",
          "sha256": "0e762de5b91a07098e4c24148a58d32e431ce4bbddce1980665137a60b1c5ca7"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/um/blobs/sha256:d8adee04ef491baecd2fb172ce7382a8082ba320b39f0d37ebe569a587ef145c",
          "sha256": "d8adee04ef491baecd2fb172ce7382a8082ba320b39f0d37ebe569a587ef145c"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/um/blobs/sha256:0e762de5b91a07098e4c24148a58d32e431ce4bbddce1980665137a60b1c5ca7",
          "sha256": "0e762de5b91a07098e4c24148a58d32e431ce4bbddce1980665137a60b1c5ca7"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/um/blobs/sha256:0e762de5b91a07098e4c24148a58d32e431ce4bbddce1980665137a60b1c5ca7",
          "sha256": "0e762de5b91a07098e4c24148a58d32e431ce4bbddce1980665137a60b1c5ca7"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/um/blobs/sha256:cdec90ed59042a6701044f4bbc22e6b355426f9ba711f400899b672c1300d487",
          "sha256": "cdec90ed59042a6701044f4bbc22e6b355426f9ba711f400899b672c1300d487"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/um/blobs/sha256:266b397cd3e24060e7926f438279325aed89643070618add3db64175e348c04b",
          "sha256": "266b397cd3e24060e7926f438279325aed89643070618add3db64175e348c04b"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/um/blobs/sha256:a4d8c9ddc2b46076eaccf3e3d4eaa43918f3d156e8abd16ad1415ea85f2da8f5",
          "sha256": "a4d8c9ddc2b46076eaccf3e3d4eaa43918f3d156e8abd16ad1415ea85f2da8f5"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/um/blobs/sha256:a479ed6f535f228d1bfa15a7292e58d06a4f07d1238c4fa83f1b99c80564a24e",
          "sha256": "a479ed6f535f228d1bfa15a7292e58d06a4f07d1238c4fa83f1b99c80564a24e"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/um/blobs/sha256:c71496a39f88373f2f233b19384bb1ef43e631b280ca0ba51ffcd2838012904f",
          "sha256": "c71496a39f88373f2f233b19384bb1ef43e631b280ca0ba51ffcd2838012904f"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "ruby"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/um.rb",
  "ruby_source_checksum": {
    "sha256": "36c4be60b7a970361c87560ec2087e1c34b2c81d269457ca31587a2c8d1be735"
  },
  "date_added": "2018-10-25T23:28:00+10:00",
  "readme": "# um\n`um` is a command-line utility for creating and maintaining your own set of\n`man`-like help pages. It is available for MacOS (via\n[Homebrew](https://brew.sh/)) and Linux (via AUR in Arch, otherwise via\nHomebrew, which is [now on Linux](https://docs.brew.sh/Homebrew-on-Linux)).\n\n### Why?\nHave you seen how long `curl`'s man page is? How many times have you gone\nthrough it trying to figure out how to make a POST request?\n\nMan pages are written to be comprehensive, but what humans really need are the\nbullet points. Use `um` to write your own `man`-like help pages that reflect\nwhat you've learned about a command so far.  That way you have an easy\nreference for the things you already know are useful.\n\n### An Example\nSay you've just reminded yourself how `grep` works for the third time this\nmonth. You'd like to hold on to that precious knowledge so you don't have to go\ndigging through the `grep` man page again. You can do that with `um`:\n```\n$ um edit grep\n```\nThis will open your text editor, allowing you to record everything you want to\nremember about `grep`. Once you've saved what you've written, you can pull it\nup again as easily as you would any man page:\n\n```\n$ um grep\n```\nThis will open your pager with whatever you might have for `grep`, say:\n```\nGREP(shell)                                                        GREP(shell)\n\n\nNAME\n       grep -- Print lines matching a pattern\n\nSYNOPSIS\n       grep [OPTIONS...] pattern [FILE...]\n\nREGEX SYNTAX\n       .      Matches any character.\n\n       ^      Anchors pattern to beginning of line.\n\n       $      Anchors pattern to end of line.\n\n       []     Character set.  ^ for negation, - for range.\n\nOPTIONS\n       -r     Recursively search listed directories.\n\n       -E     Force grep to behave as egrep, accepting extended REGEXes.\n\n\n\nUm Pages                      September 26, 2017                   GREP(shell)\n```\n\n`um` supports several additional sub-commands. Among them are:\n* `um list`, which lists all the um pages you already have.\n* `um rm`, which removes an existing um page.\n* `um topic`, which switches between topic namespaces for your pages, allowing\n  you to keep a separate set of um pages for css properties, for example.\n\n### Um Page Format\nMan pages were [historically typeset using the `roff` typesetting\nsystem](http://twobithistory.org/2017/09/28/the-lineage-of-man.html). `roff`\nwas basically an early LaTeX. Writing man pages using `roff` today is not very\nfun or intuitive.\n\nHappily, the Kramdown library can be used to convert Markdown documents to\n`roff`-like man pages. (Previously, `um` used Pandoc. See\n[UPGRADE.md](/UPGRADE.md) if the switch to Kramdown has broken your um pages.)\nBy default, `um` expects you to write your um pages in Markdown so that it can\nconvert them and pass them to the `man` program to view. You can, however,\nelect to just write your um pages as `.txt` files and view them without going\nthrough the `man` program.\n\nBelow is the Markdown source that produced the `grep` listing above. Except for\nthe Kramdown-specific attribute syntax (all the fiddly curly brace bits), it's\nall just Markdown:\n```markdown\n# grep -- Print lines matching a pattern\n{:data-section=\"shell\"}\n{:data-date=\"September 26, 2017\"}\n{:data-extra=\"Um Pages\"}\n{::comment}\n^ The Kramdown \"attribute list\" which provides metadata for the page.\nThe first heading must include the name of the command and a summary.\n{:/}\n\n## SYNOPSIS\n{::comment}Top level Markdown headings become man section headings.{:/}\n**grep** [OPTIONS...] *pattern* [FILE...]\n\n## REGEX SYNTAX\n{::comment}Here we're using a \"definition list\" to get that man page look.{:/}\n\n`.`\n: Matches any character.\n\n`^`\n: Anchors pattern to beginning of line.\n\n`$`\n: Anchors pattern to end of line.\n\n`[]`\n: Character set. ^ for negation, - for range.\n\n## OPTIONS\n`-r`\n: Recursively search listed directories.\n\n`-E`\n: Force grep to behave as egrep, accepting extended REGEXes.\n```\n\nSee [Configuration](#config) below for more information on changing the default\num page format. See the [Kramdown Man Converter\nDocumentation](https://kramdown.gettalong.org/converter/man.html) for more\ninformation about Kramdown's flavor of Markdown and the formatting options\navailable to you when you are writing a man page.\n\n`um`'s own [man pages](/doc) are written in Markdown and converted using\nKramdown, so they could also make a good reference.\n\n## Installation\n\n<a href=\"https://repology.org/metapackage/um/versions\">\n    <img src=\"https://repology.org/badge/vertical-allrepos/um.svg\" alt=\"Packaging status\">\n</a>\n\n* **MacOS/Linux:** `um` is available via [Homebrew](http://brew.sh/):\n```\n$ brew install um\n```\n* **Arch Linux:** `um` is available via the AUR in two versions: the release version [`um`](https://aur.archlinux.org/packages/um/) and the latest master [`um-git`](https://aur.archlinux.org/packages/um-git/)\n\n### Post-Installation\nA bash completion script for `um` is installed to\n`/usr/local/etc/bash_completion.d`, assuming you're using the default `brew`\nprefix. You may need to add the following lines to your `~/.bash_profile` to\nenable the completion:\n```\nif [ -f $(brew --prefix)/etc/bash_completion.d/um-completion.sh ]; then\n  . $(brew --prefix)/etc/bash_completion.d/um-completion.sh\nfi\n```\n\n## Help\nRefer to `um help` for comprehensive documentation of the sub-commands and\noptions available for `um`. Man pages are also available.\n\n<a name=\"config\"></a>\n## Configuration\nYou can configure `um` using a file called `umconfig` placed in a folder called\n`.um` in your home directory. The syntax for setting an option is as follows:\n```\n<option> = <value>\ne.g.\npager = less\n```\n\nYou can set values for `pager`, `editor`, `default_topic`, `pages_directory`,\nand `pages_ext`. The defaults for these options are `less`, `vi`, `shell`,\n`~/.um`, and `.md` respectively. Before falling back to the defaults, `um` will\nattempt to read the values for `pager` and `editor` from the shell environment\n(i.e.  the `PAGER` and `EDITOR` environment variables) if they are not\nspecified in `umconfig`.\n\nOption | Default | Meaning\n--- | --- | ---\n`pager` | `less` | \"Use this pager to view um pages.\"\n`editor` | `vi` | \"Use this editor to edit um pages.\"\n`default_topic` | `shell` | Current topic if none is set.\n`pages_directory` | `~/.um` | Where to store um pages.\n`pages_ext` | `.md` | Unless `.md`, just the extension for your um pages.\n\nThe `pager` configuration option is only used when `pages_ext` is not `.md`\n(the default). When `pages_ext` is `.md`, then `um` runs the pages through\nKramdown before passing them to `man`. The pager used by `man` is determined by\nthe `PAGER` and `MANPAGER` environment variables. See the man page for `man`\nfor more information.\n\nSo, if you wanted to store your um pages in your Dropbox folder, and you prefer\nemacs to vim, your config file might look like the following:\n```\neditor = emacs\npages_directory = /Users/myusername/Dropbox/um\n```\n\nYou can print the current configuration using `um config`.\n\nFinally, if you want to store your umconfig file in a different location, you\ncan specify a new `.um` directory using the `UMCONFIG_HOME` environment\nvariable. Adding `export UMCONFIG_HOME = ~/foo/bar` to your `.bash_profile`,\nfor example, will cause `um` to look for a file called `umconfig` under\n`~/foo/bar` instead of the default `~/.um`.\n\nSpecifying `UMCONFIG_HOME` also changes where `um` looks for template files\n(see next section).\n\n## Page Templating\nIf you place a file called `template.md` in `~/.um`, that file will serve as\nthe basis for any new um pages you create (when `pages_ext` is set to `.md`).\nIf you have `pages_ext` set to something else, perhaps `.txt`, then you should\ncreate a template file called `template.txt`.\n\nThe template file is preprocessed so that the following variables are replaced\nbefore the file is used to create a new um page:\n\nVariable | Substitution\n--- | ---\n`$name` | The name of the page, which you specify when you call `um edit <page name>`.\n`$NAME` | The same as above, but uppercase.\n`$topic` | The name of the current topic.\n`$time` | The current time in RFC2822 format.\n`$date` | The current date as _Month_ _Day_, _Year_.\n\nIf you do not have an appropriate template in your `~/.um` directory, `um`\nfalls back to using its default templates. `um` ships with a default template\nfor `.md` um pages and `.txt` um pages.\n\n## Tips\nIf you want to reset the topic to its default whenever you start a new shell,\nyou can place the following line in your `.bash_profile` or `.bashrc`:\n```\num topic -d\n```"
}
