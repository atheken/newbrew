{
  "name": "md5deep",
  "full_name": "md5deep",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [
    "hashdeep"
  ],
  "versioned_formulae": [],
  "desc": "Recursively compute digests on files/directories",
  "license": "GPL-2.0",
  "homepage": "https://github.com/jessek/hashdeep",
  "versions": {
    "stable": "4.4",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/jessek/hashdeep/archive/release-4.4.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "dbda8ab42a9c788d4566adcae980d022d8c3d52ee732f1cbfa126c551c8fcc46"
    },
    "head": {
      "url": "https://github.com/jessek/hashdeep.git",
      "branch": "master"
    }
  },
  "revision": 1,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/md5deep/blobs/sha256:34dc60be87a6f4d9306468492222ea35455aa08359603f2e1bffa3ae221405de",
          "sha256": "34dc60be87a6f4d9306468492222ea35455aa08359603f2e1bffa3ae221405de"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/md5deep/blobs/sha256:1b64f262b089ff96008078a6dc0f84cce93deec0740b3476279931d982bc9636",
          "sha256": "1b64f262b089ff96008078a6dc0f84cce93deec0740b3476279931d982bc9636"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/md5deep/blobs/sha256:5d910e7454fa350663a1955628c254b7acf813dd7b3aaec162a7be2c002197f0",
          "sha256": "5d910e7454fa350663a1955628c254b7acf813dd7b3aaec162a7be2c002197f0"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/md5deep/blobs/sha256:46f9ea31605459d954b815bc85db4d2c5b5a7c96e81aaeac63ab0eaa2954faeb",
          "sha256": "46f9ea31605459d954b815bc85db4d2c5b5a7c96e81aaeac63ab0eaa2954faeb"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/md5deep/blobs/sha256:58e0dfb42b8a8b0d89745dc0446ee660754f3350c776702384edceb1fe14b8b6",
          "sha256": "58e0dfb42b8a8b0d89745dc0446ee660754f3350c776702384edceb1fe14b8b6"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/md5deep/blobs/sha256:d53f71333428c98de807b2ed6be18fcfd62d473d9994e19db7c7a8db390cac95",
          "sha256": "d53f71333428c98de807b2ed6be18fcfd62d473d9994e19db7c7a8db390cac95"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/md5deep/blobs/sha256:3156ba425284d497cdc5377c1d5d7659fe741811c5b1a390a2dd45f98bf0a19a",
          "sha256": "3156ba425284d497cdc5377c1d5d7659fe741811c5b1a390a2dd45f98bf0a19a"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/md5deep/blobs/sha256:c9e915e46aec5d2ec5460d6b8d73cd7f21b615b8882ab7eef3bbea6c25a8821e",
          "sha256": "c9e915e46aec5d2ec5460d6b8d73cd7f21b615b8882ab7eef3bbea6c25a8821e"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/md5deep/blobs/sha256:a36e25199a0c133790f452fa716c07fc6bc724714f66c30be47f5989b703ed46",
          "sha256": "a36e25199a0c133790f452fa716c07fc6bc724714f66c30be47f5989b703ed46"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "autoconf",
    "automake"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/md5deep.rb",
  "ruby_source_checksum": {
    "sha256": "ec1e051c7b03be455a5d7a958111eeaafac0d9caf8f5cac47b8bc5dea17c05e6"
  },
  "date_added": "2010-01-31T16:25:28-08:00",
  "readme": "This is md5deep, a set of cross-platform tools to compute hashes, or\nmessage digests, for any number of files while optionally recursively\ndigging through the directory structure.  It can also take a list of known\nhashes and display the filenames of input files whose hashes either do or\ndo not match any of the known hashes. This version supports MD5, SHA-1,\nSHA-256, Tiger, and Whirlpool hashes.\n\nSee the file [NEWS](NEWS) for a list of changes between releases.\n\nSee the file [COPYING](COPYING) for information about the licensing for this program.\n\nSee the file [INSTALL](INSTALL) for (generic) compilation and installation\ninstructions. Here's the short version that should just work in many cases:\n\n```shell\nsh bootstrap.sh # runs autoconf, automake\n./configure\nmake\nmake install\n```\n\nNote that you must be normally root to install to the default location.\nThe sudo command is helpful for doing so. You can specify an alternate\ninstallation location using the --prefix option to the configure script.\nFor example, to install to /home/foo/bin, use:\n\n>$ ./configure --prefix=/home/foo\n\nThere is complete documentation on how to use the program on the\nproject's homepage, [https://github.com/jessek/hashdeep](https://github.com/jessek/hashdeep)\n\n## Release hashes\n\nThe latest release is version 4.4. Here are the hashes for the Win32 versions:\n\n* MD5 047ff5311d821f667150f37695bd01b3\n* SHA256 d5e85933e74e5ba6a73f67346bc2e765075d26949c831a428166c92772f67dbc\n\n\n## md5deep vs. hashdeep\n\nFor historical reasons, the program has different options and features\nwhen run with the names \"hashdeep\" and \"md5deep.\"\n\nhashdeep has a feature called \"audit\" which can use a list of known hashes to audit a set of FILES.\nErrors are reported to standard error. If no FILES are specified, reads from standard input.\n\n    -a Audit mode. Each input file is compared against the set of knowns. An\n       audit is said to pass if each input file is matched against exactly\n       one file in set of knowns. Any collisions, new files, or missing files\n       will make the audit fail. Using this flag alone produces a message,\n       either \"Audit passed\" or \"Audit Failed\".\n       -v = prints the number of files in each category\n       -v -v = prints all discrepancies\n       -v -v -v = prints the results for every file examined and every known file.\n    \n    -k <file> - The -k option must be used to load the audit file\n\nTo perform an audit:\n\n    hashdeep -r dir  > /tmp/auditfile            # Generate the audit file\n    hashdeep -a -k /tmp/auditfile -r dir          # test the audit\n\nNotice that the audit is performed with a standard hashdeep output\nfile. (Internally, the audit is computed as part of the hashing process.)\n\n## Unicode Issues\nPOSIX-based modern computer systems consider filenames to be a\nsequence of bytes that are rendered as the application wishes. This\nmeans that filenames typically contain ASCII but can contain UTF-8,\nUTF-16, latin1, or even invalid Unicode codings.\n\nWindows-based systems have one set of API calls for ASCII-based\nfilenames and another set for filenames encoded as UCS-2, which\n\"produces a fixed-length format by simply using the code point as the\n16-bit code unit and produces exactly the same result as UTF-16 for\n63,488 code points in the range 0-0xFFFF\" according to [wikipedia]\n(http://en.wikipedia.org/wiki/UTF-16/UCS-2). But wikipedia disputes the\nfactual accuracy of this statement on the talk page. it's pretty clear\nthat nobody is entirely sure that Windows actually does, and Windows\nitself may not be consistent.\n\nVersion 3 of this program addressed this issue by using the TCHAR\nvariable to hold filenames on Windows and refusing to print them,\npriting a \"?\" instead. Version 4 of this program translates TCHAR\nstrings to std::string strings at the soonest opportunity using the\n[Windows function WideCharToMultiByte]\n(http://msdn.microsoft.com/en-us/library/dd374130%28v=vs.85%29.aspx). Flags\nhave been added escape Unicode when it is printed.\n\nThere is no way (apparently) on Windows to open a UTF-8 filename; it needs to be\nconverted back to a multi-byte filename with MultiByteToWideChar.\n\nFortunately, we never really need to convert back.\n\nNotice that on Windows the files hashed can have unicode characters\nbut the file with the hashes must have an ASCII name.\n\nCOMPILING FOR WINDOWS:\n> -D_UNICODE causes TCHAR to be defined as 'wchar_t'.\n\nCOMPILING FOR POSIX:\n> -D_UNICODE is not defined, causing TCHAR to be defined as 'char'.\n\nPreviously, win32 functions were controlled with #ifdef statements, like this:\n\n```C\n#ifdef _WIN32\n  _wfullpath(d_name,fn,PATH_MAX);\n#else\n  if (NULL == realpath(fn,d_name))\n    return TRUE;\n#endif\n```\n\nThere was also a file called tchar-local.h which actually changed the semantics\nof functions on different platforms, with things like this:\n\n```C\n   #define  _tcsncpy   strncpy\n   #define  _tstat_t   struct stat\n```\n\nThis made the code very difficult to maintain.\n\nWith the 4.0 rewrite, we have changed this code with C++ functions that return\nobjects were possible and avoid the use of #defines that so that on _WIN32 systems\nthe function realpath() gets defined prior to its use, and the mainline code\nlacks the realpath() function. You can see this in cycles.cpp:\n\n```C\n/* Return the canonicalized absolute pathname in UTF-8 on Windows and POSIX systems */\nstd::string get_realpath(const TCHAR *fn)\n{\n#ifdef _WIN32\n    /*\n     * expand a relative path to the full path.\n     * http://msdn.microsoft.com/en-us/library/506720ff(v=vs.80).aspx\n     */\n    TCHAR absPath[PATH_MAX];\n    if(_fullpath(absPath,fn,PAT_HMAX)==0) return \"\";\n    return tchar_to_utf8(absPath);\n#else\n    char resolved_name[PATH_MAX];\t//\n    if(realpath(fn,resolved_name)==0) return \"\";\n    return string(resolved_name);\n#endif\n}\n```\n\nYou can install mingw and then simply configure with something like this:\n>$ export PATH=$PATH:/usr/local/i386-mingw32-4.3.0/bin\n>$ ./configure --host=i386-mingw32\n\n\n## Hash Algorithm References\n\nThe MD5 algorithm is defined in RFC 1321:\nhttp://www.ietf.org/rfc/rfc1321.txt\n\nThe SHA1 algorithm is defined in FIPS 180-1:\nhttp://www.itl.nist.gov/fipspubs/fip180-1.htm\n\nThe SHA256 algorithm is defined FIPS 180-2:\nhttp://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf\n\nThe Tiger algorithm is defined at:\nhttp://www.cs.technion.ac.il/~biham/Reports/Tiger/\n\nThe Whirlpool algorithm is defined at:\nhttp://planeta.terra.com.br/informatica/paulobarreto/WhirlpoolPage.html\n\n## Theory of Operation\n\n* main.cpp\n  * sets up the system\n* dig.cpp\n  * iterates through the individual directories\n  * calls hash_file() in hash.cpp for each file to hash\n* hash.cpp\n  * performs the hashing of each file\n* display.cpp\n  * stores/displays the results"
}
