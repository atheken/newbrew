{
  "name": "kustomizer",
  "full_name": "kustomizer",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Package manager for distributing Kubernetes configuration as OCI artifacts",
  "license": "Apache-2.0",
  "homepage": "https://github.com/stefanprodan/kustomizer",
  "versions": {
    "stable": "2.2.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/stefanprodan/kustomizer/archive/refs/tags/v2.2.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "bba48e2eed5b84111c39b34d9892ffc9f0575b6f6470d50f832f47ff6417bf03"
    },
    "head": {
      "url": "https://github.com/stefanprodan/kustomizer.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kustomizer/blobs/sha256:3ba254b8051b47aa5f1fb36236027a7ba73cda8218c504b43065ab3ad7677584",
          "sha256": "3ba254b8051b47aa5f1fb36236027a7ba73cda8218c504b43065ab3ad7677584"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kustomizer/blobs/sha256:cc06563ebe12218833949dd690e7c3ffbe71d815e16581657ba4971af6ad1a64",
          "sha256": "cc06563ebe12218833949dd690e7c3ffbe71d815e16581657ba4971af6ad1a64"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kustomizer/blobs/sha256:34ca6d21c6761b9732b0bd0cbb3bdc7bfa8c0701ba7edf2bd236f820be1ef44b",
          "sha256": "34ca6d21c6761b9732b0bd0cbb3bdc7bfa8c0701ba7edf2bd236f820be1ef44b"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kustomizer/blobs/sha256:417bce8bb8cb178b6fcc5386ecbf4a01405253abfca33c036a03f99058ce9dd7",
          "sha256": "417bce8bb8cb178b6fcc5386ecbf4a01405253abfca33c036a03f99058ce9dd7"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kustomizer/blobs/sha256:826930275079d88859fd26976d3e7d8d7e9ebf57edeae256e232ce4c3603ce2f",
          "sha256": "826930275079d88859fd26976d3e7d8d7e9ebf57edeae256e232ce4c3603ce2f"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kustomizer/blobs/sha256:8f9ac16b04e1da34901f680da8c8f481e605d374822cf77752d68777f9cd9cf1",
          "sha256": "8f9ac16b04e1da34901f680da8c8f481e605d374822cf77752d68777f9cd9cf1"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kustomizer/blobs/sha256:e954a47cd5a1e00b299a62432ec532ddd4545a7c2de6c4d669e2242af9080eb8",
          "sha256": "e954a47cd5a1e00b299a62432ec532ddd4545a7c2de6c4d669e2242af9080eb8"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kustomizer/blobs/sha256:2ed1242aaec95d97b1c835476b50556d96a6f8902d1bcdeca14fa7625243b437",
          "sha256": "2ed1242aaec95d97b1c835476b50556d96a6f8902d1bcdeca14fa7625243b437"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/kustomizer.rb",
  "ruby_source_checksum": {
    "sha256": "a3e984dfc4c4a9482212e073cf5896836a58e1dcfd1949ef9c4c3107bf3ac8b5"
  },
  "date_added": "2022-11-21T17:31:51+00:00",
  "readme": "# kustomizer\n\n[![report](https://goreportcard.com/badge/github.com/stefanprodan/kustomizer)](https://goreportcard.com/report/github.com/stefanprodan/kustomizer)\n[![e2e](https://github.com/stefanprodan/kustomizer/workflows/e2e/badge.svg)](https://github.com/stefanprodan/kustomizer/actions)\n[![codecov](https://codecov.io/gh/stefanprodan/kustomizer/branch/main/graph/badge.svg?token=KEU5W1LSZC)](https://codecov.io/gh/stefanprodan/kustomizer)\n[![license](https://img.shields.io/github/license/stefanprodan/kustomizer.svg)](https://github.com/stefanprodan/kustomizer/blob/main/LICENSE)\n[![release](https://img.shields.io/github/release/stefanprodan/kustomizer/all.svg)](https://github.com/stefanprodan/kustomizer/releases)\n\nKustomizer is an experimental package manager for distributing Kubernetes configuration as OCI artifacts.\nIt offers commands to publish, fetch, diff, customize, validate, apply and prune Kubernetes resources.\n\nKustomizer relies on [server-side apply](https://kubernetes.io/docs/reference/using-api/server-side-apply/)\nand requires a Kubernetes cluster **v1.20** or newer.\n\n## Install\n\nThe Kustomizer CLI is available as a binary executable for all major platforms,\nthe binaries can be downloaded from GitHub [releases](https://github.com/stefanprodan/kustomizer/releases).\nThe binaries checksums are signed with Cosign\nand each release comes with a Software Bill of Materials (SBOM) in SPDX format.\n\nInstall the latest release on macOS or Linux with Homebrew:\n\n```bash\nbrew install stefanprodan/tap/kustomizer\n```\n\nFor other installation methods,\nsee [kustomizer.dev/install](https://kustomizer.dev/install/).\n\n## Get started\n\nTo get started with Kustomizer please visit the documentation website at [kustomizer.dev](https://kustomizer.dev/).\n\n## Concepts\n\n### OCI Artifacts\n\nKustomizer offers a way to distribute Kubernetes configuration using container registries.\nIt can package Kubernetes manifests in an OCI image and store them in a container registry,\nright next to your applications' images.\n\nKustomizer comes with commands for managing OCI artifacts:\n\n- `kustomizer push artifact oci://<image-url>:<tag> -k [-f] [-p]`\n- `kustomizer tag artifact oci://<image-url>:<tag> <new-tag>`\n- `kustomizer list artifacts oci://<repo-url> --semver <condition>`\n- `kustomizer pull artifact oci://<image-url>:<tag>`\n- `kustomizer inspect artifact oci://<image-url>:<tag>`\n- `kustomizer diff artifact <oci url> <oci url>`\n\nKustomizer is compatible with Docker Hub, GHCR, ACR, ECR, GCR, Artifactory,\nself-hosted Docker Registry and others. For auth, it uses the credentials from `~/.docker/config.json`.\n\n#### Sign & Verify Artifacts\n\nKustomizer can sign and verify artifacts using [sigstore/cosign](https://github.com/sigstore/cosign) either with\nstatic keys, Cloud KMS or keyless signatures\n(when running [Kustomizer with GitHub Actions](https://kustomizer.dev/github-actions/#publish-signed-artifacts)):\n\n- `kustomizer push artifact --sign --cosign-key <private key>`\n- `kustomizer pull artifact --verify --cosign-key <public key>`\n- `kustomizer inspect artifact --verify --cosign-key <public key>`\n\nFor an example on how to secure your Kubernetes supply chain with Kustomizer and Cosign\nplease see [this guide](https://kustomizer.dev/guides/secure-supply-chain/).\n\n### Resource Inventories\n\nKustomizer offers a way for grouping Kubernetes resources.\nIt generates an inventory which keeps track of the set of resources applied together.\nThe inventory is stored inside the cluster in a `ConfigMap` object and contains metadata\nsuch as the resources provenance and revision.\n\nThe Kustomizer garbage collector uses the inventory to keep track of the applied resources\nand prunes the Kubernetes objects that were previously applied but are missing from the current revision.\n\nYou specify an inventory name and namespace at apply time, and then you can use Kustomizer to\nlist, diff, update, and delete inventories:\n\n- `kustomizer apply inventory <name> [--artifact <oci url>] [-f] [-p] -k`\n- `kustomizer diff inventory <name> [-a] [-f] [-p] -k`\n- `kustomizer get inventories --namespace <namespace>`\n- `kustomizer inspect inventory <name> --namespace <namespace>`\n- `kustomizer delete inventory <name> --namespace <namespace>`\n\nWhen applying resources from OCI artifacts, Kustomizer saves the artifacts URL and\nthe image SHA-2 digest in the inventory. For deterministic and repeatable apply operations,\nyou could use digests instead of tags.\n\n### Encryption at rest\n\nKustomizer has builtin support for encrypting and decrypting Kubernetes configuration (packaged as OCI artifacts)\nusing [age](https://github.com/FiloSottile/age) asymmetric keys.\n\nTo securely distribute sensitive Kubernetes configuration to trusted users,\nyou can encrypt the artifacts with their age public keys:\n\n- `kustomizer push artifact oci://<image-url>:<tag> --age-recipients <public keys>`\n\nUsers can access the artifacts by decrypting them with their age private keys:\n\n- `kustomizer inspect artifact oci://<image-url>:<tag> --age-identities <private keys>`\n- `kustomizer pull artifact oci://<image-url>:<tag> --age-identities <private keys>`\n- `kustomizer apply inventory <name> [--artifact <oci url>] --age-identities <private keys>`\n- `kustomizer diff inventory <name> [--artifact <oci url>] --age-identities <private keys>`\n\n## Contributing\n\nKustomizer is [Apache 2.0 licensed](LICENSE) and accepts contributions via GitHub pull requests."
}
