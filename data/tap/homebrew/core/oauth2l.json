{
  "name": "oauth2l",
  "full_name": "oauth2l",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Simple CLI for interacting with Google oauth tokens",
  "license": "Apache-2.0",
  "homepage": "https://github.com/google/oauth2l",
  "versions": {
    "stable": "1.3.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/google/oauth2l/archive/v1.3.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "3f708e3fab87c6ae50e0608b02b01a66ce427a4097f3a73f1fa8c6ea43839110"
    },
    "head": {
      "url": "https://github.com/google/oauth2l.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/oauth2l/blobs/sha256:cc2222b38a273a02d10469b8afc109f2a4a56aa7a00c7d73d0cd7c7e40f8d8ae",
          "sha256": "cc2222b38a273a02d10469b8afc109f2a4a56aa7a00c7d73d0cd7c7e40f8d8ae"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/oauth2l/blobs/sha256:536c361c46b2a7cebd434232a569a58bf8b3d3f044d87a0039e9bc15fed649a0",
          "sha256": "536c361c46b2a7cebd434232a569a58bf8b3d3f044d87a0039e9bc15fed649a0"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/oauth2l/blobs/sha256:9a27a3caddf537d71ba7a9141bb45a1014d87ac09860ce4d8a7028f2ea0889b0",
          "sha256": "9a27a3caddf537d71ba7a9141bb45a1014d87ac09860ce4d8a7028f2ea0889b0"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/oauth2l/blobs/sha256:5780d38cafe48c11c898d2e93136236f125cf395d8a0d1af64c152971d948b88",
          "sha256": "5780d38cafe48c11c898d2e93136236f125cf395d8a0d1af64c152971d948b88"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/oauth2l/blobs/sha256:85bd37fe734114478406c309c2942b21b8f214fba580ae255e4a928c39b922a4",
          "sha256": "85bd37fe734114478406c309c2942b21b8f214fba580ae255e4a928c39b922a4"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/oauth2l/blobs/sha256:6340b839cb5e06f979114bafce5a67786bc1dbd6c41e4f1875c32a7de65704d9",
          "sha256": "6340b839cb5e06f979114bafce5a67786bc1dbd6c41e4f1875c32a7de65704d9"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/oauth2l/blobs/sha256:e7ea7d1924d3c3f43ed24dd3f8827d8632bc7d7b4464c3b42a5d38772eda7068",
          "sha256": "e7ea7d1924d3c3f43ed24dd3f8827d8632bc7d7b4464c3b42a5d38772eda7068"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/oauth2l/blobs/sha256:d23bccc4390cd2cde0becd13dc32a7174b66072c7ebbea4e438feddef466cd80",
          "sha256": "d23bccc4390cd2cde0becd13dc32a7174b66072c7ebbea4e438feddef466cd80"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/oauth2l.rb",
  "ruby_source_checksum": {
    "sha256": "3472fc93205f175700ee28d4e2a0516537a700755ed2b7b779667f92e0378b55"
  },
  "date_added": "2019-11-05T09:14:01-05:00",
  "readme": "## oauth2l\n\n`oauth2l` (pronounced \"oauth tool\") is a simple command-line tool for\nworking with\n[Google OAuth 2.0](https://developers.google.com/identity/protocols/OAuth2)\nwritten in Go. Its primary use is to fetch and print OAuth 2.0 access\ntokens, which can be used with other command-line tools and shell scripts.\n\n## Overview\n\n`oauth2l` supports all Google OAuth 2.0 authentication flows for both user\naccounts and service accounts in different environments:\n\n- When running inside Google Compute Engine (GCE) and Google Kubernetes\n  Engine (GKE), it uses the credentials of the current service account\n  if it is available.\n\n- When running inside user context that has an active Google Cloud SDK\n  (gcloud) session, it uses the current gcloud credentials.\n\n- When running with command option `--credentials xxx`, where `xxx` points to\n  a JSON credential file downloaded from\n  [Google Cloud Console](https://console.cloud.google.com/apis/credentials),\n  `oauth2l` uses the file to start an OAuth session. The file can be\n  either a service account key or an OAuth client ID.\n\n- When running with command option `--type jwt --audience xxx` and a service\n  account key, a JWT token signed by the service account key will be generated.\n\n- When running with command option `--type sso --email xxx`, `oauth2l` invokes\n  an external `sso` command to retrieve Single Sign-on (SSO) access token.\n\n- By default, retrieved tokens will be cached and stored in \"~/.oauth2l\".\n  The cache location can be overridden via `--cache xxx`. To disable\n  caching, set cache location to empty (\"\").\n\n## Quickstart\n\n### Pre-compiled binaries\n\nPre-built binaries are available for Darwin (Mac OS X), Linux, and Windows. You\ncan download a build for any tag, for example:\n\n| OS      | Link                                                            |\n| ------- | --------------------------------------------------------------- |\n| Darwin  | https://storage.googleapis.com/oauth2l/latest/darwin_amd64.tgz  |\n| Linux   | https://storage.googleapis.com/oauth2l/latest/linux_amd64.tgz   |\n| Windows | https://storage.googleapis.com/oauth2l/latest/windows_amd64.tgz |\n\nSubstitute \"latest\" for any tag version you'd like, removing any leading \"v\"\nprefix.\n\n### Homebrew (Mac OS X)\n\nOn Mac OS X, you can install `oauth2l` via [Homebrew](https://brew.sh):\n\n```bash\n$ brew install oauth2l\n```\n\nNote that new releases may not be immediately available via Homebrew because\nupdating is a manual process.\n\n### Docker\n\nAn official Docker image is available at:\n\n```text\ngcr.io/oauth2l/oauth2l\n```\n\nYou can run this directly:\n\n```sh\n$ docker run -it gcr.io/oauth2l/oauth2l header cloud-platform\n```\n\nOr use it to inject into an existing container:\n\n```dockerfile\nFROM my-awesome-container\nCOPY --from gcr.io/oauth2l/oauth2l /bin/oauth2l /bin/oauth2l\n```\n\nLike the binary releases, the container images are tagged to match the\nrepository tags (without the leading \"v\"). For master builds, use the \"latest\"\ntag.\n\n### Everywhere else\n\nOn other systems, you need to meet the following requirements to use this tool:\n\n**Minimum requirements:**\n\n- The tool is only available for _Linux_ or _Mac_\n- _Go 1.10.3_ or higher\n\n**Nice to have:**\n\n- Add your _\\$GOPATH/bin_ into your _\\$PATH_ ([instructions](https://github.com/golang/go/wiki/GOPATH))\n\n```bash\n# Get the package from Github\n$ git clone https://github.com/google/oauth2l\n$ cd oauth2l\n\n# Install the package into your $GOPATH/bin/\n$ make dev\n\n# Fetch the access token from your credentials with cloud-platform scope\n$ ~/go/bin/oauth2l fetch --credentials ~/your_credentials.json --scope cloud-platform\n\n# Or you can run if you $GOPATH/bin is already in your $PATH\n$ oauth2l fetch --credentials ~/your_credentials.json --scope cloud-platform\n```\n\n## Commands\n\n### fetch\n\nFetch and print an access token for the specified OAuth scopes. For example,\nthe following command prints access token for the following OAuth2 scopes:\n\n- https://www.googleapis.com/auth/userinfo.email\n- https://www.googleapis.com/auth/cloud-platform\n\n```bash\n$ oauth2l fetch --scope userinfo.email,cloud-platform\nya29.zyxwvutsrqpnmolkjihgfedcba\n```\n\n### header\n\nThe same as `fetch`, except the output is in HTTP header format:\n\n```bash\n$ oauth2l header --scope cloud-platform\nAuthorization: Bearer ya29.zyxwvutsrqpnmolkjihgfedcba\n```\n\nThe `header` command is designed to be easy to use with the `curl` CLI. For\nexample, the following command uses the PubSub API to list all PubSub topics.\n\n```bash\n$ curl -H \"$(oauth2l header --scope pubsub)\" https://pubsub.googleapis.com/v1/projects/my-project-id/topics\n```\n\nTo send an API request using domain-wide delegation (DwD), for example, to\nlist `user@example.com`'s Gmail labels:\n\n```bash\n$ curl -H \"$(oauth2l header --email user@example.com --credentials service_account_credentials.json --scope https://www.googleapis.com/auth/gmail.labels)\" https://gmail.googleapis.com/gmail/v1/users/me/labels\n```\n\n### curl\n\nThis is a shortcut command that fetches an access token for the specified OAuth\nscopes and uses the token to make a curl request (via 'usr/bin/curl' by\ndefault). Additional flags after \"--\" will be treated as curl flags.\n\n```bash\n$ oauth2l curl --scope cloud-platform,pubsub --url https://pubsub.googleapis.com/v1/projects/my-project-id/topics -- -i\n```\n\nTo send an API request using domain-wide delegation (DwD), for example, to\nlist `user@example.com`'s Gmail labels:\n\n```bash\n$ oauth2l curl --email user@example.com --credentials service_account_credentials.json --scope https://www.googleapis.com/auth/gmail.labels --url https://gmail.googleapis.com/gmail/v1/users/me/labels\n```\n\n\n### info\n\nPrint information about a valid token. This always includes the list of scopes\nand expiration time. If the token has either the\n`https://www.googleapis.com/auth/userinfo.email` or\n`https://www.googleapis.com/auth/plus.me` scope, it also prints the email\naddress of the authenticated identity.\n\n```bash\n$ oauth2l info --token $(oauth2l fetch --scope pubsub)\n{\n    \"expires_in\": 3599,\n    \"scope\": \"https://www.googleapis.com/auth/pubsub\",\n    \"email\": \"user@gmail.com\"\n    ...\n}\n```\n\n### test\n\nTest a token. This sets an exit code of 0 for a valid token and 1 otherwise,\nwhich can be useful in shell pipelines. It also prints the exit code.\n\n```bash\n$ oauth2l test --token ya29.zyxwvutsrqpnmolkjihgfedcba\n0\n$ echo $?\n0\n$ oauth2l test --token ya29.justkiddingmadethisoneup\n1\n$ echo $?\n1\n```\n\n### reset\n\nReset all tokens cached locally. We cache previously retrieved tokens in the\nfile `~/.oauth2l` by default.\n\n```bash\n$ oauth2l reset\n```\n\n### web\n\nLocally deploys and launches the OAuth2l Playground web application in a browser. If the web application packages are not yet installed, it will be installed under `~/.oauth2l-web` by default. See Command Options section for all supported options for the web command.\n\nNote that a local installation of Docker and docker-compose tool is required in order to support this feature. For most platforms, Docker can be installed by following the instructions [here](https://docs.docker.com/get-docker/). For Google workstations, follow special installation procedures at \"go/installdocker\". The web feature is currently experimental and will be improved in the future.\n\n```bash\n$ oauth2l web\n```\n\n## Command Options\n\n### --help\n\nPrints help messages for the main program or a specific command.\n\n```bash\n$ oauth2l --help\n```\n\n```bash\n$ oauth2l fetch --help\n```\n\n### --credentials\n\nSpecifies an OAuth credential file (either an OAuth client ID or a Service\nAccount key) to start the OAuth flow. You can download the file from\n[Google Cloud Console](https://console.cloud.google.com/apis/credentials).\n\n```bash\n$ oauth2l fetch --credentials ~/service_account.json --scope cloud-platform\n```\n\nIf this option is not supplied, it will be read from the environment variable\nGOOGLE_APPLICATION_CREDENTIALS. For more information, please read\n[Getting started with Authentication](https://cloud.google.com/docs/authentication/getting-started).\n\n```bash\n$ export GOOGLE_APPLICATION_CREDENTIALS=\"~/service_account.json\"\n$ oauth2l fetch --scope cloud-platform\n```\n\nWhen using an OAuth client ID file, the following applies: \n \nIf the first `redirect_uris` in the `--credentials client_id.json` is set to `urn:ietf:wg:oauth:2.0:oob`,\nthe 3LO out of band flow is activated. NOTE: 3LO out of band flow has been deprecated and will stop working entirely in Oct 2022.\n\nIf the first `redirect_uris` in the `--credentials client_id.json` is set to `http://localhost[:PORT]`,\nthe 3LO loopback flow is activated. When the port is omitted, an available port will be used to spin up the localhost.\nWhen a port is provided, oauth2l will attempt to use such port. If the port cannot be used, oauth2l will stop.  \n\n### --type\n\nThe authentication type. The currently supported types are \"oauth\", \"jwt\", or\n\"sso\". Defaults to \"oauth\".\n\n#### oauth\n\nWhen oauth is selected, the tool will fetch an OAuth access token through one\nof two different flows. If service account key is provided, 2-legged OAuth flow\nis performed. If OAuth Client ID is provided, 3-legged OAuth flow is performed,\nwhich requires user consent. Learn about the different types of OAuth\n[here](https://developers.google.com/identity/protocols/OAuth2).\n\n```bash\n$ oauth2l fetch --type oauth --credentials ~/client_credentials.json --scope cloud-platform\n```\n\n#### jwt\n\nWhen jwt is selected and the json file specified in the `--credentials` option\nis a service account key file, a JWT token signed by the service account private\nkey will be generated. Either `--audience` or `--scope` must be specified for\nthis option. See how to construct the audience [here](https://developers.google.com/identity/protocols/OAuth2ServiceAccount#jwt-auth).\n\n- With audience:\n  ```bash\n  $ oauth2l fetch --type jwt --credentials ~/service_account.json --audience https://pubsub.googleapis.com/\n  ```\n\n- With scope:\n  ```bash\n  $ oauth2l fetch --type jwt --credentials ~/service_account.json --scope cloud-platform\n  ```\n\n#### sso\n\nWhen sso is selected, the tool will use an external Single Sign-on (SSO)\nCLI to fetch an OAuth access token. The default SSO CLI only works with\nGoogle's corporate SSO. An email is required in addition to scope.\n\nTo use oauth2l with the default SSO CLI:\n\n```bash\n$ oauth2l header --type sso --email me@google.com --scope cloud-platform\n```\n\nTo use oauth2l with a custom SSO CLI:\n\n```bash\n$ oauth2l header --type sso --ssocli /usr/bin/sso --email me@google.com --scope cloud-platform\n```\n\nNote: The custom SSO CLI should have the following interface:\n\n```bash\n$ /usr/bin/sso me@example.com scope1 scope2\n```\n\n### --scope\n\nThe scope(s) that will be authorized by the OAuth access token. Required for\noauth and sso authentication types. When using multiple scopes, provide the\nthe parameter as a comma-delimited list and do not include spaces. (Alternatively,\nmultiple scopes can be specified as a space-delimited string surrounded in quotes.)\n\n```bash\n$ oauth2l fetch --scope cloud-platform,pubsub\n```\n\n### --sts\n\nIf true, exchanges the fetched access token with an STS token using Google's\nSecure Token Service. You may optionally specify claims to be embedded into\nthe STS token. The currently supported STS claims are \"audience\" and \"quota_project\".\n\nThis option is compatible with oauth and sso authentication types,\nbut is currently incompatible with jwt.\n\n```bash\n$ oauth2l fetch --sts --audience https://pubsub.googleapis.com/ --quota_project quotaprojectid\n```\n\n### --audience\n\nThe single audience to include in the signed JWT token. Required for jwt\nauthentication type. Can also be used for STS.\n\n```bash\n$ oauth2l fetch --type jwt --audience https://pubsub.googleapis.com/\n```\n\n### --quota_project\n\nThe quota project to include in the STS claim. Used for quota and billing override.\n\n```bash\n$ oauth2l fetch --sts --quota_project quotaprojectid\n```\n\n### --email\n\nThe email associated with SSO. Required for sso authentication type.\n\n```bash\n$ oauth2l fetch --type sso --email me@google.com --scope cloud-platform\n```\n\nThe email parameter can be also used to specify a user email account for domain-wide\ndelegation when authenticating with Service Account credentials.\n\n```bash\n$ oauth2l fetch --credentials ~/service_account.json --scope cloud-platform --email user@google.com\n```\n\n### --ssocli\n\nPath to SSO CLI. For optional use with \"sso\" authentication type.\n\n```bash\n$ oauth2l fetch --type sso --ssocli /usr/bin/sso --email me@google.com --scope cloud-platform\n```\n\n### --cache\n\nPath to token cache file. Disables caching if set to empty (\"\"). Defaults to ~/.oauth2l if not configured.\n\n```bash\n$ oauth2l fetch --cache ~/different_path/.oauth2l --scope cloud-platform\n```\n\n### --refresh\n\nIf true, attempt to refresh expired access token (from the cache) using refresh token instead of re-authorizing.\n\n```bash\n$ oauth2l fetch --credentials ~/client_credentials.json --scope cloud-platform --refresh\n```\n\n### --impersonate-service-account\n\nIf specified, exchanges the fetched User access token with a Service Account access token using Google's\nIAM Service. The Service Account parameter can be specified as an ID or an email. Note that at least\none of \"cloud-platform\" or \"iam\" must be included in the scope parameter. Learn more about Service Account\nImpersonation [here](https://cloud.google.com/iam/docs/impersonating-service-accounts).\n\n```bash\n$ oauth2l fetch --credentials ~/client_credentials.json --scope cloud-platform,pubsub --impersonate-service-account 113258942105700140798\n```\n\n### --disableAutoOpenConsentPage\n\nDisables the feature to automatically open the consent page in 3LO loopback flows.\nWhen this option is used, the user will be provided with a URL to manually interact with the consent page.\nThis flag does not take any arguments. Simply add the option to disable this feature.\n\n```bash\n$ oauth2l fetch --credentials ~/client_credentials.json --disableAutoOpenConsentPage --consentPageInteractionTimeout 60 --consentPageInteractionTimeoutUnits seconds --scope cloud-platform\n```\n\n### --consentPageInteractionTimeout\n\nAmount of time to wait for a user to interact with the consent page in 3LO loopback flows.\nOnce the time has lapsed, the localhost at the `redirect_uri` will no longer be available.  \nIts default value is 2. See `--consentPageInteractionTimeoutUnits` to change the units.\n\n### --consentPageInteractionTimeoutUnits\n\nUnits of measurement to use when `--consentPageInteractionTimeout` is set.\nIts default value is `minutes`. Valid inputs are `seconds` and `minutes`.\nThis option only affects 3LO loopback flows.\n\n### fetch --output_format\n\nToken's output format for \"fetch\" command. One of bare, header, json, json_compact, pretty, or refresh_token. Default is bare.\n\n```bash\n$ oauth2l fetch --output_format pretty --scope cloud-platform\n```\n\n### curl --url\n\nURL endpoint for curl request. Required for \"curl\" command.\n\n```bash\n$ oauth2l curl --scope cloud-platform --url https://pubsub.googleapis.com/v1/projects/my-project-id/topics\n```\n\n### curl --curlcli\n\nPath to curl CLI. For optional use with \"curl\" command.\n\n```bash\n$ oauth2l curl --curlcli /usr/bin/curl --type sso --email me@google.com --scope cloud-platform --url https://pubsub.googleapis.com/v1/projects/my-project-id/topics\n```\n\n### web --stop\n\nStops the OAuth2l Playground web app.\n\n```bash\n$ oauth2l web --stop\n```\n\n### web --directory\n\nInstalls OAuth2l-web packages to a specfic directory. If this option is used, it should be provided again for future executions of the web command, such as stopping and restarting the web app.\n\n```\n$ oauth2l web --directory your/new/directory\n```\n\n## Previous Version\n\nThe previous version of `oauth2l` was written in Python and it is located\nat the [python](/python) directory. The Python version is deprecated because\nit depends on a legacy auth library and contains some features that are\nno longer best practice. Please switch to use the Go version instead."
}
