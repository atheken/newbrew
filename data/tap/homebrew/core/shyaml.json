{
  "name": "shyaml",
  "full_name": "shyaml",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Command-line YAML parser",
  "license": "BSD-2-Clause",
  "homepage": "https://github.com/0k/shyaml",
  "versions": {
    "stable": "0.6.2",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://files.pythonhosted.org/packages/b9/59/7e6873fa73a476de053041d26d112b65d7e1e480b88a93b4baa77197bd04/shyaml-0.6.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "696e94f1c49d496efa58e09b49c099f5ebba7e24b5abe334f15e9759740b7fd0"
    },
    "head": {
      "url": "https://github.com/0k/shyaml.git",
      "branch": "master"
    }
  },
  "revision": 2,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 2,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/shyaml/blobs/sha256:97c0a29a8a83f03d4fb8f04cee9932cc696308b9ceec4590cfb4f30caa8be9c8",
          "sha256": "97c0a29a8a83f03d4fb8f04cee9932cc696308b9ceec4590cfb4f30caa8be9c8"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/shyaml/blobs/sha256:97c0a29a8a83f03d4fb8f04cee9932cc696308b9ceec4590cfb4f30caa8be9c8",
          "sha256": "97c0a29a8a83f03d4fb8f04cee9932cc696308b9ceec4590cfb4f30caa8be9c8"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/shyaml/blobs/sha256:97c0a29a8a83f03d4fb8f04cee9932cc696308b9ceec4590cfb4f30caa8be9c8",
          "sha256": "97c0a29a8a83f03d4fb8f04cee9932cc696308b9ceec4590cfb4f30caa8be9c8"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/shyaml/blobs/sha256:083e980a2579d509ae832e64e27b676d32b15b4ab8c5b85ac381f9a116e5c706",
          "sha256": "083e980a2579d509ae832e64e27b676d32b15b4ab8c5b85ac381f9a116e5c706"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/shyaml/blobs/sha256:083e980a2579d509ae832e64e27b676d32b15b4ab8c5b85ac381f9a116e5c706",
          "sha256": "083e980a2579d509ae832e64e27b676d32b15b4ab8c5b85ac381f9a116e5c706"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/shyaml/blobs/sha256:083e980a2579d509ae832e64e27b676d32b15b4ab8c5b85ac381f9a116e5c706",
          "sha256": "083e980a2579d509ae832e64e27b676d32b15b4ab8c5b85ac381f9a116e5c706"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/shyaml/blobs/sha256:083e980a2579d509ae832e64e27b676d32b15b4ab8c5b85ac381f9a116e5c706",
          "sha256": "083e980a2579d509ae832e64e27b676d32b15b4ab8c5b85ac381f9a116e5c706"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/shyaml/blobs/sha256:9692d49037767d99705665957e0b26aa3a9f5619b06ed57d09a63aa4c176c510",
          "sha256": "9692d49037767d99705665957e0b26aa3a9f5619b06ed57d09a63aa4c176c510"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "python@3.11",
    "pyyaml"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/shyaml.rb",
  "ruby_source_checksum": {
    "sha256": "ba17a1154e45038122d4cb85aca0cecb489fbe669a0d6b30383f39fe306057fd"
  },
  "date_added": "2016-09-13T17:42:31-04:00",
  "readme": "=================================\nSHYAML: YAML for the command line\n=================================\n\n.. image:: https://img.shields.io/pypi/v/shyaml.svg\n    :target: https://pypi.python.org/pypi/shyaml\n\n.. image:: https://img.shields.io/travis/0k/shyaml/master.svg?style=flat\n   :target: https://travis-ci.com/github/0k/shyaml/\n   :alt: Travis CI build status\n\n.. image:: https://img.shields.io/appveyor/ci/vaab/shyaml.svg\n   :target: https://ci.appveyor.com/project/vaab/shyaml/branch/master\n   :alt: Appveyor CI build status\n\n.. image:: http://img.shields.io/codecov/c/github/0k/shyaml.svg?style=flat\n   :target: https://codecov.io/gh/0k/shyaml/\n   :alt: Test coverage\n\n\n\nDescription\n===========\n\nSimple script that allow read access to YAML files through command line.\n\nThis can be handy, if you want to get access to YAML data in your shell\nscripts.\n\nThis script supports only read access and it might not support all\nthe subtleties of YAML specification. But it should support some handy\nbasic query of YAML file.\n\n\nRequirements\n============\n\n``shyaml`` works in Linux, MacOSX, and Windows with python 2.7 and 3+.\n\n\nInstallation\n============\n\nYou don't need to download the GIT version of the code as ``shyaml`` is\navailable on the PyPI. So you should be able to run::\n\n    pip install shyaml\n\nIf you have downloaded the GIT sources, then you could add install\nthe current version via::\n\n    pip install .\n\nAnd if you don't have the GIT sources but would like to get the latest\nmaster or branch from github, you could also::\n\n    pip install git+https://github.com/0k/shyaml\n\nOr even select a specific revision (branch/tag/commit)::\n\n    pip install git+https://github.com/0k/shyaml@master\n\nOn macOS, you can also install the latest release version via `Homebrew\n<https://github.com/Homebrew/brew/>`_::\n\n    brew install shyaml\n\nOr to install the master branch::\n\n    brew install shyaml --HEAD\n\n\nDocumentation\n=============\n\nThe following documented examples are actually tested automatically at\neach release for conformance on all platform and python versions.\n\nPlease note that there is some subtle benign differences in some\noutput whether ``shyaml`` is using the ``libyaml`` C implementation or\nthe full python implementation. The documentation can be run with both\nimplementation but some examples will fail depending on the\nimplementation. To make things clear, I'll use some annotation and you\ncan yourself check which version you are using with::\n\n    $ shyaml -V | grep \"^libyaml used:\"  ## docshtest: if-success-set LIBYAML\n    libyaml used: True\n\n\nUsage\n=====\n\n``shyaml`` takes its YAML input file from standard input ONLY. So let's\ndefine here a common YAML input for the next examples::\n\n    $ cat <<EOF > test.yaml\n    name: \"MyName !! héhé\"  ## using encoding, and support comments !\n    subvalue:\n        how-much: 1.1\n        how-many: 2\n        things:\n            - first\n            - second\n            - third\n        maintainer: \"Valentin Lab\"\n        description: |\n            Multiline description:\n            Line 1\n            Line 2\n    subvalue.how-much: 1.2\n    subvalue.how-much\\more: 1.3\n    subvalue.how-much\\.more: 1.4\n    EOF\n\n\nGeneral browsing struct and displaying simple values\n----------------------------------------------------\n\nSimple query of simple attribute::\n\n    $ cat test.yaml | shyaml get-value name\n    MyName !! héhé\n\nQuery nested attributes by using '.' between key labels::\n\n    $ cat test.yaml | shyaml get-value subvalue.how-much\n    1.1\n\nGet type of attributes::\n\n    $ cat test.yaml | shyaml get-type name\n    str\n    $ cat test.yaml | shyaml get-type subvalue.how-much\n    float\n\nGet length of structures or sequences::\n\n    $ cat test.yaml | shyaml get-length subvalue\n    5\n    $ cat test.yaml | shyaml get-length subvalue.things\n    3\n\nBut this won't work on other types::\n\n    $ cat test.yaml | shyaml get-length name\n    Error: get-length does not support 'str' type. Please provide or select a sequence or struct.\n\n\nParse structure\n---------------\n\nGet sub YAML from a structure attribute::\n\n    $ cat test.yaml | shyaml get-type subvalue\n    struct\n    $ cat test.yaml | shyaml get-value subvalue  ## docshtest: ignore-if LIBYAML\n    how-much: 1.1\n    how-many: 2\n    things:\n    - first\n    - second\n    - third\n    maintainer: Valentin Lab\n    description: 'Multiline description:\n\n      Line 1\n\n      Line 2\n\n      '\n\nIteration through keys only::\n\n    $ cat test.yaml | shyaml keys\n    name\n    subvalue\n    subvalue.how-much\n    subvalue.how-much\\more\n    subvalue.how-much\\.more\n\nIteration through keys only (``\\0`` terminated strings)::\n\n    $ cat test.yaml | shyaml keys-0 subvalue | xargs -0 -n 1 echo \"VALUE:\"\n    VALUE: how-much\n    VALUE: how-many\n    VALUE: things\n    VALUE: maintainer\n    VALUE: description\n\nIteration through values only (``\\0`` terminated string highly recommended)::\n\n    $ cat test.yaml | shyaml values-0 subvalue |\n      while IFS='' read -r -d $'\\0' value; do\n          echo \"RECEIVED: '$value'\"\n      done\n    RECEIVED: '1.1'\n    RECEIVED: '2'\n    RECEIVED: '- first\n    - second\n    - third\n    '\n    RECEIVED: 'Valentin Lab'\n    RECEIVED: 'Multiline description:\n    Line 1\n    Line 2\n    '\n\nIteration through keys and values (``\\0`` terminated string highly recommended)::\n\n    $ read-0() {\n        while [ \"$1\" ]; do\n            IFS=$'\\0' read -r -d '' \"$1\" || return 1\n            shift\n        done\n      } &&\n      cat test.yaml | shyaml key-values-0 subvalue |\n      while read-0 key value; do\n          echo \"KEY: '$key'\"\n          echo \"VALUE: '$value'\"\n          echo\n      done\n    KEY: 'how-much'\n    VALUE: '1.1'\n\n    KEY: 'how-many'\n    VALUE: '2'\n\n    KEY: 'things'\n    VALUE: '- first\n    - second\n    - third\n    '\n\n    KEY: 'maintainer'\n    VALUE: 'Valentin Lab'\n\n    KEY: 'description'\n    VALUE: 'Multiline description:\n    Line 1\n    Line 2\n    '\n    <BLANKLINE>\n\nNotice, that you'll get the same result using\n``get-values``. ``get-values`` will support sequences and struct,\nand ``key-values`` support only struct. (for a complete table of\nwhich function support what you can look at the usage line)\n\nAnd, if you ask for keys, values, key-values on non struct like, you'll\nget an error::\n\n    $ cat test.yaml | shyaml keys name\n    Error: keys does not support 'str' type. Please provide or select a struct.\n    $ cat test.yaml | shyaml values subvalue.how-many\n    Error: values does not support 'int' type. Please provide or select a struct.\n    $ cat test.yaml | shyaml key-values subvalue.how-much\n    Error: key-values does not support 'float' type. Please provide or select a struct.\n\n\nParse sequence\n--------------\n\nQuery a sequence with ``get-value``::\n\n    $ cat test.yaml | shyaml get-value subvalue.things\n    - first\n    - second\n    - third\n\nAnd access individual elements with python-like indexing::\n\n    $ cat test.yaml | shyaml get-value subvalue.things.0\n    first\n    $ cat test.yaml | shyaml get-value subvalue.things.-1\n    third\n    $ cat test.yaml | shyaml get-value subvalue.things.5\n    Error: invalid path 'subvalue.things.5', index 5 is out of range (3 elements in sequence).\n\nNote that this will work only with integer (preceded or not by a minus\nsign)::\n\n    $ cat test.yaml | shyaml get-value subvalue.things.foo\n    Error: invalid path 'subvalue.things.foo', non-integer index 'foo' provided on a sequence.\n\nMore usefull, parse a list in one go with ``get-values``::\n\n    $ cat test.yaml | shyaml get-values subvalue.things\n    first\n    second\n    third\n\nNote that the action is called ``get-values``, and that output is\nseparated by newline char(s) (which is os dependent), this can bring\nhavoc if you are parsing values containing newlines itself. Hopefully,\n``shyaml`` has a ``get-values-0`` to terminate strings by ``\\0`` char,\nwhich allows complete support of any type of values, including YAML.\n``get-values`` outputs key and values for ``struct`` types and only\nvalues for ``sequence`` types::\n\n    $ cat test.yaml | shyaml get-values-0 subvalue |\n      while IFS='' read -r -d '' key &&\n            IFS='' read -r -d '' value; do\n          echo \"'$key' -> '$value'\"\n      done\n    'how-much' -> '1.1'\n    'how-many' -> '2'\n    'things' -> '- first\n    - second\n    - third\n    '\n    'maintainer' -> 'Valentin Lab'\n    'description' -> 'Multiline description:\n    Line 1\n    Line 2\n    '\n\nPlease note that, if ``get-values{,-0}`` actually works on ``struct``,\nit's maybe more explicit to use the equivalent ``key-values{,0}``. It\nshould be noted that ``key-values{,0}`` is not completly equivalent as\nit is meant to be used with ``struct`` only and will complain if not.\n\nYou should also notice that values that are displayed are YAML compatible. So\nif they are complex, you can re-use ``shyaml`` on them to parse their content.\n\nOf course, ``get-values`` should only be called on sequence elements::\n\n    $ cat test.yaml | shyaml get-values name\n    Error: get-values does not support 'str' type. Please provide or select a sequence or struct.\n\n\nParse YAML document streams\n---------------------------\n\nYAML input can be a stream of documents, the action will then be\napplied to each document::\n\n    $ i=0; while true; do\n          ((i++))\n          echo \"ingests:\"\n          echo \" - data: xxx\"\n          echo \"   id: tag-$i\"\n          if ((i >= 3)); then\n              break\n          fi\n          echo \"---\"\n    done | shyaml get-value ingests.0.id | tr '\\0' '&'\n    tag-1&tag-2&tag-3\n\n\nNotice that ``NUL`` char is used by default for separating output\niterations if not used in ``-y`` mode. You can use that to separate\neach output.  ``-y`` mode will use conventional YAML way to separate\ndocuments (which is ``---``).\n\nSo::\n\n    $ i=0; while true; do\n          ((i++))\n          echo \"ingests:\"\n          echo \" - data: xxx\"\n          echo \"   id: tag-$i\"\n          if ((i >= 3)); then\n              break\n          fi\n          echo \"---\"\n    done | shyaml get-value -y ingests.0.id  ## docshtest: ignore-if LIBYAML\n    tag-1\n    ...\n    ---\n    tag-2\n    ...\n    ---\n    tag-3\n    ...\n\nNotice that it is not supported to use any query that can output more than one\nvalue (like all the query that can be suffixed with ``*-0``) with a multi-document\nYAML::\n\n    $ i=0; while true; do\n          ((i++))\n          echo \"ingests:\"\n          echo \" - data: xxx\"\n          echo \"   id: tag-$i\"\n          if ((i >= 3)); then\n              break\n          fi\n          echo \"---\"\n    done | shyaml keys ingests.0 >/dev/null\n    Error: Source YAML is multi-document, which doesn't support any other action than get-type, get-length, get-value\n\nYou'll probably notice also, that output seems buffered. The previous\ncontent is displayed as a whole only at the end. If you need a\ncontinuous flow of YAML document, then the command line option ``-L``\nis required to force a non-buffered line-by-line reading of the file\nso as to ensure that each document is properly parsed as soon as\npossible. That means as soon as either a YAML document end is detected\n(``---`` or ``EOF``):\n\nWithout the ``-L``, if we kill our shyaml process before the end::\n\n    $ i=0; while true; do\n          ((i++))\n          echo \"ingests:\"\n          echo \" - data: xxx\"\n          echo \"   id: tag-$i\"\n          if ((i >= 2)); then\n              break\n          fi\n          echo \"---\"\n          sleep 10\n    done 2>/dev/null | shyaml get-value ingests.0.id & pid=$! ; sleep 2; kill $pid\n\n\nWith the ``-L``, if we kill our shyaml process before the end::\n\n    $ i=0; while true; do\n          ((i++))\n          echo \"ingests:\"\n          echo \" - data: xxx\"\n          echo \"   id: tag-$i\"\n          if ((i >= 2)); then\n              break\n          fi\n          echo \"---\"\n          sleep 10\n    done 2>/dev/null | shyaml get-value -L ingests.0.id & pid=$! ; sleep 2; kill $pid\n    tag-1\n\n\nUsing ``-y`` is required to force a YAML output that will be also parseable as a stream,\nwhich could help you chain shyaml calls::\n\n    $ i=0; while true; do\n          ((i++))\n          echo \"ingests:\"\n          echo \" - data: xxx\"\n          echo \"   id: tag-$i\"\n          if ((i >= 3)); then\n              break\n          fi\n          echo \"---\"\n          sleep 0.2\n    done | shyaml get-value ingests.0 -L -y | shyaml get-value id | tr '\\0' '\\n'\n    tag-1\n    tag-2\n    tag-3\n\n\nAn empty string will be still considered as an empty YAML document::\n\n    $ echo | shyaml get-value \"toto\"\n    Error: invalid path 'toto', can't query subvalue 'toto' of a leaf (leaf value is None).\n\n\nKeys containing '.'\n-------------------\n\nUse and ``\\\\`` to access keys with ``\\`` and ``\\.`` to access keys\nwith literal ``.`` in them. Just be mindful of shell escaping (example\nuses single quotes)::\n\n    $ cat test.yaml | shyaml get-value 'subvalue\\.how-much'\n    1.2\n    $ cat test.yaml | shyaml get-value 'subvalue\\.how-much\\\\more'\n    1.3\n    $ cat test.yaml | shyaml get-value 'subvalue\\.how-much\\\\.more' default\n    default\n\nThis last one didn't escape correctly the last ``.``, this is the\ncorrect version::\n\n    $ cat test.yaml | shyaml get-value 'subvalue\\.how-much\\\\\\.more' default\n    1.4\n\n\nempty string keys\n-----------------\n\nYep, ``shyaml`` supports empty stringed keys. You might never have use\nfor this one, but it's in YAML specification. So ``shyaml`` supports\nit::\n\n    $ cat <<EOF > test.yaml\n    empty-sub-key:\n        \"\":\n           a: foo\n           \"\": bar\n    \"\": wiz\n    EOF\n\n    $ cat test.yaml | shyaml get-value empty-sub-key..\n    bar\n    $ cat test.yaml | shyaml get-value ''\n    wiz\n\nPlease notice that one empty string is different than no string at all::\n\n    $ cat <<EOF > test.yaml\n    \"\":\n       a: foo\n       b: bar\n    \"x\": wiz\n    EOF\n    $ cat test.yaml | shyaml keys\n\n    x\n    $ cat test.yaml | shyaml keys ''\n    a\n    b\n\nThe first asks for keys of the root YAML, the second asks for keys of the\ncontent of the empty string named element located in the root YAML.\n\n\nHandling missing paths\n----------------------\n\nThere is a third argument on the command line of shyaml which is the\nDEFAULT argument. If the given KEY was not found in the YAML\nstructure, then ``shyaml`` would return what you provided as DEFAULT.\n\nAs of version < 0.3, this argument was defaulted to the empty\nstring. For all version above 0.3 (included), if not provided, then\nan error message will be printed::\n\n    $ echo \"a: 3\" | shyaml get-value a mydefault\n    3\n\n    $ echo \"a: 3\" | shyaml get-value b mydefault\n    mydefault\n\n    $ echo \"a: 3\" | shyaml get-value b\n    Error: invalid path 'b', missing key 'b' in struct.\n\nYou can emulate pre v0.3 behavior by specifying explicitly an empty\nstring as third argument::\n\n    $ echo \"a: 3\" | shyaml get-value b ''\n\nStarting with version 0.6, you can also use the ``-q`` or ``--quiet`` to fail\nsilently in case of KEY not found in the YAML structure::\n\n    $ echo \"a: 3\" | shyaml -q get-value b; echo \"errlvl: $?\"\n    errlvl: 1\n    $ echo \"a: 3\" | shyaml -q get-value a; echo \"errlvl: $?\"\n    3errlvl: 0\n\n\nOrdered mappings\n----------------\n\nCurrently, using ``shyaml`` in a shell script involves happily taking\nYAML inputs and outputting YAML outputs that will further be processed.\n\nAnd this works very well.\n\nBefore version ``0.4.0``, ``shyaml`` would boldly re-order (sorting them\nalphabetically) the keys in mappings. If this should be considered\nharmless per specification (mappings are indeed supposed to be\nunordered, this means order does not matter), in practical, YAML users\ncould feel wronged by ``shyaml`` when there YAML got mangled and they\nwanted to give a meaning to the basic YAML mapping.\n\nWho am I to forbid such usage of YAML mappings ? So starting from\nversion ``0.4.0``, ``shyaml`` will happily keep the order of your\nmappings::\n\n    $ cat <<EOF > test.yaml\n    mapping:\n      a: 1\n      c: 2\n      b: 3\n    EOF\n\nFor ``shyaml`` version before ``0.4.0``::\n\n    # shyaml get-value mapping < test.yaml\n    a: 1\n    b: 3\n    c: 2\n\nFor ``shyaml`` version including and after ``0.4.0``::\n\n    $ shyaml get-value mapping < test.yaml\n    a: 1\n    c: 2\n    b: 3\n\n\nStrict YAML for further processing\n----------------------------------\n\nProcessing yaml can be done recursively and extensively through using\nthe output of ``shyaml`` into ``shyaml``. Most of its output is itself\nYAML. Most ? Well, for ease of use, literal keys (string, numbers) are\noutputed directly without YAML quotes, which is often convenient.\n\nBut this has the consequence of introducing inconsistent behavior. So\nwhen processing YAML coming out of shyaml, you should probably think\nabout using the ``--yaml`` (or ``-y``) option to output only strict YAML.\n\nWith the drawback that when you'll want to output string, you'll need to\ncall a last time ``shyaml get-value`` to explicitly unquote the YAML.\n\n\nObject Tag\n----------\n\nYAML spec allows object tags which allows you to map local data to\nobjects in your application.\n\nWhen using ``shyaml``, we do not want to mess with these tags, but still\nallow parsing their internal structure.\n\n``get-type`` will correctly give you the type of the object::\n\n    $ cat <<EOF > test.yaml\n    %TAG !e! tag:example.com,2000:app/\n    ---\n    - !e!foo \"bar\"\n    EOF\n\n    $ shyaml get-type 0 < test.yaml\n    tag:example.com,2000:app/foo\n\n``get-value`` with ``-y`` (see section Strict YAML) will give you the\ncomplete yaml tagged value::\n\n    $ shyaml get-value -y 0 < test.yaml  ## docshtest: ignore-if LIBYAML\n    !<tag:example.com,2000:app/foo> 'bar'\n\n\nAnother example::\n\n    $ cat <<EOF > test.yaml\n    %TAG ! tag:clarkevans.com,2002:\n    --- !shape\n      # Use the ! handle for presenting\n      # tag:clarkevans.com,2002:circle\n    - !circle\n      center: &ORIGIN {x: 73, y: 129}\n      radius: 7\n    - !line\n      start: *ORIGIN\n      finish: { x: 89, y: 102 }\n    - !label\n      start: *ORIGIN\n      color: 0xFFEEBB\n      text: Pretty vector drawing.\n    EOF\n    $ shyaml get-type 2 < test.yaml\n    tag:clarkevans.com,2002:label\n\nAnd you can still traverse internal value::\n\n    $ shyaml get-value -y 2.start < test.yaml\n    x: 73\n    y: 129\n\n\nNote that all global tags will be resolved and simplified (as\n``!!map``, ``!!str``, ``!!seq``), but not unknown local tags::\n\n    $ cat <<EOF > test.yaml\n    %YAML 1.1\n    ---\n    !!map {\n      ? !!str \"sequence\"\n      : !!seq [ !!str \"one\", !!str \"two\" ],\n      ? !!str \"mapping\"\n      : !!map {\n        ? !!str \"sky\" : !myobj \"blue\",\n        ? !!str \"sea\" : !!str \"green\",\n      },\n    }\n    EOF\n\n    $ shyaml get-value < test.yaml  ## docshtest: ignore-if LIBYAML\n    sequence:\n    - one\n    - two\n    mapping:\n      sky: !myobj 'blue'\n      sea: green\n\n\nEmpty documents\n---------------\n\nWhen provided with an empty document, ``shyaml`` will consider the\ndocument to hold a ``null`` value::\n\n    $ echo | shyaml get-value -y  ## docshtest: ignore-if LIBYAML\n    null\n    ...\n\n\nUsage string\n------------\n\nA quick reminder of what is available will be printed when calling\n``shyaml`` without any argument::\n\n    $ shyaml\n    Error: Bad number of arguments.\n    Usage:\n\n        shyaml {-h|--help}\n        shyaml {-V|--version}\n        shyaml [-y|--yaml] [-q|--quiet] ACTION KEY [DEFAULT]\n    <BLANKLINE>\n\nThe full help is available through the usage of the standard ``-h`` or\n``-help``::\n\n\n    $ shyaml --help\n\n    Parses and output chosen subpart or values from YAML input.\n    It reads YAML in stdin and will output on stdout it's return value.\n\n    Usage:\n\n        shyaml {-h|--help}\n        shyaml {-V|--version}\n        shyaml [-y|--yaml] [-q|--quiet] ACTION KEY [DEFAULT]\n\n\n    Options:\n\n        -y, --yaml\n                  Output only YAML safe value, more precisely, even\n                  literal values will be YAML quoted. This behavior\n                  is required if you want to output YAML subparts and\n                  further process it. If you know you have are dealing\n                  with safe literal value, then you don't need this.\n                  (Default: no safe YAML output)\n\n        -q, --quiet\n                  In case KEY value queried is an invalid path, quiet\n                  mode will prevent the writing of an error message on\n                  standard error.\n                  (Default: no quiet mode)\n\n        -L, --line-buffer\n                  Force parsing stdin line by line allowing to process\n                  streamed YAML as it is fed instead of buffering\n                  input and treating several YAML streamed document\n                  at once. This is likely to have some small performance\n                  hit if you have a huge stream of YAML document, but\n                  then you probably don't really care about the\n                  line-buffering.\n                  (Default: no line buffering)\n\n        ACTION    Depending on the type of data you've targetted\n                  thanks to the KEY, ACTION can be:\n\n                  These ACTIONs applies to any YAML type:\n\n                    get-type          ## returns a short string\n                    get-value         ## returns YAML\n\n                  These ACTIONs applies to 'sequence' and 'struct' YAML type:\n\n                    get-values{,-0}   ## returns list of YAML\n                    get-length        ## returns an integer\n\n                  These ACTION applies to 'struct' YAML type:\n\n                    keys{,-0}         ## returns list of YAML\n                    values{,-0}       ## returns list of YAML\n                    key-values,{,-0}  ## returns list of YAML\n\n                  Note that any value returned is returned on stdout, and\n                  when returning ``list of YAML``, it'll be separated by\n                  a newline or ``NUL`` char depending of you've used the\n                  ``-0`` suffixed ACTION.\n\n        KEY       Identifier to browse and target subvalues into YAML\n                  structure. Use ``.`` to parse a subvalue. If you need\n                  to use a literal ``.`` or ``\\``, use ``\\`` to quote it.\n\n                  Use struct keyword to browse ``struct`` YAML data and use\n                  integers to browse ``sequence`` YAML data.\n\n        DEFAULT   if not provided and given KEY do not match any value in\n                  the provided YAML, then DEFAULT will be returned. If no\n                  default is provided and the KEY do not match any value\n                  in the provided YAML, shyaml will fail with an error\n                  message.\n\n    Examples:\n\n         ## get last grocery\n         cat recipe.yaml       | shyaml get-value groceries.-1\n\n         ## get all words of my french dictionary\n         cat dictionaries.yaml | shyaml keys-0 french.dictionary\n\n         ## get YAML config part of 'myhost'\n         cat hosts_config.yaml | shyaml get-value cfgs.myhost\n\n    <BLANKLINE>\n\nUsing invalid keywords will issue an error and the usage message::\n\n    $ shyaml get-foo\n    Error: 'get-foo' is not a valid action.\n    Usage:\n\n        shyaml {-h|--help}\n        shyaml {-V|--version}\n        shyaml [-y|--yaml] [-q|--quiet] ACTION KEY [DEFAULT]\n    <BLANKLINE>\n\n\nVersion information\n-------------------\n\nYou can get useful information (in case of a bug) or if you want to\ncheck if shyaml is using the ``libyaml`` C bindings, thanks to\n``shyaml --version`` (or ``-V``)::\n\n    # shyaml -V      ## Example of possible output\n    version: unreleased\n    PyYAML: 3.13\n    libyaml available: 0.1.6\n    libyaml used: True\n    Python: 2.7.8 (default, Oct 20 2014, 15:05:19)  [GCC 4.9.1]\n\nNote that you can force to use the python implementation even if\n``libyaml`` is available using ``FORCE_PYTHON_YAML_IMPLEMENTATION``::\n\n    $ FORCE_PYTHON_YAML_IMPLEMENTATION=1 shyaml --version | grep \"^libyaml used:\"\n    libyaml used: False\n\n\nPython API\n==========\n\n``shyaml`` can be used from within python if you need so::\n\n    >>> import shyaml\n    >>> try:\n    ...     from StringIO import StringIO\n    ... except ImportError:\n    ...     from io import StringIO\n\n    >>> yaml_content = StringIO(\"\"\"\n    ... a: 1.1\n    ... b:\n    ...   x: foo\n    ...   y: bar\n    ... \"\"\")\n\n    >>> for out in shyaml.do(stream=yaml_content,\n    ...                      action=\"get-type\",\n    ...                      key=\"a\"):\n    ...    print(repr(out))\n    'float'\n\nPlease note that ``shyaml.do(..)`` outputs a generator iterating\nthrough all the yaml documents of the stream. In most usage case,\nyou'll have only one document.\n\nYou can have a peek at the code, the ``do(..)`` function has a documented\nprototype.\n\n\nContributing\n============\n\nAny suggestion or issue is welcome. Push request are very welcome,\nplease check out the guidelines.\n\n\nPush Request Guidelines\n-----------------------\n\nYou can send any code. I'll look at it and will integrate it myself in\nthe code base and leave you as the author. This process can take time and\nit'll take less time if you follow the following guidelines:\n\n- check your code with PEP8 or pylint. Try to stick to 80 columns wide.\n- separate your commits per smallest concern.\n- each commit should pass the tests (to allow easy bisect)\n- each functionality/bugfix commit should contain the code, tests,\n  and doc.\n- prior minor commit with typographic or code cosmetic changes are\n  very welcome. These should be tagged in their commit summary with\n  ``!minor``.\n- the commit message should follow gitchangelog rules (check the git\n  log to get examples)\n- if the commit fixes an issue or finished the implementation of a\n  feature, please mention it in the summary.\n\nIf you have some questions about guidelines which is not answered here,\nplease check the current ``git log``, you might find previous commit that\nwould show you how to deal with your issue.\n\n\nLicense\n=======\n\nCopyright (c) 2020 Valentin Lab.\n\nLicensed under the `BSD License`_.\n\n.. _BSD License: http://raw.github.com/0k/shyaml/master/LICENSE"
}
