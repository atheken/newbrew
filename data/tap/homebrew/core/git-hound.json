{
  "name": "git-hound",
  "full_name": "git-hound",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Git plugin that prevents sensitive data from being committed",
  "license": "MIT",
  "homepage": "https://github.com/ezekg/git-hound",
  "versions": {
    "stable": "1.0.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/ezekg/git-hound/archive/1.0.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "32f79f470c790db068a23fd68e9763b3bedc84309a281b4c99b941d4f33f5763"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-hound/blobs/sha256:5d2d41fc442a37b2902a182cb034a023bfcdb992fd27e7d668ddab3077bd07cd",
          "sha256": "5d2d41fc442a37b2902a182cb034a023bfcdb992fd27e7d668ddab3077bd07cd"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-hound/blobs/sha256:af1391d6c19eb3b2aa550fc169c4015d3b9302577f699d26e01a8def2d1bc196",
          "sha256": "af1391d6c19eb3b2aa550fc169c4015d3b9302577f699d26e01a8def2d1bc196"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-hound/blobs/sha256:ee385550d377c33a0daf08fc38454c782d849c72a73e6dd257123d047437711c",
          "sha256": "ee385550d377c33a0daf08fc38454c782d849c72a73e6dd257123d047437711c"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-hound/blobs/sha256:5958f86063b6163227599ba6fa622ff75e600698017d97f4222f0d5de5f9d41a",
          "sha256": "5958f86063b6163227599ba6fa622ff75e600698017d97f4222f0d5de5f9d41a"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-hound/blobs/sha256:f443b7b00338cda50f23d0fa64b3e6db5a7d57c5a5e685e1b5f1e222b0a0cca7",
          "sha256": "f443b7b00338cda50f23d0fa64b3e6db5a7d57c5a5e685e1b5f1e222b0a0cca7"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-hound/blobs/sha256:4431bf04ab9f0e93b9da932b71c4c53be423d73c1a20e5321fdcd6a4f5b0bd85",
          "sha256": "4431bf04ab9f0e93b9da932b71c4c53be423d73c1a20e5321fdcd6a4f5b0bd85"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-hound/blobs/sha256:b800dc830647b0806200364a0b242c64cef639618a5ccc9268f3333f3a645802",
          "sha256": "b800dc830647b0806200364a0b242c64cef639618a5ccc9268f3333f3a645802"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-hound/blobs/sha256:6bfbbe48552eaa75d5fd861c1feb9bd21a5d47c1718f4295ce469062965311de",
          "sha256": "6bfbbe48552eaa75d5fd861c1feb9bd21a5d47c1718f4295ce469062965311de"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-hound/blobs/sha256:5951f740815c5e38e8d0a97270bf867f99cb0a2ea2ec9ee3cc4b4ccba5ee96fd",
          "sha256": "5951f740815c5e38e8d0a97270bf867f99cb0a2ea2ec9ee3cc4b4ccba5ee96fd"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-hound/blobs/sha256:f27441dca7619968e685c5b91221d251872376412332fea4d318a17d4c283c4c",
          "sha256": "f27441dca7619968e685c5b91221d251872376412332fea4d318a17d4c283c4c"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/git-hound.rb",
  "ruby_source_checksum": {
    "sha256": "a4ab8b97082cdd5cdc17548fa775bb4fbce18e2c945f652557e7bf23ec5e11fe"
  },
  "date_added": "2020-10-07T07:20:52+00:00",
  "readme": "# Git Hound\n[![Travis](https://img.shields.io/travis/ezekg/git-hound.svg?style=flat-square)](https://travis-ci.org/ezekg/git-hound)\n[![Code Climate](https://img.shields.io/codeclimate/github/ezekg/git-hound.svg?style=flat-square)](https://codeclimate.com/github/ezekg/git-hound)\n[![GoDoc](https://img.shields.io/badge/godoc-reference-blue.svg?style=flat-square)](https://godoc.org/github.com/ezekg/git-hound)\n\nHound is a Git plugin that helps prevent sensitive data from being committed into a repository by sniffing potential commits against PCRE regular expressions.\n\n## How does it work?\nUpon commit, it runs the output of `git diff -U0 --staged` through the Hound, which matches every _added_ or _modified_ line against your provided list of regular expressions from a local `.githound.yml` file.\n\n## Installation\nTo install Hound, please use `go get`. If you don't have Go installed, [get it here](https://golang.org/dl/). If you would like to grab a precompiled binary, head over to the [releases](https://github.com/ezekg/git-hound/releases) page. The precompiled Hound binaries have no external dependencies.\n\n```\ngo get github.com/ezekg/git-hound\n```\n\nIf you're on macOS, you can also install using Homebrew:\n\n```\nbrew install git-hound\n```\n\n## Compiling\nTo compile for your operating system, simply run the following from the root of the project directory:\n```bash\ngo install\n```\n\nTo compile for all platforms using [`gox`](https://github.com/mitchellh/gox), run the following:\n```bash\ngox\n```\n\n## Usage\n```\ngit-hound [<opts>] commit [...]\ngit-hound [<opts>] sniff [<commit>]\n```\n\n### Commit\nSniff changes before committing.\n\n```bash\n# Sniff changes since last commit and pass to git-commit when clean\ngit hound commit â€¦\n```\n\n### Sniff\nYou can optionally pass a commit hash or manually pipe a diff for the Hound to sniff.\n\n```bash\n# Sniff changes since last commit\ngit hound sniff HEAD\n\n# Sniff entire codebase\ngit hound sniff\n\n# Sniff entire repo history\ngit log -p | git hound sniff\n```\n\n## Option flags\n\n| Flag           | Type   | Default         | Usage                                      |\n|:---------------|:-------|:----------------|:-------------------------------------------|\n| `-no-color`    | bool   | `false`         | Disable color output                       |\n| `-config=file` | string | `.githound.yml` | Hound config file                          |\n| `-bin=file`    | string | `git`           | Executable binary to use for `git` command |\n\n## Example `.githound.yml`\n\n```yaml\n# Output warning on match but continue\nwarn:\n  - '(?i)user(name)?\\W*[:=,]\\W*.+$'\n  - '\\/Users\\/\\w+\\/'\n# Fail immediately upon match\nfail:\n  - '[''\"](?!.*[\\s])(?=.*[A-Za-z])(?=.*[0-9])(?=.*[!@#$&*])?.{16,}[''\"]'\n  - '(?i)db_(user(name)?|pass(word)?|name)\\W*[:=,]\\W*.+$'\n  - '(?i)pass(word)?\\W*[:=,]\\W*.+$'\n# Skip on matched filename\nskip:\n  - '\\.example$'\n  - '\\.sample$'\n```"
}
