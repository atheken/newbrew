{
  "name": "vcpkg",
  "full_name": "vcpkg",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "C++ Library Manager",
  "license": "MIT",
  "homepage": "https://github.com/microsoft/vcpkg",
  "versions": {
    "stable": "2023.08.02",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/microsoft/vcpkg-tool/archive/2023-08-02.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "b36d3b458b7eedc69ed9d6ede01aea00cb6e95bf64bf53a263474cf13849a87e"
    },
    "head": {
      "url": "https://github.com/microsoft/vcpkg-tool.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vcpkg/blobs/sha256:a249b113763bafeb70b8f7cf44d892c029921d00b6d09b8e68389df95b8dfc42",
          "sha256": "a249b113763bafeb70b8f7cf44d892c029921d00b6d09b8e68389df95b8dfc42"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vcpkg/blobs/sha256:d1d7e8af71022e353835925b95b59db64216cd370ab34899751a7b350a0c70b6",
          "sha256": "d1d7e8af71022e353835925b95b59db64216cd370ab34899751a7b350a0c70b6"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vcpkg/blobs/sha256:bb4100eed8966b43d29100417ed2c7747212459214e10c5e15a95c4cebf45d39",
          "sha256": "bb4100eed8966b43d29100417ed2c7747212459214e10c5e15a95c4cebf45d39"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vcpkg/blobs/sha256:158de316c80c54acd00dd15ea1683ebb0029ee9c668695315c97a09f74e77c1c",
          "sha256": "158de316c80c54acd00dd15ea1683ebb0029ee9c668695315c97a09f74e77c1c"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vcpkg/blobs/sha256:053741306dee81b7e7130cd9ecd02c924e3b2abf8239af8551f4594b14305246",
          "sha256": "053741306dee81b7e7130cd9ecd02c924e3b2abf8239af8551f4594b14305246"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vcpkg/blobs/sha256:56c3fff1a5cea2419ba1f1b9cf1d429743ae84da32cca47968742a52668401e4",
          "sha256": "56c3fff1a5cea2419ba1f1b9cf1d429743ae84da32cca47968742a52668401e4"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vcpkg/blobs/sha256:881ee6a543bbaff9ca4e0cdcf9beab6b0617aa4eb9092f34e3ae80a30518a686",
          "sha256": "881ee6a543bbaff9ca4e0cdcf9beab6b0617aa4eb9092f34e3ae80a30518a686"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [
    "fmt",
    "ninja"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": "This formula provides only the `vcpkg` executable. To use vcpkg:\n  git clone https://github.com/microsoft/vcpkg \"$HOME/vcpkg\"\n  export VCPKG_ROOT=\"$HOME/vcpkg\"\n",
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/vcpkg.rb",
  "ruby_source_checksum": {
    "sha256": "6ed12b09fd37e4940d0c1e9968a263a9113099bda87378d542856e0dae211647"
  },
  "date_added": "2020-06-14T13:31:05+00:00",
  "readme": "# Vcpkg: Overview\n\n[中文总览](README_zh_CN.md)\n[Español](README_es.md)\n[한국어](README_ko_KR.md)\n[Français](README_fr.md)\n\nVcpkg helps you manage C and C++ libraries on Windows, Linux and MacOS.\nThis tool and ecosystem are constantly evolving, and we always appreciate contributions!\n\nIf you've never used vcpkg before, or if you're trying to figure out how to use vcpkg,\ncheck out our [Getting Started](#getting-started) section for how to start using vcpkg.\n\nFor short description of available commands, once you've installed vcpkg,\nyou can run `vcpkg help`, or `vcpkg help [command]` for command-specific help.\n\n* GitHub: ports at [https://github.com/microsoft/vcpkg](https://github.com/microsoft/vcpkg), program at [https://github.com/microsoft/vcpkg-tool](https://github.com/microsoft/vcpkg-tool)\n* Slack: [https://cppalliance.org/slack/](https://cppalliance.org/slack/), the #vcpkg channel\n* Discord: [\\#include \\<C++\\>](https://www.includecpp.org), the #🌏vcpkg channel\n* Docs: [Documentation](https://learn.microsoft.com/vcpkg)\n\n# Table of Contents\n\n- [Vcpkg: Overview](#vcpkg-overview)\n- [Table of Contents](#table-of-contents)\n- [Getting Started](#getting-started)\n  - [Quick Start: Windows](#quick-start-windows)\n  - [Quick Start: Unix](#quick-start-unix)\n  - [Installing Linux Developer Tools](#installing-linux-developer-tools)\n  - [Installing macOS Developer Tools](#installing-macos-developer-tools)\n  - [Using vcpkg with CMake](#using-vcpkg-with-cmake)\n    - [Visual Studio Code with CMake Tools](#visual-studio-code-with-cmake-tools)\n    - [Vcpkg with Visual Studio CMake Projects](#vcpkg-with-visual-studio-cmake-projects)\n    - [Vcpkg with CLion](#vcpkg-with-clion)\n    - [Vcpkg as a Submodule](#vcpkg-as-a-submodule)\n- [Tab-Completion/Auto-Completion](#tab-completionauto-completion)\n- [Examples](#examples)\n- [Contributing](#contributing)\n- [License](#license)\n- [Security](#security)\n- [Telemetry](#telemetry)\n\n# Getting Started\n\nFirst, follow the quick start guide for either\n[Windows](#quick-start-windows), or [macOS and Linux](#quick-start-unix),\ndepending on what you're using.\n\nFor more information, see [Installing and Using Packages][getting-started:using-a-package].\nIf a library you need is not present in the vcpkg catalog,\nyou can [open an issue on the GitHub repo][contributing:submit-issue]\nwhere the vcpkg team and community can see it,\nand potentially add the port to vcpkg.\n\nAfter you've gotten vcpkg installed and working,\nyou may wish to add [tab completion](#tab-completionauto-completion) to your shell.\n\n## Quick Start: Windows\n\nPrerequisites:\n- Windows 7 or newer\n- [Git][getting-started:git]\n- [Visual Studio][getting-started:visual-studio] 2015 Update 3 or greater with the English language pack\n\nFirst, download and bootstrap vcpkg itself; it can be installed anywhere, but generally we recommend using vcpkg as a\nsubmodule so the consuming repo can stay self-contained. Alternatively, vcpkg can be installed globally; we recommend\nsomewhere like `C:\\src\\vcpkg` or `C:\\dev\\vcpkg`, since otherwise you may run into path issues for some port build\nsystems.\n\n```cmd\n> git clone https://github.com/microsoft/vcpkg\n> .\\vcpkg\\bootstrap-vcpkg.bat\n```\n\nTo install the libraries for your project, run:\n\n```cmd\n> .\\vcpkg\\vcpkg install [packages to install]\n```\n\nNote: This will install x86 libraries by default. To install x64, run:\n\n```cmd\n> .\\vcpkg\\vcpkg install [package name]:x64-windows\n```\n\nOr\n\n```cmd\n> .\\vcpkg\\vcpkg install [packages to install] --triplet=x64-windows\n```\n\nYou can also search for the libraries you need with the `search` subcommand:\n\n```cmd\n> .\\vcpkg\\vcpkg search [search term]\n```\n\nIn order to use vcpkg with Visual Studio,\nrun the following command (may require administrator elevation):\n\n```cmd\n> .\\vcpkg\\vcpkg integrate install\n```\n\nAfter this, you can now create a New non-CMake Project (or open an existing one).\nAll installed libraries are immediately ready to be `#include`'d and used\nin your project without additional configuration.\n\nIf you're using CMake with Visual Studio,\ncontinue [here](#vcpkg-with-visual-studio-cmake-projects).\n\nIn order to use vcpkg with CMake outside of an IDE,\nyou can use the toolchain file:\n\n```cmd\n> cmake -B [build directory] -S . \"-DCMAKE_TOOLCHAIN_FILE=[path to vcpkg]/scripts/buildsystems/vcpkg.cmake\"\n> cmake --build [build directory]\n```\n\nWith CMake, you will still need to `find_package` and the like to use the libraries.\nCheck out the [CMake section](#using-vcpkg-with-cmake) for more information,\nincluding on using CMake with an IDE.\n\n## Quick Start: Unix\n\nPrerequisites for Linux:\n- [Git][getting-started:git]\n- [g++][getting-started:linux-gcc] >= 6\n\nPrerequisites for macOS:\n- [Apple Developer Tools][getting-started:macos-dev-tools]\n\nFirst, download and bootstrap vcpkg itself; it can be installed anywhere,\nbut generally we recommend using vcpkg as a submodule.\n\n```sh\n$ git clone https://github.com/microsoft/vcpkg\n$ ./vcpkg/bootstrap-vcpkg.sh\n```\n\nTo install the libraries for your project, run:\n\n```sh\n$ ./vcpkg/vcpkg install [packages to install]\n```\n\nYou can also search for the libraries you need with the `search` subcommand:\n\n```sh\n$ ./vcpkg/vcpkg search [search term]\n```\n\nIn order to use vcpkg with CMake, you can use the toolchain file:\n\n```sh\n$ cmake -B [build directory] -S . \"-DCMAKE_TOOLCHAIN_FILE=[path to vcpkg]/scripts/buildsystems/vcpkg.cmake\"\n$ cmake --build [build directory]\n```\n\nWith CMake, you will still need to `find_package` and the like to use the libraries.\nCheck out the [CMake section](#using-vcpkg-with-cmake)\nfor more information on how best to use vcpkg with CMake,\nand CMake Tools for VSCode.\n\n## Installing Linux Developer Tools\n\nAcross the different distros of Linux, there are different packages you'll\nneed to install:\n\n- Debian, Ubuntu, popOS, and other Debian-based distributions:\n\n```sh\n$ sudo apt-get update\n$ sudo apt-get install build-essential tar curl zip unzip\n```\n\n- CentOS\n\n```sh\n$ sudo yum install centos-release-scl\n$ sudo yum install devtoolset-7\n$ scl enable devtoolset-7 bash\n```\n\nFor any other distributions, make sure you're installing g++ 6 or above.\nIf you want to add instructions for your specific distro,\n[please open a PR][contributing:submit-pr]!\n\n## Installing macOS Developer Tools\n\nOn macOS, the only thing you should need to do is run the following in your terminal:\n\n```sh\n$ xcode-select --install\n```\n\nThen follow along with the prompts in the windows that comes up.\n\nYou'll then be able to bootstrap vcpkg along with the [quick start guide](#quick-start-unix)\n\n## Using vcpkg with CMake\n\n### Visual Studio Code with CMake Tools\n\nAdding the following to your workspace `settings.json` will make\nCMake Tools automatically use vcpkg for libraries:\n\n```json\n{\n  \"cmake.configureSettings\": {\n    \"CMAKE_TOOLCHAIN_FILE\": \"[vcpkg root]/scripts/buildsystems/vcpkg.cmake\"\n  }\n}\n```\n\n### Vcpkg with Visual Studio CMake Projects\n\nOpen the CMake Settings Editor, and under `CMake toolchain file`,\nadd the path to the vcpkg toolchain file:\n\n```\n[vcpkg root]/scripts/buildsystems/vcpkg.cmake\n```\n\n### Vcpkg with CLion\n\nOpen the Toolchains settings\n(File > Settings on Windows and Linux, CLion > Preferences on macOS),\nand go to the CMake settings (Build, Execution, Deployment > CMake).\nFinally, in `CMake options`, add the following line:\n\n```\n-DCMAKE_TOOLCHAIN_FILE=[vcpkg root]/scripts/buildsystems/vcpkg.cmake\n```\n\nYou must add this line to each profile.\n\n### Vcpkg as a Submodule with CMake\n\nWhen using vcpkg as a submodule of your project,\nyou can add the following to your CMakeLists.txt before the first `project()` call,\ninstead of passing `CMAKE_TOOLCHAIN_FILE` to the cmake invocation.\n\n```cmake\nset(CMAKE_TOOLCHAIN_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/vcpkg/scripts/buildsystems/vcpkg.cmake\"\n  CACHE STRING \"Vcpkg toolchain file\")\n```\n\nThis will still allow people to not use vcpkg,\nby passing the `CMAKE_TOOLCHAIN_FILE` directly,\nbut it will make the configure-build step slightly easier.\n\n[getting-started:using-a-package]: https://learn.microsoft.com/vcpkg/examples/installing-and-using-packages\n[getting-started:git]: https://git-scm.com/downloads\n[getting-started:cmake-tools]: https://marketplace.visualstudio.com/items?itemName=ms-vscode.cmake-tools\n[getting-started:linux-gcc]: #installing-linux-developer-tools\n[getting-started:macos-dev-tools]: #installing-macos-developer-tools\n[getting-started:macos-brew]: #installing-gcc-on-macos\n[getting-started:macos-gcc]: #installing-gcc-on-macos\n[getting-started:visual-studio]: https://visualstudio.microsoft.com/\n\n# Tab-Completion/Auto-Completion\n\n`vcpkg` supports auto-completion of commands, package names,\nand options in both powershell and bash.\nTo enable tab-completion in the shell of your choice, run:\n\n```pwsh\n> .\\vcpkg integrate powershell\n```\n\nor\n\n```sh\n$ ./vcpkg integrate bash # or zsh\n```\n\ndepending on the shell you use, then restart your console.\n\n# Examples\n\nSee the [documentation](https://learn.microsoft.com/vcpkg) for specific walkthroughs,\nincluding [installing and using a package](https://learn.microsoft.com/vcpkg/examples/installing-and-using-packages),\n[adding a new package from a zipfile](https://learn.microsoft.com/vcpkg/examples/packaging-zipfiles),\nand [adding a new package from a GitHub repo](https://learn.microsoft.com/vcpkg/examples/packaging-github-repos).\n\nOur docs are now also available online at our website https://vcpkg.io/. We really appreciate any and all feedback! You can submit an issue in https://github.com/vcpkg/vcpkg.github.io/issues.\n\nSee a 4 minute [video demo](https://www.youtube.com/watch?v=y41WFKbQFTw).\n\n# Contributing\n\nVcpkg is an open source project, and is thus built with your contributions.\nHere are some ways you can contribute:\n\n* [Submit Issues][contributing:submit-issue] in vcpkg or existing packages\n* [Submit Fixes and New Packages][contributing:submit-pr]\n\nPlease refer to our [Contributing Guide](CONTRIBUTING.md) for more details.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct][contributing:coc].\nFor more information see the [Code of Conduct FAQ][contributing:coc-faq]\nor email [opencode@microsoft.com](mailto:opencode@microsoft.com)\nwith any additional questions or comments.\n\n[contributing:submit-issue]: https://github.com/microsoft/vcpkg/issues/new/choose\n[contributing:submit-pr]: https://github.com/microsoft/vcpkg/pulls\n[contributing:coc]: https://opensource.microsoft.com/codeofconduct/\n[contributing:coc-faq]: https://opensource.microsoft.com/codeofconduct/\n\n# License\n\nThe code in this repository is licensed under the [MIT License](LICENSE.txt). The libraries\nprovided by ports are licensed under the terms of their original authors. Where available, vcpkg\nplaces the associated license(s) in the location `installed/<triplet>/share/<port>/copyright`.\n\n# Security\n\nMost ports in vcpkg build the libraries in question using the original build system preferred\nby the original developers of those libraries, and download source code and build tools from their\nofficial distribution locations. For use behind a firewall, the specific access needed will depend\non which ports are being installed. If you must install in in an \"air gapped\" environment, consider\ninstalling once in a non-\"air gapped\" environment, populating an\n[asset cache](https://learn.microsoft.com/vcpkg/users/assetcaching) shared with the otherwise \"air gapped\" environment.\n\n# Telemetry\n\nvcpkg collects usage data in order to help us improve your experience.\nThe data collected by Microsoft is anonymous.\nYou can opt-out of telemetry by\n- running the bootstrap-vcpkg script with -disableMetrics\n- passing --disable-metrics to vcpkg on the command line\n- setting the VCPKG_DISABLE_METRICS environment variable\n\nRead more about vcpkg telemetry at [https://learn.microsoft.com/vcpkg/about/privacy](https://learn.microsoft.com/vcpkg/about/privacy)."
}
