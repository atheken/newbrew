{
  "name": "kube-linter",
  "full_name": "kube-linter",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Static analysis tool for Kubernetes YAML files and Helm charts",
  "license": "Apache-2.0",
  "homepage": "https://github.com/stackrox/kube-linter",
  "versions": {
    "stable": "0.6.4",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/stackrox/kube-linter/archive/refs/tags/v0.6.4.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "d83bb858531afce887416f6f0da0132a38b06c28b5da4b989363061a9ad65ca8"
    },
    "head": {
      "url": "https://github.com/stackrox/kube-linter.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kube-linter/blobs/sha256:0b7cca3d812f443f35bcafe33c357278fe3939a7a0d00a40e26d01c33a9e8299",
          "sha256": "0b7cca3d812f443f35bcafe33c357278fe3939a7a0d00a40e26d01c33a9e8299"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kube-linter/blobs/sha256:0b7cca3d812f443f35bcafe33c357278fe3939a7a0d00a40e26d01c33a9e8299",
          "sha256": "0b7cca3d812f443f35bcafe33c357278fe3939a7a0d00a40e26d01c33a9e8299"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kube-linter/blobs/sha256:0b7cca3d812f443f35bcafe33c357278fe3939a7a0d00a40e26d01c33a9e8299",
          "sha256": "0b7cca3d812f443f35bcafe33c357278fe3939a7a0d00a40e26d01c33a9e8299"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kube-linter/blobs/sha256:299bafe97d40e0b196dc2517a800bb1f9283473678a224d3767e34ded7a0b92a",
          "sha256": "299bafe97d40e0b196dc2517a800bb1f9283473678a224d3767e34ded7a0b92a"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kube-linter/blobs/sha256:299bafe97d40e0b196dc2517a800bb1f9283473678a224d3767e34ded7a0b92a",
          "sha256": "299bafe97d40e0b196dc2517a800bb1f9283473678a224d3767e34ded7a0b92a"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kube-linter/blobs/sha256:299bafe97d40e0b196dc2517a800bb1f9283473678a224d3767e34ded7a0b92a",
          "sha256": "299bafe97d40e0b196dc2517a800bb1f9283473678a224d3767e34ded7a0b92a"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kube-linter/blobs/sha256:1827dd57e21a00ee87db0c24a5505d8371f30326eea54c2d5e99f0cf7f882509",
          "sha256": "1827dd57e21a00ee87db0c24a5505d8371f30326eea54c2d5e99f0cf7f882509"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/kube-linter.rb",
  "ruby_source_checksum": {
    "sha256": "20f5486e14318d00466d2c6641c6f0148702a8c5763a81d970ff52ae8499b370"
  },
  "date_added": "2020-11-10T13:50:15+00:00",
  "readme": "<p align=\"center\"><img src=\"images/logo/KubeLinter-horizontal.svg\" width=\"360\"></p>\n<p align=\"center\"><b>Static analysis for Kubernetes</b></p>\n\n[![Go Report Card](https://goreportcard.com/badge/github.com/stackrox/kube-linter)](https://goreportcard.com/report/github.com/stackrox/kube-linter)\n\n# What is KubeLinter?\n\nKubeLinter analyzes Kubernetes YAML files and Helm charts, and checks them against a variety of best practices, with a focus on production readiness and security. \n\nKubeLinter runs sensible default checks, designed to give you useful information about your Kubernetes YAML files and Helm charts. This is to help teams check early and often for security misconfigurations and DevOps best practices. Some common examples of these include running containers as a non-root user, enforcing least privilege, and storing sensitive information only in secrets.\n\nKubeLinter is configurable, so you can enable and disable checks, as well as create your own custom checks, depending on the policies you want to follow within your organization. \n\nWhen a lint check fails, KubeLinter reports recommendations for how to resolve any potential issues and returns a non-zero exit code.\n\n## Documentation\nVisit https://docs.kubelinter.io for detailed documentation on installing, using and configuring KubeLinter.\n\n## Installing KubeLinter\n\n### Using Go\n\nTo install using [Go](https://golang.org/), run the following command:\n\n```bash\ngo install golang.stackrox.io/kube-linter/cmd/kube-linter@latest\n```\nOtherwise, download the latest binary from [Releases](https://github.com/stackrox/kube-linter/releases) and add it to your\nPATH.\n\n### Using Homebrew for macOS or LinuxBrew for Linux\n\nTo install using Homebrew or LinuxBrew, run the following command:\n\n```bash\nbrew install kube-linter\n```\n\n### Building from source\n\n### Prerequisites\n- Make sure that you have [installed Go](https://golang.org/doc/install) prior to building from source.\n\n### Building KubeLinter\n\nInstalling KubeLinter from source is as simple as following these steps:\n\n1. First, clone the KubeLinter repository.\n\n   ```bash\n   git clone git@github.com:stackrox/kube-linter.git\n   ```\n   \n1. Then, compile the source code. This will create the kube-linter binary files for each platform and places them in the `.gobin` folder.\n   \n   ```bash\n   make build\n   ```\n   \n1. Finally, you are ready to start using KubeLinter. Verify your version to ensure you've successfully installed KubeLinter.\n\n   ```bash\n   .gobin/kube-linter version\n   ```\n\n### Testing KubeLinter\nThere are several layers of testing. Each layer is expected to pass.\n\n1. `go` unit tests:\n\n   ```bash\n   make test\n   ```\n\n2. end-to-end integration tests:\n\n   ```bash\n   make e2e-test\n   ```\n\n3. and finally, end-to-end integration tests using `bats-core`:\n\n   ```bash\n   make e2e-bats\n   ```\n\n## Verifying KubeLinter images\n\nKubeLinter images are signed by [cosign](https://github.com/sigstore/cosign).\nWe recommend verifying the image before using it.\n\nOnce you've installed cosign, you can use the [KubeLinter public key](kubelinter-cosign.pub) to verify the KubeLinter image with:\n\n```shell\ncat kubelinter-cosign.pub\n-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEl0HCkCRzYv0qH5QiazoXeXe2qwFX\nDmAszeH26g1s3OSsG/focPWkN88wEKQ5eiE95v+Z2snUQPl/mjPdvqpyjA==\n-----END PUBLIC KEY-----\n\n\ncosign verify --key kubelinter-cosign $IMAGE_NAME\n```\n\nKubeLinter also provides [cosign keyless signatures](https://github.com/sigstore/cosign/blob/623d50f9b77ee85886a166daac648455e65003ec/KEYLESS.md).\n\nYou can verify the KubeLinter image with:\n```shell\n# NOTE: Keyless signatures are NOT PRODUCTION ready.\n\nCOSIGN_EXPERIMENTAL=1 cosign verify $IMAGE_NAME\n```\n\n## Using KubeLinter\n\n### Local YAML Linting\n\nRunning KubeLinter to Lint your YAML files only requires two steps in its most basic form.\n\n1. Locate the YAML file you'd like to test for security and production readiness best practices:\n1. Run the following command:\n\n   ```bash\n   kube-linter lint /path/to/your/yaml.yaml\n   ```\n\n### Example\n\nConsider the following sample pod specification file `pod.yaml`. This file has two production readiness issues and one security issue:\n\n**Security Issue:**\n1. The container in this pod is not running as a read only file system, which could allow it to write to the root filesystem.\n\n**Production readiness:**\n1. The container's CPU limits are not set, which could allow it to consume excessive CPU.\n1. The container's memory limits are not set, which could allow it to consume excessive memory\n\n   ```yaml\n   apiVersion: v1\n   kind: Pod\n   metadata:\n     name: security-context-demo\n   spec:\n     securityContext:\n       runAsUser: 1000\n       runAsGroup: 3000\n       fsGroup: 2000\n     volumes:\n     - name: sec-ctx-vol\n       emptyDir: {}\n     containers:\n     - name: sec-ctx-demo\n       image: busybox\n       resources:\n         requests:\n           memory: \"64Mi\"\n           cpu: \"250m\"\n       command: [ \"sh\", \"-c\", \"sleep 1h\" ]\n       volumeMounts:\n       - name: sec-ctx-vol\n         mountPath: /data/demo\n       securityContext:\n         allowPrivilegeEscalation: false\n   ```\n  \n1. Copy the YAML above to pod.yaml and lint this file by running the following command:\n\n   ```bash\n   kube-linter lint pod.yaml\n   ```\n1. KubeLinter runs its default checks and reports recommendations. Below is the output from our previous command.\n\n   ```\n   pod.yaml: (object: <no namespace>/security-context-demo /v1, Kind=Pod) container \"sec-ctx-demo\" does not have a read-only root file system (check: no-read-only-root-fs, remediation: Set readOnlyRootFilesystem to true in your container's securityContext.)\n\n   pod.yaml: (object: <no namespace>/security-context-demo /v1, Kind=Pod) container \"sec-ctx-demo\" has cpu limit 0 (check: unset-cpu-requirements, remediation: Set    your container's CPU requests and limits depending on its requirements. See    https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/   #requests-and-limits for more details.)\n   \n   pod.yaml: (object: <no namespace>/security-context-demo /v1, Kind=Pod) container \"sec-ctx-demo\" has memory limit 0 (check: unset-memory-requirements, remediation:    Set your container's memory requests and limits depending on its requirements.    See https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/   #requests-and-limits for more details.)\n   \n   Error: found 3 lint errors\n   ```\nTo learn more about using and configuring KubeLinter, visit the [documentation](./docs) page.\n\n## Mentions/Tutorials\n\nThe following are tutorials on KubeLinter written by users. If you have one that you would like to add to this list, please send a PR!\n\n* [Ensuring YAML best practices using KubeLinter](https://www.civo.com/learn/yaml-best-practices-using-kubelinter) at civo.com by Saiyam Pathak.\n* [Analyze Kubernetes files for errors with KubeLinter](https://opensource.com/article/21/1/kubelinter) at opensource.com by Jessica Cherry.\n* [How to add a new check in KubeLinter?](https://www.psaggu.com/upstream-contribution/2021/08/17/notes.html) by Priyanka Saggu.\n* [Extending kube-linter To Build A Custom Template](https://github.com/garethahealy/kubelinter-extending-blog) by [Gareth Healy](https://github.com/garethahealy).\n\n## Community\n\nIf you would like to engage with the KubeLinter community, including maintainers and other users, you can join the Slack workspace [here](https://join.slack.com/t/kube-linter/shared_invite/zt-kla9qvyo-Tk~wynTSbr9EE3AjHcv4BQ).\n\nTo contribute, check out our [contributing guide](./CONTRIBUTING.md).\n\nAs a reminder, all participation in the KubeLinter community is governed by our [code of conduct](./CODE_OF_CONDUCT.md).\n\n## WARNING: Alpha release\n\nKubeLinter is at an early stage of development. There may be breaking changes in\nthe future to the command usage, flags, and configuration file formats. However,\nwe encourage you to use KubeLinter to test your environment YAML files, see what\nbreaks, and [contribute](./CONTRIBUTING.md).\n\n## LICENSE \n\nKubeLinter is licensed under the [Apache License 2.0](./LICENSE).\n\n## StackRox\n\nKubeLinter is made with ❤️ by [StackRox](https://stackrox.com/).\n\nIf you're interested in KubeLinter, or in any of the other cool things we do, please know that we're hiring!\nCheck out our [open positions](https://www.stackrox.com/job-board/). We'd love to hear from you!"
}
