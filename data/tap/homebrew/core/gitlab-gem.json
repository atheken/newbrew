{
  "name": "gitlab-gem",
  "full_name": "gitlab-gem",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Ruby client and CLI for GitLab API",
  "license": "BSD-2-Clause",
  "homepage": "https://github.com/NARKOZ/gitlab",
  "versions": {
    "stable": "4.19.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/NARKOZ/gitlab/archive/v4.19.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "f747fa76db258d4df54d564eb7f7c164d15a9f4937583e885d79aab3f04023fe"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gitlab-gem/blobs/sha256:86b43558c3f09fc837044a34807dcf485098351a237f81394b52dfa4467416b9",
          "sha256": "86b43558c3f09fc837044a34807dcf485098351a237f81394b52dfa4467416b9"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gitlab-gem/blobs/sha256:86b43558c3f09fc837044a34807dcf485098351a237f81394b52dfa4467416b9",
          "sha256": "86b43558c3f09fc837044a34807dcf485098351a237f81394b52dfa4467416b9"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gitlab-gem/blobs/sha256:b163e735208a52ae23a48b72b21e838062e834e112aa0e215e0aca85ca8d52c4",
          "sha256": "b163e735208a52ae23a48b72b21e838062e834e112aa0e215e0aca85ca8d52c4"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gitlab-gem/blobs/sha256:86b43558c3f09fc837044a34807dcf485098351a237f81394b52dfa4467416b9",
          "sha256": "86b43558c3f09fc837044a34807dcf485098351a237f81394b52dfa4467416b9"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gitlab-gem/blobs/sha256:86b43558c3f09fc837044a34807dcf485098351a237f81394b52dfa4467416b9",
          "sha256": "86b43558c3f09fc837044a34807dcf485098351a237f81394b52dfa4467416b9"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gitlab-gem/blobs/sha256:b163e735208a52ae23a48b72b21e838062e834e112aa0e215e0aca85ca8d52c4",
          "sha256": "b163e735208a52ae23a48b72b21e838062e834e112aa0e215e0aca85ca8d52c4"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gitlab-gem/blobs/sha256:b163e735208a52ae23a48b72b21e838062e834e112aa0e215e0aca85ca8d52c4",
          "sha256": "b163e735208a52ae23a48b72b21e838062e834e112aa0e215e0aca85ca8d52c4"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gitlab-gem/blobs/sha256:95066291140c4f67a5b74667427a3ead59f5d7e5b6dbd7611a5f5fbe2cdae83f",
          "sha256": "95066291140c4f67a5b74667427a3ead59f5d7e5b6dbd7611a5f5fbe2cdae83f"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "ruby"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/gitlab-gem.rb",
  "ruby_source_checksum": {
    "sha256": "ca8bbf9088376125b8992b837a2f846ff9aab95f510c75da1aab0be81d3db259"
  },
  "date_added": "2018-04-14T10:45:51+02:00",
  "readme": "# Gitlab\n\n[![Build Status](https://img.shields.io/github/actions/workflow/status/NARKOZ/gitlab/ci.yml?branch=master)](https://github.com/NARKOZ/gitlab/actions/workflows/ci.yml)\n[![Gem version](https://img.shields.io/gem/v/gitlab.svg)](https://rubygems.org/gems/gitlab)\n[![License](https://img.shields.io/badge/license-BSD-red.svg)](https://github.com/NARKOZ/gitlab/blob/master/LICENSE.txt)\n\n[website](https://narkoz.github.io/gitlab) |\n[documentation](https://www.rubydoc.info/gems/gitlab/frames) |\n[gitlab-live](https://github.com/NARKOZ/gitlab-live)\n\nGitlab is a Ruby wrapper and CLI for the [GitLab API](https://docs.gitlab.com/ee/api/index.html).\n\n## Installation\n\nInstall it from rubygems:\n\n```sh\ngem install gitlab\n```\n\nOr add to a Gemfile:\n\n```ruby\ngem 'gitlab'\n# gem 'gitlab', github: 'NARKOZ/gitlab'\n```\n\nMac OS users can install using Homebrew (may not be the latest version):\n\n```sh\nbrew install gitlab-gem\n```\n\n## Usage\n\nConfiguration example:\n\n```ruby\nGitlab.configure do |config|\n  config.endpoint       = 'https://example.net/api/v4' # API endpoint URL, default: ENV['GITLAB_API_ENDPOINT'] and falls back to ENV['CI_API_V4_URL']\n  config.private_token  = 'qEsq1pt6HJPaNciie3MG'       # user's private token or OAuth2 access token, default: ENV['GITLAB_API_PRIVATE_TOKEN']\n  # Optional\n  # config.user_agent   = 'Custom User Agent'          # user agent, default: 'Gitlab Ruby Gem [version]'\n  # config.sudo         = 'user'                       # username for sudo mode, default: nil\nend\n```\n\n(Note: If you are using GitLab.com's hosted service, your endpoint will be `https://gitlab.com/api/v4`)\n\nUsage examples:\n\n```ruby\n# set an API endpoint\nGitlab.endpoint = 'https://example.net/api/v4'\n# => \"https://example.net/api/v4\"\n\n# set a user private token\nGitlab.private_token = 'qEsq1pt6HJPaNciie3MG'\n# => \"qEsq1pt6HJPaNciie3MG\"\n\n# configure a proxy server\nGitlab.http_proxy('proxyhost', 8888)\n# proxy server with basic auth\nGitlab.http_proxy('proxyhost', 8888, 'proxyuser', 'strongpasswordhere')\n# set timeout for responses\nENV['GITLAB_API_HTTPARTY_OPTIONS'] = '{read_timeout: 60}'\n\n# list projects\nGitlab.projects(per_page: 5)\n# => [#<Gitlab::ObjectifiedHash:0x000000023326e0 @data={\"id\"=>1, \"code\"=>\"brute\", \"name\"=>\"Brute\", \"description\"=>nil, \"path\"=>\"brute\", \"default_branch\"=>nil, \"owner\"=>#<Gitlab::ObjectifiedHash:0x00000002331600 @data={\"id\"=>1, \"email\"=>\"john@example.com\", \"name\"=>\"John Smith\", \"blocked\"=>false, \"created_at\"=>\"2012-09-17T09:41:56Z\"}>, \"private\"=>true, \"issues_enabled\"=>true, \"merge_requests_enabled\"=>true, \"wall_enabled\"=>true, \"wiki_enabled\"=>true, \"created_at\"=>\"2012-09-17T09:41:56Z\"}>, #<Gitlab::ObjectifiedHash:0x000000023450d8 @data={\"id\"=>2, \"code\"=>\"mozart\", \"name\"=>\"Mozart\", \"description\"=>nil, \"path\"=>\"mozart\", \"default_branch\"=>nil, \"owner\"=>#<Gitlab::ObjectifiedHash:0x00000002344ca0 @data={\"id\"=>1, \"email\"=>\"john@example.com\", \"name\"=>\"John Smith\", \"blocked\"=>false, \"created_at\"=>\"2012-09-17T09:41:56Z\"}>, \"private\"=>true, \"issues_enabled\"=>true, \"merge_requests_enabled\"=>true, \"wall_enabled\"=>true, \"wiki_enabled\"=>true, \"created_at\"=>\"2012-09-17T09:41:57Z\"}>, #<Gitlab::ObjectifiedHash:0x00000002344958 @data={\"id\"=>3, \"code\"=>\"gitlab\", \"name\"=>\"Gitlab\", \"description\"=>nil, \"path\"=>\"gitlab\", \"default_branch\"=>nil, \"owner\"=>#<Gitlab::ObjectifiedHash:0x000000023447a0 @data={\"id\"=>1, \"email\"=>\"john@example.com\", \"name\"=>\"John Smith\", \"blocked\"=>false, \"created_at\"=>\"2012-09-17T09:41:56Z\"}>, \"private\"=>true, \"issues_enabled\"=>true, \"merge_requests_enabled\"=>true, \"wall_enabled\"=>true, \"wiki_enabled\"=>true, \"created_at\"=>\"2012-09-17T09:41:58Z\"}>]\n\n# initialize a new client with custom headers\ng = Gitlab.client(\n  endpoint: 'https://example.com/api/v4',\n  private_token: 'qEsq1pt6HJPaNciie3MG',\n  httparty: {\n    headers: { 'Cookie' => 'gitlab_canary=true' }\n  }\n)\n# => #<Gitlab::Client:0x00000001e62408 @endpoint=\"https://api.example.com\", @private_token=\"qEsq1pt6HJPaNciie3MG\", @user_agent=\"Gitlab Ruby Gem 2.0.0\">\n\n# get a user\nuser = g.user\n# => #<Gitlab::ObjectifiedHash:0x00000002217990 @data={\"id\"=>1, \"email\"=>\"john@example.com\", \"name\"=>\"John Smith\", \"bio\"=>nil, \"skype\"=>\"\", \"linkedin\"=>\"\", \"twitter\"=>\"john\", \"dark_scheme\"=>false, \"theme_id\"=>1, \"blocked\"=>false, \"created_at\"=>\"2012-09-17T09:41:56Z\"}>\n\n# get a user's email\nuser.email\n# => \"john@example.com\"\n\n# set a sudo mode to perform API calls as another user\nGitlab.sudo = 'other_user'\n# => \"other_user\"\n\n# disable a sudo mode\nGitlab.sudo = nil\n# => nil\n\n# set the private token to an empty string to make unauthenticated API requests\nGitlab.private_token = ''\n# => \"\"\n\n# a paginated response\nprojects = Gitlab.projects(per_page: 5)\n\n# check existence of the next page\nprojects.has_next_page?\n\n# retrieve the next page\nprojects.next_page\n\n# iterate all projects\nprojects.auto_paginate do |project|\n  # do something\nend\n\n# retrieve all projects as an array\nprojects.auto_paginate\n```\n\nFor more information, refer to [documentation](https://www.rubydoc.info/gems/gitlab/frames).\n\n## CLI\n\nIt is possible to use this gem as a command line interface to GitLab. In order to make that work you need to set a few environment variables:\n```sh\nexport GITLAB_API_ENDPOINT=https://gitlab.example.com/api/v4\nexport GITLAB_API_PRIVATE_TOKEN=<your private token from /profile/personal_access_tokens>\n\n# This one is optional and can be used to set any HTTParty option you may need\n# using YAML hash syntax. For example, this is how you would disable SSL\n# verification (useful if using a self-signed cert).\nexport GITLAB_API_HTTPARTY_OPTIONS=\"{verify: false}\"\n```\n\nUsage:\n\nWhen you want to know which CLI commands are supported, take a look at the client [commands implemented in this gem](https://www.rubydoc.info/gems/gitlab/4.18.0/Gitlab/Client). Any of those methods can be called as a command by passing the parameters of the commands as parameters of the CLI.\n\nUsage examples:\n\n```sh\n# list users\n# see: https://www.rubydoc.info/gems/gitlab/Gitlab/Client/Users#users-instance_method\ngitlab users\n\n# get current user\n# see: https://www.rubydoc.info/gems/gitlab/Gitlab/Client/Users#user-instance_method\ngitlab user\n\n# get a user\n# see: https://www.rubydoc.info/gems/gitlab/Gitlab/Client/Users#user-instance_method\ngitlab user 2\n\n# filter output\ngitlab user --only=id,username\n\ngitlab user --except=email,bio\n\n# get a user and render result as json\ngitlab user 2 --json\n\n# passing options hash to a command (use YAML)\n# see: https://www.rubydoc.info/gems/gitlab/Gitlab/Client/MergeRequests#create_merge_request-instance_method\ngitlab create_merge_request 4 \"New merge request\" \"{source_branch: 'new_branch', target_branch: 'master', assignee_id: 42}\"\n\n```\n\n## CLI Shell\n\nUsage examples:\n\n```sh\n# start shell session\ngitlab shell\n\n# list available commands\ngitlab> help\n\n# list groups\ngitlab> groups\n\n# protect a branch\ngitlab> protect_branch 1 master\n\n# passing options hash to a command (use YAML)\ngitlab> create_merge_request 4 \"New merge request\" \"{source_branch: 'new_branch', target_branch: 'master', assignee_id: 42}\"\n```\n\nWeb version is available at https://gitlab-live.herokuapp.com  \nFor more information, refer to [website](https://narkoz.github.io/gitlab).\n\n## Development\n\n### With a dockerized GitLab instance\n\n```shell\ndocker-compose up -d gitlab # Will start the GitLab instance in the background (approx. 3 minutes)\n```\n\nAfter a while, your GitLab instance will be accessible on http://localhost:3000.\n\nOnce you have set your new root password, you can login with the root user.\n\nYou can now setup a personal access token here: http://localhost:3000/profile/personal_access_tokens\n\nOnce you have your token, set the variables to the correct values in the `docker.env` file.\n\nThen, launch the tool:\n\n```shell\ndocker-compose run app\n```\n\n```ruby\nGitlab.users\n=> [#<Gitlab::ObjectifiedHash:47231290771040 {hash: {\"id\"=>1, \"name\"=>\"Administrator\", \"username\"=>\"root\", ...]\n```\n\nTo launch the specs:\n\n```shell\ndocker-compose run app rake spec\n```\n\n#### Want to use GitLab Enterprise?\n\nJust change the image from `gitlab/gitlab-ce:latest` to `gitlab/gitlab-ee:latest` in the `docker-compose.yml` file.\n\n### With an external GitLab instance\n\nFirst, set the variables to the correct values in the `docker.env` file.\n\nThen, launch the tool:\n\n```shell\ndocker-compose run app\n```\n\n```ruby\nGitlab.users\n=> [#<Gitlab::ObjectifiedHash:47231290771040 {hash: {\"id\"=>1, \"name\"=>\"Administrator\", \"username\"=>\"root\", ...]\n```\n\nTo launch the specs,\n\n```shell\ndocker-compose run app rake spec\n```\n\n### Without Docker\n\nAfter checking out the repo, run `bin/setup` to install dependencies. Then, run\n`rake spec` to run the tests. You can also run `bin/console` for an interactive\nprompt that will allow you to experiment.\n\nFor more information see [CONTRIBUTING.md](https://github.com/NARKOZ/gitlab/blob/master/CONTRIBUTING.md).\n\n## License\n\nReleased under the BSD 2-clause license. See LICENSE.txt for details."
}
