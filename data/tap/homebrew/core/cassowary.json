{
  "name": "cassowary",
  "full_name": "cassowary",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Modern cross-platform HTTP load-testing tool written in Go",
  "license": "MIT",
  "homepage": "https://github.com/rogerwelin/cassowary",
  "versions": {
    "stable": "0.16.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/rogerwelin/cassowary/archive/refs/tags/v0.16.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "672981232e2ae859f831de5d3e5a9f0c749739bcc41c0b17d511ca186ff56b93"
    },
    "head": {
      "url": "https://github.com/rogerwelin/cassowary.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cassowary/blobs/sha256:4a7fa7dd4130946381ec6fae85f04e7584ddc52563ad2ff61670613909f1f53b",
          "sha256": "4a7fa7dd4130946381ec6fae85f04e7584ddc52563ad2ff61670613909f1f53b"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cassowary/blobs/sha256:36b12418eaf761da0ed6592e46a0ad78ed781fbc46fa3abec1123b36d3ec0985",
          "sha256": "36b12418eaf761da0ed6592e46a0ad78ed781fbc46fa3abec1123b36d3ec0985"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cassowary/blobs/sha256:60941c6169e96da32bd6de8db7a4071da6dd3beb7feeb484595d365a313ef387",
          "sha256": "60941c6169e96da32bd6de8db7a4071da6dd3beb7feeb484595d365a313ef387"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cassowary/blobs/sha256:86be507a0d8efe77533d1bfd9d1fb6011b42f2de3d63ee48183bc265f7a2b582",
          "sha256": "86be507a0d8efe77533d1bfd9d1fb6011b42f2de3d63ee48183bc265f7a2b582"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cassowary/blobs/sha256:f3e41c09597e682425d016c56a1599cb8c60426bf5d13ee33636b94c3eea38e4",
          "sha256": "f3e41c09597e682425d016c56a1599cb8c60426bf5d13ee33636b94c3eea38e4"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cassowary/blobs/sha256:5d6d2762f20c5872189c16444b9d7933a7d6c90e9fc667fa6f79fd1047652d78",
          "sha256": "5d6d2762f20c5872189c16444b9d7933a7d6c90e9fc667fa6f79fd1047652d78"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cassowary/blobs/sha256:170d7c5338973244e7cb0fb14643855282999d85000b7eefbd1b91d876103035",
          "sha256": "170d7c5338973244e7cb0fb14643855282999d85000b7eefbd1b91d876103035"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cassowary/blobs/sha256:29d378796b909ede67c6aedac411fc4bc533c57a72a292b84d9f863b8259f43c",
          "sha256": "29d378796b909ede67c6aedac411fc4bc533c57a72a292b84d9f863b8259f43c"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/cassowary.rb",
  "ruby_source_checksum": {
    "sha256": "8659c6ea5a666a251fd358aacd26bb1e1f1b91116e83453a41168dd9ce9c10d4"
  },
  "date_added": "2020-06-01T04:58:36+00:00",
  "readme": "<p align=\"center\"><a href=\"https://github.com/rogerwelin/cassowary\"><img src=\"cass-logo.png\" alt=\"cassowary\"></a></p>\n<p align=\"center\">\n  <a href=\"https://goreportcard.com/badge/github.com/rogerwelin/cassowary\"><img src=\"https://goreportcard.com/badge/github.com/rogerwelin/cassowary?style=for-the-badge&logo=go\" alt=\"Go Report Card\"></a>\n  <a href=\"https://github.com/rogerwelin/cassowary/actions/workflows/pullrequest.yaml\"><img src=\"https://img.shields.io/github/actions/workflow/status/rogerwelin/cassowary/pullrequest.yaml?branch=master&style=for-the-badge&logo=github\" alt=\"Build status\"></a>\n  <a href=\"https://github.com/avelino/awesome-go\"><img src=\"https://awesome.re/mentioned-badge.svg\" height=\"28\" alt=\"Mentioned in Awesome Go\"></a>\n  <a href=\"https://github.com/rogerwelin/cassowary/blob/master/go.mod\"><img src=\"https://img.shields.io/github/go-mod/go-version/rogerwelin/cassowary?style=for-the-badge&logo=go\" alt=\"Go version\"></a>\n  <a href=\"https://github.com/rogerwelin/cassowary/releases\"><img src=\"https://img.shields.io/github/v/release/rogerwelin/cassowary?style=for-the-badge&logo=github&color=orange\" alt=\"Current Release\"></a>\n  <a href=\"https://godoc.org/github.com/rogerwelin/cassowary\"><img src=\"https://godoc.org/github.com/rogerwelin/cassowary?status.svg\" height=\"28\" alt=\"godoc\"></a>\n  <a href=\"https://gocover.io/github.com/rogerwelin/cassowary/pkg/client\"><img src=\"https://gocover.io/_badge/github.com/rogerwelin/cassowary/pkg/client\" height=\"28\" alt=\"Coverage\"></a>\n  <a href=\"https://github.com/rogerwelin/cassowary/blob/master/LICENSE\"><img src=\"https://img.shields.io/badge/LICENSE-MIT-orange?style=for-the-badge\" alt=\"License\"></a>\n</p>\n\nEnglish | [ä¸­æ–‡](README-ZH.md)\n\n\n**Cassowary** is a modern HTTP/S, intuitive & cross-platform load testing tool built in Go for developers, testers and sysadmins. Cassowary draws inspiration from awesome projects like k6, ab & httpstat.\n\n---\n\nToc\n----\n\n- [Features](#features)\n- [Installation](#installation)\n- [Running Cassowary](#running-cassowary)\n  * [Regular Load Test](#regular-load-test)\n  * [File Slurp Mode](#file-slurp-mode)\n  * [Exporting Metrics to File](#exporting-metrics-to-file)\n  * [Exporting Metrics to Prometheus](#exporting-metrics-to-prometheus)\n  * [Exporting Metrics to Cloudwatch](#exporting-metrics-to-cloudwatch)\n  * [Histogram](#histogram)\n  * [Boxplot](#boxplot)\n  * [Load Test with POST Data](#load-test-with-post-data)\n  * [Specifying a Duration](#specifying-a-duration-for-the-load-test)\n  * [Adding HTTP Headers](#adding-http-headers)\n  * [Disabling HTTP keep-alive](#disabling-http-keep-alive)\n  * [x509 Authentication](#x509-authentication)\n  * [Distributed Load Testing](#distributed-load-testing)\n- [Importing cassowary as a module](#importing-cassowary-as-a-modulelibrary)\n- [Versioning](#versioning)\n- [Contributing](#contributing)\n\n\nFeatures  \n--------\n\nðŸ“Œ &nbsp; **2 Load Testing modes**: one standard and one spread mode where URL Paths can be specified from a file (ideal if you want to hit several underlying microservices)  \nðŸ“Œ &nbsp;  **CI Friendly**: Well-suited to be part of a CI pipeline step  \nðŸ“Œ &nbsp; **Flexible metrics**: Cloudwatch metrics, Prometheus metrics (pushing metrics to Prometheus PushGateway), JSON file  \nðŸ“Œ  &nbsp; **Configurable**: Able to pass in arbitrary HTTP headers, able to configure the HTTP client  \nðŸ“Œ  &nbsp; **Supports GET, POST, PUT & PATCH** - POST, PUT and PATCH data can be defined in a file  \nðŸ“Œ  &nbsp; **Cross Platform**: One single pre-built binary for Linux, Mac OSX and Windows  \nðŸ“Œ  &nbsp; **Importable** - Besides the CLI tool cassowary can be imported as a module in your Go app  \nðŸ“Œ &nbsp; **Visualizations** - Cassowary can export request data as a histogram and boxplot in png format  \n\n<img src=\"https://imgur.com/ac8F8eD.gif\" />\n\nInstallation  \n--------\n\nGrab a pre-built binary from the [GitHub Releases page](https://github.com/rogerwelin/cassowary/releases). You can optionally put the **cassowary** binary in your `PATH` so you can run cassowary from any location. Alternative you can:\n\n### Homebrew on Mac OSX  \nYou can install **cassowary** using the Homebrew package manager on Mac:\n\n```bash\n$ brew update && brew install cassowary\n```\n\n### Docker  \nYou can run **cassowary** directly by using its official Docker image:  \n\n```bash\n$ docker run rogerw/cassowary:v0.14.1 -u http://www.example.com -c 1 -n 10\n```\n\nFor local development:\n\n```bash\n$ GOOS=linux go build -o dist/docker/cassowary cmd/cassowary/*.go\n$ docker build -f dist/docker/Dockerfile -t test_cassowary dist/docker\n$ docker run test_cassowary -u http://www.example.com -c 1 -n 10\n```\nWithout argument when doing \"docker run\" it prints help usage\n\n### Nix/NixOS\n\nCassowary can be installed via the [Nix](https://nixos.org) package manager.\n```\nnix-env -iA cassowary\n```\n\n### CentOS/RHEL (RPM)\n\nIf you want to roll out your own RPM you can use the spec file [cassowary.spec](https://github.com/rogerwelin/cassowary/blob/master/dist/rpm/cassowary.spec) to build an RPM package\n\n\n\nRunning Cassowary  \n--------\n\n### Regular Load Test  \nExample running **cassowary** against www.example.com with 100 requests spread out over 10 concurrent users:\n\n```bash\n$ ./cassowary run -u http://www.example.com -c 10 -n 100\n\nStarting Load Test with 100 requests using 10 concurrent users\n\n 100% |â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| [1s:0s]            1.256773616s\n\n\n TCP Connect.....................: Avg/mean=101.90ms \tMedian=102.00ms\tp(95)=105ms\n Server Processing...............: Avg/mean=100.18ms \tMedian=100.50ms\tp(95)=103ms\n Content Transfer................: Avg/mean=0.01ms \tMedian=0.00ms\tp(95)=0ms\n\nSummary:\n Total Req.......................: 100\n Failed Req......................: 0\n DNS Lookup......................: 115.00ms\n Req/s...........................: 79.57\n```\n\n### File Slurp Mode  \nExample running **cassowary** in file slurp mode where all URL paths are specified from an external file (which can also be fetched from http if specified). By default cassowary will, without the -n flag specified, make one request per path specified in the file. However with the -n flag you can also specify how many request you want cassowary to generate against those URL paths. Example:\n\n```bash\n$ ./cassowary run -u http://localhost:8000 -c 1 -f urlpath.txt\n\n# NOTE: from v0.10.0 and below file slurp mode had it's own command\n# $ ./cassowary run-file -u http://localhost:8000 -c 1 -f urlpath.txt\n\nStarting Load Test with 5 requests using 1 concurrent users\n\n[ omitted ]\n\n\n$ ./cassowary run -u http://localhost:8000 -c 10 -n 100 -f urlpath.txt\n\nStarting Load Test with 100 requests using 10 concurrent users\n\n 100% |â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| [0s:0s]            599.467161ms\n\n\n TCP Connect.....................: Avg/mean=1.80ms \tMedian=2.00ms\tp(95)=3ms\n Server Processing...............: Avg/mean=0.90ms \tMedian=0.00ms\tp(95)=3ms\n Content Transfer................: Avg/mean=0.00ms \tMedian=0.00ms\tp(95)=0ms\n\nSummary:\n Total Req.......................: 3925\n Failed Req......................: 0\n DNS Lookup......................: 2.00ms\n Req/s...........................: 6547.48\n```\n\n### Exporting Metrics to File  \nExample exporting **cassowary** json metrics to a file:\n\n```bash\n$ ./cassowary run --json-metrics --json-metrics-file=metrics.json -u http://localhost:8000 -c 125 -n 100000\n\nStarting Load Test with 100000 requests using 125 concurrent users\n\n 100% |â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| [0s:0s]            984.9862ms\n\n\n TCP Connect.....................: Avg/mean=-0.18ms     Median=0.00ms   p(95)=1ms\n Server Processing...............: Avg/mean=0.16ms      Median=0.00ms   p(95)=1ms\n Content Transfer................: Avg/mean=0.01ms      Median=0.00ms   p(95)=0ms\n\nSummary:\n Total Req.......................: 100000\n Failed Req......................: 0\n DNS Lookup......................: 2.00ms\n Req/s...........................: 101524.27\n```\n\n> If `json-metrics-file` flag is missing then the default filename is `out.json`.\n\n\n### Exporting Metrics to Prometheus\nExample exporting **cassowary** metrics to Prometheus by supplying an Prometheus PushGatway URL:\n\n```bash\n$ ./cassowary run -u http://localhost:8000 -c 125 -n 100000 -p http://pushgatway:9091\n\nStarting Load Test with 100000 requests using 125 concurrent users\n\n[ omitted for brevity ]\n\n```\n\n### Exporting Metrics to Cloudwatch\n**Cassowary** can export metrics to AWS Cloudwatch just by adding the *--cloudwatch* flag without a value. Take note that you will need to tell Cassoway which AWS Region you want to use. The easiest way is using an environment variable as shown below:\n\n```bash\n$ export AWS_REGION=eu-north-1 && ./cassowary run -u http://localhost:8000 -c 125 -n 100000 --cloudwatch\n\nStarting Load Test with 100000 requests using 125 concurrent users\n\n[ omitted for brevity ]\n\n```\n\n### Histogram  \nSupply the *--histogram* flag without a value to let cassowary compute and output a histogram in png format (hist.png in current dir) for the total duration of the requests in ms. Example: \n\n<img src=\"https://i.imgur.com/VLEsVOY.png\" width=\"300\" height=\"300\" />\n\n### Boxplot  \nSupply the *--boxplot* flag without a value to tell cassowary to generate a boxplot visualization in png format (boxplot.png in current dir) for the total duration of the requests in ms\n\n### Load Test with POST Data  \nExample hitting a POST endpoint where POST json data is defined in a file:\n\n```bash\n$ ./cassowary run -u http://localhost:8000/add-user -c 10 -n 1000 --postfile user.json\n\nStarting Load Test with 1000 requests using 10 concurrent users\n\n[ omitted for brevity ]\n\n```\n\n### Load Test with PATCH Data  \nExample hitting a PATCH endpoint where PATCH json data is defined in a file:\n\n```bash\n$ ./cassowary run -u http://localhost:8000/add-user -c 5 -n 200 --patchfile user.json\n\nStarting Load Test with 200 requests using 5 concurrent users\n\n[ omitted for brevity ]\n\n```\n\n### Specifying a Duration for the Load Test  \nExample specifying a *duration* for your load test, in the command below we specify that we want send 100 requests over a duration of 30 seconds:\n\n```bash\n$ ./cassowary run -u http://localhost:8000 -n 100 -d 30\n\nStarting Load Test with 100 requests using 1 concurrent users\n\n[ omitted for brevity ]\n\n```\n\n### Adding HTTP Headers  \nExample adding an HTTP header when running **cassowary**\n\n```bash\n$ ./cassowary run -u http://localhost:8000 -c 10 -n 1000 -H 'Host: www.example.com'\n\nStarting Load Test with 1000 requests using 10 concurrent users\n\n[ omitted for brevity ]\n\n```\n\n### Disabling HTTP keep-alive  \nExample disabling http keep-alive (by default keep-alive are enabled):\n\n```bash\n$ ./cassowary run -u http://localhost:8000 -c 10 -n 1000 --disable-keep-alive\n\nStarting Load Test with 1000 requests using 10 concurrent users\n\n[ omitted for brevity ]\n\n```\n\n### Specifying ca certificate\nExample specifying ca certificate\n\n```bash\n$ ./cassowary run -u http://localhost:8000 -c 10 -n 1000 --ca /path/to/ca.pem\n\nStarting Load Test with 1000 requests using 10 concurrent users\n\n[ omitted for brevity ]\n\n```\n\n### x509 Authentication\nExample specifying client authentication for mTLS\n\n```bash\n$ ./cassowary run -u https://localhost:8443 -c 10 -n 1000 --cert /path/to/client.pem --key /path/to/client-key.pem --ca /path/to/ca.pem\n\nStarting Load Test with 1000 requests using 10 concurrent users\n\n[ omitted for brevity ]\n\n```\n\n### Distributed Load Testing  \nYou can run cassowary in a distributed way if you need to scale up the load testing on more than one machine. Simplest way to do that is having access to a Kubernetes cluster. Use the batch type in Kubernetes and in the *spec.paralellism* key you can specify how many instances of cassowary you want to run simultaneously:\n\n```yaml\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: cassowary\nspec:\n  parallelism: 10\n  template:\n    spec:\n      containers:\n      - command: [\"-u\", \"http://my-microservice.com:8000\", \"-c\", \"1\", \"-n\", \"10\"]\n        image: rogerw/cassowary:v0.14.1\n        name: cassowary\n      restartPolicy: Never\n```\n\nJust apply this yaml like so:\n\n```bash\n$ kubectl apply -f cassowary.yaml\n```\n\n\nImporting cassowary as a module/library\n--------\n\nCassowary can be imported and used as a module in your Go app. Start by fetching the dependency by using go mod:\n\n```bash\n$ go mod init test && go get github.com/rogerwelin/cassowary/pkg/client\n```\n\nAnd below show a simple example on how to trigger a load test from your code and printing the results:\n\n```go\npackage main\n\nimport (\n        \"encoding/json\"\n\t\"fmt\"\n\n\t\"github.com/rogerwelin/cassowary/pkg/client\"\n)\n\nfunc main() {\n\tcass := &client.Cassowary{\n\t\tBaseURL:               \"http://www.example.com\",\n\t\tConcurrencyLevel:      1,\n\t\tRequests:              10,\n\t\tDisableTerminalOutput: true,\n\t}\n\tmetrics, err := cass.Coordinate()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n        // print results\n\tfmt.Printf(\"%+v\\n\", metrics)\n\n        // or print as json\n\tjsonMetrics, err := json.Marshal(metrics)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Println(string(jsonMetrics))\n}\n```\n\nMore library examples [can be found here](docs/LIBRARY.md)\n\n\nVersioning\n--------\n\nCassowary follows semantic versioning. The public library (pkg/client) may break backwards compatibility until it hits a stable v1.0.0 release.\n\nContributing\n--------\n\nContributions are welcome! To request a feature create a new issue with the label `feature-request`. Find a bug? Please add an issue with the label `bugs`. Pull requests are also welcomed but please add an issue on the requested feature first (unless it's a simple bug fix or readme change)"
}
