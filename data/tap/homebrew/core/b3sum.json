{
  "name": "b3sum",
  "full_name": "b3sum",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "BLAKE3 cryptographic hash function",
  "license": "CC0-1.0",
  "homepage": "https://github.com/BLAKE3-team/BLAKE3",
  "versions": {
    "stable": "1.4.1",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/BLAKE3-team/BLAKE3/archive/1.4.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "33020ac83a8169b2e847cc6fb1dd38806ffab6efe79fe6c320e322154a3bea2c"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/b3sum/blobs/sha256:73c42303e167e66e27ab4acf63dcf3ef8b1ae0f08bbdd7352862c269acd685d3",
          "sha256": "73c42303e167e66e27ab4acf63dcf3ef8b1ae0f08bbdd7352862c269acd685d3"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/b3sum/blobs/sha256:ff332414d8dab7392ddb34b1a1650082532161116f158b05c242f74414d3a1be",
          "sha256": "ff332414d8dab7392ddb34b1a1650082532161116f158b05c242f74414d3a1be"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/b3sum/blobs/sha256:1503b08de6a5fb0aacd1e43ada99c3f629e00d897688781e3d84289fd6289f66",
          "sha256": "1503b08de6a5fb0aacd1e43ada99c3f629e00d897688781e3d84289fd6289f66"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/b3sum/blobs/sha256:8d4395810c8b2b981c87d005c446968282ec74961db9fae2193f8ccb10c6df26",
          "sha256": "8d4395810c8b2b981c87d005c446968282ec74961db9fae2193f8ccb10c6df26"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/b3sum/blobs/sha256:f7b1df0cfc20fa00a9aa5839997d64e876bfff3f38995e2b14c8b296624eaf37",
          "sha256": "f7b1df0cfc20fa00a9aa5839997d64e876bfff3f38995e2b14c8b296624eaf37"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/b3sum/blobs/sha256:a7f7799760a3d5f25b378e12e1869c90ea9b3d37e72a5708a556fade40719162",
          "sha256": "a7f7799760a3d5f25b378e12e1869c90ea9b3d37e72a5708a556fade40719162"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/b3sum/blobs/sha256:07eb8084d05b3a054f72fb89215f1ecc15856111e80700866922bf0a350dd819",
          "sha256": "07eb8084d05b3a054f72fb89215f1ecc15856111e80700866922bf0a350dd819"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "2706c66e8def3eeba4d9bf1adf66221c8ad70701",
  "ruby_source_path": "Formula/b3sum.rb",
  "ruby_source_checksum": {
    "sha256": "8e453e7c294c160c234209c0a42f319d5094d9403c89d3ce673908d0ed685ae4"
  },
  "date_added": "2020-01-31T14:34:06-05:00",
  "readme": "# <a href=\"#\"><img src=\"media/BLAKE3.svg\" alt=\"BLAKE3\" height=50></a>\n\nBLAKE3 is a cryptographic hash function that is:\n\n- **Much faster** than MD5, SHA-1, SHA-2, SHA-3, and BLAKE2.\n- **Secure**, unlike MD5 and SHA-1. And secure against length extension,\n  unlike SHA-2.\n- **Highly parallelizable** across any number of threads and SIMD lanes,\n  because it's a Merkle tree on the inside.\n- Capable of **verified streaming** and **incremental updates**, again\n  because it's a Merkle tree.\n- A **PRF**, **MAC**, **KDF**, and **XOF**, as well as a regular hash.\n- **One algorithm with no variants**, which is fast on x86-64 and also\n  on smaller architectures.\n\nThe [chart below](https://github.com/BLAKE3-team/BLAKE3-specs/blob/master/benchmarks/bar_chart.py)\nis an example benchmark of 16 KiB inputs on a Cascade Lake-SP 8275CL server CPU\nfrom 2019. For more detailed benchmarks, see the\n[BLAKE3 paper](https://github.com/BLAKE3-team/BLAKE3-specs/blob/master/blake3.pdf).\n\n<p align=\"center\">\n<img src=\"media/speed.svg\" alt=\"performance graph\">\n</p>\n\nBLAKE3 is based on an optimized instance of the established hash\nfunction [BLAKE2](https://blake2.net) and on the [original Bao tree\nmode](https://github.com/oconnor663/bao/blob/master/docs/spec_0.9.1.md).\nThe specifications and design rationale are available in the [BLAKE3\npaper](https://github.com/BLAKE3-team/BLAKE3-specs/blob/master/blake3.pdf).\nThe default output size is 256 bits. The current version of\n[Bao](https://github.com/oconnor663/bao) implements verified streaming\nwith BLAKE3.\n\nThis repository is the official implementation of BLAKE3. It includes:\n\n* The [`blake3`](https://crates.io/crates/blake3) Rust crate, which\n  includes optimized implementations for SSE2, SSE4.1, AVX2, AVX-512,\n  and NEON, with automatic runtime CPU feature detection on x86. The\n  `rayon` feature provides multithreading.\n\n* The [`b3sum`](https://crates.io/crates/b3sum) Rust crate, which\n  provides a command line interface. It uses multithreading by default,\n  making it an order of magnitude faster than e.g. `sha256sum` on\n  typical desktop hardware.\n\n* The [C implementation](c), which like the Rust implementation includes\n  SIMD code and runtime CPU feature detection on x86. Unlike the Rust\n  implementation, it's [not currently multithreaded](c#multithreading). See\n  [`c/README.md`](c/README.md).\n\n* The [Rust reference implementation](reference_impl/reference_impl.rs),\n  which is discussed in Section 5.1 of the [BLAKE3\n  paper](https://github.com/BLAKE3-team/BLAKE3-specs/blob/master/blake3.pdf).\n  This implementation is much smaller and simpler than the optimized\n  ones above. If you want to see how BLAKE3 works, or you're writing a\n  port that doesn't need multithreading or SIMD optimizations, start\n  here. Ports of the reference implementation to other languages are\n  hosted in separate repositories\n  ([C](https://github.com/oconnor663/blake3_reference_impl_c),\n  [Python](https://github.com/oconnor663/pure_python_blake3)).\n\n* A [set of test\n  vectors](https://github.com/BLAKE3-team/BLAKE3/blob/master/test_vectors/test_vectors.json)\n  that covers extended outputs, all three modes, and a variety of input\n  lengths.\n\n* [![Actions Status](https://github.com/BLAKE3-team/BLAKE3/workflows/tests/badge.svg)](https://github.com/BLAKE3-team/BLAKE3/actions)\n\nBLAKE3 was designed by:\n\n* [@oconnor663 ](https://github.com/oconnor663) (Jack O'Connor)\n* [@sneves](https://github.com/sneves) (Samuel Neves)\n* [@veorq](https://github.com/veorq) (Jean-Philippe Aumasson)\n* [@zookozcash](https://github.com/zookozcash) (Zooko)\n\nThe development of BLAKE3 was sponsored by [Electric Coin Company](https://electriccoin.co).\n\n*NOTE: BLAKE3 is not a password hashing algorithm, because it's\ndesigned to be fast, whereas password hashing should not be fast. If you\nhash passwords to store the hashes or if you derive keys from passwords,\nwe recommend [Argon2](https://github.com/P-H-C/phc-winner-argon2).*\n\n## Usage\n\n### The `b3sum` utility\n\nThe `b3sum` command line utility prints the BLAKE3 hashes of files or of\nstandard input. Prebuilt binaries are available for Linux, Windows, and\nmacOS (requiring the [unidentified developer\nworkaround](https://support.apple.com/guide/mac-help/open-a-mac-app-from-an-unidentified-developer-mh40616/mac))\non the [releases page](https://github.com/BLAKE3-team/BLAKE3/releases).\nIf you've [installed Rust and\nCargo](https://doc.rust-lang.org/cargo/getting-started/installation.html),\nyou can also build `b3sum` yourself with:\n\n```bash\ncargo install b3sum\n```\n\nIf `rustup` didn't configure your `PATH` for you, you might need to go\nlooking for the installed binary in e.g. `~/.cargo/bin`. You can test\nout how fast BLAKE3 is on your machine by creating a big file and\nhashing it, for example:\n\n```bash\n# Create a 1 GB file.\nhead -c 1000000000 /dev/zero > /tmp/bigfile\n# Hash it with SHA-256.\ntime openssl sha256 /tmp/bigfile\n# Hash it with BLAKE3.\ntime b3sum /tmp/bigfile\n```\n\n### The `blake3` crate [![docs.rs](https://docs.rs/blake3/badge.svg)](https://docs.rs/blake3)\n\nTo use BLAKE3 from Rust code, add a dependency on the `blake3` crate to\nyour `Cargo.toml`. Here's an example of hashing some input bytes:\n\n```rust\n// Hash an input all at once.\nlet hash1 = blake3::hash(b\"foobarbaz\");\n\n// Hash an input incrementally.\nlet mut hasher = blake3::Hasher::new();\nhasher.update(b\"foo\");\nhasher.update(b\"bar\");\nhasher.update(b\"baz\");\nlet hash2 = hasher.finalize();\nassert_eq!(hash1, hash2);\n\n// Extended output. OutputReader also implements Read and Seek.\nlet mut output = [0; 1000];\nlet mut output_reader = hasher.finalize_xof();\noutput_reader.fill(&mut output);\nassert_eq!(hash1, output[..32]);\n\n// Print a hash as hex.\nprintln!(\"{}\", hash1);\n```\n\nBesides `hash`, BLAKE3 provides two other modes, `keyed_hash` and\n`derive_key`. The `keyed_hash` mode takes a 256-bit key:\n\n```rust\n// MAC an input all at once.\nlet example_key = [42u8; 32];\nlet mac1 = blake3::keyed_hash(&example_key, b\"example input\");\n\n// MAC incrementally.\nlet mut hasher = blake3::Hasher::new_keyed(&example_key);\nhasher.update(b\"example input\");\nlet mac2 = hasher.finalize();\nassert_eq!(mac1, mac2);\n```\n\nThe `derive_key` mode takes a context string and some key material (not a\npassword). The context string should be hardcoded, globally unique, and\napplication-specific. A good default format for the context string is\n`\"[application] [commit timestamp] [purpose]\"`:\n\n```rust\n// Derive a couple of subkeys for different purposes.\nconst EMAIL_CONTEXT: &str = \"BLAKE3 example 2020-01-07 17:10:44 email key\";\nconst API_CONTEXT: &str = \"BLAKE3 example 2020-01-07 17:11:21 API key\";\nlet input_key_material = b\"usually at least 32 random bytes, not a password\";\nlet email_key = blake3::derive_key(EMAIL_CONTEXT, input_key_material);\nlet api_key = blake3::derive_key(API_CONTEXT, input_key_material);\nassert_ne!(email_key, api_key);\n```\n\n### The C implementation\n\nSee [`c/README.md`](c/README.md).\n\n### Other implementations\n\nWe post links to third-party bindings and implementations on the\n[@BLAKE3team Twitter account](https://twitter.com/BLAKE3team) whenever\nwe hear about them. Some highlights include [an optimized Go\nimplementation](https://github.com/zeebo/blake3), [Wasm bindings for\nNode.js and browsers](https://github.com/connor4312/blake3), [binary\nwheels for Python](https://github.com/oconnor663/blake3-py), [.NET\nbindings](https://github.com/xoofx/Blake3.NET), and [JNI\nbindings](https://github.com/sken77/BLAKE3jni).\n\n## Contributing\n\nPlease see [CONTRIBUTING.md](CONTRIBUTING.md).\n\n## Intellectual property\n\nThe Rust code is copyright Jack O'Connor, 2019-2020. The C code is\ncopyright Samuel Neves and Jack O'Connor, 2019-2020. The assembly code\nis copyright Samuel Neves, 2019-2020.\n\nThis work is released into the public domain with CC0 1.0.\nAlternatively, it is licensed under the Apache License 2.0.\n\n## Adoption & deployment\n\nHere's a (non-exhaustive) list of protocols and software that use BLAKE3:\n\n* [Alephium](https://github.com/alephium/alephium/blob/master/crypto/src/main/scala/org/alephium/crypto/Blake3.scala)\n* [Chia](https://github.com/Chia-Network/chia-blockchain/blob/main/CHANGELOG.md#10beta8-aka-beta-18---2020-07-16)\n* [IPFS](https://github.com/ipfs/go-verifcid/issues/13)\n* [Farcaster](https://www.farcaster.xyz/)\n* [LLVM](https://reviews.llvm.org/D121510)\n* [Nym](https://github.com/nymtech/nym/blob/59056a22c5e6b01a38da2124662bd1fa3c8abef2/common/nymsphinx/params/src/lib.rs#L5)\n* [OpenZFS](https://github.com/openzfs/zfs/)\n* [Redox](https://www.redox-os.org/news/pkgar-introduction/)\n* [Saito](https://saito.tech/)\n* [Skale](https://github.com/skalenetwork/skale-consensus/pull/284)\n* [Solana](https://docs.rs/solana-program/1.9.5/solana_program/blake3/index.html)\n* [Wasmer](https://github.com/wasmerio/wasmer/blob/4f935a8c162bf604df223003e434e4f7ca253688/lib/cache/src/hash.rs#L21)\n\n\n## Miscellany\n\n- [@veorq](https://github.com/veorq) and\n  [@oconnor663](https://github.com/oconnor663) did [a podcast\n  interview](https://www.cryptography.fm/3) about designing BLAKE3."
}
