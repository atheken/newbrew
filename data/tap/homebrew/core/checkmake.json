{
  "name": "checkmake",
  "full_name": "checkmake",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Linter/analyzer for Makefiles",
  "license": "MIT",
  "homepage": "https://github.com/mrtazz/checkmake",
  "versions": {
    "stable": "0.2.2",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/mrtazz/checkmake/archive/refs/tags/0.2.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "4e5914f1ee3e5f384d605406f30799bf556a06b9785d5b0e555fd88b43daf19c"
    },
    "head": {
      "url": "https://github.com/mrtazz/checkmake.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/checkmake/blobs/sha256:d48a73b85de9be214bafa9ab4cf9712cf1934f898d3fc7b3b6160507a788e3b7",
          "sha256": "d48a73b85de9be214bafa9ab4cf9712cf1934f898d3fc7b3b6160507a788e3b7"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/checkmake/blobs/sha256:4ddd0a9fa6c9c4e9ba3cd4b04986f6f34f55e3787bd6c6e9dde0dee30a577937",
          "sha256": "4ddd0a9fa6c9c4e9ba3cd4b04986f6f34f55e3787bd6c6e9dde0dee30a577937"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/checkmake/blobs/sha256:56a6b97b1e5c3dc5b6a589e0d52b526eb2a0529dfce6a9b8a4a85b93a9bd9da3",
          "sha256": "56a6b97b1e5c3dc5b6a589e0d52b526eb2a0529dfce6a9b8a4a85b93a9bd9da3"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/checkmake/blobs/sha256:836d536fe0255fc744a2fa630572e54477f8e59ab19006ddfebb09be51fd14c0",
          "sha256": "836d536fe0255fc744a2fa630572e54477f8e59ab19006ddfebb09be51fd14c0"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/checkmake/blobs/sha256:16692c95f5e36286cfeedfe914b239200d428b7ed64c1ae61c931c1568dcdbdd",
          "sha256": "16692c95f5e36286cfeedfe914b239200d428b7ed64c1ae61c931c1568dcdbdd"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/checkmake/blobs/sha256:e8f88660a76082b44e64c8485238aaf46d5e18575ea11ce47c93a2466af24bcd",
          "sha256": "e8f88660a76082b44e64c8485238aaf46d5e18575ea11ce47c93a2466af24bcd"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/checkmake/blobs/sha256:920aea0127e9224ec538e4c4f1f1e4fafec0f6e10610687e60c20d053cc02f0e",
          "sha256": "920aea0127e9224ec538e4c4f1f1e4fafec0f6e10610687e60c20d053cc02f0e"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go",
    "pandoc"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/checkmake.rb",
  "ruby_source_checksum": {
    "sha256": "fb53218235aacdfbf1eea6bee617117930017342b9eb7c47e6d8103ca0452b59"
  },
  "date_added": "2022-02-24T07:22:01+00:00",
  "readme": "# checkmake\n\n[![Build Status](https://github.com/mrtazz/checkmake/actions/workflows/ci.yml/badge.svg?branch=main)](https://github.com/mrtazz/checkmake/actions)\n[![Coverage Status](https://coveralls.io/repos/github/mrtazz/checkmake/badge.svg?branch=master)](https://coveralls.io/github/mrtazz/checkmake?branch=master)\n[![Code Climate](https://codeclimate.com/github/mrtazz/checkmake/badges/gpa.svg)](https://codeclimate.com/github/mrtazz/checkmake)\n[![Packagecloud](https://img.shields.io/badge/packagecloud-available-brightgreen.svg)](https://packagecloud.io/mrtazz/checkmake)\n[![MIT license](https://img.shields.io/badge/license-MIT-blue.svg)](http://opensource.org/licenses/MIT)\n\n## Overview\ncheckmake is an experimental tool for linting and checking Makefiles. It may\nnot do what you want it to.\n\n## Usage\n\n```\n% checkmake Makefile\n\n% checkmake Makefile foo.mk bar.mk baz.mk\n\n% checkmake --help\ncheckmake.\n\nUsage:\ncheckmake [--debug|--config=<configPath>] <makefile>...\ncheckmake -h | --help\ncheckmake --version\n\nOptions:\n-h --help               Show this screen.\n--version               Show version.\n--debug                 Enable debug mode\n--config=<configPath>   Configuration file to read\n--list-rules            List registered rules\n\n% checkmake fixtures/missing_phony.make\n\n      RULE                 DESCRIPTION             LINE NUMBER\n\n  minphony        Missing required phony target    0\n                  \"all\"\n  minphony        Missing required phony target    0\n                  \"test\"\n  phonydeclared   Target \"all\" should be           18\n                  declared PHONY.\n\n```\n\n## Docker usage\nBuild the image, or pull it:\n```sh\ndocker build --build-arg BUILDER_NAME='Your Name' --build-arg BUILDER_EMAIL=your.name@example.com . -t checker\n```\n\nThen run it with your Makefile attached, below is an example of it assuming the Makefile is in your current working directory:\n```sh\ndocker run -v \"$PWD\"/Makefile:/Makefile checker\n```\n\n## `pre-commit` usage\n\nThis repo includes a `pre-commit` hook, which you may choose to use in your own\nrepos. Simply add a `.pre-commit-config.yaml` to your repo's top-level directory\n\n```yaml\nrepos:\n-   repo: https://github.com/mrtazz/checkmake.git\n    # Or another commit hash or version\n    rev: 0.2.2\n    hooks:\n    # Use this hook to let pre-commit build checkmake in its sandbox\n    -   id: checkmake\n    # OR Use this hook to use a pre-installed checkmark executable\n    # -   id: checkmake-system\n```\n\nThere are two hooks available:\n\n- `checkmake` (Recommended)\n\n   pre-commit will set up a Go environment from scratch to compile and run checkmake.\n   See the [pre-commit `golang` plugin docs](https://pre-commit.com/#golang) for more information.\n\n- `checkmake-system`\n\n   pre-commit will look for `checkmake` on your `PATH`.\n   This hook requires you to install `checkmake` separately, e.g. with your package manager or [a prebuilt binary release](https://github.com/mrtazz/checkmake/releases).\n   Only recommended if it's permissible to require all repository users install `checkmake` manually.\n\nThen, run `pre-commit` as usual as a part of `git commit` or explicitly, for example:\n\n```sh\npre-commit run --all-files\n```\n\n### pre-commit in GitHub Actions\n\nYou may also choose to run this as a GitHub Actions workflow. To do this, add a\n`.github/workflows/pre-commit.yml` workflow to your repo:\n\n```yaml\nname: pre-commit\n\non:\n  pull_request:\n    branches:\n      - master\n      - main\n    paths:\n      - '.pre-commit-config.yaml'\n      - '.pre-commit-hooks.yaml'\n      - 'Makefile'\n      - 'makefile'\n      - 'GNUmakefile'\n      - '**.mk'\n      - '**.make'\n  push:\n    paths:\n      - '.pre-commit-config.yaml'\n      - '.pre-commit-hooks.yaml'\n      - 'Makefile'\n      - 'makefile'\n      - 'GNUmakefile'\n      - '**.mk'\n      - '**.make'\n\njobs:\n  pre-commit:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - uses: actions/setup-python@v3\n    - name: Set up Go 1.17\n      uses: actions/setup-go@v2\n      with:\n        go-version: 1.17\n      id: go\n    - uses: pre-commit/action@v2.0.3\n```\n\n## Installation\n\n### Requirements\nThe [pandoc](https://pandoc.org/) document converter utility is required to run checkmate. You can find out if you have it via `which pandoc`. [Install pandoc](https://pandoc.org/installing.html) if the command was not found.\n\n## With Go\n\nWith `go` 1.16 or higher:\n\n```sh\ngo install github.com/mrtazz/checkmake/cmd/checkmake@latest\ncheckmake Makefile\n```\n\nOr alternatively, run it directly:\n\n```sh\ngo run github.com/mrtazz/checkmake/cmd/checkmake@latest Makefile\n```\n\n### Packages\nThere are packages for linux up [on packagecloud.io](https://packagecloud.io/mrtazz/checkmake) or build it yourself with the steps below.\n\n### Build\nTo build checkmake you will need to have [golang](https://golang.org/) installed. Once you have Go installed, you can simply clone the repo and build the binary and man page yourself with the following commands.\n\n```sh\ngit clone https://github.com/mrtazz/checkmake\ncd checkmake\nmake\n```\n\n## Use in CI\n\n### MegaLinter\n\ncheckmake is [natively embedded](https://oxsecurity.github.io/megalinter/latest/descriptors/makefile_checkmake/) within [MegaLinter](https://github.com/oxsecurity/megalinter)\n\nTo install it, run `npx mega-linter-runner --install` (requires Node.js)\n\n## Inspiration\nThis is totally inspired by an idea by [Dan\nBuch](https://twitter.com/meatballhat/status/768112351924985856)."
}
