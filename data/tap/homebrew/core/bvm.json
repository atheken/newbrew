{
  "name": "bvm",
  "full_name": "bvm",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Version manager for all binaries",
  "license": "MIT",
  "homepage": "https://github.com/bvm/bvm",
  "versions": {
    "stable": "0.4.2",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/bvm/bvm/archive/0.4.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "d60c2e49bdac1facd9c17e21e3dac52767ead2fd50b1a94f484fb6d180b0acbd"
    },
    "head": {
      "url": "https://github.com/bvm/bvm.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bvm/blobs/sha256:693a77a710934aefc58c70c85b463347e029e23cac7e497bbd4710d56331421f",
          "sha256": "693a77a710934aefc58c70c85b463347e029e23cac7e497bbd4710d56331421f"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bvm/blobs/sha256:35791169d51be8b50901c4380b330595af3c4ff02495c90a412dbdffc9ed0785",
          "sha256": "35791169d51be8b50901c4380b330595af3c4ff02495c90a412dbdffc9ed0785"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bvm/blobs/sha256:7618a44251a99f34f374c7e2007d189d277b83a215fb076b8c2cef8acf2d08c1",
          "sha256": "7618a44251a99f34f374c7e2007d189d277b83a215fb076b8c2cef8acf2d08c1"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bvm/blobs/sha256:110898dd99e162b59e0065c5ba6bcd0890c9dad376ce12e0657ebbcc6366b4bc",
          "sha256": "110898dd99e162b59e0065c5ba6bcd0890c9dad376ce12e0657ebbcc6366b4bc"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bvm/blobs/sha256:2c52d9ee186a37ed791283aa03ce80f9346d26ab4fca7ede7d9c29137a739d9f",
          "sha256": "2c52d9ee186a37ed791283aa03ce80f9346d26ab4fca7ede7d9c29137a739d9f"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bvm/blobs/sha256:d21190edd6a8ff77a8ae0174b016a16952d25e20f78910ae0c54d156067c1155",
          "sha256": "d21190edd6a8ff77a8ae0174b016a16952d25e20f78910ae0c54d156067c1155"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bvm/blobs/sha256:3c3ee94eebad836efb69ffadd95785c5991602451c08ab9cf396a44c9536bf21",
          "sha256": "3c3ee94eebad836efb69ffadd95785c5991602451c08ab9cf396a44c9536bf21"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bvm/blobs/sha256:a19b280d30c8ab515c180d095a592d0a4ddcee2a69737d439bb67320a002c10f",
          "sha256": "a19b280d30c8ab515c180d095a592d0a4ddcee2a69737d439bb67320a002c10f"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": true,
  "deprecation_date": "2023-02-16",
  "deprecation_reason": "repo_archived",
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/bvm.rb",
  "ruby_source_checksum": {
    "sha256": "9d39b24fa3fa71b4eb670eacb6d33ed14eaf702548223d202ff0621af32526a0"
  },
  "date_added": "2022-03-14T02:43:46+00:00",
  "readme": "# NOT MAINTAINED - bvm - Binary Version Manager\n\nA version manager for all binaries.\n\nNOTICE: This is no longer maintained. Although I think it's a good idea, I ran into too much trouble with tools making too many assumptions and not handling things properly for this to be workable. Additionally, there are some major limitations with batch scripting on Windows that I couldn't figure out that leads to some edge cases in cmd. I would highly recommend to NOT USE THIS.\n\n## Goals\n\n1. Replace binary specific version manager tools.\n2. Provide an easy way for binary authors to distribute and have their users manage versions.\n3. Cross platform - Provide a good experience in as many shells as possible (**Does not require WSL on Windows**).\n4. Backwards compatibility (once hitting 1.0).\n5. Distributed—use urls and paths.\n   - Allows for easily distributing approved binaries within an organization.\n   - Easy for binary authors to distribute their applications as there is no approval delay.\n6. Seamless version selection based on current working directory.\n7. Allow working with binaries already on the path.\n8. Support completely different application binaries with the same command name.\n\n## Install\n\nInstall by running a script based on your environment:\n\n- Shell (Mac, Linux, WSL): `curl -fsSL https://bvm.land/install.sh | sh`\n- Cmd, Powershell (Windows):\n  - [Installer](https://github.com/dsherret/bvm/releases/latest/download/bvm-x86_64-pc-windows-msvc-installer.exe)\n  - Or via powershell: `iwr https://bvm.land/install.ps1 -useb | iex`\n\n## CI\n\n- [GitHub action](https://github.com/bvm/gh-action)\n- More to come...\n\n## Global Commands\n\n### `bvm install <url>`\n\nInstalls a binary at the specified manifest file.\n\n```\n# Examples\n\nbvm install https://bvm.land/deno/1.3.2.json\n\n# optionally specify a checksum\nbvm install https://bvm.land/deno/1.3.2.json@6444d03bbb4e8b0a7966f406ab0a6d190581c205291d0e082bc9a57dd8498e97\n\n# if a previous installation is on the path, use this one instead\nbvm install --use https://bvm.land/deno/1.3.1.json\n```\n\n- Provide the `--use` flag to force using this binary on the path (happens automatically if nothing is on the path).\n- Provide the `--force` flag to force an install even if already installed.\n\n### `bvm uninstall <name-selector> <version>`\n\nUninstalls the specified binary version.\n\n```\n# Examples\nbvm uninstall deno 1.2.0\nbvm uninstall denoland/deno 1.3.2\nbvm uninstall name-stealer/deno 2.0.0\n```\n\n### `bvm list`\n\nDisplays the installed binaries.\n\nExample output:\n\n```\ndenoland/deno 1.2.0\ndenoland/deno 1.3.2\ndprint/dprint 9.0.1\nnodejs/node 14.9.0\n```\n\n### `bvm use <name-selector> <version-selector>`\n\nUses the specified binary name and version globally.\n\nThe binary and version must have been previously installed.\n\n```\n# Examples\nbvm use deno 1.3.2\nbvm use denoland/deno 1.3.2\nbvm use name-stealer/deno 2.0.0\nbvm use deno 1\nbvm use deno 1.0\nbvm use deno \"^1.1\"\nbvm use deno ~1.1.3\n```\n\n### `bvm use <name-selector> path`\n\nUses the version of the binary that's installed on the path if it exists.\n\n```\n# Example\nbvm use deno path\n```\n\n### `bvm exec <name-selector> <version-selector> [command-name] [...args]`\n\nExecutes the version of the matching binary.\n\n```\n# Examples\nbvm exec deno 1.3.1 -V\nbvm exec deno path -v\nbvm exec node \"^12.1.1\" -v\nbvm exec node 14 npm -v\nbvm exec nodejs/node ~8.2.1 -v\nbvm exec node 14 npm install -g rimraf\nbvm exec node 14 rimraf dir-to-delete\n```\n\n### `bvm clear-url-cache`\n\nClears any cached urls.\n\n## Registry commands\n\nAdding a registry allows you to more easily install copies of a binary without dealing with urls.\n\n### `bvm registry add <url>`\n\nAdds or associates the registry at the specified url to the local CLI.\n\n```\n# Examples\nbvm registry add https://bvm.land/deno/registry.json\nbvm registry add https://bvm.land/node/registry.json\n```\n\n### `bvm registry remove <url>`\n\nRemoves the registry at the specified url from the local CLI.\n\n```\n# Example\nbvm registry remove https://bvm.land/node/registry.json\n```\n\n### `bvm registry list`\n\nLists the registries saved in the CLI.\n\nExample output:\n\n```\ndenoland/deno - https://bvm.land/deno/registry.json\nnodejs/node - https://bvm.land/node/registry.json\n```\n\n### `bvm install <name-selector>`\n\nInstalls the latest non-pre-release version of the specified binary based on the CLI's registries.\n\n```\n# Examples\nbvm install deno\nbvm install --use node\n```\n\n### `bvm install <name-selector> <version-selector>`\n\nInstalls the specified binary and version based on the first matching version in the CLI's registries.\n\n```\n# Examples\nbvm install deno 1.3.3\nbvm install deno 1\nbvm install deno 1.3\nbvm install deno \"^1.3.1\"\nbvm install --use node 14.9.0\n```\n\n## Projects\n\n`bvm` allows for specifying versions of binaries to automatically use within a directory.\n\n### Setup\n\n1. Run `bvm init` in the project's root directory.\n2. Open up the created _bvm.json_ file (or optionally rename it as hidden first—`_.bvm.json`) and specify the paths to the binary manifest files.\n   ```jsonc\n   {\n     // optional commands to run on pre and post install\n     \"onPreInstall\": \"\",\n     \"onPostInstall\": \"\",\n     // list of binaries to use\n     \"binaries\": [\n       // Either specify:\n       // 1. Urls\n       \"https://bvm.land/node/14.9.0.json\",\n       // 2. Urls with a checksum to ensure the remote file doesn't change\n       \"https://bvm.land/dprint/0.9.1.json@52b473cd29888badf1620ea501afbd210373e6dec66d249019d1a284cf43380b\",\n       // 3. Objects\n       {\n         \"path\": \"https://bvm.land/deno/1.3.2.json\",\n         \"checksum\": \"6444d03bbb4e8b0a7966f406ab0a6d190581c205291d0e082bc9a57dd8498e97\", // optional for path above\n         \"version\": \"^1.3.0\" // optional, won't install specified url if user has a version installed that matches\n       }\n     ]\n   }\n   ```\n3. Run `bvm install`\n\n### Commands\n\n### `bvm init`\n\nCreates an empty `bvm.json` file in the current directory.\n\n### `bvm install`\n\nDownloads & installs the binaries in the current bvm configuration file and associates them on the path with bvm if not previously done.\n\n- Provide the `--use` flag to also use all the binaries in the configuration file on the path when outside this directory.\n- Provide the `--force` flag to force an install of everything even if already installed or has a matching version.\n\n### `bvm add [url]`\n\nAdds the specified binary at the specified url to a project's bvm configuration file based on the current directory. Installs if necessary.\n\n#### Example\n\n```\nbvm add https://bvm.land/deno/1.3.2.json\n```\n\nConfiguration file would then contain:\n\n```jsonc\n{\n  \"binaries\": [\n    {\n      \"path\": \"https://bvm.land/deno/1.3.2.json\",\n      \"checksum\": \"6444d03bbb4e8b0a7966f406ab0a6d190581c205291d0e082bc9a57dd8498e97\",\n      \"version\": \"^1.3.2\"\n    }\n  ]\n}\n```\n\n### `bvm add [binary-name or owner-name/binary-name] [version-selector]`\n\nSimilar to above with a url, but adds the specified binary from an added registry.\n\nThe version is optional.\n\n```\n# Examples\nbvm add deno 1.3.1\nbvm add deno ~1.3.1\nbvm add node\n```\n\n### `bvm use`\n\nUses all the binaries in the current configuration files globally on the path.\n\nGenerally it's not necessary to ever use this command as this happens automatically being in the current directory.\n\n## bvm.land\n\nThe website https://bvm.land is not required to use with bvm, but it provides some services that makes publishing binaries a little easier.\n\n### Redirect Service\n\nIf you publish a _bvm.json_ file as a GitHub release asset (not recommended yet, due to this being a proof of concept) then you can use `https://bvm.land` to redirect to your release.\n\n1. `https://bvm.land/<owner>/<name>/<release-tag>.json` -> `https://github.com/<owner>/<name>/releases/download/<release-tag>/bvm.json`\n2. `https://bvm.land/<name>/<release-tag>.json` -> `https://github.com/<name>/<name>/releases/download/<release-tag>/bvm.json`\n\nExample: `https://bvm.land/dprint/0.9.1.json`\n\n### Automatic registry file creation\n\nThe bvm.land server will create _registry.json_ files when requested. These files can then be used with the `bvm registry` sub command.\n\nTo cause the server to update a registry file, make a `GET` request to `https://bvm.land/refresh-registry/<owner>/<repo-name>`. After a few minutes, you should have a registry file created at either of the two endpoints depending on your repo owner and name:\n\n1. `https://bvm.land/<owner>/<name>/registry.json`\n2. `https://bvm.land/<name>/registry.json`—when `owner` is the same as `name`.\n\nThe file will be created based on any releases containing a _bvm.json_ file as a release asset as described above.\n\n#### Example GitHub Publish Workflow\n\nIn _.github/workflows/publish.yml_:\n\n```\nname: Publish\n\non:\n  release:\n    types: [published]\njobs:\n  publish:\n    runs-on: ubuntu-latest\n    steps:\n    - name: Update registry.json file at https://bvm.land/dprint/registry.json\n      run: curl -s -o /dev/null -v https://bvm.land/refresh-registry/dprint/dprint\n```\n\nThis will cause the _registry.json_ file on bvm.land to be updated after clicking \"publish\" on a GitHub release.\n\n## Binary manifest file\n\nAt the moment, it looks like this:\n\n```jsonc\n{\n  \"schemaVersion\": 1,\n  \"name\": \"deno\",\n  \"owner\": \"denoland\",\n  \"description\": \"A secure JavaScript and TypeScript runtime.\",\n  \"version\": \"1.4.4\",\n  \"windows-x86_64\": {\n    \"path\": \"https://github.com/denoland/deno/releases/download/v1.4.4/deno-x86_64-pc-windows-msvc.zip\",\n    \"type\": \"zip\",\n    \"checksum\": \"3013f3dd2f96a6748461de2221e102f58f6b6f8dc392ca89a0968b05a79e1325\",\n    \"commands\": [\n      {\n        \"name\": \"deno\",\n        \"path\": \"bin/deno.exe\"\n      }\n    ],\n    \"outputDir\": \"bin\",\n    \"environment\": {\n      \"path\": [\n        // Any local paths that should be added to the environment\n        // when this is used or executed.\n      ],\n      \"variables\": {\n        \"DENO_INSTALL_ROOT\": \"%BVM_CURRENT_BINARY_DIR%\"\n      }\n    },\n    \"onPreInstall\": \"\", // command to run before installation\n    \"onPostInstall\": \"\" // command to run after installation\n  },\n  \"linux-x86_64\": {\n    \"path\": \"https://github.com/denoland/deno/releases/download/v1.4.4/deno-x86_64-unknown-linux-gnu.zip\",\n    \"type\": \"zip\",\n    \"checksum\": \"ce2ad2e51b3b49a4d7844fa26092437eaaa89e90e2df4bf33859b9fb8c89be9c\",\n    \"commands\": [\n      {\n        \"name\": \"deno\",\n        \"path\": \"bin/deno\"\n      }\n    ],\n    \"outputDir\": \"bin\",\n    \"environment\": {\n      \"variables\": {\n        \"DENO_INSTALL_ROOT\": \"$BVM_CURRENT_BINARY_DIR\"\n      }\n    }\n  },\n  \"darwin-x86_64\": {\n    \"path\": \"https://github.com/denoland/deno/releases/download/v1.4.4/deno-x86_64-apple-darwin.zip\",\n    \"type\": \"zip\",\n    \"checksum\": \"fd8997040dcfc6ef48ef4b05c88b1a8b30362c03ebb552a23a7888bcc60b77a0\",\n    \"commands\": [\n      {\n        \"name\": \"deno\",\n        \"path\": \"bin/deno\"\n      }\n    ],\n    \"outputDir\": \"bin\",\n    \"environment\": {\n      \"variables\": {\n        \"DENO_INSTALL_ROOT\": \"$BVM_CURRENT_BINARY_DIR\"\n      }\n    }\n  }\n}\n```\n\nSupported types: `zip`, `exe`, `tar.gz` (will add more later)\n\nOther examples:\n\n- Multiple commands: [https://bvm.land/node/14.9.0.json](https://bvm.land/node/14.9.0.json)"
}
