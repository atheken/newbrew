{
  "name": "git-number",
  "full_name": "git-number",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Use numbers for dealing with files in git",
  "license": null,
  "homepage": "https://github.com/holygeek/git-number",
  "versions": {
    "stable": "1.0.1",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/holygeek/git-number/archive/1.0.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "1b9e691bd2c16321a8b83b65f2393af1707ece77e05dab73b14b04f51e9f9a56"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-number/blobs/sha256:f357699b108c2e521721c7a8a93ee188a526b47a5f1af7841cf005d2d1008f4f",
          "sha256": "f357699b108c2e521721c7a8a93ee188a526b47a5f1af7841cf005d2d1008f4f"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-number/blobs/sha256:ca7a48d9827be6cc0d625891e25b7b7b7474d9c33a276955ab3f0eb14b8cb21b",
          "sha256": "ca7a48d9827be6cc0d625891e25b7b7b7474d9c33a276955ab3f0eb14b8cb21b"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-number/blobs/sha256:662840b36a99f95902aee618faed6274d2cf9c6620b9c01855377d85d838eaad",
          "sha256": "662840b36a99f95902aee618faed6274d2cf9c6620b9c01855377d85d838eaad"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-number/blobs/sha256:2fc24b4bb5404f85fb6c359ac9b8c969846953176d8a01176c4e6ddba3067bc9",
          "sha256": "2fc24b4bb5404f85fb6c359ac9b8c969846953176d8a01176c4e6ddba3067bc9"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-number/blobs/sha256:d71548120a8d5d9db4b9b9ae71be947303c6a415e35380d0d8e36551765b827f",
          "sha256": "d71548120a8d5d9db4b9b9ae71be947303c6a415e35380d0d8e36551765b827f"
        },
        "sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-number/blobs/sha256:d71548120a8d5d9db4b9b9ae71be947303c6a415e35380d0d8e36551765b827f",
          "sha256": "d71548120a8d5d9db4b9b9ae71be947303c6a415e35380d0d8e36551765b827f"
        },
        "el_capitan": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-number/blobs/sha256:d71548120a8d5d9db4b9b9ae71be947303c6a415e35380d0d8e36551765b827f",
          "sha256": "d71548120a8d5d9db4b9b9ae71be947303c6a415e35380d0d8e36551765b827f"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-number/blobs/sha256:e8bca68db296e388c3290a4c805720e710e74b38482db38cebc1d3c78c96b924",
          "sha256": "e8bca68db296e388c3290a4c805720e710e74b38482db38cebc1d3c78c96b924"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/git-number.rb",
  "ruby_source_checksum": {
    "sha256": "7ce36ed1fd548d339c64b219d3594f28bb328d90ddb49efc065afbb368850615"
  },
  "date_added": "2014-05-22T12:18:54-07:00",
  "readme": "### git-number ###\n\n`git-number` is a perl script that increases my command-line git productivity\n(with some help from another two perl scripts).\n\n## Usage Examples ##\n\nHere's how it increases my productivity (and might increase yours, too):\n\n```console\n$ alias gn='git number --column'\n# See item 4 in the Caveat section on --column\n$ alias ga='git number add'\n\n$ gn\n# On branch master\n# Untracked files:\n#   (use \"git add <file>...\" to include in what will be committed)\n#\n#1      .README.swp\n#2      README\n$\n```\n\nDoes the output look familiar? Notice the numbers before the filenames? Those\nare their ids.\n\nIf you prefer the short status format then you can use the `-s` option. This\nwill run `git status` with the `--short` option.\n\n```console\n$ git number -s\n1 ?? .README.swp\n2 ?? README\n```\n\nNow look at this:\n\n```console\n$ ga 2\ngit add  README  # <- It does this in the background\n\n$ gn\n# On branch master\n# Changes to be committed:\n#   (use \"git reset HEAD <file>...\" to unstage)\n#\n#1      new file:   README\n#\n# Untracked files:\n#   (use \"git add <file>...\" to include in what will be committed)\n#\n#2      .README.swp\n```\n\nWhen run without arguments, `git number` runs `git status` and attach a unique\nnumber for each line of filename printed by `git status`, and it will 'remember'\nthis number-to-filename association. When run with arguments, like this:\n\n```console\n$ git number <any git command> [one or more numbers or git options/args]\n```\n\n`git number` will run that &lt;any git command&gt; and subtitute all the numbers\nto their equivalent filenames. Non-numeric argument are passed intact to git.\n\nIt accepts multiple args and ranges too:\n\n```console\n$ ga 2-4 6 10\n```\n\nWhich is the same as writing\n\n```console\n$ ga 2 3 4 6 10\n```\n\nYou can also ask `git-number` to run arbitrary command instead of git on the\ngiven arguments using the `-c` option:\n\n```console\n$ gn -c rm 1\n```\n\nThis will run the command `rm README`\n\nThe kind of fun that this gives you include the following:\n\n```console\n$ alias vn='git number -c vi'\n$ vn 1\n```\n\nThis will run `vi README`\n\n## What's included ##\n\n1. `git-number`: Show or operate on files by their ids.\n2. `git-list`: List filenames from given ids.\n3. `git-id`: Generate and show the file ids.\n\n    for example to show the second file run:\n\n    ```console\n    $ git list 2\n    ```\n\n    or to show the first three files, and the  9th and 13th:\n\n    ```console\n    $ git list 1-3 9 13\n    ```\n\n## What's not included ##\n\nBatteries.\n\n## How it works ##\n\n`git-id` is a perl script that does two things:\n\n1. Runs `git status` and inserts a number before each file reported by `git\n   status`\n2. Show and save a copy of the output to a file (.git/gitids.txt)\n\n(If you're pedantic then it does four things)\n\n`git-list` is a perl script that converts numbers and ranges to their\nequivalent filenames from the previous run of `git-id`.\n\n`git-number` uses `git-list` to convert all its numbers and ranges arguments to\nfilenames and passes them down to git.\n\n## Caveat ##\n\n1. <strike>For a file that is marked as conflicting, the ansi closing color escape\n   sequence printed by git comes after the final newline, which breaks this\n   script a little</strike>. This seems to be fixed in latest git.\n\n2. git-number depends on the output of git-status, which is a porcelain. Caveat emptor.\n\n3. It does not work for renames:\n\n    ```console\n    $ git mv a.txt b.txt\n    $ gn\n    # On branch b\n    # Changes to be committed:\n    #   (use \"git reset HEAD <file>...\" to unstage)\n    #\n    #1      renamed:    a.txt -> b.txt\n    #\n    $ gn reset 1  # this will NOT do what you want it to do!\n    ```\n\n4.  Since git 1.8.4.1, git-status now defaults to showing the untracked files\n    in columnar listing (git-number doesn't).  To choose the columnar listing,\n    pass the --column argument to git-number.  git-number makes the assumption\n    that the files do not have spaces in their names and assign numeric ids to\n    the files by splitting the columnar output using one or more spaces as the\n    delimiter.\n\n    TLDR: git-number is not reliable in columnar untracked files\n    listing if your files have spaces in their names.\n\n5.  In --column=dense mode, there may be no spaces between the filenames from\n    the previous column and the numbers for the files in the next column.  Do\n    not be alarmed - the numbers work just fine.\n\nI'm sure there are a few more. Send me a patch :)\n\n## Installation ##\n\nCopy (or make a symbolic link to) `git-number`, `git-list`, `git-id` into your\n$HOME/bin directory, or wherever you prefer to put them.\n\n## Installation on Windows ##\n\nAdd folder where `git-number`, `git-list`, `git-id` are located to your\n$PATH variable and restart git console.\n\n## See also ##\n\n[scm_breeze](https://github.com/ndbroadbent/scm_breeze) by Nathan\nBroadbent - similar in spirit with git-number, has more features,\nrequires either bash or zsh."
}
