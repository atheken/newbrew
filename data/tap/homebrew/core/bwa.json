{
  "name": "bwa",
  "full_name": "bwa",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Burrow-Wheeler Aligner for pairwise alignment of DNA",
  "license": "GPL-3.0",
  "homepage": "https://github.com/lh3/bwa",
  "versions": {
    "stable": "0.7.17",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/lh3/bwa/releases/download/v0.7.17/bwa-0.7.17.tar.bz2",
      "tag": null,
      "revision": null,
      "checksum": "de1b4d4e745c0b7fc3e107b5155a51ac063011d33a5d82696331ecf4bed8d0fd"
    },
    "head": {
      "url": "https://github.com/lh3/bwa.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bwa/blobs/sha256:16f68f7c570fdc002ad5a75ddb23a7b4cf6c7993ff09b3e7aa39683e3f32b5b5",
          "sha256": "16f68f7c570fdc002ad5a75ddb23a7b4cf6c7993ff09b3e7aa39683e3f32b5b5"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bwa/blobs/sha256:c21d941893a927b1f362fb0f44d809cc81b5d4ec59f4073b5f39d081902f321b",
          "sha256": "c21d941893a927b1f362fb0f44d809cc81b5d4ec59f4073b5f39d081902f321b"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bwa/blobs/sha256:4340d5a65a5c146033ea20710f9489ef2fe2a3b2c85937f3e71da141c44d4658",
          "sha256": "4340d5a65a5c146033ea20710f9489ef2fe2a3b2c85937f3e71da141c44d4658"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bwa/blobs/sha256:70436d404c59f546c96157cfd4329980d51413346f2383ce96d9dcb5dbc6885b",
          "sha256": "70436d404c59f546c96157cfd4329980d51413346f2383ce96d9dcb5dbc6885b"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bwa/blobs/sha256:815da042557c670364ad899e1257f51c893979436beb1c016c8fdb6ad9ef734a",
          "sha256": "815da042557c670364ad899e1257f51c893979436beb1c016c8fdb6ad9ef734a"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bwa/blobs/sha256:d67267aeea4145fef5e65fe1c8d9f9b34121c0339badf703811027db2570967a",
          "sha256": "d67267aeea4145fef5e65fe1c8d9f9b34121c0339badf703811027db2570967a"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bwa/blobs/sha256:59b821b80f729fef923c3edb048478836c72d6aea34b245d1b292b2c3f893432",
          "sha256": "59b821b80f729fef923c3edb048478836c72d6aea34b245d1b292b2c3f893432"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bwa/blobs/sha256:6b07cef5ea1955d8a83e7b59ef8458a7604998f735f0eab85889fa3aedc7e953",
          "sha256": "6b07cef5ea1955d8a83e7b59ef8458a7604998f735f0eab85889fa3aedc7e953"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bwa/blobs/sha256:02da3eecd6569c193a55436f705c8d351d052e44b79a43d6afc50f7308603a73",
          "sha256": "02da3eecd6569c193a55436f705c8d351d052e44b79a43d6afc50f7308603a73"
        },
        "sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bwa/blobs/sha256:4db97125930b495fc34b6d161bea57171ac4bf2a5bf48ca1088a69a594874710",
          "sha256": "4db97125930b495fc34b6d161bea57171ac4bf2a5bf48ca1088a69a594874710"
        },
        "el_capitan": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bwa/blobs/sha256:bee09d138e9d8f45c12d6c99b48a3e6891b6e4d3f5c6a6847bfeaa28afc2f362",
          "sha256": "bee09d138e9d8f45c12d6c99b48a3e6891b6e4d3f5c6a6847bfeaa28afc2f362"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bwa/blobs/sha256:3d875f0b64143cfb58e44681e47102158b46e0004c408d8fc5f10dc976383a94",
          "sha256": "3d875f0b64143cfb58e44681e47102158b46e0004c408d8fc5f10dc976383a94"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "zlib"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/bwa.rb",
  "ruby_source_checksum": {
    "sha256": "5ac0297874d5adb103f8ada9f84adb5edf24178265833da86e2f10d735dba6b3"
  },
  "date_added": "2010-08-24T11:52:58-07:00",
  "readme": "[![Build Status](https://github.com/lh3/bwa/actions/workflows/ci.yaml/badge.svg)](https://github.com/lh3/bwa/actions)\n[![SourceForge Downloads](https://img.shields.io/sourceforge/dt/bio-bwa.svg?label=SF%20downloads)](https://sourceforge.net/projects/bio-bwa/files/?source=navbar)\n[![GitHub Downloads](https://img.shields.io/github/downloads/lh3/bwa/total.svg?style=flat&label=GitHub%20downloads)](https://github.com/lh3/bwa/releases)\n[![BioConda Install](https://img.shields.io/conda/dn/bioconda/bwa.svg?style=flag&label=BioConda%20install)](https://anaconda.org/bioconda/bwa)\n\n**Note: [minimap2][minimap2] has replaced BWA-MEM for __PacBio and Nanopore__ read\nalignment.** It retains all major BWA-MEM features, but is ~50 times as fast,\nmore versatile, more accurate and produces better base-level alignment.\nA beta version of [BWA-MEM2][bwa-mem2] has been released for short-read mapping.\nBWA-MEM2 is about twice as fast as BWA-MEM and outputs near identical alignments.\n\n[minimap2]: https://github.com/lh3/minimap2\n[bwa-mem2]: https://github.com/bwa-mem2/bwa-mem2\n\n## Getting started\n\n\tgit clone https://github.com/lh3/bwa.git\n\tcd bwa; make\n\t./bwa index ref.fa\n\t./bwa mem ref.fa read-se.fq.gz | gzip -3 > aln-se.sam.gz\n\t./bwa mem ref.fa read1.fq read2.fq | gzip -3 > aln-pe.sam.gz\n\n## Introduction\n\nBWA is a software package for mapping DNA sequences against a large reference\ngenome, such as the human genome. It consists of three algorithms:\nBWA-backtrack, BWA-SW and BWA-MEM. The first algorithm is designed for Illumina\nsequence reads up to 100bp, while the rest two for longer sequences ranged from\n70bp to a few megabases. BWA-MEM and BWA-SW share similar features such as the\nsupport of long reads and chimeric alignment, but BWA-MEM, which is the latest,\nis generally recommended as it is faster and more accurate. BWA-MEM also has\nbetter performance than BWA-backtrack for 70-100bp Illumina reads.\n\nFor all the algorithms, BWA first needs to construct the FM-index for the\nreference genome (the **index** command). Alignment algorithms are invoked with\ndifferent sub-commands: **aln/samse/sampe** for BWA-backtrack,\n**bwasw** for BWA-SW and **mem** for the BWA-MEM algorithm.\n\n## Availability\n\nBWA is released under [GPLv3][1]. The latest source code is [freely\navailable at github][2]. Released packages can [be downloaded][3] at\nSourceForge. After you acquire the source code, simply use `make` to compile\nand copy the single executable `bwa` to the destination you want. The only\ndependency required to build BWA is [zlib][14].\n\nSince 0.7.11, precompiled binary for x86\\_64-linux is available in [bwakit][17].\nIn addition to BWA, this self-consistent package also comes with bwa-associated\nand 3rd-party tools for proper BAM-to-FASTQ conversion, mapping to ALT contigs,\nadapter triming, duplicate marking, HLA typing and associated data files.\n\n## Seeking help\n\nThe detailed usage is described in the man page available together with the\nsource code. You can use `man ./bwa.1` to view the man page in a terminal. The\n[HTML version][4] of the man page can be found at the [BWA website][5]. If you\nhave questions about BWA, you may [sign up the mailing list][6] and then send\nthe questions to [bio-bwa-help@sourceforge.net][7]. You may also ask questions\nin forums such as [BioStar][8] and [SEQanswers][9].\n\n## Citing BWA\n\n* Li H. and Durbin R. (2009) Fast and accurate short read alignment with\n Burrows-Wheeler transform. *Bioinformatics*, **25**, 1754-1760. [PMID:\n [19451168][10]]. (if you use the BWA-backtrack algorithm)\n\n* Li H. and Durbin R. (2010) Fast and accurate long-read alignment with\n Burrows-Wheeler transform. *Bioinformatics*, **26**, 589-595. [PMID:\n [20080505][11]]. (if you use the BWA-SW algorithm)\n\n* Li H. (2013) Aligning sequence reads, clone sequences and assembly contigs\n with BWA-MEM. [arXiv:1303.3997v2][12] [q-bio.GN]. (if you use the BWA-MEM\n algorithm or the **fastmap** command, or want to cite the whole BWA package)\n\nPlease note that the last reference is a preprint hosted at [arXiv.org][13]. I\ndo not have plan to submit it to a peer-reviewed journal in the near future.\n\n## Frequently asked questions (FAQs)\n\n1. [What types of data does BWA work with?](#type)\n2. [Why does a read appear multiple times in the output SAM?](#multihit)\n3. [Does BWA work on reference sequences longer than 4GB in total?](#4gb)\n4. [Why can one read in a pair has high mapping quality but the other has zero?](#pe0)\n5. [How can a BWA-backtrack alignment stands out of the end of a chromosome?](#endref)\n6. [Does BWA work with ALT contigs in the GRCh38 release?](#altctg)\n7. [Can I just run BWA-MEM against GRCh38+ALT without post-processing?](#postalt)\n\n#### <a name=\"type\"></a>1. What types of data does BWA work with?\n\nBWA works with a variety types of DNA sequence data, though the optimal\nalgorithm and setting may vary. The following list gives the recommended\nsettings:\n\n* Illumina/454/IonTorrent single-end reads longer than ~70bp or assembly\n  contigs up to a few megabases mapped to a closely related reference genome:\n\n\t\tbwa mem ref.fa reads.fq > aln.sam\n\n* Illumina single-end reads shorter than ~70bp:\n\n\t\tbwa aln ref.fa reads.fq > reads.sai; bwa samse ref.fa reads.sai reads.fq > aln-se.sam\n\n* Illumina/454/IonTorrent paired-end reads longer than ~70bp:\n\n\t\tbwa mem ref.fa read1.fq read2.fq > aln-pe.sam\n\n* Illumina paired-end reads shorter than ~70bp:\n\n\t\tbwa aln ref.fa read1.fq > read1.sai; bwa aln ref.fa read2.fq > read2.sai\n\t\tbwa sampe ref.fa read1.sai read2.sai read1.fq read2.fq > aln-pe.sam\n\n* PacBio subreads or Oxford Nanopore reads to a reference genome:\n\n\t\tbwa mem -x pacbio ref.fa reads.fq > aln.sam\n\t\tbwa mem -x ont2d ref.fa reads.fq > aln.sam\n\nBWA-MEM is recommended for query sequences longer than ~70bp for a variety of\nerror rates (or sequence divergence). Generally, BWA-MEM is more tolerant with\nerrors given longer query sequences as the chance of missing all seeds is small.\nAs is shown above, with non-default settings, BWA-MEM works with Oxford Nanopore\nreads with a sequencing error rate over 20%.\n\n#### <a name=\"multihit\"></a>2. Why does a read appear multiple times in the output SAM?\n\nBWA-SW and BWA-MEM perform local alignments. If there is a translocation, a gene\nfusion or a long deletion, a read bridging the break point may have two hits,\noccupying two lines in the SAM output. With the default setting of BWA-MEM, one\nand only one line is primary and is soft clipped; other lines are tagged with\n0x800 SAM flag (supplementary alignment) and are hard clipped.\n\n#### <a name=\"4gb\"></a>3. Does BWA work on reference sequences longer than 4GB in total?\n\nYes. Since 0.6.x, all BWA algorithms work with a genome with total length over\n4GB. However, individual chromosome should not be longer than 2GB.\n\n#### <a name=\"pe0\"></a>4. Why can one read in a pair have a high mapping quality but the other has zero?\n\nThis is correct. Mapping quality is assigned for individual read, not for a read\npair. It is possible that one read can be mapped unambiguously, but its mate\nfalls in a tandem repeat and thus its accurate position cannot be determined.\n\n#### <a name=\"endref\"></a>5. How can a BWA-backtrack alignment stand out of the end of a chromosome?\n\nInternally BWA concatenates all reference sequences into one long sequence. A\nread may be mapped to the junction of two adjacent reference sequences. In this\ncase, BWA-backtrack will flag the read as unmapped (0x4), but you will see\nposition, CIGAR and all the tags. A similar issue may occur to BWA-SW alignment\nas well. BWA-MEM does not have this problem.\n\n#### <a name=\"altctg\"></a>6. Does BWA work with ALT contigs in the GRCh38 release?\n\nYes, since 0.7.11, BWA-MEM officially supports mapping to GRCh38+ALT.\nBWA-backtrack and BWA-SW don't properly support ALT mapping as of now. Please\nsee [README-alt.md][18] for details. Briefly, it is recommended to use\n[bwakit][17], the binary release of BWA, for generating the reference genome\nand for mapping.\n\n#### <a name=\"postalt\"></a>7. Can I just run BWA-MEM against GRCh38+ALT without post-processing?\n\nIf you are not interested in hits to ALT contigs, it is okay to run BWA-MEM\nwithout post-processing. The alignments produced this way are very close to\nalignments against GRCh38 without ALT contigs. Nonetheless, applying\npost-processing helps to reduce false mappings caused by reads from the\ndiverged part of ALT contigs and also enables HLA typing. It is recommended to\nrun the post-processing script.\n\n\n\n[1]: http://en.wikipedia.org/wiki/GNU_General_Public_License\n[2]: https://github.com/lh3/bwa\n[3]: http://sourceforge.net/projects/bio-bwa/files/\n[4]: http://bio-bwa.sourceforge.net/bwa.shtml\n[5]: http://bio-bwa.sourceforge.net/\n[6]: https://lists.sourceforge.net/lists/listinfo/bio-bwa-help\n[7]: mailto:bio-bwa-help@sourceforge.net\n[8]: http://biostars.org\n[9]: http://seqanswers.com/\n[10]: http://www.ncbi.nlm.nih.gov/pubmed/19451168\n[11]: http://www.ncbi.nlm.nih.gov/pubmed/20080505\n[12]: http://arxiv.org/abs/1303.3997\n[13]: http://arxiv.org/\n[14]: http://zlib.net/\n[15]: https://github.com/lh3/bwa/tree/mem\n[16]: ftp://ftp.ncbi.nlm.nih.gov/genbank/genomes/Eukaryotes/vertebrates_mammals/Homo_sapiens/GRCh38/seqs_for_alignment_pipelines/\n[17]: http://sourceforge.net/projects/bio-bwa/files/bwakit/\n[18]: https://github.com/lh3/bwa/blob/master/README-alt.md"
}
