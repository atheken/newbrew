{
  "name": "tuc",
  "full_name": "tuc",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Text manipulation and cutting tool",
  "license": "GPL-3.0-or-later",
  "homepage": "https://github.com/riquito/tuc",
  "versions": {
    "stable": "1.0.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/riquito/tuc/archive/refs/tags/v1.0.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "ea4d1adb1949b8f564c375cbd7e0569de5dcc1fcabd57d56174748091102eec2"
    },
    "head": {
      "url": "https://github.com/riquito/tuc.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tuc/blobs/sha256:9f578d51858fa5dda588b3a7517f7659be032593b1f160aacd4f792b251be03f",
          "sha256": "9f578d51858fa5dda588b3a7517f7659be032593b1f160aacd4f792b251be03f"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tuc/blobs/sha256:c38d7a077f7b23da3db1c4e8bf3269b16c5324a44ef3ae326f6640250717223a",
          "sha256": "c38d7a077f7b23da3db1c4e8bf3269b16c5324a44ef3ae326f6640250717223a"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tuc/blobs/sha256:95e896f7d2562a0fb0339b1a5335cab57678c01bc7ad2176f23ff3e492eedf7d",
          "sha256": "95e896f7d2562a0fb0339b1a5335cab57678c01bc7ad2176f23ff3e492eedf7d"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tuc/blobs/sha256:1ec1cba84e3b510ce6e07369eeb85e933022d9fd894609b7d8eb50640a6b5748",
          "sha256": "1ec1cba84e3b510ce6e07369eeb85e933022d9fd894609b7d8eb50640a6b5748"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tuc/blobs/sha256:983376b05c608b5c1cd0bdf95678b948c1f96c3d565298b0c584845a7f622e2d",
          "sha256": "983376b05c608b5c1cd0bdf95678b948c1f96c3d565298b0c584845a7f622e2d"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tuc/blobs/sha256:b1a0dc09cbb7cda41144e5d6e288bd238b6717a927015993c6a66b08b7a92919",
          "sha256": "b1a0dc09cbb7cda41144e5d6e288bd238b6717a927015993c6a66b08b7a92919"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tuc/blobs/sha256:334bfc02d97c2291a1b45d51d20afdc906e063b21baac1205e66c970adecb1b5",
          "sha256": "334bfc02d97c2291a1b45d51d20afdc906e063b21baac1205e66c970adecb1b5"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "982192bf852eebace6c92c1e792d894990b8620e",
  "ruby_source_path": "Formula/tuc.rb",
  "ruby_source_checksum": {
    "sha256": "dc3e1692ed0eecce40df3621aa3797894dc03d793f7352b5512b03fd4b7e4135"
  },
  "date_added": "2022-06-22T18:29:05+00:00",
  "readme": "# tuc (when cut doesn't cut it)\n[![version](https://img.shields.io/crates/v/tuc.svg)](https://crates.io/crates/tuc)\n![ci](https://github.com/riquito/tuc/actions/workflows/ci.yml/badge.svg)\n[![license](https://img.shields.io/crates/l/tuc.svg)](https://crates.io/crates/tuc)\n\nYou want to `cut` on more than just a character, perhaps using negative indexes \nor format the selected fields as you want...\nMaybe you want to cut on lines (ever needed to drop or keep first and last line?)...\nThat's where `tuc` can help.\n\n## Install\n\nDownload one of the [prebuilt binaries](https://github.com/riquito/tuc/releases)\n\nor run\n\n```sh\n# requires rustc >= 1.61.0\ncargo install tuc # append `--no-default-features` for a smaller binary with no regex support\n```\n\nFor other installation methods, check below the [community managed packages](#community-managed-packages)\n\n## Try it out online\n\nNo time to install it? Play with a webassembly version online, the [tuc playground](https://riquito.github.io/tuc/playground/index.html)\n\n## Help\n\n```\ntuc 1.0.0\nCut text (or bytes) where a delimiter matches, then keep the desired parts.\n\nThe data is read from standard input.\n\nUSAGE:\n    tuc [FLAGS] [OPTIONS]\n\nFLAGS:\n    -g, --greedy-delimiter        Match consecutive delimiters as if it was one\n    -p, --compress-delimiter      Print only the first delimiter of a sequence\n    -s, --only-delimited          Print only lines containing the delimiter\n    -V, --version                 Print version information\n    -z, --zero-terminated         Line delimiter is NUL (\\0), not LF (\\n)\n    -h, --help                    Print this help and exit\n    -m, --complement              Invert fields (e.g. '2' becomes '1,3:')\n    -j, --(no-)join               Print selected parts with delimiter inbetween\n\nOPTIONS:\n    -f, --fields <bounds>         Fields to keep, 1-indexed, comma separated.\n                                  Use colon to include everything in a range.\n                                  Fields can be negative (-1 is the last field).\n                                  [default 1:]\n\n                                  e.g. cutting on '-' the string 'a-b-c-d'\n                                    1     => a\n                                    1:    => a-b-c-d\n                                    1:3   => a-b-c\n                                    3,2   => cb\n                                    3,1:2 => ca-b\n                                    -3:-2 => b-c\n\n                                  To re-apply the delimiter add -j, to replace\n                                  it add -r (followed by the new delimiter).\n\n                                  You can also format the output using {} syntax\n                                  e.g.\n                                  '[\"{1}\", \"{2}\"]' => [\"a\", \"b\"]\n\n                                  You can escape { and } using {{ and }}.\n\n    -b, --bytes <bounds>          Same as --fields, but it keeps bytes\n    -c, --characters <bounds>     Same as --fields, but it keeps characters\n    -l, --lines <bounds>          Same as --fields, but it keeps lines\n                                  Implies --join. To merge lines, use --no-join\n    -d, --delimiter <delimiter>   Delimiter used by --fields to cut the text\n                                  [default: \\t]\n    -e, --regex <some regex>      Use a regular expression as delimiter\n    -r, --replace-delimiter <new> Replace the delimiter with the provided text\n    -t, --trim <type>             Trim the delimiter (greedy). Valid values are\n                                  (l|L)eft, (r|R)ight, (b|B)oth\n\nOptions precedence:\n    --trim and --compress-delimiter are applied before --fields or similar\n\nMemory consumption:\n    --characters and --fields read and allocate memory one line at a time\n\n    --lines allocate memory one line at a time as long as the requested fields\n    are ordered and non-negative (e.g. -l 1,3:4,4,7), otherwise it allocates\n    the whole input in memory (it also happens when -p or -m are being used)\n\n    --bytes allocate the whole input in memory\n```\n\n## Examples\n\n```sh\n# Cut and rearrange fields...\n❯ echo \"foo bar baz\" | tuc -d ' ' -f 3,2,1\nbazbarfoo\n```\n\n```sh\n# ...and apply back the delimiter...\n❯ echo \"foo bar baz\" | tuc -j -d ' ' -f 3,2,1\nbaz bar foo\n```\n\n```sh\n# ...or replace it\n❯ echo \"foo bar baz\" | tuc -j -r ' ➡ ' -d ' ' -f 3,2,1\nbaz ➡ bar ➡ foo\n```\n\n```sh\n# Keep ranges\n❯ echo \"foo bar    baz\" | tuc -d ' ' -f 2:\nbar    baz\n```\n\n```sh\n# Cut using a greedy delimiter\n❯ echo \"foo    bar\" | tuc -g -d ' ' -f 1,2\nfoobar\n```\n\n```sh\n# Format output\n❯ echo \"foo bar baz\" | tuc -d ' ' -f '{1}, {2} and lastly {3}'\nfoo, bar and lastly baz\n# Support \\n\n❯ echo \"100Kb README.txt 2049-02-01\" | tuc -d ' ' -f '{2}\\n├── {1}\\n└── {3}'\nREADME.txt\n├── 100Kb\n└── 2049-02-01\n```\n\n```sh\n# Cut lines (e.g. drop first and last line)\n❯ printf \"a\\nb\\nc\\nd\\ne\" | tuc -l 2:-2\nb\nc\nd\n```\n\n```sh\n# Concatenate lines\n❯ printf \"a\\nb\\nc\\nd\\ne\" | tuc -l 1,2 --no-join\nab\n```\n\n```sh\n# Compress delimiters after cut\n❯ echo \"foo    bar   baz\" | tuc -d ' ' -f 2: -p\nbar baz\n```\n\n```sh\n# Replace remaining delimiters with something else\n❯ echo \"foo    bar   baz\" | tuc -d ' ' -f 2: -p -r ' -> '\nbar -> baz\n```\n\n```sh\n# Indexes can be negative and rearranged\n❯ echo \"a b c\" | tuc -d ' ' -f -1,-2,-3\ncba\n```\n\n```sh\n# Cut using regular expressions\n❯ echo \"a,b, c\" | tuc -e '[, ]+' -f 1,3\nac\n```\n\n```sh\n# Delimiters can be any number of characters long\n❯ echo \"a<sep>b<sep>c\" | tuc -d '<sep>' -f 1,3\nac\n```\n\n```sh\n# Cut characters (expects UTF-8 input)\n❯ echo \"😁🤩😝😎\" | tuc -c 4,3,2,1\n😎😝🤩😁\n```\n\n```sh\n# Cut bytes (the following emoji are 4 bytes each)\n❯ echo \"😁🤩😝😎\" | tuc -b 5:8\n🤩\n```\n\n```sh\n# Discard selected fields, keep the rest\n❯ echo \"a b c\" | tuc --complement -d ' ' -f 2\nac\n```\n\n## Community-Managed Packages\n\nHeartfelt thanks to package maintainers: you make it easy to access open source software ❤️\n\n[![Packaging status](https://repology.org/badge/vertical-allrepos/tuc-cut.svg)](https://repology.org/project/tuc-cut/versions)\n\n- [ArchLinux](https://aur.archlinux.org/packages/tuc):\n  ```sh\n  yay -S tuc # compile from source\n  yay -S tuc-bin # install pre-built binaries tuc and tuc-regex\n  ```\n\n- [Brew](https://formulae.brew.sh/formula/tuc):\n  ```sh\n  brew install tuc\n  ```\n\n- [MacPorts](https://ports.macports.org/port/tuc/):\n  ```sh\n  sudo port install tuc\n  ```\n\n## LICENSE\n\nTuc is distributed under the GNU GPL license (version 3 or any later version).\n\nSee [LICENSE](./LICENSE) file for details."
}
