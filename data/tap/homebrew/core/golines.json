{
  "name": "golines",
  "full_name": "golines",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Golang formatter that fixes long lines",
  "license": "MIT",
  "homepage": "https://github.com/segmentio/golines",
  "versions": {
    "stable": "0.11.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/segmentio/golines/archive/refs/tags/v0.11.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "d7336fbddb045bd2448629c4b8ef5ab2dc6136e71a795b6fdd596066bc00adc0"
    },
    "head": {
      "url": "https://github.com/segmentio/golines.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/golines/blobs/sha256:51f84f0bd25513108f8a8160eaf66abb0c6b74a393dc2edde4af90409096d85a",
          "sha256": "51f84f0bd25513108f8a8160eaf66abb0c6b74a393dc2edde4af90409096d85a"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/golines/blobs/sha256:51f84f0bd25513108f8a8160eaf66abb0c6b74a393dc2edde4af90409096d85a",
          "sha256": "51f84f0bd25513108f8a8160eaf66abb0c6b74a393dc2edde4af90409096d85a"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/golines/blobs/sha256:51f84f0bd25513108f8a8160eaf66abb0c6b74a393dc2edde4af90409096d85a",
          "sha256": "51f84f0bd25513108f8a8160eaf66abb0c6b74a393dc2edde4af90409096d85a"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/golines/blobs/sha256:c02d8f38f78fe5916beae3e9bafcfd89c4741300821f795ca1e9edd3d90a67e4",
          "sha256": "c02d8f38f78fe5916beae3e9bafcfd89c4741300821f795ca1e9edd3d90a67e4"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/golines/blobs/sha256:c02d8f38f78fe5916beae3e9bafcfd89c4741300821f795ca1e9edd3d90a67e4",
          "sha256": "c02d8f38f78fe5916beae3e9bafcfd89c4741300821f795ca1e9edd3d90a67e4"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/golines/blobs/sha256:c02d8f38f78fe5916beae3e9bafcfd89c4741300821f795ca1e9edd3d90a67e4",
          "sha256": "c02d8f38f78fe5916beae3e9bafcfd89c4741300821f795ca1e9edd3d90a67e4"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/golines/blobs/sha256:9f12a858a458f6b72ec2a6ee0d92de48e258b39dcca9736966af6629e68baa93",
          "sha256": "9f12a858a458f6b72ec2a6ee0d92de48e258b39dcca9736966af6629e68baa93"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/golines.rb",
  "ruby_source_checksum": {
    "sha256": "3a333ed50c1f78dc62ff4f3cafc92a1edc628939531be3cab9f0b5583c88ceaa"
  },
  "date_added": "2023-03-13T15:01:04+00:00",
  "readme": "[![Circle CI](https://circleci.com/gh/segmentio/golines.svg?style=svg&circle-token=b1d01d8b035ef0aa71ccd183580586a80cd85271)](https://circleci.com/gh/segmentio/golines)\n[![Go Report Card](https://goreportcard.com/badge/github.com/segmentio/golines)](https://goreportcard.com/report/github.com/segmentio/golines)\n[![GoDoc](https://godoc.org/github.com/segmentio/golines?status.svg)](https://godoc.org/github.com/segmentio/golines)\n[![Coverage](https://img.shields.io/badge/Go%20Coverage-84%25-brightgreen.svg?longCache=true&style=flat)](https://gocover.io/github.com/segmentio/golines?version=1.13.x)\n\n# golines\n\nGolines is a golang formatter that shortens long lines, in addition to all\nof the formatting fixes done by [`gofmt`](https://golang.org/cmd/gofmt/).\n\n## Motivation\n\nThe standard golang formatting tools (`gofmt`, `goimports`, etc.) are great, but\n[deliberately don't shorten long lines](https://github.com/golang/go/issues/11915); instead, this\nis an activity left to developers.\n\nWhile there are different tastes when it comes to line lengths in go, we've generally found\nthat very long lines are more difficult to read than their shortened alternatives. As an example:\n\n```go\nmyMap := map[string]string{\"first key\": \"first value\", \"second key\": \"second value\", \"third key\": \"third value\", \"fourth key\": \"fourth value\", \"fifth key\": \"fifth value\"}\n```\n\nvs.\n\n```go\nmyMap := map[string]string{\n\t\"first key\": \"first value\",\n\t\"second key\": \"second value\",\n\t\"third key\": \"third value\",\n\t\"fourth key\": \"fourth value\",\n\t\"fifth key\": \"fifth value\",\n}\n```\n\nWe built `golines` to give go developers the option to automatically shorten long lines, like\nthe one above, according to their preferences.\n\nMore background and technical details are available in\n[this blog post](https://yolken.net/blog/cleaner-go-code-golines).\n\n## Examples\n\nSee this [before](_fixtures/end_to_end.go) and [after](_fixtures/end_to_end__exp.go)\nview of a file with very long lines. More example pairs can be found in the\n[`_fixtures`](_fixtures) directory.\n\n## Version support\n\nThe latest version of `golines` requires golang 1.18 or newer due to generics-related dependencies.\nIf you need to use `golines` with an older version of go, install the tool from the `v0.9.0`\nrelease.\n\n## Usage\n\nFirst, install the tool. If you're using golang 1.18 or newer, run:\n\n```\ngo install github.com/segmentio/golines@latest\n```\n\nOtherwise, for older golang versions, run:\n\n```\ngo install github.com/segmentio/golines@v0.9.0\n```\n\nThen, run:\n\n```\ngolines [paths to format]\n```\n\nThe paths can be either directories or individual files. If no paths are\nprovided, then input is taken from `stdin` (as with `gofmt`).\n\nBy default, the results are printed to `stdout`. To overwrite the existing\nfiles in place, use the `-w` flag.\n\n## Options\n\nSome other options are described in the sections below. Run `golines --help` to see\nall available flags and settings.\n\n#### Line length settings\n\nBy default, the tool tries to shorten lines that are longer than 100 columns\nand assumes that 1 tab = 4 columns. The latter can be changed via the\n`-m` and `-t` flags respectively.\n\n#### Dry-run mode\n\nRunning the tool with the `--dry-run` flag will show pretty, git-style diffs.\n\n#### Comment shortening\n\nShortening long comment lines is harder than shortening code because comments can\nhave arbitrary structure and format. `golines` includes some basic\nlogic for shortening single-line (i.e., `//`-prefixed) comments, but this is turned\noff by default since the quality isn't great. To enable this feature anyway, run\nwith the `--shorten-comments` flag.\n\n#### Custom formatters\n\nBy default, the tool will use [`goimports`](https://godoc.org/golang.org/x/tools/cmd/goimports) as\nthe base formatter (if found), otherwise it will revert to `gofmt`. An explicit formatter can be\nset via the `--base-formatter` flag; the command provided here should accept its input via\n`stdin` and write its output to `stdout`.\n\n#### Generated files\n\nBy default, the tool will not format any files that look like they're generated. If you\nwant to reformat these too, run with the `--no-ignore-generated` flag.\n\n#### Chained method splitting\n\nThere are several possible ways to split lines that are part of\n[method chains](https://en.wikipedia.org/wiki/Method_chaining). The original\napproach taken by `golines` was to split on the args, e.g.:\n\n```go\nmyObj.Method(\n\targ1,\n\targ2,\n\targ3,\n).AnotherMethod(\n\targ1,\n\targ2,\n).AThirdMethod(\n\targ1,\n\targ2,\n)\n```\n\nStarting in version 0.3.0, the tool now splits on the dots by default, e.g.:\n\n```go\nmyObj.Method(arg1, arg2, arg3).\n\tAnotherMethod(arg1, arg2).\n\tAThirdMethod(arg1, arg2)\n```\n\nThe original behavior can be used by running the tool with the `--no-chain-split-dots`\nflag.\n\n#### Struct tag reformatting\n\nIn addition to shortening long lines, the tool also aligns struct tag keys; see the\nassociated [before](_fixtures/struct_tags.go) and [after](_fixtures/struct_tags__exp.go)\nexamples in the `_fixtures` directory. To turn this behavior off, run with `--no-reformat-tags`.\n\n## Developer Tooling Integration\n\n### vim-go\n\nAdd the following lines to your vimrc, substituting `128` with your preferred line length:\n\n```vim\nlet g:go_fmt_command = \"golines\"\nlet g:go_fmt_options = {\n    \\ 'golines': '-m 128',\n    \\ }\n```\n\n### Visual Studio Code\n\n1. Install the [Run on Save](https://marketplace.visualstudio.com/items?itemName=emeraldwalk.RunOnSave) extension\n2. Go into the VSCode settings menu, scroll down to the section for the \"Run on Save\"\n  extension, click the \"Edit in settings.json\" link\n3. Set the `emeraldwalk.runonsave` key as follows (adding other flags to the `golines`\n  command as desired):\n\n```\n    \"emeraldwalk.runonsave\": {\n        \"commands\": [\n            {\n                \"match\": \"\\\\.go$\",\n                \"cmd\": \"golines ${file} -w\"\n            }\n        ]\n    }\n```\n\n4. Save the settings and restart VSCode\n\n### Goland\n\n1. Go into the Goland settings and click \"Tools\" -> \"File Watchers\" then click the plus to create a new file watcher\n2. Set the following properties and confirm by clicking OK:\n  - __Name:__ `golines`\n  - __File type:__ `Go files`\n  - __Scope:__ `Project Files`\n  - __Program:__ `golines`\n  - __Arguments:__ `$FilePath$ -w`\n  - __Output paths to refresh:__ `$FilePath$`\n3. Activate your newly created file watcher in the Goland settings under \"Tools\" -> \"Actions on save\"\n\n### Others\n\nComing soon.\n\n## How It Works\n\nFor each input source file, `golines` runs through the following process:\n\n1. Read the file, break it into lines\n2. Add a specially-formatted annotation (comment) to each line that's longer\n  than the configured maximum\n3. Use [Dave Brophy's](https://github.com/dave) excellent\n  [decorated syntax tree](https://github.com/dave/dst) library to parse the code\n  plus added annotations\n4. Do a depth-first traversal of the resulting tree, looking for nodes\n  that have an annotation on them\n5. If a node is part of a line that's too long, shorten it by altering\n  the newlines around the node and/or its children\n6. Repeat steps 2-5 until no more shortening can be done\n7. Run the base formatter (e.g., `gofmt`) over the results, write these to either\n  `stdout` or the source file\n\nSee [this blog post](https://yolken.net/blog/cleaner-go-code-golines) for more technical details.\n\n## Limitations\n\nThe tool has been tested on a variety of inputs, but it's not perfect. Among\nother examples, the handling of long lines in comments could be improved. If you see\nanything particularly egregious, please report via an issue."
}
