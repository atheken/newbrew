{
  "name": "bingrep",
  "full_name": "bingrep",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Greps through binaries from various OSs and architectures",
  "license": "MIT",
  "homepage": "https://github.com/m4b/bingrep",
  "versions": {
    "stable": "0.11.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/m4b/bingrep/archive/v0.11.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "3012aef73b3ef5e8b100824af0db2131f81771338fec5f9fe47dc71bf3782506"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bingrep/blobs/sha256:349e4cd6b80fc83621693d1e68dd4e5c6ab29aa5259eb76edf8926e22f29e8e5",
          "sha256": "349e4cd6b80fc83621693d1e68dd4e5c6ab29aa5259eb76edf8926e22f29e8e5"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bingrep/blobs/sha256:20e1eb2ccd61e211cd3c6bba229b4ccc15ec3594337e20be2f68a2b141fd22c1",
          "sha256": "20e1eb2ccd61e211cd3c6bba229b4ccc15ec3594337e20be2f68a2b141fd22c1"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bingrep/blobs/sha256:489ea944bbbd2aeb68925d26e2effee5520155564cd031a6294860445b4510c0",
          "sha256": "489ea944bbbd2aeb68925d26e2effee5520155564cd031a6294860445b4510c0"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bingrep/blobs/sha256:8b2e9baa7b521954bea1cecc6c5259808fdff948fa776902a328f18945414b22",
          "sha256": "8b2e9baa7b521954bea1cecc6c5259808fdff948fa776902a328f18945414b22"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bingrep/blobs/sha256:d7c1fa10458fe1fedd754d8b5aa4bc1160abd305cf70078bc1d7e1c9caf385a8",
          "sha256": "d7c1fa10458fe1fedd754d8b5aa4bc1160abd305cf70078bc1d7e1c9caf385a8"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bingrep/blobs/sha256:cdc9b107c8cecaec93dc476ff09a6649c4bf4a9604ee98ce9748d53c71fd9f7b",
          "sha256": "cdc9b107c8cecaec93dc476ff09a6649c4bf4a9604ee98ce9748d53c71fd9f7b"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bingrep/blobs/sha256:0cc509264acdf417f6ae40d102132fddd7ec95c4130c05bfb5d7c4c468f5b3dd",
          "sha256": "0cc509264acdf417f6ae40d102132fddd7ec95c4130c05bfb5d7c4c468f5b3dd"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "2706c66e8def3eeba4d9bf1adf66221c8ad70701",
  "ruby_source_path": "Formula/bingrep.rb",
  "ruby_source_checksum": {
    "sha256": "8b928b8b729b776579641e8eaee0b8dc753ece455e626f255c93b037b62eae7d"
  },
  "date_added": "2019-11-14T10:21:16+01:00",
  "readme": "# bingrep\n\n\n[![Actions][actions-badge]][actions-url]\n[![crates.io version][crates-bingrep-badge]][crates-bingrep]\n\n<!-- Badges' links -->\n\n[actions-badge]: https://github.com/m4b/bingrep/workflows/CI/badge.svg?branch=master\n[actions-url]: https://github.com/m4b/bingrep/actions\n[crates-bingrep-badge]: https://img.shields.io/crates/v/bingrep.svg\n[crates-bingrep]: https://crates.io/crates/bingrep\n\nGreps through binaries from various OSs and architectures, and colors them. Current backends:\n\n* ELF 32/64, arm, x86, openrisc - all others will parse and color, but relocations won't show properly\n* Mach 32/64, arm, x86\n* Unix and BSD archive printer\n* PE (debug only)\n\n**NOTE**: Building requires rustc version 1.20 or greater.  If you're using a distro's rust compiler, consider using https://rustup.rs to install your rustc compiler and associated binaries.\n\n![elf_table2](etc/elf_table2.png)\n\n![elf_table1](etc/elf_table1.png)\n\n![mach](etc/mach.png)\n\n![archive](etc/archive.png)\n\n## Install\n\n`bingrep` is available through cargo, via `cargo install bingrep`, or you can build, and install the resulting binary wherever you like.\n\n## Build\n\nTested with stable rustc 1.38.0.\n\n`cargo build --release`\n\nNow copy the resulting binary in `<path_to_bingrep>/target/release/bingrep` wherever you like.\n\n## Run\n\nExample:\n\n```\nbingrep /bin/ls\n```\n\nTo dump internal debug representation of the parsed binary:\n\n```\nbingrep -d /bin/ls\n```\n\nTo demangle symbols, use `-D` or `--demangle`:\n\n```\nbingrep -D /bin/ls\n```\n\n## Meta Analysis (Experimental)\n\nYou can print a hextable (WIP) via `--hex` or an overview of file offset ranges via `--ranges`.\n\n![ranges](etc/ranges.png)\n\n## Searching\n\nSearch functionality is being added.\n\nYou can try it out using `bingrep --search \"string\" ` or `bingrep -s \"string\"`.  Currently only works for ELF targets.\n\nPlease chime in on https://github.com/m4b/bingrep/issues/13 for how this functionality will:\n\n1. Be presented,\n2. What API will be exposed\n3. What usecases are most important (e.g., how do you like to search binaries)\n4. How it will be implemented\n\n# FAQ\n\n> Why is this repo called bingrep, it's nothing like grep at all\n\nThat's a good question; I was using this as a personal development tool for some time, and I was conferring with someone from the internet about some binary stuff, when I decided I should just upload this to a proper repo instead of sending pictures. So I quickly created a repo, I felt like I had been greppin' through binaries, so that was the name I uploaded.  Even worse, I named it `bg` as the produced executable at the time of the upload, and this of course immediately conflicted with the unix command `bg`. There's an [issue](https://github.com/m4b/bingrep/issues/1) for a better name, you can chime in too!\n\n> Why do you/should I use this instead of X ?\n\nFor some of my projects or workflows I need to very quickly see the load address, offset, or size of a symbol/program header/section header/export/import. I got tired of using objdump/nm/X because really, I just needed to colorize addresses, sizes etc., so I can quickly identify them and move on.  So I wrote this, very quickly, and named it a bad name (sorry!). Then I went totally overboard and started coloring everything, everywhere.  You love it, don't worry. Also you're free to use anything you want, whatever makes you happy and productive!\n\n> Is there anything to work on?\n\nYes, there are several open issues. I think I'd actually like to port the symbol map functionality (which enables printing every binary that exports a symbol) from https://github.com/m4b/rdr, as well as implement a \"reverse symbol map\", which finds every binary that calls/imports a symbol.\n\nIf you also like hacking on binary stuff, the backend this uses, https://github.com/m4b/goblin, is responsible for the actual loading, parsing, etc., and there are several open issues on that repo as well if you feel like contributing."
}
