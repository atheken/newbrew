{
  "name": "libiscsi",
  "full_name": "libiscsi",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Client library and utilities for iscsi",
  "license": "GPL-2.0",
  "homepage": "https://github.com/sahlberg/libiscsi",
  "versions": {
    "stable": "1.19.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/sahlberg/libiscsi/archive/1.19.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "c7848ac722c8361d5064654bc6e926c2be61ef11dd3875020a63931836d806df"
    },
    "head": {
      "url": "https://github.com/sahlberg/libiscsi.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libiscsi/blobs/sha256:f5ed5adac677b700971eaa437336521ad23f85933ee801f3c5f8346b307c3d72",
          "sha256": "f5ed5adac677b700971eaa437336521ad23f85933ee801f3c5f8346b307c3d72"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libiscsi/blobs/sha256:7f54d471025b9eda877c0b0d05c025f59b59413c1421c1335ff3091852e88e65",
          "sha256": "7f54d471025b9eda877c0b0d05c025f59b59413c1421c1335ff3091852e88e65"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libiscsi/blobs/sha256:aa722adc6341c8457b38c0078ab264ae30982b57510967de3e8181088036e0e3",
          "sha256": "aa722adc6341c8457b38c0078ab264ae30982b57510967de3e8181088036e0e3"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libiscsi/blobs/sha256:0e7293f4535f47d206a285a4074fd1054745f6efcd640f4fdf0e90c87c25e906",
          "sha256": "0e7293f4535f47d206a285a4074fd1054745f6efcd640f4fdf0e90c87c25e906"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libiscsi/blobs/sha256:76dcdbb37c5b4c48d997e904f6ab177258733cf4bae91e9fbf897e6208514d4a",
          "sha256": "76dcdbb37c5b4c48d997e904f6ab177258733cf4bae91e9fbf897e6208514d4a"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libiscsi/blobs/sha256:ac06a7b7a74cf83e953f50e33455df97fc87880ebdac4f1dca89a62331375b1a",
          "sha256": "ac06a7b7a74cf83e953f50e33455df97fc87880ebdac4f1dca89a62331375b1a"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libiscsi/blobs/sha256:e33ab94bb94c63eab8836acfe89a677120293eeaf745c29648a03844779a6b4c",
          "sha256": "e33ab94bb94c63eab8836acfe89a677120293eeaf745c29648a03844779a6b4c"
        },
        "mojave": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libiscsi/blobs/sha256:473988c2ba81d9d9cf6eb21f2f3d41ade13e76131a2c2aabdade9983c79f99ed",
          "sha256": "473988c2ba81d9d9cf6eb21f2f3d41ade13e76131a2c2aabdade9983c79f99ed"
        },
        "high_sierra": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libiscsi/blobs/sha256:c05b614ecbacf4f957777c33144924322147b40b898fbb1acf91b72663e35203",
          "sha256": "c05b614ecbacf4f957777c33144924322147b40b898fbb1acf91b72663e35203"
        },
        "sierra": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libiscsi/blobs/sha256:832760665cad678de3079365edc72bc21d946dd03ecff9304220b9972a29dd8c",
          "sha256": "832760665cad678de3079365edc72bc21d946dd03ecff9304220b9972a29dd8c"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/libiscsi/blobs/sha256:fde67504bbf2d6f7097c9f48f817913c601b1d0bfc636409dac21904f7b79a19",
          "sha256": "fde67504bbf2d6f7097c9f48f817913c601b1d0bfc636409dac21904f7b79a19"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "autoconf",
    "automake",
    "libtool"
  ],
  "dependencies": [
    "cunit"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/libiscsi.rb",
  "ruby_source_checksum": {
    "sha256": "48d1da683b97b646df12b8b5aa94cc3e8294eab41d68c23c8e6380e063042b74"
  },
  "date_added": "2013-09-17T21:17:16-07:00",
  "readme": "Libiscsi is a client-side library to implement the iSCSI protocol that can be\nused to access the resources of an iSCSI target.\n\nThe library is fully asynchronous with regards to iSCSI commands and SCSI\ntasks, but a synchronous layer is also provided for ease of use for simpler\napplications.\n\nThe utils directory contains a handful of useful iSCSI utilities such as\nlogging in to and enumerating all targets on a portal and all devices of a\ntarget.\n\nThe examples directory contains example implementation of how to access both\nthe synchronous and asynchronous APIs of libiscsi.\n\nThe test-tool directory contains an iSCSI conformance test suite.\n\nLibiscsi is a work in progress.  It aims to become a fully asynchronous\nlibrary for iSCSI functionality, including all features required to establish\nand maintain an iSCSI session, as well as a low-level SCSI library to create\nSCSI CDBs and parse/unmarshall data-in structures.\n\n\nInstallation\n============\n./autogen.sh\n./configure\nmake\nsudo make install\n\n\nBuild RPM\n=========\nTo build RPMs run the following script from the libiscsi root directory\n./packaging/RPM/makerpms.sh\n\niSCSI URL Format\n================\niSCSI devices are specified by a URL format of the following form :\n    iscsi://[<username>[%<password>]@]<host>[:<port>]/<target-iqn>/<lun>[?<argument>[&<argument>]*]\nor\n    iser://[<username>[%<password>]@]<host>[:<port>]/<target-iqn>/<lun>[?<argument>[&<argument>]*]\n\nArguments:\nUsername and password for bidirectional CHAP authentication:\ntarget_user=<account>\ntarget_password=<password>\nheader_digest=<crc32c|none>\nTransport:\niser\n\n\nExample:\n    iscsi://server/iqn.ronnie.test/1\n\n\nCHAP Authentication\n===================\nCHAP authentication can be specified two ways. Either via the URL itself\nor through environment variables.\n\nNote that when setting it via the URL, be careful so that username/password\nwill not be visible in logfiles or the process list.\n\nURL\n---\nCHAP authentication via URL is specified by providing <username>%<password>@\nin the server part of the URL:\n\nExample:\n    iscsi://ronnie%password@server/iqn.ronnie.test/1\n\nEnvironment variables\n---------------------\nSetting the CHAP authentication via environment variables:\n    LIBISCSI_CHAP_USERNAME=ronnie\n    LIBISCSI_CHAP_PASSWORD=password\n\nExample:\n   LIBISCSI_CHAP_PASSWORD=password iscsi-inq iscsi://ronnie@10.1.1.27/iqn.ronnie.test/1\n\nBidirectional CHAP Authentication\n=================================\n\nBidirectional CHAP is when you not only authenticate the initiator to the\ntarget but also authenticate the target back to the initiator.  This is only\navailable if you also first specify normal authentication as per the previous\nsection.\n\nBidirectional CHAP can be set either via URL arguments or via environment\nvariables. If specifying it via URL arguments, be careful so that you do\nnot leak the username/password via logfiles or the process list or similar.\n\nURL\n---\nURL arguments contain the '&' character so make sure to escape them properly\nif you pass them in via a commandline.\n\nExample:\n    iscsi://127.0.0.1/iqn.ronnie.test/1?target_user=target\\&target_password=target\n\nEnvironment variables\n---------------------\nSetting the CHAP authentication via environment variables:\n    LIBISCSI_CHAP_TARGET_USERNAME=target\n    LIBISCSI_CHAP_TARGET_PASSWORD=password\n\n\nIPv6 support\n============\n\nLibiscsi supports IPv6, either as names resolving into IPv6 addresses or when\nIPv6 addresses are explicitely set in the URL.  When specifying IPv6 addresses\nin the URL, they have to be specified in [...] bracket form.\n\nExample:\n  iscsi://[fec0:2727::3]:3260/iqn.ronnie.test/1\n\n\nHeader Digest\n=============\n\nLibiscsi supports HeaderDigest.  By default, libiscsi will offer None,CRC32C\nand let the target pick whether Header digest is to be used or not.  This can\nbe overridden by an application by calling iscsi_set_header_digest() if the\napplication wants to force a specific setting.\n\n\nPatches\n=======\n\nThe patches subdirectory contains patches to make some external packages\niSCSI-aware and make them use libiscsi.  Currently we have SG3-UTILS and MTX.\nPatches for other packages would be welcome.\n\n\nISCSI-TEST-CU\n=============\niscsi-test-cu is a CUnit based test tool for scsi and iscsi.\n\niscsi-test-cu depends on the CUnit library and will only build if libcunit can\nbe found during configure.\n\nThe configure script will check if a suitable libcunit is available and only\nbuild the test tool if it can find libcunit.\nThis test is done toward the end of the configure phase and should result\nin a line similar to :\n\nchecking whether libcunit is available... yes\n\nTest family/suite/test\n----------------------\nTests are divided up in families, suites and tests and are specified as\n  --test=<family>.<suite>.<test>\n\nA <family> is a logical collection of test suites to cover a broad set\nof functionality. Example families are 'SCSI' for performing all tests for\nSCSI commands and 'iSCSI' that contain tests for the iSCSI layer.\n\nTo run all tests in the SCSI family you can just specify\n  --test=SCSI or --test=SCSI.*.*\n\nThe next layer of tests are the suites. Within a family there are a collection\nof suites that perform test to cover a specific area of functionality.\nFor example, to run all SCSI tests that cover the Read10 opcode you would\nspecify it as\n  --test=SCSI.Read10 or --test=SCSI.Read10.*\n\nFinally at the lowest level you have the individual tests. These tests perform\nspecific topic in a suite.\nFor example, we have tests for the Read10 opcode that verifies that the target\nimplements the DPO/FUA flags properly.\nTo run those tests you would specify\n  --test=SCSI.Read10.DpoFua\n\nTest discovery\n--------------\nTo discover which tests exist you can use the command \n  iscsi-test-cu --list\n\nExamples\n--------\nRun the DpoFua test for Read10\n  iscsi-test-cu --test=SCSI.Read10.DpoFua iscsi://127.0.0.1/iqn.example.test/1\n\nRun all Read10 tests\n  iscsi-test-cu --test=SCSI.Read10 iscsi://127.0.0.1/iqn.example.test/1\n\nRun all SCSI tests for all opcodes\n  iscsi-test-cu --test=SCSI iscsi://127.0.0.1/iqn.example.test/1\n\nInitiator names used by the test suite\n--------------------------------------\nMost tests only require a single login to the target, but some tests,\nfor example the it nexus loss tests may need to login two separate sessions.\nBy default the initiator names use for the logins will be\n\t\"iqn.2007-10.com.github:sahlberg:libiscsi:iscsi-test\";\nfor the primary connection for all tests, and\n\t\"iqn.2007-10.com.github:sahlberg:libiscsi:iscsi-test-2\"\nfor the secondary connection for the test that needs two sessions.\nThese names can be controlled by using the arguments\n--initiator-name and --initiator-name-2\n\nThe tests are all self-documented to describe what they test and how they test.\nUse -V with a test to print the documentation for a test.\n\nXML/JUNIT\n=========\niscsi-test-cu can produce machine-readable test results for consumption by your\nCI server. Use the --xml option with any test suite(s), and a file called\nCUnitAutomated-Results.xml will be written to your current working directory.\nThese results can be converted to JUnit format using this script:\n\nhttps://raw.githubusercontent.com/cyrusimap/cyrus-imapd/master/cunit/cunit-to-junit.pl\n\nSee also:\n\nCUnit-List.xsl\n--------------\nhttps://code.google.com/p/warc-tools/source/browse/trunk/utest/outputs/CUnit-List.xsl\n\nCUnit-Run.xsl\n-------------\nhttps://code.google.com/p/mdflib/source/browse/trunk/cunit/CUnit-Run.xsl\n\n\nLinux SG_IO devices\n-------------------\nWhen used on Linux, the test tool also supports talking directly to local SG_IO\ndevices. Accessing SG_IO devices often require that you are root:\n\n  sudo iscsi-test-cu --test LINUX.Read10.Simple /dev/sg1\n\n\nUnit Tests\n----------\nThe tests directory contains test scripts and programs to verify the\nfunctionality of libiscsi itself. These tests require that you have STGT\nversion 1.0.58 or later installed to use as a taget to test against.\nTo run the tests:\n  cd tests\n  make test\n\n\nSUPPORTED PLATFORMS\n===================\n\nlibiscsi is pure POSIX and should with some tweaks run on any host that\nprovides a POSIX-like environment.\n\nLibiscsi has been tested on:\n* Linux (32 and 64 bit)\n* Cygwin\n* FreeBSD\n* Windows (Win7-VisualStudio10)\n* OpenSolaris\n* Solaris 11 : Use \"gmake\" to build.\n* OS X\n\nRELEASE TARBALLS\n================\n\nRelease tarballs are available at https://github.com/sahlberg/libiscsi/tags.\n\nCONTRIBUTING\n============\n\nIf you want to contribute, please do.  For sending me patches you can either\ndo that by sending a pull request to my github repo or you can send them in an\nemail directly to me at ronniesahlberg@gmail.com\n\n\nMAILINGLIST\n===========\n\nA libiscsi mailing list is available at\nhttp://groups.google.com/group/libiscsi. Announcements of new versions of\nlibiscsi will be posted to this list."
}
