{
  "name": "sql-lint",
  "full_name": "sql-lint",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "SQL linter to do sanity checks on your queries and bring errors back from the DB",
  "license": "MIT",
  "homepage": "https://github.com/joereynolds/sql-lint",
  "versions": {
    "stable": "1.0.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://registry.npmjs.org/sql-lint/-/sql-lint-1.0.0.tgz",
      "tag": null,
      "revision": null,
      "checksum": "0ee3b71d812af3cc809829b663d9cd747996ec76e2b3e49fd3b7a5969398190e"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sql-lint/blobs/sha256:40e19503b278a973ee143e996728f5226235886ff2b1a42b08e63715b6ae2004",
          "sha256": "40e19503b278a973ee143e996728f5226235886ff2b1a42b08e63715b6ae2004"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sql-lint/blobs/sha256:c41585b38889006247a0d7a66278ba037138d2395321031d0ac899892fa19255",
          "sha256": "c41585b38889006247a0d7a66278ba037138d2395321031d0ac899892fa19255"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sql-lint/blobs/sha256:c41585b38889006247a0d7a66278ba037138d2395321031d0ac899892fa19255",
          "sha256": "c41585b38889006247a0d7a66278ba037138d2395321031d0ac899892fa19255"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sql-lint/blobs/sha256:71d7fcfd2c05ff837511c0599ee227e06ecbb49a4a5dc0166f91e765d239e802",
          "sha256": "71d7fcfd2c05ff837511c0599ee227e06ecbb49a4a5dc0166f91e765d239e802"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sql-lint/blobs/sha256:56ec39a2f7cd18626231790aaeab98c6f4d7fa648dc6227cd65884dfdddd3d15",
          "sha256": "56ec39a2f7cd18626231790aaeab98c6f4d7fa648dc6227cd65884dfdddd3d15"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sql-lint/blobs/sha256:56ec39a2f7cd18626231790aaeab98c6f4d7fa648dc6227cd65884dfdddd3d15",
          "sha256": "56ec39a2f7cd18626231790aaeab98c6f4d7fa648dc6227cd65884dfdddd3d15"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sql-lint/blobs/sha256:56ec39a2f7cd18626231790aaeab98c6f4d7fa648dc6227cd65884dfdddd3d15",
          "sha256": "56ec39a2f7cd18626231790aaeab98c6f4d7fa648dc6227cd65884dfdddd3d15"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sql-lint/blobs/sha256:c41585b38889006247a0d7a66278ba037138d2395321031d0ac899892fa19255",
          "sha256": "c41585b38889006247a0d7a66278ba037138d2395321031d0ac899892fa19255"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "node"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/sql-lint.rb",
  "ruby_source_checksum": {
    "sha256": "ce685ab53f4024cc5ab0fca1153b47b5e00d20a606ebb57606ba16caa4704d55"
  },
  "date_added": "2021-07-30T10:34:21+00:00",
  "readme": "# sql-lint\n\n`sql-lint` will do sanity checks on your queries as well as bring errors back from the DB.\nIf you worry about forgetting `WHERE`s on a `DELETE` or borking your data with unexpected characters, then `sql-lint` is for you.\n\n[Read the documentation for a complete walkthrough](https://sql-lint.readthedocs.io/en/latest/files/introduction.html)\n\n![Imgur](https://i.imgur.com/rJ3h34b.png)\n\n![Imgur](https://i.imgur.com/nqi1MnT.gif)\n\n\n## Installation\n\n```\nnpm i -g sql-lint\n# or\nyarn global add sql-lint\n```\n\nOr download a [binary](https://github.com/joereynolds/sql-lint/releases)\n\n## Usage\n\n`sql-lint` works on files, directories and stdin.\n\n```\n# Will lint all .sql files recursively from the current directory\nsql-lint .\n\n# Lints the create-person.sql file\nsql-lint create-person.sql\n\n# Lints stdin\necho 'DELETE FROM person;' | sql-lint\n```\n\n## Programmatically\n\n`sql-lint` can also be used within your js/ts files (though admittedly it's stronger as a cli command).\n\n```\nnpm i sql-lint\n# or\nyarn add sql-lint\n```\n\n```\nimport sqlLint from 'sql-lint'\n\n// using async/await\n\nconst errors = await sqlLint({\n  sql: 'SELECT my_column FROM my_table',\n})\n\n// or using promise\n\nsqlLint({ sql: 'SELECT my_column FROM my_table' }).then(errors => {\n  for (const error of errors) {\n    // do something\n  }\n})\n```\n\n## Supported Editors\n\nIf your editor supports external tools, then it supports `sql-lint`.\nBelow is the list that have direct support for `sql-lint` either through plugins or configuration.\n\n| Editor      | Plugin |\n| ----------- | ----------- |\n| Neovim      | [Ale](https://github.com/dense-analysis/ale/)       |\n| Vim         | [Ale](https://github.com/dense-analysis/ale/)        |\n| VS Code     | [Inline SQL](https://marketplace.visualstudio.com/items?itemName=qufiwefefwoyn.inline-sql-syntax)        |\n\n## Checks\n\nA quick rundown of the checks is below but you should [read the documentation](https://sql-lint.readthedocs.io/en/latest/files/checks.html) \nfor an exhaustive list.\n\n`sql-lint` comes with its own suite of checks. It\nalso returns any errors from the SQL server you have connected to. Generally\nyou'll find that the errors from `sql-lint` are more informative than those from\nthe server. That said, you will still want errors from the server as it covers\nmore cases and will catch things that `sql-lint` does not.\n\n<details>\n  <summary>unmatched-parentheses</summary>\n\nShown when a query has an unbalanced amount of parentheses.\n\n```\ntest/test-files//test.sql:16 [sql-lint: unmatched-parentheses] Unmatched parentheses.\n```\n</details>\n\n<details>\n  <summary>missing-where</summary>\n\nShown when a `DELETE` statement is missing a `WHERE` clause.\n\n```\ntest/test-files/test.sql:20 [sql-lint: missing-where] DELETE statement missing WHERE clause.\n```\n</details>\n\n<details>\n  <summary>invalid-drop-option</summary>\n\nShown when an invalid option is given to the `DROP` statement.\n\n```\ntest/test-files/test.sql:22 [sql-lint: invalid-drop-option] Option 'thing' is not a valid option, must be one of '[\"database\",\"event\",\"function\",\"index\",\"logfile\",\"procedure\",\"schema\",\"server\",\"table\",\"view\",\"tablespace\",\"trigger\"]'.\n```\n</details>\n\n<details>\n  <summary>invalid-create-option</summary>\n\nShown when an invalid option is given to the `CREATE` statement.\n\n```\n:24 [sql-lint: invalid-create-option] Option 'test' is not a valid option, must be one of '[\"algorithm\",\"database\",\"definer\",\"event\",\"function\",\"index\",\"or\",\"procedure\",\"server\",\"table\",\"tablespace\",\"temporary\",\"trigger\",\"user\",\"unique\",\"view\"]'.\n```\n</details>\n\n<details>\n  <summary>invalid-truncate-option</summary>\n\nShown when an invalid option is given to the `TRUNCATE` statement.\n\n```\ntest/test-files/test.sql:26 [sql-lint: invalid-truncate-option] Option 'something' is not a valid option, must be one of '[\"table\"]'.\n```\n</details>\n\n<details>\n  <summary>invalid-alter-option</summary>\n\nShown when an invalid option is given to the `ALTER` statement.\n\n```\ntest/test-files/test.sql:28 [sql-lint: invalid-alter-option] Option 'mlady' is not a valid option, must be one of '[\"column\",\"online\",\"offline\",\"ignore\",\"database\",\"event\",\"function\",\"procedure\",\"server\",\"table\",\"tablespace\",\"view\"]'.\n```\n</details>\n\n<details>\n\n  <summary>odd-code-point</summary>\n\nShown when there are unsupported/unusual* code points in your code.\n\n*<small>This check came about whilst working Microsoft Excel. Microsoft likes to\nadd a lot of zany characters which can subtly break your data without you\nrealising.</small>\n\n```\ntest/test-files//test.sql:30 [sql-lint: odd-code-point] Unexpected code point.\n```\n</details>\n\n<details>\n\n  <summary>\n    invalid-limit-quantifier\n  </summary>\n\nShown when you specify something other than a number to the `LIMIT` statement.\n\n```\ntest/test-files//test.sql:32 [sql-lint: invalid-limit-quantifier] Argument 'test' is not a valid quantifier for LIMIT clause.\n```\n</details>\n\n<details>\n\n<summary>\nhungarian-notation\n</summary>\n\nShown when the string `sp_` or `tbl_` is present in the query.\n\n```\ntest/test-files/test.sql:34 [sql-lint: hungarian-notation] Hungarian notation present in query\n```\n</details>\n\n<details>\n<summary>\ntrailing-whitespace\n</summary>\n\nShown when a query has trailing whitespace.\n\n```\ntest/test-files/test.sql:34 [sql-lint: trailing-whitespace] Trailing whitespace\n```\n</details>\n\n## Documentation\n\nTo find out more, [read the documentation](https://sql-lint.readthedocs.io/)"
}
