{
  "name": "geoip",
  "full_name": "geoip",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [
    "libgeoip"
  ],
  "versioned_formulae": [],
  "desc": "This library is for the GeoIP Legacy format (dat)",
  "license": "LGPL-2.1-or-later",
  "homepage": "https://github.com/maxmind/geoip-api-c",
  "versions": {
    "stable": "1.6.12",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/maxmind/geoip-api-c/releases/download/v1.6.12/GeoIP-1.6.12.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "1dfb748003c5e4b7fd56ba8c4cd786633d5d6f409547584f6910398389636f80"
    },
    "head": {
      "url": "https://github.com/maxmind/geoip-api-c.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 2,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/geoip/blobs/sha256:40ef31c663a905f3786b8e410f651ee97cc0ae805d7c22d52c20b9c518ba12ba",
          "sha256": "40ef31c663a905f3786b8e410f651ee97cc0ae805d7c22d52c20b9c518ba12ba"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/geoip/blobs/sha256:c2ae63b815cc930a90d57c78a1d7a51a57085d67aa20431db716982353a950b2",
          "sha256": "c2ae63b815cc930a90d57c78a1d7a51a57085d67aa20431db716982353a950b2"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/geoip/blobs/sha256:fd8787e3b88f91d97504992874d3fd358c6865e03fc19c5123b8e7f1a691f0dd",
          "sha256": "fd8787e3b88f91d97504992874d3fd358c6865e03fc19c5123b8e7f1a691f0dd"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/geoip/blobs/sha256:8fea8cddc3695facc75949f58d6c6b71763cc85be37cfe812f58591234e6f0e6",
          "sha256": "8fea8cddc3695facc75949f58d6c6b71763cc85be37cfe812f58591234e6f0e6"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/geoip/blobs/sha256:f441710caf103a53272a50e4720f1885f858986c6306fcc4a078ef8d193cca59",
          "sha256": "f441710caf103a53272a50e4720f1885f858986c6306fcc4a078ef8d193cca59"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/geoip/blobs/sha256:a3bcb8d9c69277cb943fa30f00715325ee1c4f0c3e9aeb58e0c4a288f6705313",
          "sha256": "a3bcb8d9c69277cb943fa30f00715325ee1c4f0c3e9aeb58e0c4a288f6705313"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/geoip/blobs/sha256:140477567aa37b0418e1976bdc5f75bc0f933405c157e7170ae3441ee3fc74aa",
          "sha256": "140477567aa37b0418e1976bdc5f75bc0f933405c157e7170ae3441ee3fc74aa"
        },
        "mojave": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/geoip/blobs/sha256:e10d69d8595116bdb562b0ede63d7bd04f606c66becd3c03fb1e6d06ba99a964",
          "sha256": "e10d69d8595116bdb562b0ede63d7bd04f606c66becd3c03fb1e6d06ba99a964"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/geoip/blobs/sha256:fb045793a66f36a2737a3bdc3c8513c5822702778c223123dceceff61e847080",
          "sha256": "fb045793a66f36a2737a3bdc3c8513c5822702778c223123dceceff61e847080"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": true,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/geoip.rb",
  "ruby_source_checksum": {
    "sha256": "e5393cbf7277f1dc2336e1bed3f3afa38f38ee174cc9c9b7cdd22b2b50b52fa3"
  },
  "date_added": "2009-10-03T13:25:23+01:00",
  "readme": "# GeoIP Legacy C Library #\n\n## End of Life ##\n\nMaxMind will be retiring the GeoIP Legacy databases at the end of May\n2022. Until then, this library will only receive critical security and bug\nfixes. Support for this library will end completely with the last release of\nthe legacy GeoIP databases.\n\nWe recommend that you upgrade to our GeoIP2 databases. You can read these\nfrom C using [libmaxminddb](https://github.com/maxmind/libmaxminddb).\n\nSee [our blog post](https://blog.maxmind.com/2020/06/01/retirement-of-geoip-legacy-downloadable-databases-in-may-2022/)\nfor more information.\n\n## Description ##\n\nThe GeoIP Legacy C library enables the user to find geographical and network\ninformation of an IP address. To use this library, you may user our commercial\nGeoIP Legacy databases. For more details, see:\n\nhttps://www.maxmind.com/en/geoip2-services-and-databases\n\n## IP Geolocation Usage ##\n\nIP geolocation is inherently imprecise. Locations are often near the center of\nthe population. Any location provided by a GeoIP database should not be used to\nidentify a particular address or household.\n\n## Installation ##\n\n### On Ubuntu Using PPA ###\n\nMaxMind provides a PPA for recent version of Ubuntu. To add the PPA to your\nAPT sources, run:\n\n    $ sudo add-apt-repository ppa:maxmind/ppa\n\nThen install the packages by running:\n\n    $ sudo apt update\n    $ sudo apt install libgeoip1 libgeoip-dev geoip-bin\n\n### From Source on Unix/Linux ###\n\nTo install, run:\n\n```\n./configure\nmake\nmake check\nmake install\n```\n\nIf you are using a GitHub checkout, please run the `bootstrap` script first\nto set up the build environment.\n\nThe GeoIP Legacy C library relies on GNU make, not on BSD make\n\n### From Source with Visual Studio (nmake) ###\n\nTo make a static GeoIP.lib, edit the top level Makefile.vc to reflect where\nthe GeoIP.dat database file should be placed, as well as the locations of the\nlib, include, and bin directories for installation.\n\nTo build and install, issue the following commands from a developer console:\n\n```\nnmake /f Makefile.vc\nnmake /f Makefile.vc test\nnmake /f Makefile.vc install\n```\n\n### From Source with MinGW ###\n\n```\n./configure\nmake\ncp data/GeoIP.dat test/\nmake check\n```\n\nNote that GeoIP.dat file should be placed in the same place as GeoIP-enabled\nexecutable modules.\n\n## Memory Caching and Other Options ##\n\nThere are five options available:\n\n* `GEOIP_STANDARD` - Read database from file system. This uses the least\n  memory.\n* `GEOIP_MEMORY_CACHE` - Load database into memory. Provides faster\n  performance but uses more memory.\n* `GEOIP_CHECK_CACHE` - Check for updated database. If database has been\n  updated, reload file handle and/or memory cache.\n* `GEOIP_INDEX_CACHE` - Cache only the the most frequently accessed index\n  portion of the database, resulting in faster lookups than `GEOIP_STANDARD`,\n  but less memory usage than `GEOIP_MEMORY_CACHE`. This is useful for larger\n  databases such as GeoIP Legacy Organization and GeoIP Legacy City. Note: for\n  GeoIP Legacy Country, Region and Netspeed databases, `GEOIP_INDEX_CACHE` is\n  equivalent to `GEOIP_MEMORY_CACHE`.\n* `GEOIP_MMAP_CACHE` - Load database into mmap shared memory. MMAP is not\n  available for 32bit Windows.\n* `GEOIP_SILENCE` - Disables diagnostic messages to stderr in the library;\n  error conditions are detectable via the return values.\n\nThese options can be combined using bit operators. For example you can\nuse both `GEOIP_MEMORY_CACHE` and `GEOIP_CHECK_CACHE by calling`:\n\n```c\nGeoIP_open(\"/path/to/GeoIP.dat\", GEOIP_MEMORY_CACHE | GEOIP_CHECK_CACHE);\n```\n\nBy default, the city name is returned in the ISO-8859-1 charset. To obtain\nthe city name in UTF-8 instead, run:\n\n```c\nGeoIP_set_charset(gi, GEOIP_CHARSET_UTF8);\n```\n\nTo get the netmask of the netblock of the last lookup, use\n`GeoIP_last_netmask(gi)`.\n\n## Examples ##\n\nSee the following files for examples of how to use the API:\n\n```\ntest/\n     test-geoip.c\n     test-geoip-region.c\n     test-geoip-city.c\n     test-geoip-isp.c\n     test-geoip-org.c\n     test-geoip-netspeed.c\n```\n\nThese example programs use our [GeoIP Legacy databases](https://www.maxmind.com/en/geoip2-services-and-databases).\n\n## Troubleshooting ##\n\n### Autotool Issues ###\nIn case of trouble building from source with libtool or autotools, update\nthe generated configuration files by running:\n\n```\n./bootstrap\n```\nor\n\n```\nautoreconf -vfi\n```\nor\n```\naclocal && autoconf && automake --add-missing\n```\n\n### Threads\n\nLookups are thread safe, but libGeoIP does not guard the functions. Do not\ndrop or change the GeoIP database if other threads might be using the\ndatabase.\n\nThe recommended pattern is:\n\n1. open database with GEOIP_MEMORY_CACHE\n2. create_threads(your_thread_entry_function)\n3. use the database\n4. join_threads\n5. close database\n\n### Thread Safety on Windows ###\n\nThe Windows build is not thread-safe in STANDARD mode because the `pread` is\nnot thread-safe.\n\n### Other Build Issues ###\n\nIf you run into trouble building your application with GeoIP Legacy support,\ntry adding `-fms-extensions` to your `CFLAGS`. If you use Solaris and the\ndefault C compiler, use `-features=extensions` instead. These options enable\nunnamed union support to fix problems like: `improper member use: dma_code` or\n`'GeoIPRecord' has no member named 'dma_code'`.\n\nNote that it is recommended that you use GNU make. Also, if you are using\nOpenBSD, this library requires OpenBSD 3.1 or greater.\n\nIf you get a \"cannot load shared object file: No such file or directory\"\nerror, add the directory `libGeoIP.so` was installed to the `/etc/ld.so.conf`\nfile and run `ldconfig`.\n\n#### Solaris ####\n\nOn Solaris, if you get a `ld: fatal: relocations remain against allocatable\nbut non-writable sections`, try running:\n\n```\nmake clean\n./configure --disable-shared\nmake\n```\n\nIf you get a `ar : command not found` error, make sure that `ar` is in your\npath. On Solaris, `ar` is typically found in `/usr/ccs/bin`\n\n\n#### AIX ####\n\nIf you get a `passing argument 3 of 'gethostbyname_r' from incompatible\npointer type` error on AIX, untar a fresh copy of this library and delete the\nfollowing two lines from `./configure`:\n\n```\n#define HAVE_GETHOSTBYNAME_R 1\n\n#define GETHOSTBYNAME_R_RETURNS_INT 1\n```\n\nthen save the configure script and build it as usual:\n\n```\n./configure\nmake\nsudo make install\n```\n\n## Bug Tracker ##\n\nPlease report all issues with this code using the \n[GitHub issue tracker](https://github.com/maxmind/geoip-api-c/issues).\n\nIf you are having an issue with a MaxMind database that is not specific to\nthis API, please \n[contact MaxMind support](https://www.maxmind.com/en/support).\n\n## Contributing ##\n\nTo contribute, please submit a pull request on\n[GitHub](https://github.com/maxmind/geoip-api-c/)."
}
