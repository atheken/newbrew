{
  "name": "certstrap",
  "full_name": "certstrap",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Tools to bootstrap CAs, certificate requests, and signed certificates",
  "license": "Apache-2.0",
  "homepage": "https://github.com/square/certstrap",
  "versions": {
    "stable": "1.3.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/square/certstrap/archive/v1.3.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "4b32289c20dfad7bf8ab653c200954b3b9981fcbf101b699ceb575c6e7661a90"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/certstrap/blobs/sha256:c5d6395c92d4c7e13c3f56b8d9e6a640583fa3644321093850cb106af2e91877",
          "sha256": "c5d6395c92d4c7e13c3f56b8d9e6a640583fa3644321093850cb106af2e91877"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/certstrap/blobs/sha256:cd72ace92ab23822ee98e6e0a374132f17b24ed473029266918891a4c6eea074",
          "sha256": "cd72ace92ab23822ee98e6e0a374132f17b24ed473029266918891a4c6eea074"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/certstrap/blobs/sha256:10cf4c0c8f42e97dac415a9ec0e34f8948a2c94602498e0125efc71ae038a553",
          "sha256": "10cf4c0c8f42e97dac415a9ec0e34f8948a2c94602498e0125efc71ae038a553"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/certstrap/blobs/sha256:9c310c91576bc1115ed87292c77f1eeb073d9d29551ddc0a035a10c184a5507d",
          "sha256": "9c310c91576bc1115ed87292c77f1eeb073d9d29551ddc0a035a10c184a5507d"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/certstrap/blobs/sha256:f5a6dd11e17cddf336dcbf0a89da75c5e0d96eeae71bd96377ecdc353bbd6d65",
          "sha256": "f5a6dd11e17cddf336dcbf0a89da75c5e0d96eeae71bd96377ecdc353bbd6d65"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/certstrap/blobs/sha256:d97b07034dafd41e77947288ec901c169c2afbe12e302e30a188f55a5f6050b0",
          "sha256": "d97b07034dafd41e77947288ec901c169c2afbe12e302e30a188f55a5f6050b0"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/certstrap/blobs/sha256:bc00650c04cae6f16bf49b6fe7f22db094fe8c948b39a1cf3ae1bebeaf4ba8a2",
          "sha256": "bc00650c04cae6f16bf49b6fe7f22db094fe8c948b39a1cf3ae1bebeaf4ba8a2"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/certstrap/blobs/sha256:87ccd6d8769ae051ec3c65a3072f704be545747acdd3c0f31a6326c1467ed50a",
          "sha256": "87ccd6d8769ae051ec3c65a3072f704be545747acdd3c0f31a6326c1467ed50a"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/certstrap.rb",
  "ruby_source_checksum": {
    "sha256": "554c941904cd65ea9d1f4c76f0e5d46a07666cddc695d2d487e0383a1dd306c6"
  },
  "date_added": "2016-04-05T10:27:09-04:00",
  "readme": "# certstrap\n[![godoc](http://img.shields.io/badge/godoc-certstrap-blue.svg?style=flat)](https://godoc.org/github.com/square/certstrap)\n[![CI](https://github.com/square/certstrap/actions/workflows/go.yml/badge.svg)](https://github.com/square/certstrap/actions/workflows/go.yml)\n[![license](http://img.shields.io/badge/license-apache_2.0-red.svg?style=flat)](https://raw.githubusercontent.com/square/certstrap/master/LICENSE)\n\nA simple certificate manager written in Go, to bootstrap your own certificate authority and public key infrastructure.  Adapted from etcd-ca.\n\ncertstrap is a very convenient app if you don't feel like dealing with openssl, its myriad of options or config files.\n\n## Common Uses\n\ncertstrap allows you to build your own certificate system:\n\n1. Initialize certificate authorities\n2. Create identities and certificate signature requests for hosts\n3. Sign and generate certificates\n\n## Certificate architecture\n\ncertstrap can init multiple certificate authorities to sign certificates with.  Users can make arbitrarily long certificate chains by using signed hosts to sign later certificate requests, as well.\n\n## Examples\n\n## Getting Started\n\n### Building\n\ncertstrap must be built with Go 1.18+. You can build certstrap from source:\n\n```\n$ git clone https://github.com/square/certstrap\n$ cd certstrap\n$ go build\n```\n\nThis will generate a binary called `certstrap` under project root folder.\n\n### Initialize a new certificate authority:\n\n```\n$ ./certstrap init --common-name \"CertAuth\"\nCreated out/CertAuth.key\nCreated out/CertAuth.crt\nCreated out/CertAuth.crl\n```\n\nNote that the `-common-name` flag is required, and will be used to name output files.\n\nMoreover, this will also generate a new keypair for the Certificate Authority,\nthough you can use a pre-existing private PEM key with the `-key` flag.\n\nIf the CN contains spaces, certstrap will change them to underscores in the filename for easier use.  The spaces will be preserved inside the fields of the generated files:\n\n```\n$ ./certstrap init --common-name \"Cert Auth\"\nCreated out/Cert_Auth.key\nCreated out/Cert_Auth.crt\nCreated out/Cert_Auth.crl\n```\n\n### Request a certificate, including keypair:\n\n```\n$ ./certstrap request-cert --common-name Alice\nCreated out/Alice.key\nCreated out/Alice.csr\n```\n\ncertstrap requires either `-common-name` or `-domain` flag to be set in order to generate a certificate signing request.  The CN for the certificate will be found from these fields.\n\nIf your server has mutiple ip addresses or domains, use comma seperated ip/domain/uri list. eg: `./certstrap request-cert -ip $ip1,$ip2 -domain $domain1,$domain2 -uri $uri1,$uri2`\n\nIf you do not wish to generate a new keypair, you can use a pre-existing private\nPEM key with the `-key` flag\n\n### Sign certificate request of host and generate the certificate:\n\n```\n$ ./certstrap sign Alice --CA CertAuth\nCreated out/Alice.crt from out/Alice.csr signed by out/CertAuth.key\n```\n\n#### PKCS Format:\nIf you'd like to convert your certificate and key to PKCS12 format, simply run:\n```\n$ openssl pkcs12 -export -out outputCert.p12 -inkey inputKey.key -in inputCert.crt -certfile CA.crt\n```\n`inputKey.key` and `inputCert.crt` make up the leaf private key and certificate pair of your choosing (generated by a `sign` command), with `CA.crt` being the certificate authority certificate that was used to sign it.  The output PKCS12 file is `outputCert.p12`\n\n### Key Algorithms:\nCertstrap supports curves P-224, P-256, P-384, P-521, and Ed25519. Curve names can be specified by name as part of the `init` and `request_cert` commands:\n\n```\n$ ./certstrap init --common-name CertAuth --curve P-256\nCreated out/CertAuth.key\nCreated out/CertAuth.crt\nCreated out/CertAuth.crl\n\n$ ./certstrap request-cert --common-name Alice --curve P-256\nCreated out/Alice.key\nCreated out/Alice.csr\n```\n\n### Retrieving Files\n\nOutputted key, request, and certificate files can be found in the depot directory.\nBy default, this is in `out/`\n\n\n## Project Details\n\n### Contributing\n\nSee [CONTRIBUTING](CONTRIBUTING.md) for details on submitting patches.\n\n### License\n\ncertstrap is under the Apache 2.0 license. See the [LICENSE](LICENSE) file for details."
}
