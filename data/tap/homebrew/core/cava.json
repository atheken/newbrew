{
  "name": "cava",
  "full_name": "cava",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Console-based Audio Visualizer for ALSA",
  "license": "MIT",
  "homepage": "https://github.com/karlstav/cava",
  "versions": {
    "stable": "0.8.3",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/karlstav/cava/archive/0.8.3.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "ce7378ababada5a20fa8250c6b3fe6412bc1a7dd31301a52b8b4a71d362875b9"
    },
    "head": {
      "url": "https://github.com/karlstav/cava.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cava/blobs/sha256:d9dfab68c25b0611aefcc14a14536f854a0794d4ca8f11208dfed9ab6c26f570",
          "sha256": "d9dfab68c25b0611aefcc14a14536f854a0794d4ca8f11208dfed9ab6c26f570"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cava/blobs/sha256:2f5e951e4c9c6fbd64ddd4403c33b48c7367e03c8f0d8f1acb4cb27fc7b72dfd",
          "sha256": "2f5e951e4c9c6fbd64ddd4403c33b48c7367e03c8f0d8f1acb4cb27fc7b72dfd"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cava/blobs/sha256:458780bb7131958baa5b9abe176cb52c3082a403fb5bbc91fffdae6570b8c9d1",
          "sha256": "458780bb7131958baa5b9abe176cb52c3082a403fb5bbc91fffdae6570b8c9d1"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cava/blobs/sha256:f67fbbd62edc1b8e6ed8a2d24c0d43bf0a9e7f6e2a57d94df495abb9bde36645",
          "sha256": "f67fbbd62edc1b8e6ed8a2d24c0d43bf0a9e7f6e2a57d94df495abb9bde36645"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cava/blobs/sha256:c19ebbd4247a0a705ff515fbd69da8606b5803cfca8e9e1b55424f6cbbb444e5",
          "sha256": "c19ebbd4247a0a705ff515fbd69da8606b5803cfca8e9e1b55424f6cbbb444e5"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cava/blobs/sha256:ac96c19d44f043541d965ab4b44196c598c64b404dbbc9463bd40489b6859c94",
          "sha256": "ac96c19d44f043541d965ab4b44196c598c64b404dbbc9463bd40489b6859c94"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cava/blobs/sha256:195e10dc98dc6070ef4a876618b66f73217cd85da70089e5d9202ff7dd996991",
          "sha256": "195e10dc98dc6070ef4a876618b66f73217cd85da70089e5d9202ff7dd996991"
        },
        "x86_64_linux": {
          "cellar": "/home/linuxbrew/.linuxbrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/cava/blobs/sha256:7281c3eb4ae6ec6535148729c725978c88bc45655b357e4b9d983b24f8556e0d",
          "sha256": "7281c3eb4ae6ec6535148729c725978c88bc45655b357e4b9d983b24f8556e0d"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "autoconf",
    "automake",
    "libtool"
  ],
  "dependencies": [
    "fftw",
    "iniparser",
    "portaudio"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    {
      "vim": "build"
    },
    "ncurses"
  ],
  "uses_from_macos_bounds": [
    {},
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/cava.rb",
  "ruby_source_checksum": {
    "sha256": "3a3cf758662382a1e2e60917d6b655979b1bd31ba540a732bccf9a17910cf588"
  },
  "date_added": "2021-11-27T18:52:53+00:00",
  "readme": "CAVA [![Build Status](https://github.com/karlstav/cava/workflows/build-and-test/badge.svg)](https://github.com/karlstav/cava/actions)\n====================\n\n**C**ross-platform **A**udio **V**isu**a**lizer\n\nby [Karl Stavestrand](mailto:karl@stavestrand.no)\n\n![spectrum](https://github.com/karlstav/cava/blob/master/example_files/cava.gif \"spectrum\")\n\n[Demo video](https://youtu.be/9PSp8VA6yjU)\n\n- [What it is](#what-it-is)\n- [Installing](#installing)\n  - [From Source](#from-source)\n  - [Package managers](#package-managers)\n- [Capturing audio](#capturing-audio)\n  - [Pulseaudio](#pulseaudio)\n  - [Pipewire](#pipewire)\n  - [ALSA](#alsa)\n  - [MPD](#mpd)\n  - [sndio](#sndio)\n  - [squeezelite](#squeezelite)\n  - [macOS](#macos-1)\n  - [Windows](#windows)\n- [Running via ssh](#running-via-ssh)\n- [Troubleshooting](#troubleshooting)\n- [Usage](#usage)\n  - [Controls](#controls)\n- [Configuration](#configuration)\n- [Using cava in other applications](#using-cava-in-other-applications)\n  - [cavacore](#cavacore-library)\n  - [Raw Output](#raw-output)\n- [Contribution](#contribution)\n\n\n\nWhat it is\n----------\n\nCava is a bar spectrum audio visualizer for terminal (ncurses) or desktop (SDL).\n\nworks on:\n* Linux\n* FreeBSD\n* macOS\n* Windows\n\nThis program is not intended for scientific use. It's written to look responsive and aesthetic when used to visualize music. \n\n\nInstalling\n------------------\n\n### From Source\n\n#### Installing Build Requirements\n\nRequired components:\n* [FFTW](http://www.fftw.org/)\n* libtool\n* automake\n* autoconf-archive (needed for setting up OpenGL)\n* pkgconf\n* build-essentials\n* [iniparser](https://github.com/ndevilla/iniparser)\n\n\nRecomended components:\n* [ncursesw dev files](http://www.gnu.org/software/ncurses/) (bundled in ncurses in arch)\n\nThe development lib of one of these audio frameworks, depending on your distro:\n* ALSA\n* Pulseaudio\n* Pipewire\n* Portaudio\n* Sndio\n\nOptional components:\n* SDL2 dev files\n\nOnly FFTW and the other build tools are actually required for CAVA to compile, but this will only give you the ability to read from fifo files. To more easly grab audio from your system pulseaudio, alsa, sndio or portaudio dev files are recommended (depending on what audio system you are using). Not sure how to get the pulseaudio dev files for other distros than debian/ubuntu or if they are bundled in pulseaudio. \n\n\nFor better a better visual experience ncurses is also recomended.\n\nAll the requirements can be installed easily in all major distros:\n\nDebian/Ubuntu:\n\n    sudo apt install build-essential libfftw3-dev libasound2-dev libncursesw5-dev libpulse-dev libtool automake autoconf-archive libiniparser-dev libsdl2-2.0-0 libsdl2-dev libpipewire-0.3-dev pkgconf\n\n\nArchLinux:\n\n    pacman -S base-devel fftw ncurses alsa-lib iniparser pulseaudio autoconf-archive pkgconf\n\n\nopenSUSE:\n\n    zypper install alsa-devel ncurses-devel fftw3-devel libpulse-devel libtool autoconf-archive pkgconf\n\n\nFedora:\n\n    dnf install alsa-lib-devel ncurses-devel fftw3-devel pulseaudio-libs-devel libtool autoconf-archive iniparser-devel pkgconf\n\n    \nmacOS:\n\nFirst install homebrew if you have't already:\n\n    /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\nThen install prerequisites:\n\n    brew install fftw ncurses libtool automake autoconf-archive pkgconf portaudio iniparser\n    \nThe installation location for Homebrew packages is different between Intel Macs and Apple Silicon Macs.\nAs such, the commands will be a little bit different.\nYou can find out which type you have [here](https://support.apple.com/en-us/HT211814#:~:text=To%20open%20About%20This%20Mac,as%20an%20Intel%2Dbased%20Mac.)\n\nFor both machines, run these commands to fix macOS not finding libtool and ncursesw:\n\n    export LIBTOOL=`which glibtool`\n    export LIBTOOLIZE=`which glibtoolize`\n    ln -s `which glibtoolize` /usr/local/bin/libtoolize\n\nOn an Intel Mac, run the following command as well:\n\n    ln -s /usr/lib/libncurses.dylib /usr/local/lib/libncursesw.dylib\n\nOn an Apple Silicon Mac, run this command instead:\n\n    ln -s /opt/homebrew/lib/lib/libncursesw.6.dylib /usr/local/lib/libncursesw.dylib\n\nNote that the file name may be a little bit different depending on the versions, but the directory should be the same.\n\nAdditionally, run these commands on Apple Silicon Macs so that ./configure can find the Homebrew packages:\n\n    export LDFLAGS=\"-L/opt/homebrew/lib\"\n    export CPPFLAGS=\"-I/opt/homebrew/include\"\n\nIntel Mac instructions tested on macOS Big Sur.\n\nApple Silicon instructions tested on macOS Ventura.\n\n\nWindows:\n\nsee separate readme in `cava_win` folder.\n\n#### Building\n First of all clone this repo and cd in to it, then run:\n \n    ./autogen.sh\n    ./configure\n    make\n\nIf you have a recommended component installed, but do not wish to use it (perhaps if building a binary on one machine to be used on another), then the corresponding feature can be disabled during configuration (see configure --help for details).\n\nFor windows there is a VS solution file in the `cava_win` folder.\n    \n#### Installing \n\nInstall `cava` to default `/usr/local`:\n\n    make install\n\nOr you can change `PREFIX`, for example:\n\n   ./configure --prefix=PREFIX\n\n#### Uninstalling\n\n    make uninstall\n\n\n### Package managers\n\nAll distro specific instalation sources might be out of date. Please check version before reporting any issues here.\n\n\n#### openSUSE\n\nTumbleweed users have cava in their repo. They can just use:\n\n    zypper in cava\n\nLeap users need to add the multimedia:apps repository first:\n\n    zypper ar -f obs://multimedia:apps/openSUSE_Leap_42.2 multimedia\n\nIf you use another version just replace *openSUSE_Leap_42.2* with *openSUSE_13.2*, adjust it to your version.\n\n#### Fedora\n\nCava is available in Fedora 26 and later.  You can install Cava by\nrunning:\n\n    dnf install cava\n\n#### Arch\n\nCava is in [AUR](https://aur.archlinux.org/packages/cava/).\n\n    pacaur -S cava\n\n#### Ubuntu/Debian\n\n##### Ubuntu 20.10 or more recent / Debian (unstable)\n\n    sudo apt install cava\n    \n##### Older Ubuntu\n\nHarshal Sheth has added CAVA to his PPA, it can be installed with:\n\n    add-apt-repository ppa:hsheth2/ppa\n    apt update\n    apt install cava\n    \n#### macOS\n\ncava is in homebrew.\n\n    brew install cava\n\n\n\nCapturing audio\n---------------\n\n### Pulseaudio\n\nJust make sure you have installed pulseaudio dev files and that cava has been built with pulseaudio support (it should be automatically if the dev files are found).\n\nIf you're lucky all you have to do is to run cava.\n \nIf nothing happens you might have to use a different source than the default. The default might also be your microphone. Look at the [config](#configuration) file for help. \n\n\n### Pipewire\n\nSet\n\n    method = pipewire\n\nThe default source is `auto` and will most likely be your currently selected output.\nIf you run wireplumber you can use `wpctl` to get the `object.path` or `object.serial` of the desired device to visualize.\n\ne.g.\n\n    source = alsa:pcm:3:front:3:playback\n\n\n### ALSA\n\nSet\n\n    method = alsa\n\nin the [config](#configuration) file.\n\nALSA can be difficult because there is no native way to grab audio from an output. If you want to capture audio straight fom the output (not just mic or line-in), you must create an ALSA loopback interface, then output the audio simultaneously to both the loopback and your normal interface.\n\nTo create a loopback interface simply run:\n\n`sudo modprobe snd_aloop`\n\nHopefully your `aplay -l` should now contain a loopback interface.\n\nTo make it persistent across boot add the line `snd-aloop` to \"/etc/modules\". To keep it from being loaded as the first soundcard add the line `options snd-aloop index=1` to \"/etc/modprobe.d/alsa-base.conf\", this will load it at '1'. You can replace '1' with whatever makes most sense in your audio setup.\n\nPlaying the audio through your Loopback interface makes it possible for cava to capture it, but there will be no sound in your speakers. In order to play audio on the loopback interface and your actual interface you must make use of the ALSA multi channel.\n\nLook at the included example file `example_files/etc/asound.conf` on how to use the multi channel. I was able to make this work on my laptop (an Asus UX31 running Ubuntu), but I had no luck with the ALSA method on my Raspberry Pi (Rasbian) with an USB DAC. The PulseAudio method however works perfectly on my Pi. \n\nRead more about the ALSA method [here](http://stackoverflow.com/questions/12984089/capture-playback-on-play-only-sound-card-with-alsa).\n\nIf you are having problems with the alsa method on Rasberry PI, try enabling `mmap` by adding the following line to `/boot/config.txt` and reboot:\n\n```\ndtoverlay=i2s-mmap\n```\n\n### mpd\n\nAdd these lines in mpd:\n\n    audio_output {\n        type                    \"fifo\"\n        name                    \"my_fifo\"\n        path                    \"/tmp/mpd.fifo\"\n        format                  \"44100:16:2\"\n    }\n\nUncomment and change input method to `fifo` in the [config](#configuration) file.\n\nThe path of the fifo can be specified with the `source` parameter.\n\nI had some trouble with sync (the visualizer was ahead of the sound). Reducing the ALSA buffer in mpd fixed it:\n\n    audio_output {\n            type            \"alsa\"\n            name            \"My ALSA\"\n            buffer_time     \"50000\"   # (50ms); default is 500000 microseconds (0.5s)\n    }\n\n### sndio\n\nsndio is the audio framework used on OpenBSD, but it's also available on\nFreeBSD and Linux. So far this is only tested on FreeBSD.\n\nTo test it\n```bash\n# Start sndiod with a monitor sub-device\n$ sndiod -dd -s default -m mon -s monitor\n\n# Set the AUDIODEVICE environment variable to override the default\n# sndio device and run cava\n$ AUDIODEVICE=snd/0.monitor cava\n```\n\n### squeezelite\n[squeezelite](https://en.wikipedia.org/wiki/Squeezelite) is one of several software clients available for the Logitech Media Server. Squeezelite can export its audio data as shared memory, which is what this input module uses.\nJust adapt your [config](#configuration):\n```\nmethod = shmem\nsource = /squeezelite-AA:BB:CC:DD:EE:FF\n```\nwhere `AA:BB:CC:DD:EE:FF` is squeezelite's MAC address (check the LMS Web GUI (Settings>Information) if unsure).\nNote: squeezelite must be started with the `-v` flag to enable visualizer support.\n\n### macOS\n\nNote: Cava doesn't render correctly within the default macOS terminal. In order to achieve an optimal display, install [Kitty](https://sw.kovidgoyal.net/kitty/index.html). Beware that you may run in to the issue presented in #109; however, it can be resolved with [this](https://stackoverflow.com/questions/7165108/in-os-x-lion-lang-is-not-set-to-utf-8-how-to-fix-it).\n\n**Background Music**\n\nInstall [Background Music](https://github.com/kyleneideck/BackgroundMusic) which provides a loopback interface automatically. Once installed and running just edit your [config](#configuration) to use this interface with portaudio:\n\n```\nmethod = portaudio\nsource = \"Background Music\"\n```\n\n**Sound Flower**\n\n[Soundflower](https://github.com/mattingalls/Soundflower) also works to create a loopback interface. Use Audio MIDI Setup to configure a virtual interface that outputs audio to both your speakers and the loopback interface, following [this](https://github.com/RogueAmoeba/Soundflower-Original/issues/44#issuecomment-151586106) recipe. By creating a multi-output device you lose the ability to control the volume on your keyboard. Because of this, we recommend the Background Music app which still gives you keyboard controls.\n\nThen edit your [config](#configuration) to use this interface with portaudio:\n\n```\nmethod = portaudio\nsource = \"Soundflower (2ch)\"\n```\n\n### Windows\n\nShould capture the audio from the default output device automatically.\n\n\nRunning via ssh\n---------------\n\nTo run via ssh to an external monitor, redirect output to `/dev/console`:\n\n     ~# ./cava  <> /dev/console >&0 2>&1\n\nexit with ctrl+z then run 'bg' to keep it running after you log out.\n\n(You must be root to redirect to console. Simple sudo is not enough: Run `sudo su` first.)\n\n\n## Troubleshooting\n\n### No bars in terminal\n\nMost likley issue [#399](https://github.com/karlstav/cava/issues/399). Locale settings need to be set correctly in order for cava to work.\n\n### Visualizer reacts to microphone instead of output\n\nThis is a known issue with pipewire. Try the workaround described [here](https://github.com/karlstav/cava/issues/422#issuecomment-994270910)\n\n### Vertical lines in bars\n\nThis is either an issue with the font, or line spacing being enabled in the terminal emulator. Try to change font or disable line spacing.\n\n### Low resolution\n\nSince the graphics are simply based on characters, try decreasing the font size.\n\n### Low frame rate\n\nSome terminal emulators are just slow. Cava will look best in a GPU based terminal like kitty or alacritty. You can also try to increase the font size\n\n### Font is changed in ttys after exit\n\nIf you run cava in a TTY (like ctrl+alt+F2) the program will change the font to the included `cava.psf` (actually a slightly modified \"unifont\").\n\nIn console fonts it seems that only 256 Unicode characters are supported, probably because they are bitmap fonts. I could not find a font with Unicode characters 2581-2587 (the 1/8 - 7/8 blocks used on the top of each bar to increase resolution).\n\nSo in `cava.psf`, the characters 1-7 are actually replaced by Unicode characters 2581-2587. When cava exits, it changes the font back. If cava exits abnormally and you notice that 1-7 are replaced by partial blocks, just change the font with `setfont`.\n\nActually, `setfont` is supposed to return the default font, but this usually isn't set. I haven't found another way to get the current font. So cava sets the font to \"Lat2-Fixed16\" when interrupted. All major distros should have it. It will revert to your default font at reboot.\n\n### Gradient not working in Konsole\n\nKonsole simply does not support this. #194\n\nUsage\n-----\n\n    Usage : cava [options]\n    Visualize audio input in terminal. \n\n    Options:\n    \t    -p          path to config file\n    \t    -v          print version\n\n\n\nExit with ctrl+c or q.\n\nIf cava quits unexpectedly or is force killed, echo must be turned on manually with `stty -echo`.\n\n### Controls\n\nNOTE: only works in ncurses output mode.\n\n| Key | Description |\n| --- | ----------- |\n| <kbd>up</kbd> / <kbd>down</kbd>| increase/decrease sensitivity |\n| <kbd>left</kbd> / <kbd>right</kbd>| increase/decrease bar width |\n| <kbd>f</kbd> / <kbd>b</kbd>| change foreground/background color |\n| <kbd>r</kbd> | Reload configuration |\n| <kbd>c</kbd> | Reload colors only |\n| <kbd>q</kbd> or <kbd>CTRL-C</kbd>| Quit C.A.V.A. |\n\nConfiguration\n-------------\n\nAs of version 0.4.0 all options are done in the config file, no more command-line arguments!\n\nBy default a configuration file is created upon first launch in `$XDG_CONFIG_HOME/cava/config` or `$HOME/.config/cava/config`, but cava can also be made to use a different file with the `-p` option.\n\nSending cava a SIGUSR1 signal, will force cava to reload its configuration file. Thus, it behaves as if the user pressed <kbd>r</kbd> in the terminal. One might send a SIGUSR1 signal using `pkill` or `killall`.\nFor example:\n```\n$ pkill -USR1 cava\n```\n\nSimilarly, sending cava a SIGUSR2 signal will only reload the colors from the configuration file, which is the same as pressing <kbd>c</kbd> in the terminal. This is slightly faster than reloading the entire config as the audio processing does not need to reinitialize.  \n```\n$ pkill -USR2 cava\n```\n\n**Examples on how the equalizer works:**\n\n    [eq]\n    1=0\n    2=1\n    3=0\n    4=1\n    5=0\n\n![3_138](https://cloud.githubusercontent.com/assets/6376571/8670183/a54a851e-29e8-11e5-9eff-346bf6ed91e0.png)\n\n    [eq]\n    1=2\n    2=2\n    3=1\n    4=1\n    5=0.5\n\n![3_139](https://cloud.githubusercontent.com/assets/6376571/8670181/9db0ef50-29e8-11e5-81bc-3e2bb9892da0.png)\n\n\nUsing cava in other applications\n--------------------------------\n\n### cavacore library\n\nThe core processing engine in cava has been split into a separate library `cavacore`. See CAVACORE.md for details.\n\n### Raw Output\n\nYou can also use Cava's output for other programs by using raw output mode, which will write bar data to `STDOUT` that can be piped into other processes. More information on this option is documented in [the example config file](/example_files/config).\n\nA useful starting point example script written in python that consumes raw data can be found [here](https://github.com/karlstav/cava/issues/123#issuecomment-307891020).\n\n\nContribution\n------\n\nPlease read CONTRIBUTING.md before opening a pull request.\n\nThanks to:\n* [CelestialWalrus](https://github.com/CelestialWalrus)\n* [anko](https://github.com/anko)\n* [livibetter](https://github.com/livibetter)\n\nfor major contributions in the early development of this project.\n\nAlso thanks to [dpayne](https://github.com/dpayne/) for figuring out how to find the pulseaudio default sink name."
}
