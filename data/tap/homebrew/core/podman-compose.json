{
  "name": "podman-compose",
  "full_name": "podman-compose",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Alternative to docker-compose using podman",
  "license": "GPL-2.0-only",
  "homepage": "https://github.com/containers/podman-compose",
  "versions": {
    "stable": "1.0.6",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://files.pythonhosted.org/packages/65/a8/d77d2eaa85414d013047584d3aa10fac47edb328f5180ca54a13543af03a/podman-compose-1.0.6.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "2db235049fca50a5a4ffd511a917808c960dacb8defd5481dd8b36a77d4da2e5"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/podman-compose/blobs/sha256:7eab4f78ae279cecaadcbe69296c9494f4d4f82fce5690066b5717f0be00aec0",
          "sha256": "7eab4f78ae279cecaadcbe69296c9494f4d4f82fce5690066b5717f0be00aec0"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/podman-compose/blobs/sha256:7eab4f78ae279cecaadcbe69296c9494f4d4f82fce5690066b5717f0be00aec0",
          "sha256": "7eab4f78ae279cecaadcbe69296c9494f4d4f82fce5690066b5717f0be00aec0"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/podman-compose/blobs/sha256:7eab4f78ae279cecaadcbe69296c9494f4d4f82fce5690066b5717f0be00aec0",
          "sha256": "7eab4f78ae279cecaadcbe69296c9494f4d4f82fce5690066b5717f0be00aec0"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/podman-compose/blobs/sha256:b9d8b85155552c42aba788d8e55e17d3a5273fecd8edba8316b40225d265f720",
          "sha256": "b9d8b85155552c42aba788d8e55e17d3a5273fecd8edba8316b40225d265f720"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/podman-compose/blobs/sha256:b9d8b85155552c42aba788d8e55e17d3a5273fecd8edba8316b40225d265f720",
          "sha256": "b9d8b85155552c42aba788d8e55e17d3a5273fecd8edba8316b40225d265f720"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/podman-compose/blobs/sha256:b9d8b85155552c42aba788d8e55e17d3a5273fecd8edba8316b40225d265f720",
          "sha256": "b9d8b85155552c42aba788d8e55e17d3a5273fecd8edba8316b40225d265f720"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/podman-compose/blobs/sha256:09d1fb4ed1aa41b889adef793317a754c49d5ce088e4dae33ec16c3fedbbf8df",
          "sha256": "09d1fb4ed1aa41b889adef793317a754c49d5ce088e4dae33ec16c3fedbbf8df"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "podman",
    "python@3.11",
    "pyyaml"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/podman-compose.rb",
  "ruby_source_checksum": {
    "sha256": "e90c61f3c534796464c62f5a15988b608a767f31a78145d15081a1661f902869"
  },
  "date_added": "2022-06-26T14:40:51+00:00",
  "readme": "# Podman Compose\n## [![Pylint Test: ](https://github.com/containers/podman-compose/actions/workflows/pylint.yml/badge.svg)](https://github.com/containers/podman-compose/actions/workflows/pylint.yml) [![Unit tests  PyTest](https://github.com/containers/podman-compose/actions/workflows/pytest.yml/badge.svg)](https://github.com/containers/podman-compose/actions/workflows/pytest.yml)\n\n\nAn implementation of [Compose Spec](https://compose-spec.io/) with [Podman](https://podman.io/) backend.\nThis project focuses on:\n\n* rootless\n* daemon-less process model, we directly execute podman, no running daemon.\n\nThis project only depends on:\n\n* `podman`\n* [podman dnsname plugin](https://github.com/containers/dnsname): It is usually found in the `podman-plugins` or `podman-dnsname` distro packages, those packages are not pulled by default and you need to install them. This allows containers to be able to resolve each other if they are on the same CNI network.\n* Python3\n* [PyYAML](https://pyyaml.org/)\n* [python-dotenv](https://pypi.org/project/python-dotenv/)\n\nAnd it's formed as a single Python file script that you can drop into your PATH and run.\n\n## References:\n\n* [spec.md](https://github.com/compose-spec/compose-spec/blob/master/spec.md)\n* [docker-compose compose-file-v3](https://docs.docker.com/compose/compose-file/compose-file-v3/)\n* [docker-compose compose-file-v2](https://docs.docker.com/compose/compose-file/compose-file-v2/)\n\n## Alternatives\n\nAs in [this article](https://fedoramagazine.org/use-docker-compose-with-podman-to-orchestrate-containers-on-fedora/) you can setup a `podman.socket` and use unmodified `docker-compose` that talks to that socket but in this case you lose the process-model (ex. `docker-compose build` will send a possibly large context tarball to the daemon)\n\nFor production-like single-machine containerized environment consider\n\n- [k3s](https://k3s.io) | [k3s github](https://github.com/rancher/k3s)\n- [MiniKube](https://minikube.sigs.k8s.io/)\n\nFor the real thing (multi-node clusters) check any production\nOpenShift/Kubernetes distribution like [OKD](https://www.okd.io/).\n\n## Versions\n\nIf you have legacy version of `podman` (before 3.1.0) you might need to stick with legacy `podman-compose` `0.1.x` branch.\nThe legacy branch 0.1.x uses mappings and workarounds to compensate for rootless limitations.\n\nModern podman versions (>=3.4) do not have those limitations, and thus you can use latest and stable 1.x branch.\n\nIf you are upgrading from `podman-compose` version `0.1.x` then we no longer have global option `-t` to set mapping type\nlike `hostnet`. If you desire that behavior, pass it the standard way like `network_mode: host` in the YAML.\n\n\n## Installation\n\nInstall the latest stable version from PyPI:\n\n```\npip3 install podman-compose\n```\n\npass `--user` to install inside regular user home without being root.\n\nOr latest development version from GitHub:\n\n```\npip3 install https://github.com/containers/podman-compose/archive/devel.tar.gz\n```\n\n\nor install from Fedora (starting from f31) repositories:\n\n```\nsudo dnf install podman-compose\n```\n\n## Basic Usage\n\nWe have included fully functional sample stacks inside `examples/` directory.\nYou can get more examples from [awesome-compose](https://github.com/docker/awesome-compose).\n\n\nA quick example would be\n\n```\ncd examples/busybox\npodman-compose --help\npodman-compose up --help\npodman-compose up\n```\n\nA more rich example can be found in [examples/awx3](examples/awx3)\nwhich have\n\n- A Postgres Database\n- RabbitMQ server\n- MemCached server\n- a django web server\n- a django tasks\n\n\nWhen testing the `AWX3` example, if you got errors, just wait for db migrations to end.\nThere is also AWX 17.1.0\n\n## Tests\n\nInside `tests/` directory we have many useless docker-compose stacks\nthat are meant to test as many cases as we can to make sure we are compatible\n\n### Unit tests with pytest\nrun a pytest with following command\n\n```shell\npython -m pytest pytests\n```\n\n# Contributing guide\n\nIf you are a user or a developer and want to contribute please check the [CONTRIBUTING](CONTRIBUTING.md) section"
}
