{
  "name": "cstore_fdw",
  "full_name": "cstore_fdw",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Columnar store for analytics with Postgres",
  "license": "Apache-2.0",
  "homepage": "https://github.com/citusdata/cstore_fdw",
  "versions": {
    "stable": "1.7.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/citusdata/cstore_fdw/archive/v1.7.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "bd8a06654b483d27b48d8196cf6baac0c7828b431b49ac097923ac0c54a1c38c"
    }
  },
  "revision": 2,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cstore_fdw/blobs/sha256:e8891a0d34043f651e21e61d5f896bad2f36eed0a3a4f8bac49c453924bd8dee",
          "sha256": "e8891a0d34043f651e21e61d5f896bad2f36eed0a3a4f8bac49c453924bd8dee"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cstore_fdw/blobs/sha256:f4b421e5d9ee59a760ff188d0b695a8ec266b65e7503085d59c4f89f73326fe2",
          "sha256": "f4b421e5d9ee59a760ff188d0b695a8ec266b65e7503085d59c4f89f73326fe2"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cstore_fdw/blobs/sha256:221261761221ba1a3aa0d12bbd6c7c1e9710a942d4cf0bda373cda3128aa71e6",
          "sha256": "221261761221ba1a3aa0d12bbd6c7c1e9710a942d4cf0bda373cda3128aa71e6"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cstore_fdw/blobs/sha256:b82c1097d8986d273ecf37720a6ceec797403ae1b18f6786d9e5697ae225575e",
          "sha256": "b82c1097d8986d273ecf37720a6ceec797403ae1b18f6786d9e5697ae225575e"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cstore_fdw/blobs/sha256:f9632c66ce3e68c0f377f4579de7a702de40de6c0a5870effae2af492fe635a7",
          "sha256": "f9632c66ce3e68c0f377f4579de7a702de40de6c0a5870effae2af492fe635a7"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cstore_fdw/blobs/sha256:70e37b3984b6b0bfde28ed9db0049226b781ddec35c6bb9f7e4f677780bd6bc6",
          "sha256": "70e37b3984b6b0bfde28ed9db0049226b781ddec35c6bb9f7e4f677780bd6bc6"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cstore_fdw/blobs/sha256:cf773b6ddb214688cad1505cc01f4e3f6a4ddea8139d67d6c3d5fe2a7f8d8cd3",
          "sha256": "cf773b6ddb214688cad1505cc01f4e3f6a4ddea8139d67d6c3d5fe2a7f8d8cd3"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cstore_fdw/blobs/sha256:e1b7a165d961b4025065b2b2e9a0088ea19f02973d705d3427633a7544f5b056",
          "sha256": "e1b7a165d961b4025065b2b2e9a0088ea19f02973d705d3427633a7544f5b056"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "postgresql@13",
    "protobuf-c"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": true,
  "disable_date": "2023-07-06",
  "disable_reason": "cstore_fdw has been integrated into Citus",
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/cstore_fdw.rb",
  "ruby_source_checksum": {
    "sha256": "c3ff22f334de1d58759dafd62721828a81c1446a0127f034f0050bc7ea4fbfc5"
  },
  "date_added": "2019-02-09T19:57:05+01:00",
  "readme": "## Important notice: Columnar storage is now part of Citus\n\nColumnar storage is now part of the [Citus extension](https://github.com/citusdata/citus), which uses the table access method API to give a much more native experience. It also supports streaming replication, archival, rollback, and simplifies pg_upgrade. You can use Citus just for columnar storage on a single PostgreSQL server, or combine it with distributed tables to parallelize queries locally or across a cluster of PostgreSQL servers.\n\nMigration is simple, and you'll typically see improved compression thanks to [zstd](https://github.com/facebook/zstd):\n\n```sql\n-- After adding adding shared_preload_libraries = 'citus'\n-- to postgresql.conf and restarting:\nCREATE EXTENSION IF NOT EXISTS citus;\n\n-- Create a table using the columnar access method, with the same columns\n-- as an existing cstore_fdw table\nCREATE TABLE customer_reviews_am (\n  LIKE customer_reviews_fdw INCLUDING ALL\n) USING columnar;\n\n-- Copy data from an old cstore_fdw table to an access method table\nINSERT INTO customer_reviews_am SELECT * FROM customer_reviews_fdw;\n\n-- cstore_fdw data size\nSELECT pg_size_pretty(cstore_table_size('customer_reviews_fdw'));\n┌────────────────┐\n│ pg_size_pretty │\n├────────────────┤\n│ 100 MB         │\n└────────────────┘\n\n-- Citus Columnar data size\nSELECT pg_size_pretty(pg_table_size('customer_reviews_am'));\n┌────────────────┐\n│ pg_size_pretty │\n├────────────────┤\n│ 64 MB          │\n└────────────────┘\n```\n\nRead more about it in the [Citus columnar blog post](https://www.citusdata.com/blog/2021/03/06/citus-10-columnar-compression-for-postgres/) by Jeff Davis.\n\ncstore_fdw\n==========\n\n[![Build Status](https://travis-ci.org/citusdata/cstore_fdw.svg?branch=master)][status]\n[![Coverage](http://img.shields.io/coveralls/citusdata/cstore_fdw/master.svg)][coverage]\n\nCstore_fdw is an open source columnar store extension for PostgreSQL. Columnar stores provide notable benefits for analytics use cases where data is loaded in batches. Cstore_fdw’s columnar nature delivers performance by only reading relevant data from disk, and it may compress data 6x-10x to reduce space requirements for data archival.\n\nCstore_fdw is developed by [Citus Data](https://www.citusdata.com) and can be used in combination with [Citus](https://github.com/citusdata/citus), a postgres extension that intelligently distributes your data and queries across many nodes so your database can scale and your queries are fast. If you have any questions about how Citus can help you scale or how to use Citus in combination with cstore_fdw, [please let us know](https://www.citusdata.com/about/contact_us/).\n\nJoin the [Mailing List][mailing-list] to stay on top of the latest developments for Cstore_fdw.\n\n\nIntroduction\n------------\n\nThis extension uses a format for its data layout that is inspired by ORC,\nthe Optimized Row Columnar format. Like ORC, the cstore format improves\nupon RCFile developed at Facebook, and brings the following benefits:\n\n* Compression: Reduces in-memory and on-disk data size by 2-4x. Can be extended\n  to support different codecs.\n* Column projections: Only reads column data relevant to the query. Improves\n  performance for I/O bound queries.\n* Skip indexes: Stores min/max statistics for row groups, and uses them to skip\n  over unrelated rows.\n\nFurther, we used the Postgres foreign data wrapper APIs and type representations\nwith this extension. This brings:\n\n* Support for 40+ Postgres data types. The user can also create new types and\n  use them.\n* Statistics collection. PostgreSQL's query optimizer uses these stats to\n  evaluate different query plans and pick the best one.\n* Simple setup. Create foreign table and copy data. Run SQL.\n\n\nBuilding\n--------\n\ncstore\\_fdw depends on protobuf-c for serializing and deserializing table metadata.\nSo we need to install these packages first:\n\n    # Fedora 17+, CentOS, and Amazon Linux\n    sudo yum install protobuf-c-devel\n\n    # Ubuntu 10.4+\n    sudo apt-get install protobuf-c-compiler\n    sudo apt-get install libprotobuf-c0-dev\n    \n    # Ubuntu 18.4+\n    sudo apt-get install protobuf-c-compiler\n    sudo apt-get install libprotobuf-c-dev\n\n    # Mac OS X\n    brew install protobuf-c\n\n**Note.** In CentOS 5, 6, and 7, you may need to install or update EPEL 5, 6, or 7 repositories.\n See [this page](https://support.rackspace.com/how-to/install-epel-and-additional-repositories-on-centos-and-red-hat/)\nfor instructions.\n\n**Note.** In Amazon Linux, the EPEL repository is installed by default, but not\nenabled. See [these instructions](http://aws.amazon.com/amazon-linux-ami/faqs/#epel)\nfor how to enable it.\n\nOnce you have protobuf-c installed on your machine, you are ready to build\ncstore\\_fdw.  For this, you need to include the pg\\_config directory path in\nyour make command. This path is typically the same as your PostgreSQL\ninstallation's bin/ directory path. For example:\n\n    PATH=/usr/local/pgsql/bin/:$PATH make\n    sudo PATH=/usr/local/pgsql/bin/:$PATH make install\n\n**Note.** cstore_fdw requires PostgreSQL version from 9.3 to 12. It doesn't\nsupport earlier versions of PostgreSQL.\n\n\nUsage\n-----\n\nBefore using cstore\\_fdw, you need to add it to ```shared_preload_libraries```\nin your ```postgresql.conf``` and restart Postgres:\n\n    shared_preload_libraries = 'cstore_fdw'    # (change requires restart)\n\nThe following parameters can be set on a cstore foreign table object.\n\n* filename (optional): The absolute path to the location for storing table data.\n  If you don't specify the filename option, cstore\\_fdw will automatically\n  choose the $PGDATA/cstore\\_fdw directory to store the files. If specified the \n  value of this parameter will be used as a prefix for all files created to\n  store table data. For example, the value ```/cstore_fdw/my_table``` could result in\n  the files ```/cstore_fdw/my_table``` and ```/cstore_fdw/my_table.footer``` being used\n  to manage table data.\n* compression (optional): The compression used for compressing value streams.\n  Valid options are ```none``` and ```pglz```. The default is ```none```.\n* stripe\\_row\\_count (optional): Number of rows per stripe. The default is\n  ```150000```. Reducing this decreases the amount memory used for loading data\n  and querying, but also decreases the performance.\n* block\\_row\\_count (optional): Number of rows per column block. The default is\n ```10000```. cstore\\_fdw compresses, creates skip indexes, and reads from disk\n  at the block granularity. Increasing this value helps with compression and results\n  in fewer reads from disk. However, higher values also reduce the probability of\n  skipping over unrelated row blocks.\n\n\nTo load or append data into a cstore table, you have two options:\n\n* You can use the [```COPY``` command][copy-command] to load or append data from\n  a file, a program, or STDIN.\n* You can use the ```INSERT INTO cstore_table SELECT ...``` syntax to load or\n  append data from another table.\n\nYou can use the [```ANALYZE``` command][analyze-command] to collect statistics\nabout the table. These statistics help the query planner to help determine the\nmost efficient execution plan for each query.\n\n**Note.** We currently don't support updating table using DELETE, and UPDATE\ncommands. We also don't support single row inserts.\n\n\nUpdating from earlier versions to 1.7\n---------------------------------------\n\nTo update an existing cstore_fdw installation from versions earlier than 1.6\nyou can take the following steps:\n\n* Download and install cstore_fdw version 1.6 using instructions from the \"Building\"\n  section,\n* Restart the PostgreSQL server,\n* Run ```ALTER EXTENSION cstore_fdw UPDATE;```\n\n\nExample\n-------\n\nAs an example, we demonstrate loading and querying data to/from a column store\ntable from scratch here. Let's start with downloading and decompressing the data\nfiles.\n\n    wget http://examples.citusdata.com/customer_reviews_1998.csv.gz\n    wget http://examples.citusdata.com/customer_reviews_1999.csv.gz\n\n    gzip -d customer_reviews_1998.csv.gz\n    gzip -d customer_reviews_1999.csv.gz\n\nThen, let's log into Postgres, and run the following commands to create a column\nstore foreign table:\n\n```SQL\n-- load extension first time after install\nCREATE EXTENSION cstore_fdw;\n\n-- create server object\nCREATE SERVER cstore_server FOREIGN DATA WRAPPER cstore_fdw;\n\n-- create foreign table\nCREATE FOREIGN TABLE customer_reviews\n(\n    customer_id TEXT,\n    review_date DATE,\n    review_rating INTEGER,\n    review_votes INTEGER,\n    review_helpful_votes INTEGER,\n    product_id CHAR(10),\n    product_title TEXT,\n    product_sales_rank BIGINT,\n    product_group TEXT,\n    product_category TEXT,\n    product_subcategory TEXT,\n    similar_product_ids CHAR(10)[]\n)\nSERVER cstore_server\nOPTIONS(compression 'pglz');\n```\n\nNext, we load data into the table:\n\n```SQL\n\\COPY customer_reviews FROM 'customer_reviews_1998.csv' WITH CSV;\n\\COPY customer_reviews FROM 'customer_reviews_1999.csv' WITH CSV;\n```\n\n**Note.** If you are getting ```ERROR: cannot copy to foreign table\n\"customer_reviews\"``` when trying to run the COPY commands, double check that you\nhave added cstore\\_fdw to ```shared_preload_libraries``` in ```postgresql.conf```\nand restarted Postgres.\n\nNext, we collect data distribution statistics about the table. This is optional,\nbut usually very helpful:\n\n```SQL\nANALYZE customer_reviews;\n```\n\nFinally, let's run some example SQL queries on the column store table.\n\n```SQL\n-- Find all reviews a particular customer made on the Dune series in 1998.\nSELECT\n    customer_id, review_date, review_rating, product_id, product_title\nFROM\n    customer_reviews\nWHERE\n    customer_id ='A27T7HVDXA3K2A' AND\n    product_title LIKE '%Dune%' AND\n    review_date >= '1998-01-01' AND\n    review_date <= '1998-12-31';\n\n-- Do we have a correlation between a book's title's length and its review ratings?\nSELECT\n    width_bucket(length(product_title), 1, 50, 5) title_length_bucket,\n    round(avg(review_rating), 2) AS review_average,\n    count(*)\nFROM\n   customer_reviews\nWHERE\n    product_group = 'Book'\nGROUP BY\n    title_length_bucket\nORDER BY\n    title_length_bucket;\n```\n\n\nUsage with Citus\n----------------\n\nThe example above illustrated how to load data into a PostgreSQL database running\non a single host. However, sometimes your data is too large to analyze effectively\non a single host. Citus is a product built by Citus Data that allows you to run\na distributed PostgreSQL database to analyze your data using the power of multiple\nhosts.  You can easily install and run other PostgreSQL extensions and foreign data\nwrappers—including cstore_fdw—alongside Citus.\n\nYou can create a cstore_fdw table and distribute it using the\n```create_distributed_table()``` UDF just like any other table. You can load data\nusing the ```copy``` command as you would do in single node PostgreSQL.\n\nUsing Skip Indexes\n------------------\n\ncstore_fdw partitions each column into multiple blocks. Skip indexes store minimum\nand maximum values for each of these blocks. While scanning the table, if min/max\nvalues of the block contradict the WHERE clause, then the block is completely\nskipped. This way, the query processes less data and hence finishes faster.\n\nTo use skip indexes more efficiently, you should load the data after sorting it\non a column that is commonly used in the WHERE clause. This ensures that there is\na minimum overlap between blocks and the chance of them being skipped is higher.\n\nIn practice, the data generally has an inherent dimension (for example a time field)\non which it is naturally sorted. Usually, the queries also have a filter clause on\nthat column (for example you want to query only the last week's data), and hence you\ndon't need to sort the data in such cases.\n\n\nUninstalling cstore_fdw\n-----------------------\n\nBefore uninstalling the extension, first you need to drop all the cstore tables:\n\n    postgres=# DROP FOREIGN TABLE cstore_table_1;\n    ...\n    postgres=# DROP FOREIGN TABLE cstore_table_n;\n\nThen, you should drop the cstore server and extension:\n\n    postgres=# DROP SERVER cstore_server;\n    postgres=# DROP EXTENSION cstore_fdw;\n\ncstore\\_fdw automatically creates some directories inside the PostgreSQL's data\ndirectory to store its files. To remove them, you can run:\n\n    $ rm -rf $PGDATA/cstore_fdw\n\nThen, you should remove cstore\\_fdw from ```shared_preload_libraries``` in\nyour ```postgresql.conf```:\n\n    shared_preload_libraries = ''    # (change requires restart)\n\nFinally, to uninstall the extension you can run the following command in the\nextension's source code directory. This will clean up all the files copied during\nthe installation:\n\n    $ sudo PATH=/usr/local/pgsql/bin/:$PATH make uninstall\n\n\nChangeset\n---------\n### Version 1.7.0\n* (Fix) Add support for PostgreSQL 12\n* (Fix) Support count(t.*) from t type queries\n* (Fix) Build failures for MacOS 10.14+\n* (Fix) Make foreign scan parallel safe\n* (Fix) Add support for PostgreSQL 11 COPY\n### Version 1.6.2\n* (Fix) Add support for PostgreSQL 11\n### Version 1.6.1\n* (Fix) Fix crash during truncate (Cstore crashing server when enabled, not used)\n* (Fix) No such file or directory warning when attempting to drop database\n### Version 1.6\n* (Feature) Added support for PostgreSQL 10.\n* (Fix) Removed table files when a schema, extension or database is dropped.\n* (Fix) Removed unused code fragments.\n* (Fix) Fixed incorrect initialization of stripe buffers.\n* (Fix) Checked user access rights when executing truncate.\n* (Fix) Made copy command cancellable.\n* (Fix) Fixed namespace issue regarding drop table.\n\n### Version 1.5.1\n* (Fix) Verify cstore_fdw server on CREATE FOREIGN TABLE command\n\n### Version 1.5\n* (Feature) Added support for PostgreSQL 9.6.\n* (Fix) Removed table data when cstore_fdw table is indirectly dropped.\n* (Fix) Removed unused code fragments.\n* (Fix) Fixed column selection logic to return columns used in expressions.\n* (Fix) Prevented alter table command from changinf column type to incompatible types.\n\n### Version 1.4.1\n\n* (Fix) Compatibility fix for Citus [copy command][copy-command].\n\n### Version 1.4\n\n* (Feature) Added support for ```TRUNCATE TABLE```\n* (Fix) Added support for PostgreSQL 9.5\n\n### Version 1.3\n\n* (Feature) Added support for ```ALTER TABLE ADD COLUMN``` and ```ALTER TABLE DROP COLUMN```.\n* (Feature) Added column list support in ```COPY FROM```.\n* (Optimization) Improve row count estimation, which results in better plans.\n* (Fix) Fix the deadlock issue during concurrent inserts.\n* (Fix) Return correct result when using whole row references.\n\n### Version 1.2\n\n* (Feature) Added support for ```COPY TO```.\n* (Feature) Added support for ```INSERT INTO cstore_table SELECT ...```.\n* (Optimization) Improved memory usage.\n* (Fix) Dropping multiple cstore tables in a single command cleans-up files\n  of all them.\n\n### Version 1.1\n\n* (Feature) Make filename option optional, and use a default directory inside\n  $PGDATA to manage cstore tables.\n* (Feature) Automatically delete files on DROP FOREIGN TABLE.\n* (Fix) Return empty table if no data has been loaded. Previously, cstore_fdw\n  errored out.\n* (Fix) Fix overestimating relation column counts when planning.\n* (Feature) Added cstore\\_table\\_size(tablename) for getting the size of a cstore\n  table in bytes.\n\n\nCopyright\n---------\n\nCopyright (c) Citus Data, Inc.\n\nThis module is free software; you can redistribute it and/or modify it under the\nApache v2.0 License.\n\nFor all types of questions and comments about the wrapper, please contact us at\nengage @ citusdata.com.\n\n[status]: https://travis-ci.org/citusdata/cstore_fdw\n[mailing-list]: https://groups.google.com/forum/#!forum/cstore-users\n[coverage]: https://coveralls.io/r/citusdata/cstore_fdw\n[copy-command]: http://www.postgresql.org/docs/current/static/sql-copy.html\n[analyze-command]: http://www.postgresql.org/docs/current/static/sql-analyze.html"
}
