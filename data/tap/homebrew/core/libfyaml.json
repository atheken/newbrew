{
  "name": "libfyaml",
  "full_name": "libfyaml",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Fully feature complete YAML parser and emitter",
  "license": "MIT",
  "homepage": "https://github.com/pantoniou/libfyaml",
  "versions": {
    "stable": "0.8",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/pantoniou/libfyaml/releases/download/v0.8/libfyaml-0.8.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "dc4d4348eedca68e8e2394556d57f71410e7d61791a71cbe178302ebe5f26b99"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libfyaml/blobs/sha256:fa7e81a89971ca3a452b831bfa017778b24f734b49b57ea730dda4b6791e2cb2",
          "sha256": "fa7e81a89971ca3a452b831bfa017778b24f734b49b57ea730dda4b6791e2cb2"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libfyaml/blobs/sha256:40163086b94a5d8e80da16ca8bdafe7d36a751aa5cf29a341b0e48d4dc4ff1ea",
          "sha256": "40163086b94a5d8e80da16ca8bdafe7d36a751aa5cf29a341b0e48d4dc4ff1ea"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libfyaml/blobs/sha256:dd5c5d612403756d6385e35682010025e859a40cc4ed470589847516de520404",
          "sha256": "dd5c5d612403756d6385e35682010025e859a40cc4ed470589847516de520404"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libfyaml/blobs/sha256:03600f95a70968eb1769442bad770abe8a872c4d0ed0d175cb19cc2f359acbfb",
          "sha256": "03600f95a70968eb1769442bad770abe8a872c4d0ed0d175cb19cc2f359acbfb"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libfyaml/blobs/sha256:2abbe7b8e83aa2f820ef0096f8bf2eedccb134f732dd7c819c64406a81a78883",
          "sha256": "2abbe7b8e83aa2f820ef0096f8bf2eedccb134f732dd7c819c64406a81a78883"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libfyaml/blobs/sha256:e64216b07a8bcc58d1fd8186721901a91feb5b7d67389220f479cb5ea2ae2fab",
          "sha256": "e64216b07a8bcc58d1fd8186721901a91feb5b7d67389220f479cb5ea2ae2fab"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/libfyaml.rb",
  "ruby_source_checksum": {
    "sha256": "46a6e9caf920a76c47c5e27e56aa6ec1935b6efec8d9cfe6158c56f9a963d316"
  },
  "date_added": "2022-12-19T02:52:42+00:00",
  "readme": "# libfyaml &middot; ![](https://github.com/pantoniou/libfyaml/workflows/Standard%20Automake%20CI/badge.svg)\n\nA fancy 1.2 YAML and JSON parser/writer.\n\nFully feature complete YAML parser and emitter, supporting the latest YAML spec and\npassing the full YAML testsuite.\n\nIt is designed to be very efficient, avoiding copies of data, and\nhas no artificial limits like the 1024 character limit for implicit keys.\n\nlibfyaml is using https://github.com/yaml/yaml-test-suite as a core part\nof it's testsuite.\n\n## Features\n* Fully supports YAML version 1.2.\n* Attempts to adhere to features coming with YAML version 1.3 so that it\n  will be ready.\n* Zero content copy operation, which means that content is never copied to\n  internal structures. On input types that support it (mmap files and\n  constant strings) that means that memory usage is kept low, and arbitrary\n  large content can be manipulated without problem.\n* Parser may be used in event mode (like libyaml) or in document generating mode.\n* Extensive programmable API capable of manipulating parsed YAML documents or\n  creating them from scratch.\n* YAML emitter with programmable options, supporting colored output.\n* Extensive testsuite for the API, the full YAML test-suite and correct\n  emitter operation.\n* Easy printf/scanf based YAML creation and data extraction API.\n* Accurate and descriptive error messages, in standard compiler format that \n  can be parsed by editors and developer GUIs.\n* Testsuite supports running under valgrind and checking for memory leaks. No\n  leaks should be possible under normal operation, so it is usable for long-\n  running applications.\n\n## Contents\n- [Features](#features)\n- [Prerequisites](#prerequisites)\n- [Building](#building)\n- [Usage and examples](#usage-and-examples)\n- [API documentation](#api-documentation)\n- [fy-tool reference](#fy-tool-reference)\n- [Missing Features](#missing-features)\n\n## Prerequisites\n\nlibfyaml is primarily developed on Linux based debian distros but Apple MacOS X builds\n(using homebrew) are supported as well.\n\nOn a based debian distro (i.e. ubuntu 19.04 disco) you should install the following\ndependencies:\n\n* `sudo apt-get install gcc autoconf automake libtool git make libltdl-dev pkg-config`\n\nTo enable the libyaml comparison checker:\n\n* `sudo apt-get install libyaml-dev`\n\nFor the API testsuite libcheck is required:\n\n* `sudo apt-get install check`\n\nAnd finally in order to build the sphinx based documentation:\n\n* `sudo apt-get install python3 python3-pip python3-setuptools`\n* `pip3 install wheel sphinx git+http://github.com/return42/linuxdoc.git sphinx\\_rtd\\_theme sphinx-markdown-builder`\n\nNote that some older distros (like xenial) do not have a sufficiently recent\nsphinx in their repos. In that case you can create a virtual environment\nusing scripts/create-virtual-env\n\n## Building\n\n``libfyaml`` uses a standard autotools based build scheme so:\n\n* `./bootstrap.sh`\n* `./configure`\n* `make`\n\nWill build the library and `fy-tool`.\n\n* `make check`\n\nWill run the test-suite.\n\nBinaries, libraries, header files and pkgconfig files maybe installed with\n\n* `make install`\n\nBy default, the installation prefix will be `/usr/local`, which you can change\nwith the `--prefix <dir>` option during configure.\n\nTo build the documentation API in HTML format use:\n\n* `make doc-html`\n\nThe documentation for the public API will be found in doc/\\_build/html\n\n* `make doc-latexpdf`\n\nWill generate a single pdf containing everything.\n\n## Usage and examples\n\nUsage of libfyaml is somewhat similar to libyaml, but with a few notable differences.\n\n1. The objects of the library are opaque, they are pointers that may be used but\n   may not be derefenced via library users. This makes the public API not be dependent of\n   internal changes in the library structures.\n\n2. The object pointers used are guaranteed to not 'move' like libyaml object pointers\n   so you may embed them freely in your own structures.\n\n3. The convenience methods of libyaml allow you to avoid tedious iteration and code\n   duplication. While fully manual YAML document tree manipulation is available, if your\n   application is not performance sensitive when manipulating YAML, you are advised to\n   use the helpers.\n\n### Using libfyaml in your projects\n\nTypically you only have to include the single header file `libfyaml.h` and\nlink against the correct fyaml-\\<major\\>-\\<minor\\> library.\n\nIt is recommended to use pkg-config, i.e.\n\n```make\nCFLAGS+= `pkg-config --cflags libfyaml`\nLDFLAGS+= `pkg-config --libs libfyaml`\n```\n\nFor use in an automake based project you may use the following fragment\n```bash\nPKG_CHECK_MODULES(LIBFYAML, [ libfyaml ], HAVE_LIBFYAML=1, HAVE_LIBFYAML=0)\n\nif test \"x$HAVE_LIBFYAML\" != \"x1\" ; then\n\tAC_MSG_ERROR([failed to find libfyaml])\nfi\n\nAC_SUBST(HAVE_LIBFYAML)\nAC_SUBST(LIBFYAML_CFLAGS)\nAC_SUBST(LIBFYAML_LIBS)\nAC_DEFINE_UNQUOTED([HAVE_LIBFYAML], [$HAVE_LIBFYAML], [Define to 1 if you have libfyaml available])\nAM_CONDITIONAL([HAVE_LIBFYAML], [ test x$HAVE_LIBFYAML = x1 ])\n```\n\nThe examples that follow will make things clear.\n\n### Display libfyaml version example\n\nThis is the minimal example that checks that you've compiled against the correct libfyaml.\n\n```c\n/*\n * fy-version.c - libfyaml version example\n *\n * Copyright (c) 2019 Pantelis Antoniou <pantelis.antoniou@konsulko.com>\n *\n * SPDX-License-Identifier: MIT\n */\n\n#ifdef HAVE_CONFIG_H\n#include \"config.h\"\n#endif\n\n#include <stdlib.h>\n#include <stdio.h>\n\n#include <libfyaml.h>\n\nint main(int argc, char *argv[])\n{\n\tprintf(\"%s\\n\", fy_library_version());\n\treturn EXIT_SUCCESS;\n}\n```\n\n### libfyaml example using simplified inprogram YAML generation\n\nThis example simply parses an in-program YAML string and displays\na string.\n\nThe standard header plus variables definition.\n\n```c\n/*\n * inprogram.c - libfyaml inprogram YAML example\n *\n * Copyright (c) 2019 Pantelis Antoniou <pantelis.antoniou@konsulko.com>\n *\n * SPDX-License-Identifier: MIT\n */\n\n#ifdef HAVE_CONFIG_H\n#include \"config.h\"\n#endif\n\n#include <stdlib.h>\n#include <stdio.h>\n#include <assert.h>\n\n#include <libfyaml.h>\n\nint main(int argc, char *argv[])\n{\n\tstatic const char *yaml = \n\t\t\"invoice: 34843\\n\"\n\t\t\"date   : !!str 2001-01-23\\n\"\n\t\t\"bill-to: &id001\\n\"\n\t\t\"    given  : Chris\\n\"\n\t\t\"    family : Dumars\\n\"\n\t\t\"    address:\\n\"\n\t\t\"        lines: |\\n\"\n\t\t\"            458 Walkman Dr.\\n\"\n\t\t\"            Suite #292\\n\";\n\tstruct fy_document *fyd = NULL;\n\tint rc, count, ret = EXIT_FAILURE;\n\tunsigned int invoice_nr;\n\tchar given[256 + 1];\n```\n\nParsing and creating a YAML document from either the built-in\nYAML, or an invoice file given on the command line:\n\n```c\n\tif (argc == 1)\n\t\tfyd = fy_document_build_from_string(NULL, yaml, FY_NT);\n\telse\n\t\tfyd = fy_document_build_from_file(NULL, argv[1]);\n\tif (!fyd) {\n\t\tfprintf(stderr, \"failed to build document\");\n\t\tgoto fail;\n\t}\n```\n\nGet the invoice number and the given name using a single call.\n\n```c\n\t/* get the invoice number and the given name */\n\tcount = fy_document_scanf(fyd,\n\t\t\t\"/invoice %u \"\n\t\t\t\"/bill-to/given %256s\",\n\t\t\t&invoice_nr, given);\n\tif (count != 2) {\n\t\tfprintf(stderr, \"Failed to retreive the two items\\n\");\n\t\tgoto fail;\n\t}\n\n\t/* print them as comments in the emitted YAML */\n\tprintf(\"# invoice number was %u\\n\", invoice_nr);\n\tprintf(\"# given name is %s\\n\", given);\n```\n\nIn sequence, increase the invoice number, add a spouse and a secondary\naddress.\n\n```c\n\trc =\n\t\t/* set increased invoice number (modify existing node) */\n\t\tfy_document_insert_at(fyd, \"/invoice\", FY_NT,\n\t\t\tfy_node_buildf(fyd, \"%u\", invoice_nr + 1)) ||\n\t\t/* add spouse (create new mapping pair) */\n\t\tfy_document_insert_at(fyd, \"/bill-to\", FY_NT,\n\t\t\tfy_node_buildf(fyd, \"spouse: %s\", \"Doris\")) ||\n\t\t/* add a second address */\n\t\tfy_document_insert_at(fyd, \"/bill-to\", FY_NT,\n\t\t\tfy_node_buildf(fyd, \"delivery-address:\\n\"\n\t\t\t\t            \"  lines: |\\n\"\n\t\t\t\t\t    \"    1226 Windward Ave.\\n\"));\n\tif (rc) {\n\t\tfprintf(stderr, \"failed to insert to document\\n\");\n\t\tgoto fail;\n\t}\n```\n\nEmit the document to standard output (while sorting the keys)\n\n```c\n\t/* emit the document to stdout (but sorted) */\n\trc = fy_emit_document_to_fp(fyd, FYECF_DEFAULT | FYECF_SORT_KEYS, stdout);\n\tif (rc) {\n\t\tfprintf(stderr, \"failed to emit document to stdout\");\n\t\tgoto fail;\n\t}\n```\n\nFinally exit and report condition.\n\n```c\n\tret = EXIT_SUCCESS;\nfail:\n\tfy_document_destroy(fyd);\t/* NULL is OK */\n\n\treturn ret;\n}\n```\n\n## API documentation\n\nFor complete documentation of libfyaml API, visit https://pantoniou.github.io/libfyaml/\n\n## fy-tool reference\n\nA YAML manipulation tool is included in libfyaml, aptly name `fy-tool`.\nIt's a multi tool application, acting differently according to the name it has\nwhen it's invoked. There are four tool modes, namely:\n\n* fy-testsuite: Used for outputing a test-suite specific event stream which is\n  used for comparison with the expected output of the suite.\n* fy-dump: General purpose YAML parser and dumper, with syntax coloring support,\n  visible whitespace options, and a number of output modes.\n* fy-filter: YAML filtering tool allows to extract information out of a YAML\n  document.\n* fy-join: YAML flexible join tool.\n\n### fy-testsuite usage\n\nA number of options are common in every fy-tool invocation:\n\n```\nUsage : fy-tool [options] [args]\n\nOptions:\n\n\t--include, -I <path>     : Add directory to include path (default path \"\")\n\t--debug-level, -d <lvl>  : Set debug level to <lvl>(default level 3)\n\t--indent, -i <indent>    : Set dump indent to <indent> (default indent 2)\n\t--width, -w <width>      : Set dump width to <width> (default width 80)\n\t--resolve, -r            : Perform anchor and merge key resolution (default false)\n\t--color, -C <mode>       : Color output can be one of on, off, auto (default auto)\n\t--visible, -V            : Make all whitespace and linebreaks visible (default false)\n\t--follow, -l             : Follow aliases when using paths (default false)\n\t--strip-labels           : Strip labels when emitting (default false)\n\t--strip-tags             : Strip tags when emitting (default false)\n\t--strip-doc              : Strip document headers and indicators when emitting (default false)\n\t--quiet, -q              : Quiet operation, do not output messages (default false)\n\t--version, -v            : Display libfyaml version\n\t--help, -h               : Display  help message\n\n```\n\n```\nUsage: fy-testsuite [options] [args]\n\n\t[common options]\n\n\tParse and dump test-suite event format\n\t$ fy-testsuite input.yaml\n\t...\n\n\tParse and dump of event example\n\t$ echo \"foo: bar\" | fy-testsuite -\n\t+STR\n\t+DOC\n\t+MAP\n\t=VAL :foo\n\t=VAL :bar\n\t-MAP\n\t-DOC\n\t-STR\n```\n\n### fy-dump usage\n\n```\nUsage: fy-dump [options] [args]\n\nOptions:\n\n\t[common options]\n\n\t--sort, -s               : Perform mapping key sort (valid for dump) (default false)\n\t--comment, -c            : Output comments (experimental) (default false)\n\t--mode, -m <mode>        : Output mode can be one of original, block, flow, flow-oneline, json, json-tp, json-oneline (default original)\n\t--streaming              : Use streaming output mode (default false)\n\n\t[common options]\n\n\tParse and dump generated YAML document tree in the original YAML form\n\t$ fy-dump input.yaml\n\t...\n\n\tParse and dump generated YAML document tree in block YAML form (and make whitespace visible)\n\t$ fy-dump -V -mblock input.yaml\n\t...\n\n\tParse and dump generated YAML document from the input string\n\t$ fy-dump -mjson \">foo: bar\"\n\t{\n\t  \"foo\": \"bar\"\n\t}\n\n\tParse and dump generated YAML document from the input string (using streaming mode)\n\t$ fy-dump --streaming \">foo: bar\"\n\tfoo: bar\n\n\tNote that streaming mode can not perform document validity checks, like duplicate keys nor\n        support the sort keys option.\n```\n\n### fy-filter usage\n\n```\nUsage: fy-filter [options] [args]\n\nOptions:\n\n\t[common options]\n\n\t--sort, -s               : Perform mapping key sort (valid for dump) (default false)\n\t--comment, -c            : Output comments (experimental) (default false)\n\t--mode, -m <mode>        : Output mode can be one of original, block, flow, flow-oneline, json, json-tp, json-oneline (default original)\n\t--file, -f <file>        : Use given file instead of <stdin>\n\t                           Note that using a string with a leading '>' is equivalent to a file with the trailing content\n\t                           --file \">foo: bar\" is as --file file.yaml with file.yaml \"foo: bar\"\n\n\tParse and filter YAML document tree starting from the '/foo' path followed by the '/bar' path\n\t$ fy-filter --file input.yaml /foo /bar\n\t...\n\n\tParse and filter for two paths (note how a multi-document stream is produced)\n\t$ fy-filter --file -mblock --filter --file \">{ foo: bar, baz: [ frooz, whee ] }\" /foo /baz\n\tbar\n\t---\n\t- frooz\n\t- whee\n\n\tParse and filter YAML document in stdin (note how the key may be complex)\n\t$ echo \"{ foo: bar }: baz\" | fy-filter \"/{foo: bar}/\"\n\tbaz\n```\n\n### fy-join usage\n\n```\nUsage: fy-join [options] [args]\n\nOptions:\n\n\t[common options]\n\n\t--sort, -s               : Perform mapping key sort (valid for dump) (default false)\n\t--comment, -c            : Output comments (experimental) (default false)\n\t--mode, -m <mode>        : Output mode can be one of original, block, flow, flow-oneline, json, json-tp, json-oneline (default original)\n\t--file, -f <file>        : Use given file instead of <stdin>\n\t                           Note that using a string with a leading '>' is equivalent to a file with the trailing content\n\t                           --file \">foo: bar\" is as --file file.yaml with file.yaml \"foo: bar\"\n\t--to, -T <path>          : Join to <path> (default /)\n\t--from, -F <path>        : Join from <path> (default /)\n\t--trim, -t <path>        : Output given path (default /)\n\n\tParse and join two YAML files\n\t$ fy-join file1.yaml file2.yaml\n\t...\n\n\tParse and join two YAML maps\n\t$ fy-join \">foo: bar\" \">baz: frooz\"\n\tfoo: bar\n\tbaz: frooz\n```\n\n## Missing features and omissions\n\n1. Windows - libfyaml is not supporting windows yet.\n2. Unicode - libfyaml only supports UTF8 and has no support for wide character input.\n\n## Development and contributing\nFeel free to send pull requests and raise issues."
}
