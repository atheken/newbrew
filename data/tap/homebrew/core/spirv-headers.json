{
  "name": "spirv-headers",
  "full_name": "spirv-headers",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Headers for SPIR-V",
  "license": "MIT",
  "homepage": "https://github.com/KhronosGroup/SPIRV-Headers",
  "versions": {
    "stable": "1.3.250.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/KhronosGroup/SPIRV-Headers/archive/refs/tags/sdk-1.3.250.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "442c3b329c0c1ef82a778c55b794410474c69bc08f8fb6cffaacf92c73af6f14"
    },
    "head": {
      "url": "https://github.com/KhronosGroup/SPIRV-Headers.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/spirv-headers/blobs/sha256:488c30a6e310ff51eff27143a0e1f5e9056e8269ed7c613a459b652c98c7c4b0",
          "sha256": "488c30a6e310ff51eff27143a0e1f5e9056e8269ed7c613a459b652c98c7c4b0"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [],
  "test_dependencies": [
    "cmake"
  ],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/spirv-headers.rb",
  "ruby_source_checksum": {
    "sha256": "1894331f6ea8f9eb338361352ec9e973ac3436248f3c60dde3e5be19d720353b"
  },
  "date_added": "2022-04-28T09:09:11+00:00",
  "readme": "# SPIR-V Headers\n\nThis repository contains machine-readable files for the\n[SPIR-V Registry](https://www.khronos.org/registry/spir-v/).\nThis includes:\n\n* Header files for various languages.\n* JSON files describing the grammar for the SPIR-V core instruction set\n  and the extended instruction sets.\n* The XML registry file.\n* A tool to build the headers from the JSON grammar.\n\nHeaders are provided in the [include](include) directory, with up-to-date\nheaders in the `unified1` subdirectory. Older headers are provided according to\ntheir version.\n\nIn contrast, the XML registry file has a linear history, so it is\nnot tied to SPIR-V specification versions.\n\n## How is this repository updated?\n\nWhen a new version or revision of the SPIR-V specification is published,\nthe SPIR-V Working Group will push new commits onto master, updating\nthe files under [include](include).\n\n[The SPIR-V XML registry file](include/spirv/spir-v.xml)\nis updated by Khronos whenever a new enum range is allocated.\n\nPull requests can be made to\n- request allocation of new enum ranges in the XML registry file\n- register a new magic number for a SPIR-V generator\n- reserve specific tokens in the JSON grammar\n\n### Registering a SPIR-V Generator Magic Number\n\nTools that generate SPIR-V should use a magic number in the SPIR-V to help identify the\ngenerator.\n\nCare should be taken to follow existing precedent in populating the details of reserved tokens.\nThis includes:\n- keeping generator numbers in numeric order\n- filling out all the existing fields\n\n### Reserving tokens in the JSON grammar\n\nCare should be taken to follow existing precedent in populating the details of reserved tokens.\nThis includes:\n- pointing to what extension has more information, when possible\n- keeping enumerants in numeric order\n- when there are aliases, listing the preferred spelling first\n- adding the statement `\"version\" : \"None\"`\n\n## How to install the headers\n\n```\nmkdir build\ncd build\ncmake ..\ncmake --build . --target install\n```\n\nThen, for example, you will have `/usr/local/include/spirv/unified1/spirv.h`\n\nIf you want to install them somewhere else, then use\n`-DCMAKE_INSTALL_PREFIX=/other/path` on the first `cmake` command.\n\n## Using the headers without installing\n\n### Using CMake\nA CMake-based project can use the headers without installing, as follows:\n\n1. Add an `add_subdirectory` directive to include this source tree.\n2. Use `${SPIRV-Headers_SOURCE_DIR}/include}` in a `target_include_directories`\n   directive.\n3. In your C or C++ source code use `#include` directives that explicitly mention\n   the `spirv` path component.\n```\n#include \"spirv/unified1/GLSL.std.450.h\"\n#include \"spirv/unified1/OpenCL.std.h\"\n#include \"spirv/unified1/spirv.hpp\"\n```\n\nSee also the [example](example/) subdirectory.  But since that example is\n*inside* this repostory, it doesn't use and `add_subdirectory` directive.\n\n### Using Bazel\nA Bazel-based project can use the headers without installing, as follows:\n\n1. Add SPIRV-Headers as a submodule of your project, and add a\n`local_repository` to your `WORKSPACE` file. For example, if you place\nSPIRV-Headers under `external/spirv-headers`, then add the following to your\n`WORKSPACE` file:\n\n```\nlocal_repository(\n    name = \"spirv_headers\",\n    path = \"external/spirv-headers\",\n)\n```\n\n2. Add one of the following to the `deps` attribute of your build target based\non your needs:\n```\n@spirv_headers//:spirv_c_headers\n@spirv_headers//:spirv_cpp_headers\n@spirv_headers//:spirv_cpp11_headers\n```\n\nFor example:\n\n```\ncc_library(\n  name = \"project\",\n  srcs = [\n    # Path to project sources\n  ],\n  hdrs = [\n    # Path to project headers\n  ],\n  deps = [\n    \"@spirv_tools//:spirv_c_headers\",\n    # Other dependencies,\n  ],\n)\n```\n\n3. In your C or C++ source code use `#include` directives that explicitly mention\n   the `spirv` path component.\n```\n#include \"spirv/unified1/GLSL.std.450.h\"\n#include \"spirv/unified1/OpenCL.std.h\"\n#include \"spirv/unified1/spirv.hpp\"\n```\n\n## Generating headers from the JSON grammar for the SPIR-V core instruction set\n\nThis will generally be done by Khronos, for a change to the JSON grammar.\nHowever, the project for the tool to do this is included in this repository,\nand can be used to test a PR, or even to include the results in the PR.\nThis is not required though.\n\nThe header-generation project is under the `tools/buildHeaders` directory.\nUse CMake to build and install the project, in a `build` subdirectory (under `tools/buildHeaders`).\nThere is then a bash script at `bin/makeHeaders` that shows how to use the built\nheader-generator binary to generate the headers from the JSON grammar.\n(Execute `bin/makeHeaders` from the `tools/buildHeaders` directory.)\nHere's a complete example:\n\n```\ncd tools/buildHeaders\nmkdir build\ncd build\ncmake ..\ncmake --build . --target install\ncd ..\n./bin/makeHeaders\n```\n\nNotes:\n- this generator is used in a broader context within Khronos to generate the specification,\n  and that influences the languages used, for legacy reasons\n- the C++ structures built may similarly include more than strictly necessary, for the same reason\n\n## Generating C headers for extended instruction sets\n\nThe [GLSL.std.450.h](include/spirv/unified1/GLSL.std.450.h)\nand [OpenCL.std.h](include/spirv/unified1/OpenCL.std.h) extended instruction set headers\nare maintained manually.\n\nThe C/C++ header for each of the other extended instruction sets\nis generated from the corresponding JSON grammar file.  For example, the\n[OpenCLDebugInfo100.h](include/spirv/unified1/OpenCLDebugInfo100.h) header\nis generated from the\n[extinst.opencl.debuginfo.100.grammar.json](include/spirv/unified1/extinst.opencl.debuginfo.100.grammar.json)\ngrammar file.\n\nTo generate these C/C++ headers, first make sure `python3` is in your PATH, then\ninvoke the build script as follows:\n```\ncd tools/buildHeaders\npython3 bin/makeExtinstHeaders.py\n```\n\n## FAQ\n\n* *How are different versions published?*\n\n  The multiple versions of the headers have been simplified into a\n  single `unified1` view. The JSON grammar has a \"version\" field saying\n  what version things first showed up in.\n\n* *How do you handle the evolution of extended instruction sets?*\n\n  Extended instruction sets evolve asynchronously from the core spec.\n  Right now there is only a single version of both the GLSL and OpenCL\n  headers.  So we don't yet have a problematic example to resolve.\n\n## License\n<a name=\"license\"></a>\n```\nCopyright (c) 2015-2018 The Khronos Group Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and/or associated documentation files (the\n\"Materials\"), to deal in the Materials without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Materials, and to\npermit persons to whom the Materials are furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Materials.\n\nMODIFICATIONS TO THIS FILE MAY MEAN IT NO LONGER ACCURATELY REFLECTS\nKHRONOS STANDARDS. THE UNMODIFIED, NORMATIVE VERSIONS OF KHRONOS\nSPECIFICATIONS AND HEADER INFORMATION ARE LOCATED AT\n   https://www.khronos.org/registry/\n\nTHE MATERIALS ARE PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nMATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.\n```"
}
