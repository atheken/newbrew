{
  "name": "freealut",
  "full_name": "freealut",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [
    "alut"
  ],
  "versioned_formulae": [],
  "desc": "Implementation of OpenAL's ALUT standard",
  "license": "LGPL-2.0",
  "homepage": "https://github.com/vancegroup/freealut",
  "versions": {
    "stable": "1.1.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://deb.debian.org/debian/pool/main/f/freealut/freealut_1.1.0.orig.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "60d1ea8779471bb851b89b49ce44eecb78e46265be1a6e9320a28b100c8df44f"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/freealut/blobs/sha256:7d9a63d859ffb514a2e4a7518d18bcbc7b71fb79c1580e00fa71c2107d794be6",
          "sha256": "7d9a63d859ffb514a2e4a7518d18bcbc7b71fb79c1580e00fa71c2107d794be6"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/freealut/blobs/sha256:b8def26cf41acf2dc5d3e349ec3e8429df7cc8c22c09f6efc237796653d01561",
          "sha256": "b8def26cf41acf2dc5d3e349ec3e8429df7cc8c22c09f6efc237796653d01561"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/freealut/blobs/sha256:3cdedc8bdb746d9b619372b514e021eb40f51a83f01db883167d55322cb5286a",
          "sha256": "3cdedc8bdb746d9b619372b514e021eb40f51a83f01db883167d55322cb5286a"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/freealut/blobs/sha256:e538e0e346fe29aadb9df1856ef2291cf3c897edd1d6aa79ba1ad5218262c895",
          "sha256": "e538e0e346fe29aadb9df1856ef2291cf3c897edd1d6aa79ba1ad5218262c895"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/freealut/blobs/sha256:8b5449831c37f8dac468aaf8e2a4ccb8ea17acbfebf0a4a831bb864d7d1d5834",
          "sha256": "8b5449831c37f8dac468aaf8e2a4ccb8ea17acbfebf0a4a831bb864d7d1d5834"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/freealut/blobs/sha256:16375ee0d022401f8d83ea01540d088ffc90e5661c10370b4157e13c617061fb",
          "sha256": "16375ee0d022401f8d83ea01540d088ffc90e5661c10370b4157e13c617061fb"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/freealut/blobs/sha256:7b37a28c1edf58222ec10227bfbc0129cdd0afe66167c232fc62527bf89333c3",
          "sha256": "7b37a28c1edf58222ec10227bfbc0129cdd0afe66167c232fc62527bf89333c3"
        },
        "mojave": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/freealut/blobs/sha256:e7a2418c016c5636386fd3a2aa1af8b611beefd4aed0d7eb22b152b654a5cc4d",
          "sha256": "e7a2418c016c5636386fd3a2aa1af8b611beefd4aed0d7eb22b152b654a5cc4d"
        },
        "high_sierra": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/freealut/blobs/sha256:90bb9d9a0c0eb6ded2dd5f5c6fb566a2fd3835c32cab71d3c53efcfd82b7059e",
          "sha256": "90bb9d9a0c0eb6ded2dd5f5c6fb566a2fd3835c32cab71d3c53efcfd82b7059e"
        },
        "sierra": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/freealut/blobs/sha256:5b592930278516c32e0ecdbf5e244abc4f18b2f766242af145ea0def25df3c99",
          "sha256": "5b592930278516c32e0ecdbf5e244abc4f18b2f766242af145ea0def25df3c99"
        },
        "el_capitan": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/freealut/blobs/sha256:301e3825367cee8b41747fae0b3495e94b09668d93980032f5fdb92d1c597b62",
          "sha256": "301e3825367cee8b41747fae0b3495e94b09668d93980032f5fdb92d1c597b62"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/freealut/blobs/sha256:05ed720d9817268e8941fba68a2d52e685562119fe2d79eba3f6ec107864d191",
          "sha256": "05ed720d9817268e8941fba68a2d52e685562119fe2d79eba3f6ec107864d191"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "autoconf",
    "automake",
    "libtool"
  ],
  "dependencies": [
    "openal-soft"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/freealut.rb",
  "ruby_source_checksum": {
    "sha256": "5879cb70cc1388b249c22b820d6aae1444fa1d98c1206a111ce5b3852214e7c2"
  },
  "date_added": "2010-06-05T20:43:17-07:00",
  "readme": "# The freealut library\n\nfreealut is a free implementation of OpenAL's ALUT standard. See the file\nAUTHORS for the people involved.\n\nThis is a slightly-updated version maintained at\nhttps://github.com/vance-group/freealut that contains an updated\nCMake build system, and potentially other fixes over time.\n\n## Building freealut\n\nWhile the \"official\" build system of the now-missing upstream may be autotools,\nthat build is sufficiently outdated to require patching on modern\nLinux operating systems. The CMake build system has been updated\nto work smoothly on all platforms (tested on Linux and Windows,\nincluding cross-building), so I'd recommend using it.\n\n(Instructions for older build systems are still included for completeness.)\n\nThis builds just like any other standard CMake build system: see\n<https://cmake.org/cmake/help/latest/guide/user-interaction/index.html> for generic instructions.\n\nBriefly, here's how to build with CMake via out-of-tree build:\n\n- Change to the alut dir.\n- Create a dir, eg \"build\", and change into it.\n- Now (eg.) run:\n\n```sh\ncmake .. -DCMAKE_INSTALL_PREFIX:STRING=\"/usr\" -DCMAKE_C_FLAGS:STRING=\"-march=athlon-xp -O2\"\nmake\nmake install\n```\n\n  If you exported your CFLAGS, there is no need to specify them\n  explicitly, as CMake will pick them up.\n\n- OpenAL should get installed as you got used to it.\n\nYou could also use ccmake for a console gui, or the Qt CMake gui.\nAn out-of-source build is recommended. This works on Windows, too,\ngenerating a Visual Studio solution for whatever version you\nlike.\n\nSome Tips:\n\n- If you want more output at compile time, use `make VERBOSE=1`\n\n- If you want to install to a different directory (using same prefix),\n  use `make install DESTDIR=/foo/bar`\n\n- CMake doesn't has a distclean target by default, so you better\n  really do an out-of-tree build, then you can simply delete its\n  content when you want a distclean... Furthermore it is easier to\n  have different builds using different parameters via out-of-tree\n  builds.\n\n## Building and installing on *nix-alikes using autotools (deprecated)\n\nTo build and run ALUT, you need an OpenAL somewhere (and a sound card, of course\n:-). If OpenAL is not installed in a standard place (let's say ${OPENAL_PREFIX})\nyou'll have to tell the build system about it:\n\n```sh\nCPPFLAGS=\"-I${OPENAL_PREFIX}/include\"\nLDFLAGS=\"-L${OPENAL_PREFIX}/lib\"\nexport CPPFLAGS LDFLAGS\n```\n\nIf you install ALUT from the CVS repository, you'll have to call\n\n```sh\n./autogen.sh\n```\n\nfirst, this will generate some necessary files for building ALUT.\n\nIf these initial preparations are done, you can simply run:\n\n```sh\n./configure\nmake\nmake install\n```\n\nThe last step is optional and must be done as 'root', you can build and use the\ntest programs in 'test_suite' and the example programs in 'examples' without\ninstalling ALUT. To build these, just go to the respective subdirectories and\nrun 'make'.\n\nAlternatively, there is a spec file in the admin/RPM subdirectory, which can be\nused to build an RPM.\n\n## Building with Visual Studio (deprecated)\n\nThe admin subdirectory contains VisualStudio6 and VisualStudioDotNET\nsubdirectories, which contain a Visual Studio 6 workspace and a Visual Studio\n.NET solution, respectively. These expect the OpenAL SDK (header and import\nlibrary) at the standard path \"C:\\Program Files\\OpenAL 1.1 with EFX SDK\". If\nthis is not the case for your setup, you can change this either directly with a\ntext editor in the project files (the only way for *real* men ;-) or via the\nproject settings within Visual Studio. When everything is OK, just build\ne.g. the hello_world project and you should get the ALUT library itself and a\ndemo with Steve Baker saying an immortal phrase.\n\n## Support\n\nPlease don't email me the authors directly, sign up to the OpenAL user's mailing\nlist. Instructions can be found here: <http://www.openal.org/>\n\n## Licensing\n\nThese libraries are offered as OpenSource freeware under the provisions of the\nGNU Library Public License (LGPL). Those terms and conditions are detailed in\nthe file 'COPYING' in this directory.\n\n## Portability and Dependencies\n\nThis library is designed to be easily portable (and more importantly so that\nprograms using it can be UTTERLY portable).\n\n## Compiling/Linking with ALUT\n\nIn your source code, simply add:\n\n```c\n#include <AL/alut.h>\n```\n\nOn *nix-alikes, use\n\n```sh\nopenal-config --cflags\nopenal-config --libs\n```\n\nto find out the compiler and linker flags needed for OpenAL, the flags needed\nfor ALUT itself depend on the --prefix option given to configure.\n\nIn a VisualStudio project, add the path to the ALUT header, import library and\nDLL to your project settings as usual.\n\n## Directories\n\nWithin this distribution, you will find the following directories:\n\n```none\nadmin      -- Administrative files needed for building ALUT\ndoc        -- The ALUT documentation\nexamples   -- For application authors, here is a small collection of example\n              programs that you can use to get you started\ninclude    -- The ALUT header\nsrc        -- The source code for the ALUT library itself\ntest_suite -- A small suite of test programs to check that ALUT is installed and\n              working correctly\n```"
}
