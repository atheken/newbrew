{
  "name": "libnfc",
  "full_name": "libnfc",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Low level NFC SDK and Programmers API",
  "license": "LGPL-3.0",
  "homepage": "https://github.com/nfc-tools/libnfc",
  "versions": {
    "stable": "1.8.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/nfc-tools/libnfc/releases/download/libnfc-1.8.0/libnfc-1.8.0.tar.bz2",
      "tag": null,
      "revision": null,
      "checksum": "6d9ad31c86408711f0a60f05b1933101c7497683c2e0d8917d1611a3feba3dd5"
    },
    "head": {
      "url": "https://github.com/nfc-tools/libnfc.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": "/opt/homebrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/libnfc/blobs/sha256:28002ee7cadbe88fdd4a614804a813b4d46a17d4cb2a1fe7d24fe17eff04f933",
          "sha256": "28002ee7cadbe88fdd4a614804a813b4d46a17d4cb2a1fe7d24fe17eff04f933"
        },
        "arm64_monterey": {
          "cellar": "/opt/homebrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/libnfc/blobs/sha256:24d476cf0560256e53b5efb4f915ead0e5a5bf336da89395a3b8a5c0903f1caf",
          "sha256": "24d476cf0560256e53b5efb4f915ead0e5a5bf336da89395a3b8a5c0903f1caf"
        },
        "arm64_big_sur": {
          "cellar": "/opt/homebrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/libnfc/blobs/sha256:6e97d8892b2129437513be8a21fccf7e3c6a23b14dd28e3d43aea1fce9b97ed7",
          "sha256": "6e97d8892b2129437513be8a21fccf7e3c6a23b14dd28e3d43aea1fce9b97ed7"
        },
        "ventura": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/libnfc/blobs/sha256:00719d9f9c924aa855561160b5a79bae50180c6245d7a98c520ab2993fb8d305",
          "sha256": "00719d9f9c924aa855561160b5a79bae50180c6245d7a98c520ab2993fb8d305"
        },
        "monterey": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/libnfc/blobs/sha256:a42411e1b19e52e85c138f4566613bc87570851403d148315d384d953d2a82b5",
          "sha256": "a42411e1b19e52e85c138f4566613bc87570851403d148315d384d953d2a82b5"
        },
        "big_sur": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/libnfc/blobs/sha256:566a81b623abfb5d68480274b59b13c44fc098cd1d8cbf59dc112295a58a363c",
          "sha256": "566a81b623abfb5d68480274b59b13c44fc098cd1d8cbf59dc112295a58a363c"
        },
        "catalina": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/libnfc/blobs/sha256:6659f67e40774cdb8e95548c03542bbc123ccabc0f4a6160504c03e43fa43c26",
          "sha256": "6659f67e40774cdb8e95548c03542bbc123ccabc0f4a6160504c03e43fa43c26"
        },
        "mojave": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/libnfc/blobs/sha256:9bc90c84f89408a8960289a668af7ad9b7b17d34a02996b83ec960c5cbefafeb",
          "sha256": "9bc90c84f89408a8960289a668af7ad9b7b17d34a02996b83ec960c5cbefafeb"
        },
        "high_sierra": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/libnfc/blobs/sha256:8e6abd4d61ef9aff76ef25b092806b95614c07a9e46a0e13ca6e915271454a92",
          "sha256": "8e6abd4d61ef9aff76ef25b092806b95614c07a9e46a0e13ca6e915271454a92"
        },
        "x86_64_linux": {
          "cellar": "/home/linuxbrew/.linuxbrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/libnfc/blobs/sha256:db84cf74f8217a9cb32aa5c804cf20c9b74464ce21ea2a87805b0c8de5abdfe6",
          "sha256": "db84cf74f8217a9cb32aa5c804cf20c9b74464ce21ea2a87805b0c8de5abdfe6"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "pkg-config"
  ],
  "dependencies": [
    "libusb-compat"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "pcsc-lite"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/libnfc.rb",
  "ruby_source_checksum": {
    "sha256": "82e37bcd9c3ef56e6dcfe22284d8d87b44c6bdcb79d0b16ad98fdcbb2ffc09a7"
  },
  "head_dependencies": {
    "build_dependencies": [
      "autoconf",
      "automake",
      "libtool",
      "pkg-config"
    ],
    "dependencies": [
      "libusb-compat"
    ],
    "test_dependencies": [],
    "recommended_dependencies": [],
    "optional_dependencies": [],
    "uses_from_macos": [
      "pcsc-lite"
    ],
    "uses_from_macos_bounds": [
      {}
    ]
  },
  "date_added": "2011-05-27T22:02:50-07:00",
  "readme": "```\n*-\n* Free/Libre Near Field Communication (NFC) library\n*\n* Libnfc historical contributors:\n* Copyright (C) 2009      Roel Verdult\n* Copyright (C) 2009-2015 Romuald Conty\n* Copyright (C) 2010-2012 Romain Tarti√®re\n* Copyright (C) 2010-2013 Philippe Teuwen\n* Copyright (C) 2012-2013 Ludovic Rousseau\n* Additional contributors:\n* See AUTHORS file\n-*\n```\n\nGeneral Information\n===================\n\nlibnfc is a library which allows userspace application access to NFC devices.\n\nThe official web site is:\n  http://www.nfc-tools.org/\n\nThe official forum site is:\n  http://www.libnfc.org/community/\n\nThe official development site is:\n  https://github.com/nfc-tools/libnfc\n\nImportant note: this file covers POSIX systems, for Windows please read README-Windows.md\n\nRequirements\n============\n\nSome NFC drivers depend on third party software:\n\n* pn53x_usb & acr122_usb:\n  \n  - libusb-0.1 http://libusb.sf.net\n\n* acr122_pcsc:\n  \n  - pcsc-lite https://pcsclite.apdu.fr/\n- pcsc:\n  \n  - Support build with pcsc driver, which can be using all compatible readers, Feitian R502 and bR500 already passed the test.\n\nThe regression test suite depends on the cutter framework:\nhttp://cutter.sf.net\n\nBuilding\n========\n\nNote: If working directly from a git clone of the repository, some of the files need to be generated first. To do this run\n`autoreconf -vis`\n\nAlternatively use a .tar.bz2 version of a packaged release (which already contains ./configure):\nhttps://github.com/nfc-tools/libnfc/releases/\n\nThe build should be as simple as running these commands:\n\n    ./configure\n    make\n\n\nTo build with specific driver(s), see option `--with-drivers=...` detailed in `./configure --help`.\n\nInstallation\n============\n    \n    make install\n\nYou may need to grant permissions to your user to drive your device.\nUnder GNU/Linux systems, if you use udev, you could use the provided udev rules.\n  e.g. under Debian, Ubuntu, etc.\n\n    sudo cp contrib/udev/93-pn53x.rules /lib/udev/rules.d/\n\nUnder FreeBSD, if you use devd, there is also a rules file: contrib/devd/pn53x.conf.\n\nConfiguration\n=============\n\nIn order to change the default behavior of the library, the libnfc uses a\nconfiguration file located in sysconfdir (as provided to ./configure).\n\nA sample commented file is available in sources: libnfc.conf.sample\n\nIf you have compiled using:\n\n    ./configure --prefix=/usr --sysconfdir=/etc\n\nyou can make configuration directory and copy the sample file:\n\n    sudo mkdir /etc/nfc\n    sudo cp libnfc.conf.sample /etc/nfc/libnfc.conf\n\nTo configure multiple devices, you can either modify libnfc.conf or create a\nfile per device in a nfc/devices.d directory:\n\n    sudo mkdir -p /etc/nfc/devices.d\n    printf 'name = \"My first device\"\\nconnstring = \"pn532_uart:/dev/ttyACM0\"\\n' | sudo tee /etc/nfc/devices.d/first.conf\n    printf 'name = \"My second device\"\\nconnstring = \"pn532_uart:/dev/ttyACM1\"\\n' | sudo tee /etc/nfc/devices.d/second.conf\n\nHow to report bugs\n==================\n\nTo report a bug, visit https://github.com/nfc-tools/libnfc/issues and fill\nout a bug report form.\n\nIf you have questions, remarks, we encourage you to post this in the developers\ncommunity:\nhttp://www.libnfc.org/community\n\nPlease make sure to include:\n\n* The version of libnfc\n\n* Information about your system. For instance:\n  \n  - What operating system and version\n  - For Linux, what version of the C library\n  \n  And anything else you think is relevant.\n\n* A trace with debug activated.\n  \n  Reproduce the bug with debug, e.g. if it was:\n  \n        $ nfc-list -v\n  \n  run it as:\n  \n        $ LIBNFC_LOG_LEVEL=3 nfc-list -v\n\n* How to reproduce the bug.\n  \n  Please include a short test program that exhibits the behavior.\n  \n  As a last resort, you can also provide a pointer to a larger piece\n  \n  of software that can be downloaded.\n\n* If the bug was a crash, the exact text that was printed out\n  \n  when the crash occured.\n\n* Further information such as stack traces may be useful, but\n  \n  is not necessary.\n\nPatches\n=======\n\nPatches can be posted to https://github.com/nfc-tools/libnfc/issues\n\nIf the patch fixes a bug, it is usually a good idea to include\nall the information described in \"How to Report Bugs\".\n\nTroubleshooting\n===============\n\nTouchatag/ACR122:\n-----------------\n\nIf your Touchatag or ACR122 device fails being detected by libnfc, make sure\nthat PCSC-lite daemon (`pcscd`) is installed and is running.\n\nIf your Touchatag or ACR122 device fails being detected by PCSC-lite daemon\n(`pcsc_scan` doesn't see anything) then try removing the bogus firmware detection\nof libccid: edit libccid_Info.plist configuration file (usually\n`/etc/libccid_Info.plist`) and locate `<key>ifdDriverOptions</key>`, turn\n`<string>0x0000</string>` value into `0x0004` to allow bogus devices and restart\npcscd daemon.\n\nACR122:\n-------\n\nUsing an ACR122 device with libnfc and without tag (e.g. to use NFCIP modes or\ncard emulation) needs yet another PCSC-lite tweak: You need to allow usage of\nCCID Exchange command.  To do this, edit `libccid_Info.plist` configuration file\n(usually `/etc/libccid_Info.plist`) and locate `<key>ifdDriverOptions</key>`,\nturn `<string>0x0000</string>` value into `0x0001` to allow CCID exchange or\n`0x0005` to allow CCID exchange and bogus devices (cf previous remark) and\nrestart pcscd daemon.\n\nWarning: if you use ACS CCID drivers (acsccid), configuration file is located\nin something like: `/usr/lib/pcsc/drivers/ifd-acsccid.bundle/Contents/Info.plist`\n\nSCL3711:\n--------\n\nLibnfc cannot be used concurrently with the PCSC proprietary driver of SCL3711.\nTwo possible solutions:\n\n* Either you don't install SCL3711 driver at all\n* Or you stop the PCSC daemon when you want to use libnfc-based tools\n\nPN533 USB device on Linux >= 3.1:\n---------------------------------\n\nSince Linux kernel version 3.1, a few kernel-modules must not be loaded in order\nto use libnfc : \"nfc\", \"pn533\" and \"pn533_usb\".\nTo prevent kernel from loading automatically these modules, you can blacklist\nthem in a modprobe conf file. This file is provided within libnfc archive:\n\n    sudo cp contrib/linux/blacklist-libnfc.conf /etc/modprobe.d/blacklist-libnfc.conf\n\nFEITIAN bR500 and R502:\n-----------------------\n\nLibnfc can work with PCSC proprietary driver of bR500 and R502, which is already available on most Linux setups.\nTo activate the PCSC support: `./configure --with-drivers=pcsc`.\nReaders known to work:\n\n- Feitian bR500\n- Feitian R502 Dual interface reader\n- Feitian R502 CL(Contactless) reader\n\nThese readers are support by CCID since v1.4.25, make sure your CCID driver version higher or equal to 1.4.25.\n\nOn MacOS, you can check your CCID version with the following command, and if required, you can install latest CCID driver from [https://github.com/martinpaljak/osx-ccid-installer/releases](https://github.com/martinpaljak/osx-ccid-installer/releases)\n\n```\ngrep -A 1 CFBundleShortVersionString /usr/local/libexec/SmartCardServices/drivers/ifd-ccid.bundle/Contents/Info.plist\n```\n\nOn Linux, you can check your CCID version with the following command, and if required, you can install latest CCID driver from [https://ccid.apdu.fr/](https://ccid.apdu.fr/)\n\n```\ngrep -A 1 CFBundleShortVersionString /usr/lib/pcsc/drivers/ifd-ccid.bundle/Contents/Info.plist\n```\n\nProprietary Notes\n=================\nFeliCa is a registered trademark of the Sony Corporation.\nMIFARE is a trademark of NXP Semiconductors.\nJewel Topaz is a trademark of Innovision Research & Technology.\nAll other trademarks are the property of their respective owners."
}
