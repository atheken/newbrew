{
  "name": "glog",
  "full_name": "glog",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Application-level logging library",
  "license": "BSD-3-Clause",
  "homepage": "https://github.com/google/glog",
  "versions": {
    "stable": "0.6.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/google/glog/archive/v0.6.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "8a83bf982f37bb70825df71a9709fa90ea9f4447fb3c099e1d720a439d88bad6"
    },
    "head": {
      "url": "https://github.com/google/glog.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/glog/blobs/sha256:7f027456418cf100e83da0cab5dd2f01b03650d25727fc129ae8bfc80031469f",
          "sha256": "7f027456418cf100e83da0cab5dd2f01b03650d25727fc129ae8bfc80031469f"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/glog/blobs/sha256:875364220b0fae1b16b63ff9811aa675d1fc55e47fd5ea64ecfb15ce063965b2",
          "sha256": "875364220b0fae1b16b63ff9811aa675d1fc55e47fd5ea64ecfb15ce063965b2"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/glog/blobs/sha256:8a33b84bd59fa19c00401e5540a41207f2364867783b85289a2153cc4da2b861",
          "sha256": "8a33b84bd59fa19c00401e5540a41207f2364867783b85289a2153cc4da2b861"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/glog/blobs/sha256:1bf4cd6c05c5b63c05bf91c854902bec0a3f2c0058d26d7277df53c4791d7aef",
          "sha256": "1bf4cd6c05c5b63c05bf91c854902bec0a3f2c0058d26d7277df53c4791d7aef"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/glog/blobs/sha256:04b418eda3d8089e64ab902d265dd935245c815b19933173f670a28d8abbca81",
          "sha256": "04b418eda3d8089e64ab902d265dd935245c815b19933173f670a28d8abbca81"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/glog/blobs/sha256:54cac16cc76e3594f3b61afa071ebb7890a1cc22122cab767ae540ced1f1a24b",
          "sha256": "54cac16cc76e3594f3b61afa071ebb7890a1cc22122cab767ae540ced1f1a24b"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/glog/blobs/sha256:53e6963a265a0af5d6982b91e423f432f0a130995cc7e2e2021a04edbbc8a88d",
          "sha256": "53e6963a265a0af5d6982b91e423f432f0a130995cc7e2e2021a04edbbc8a88d"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/glog/blobs/sha256:04695a6df86ea26cadda86975bc9ad9c1ec112e8325e2bbc5f25939b42698463",
          "sha256": "04695a6df86ea26cadda86975bc9ad9c1ec112e8325e2bbc5f25939b42698463"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [
    "gflags"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/glog.rb",
  "ruby_source_checksum": {
    "sha256": "2e2c20e7ee6f76d66d3d097055cfdf9a1262f64d80427d61cea535958ef64240"
  },
  "date_added": "2010-04-29T08:40:58-07:00",
  "readme": "Google Logging Library\n======================\n\n|Linux Github actions| |Windows Github actions| |macOS Github actions| |Codecov|\n\nGoogle Logging (glog) is a C++14 library that implements application-level\nlogging. The library provides logging APIs based on C++-style streams and\nvarious helper macros.\n\n.. role:: cmake(code)\n   :language: cmake\n\n.. role:: cmd(code)\n   :language: bash\n\n.. role:: cpp(code)\n   :language: cpp\n\n.. role:: bazel(code)\n   :language: starlark\n\n\nGetting Started\n---------------\n\nYou can log a message by simply streaming things to ``LOG``\\ (<a\nparticular `severity level <#severity-levels>`__>), e.g.,\n\n.. code:: cpp\n\n   #include <glog/logging.h>\n\n   int main(int argc, char* argv[]) {\n       // Initialize Google’s logging library.\n       google::InitGoogleLogging(argv[0]);\n\n       // ...\n       LOG(INFO) << \"Found \" << num_cookies << \" cookies\";\n   }\n\n\nFor a detailed overview of glog features and their usage, please refer\nto the `user guide <#user-guide>`__.\n\n.. contents:: Table of Contents\n\n\nBuilding from Source\n--------------------\n\nglog supports multiple build systems for compiling the project from\nsource: `Bazel <#bazel>`__, `CMake <#cmake>`__, `vcpkg <#vcpkg>`__, and `conan <#conan>`__.\n\nBazel\n~~~~~\n\nTo use glog within a project which uses the\n`Bazel <https://bazel.build/>`__ build tool, add the following lines to\nyour ``WORKSPACE`` file:\n\n.. code:: bazel\n\n   load(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\n\n   http_archive(\n       name = \"com_github_gflags_gflags\",\n       sha256 = \"34af2f15cf7367513b352bdcd2493ab14ce43692d2dcd9dfc499492966c64dcf\",\n       strip_prefix = \"gflags-2.2.2\",\n       urls = [\"https://github.com/gflags/gflags/archive/v2.2.2.tar.gz\"],\n   )\n\n   http_archive(\n       name = \"com_github_google_glog\",\n       sha256 = \"122fb6b712808ef43fbf80f75c52a21c9760683dae470154f02bddfc61135022\",\n       strip_prefix = \"glog-0.6.0\",\n       urls = [\"https://github.com/google/glog/archive/v0.6.0.zip\"],\n   )\n\nYou can then add :bazel:`@com_github_google_glog//:glog` to the deps section\nof a :bazel:`cc_binary` or :bazel:`cc_library` rule, and :code:`#include\n<glog/logging.h>` to include it in your source code. Here’s a simple example:\n\n.. code:: bazel\n\n   cc_binary(\n       name = \"main\",\n       srcs = [\"main.cc\"],\n       deps = [\"@com_github_google_glog//:glog\"],\n   )\n\nCMake\n~~~~~\n\nglog also supports CMake that can be used to build the project on a wide\nrange of platforms. If you don’t have CMake installed already, you can\ndownload it for from CMake’s `official\nwebsite <http://www.cmake.org>`__.\n\nCMake works by generating native makefiles or build projects that can be\nused in the compiler environment of your choice. You can either build\nglog with CMake as a standalone project or it can be incorporated into\nan existing CMake build for another project.\n\nBuilding glog with CMake\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nWhen building glog as a standalone project, on Unix-like systems with\nGNU Make as build tool, the typical workflow is:\n\n1. Get the source code and change to it. e.g., cloning with git:\n\n  .. code:: bash\n\n     git clone https://github.com/google/glog.git\n     cd glog\n\n2. Run CMake to configure the build tree.\n\n  .. code:: bash\n\n     cmake -S . -B build -G \"Unix Makefiles\"\n\n  CMake provides different generators, and by default will pick the most\n  relevant one to your environment. If you need a specific version of Visual\n  Studio, use :cmd:`cmake . -G <generator-name>`, and see :cmd:`cmake --help`\n  for the available generators. Also see :cmd:`-T <toolset-name>`, which can\n  be used to request the native x64 toolchain with :cmd:`-T host=x64`.\n\n3. Afterwards, generated files can be used to compile the project.\n\n  .. code:: bash\n\n     cmake --build build\n\n4. Test the build software (optional).\n\n  .. code:: bash\n\n     cmake --build build --target test\n\n5. Install the built files (optional).\n\n  .. code:: bash\n\n     cmake --build build --target install\n\nConsuming glog in a CMake Project\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIf you have glog installed in your system, you can use the CMake command\n:cmake:`find_package` to build against glog in your CMake Project as follows:\n\n.. code:: cmake\n\n   cmake_minimum_required (VERSION 3.16)\n   project (myproj VERSION 1.0)\n\n   find_package (glog 0.6.0 REQUIRED)\n\n   add_executable (myapp main.cpp)\n   target_link_libraries (myapp glog::glog)\n\nCompile definitions and options will be added automatically to your\ntarget as needed.\n\nIncorporating glog into a CMake Project\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nYou can also use the CMake command :cmake:`add_subdirectory` to include glog\ndirectly from a subdirectory of your project by replacing the\n:cmake:`find_package` call from the previous example by\n:cmake:`add_subdirectory`. The :cmake:`glog::glog` target is in this case an\n:cmake:`ALIAS` library target for the ``glog`` library target.\n\nAgain, compile definitions and options will be added automatically to\nyour target as needed.\n\nvcpkg\n~~~~~\n\nYou can download and install glog using the `vcpkg\n<https://github.com/Microsoft/vcpkg>`__ dependency manager:\n\n.. code:: bash\n\n   git clone https://github.com/Microsoft/vcpkg.git\n   cd vcpkg\n   ./bootstrap-vcpkg.sh\n   ./vcpkg integrate install\n   ./vcpkg install glog\n\nThe glog port in vcpkg is kept up to date by Microsoft team members and\ncommunity contributors. If the version is out of date, please create an\nissue or pull request on the vcpkg repository.\n\nconan\n~~~~~\n\nYou can download and install glog using the `conan\n<https://conan.io>`__ package manager:\n\n.. code:: bash\n\n   pip install conan\n   conan install -r conancenter glob/<glob-version>@\n\nThe glog recipe in conan center is kept up to date by conan center index community\ncontributors. If the version is out of date, please create an\nissue or pull request on the `conan-center-index\n<https://github.com/conan-io/conan-center-index>`__ repository.\n\nUser Guide\n----------\n\nglog defines a series of macros that simplify many common logging tasks.\nYou can log messages by severity level, control logging behavior from\nthe command line, log based on conditionals, abort the program when\nexpected conditions are not met, introduce your own verbose logging\nlevels, customize the prefix attached to log messages, and more.\n\nFollowing sections describe the functionality supported by glog. Please note\nthis description may not be complete but limited to the most useful ones. If you\nwant to find less common features, please check header files under `src/glog\n<src/glog>`__ directory.\n\nSeverity Levels\n~~~~~~~~~~~~~~~\n\nYou can specify one of the following severity levels (in increasing\norder of severity): ``INFO``, ``WARNING``, ``ERROR``, and ``FATAL``.\nLogging a ``FATAL`` message terminates the program (after the message is\nlogged). Note that messages of a given severity are logged not only in\nthe logfile for that severity, but also in all logfiles of lower\nseverity. E.g., a message of severity ``FATAL`` will be logged to the\nlogfiles of severity ``FATAL``, ``ERROR``, ``WARNING``, and ``INFO``.\n\nThe ``DFATAL`` severity logs a ``FATAL`` error in debug mode (i.e.,\nthere is no ``NDEBUG`` macro defined), but avoids halting the program in\nproduction by automatically reducing the severity to ``ERROR``.\n\nUnless otherwise specified, glog writes to the filename\n``/tmp/\\<program name\\>.\\<hostname\\>.\\<user name\\>.log.\\<severity level\\>.\\<date\\>-\\<time\\>.\\<pid\\>``\n(e.g.,\n``/tmp/hello_world.example.com.hamaji.log.INFO.20080709-222411.10474``).\nBy default, glog copies the log messages of severity level ``ERROR`` or\n``FATAL`` to standard error (``stderr``) in addition to log files.\n\nSetting Flags\n~~~~~~~~~~~~~\n\nSeveral flags influence glog’s output behavior. If the `Google gflags library\n<https://github.com/gflags/gflags>`__ is installed on your machine, the build\nsystem will automatically detect and use it, allowing you to pass flags on the\ncommand line. For example, if you want to turn the flag :cmd:`--logtostderr` on,\nyou can start your application with the following command line:\n\n.. code:: bash\n\n   ./your_application --logtostderr=1\n\nIf the Google gflags library isn’t installed, you set flags via\nenvironment variables, prefixing the flag name with ``GLOG_``, e.g.,\n\n.. code:: bash\n\n   GLOG_logtostderr=1 ./your_application\n\nThe following flags are most commonly used:\n\n``logtostderr`` (``bool``, default=\\ ``false``)\n   Log messages to ``stderr`` instead of logfiles. Note: you can set\n   binary flags to ``true`` by specifying ``1``, ``true``, or ``yes``\n   (case insensitive). Also, you can set binary flags to ``false`` by\n   specifying ``0``, ``false``, or ``no`` (again, case insensitive).\n\n``stderrthreshold`` (``int``, default=2, which is ``ERROR``)\n   Copy log messages at or above this level to stderr in addition to\n   logfiles. The numbers of severity levels ``INFO``, ``WARNING``,\n   ``ERROR``, and ``FATAL`` are 0, 1, 2, and 3, respectively.\n\n``minloglevel`` (``int``, default=0, which is ``INFO``)\n   Log messages at or above this level. Again, the numbers of severity\n   levels ``INFO``, ``WARNING``, ``ERROR``, and ``FATAL`` are 0, 1, 2,\n   and 3, respectively.\n\n``log_dir`` (``string``, default=\"\")\n   If specified, logfiles are written into this directory instead of the\n   default logging directory.\n\n``v`` (``int``, default=0)\n   Show all ``VLOG(m)`` messages for ``m`` less or equal the value of\n   this flag. Overridable by :cmd:`--vmodule`. See `the section about\n   verbose logging <#verbose-logging>`__ for more detail.\n\n``vmodule`` (``string``, default=\"\")\n   Per-module verbose level. The argument has to contain a\n   comma-separated list of <module name>=<log level>. <module name> is a\n   glob pattern (e.g., ``gfs*`` for all modules whose name starts with\n   \"gfs\"), matched against the filename base (that is, name ignoring\n   .cc/.h./-inl.h). <log level> overrides any value given by :cmd:`--v`.\n   See also `the section about verbose logging <#verbose-logging>`__.\n\nThere are some other flags defined in logging.cc. Please grep the source\ncode for ``DEFINE_`` to see a complete list of all flags.\n\nYou can also modify flag values in your program by modifying global\nvariables ``FLAGS_*`` . Most settings start working immediately after\nyou update ``FLAGS_*`` . The exceptions are the flags related to\ndestination files. For example, you might want to set ``FLAGS_log_dir``\nbefore calling :cpp:`google::InitGoogleLogging` . Here is an example:\n\n.. code:: cpp\n\n   LOG(INFO) << \"file\";\n   // Most flags work immediately after updating values.\n   FLAGS_logtostderr = 1;\n   LOG(INFO) << \"stderr\";\n   FLAGS_logtostderr = 0;\n   // This won’t change the log destination. If you want to set this\n   // value, you should do this before google::InitGoogleLogging .\n   FLAGS_log_dir = \"/some/log/directory\";\n   LOG(INFO) << \"the same file\";\n\nConditional / Occasional Logging\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSometimes, you may only want to log a message under certain conditions.\nYou can use the following macros to perform conditional logging:\n\n.. code:: cpp\n\n   LOG_IF(INFO, num_cookies > 10) << \"Got lots of cookies\";\n\nThe \"Got lots of cookies\" message is logged only when the variable\n``num_cookies`` exceeds 10. If a line of code is executed many times, it\nmay be useful to only log a message at certain intervals. This kind of\nlogging is most useful for informational messages.\n\n.. code:: cpp\n\n   LOG_EVERY_N(INFO, 10) << \"Got the \" << google::COUNTER << \"th cookie\";\n\nThe above line outputs a log messages on the 1st, 11th, 21st, ... times\nit is executed. Note that the special ``google::COUNTER`` value is used\nto identify which repetition is happening.\n\nYou can combine conditional and occasional logging with the following\nmacro.\n\n.. code:: cpp\n\n   LOG_IF_EVERY_N(INFO, (size > 1024), 10) << \"Got the \" << google::COUNTER\n                                           << \"th big cookie\";\n\nInstead of outputting a message every nth time, you can also limit the\noutput to the first n occurrences:\n\n.. code:: cpp\n\n   LOG_FIRST_N(INFO, 20) << \"Got the \" << google::COUNTER << \"th cookie\";\n\nOutputs log messages for the first 20 times it is executed. Again, the\n``google::COUNTER`` identifier indicates which repetition is happening.\n\nOther times, it is desired to only log a message periodically based on a time.\nSo for example, to log a message every 10ms:\n\n.. code:: cpp\n\n   LOG_EVERY_T(INFO, 0.01) << \"Got a cookie\";\n\nOr every 2.35s:\n\n.. code:: cpp\n\n   LOG_EVERY_T(INFO, 2.35) << \"Got a cookie\";\n\nDebug Mode Support\n~~~~~~~~~~~~~~~~~~\n\nSpecial \"debug mode\" logging macros only have an effect in debug mode\nand are compiled away to nothing for non-debug mode compiles. Use these\nmacros to avoid slowing down your production application due to\nexcessive logging.\n\n.. code:: cpp\n\n   DLOG(INFO) << \"Found cookies\";\n   DLOG_IF(INFO, num_cookies > 10) << \"Got lots of cookies\";\n   DLOG_EVERY_N(INFO, 10) << \"Got the \" << google::COUNTER << \"th cookie\";\n\n\n``CHECK`` Macros\n~~~~~~~~~~~~~~~~\n\nIt is a good practice to check expected conditions in your program\nfrequently to detect errors as early as possible. The ``CHECK`` macro\nprovides the ability to abort the application when a condition is not\nmet, similar to the ``assert`` macro defined in the standard C library.\n\n``CHECK`` aborts the application if a condition is not true. Unlike\n``assert``, it is \\*not\\* controlled by ``NDEBUG``, so the check will be\nexecuted regardless of compilation mode. Therefore, ``fp->Write(x)`` in\nthe following example is always executed:\n\n.. code:: cpp\n\n   CHECK(fp->Write(x) == 4) << \"Write failed!\";\n\nThere are various helper macros for equality/inequality checks -\n``CHECK_EQ``, ``CHECK_NE``, ``CHECK_LE``, ``CHECK_LT``, ``CHECK_GE``,\nand ``CHECK_GT``. They compare two values, and log a ``FATAL`` message\nincluding the two values when the result is not as expected. The values\nmust have :cpp:`operator<<(ostream, ...)` defined.\n\nYou may append to the error message like so:\n\n.. code:: cpp\n\n   CHECK_NE(1, 2) << \": The world must be ending!\";\n\nWe are very careful to ensure that each argument is evaluated exactly\nonce, and that anything which is legal to pass as a function argument is\nlegal here. In particular, the arguments may be temporary expressions\nwhich will end up being destroyed at the end of the apparent statement,\nfor example:\n\n.. code:: cpp\n\n   CHECK_EQ(string(\"abc\")[1], ’b’);\n\nThe compiler reports an error if one of the arguments is a pointer and the other\nis :cpp:`nullptr`. To work around this, simply :cpp:`static_cast` :cpp:`nullptr` to\nthe type of the desired pointer.\n\n.. code:: cpp\n\n   CHECK_EQ(some_ptr, static_cast<SomeType*>(nullptr));\n\nBetter yet, use the ``CHECK_NOTNULL`` macro:\n\n.. code:: cpp\n\n   CHECK_NOTNULL(some_ptr);\n   some_ptr->DoSomething();\n\nSince this macro returns the given pointer, this is very useful in\nconstructor initializer lists.\n\n.. code:: cpp\n\n   struct S {\n       S(Something* ptr) : ptr_(CHECK_NOTNULL(ptr)) {}\n       Something* ptr_;\n   };\n\nNote that you cannot use this macro as a C++ stream due to this feature.\nPlease use ``CHECK_EQ`` described above to log a custom message before\naborting the application.\n\nIf you are comparing C strings (:cpp:`char *`), a handy set of macros performs\ncase sensitive as well as case insensitive comparisons - ``CHECK_STREQ``,\n``CHECK_STRNE``, ``CHECK_STRCASEEQ``, and ``CHECK_STRCASENE``. The CASE versions\nare case-insensitive. You can safely pass :cpp:`nullptr` pointers for this macro. They\ntreat :cpp:`nullptr` and any non-:cpp:`nullptr` string as not equal. Two :cpp:`nullptr`\\\ns are equal.\n\nNote that both arguments may be temporary strings which are destructed\nat the end of the current \"full expression\" (e.g.,\n:cpp:`CHECK_STREQ(Foo().c_str(), Bar().c_str())` where ``Foo`` and ``Bar``\nreturn C++’s :cpp:`std::string`).\n\nThe ``CHECK_DOUBLE_EQ`` macro checks the equality of two floating point\nvalues, accepting a small error margin. ``CHECK_NEAR`` accepts a third\nfloating point argument, which specifies the acceptable error margin.\n\nVerbose Logging\n~~~~~~~~~~~~~~~\n\nWhen you are chasing difficult bugs, thorough log messages are very useful.\nHowever, you may want to ignore too verbose messages in usual development. For\nsuch verbose logging, glog provides the ``VLOG`` macro, which allows you to\ndefine your own numeric logging levels. The :cmd:`--v` command line option\ncontrols which verbose messages are logged:\n\n.. code:: cpp\n\n   VLOG(1) << \"I’m printed when you run the program with --v=1 or higher\";\n   VLOG(2) << \"I’m printed when you run the program with --v=2 or higher\";\n\nWith ``VLOG``, the lower the verbose level, the more likely messages are to be\nlogged. For example, if :cmd:`--v==1`, ``VLOG(1)`` will log, but ``VLOG(2)``\nwill not log. This is opposite of the severity level, where ``INFO`` is 0, and\n``ERROR`` is 2. :cmd:`--minloglevel` of 1 will log ``WARNING`` and above. Though\nyou can specify any integers for both ``VLOG`` macro and :cmd:`--v` flag, the\ncommon values for them are small positive integers. For example, if you write\n``VLOG(0)``, you should specify :cmd:`--v=-1` or lower to silence it. This is\nless useful since we may not want verbose logs by default in most cases. The\n``VLOG`` macros always log at the ``INFO`` log level (when they log at all).\n\nVerbose logging can be controlled from the command line on a per-module\nbasis:\n\n.. code:: bash\n\n   --vmodule=mapreduce=2,file=1,gfs*=3 --v=0\n\nwill:\n\n(a) Print ``VLOG(2)`` and lower messages from mapreduce.{h,cc}\n(b) Print ``VLOG(1)`` and lower messages from file.{h,cc}\n(c) Print ``VLOG(3)`` and lower messages from files prefixed with \"gfs\"\n(d) Print ``VLOG(0)`` and lower messages from elsewhere\n\nThe wildcarding functionality shown by (c) supports both ’*’ (matches 0\nor more characters) and ’?’ (matches any single character) wildcards.\nPlease also check the section about `command line flags <#setting-flags>`__.\n\nThere’s also ``VLOG_IS_ON(n)`` \"verbose level\" condition macro. This\nmacro returns true when the :cmd:`--v` is equal or greater than ``n``. To\nbe used as\n\n.. code:: cpp\n\n   if (VLOG_IS_ON(2)) {\n       // do some logging preparation and logging\n       // that can’t be accomplished with just VLOG(2) << ...;\n   }\n\nVerbose level condition macros ``VLOG_IF``, ``VLOG_EVERY_N`` and\n``VLOG_IF_EVERY_N`` behave analogous to ``LOG_IF``, ``LOG_EVERY_N``,\n``LOF_IF_EVERY``, but accept a numeric verbosity level as opposed to a\nseverity level.\n\n.. code:: cpp\n\n   VLOG_IF(1, (size > 1024))\n      << \"I’m printed when size is more than 1024 and when you run the \"\n         \"program with --v=1 or more\";\n   VLOG_EVERY_N(1, 10)\n      << \"I’m printed every 10th occurrence, and when you run the program \"\n         \"with --v=1 or more. Present occurrence is \" << google::COUNTER;\n   VLOG_IF_EVERY_N(1, (size > 1024), 10)\n      << \"I’m printed on every 10th occurrence of case when size is more \"\n         \" than 1024, when you run the program with --v=1 or more. \";\n         \"Present occurrence is \" << google::COUNTER;\n\n\nCustom Log Prefix Format\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nglog supports changing the format of the prefix attached to log messages by\nreceiving a user-provided callback to be used to generate such strings.\n\nFor each log entry, the callback will be invoked with a ``LogMessageInfo``\nstruct containing the severity, filename, line number, thread ID, and time of\nthe event. It will also be given a reference to the output stream, whose\ncontents will be prepended to the actual message in the final log line.\n\nFor example:\n\n.. code:: cpp\n\n    /* This function writes a prefix that matches glog's default format.\n     * (The third parameter can be used to receive user-supplied data, and is\n     * nullptr by default.)\n     */\n    void CustomPrefix(std::ostream &s, const LogMessageInfo &l, void*) {\n       s << l.severity[0]\n       << setw(4) << 1900 + l.time.year()\n       << setw(2) << 1 + l.time.month()\n       << setw(2) << l.time.day()\n       << ' '\n       << setw(2) << l.time.hour() << ':'\n       << setw(2) << l.time.min()  << ':'\n       << setw(2) << l.time.sec() << \".\"\n       << setw(6) << l.time.usec()\n       << ' '\n       << setfill(' ') << setw(5)\n       << l.thread_id << setfill('0')\n       << ' '\n       << l.filename << ':' << l.line_number << \"]\";\n    }\n\n\nTo enable the use of ``CustomPrefix()``, simply give glog a pointer to it\nduring initialization: ``InitGoogleLogging(argv[0], &CustomPrefix);``.\n\nOptionally, ``InitGoogleLogging()`` takes a third argument of type  ``void*``\nto pass on to the callback function.\n\nFailure Signal Handler\n~~~~~~~~~~~~~~~~~~~~~~\n\nThe library provides a convenient signal handler that will dump useful\ninformation when the program crashes on certain signals such as ``SIGSEGV``. The\nsignal handler can be installed by :cpp:`google::InstallFailureSignalHandler()`.\nThe following is an example of output from the signal handler.\n\n::\n\n   *** Aborted at 1225095260 (unix time) try \"date -d @1225095260\" if you are using GNU date ***\n   *** SIGSEGV (@0x0) received by PID 17711 (TID 0x7f893090a6f0) from PID 0; stack trace: ***\n   PC: @           0x412eb1 TestWaitingLogSink::send()\n       @     0x7f892fb417d0 (unknown)\n       @           0x412eb1 TestWaitingLogSink::send()\n       @     0x7f89304f7f06 google::LogMessage::SendToLog()\n       @     0x7f89304f35af google::LogMessage::Flush()\n       @     0x7f89304f3739 google::LogMessage::~LogMessage()\n       @           0x408cf4 TestLogSinkWaitTillSent()\n       @           0x4115de main\n       @     0x7f892f7ef1c4 (unknown)\n       @           0x4046f9 (unknown)\n\nBy default, the signal handler writes the failure dump to the standard\nerror. You can customize the destination by :cpp:`InstallFailureWriter()`.\n\nPerformance of Messages\n~~~~~~~~~~~~~~~~~~~~~~~\n\nThe conditional logging macros provided by glog (e.g., ``CHECK``,\n``LOG_IF``, ``VLOG``, etc.) are carefully implemented and don’t execute\nthe right hand side expressions when the conditions are false. So, the\nfollowing check may not sacrifice the performance of your application.\n\n.. code:: cpp\n\n   CHECK(obj.ok) << obj.CreatePrettyFormattedStringButVerySlow();\n\nUser-defined Failure Function\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``FATAL`` severity level messages or unsatisfied ``CHECK`` condition\nterminate your program. You can change the behavior of the termination\nby :cpp:`InstallFailureFunction`.\n\n.. code:: cpp\n\n   void YourFailureFunction() {\n     // Reports something...\n     exit(EXIT_FAILURE);\n   }\n\n   int main(int argc, char* argv[]) {\n     google::InstallFailureFunction(&YourFailureFunction);\n   }\n\nBy default, glog tries to dump stacktrace and makes the program exit\nwith status 1. The stacktrace is produced only when you run the program\non an architecture for which glog supports stack tracing (as of\nSeptember 2008, glog supports stack tracing for x86 and x86_64).\n\nRaw Logging\n~~~~~~~~~~~\n\nThe header file ``<glog/raw_logging.h>`` can be used for thread-safe logging,\nwhich does not allocate any memory or acquire any locks. Therefore, the macros\ndefined in this header file can be used by low-level memory allocation and\nsynchronization code. Please check `src/glog/raw_logging.h.in\n<src/glog/raw_logging.h.in>`__ for detail.\n\nGoogle Style ``perror()``\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``PLOG()`` and ``PLOG_IF()`` and ``PCHECK()`` behave exactly like their\n``LOG*`` and ``CHECK`` equivalents with the addition that they append a\ndescription of the current state of errno to their output lines. E.g.\n\n.. code:: cpp\n\n   PCHECK(write(1, nullptr, 2) >= 0) << \"Write nullptr failed\";\n\nThis check fails with the following error message.\n\n::\n\n   F0825 185142 test.cc:22] Check failed: write(1, nullptr, 2) >= 0 Write nullptr failed: Bad address [14]\n\nSyslog\n~~~~~~\n\n``SYSLOG``, ``SYSLOG_IF``, and ``SYSLOG_EVERY_N`` macros are available.\nThese log to syslog in addition to the normal logs. Be aware that\nlogging to syslog can drastically impact performance, especially if\nsyslog is configured for remote logging! Make sure you understand the\nimplications of outputting to syslog before you use these macros. In\ngeneral, it’s wise to use these macros sparingly.\n\nStrip Logging Messages\n~~~~~~~~~~~~~~~~~~~~~~\n\nStrings used in log messages can increase the size of your binary and\npresent a privacy concern. You can therefore instruct glog to remove all\nstrings which fall below a certain severity level by using the\n``GOOGLE_STRIP_LOG`` macro:\n\nIf your application has code like this:\n\n.. code:: cpp\n\n   #define GOOGLE_STRIP_LOG 1    // this must go before the #include!\n   #include <glog/logging.h>\n\nThe compiler will remove the log messages whose severities are less than\nthe specified integer value. Since ``VLOG`` logs at the severity level\n``INFO`` (numeric value ``0``), setting ``GOOGLE_STRIP_LOG`` to 1 or\ngreater removes all log messages associated with ``VLOG``\\ s as well as\n``INFO`` log statements.\n\nAutomatically Remove Old Logs\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo enable the log cleaner:\n\n.. code:: cpp\n\n   google::EnableLogCleaner(3); // keep your logs for 3 days\n\nAnd then glog will check if there are overdue logs whenever a flush is\nperformed. In this example, any log file from your project whose last\nmodified time is greater than 3 days will be unlink()ed.\n\nThis feature can be disabled at any time (if it has been enabled)\n\n.. code:: cpp\n\n   google::DisableLogCleaner();\n\nNotes for Windows Users\n~~~~~~~~~~~~~~~~~~~~~~~\n\nglog defines a severity level ``ERROR``, which is also defined in\n``windows.h`` . You can make glog not define ``INFO``, ``WARNING``,\n``ERROR``, and ``FATAL`` by defining ``GLOG_NO_ABBREVIATED_SEVERITIES``\nbefore including ``glog/logging.h`` . Even with this macro, you can\nstill use the iostream like logging facilities:\n\n.. code:: cpp\n\n   #define GLOG_NO_ABBREVIATED_SEVERITIES\n   #include <windows.h>\n   #include <glog/logging.h>\n\n   // ...\n\n   LOG(ERROR) << \"This should work\";\n   LOG_IF(ERROR, x > y) << \"This should be also OK\";\n\nHowever, you cannot use ``INFO``, ``WARNING``, ``ERROR``, and ``FATAL``\nanymore for functions defined in ``glog/logging.h`` .\n\n.. code:: cpp\n\n   #define GLOG_NO_ABBREVIATED_SEVERITIES\n   #include <windows.h>\n   #include <glog/logging.h>\n\n   // ...\n\n   // This won’t work.\n   // google::FlushLogFiles(google::ERROR);\n\n   // Use this instead.\n   google::FlushLogFiles(google::GLOG_ERROR);\n\nIf you don’t need ``ERROR`` defined by ``windows.h``, there are a couple\nof more workarounds which sometimes don’t work:\n\n-  ``#define WIN32_LEAN_AND_MEAN`` or ``NOGDI`` **before** you\n   ``#include windows.h``.\n-  ``#undef ERROR`` **after** you ``#include windows.h`` .\n\nSee `this\nissue <http://code.google.com/p/google-glog/issues/detail?id=33>`__ for\nmore detail.\n\n\nInstallation Notes for 64-bit Linux Systems\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe glibc built-in stack-unwinder on 64-bit systems has some problems with glog.\n(In particular, if you are using :cpp:`InstallFailureSignalHandler()`, the\nsignal may be raised in the middle of malloc, holding some malloc-related locks\nwhen they invoke the stack unwinder. The built-in stack unwinder may call malloc\nrecursively, which may require the thread to acquire a lock it already holds:\ndeadlock.)\n\nFor that reason, if you use a 64-bit system and you need\n:cpp:`InstallFailureSignalHandler()`, we strongly recommend you install\n``libunwind`` before trying to configure or install google glog.\nlibunwind can be found\n`here <http://download.savannah.nongnu.org/releases/libunwind/libunwind-snap-070410.tar.gz>`__.\n\nEven if you already have ``libunwind`` installed, you will probably\nstill need to install from the snapshot to get the latest version.\n\nCaution: if you install libunwind from the URL above, be aware that you\nmay have trouble if you try to statically link your binary with glog:\nthat is, if you link with ``gcc -static -lgcc_eh ...``. This is because\nboth ``libunwind`` and ``libgcc`` implement the same C++ exception\nhandling APIs, but they implement them differently on some platforms.\nThis is not likely to be a problem on ia64, but may be on x86-64.\n\nAlso, if you link binaries statically, make sure that you add\n:cmd:`-Wl,--eh-frame-hdr` to your linker options. This is required so that\n``libunwind`` can find the information generated by the compiler required for\nstack unwinding.\n\nUsing :cmd:`-static` is rare, though, so unless you know this will affect you it\nprobably won’t.\n\nIf you cannot or do not wish to install libunwind, you can still try to\nuse two kinds of stack-unwinder: 1. glibc built-in stack-unwinder and 2.\nframe pointer based stack-unwinder.\n\n1. As we already mentioned, glibc’s unwinder has a deadlock issue.\n   However, if you don’t use :cpp:`InstallFailureSignalHandler()` or you\n   don’t worry about the rare possibilities of deadlocks, you can use\n   this stack-unwinder. If you specify no options and ``libunwind``\n   isn’t detected on your system, the configure script chooses this\n   unwinder by default.\n\n2. The frame pointer based stack unwinder requires that your\n   application, the glog library, and system libraries like libc, all be\n   compiled with a frame pointer. This is *not* the default for x86-64.\n\n\nHow to Contribute\n-----------------\n\nWe’d love to accept your patches and contributions to this project.\nThere are a just a few small guidelines you need to follow.\n\nContributor License Agreement (CLA)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nContributions to any Google project must be accompanied by a Contributor\nLicense Agreement. This is not a copyright **assignment**, it simply\ngives Google permission to use and redistribute your contributions as\npart of the project.\n\n* If you are an individual writing original source code and you’re sure\n  you own the intellectual property, then you’ll need to sign an\n  `individual\n  CLA <https://developers.google.com/open-source/cla/individual>`__.\n* If you work for a company that wants to allow you to contribute your\n  work, then you’ll need to sign a `corporate\n  CLA <https://developers.google.com/open-source/cla/corporate>`__.\n\nYou generally only need to submit a CLA once, so if you’ve already\nsubmitted one (even if it was for a different project), you probably\ndon’t need to do it again.\n\nOnce your CLA is submitted (or if you already submitted one for another\nGoogle project), make a commit adding yourself to the\n`AUTHORS <./AUTHORS>`__ and `CONTRIBUTORS <./CONTRIBUTORS>`__ files. This\ncommit can be part of your first `pull\nrequest <https://help.github.com/articles/creating-a-pull-request>`__.\n\nSubmitting a Patch\n~~~~~~~~~~~~~~~~~~\n\n1. It’s generally best to start by opening a new issue describing the\n   bug or feature you’re intending to fix. Even if you think it’s\n   relatively minor, it’s helpful to know what people are working on.\n   Mention in the initial issue that you are planning to work on that\n   bug or feature so that it can be assigned to you.\n2. Follow the normal process of\n   `forking <https://help.github.com/articles/fork-a-repo>`__ the\n   project, and setup a new branch to work in. It’s important that each\n   group of changes be done in separate branches in order to ensure that\n   a pull request only includes the commits related to that bug or\n   feature.\n3. Do your best to have `well-formed commit\n   messages <http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html>`__\n   for each change. This provides consistency throughout the project,\n   and ensures that commit messages are able to be formatted properly by\n   various git tools.\n4. Finally, push the commits to your fork and submit a `pull\n   request <https://help.github.com/articles/creating-a-pull-request>`__.\n\n\n.. |Linux Github actions| image:: https://github.com/google/glog/actions/workflows/linux.yml/badge.svg\n   :target: https://github.com/google/glog/actions\n.. |Windows Github actions| image:: https://github.com/google/glog/actions/workflows/windows.yml/badge.svg\n   :target: https://github.com/google/glog/actions\n.. |macOS Github actions| image:: https://github.com/google/glog/actions/workflows/macos.yml/badge.svg\n   :target: https://github.com/google/glog/actions\n.. |Codecov| image:: https://codecov.io/gh/google/glog/branch/master/graph/badge.svg?token=8an420vNju\n   :target: https://codecov.io/gh/google/glog"
}
