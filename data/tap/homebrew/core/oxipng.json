{
  "name": "oxipng",
  "full_name": "oxipng",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Multithreaded PNG optimizer written in Rust",
  "license": "MIT",
  "homepage": "https://github.com/shssoichiro/oxipng",
  "versions": {
    "stable": "8.0.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/shssoichiro/oxipng/archive/v8.0.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "ef96d6340e70900de0a38ace8f5f20878f6c256b18b0c59cd87f2b515437b87b"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/oxipng/blobs/sha256:ab9167d9fac2985e904c86f32e05266b7b483aa5eeeb921d29b83afece4afe2c",
          "sha256": "ab9167d9fac2985e904c86f32e05266b7b483aa5eeeb921d29b83afece4afe2c"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/oxipng/blobs/sha256:def19daa9c66adcf5d92dc3c71f2b531af46f637c1d8f567ec4812fb9e3a1138",
          "sha256": "def19daa9c66adcf5d92dc3c71f2b531af46f637c1d8f567ec4812fb9e3a1138"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/oxipng/blobs/sha256:836f09e119c031e40473101093003cca4ec659403d0a647a029749eab8c65518",
          "sha256": "836f09e119c031e40473101093003cca4ec659403d0a647a029749eab8c65518"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/oxipng/blobs/sha256:2d6a20924a4a07e48b5afc8d5878ff82dee29428551e9b0113b02e1c4a66b31d",
          "sha256": "2d6a20924a4a07e48b5afc8d5878ff82dee29428551e9b0113b02e1c4a66b31d"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/oxipng/blobs/sha256:b1c0d211e9db0033ea8de501ce95463a2c3845a782cda6422fa91343a5cc1c58",
          "sha256": "b1c0d211e9db0033ea8de501ce95463a2c3845a782cda6422fa91343a5cc1c58"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/oxipng/blobs/sha256:0ecc4ad6e44aba3f42f0f935f415d6d264ec0a8bca1f4169a174cfe330b32dde",
          "sha256": "0ecc4ad6e44aba3f42f0f935f415d6d264ec0a8bca1f4169a174cfe330b32dde"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/oxipng/blobs/sha256:b02dc75713930b03e7a89ceae1809e5e1c0404dc574d8e70b8ef0441035a1dd2",
          "sha256": "b02dc75713930b03e7a89ceae1809e5e1c0404dc574d8e70b8ef0441035a1dd2"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/oxipng.rb",
  "ruby_source_checksum": {
    "sha256": "a75b027508d63b92c55ab1083a6d9478e6a10ac5b5dafbc66cccbdb8dffd191e"
  },
  "date_added": "2019-01-10T14:58:24+01:00",
  "readme": "# Oxipng\n\n[![Build Status](https://github.com/shssoichiro/oxipng/workflows/oxipng/badge.svg)](https://github.com/shssoichiro/oxipng/actions?query=branch%3Amaster)\n[![Version](https://img.shields.io/crates/v/oxipng.svg)](https://crates.io/crates/oxipng)\n[![License](https://img.shields.io/crates/l/oxipng.svg)](https://github.com/shssoichiro/oxipng/blob/master/LICENSE)\n[![Docs](https://docs.rs/oxipng/badge.svg)](https://docs.rs/oxipng)\n\n## Overview\n\nOxipng is a multithreaded lossless PNG compression optimizer. It can be used via a command-line\ninterface or as a library in other Rust programs.\n\n## Installing\n\nOxipng for Windows can be downloaded from the [Releases](https://github.com/shssoichiro/oxipng/releases) link on the GitHub page.\n\nFor MacOS or Linux, it is recommended to install from your distro's package repository, if possible.\n\nAlternatively, oxipng can be installed from Cargo, via the following command:\n\n```\ncargo install oxipng\n```\n\nOxipng can be built from source using the latest stable or nightly Rust.\nThis is primarily useful for developing on oxipng.\n\n```\ngit clone https://github.com/shssoichiro/oxipng.git\ncd oxipng\ncargo build --release\ncp target/release/oxipng /usr/local/bin\n```\n\nThe current minimum supported Rust version is **1.65.0**.\n\nOxipng follows Semantic Versioning.\n\n## Usage\n\nOxipng is a command-line utility. Basic usage looks similar to the following:\n\n```\noxipng -o 4 -i 1 --strip safe *.png\n```\n\nThe most commonly used options are as follows:\n\n- Optimization: `-o 1` through `-o 6`, lower is faster, higher is better compression.\n  The default (`-o 2`) is sufficiently fast on a modern CPU and provides 30-50% compression\n  gains over an unoptimized PNG. `-o 4` is 6 times slower than `-o 2` but can provide 5-10%\n  extra compression over `-o 2`. Using any setting higher than `-o 4` is unlikely\n  to give any extra compression gains and is not recommended.\n- Interlacing: `-i 1` will enable [Adam7](https://en.wikipedia.org/wiki/Adam7_algorithm)\n  PNG interlacing on any images that are processed. `-i 0` will remove interlacing from all\n  processed images. Not specifying either will keep the same interlacing state as the\n  input image. Note: Interlacing can add 25-50% to the size of an optimized image. Only use\n  it if you believe the benefits outweigh the costs for your use case.\n- Strip: Used to remove metadata info from processed images. Used via `--strip [safe,all]`.\n  Can save a few kilobytes if you don't need the metadata. \"Safe\" removes only metadata that\n  will never affect rendering of the image. \"All\" removes all metadata that is not critical\n  to the image. You can also pass a comma-separated list of specific metadata chunks to remove.\n  `-s` can be used as a shorthand for `--strip safe`.\n\nMore advanced options can be found by running `oxipng -h`.\n\n## Git integration via [Trunk]\n\n[Trunk] is an extendable superlinter which can be used to run `oxipng` to automatically optimize `png`s when committing them into a git repo, or to gate any `png`s being added to a git repo on whether they are optimized. The [trunk] oxipng integration is [here](https://github.com/trunk-io/plugins/tree/main/linters/oxipng).\n\nTo enable oxipng via [trunk]:\n\n```bash\n# to get the latest version:\ntrunk check enable oxipng\n\n# to get a specific version:\ntrunk check enable oxipng@8.0.0\n```\n\nor modify `.trunk/trunk.yaml` in your repo to contain:\n\n```\nlint:\n  enabled:\n    - oxipng@8.0.0\n```\n\nThen just run:\n\n```bash\n# to optimize a png:\ntrunk fmt <file>\n\n# to check if a png is already optimized:\ntrunk check <file>\n```\n\nYou can setup [trunk] to [manage your git hooks](https://docs.trunk.io/docs/actions-git-hooks) and automatically optimize any `png`s you commit to git, _when_ you `git commit`. To enable this, run:\n\n```bash\ntrunk actions enable trunk-fmt-pre-commit\n```\n\n[trunk]: https://docs.trunk.io\n\n## Library Usage\n\nAlthough originally intended to be used as an executable, oxipng can also be used as a library in\nother Rust projects. To do so, simply add oxipng as a dependency in your Cargo.toml,\nthen `extern crate oxipng` in your project. You should then have access to all of the library\nfunctions [documented here](https://docs.rs/oxipng). The simplest\nmethod of usage involves creating an\n[Options struct](https://docs.rs/oxipng/3.0.1/oxipng/struct.Options.html) and\npassing it, along with an input filename, into the\n[optimize function](https://docs.rs/oxipng/3.0.1/oxipng/fn.optimize.html).\n\nIt is recommended to disable the \"binary\" feature when including oxipng as a library. Currently, there is\nno simple way to just disable one feature in Cargo, it has to be done by disabling default features\nand specifying the desired ones, for example:\n`oxipng = { version = \"8.0\", features = [\"parallel\", \"zopfli\", \"filetime\"], default-features = false }`\n\n## History\n\nOxipng began as a complete rewrite of the OptiPNG project,\nwhich was assumed to be dead as no commit had been made to it since March 2014.\n(OptiPNG has since released a new version, after Oxipng was first released.)\nThe name has been changed to avoid confusion and potential legal issues.\n\nThe core goal of rewriting OptiPNG was to implement multithreading,\nwhich would be very difficult to do within the existing C codebase of OptiPNG.\nThis also served as an opportunity to choose a more modern, safer language (Rust).\n\n## Contributing\n\nAny contributions are welcome and will be accepted via pull request on GitHub. Bug reports can be\nfiled via GitHub issues. Please include as many details as possible. If you have the capability\nto submit a fix with the bug report, it is preferred that you do so via pull request,\nhowever you do not need to be a Rust developer to contribute.\nOther contributions (such as improving documentation or translations) are also welcome via GitHub.\n\n## License\n\nOxipng is open-source software, distributed under the MIT license.\n\n## Benchmarks\n\nTested oxipng 5.0.0 (compiled on rustc 1.55.0-nightly (7a16cfcff 2021-07-11)) against OptiPNG version 0.7.7 on AMD Ryzen 7 4800H with Radeon Graphics with 16 logical cores\n\n```\n\nBenchmark #1: ./target/release/oxipng -P ./tests/files/rgb_16_should_be_grayscale_8.png\n  Time (mean ± σ):     128.8 ms ±  14.2 ms    [User: 296.0 ms, System: 14.3 ms]\n  Range (min … max):    98.8 ms … 152.3 ms    21 runs\n\nBenchmark #2: optipng -simulate ./tests/files/rgb_16_should_be_grayscale_8.png\n  Time (mean ± σ):     254.2 ms ±  16.0 ms    [User: 252.8 ms, System: 1.2 ms]\n  Range (min … max):   208.4 ms … 263.8 ms    14 runs\n\nSummary\n  './target/release/oxipng -P ./tests/files/rgb_16_should_be_grayscale_8.png' ran\n    1.97 ± 0.25 times faster than 'optipng -simulate ./tests/files/rgb_16_should_be_grayscale_8.png'\n\n\n\nBenchmark #1: ./target/release/oxipng -o4 -P ./tests/files/rgb_16_should_be_grayscale_8.png\n  Time (mean ± σ):     141.4 ms ±  14.9 ms    [User: 611.7 ms, System: 21.1 ms]\n  Range (min … max):   100.2 ms … 160.4 ms    23 runs\n\nBenchmark #2: optipng -o 4 -simulate ./tests/files/rgb_16_should_be_grayscale_8.png\n  Time (mean ± σ):     730.0 ms ±  25.9 ms    [User: 728.0 ms, System: 1.2 ms]\n  Range (min … max):   713.3 ms … 768.2 ms    10 runs\n\nSummary\n  './target/release/oxipng -o4 -P ./tests/files/rgb_16_should_be_grayscale_8.png' ran\n    5.16 ± 0.58 times faster than 'optipng -o 4 -simulate ./tests/files/rgb_16_should_be_grayscale_8.png'\n\n```"
}
