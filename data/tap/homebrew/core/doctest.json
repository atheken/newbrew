{
  "name": "doctest",
  "full_name": "doctest",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Feature-rich C++11/14/17/20 single-header testing framework",
  "license": "MIT",
  "homepage": "https://github.com/doctest/doctest",
  "versions": {
    "stable": "2.4.11",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/doctest/doctest/archive/v2.4.11.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "632ed2c05a7f53fa961381497bf8069093f0d6628c5f26286161fbd32a560186"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/doctest/blobs/sha256:b8f867ef81a9944b88b63e945435086d822964acb39dd47b8a059057b76acec3",
          "sha256": "b8f867ef81a9944b88b63e945435086d822964acb39dd47b8a059057b76acec3"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/doctest.rb",
  "ruby_source_checksum": {
    "sha256": "2f102f1020f29c74a1f5bd5a86553c14bec26a190e0670cc3f33922da7cffb01"
  },
  "date_added": "2020-06-20T23:39:12+00:00",
  "readme": "<p align=\"center\"><img src=\"scripts/data/logo/logo_1.svg\"></p>\n\n<b>\n<table>\n    <tr>\n        <td>\n            master branch\n        </td>\n        <td>\n            <a href=\"https://github.com/doctest/doctest/actions?query=branch%3Amaster\"><img src=\"https://github.com/doctest/doctest/workflows/CI/badge.svg?branch=master\"></a>\n        </td>\n        <td>\n            <a href=\"https://app.codecov.io/gh/doctest/doctest/branch/master\"><img src=\"https://codecov.io/gh/doctest/doctest/branch/master/graph/badge.svg?token=fAdZl67WN7\"/></a>\n        </td>\n    </tr>\n    <tr>\n        <td>\n            dev branch\n        </td>\n        <td>\n            <a href=\"https://github.com/doctest/doctest/actions?query=branch%3Adev\"><img src=\"https://github.com/doctest/doctest/workflows/CI/badge.svg?branch=dev\"></a>\n        </td>\n        <td>\n            <a href=\"https://app.codecov.io/gh/doctest/doctest/branch/dev\"><img src=\"https://codecov.io/gh/doctest/doctest/branch/dev/graph/badge.svg?token=fAdZl67WN7\"/></a>\n        </td>\n    </tr>\n</table>\n</b>\n\n**doctest** is a new C++ testing framework but is by far the fastest both in compile times (by [**orders of magnitude**](doc/markdown/benchmarks.md)) and runtime compared to other feature-rich alternatives. It brings the ability of compiled languages such as [**D**](https://dlang.org/spec/unittest.html) / [**Rust**](https://doc.rust-lang.org/book/second-edition/ch11-00-testing.html) / [**Nim**](https://nim-lang.org/docs/unittest.html) to have tests written directly in the production code thanks to a fast, transparent and flexible test runner with a clean interface.\n\n[![Standard](https://img.shields.io/badge/c%2B%2B-11/14/17/20-blue.svg)](https://en.wikipedia.org/wiki/C%2B%2B#Standardization)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n[![download](https://img.shields.io/badge/download%20%20-link-blue.svg)](https://raw.githubusercontent.com/doctest/doctest/master/doctest/doctest.h)\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/503/badge)](https://bestpractices.coreinfrastructure.org/projects/503)\n[![Chat - Discord](https://img.shields.io/badge/chat-Discord-blue.svg)](https://discord.gg/PGXn9YmyF3)\n[![Try it online](https://img.shields.io/badge/try%20it-online-orange.svg)](https://godbolt.org/z/4s389Kbfs)\n<!--\n[![Language](https://img.shields.io/badge/language-C++-blue.svg)](https://isocpp.org/)\n[![documentation](https://img.shields.io/badge/documentation%20%20-online-blue.svg)](https://github.com/doctest/doctest/blob/master/doc/markdown/readme.md#reference)\n-->\n\n[<img src=\"https://c5.patreon.com/external/logo/become_a_patron_button.png\" align=\"right\">](https://www.patreon.com/onqtam)\n\nThe framework is and will stay free but needs your support to sustain its development. There are lots of <a href=\"https://github.com/doctest/doctest/issues/600\"><b>new features</b></a> and maintenance to do. If you work for a company using **doctest** or have the means to do so, please consider financial support. Monthly donations via Patreon and one-offs via PayPal.\n\n[<img src=\"https://raw.githubusercontent.com/aha999/DonateButtons/master/paypal-donate-icon-7.png\" width=100 align=\"right\">](https://www.paypal.me/onqtam/10)\n\nA complete example with a self-registering test that compiles to an executable looks like this:\n\n![cover-example](scripts/data/using_doctest_888px_wide.gif)\n\nThere are many C++ testing frameworks - [Catch](https://github.com/catchorg/Catch2), [Boost.Test](http://www.boost.org/doc/libs/1_64_0/libs/test/doc/html/index.html), [UnitTest++](https://github.com/unittest-cpp/unittest-cpp), [cpputest](https://github.com/cpputest/cpputest), [googletest](https://github.com/google/googletest) and [others](https://en.wikipedia.org/wiki/List_of_unit_testing_frameworks#C.2B.2B).\n\nThe **key** differences between it and other testing frameworks are that it is light and unintrusive:\n- Ultra light on compile times both in terms of [**including the header**](doc/markdown/benchmarks.md#cost-of-including-the-header) and writing [**thousands of asserts**](doc/markdown/benchmarks.md#cost-of-an-assertion-macro)\n- Doesn't produce any warnings even on the [**most aggressive**](scripts/cmake/common.cmake#L84) warning levels for **MSVC**/**GCC**/**Clang**\n- Can remove **everything** testing-related from the binary with the [**```DOCTEST_CONFIG_DISABLE```**](doc/markdown/configuration.md#doctest_config_disable) identifier\n- [**thread-safe**](doc/markdown/faq.md#is-doctest-thread-aware) - asserts can be used from multiple threads spawned from a single test case - [**example**](examples/all_features/concurrency.cpp)\n- asserts can be used [**outside of a testing context**](doc/markdown/assertions.md#using-asserts-out-of-a-testing-context) - as a general purpose assert library - [**example**](examples/all_features/asserts_used_outside_of_tests.cpp)\n- No global namespace pollution (everything is in ```doctest::```) & doesn't drag **any** headers with it\n- [**Portable**](doc/markdown/features.md#extremely-portable) C++11 (use tag [**1.2.9**](https://github.com/doctest/doctest/tree/1.2.9) for C++98) with over 100 different CI builds (static analysis, sanitizers..)\n- binaries (exe/dll) can use the test runner of another binary => tests in a single registry - [**example**](examples/executable_dll_and_plugin/)\n\n![cost-of-including-the-framework-header](scripts/data/benchmarks/header.png)\n\nThis allows the framework to be used in more ways than any other - tests can be written directly in the production code!\n\n*Tests can be a form of documentation and should be able to reside near the production code which they test.*\n\n- This makes the barrier for writing tests **much lower** - you don't have to: **1)** make a separate source file **2)** include a bunch of stuff in it **3)** add it to the build system and **4)** add it to source control - You can just write the tests for a class or a piece of functionality at the bottom of its source file - or even header file!\n- Tests in the production code can be thought of as documentation/up-to-date comments - showcasing the APIs\n- Testing internals that are not exposed through the public API and headers is no longer a mind-bending exercise\n- [**Test-driven development**](https://en.wikipedia.org/wiki/Test-driven_development) in C++ has never been easier!\n\nThe framework can be used just like any other without mixing production code and tests - check out the [**features**](doc/markdown/features.md).\n\n**doctest** is modeled after [**Catch**](https://github.com/catchorg/Catch2) and some parts of the code have been taken directly - check out [**the differences**](doc/markdown/faq.md#how-is-doctest-different-from-catch).\n\n[This table](https://github.com/martinmoene/catch-lest-other-comparison) compares **doctest** / [**Catch**](https://github.com/catchorg/Catch2) / [**lest**](https://github.com/martinmoene/lest) which are all very similar.\n\nCheckout the [**CppCon 2017 talk**](https://cppcon2017.sched.com/event/BgsI/mix-tests-and-production-code-with-doctest-implementing-and-using-the-fastest-modern-c-testing-framework) on [**YouTube**](https://www.youtube.com/watch?v=eH1CxEC29l8) to get a better understanding of how the framework works and read about how to use it in [**the JetBrains article**](https://blog.jetbrains.com/rscpp/better-ways-testing-with-doctest/) - highlighting the unique aspects of the framework! On a short description on how to use the framework along production code you could refer to [**this GitHub issue**](https://github.com/doctest/doctest/issues/252). There is also an [**older article**](https://accu.org/var/uploads/journals/Overload137.pdf) in the february edition of ACCU Overload 2017.\n\n[![CppCon 2017 talk about doctest on youtube](scripts/data/youtube-cppcon-talk-thumbnail.png)](https://www.youtube.com/watch?v=eH1CxEC29l8)\n\nDocumentation\n-------------\n\nProject:\n\n- [Features and design goals](doc/markdown/features.md) - the complete list of features\n- [Community driven roadmap](https://github.com/doctest/doctest/issues/600) - upcoming features\n- [Benchmarks](doc/markdown/benchmarks.md) - compile-time and runtime supremacy\n- [Contributing](CONTRIBUTING.md) - how to make a proper pull request\n- [Changelog](CHANGELOG.md) - generated changelog based on closed issues/PRs\n\nUsage:\n\n- [Tutorial](doc/markdown/tutorial.md) - make sure you have read it before the other parts of the documentation\n- [Assertion macros](doc/markdown/assertions.md)\n- [Test cases, subcases and test fixtures](doc/markdown/testcases.md)\n- [Parameterized test cases](doc/markdown/parameterized-tests.md)\n- [Command line](doc/markdown/commandline.md)\n- [Logging macros](doc/markdown/logging.md)\n- [```main()``` entry point](doc/markdown/main.md)\n- [Configuration](doc/markdown/configuration.md)\n- [String conversions](doc/markdown/stringification.md)\n- [Reporters](doc/markdown/reporters.md)\n- [Extensions](doc/markdown/extensions.md)\n- [FAQ](doc/markdown/faq.md)\n- [Build systems](doc/markdown/build-systems.md)\n- [Examples](examples)\n\nContributing\n------------\n\n[<img src=\"https://c5.patreon.com/external/logo/become_a_patron_button.png\" align=\"right\">](https://www.patreon.com/onqtam)\n\nSupport the development of the project with donations! There is a list of planned features which are all important and big - see the [**roadmap**](https://github.com/doctest/doctest/issues/600).\n\n[<img src=\"https://raw.githubusercontent.com/aha999/DonateButtons/master/paypal-donate-icon-7.png\" width=100 align=\"right\">](https://www.paypal.me/onqtam/10)\n\nIf you work for a company using **doctest** or have the means to do so, please consider financial support.\n\nContributions in the form of issues and pull requests are welcome as well - check out the [**Contributing**](CONTRIBUTING.md) page.\n\nStargazers over time\n------------\n\n[![Stargazers over time](https://starchart.cc/doctest/doctest.svg)](https://starchart.cc/doctest/doctest)\n\nLogo\n------------\n\nThe [logo](scripts/data/logo) is licensed under a Creative Commons Attribution 4.0 International License. Copyright &copy; 2019 [area55git](https://github.com/area55git) &nbsp; [![License: CC BY 4.0](https://licensebuttons.net/l/by/4.0/80x15.png)](https://creativecommons.org/licenses/by/4.0/)\n\n<p align=\"center\"><img src=\"scripts/data/logo/icon_2.svg\"></p>"
}
