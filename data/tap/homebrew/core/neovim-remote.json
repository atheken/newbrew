{
  "name": "neovim-remote",
  "full_name": "neovim-remote",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [
    "nvr"
  ],
  "versioned_formulae": [],
  "desc": "Control nvim processes using `nvr` command-line tool",
  "license": "MIT",
  "homepage": "https://github.com/mhinz/neovim-remote",
  "versions": {
    "stable": "2.5.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://files.pythonhosted.org/packages/69/50/4fe9ef6fd794929ceae73e476ac8a4ddbf3b0913fa248d834c9bb72978b7/neovim-remote-2.5.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "4b3cc35463544c5747c895c52a0343cfdbba15d307647d7f57f1cce0c6a27d02"
    },
    "head": {
      "url": "https://github.com/mhinz/neovim-remote.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/neovim-remote/blobs/sha256:11cf9bbc583b6e0ab169a0f39e1383cc549162523bbe5594442f5d29259ea520",
          "sha256": "11cf9bbc583b6e0ab169a0f39e1383cc549162523bbe5594442f5d29259ea520"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/neovim-remote/blobs/sha256:45102b633d6c3ea52df5a54b2aaaf9a3c86d3d8ab0e1d409e7dbe8f90f625ad3",
          "sha256": "45102b633d6c3ea52df5a54b2aaaf9a3c86d3d8ab0e1d409e7dbe8f90f625ad3"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/neovim-remote/blobs/sha256:3c10cd5d480c570373ba7fe4d629b7a40b3a41b2cac242ce62cd7b52fac2cac2",
          "sha256": "3c10cd5d480c570373ba7fe4d629b7a40b3a41b2cac242ce62cd7b52fac2cac2"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/neovim-remote/blobs/sha256:d2ed0b820e8e17e93cd3a3655ab3658f6ff8176c1dbe238b00f7a9d7ab8bdda7",
          "sha256": "d2ed0b820e8e17e93cd3a3655ab3658f6ff8176c1dbe238b00f7a9d7ab8bdda7"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/neovim-remote/blobs/sha256:a60c1065aafc55524a57eebdd75facd52432a37d3a3663ed053748b8042b78d2",
          "sha256": "a60c1065aafc55524a57eebdd75facd52432a37d3a3663ed053748b8042b78d2"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/neovim-remote/blobs/sha256:c26fd309db614a1b36d08c4bee8da33444ef525903574f5575fe6964639c6a4c",
          "sha256": "c26fd309db614a1b36d08c4bee8da33444ef525903574f5575fe6964639c6a4c"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/neovim-remote/blobs/sha256:bad631e4f3a4393e233ae231ff191448672affe0aeea8addde4d086f4aa7192a",
          "sha256": "bad631e4f3a4393e233ae231ff191448672affe0aeea8addde4d086f4aa7192a"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/neovim-remote/blobs/sha256:d06a5d88810e44a27c54469b23544650dc67d566117303a76887e0a3f5ac9f16",
          "sha256": "d06a5d88810e44a27c54469b23544650dc67d566117303a76887e0a3f5ac9f16"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "neovim",
    "python@3.11"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/neovim-remote.rb",
  "ruby_source_checksum": {
    "sha256": "869a276fa90cabf4a6c7c08b39f81337ec7c154209e2e85628f6ca2ac53f5740"
  },
  "date_added": "2021-05-17T07:24:45+00:00",
  "readme": "[![Build status](https://travis-ci.org/mhinz/neovim-remote.svg?branch=master)](https://travis-ci.org/mhinz/neovim-remote)\n[![Supported Python versions](https://img.shields.io/pypi/pyversions/neovim-remote.svg)](https://pypi.python.org/pypi/neovim-remote)\n\n<div align='center'>\n  <h1>neovim-remote</h1><br>\n</div>\n\nThis package provides an executable called **nvr** which solves these cases:\n\n- Controlling nvim processes from the shell. E.g. opening files in another\n  terminal window.\n- Opening files from within `:terminal` without starting a nested nvim process.\n\n---\n\n- [Installation](#installation)\n- [Theory](#theory)\n- [First steps](#first-steps)\n- [Typical use cases](#typical-use-cases)\n- [Demos](#demos)\n- [FAQ](#faq)\n\n---\n\n## Installation\n\n    pip3 install neovim-remote\n\nIf you encounter any issues, e.g. permission denied errors or you can't find the\n`nvr` executable, read [INSTALLATION.md](INSTALLATION.md).\n\n## Theory\n\n**Nvim** always starts a server. Get its address with `:echo v:servername`. Or\nspecify an address at startup: `nvim --listen /tmp/nvimsocket`.\n\n**nvr** (the client) will use any address given to it via `--servername`,\n`$NVIM_LISTEN_ADDRESS` (obsolete in nvim but still supported in nvr), or\ndefaults to `/tmp/nvimsocket`.\n\nIf the targeted address does not exist, **nvr** starts a new process by running\n\"nvim\". You can change the command by setting `$NVR_CMD`. _(This requires\nforking, so it won't work on Windows.)_\n\n## First steps\n\nStart a nvim process (which acts as a server) in one shell:\n\n    nvim --listen /tmp/nvimsocket\n\nAnd do this in another shell:\n\n```sh\n# nvr uses /tmp/nvimsocket by default, so we're good.\n\n# Open two files:\nnvr --remote file1 file2\n\n# Send keys to the current buffer:\nnvr --remote-send 'iabc<esc>'\n# Enter insert mode, insert 'abc', and go back to normal mode again.\n\n# Evaluate any VimL expression, e.g. get the current buffer:\nnvr --remote-expr 'bufname(\"\")'\nREADME.md\n```\n\n<details>\n<summary>click here to see all nvr options</summary>\n\n```\n$ nvr -h\nusage: nvr [arguments]\n\nRemote control Neovim processes.\n\nIf no process is found, a new one will be started.\n\n    $ nvr --remote-send 'iabc<cr><esc>'\n    $ nvr --remote-expr 'map([1,2,3], \"v:val + 1\")'\n\nAny arguments not consumed by options will be fed to --remote-silent:\n\n    $ nvr --remote-silent file1 file2\n    $ nvr file1 file2\n\nAll --remote options take optional commands.\nException: --remote-expr, --remote-send.\n\n    $ nvr +10 file\n    $ nvr +'echomsg \"foo\" | echomsg \"bar\"' file\n    $ nvr --remote-tab-wait +'set bufhidden=delete' file\n\nOpen files in a new window from a terminal buffer:\n\n    $ nvr -cc split file1 file2\n\nUse nvr from git to edit commit messages:\n\n    $ git config --global core.editor 'nvr --remote-wait-silent'\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --remote [<file> [<file> ...]]\n                        Use :edit to open files. If no process is found, throw\n                        an error and start a new one.\n  --remote-wait [<file> [<file> ...]]\n                        Like --remote, but block until all buffers opened by\n                        this option get deleted or the process exits.\n  --remote-silent [<file> [<file> ...]]\n                        Like --remote, but throw no error if no process is\n                        found.\n  --remote-wait-silent [<file> [<file> ...]]\n                        Combines --remote-wait and --remote-silent.\n  --remote-tab [<file> [<file> ...]]\n                        Like --remote, but use :tabedit.\n  --remote-tab-wait [<file> [<file> ...]]\n                        Like --remote-wait, but use :tabedit.\n  --remote-tab-silent [<file> [<file> ...]]\n                        Like --remote-silent, but use :tabedit.\n  --remote-tab-wait-silent [<file> [<file> ...]]\n                        Like --remote-wait-silent, but use :tabedit.\n  --remote-send <keys>  Send key presses.\n  --remote-expr <expr>  Evaluate expression and print result in shell.\n  --servername <addr>   Set the address to be used. This overrides the default\n                        \"/tmp/nvimsocket\" and $NVIM_LISTEN_ADDRESS.\n  --serverlist          Print the TCPv4 and Unix domain socket addresses of\n                        all nvim processes.\n  -cc <cmd>             Execute a command before every other option.\n  -c <cmd>              Execute a command after every other option.\n  -d                    Diff mode. Use :diffthis on all to be opened buffers.\n  -l                    Change to previous window via \":wincmd p\".\n  -o <file> [<file> ...]\n                        Open files via \":split\".\n  -O <file> [<file> ...]\n                        Open files via \":vsplit\".\n  -p <file> [<file> ...]\n                        Open files via \":tabedit\".\n  -q <errorfile>        Read errorfile into quickfix list and display first\n                        error.\n  -s                    Silence \"no server found\" message.\n  -t <tag>              Jump to file and position of given tag.\n  --nostart             If no process is found, do not start a new one.\n  --version             Show the nvr version.\n\nDevelopment: https://github.com/mhinz/neovim-remote\n\nHappy hacking!\n```\n</details>\n\n## Typical use cases\n\n- **Open files from within `:terminal` without starting a nested nvim process.**\n\n    Easy-peasy! Just `nvr file`.\n\n    This works without any prior setup, because `$NVIM` is always set for all\n    children of the nvim process, including `:terminal`, and `nvr` will default\n    to that address.\n\n    I often work with two windows next to each other. If one contains the\n    terminal, I can use `nvr -l foo` to open the file in the other window.\n\n- **Open files always in the same nvim process no matter which terminal you're in.**\n\n    Just `nvr -s` starts a new nvim process with the server address set to\n    `/tmp/nvimsocket`.\n\n    Now, no matter which terminal you are in, `nvr file` will always work on\n    that nvim process. That is akin to `emacsclient` from Emacs.\n\n- **Use nvr in plugins.**\n\n    Some plugins rely on the `--remote` family of options from Vim. Nvim had to\n    remove those when they switched to outsource a lot of manual code to libuv.\n    These options are [planned to be added back](https://github.com/neovim/neovim/issues/1750), though.\n\n    In these cases nvr can be used as a drop-in replacement. E.g.\n    [vimtex](https://github.com/lervag/vimtex) can be configured to use nvr to\n    jump to a certain file and line: [read](https://github.com/lervag/vimtex/blob/80b96c13fe9edc5261e9be104fe15cf3bdc3173d/doc/vimtex.txt#L1702-L1708).\n\n- **Use nvr as git editor.**\n\n    Imagine Neovim is set as your default editor via `$VISUAL` or `$EDITOR`.\n\n    Running `git commit` in a regular shell starts a nvim process. But in a\n    terminal buffer (`:terminal`), a new nvim process starts as well. Now you\n    have one nvim nested within another.\n    \n    If you do not want this, put this in your vimrc:\n\n    ```vim\n    if has('nvim')\n      let $GIT_EDITOR = 'nvr -cc split --remote-wait'\n    endif\n    ```\n\n    That way, you get a new window for inserting the commit message instead of a\n    nested nvim process. But git still waits for nvr to finish, so make sure to\n    delete the buffer after saving the commit message: `:w | bd`.\n\n    If you don't like using `:w | bd` and prefer the good old `:wq` (or `:x`),\n    put the following in your vimrc:\n\n    ```vim\n    autocmd FileType gitcommit,gitrebase,gitconfig set bufhidden=delete\n    ```\n\n    To use nvr from a regular shell as well:\n\n        $ git config --global core.editor 'nvr --remote-wait-silent'\n\n- **Use nvr as git mergetool.**\n\n    If you want to use nvr for `git difftool` and `git mergetool`, put this in\n    your gitconfig:\n\n    ```\n    [diff]\n        tool = nvr\n    [difftool \"nvr\"]\n        cmd = nvr -s -d $LOCAL $REMOTE\n    [merge]\n        tool = nvr\n    [mergetool \"nvr\"]\n        cmd = nvr -s -d $LOCAL $BASE $REMOTE $MERGED -c 'wincmd J | wincmd ='\n    ```\n\n    `nvr -d` is a shortcut for `nvr -d -O` and acts like `vim -d`, thus it uses\n    `:vsplit` to open the buffers. If you want them to be opened via `:split`\n    instead, use `nvr -d -o`.\n\n    When used as mergetool and all four buffers got opened, the cursor is in the\n    window containing the $MERGED buffer. We move it to the bottom via `:wincmd\n    J` and then equalize the size of all windows via `:wincmd =`.\n\n- **Use nvr for scripting.**\n\n    You might draw some inspiration from [this Reddit\n    thread](https://www.reddit.com/r/neovim/comments/aex45u/integrating_nvr_and_tmux_to_use_a_single_tmux_per).\n\n## Demos\n\n_(Click on the GIFs to watch them full-size.)_\n\nUsing nvr from another shell: ![Demo 1](https://github.com/mhinz/neovim-remote/raw/master/images/demo1.gif)\n\nUsing nvr from within `:terminal`: ![Demo 2](https://github.com/mhinz/neovim-remote/raw/master/images/demo2.gif)\n\n## FAQ\n\n- **How to open directories?**\n\n    `:e /tmp` opens a directory view via netrw. Netrw works by hooking into certain\n    events, `BufEnter` in this case (see `:au FileExplorer` for all of them).\n\n    Unfortunately Neovim's API doesn't trigger any autocmds on its own, so simply\n    `nvr /tmp` won't work. Meanwhile you can work around it like this:\n\n        $ nvr /tmp -c 'doautocmd BufEnter'\n\n- **Reading from stdin?**\n\n    Yes! E.g. `echo \"foo\\nbar\" | nvr -o -` and `cat file | nvr --remote -` work just\n    as you would expect them to work.\n\n- **Exit code?**\n\n    If you use a [recent enough\n    Neovim](https://github.com/neovim/neovim/commit/d2e8c76dc22460ddfde80477dd93aab3d5866506), nvr will use the same exit code as the linked nvim.\n\n    E.g. `nvr --remote-wait <file>` and then `:cquit` in the linked nvim will make\n    nvr return with 1.\n\n- **How to send a message to all waiting clients?**\n\n    If you open a buffer with any of the _wait_ options, that buffer will get a\n    variable `b:nvr`. The variable contains a list of channels wheres each\n    channel is a waiting nvr client.\n\n    Currently nvr only understands the `Exit` message. You could use it to\n    disconnect all waiting nvr clients at once:\n\n    ```vim\n    command! DisconnectClients\n        \\  if exists('b:nvr')\n        \\|   for client in b:nvr\n        \\|     silent! call rpcnotify(client, 'Exit', 1)\n        \\|   endfor\n        \\| endif\n    ```\n\n- **Can I have auto-completion for bash/fish?**\n\n    If you want basic auto-completion for bash, you can source [this\n    script](contrib/completion.bash) in your .bashrc.\n\n    This also completes server names with the `--servername` option.\n\n    If you want auto-completion for fish, you can add [this\n    file](contrib/completion.fish) to your fish completions dir."
}
