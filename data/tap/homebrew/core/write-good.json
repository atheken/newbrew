{
  "name": "write-good",
  "full_name": "write-good",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Naive linter for English prose",
  "license": "MIT",
  "homepage": "https://github.com/btford/write-good",
  "versions": {
    "stable": "1.0.8",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://registry.npmjs.org/write-good/-/write-good-1.0.8.tgz",
      "tag": null,
      "revision": null,
      "checksum": "f54db3db8db0076fd1c05411c7f3923f055176632c51dc4046ab216e51130221"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/write-good/blobs/sha256:3c0ae187140e31156c039234b5c38df8a326125edcd1ca45a3ef661c620002e1",
          "sha256": "3c0ae187140e31156c039234b5c38df8a326125edcd1ca45a3ef661c620002e1"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/write-good/blobs/sha256:0d7f61673e4bf3404da929427c3ac1003ba259f9d781248d1cfde01da6780d6c",
          "sha256": "0d7f61673e4bf3404da929427c3ac1003ba259f9d781248d1cfde01da6780d6c"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/write-good/blobs/sha256:61d0833a983986732c1d6abb5491a3cc787f30c6987d2c420ef69af5a82e8340",
          "sha256": "61d0833a983986732c1d6abb5491a3cc787f30c6987d2c420ef69af5a82e8340"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/write-good/blobs/sha256:a6794938945be53cbfe3e94f6bf16e8f260bb3ff5f40eeb2d37f64d97c48382d",
          "sha256": "a6794938945be53cbfe3e94f6bf16e8f260bb3ff5f40eeb2d37f64d97c48382d"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/write-good/blobs/sha256:86bd56a8ef2b340804f9da813b086f49f2f2f9f6eb8f31fe1d4137c2c44a1202",
          "sha256": "86bd56a8ef2b340804f9da813b086f49f2f2f9f6eb8f31fe1d4137c2c44a1202"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/write-good/blobs/sha256:9d0239747d4aaff293b839c0cd3d4ee175eb69260d965d810b33b4081a20845c",
          "sha256": "9d0239747d4aaff293b839c0cd3d4ee175eb69260d965d810b33b4081a20845c"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/write-good/blobs/sha256:1bb59d5fc6bc1e3350b3ff45eef3aa3e78500e3cd9342c690f6dcf8b6163a77b",
          "sha256": "1bb59d5fc6bc1e3350b3ff45eef3aa3e78500e3cd9342c690f6dcf8b6163a77b"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/write-good/blobs/sha256:0850f0679ded1af752f6f62b3f88e80134563cfd6d313c9d9b7e42549d421d9d",
          "sha256": "0850f0679ded1af752f6f62b3f88e80134563cfd6d313c9d9b7e42549d421d9d"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/write-good/blobs/sha256:3b0159ea80386272010aec12e84b6c7793b2a358b6f1320797cca326b2c61d61",
          "sha256": "3b0159ea80386272010aec12e84b6c7793b2a358b6f1320797cca326b2c61d61"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "node"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/write-good.rb",
  "ruby_source_checksum": {
    "sha256": "283839fd05411519377107d3ee372c3da61c910865a6a98accee4c1c41f39eba"
  },
  "date_added": "2017-03-27T16:47:18+02:00",
  "readme": "# write good [![Build Status](https://travis-ci.org/btford/write-good.svg?branch=master)](https://travis-ci.org/btford/write-good)\n\nNaive linter for English prose for developers who can't write good and wanna learn to do other stuff good too.\n\n\n## Use\n\n```shell\nnpm install write-good\n```\n\n**Important:** Do not use this tool to be a jerk to other people about their writing.\n\n\n## API\n\n`writeGood` is a function that takes a string and returns an array of suggestions.\n\n```javascript\nvar writeGood = require('write-good');\n\nvar suggestions = writeGood('So the cat was stolen.');\n\n// suggestions:\n//\n// [{\n//   reason: \"omit 'So' from the beginning of sentences\",\n//   index: 0, offset: 2\n// }, {\n//   reason: \"'was stolen' is passive voice\",\n//   index: 11, offset: 10\n// }]\n```\n\n`writeGood` takes an optional second argument that allows you to disable certain checks.\n\nYou can disable checking for passive voice like this:\n\n```javascript\nvar writeGood = require('write-good');\n\nvar suggestions = writeGood('So the cat was stolen', { passive: false });\n// suggestions: []\n```\n\nYou can use the second argument's `checks` property to pass in custom checks instead of `write-good`'s default linting configuration.\nLike this, you can check non-English documents, for example with the linter extension for German, [schreib-gut](https://github.com/TimKam/schreib-gut):\n\n\n```javascript\nvar schreibGut = require('schreib-gut');\n\nwriteGood('Aller Wahrscheinlichkeit nach können Entwickler nicht gut schreiben', { weasel-words: false, checks: schreibGut });\n\n// suggestions\n// [{index : 0, offset : 29, reason : '\"Aller Wahrscheinlichkeit nach\" is wordy or unneeded' }]\n```\n\nYou can use the second argument's `whitelist` property to pass in a list of strings to whitelist from suggestions.\nFor example, normally `only` would be picked up as a bad word to use, but you might want to exempt `read-only` from that:\n\n```javascript\nvar writeGood = require('write-good');\n\nvar suggestions = writeGood('Never write read-only sentences.');\n// suggestions: [{ index: 17, offset: 4, reason: '\"only\" can weaken meaning' }]\n\nvar filtered = writeGood('Never write read-only sentences.', { whitelist: ['read-only'] });\n// filtered: []\n\n```\n\n## CLI\n\nYou can use `write-good` as a command-line tool by installing it globally:\n\n```shell\nnpm install -g write-good\n```\n\nIf you have npm version 5.2.0 or later installed, you can use npx to run write-good without installing it:\n\n```shell\nnpx write-good *.md\n```\n\n`write-good` takes a [glob](https://github.com/isaacs/node-glob) and prints suggestions to stdout:\n\n```shell\n$ write-good *.md\n\nIn README.md\n=============\n = writeGood('So the cat was stolen.');\n                         ^^^^^^^^^^\n\"was stolen\" is passive voice on line 20 at column 40\n-------------\n//   suggestion: \"'was stolen' is passive voice\",\n                   ^^^^^^^^^^\n\"was stolen\" is passive voice on line 28 at column 19\n```\n\nYou can run just specific checks like this:\n\n```shell\nwrite-good *.md --weasel --so\n```\n\nOr exclude checks like this:\n\n```shell\nwrite-good *.md --no-passive\n```\n\nOr include checks like this:\n\n```shell\n# E-Prime is disabled by default.\nwrite-good *.md --yes-eprime\n```\n\n**Note:** The ``--yes`` prefix only works for *E-Prime*, because the other checks are included by default, anyway.\n\nYou can run just with text without supplying files:\n\n```shell\nwrite-good --text=\"It should have been defined there.\"\n```\n\nYou can even supply multi-line text:\n\n```shell\nwrite-good --text=\"I can't see a problem there that's not been defined yet.\nShould be defined again.\"\n```\n\nYou can also pass other arguments:\n\n```shell\nwrite-good --text=\"It should have been defined there.\" --no-passive\n```\n\nYou can even fetch output from a remote file:\n\n```shell\nwrite-good --text=\"$(curl https://raw.githubusercontent.com/btford/write-good/master/README.md)\"\n```\n\nUse the ``--parse`` option to activate parse-happy output and a more conventional Unix exit code:\n\n```shell\nwrite-good *.md --parse\n```\n\nTo specify a custom checks extension, for example [schreib-gut](https://github.com/TimKam/schreib-gut), run:\n\n```shell\nnpm install -g schreib-gut\nwrite-good *.md --checks=schreib-gut\n```\n\nTo view all available options use the ``--help`` option:\n\n```shell\nwrite-good --help\n```\n\n## Checks\n\nYou can disable any combination of the following by providing a key with value `false` as the second argument to `writeGood`.\n\n### `passive`\nChecks for passive voice.\n\n### `illusion`\nChecks for lexical illusions – cases where a word is repeated.\n\n### `so`\nChecks for `so` at the beginning of the sentence.\n\n### `thereIs`\nChecks for `there is` or `there are` at the beginning of the sentence.\n\n### `weasel`\nChecks for \"weasel words.\"\n\n### `adverb`\nChecks for adverbs that can weaken meaning: really, very, extremely, etc.\n\n### `tooWordy`\nChecks for wordy phrases and unnecessary words.\n\n### `cliches`\nChecks for common cliches.\n\n### `eprime`\nChecks for [\"to-be\"](https://en.wikipedia.org/wiki/E-Prime) verbs. _Disabled by default_\n\n## Extensions\nUsers can create their own `write-good` language checks. As described above,\nyou can specify such extensions when running `write-good` on the command line\nor calling it in your JavaScript code.\n\nThe following 3rd-party `write-good` extensions are available:\n\n* [schreib-gut](https://github.com/timkam/schreib-gut): A basic extension for\n  the German language\n\nIf you know of any `write-good` extensions that are not in this list, please open a pull request!\n\n### Interface\nAn extension is a Node.js module that exposes an object containing a check\nfunction (``fn``) and an ``explanation`` string for each new check:\n\n```javascript\nmodule.exports = {\n  check1: {\n    fn: function(text) {\n      …\n    },\n    explanation: '…'\n  },\n  check2: {\n    fn: function(text) {\n      …\n    },\n    explanation: '…'\n  }\n}\n```\n\nEach check function takes a string input and determines a list of style\nviolation objects, each with an ``index`` and an ``offset``:\n\n```javascript\n/**\n* @param {text} text  Input text\n* @return {{index:number, offset:number}[]}  List of all violations\n*/\n```\n\nThe ``index`` defines the position of the match in the input text, whereas the\n``offset`` specifies the length of the match.\n\nThe following example extension provides a check that determines if the input\ntext contains a set of forbidden terms (*Tom Riddle* and *Voldemort*):\n\n```javascript\nmodule.exports = {\n  voldemort: {\n    fn: function (text) {\n      var positives = ['Tom Riddle', 'Voldemort']\n      var re = new RegExp('\\\\b(' + positives.join('|') + ')\\\\b', 'gi');\n      var suggestions = [];\n      while (match = re.exec(text)) {\n        suggestions.push({\n          index: match.index,\n          offset: match[0].length,\n        });\n      }\n      return suggestions;\n    },\n    explanation: 'You must not name Him-Who-Must-Not-Be-Named'\n  }\n}\n```\n\n## Docker\n\n### From Dockerhub\n\nYou can also run this application in [Docker](https://www.docker.com). Using a pre-built [image from Dockerhub](https://hub.docker.com/r/hochzehn/write-good/), the write-good can be run with this command:\n\n`docker run --rm --volume $PWD:/app hochzehn/write-good *.md`\n\n### Building locally\n\nOr you can first build the image locally:\n\n`docker build -t btford/write-good .`\n\nAnd then run using:\n\n`docker run -it --rm -v \"$(pwd)\":/srv/app -w /srv/app btford/write-good:latest *.md`\n\n## See also\n\nI came across these resources while doing research to make this module.\nThey might be helpful.\n\n### Code\n\n* [shell script for avoiding \"weasel words\"](http://matt.might.net/articles/shell-scripts-for-passive-voice-weasel-words-duplicates/) – I based my initial implementation on this\n* [Academic Writing Check](https://github.com/devd/Academic-Writing-Check) – a perl script similar to above\n* [writegood mode](https://github.com/bnbeckwith/writegood-mode) for emacs\n* [natural](https://github.com/NaturalNode/natural) – general purpose NLP toolkit in JavaScript\n* [WordNet](http://wordnet.princeton.edu/) – lexical database of the English language\n* [LanguageTool](https://languagetool.org/) – style and grammar checker implemented in Java\n\n### Prose\n\n* [Elements of Style](http://www.bartleby.com/141/)\n* [Flesch–Kincaid readability](http://en.wikipedia.org/wiki/Flesch%E2%80%93Kincaid_readability_test)\n* [Fear and Loathing of the English passive](http://www.lel.ed.ac.uk/~gpullum/passive_loathing.pdf)\n* [Words to Avoid in Educational Writing](http://css-tricks.com/words-avoid-educational-writing/)\n\n### Apps\n\nThis is not an endorsement.\nThese apps have similar functionality that you may find useful.\n\n* [Hemingway App](http://www.hemingwayapp.com/)\n* [Grammarly](https://app.grammarly.com)\n\n## Other projects using write good\n\n* [linter-write-good](https://github.com/gepoch/linter-write-good) for [Atom](https://atom.io/)\n* [Write Good action](https://actions.getdrafts.com/a/1RA) for [Drafts](https://getdrafts.com) iOS App\n* [Write Good Linter](https://marketplace.visualstudio.com/items?itemName=travisthetechie.write-good-linter) for [Visual Studio Code](https://code.visualstudio.com)\n* [Vim ALE](https://github.com/w0rp/ale) realtime linter for [Vim](http://www.vim.org/) with included support for write-good.\n* [Write Better](https://github.com/justiceo/write-better) A [Chrome extension](https://chrome.google.com/webstore/detail/write-better/nnnnnpmcdcloafmfkiihafnjidjkfmek) for Google Docs.\n* [Statick](https://github.com/sscpac/statick-md) plugin to combine results with other linters.\n\n## License\nMIT"
}
