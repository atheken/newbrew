{
  "name": "helmify",
  "full_name": "helmify",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Create Helm chart from Kubernetes yaml",
  "license": "MIT",
  "homepage": "https://github.com/arttor/helmify",
  "versions": {
    "stable": "0.4.5",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/arttor/helmify.git",
      "tag": "v0.4.5",
      "revision": "e6af99e5738ee4dbe42a4cc4c1b9fcd1d3734a88",
      "checksum": null
    },
    "head": {
      "url": "https://github.com/arttor/helmify.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/helmify/blobs/sha256:a680ff660fd46441bf65b6f7f83739598b774cd6a74f54265cccf3caf6f64a5d",
          "sha256": "a680ff660fd46441bf65b6f7f83739598b774cd6a74f54265cccf3caf6f64a5d"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/helmify/blobs/sha256:a680ff660fd46441bf65b6f7f83739598b774cd6a74f54265cccf3caf6f64a5d",
          "sha256": "a680ff660fd46441bf65b6f7f83739598b774cd6a74f54265cccf3caf6f64a5d"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/helmify/blobs/sha256:a680ff660fd46441bf65b6f7f83739598b774cd6a74f54265cccf3caf6f64a5d",
          "sha256": "a680ff660fd46441bf65b6f7f83739598b774cd6a74f54265cccf3caf6f64a5d"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/helmify/blobs/sha256:84c0a4d1d8502ad2416896924aa87848b7d46fee2bb23131f00ff3d1094a4def",
          "sha256": "84c0a4d1d8502ad2416896924aa87848b7d46fee2bb23131f00ff3d1094a4def"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/helmify/blobs/sha256:84c0a4d1d8502ad2416896924aa87848b7d46fee2bb23131f00ff3d1094a4def",
          "sha256": "84c0a4d1d8502ad2416896924aa87848b7d46fee2bb23131f00ff3d1094a4def"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/helmify/blobs/sha256:84c0a4d1d8502ad2416896924aa87848b7d46fee2bb23131f00ff3d1094a4def",
          "sha256": "84c0a4d1d8502ad2416896924aa87848b7d46fee2bb23131f00ff3d1094a4def"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/helmify/blobs/sha256:f1c146f86bd90b627e812a78e6419a600c8efe17f7bec002927df1b63c0f6033",
          "sha256": "f1c146f86bd90b627e812a78e6419a600c8efe17f7bec002927df1b63c0f6033"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/helmify.rb",
  "ruby_source_checksum": {
    "sha256": "8e10e97b14b3c65a7a4796226009f333a8e367fabe0e120eb64378fd076155ba"
  },
  "date_added": "2022-05-20T14:37:04+00:00",
  "readme": "# Helmify\n[![CI](https://github.com/arttor/helmify/actions/workflows/ci.yml/badge.svg)](https://github.com/arttor/helmify/actions/workflows/ci.yml)\n![GitHub go.mod Go version](https://img.shields.io/github/go-mod/go-version/arttor/helmify)\n![GitHub](https://img.shields.io/github/license/arttor/helmify)\n![GitHub release (latest by date)](https://img.shields.io/github/v/release/arttor/helmify)\n[![Go Report Card](https://goreportcard.com/badge/github.com/arttor/helmify)](https://goreportcard.com/report/github.com/arttor/helmify)\n[![GoDoc](https://godoc.org/github.com/arttor/helmify?status.svg)](https://pkg.go.dev/github.com/arttor/helmify?tab=doc)\n![GitHub total downloads](https://img.shields.io/github/downloads/arttor/helmify/total)\n\nCLI that creates [Helm](https://github.com/helm/helm) charts from kubernetes yamls.\n\nHelmify reads a list of [supported k8s objects](#status) from stdin and converts it to a helm chart. \nDesigned to generate charts for [k8s operators](#integrate-to-your-operator-sdkkubebuilder-project) but not limited to.\nSee [examples](https://github.com/arttor/helmify/tree/main/examples) of charts generated by helmify.\n\nSupports `Helm >=v3.6.0`\n\nSubmit issue if some features missing for your use-case.\n\n## Usage\n\n1) As pipe:\n\n    ```shell\n    cat my-app.yaml | helmify mychart\n    ```\n   Will create 'mychart' directory with Helm chart from yaml file with k8s objects.\n\n    ```shell\n    awk 'FNR==1 && NR!=1  {print \"---\"}{print}' /<my_directory>/*.yaml | helmify mychart\n    ```\n   Will create 'mychart' directory with Helm chart from all yaml files in `<my_directory> `directory.\n\n2) From filesystem:\n    ```shell\n    helmify -f /my_directory/my-app.yaml mychart\n    ```\n    Will create 'mychart' directory with Helm chart from `my_directory/my-app.yaml`.\n    ```shell\n    helmify -f /my_directory mychart\n    ```\n    Will create 'mychart' directory with Helm chart from all yaml files in `<my_directory> `directory.\n    ```shell\n    helmify -f /my_directory -r mychart\n    ```\n    Will create 'mychart' directory with Helm chart from all yaml files in `<my_directory> `directory recursively.\n    ```shell\n    helmify -f ./first_dir -f ./second_dir/my_deployment.yaml -f ./third_dir  mychart\n    ```\n    Will create 'mychart' directory with Helm chart from multiple directories and files.\n\n\n3) From [kustomize](https://kustomize.io/) output:\n    ```shell\n    kustomize build <kustomize_dir> | helmify mychart\n    ```\n    Will create 'mychart' directory with Helm chart from kustomize output.\n\n### Integrate to your Operator-SDK/Kubebuilder project\n\n1. Open `Makefile` in your operator project generated by \n   [Operator-SDK](https://github.com/operator-framework/operator-sdk) or [Kubebuilder](https://github.com/kubernetes-sigs/kubebuilder).\n2. Add these lines to `Makefile`:\n- With operator-sdk version < v1.23.0 \n    ```makefile\n    HELMIFY = $(shell pwd)/bin/helmify\n    helmify:\n    \t$(call go-get-tool,$(HELMIFY),github.com/arttor/helmify/cmd/helmify@v0.3.7)\n    \n    helm: manifests kustomize helmify\n    \t$(KUSTOMIZE) build config/default | $(HELMIFY)\n    ```\n- With operator-sdk version >= v1.23.0\n    ```makefile\n    HELMIFY ?= $(LOCALBIN)/helmify\n    \n    .PHONY: helmify\n    helmify: $(HELMIFY) ## Download helmify locally if necessary.\n    $(HELMIFY): $(LOCALBIN)\n    \ttest -s $(LOCALBIN)/helmify || GOBIN=$(LOCALBIN) go install github.com/arttor/helmify/cmd/helmify@latest\n        \n    helm: manifests kustomize helmify\n    \t$(KUSTOMIZE) build config/default | $(HELMIFY)\n    ```\n3. Run `make helm` in project root. It will generate helm chart with name 'chart' in 'chart' directory.\n\n## Install\n\nWith [Homebrew](https://brew.sh/) (for MacOS or Linux): `brew install arttor/tap/helmify`\n\nOr download suitable for your system binary from [the Releases page](https://github.com/arttor/helmify/releases/latest).\nUnpack the helmify binary and add it to your PATH and you are good to go!\n\n## Available options\nHelmify takes a chart name for an argument.\nUsage:\n\n```helmify [flags] CHART_NAME```  -  `CHART_NAME` is optional. Default is 'chart'. Can be a directory, e.g. 'deploy/charts/mychart'.\n\n| flag                      | description                                                                                                                                                                                                 | sample                              |\n|---------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------|\n| -h -help                  | Prints help                                                                                                                                                                                                 | `helmify -h`                        |\n| -f                        | File source for k8s manifests (directory or file), multiple sources supported                                                                                                                               | `helmify -f ./test_data`            |\n| -r                        | Scan file directory recursively. Used only if -f provided                                                                                                                                                   | `helmify -f ./test_data -r`         |\n| -v                        | Enable verbose output. Prints WARN and INFO.                                                                                                                                                                | `helmify -v`                        |\n| -vv                       | Enable very verbose output. Also prints DEBUG.                                                                                                                                                              | `helmify -vv`                       |\n| -version                  | Print helmify version.                                                                                                                                                                                      | `helmify -version`                  |\n| -crd-dir                  | Place crds in their own folder per Helm 3 [docs](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/#method-1-let-helm-do-it-for-you). Caveat: CRDs templating is not supported by Helm. | `helmify -crd-dir`                  |\n| -image-pull-secrets       | Allows the user to use existing secrets as imagePullSecrets                                                                                                                                                 | `helmify -image-pull-secrets`       |\n| -cert-manager-as-subchart | Allows the user to install cert-manager as a subchart                                                                                                                                                       | `helmify -cert-manager-as-subchart` |\n| -cert-manager-version | Allows the user to specify cert-manager subchart version. Only useful with cert-manager-as-subchart. (default \"v1.12.2\")                                                                                                                                                       | `helmify -cert-manager-as-subchart` |\n## Status\nSupported k8s resources:\n- Deployment, DaemonSet, StatefulSet\n- Job, CronJob\n- Service, Ingress\n- PersistentVolumeClaim\n- RBAC (ServiceAccount, (cluster-)role, (cluster-)roleBinding)\n- configs (ConfigMap, Secret)\n- webhooks (cert, issuer, ValidatingWebhookConfiguration)\n- custom resource definitions (CRD)\n\n### Known issues\n- Helmify will not overwrite `Chart.yaml` file if presented. Done on purpose.\n- Helmify will not delete existing template files, only overwrite.\n- Helmify overwrites templates and values files on every run. \n  This means that all your manual changes in helm template files will be lost on the next run.\n- if switching between the using the `-crd-dir` flag it is better to delete and regenerate the from scratch to ensure crds are not accidentally spliced/formatted into the same chart. Bear in mind you will want to update your `Chart.yaml` thereafter.\n  \n## Develop\nTo support a new type of k8s object template:\n1. Implement `helmify.Processor` interface. Place implementation in `pkg/processor`. The package contains \nexamples for most k8s objects.\n2. Register your processor in the `pkg/app/app.go`\n3. Add relevant input sample to `test_data/kustomize.output`.\n\n\n### Run\nClone repo and execute command:\n\n```shell\ncat test_data/k8s-operator-kustomize.output | go run ./cmd/helmify mychart\n```\n\nWill generate `mychart` Helm chart form file `test_data/k8s-operator-kustomize.output` representing typical operator\n[kustomize](https://github.com/kubernetes-sigs/kustomize) output.\n\n### Test\nFor manual testing, run program with debug output:\n```shell\ncat test_data/k8s-operator-kustomize.output | go run ./cmd/helmify -vv mychart\n```\nThen inspect logs and generated chart in `./mychart` directory.\n\nTo execute tests, run:\n```shell\ngo test ./...\n```\nBeside unit-tests, project contains e2e test `pkg/app/app_e2e_test.go`.\nIt's a go test, which uses `test_data/*` to generate a chart in temporary directory. \nThen runs `helm lint --strict` to check if generated chart is valid."
}
