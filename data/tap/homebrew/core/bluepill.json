{
  "name": "bluepill",
  "full_name": "bluepill",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Testing tool for iOS that runs UI tests using multiple simulators",
  "license": "BSD-2-Clause",
  "homepage": "https://github.com/MobileNativeFoundation/bluepill",
  "versions": {
    "stable": "5.12.3",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/MobileNativeFoundation/bluepill.git",
      "tag": "v5.12.3",
      "revision": "a7fcb47aa61b7be6732193c82b697719bf11b813",
      "checksum": null
    },
    "head": {
      "url": "https://github.com/MobileNativeFoundation/bluepill.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bluepill/blobs/sha256:40c2789182add578ede8a68a27a47ab9a6910ed7a79fc1991c9edebf4062e5e2",
          "sha256": "40c2789182add578ede8a68a27a47ab9a6910ed7a79fc1991c9edebf4062e5e2"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bluepill/blobs/sha256:fcee67bb312cd0ae7bcabc30dd64dafde41e3fe2f32fac25d28ce50e7f1da455",
          "sha256": "fcee67bb312cd0ae7bcabc30dd64dafde41e3fe2f32fac25d28ce50e7f1da455"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bluepill/blobs/sha256:620c47806c862b57184492fc17164e35c2c734e7f91e1c28ad830a978b160764",
          "sha256": "620c47806c862b57184492fc17164e35c2c734e7f91e1c28ad830a978b160764"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bluepill/blobs/sha256:5f6c74a7d099e09ec8ce11f56539bb1d25d5854ad4fb3b4b583360137ab103b5",
          "sha256": "5f6c74a7d099e09ec8ce11f56539bb1d25d5854ad4fb3b4b583360137ab103b5"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [
    {
      "name": "xcode",
      "cask": null,
      "download": null,
      "version": "14.0",
      "contexts": [
        "build"
      ],
      "specs": [
        "stable",
        "head"
      ]
    },
    {
      "name": "macos",
      "cask": null,
      "download": null,
      "version": null,
      "contexts": [],
      "specs": [
        "stable",
        "head"
      ]
    }
  ],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "2706c66e8def3eeba4d9bf1adf66221c8ad70701",
  "ruby_source_path": "Formula/bluepill.rb",
  "ruby_source_checksum": {
    "sha256": "2709d8823640c3974197a04a5e723e1873c7dec9124c5f84074bb7c6ee4d13ef"
  },
  "date_added": "2017-03-12T22:46:23+01:00",
  "readme": "![BluepillIcon](doc/img/bluepill_text.png)\n\n![](https://github.com/linkedin/bluepill/workflows/master/badge.svg)\n\nBluepill is a tool to run iOS tests in parallel using multiple simulators.\n\n## Motivation\n\n[LinkedIn](https://www.linkedin.com) created Bluepill to run its large iOS test suite in a reasonable amount of time. If you want the long story, read [the blog post](https://engineering.linkedin.com/blog/2017/01/open-sourcing-bluepill--run-ios-tests-in-multiple-simulators).\n\n## Features\n\n-  Running tests in parallel by using multiple simulators.\n-  Automatically packing tests into groups.\n-  Running tests in headless mode to reduce memory consumption.\n-  Generating a junit report after each test run.\n-  Reporting test running stats, including test running speed and environment robustness.\n-  Retrying when the Simulator hangs or crashes.\n\n## Usages\n\nIt is quick and easy to start using Bluepill!\n\n- Get bluepill binary: build from source or use our [releases](https://github.com/linkedin/bluepill/releases/). You can also get the binary from Homebrew.\n\n``` shell\n$ brew install bluepill\n```\n\n- Build your app and test bundle. You must `build-for-testing` if you use `xcodebuild` in terminal.\n- Run bluepill using the `.xctestrun` file generated by Xcode.\n\n```shell\n$ bluepill --xctestrun-path ./SampleAppTest_iphonesimulator10.3-x86_64.xctestrun -o ./output/\n```\n\nAlternatively, you can use a configuration file like the one below:\n\n```\n{\n   \"xctestrun-path\": \"./SampleAppTest_iphonesimulator10.3-x86_64.xctestrun\", # Relative path or abs path\n   \"output-dir\": \"./build/\" # Relative path or abs path\n}\n```\n\nAnd run\n\n```shell\n$ bluepill -c config.json\n```\n\n## Flags\n\nA full list supported options are listed here.\n\n\n|   Config Arguments     | Command Line Arguments | Explanation                                                                                  | Required | Default value    |\n|:----------------------:|:----------------------:|----------------------------------------------------------------------------------------------|:--------:|:----------------:|\n|          app           |           -a           | The path to the host application to execute (your `.app`)                                    |     N    | n/a              |\n|     xctestrun-path     |                        | The path to the `.xctestrun` file that xcode leaves when you `build-for-testing`.            |     Y    | n/a              |\n|     test-plan-path     |                        | The path of a json file which describes the test plan. It is equivalent to the `.xctestrun` file generated by Xcode, but it can be generated by a different build system, e.g. Bazel |     Y    | n/a              |\n|       output-dir       |           -o           | Directory where to put output log files. **(bluepill only)**                        |     Y    | n/a              |\n|         config         |           -c           | Read options from the specified configuration file instead of the command line.     |     N    | n/a              |\n|         device         |           -d           | On which device to run the app.                                                     |     N    | iPhone 8         |\n|         exclude        |           -x           | Exclude a testcase in the set of tests to run  (takes priority over `include`).     |     N    | empty            |\n|        headless        |           -H           | Run in headless mode (no GUI).                                                      |     N    | off              |\n|        clone-simulator |           -L           | Spawn simulator by clone from simulator template.                                   |     N    | off              |\n|        xcode-path      |           -X           | Path to xcode.                                                                      |     N    | xcode-select -p  |\n|         include        |           -i           | Include a testcase in the set of tests to run (unless specified in `exclude`).      |     N    | all tests        |\n|       list-tests       |           -l           | Only list tests and exit without executing tests.                                   |     N    | false            |\n|        num-sims        |           -n           | Number of simulators to run in parallel. **(bluepill only)**                        |     N    | 4                |\n|      printf-config     |           -P           | Print a configuration file suitable for passing back using the `-c` option.         |     N    | n/a              |\n|      error-retries     |           -R           | Number of times to recover from simulator/app crashing/hanging and continue running.|     N    | 4                |\n|    failure-tolerance   |           -f           | Number of times to retry on test failures                                           |     N    | 0                |\n|    only-retry-failed   |           -F           | Only retry failed tests instead of all. Also retry test that timed-out/crashed.     |     N    | false            |\n|         runtime        |           -r           | What runtime to use.                                                                |     N    | iOS 13.3         |\n|      stuck-timeout     |           -S           | Timeout in seconds for a test that seems stuck (no output).                         |     N    | 300s             |\n|      test-timeout      |           -T           | Timeout in seconds for a test that is producing output.                             |     N    | 300s             |\n|    test-bundle-path    |           -t           | The path to the test bundle to execute (single `.xctest`).                          |     N    | n/a              |\n| additional-unit-xctests|           n/a          | Additional XCTest bundles that is not Plugin folder                                 |     N    | n/a              |\n|  additional-ui-xctests |           n/a          | Additional XCTUITest bundles that is not Plugin folder                              |     N    | n/a              |\n|      repeat-count      |           -C           | Number of times we'll run the entire test suite (used for load testing).            |     N    | 1                |\n|        no-split        |           -N           | Test bundles you don't want to be packed into different groups to run in parallel.  |     N    | n/a              |\n|         quiet          |           -q           | Turn off all output except fatal errors.                                            |     N    | YES              |\n|       diagnostics      |           n/a          | Enable collection of diagnostics in output directory in case of test failures.      |     N    | NO               |\n|          help          |           -h           | Help.                                                                               |     N    | n/a              |\n|     runner-app-path    |           -u           | The test runner for UI tests.                                                       |     N    | n/a              |\n| screenshots-directory  |           n/a          | Directory where simulator screenshots for failed ui tests will be stored.           |     N    | n/a              |\n|    videos-directory    |           n/a          | Directory where videos of test runs will be saved. If not provided, videos are not recorded. | N | n/a            |\n|   keep-passing-videos  |           n/a          | Whether to keep the recorded video for passing tests. Deleted by default.           |     N    | false            |\n|       video-paths      |           -V           | A list of videos that will be saved in the simulators.                              |     N    | n/a              |\n|       image-paths      |           -I           | A list of images that will be saved in the simulators.                              |     N    | n/a              |\n| unsafe-skip-xcode-version-check |               | Skip Xcode version check                                                            |     N    | NO               |\n|  retry-app-crash-tests |                        | Retry tests that crashed app and consider it non-fatal if it passes on retry.       |     N    | false            |\n\n\n## Exit Status\n\nThe exit code of Bluepill uses bit indicators which could represent multiple exit status. Please refer to [the header](https://github.com/linkedin/bluepill/blob/26a3761e6a393300b1d2dd34980b8d96a096e30e/bp/src/BPExitStatus.h#L12) for meaning of each bit.\n\n## Demo\n\n![BluepillDemo](doc/img/demo.gif)\n\n## Requirements\n\nBluepill officially supports **Xcode 14.0**. If you're looking for old Xcode support, please checkout the following branches:\n\n* [Xcode-10.0](https://github.com/linkedin/bluepill/tree/xcode-10.0)  | [Xcode-10.1](https://github.com/linkedin/bluepill/tree/xcode-10.1)  | [Xcode-10.2](https://github.com/linkedin/bluepill/tree/xcode-10.2)  | [Xcode-10.3](https://github.com/linkedin/bluepill/tree/xcode-10.3)\n* [Xcode-11.0](https://github.com/linkedin/bluepill/tree/xcode-11.0)  | [Xcode-11.1](https://github.com/linkedin/bluepill/tree/xcode-11.1)  | [Xcode-11.2](https://github.com/linkedin/bluepill/tree/xcode-11.2)  | [Xcode-11.3](https://github.com/linkedin/bluepill/tree/xcode-11.3)  | [Xcode-11.4](https://github.com/linkedin/bluepill/tree/xcode-11.4)  | [Xcode-11.5](https://github.com/linkedin/bluepill/tree/xcode-11.5)\n* [Xcode-12.0](https://github.com/linkedin/bluepill/tree/xcode-12.0)  | [Xcode-12.2](https://github.com/linkedin/bluepill/tree/xcode-12.2)  | [Xcode-12.3](https://github.com/linkedin/bluepill/tree/xcode-12.3) | [Xcode-12.4](https://github.com/linkedin/bluepill/tree/xcode-12.4) | [Xcode-12.5](https://github.com/linkedin/bluepill/tree/xcode-12.5)\n* [Xcode-13.0](https://github.com/mobilenativefoundation/bluepill/tree/xcode-13.0) | [Xcode-13.1](https://github.com/mobilenativefoundation/bluepill/tree/xcode-13.1)\n\n\nIf you're looking for newer Xcode version support, try using Bluepill with `unsafe-skip-xcode-version-check` flag but make sure your app is tested with it and the underlying risks are understood.\n\n## Acknowledgement\n\nBluepill was inspired by [parallel iOS test](https://github.com/plu/parallel_ios_tests) and Facebook’s [xctool](https://github.com/facebook/xctool) and [FBSimulatorControl](https://github.com/facebook/FBSimulatorControl). The Bluepill icon was created by [Maria Iu](https://www.linkedin.com/in/mariaiu/).\n\n## Fastlane Support\n\nIf you're using [Fastlane](https://github.com/fastlane/fastlane) to run your tests, you're in luck! You can integrate Bluepill into your project with very little change to your existing setup. Just integrate one of the following Fastlane plugins, and you'll be on your way:\n\n- [Redpill](https://github.com/omniprojects/fastlane-plugin-redpill) - The most up-to-date plugin; it's is maintained by [Omni](https://github.com/omniprojects) and offers a full set of options to hook into Bluepill. As of this writing, Redpill is compiled against Xcode 9.1, and intended for use with [CircleCI](https://circleci.com). It will be updated with newer versions of Xcode when CircleCI supports them.\n- [fastlane-plugin-bluepill](https://github.com/tbrand/fastlane-plugin-bluepill) - Last updated Nov. 7th, offers basic support for working with the Bluepill binary.\n- [Bluepillar](https://github.com/Shashikant86/fastlane-plugin-bluepillar) - Last updated May 29th, it's the original fastlane plugin for working with Bluepill. It was inspired by [this blog post](https://medium.com/@shashikant.jagtap/running-xcuitests-in-parallel-with-fastlane-and-bluepill-370e8ba90958).\n- [XBluepill](https://github.com/kisialiu/fastlane-plugin-xbluepill) - Last updated Jan 27th. It supports all Bluepill options. Thera are some differences from other plugins:\n   - Support Xcode 9.2\n   - No need to build your project before using the plugin. Builds you project by itself and put xctestrun file automatically;\n   - Can reset all simulators if needed (removes all current simulators and recreates default from scratch);\n\n## Bitrise.io Support\n\nIf you're using [Bitrise.io](https://bitrise.io) as your CI/CD, you can start using Bluepill immediately. Just add the **Bluepill Build/Test for iOS** step to your existing workflow. This [open source step](https://github.com/HealthengineAU/bitrise-step-bluepill-build-test-for-ios) is maintained by [HealthEngineAU](https://github.com/HealthengineAU) and supports Xcode 8.3 and later.\n\n## Q & A\n- Are we able to run Xcode UI Testing bundle with Bluepill\n\n  _YES_, we recently added support for Xcode UI Testing bundles. Thanks to the inspiration from [FBSimulatorControl](https://github.com/facebook/FBSimulatorControl). Bluepill now supports Xcode unit test bundle and UI test bundles.\n\n- Easiest way to get Bluepill binary?\n\n  Latest [release](https://github.com/linkedin/bluepill/releases/).\n\n- How to test Bluepill in Xcode?\n\n  Select BPSampleApp scheme and build it first. Then you can switch back to `bluepill` or `bluepill-cli` scheme to run their tests.\n\n- How to get Bluepill binary from source?\n\n  Run `./scripts/bluepill.sh build` to test and build Bluepill. The binary will be output in the ./build folder.\n\n- How to test my changes to Bluepill?\n\n  Run `./scripts/bluepill.sh test`.\n\n- How to BUMP the max files and max procs to support running multiple simulators on macOS?\n\n  Check - https://blog.dekstroza.io/ulimit-shenanigans-on-osx-el-capitan/"
}
