{
  "name": "cmusfm",
  "full_name": "cmusfm",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Last.fm standalone scrobbler for the cmus music player",
  "license": "GPL-3.0-or-later",
  "homepage": "https://github.com/Arkq/cmusfm",
  "versions": {
    "stable": "0.5.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/Arkq/cmusfm/archive/v0.5.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "17aae8fc805e79b367053ad170854edceee5f4c51a9880200d193db9862d8363"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cmusfm/blobs/sha256:edb2e0a7092079e3ad015e27ea37ff940d6ef9a6fed73ff2355d6d7b23d04c0d",
          "sha256": "edb2e0a7092079e3ad015e27ea37ff940d6ef9a6fed73ff2355d6d7b23d04c0d"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cmusfm/blobs/sha256:7580167d4bd0c71cdafc4dff2ede95d0081dab49e0f0b555fffa1e29eba03381",
          "sha256": "7580167d4bd0c71cdafc4dff2ede95d0081dab49e0f0b555fffa1e29eba03381"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cmusfm/blobs/sha256:25de6ec5f582426deea7f1bae8f97e9adf9074f598d2a1a28c14c5d5ecc64602",
          "sha256": "25de6ec5f582426deea7f1bae8f97e9adf9074f598d2a1a28c14c5d5ecc64602"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cmusfm/blobs/sha256:f1346608b765ed2219f6b963d80b8b72a90b430a10894fe924d64d2d67c535a4",
          "sha256": "f1346608b765ed2219f6b963d80b8b72a90b430a10894fe924d64d2d67c535a4"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cmusfm/blobs/sha256:b2e90bb7f3dbb25e7149d8e6c47a54725095b5dca2ecbdd2ad91d0d383824a28",
          "sha256": "b2e90bb7f3dbb25e7149d8e6c47a54725095b5dca2ecbdd2ad91d0d383824a28"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cmusfm/blobs/sha256:6ef7f13482b03d75ce2eb9c4ce72123f997f68c246477445b9aeb1d4e0d49e61",
          "sha256": "6ef7f13482b03d75ce2eb9c4ce72123f997f68c246477445b9aeb1d4e0d49e61"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cmusfm/blobs/sha256:85080d3911b11f136d5baf6e3304d50c7bc8918aee103308068cd817162e993f",
          "sha256": "85080d3911b11f136d5baf6e3304d50c7bc8918aee103308068cd817162e993f"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "autoconf",
    "automake",
    "pkg-config"
  ],
  "dependencies": [
    "openssl@3"
  ],
  "test_dependencies": [
    "libfaketime"
  ],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "curl"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/cmusfm.rb",
  "ruby_source_checksum": {
    "sha256": "768cd164e026fe98a6a7b5cb8c8150db8126ef36810f68fdee16cc9d2033e036"
  },
  "date_added": "2019-02-10T15:41:13+01:00",
  "readme": "# cmusfm\n\n[Last.fm](http://www.last.fm/) standalone scrobbler for the [cmus](https://cmus.github.io/) music player.\n\n[![Build Status](https://github.com/Arkq/cmusfm/actions/workflows/build-and-test.yaml/badge.svg)](https://github.com/Arkq/cmusfm/actions/workflows/build-and-test.yaml)\n\n## Features\n\n* Listening now notification support\n* Off-line played track cache for later submission\n* POSIX ERE-based file name parser\n* Desktop notification support (optionally)\n* Customizable scrobbling service\n* Small memory footprint\n\n## Overview\n\nWhen discography is correctly tagged - at least artist and title field - scrobbling needs no\nfurther configuration (see: [Configuration](#configuration)). However, if this requirement is not\nmet, then one can use POSIX ERE-based file name parser feature. But what the heck is this?\n\nCmusfm allows to configure regular expression patterns for local files and for shoutcast streaming\nservices. The syntax is compatible with the [POSIX Extended Regular\nExpression](http://en.wikipedia.org/wiki/Regular_expression#Standards) (ERE) with one exception.\nMatched subexpression has to be marked with the `?` extension notation. There are four distinguish\ntypes:\n\n* `(?A...)` - match artist name\n* `(?B...)` - match album name\n* `(?N...)` - match track number\n* `(?T...)` - match track title\n\nAll extension types can be used only once, otherwise only the first occurrence will be used. Also\nnote, that using matched subexpressions without the extension notation might result in an\nunexpected behavior. Default configuration assumes formats as follows:\n\n* `format-localfile = \"^(?A.+) - (?T.+)\\.[^.]+$\"` (matches: The Beatles - Yellow Submarine.ogg)\n* `format-shoutcast = \"^(?A.+) - (?T.+)$\"` (matches: The Beatles - Yellow Submarine)\n\nScrobbling behavior and now playing notification can be controlled via the following\nself-explainable options (default is \"yes\" for all of them):\n\n* `now-playing-localfile = \"yes\"`\n* `now-playing-shoutcast = \"no\"`\n* `submit-localfile = \"yes\"`\n* `submit-shoutcast = \"no\"`\n\nCmusfm provides also one extra feature, which was mentioned earlier - desktop notifications. In\norder to have this functionality, one has to enable it during the compilation stage. Since it is\nan extra feature, it is disabled by default in the cmusfm configuration file too. Note, that cover\nart file has to be explicitly stored in the current track's directory - embedded covers are not\ndisplayed. Exemplary configuration might be as follows:\n\n* `notification = \"yes\"`\n* `format-coverfile = \"^(cover|folder)\\.jpg$\"`\n\nBy default cmusfm scrobbles to the Last.fm service. However, it is possible to change this\nbehavior by modifying `service-api-url` and `service-auth-url` options in the configuration file.\nAfterwards, one should reinitialize cmusfm (`cmusfm init`) in order to authenticate with new\nscrobbling service. In order to use [Libre.fm](https://libre.fm/) as a scrobbling service, one\nshall use configuration as follows:\n\n* `service-api-url = \"https://libre.fm/2.0/\"`\n* `service-auth-url = \"https://libre.fm/api/auth\"`\n\n\n## Installation\n\n### Dependencies\n\n* [cmus](https://cmus.github.io/)\n* [libcurl](https://curl.haxx.se/libcurl/)\n* [libnotify](https://developer.gnome.org/libnotify/) (optional)\n\n### Building and install\n\n```shell\nautoreconf --install\nmkdir build && cd build\n../configure --enable-libnotify\nmake && make install\n```\n\n## Configuration\n\nBefore usage with the cmus music player, one has to grant access for the cmusfm in the Last.fm\nservice. To do so, simply run cmusfm with the `init` argument and follow the instruction. This\naction might be also required when upgrading to the newer version with new features.\n\n```shell\ncmusfm init\n```\n\nAfter that you can safely edit `~/.config/cmus/cmusfm.conf` configuration file.\n\n~~Note, that for some changes to take place, restart of the cmusfm server process is required. To\nachieved this, one has to quit cmus player and then kill background instance of cmusfm (e.g. `pkill\ncmusfm`).~~ Above statement is not valid if one has [inotify](http://en.wikipedia.org/wiki/Inotify)\nsubsystem available.\n\nAs a final step (after the access is granted in the Last.fm service) one should set cmusfm as a\nstatus display program for cmus. This can be done by starting cmus and typing in the main window:\n\n```shell\n:set status_display_program=cmusfm\n```\n\nEnjoy!"
}
