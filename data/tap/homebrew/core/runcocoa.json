{
  "name": "runcocoa",
  "full_name": "runcocoa",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Tools to run Cocoa/Objective-C and C code from the command-line",
  "license": null,
  "homepage": "https://github.com/michaeltyson/Commandline-Cocoa",
  "versions": {
    "stable": "20120108",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/michaeltyson/Commandline-Cocoa/archive/834f73b4b5d0d2be0d336c9869973f5f0db55949.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "d90079efb92c8eef3c8e2c142683eb0c632ca61120c9e4a617bf9dac5362bf86"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/runcocoa/blobs/sha256:878f152f9c0e3915335074975020b52290f867142bcced9b44f8d8b3b6f0aaea",
          "sha256": "878f152f9c0e3915335074975020b52290f867142bcced9b44f8d8b3b6f0aaea"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": true,
  "deprecation_date": "2023-02-14",
  "deprecation_reason": "unmaintained",
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/runcocoa.rb",
  "ruby_source_checksum": {
    "sha256": "8fa1ba1ff7db0d65744c6766af13effb0047bbb3374dac58ccc13d75e550c31f"
  },
  "date_added": "2011-04-28T11:56:40+01:00",
  "readme": "C, Objective-C, and Cocoa on the command line\n=============================================\n\nSometimes there’s just one tiny snippet of Cocoa code that you want to test — maybe to find out the output of NSDateFormatter for various cases, testing out some text replacement routine, or testing out some image drawing code.\n\nIt’s often too much trouble to create a new XCode project and set up the framework to do one simple test, which is why I put together this little shell script that lets you run Cocoa code from the command line:\n\n\n\nYou have full access to all Cocoa libraries, and in iOS mode access to most iOS stuff too, straight from the command line.\n\nUsage\n-----\n\n### runcocoa.sh\n\nYou can invoke it either by specifying the code to execute on the command line as a parameter, or through standard input, so you can pipe stuff to it. This is particularly convenient for use with TextMate: Type some code, hit Cmd-Option-R, type “runcocoa”, hit enter, and the result appears as a tooltip.\n\nYou can include other frameworks (use “-include AudioToolbox/AudioToolbox.h -framework AudioToolbox\" as command line arguments, for example), and run the code in gdb (with -gdb as a command-line argument).\n\nYou can also run it as iOS code by supplying the -ios commandline parameter.\n\nAny other libraries to link in can be specified — command line arguments will be passed on unmolested to GCC. Add #imports with the -include parameter.\n\nNormally, all code is wrapped in a standard main routine.  To add classes and do more advanced things, add the -nomain parameter, and add your own main routine.\n\n### runc.sh\n\nThis is much simpler than runcocoa.sh, and useful for quickly running little C snippets without the time-consuming linkage of the Cocoa libraries.  Again, pass the code via the command line, or standard input.\n\nInstallation\n------------\n\nMake the scripts executable (`chmod +x runcocoa.sh runc.sh`), and copy them to `/usr/local/bin`.\n\n\nExamples\n--------\n\nThis prints out a formatted version of the date, using NSDateFormatter:\n\n    $ runcocoa 'NSDateFormatter *formatter = [[[NSDateFormatter alloc] init] autorelease]; [formatter setDateFormat:@\"d MMM, h:mm a\"]; NSLog(@\"%@\", [formatter stringFromDate:[NSDate date]]);'\n\n    2011-02-23 20:02:10.313 runcocoa-output[28025:903] 23 Feb, 8:02 PM\n\nThis creates an image compositing A Tasty Pixel's favicon onto a white circle, and saves it to output.png in the current directory using iOS's UIGraphicsBeginImageContext utility:\n\n    runcocoa -ios 'UIGraphicsBeginImageContext(CGSizeMake(100,100)); CGContextRef ctx = UIGraphicsGetCurrentContext(); CGContextSetFillColorWithColor(ctx,[[UIColor whiteColor] CGColor]); CGContextBeginPath(ctx); CGContextMoveToPoint(ctx, 50, 0); CGContextAddArc(ctx, 50, 50, 50, M_PI/2.0, M_PI/2.0 + (2*M_PI), 0); CGContextFillPath(ctx); UIImage *icon = [UIImage imageWithData:[NSData dataWithContentsOfURL:[NSURL URLWithString:@\"http://atastypixel.com/favicon.ico\"]]]; [icon drawAtPoint:CGPointMake((100-[icon size].width)/2.0,(100-[icon size].height)/2.0)]; UIImage *i = UIGraphicsGetImageFromCurrentImageContext(); UIGraphicsEndImageContext(); [UIImagePNGRepresentation(i) writeToFile:@\"output.png\" atomically:NO];'; open output.png;"
}
