{
  "name": "ripsecrets",
  "full_name": "ripsecrets",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Prevent committing secret keys into your source code",
  "license": "MIT",
  "homepage": "https://github.com/sirwart/ripsecrets",
  "versions": {
    "stable": "0.1.5",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/sirwart/ripsecrets/archive/v0.1.5.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "1e3d36b3892d241dfd5e9abd86ddb47f22e6837b89cf9ee44989d6c1271dda2b"
    },
    "head": {
      "url": "https://github.com/sirwart/ripsecrets.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ripsecrets/blobs/sha256:875a7077129c2c6e616546710c84ce9d0600bea2d5175968df4979ec0bb0353b",
          "sha256": "875a7077129c2c6e616546710c84ce9d0600bea2d5175968df4979ec0bb0353b"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ripsecrets/blobs/sha256:8b5f6de692f2b9894e71c816eb109a14941c34ada55bac9ccc4b9091e05138b1",
          "sha256": "8b5f6de692f2b9894e71c816eb109a14941c34ada55bac9ccc4b9091e05138b1"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ripsecrets/blobs/sha256:bc03d9085c82a004ee252cd92ad9ab2a334538b7dc9a28532e275f38a8d9c462",
          "sha256": "bc03d9085c82a004ee252cd92ad9ab2a334538b7dc9a28532e275f38a8d9c462"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ripsecrets/blobs/sha256:dd27d00c1e0fe8c14388b4a45b112c22e15ef21cc0755698ce24da4392122f58",
          "sha256": "dd27d00c1e0fe8c14388b4a45b112c22e15ef21cc0755698ce24da4392122f58"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ripsecrets/blobs/sha256:ba619b6c9b0dddc4a985118e52e68606e38d1f26d59bd6a31c3a352345fa89cb",
          "sha256": "ba619b6c9b0dddc4a985118e52e68606e38d1f26d59bd6a31c3a352345fa89cb"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ripsecrets/blobs/sha256:d80f09f4d00ba3b12b3c7c1219f9249ea2d10c5641bec3eb3cbc96971ec4b019",
          "sha256": "d80f09f4d00ba3b12b3c7c1219f9249ea2d10c5641bec3eb3cbc96971ec4b019"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ripsecrets/blobs/sha256:e82297cfa8311cd174c61ef61250db3dd5de6f4d5bd7098f7af2440fd7dffc13",
          "sha256": "e82297cfa8311cd174c61ef61250db3dd5de6f4d5bd7098f7af2440fd7dffc13"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ripsecrets/blobs/sha256:cd2c8ef43fa011717bc5654bb257bb45b1d27321bd3dcdf170d4338ad5c80a0a",
          "sha256": "cd2c8ef43fa011717bc5654bb257bb45b1d27321bd3dcdf170d4338ad5c80a0a"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/ripsecrets.rb",
  "ruby_source_checksum": {
    "sha256": "f96a428ba23538f9a226ab49cb93c0278f9322ce2b0eba8a537209dbae786d3b"
  },
  "date_added": "2022-08-19T13:19:41+00:00",
  "readme": "# ripsecrets\n\n![ripsecrets logo, a gravestone that says \"R.I.P. Secrets ?-20XX Death by Exposure\"](.github/ripsecrets-logo.svg)\n\n`ripsecrets` is a command-line tool to prevent committing secret keys into your source code. `ripsecrets` has a few features that distinguish it from other secret scanning tools:\n\n## What makes ripsecrets different\n\n`ripsecrets` has a few features that distinguish it from other secret scanning tools:\n\n1. **Focused on pre-commit**. It's a lot cheaper to prevent secrets from getting committed in the first place than dealing with the consequences once a secret that has been committed to your repository has been detected.\n\n2. **Extremely fast**. Using a secret scanner shouldn't slow down your development workflow, so `ripsecrets` is 95 times faster or more than other tools. [Learn more about how it's designed for performance](#performance).\n\n3. **Always local operation**. Many other secret scanners try to verify that the secrets are valid, which is practice means sending strings from your source code to 3rd party services automatically. There's a security versus convenience tradeoff in that decision, but `ripsecrets` is designed to be the best \"local only\" tool and will never send data off of your computer.\n\n4. **Low rate of false positives**. While local-only tools are always going to have more false positives than one that verifies secrets, `ripsecrets` uses a probability theory based approach in order to detect keys more accurately than other tools.\n\n5. **Single binary with no dependencies**. Installing `ripsecrets` is as easy as copying the binary into your `bin` directory.\n\n## Usage\n\nBy default, running `ripsecrets` will recursively search source files in your current directory for secrets.\n\n```\n$ ripsecrets\n```\n\nFor every secret it finds it will print out the file, line number, and the secret that was found. If it finds any secrets it will exit with a non-zero status code.\n\nYou can optionally pass a list of files and directories to search as arguments.\n\n```\n$ ripsecrets file1 file2 dir1\n```\n\nThis is most commonly used to search files that are about to be committed to source control for accidentally included secrets. \n\n### Installing ripsecrets as a pre-commit hook \n\nYou can install `ripsecrets` as a pre-commit hook _automatically_ in your current git repository using the following command:\n\n```\n$ ripsecrets --install-pre-commit\n```\n\nIf you would like to install `ripsecrets` _manually_, you can add the following command to your `pre-commit` script:\n\n```\nripsecrets --strict-ignore `git diff --cached --name-only --diff-filter=ACM`\n```\n\nPassing `--strict-ignore` ensures that your `.secretsignore` file is respected when running secrets as a pre-commit.\n\n## Installation\n\n### Homebrew\n\n[`ripsecrets`](https://formulae.brew.sh/formula/ripsecrets) is available in Homebrew for macOS and Linux:\n\n```\n$ brew install ripsecrets\n```\n\n### Pre-built\n\nYou can download a prebuilt binary for the latest release from the [releases](https://github.com/sirwart/ripsecrets/releases) page.\n\n### Cargo\n\nAlternatively, if you have [Rust](https://www.rust-lang.org/tools/install) and Cargo installed, you can run:\n\n```\n$ cargo install --git https://github.com/sirwart/ripsecrets --branch main\n```\n\n### Nix Flake\n\nAssuming you have enabled [Flakes](https://nixos.wiki/wiki/Flakes) in your Nix configuration, you can build the `ripsecrets` binary and make it available in your default Nix profile by running:\n```\n$ nix profile install github:sirwart/ripsecrets\n```\n\n### Using `pre-commit`\n\n`ripsecrets` works as a hook for [the pre-commit framework](https://pre-commit.com/).\nAdd the following to your `.pre-commit-config.yaml` file:\n\n```yaml\nrepos:\n-   repo: https://github.com/sirwart/ripsecrets\n    rev: v0.1.5  # Use latest tag on GitHub\n    hooks:\n    -   id: ripsecrets\n```\n\nThere are two hooks available:\n\n- `ripsecrets` (Recommended)\n\n   pre-commit will set up a Rust environment from scratch to compile and run ripsecrets.\n   See the [pre-commit rust plugin docs](https://pre-commit.com/#rust) for more information.\n\n- `ripsecrets-system`\n\n   pre-commit will look for `ripsecrets` on your `PATH`.\n   This hook requires you to install ripsecrets separately, e.g. with your package manager or [a prebuilt binary release](https://github.com/sirwart/ripsecrets/releases).\n   Only recommended if you are happy making all repository users install `ripsecrets` manually.\n\n## Ignoring secrets\n\n`ripsecrets` will respect your .gitignore files by default, but there might still be files you want to exclude from being scanned for secrets. To do that you can create a .secretsignore file, which supports similar syntax to a .gitignore file for ignoring files. In addition to excluding files, it also supports a `[secrets]` section that allows ignoring individual secrets.\n\n```\ntest/*\ndummy\n\n[secrets]\npAznMW3DsrnVJ5TDWwBVCA\n```\n\nIn addition to the .secretsignore file, `ripsecrets` is compatible with `detect-secrets` style allowlist comments on the same line as the detected secret:\n\n```\ntest_secret = \"pAznMW3DsrnVJ5TDWwBVCA\" # pragma: allowlist secret\n```\n\n## How it works\n\n `ripsecrets` has 2 types of secrets that it can find in code:\n\n1. Secrets with known patterns that can be matched. API keys from services like Stripe and Slack have a predefined prefix that identifies them as API keys and can be found via regular expressions very reliably. You can see the current list of known secrets matched by `ripsecrets` [here](https://github.com/sirwart/ripsecrets/blob/main/src/lib.rs#L22).\n\n2. Random strings assigned to secret variables. Some secrets, like AWS's secret access keys, don't have a known pattern that can be unambiguously matched. To detect these, `ripsecrets` looks for variables or properties that are being assigned with words like \"token\", \"secret\", and \"password\", and checks if a random string is assigned to it.\n\nTo determine if a string is random or not `ripsecrets` looks at a few properties of a string, like how many distinct characters it has, and calculates how likely it is to have occurred by random chance. If the probability that it happened by chance is less than 1 in 10,000 then it's determined to not be a secret. You can learn more about how the probability is calculated [here](https://github.com/sirwart/ripsecrets/blob/main/src/matcher/p_random.rs#L7).\n\nIf you find either a false negative (a secret that wasn't found by `ripsecrets`) or a false positive (a non-secret that was flagged as such), please open an issue or a pull request.\n\n## Performance\n\nThe slowest part of secret scanning is looking for potential secrets in a large number of files. To do this quickly `ripsecrets` does a couple of things:\n\n1. All the secret patterns are compiled into a single regex, so each file only needs to be processed once.\n\n2. This regex is fed to [ripgrep](https://github.com/BurntSushi/ripgrep), which is specially optimized to running a regex against a large number of files quickly.\n\nAdditionally, `ripsecrets` is written in Rust, which means there's no interpreter startup time. To compare real world performance, here's the runtime of a few different scanning tools to search for secrets in the [Sentry repo](https://github.com/getsentry/sentry) on an M1 air laptop:\n\n| tool           | avg. runtime | vs. baseline |\n| -------------- | ------------ | ------------ |\n| ripsecrets     | 0.32s        | 1x           |\n| trufflehog     | 31.2s        | 95x          |\n| detect-secrets | 73.5s        | 226x         |\n\nMost of the time, your pre-commit will be running on a small number of files, so the runtimes above are not typical, but when working with large commits that touch a lot of files the runtime can become noticeable.\n\n## Running benchmarks\n\n```shell\n$ cargo bench\n```\n\nThe results will then be viewable at `target/criterion/report/index.html`.\n\n## Alternative tools\n\nEven if `ripsecrets` is not the right tool for you, if you're working on a service that deals with user data you should strongly consider using a secret scanner. Here are some alternative tools worth considering:\n\n- [detect-secrets](https://github.com/Yelp/detect-secrets)\n- [trufflehog](https://github.com/trufflesecurity/trufflehog)\n- [gitleaks](https://github.com/zricethezav/gitleaks)"
}
