{
  "name": "trust-dns",
  "full_name": "trust-dns",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Rust based DNS client, server, and resolver",
  "license": "Apache-2.0 or MIT",
  "homepage": "https://github.com/bluejekyll/trust-dns",
  "versions": {
    "stable": "0.22.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/bluejekyll/trust-dns/archive/refs/tags/v0.22.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "48debc51079b43a942f05f51dfd6d7ea900ed21f6db72e3136f100cb35263a15"
    },
    "head": {
      "url": "https://github.com/bluejekyll/trust-dns.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/trust-dns/blobs/sha256:fabca7db9c4e9ebf00c2e0cc49ada98a3592f2fa9f2c75228ac975c50ae8c53e",
          "sha256": "fabca7db9c4e9ebf00c2e0cc49ada98a3592f2fa9f2c75228ac975c50ae8c53e"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/trust-dns/blobs/sha256:c965b32e370d998e7afeae07785fc37d3fc26e58a0a4063c436602ac950e1987",
          "sha256": "c965b32e370d998e7afeae07785fc37d3fc26e58a0a4063c436602ac950e1987"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/trust-dns/blobs/sha256:5280c4cdddcdab6e7d658ddf21af8e52c4328f3d7e3639aa58c11315368b7feb",
          "sha256": "5280c4cdddcdab6e7d658ddf21af8e52c4328f3d7e3639aa58c11315368b7feb"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/trust-dns/blobs/sha256:37162e844630ce06bb23edf76e0d8b292052c0e06c1cee69826d68012aec0e38",
          "sha256": "37162e844630ce06bb23edf76e0d8b292052c0e06c1cee69826d68012aec0e38"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/trust-dns/blobs/sha256:e4459b5c8d61f086d22f1f87529d274720d29d006e6004af4fba42a26ee27b16",
          "sha256": "e4459b5c8d61f086d22f1f87529d274720d29d006e6004af4fba42a26ee27b16"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/trust-dns/blobs/sha256:61fc5a09b2cc325d50a6755d548d770a862f4217e73f1a8456e67e4bd5f6e4b8",
          "sha256": "61fc5a09b2cc325d50a6755d548d770a862f4217e73f1a8456e67e4bd5f6e4b8"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/trust-dns/blobs/sha256:7607f9f4e4a599259107c7a974a8515ed30e75c8fe0b4017b76435dd0db51a32",
          "sha256": "7607f9f4e4a599259107c7a974a8515ed30e75c8fe0b4017b76435dd0db51a32"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [
    "bind"
  ],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "982192bf852eebace6c92c1e792d894990b8620e",
  "ruby_source_path": "Formula/trust-dns.rb",
  "ruby_source_checksum": {
    "sha256": "66c3c2e24c665213f71b6d5679d7de71e227c98cb5041a9005e5f1824f48b76b"
  },
  "date_added": "2023-04-09T06:16:28+08:00",
  "readme": "[![minimum rustc: 1.64](https://img.shields.io/badge/minimum%20rustc-1.64-green?logo=rust)](https://www.whatrustisit.com)\n[![Build Status](https://github.com/bluejekyll/trust-dns/workflows/test/badge.svg?branch=main)](https://github.com/bluejekyll/trust-dns/actions?query=workflow%3Atest)\n[![codecov](https://codecov.io/gh/bluejekyll/trust-dns/branch/main/graph/badge.svg)](https://codecov.io/gh/bluejekyll/trust-dns)\n[![License: MIT](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE-MIT)\n[![License: Apache 2.0](https://img.shields.io/badge/license-Apache_2.0-blue.svg)](LICENSE-APACHE)\n[![Discord](https://img.shields.io/discord/590067103822774272.svg)](https://discord.gg/89nxE4n)\n\n![Trust-DNS](logo.svg)\n\n# Trust-DNS\n\nA Rust based DNS client, server, and Resolver, built to be safe and secure from the\nground up.\n\nThis repo consists of multiple crates:\n\n| Library       | Description                                                                                                                                                                                                                                                                                                                                |\n| ------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| **Trust-DNS** | [![](https://img.shields.io/crates/v/trust-dns.svg)](https://crates.io/crates/trust-dns) Binaries for running a DNS authoritative server.                                                                                                                                                                                                  |\n| **Proto**     | [![](https://img.shields.io/crates/v/trust-dns-proto.svg)](https://crates.io/crates/trust-dns-proto) [![trust-dns-proto](https://docs.rs/trust-dns-proto/badge.svg)](https://docs.rs/trust-dns-proto) Raw DNS library, exposes an unstable API and only for use by the other Trust-DNS libraries, not intended for end-user use.           |\n| **Client**    | [![](https://img.shields.io/crates/v/trust-dns-client.svg)](https://crates.io/crates/trust-dns-client) [![trust-dns-client](https://docs.rs/trust-dns-client/badge.svg)](https://docs.rs/trust-dns-client) Used for sending `query`, `update`, and `notify` messages directly to a DNS server.                                             |\n| **Server**    | [![](https://img.shields.io/crates/v/trust-dns-server.svg)](https://crates.io/crates/trust-dns-server) [![trust-dns-server](https://docs.rs/trust-dns-server/badge.svg)](https://docs.rs/trust-dns-server) Use to host DNS records, this also has a `trust-dns` binary for running in a daemon form.                                           |\n| **Resolver**  | [![](https://img.shields.io/crates/v/trust-dns-resolver.svg)](https://crates.io/crates/trust-dns-resolver) [![trust-dns-resolver](https://docs.rs/trust-dns-resolver/badge.svg)](https://docs.rs/trust-dns-resolver) Utilizes the client library to perform DNS resolution. Can be used in place of the standard OS resolution facilities. |\n\n# Goals\n\n- Build a safe and secure DNS server and client with modern features.\n- No panics, all code is guarded\n- Use only safe Rust, and avoid all panics with proper Error handling\n- Use only stable Rust\n- Protect against DDOS attacks (to a degree)\n- Support options for Global Load Balancing functions\n- Make it dead simple to operate\n\n# Status\n\n## Resolver\n\nThe Trust-DNS Resolver is a native Rust implementation for stub resolution in Rust applications. The Resolver supports many common query patterns, all of which can be configured when creating the Resolver. It is capable of using system configuration on Unix and Windows. On Windows there is a known issue that relates to a large set of interfaces being registered for use, so might require ignoring the system configuration.\n\nThe Resolver will properly follow CNAME chains as well as SRV record lookups. There is a long term plan to make the Resolver capable of fully recursive queries, but that's not currently possible.\n\n## Client\n\nThe Trust-DNS Client is intended to be used for operating against a DNS server directly. It can be used for verifying records or updating records for servers that support SIG0 and dynamic update. The Client is also capable of validating DNSSEC. As of now NSEC3 validation is not yet supported, though NSEC is. There are two interfaces that can be used, the async/await compatible AsyncClient and a blocking Client for ease of use. Today, Tokio is required for the executor Runtime.\n\n### Unique client side implementations\n\nThese are standards supported by the DNS protocol. The client implements them\nas high level interfaces, which is a bit more rare.\n\n| Feature                                                                                                         | Description                                           |\n| --------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------- |\n| [SyncDnssecClient](https://docs.rs/trust-dns-client/latest/trust_dns_client/client/struct.SyncDnssecClient.html)              | DNSSEC validation                                     |\n| [create](https://docs.rs/trust-dns-client/latest/trust_dns_client/client/trait.Client.html#method.create)                     | atomic create of a record, with authenticated request |\n| [append](https://docs.rs/trust-dns-client/latest/trust_dns_client/client/trait.Client.html#method.append)                     | verify existence of a record and append to it         |\n| [compare_and_swap](https://docs.rs/trust-dns-client/latest/trust_dns_client/client/trait.Client.html#method.compare_and_swap) | atomic (depends on server) compare and swap           |\n| [delete_by_rdata](https://docs.rs/trust-dns-client/latest/trust_dns_client/client/trait.Client.html#method.delete_by_rdata)   | delete a specific record                              |\n| [delete_rrset](https://docs.rs/trust-dns-client/latest/trust_dns_client/client/trait.Client.html#method.delete_rrset)         | delete an entire record set                           |\n| [delete_all](https://docs.rs/trust-dns-client/latest/trust_dns_client/client/trait.Client.html#method.delete_all)             | delete all records sets with a given name             |\n| [notify](https://docs.rs/trust-dns-client/latest/trust_dns_client/client/trait.Client.html#method.notify)                     | notify server that it should reload a zone            |\n\n## Server\n\nThe server code is complete, the daemon supports IPv4 and IPv6, UDP and TCP.\nThere currently is no way to limit TCP and AXFR operations, so it is still not\nrecommended to put into production as TCP can be used to DOS the service.\nZone file parsing is complete and supported. There is currently no forking\noption, and the server is not yet threaded (although it is implemented with\nasync IO, so threading may not be a huge benefit). There is still a lot of work\nto do before a server can be trusted with this externally. Running it behind a\nfirewall on a private network would be safe.\n\nZone signing support is complete, to insert a key store a pem encoded rsa file\nin the same directory as the initial zone file with the `.key` suffix. _Note_:\nthis must be only readable by the current user. If one is not present one will\nbe created and written to the correct location. This also acts as the initial\nkey for dynamic update SIG(0) validation. To get the public key, the `DNSKEY`\nrecord for the zone can be queried. This is needed to provide to other\nupstream servers to create the `DS` key. Dynamic DNS is also complete,\nif enabled, a journal file will be stored next to the zone file with the\n`jrnl` suffix. _Note_: if the key is changed or updated, it is currently the\noperators responsibility to remove the only public key from the zone, this\nallows for the `DNSKEY` to exist for some unspecified period of time during\nkey rotation. Rotating the key currently is not available online and requires\na restart of the server process.\n\n### DNS-over-TLS and DNS-over-HTTPS on the Server\n\nSupport of TLS on the Server is managed through a pkcs12 der file. The documentation is captured in the example test config file, [example.toml](https://github.com/bluejekyll/trust-dns/blob/main/tests/test-data/test_configs/example.toml). A registered certificate to the server can be pinned to the Client with the `add_ca()` method. Alternatively, as the client uses the rust-native-tls library, it should work with certificate signed by any standard CA.\n\n## DNS-over-TLS and DNS-over-HTTPS\n\nDoT and DoH are supported. This is accomplished through the use of one of `native-tls`, `openssl`, or `rustls` (only `rustls` is currently supported for DoH). The Resolver requires only requires valid DoT or DoH resolvers being registered in order to be used.\n\nTo use with the `Client`, the `TlsClientConnection` or `HttpsClientConnection` should be used. Similarly, to use with the tokio `AsyncClient` the `TlsClientStream` or `HttpsClientStream` should be used. ClientAuth, mTLS, is currently not supported, there are some issues still being worked on. TLS is useful for Server authentication and connection privacy.\n\nTo enable DoT one of the features `dns-over-native-tls`, `dns-over-openssl`, or `dns-over-rustls` must be enabled, `dns-over-https-rustls` is used for DoH.\n\n## DNSSEC status\n\nCurrently the root key is hardcoded into the system. This gives validation of\nDNSKEY and DS records back to the root. NSEC is implemented, but not NSEC3.\nBecause caching is not yet enabled, it has been noticed that some DNS servers\nappear to rate limit the connections, validating RRSIG records back to the root\ncan require a significant number of additional queries for those records.\n\nZones will be automatically resigned on any record updates via dynamic DNS. To enable DNSSEC, one of the features `dnssec-openssl` or `dnssec-ring` must be enabled.\n\n## RFCs implemented\n\n- [RFC 8499](https://tools.ietf.org/html/rfc8499): No more master/slave, in honor of [Juneteenth](https://en.wikipedia.org/wiki/Juneteenth)\n\n### Basic operations\n\n- [RFC 1035](https://tools.ietf.org/html/rfc1035): Base DNS spec (see the Resolver for caching)\n- [RFC 2308](https://tools.ietf.org/html/rfc2308): Negative Caching of DNS Queries (see the Resolver)\n- [RFC 2782](https://tools.ietf.org/html/rfc2782): Service location\n- [RFC 3596](https://tools.ietf.org/html/rfc3596): IPv6\n- [RFC 6891](https://tools.ietf.org/html/rfc6891): Extension Mechanisms for DNS\n- [RFC 6761](https://tools.ietf.org/html/rfc6761): Special-Use Domain Names (resolver)\n- [RFC 6762](https://tools.ietf.org/html/rfc6762): mDNS Multicast DNS (experimental feature: `mdns`)\n- [RFC 6763](https://tools.ietf.org/html/rfc6763): DNS-SD Service Discovery (experimental feature: `mdns`)\n- [RFC ANAME](https://tools.ietf.org/html/draft-ietf-dnsop-aname-02): Address-specific DNS aliases (`ANAME`)\n\n### Update operations\n\n- [RFC 2136](https://tools.ietf.org/html/rfc2136): Dynamic Update\n- [RFC 7477](https://tools.ietf.org/html/rfc7477): Child-to-Parent Synchronization in DNS\n\n### Secure DNS operations\n\n- [RFC 3007](https://tools.ietf.org/html/rfc3007): Secure Dynamic Update\n- [RFC 4034](https://tools.ietf.org/html/rfc4034): DNSSEC Resource Records\n- [RFC 4035](https://tools.ietf.org/html/rfc4035): Protocol Modifications for DNSSEC\n- [RFC 4509](https://tools.ietf.org/html/rfc4509): SHA-256 in DNSSEC Delegation Signer\n- [RFC 5702](https://tools.ietf.org/html/rfc5702): SHA-2 Algorithms with RSA in DNSKEY and RRSIG for DNSSEC\n- [RFC 6844](https://tools.ietf.org/html/rfc6844): DNS Certification Authority Authorization (CAA) Resource Record\n- [RFC 6698](https://tools.ietf.org/html/rfc6698): The DNS-Based Authentication of Named Entities (DANE) Transport Layer Security (TLS) Protocol: TLSA\n- [RFC 6840](https://tools.ietf.org/html/rfc6840): Clarifications and Implementation Notes for DNSSEC\n- [RFC 6844](https://tools.ietf.org/html/rfc6844): DNS Certification Authority Authorization Resource Record\n- [RFC 6944](https://tools.ietf.org/html/rfc6944): DNSKEY Algorithm Implementation Status\n- [RFC 6975](https://tools.ietf.org/html/rfc6975): Signaling Cryptographic Algorithm Understanding\n- [RFC 7858](https://tools.ietf.org/html/rfc7858): DNS over TLS (feature: `dns-over-rustls`, `dns-over-native-tls`, or `dns-over-openssl`)\n- [RFC DoH](https://tools.ietf.org/html/draft-ietf-doh-dns-over-https-14): DNS over HTTPS, DoH (feature: `dns-over-https-rustls`)\n\n## RFCs in progress or not yet implemented\n\n### Basic operations\n\n- [RFC 2317](https://tools.ietf.org/html/rfc2317): Classless IN-ADDR.ARPA delegation\n\n### Update operations\n\n- [RFC 1995](https://tools.ietf.org/html/rfc1995): Incremental Zone Transfer\n- [RFC 1996](https://tools.ietf.org/html/rfc1996): Notify secondaries of update\n- [Update Leases](https://tools.ietf.org/html/draft-sekar-dns-ul-01): Dynamic DNS Update Leases\n- [Long-Lived Queries](https://tools.ietf.org/html/draft-sekar-dns-llq-01): Notify with bells\n\n### Secure DNS operations\n\n- [RFC 5155](https://tools.ietf.org/html/rfc5155): DNSSEC Hashed Authenticated Denial of Existence\n- [DNSCrypt](https://dnscrypt.org): Trusted DNS queries\n- [S/MIME](https://tools.ietf.org/html/draft-ietf-dane-smime-09): Domain Names For S/MIME\n\n# Usage\n\nThis assumes that you have [Rust](https://www.rust-lang.org) stable installed. These\npresume that the trust-dns repos have already been synced to the local system:\n\n    git clone https://github.com/bluejekyll/trust-dns.git\n    cd trust-dns\n\n## Prerequisites\n\n### Minimum Rust Version\n\n- The current minimum rustc version for this project is `1.64`\n- OpenSSL development libraries (optional in client and resolver, min version 1.0.2)\n\n### Mac OS X: using homebrew\n\n```\n  brew install openssl\n  export OPENSSL_INCLUDE_DIR=`brew --prefix openssl`/include\n  export OPENSSL_LIB_DIR=`brew --prefix openssl`/lib\n```\n\n### Debian-based (includes Ubuntu & Raspbian): using apt-get\n\n```\n  # note for openssl that a minimum version of 1.0.2 is required for TLS,\n  #  if this is an issue, TLS can be disabled (on the client), see below.\n  $ apt-get install openssl\n  $ apt-get install libssl-dev pkg-config\n```\n\n## Testing\n\nTrust-DNS uses `just` for build workflow management. While running `cargo test` at the project root will work, this is not exhaustive. Install `just` with `cargo install just`.\n\n- Default tests\n\n  These are good for running on local systems. They will create sockets for\n  local tests, but will not attempt to access remote systems. Tests can also\n  be run from the crate directory, i.e. `client` or `server` and `cargo test`\n\n```shell\njust default\n```\n\n- Default feature tests\n\n  Trust-DNS has many features, to quickly test with them or without, there are three targets supported, `default`, `no-default-features`, `all-features`:\n\n```shell\njust all-features\n```\n\n- Individual feature tests\n\n  Trust-DNS has many features, each individual feature can be tested in dependently, see individual crates for all their features, here is a not necessarily up to date list: `dns-over-rustls`, `dns-over-https-rustls`, `dns-over-native-tls`, `dns-over-openssl`, `dns-dnssec-openssl`, `dns-dnssec-openssl`, `dns-dnssec-ring`, `mdns`. Each feature can be tested with itself as the task target for `just`:\n\n```shell\njust dns-over-https-rustls\n```\n\n- Benchmarks\n\n  Waiting on benchmarks to stabilize in mainline Rust.\n\n## Building\n\n- Production build, from the `trust-dns` base dir, to get all features, just pass the `--all-features` flag.\n\n```shell\ncargo build --release -p trust-dns\n```\n\n## Running\n\nWarning: Trust-DNS is still under development, running in production is not\nrecommended. The server is currently only single-threaded, it is non-blocking\nso this should allow it to work with most internal loads.\n\n- Verify the version\n\n```shell\n./target/release/trust-dns --version\n```\n\n- Get help\n\n```shell\n./target/release/trust-dns --help\n```\n\n- Launch `trust-dns` server with test config\n\nYou may want not passing the `-p` parameter will run on default DNS ports. For the tls features, there are also port options for those, see `trust-dns --help`\n\n```shell\n./target/release/trust-dns -c ./tests/test-data/test_configs/example.toml -z ./tests/test-data/test_configs/ -p 24141\n```\n\n- Query the just launched server with `dig`\n\n```shell\ndig @127.0.0.1 -p 24141 www.example.com\n```\n\n## Using the trust-dns-resolver CLI\n\nAvailable in `0.20`\n\n```shell\ncargo install --bin resolve trust-dns-util\n```\n\nOr from source, in the trust-dns directory\n\n```shell\ncargo install --bin resolve --path util\n```\n\nexample:\n\n```shell\n$ resolve www.example.com.\nQuerying for www.example.com. A from udp:8.8.8.8:53, tcp:8.8.8.8:53, udp:8.8.4.4:53, tcp:8.8.4.4:53, udp:[2001:4860:4860::8888]:53, tcp:[2001:4860:4860::8888]:53, udp:[2001:4860:4860::8844]:53, tcp:[2001:4860:4860::8844]:53\nSuccess for query name: www.example.com. type: A class: IN\n        www.example.com. 21063 IN A 93.184.216.34\n```\n\n## Using as a dependency and custom features\n\nThe Client has a few features which can be disabled for different reasons when embedding in other software.\n\n- `dnssec-openssl`\n  It is a default feature, so default-features will need to be set to false (this will disable all other default features in trust-dns). Until there are other crypto libraries supported, this will also disable DNSSEC validation. The functions will still exist, but will always return errors on validation. The below example line will disable all default features and enable OpenSSL, remove `\"openssl\"` to remove the dependency on OpenSSL.\n\n- `dnssec-ring`\n  Ring support can be used for RSA and ED25519 DNSSEC validation.\n\n- `dns-over-native-tls`\n  Uses `native-tls` for DNS-over-TLS implementation, only supported in client and resolver, not server.\n\n- `dns-over-openssl`\n  Uses `openssl` for DNS-over-TLS implementation supported in server and client, resolver does not have default CA chains.\n\n- `dns-over-rustls`\n  Uses `rustls` for DNS-over-TLS implementation, only supported in client and resolver, not server. This is the best option where a pure Rust toolchain is desired. Supported in client, resolver, and server.\n\n- `dns-over-https-rustls`\n  Uses `rustls` for DNS-over-HTTPS (and DNS-over-TLS will be enabled) implementation, only supported in client, resolver, and server. This is the best option where a pure Rust toolchain is desired.\n\n- `mdns` _EXPERIMENTAL_\n  Enables the experimental mDNS features as well as DNS-SD. This currently has known issues.\n\nUsing custom features in dependencies:\n\n```\n[dependencies]\n  ...\ntrust-dns = { version = \"*\", default-features = false, features = [\"dnssec-openssl\"] }\n```\n\nUsing custom features during build:\n\n```console\n$> cargo build --release --features dns-over-rustls\n...\n```\n\n## FAQ\n\n- Why are you building another DNS server?\n\n      Because of all the security advisories out there for BIND.\n\n  Using Rust semantics it should be possible to develop a high performance and\n  safe DNS Server that is more resilient to attacks.\n\n- What is the MSRV (minimum stable Rust version) policy?\n\n      Trust-DNS will work to support backward compatibility with three Rust versions.\n\n  For example, if `1.50` is the current release, then the MSRV will be `1.47`. The\n  version is only increased as necessary, so it's possible that the MSRV is older\n  than this policy states. Additionally, the MSRV is only supported for the `no-default-features`\n  build due to it being an intractable issue of trying to enforce this policy on dependencies.\n\n## Community\n\nFor live discussions beyond this repository, please see this [Discord](https://discord.gg/89nxE4n).\n\n## License\n\nLicensed under either of\n\n- Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or <https://www.apache.org/licenses/LICENSE-2.0>)\n- MIT license ([LICENSE-MIT](LICENSE-MIT) or <https://opensource.org/licenses/MIT>)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally\nsubmitted for inclusion in the work by you, as defined in the Apache-2.0\nlicense, shall be dual licensed as above, without any additional terms or\nconditions."
}
