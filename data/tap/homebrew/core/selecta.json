{
  "name": "selecta",
  "full_name": "selecta",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Fuzzy text selector for files and anything else you need to select",
  "license": "MIT",
  "homepage": "https://github.com/garybernhardt/selecta",
  "versions": {
    "stable": "0.0.7",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/garybernhardt/selecta/archive/v0.0.7.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "00d1bdabb44b93f90018438f8ffc0780f96893b809b52956abb9485f509d03d2"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/selecta/blobs/sha256:c418f7d144207312dddff58fbffadb5d602d681c2704e73f65d9489ba5ff47a9",
          "sha256": "c418f7d144207312dddff58fbffadb5d602d681c2704e73f65d9489ba5ff47a9"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/selecta.rb",
  "ruby_source_checksum": {
    "sha256": "f0f3806eecf29e4cb07260439a7a70d0f3c00ee1830ddc04b7aa55f4f47634ee"
  },
  "date_added": "2014-03-09T12:14:09-07:00",
  "readme": "# Selecta\n\nSelecta is a fuzzy selector. You can use it for fuzzy selection in the style of\nCommand-T, ctrlp, etc. You can also use it to fuzzy select anything else:\ncommand names, help topics, identifiers; anything you have a list of.\n\nIt was originally written to select things from vim, but it has no dependency\non vim at all and is used for many other purposes. Its interface is dead\nsimple:\n\n* Pass it a list of choices on stdin.\n* It will present a pretty standard fuzzy selection interface to the user (and\n  block until they make a selection or kill it with ^C).\n* It will print the user's selection on stdout.\n\nFor example, you can say:\n\n```\ncat $(ls *.txt | selecta)\n```\n\nwhich will prompt the user to fuzzy-select one of the text files in the current\ndirectory, then print the contents of whichever one they choose. It looks like\nthis:\n\n![Demo](https://raw.github.com/garybernhardt/selecta/master/demo.gif)\n\nSelecta supports these keys:\n\n- ^W to delete the word before the cursor\n- ^H to delete the character before the cursor\n- ^U to delete the entire line\n- ^N to select the next match\n- ^P to select the previous match\n- ^C to quit without selecting a match\n\n## Theory of Operation\n\nSelecta is unusual in that it's a filter (it reads from/to stdin/stdout), but\nit's also an interactive program (it accepts user keystrokes and draws a UI).\nIt directly opens `/dev/tty` to do the latter.\n\nWith that exception aside, Selecta is a normal, well-behaved Unix tool. If a\nselection is made, the line will be written to stdout with a single trailing\nnewline. If no selection is made (meaning the user killed Selecta with ^C), it\nwill write nothing to stdout and exit with status code 1.\n\nBecause it's just a filter program, Selecta doesn't know about any other tools.\nSpecifically, it does not:\n\n- Read from or write to the disk.\n- Know about any editors (including vim).\n- Know what it's searching.\n- Perform any actions on the item you select.\n\nThe ranking algorithm is:\n\n- Select each input string that contains all of the characters in the query.\n  They must be in order, but don't have to be sequential. Case is ignored.\n- The score is the length of the matching substring. Lower is better.\n- If a character is on a word boundary, it only contributes 1 to the length, rather than the actual number of characters since the previous matching character. Querying \"app/models\" for \"am\" gives a score of 2, not 5.\n- Bonus for exact queries: when several adjacent characters match sequentially, only the first two score. Querying \"search_spec.rb\" for \"spec\" gives a score of 2, not 4.\n- Bonus for acronyms: when several sequential query characters exist on word boundaries, only the first two score. Querying \"app/models/user.rb\" for \"amu\" gives a score of 2, not 3.\n\nSome concrete examples:\n- \"ct\" will match \"cat\" and \"Crate\", but not \"tack\".\n- \"le\" will match \"lend\" and \"ladder\". \"lend\" will appear higher in the results\n  because the matching substring is shorter (\"le\" vs. \"ladde\").\n\n## Installation\n\nSelecta requires Ruby 1.9.3 or better.\n\nTo install on your Mac using [Homebrew](http://brew.sh), say:\n\n```shell\nbrew install selecta\n```\n\nFor other systems, copy the `selecta` script to your path. ~/bin is a great\nplace for it. If you don't currently have a ~/bin, just do `mkdir ~/bin` and\nadd `export PATH=\"$HOME/bin:$PATH\"` to your .zshrc, .bashrc, etc.\n\nSelecta is *not installable as a Ruby gem*! Gems are only good for\napplication-specific tools. You want Selecta available at all times. If it were\na gem, it would sometimes disappear when switching Rubies, gemsets, etc.\n\n## Use with Vim\n\nThere's no vim plugin. It may not end up needing one; we'll see. For now, you\ncan just stick the code below in your .vimrc to invoke Selecta with `<leader>f`\n(this will be `\\f` unless you've changed your leader). Note that Selecta has to\nrun in a terminal by its nature, so this Vim example will not work in graphical\nVims like MacVim.\n\n```vimscript\n\" Run a given vim command on the results of fuzzy selecting from a given shell\n\" command. See usage below.\nfunction! SelectaCommand(choice_command, selecta_args, vim_command)\n  try\n    let selection = system(a:choice_command . \" | selecta \" . a:selecta_args)\n  catch /Vim:Interrupt/\n    \" Swallow the ^C so that the redraw below happens; otherwise there will be\n    \" leftovers from selecta on the screen\n    redraw!\n    return\n  endtry\n  redraw!\n  exec a:vim_command . \" \" . selection\nendfunction\n\n\" Find all files in all non-dot directories starting in the working directory.\n\" Fuzzy select one of those. Open the selected file with :e.\nnnoremap <leader>f :call SelectaCommand(\"find * -type f\", \"\", \":e\")<cr>\n```\n\n## Usage Examples\n\nFor other examples of using Selecta with Vim, git, zsh, etc., see the [examples](https://github.com/garybernhardt/selecta/blob/master/EXAMPLES.md) file.\nIt has pre-built configurations for many use cases.\n\n## FAQ\n\n**Won't this be slow?**\n\nNope: startup and termination together burn about 23 ms of CPU on my machine (a\nmid-2011 MacBook Air).\nFor under 100,000 lines of input or so, searching is quite snappy, and you'll rarely want to search through more than that.\nOn modern machines, finding files is also quite fast: `find` on a 100,000-file directory takes about 200 ms on my machine.\n\n**What about caching, selecting only certain file types, etc.?**\n\nThose are different problems. This is just a simple fuzzy finding user\ninterface. It could be combined with caching, etc. I don't use caching myself,\nprefering to keep repos small. Selecta was partially motivated by frustration\nwith existing fuzzy file finders, which occasionally showed incorrect results\nwith caching turned on but were painfully slow with caching disabled."
}
