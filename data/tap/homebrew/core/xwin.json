{
  "name": "xwin",
  "full_name": "xwin",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Microsoft CRT and Windows SDK headers and libraries loader",
  "license": "Apache-2.0",
  "homepage": "https://github.com/Jake-Shadle/xwin",
  "versions": {
    "stable": "0.2.14",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/Jake-Shadle/xwin/archive/refs/tags/0.2.14.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "db7e8c7dd32038d48b2f1f4a57f5a815f38c582abc6dff6a97c3ec9d71aa139a"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/xwin/blobs/sha256:23431265df5af3c28350f6e0068406cd409aca72acbf026b6a099d4000223601",
          "sha256": "23431265df5af3c28350f6e0068406cd409aca72acbf026b6a099d4000223601"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/xwin/blobs/sha256:0dff35b39fc1dd808ccd313e26e3a4a7a9a4d9b6fb4bc6fb5ef7f0d40e7fc950",
          "sha256": "0dff35b39fc1dd808ccd313e26e3a4a7a9a4d9b6fb4bc6fb5ef7f0d40e7fc950"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/xwin/blobs/sha256:69e1df2d3bad7a23993dbe34da848ea95a53f7623007fa9aa9745df5fd2a0f0d",
          "sha256": "69e1df2d3bad7a23993dbe34da848ea95a53f7623007fa9aa9745df5fd2a0f0d"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/xwin/blobs/sha256:560b89ba11bc69bc3914aabc67c3b15535c3591a6efe43d4636ac9eb909dd98c",
          "sha256": "560b89ba11bc69bc3914aabc67c3b15535c3591a6efe43d4636ac9eb909dd98c"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/xwin/blobs/sha256:05270f74d71f23449271f9c6802c9ff4a055bd0a40ab86ca468af5a5b83c0b06",
          "sha256": "05270f74d71f23449271f9c6802c9ff4a055bd0a40ab86ca468af5a5b83c0b06"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/xwin/blobs/sha256:111c69d06a1458c5e6a5c58b2d7e308e051fc99192ba8da6300b64444342547b",
          "sha256": "111c69d06a1458c5e6a5c58b2d7e308e051fc99192ba8da6300b64444342547b"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/xwin/blobs/sha256:31b2d3804bf68efdd54c6e598d4f02fb15422c068310950b77fdee4ad0bdfddc",
          "sha256": "31b2d3804bf68efdd54c6e598d4f02fb15422c068310950b77fdee4ad0bdfddc"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/xwin.rb",
  "ruby_source_checksum": {
    "sha256": "f9ca852709e2c2b376485b8c207a2be2eabf6c0f80f04ced6aa38c8bf8b872fa"
  },
  "date_added": "2022-09-12T08:25:43+00:00",
  "readme": "<div align=\"center\">\n\n# `xwin`\n\n**A utility for downloading and packaging the [Microsoft CRT](https://docs.microsoft.com/en-us/cpp/c-runtime-library/crt-library-features?redirectedfrom=MSDN&view=msvc-160) headers and libraries, and [Windows SDK](https://en.wikipedia.org/wiki/Microsoft_Windows_SDK) headers and libraries needed for compiling and linking programs targeting Windows.**\n\n[![Crates.io](https://img.shields.io/crates/v/xwin.svg)](https://crates.io/crates/xwin)\n[![Docs](https://docs.rs/xwin/badge.svg)](https://docs.rs/xwin)\n[![dependency status](https://deps.rs/repo/github/Jake-Shadle/xwin/status.svg)](https://deps.rs/repo/github/Jake-Shadle/xwin)\n[![Build status](https://github.com/Jake-Shadle/xwin/workflows/CI/badge.svg)](https://github.com/Jake-Shadle/xwin/actions)\n\n</div>\n\n## Introduction\n\nThe goal of this project is to create a root directory for both the CRT and Windows SDK that each contain all of the necessary includes and libraries needed for an application to compile and link from a non-Windows platform, using a native cross compiling toolchain like clang/LLVM. This includes adding symlinks to correct numerous casing issues in the Windows SDK so that the files generated by this program can function on a case-sensitive file system.\n\nSee this [blog post](https://jake-shadle.github.io/xwin/) for an in depth walk-through of how xwin can be used.\n\n## Installation\n\n### From source\n\n`cargo install xwin --locked`\n\n#### Features\n\n`xwin` provides two feature toggles used to decide which TLS implementation to use\n\n* `rustls` (default) - Uses [`rustls`](https://github.com/rustls/rustls) for TLS\n* `native-tls` - Uses [`native-tls`](https://github.com/sfackler/rust-native-tls) for TLS. Note that on platforms where OpenSSL is used it is always built from source.\n\n### From tarball\n\nYou can download a prebuilt binary from the [Releases](https://github.com/Jake-Shadle/xwin/releases).\n\n* `x86_64-unknown-linux-musl`\n* `x86_64-apple-darwin`\n* `aarch64-apple-darwin`\n\n## Usage\n\n* `--accept-license` - Doesn't display the prompt to accept the license. You can also set the `XWIN_ACCEPT_LICENSE=1` environment variable\n* `--arch <arch>` - The architectures to include [default: x86_64]  [possible values: x86, x86_64, aarch, aarch64]. Note that I haven't fully tested aarch/64 nor x86 so there _might_ be issues with them, please file an issue if you encounter problems with them.\n* `--cache-dir <cache-dir>` - Specifies the cache directory used to persist downloaded items to disk. Defaults to `./.xwin-cache` if not specified.\n* `-L, --log-level <level>` - The log level for messages, only log messages at or above the level will be emitted [default: info] [possible values: off, error, warn, info, debug, trace].\n* `--variant <variant>...` - The variants to include [default: desktop]  [possible values: desktop, onecore, spectre]. Note that I haven't fully tested any variant except `desktop`, please file an issue if you try to use one of the others and run into issues. Note that there is another `store` variant that hasn't even been implemented due to it being weird and me not having a real project targeting it.\n* `--channel <channel>` - The product channel to use [default: release]\n* `--manifest-version <version>` - The manifest version to retrieve  [default: 16].\n* `--manifest` - Specifies a top level manifest to use, rather than downloading it from Microsoft. This can be used to ensure the output is reproducible.\n* `https_proxy` - Environment variable that specifies the HTTPS proxy to use.\n\n### `xwin download`\n\nThis downloads the top level manifest and any vsix, msi, or cab files that are needed that aren't already in the download cache.\n\n### `xwin unpack`\n\nDecompresses all of the downloaded package contents to disk. `download` is run automatically.\n\n### `xwin splat`\n\n* `--copy` - Copies files from the unpack directory to the splat directory instead of moving them, which preserves the original unpack directories but increases overall execution time and disk usage.\n* `--disable-symlinks` - By default, symlinks are added to both the CRT and WindowsSDK to address casing issues in general usage. For example, if you are compiling C/C++ code that does `#include <windows.h>`, it will break on a case-sensitive file system, as the actual path in the WindowsSDK is `Windows.h`. This also applies even if the C/C++ you are compiling uses correct casing for all CRT/SDK includes, as the internal headers also use incorrect casing in most cases\n* `--include-debug-libs` - The MSVCRT includes (non-redistributable) debug versions of the various libs that are generally uninteresting to keep for most usage\n* `--include-debug-symbols` - The MSVCRT includes PDB (debug symbols) files for several of the libraries that are generally uninteresting to keep for most usage\n* `--preserve-ms-arch-notation` - By default, we convert the MS specific `x64`, `arm`, and `arm64` target architectures to the more canonical `x86_64`, `aarch`, and `aarch64` of LLVM etc when creating directories/names. Passing this flag will preserve the MS names for those targets\n\nThis moves all of the unpacked files which aren't pruned to their canonical locations under a root directory, for example here is what an `x86_64` `Desktop` splat looks like. `unpack` is run automatically as needed.\n\n```txt\n.xwin-cache/splat\n├── crt\n│  ├── include\n│  │  ├── cliext\n│  │  ├── CodeAnalysis\n│  │  ├── cvt\n│  │  ├── experimental\n│  │  ├── Manifest\n│  │  └── msclr\n│  │     └── com\n│  └── lib\n│     └── x86_64\n└── sdk\n   ├── include\n   │  ├── cppwinrt\n   │  │  └── winrt\n   │  │     └── impl\n   │  ├── shared\n   │  │  ├── ndis\n   │  │  └── netcx\n   │  │     └── shared\n   │  │        └── net\n   │  │           └── wifi\n   │  ├── ucrt\n   │  │  └── sys\n   │  ├── um\n   │  │  ├── alljoyn_c\n   │  │  ├── gl\n   │  │  ├── qcc\n   │  │  │  └── windows\n   │  │  └── winsqlite\n   │  └── winrt\n   │     └── wrl\n   │        └── wrappers\n   └── lib\n      ├── ucrt\n      │  └── x86_64\n      └── um\n         └── x86_64\n```\n\n## Container\n\n[xwin.dockerfile](xwin.dockerfile) is an example Dockerfile that can be used a container image capable of building and testing Rust crates targeting `x86_64-pc-windows-msvc`.\n\n### Thanks\n\nSpecial thanks to <https://github.com/mstorsjo/msvc-wine> for the inspiration and [@mdsteele](https://github.com/mdsteele) for publishing several Rust crates around msi/cab files that were needed in this project\n\n### License\n\nThis contribution is dual licensed under EITHER OF\n\n* Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or <http://www.apache.org/licenses/LICENSE-2.0>)\n* MIT license ([LICENSE-MIT](LICENSE-MIT) or <http://opensource.org/licenses/MIT>)\n\nat your option."
}
