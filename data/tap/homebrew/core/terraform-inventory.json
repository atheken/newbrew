{
  "name": "terraform-inventory",
  "full_name": "terraform-inventory",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Terraform State â†’ Ansible Dynamic Inventory",
  "license": "MIT",
  "homepage": "https://github.com/adammck/terraform-inventory",
  "versions": {
    "stable": "0.10",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/adammck/terraform-inventory/archive/v0.10.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "8bd8956da925d4f24c45874bc7b9012eb6d8b4aa11cfc9b6b1b7b7c9321365ac"
    },
    "head": {
      "url": "https://github.com/adammck/terraform-inventory.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terraform-inventory/blobs/sha256:49d755bc67a9ac995c186a4143723379d87ef43ea76018706302aad4ac135efe",
          "sha256": "49d755bc67a9ac995c186a4143723379d87ef43ea76018706302aad4ac135efe"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terraform-inventory/blobs/sha256:0a1c36c1ddf616cee16ffaa7686fee0dc5043142c5aac0b95698b0caafe67c50",
          "sha256": "0a1c36c1ddf616cee16ffaa7686fee0dc5043142c5aac0b95698b0caafe67c50"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terraform-inventory/blobs/sha256:df26181ba3116beae2b5582eb6725c2c8d9ddad018be827f6d07d252cfc019c0",
          "sha256": "df26181ba3116beae2b5582eb6725c2c8d9ddad018be827f6d07d252cfc019c0"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terraform-inventory/blobs/sha256:c704f37b60a3427858da569809b96102c32817bb88f17027f2d2e579e3e7ace7",
          "sha256": "c704f37b60a3427858da569809b96102c32817bb88f17027f2d2e579e3e7ace7"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terraform-inventory/blobs/sha256:7444adf6b3ea13567454c7ef34feebc5d5fddedeaefe5be07382544ebf67d79b",
          "sha256": "7444adf6b3ea13567454c7ef34feebc5d5fddedeaefe5be07382544ebf67d79b"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terraform-inventory/blobs/sha256:ab56b7c132afc5508e5e10cfa21b784aa2f84fa8a23d9985b7b45eb04c8bdae1",
          "sha256": "ab56b7c132afc5508e5e10cfa21b784aa2f84fa8a23d9985b7b45eb04c8bdae1"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terraform-inventory/blobs/sha256:ab56b7c132afc5508e5e10cfa21b784aa2f84fa8a23d9985b7b45eb04c8bdae1",
          "sha256": "ab56b7c132afc5508e5e10cfa21b784aa2f84fa8a23d9985b7b45eb04c8bdae1"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terraform-inventory/blobs/sha256:ab56b7c132afc5508e5e10cfa21b784aa2f84fa8a23d9985b7b45eb04c8bdae1",
          "sha256": "ab56b7c132afc5508e5e10cfa21b784aa2f84fa8a23d9985b7b45eb04c8bdae1"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terraform-inventory/blobs/sha256:853cf36916d4bb9834f0f6b491e347a109a2930d350a1a31b8e7b8233720c20b",
          "sha256": "853cf36916d4bb9834f0f6b491e347a109a2930d350a1a31b8e7b8233720c20b"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/terraform-inventory.rb",
  "ruby_source_checksum": {
    "sha256": "2bee203be8e2f5847d6dbc391b76e7563e32dd6e515e662f09cc1fbb4a47da0f"
  },
  "date_added": "2016-03-06T13:14:15+08:00",
  "readme": "# Terraform Inventory\n\n[![Build Status](https://travis-ci.org/adammck/terraform-inventory.svg?branch=master)](https://travis-ci.org/adammck/terraform-inventory)\n[![GitHub release](https://img.shields.io/github/release/adammck/terraform-inventory.svg?maxAge=2592000)](https://github.com/adammck/terraform-inventory/releases)\n[![GitHub release](https://img.shields.io/homebrew/v/terraform-inventory.svg?maxAge=2592000)](https://formulae.brew.sh/formula/terraform-inventory)\n\nThis is a little Go app which generates a dynamic [Ansible][ans] inventory from\na [Terraform][tf] state file. It allows one to spawn a bunch of instances with \nTerraform, then (re-)provision them with Ansible.\n\nThe following providers are supported:\n\n* AWS\n* CloudStack\n* DigitalOcean\n* Docker\n* Exoscale\n* Google Compute Engine\n* Hetzner Cloud\n* [libvirt](https://github.com/dmacvicar/terraform-provider-libvirt)\n* Linode\n* OpenStack\n* Packet\n* ProfitBricks\n* Scaleway\n* SoftLayer\n* VMware\n* Nutanix\n* Open Telekom Cloud\n* Yandex.Cloud\n* Telmate/Proxmox\n\nIt's very simple to add support for new providers. See pull requests with the\n[provider][pv] label for examples.\n\n\n# Help Wanted ðŸ™‹\n\nThis library is stable, but I've been neglecting it somewhat on account of no\nlonger using Ansible at work. Please drop me a line if you'd be interested in\nhelping to maintain this tool.\n\n\n# Installation\n\nOn OSX, install it with Homebrew:\n\n\tbrew install terraform-inventory\n\nAlternatively, you can download a [release][rel] suitable for your platform and\nunzip it. Make sure the `terraform-inventory` binary is executable, and you're\nready to go.\n\n\n## Usage\n\nIf you are using [remote state][rs] (or if your state file happens to be named\n`terraform.tfstate`), `cd` to it and run:\n\n\tansible-playbook --inventory-file=/path/to/terraform-inventory deploy/playbook.yml\n\nThis will provide the resource names and IP addresses of any instances found in\nthe state file to Ansible, which can then be used as hosts patterns in your\nplaybooks. For example, given for the following Terraform config:\n\n\tresource \"digitalocean_droplet\" \"my_web_server\" {\n\t  image = \"centos-7-0-x64\"\n\t  name = \"web-1\"\n\t  region = \"nyc1\"\n\t  size = \"512mb\"\n\t}\n\nThe corresponding playbook might look like:\n\n\t- hosts: my_web_server\n\t  tasks:\n\t    - yum: name=cowsay\n\t    - command: cowsay hello, world!\n\nNote that the instance was identified by its _resource name_ from the Terraform\nconfig, not its _instance name_ from the provider. On AWS, resources are also\ngrouped by their tags. For example:\n\n\tresource \"aws_instance\" \"my_web_server\" {\n\t  instance_type = \"t2.micro\"\n\t  ami = \"ami-96a818fe\"\n\t  tags = {\n\t    Role = \"web\"\n\t    Env = \"dev\"\n\t  }\n\t}\n\n\tresource \"aws_instance\" \"my_worker\" {\n\t  instance_type = \"t2.micro\"\n\t  ami = \"ami-96a818fe\"\n\t  tags = {\n\t    Role = \"worker\"\n\t    Env = \"dev\"\n\t  }\n\t}\n\nCan be provisioned separately with:\n\n\t- hosts: role_web\n\t  tasks:\n\t    - command: cowsay this is a web server!\n\n\t- hosts: role_worker\n\t  tasks:\n\t    - command: cowsay this is a worker server!\n\n\t- hosts: env_dev\n\t  tasks:\n\t    - command: cowsay this runs on all dev servers!\n\n\n## More Usage\n\nAnsible doesn't seem to support calling a dynamic inventory script with params,\nso if you need to specify the location of your state file or terraform directory, set the `TF_STATE`\nenvironment variable before running `ansible-playbook`, like:\n\n\n\tTF_STATE=deploy/terraform.tfstate ansible-playbook --inventory-file=/path/to/terraform-inventory deploy/playbook.yml\n\n\tor\n\n\tTF_STATE=../terraform ansible-playbook --inventory-file=/path/to/terraform-inventory deploy/playbook.yml\n\nIf `TF_STATE` is a file, it parses the file as json, if `TF_STATE` is a directory, it runs `terraform state pull` inside the directory, which is supports both local and remote terraform state.\n\nIt looks for state config in this order\n\n- `TF_STATE`: environment variable of where to find either a statefile or a terraform project\n- `TI_TFSTATE`: another environment variable similar to TF_STATE\n- `terraform.tfstate`: it looks in the state file in the current directory.\n- `.`: lastly it assumes you are at the root of a terraform project.\n\nAlternately, if you need to do something fancier (like downloading your state\nfile from S3 before running), you might wrap this tool with a shell script, and\ncall that instead. Something like:\n\n\t#!/bin/bash\n\t/path/to/terraform-inventory $@ deploy/terraform.tfstate\n\nThen run Ansible with the script as an inventory:\n\n\tansible-playbook --inventory-file=bin/inventory deploy/playbook.yml\n\nThis tool returns the public IP of the host by default. If you require the private\nIP of the instance to run Ansible, set the `TF_KEY_NAME` environment variable\nto `private_ip` before running the playbook, like:\n\n\tTF_KEY_NAME=private_ip ansible-playbook --inventory-file=/path/to/terraform-inventory deploy/playbook.yml\n\nBy default, the ip address is the ansible inventory name. The `TF_HOSTNAME_KEY_NAME` environment variable allows\nyou to overwrite the source of the ansible inventory name.\n\n\tTF_HOSTNAME_KEY_NAME=name ansible-playbook --inventory-file=/path/to/terraform-inventory deploy/playbook.yml\n\n## Development\n\nIt's just a Go app, so the usual:\n\n\tgo get github.com/adammck/terraform-inventory\n\nTo test against an example statefile, run:\n\n\tterraform-inventory --list fixtures/example.tfstate\n\tterraform-inventory --host=52.7.58.202 fixtures/example.tfstate\n\nTo update the fixtures, populate `fixtures/secrets.tfvars` with your DO and AWS\naccount details, and run `fixtures/update`. To run a tiny Ansible playbook on\nthe example resourecs, run:\n\n\tTF_STATE=fixtures/example.tfstate ansible-playbook --inventory-file=/path/to/terraform-inventory fixtures/playbook.yml\n\nYou almost certainly don't need to do any of this. Use the tests instead.\n\n\n## Acknowledgements\n\nDevelopment of\n[#14](https://github.com/adammck/terraform-inventory/issues/14),\n[#16](https://github.com/adammck/terraform-inventory/issues/16),\nand [#22](https://github.com/adammck/terraform-inventory/issues/22)\nwas generously sponsored by [Transloadit](https://transloadit.com).\n\n\n## License\n\nMIT.\n\n[ans]: https://www.ansible.com\n[tf]:  https://www.terraform.io\n[rel]: https://github.com/adammck/terraform-inventory/releases\n[rs]:  https://www.terraform.io/docs/state/remote.html\n[pv]:  https://github.com/adammck/terraform-inventory/pulls?q=is%3Apr+label%3Aprovider"
}
