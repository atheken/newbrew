{
  "name": "argon2",
  "full_name": "argon2",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Password hashing library and CLI utility",
  "license": "Apache-2.0",
  "homepage": "https://github.com/P-H-C/phc-winner-argon2",
  "versions": {
    "stable": "20190702",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/P-H-C/phc-winner-argon2/archive/20190702.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "daf972a89577f8772602bf2eb38b6a3dd3d922bf5724d45e7f9589b5e830442c"
    },
    "head": {
      "url": "https://github.com/P-H-C/phc-winner-argon2.git",
      "branch": "master"
    }
  },
  "revision": 1,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/argon2/blobs/sha256:016bdb5f9f24c58d77c34daa974103a22a80d7ded572c2cb2d4586c97b43eb62",
          "sha256": "016bdb5f9f24c58d77c34daa974103a22a80d7ded572c2cb2d4586c97b43eb62"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/argon2/blobs/sha256:498cea03c8c9f5ab7b90a0c333122415f0360c09f837cafae6d8685d6846ced2",
          "sha256": "498cea03c8c9f5ab7b90a0c333122415f0360c09f837cafae6d8685d6846ced2"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/argon2/blobs/sha256:192f3381abe337df8af214cf4dccef2cbfaa9c88df489b5cf9276cea9f8c6080",
          "sha256": "192f3381abe337df8af214cf4dccef2cbfaa9c88df489b5cf9276cea9f8c6080"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/argon2/blobs/sha256:22435030bed2a599098ef4cd239153d2c3c9b5b4b5bbe2390d32f3f9a35a96fd",
          "sha256": "22435030bed2a599098ef4cd239153d2c3c9b5b4b5bbe2390d32f3f9a35a96fd"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/argon2/blobs/sha256:decd61f1d853225582aaa70e9f67438c21f45105118d86ddb69a5e494311a841",
          "sha256": "decd61f1d853225582aaa70e9f67438c21f45105118d86ddb69a5e494311a841"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/argon2/blobs/sha256:a9dd363964a2a633ace13aff04e4c5eac7e720d44faf377456de55396647ff13",
          "sha256": "a9dd363964a2a633ace13aff04e4c5eac7e720d44faf377456de55396647ff13"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/argon2/blobs/sha256:f8e550c8597728bb9edc5a548497fd7b1219203932cd0f93ecc97a4fbf0bdad8",
          "sha256": "f8e550c8597728bb9edc5a548497fd7b1219203932cd0f93ecc97a4fbf0bdad8"
        },
        "mojave": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/argon2/blobs/sha256:a76192a41826619fc399e7f6de5e6cb1c8a5fbe6bea4f2c1554daa830fa0e296",
          "sha256": "a76192a41826619fc399e7f6de5e6cb1c8a5fbe6bea4f2c1554daa830fa0e296"
        },
        "high_sierra": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/argon2/blobs/sha256:830016982e60870f50b3f6fc9a215d8cc4bda6061595f4883f7c11ab19ecba39",
          "sha256": "830016982e60870f50b3f6fc9a215d8cc4bda6061595f4883f7c11ab19ecba39"
        },
        "sierra": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/argon2/blobs/sha256:21889ac6ed40c792f1b372b5aa0d6b3be1be86577a4c1b06b08569124d2d0da2",
          "sha256": "21889ac6ed40c792f1b372b5aa0d6b3be1be86577a4c1b06b08569124d2d0da2"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/argon2/blobs/sha256:58b4014f120e135a991f1023f210366ef3e9175a37a05a3fffb06a9fe3c23ff4",
          "sha256": "58b4014f120e135a991f1023f210366ef3e9175a37a05a3fffb06a9fe3c23ff4"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "2706c66e8def3eeba4d9bf1adf66221c8ad70701",
  "ruby_source_path": "Formula/argon2.rb",
  "ruby_source_checksum": {
    "sha256": "d881c610508bc4f841753c5008f90b7a46d0ae6d1753f933252842645a7067f2"
  },
  "date_added": "2016-01-14T13:12:18+01:00",
  "readme": "# Argon2\n\n[![Build Status](https://travis-ci.org/P-H-C/phc-winner-argon2.svg?branch=master)](https://travis-ci.org/P-H-C/phc-winner-argon2)\n[![Build status](https://ci.appveyor.com/api/projects/status/8nfwuwq55sgfkele?svg=true)](https://ci.appveyor.com/project/P-H-C/phc-winner-argon2)\n[![codecov.io](https://codecov.io/github/P-H-C/phc-winner-argon2/coverage.svg?branch=master)](https://codecov.io/github/P-H-C/phc-winner-argon2?branch=master)\n\nThis is the reference C implementation of Argon2, the password-hashing\nfunction that won the [Password Hashing Competition\n(PHC)](https://password-hashing.net).\n\nArgon2 is a password-hashing function that summarizes the state of the\nart in the design of memory-hard functions and can be used to hash\npasswords for credential storage, key derivation, or other applications.\n\nIt has a simple design aimed at the highest memory filling rate and\neffective use of multiple computing units, while still providing defense\nagainst tradeoff attacks (by exploiting the cache and memory organization\nof the recent processors).\n\nArgon2 has three variants: Argon2i, Argon2d, and Argon2id. Argon2d is faster\nand uses data-depending memory access, which makes it highly resistant\nagainst GPU cracking attacks and suitable for applications with no threats\nfrom side-channel timing attacks (eg. cryptocurrencies). Argon2i instead\nuses data-independent memory access, which is preferred for password\nhashing and password-based key derivation, but it is slower as it makes\nmore passes over the memory to protect from tradeoff attacks. Argon2id is a\nhybrid of Argon2i and Argon2d, using a combination of data-depending and\ndata-independent memory accesses, which gives some of Argon2i's resistance to\nside-channel cache timing attacks and much of Argon2d's resistance to GPU\ncracking attacks.\n\nArgon2i, Argon2d, and Argon2id are parametrized by:\n\n* A **time** cost, which defines the amount of computation realized and\n  therefore the execution time, given in number of iterations\n* A **memory** cost, which defines the memory usage, given in kibibytes\n* A **parallelism** degree, which defines the number of parallel threads\n\nThe [Argon2 document](argon2-specs.pdf) gives detailed specs and design\nrationale.\n\nPlease report bugs as issues on this repository.\n\n## Usage\n\n`make` builds the executable `argon2`, the static library `libargon2.a`,\nand the shared library `libargon2.so` (or on macOS, the dynamic library\n`libargon2.dylib` -- make sure to specify the installation prefix when\nyou compile: `make PREFIX=/usr`). Make sure to run `make test` to verify\nthat your build produces valid results. `sudo make install PREFIX=/usr`\ninstalls it to your system.\n\n### Command-line utility\n\n`argon2` is a command-line utility to test specific Argon2 instances\non your system. To show usage instructions, run\n`./argon2 -h` as\n```\nUsage:  ./argon2 [-h] salt [-i|-d|-id] [-t iterations] [-m memory] [-p parallelism] [-l hash length] [-e|-r] [-v (10|13)]\n        Password is read from stdin\nParameters:\n        salt            The salt to use, at least 8 characters\n        -i              Use Argon2i (this is the default)\n        -d              Use Argon2d instead of Argon2i\n        -id             Use Argon2id instead of Argon2i\n        -t N            Sets the number of iterations to N (default = 3)\n        -m N            Sets the memory usage of 2^N KiB (default 12)\n        -p N            Sets parallelism to N threads (default 1)\n        -l N            Sets hash output length to N bytes (default 32)\n        -e              Output only encoded hash\n        -r              Output only the raw bytes of the hash\n        -v (10|13)      Argon2 version (defaults to the most recent version, currently 13)\n        -h              Print argon2 usage\n```\nFor example, to hash \"password\" using \"somesalt\" as a salt and doing 2\niterations, consuming 64 MiB, using four parallel threads and an output hash\nof 24 bytes\n```\n$ echo -n \"password\" | ./argon2 somesalt -t 2 -m 16 -p 4 -l 24\nType:           Argon2i\nIterations:     2\nMemory:         65536 KiB\nParallelism:    4\nHash:           45d7ac72e76f242b20b77b9bf9bf9d5915894e669a24e6c6\nEncoded:        $argon2i$v=19$m=65536,t=2,p=4$c29tZXNhbHQ$RdescudvJCsgt3ub+b+dWRWJTmaaJObG\n0.188 seconds\nVerification ok\n```\n\n### Library\n\n`libargon2` provides an API to both low-level and high-level functions\nfor using Argon2.\n\nThe example program below hashes the string \"password\" with Argon2i\nusing the high-level API and then using the low-level API. While the\nhigh-level API takes the three cost parameters (time, memory, and\nparallelism), the password input buffer, the salt input buffer, and the\noutput buffers, the low-level API takes in these and additional parameters\n, as defined in [`include/argon2.h`](include/argon2.h).\n\nThere are many additional parameters, but we will highlight three of them here.\n\n1. The `secret` parameter, which is used for [keyed hashing](\n   https://en.wikipedia.org/wiki/Hash-based_message_authentication_code).\n   This allows a secret key to be input at hashing time (from some external\n   location) and be folded into the value of the hash. This means that even if\n   your salts and hashes are compromised, an attacker cannot brute-force to find\n   the password without the key.\n\n2. The `ad` parameter, which is used to fold any additional data into the hash\n   value. Functionally, this behaves almost exactly like the `secret` or `salt`\n   parameters; the `ad` parameter is folding into the value of the hash.\n   However, this parameter is used for different data. The `salt` should be a\n   random string stored alongside your password. The `secret` should be a random\n   key only usable at hashing time. The `ad` is for any other data.\n\n3. The `flags` parameter, which determines which memory should be securely\n   erased. This is useful if you want to securely delete the `pwd` or `secret`\n   fields right after they are used. To do this set `flags` to either\n   `ARGON2_FLAG_CLEAR_PASSWORD` or `ARGON2_FLAG_CLEAR_SECRET`. To change how\n   internal memory is cleared, change the global flag\n   `FLAG_clear_internal_memory` (defaults to clearing internal memory).\n\nHere the time cost `t_cost` is set to 2 iterations, the\nmemory cost `m_cost` is set to 2<sup>16</sup> kibibytes (64 mebibytes),\nand parallelism is set to 1 (single-thread).\n\nCompile for example as `gcc test.c libargon2.a -Isrc -o test`, if the program\nbelow is named `test.c` and placed in the project's root directory.\n\n```c\n#include \"argon2.h\"\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n#define HASHLEN 32\n#define SALTLEN 16\n#define PWD \"password\"\n\nint main(void)\n{\n    uint8_t hash1[HASHLEN];\n    uint8_t hash2[HASHLEN];\n\n    uint8_t salt[SALTLEN];\n    memset( salt, 0x00, SALTLEN );\n\n    uint8_t *pwd = (uint8_t *)strdup(PWD);\n    uint32_t pwdlen = strlen((char *)pwd);\n\n    uint32_t t_cost = 2;            // 2-pass computation\n    uint32_t m_cost = (1<<16);      // 64 mebibytes memory usage\n    uint32_t parallelism = 1;       // number of threads and lanes\n\n    // high-level API\n    argon2i_hash_raw(t_cost, m_cost, parallelism, pwd, pwdlen, salt, SALTLEN, hash1, HASHLEN);\n\n    // low-level API\n    argon2_context context = {\n        hash2,  /* output array, at least HASHLEN in size */\n        HASHLEN, /* digest length */\n        pwd, /* password array */\n        pwdlen, /* password length */\n        salt,  /* salt array */\n        SALTLEN, /* salt length */\n        NULL, 0, /* optional secret data */\n        NULL, 0, /* optional associated data */\n        t_cost, m_cost, parallelism, parallelism,\n        ARGON2_VERSION_13, /* algorithm version */\n        NULL, NULL, /* custom memory allocation / deallocation functions */\n        /* by default only internal memory is cleared (pwd is not wiped) */\n        ARGON2_DEFAULT_FLAGS\n    };\n\n    int rc = argon2i_ctx( &context );\n    if(ARGON2_OK != rc) {\n        printf(\"Error: %s\\n\", argon2_error_message(rc));\n        exit(1);\n    }\n    free(pwd);\n\n    for( int i=0; i<HASHLEN; ++i ) printf( \"%02x\", hash1[i] ); printf( \"\\n\" );\n    if (memcmp(hash1, hash2, HASHLEN)) {\n        for( int i=0; i<HASHLEN; ++i ) {\n            printf( \"%02x\", hash2[i] );\n        }\n        printf(\"\\nfail\\n\");\n    }\n    else printf(\"ok\\n\");\n    return 0;\n}\n```\n\nTo use Argon2d instead of Argon2i call `argon2d_hash_raw` instead of\n`argon2i_hash_raw` using the high-level API, and `argon2d` instead of\n`argon2i` using the low-level API. Similarly for Argon2id, call `argon2id_hash_raw`\nand `argon2id`.\n\nTo produce the crypt-like encoding rather than the raw hash, call\n`argon2i_hash_encoded` for Argon2i, `argon2d_hash_encoded` for Argon2d, and\n`argon2id_hash_encoded` for Argon2id\n\nSee [`include/argon2.h`](include/argon2.h) for API details.\n\n*Note: in this example the salt is set to the all-`0x00` string for the\nsake of simplicity, but in your application you should use a random salt.*\n\n\n### Benchmarks\n\n`make bench` creates the executable `bench`, which measures the execution\ntime of various Argon2 instances:\n\n```\n$ ./bench\nArgon2d 1 iterations  1 MiB 1 threads:  5.91 cpb 5.91 Mcycles\nArgon2i 1 iterations  1 MiB 1 threads:  4.64 cpb 4.64 Mcycles\n0.0041 seconds\n\nArgon2d 1 iterations  1 MiB 2 threads:  2.76 cpb 2.76 Mcycles\nArgon2i 1 iterations  1 MiB 2 threads:  2.87 cpb 2.87 Mcycles\n0.0038 seconds\n\nArgon2d 1 iterations  1 MiB 4 threads:  3.25 cpb 3.25 Mcycles\nArgon2i 1 iterations  1 MiB 4 threads:  3.57 cpb 3.57 Mcycles\n0.0048 seconds\n\n(...)\n\nArgon2d 1 iterations  4096 MiB 2 threads:  2.15 cpb 8788.08 Mcycles\nArgon2i 1 iterations  4096 MiB 2 threads:  2.15 cpb 8821.59 Mcycles\n13.0112 seconds\n\nArgon2d 1 iterations  4096 MiB 4 threads:  1.79 cpb 7343.72 Mcycles\nArgon2i 1 iterations  4096 MiB 4 threads:  2.72 cpb 11124.86 Mcycles\n19.3974 seconds\n\n(...)\n```\n\n## Bindings\n\nBindings are available for the following languages (make sure to read\ntheir documentation):\n\n* [Android (Java/Kotlin)](https://github.com/lambdapioneer/argon2kt) by [@lambdapioneer](https://github.com/lambdapioneer)\n* [Dart](https://github.com/tmthecoder/dargon2) by [@tmthecoder](https://github.com/tmthecoder)\n* [Elixir](https://github.com/riverrun/argon2_elixir) by [@riverrun](https://github.com/riverrun)\n* [Erlang](https://github.com/ergenius/eargon2) by [@ergenius](https://github.com/ergenius)\n* [Go](https://github.com/tvdburgt/go-argon2) by [@tvdburgt](https://github.com/tvdburgt)\n* [Haskell](https://hackage.haskell.org/package/argon2) by [@hvr](https://github.com/hvr)\n* [JavaScript (native)](https://github.com/ranisalt/node-argon2), by [@ranisalt](https://github.com/ranisalt)\n* [JavaScript (native)](https://github.com/jdconley/argon2themax), by [@jdconley](https://github.com/jdconley)\n* [JavaScript (ffi)](https://github.com/cjlarose/argon2-ffi), by [@cjlarose](https://github.com/cjlarose)\n* [JavaScript (browser)](https://github.com/antelle/argon2-browser), by [@antelle](https://github.com/antelle)\n* [JVM](https://github.com/phxql/argon2-jvm) by [@phXql](https://github.com/phxql)\n* [JVM (with keyed hashing)](https://github.com/kosprov/jargon2-api) by [@kosprov](https://github.com/kosprov)\n* [Lua (native)](https://github.com/thibaultCha/lua-argon2) by [@thibaultCha](https://github.com/thibaultCha)\n* [Lua (ffi)](https://github.com/thibaultCha/lua-argon2-ffi) by [@thibaultCha](https://github.com/thibaultCha)\n* [OCaml](https://github.com/Khady/ocaml-argon2) by [@Khady](https://github.com/Khady)\n* [Python (native)](https://pypi.python.org/pypi/argon2), by [@flamewow](https://github.com/flamewow)\n* [Python (ffi)](https://pypi.python.org/pypi/argon2_cffi), by [@hynek](https://github.com/hynek)\n* [Python (ffi, with keyed hashing)](https://github.com/thusoy/porridge), by [@thusoy](https://github.com/thusoy)\n* [Python (ffi, with keyed hashing)](https://github.com/ultrahorizon/pyargon2), by [@ultrahorizon](https://github.com/ultrahorizon)\n* [R](https://cran.r-project.org/package=argon2) by [@wrathematics](https://github.com/wrathematics)\n* [Ruby](https://github.com/technion/ruby-argon2) by [@technion](https://github.com/technion)\n* [Rust](https://github.com/quininer/argon2-rs) by [@quininer](https://github.com/quininer)\n* [Rust](https://docs.rs/argonautica/) by [@bcmyers](https://github.com/bcmyers/)\n* [C#/.NET CoreCLR](https://github.com/kmaragon/Konscious.Security.Cryptography) by [@kmaragon](https://github.com/kmaragon)\n* [Perl](https://github.com/Leont/crypt-argon2) by [@leont](https://github.com/Leont)\n* [mruby](https://github.com/Asmod4n/mruby-argon2) by [@Asmod4n](https://github.com/Asmod4n)\n* [Swift](https://github.com/ImKcat/CatCrypto) by [@ImKcat](https://github.com/ImKcat)\n* [Swift](https://github.com/tmthecoder/Argon2Swift) by [@tmthecoder](https://github.com/tmthecoder)\n\n\n## Test suite\n\nThere are two sets of test suites. One is a low level test for the hash\nfunction, the other tests the higher level API. Both of these are built and\nexecuted by running:\n\n`make test`\n\n## Intellectual property\n\nExcept for the components listed below, the Argon2 code in this\nrepository is copyright (c) 2015 Daniel Dinu, Dmitry Khovratovich (main\nauthors), Jean-Philippe Aumasson and Samuel Neves, and dual licensed under the\n[CC0 License](https://creativecommons.org/about/cc0) and the\n[Apache 2.0 License](https://www.apache.org/licenses/LICENSE-2.0). For more info\nsee the LICENSE file.\n\nThe string encoding routines in [`src/encoding.c`](src/encoding.c) are\ncopyright (c) 2015 Thomas Pornin, and under\n[CC0 License](https://creativecommons.org/about/cc0).\n\nThe BLAKE2 code in [`src/blake2/`](src/blake2) is copyright (c) Samuel\nNeves, 2013-2015, and under\n[CC0 License](https://creativecommons.org/about/cc0).\n\nAll licenses are therefore GPL-compatible."
}
