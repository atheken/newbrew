{
  "name": "vaulted",
  "full_name": "vaulted",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Allows the secure storage and execution of environments",
  "license": "MIT",
  "homepage": "https://github.com/miquella/vaulted",
  "versions": {
    "stable": "3.0.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/miquella/vaulted/archive/v3.0.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "ea5183f285930ffa4014d54d4ed80ac8f7aa9afd1114e5fce6e65f2e9ed1af0c"
    },
    "head": {
      "url": "https://github.com/miquella/vaulted.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vaulted/blobs/sha256:43bb79ce25f0da8778ab20ed2bbb322674d256edb638cb00b502eb1dec31dee4",
          "sha256": "43bb79ce25f0da8778ab20ed2bbb322674d256edb638cb00b502eb1dec31dee4"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vaulted/blobs/sha256:af4905ab6698699c3f794645c49052db9bac1a63f025f35ec81f21c057a38faf",
          "sha256": "af4905ab6698699c3f794645c49052db9bac1a63f025f35ec81f21c057a38faf"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vaulted/blobs/sha256:7cdbcf9ca2bf59f73b8dad9d409410bc49c5e682def3025b543d57ec29ab88ac",
          "sha256": "7cdbcf9ca2bf59f73b8dad9d409410bc49c5e682def3025b543d57ec29ab88ac"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vaulted/blobs/sha256:1d176247a329b9986e3d85dc57cc01f1296268c647b7c60b70219adb25847735",
          "sha256": "1d176247a329b9986e3d85dc57cc01f1296268c647b7c60b70219adb25847735"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vaulted/blobs/sha256:bd52afb1a8d91c97a398e247f115fd65fdb77635a8148059bacafc2473ec6fbc",
          "sha256": "bd52afb1a8d91c97a398e247f115fd65fdb77635a8148059bacafc2473ec6fbc"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vaulted/blobs/sha256:6d28ce78d9de727b84a069328160ec719db14789645e6088d67eeab462085722",
          "sha256": "6d28ce78d9de727b84a069328160ec719db14789645e6088d67eeab462085722"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vaulted/blobs/sha256:6e28a27d6d1c24b2cd7d3ca0ff147a8309425dcd1d405861378bd40c191af5d2",
          "sha256": "6e28a27d6d1c24b2cd7d3ca0ff147a8309425dcd1d405861378bd40c191af5d2"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vaulted/blobs/sha256:246a6e46d12ceb79f4406802a72860a4d4e381bf34b8228c10773898b33dbb3e",
          "sha256": "246a6e46d12ceb79f4406802a72860a4d4e381bf34b8228c10773898b33dbb3e"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vaulted/blobs/sha256:24f80eafb9d738391a99724915f07a546ebc822d5e3ab725fc90bfa690cc4ee7",
          "sha256": "24f80eafb9d738391a99724915f07a546ebc822d5e3ab725fc90bfa690cc4ee7"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vaulted/blobs/sha256:3acf911a97ce6aa9aacff3d0e39c70d497e2b2b808a5ebe620301259035988c3",
          "sha256": "3acf911a97ce6aa9aacff3d0e39c70d497e2b2b808a5ebe620301259035988c3"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/vaulted.rb",
  "ruby_source_checksum": {
    "sha256": "4c487554558a437fbf6f8def1c4253ca09b5187a5f7c837b9cd1b51210673085"
  },
  "date_added": "2016-08-22T11:21:07-05:00",
  "readme": "vaulted\n=======\n\nSpawn environments from securely stored secrets.\n\nWith so many secrets floating around in our modern lives, it's a wonder we're\nable to keep track of any of them!\n\n`vaulted` allows you to create vaults of related secrets and then spawn\nsessions with these secrets. Vaults can contain secure environment\nvariables, AWS credentials, or SSH keys (RSA, DSA, & ECDSA).\n\n`vaulted` also attempts to insulate spawned environments from other\nenvironments on the system. Temporary AWS credentials are created for each\nsession as well as a new SSH agent. The SSH agent still allows access keys in\nthe parent environment's SSH agent, but any keys added inside the spawned\nenvironment are only available in the that environment.\n\nInstallation\n------------\n\n### macOS\n\nThe easiest way to install `vaulted` on macOS is through\n[Homebrew](http://brew.sh/).\n\n```sh\nbrew install vaulted\n```\n\n### Linux\n\nIf you already have [Linux Brew](http://linuxbrew.sh/) installed\n\n```sh\nbrew install vaulted\n```\n\nIf you do not use Linux Brew, you will need to [build vaulted manually](#manual).\n\n### Manual\n\nInstallation on other platforms should be simple enough through `go get` as\nlong as you have a proper Go environment setup:\n\n```sh\ngo get -u github.com/miquella/vaulted\n```\n\nDon't forget to add `$GOPATH/bin` to your `$PATH`! You must be running go version\n1.12 or greater.\n\nGetting Started\n---------------\n\n`vaulted` is oriented around vaults of secrets that are used to spawn\nenvironments. To get started, add a new vault:\n\n```sh\nvaulted add my-vault\n```\n\nThis will start an interactive editing mode that will help you create your\nfirst vault. AWS keys, SSH keys, and arbitrary environment variables can be\nadded to the vault. Once you have your vault arranged how you would like, use\n`q` to exit the interactive mode and save the vault to disk.\n\nWhile editing a vault, `Ctrl+C` may be used to discard changes to the\nvault.\n\nNow that your vault has been saved, the list of vaults will reflect your newly\nsaved vault:\n\n```sh\nvaulted ls\n```\n\nAnd you can use `vaulted` to spawn a command in an environment generated from\nthe secrets stored in the vault:\n\n```sh\nvaulted -n my-vault -- aws s3 ls\n```\n\nSometimes it is useful to be able to issue multiple commands that require the\nvault's secrets. In this case, you can spawn an interactive shell:\n\n```sh\nvaulted shell my-vault\n```\n\n_**Warning!** Leaving interactive shells with your credentials loaded can be\ndangerous as you may inadvertently provide credentials to an application you\ndidn't intend!_\n\nFile Locations\n--------------\n\nVaults and cached sessions are stored according to the [XDG Base Directory Specification][xdg].\n\n**Vault** files are stored in:\n\n* `$XDG_DATA_HOME/vaulted/` _(typically `~/.local/share/vaulted/`)_\n* `$XDG_DATA_DIRS/vaulted/` _(typically `/usr/local/share` and `/usr/share`)_\n\nVault files are written to `$XDG_DATA_HOME/vaulted/`. To backup your Vaulted data, all files in\nthis directory should be backed up. Session cache files do not need to be retained.\n\n**Session** cache files are stored in:\n\n* `$XDG_CACHE_HOME/vaulted/` _(typically `~/.cache/vaulted/`)_\n\n[xdg]: https://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html\n\nUsing Vaulted from other software\n---------------------------------\n\nAn `env` subcommand has been included with the intention of supplying machine\nreadable output for integration with shells and shell utilities. Every effort\nhas been made to supply meaningful return codes on failures along with a\ndescription of what has gone wrong. See `vaulted(1)` for details on the return\nvalues to expect and their meanings.\n\nGoing Further\n-------------\n\nWhile `vaulted` supports basic modification methods like copying, editing, and\nremoving, more advanced methods such as JSON-formatted dumping and loading are\nalso available. An environment can even be loaded into a running shell! See\n`vaulted --help` for available commands.\n\nSpawned Environment\n-------------------\n\nIn addition to including secrets stored in the vault, spawned environments also\ninclude environment variables that describe how the session and environment\nwere spawned. See `vaulted-env(1)` and `vaulted-shell(1)` for details.\n\nGUI Password Prompts\n--------------------\n\nGUI-based password prompts can be used by setting the `VAULTED_ASKPASS`\nvariable. See [`vaulted(1)`](doc/vaulted.1.md) for more details."
}
