{
  "name": "dashing",
  "full_name": "dashing",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Generate Dash documentation from HTML files",
  "license": "MIT",
  "homepage": "https://github.com/technosophos/dashing",
  "versions": {
    "stable": "0.4.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/technosophos/dashing/archive/0.4.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "81b21acae83c144f10d9eea05a0b89f0dcdfa694c3760c2a25bd4eab72a2a3b9"
    }
  },
  "revision": 1,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 2,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dashing/blobs/sha256:b6afd8514bfadafabffcf92070f6daf79070d39d0cfa6f246c0baf83720f1632",
          "sha256": "b6afd8514bfadafabffcf92070f6daf79070d39d0cfa6f246c0baf83720f1632"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dashing/blobs/sha256:068ec0d62e2f599509d34a2d366895dce2464eaa9aa1939a553dd1e31c8238d5",
          "sha256": "068ec0d62e2f599509d34a2d366895dce2464eaa9aa1939a553dd1e31c8238d5"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dashing/blobs/sha256:72b9d5ea8aaf171f9a46e099f190a9adf9ad90b6bd90dcdc54eaa922e2c277f9",
          "sha256": "72b9d5ea8aaf171f9a46e099f190a9adf9ad90b6bd90dcdc54eaa922e2c277f9"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dashing/blobs/sha256:304de6dcdcc89d4f94952b0b1d547a6e77abdd355c2825ba3260057c289c26e5",
          "sha256": "304de6dcdcc89d4f94952b0b1d547a6e77abdd355c2825ba3260057c289c26e5"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dashing/blobs/sha256:a0c325204c959b5956248606f6b7fcb4437c6dfa2c75f739d4624fb912ecaa55",
          "sha256": "a0c325204c959b5956248606f6b7fcb4437c6dfa2c75f739d4624fb912ecaa55"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dashing/blobs/sha256:7297bb9c8b50feeda73af51b59acfcac18f9d2beb57738de293146aaca7cd089",
          "sha256": "7297bb9c8b50feeda73af51b59acfcac18f9d2beb57738de293146aaca7cd089"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dashing/blobs/sha256:43702cf1fbdeb449e9205716635cba4c62449e575f9a6ab45eeb4aeb166fdf9a",
          "sha256": "43702cf1fbdeb449e9205716635cba4c62449e575f9a6ab45eeb4aeb166fdf9a"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dashing/blobs/sha256:bbd3a7995a6b5a0a87f4a08a4e4bb52fe75990bdde6b63bea1a9c56c7c144165",
          "sha256": "bbd3a7995a6b5a0a87f4a08a4e4bb52fe75990bdde6b63bea1a9c56c7c144165"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dashing/blobs/sha256:982d82dc58980aa81fadf686557c5c075ddb95b9ef0f8456e7b32b6ed49aa382",
          "sha256": "982d82dc58980aa81fadf686557c5c075ddb95b9ef0f8456e7b32b6ed49aa382"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/dashing.rb",
  "ruby_source_checksum": {
    "sha256": "08842b8ba2b082d1f90e5ae369e270e06c74afbedb5df9449bb3a59ff9ba10bf"
  },
  "date_added": "2018-02-13T15:44:59+01:00",
  "readme": "# Dashing: Generate Dash documentation from HTML\n[![Stability: Maintenance](https://masterminds.github.io/stability/maintenance.svg)](https://masterminds.github.io/stability/maintenance.html)\n\n\nDashing is a general purpose tool for starting with some HTML\ndocumentation and generating Dash documentation.\n\nDashing uses CSS3 selectors to tag an HTML document for import into\nDash. It generates a complete docset for you.\n\nThis supports the following Dash features:\n\n- Index pages\n- Custom icon\n- Table of Contents auto-generation\n\nSee:\nhttps://kapeli.com/docsets\n\n## INSTALL\n\nThere are several ways to install this program.\n\nFor most people, the easiest way is through [Homebrew:](https://brew.sh/)\n\n```\nbrew install dashing\n```\n\nOr [MacPorts:](https://www.macports.org/)\n\n```\nsudo port install dashing\n```\n\nPrebuilt OSX 64-bit binaries are also available here:\nhttps://github.com/technosophos/dashing/releases\n\nIf you have Go 1.4 or later installed, simply run:\n\n```\ngo get -u github.com/technosophos/dashing\n```\n\nDashing will now be located at `$GOPATH/bin/dashing`.\n\nA prebuilt binary is also available as a GitHub release.\n\n## USAGE\n\nTo get started, `cd` to the directory that you want to generate\ndocumentation inside.\n\n```\n$ cd mydocs\n$ dashing create\n# Now you can edit dashing.json. See below.\n$ dashing build mydocs\n```\n\nYou will now have a directory called `mydocs.docset` that contains all\nthe documentation you need for Dash.\n\nFor more, run `dashing help`.\n\n## dashing.json Format\n\nThe basic Dashing format looks like this:\n\n```json\n{\n    \"name\": \"Dashing\",\n    \"package\": \"dashing\",\n    \"index\":\"index.html\",\n    \"icon32x32\": \"icon.png\",\n    \"externalURL\": \"https://github.com/technosophos/dashing\",\n    \"selectors\": {\n        \"dt a\": \"Command\",\n        \"title\": \"Package\"\n    },\n    \"ignore\": [\n        \"ABOUT\"\n    ]\n}\n```\n\n- name: Human-oriented name of the package\n- package: Computer-oriented name of the package (one word recommended)\n- index: Default index file in the existing docs\n- icon32x32: a 32x32 pixel PNG icon\n- externalURL: the base URL of the docs\n- selectors: a map of selectors. There is a simple format and\n  a more advanced format (see below for details).\n- ignore: a list of matches to be ignored (see below)\n\nDashing uses CSS 3 selectors to map patterns in a document to Dash\nsections. You tell Dashing which patterns in HTML map to which Dash data\ntype. The list of Dash data types can be found here: https://kapeli.com/docsets#supportedentrytypes.\n\n```json\n{\n  \"selectors\": {\n    \"h1 a\": \"Package\",\n    \"h2.classdef a\": \"Class\",\n  }\n}\n```\n\nThe above will look for `h1 a` combinations, and treat those as package\ndefinitions, and `h2 class=\"classdef\" a` combinations and treat those as\nClass definitions.\n\n## Ignoring Sections You Don't Care About\n\nOn occasion, you'll have to manually ignore some matched text bits. To\ndo that, you can use the `ignores` directive in the JSON file:\n\n\n```json\n{\n  \"selectors\": {\n    \"h1 a\": \"Package\",\n    \"h2.classdef a\": \"Class\",\n  },\n  \"ignore\": [\"DESCRIPTION\", \"MORE\"]\n}\n```\n\nThe above will ignore anything whose text matches the exact text \"DESCRIPTION\"\nor \"MORE\", even if the selectors match.\n\n## Other Mappers/Filters on Selectors\n\nInstead of using a simple mapping of selector to type, you have the\noption to map/filter the selected results.\n\nThe format for this extended type of `selectors` looks like this:\n\n```json\n{\n    \"name\": \"BusyBox\",\n    \"package\":\"busybox\",\n    \"index\":\"BusyBox.html\",\n    \"icon32x32\":\"busybox1.png\",\n    \"selectors\": {\n        \"dt a\": \"Command\",\n        \"title\": {\n          \"type\":\"Package\",\n          \"regexp\": \" - The Swiss Army Knife of Embedded Linux\",\n          \"replacement\": \"\",\n          \"matchpath\": \"doc/.*\\\\.html\"\n        }\n    },\n    \"ignore\": [\n        \"ABOUT\"\n    ]\n}\n```\n\nThe format of the selector value is:\n\n```json\n\"css selector\": {\n      \"requiretext\": \"require that the text matches a regexp. If not, this node is not considered as selected\",\n      \"type\": \"Dash data type\",\n      \"attr\": \"Use the value of the specified attribute instead of html node text as the basis for transformation\",\n      \"regexp\": \"PCRE regular expression (no need to enclose in //)\",\n      \"replacement\": \"Replacement text for each match of 'regexp'\",\n      \"matchpath\": \"Only files matching this regular expression will be parsed. Will match all files if not set.\"\n}\n```\n\nAnd you can have multiple transformations specified for the same css selector:\n\n```json\n\"css selector\": [\n    {\n        \"requiretext\": \"...\",\n        \"type\": \"...\"\n    },\n    {\n        \"requiretext\": \"...\",\n        \"type\": \"...\"\n    }\n]\n```\n\nThe above allows you to fine tweak nodes selected via css selectors using\ntheir text contents.\n\nFull documentation on the regular expression format can be found here:\nhttp://golang.org/pkg/regexp/syntax/\n\nDocumentation on the format for `replacement` can be found here:\nhttp://golang.org/pkg/regexp/#Regexp.ReplaceAllString"
}
