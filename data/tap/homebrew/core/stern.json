{
  "name": "stern",
  "full_name": "stern",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Tail multiple Kubernetes pods & their containers",
  "license": "Apache-2.0",
  "homepage": "https://github.com/stern/stern",
  "versions": {
    "stable": "1.25.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/stern/stern/archive/v1.25.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "9742fa8d9c4b75bf0b261c42996d26c0f706400c043f3f83d159238326c717ea"
    },
    "head": {
      "url": "https://github.com/stern/stern.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/stern/blobs/sha256:5d5ba050de4ea6e10111f5c8a25b9097d5eac58d3cdeb989b05332511878fe19",
          "sha256": "5d5ba050de4ea6e10111f5c8a25b9097d5eac58d3cdeb989b05332511878fe19"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/stern/blobs/sha256:d1bbb023fffc3bcac63826e86c983bf81e1243c5d2f336602c6c202fbda7dec6",
          "sha256": "d1bbb023fffc3bcac63826e86c983bf81e1243c5d2f336602c6c202fbda7dec6"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/stern/blobs/sha256:7de5023ab4f241c2736fe0dbe898d682724d4f599f59412ca589ec0a3b91e86e",
          "sha256": "7de5023ab4f241c2736fe0dbe898d682724d4f599f59412ca589ec0a3b91e86e"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/stern/blobs/sha256:b310aca298169454b74d492069e3669034def0eda58d5bf1e8dbcf2263bb3736",
          "sha256": "b310aca298169454b74d492069e3669034def0eda58d5bf1e8dbcf2263bb3736"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/stern/blobs/sha256:e7613bf2a508febed107928edeefe78e5ab9fde666ccb5c974065348f9228dea",
          "sha256": "e7613bf2a508febed107928edeefe78e5ab9fde666ccb5c974065348f9228dea"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/stern/blobs/sha256:6daeaf2ca920f987afbdfab2af6354704593a974e11b7b869c3559afc714e198",
          "sha256": "6daeaf2ca920f987afbdfab2af6354704593a974e11b7b869c3559afc714e198"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/stern/blobs/sha256:e1f91547ac37e1567e8d4bd10150878295dd96f4efcf350211ffb0e2a3d170c4",
          "sha256": "e1f91547ac37e1567e8d4bd10150878295dd96f4efcf350211ffb0e2a3d170c4"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/stern.rb",
  "ruby_source_checksum": {
    "sha256": "d8454f5faea5eeec177d098e6def23cc2142095c6e9c7ae5cb51c8ea8062f564"
  },
  "date_added": "2016-11-20T10:38:01+00:00",
  "readme": "[![Build](https://github.com/stern/stern/workflows/CI/badge.svg)](https://github.com/stern/stern/actions?query=workflow%3ACI+branch%3Amaster)\n# stern\n\n*Fork of discontinued [wercker/stern](https://github.com/wercker/stern)*\n\nStern allows you to `tail` multiple pods on Kubernetes and multiple containers\nwithin the pod. Each result is color coded for quicker debugging.\n\nThe query is a regular expression or a Kubernetes resource in the form\n `<resource>/<name>` so the pod name can easily be filtered and\nyou don't need to specify the exact id (for instance omitting the deployment\nid). If a pod is deleted it gets removed from tail and if a new pod is added it\nautomatically gets tailed.\n\nWhen a pod contains multiple containers Stern can tail all of them too without\nhaving to do this manually for each one. Simply specify the `container` flag to\nlimit what containers to show. By default all containers are listened to.\n\n## Installation\n\n### Download binary\n\nDownload a [binary release](https://github.com/stern/stern/releases)\n\n### Build from source\n\n```\ngo install github.com/stern/stern@latest\n```\n\n### asdf (Linux/macOS)\n\nIf you use [asdf](https://asdf-vm.com/), you can install like this:\n```\nasdf plugin-add stern\nasdf install stern latest\n```\n\n### Homebrew (Linux/macOS)\n\nIf you use [Homebrew](https://brew.sh), you can install like this:\n```\nbrew install stern\n```\n\n### Krew (Linux/macOS/Windows)\n\nIf you use [Krew](https://krew.sigs.k8s.io/) which is the package manager for kubectl plugins, you can install like this:\n```\nkubectl krew install stern\n```\n\n## Usage\n\n```\nstern pod-query [flags]\n```\n\nThe `pod` query is a regular expression or a Kubernetes resource in the form `<resource>/<name>`.\n\nThe query is a regular expression when it is not a Kubernetes resource,\nso you could provide `\"web-\\w\"` to tail `web-backend` and `web-frontend` pods but not `web-123`.\n\nWhen the query is in the form `<resource>/<name>` (exact match), you can select all pods belonging\nto the specified Kubernetes resource, such as `deployment/nginx`.\nSupported Kubernetes resources are `pod`, `replicationcontroller`, `service`, `daemonset`, `deployment`,\n`replicaset`, `statefulset` and `job`.\n\n### cli flags\n\n<!-- auto generated cli flags begin --->\n flag                        | default                       | purpose\n-----------------------------|-------------------------------|---------\n `--all-namespaces`, `-A`    | `false`                       | If present, tail across all namespaces. A specific namespace is ignored even if specified with --namespace.\n `--color`                   | `auto`                        | Force set color output. 'auto':  colorize if tty attached, 'always': always colorize, 'never': never colorize.\n `--completion`              |                               | Output stern command-line completion code for the specified shell. Can be 'bash', 'zsh' or 'fish'.\n `--config`                  | `~/.config/stern/config.yaml` | Path to the stern config file\n `--container`, `-c`         | `.*`                          | Container name when multiple containers in pod. (regular expression)\n `--container-state`         | `all`                         | Tail containers with state in running, waiting, terminated, or all. 'all' matches all container states. To specify multiple states, repeat this or set comma-separated value.\n `--context`                 |                               | Kubernetes context to use. Default to current context configured in kubeconfig.\n `--ephemeral-containers`    | `true`                        | Include or exclude ephemeral containers.\n `--exclude`, `-e`           | `[]`                          | Log lines to exclude. (regular expression)\n `--exclude-container`, `-E` | `[]`                          | Container name to exclude when multiple containers in pod. (regular expression)\n `--exclude-pod`             | `[]`                          | Pod name to exclude. (regular expression)\n `--field-selector`          |                               | Selector (field query) to filter on. If present, default to \".*\" for the pod-query.\n `--include`, `-i`           | `[]`                          | Log lines to include. (regular expression)\n `--init-containers`         | `true`                        | Include or exclude init containers.\n `--kubeconfig`              |                               | Path to kubeconfig file to use. Default to KUBECONFIG variable then ~/.kube/config path.\n `--max-log-requests`        | `-1`                          | Maximum number of concurrent logs to request. Defaults to 50, but 5 when specifying --no-follow\n `--namespace`, `-n`         |                               | Kubernetes namespace to use. Default to namespace configured in kubernetes context. To specify multiple namespaces, repeat this or set comma-separated value.\n `--no-follow`               | `false`                       | Exit when all logs have been shown.\n `--node`                    |                               | Node name to filter on.\n `--only-log-lines`          | `false`                       | Print only log lines\n `--output`, `-o`            | `default`                     | Specify predefined template. Currently support: [default, raw, json, extjson, ppextjson]\n `--prompt`, `-p`            | `false`                       | Toggle interactive prompt for selecting 'app.kubernetes.io/instance' label values.\n `--selector`, `-l`          |                               | Selector (label query) to filter on. If present, default to \".*\" for the pod-query.\n `--since`, `-s`             | `48h0m0s`                     | Return logs newer than a relative duration like 5s, 2m, or 3h.\n `--tail`                    | `-1`                          | The number of lines from the end of the logs to show. Defaults to -1, showing all logs.\n `--template`                |                               | Template to use for log lines, leave empty to use --output flag.\n `--template-file`, `-T`     |                               | Path to template to use for log lines, leave empty to use --output flag. It overrides --template option.\n `--timestamps`, `-t`        |                               | Print timestamps with the specified format. One of 'default' or 'short'. If specified but without value, 'default' is used.\n `--timezone`                | `Local`                       | Set timestamps to specific timezone.\n `--verbosity`               | `0`                           | Number of the log level verbosity\n `--version`, `-v`           | `false`                       | Print the version and exit.\n<!-- auto generated cli flags end --->\n\nSee `stern --help` for details\n\nStern will use the `$KUBECONFIG` environment variable if set. If both the\nenvironment variable and `--kubeconfig` flag are passed the cli flag will be\nused.\n\n### config file\n\nYou can use the config file to change the default values of stern options. The default config file path is `~/.config/stern/config.yaml`. \n\n```yaml\n# <flag name>: <value>\ntail: 10\nmax-log-requests: 999\ntimestamps: short\n```\n\nYou can change the config file path with `--config` flag or `STERNCONFIG` environment variable.\n\n### templates\n\nstern supports outputting custom log messages.  There are a few predefined\ntemplates which you can use by specifying the `--output` flag:\n\n| output    | description                                                                                           |\n|-----------|-------------------------------------------------------------------------------------------------------|\n| `default` | Displays the namespace, pod and container, and decorates it with color depending on --color           |\n| `raw`     | Only outputs the log message itself, useful when your logs are json and you want to pipe them to `jq` |\n| `json`    | Marshals the log struct to json. Useful for programmatic purposes                                     |\n\nIt accepts a custom template through the `--template` flag, which will be\ncompiled to a Go template and then used for every log message. This Go template\nwill receive the following struct:\n\n| property        | type   | description                                 |\n|-----------------|--------|---------------------------------------------|\n| `Message`       | string | The log message itself                      |\n| `NodeName`      | string | The node name where the pod is scheduled on |\n| `Namespace`     | string | The namespace of the pod                    |\n| `PodName`       | string | The name of the pod                         |\n| `ContainerName` | string | The name of the container                   |\n\nThe following functions are available within the template (besides the [builtin\nfunctions](https://golang.org/pkg/text/template/#hdr-Functions)):\n\n| func            | arguments             | description                                                                       |\n|-----------------|-----------------------|-----------------------------------------------------------------------------------|\n| `json`          | `object`              | Marshal the object and output it as a json text                                   |\n| `color`         | `color.Color, string` | Wrap the text in color (.ContainerColor and .PodColor provided)                   |\n| `parseJSON`     | `string`              | Parse string as JSON                                                              |\n| `tryParseJSON`  | `string`              | Attempt to parse string as JSON, return nil on failure                             |\n| `extractJSONParts`    | `string, ...string` | Parse string as JSON and concatenate the given keys.                          |\n| `tryExtractJSONParts` | `string, ...string` | Attempt to parse string as JSON and concatenate the given keys. , return text on failure |\n| `extjson`       | `string`              | Parse the object as json and output colorized json                                |\n| `ppextjson`     | `string`              | Parse the object as json and output pretty-print colorized json                   |\n| `toRFC3339Nano` | `object`              | Parse timestamp (string, int, json.Number) and output it using RFC3339Nano format |\n| `levelColor`    | `string`              | Print log level using appropriate color                                           |\n| `colorBlack`    | `string`              | Print text using black color                                                      |\n| `colorRed`      | `string`              | Print text using red color                                                        |\n| `colorGreen`    | `string`              | Print text using green color                                                      |\n| `colorYellow`   | `string`              | Print text using yellow color                                                     |\n| `colorBlue`     | `string`              | Print text using blue color                                                       |\n| `colorMagenta`  | `string`              | Print text using magenta color                                                    |\n| `colorCyan`     | `string`              | Print text using cyan color                                                       |\n| `colorWhite`    | `string`              | Print text using white color                                                      |\n\n\n### Log level verbosity\n\nYou can configure the log level verbosity by the `--verbosity` flag.\nIt is useful when you want to know how stern interacts with a Kubernetes API server in troubleshooting.\n\nIncreasing the verbosity increases the number of logs. `--verbosity 6` would be a good starting point.\n\n### Max log requests\n\nStern has the maximum number of concurrent logs to request to prevent unintentional load to a cluster.\nThe number can be configured by the `--max-log-requests` flag.\n\nThe behavior and the default are different depending on the presence of the `--no-follow` flag.\n\n| `--no-follow` | default | behavior         |\n|---------------|---------|------------------|\n| specified     | 5       | limits the number of concurrent logs to request |\n| not specified | 50      | exits with an error when if it reaches the concurrent limit |\n\nThe combination of `--max-log-requests 1` and `--no-follow` will be helpful if you want to show logs in order.\n\n## Examples:\n\nTail the `gateway` container running inside of the `envvars` pod on staging\n```\nstern envvars --context staging --container gateway\n```\n\nTail the `staging` namespace excluding logs from `istio-proxy` container\n```\nstern -n staging --exclude-container istio-proxy .\n```\n\nTail the `kube-system` namespace excluding logs from `kube-apiserver` pod\n```\nstern -n kube-system --exclude-pod kube-apiserver .\n```\n\nShow auth activity from 15min ago with timestamps\n```\nstern auth -t --since 15m\n```\n\nShow auth activity with timestamps in specific timezone (default is your local timezone)\n```\nstern auth -t --timezone Asia/Tokyo\n```\n\nFollow the development of `some-new-feature` in minikube\n```\nstern some-new-feature --context minikube\n```\n\nView pods from another namespace\n```\nstern kubernetes-dashboard --namespace kube-system\n```\n\nTail the pods filtered by `run=nginx` label selector across all namespaces\n```\nstern --all-namespaces -l run=nginx\n```\n\nFollow the `frontend` pods in canary release\n```\nstern frontend --selector release=canary\n```\n\nTail the pods on `kind-control-plane` node across all namespaces\n```\nstern --all-namespaces --field-selector spec.nodeName=kind-control-plane\n```\n\nTail the pods created by `deployment/nginx`\n```\nstern deployment/nginx\n```\n\nPipe the log message to jq:\n```\nstern backend -o json | jq .\n```\n\nOnly output the log message itself:\n```\nstern backend -o raw\n```\n\nOutput using a custom template:\n\n```\nstern --template '{{printf \"%s (%s/%s/%s/%s)\\n\" .Message .NodeName .Namespace .PodName .ContainerName}}' backend\n```\n\nOutput using a custom template with stern-provided colors:\n\n```\nstern --template '{{.Message}} ({{.Namespace}}/{{color .PodColor .PodName}}/{{color .ContainerColor .ContainerName}}){{\"\\n\"}}' backend\n```\n\nOutput using a custom template with `parseJSON`:\n\n```\nstern --template='{{.PodName}}/{{.ContainerName}} {{with $d := .Message | parseJSON}}[{{$d.level}}] {{$d.message}}{{end}}{{\"\\n\"}}' backend\n```\n\nOutput using a custom template that tries to parse JSON or fallbacks to raw format:\n\n```\nstern --template='{{.PodName}}/{{.ContainerName}} {{ with $msg := .Message | tryParseJSON }}[{{ colorGreen (toRFC3339Nano $msg.ts) }}] {{ levelColor $msg.level }} ({{ colorCyan $msg.caller }}) {{ $msg.msg }}{{ else }} {{ .Message }} {{ end }}{{\"\\n\"}}' backend\n```\n\nLoad custom template from file:\n\n```\nstern --template-file=~/.stern.tpl backend\n```\n\nTrigger the interactive prompt to select an 'app.kubernetes.io/instance' label value:\n\n```\nstern -p\n```\n\nOutput log lines only:\n\n```\nstern . --only-log-lines\n```\n\n## Completion\n\nStern supports command-line auto completion for bash, zsh or fish. `stern\n--completion=(bash|zsh|fish)` outputs the shell completion code which work by being\nevaluated in `.bashrc`, etc for the specified shell. In addition, Stern\nsupports dynamic completion for `--namespace`, `--context`, `--node`, a resource query\nin the form `<resource>/<name>`, and flags with pre-defined choices.\n\nIf you use bash, stern bash completion code depends on the\n[bash-completion](https://github.com/scop/bash-completion). On the macOS, you\ncan install it with homebrew as follows:\n\n```\n# If running Bash 3.2\nbrew install bash-completion\n\n# or, if running Bash 4.1+\nbrew install bash-completion@2\n```\n\nNote that bash-completion must be sourced before sourcing the stern bash\ncompletion code in `.bashrc`.\n\n```sh\nsource \"$(brew --prefix)/etc/profile.d/bash_completion.sh\"\nsource <(stern --completion=bash)\n```\n\nIf installed via Krew, use:\n\n```bash\nsource <(kubectl stern --completion bash)\ncomplete -o default -F __start_stern kubectl stern\n```\n\nIf you use zsh, just source the stern zsh completion code in `.zshrc`.\n\n```sh\nsource <(stern --completion=zsh)\n```\n\nif you use fish shell, just source the stern fish completion code.\n\n```sh\nstern --completion=fish | source\n\n# To load completions for each session, execute once:\nstern --completion=fish >~/.config/fish/completions/stern.fish\n```\n\n## Running with container\n\nYou can also use stern using a container:\n\n```\ndocker run ghcr.io/stern/stern --version\n```\n\nIf you are using a minikube cluster, you need to run a container as follows:\n\n```\ndocker run --rm -v \"$HOME/.minikube:$HOME/.minikube\" -v \"$HOME/.kube:/$HOME/.kube\" -e KUBECONFIG=\"$HOME/.kube/config\" ghcr.io/stern/stern .\n```\n\nYou can find image tags in https://github.com/orgs/stern/packages/container/package/stern.\n\n## Running in Kubernetes Pods\n\nIf you want to use stern in Kubernetes Pods, you need to create the following ClusterRole and bind it to ServiceAccount.\n\n```yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: stern\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\", \"pods/log\"]\n  verbs: [\"get\", \"watch\", \"list\"]\n```\n\n## Contributing to this repository\n\nPlease see [CONTRIBUTING](CONTRIBUTING.md) for details."
}
