{
  "name": "fselect",
  "full_name": "fselect",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Find files with SQL-like queries",
  "license": "Apache-2.0 or MIT",
  "homepage": "https://github.com/jhspetersson/fselect",
  "versions": {
    "stable": "0.8.4",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/jhspetersson/fselect/archive/0.8.4.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "db720310ff265012f283f9fdfb4ac99188bb4a3cbfe5550171c7e2ab55a36420"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fselect/blobs/sha256:de733f375d9bc4102ae9cc5df84b687a71f0bb1906ab7509ac0f0c94fcabe719",
          "sha256": "de733f375d9bc4102ae9cc5df84b687a71f0bb1906ab7509ac0f0c94fcabe719"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fselect/blobs/sha256:ce1fccb27a86677f00d118ca3f3a571495c57613aa35992576336f2dbbbc6a50",
          "sha256": "ce1fccb27a86677f00d118ca3f3a571495c57613aa35992576336f2dbbbc6a50"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fselect/blobs/sha256:bd1061f80d85c8e083b77b290fcde9b7b5cfc94a8b38ffd8a657cdb3f3c35c38",
          "sha256": "bd1061f80d85c8e083b77b290fcde9b7b5cfc94a8b38ffd8a657cdb3f3c35c38"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fselect/blobs/sha256:e1585c19d310ec08fa643b2e18d674044cb64968affd22b0fc1fd1f0467408a3",
          "sha256": "e1585c19d310ec08fa643b2e18d674044cb64968affd22b0fc1fd1f0467408a3"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fselect/blobs/sha256:061426ee1e45f67667c47d3ae29ecbb5c132babec1e7588f8e8c0eaa8bcaf879",
          "sha256": "061426ee1e45f67667c47d3ae29ecbb5c132babec1e7588f8e8c0eaa8bcaf879"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fselect/blobs/sha256:d45dc50de51c3da6a21eeba921290cfdba1771dc6e4d54e8b618cb952a1494e4",
          "sha256": "d45dc50de51c3da6a21eeba921290cfdba1771dc6e4d54e8b618cb952a1494e4"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fselect/blobs/sha256:55c906233ccf466b84826bb6d0f83dd08d5d721e305ddb9980c3648a0487d381",
          "sha256": "55c906233ccf466b84826bb6d0f83dd08d5d721e305ddb9980c3648a0487d381"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/fselect.rb",
  "ruby_source_checksum": {
    "sha256": "a8cdc3468f4f017cb0c71b07e74cda4b205bd91c08832b6eb6526b7329484f5e"
  },
  "date_added": "2018-03-12T14:29:56+01:00",
  "readme": "# fselect\nFind files with SQL-like queries\n\n[![Crates.io](https://img.shields.io/crates/v/fselect.svg)](https://crates.io/crates/fselect)\n[![build](https://github.com/jhspetersson/fselect/actions/workflows/rust.yml/badge.svg)](https://github.com/jhspetersson/fselect/actions/workflows/rust.yml)\n\n### Why use fselect?\n\nWhile it doesn't tend to fully replace traditional `find` and `ls`, **fselect** has these nice features:\n\n* SQL-like (not real SQL, but highly relaxed!) grammar easily understandable by humans\n* complex queries\n* aggregate, statistics, date, and other functions\n* search within archives\n* `.gitignore`, `.hgignore`, and `.dockerignore` support (experimental)\n* search by width and height of images, EXIF metadata\n* search by MP3 info\n* search by extended file attributes\n* search by file hashes\n* search by MIME type\n* shortcuts to common file types\n* interactive mode\n* various output formatting (CSV, JSON, and others)\n\nMore is under way!\n\n### Installation\n\n#### Latest release from source\n\n* Install [Rust with Cargo](https://www.rust-lang.org/en-US/install.html) and its dependencies to build a binary\n* Run `cargo install fselect`\n\n#### Arch Linux\n\n[AUR package](https://aur.archlinux.org/packages/fselect/), thanks to [@asm0dey](https://github.com/asm0dey)\n\n#### NixOS\n\n[`fselect` in `nixpkgs`](https://github.com/filalex77/nixpkgs/blob/1eced92263395896c10cea69e5f60e8be5f43aeb/pkgs/tools/misc/fselect/default.nix), thanks to [@filalex77](https://github.com/filalex77)\n\n#### Other Linux\n\n[Static build with musl](https://github.com/jhspetersson/fselect/releases/download/0.8.4/fselect-x86_64-linux-musl.gz).\n\n#### Windows 64bit\n\nA statically precompiled [binary](https://github.com/jhspetersson/fselect/releases/download/0.8.4/fselect-x86_64-win.zip) is available at Github downloads.\n\n#### Windows via winget\n\n* Install [winget](https://github.com/microsoft/winget-cli)\n* Run `winget install -e --id fselect.fselect`\n\n#### Windows via Chocolatey\n\n* Install [Chocolatey](https://chocolatey.org/install)\n* Run `choco install fselect`\n\n#### Windows via Scoop\n\n* Install [Scoop](https://scoop.sh)\n* Run `scoop install fselect`\n\n#### Mac via Homebrew\n\n* Install [brew](https://brew.sh)\n* Run `brew install fselect`\n\n#### Mac via MacPorts\n\n* Install [MacPorts](https://www.macports.org)\n* Run:\n  ```\n  sudo port selfupdate\n  sudo port install fselect\n  ```\n\n### Usage\n\n    fselect [ARGS] COLUMN[, COLUMN...] [from ROOT[, ROOT...]] [where EXPR] [group by COLUMNS] [order by COLUMNS] [limit N] [into FORMAT]\n\n### Interactive mode\n\n    fselect -i\n\n### Documentation\n\n[More detailed description. Look at examples first.](docs/usage.md)\n\n### Examples\n\nFind temporary or config files (full path and size):\n\n    fselect size, path from /home/user where name = '*.cfg' or name = '*.tmp'\n    \nWindows users may omit the quotes:\n\n    fselect size, path from C:\\Users\\user where name = *.cfg or name = *.tmp\n\nOr put all the arguments into the quotes like this:\n\n    fselect \"name from /home/user/tmp where size > 0\"\n\nFind files (just names) with any content (size > 0):\n\n    fselect name from /home/user/tmp where size gt 0\n\nSpecify file size, get absolute path, and add it to the results:\n\n    cd /home/user\n    fselect size, abspath from ./tmp where size gt 2g\n    fselect fsize, abspath from ./tmp where size = 5m\n    fselect hsize, abspath from ./tmp where size lt 8k\n    \nMore complex query:\n\n    fselect \"name from /tmp where (name = *.tmp and size = 0) or (name = *.cfg and size > 1000000)\"\n    \nAggregate functions (you can use curly braces if you want, and even combine them with the regular parentheses):\n\n    fselect \"MIN(size), MAX{size}, AVG(size), SUM{size}, COUNT(*) from /home/user/Downloads\"\n    \nFormatting functions:\n\n    fselect \"LOWER(name), UPPER(name), LENGTH(name), YEAR(modified) from /home/user/Downloads\"\n    \nGet the year of an oldest file:\n\n    fselect \"MIN(YEAR(modified)) from /home/user\"\n    \nUse single quotes if you need to address files with spaces:\n\n    fselect \"path from '/home/user/Misc stuff' where name != 'Some file'\"\n    \nRegular expressions of [Rust flavor](https://docs.rs/regex/1.1.0/regex/#syntax) are supported:\n\n    fselect name from /home/user where path =~ '.*Rust.*'\n    \nNegate regular expressions:\n\n    fselect \"name from . where path !=~ '^\\./config'\"\n    \nSimple globs expand automatically and work with `=` and `!=` operators:\n\n    fselect name from /home/user where path = '*Rust*'\n    \nClassic LIKE:\n\n    fselect \"path from /home/user where name like '%report-2018-__-__???'\"\n    \nExact match operators to search with regexps disabled:\n\n    fselect \"path from /home/user where name === 'some_*_weird_*_name'\"\n    \nFind files by date:\n\n    fselect path from /home/user where created = 2017-05-01\n    fselect path from /home/user where modified = today\n    fselect path from /home/user where accessed = yesterday\n    fselect \"path from /home/user where modified = 'apr 1'\"\n    fselect \"path from /home/user where modified = 'last fri'\"\n    \nBe more specific to match all files created at interval between 3PM and 4PM:\n\n    fselect path from /home/user where created = '2017-05-01 15'\n    \nAnd even more specific:\n\n    fselect path from /home/user where created = '2017-05-01 15:10'\n    fselect path from /home/user where created = '2017-05-01 15:10:30'\n    \nDate and time intervals possible (find everything updated since May 1st):\n\n    fselect path from /home/user where modified gte 2017-05-01\n    \nDefault is current directory:\n\n    fselect path, size where name = '*.jpg'\n    \nSearch within multiple locations:\n\n    fselect path from /home/user/oldstuff, /home/user/newstuff where name = '*.jpg'\n    \nWith minimum and/or maximum depth specified (`depth` is a synonym for `maxdepth`):\n\n    fselect path from /home/user/oldstuff depth 5 where name = '*.jpg'\n    fselect path from /home/user/oldstuff mindepth 2 maxdepth 5, /home/user/newstuff depth 10 where name = '*.jpg'\n\nOptionally follow symlinks:\n\n    fselect path, size from /home/user symlinks where name = '*.jpg'\n    \nSearch within archives (currently only zip-archives are supported):\n\n    fselect path, size from /home/user archives where name = '*.jpg'\n    \nOr in combination:\n\n    fselect size, path from /home/user depth 5 archives symlinks where name = '*.jpg' limit 100\n\nEnable `.gitignore` or `.hgignore` support:\n\n    fselect size, path from /home/user/projects gitignore where name = '*.cpp'\n    fselect size, path from /home/user/projects hgignore where name = '*.py'        \n    \nSearch by image dimensions:\n\n    fselect CONCAT(width, 'x', height), path from /home/user/photos where width gte 2000 or height gte 2000\n    \nFind square images:\n    \n    fselect path from /home/user/Photos where width = height\n\nFind images with a known name part but unknown extension:\n    \n    fselect path from /home/user/projects where name = \"*RDS*\" and width gte 1\n\nFind old-school rap MP3 files:\n\n    fselect duration, path from /home/user/music where genre = Rap and bitrate = 320 and mp3_year lt 2000  \n    \nShortcuts to common file extensions:\n\n    fselect path from /home/user where is_archive = true\n    fselect path, mime from /home/user where is_audio = 1\n    fselect path, mime from /home/user where is_book != false\n\nEven simpler way of using boolean columns:\n\n    fselect path from /home/user where is_doc\n    fselect path from /home/user where is_image\n    fselect path from /home/user where is_video\n    \nFind files with dangerous permissions:\n    \n    fselect mode, path from /home/user where other_write or other_exec\n    fselect mode, path from /home/user where other_all\n    \nSimple glob-like expressions or even regular expressions on file mode are possible:\n    \n    fselect mode, path from /home/user where mode = '*rwx'\n    fselect mode, path from /home/user where mode =~ '.*rwx$'\n    \nFind files by owner's uid or gid:\n\n    fselect uid, gid, path from /home/user where uid != 1000 or gid != 1000\n    \nOr by owner's or group's name:\n\n    fselect user, group, path from /home/user where user = mike or group = mike\n\nFind special files:\n\n    fselect name from /usr/bin where suid\n    fselect path from /tmp where is_pipe\n    fselect path from /tmp where is_socket\n    \nFind files with xattrs, check if particular xattr exists, or get its value:\n\n    fselect \"path, has_xattrs, has_xattr(user.test), xattr(user.test) from /home/user\"\n    \nInclude arbitrary text as columns:\n\n    fselect \"name, ' has size of ', size, ' bytes'\"\n\nGroup results:\n\n    fselect \"ext, count(*) from /tmp group by ext\"            \n\nOrder results:\n\n    fselect path from /tmp order by size desc, name\n    fselect modified, fsize, path from ~ order by 1 desc, 3\n    \nFinally limit the results:\n\n    fselect name from /home/user/samples limit 5 \n    \nFormat output:\n\n    fselect size, path from /home/user limit 5 into json\n    fselect size, path from /home/user limit 5 into csv\n    fselect size, path from /home/user limit 5 into html\n\n### License\n\nMIT/Apache-2.0\n\n---\n\nSupported by [JetBrains IDEA](https://jb.gg/OpenSourceSupport) open source license"
}
