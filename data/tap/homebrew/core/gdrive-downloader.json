{
  "name": "gdrive-downloader",
  "full_name": "gdrive-downloader",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Download a gdrive folder or file easily, shell ftw",
  "license": "Unlicense",
  "homepage": "https://github.com/Akianonymus/gdrive-downloader",
  "versions": {
    "stable": "1.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/Akianonymus/gdrive-downloader/archive/refs/tags/v1.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "aa1bf1a0a2cd6cc714292b2e83cf38fa37b99aac8f9d80ee92d619f156ddf4ba"
    },
    "head": {
      "url": "https://github.com/Akianonymus/gdrive-downloader.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gdrive-downloader/blobs/sha256:d9067c98ce2b46c0ee6af08b9c670487f150852b114b4bee2885f9812522a14d",
          "sha256": "d9067c98ce2b46c0ee6af08b9c670487f150852b114b4bee2885f9812522a14d"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/gdrive-downloader.rb",
  "ruby_source_checksum": {
    "sha256": "88feb66451d3e8845719a366fff8369eeef110a3197fac1b732680c7e8fdb298"
  },
  "date_added": "2022-09-18T19:49:45+00:00",
  "readme": "<h1 align=\"center\">Google drive downloader</h1>\n<p align=\"center\">\n<a href=\"https://github.com/Akianonymus/gdrive-downloader/stargazers\"><img src=\"https://img.shields.io/github/stars/Akianonymus/gdrive-downloader.svg?color=blueviolet&style=for-the-badge\" alt=\"Stars\"></a>\n</p>\n<p align=\"center\">\n<a href=\"https://github.com/Akianonymus/gdrive-downloader/actions\"><img alt=\"Github Action Checks\" src=\"https://img.shields.io/github/actions/workflow/status/Akianonymus/gdrive-downloader/.github/workflows/main.yml?branch=master&label=CI%20Checks&style=for-the-badge\"></a>\n</p>\n<p align=\"center\">\n<a href=\"https://github.com/Akianonymus/gdrive-downloader/blob/master/LICENSE\"><img src=\"https://img.shields.io/github/license/Akianonymus/gdrive-downloader.svg?style=for-the-badge\" alt=\"License\"></a>\n</p>\n\n> gdrive-downloader is a collection of shell scripts runnable on all POSIX compatible shells ( sh / ksh / dash / bash / zsh / etc ).\n>\n> It can be used to to download files or folders from google gdrive.\n\n- Minimal\n- Authentication support ( not required for public files/folders ).\n- Download gdrive files and folders\n  - Download subfolders\n- Resume Interrupted downloads\n- Parallel downloading\n- Pretty logging\n- Easy to install and update\n  - Self update\n  - [Auto update](#updation)\n  - Can be per-user and invoked per-shell, hence no root access required or global install.\n\n## Table of Contents\n\n- [Compatibility](#compatibility)\n  - [Linux or MacOS](#linux-or-macos)\n  - [Android](#android)\n  - [iOS](#ios)\n  - [Windows](#windows)\n- [Installing and Updating](#installing-and-updating)\n  - [Native Dependencies](#native-dependencies)\n  - [Installation](#installation)\n    - [Basic Method](#basic-method)\n    - [Advanced Method](#advanced-method)\n    - [Migrate from old version](#migrate-from-old-version)\n  - [Updation](#updation)\n- [Usage](#usage)\n  - [Download Script Custom Flags](#download-script-custom-flags)\n  - [Authentication](#authentication)\n  - [Progress Bar](#progress-bar)\n  - [Multiple Inputs](#multiple-inputs)\n  - [Resuming Interrupted Downloads](#resuming-interrupted-downloads)\n- [Uninstall](#Uninstall)\n- [How it works](#how-it-works)\n- [Reporting Issues](#reporting-issues)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Compatibility\n\nAs this is a collection of shell scripts, there aren't many dependencies. See [Native Dependencies](#native-dependencies) after this section for explicitly required program list.\n\n### Linux or MacOS\n\nFor Linux or MacOS, you hopefully don't need to configure anything extra, it should work by default.\n\n### Android\n\nInstall [Termux](https://wiki.termux.com/wiki/Main_Page).\n\nThen, `pkg install curl` and done.\n\nIt's fully tested for all usecases of this script.\n\n### iOS\n\nInstall [iSH](https://ish.app/)\n\nWhile it has not been officially tested, but should work given the description of the app. Report if you got it working by creating an issue.\n\n### Windows\n\nUse [Windows Subsystem](https://docs.microsoft.com/en-us/windows/wsl/install-win10)\n\nAgain, it has not been officially tested on windows, there shouldn't be anything preventing it from working. Report if you got it working by creating an issue.\n\n## Installing and Updating\n\n### Native Dependencies\n\nThis repo contains two types of scripts, posix compatible and bash compatible.\n\n<strong>These programs are required in both bash and posix scripts.</strong>\n\n| Program          | Role In Script                                         |\n| ---------------- | ------------------------------------------------------ |\n| curl             | All network requests                                   |\n| xargs            | For parallel downloading                               |\n| mkdir            | To create folders                                      |\n| rm               | To remove files and folders                            |\n| grep             | Miscellaneous                                          |\n| sed              | Miscellaneous                                          |\n| mktemp           | To generate temporary files ( optional )               |\n| sleep            | Self explanatory                                       |\n| ps               | To manage different processes                          |\n| du               | To get actual file sizes                               |\n\n<strong>If BASH is not available or BASH is available but version is less tham 4.x, then below programs are also required:</strong>\n\n| Program             | Role In Script                             |\n| ------------------- | ------------------------------------------ |\n| date                | For installation, update and Miscellaneous |\n| stty or zsh or tput | To determine column size ( optional )      |\n\n### Installation\n\nYou can install the script by automatic installation script provided in the repository.\n\nDefault values set by automatic installation script, which are changeable:\n\n**Repo:** `Akianonymus/gdrive-downloader`\n\n**Command name:** `gdl`\n\n**Installation path:** `$HOME/.gdrive-downloader`\n\n**Source value:** `master`\n\n**Shell file:** `.bashrc` or `.zshrc` or `.profile`\n\nFor custom command name, repo, shell file, etc, see advanced installation method.\n\n**Now, for automatic install script, there are two ways:**\n\n#### Basic Method\n\nTo install gdrive-downloader in your system, you can run the below command:\n\n```shell\ncurl -Ls --compressed https://drivedl.cf | sh -s\n```\n\nalternatively, you can use the original github url instead of `https://drivedl.cf`\n\n```shell\ncurl -Ls --compressed  https://github.com/Akianonymus/gdrive-downloader/raw/master/install.sh | sh -s\n```\n\nAfter the scripts have been downloaded, it will ask to add path to shell rc, follow the instructions.\n\nTypically the command look likes this:\n\n```\necho '[ -f \"${HOME}/.gdrive-downloader/gdl\" ] && [ -x \"${HOME}/.gdrive-downloader/gdl\" ] && PATH=\"${HOME}/.gdrive-downloader:${PATH}\"' >> ~/.zshrc\n```\n\nwhere `.zshrc` can be `.bashrc` / `.profile` or any other file where you want to add.\n\nAlternatively, to install globaly, run below commands:\n\n```shell\ncurl -Ls --compressed  https://github.com/Akianonymus/gdrive-downloader/raw/master/install.sh | sudo sh -s -- --path /usr/local/bin\n```\n\nNote: Here /usr/local/bin can be /usr/bin or some other path.\n\n#### Advanced Method\n\nThis section provides information on how to utilise the install.sh script for custom usescases.\n\nThese are the flags that are available in the install.sh script:\n\n<details>\n\n<summary>Click to expand</summary>\n\n-   <strong>-p | --path <dir_name></strong>\n\n    Custom path where you want to install the script.\n\n    Note: For global installs, give path outside of the home dir like /usr/bin and it must be in the executable path already.\n\n    ```shell\n    curl -Ls --compressed  https://github.com/Akianonymus/gdrive-downloader/raw/master/install.sh | sudo sh -s -- --path /usr/bin\n    ```\n\n    ---\n\n-   <strong>-c | --cmd <command_name></strong>\n\n    Custom command name, after installation, script will be available as the input argument.\n\n    ---\n\n-   <strong>-r | --repo <Username/reponame></strong>\n\n    Install script from your custom repo, e.g --repo Akianonymus/gdrive-downloader, make sure your repo file structure is same as official repo.\n\n    ---\n\n-   <strong>-b | --branch <branch_name></strong>\n\n    Specify branch name for the github repo, applies to custom and default repo both.\n\n    ---\n\n-   <strong>-s | --shell-rc <shell_file></strong>\n\n    Specify custom rc file, where PATH is appended, by default script detects .zshrc, .bashrc. and .profile.\n\n    ---\n\n-   <strong>-t | --time 'no of days'</strong>\n\n    Specify custom auto update time ( given input will taken as number of days ) after which script will try to automatically update itself.\n\n    Default: 5 ( 5 days )\n\n    ---\n\n-   <strong>--sh | --posix</strong>\n\n    Force install posix scripts even if system has compatible bash binary present.\n\n    ---\n\n-   <strong>-q | --quiet</strong>\n\n    Only show critical error/sucess logs.\n\n    ---\n\n-   <strong>--skip-internet-check</strong>\n\n    Do not check for internet connection, recommended to use in sync jobs.\n\n    ---\n\n-   <strong>-U | --uninstall</strong>\n\n    Uninstall the script and remove related files.\\n\n\n    ---\n\n-   <strong>-D | --debug</strong>\n\n    Display script command trace.\n\n    ---\n\n-   <strong>-h | --help</strong>\n\n    Display usage instructions.\n\n    ---\n\nNow, run the script and use flags according to your usecase.\n\nE.g:\n\n```shell\ncurl -Ls --compressed https://drivedl.cf | sh -s -- -r username/reponame -p somepath -s shell_file -c command_name -b branch_name\n```\n</details>\n\n### Updation\n\nIf you have followed the automatic method to install the script, then you can automatically update the script.\n\nThere are three methods:\n\n1.  Automatic updates\n\n    By default, script checks for update after 3 days. Use -t / --time flag of install.sh to modify the interval.\n\n    An update log is saved in \"${HOME}/.gdrive-downloader/update.log\".\n\n1.  Use the script itself to update the script.\n\n    `gdl -u or gdl --update`\n\n    This will update the script where it is installed.\n\n    <strong>If you use the this flag without actually installing the script,</strong>\n\n    <strong>e.g just by `sh gdl.sh -u` then it will install the script or update if already installed.</strong>\n\n1.  Run the installation script again.\n\n    Yes, just run the installation script again as we did in install section, and voila, it's done.\n\n**Note: Above methods always obey the values set by user in advanced installation,**\n**e.g if you have installed the script with different repo, say `myrepo/gdrive-downloader`, then the update will be also fetched from the same repo.**\n\n## Usage\n\nAfter installation, no more configuration is needed for public files/folders.\n\nBut sometimes, downloading files from shared drive ( team drives ) errors. To tackle this, use `--key` flag and bypass that error. In case it still errors out, give your own api key as argument.\n\nTo get your own api key, go to `Retrieve API key` section in [auth.md](https://github.com/Akianonymus/gdrive-downloader/blob/master/auth.md).\n\nNote: Even after specifying api key, don't recklessly download a file over and over, it will lead to 24 hr ip ban.\n\nTo handle the issue ( more of a abuse ) in above note, use oauth authentication.\n\nOther scenario where oauth authentication is needed would be for downloading private files/folders. Go to [Authentication](#authentication) section for more info.\n\n`gdl gdrive_id/gdrive_url`\n\nScript supports argument as gdrive_url, or a gdrive_id, given those should be publicly available.\n\nNow, we have covered the basics, move on to the next section for extra features and usage, like skipping sub folders, parallel downloads, etc.\n\n### Download Script Custom Flags\n\nThese are the custom flags that are currently implemented:\n\n-   <strong>-am | --alternate-method</strong>\n\n    Use this flag to use alternate method of downloading.\n\n    In default mode, all the folder information if fetched recursively and then download is started.\n\n    In alternate mode, downloading is done one folder at a time.\n\n    ---\n\n-   <strong>-aria | --aria-flags 'flags'</strong>\n\n    Use aria2c to download. \"-aria\" doesn't take arguments.\n\n    To give custom flags as argument, use long flag, --aria-flags. e.g: --aria-flags '-s 10 -x 10'\n\n    Note 1: aria2c can only resume google drive downloads if `-k/--key` or `-o/--oauth` option is used, otherwise, it will use curl.\n\n    Note 2: aria split downloading won't work in normal mode ( without `-k` or `-o` flag ) because it cannot get the remote server size. Same for any other feature which uses remote server size.\n\n    Note 3: By above notes, conclusion is, aria is basically same as curl in normal mode, so it is recommended to be used only with `--key` and `--oauth` flag.\n\n    ---\n\n-   <strong>-o | --oauth</strong>\n\n    Use this flag to trigger oauth authentication.\n\n    Note: If both --oauth and --key flag is used, --oauth flag is preferred.\n\n    ---\n\n-   <strong>--oauth-refetch-refresh-token</strong>\n\n    Use this flag to trigger refetching of refresh token if existing refresh token is expired. \n\n    ---\n\n-   <strong>-k | --key 'custom api key' ( optional argument )</strong>\n\n    To download with api key. If api key is not specified, then the predefined api key will be used.\n\n    Note: In-script api key surely works, but have less qouta to use, so it is recommended to use your own private key.\n\n    To save your api key in config file, use `gdl --key default=\"your api key\"`. API key will be saved in `${HOME}/.gdl.conf` and will be used from now on.\n\n    Note: If both --key and --oauth flag is used, --oauth flag is preferred.\n\n    ---\n\n-   <strong>-c | --config 'config file path'</strong>\n\n    Override default config file with custom config file.\n\n    Default: ${HOME}/.gdl.conf\n\n    ---\n\n-   <strong>-d | --directory 'foldername'</strong>\n\n    Custom workspace folder where given input will be downloaded.\n\n    ---\n\n-   <strong>-df | --document-format 'document type'</strong>\n\n    Can be used for documents to be downloaded in different formats.\n\n    Available formats are: docx, odt, rtf, pdf, txt, zip, epub, xlsx, ods, csv, tsv, pptx, odp, jpg, png, svg, json\n\n    ---\n\n-   <strong>-dr | --dry-run</strong>\n\n    Just check if the url can be downloaded and exit the script.\n\n    ---\n\n-   <strong>-s | --skip-subdirs</strong>\n\n    Skip downloading of sub folders present in case of folders.\n\n    ---\n\n-   <strong>-p | --parallel \"num of parallel downloads\"</strong>\n\n    Download multiple files in parallel.\n\n    Note:\n\n    - This command is only helpful if you are downloding many files which aren't big enough to utilise your full bandwidth, using it otherwise will not speed up your download and even error sometimes,\n    - 5 to 10 value is recommended. If errors with a high value, use smaller number.\n    - Beaware, this isn't magic, obviously it comes at a cost of increased cpu/ram utilisation as it forks multiple bash processes to download ( google how xargs works with -P option ).\n\n    ---\n\n-   <strong>--proxy 'http://user:password@host:port'</strong>\n\n    Specify a proxy to use, should be in the format accepted by curl --proxy and aria2c --all-proxy flag.\n\n    ---\n\n-   <strong>--speed 'speed'</strong>\n\n    Limit the download speed, supported formats: 1K and 1M.\n\n    ---\n\n-   <strong>-ua | --user-agent 'user agent string'</strong>\n\n    Specify custom user agent.\n\n    ---\n\n-   <strong>-R | --retry 'num of retries'</strong>\n\n    Retry the file download if it fails, postive integer as argument. Currently only for file downloads.\n\n    ---\n\n-   <strong>-in | --include 'pattern'</strong>\n\n    Only download the files which contain the given pattern - Applicable for folder downloads.\n\n    e.g: `gdl gdrive_id --include '1'`, will only include with files with pattern '1' in the name.\n\n    Regex can be used which works with grep -E command.\n\n    ---\n\n-   <strong>-ex | --exclude 'pattern'</strong>\n\n    Only download the files which does not contain the given pattern - Applicable for folder downloads.\n\n    e.g: `gdl gdrive_id --exclude '1'`, will only include with files with pattern '1' not present in the name.\n\n    Regex can be used which works with grep -E command.\n\n    ---\n\n-   <strong>-l | --log 'log_file_name'</strong>\n\n    Save downloaded files info to the given filename.\n\n    ---\n\n-   <strong>-q | --quiet</strong>\n\n    Supress the normal output, only show success/error download messages for files, and one extra line at the beginning for folder showing no. of files and sub folders.\n\n    ---\n\n-   <strong>--verbose</strong>\n\n    Display detailed message (only for non-parallel downloads).\n\n    ---\n\n-   <strong>--skip-internet-check</strong>\n\n    Do not check for internet connection, recommended to use in sync jobs.\n\n    ---\n\n-   <strong>-V | --version | --info</strong>\n\n    Show detailed info about script ( if script is installed system wide ).\n\n    ---\n\n-   <strong>-u | --update</strong>\n\n    Update the installed script in your system, if not installed, then install.\n\n    ---\n\n-   <strong>--uninstall</strong>\n\n    Uninstall the installed script in your system.\n\n    ---\n\n-   <strong>-h | --help 'flag name (optional)'</strong>\n\n    Print help for all flags and basic usage instructions.\n\n    To see help for a specific flag, --help flag_name ( with or without dashes )\n\n    e.g: `gdl --help aria`\n\n    ---\n\n-   <strong>-D | --debug</strong>\n\n    Display script command trace.\n\n    ---\n\n### Authentication\n\nFor oauth or api key authentication, see [auth.md](https://github.com/Akianonymus/gdrive-downloader/blob/master/auth.md)\n\n#### First Run\n\nOn first run, the script asks for all the required credentials, which we have obtained in the previous section.\n\nExecute the script: `gdl gdrive_url/gdrive_id -o`\n\nNote: `-o/ --oauth` flag is needed if file should be downloaded with authentication.\n\nNow, it will ask for following credentials:\n\n**Client ID:** Copy and paste from credentials.json\n\n**Client Secret:** Copy and paste from credentials.json\n\n**Refresh Token:** If you have previously generated a refresh token authenticated to your account, then enter it, otherwise leave blank.\nIf you don't have refresh token, script outputs a URL on the terminal script, open that url in a web browser and tap on allow. Go back to terminal and press enter.\n\nIf everything went fine, all the required credentials have been set.\n\n#### Config\n\nAfter first run, the credentials are saved in config file. The config file is `${HOME}/.gdl.conf`.\n\nTo use a different one temporarily, see `-c / --config` custom in [Download Script Custom Flags](#download-script-custom-flags).\n\nThis is the format of a config file:\n\n```shell\nACCOUNT_default_CLIENT_ID=\"client id\"\nACCOUNT_default_CLIENT_SECRET=\"client secret\"\nACCOUNT_default_REFRESH_TOKEN=\"refresh token\"\nACCOUNT_default_ACCESS_TOKEN=\"access token\"\nACCOUNT_default_ACCESS_TOKEN_EXPIRY=\"access token expiry\"\n```\n\nwhere `default` is the name of the account.\n\nYou can use a config file in multiple machines, the values that are explicitly required are `CLIENT_ID`, `CLIENT_SECRET` and `REFRESH_TOKEN`.\n\n`ACCESS_TOKEN` and `ACCESS_TOKEN_EXPIRY` are automatically generated using `REFRESH_TOKEN`.\n\nA pre-generated config file can be also used where interactive terminal access is not possible, like Continuous Integration, docker, jenkins, etc\n\nJust have to print values to `\"${HOME}/.gdl.conf\"`, e.g:\n\n```shell\nprintf \"%s\\n\" '\nACCOUNT_default_CLIENT_ID=\"client id\"\nACCOUNT_default_CLIENT_SECRET=\"client secret\"\nACCOUNT_default_REFRESH_TOKEN=\"refresh token\"\n' >| \"${HOME}/.gdl.conf\"\n```\n\nNote: Don't skip those backslashes before the double qoutes, it's necessary to handle spacing.\n\nNote: If you have an old config, then nothing extra is needed, just need to run the script once and the default config will be automatically converted to the new format.\n\n### Progress Bar\n\nWhen downloading a file, or a folder ( except parallel downloading ), script shows progress bar for ongoing download.\n\n```shell\n================[ Downloaded: 4.6 GB | Left: 44.7 GB ]=================\n------------------[ Speed: 48.0 MB/s | ETA: 15m10s ]-------------------\n```\n\n### Multiple Inputs\n\nYou can use multiple inputs without any extra hassle.\n\nPass arguments normally, e.g: `gdl url1 url2 id2 id2`\n\nwhere url1 and url2 are drive urls and rest two are gdrive ids.\n\n### Resuming Interrupted Downloads\n\nDownloads interrupted either due to bad internet connection or manual interruption, can be resumed from the same position.\n\nYou can interrupt many times you want, it will resume ( hopefully ).\n\nIt will not download again if file is already present, thus avoiding bandwidth waste.\n\nIn normal mode of downloading, when aria is used, if interrupted, then it will be resumed by curl because aria cannot detect the remote file size.\n\nBut when `--key` or `--oauth` is used, it will resume successfully with aria too.\n\n## Uninstall\n\nIf you have followed the automatic method to install the script, then you can automatically uninstall the script.\n\nThere are two methods:\n\n1.  Use the script itself to uninstall the script.\n\n    `gdl --uninstall`\n\n    This will remove the script related files and remove path change from shell file.\n\n1.  Run the installation script again with -U/--uninstall flag\n\n    ```shell\n    curl -Ls --compressed https://drivedl.cf | sh -s -- --uninstall\n    ```\n\n    Yes, just run the installation script again with the flag and voila, it's done.\n\n**Note: Above methods always obey the values set by user in advanced installation.**\n\n## How it works\n\nIn this section, the mechanism of the script it explained, if one is curious how it works to download folders as it is not supported officially.\n\nThe main catch here is that the script uses gdrive api to fetch details of a given file or folder id/url. But then how it is without authentication ?\n\nWell, it does uses the api key but i have provided it in script. I have grabbed the api key from their gdrive file page, just open a gdrive folder on browser, open console and see network requests, open one of the POST requests and there you have it.\n\nAlso, google api key have a check for referer, so we pass referer with curl as `https://drive.google.com` to properly use the key.\n\nNow, next steps are simple enough:\n\n### Input Check\n\nMain Function: `_check_id`\n\nIt parses the input and extract the file_id, then it does a network request to fetch name, size and mimetype of id.\n\nIf it's doesn't give http status 40*, then proceed.\n\nIn case of:\n\n#### File\n\nMain Function: `_download_file`\n\nBefore downloading, the script checks if file is already present. If present compare the file size to remote file size and resume the download if applicable.\n\nRecent updates by google have the made the download links ip specific and very strict about cookies, so it can only be downloaded on the system where cookies was fetched.\nEarlier, cookies was only needed for a file greater than 100 MB.\n\nBut either the case, the file can be moved to a different system and the script will resume the file from same position.\n\n#### Folder\n\nMain Function: `_download_folder`\n\nFirst, all the files and sub folder details are fetched. Details include id and mimeType.\n\nNow, it downloads the files using `_download_file` function, and in case of sub-folders, `_download_folder` function is repeated.\n\n## Reporting Issues\n\n| Issues Status | [![GitHub issues](https://img.shields.io/github/issues/Akianonymus/gdrive-downloader.svg?label=&style=for-the-badge)](https://GitHub.com/Akianonymus/gdrive-downloader/issues/) | [![GitHub issues-closed](https://img.shields.io/github/issues-closed/Akianonymus/gdrive-downloader.svg?label=&color=success&style=for-the-badge)](https://GitHub.com/Akianonymus/gdrive-downloader/issues?q=is%3Aissue+is%3Aclosed) |\n| :-----------: | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |\n\nUse the [GitHub issue tracker](https://github.com/Akianonymus/gdrive-downloader/issues) for any bugs or feature suggestions.\n\n## Contributing\n\n| Total Contributers | [![GitHub contributors](https://img.shields.io/github/contributors/Akianonymus/gdrive-downloader.svg?style=for-the-badge&label=)](https://GitHub.com/Akianonymus/gdrive-downloader/graphs/contributors/) |\n| :----------------: | :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |\n\n| Pull Requests | [![GitHub pull-requests](https://img.shields.io/github/issues-pr/Akianonymus/gdrive-downloader.svg?label=&style=for-the-badge&color=orange)](https://GitHub.com/Akianonymus/gdrive-downloader/issues?q=is%3Apr+is%3Aopen) | [![GitHub pull-requests closed](https://img.shields.io/github/issues-pr-closed/Akianonymus/gdrive-downloader.svg?label=&color=success&style=for-the-badge)](https://GitHub.com/Akianonymus/gdrive-downloader/issues?q=is%3Apr+is%3Aclosed) |\n| :-----------: | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |\n\nSubmit patches to code or documentation as GitHub pull requests.\n\nMake sure to run format_and_lint.sh and release.sh before making a new pull request.\n\nIf using a code editor, then use shfmt and shellcheck plugin instead of format_and_lint.sh\n\n## License\n\n[UNLICENSE](https://github.com/Akianonymus/gdrive-downloader/blob/master/LICENSE)"
}
