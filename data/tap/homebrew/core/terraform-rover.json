{
  "name": "terraform-rover",
  "full_name": "terraform-rover",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Terraform Visualizer",
  "license": "MIT",
  "homepage": "https://github.com/im2nguyen/rover",
  "versions": {
    "stable": "0.3.3",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/im2nguyen/rover/archive/refs/tags/v0.3.3.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "491709df11c70c9756e55f4cd203321bf1c6b92793b8db91073012a1f13b42e5"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terraform-rover/blobs/sha256:968e2719282cd29685415ea7e18963d0c4ee9faf08c9d506cb3a15b69d6fb164",
          "sha256": "968e2719282cd29685415ea7e18963d0c4ee9faf08c9d506cb3a15b69d6fb164"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terraform-rover/blobs/sha256:a91f264c414c45431d9f49775405e736d8c98fdad348d2890189491eeaf14509",
          "sha256": "a91f264c414c45431d9f49775405e736d8c98fdad348d2890189491eeaf14509"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terraform-rover/blobs/sha256:2585975e144bff4b942e06fea9b4a537845506d8753c83cdd0604242f25565cd",
          "sha256": "2585975e144bff4b942e06fea9b4a537845506d8753c83cdd0604242f25565cd"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terraform-rover/blobs/sha256:06ed2350c1cfb7e24b9a00d414e8bbce8c6f3ed5cc62fc7c01de2dedadd10b18",
          "sha256": "06ed2350c1cfb7e24b9a00d414e8bbce8c6f3ed5cc62fc7c01de2dedadd10b18"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terraform-rover/blobs/sha256:2fb8acc2af0c3029d217e0143115e34fd9ceca18cb6372053f35fa19a5d1fe15",
          "sha256": "2fb8acc2af0c3029d217e0143115e34fd9ceca18cb6372053f35fa19a5d1fe15"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terraform-rover/blobs/sha256:bbb836ca74b099587811edbe6806cd87767c543417f4bbc7043ee55fb00a9d3e",
          "sha256": "bbb836ca74b099587811edbe6806cd87767c543417f4bbc7043ee55fb00a9d3e"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terraform-rover/blobs/sha256:cb3ea8a62a309585e40a3ebca0f8633de15d80acfaed963046591d4ad1d610bf",
          "sha256": "cb3ea8a62a309585e40a3ebca0f8633de15d80acfaed963046591d4ad1d610bf"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terraform-rover/blobs/sha256:7352915d9f3322d4795ee475095c00c2cc6c3f206501f00194b9a9f251add4c9",
          "sha256": "7352915d9f3322d4795ee475095c00c2cc6c3f206501f00194b9a9f251add4c9"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [
    "node",
    "terraform"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/terraform-rover.rb",
  "ruby_source_checksum": {
    "sha256": "c57d66823593b4c61c846358f1bfb4552f63df4a9c7525c36cec6c127cfdd744"
  },
  "date_added": "2021-10-08T22:18:48+00:00",
  "readme": "## Rover - Terraform Visualizer\n\nRover is a [Terraform](http://terraform.io/) visualizer.\n\nIn order to do this, Rover:\n\n1. generates a [`plan`](https://www.terraform.io/docs/cli/commands/plan.html#out-filename) file and parses the configuration in the root directory or uses a provided plan.\n1. parses the `plan` and configuration files to generate three items: the resource overview (`rso`), the resource map (`map`), and the resource graph (`graph`).\n1. consumes the `rso`, `map`, and `graph` to generate an interactive configuration and state visualization hosts on `0.0.0.0:9000`.\n\nFeedback (via issues) and pull requests are appreciated!\n\n![Rover Screenshot](docs/rover-cropped-screenshot.png)\n\n## Quickstart\n\nThe fastest way to get up and running with Rover is through Docker.\n\nRun the following command in any Terraform workspace to generate a visualization. This command copies all the files in your current directory to the Rover container and exposes port `:9000`.\n\n```\n$ docker run --rm -it -p 9000:9000 -v $(pwd):/src im2nguyen/rover\n2021/07/02 06:46:23 Starting Rover...\n2021/07/02 06:46:23 Initializing Terraform...\n2021/07/02 06:46:24 Generating plan...\n2021/07/02 06:46:25 Parsing configuration...\n2021/07/02 06:46:25 Generating resource overview...\n2021/07/02 06:46:25 Generating resource map...\n2021/07/02 06:46:25 Generating resource graph...\n2021/07/02 06:46:25 Done generating assets.\n2021/07/02 06:46:25 Rover is running on 0.0.0.0:9000\n```\n\nOnce Rover runs on `0.0.0.0:9000`, navigate to it to find the visualization!\n\n### Standalone mode\n\nStandalone mode generates a `rover.zip` file containing all the static assets.\n\n```\n$ docker run --rm -it -p 9000:9000 -v \"$(pwd):/src\" im2nguyen/rover -standalone true\n```\n\nAfter all the assets are generated, unzip `rover.zip` and open `rover/index.html` in your favourite web browser.\n\n### Set environment variables\n\nUse `--env` or `--env-file` to set environment variables in the Docker container. For example, you can save your AWS credentials to a `.env` file.\n\n```\n$ printenv | grep \"AWS\" > .env\n```\n\nThen, add it as environment variables to your Docker container with `--env-file`.\n\n```\n$ docker run --rm -it -p 9000:9000 -v \"$(pwd):/src\" --env-file ./.env im2nguyen/rover\n```\n\n### Define tfbackend, tfvars and Terraform variables\n\nUse `-tfBackendConfig` to define backend config files and `-tfVarsFile` or `-tfVar` to define variables. For example, you can run the following in the `example/random-test` directory to overload variables.\n\n```\n$ docker run --rm -it -p 9000:9000 -v \"$(pwd):/src\" im2nguyen/rover -tfBackendConfig test.tfbackend -tfVarsFile test.tfvars -tfVar max_length=4\n```\n\n### Image generation\n\nUse `-genImage` to generate and save the visualization as a SVG image.\n\n```\n$ docker run --rm -it  -v \"$(pwd):/src\" im2nguyen/rover -genImage true\n```\n\n## Installation\n\nYou can download Rover binary specific to your system by visiting the [Releases page](https://github.com/im2nguyen/rover/releases). Download the binary, unzip, then move `rover` into your `PATH`.\n\n- [rover zip — MacOS - intel](https://github.com/im2nguyen/rover/releases/download/v0.3.2/rover_0.3.2_darwin_amd64.zip)\n- [rover zip — MacOS - Apple Silicon](https://github.com/im2nguyen/rover/releases/download/v0.3.2/rover_0.3.2_darwin_arm64.zip)\n- [rover zip — Windows](https://github.com/im2nguyen/rover/releases/download/v0.3.2/rover_0.3.2_windows_amd64.zip)\n\n### Build from source\n\nYou can build Rover manually by cloning this repository, then building the frontend and compiling the binary. It requires Go v1.21+ and `npm`.\n\n#### Build frontend\n\nFirst, navigate to the `ui`.\n\n```\n$ cd ui\n```\n\nThen, install the dependencies.\n\n```\n$ npm install\n```\n\nFinally, build the frontend.\n\n```\n$ npm run build\n```\n\n#### Compile binary\n\nNavigate to the root directory.\n\n```\n$ cd ..\n```\n\nCompile and install the binary. Alternatively, you can use `go build` and move the binary into your `PATH`.\n\n```\n$ go install\n```\n\n### Build Docker image\n\nFirst, compile the binary for `linux/amd64`.\n\n```\n$ env GOOS=linux GOARCH=amd64 go build .\n```\n\nThen, build the Docker image.\n\n```\n$ docker build . -t im2nguyen/rover --no-cache\n```\n\n\n## Basic usage\n\nThis repository contains two examples of Terraform configurations in `example`.\n\nNavigate into `random-test` example configuration. This directory contains configuration that showcases a wide variety of features common in Terraform (modules, count, output, locals, etc) with the [`random`](https://registry.terraform.io/providers/hashicorp/random/latest) provider.\n\n```\n$ cd example/random-test\n```\n\nRun Rover. Rover will start running in the current directory and assume the Terraform binary lives in `/usr/local/bin/terraform` by default.\n\n```\n$ rover\n2021/06/23 22:51:27 Starting Rover...\n2021/06/23 22:51:27 Initializing Terraform...\n2021/06/23 22:51:28 Generating plan...\n2021/06/23 22:51:28 Parsing configuration...\n2021/06/23 22:51:28 Generating resource overview...\n2021/06/23 22:51:28 Generating resource map...\n2021/06/23 22:51:28 Generating resource graph...\n2021/06/23 22:51:28 Done generating assets.\n2021/06/23 22:51:28 Rover is running on 0.0.0.0:9000\n```\n\nYou can specify the working directory (where your configuration is living) and the Terraform binary location using flags.\n\n```\n$ rover -workingDir \"example/eks-cluster\" -tfPath \"/Users/dos/terraform\"\n```\n\nOnce Rover runs on `0.0.0.0:9000`, navigate to it to find the visualization!"
}
