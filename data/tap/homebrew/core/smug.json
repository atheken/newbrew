{
  "name": "smug",
  "full_name": "smug",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Automate your tmux workflow",
  "license": "MIT",
  "homepage": "https://github.com/ivaaaan/smug",
  "versions": {
    "stable": "0.3.3",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/ivaaaan/smug/archive/refs/tags/v0.3.3.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "9d864d71edc31e47ddc18e32f70b579c5e6863e7a767d9ae3167d75467553474"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/smug/blobs/sha256:dc3016d43d79171ad8e05c23a0271257a987145782c1efd88c40bb0b8bbe8a72",
          "sha256": "dc3016d43d79171ad8e05c23a0271257a987145782c1efd88c40bb0b8bbe8a72"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/smug/blobs/sha256:7e3775ed32ea58015f2dd92c2c3bcb91018a27ea1c9c44e09daf5c2970206716",
          "sha256": "7e3775ed32ea58015f2dd92c2c3bcb91018a27ea1c9c44e09daf5c2970206716"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/smug/blobs/sha256:0af8b169e09d23a1fc1c44c9e6c02a2fd9bb902b07b00637551bb7256cda7b5f",
          "sha256": "0af8b169e09d23a1fc1c44c9e6c02a2fd9bb902b07b00637551bb7256cda7b5f"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/smug/blobs/sha256:170a42c8b5c0cb776be3979e0f03336cdc1534e254bebc72cd869740ed1a16c5",
          "sha256": "170a42c8b5c0cb776be3979e0f03336cdc1534e254bebc72cd869740ed1a16c5"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/smug/blobs/sha256:059b9dc5449ecdbabd67977f1ce687ccc8e1044061dc361a6147af7a91b3485b",
          "sha256": "059b9dc5449ecdbabd67977f1ce687ccc8e1044061dc361a6147af7a91b3485b"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/smug/blobs/sha256:d3ff2185fd39b6314436d02a2f29832e142d494967435b3747a4b69c843d61a9",
          "sha256": "d3ff2185fd39b6314436d02a2f29832e142d494967435b3747a4b69c843d61a9"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/smug/blobs/sha256:e4010fa44ea654c03f767a1c36ffed817346e77cb449138714c73770800f0621",
          "sha256": "e4010fa44ea654c03f767a1c36ffed817346e77cb449138714c73770800f0621"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/smug/blobs/sha256:34f256c0bd39e632e707b96f3ae4a2720f30bec53bcbf13e9705e1f743a3317f",
          "sha256": "34f256c0bd39e632e707b96f3ae4a2720f30bec53bcbf13e9705e1f743a3317f"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [
    "tmux"
  ],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/smug.rb",
  "ruby_source_checksum": {
    "sha256": "10a006e7a17d39b9ee07f5af5cb3c1436b4a1c1c83b9f67e4b8e17caa86418d6"
  },
  "date_added": "2021-11-20T14:16:15+00:00",
  "readme": "# Smug - tmux session manager\n\n[![Actions Status](https://github.com/ivaaaan/smug/workflows/Go/badge.svg)](https://github.com/ivaaaan/smug/actions)\n[![Go Report Card](https://goreportcard.com/badge/github.com/ivaaaan/smug)](https://goreportcard.com/report/github.com/ivaaaan/smug)\n\nInspired by [tmuxinator](https://github.com/tmuxinator/tmuxinator) and [tmuxp](https://github.com/tmux-python/tmuxp).\n\nSmug automates your [tmux](https://github.com/tmux/tmux) workflow. You can create a single configuration file, and Smug will create all the required windows and panes from it.\n\n![gif](https://raw.githubusercontent.com/ivaaaan/gifs/master/smug.gif)\n\nThe configuration used in this GIF can be found [here](#example-2).\n\n## Installation\n\n### Download from the releases page\n\nDownload the latest version of Smug from the [releases page](https://github.com/ivaaaan/smug/releases) and then run:\n\n```bash\nmkdir smug && tar -xzf smug_0.1.0_Darwin_x86_64.tar.gz -C ./smug && sudo mv smug/smug /usr/local/bin && rm -rf smug\n```\n\nDon't forget to replace `smug_0.1.0_Darwin_x86_64.tar.gz` with the archive that you've downloaded.\n\n### Git\n\n#### Prerequisite Tools\n\n- [Git](https://git-scm.com/)\n- [Go (we test it with the last 2 major versions)](https://golang.org/dl/)\n\n#### Fetch from GitHub\n\nThe easiest way is to clone Smug from GitHub and install it using `go-cli`:\n\n```bash\ncd /tmp\ngit clone https://github.com/ivaaaan/smug.git\ncd smug\ngo install\n```\n\n### macOS\n\nOn macOS, you can install Smug using [MacPorts](https://www.macports.org) or [Homebrew](https://brew.sh).\n\n#### Homebrew\n\n```bash\nbrew install smug\n```\n\n#### MacPorts\n\n```bash\nsudo port selfupdate\nsudo port install smug\n```\n\n### Linux\n\n#### Arch\n\nThere's [AUR](https://aur.archlinux.org/packages/smug) with smug.\n\n```bash\ngit clone https://aur.archlinux.org/smug.git\ncd smug\nmakepkg -si\n```\n\n## Usage\n\n```\nsmug <command> [<project>] [-f, --file <file>] [-w, --windows <window>]... [-a, --attach] [-d, --debug]\n```\n\n### Options:\n\n```\n-f, --file A custom path to a config file\n-w, --windows List of windows to start. If session exists, those windows will be attached to current session.\n-a, --attach Force switch client for a session\n-i, --inside-current-session Create all windows inside current session\n-d, --debug Print all commands to ~/.config/smug/smug.log\n--detach Detach session. The same as `-d` flag in the tmux\n```\n\n### Custom settings\n\nYou can pass custom settings into your configuration file. Use `${variable_name}` syntax in your config and then pass key-value args:\n\n```console\nxyz@localhost:~$ smug start project variable_name=value\n```\n\n### Examples\n\nTo create a new project, or edit an existing one in the `$EDITOR`:\n\n```console\nxyz@localhost:~$ smug new project\n\nxyz@localhost:~$ smug edit project\n```\n\nTo start/stop a project and all windows, run:\n\n```console\nxyz@localhost:~$ smug start project\n\nxyz@localhost:~$ smug stop project\n```\n\nAlso, smug has aliases to the most of the commands:\n\n```console\nxyz@localhost:~$ smug project # the same as \"smug start project\"\n\nxyz@localhost:~$ smug st project # the same as \"smug stop project\"\n\nxyz@localhost:~$ smug p ses # the same as \"smug print ses\"\n```\n\nWhen you already have a running session, and you want only to create some windows from the configuration file, you can do something like this:\n\n```console\nxyz@localhost:~$ smug start project:window1\n\nxyz@localhost:~$ smug start project:window1,window2\n\nxyz@localhost:~$ smug start project -w window1\n\nxyz@localhost:~$ smug start project -w window1 -w window2\n\nxyz@localhost:~$ smug stop project:window1\n\nxyz@localhost:~$ smug stop project -w window1 -w window2\n```\n\nAlso, you are not obliged to put your files in the `~/.config/smug` directory. You can use a custom path in the `-f` flag:\n\n```console\nxyz@localhost:~$ smug start -f ./project.yml\n\nxyz@localhost:~$ smug stop -f ./project.yml\n\nxyz@localhost:~$ smug start -f ./project.yml -w window1 -w window2\n```\n\n## Configuration\n\nConfiguration files can stored in the `~/.config/smug` directory in the `YAML` format, e.g `~/.config/smug/your_project.yml`.\nYou may also create a file named `.smug.yml` in the current working directory, which will be used by default.\n\n### Examples\n\n#### Example 1\n\n```yaml\nsession: blog\n\nroot: ~/Developer/blog\n\nbefore_start:\n  - docker-compose -f my-microservices/docker-compose.yml up -d # my-microservices/docker-compose.yml is a relative to `root`\n\nenv:\n  FOO: BAR\n\nstop:\n  - docker stop $(docker ps -q)\n\nwindows:\n  - name: code\n    root: blog # a relative path to root\n    manual: true # you can start this window only manually, using the -w arg\n    layout: main-vertical\n    commands:\n      - docker-compose start\n    panes:\n      - type: horizontal\n        root: .\n        commands:\n          - docker-compose exec php /bin/sh\n          - clear\n\n  - name: infrastructure\n    root: ~/Developer/blog/my-microservices\n    layout: tiled\n    panes:\n      - type: horizontal\n        root: .\n        commands:\n          - docker-compose up -d\n          - docker-compose exec php /bin/sh\n          - clear\n```\n\n#### Example 2\n\n```yaml\nsession: blog\n\nroot: ~/Code/blog\n\nbefore_start:\n  - docker-compose up -d\n\nstop:\n  - docker-compose stop\n\nwindows:\n  - name: code\n    layout: main-horizontal\n    commands:\n      - $EDITOR app/dependencies.php\n    panes:\n      - type: horizontal\n        commands:\n          - make run-tests\n  - name: ssh\n    commands:\n      - ssh -i ~/keys/blog.pem ubuntu@127.0.0.1\n```"
}
