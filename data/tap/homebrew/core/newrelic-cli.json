{
  "name": "newrelic-cli",
  "full_name": "newrelic-cli",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Command-line interface for New Relic",
  "license": "Apache-2.0",
  "homepage": "https://github.com/newrelic/newrelic-cli",
  "versions": {
    "stable": "0.68.24",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/newrelic/newrelic-cli/archive/refs/tags/v0.68.24.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "96ea849742234c5f6aa4c73b7fd8a8c522e65bcf06e0902ad97872a0d3811737"
    },
    "head": {
      "url": "https://github.com/newrelic/newrelic-cli.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/newrelic-cli/blobs/sha256:8bd1d44575a5372a0ab0b86e3bff5448a2ecb525942f7a983b6c2d054e60620d",
          "sha256": "8bd1d44575a5372a0ab0b86e3bff5448a2ecb525942f7a983b6c2d054e60620d"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/newrelic-cli/blobs/sha256:e6079f68ce910aaafce594f74d9850ad2cb495ad7decec6050d094d8794d8d5b",
          "sha256": "e6079f68ce910aaafce594f74d9850ad2cb495ad7decec6050d094d8794d8d5b"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/newrelic-cli/blobs/sha256:762b53e121cf042732bfa5bfda7c817864b2ee3881829f64d5aa62d715f606b8",
          "sha256": "762b53e121cf042732bfa5bfda7c817864b2ee3881829f64d5aa62d715f606b8"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/newrelic-cli/blobs/sha256:9f493309c74d4dc47cf83815024bb8fbf2b715a9ede6d049b2c3c4a02b4885ee",
          "sha256": "9f493309c74d4dc47cf83815024bb8fbf2b715a9ede6d049b2c3c4a02b4885ee"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/newrelic-cli/blobs/sha256:b25fb0bd87fcb28e75dbf3355686869537508740dc76b32f8bcd6bcb7e428e6f",
          "sha256": "b25fb0bd87fcb28e75dbf3355686869537508740dc76b32f8bcd6bcb7e428e6f"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/newrelic-cli/blobs/sha256:fd8457ec2fbd343ad884caf4a239b4999883249408c575f9c7372a55929db7fb",
          "sha256": "fd8457ec2fbd343ad884caf4a239b4999883249408c575f9c7372a55929db7fb"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/newrelic-cli/blobs/sha256:8623daea09d8bcaff36ba05ed704369f52116ded37e79ad73c1e47df002d7ee3",
          "sha256": "8623daea09d8bcaff36ba05ed704369f52116ded37e79ad73c1e47df002d7ee3"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/newrelic-cli.rb",
  "ruby_source_checksum": {
    "sha256": "885fb333a7aa4c1ba7da136bb7711ec3622c91e319fc733efeb25e7cc4b2d1ea"
  },
  "date_added": "2020-03-10T01:15:38+00:00",
  "readme": "[![Community Project header](https://github.com/newrelic/open-source-office/raw/master/examples/categories/images/Community_Project.png)](https://github.com/newrelic/open-source-office/blob/master/examples/categories/index.md#category-community-project)\n\n# newrelic-cli\n\n[![Testing](https://github.com/newrelic/newrelic-cli/workflows/Testing/badge.svg)](https://github.com/newrelic/newrelic-cli/actions)\n[![Go Report Card](https://goreportcard.com/badge/github.com/newrelic/newrelic-cli?style=flat-square)](https://goreportcard.com/report/github.com/newrelic/newrelic-cli)\n[![GoDoc](https://godoc.org/github.com/newrelic/newrelic-cli?status.svg)](https://godoc.org/github.com/newrelic/newrelic-cli)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://github.com/newrelic/newrelic-cli/blob/main/LICENSE)\n[![CLA assistant](https://cla-assistant.io/readme/badge/newrelic/newrelic-cli)](https://cla-assistant.io/newrelic/newrelic-cli)\n[![Release](https://img.shields.io/github/v/release/newrelic/newrelic-cli?sort=semver)](https://github.com/newrelic/newrelic-cli/releases/latest)\n[![Homebrew](https://img.shields.io/badge/dynamic/json.svg?url=https://formulae.brew.sh/api/formula/newrelic-cli.json&query=$.versions.stable&label=homebrew)](https://formulae.brew.sh/formula/newrelic-cli)\n\n[![Docker Stars](https://img.shields.io/docker/stars/newrelic/cli.svg)](https://hub.docker.com/r/newrelic/cli)\n[![Docker Pulls](https://img.shields.io/docker/pulls/newrelic/cli.svg)](https://hub.docker.com/r/newrelic/cli)\n[![Docker Size](https://img.shields.io/docker/image-size/newrelic/cli.svg?sort=semver)](https://hub.docker.com/r/newrelic/k8s-operator)\n[![Docker Version](https://img.shields.io/docker/v/newrelic/cli.svg?sort=semver)](https://hub.docker.com/r/newrelic/k8s-operator)\n\nThe New Relic CLI is an officially supported command line interface for New Relic, released as part of the [Developer Toolkit](https://developer.newrelic.com).\n\n- [Overview](#overview)\n  - [Getting Started](#getting-started)\n  - [New Relic CLI Documentation](docs/cli/newrelic.md)\n- [Installation](#installation--upgrades)\n  - [MacOS](#macos)\n  - [Windows](#windows)\n  - [Linux](#linux)\n  - [Pre-built binaries](#pre-built-binaries)\n  - [Docker](#docker)\n- [Example Usage](#example-usage)\n- [Development](#development)\n- [Community Support](#community-support)\n- [Issues / Enhancement Requests](#issues--enhancement-requests)\n- [Contributing](#contributing)\n- [Other Resources](#other-resources)\n- [Open Source License](#open-source-license)\n\n## Overview\n\nThe New Relic CLI is a project to consolidate some of the tools that New Relic\noffers for managing resources. Current scope is limited while the framework is\nbeing developed, but the tool as-is does perform a subset of tasks.\n\n- Entity Search: Search for entities across all your New Relic accounts\n- Entity Tagging: Manage tags across all of your entities\n- Deployment Markers: Easily record an APM Application deployment within\n  New Relic.\n\n### Getting Started\n\nFor a quick guide on getting started with the New Relic CLI, see our [Getting\nStarted](https://github.com/newrelic/newrelic-cli/blob/main/docs/GETTING_STARTED.md)\npage.\n\n### New Relic CLI Documentation\n\nThe latest New Relic CLI documentation is available in the repository's [docs](https://github.com/newrelic/newrelic-cli/blob/main/docs/cli/newrelic.md) directory.\n\n## Installation & Upgrades\n\nInstallation options are available for various platforms. If you're running an older version of the CLI you can use these commands to update to the latest version.\n\n### MacOS\n\n#### Automated install\n\n`curl -Ls https://download.newrelic.com/install/newrelic-cli/scripts/install.sh | bash`\n\n#### Homebrew\n\nInstall the New Relic CLI on MacOS via [`homebrew`](https://brew.sh/). With `homebrew` installed, run:\n\n```\nbrew install newrelic-cli\n```\n\n### Windows\n\nInstallation is supported on 64-bit Windows.\n\n#### Automated install\n\n`[Net.ServicePointManager]::SecurityProtocol = 'tls12, tls'; (New-Object System.Net.WebClient).DownloadFile(\"https://download.newrelic.com/install/newrelic-cli/scripts/install.ps1\", \"$env:TEMP\\install.ps1\"); & $env:TEMP\\install.ps1`\n\n#### Scoop\n\n```powershell\nscoop bucket add newrelic-cli https://github.com/newrelic/newrelic-cli.git\nscoop install newrelic-cli\n```\n\n#### Chocolatey\n\n```powershell\nchoco install newrelic-cli\n```\n\n#### Standalone installer\n\nA standalone MSI installer is available on the New Relic download site. You can download the installer for the latest version [here](https://download.newrelic.com/install/newrelic-cli).\n\n#### Powershell\n\nSilent installation of the latest version of the CLI can be achieved via the follwing Powershell command:\n\n```powershell\n(New-Object System.Net.WebClient).DownloadFile(\"https://github.com/newrelic/newrelic-cli/releases/latest/download/NewRelicCLIInstaller.msi\", \"$env:TEMP\\NewRelicCLIInstaller.msi\"); `\nmsiexec.exe /qn /i \"$env:TEMP\\NewRelicCLIInstaller.msi\" | Out-Null; `\n```\n\n### Linux\n\n#### Automated install\n\n`curl -Ls https://download.newrelic.com/install/newrelic-cli/scripts/install.sh | bash`\n\n#### Snapcraft\n\nLinux binaries can be installed via [Snapcraft](https://snapcraft.io/). With the `snapd` daemon installed, run:\n\n```\nsudo snap install newrelic-cli\n```\n\n### Pre-built binaries\n\nPre-built binaries are available for all of the above platforms. You can download the latest releases [here](https://github.com/newrelic/newrelic-cli/releases/latest). The binaries and their checksums are signed and can be verified against the Developer Toolkit team's [public PGP key](https://newrelic.github.io/observability-as-code/developer-toolkit.asc).\n\nVerify that the fingerprint for the downloaded key matches the following:\n\n```\ngpg --fingerprint developer-toolkit@newrelic.com\n\n5961 D131 BB2C 5C6B 42B1  4D0F 92AD A76A 30A3 F1FD\n```\n\nWhen verifying pre-built binaries and checksums, use the long format (the short format is not secure). For example:\n\n```\ngpg --keyid-format long --verify checksums.txt.sig checksums.txt\n```\n\n### Docker\n\nThere is an official [docker image](https://hub.docker.com/r/newrelic/cli) that can be utilized for running commands as well.\n\n## Example Usage\n\n#### Querying an APM application (using the Docker image)\n\n```bash\n# Pull the latest container\n$ docker pull newrelic/cli\n\n# Run the container interactively, remove it once the command exists\n# Also must pass $NEW_RELIC_API_KEY to the container\n$ docker run -it --rm \\\n    -e NEW_RELIC_API_KEY \\\n    newrelic/cli \\\n    apm application get --name WebPortal --accountId 2508259\n\n[\n  {\n    \"AccountID\": 2508259,\n    \"ApplicationID\": 204261368,\n    \"Domain\": \"APM\",\n    \"EntityType\": \"APM_APPLICATION_ENTITY\",\n    \"GUID\": \"MjUwODI1OXxBUE18QVBQTElDQVRJT058MjA0MjYxMzY4\",\n    \"Name\": \"WebPortal\",\n    \"Permalink\": \"https://one.newrelic.com/redirect/entity/MjUwODI1OXxBUE18QVBQTElDQVRJT058MjA0MjYxMzY4\",\n    \"Reporting\": true,\n    \"Type\": \"APPLICATION\"\n  }\n]\n```\n\nSee the [Getting Started guide](docs/GETTING_STARTED.md) for a more in-depth introduction to the capabilities of the New Relic CLI.\n\n### Getting Help\n\nIn order to get help about what commands are available, the trusty `--help`\nflag is here to assist. Alternatively, using just the `help` subcommand also works.\n\n```\nnewrelic --help\nnewrelic help\n```\n\nHelp is also available for the nested sub-commands. For example, the with the\nfollowing command, you can retrieve help for the `apm` sub-command.\n\n```\nnewrelic apm --help\nnewrelic help apm\n```\n\nUsing the CLI in this way, users are able to inspect what commands are\navailable, with some instruction on their usage.\n\n### Patterns\n\nThroughout the help, you may notice common patterns. The term `describe` is\nused to perform list or get operations, while the `create` and `delete` terms\nare used to construct or destroy an item, respectively.\n\n## Development\n\n### Requirements\n\n- Go 1.18+\n- GNU Make\n- git\n\n### Building\n\nThe `newrelic` command will be built in `bin/ARCH/newrelic`, where `ARCH` is either `linux`, `darwin`, or `windows`, depending on your build environment. You can run it directly from there or install it by moving it to a directory in your `PATH`.\n\n```\n# Default target is 'build'\n$ make\n\n# Explicitly run build\n$ make build\n\n# Locally test the CI build scripts\n# make build-ci\n```\n\n### Testing\n\nBefore contributing, all linting and tests must pass. Tests can be run directly via:\n\n```\n# Tests and Linting\n$ make test\n\n# Only unit tests\n$ make test-unit\n\n# Only integration tests\n$ make test-integration\n```\n\n### Working with recipes\n\n#### Core recipe library\n\nA core library of installation recipes is included with the CLI for use within the\n`install` command. Recipe files are syndicated from [open-install-library](https://github.com/newrelic/open-install-library)\nand embedded in the CLI binary at release time. To fetch the latest recipe library\nwhile developing, the following make target can be used:\n\n```\nmake recipes\n```\n\nRecipe files are stored in `internal/install/recipes/files`. Once files have been\nfetched, they will be included in future CLI builds. If a particular version of\nthe recipe library is desired, the archive download URL can be passed to the make\ntarget via the `RECIPES_ARCHIVE_URL` option:\n\n```\nmake recipes RECIPES_ARCHIVE_URL=https://github.com/newrelic/open-install-library/releases/download/v0.50.0/recipes.zip\n```\n\nTo clean recipe files, use the `recipes-clean` target:\n\n```\nmake recipes-clean\n```\n\n#### Custom recipe files\n\nA path can also be passed to the `--localRecipes` flag when running the `install`\ncommand. This will bypass the methods described above and load files from the designated\npath.\n\n### Experimenting (internal New Relic usage only)\n\nUsing A/B tests, New Relic developers have the ability to gradually roll out new features.\n\n#### Define an experiment\n\nWith access to Split.io, internal New Relic developers can create new A/B tests. Upon creating one, reference the exact name of the experiment in `internal/split/constants.go`. Make sure this is the exact name of the experiment in Split.io.\n\n#### Retrieve treatments\n\nYou can retrieve the status of the treatment by using the `SplitService`.\n\n```golang\n// Retrieve a single treatment given an experiment (split)\ntreatment := split.SplitService.Get(split.VirtuosoCLITest)\n\nif treatment == \"on\" {\n  // insert code here to show on treatment\n} else if treatment == \"off\" {\n  // insert code here to show off treatment\n} else {\n  // insert your control treatment code here\n}\n\n// Retrieve multiple treatments given a list of experiments (splits)\nsplits := []string{split.VirtuosoCLITest, split.VirtuosoCliTest2}\ntreatments := split.SplitService.GetAll(splits)\nfor split, treatment := range treatments {\n    fmt.Printf(\"Treatment for feature %s is %s\\n\", split, treatment)\n    // Evaluate treatments\n}\n\n```\n\n### Commit Messages\n\nUsing the following format for commit messages allows for auto-generation of\nthe [CHANGELOG](CHANGELOG.md):\n\n#### Format:\n\n`<type>(<scope>): <subject>`\n\n| Type       | Description           | Change log? |\n| ---------- | --------------------- | :---------: |\n| `chore`    | Maintenance type work |     No      |\n| `docs`     | Documentation Updates |     Yes     |\n| `feat`     | New Features          |     Yes     |\n| `fix`      | Bug Fixes             |     Yes     |\n| `refactor` | Code Refactoring      |     No      |\n\n#### Scope\n\nThis refers to what part of the code is the focus of the work. For example:\n\n**General:**\n\n- `build` - Work related to the build system (linting, makefiles, CI/CD, etc)\n- `release` - Work related to cutting a new release\n\n**Package Specific:**\n\n- `newrelic` - Work related to the New Relic package\n- `http` - Work related to the `internal/http` package\n- `alerts` - Work related to the `pkg/alerts` package\n\n### Generating CLI Documentation\n\n**Note:** This requires the repo to be in your GOPATH [(godoc issue)](https://github.com/golang/go/issues/26827)\n\n```\n$ make docs\n```\n\n## Community Support\n\nNew Relic hosts and moderates an online forum where you can interact with New Relic employees as well as other customers to get help and share best practices.\n\n- [Roadmap](https://newrelic.github.io/developer-toolkit/roadmap/) - As part of the Developer Toolkit, the roadmap for this project follows the same RFC process\n- [Issues or Enhancement Requests](https://github.com/newrelic/newrelic-cli/issues) - Issues and enhancement requests can be submitted in the Issues tab of this repository. Please search for and review the existing open issues before submitting a new issue.\n- [Contributors Guide](CONTRIBUTING.md) - Contributions are welcome (and if you submit a Enhancement Request, expect to be invited to contribute it yourself :grin:).\n- [Community discussion board](https://discuss.newrelic.com/c/build-on-new-relic/developer-toolkit) - Like all official New Relic open source projects, there's a related Community topic in the New Relic Explorers Hub.\n\nPlease do not report issues with the CLI to New Relic Global Technical Support. Instead, visit the [`Explorers Hub`](https://discuss.newrelic.com/c/build-on-new-relic) for troubleshooting and best-practices.\n\n## Issues / Enhancement Requests\n\nIssues and enhancement requests can be submitted in the [Issues tab of this repository](../../issues). Please search for and review the existing open issues before submitting a new issue.\n\n## Contributing\n\nContributions are welcome (and if you submit a Enhancement Request, expect to be invited to contribute it yourself :grin:). Please review our [Contributors Guide](CONTRIBUTING.md).\n\nKeep in mind that when you submit your pull request, you'll need to sign the CLA via the click-through using CLA-Assistant. If you'd like to execute our corporate CLA, or if you have any questions, please drop us an email at opensource@newrelic.com.\n\n## Other Resources\n\nThere are a handful of other useful tools that this does not replace. Here are\nsome useful links to other tools that you might be interested in using at this\ntime.\n\n- [NR1 CLI](https://developer.newrelic.com/build-tools/new-relic-one-applications/cli):\n  Command line interface for managing development workflows for custom Nerdpacks on New Relic One.\n- [New Relic Lambda CLI](https://github.com/newrelic/newrelic-lambda-cli): A\n  CLI to install the New Relic AWS Lambda integration and layers.\n- [New Relic Diagnostics](https://docs.newrelic.com/docs/agents/manage-apm-agents/troubleshooting/new-relic-diagnostics):\n  A utility that automatically detects common problems with New Relic agents.\n\n## Open Source License\n\nThis project is distributed under the [Apache 2 license](LICENSE)."
}
