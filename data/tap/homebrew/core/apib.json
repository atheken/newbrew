{
  "name": "apib",
  "full_name": "apib",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "HTTP performance-testing tool",
  "license": "Apache-2.0",
  "homepage": "https://github.com/apigee/apib",
  "versions": {
    "stable": "1.2.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/apigee/apib/archive/APIB_1_2_1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "e47f639aa6ffc14a2e5b03bf95e8b0edc390fa0bb2594a521f779d6e17afc14c"
    },
    "head": {
      "url": "https://github.com/apigee/apib.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/apib/blobs/sha256:0d3f8ebb9f43ccdebb3d1f0afea5decb6418aee36e2021d8c6eb2a182f023c09",
          "sha256": "0d3f8ebb9f43ccdebb3d1f0afea5decb6418aee36e2021d8c6eb2a182f023c09"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/apib/blobs/sha256:c411bb84a6c9cedada2763065efefa16107e3d030108a0a56d58cbef1261ead7",
          "sha256": "c411bb84a6c9cedada2763065efefa16107e3d030108a0a56d58cbef1261ead7"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/apib/blobs/sha256:a2c0d222e5f4e7ce13ea2671367e125a2a493922696f1cdcccf01edb3fcafb8f",
          "sha256": "a2c0d222e5f4e7ce13ea2671367e125a2a493922696f1cdcccf01edb3fcafb8f"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/apib/blobs/sha256:829fdf8369067c69644601156922fa6f2a6b42909156c5760c9b37a0cfaf3a72",
          "sha256": "829fdf8369067c69644601156922fa6f2a6b42909156c5760c9b37a0cfaf3a72"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/apib/blobs/sha256:f8b39236e548bc511ac9be750bf5e34ea153828b66fee23f12d59cef6a1d2459",
          "sha256": "f8b39236e548bc511ac9be750bf5e34ea153828b66fee23f12d59cef6a1d2459"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/apib/blobs/sha256:26096e8f935082051fb8695d3f01ae9d0991baad89d170d96461794a9f756d3a",
          "sha256": "26096e8f935082051fb8695d3f01ae9d0991baad89d170d96461794a9f756d3a"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/apib/blobs/sha256:c14c342e3615bce14f3fe666fefdd17456e1c96b5ce8b59edd46dad19beab49f",
          "sha256": "c14c342e3615bce14f3fe666fefdd17456e1c96b5ce8b59edd46dad19beab49f"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/apib/blobs/sha256:43509a772521b80a03d3702dba034b752371581c0739c6cfb7f1c48217398a42",
          "sha256": "43509a772521b80a03d3702dba034b752371581c0739c6cfb7f1c48217398a42"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [
    "libev",
    "openssl@3"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "2706c66e8def3eeba4d9bf1adf66221c8ad70701",
  "ruby_source_path": "Formula/apib.rb",
  "ruby_source_checksum": {
    "sha256": "48fb253c77a7328002a6d6d0426ae18e82fda8a3b8ddb13492d8309187350ea1"
  },
  "date_added": "2013-11-22T18:05:20-08:00",
  "readme": "# apib: API Bench\n\nThis is a tool that makes it easy to run performance tests of HTTP API servers. It \ncan be built on most Linux platforms, plus Mac OS X and FreeBSD.\n\n## Status\n\napib has been fairly stable for a little while now. Please submit issues\nor pull requests if you find that you'd like it to do more within reason!\n\n## Current Version\n\n1.2.1.\n\n## Usage\n\nRunning apib can be as simple as:\n\n    apib -c 100 -d 60 http://test.example.com\n\nThe command above will hammer \"test.example.com\" as fast as it can for up to\n60 seconds using 100 concurrent network connections. \n\n## Installation\n\nOn the Mac, you can now install via [Homebrew](http://brew.sh/):\n\n    brew install apib\n    \nOtherwise, you can [build it yourself from source](./doc/BUILDING.md).\n\nSee additional documentation for more:\n\n* [Running](./doc/RUNNING.md): How to run apib\n* [Building](./doc/BUILDING.md): How to build it from source\n* [Remote Montitoring](./doc/REMOTE-MONITORING.md): How to remotely monitor servers under test\n\n## Design\n\napib has most of the features of Apache Bench (ab), but is also intended as\na more modern replacement. In particular, it supports:\n\n* Proper HTTP 1.1 support including keep-alives and chunked encoding\n* Ability to spawn multiple I/O threads to take advantage of multiple\n  CPU cores\n* Support for POST and PUT of large objects\n* Support for OAuth 1.0 signatures\n* Ability to output results to a file so they may be automated\n* Remote CPU monitoring\n\nIn addition, like \"ab,\" it also supports:\n\n* A simple command-line interface\n* Few dependencies, so it may be easily built and deployed\n* Non-blocking I/O for high concurrency\n\n## Implementation:\n\n1. Spawn one I/O thread per CPU (configured by user)\n2. Allocate a subset of connections to each, and in each:\n3. Start event loop\n4. If total number of connections < C, spawn a connection\n5. Execute HTTP state machine -- connecting, sending, receiving, sending\n6. When connections close, replace them to maintain C connections open\n7. Record results in a shared area\n8. Back in main thread, report on shared results periodically\n9. Time in main thread and signal workers to stop eventually\n10. Report to screen and to file"
}
