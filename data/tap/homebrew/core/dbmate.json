{
  "name": "dbmate",
  "full_name": "dbmate",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Lightweight, framework-agnostic database migration tool",
  "license": "MIT",
  "homepage": "https://github.com/amacneil/dbmate",
  "versions": {
    "stable": "2.5.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/amacneil/dbmate/archive/v2.5.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "3413eb07bc67c56c04355d0c2bcef65cd73a29e1998243c5166b3cbfe9269d60"
    },
    "head": {
      "url": "https://github.com/amacneil/dbmate.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dbmate/blobs/sha256:46bb36c39d4895c6b2102c59afa52df82b9b611dd29c3cfeb1023f94eeed5c81",
          "sha256": "46bb36c39d4895c6b2102c59afa52df82b9b611dd29c3cfeb1023f94eeed5c81"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dbmate/blobs/sha256:db730cb7add649e0ffae95aee1967a8cf8fa5e7e638acf2ea62828bc1e932f95",
          "sha256": "db730cb7add649e0ffae95aee1967a8cf8fa5e7e638acf2ea62828bc1e932f95"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dbmate/blobs/sha256:cef527308ad99f57f74062846841bd2e648e246fad287e306aa93208dfa3f482",
          "sha256": "cef527308ad99f57f74062846841bd2e648e246fad287e306aa93208dfa3f482"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dbmate/blobs/sha256:cad824f21e8848833a93222ff0a2a3d75385dbd623f4dce1964417e90082c3e9",
          "sha256": "cad824f21e8848833a93222ff0a2a3d75385dbd623f4dce1964417e90082c3e9"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dbmate/blobs/sha256:428861d86b4bd6e82553cdc4ed9151d65a229c9ad832f9b362a5fdc7c894f4d7",
          "sha256": "428861d86b4bd6e82553cdc4ed9151d65a229c9ad832f9b362a5fdc7c894f4d7"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dbmate/blobs/sha256:14d58d273b304d29b0a5b4b4720ee96243f879162ec7ecb9de24c8c0eea0e395",
          "sha256": "14d58d273b304d29b0a5b4b4720ee96243f879162ec7ecb9de24c8c0eea0e395"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dbmate/blobs/sha256:4be4d8e1ddddcd36d43c239c07dc651ce26c00784e52c56de10a254148a87f6d",
          "sha256": "4be4d8e1ddddcd36d43c239c07dc651ce26c00784e52c56de10a254148a87f6d"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/dbmate.rb",
  "ruby_source_checksum": {
    "sha256": "369b92d70e7b721325cecd2c3977138381c38415119e4fd5c85ca5dfac6aba07"
  },
  "date_added": "2019-05-20T21:39:21-04:00",
  "readme": "# Dbmate\n\n[![Release](https://img.shields.io/github/release/amacneil/dbmate.svg)](https://github.com/amacneil/dbmate/releases)\n[![Go Report](https://goreportcard.com/badge/github.com/amacneil/dbmate)](https://goreportcard.com/report/github.com/amacneil/dbmate)\n[![Reference](https://img.shields.io/badge/go.dev-reference-blue?logo=go&logoColor=white)](https://pkg.go.dev/github.com/amacneil/dbmate/v2/pkg/dbmate)\n\nDbmate is a database migration tool that will keep your database schema in sync across multiple developers and your production servers.\n\nIt is a standalone command line tool that can be used with Go, Node.js, Python, Ruby, PHP, or any other language or framework you are using to write database-backed applications. This is especially helpful if you are writing multiple services in different languages, and want to maintain some sanity with consistent development tools.\n\nFor a comparison between dbmate and other popular database schema migration tools, please see [Alternatives](#alternatives).\n\n## Table of Contents\n\n- [Features](#features)\n- [Installation](#installation)\n- [Commands](#commands)\n  - [Command Line Options](#command-line-options)\n- [Usage](#usage)\n  - [Connecting to the Database](#connecting-to-the-database)\n    - [PostgreSQL](#postgresql)\n    - [MySQL](#mysql)\n    - [SQLite](#sqlite)\n    - [ClickHouse](#clickhouse)\n  - [Creating Migrations](#creating-migrations)\n  - [Running Migrations](#running-migrations)\n  - [Rolling Back Migrations](#rolling-back-migrations)\n  - [Migration Options](#migration-options)\n  - [Waiting For The Database](#waiting-for-the-database)\n  - [Exporting Schema File](#exporting-schema-file)\n- [Library](#library)\n  - [Use dbmate as a library](#use-dbmate-as-a-library)\n  - [Embedding migrations](#embedding-migrations)\n- [Concepts](#concepts)\n  - [Migration files](#migration-files)\n  - [Schema file](#schema-file)\n  - [Schema migrations table](#schema-migrations-table)\n- [Alternatives](#alternatives)\n- [Contributing](#contributing)\n\n## Features\n\n- Supports MySQL, PostgreSQL, SQLite, and ClickHouse.\n- Uses plain SQL for writing schema migrations.\n- Migrations are timestamp-versioned, to avoid version number conflicts with multiple developers.\n- Migrations are run atomically inside a transaction.\n- Supports creating and dropping databases (handy in development/test).\n- Supports saving a `schema.sql` file to easily diff schema changes in git.\n- Database connection URL is defined using an environment variable (`DATABASE_URL` by default), or specified on the command line.\n- Built-in support for reading environment variables from your `.env` file.\n- Easy to distribute, single self-contained binary.\n\n## Installation\n\n**NPM**\n\nInstall using [NPM](https://www.npmjs.com/):\n\n```sh\n$ npm install --save-dev dbmate\n$ npx dbmate --help\n```\n\n**macOS**\n\nInstall using [Homebrew](https://brew.sh/):\n\n```sh\n$ brew install dbmate\n```\n\n**Linux**\n\nInstall the binary directly:\n\n```sh\n$ sudo curl -fsSL -o /usr/local/bin/dbmate https://github.com/amacneil/dbmate/releases/latest/download/dbmate-linux-amd64\n$ sudo chmod +x /usr/local/bin/dbmate\n```\n\n**Windows**\n\nInstall using [Scoop](https://scoop.sh)\n\n```pwsh\nscoop install dbmate\n```\n\n**Docker**\n\nDocker images are published to both Docker Hub ([`amacneil/dbmate`](https://hub.docker.com/r/amacneil/dbmate)) and Github Container Registry ([`ghcr.io/amacneil/dbmate`](https://ghcr.io/amacneil/dbmate)).\n\nRemember to set `--network=host` or see [this comment](https://github.com/amacneil/dbmate/issues/128#issuecomment-615924611) for more tips on using dbmate with docker networking):\n\n```sh\n$ docker run --rm -it --network=host ghcr.io/amacneil/dbmate --help\n```\n\nIf you wish to create or apply migrations, you will need to use Docker's [bind mount](https://docs.docker.com/storage/bind-mounts/) feature to make your local working directory (`pwd`) available inside the dbmate container:\n\n```sh\n$ docker run --rm -it --network=host -v \"$(pwd)/db:/db\" ghcr.io/amacneil/dbmate new create_users_table\n```\n\n**Heroku**\n\nTo use dbmate on Heroku, either use the NPM method, or store the linux binary in your git repository:\n\n```sh\n$ mkdir -p bin\n$ curl -fsSL -o bin/dbmate https://github.com/amacneil/dbmate/releases/latest/download/dbmate-linux-amd64\n$ chmod +x bin/dbmate\n$ git add bin/dbmate\n$ git commit -m \"Add dbmate binary\"\n$ git push heroku master\n$ heroku run bin/dbmate --help\n```\n\n## Commands\n\n```sh\ndbmate --help    # print usage help\ndbmate new       # generate a new migration file\ndbmate up        # create the database (if it does not already exist) and run any pending migrations\ndbmate create    # create the database\ndbmate drop      # drop the database\ndbmate migrate   # run any pending migrations\ndbmate rollback  # roll back the most recent migration\ndbmate down      # alias for rollback\ndbmate status    # show the status of all migrations (supports --exit-code and --quiet)\ndbmate dump      # write the database schema.sql file\ndbmate wait      # wait for the database server to become available\n```\n\n### Command Line Options\n\nThe following options are available with all commands. You must use command line arguments in the order `dbmate [global options] command [command options]`. Most options can also be configured via environment variables (and loaded from your `.env` file, which is helpful to share configuration between team members).\n\n- `--url, -u \"protocol://host:port/dbname\"` - specify the database url directly. _(env: `DATABASE_URL`)_\n- `--env, -e \"DATABASE_URL\"` - specify an environment variable to read the database connection URL from.\n- `--migrations-dir, -d \"./db/migrations\"` - where to keep the migration files. _(env: `DBMATE_MIGRATIONS_DIR`)_\n- `--migrations-table \"schema_migrations\"` - database table to record migrations in. _(env: `DBMATE_MIGRATIONS_TABLE`)_\n- `--schema-file, -s \"./db/schema.sql\"` - a path to keep the schema.sql file. _(env: `DBMATE_SCHEMA_FILE`)_\n- `--no-dump-schema` - don't auto-update the schema.sql file on migrate/rollback _(env: `DBMATE_NO_DUMP_SCHEMA`)_\n- `--wait` - wait for the db to become available before executing the subsequent command _(env: `DBMATE_WAIT`)_\n- `--wait-timeout 60s` - timeout for --wait flag _(env: `DBMATE_WAIT_TIMEOUT`)_\n\n## Usage\n\n### Connecting to the Database\n\nDbmate locates your database using the `DATABASE_URL` environment variable by default. If you are writing a [twelve-factor app](http://12factor.net/), you should be storing all connection strings in environment variables.\n\nTo make this easy in development, dbmate looks for a `.env` file in the current directory, and treats any variables listed there as if they were specified in the current environment (existing environment variables take preference, however).\n\nIf you do not already have a `.env` file, create one and add your database connection URL:\n\n```sh\n$ cat .env\nDATABASE_URL=\"postgres://postgres@127.0.0.1:5432/myapp_development?sslmode=disable\"\n```\n\n`DATABASE_URL` should be specified in the following format:\n\n```\nprotocol://username:password@host:port/database_name?options\n```\n\n- `protocol` must be one of `mysql`, `postgres`, `postgresql`, `sqlite`, `sqlite3`, `clickhouse`\n- `host` can be either a hostname or IP address\n- `options` are driver-specific (refer to the underlying Go SQL drivers if you wish to use these)\n\nDbmate can also load the connection URL from a different environment variable. For example, before running your test suite, you may wish to drop and recreate the test database. One easy way to do this is to store your test database connection URL in the `TEST_DATABASE_URL` environment variable:\n\n```sh\n$ cat .env\nDATABASE_URL=\"postgres://postgres@127.0.0.1:5432/myapp_dev?sslmode=disable\"\nTEST_DATABASE_URL=\"postgres://postgres@127.0.0.1:5432/myapp_test?sslmode=disable\"\n```\n\nYou can then specify this environment variable in your test script (Makefile or similar):\n\n```sh\n$ dbmate -e TEST_DATABASE_URL drop\nDropping: myapp_test\n$ dbmate -e TEST_DATABASE_URL --no-dump-schema up\nCreating: myapp_test\nApplying: 20151127184807_create_users_table.sql\n```\n\nAlternatively, you can specify the url directly on the command line:\n\n```sh\n$ dbmate -u \"postgres://postgres@127.0.0.1:5432/myapp_test?sslmode=disable\" up\n```\n\nThe only advantage of using `dbmate -e TEST_DATABASE_URL` over `dbmate -u $TEST_DATABASE_URL` is that the former takes advantage of dbmate's automatic `.env` file loading.\n\n#### PostgreSQL\n\nWhen connecting to Postgres, you may need to add the `sslmode=disable` option to your connection string, as dbmate by default requires a TLS connection (some other frameworks/languages allow unencrypted connections by default).\n\n```sh\nDATABASE_URL=\"postgres://username:password@127.0.0.1:5432/database_name?sslmode=disable\"\n```\n\nA `socket` or `host` parameter can be specified to connect through a unix socket (note: specify the directory only):\n\n```sh\nDATABASE_URL=\"postgres://username:password@/database_name?socket=/var/run/postgresql\"\n```\n\nA `search_path` parameter can be used to specify the [current schema](https://www.postgresql.org/docs/13/ddl-schemas.html#DDL-SCHEMAS-PATH) while applying migrations, as well as for dbmate's `schema_migrations` table.\nIf the schema does not exist, it will be created automatically. If multiple comma-separated schemas are passed, the first will be used for the `schema_migrations` table.\n\n```sh\nDATABASE_URL=\"postgres://username:password@127.0.0.1:5432/database_name?search_path=myschema\"\n```\n\n```sh\nDATABASE_URL=\"postgres://username:password@127.0.0.1:5432/database_name?search_path=myschema,public\"\n```\n\n#### MySQL\n\n```sh\nDATABASE_URL=\"mysql://username:password@127.0.0.1:3306/database_name\"\n```\n\nA `socket` parameter can be specified to connect through a unix socket:\n\n```sh\nDATABASE_URL=\"mysql://username:password@/database_name?socket=/var/run/mysqld/mysqld.sock\"\n```\n\n#### SQLite\n\nSQLite databases are stored on the filesystem, so you do not need to specify a host. By default, files are relative to the current directory. For example, the following will create a database at `./db/database.sqlite3`:\n\n```sh\nDATABASE_URL=\"sqlite:db/database.sqlite3\"\n```\n\nTo specify an absolute path, add a forward slash to the path. The following will create a database at `/tmp/database.sqlite3`:\n\n```sh\nDATABASE_URL=\"sqlite:/tmp/database.sqlite3\"\n```\n\n#### ClickHouse\n\n```sh\nDATABASE_URL=\"clickhouse://username:password@127.0.0.1:9000/database_name\"\n```\n\nTo work with ClickHouse cluster, there are 4 connection query parameters that can be supplied:\n\n- `on_cluster` - Indicataion to use cluster statements and replicated migration table. (default: `false`) If this parameter is not supplied, other cluster related query parameters are ignored.\n```sh\nDATABASE_URL=\"clickhouse://username:password@127.0.0.1:9000/database_name?on_cluster\"\n\nDATABASE_URL=\"clickhouse://username:password@127.0.0.1:9000/database_name?on_cluster=true\"\n```\n\n- `cluster_macro` (Optional) - Macro value to be used for ON CLUSTER statements and for the replciated migration table engine zookeeper path. (default: `{cluster}`)\n\n```sh\nDATABASE_URL=\"clickhouse://username:password@127.0.0.1:9000/database_name?on_cluster&cluster_macro={my_cluster}\"\n```\n\n- `replica_macro` (Optional) - Macro value to be used for the replica name in the replciated migration table engine. (default: `{replica}`)\n\n```sh\nDATABASE_URL=\"clickhouse://username:password@127.0.0.1:9000/database_name?on_cluster&replica_macro={my_replica}\"\n```\n\n- `zoo_path` (Optional) - The path to the table migration in ClickHouse/Zoo Keeper. (default: `/clickhouse/tables/<cluster_macro>/{table}`)\n\n```sh\nDATABASE_URL=\"clickhouse://username:password@127.0.0.1:9000/database_name?on_cluster&zoo_path=/zk/path/tables\"\n```\n\n[See other supported connection options](https://github.com/ClickHouse/clickhouse-go#dsn).\n\n### Creating Migrations\n\nTo create a new migration, run `dbmate new create_users_table`. You can name the migration anything you like. This will create a file `db/migrations/20151127184807_create_users_table.sql` in the current directory:\n\n```sql\n-- migrate:up\n\n-- migrate:down\n```\n\nTo write a migration, simply add your SQL to the `migrate:up` section:\n\n```sql\n-- migrate:up\ncreate table users (\n  id integer,\n  name varchar(255),\n  email varchar(255) not null\n);\n\n-- migrate:down\n```\n\n> Note: Migration files are named in the format `[version]_[description].sql`. Only the version (defined as all leading numeric characters in the file name) is recorded in the database, so you can safely rename a migration file without having any effect on its current application state.\n\n### Running Migrations\n\nRun `dbmate up` to run any pending migrations.\n\n```sh\n$ dbmate up\nCreating: myapp_development\nApplying: 20151127184807_create_users_table.sql\nWriting: ./db/schema.sql\n```\n\n> Note: `dbmate up` will create the database if it does not already exist (assuming the current user has permission to create databases). If you want to run migrations without creating the database, run `dbmate migrate`.\n\nPending migrations are always applied in numerical order. However, dbmate does not prevent migrations from being applied out of order if they are committed independently (for example: if a developer has been working on a branch for a long time, and commits a migration which has a lower version number than other already-applied migrations, dbmate will simply apply the pending migration). See [#159](https://github.com/amacneil/dbmate/issues/159) for a more detailed explanation.\n\n### Rolling Back Migrations\n\nBy default, dbmate doesn't know how to roll back a migration. In development, it's often useful to be able to revert your database to a previous state. To accomplish this, implement the `migrate:down` section:\n\n```sql\n-- migrate:up\ncreate table users (\n  id integer,\n  name varchar(255),\n  email varchar(255) not null\n);\n\n-- migrate:down\ndrop table users;\n```\n\nRun `dbmate rollback` to roll back the most recent migration:\n\n```sh\n$ dbmate rollback\nRolling back: 20151127184807_create_users_table.sql\nWriting: ./db/schema.sql\n```\n\n### Migration Options\n\ndbmate supports options passed to a migration block in the form of `key:value` pairs. List of supported options:\n\n- `transaction`\n\n**transaction**\n\n`transaction` is useful if you need to run some SQL which cannot be executed from within a transaction. For example, in Postgres, you would need to disable transactions for migrations that alter an enum type to add a value:\n\n```sql\n-- migrate:up transaction:false\nALTER TYPE colors ADD VALUE 'orange' AFTER 'red';\n```\n\n`transaction` will default to `true` if your database supports it.\n\n### Waiting For The Database\n\nIf you use a Docker development environment for your project, you may encounter issues with the database not being immediately ready when running migrations or unit tests. This can be due to the database server having only just started.\n\nIn general, your application should be resilient to not having a working database connection on startup. However, for the purpose of running migrations or unit tests, this is not practical. The `wait` command avoids this situation by allowing you to pause a script or other application until the database is available. Dbmate will attempt a connection to the database server every second, up to a maximum of 60 seconds.\n\nIf the database is available, `wait` will return no output:\n\n```sh\n$ dbmate wait\n```\n\nIf the database is unavailable, `wait` will block until the database becomes available:\n\n```sh\n$ dbmate wait\nWaiting for database....\n```\n\nYou can also use the `--wait` flag with other commands if you sometimes see failures caused by the database not yet being ready:\n\n```sh\n$ dbmate --wait up\nWaiting for database....\nCreating: myapp_development\n```\n\nYou can customize the timeout using `--wait-timeout` (default 60s). If the database is still not available, the command will return an error:\n\n```sh\n$ dbmate --wait-timeout=5s wait\nWaiting for database.....\nError: unable to connect to database: dial tcp 127.0.0.1:5432: connect: connection refused\n```\n\nPlease note that the `wait` command does not verify whether your specified database exists, only that the server is available and ready (so it will return success if the database server is available, but your database has not yet been created).\n\n### Exporting Schema File\n\nWhen you run the `up`, `migrate`, or `rollback` commands, dbmate will automatically create a `./db/schema.sql` file containing a complete representation of your database schema. Dbmate keeps this file up to date for you, so you should not manually edit it.\n\nIt is recommended to check this file into source control, so that you can easily review changes to the schema in commits or pull requests. It's also possible to use this file when you want to quickly load a database schema, without running each migration sequentially (for example in your test harness). However, if you do not wish to save this file, you could add it to your `.gitignore`, or pass the `--no-dump-schema` command line option.\n\nTo dump the `schema.sql` file without performing any other actions, run `dbmate dump`. Unlike other dbmate actions, this command relies on the respective `pg_dump`, `mysqldump`, or `sqlite3` commands being available in your PATH. If these tools are not available, dbmate will silenty skip the schema dump step during `up`, `migrate`, or `rollback` actions. You can diagnose the issue by running `dbmate dump` and looking at the output:\n\n```sh\n$ dbmate dump\nexec: \"pg_dump\": executable file not found in $PATH\n```\n\nOn Ubuntu or Debian systems, you can fix this by installing `postgresql-client`, `mysql-client`, or `sqlite3` respectively. Ensure that the package version you install is greater than or equal to the version running on your database server.\n\n> Note: The `schema.sql` file will contain a complete schema for your database, even if some tables or columns were created outside of dbmate migrations.\n\n## Library\n\n### Use dbmate as a library\n\nDbmate is designed to be used as a CLI with any language or framework, but it can also be used as a library in a Go application.\n\nHere is a simple example. Remember to import the driver you need!\n\n```go\npackage main\n\nimport (\n\t\"net/url\"\n\n\t\"github.com/amacneil/dbmate/v2/pkg/dbmate\"\n\t_ \"github.com/amacneil/dbmate/v2/pkg/driver/sqlite\"\n)\n\nfunc main() {\n\tu, _ := url.Parse(\"sqlite:foo.sqlite3\")\n\tdb := dbmate.New(u)\n\n\terr := db.CreateAndMigrate()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n```\n\nSee the [reference documentation](https://pkg.go.dev/github.com/amacneil/dbmate/v2/pkg/dbmate) for more options.\n\n### Embedding migrations\n\nMigrations can be embedded into your application binary using Go's [embed](https://pkg.go.dev/embed) functionality.\n\nUse `db.FS` to specify the filesystem used for reading migrations:\n\n```go\npackage main\n\nimport (\n\t\"embed\"\n\t\"fmt\"\n\t\"net/url\"\n\n\t\"github.com/amacneil/dbmate/v2/pkg/dbmate\"\n\t_ \"github.com/amacneil/dbmate/v2/pkg/driver/sqlite\"\n)\n\n//go:embed db/migrations/*.sql\nvar fs embed.FS\n\nfunc main() {\n\tu, _ := url.Parse(\"sqlite:foo.sqlite3\")\n\tdb := dbmate.New(u)\n\tdb.FS = fs\n\n\tfmt.Println(\"Migrations:\")\n\tmigrations, err := db.FindMigrations()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfor _, m := range migrations {\n\t\tfmt.Println(m.Version, m.FilePath)\n\t}\n\n\tfmt.Println(\"\\nApplying...\")\n\terr = db.CreateAndMigrate()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n```\n\n## Concepts\n\n### Migration files\n\nMigration files are very simple, and are stored in `./db/migrations` by default. You can create a new migration file named `[date]_create_users.sql` by running `dbmate new create_users`.\nHere is an example:\n\n```sql\n-- migrate:up\ncreate table users (\n  id integer,\n  name varchar(255),\n);\n\n-- migrate:down\ndrop table if exists users;\n```\n\nBoth up and down migrations are stored in the same file, for ease of editing. Both up and down directives are required, even if you choose not to implement the down migration.\n\nWhen you apply a migration dbmate only stores the version number, not the contents, so you should always rollback a migration before modifying its contents. For this reason, you can safely rename a migration file without affecting its applied status, as long as you keep the version number intact.\n\n### Schema file\n\nThe schema file is written to `./db/schema.sql` by default. It is a complete dump of your database schema, including any applied migrations, and any other modifications you have made.\n\nThis file should be checked in to source control, so that you can easily compare the diff of a migration. You can use the schema file to quickly restore your database without needing to run all migrations.\n\n### Schema migrations table\n\nDbmate stores a record of each applied migration in table named `schema_migrations`. This table will be created for you automatically if it does not already exist.\n\nThe table is very simple:\n\n```sql\nCREATE TABLE IF NOT EXISTS schema_migrations (\n  version VARCHAR(255) PRIMARY KEY\n)\n```\n\nYou can customize the name of this table using the `--migrations-table` flag or `DBMATE_MIGRATIONS_TABLE` environment variable.\n\n## Alternatives\n\nWhy another database schema migration tool? Dbmate was inspired by many other tools, primarily [Active Record Migrations](http://guides.rubyonrails.org/active_record_migrations.html), with the goals of being trivial to configure, and language & framework independent. Here is a comparison between dbmate and other popular migration tools.\n\n|                                                              | [dbmate](https://github.com/amacneil/dbmate) | [goose](https://github.com/pressly/goose) | [sql-migrate](https://github.com/rubenv/sql-migrate) | [golang-migrate](https://github.com/golang-migrate/migrate) | [activerecord](http://guides.rubyonrails.org/active_record_migrations.html) | [sequelize](http://docs.sequelizejs.com/manual/tutorial/migrations.html) | [flyway](https://flywaydb.org/) | [sqitch](https://sqitch.org/) |\n| ------------------------------------------------------------ | :------------------------------------------: | :---------------------------------------: | :--------------------------------------------------: | :---------------------------------------------------------: | :-------------------------------------------------------------------------: | :----------------------------------------------------------------------: | :-----------------------------: | :---------------------------: |\n| **Features**                                                 |\n| Plain SQL migration files                                    |              :white_check_mark:              |            :white_check_mark:             |                  :white_check_mark:                  |                     :white_check_mark:                      |                                                                             |                                                                          |       :white_check_mark:        |      :white_check_mark:       |\n| Support for creating and dropping databases                  |              :white_check_mark:              |                                           |                                                      |                                                             |                             :white_check_mark:                              |                                                                          |                                 |\n| Support for saving schema dump files                         |              :white_check_mark:              |                                           |                                                      |                                                             |                             :white_check_mark:                              |                                                                          |                                 |\n| Timestamp-versioned migration files                          |              :white_check_mark:              |            :white_check_mark:             |                                                      |                     :white_check_mark:                      |                             :white_check_mark:                              |                            :white_check_mark:                            |                                 |\n| Custom schema migrations table                               |              :white_check_mark:              |                                           |                  :white_check_mark:                  |                                                             |                                                                             |                            :white_check_mark:                            |       :white_check_mark:        |\n| Ability to wait for database to become ready                 |              :white_check_mark:              |                                           |                                                      |                                                             |                                                                             |                                                                          |                                 |\n| Database connection string loaded from environment variables |              :white_check_mark:              |                                           |                                                      |                                                             |                                                                             |                                                                          |       :white_check_mark:        |\n| Automatically load .env file                                 |              :white_check_mark:              |                                           |                                                      |                                                             |                                                                             |                                                                          |                                 |\n| No separate configuration file                               |              :white_check_mark:              |              :white_check_mark:           |                                                      |                     :white_check_mark:                      |                             :white_check_mark:                              |                            :white_check_mark:                            |                                 |\n| Language/framework independent                               |              :white_check_mark:              |            :white_check_mark:             |                                                      |                     :white_check_mark:                      |                                                                             |                                                                          |       :white_check_mark:        |      :white_check_mark:       |\n| **Drivers**                                                  |\n| PostgreSQL                                                   |              :white_check_mark:              |            :white_check_mark:             |                  :white_check_mark:                  |                     :white_check_mark:                      |                             :white_check_mark:                              |                            :white_check_mark:                            |       :white_check_mark:        |      :white_check_mark:       |\n| MySQL                                                        |              :white_check_mark:              |            :white_check_mark:             |                  :white_check_mark:                  |                     :white_check_mark:                      |                             :white_check_mark:                              |                            :white_check_mark:                            |       :white_check_mark:        |      :white_check_mark:       |\n| SQLite                                                       |              :white_check_mark:              |            :white_check_mark:             |                  :white_check_mark:                  |                     :white_check_mark:                      |                             :white_check_mark:                              |                            :white_check_mark:                            |       :white_check_mark:        |      :white_check_mark:       |\n| CliсkHouse                                                   |              :white_check_mark:              |                                           |                                                      |                     :white_check_mark:                      |                             :white_check_mark:                              |                            :white_check_mark:                            |                                 |\n\n_If you notice any inaccuracies in this table, please [propose a change](https://github.com/amacneil/dbmate/edit/main/README.md)._\n\n## Contributing\n\nDbmate is written in Go, pull requests are welcome.\n\nTests are run against a real database using docker-compose. To build a docker image and run the tests:\n\n```sh\n$ make docker-all\n```\n\nTo start a development shell:\n\n```sh\n$ make docker-sh\n```"
}
