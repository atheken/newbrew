{
  "name": "switch-lan-play",
  "full_name": "switch-lan-play",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Make you and your friends play games like in a LAN",
  "license": "GPL-3.0-or-later",
  "homepage": "https://github.com/spacemeowx2/switch-lan-play",
  "versions": {
    "stable": "0.2.3",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/spacemeowx2/switch-lan-play.git",
      "tag": "v0.2.3",
      "revision": "c0c663e3fdc95d6d6e8ab401caa2bfb5b5872e00",
      "checksum": null
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/switch-lan-play/blobs/sha256:b4caf1d51243835a1c8816372f07bce843840f38f0a8ceaad42dbd19c15fe9c5",
          "sha256": "b4caf1d51243835a1c8816372f07bce843840f38f0a8ceaad42dbd19c15fe9c5"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/switch-lan-play/blobs/sha256:f119af26760223542641ba4596c31ae3b4418b6ed955a2d5198fdc15aa6d23d5",
          "sha256": "f119af26760223542641ba4596c31ae3b4418b6ed955a2d5198fdc15aa6d23d5"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/switch-lan-play/blobs/sha256:ae86854d36264397768367d7ce69466967e303b5047828a6720c6574101a24b8",
          "sha256": "ae86854d36264397768367d7ce69466967e303b5047828a6720c6574101a24b8"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/switch-lan-play/blobs/sha256:a27b8f98ef87fb078982323e661eb8c2368cb21dac8263c9590e805a7cb84679",
          "sha256": "a27b8f98ef87fb078982323e661eb8c2368cb21dac8263c9590e805a7cb84679"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/switch-lan-play/blobs/sha256:5913dc50feffc96b3c7a1a6e76df7f4701d6ec8051a3ce2c8cd67c73e10785a9",
          "sha256": "5913dc50feffc96b3c7a1a6e76df7f4701d6ec8051a3ce2c8cd67c73e10785a9"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/switch-lan-play/blobs/sha256:520620d6ae69e98a169edda5ed47b0ebb496a843eedacda867b1eb52b14c007e",
          "sha256": "520620d6ae69e98a169edda5ed47b0ebb496a843eedacda867b1eb52b14c007e"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/switch-lan-play/blobs/sha256:caa1992416c8eae4c281af3166238bb2bf8104c1d91d7dc37a2abd8715712ccc",
          "sha256": "caa1992416c8eae4c281af3166238bb2bf8104c1d91d7dc37a2abd8715712ccc"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/switch-lan-play/blobs/sha256:62da027220b8d01270c8459cec638744ed06eac2ec046ccff56729b7f126eacf",
          "sha256": "62da027220b8d01270c8459cec638744ed06eac2ec046ccff56729b7f126eacf"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/switch-lan-play/blobs/sha256:41a10e6d0ce45410763c4774afa4286a8c633ac60348c0d0963e33cbef855c1d",
          "sha256": "41a10e6d0ce45410763c4774afa4286a8c633ac60348c0d0963e33cbef855c1d"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/switch-lan-play/blobs/sha256:b0575f08e99046febb1ff6e1c00f02ab5b1bfa3e4b944828d0c858339748989b",
          "sha256": "b0575f08e99046febb1ff6e1c00f02ab5b1bfa3e4b944828d0c858339748989b"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "libpcap"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/switch-lan-play.rb",
  "ruby_source_checksum": {
    "sha256": "068036ae2a72d311e73201a1eccb5177c44189ee9ffad3c57d331876abe21b28"
  },
  "date_added": "2018-12-25T00:13:09+01:00",
  "readme": "# switch-lan-play\n[![Build status](https://github.com/spacemeowx2/switch-lan-play/workflows/Build/badge.svg)](https://github.com/spacemeowx2/switch-lan-play/actions?query=workflow%3ABuild)\n[![Chat on discord](https://img.shields.io/badge/chat-on%20discord-7289da.svg)](https://discord.gg/zEMCu5n)\n\nEnglish | [中文](README_zh.md)\n\nMake you and your friends play games like in a LAN.\n\n```\n                     Internet\n                        |\n                  [SOCKS5 Proxy] (optional)\n                        |\n        ARP,IPv4        |          LAN Packets\nSwitch <-------->  PC(lan-play)  <-------------> Server\n                                       UDP\n```\n\n**NOTE:**\n* This project is in an early stage. The protocol may change frequently.\n\n# Usage\n\nTo play with your friends, you and your friends should run lan-play client connecting to the **same** Server on your PC, and set static IP on your Switch.\n\nYour PC and Switch **must** be connected to the same router.\n\nVisit [https://www.lan-play.com/](http://lan-play.com/install-switch) for steps on how to set this up. See below for build instructions.\n\n## SOCKS5 Proxy\n\nlan-play --socks5-server-addr example.com:1080\n\nData sent to the relay server does not pass through the proxy.\n\n# Build\n\n## Debug or Release\n\n`cmake -DCMAKE_BUILD_TYPE=Debug ..`\n`cmake -DCMAKE_BUILD_TYPE=Release ..`\n\n## Ubuntu / Debian\n\nThis project depends on libpcap, you can install libpcap0.8-dev on Ubuntu or Debian:\n\n`sudo apt install libpcap0.8-dev git gcc g++ cmake`\n\nPrepare a cmake, gcc, and run like this:\n\n```sh\nmkdir build\ncd build\ncmake ..\nmake\n```\n\n## Windows\n\nUse [MSYS2](http://www.msys2.org/) to compile.\n\n```sh\npacman -Sy\npacman -S make \\\n    mingw-w64-x86_64-cmake \\\n    mingw-w64-x86_64-gcc\n```\n\nTo compile 32bit program:\n\n```sh\npacman -S mingw-w64-i686-cmake \\\n    mingw-w64-i686-gcc\n```\n\nOpen `MSYS2 MinGW 64-bit` or `MSYS2 MinGW 32-bit`.\n\n```sh\nmkdir build\ncd build\ncmake -G \"MSYS Makefiles\" ..\nmake\n```\n\n## Mac OS\n\n```sh\nbrew install cmake\n```\n\n```sh\nmkdir build\ncd build\ncmake ..\nmake\n```\n\n# Server\n\n## Docker\n\n`docker run -d -p 11451:11451/udp -p 11451:11451/tcp spacemeowx2/switch-lan-play`\n\n## Node\n\n```sh\ngit clone https://github.com/spacemeowx2/switch-lan-play\ncd switch-lan-play/server\nnpm install\nnpm run build # build ts to js. run it again when code changed.\nnpm start\n```\n\nUse `--port` pass the port parameter, or else it will use  `11451/udp` as default.\n\nUse `--simpleAuth` pass the auth via username and password, or else there's no authentication.\n\nUse `--httpAuth` pass the auth via http url, or else there's no authentication.\n\nUse `--jsonAuth` pass the auth via json file, or else there's no authentication.\n\nExample:\n\n```sh\nnpm run build\nnpm start -- --port 10086 --simpleAuth username:password\n```\n\nMeanwhile the monitor service will be started on port `11451/tcp` by default, you can get online client count via HTTP request:\n\nRequest: `GET http://{YOUR_SERVER_IP}:11451/info`\n\nResponse: `{ \"online\": 42 }`\n\n\n# Protocol\n\nThe protocol is very simple now, but I'm going to add some fileds to calculate network quality(packet loss, ping), like timestamp, seq_id, etc.\n\n```c\nstruct packet {\n    uint8_t type;\n    uint8_t payload[packet_len - 1];\n};\n```\n\n```c\nenum type {\n    KEEPALIVE = 0,\n    IPV4 = 1,\n    PING = 2,\n    IPV4_FRAG = 3\n};\n```\n\nThe server can read IP addresses from payload and save source IP -> LAN IP to a cache table. If target ip address shown in payload doesn't hit the cache, broadcast this packet to the entire room(now a server is a room)."
}
