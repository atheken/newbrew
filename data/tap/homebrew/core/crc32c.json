{
  "name": "crc32c",
  "full_name": "crc32c",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Implementation of CRC32C with CPU-specific acceleration",
  "license": "BSD-3-Clause",
  "homepage": "https://github.com/google/crc32c",
  "versions": {
    "stable": "1.1.2",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/google/crc32c/archive/1.1.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "ac07840513072b7fcebda6e821068aa04889018f24e10e46181068fb214d7e56"
    },
    "head": {
      "url": "https://github.com/google/crc32c.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/crc32c/blobs/sha256:3ada0a95e5f4b33f6a5caf7e56d9bfe608b44f01c7fd1be0db8f30d4102a473d",
          "sha256": "3ada0a95e5f4b33f6a5caf7e56d9bfe608b44f01c7fd1be0db8f30d4102a473d"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/crc32c/blobs/sha256:f36a8347a3c402b0f13b407fe0c99e1a2b067722cebf22f62a2f9916be2118fe",
          "sha256": "f36a8347a3c402b0f13b407fe0c99e1a2b067722cebf22f62a2f9916be2118fe"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/crc32c/blobs/sha256:1e4ac6f8e18ad96c1d7b5e899902b6ce75d56953582066570de4ecc2329409a9",
          "sha256": "1e4ac6f8e18ad96c1d7b5e899902b6ce75d56953582066570de4ecc2329409a9"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/crc32c/blobs/sha256:838b9ec85a464004ec90f99348eaca5a2432de5ea2cd671d8bf454f5b4106612",
          "sha256": "838b9ec85a464004ec90f99348eaca5a2432de5ea2cd671d8bf454f5b4106612"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/crc32c/blobs/sha256:54317f1800ac7c165ada3b28a40c675e0848626901e654939e86966de36e4579",
          "sha256": "54317f1800ac7c165ada3b28a40c675e0848626901e654939e86966de36e4579"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/crc32c/blobs/sha256:af7b55946ef4fb6f20e4ef31c77c0d23cc7e8e34861f8e96b367f801c611592b",
          "sha256": "af7b55946ef4fb6f20e4ef31c77c0d23cc7e8e34861f8e96b367f801c611592b"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/crc32c/blobs/sha256:f4301aa03c705f8ab3fddd34090b30975306f4e159d32bd4f305dcac73914544",
          "sha256": "f4301aa03c705f8ab3fddd34090b30975306f4e159d32bd4f305dcac73914544"
        },
        "mojave": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/crc32c/blobs/sha256:7c59f41017496aa5997f0a43ca0b17f0676c665f782df0687e44fa542b9c0a42",
          "sha256": "7c59f41017496aa5997f0a43ca0b17f0676c665f782df0687e44fa542b9c0a42"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/crc32c/blobs/sha256:6d1d82ebed58e6c35064358c5a04428b6bb053413be7b11b2c14e4cbcd156205",
          "sha256": "6d1d82ebed58e6c35064358c5a04428b6bb053413be7b11b2c14e4cbcd156205"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/crc32c.rb",
  "ruby_source_checksum": {
    "sha256": "e9837105377a8cdacd1e2eedfc7ba0acbabb3817589ff5a8883b31b203126115"
  },
  "date_added": "2017-10-07T20:29:26-07:00",
  "readme": "# CRC32C\n\n[![Build Status](https://github.com/google/crc32c/actions/workflows/build.yml/badge.svg)](https://github.com/google/crc32c/actions/workflows/build.yml)\n\nNew file format authors should consider\n[HighwayHash](https://github.com/google/highwayhash). The initial version of\nthis code was extracted from [LevelDB](https://github.com/google/leveldb), which\nis a stable key-value store that is widely used at Google.\n\nThis project collects a few CRC32C implementations under an umbrella that\ndispatches to a suitable implementation based on the host computer's hardware\ncapabilities.\n\nCRC32C is specified as the CRC that uses the iSCSI polynomial in\n[RFC 3720](https://tools.ietf.org/html/rfc3720#section-12.1). The polynomial was\nintroduced by G. Castagnoli, S. Braeuer and M. Herrmann. CRC32C is used in\nsoftware such as Btrfs, ext4, Ceph and leveldb.\n\n\n## Usage\n\n```cpp\n#include \"crc32c/crc32c.h\"\n\nint main() {\n  const std::uint8_t buffer[] = {0, 0, 0, 0};\n  std::uint32_t result;\n\n  // Process a raw buffer.\n  result = crc32c::Crc32c(buffer, 4);\n\n  // Process a std::string.\n  std::string string;\n  string.resize(4);\n  result = crc32c::Crc32c(string);\n\n  // If you have C++17 support, process a std::string_view.\n  std::string_view string_view(string);\n  result = crc32c::Crc32c(string_view);\n\n  return 0;\n}\n```\n\n\n## Prerequisites\n\nThis project uses [CMake](https://cmake.org/) for building and testing. CMake is\navailable in all popular Linux distributions, as well as in\n[Homebrew](https://brew.sh/).\n\nThis project uses submodules for dependency management.\n\n```bash\ngit submodule update --init --recursive\n```\n\nIf you're using [Atom](https://atom.io/), the following packages can help.\n\n```bash\napm install autocomplete-clang build build-cmake clang-format language-cmake \\\n    linter linter-clang\n```\n\nIf you don't mind more setup in return for more speed, replace\n`autocomplete-clang` and `linter-clang` with `you-complete-me`. This requires\n[setting up ycmd](https://github.com/ycm-core/ycmd#building).\n\n```bash\napm install autocomplete-plus build build-cmake clang-format language-cmake \\\n    linter you-complete-me\n```\n\n## Building\n\nThe following commands build and install the project.\n\n```bash\nmkdir build\ncd build\ncmake -DCRC32C_BUILD_TESTS=0 -DCRC32C_BUILD_BENCHMARKS=0 .. && make all install\n```\n\n\n## Development\n\nThe following command (when executed from `build/`) (re)builds the project and\nruns the tests.\n\n```bash\ncmake .. && cmake --build . && ctest --output-on-failure\n```\n\n\n### Android testing\n\nThe following command builds the project against the Android NDK, which is\nuseful for benchmarking against ARM processors.\n\n```bash\ncmake .. -DCMAKE_SYSTEM_NAME=Android -DCMAKE_ANDROID_ARCH_ABI=arm64-v8a \\\n    -DCMAKE_ANDROID_NDK=$HOME/Library/Android/sdk/ndk-bundle \\\n    -DCMAKE_ANDROID_NDK_TOOLCHAIN_VERSION=clang \\\n    -DCMAKE_ANDROID_STL_TYPE=c++_static -DCRC32C_USE_GLOG=0 \\\n    -DCMAKE_BUILD_TYPE=Release && cmake --build .\n```\n\nThe following commands install and run the benchmarks.\n\n```bash\nadb push crc32c_bench /data/local/tmp\nadb shell chmod +x /data/local/tmp/crc32c_bench\nadb shell 'cd /data/local/tmp && ./crc32c_bench'\nadb shell rm /data/local/tmp/crc32c_bench\n```\n\nThe following commands install and run the tests.\n\n```bash\nadb push crc32c_tests /data/local/tmp\nadb shell chmod +x /data/local/tmp/crc32c_tests\nadb shell 'cd /data/local/tmp && ./crc32c_tests'\nadb shell rm /data/local/tmp/crc32c_tests\n```"
}
