{
  "name": "clfft",
  "full_name": "clfft",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "FFT functions written in OpenCL",
  "license": "Apache-2.0",
  "homepage": "https://github.com/clMathLibraries/clFFT",
  "versions": {
    "stable": "2.12.2",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/clMathLibraries/clFFT/archive/v2.12.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "e7348c146ad48c6a3e6997b7702202ad3ee3b5df99edf7ef00bbacc21e897b12"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/clfft/blobs/sha256:f205f1d0cea3ba0995082ded5308366509eeb5778febbf76bcb2d97207b68b21",
          "sha256": "f205f1d0cea3ba0995082ded5308366509eeb5778febbf76bcb2d97207b68b21"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/clfft/blobs/sha256:4e3ae9eb8cce23e1c7b8c3a48b907a18c978984c23110f8097171c534c3e835a",
          "sha256": "4e3ae9eb8cce23e1c7b8c3a48b907a18c978984c23110f8097171c534c3e835a"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/clfft/blobs/sha256:e93308625e31264589892e72cd4742ee2b4fcf789963d682884b8f6691ff527b",
          "sha256": "e93308625e31264589892e72cd4742ee2b4fcf789963d682884b8f6691ff527b"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/clfft/blobs/sha256:d4c32426e87a7aa85c3767cf983a290ccd35aa0cb4b3344859be7ba5e93b2892",
          "sha256": "d4c32426e87a7aa85c3767cf983a290ccd35aa0cb4b3344859be7ba5e93b2892"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/clfft/blobs/sha256:419694c9a979ae22c673a79bf2fa29fe6888f7243dcdd7dd38882af4ead720d6",
          "sha256": "419694c9a979ae22c673a79bf2fa29fe6888f7243dcdd7dd38882af4ead720d6"
        },
        "mojave": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/clfft/blobs/sha256:2f502a8f1c11e5c01dd0141d83935cfd0e357dd75a352848564260c49da400aa",
          "sha256": "2f502a8f1c11e5c01dd0141d83935cfd0e357dd75a352848564260c49da400aa"
        },
        "high_sierra": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/clfft/blobs/sha256:1e3aca16a694b761c0267c0dfdd9933d43cddd3ed0ea9d20fd4016222a7748f9",
          "sha256": "1e3aca16a694b761c0267c0dfdd9933d43cddd3ed0ea9d20fd4016222a7748f9"
        },
        "sierra": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/clfft/blobs/sha256:009c0a8a81d783393abc8ca6307631c50e50ba72dc09e3f2cda5f2e2d8aa617c",
          "sha256": "009c0a8a81d783393abc8ca6307631c50e50ba72dc09e3f2cda5f2e2d8aa617c"
        },
        "el_capitan": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/clfft/blobs/sha256:369c0df6b06b7ea116120e177a44a54760cc4d7132a1fb59a83ef52a99a6b5f4",
          "sha256": "369c0df6b06b7ea116120e177a44a54760cc4d7132a1fb59a83ef52a99a6b5f4"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "boost",
    "cmake"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": true,
  "deprecation_date": "2023-03-10",
  "deprecation_reason": "unmaintained",
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/clfft.rb",
  "ruby_source_checksum": {
    "sha256": "738a3a852fb3d0e16389c213465ea1228e32eb4b448bffb095219a56ea5a753b"
  },
  "date_added": "2017-08-20T15:04:24+02:00",
  "readme": "ï»¿## Build Status\n| Build branch | master | develop |\n|-----|-----|-----|\n| GCC/Clang x64 | [![Build Status](https://travis-ci.org/clMathLibraries/clFFT.svg?branch=master)](https://travis-ci.org/clMathLibraries/clFFT/branches) | [![Build Status](https://travis-ci.org/clMathLibraries/clFFT.svg?branch=develop)](https://travis-ci.org/clMathLibraries/clFFT/branches) |\n| Visual Studio x64 |  |[![Build status](https://ci.appveyor.com/api/projects/status/facii32v72y98opv/branch/develop?svg=true)](https://ci.appveyor.com/project/kknox/clfft-whc3m/branch/develop) |\n\nclFFT\n=====\nclFFT is a software library containing FFT functions written\nin OpenCL. In addition to GPU devices, the library also supports\nrunning on CPU devices to facilitate debugging and heterogeneous\nprogramming.\n\nPre-built binaries are available [here][binary_release].\n\n## What's New\n\n-   Support for powers of 11&13 size transforms\n-   Support for 1D large size transforms with no extra memory allocation\n    requirement with environment flag CLFFT_REQUEST_LIB_NOMEMALLOC=1\n    for complex FFTs of powers of 2,3,5,10 sizes\n\n\n## Note\n\n-   clFFT requires platform/runtime that supports OpenCL 1.2\n\n## Introduction to clFFT\n\nThe FFT is an implementation of the Discrete Fourier Transform (DFT)\nthat makes use of symmetries in the FFT definition to reduce the\nmathematical intensity required from O(N^2) to O(N log2(N)) when the\nsequence length N is the product of small prime factors. Currently,\nthere is no standard API for FFT routines. Hardware vendors usually\nprovide a set of high-performance FFTs optimized for their systems: no\ntwo vendors employ the same interfaces for their FFT routines. clFFT\nprovides a set of FFT routines that are optimized for AMD graphics\nprocessors, but also are functional across CPU and other compute\ndevices.\n\nThe clFFT library is an open source OpenCL library implementation of\ndiscrete Fast Fourier Transforms. The library:\n\n-   provides a fast and accurate platform for calculating discrete FFTs.\n\n-   works on CPU or GPU backends.\n\n-   supports in-place or out-of-place transforms.\n\n-   supports 1D, 2D, and 3D transforms with a batch size that can be\n    greater than 1.\n\n-   supports planar (real and complex components in separate arrays) and\n    interleaved (real and complex components as a pair contiguous in\n    memory) formats.\n\n-   supports dimension lengths that can be any combination of powers of\n    2, 3, 5, 7, 11 and 13.\n\n-   Supports single and double precision floating point formats.\n\n## clFFT library user documentation\n\n[Library and API documentation][] for developers is available online as\na GitHub Pages website\n\n### Google Groups\n\nTwo mailing lists exist for the clMath projects:\n\n-   [clmath@googlegroups.com][] - group whose focus is to answer\n    questions on using the library or reporting issues\n\n-   [clmath-developers@googlegroups.com][] - group whose focus is for\n    developers interested in contributing to the library code\n\n### API semantic versioning\nGood software is typically the result of the loop of feedback and iteration; software \ninterfaces no less so. clFFT follows the [semantic versioning] guidelines. The version\nnumber used is of the form MAJOR.MINOR.PATCH.\n\n## clFFT Wiki\n\nThe [project wiki][clmath@googlegroups.com] contains helpful\ndocumentation, including a [build\nprimer][clmath-developers@googlegroups.com]\n\n## Contributing code\n\nPlease refer to and read the [Contributing][] document for guidelines on\nhow to contribute code to this open source project. The code in the\n/master branch is considered to be stable, and all pull-requests must\nbe made against the /develop branch.\n\n## License\n\nThe source for clFFT is licensed under the [Apache License, Version\n2.0][]\n\n## Example\n\nThe following simple example shows how to use clFFT to compute a simple 1D\nforward transform\n```c\n#include <stdlib.h>\n\n/* No need to explicitely include the OpenCL headers */\n#include <clFFT.h>\n\nint main( void )\n{\n    cl_int err;\n    cl_platform_id platform = 0;\n    cl_device_id device = 0;\n    cl_context_properties props[3] = { CL_CONTEXT_PLATFORM, 0, 0 };\n    cl_context ctx = 0;\n    cl_command_queue queue = 0;\n    cl_mem bufX;\n\tfloat *X;\n    cl_event event = NULL;\n    int ret = 0;\n\tsize_t N = 16;\n\n\t/* FFT library realted declarations */\n\tclfftPlanHandle planHandle;\n\tclfftDim dim = CLFFT_1D;\n\tsize_t clLengths[1] = {N};\n\n    /* Setup OpenCL environment. */\n    err = clGetPlatformIDs( 1, &platform, NULL );\n    err = clGetDeviceIDs( platform, CL_DEVICE_TYPE_GPU, 1, &device, NULL );\n\n    props[1] = (cl_context_properties)platform;\n    ctx = clCreateContext( props, 1, &device, NULL, NULL, &err );\n    queue = clCreateCommandQueue( ctx, device, 0, &err );\n\n    /* Setup clFFT. */\n\tclfftSetupData fftSetup;\n\terr = clfftInitSetupData(&fftSetup);\n\terr = clfftSetup(&fftSetup);\n\n\t/* Allocate host & initialize data. */\n\t/* Only allocation shown for simplicity. */\n\tX = (float *)malloc(N * 2 * sizeof(*X));\n\n    /* Prepare OpenCL memory objects and place data inside them. */\n    bufX = clCreateBuffer( ctx, CL_MEM_READ_WRITE, N * 2 * sizeof(*X), NULL, &err );\n\n    err = clEnqueueWriteBuffer( queue, bufX, CL_TRUE, 0,\n\tN * 2 * sizeof( *X ), X, 0, NULL, NULL );\n\n\t/* Create a default plan for a complex FFT. */\n\terr = clfftCreateDefaultPlan(&planHandle, ctx, dim, clLengths);\n\n\t/* Set plan parameters. */\n\terr = clfftSetPlanPrecision(planHandle, CLFFT_SINGLE);\n\terr = clfftSetLayout(planHandle, CLFFT_COMPLEX_INTERLEAVED, CLFFT_COMPLEX_INTERLEAVED);\n\terr = clfftSetResultLocation(planHandle, CLFFT_INPLACE);\n\n    /* Bake the plan. */\n\terr = clfftBakePlan(planHandle, 1, &queue, NULL, NULL);\n\n\t/* Execute the plan. */\n\terr = clfftEnqueueTransform(planHandle, CLFFT_FORWARD, 1, &queue, 0, NULL, NULL, &bufX, NULL, NULL);\n\n\t/* Wait for calculations to be finished. */\n\terr = clFinish(queue);\n\n\t/* Fetch results of calculations. */\n\terr = clEnqueueReadBuffer( queue, bufX, CL_TRUE, 0, N * 2 * sizeof( *X ), X, 0, NULL, NULL );\n\n    /* Release OpenCL memory objects. */\n    clReleaseMemObject( bufX );\n\n\tfree(X);\n\n\t/* Release the plan. */\n\terr = clfftDestroyPlan( &planHandle );\n\n    /* Release clFFT library. */\n    clfftTeardown( );\n\n    /* Release OpenCL working objects. */\n    clReleaseCommandQueue( queue );\n    clReleaseContext( ctx );\n\n    return ret;\n}\n```\n\n## Build dependencies\n\n### Library for Windows   \nTo develop the clFFT library code on a Windows operating system, ensure to install the following packages on your system:\n\n-   WindowsÂ® 7/8.1\n\n-   Visual Studio 2012 or later\n\n-   Latest CMake\n\n-   An OpenCL SDK, such as APP SDK 3.0\n\n### Library for Linux\nTo develop the clFFT library code on a Linux operating system, ensure to install the following packages on your system:\n-   GCC 4.6 and onwards\n\n-   Latest CMake\n\n-   An OpenCL SDK, such as APP SDK 3.0\n\n### Library for Mac OSX\nTo develop the clFFT library code on a Mac OS X, it is recommended to generate Unix makefiles with cmake.\n\n### Test infrastructure\nTo test the developed clFFT library code, ensure to install the following packages on your system:\n\n-   Googletest v1.6\n\n-   Latest FFTW\n\n-   Latest Boost\n\n### Performance infrastructure\nTo measure the performance of the clFFT library code, ensure that the Python package is installed on your system.\n\n  [Library and API documentation]: http://clmathlibraries.github.io/clFFT/\n  [clmath@googlegroups.com]: https://github.com/clMathLibraries/clFFT/wiki\n  [clmath-developers@googlegroups.com]: https://github.com/clMathLibraries/clFFT/wiki/Build\n  [Contributing]: CONTRIBUTING.md\n  [Apache License, Version 2.0]: http://www.apache.org/licenses/LICENSE-2.0\n  [binary_release]: https://github.com/clMathLibraries/clFFT/releases\n  [semantic versioning]: http://semver.org/"
}
