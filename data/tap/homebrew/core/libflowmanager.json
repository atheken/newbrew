{
  "name": "libflowmanager",
  "full_name": "libflowmanager",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Flow-based measurement tasks with packet-based inputs",
  "license": "LGPL-3.0-or-later",
  "homepage": "https://github.com/LibtraceTeam/libflowmanager",
  "versions": {
    "stable": "3.0.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/LibtraceTeam/libflowmanager/archive/refs/tags/v3.0.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "ab60c9c9611488e51c14b6e3870f91a191236dced12f0ed16a58cdd2c08ee74f"
    }
  },
  "revision": 2,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libflowmanager/blobs/sha256:580edce84318af1d6c9a1fb34e131b54ee82c9f8c949f3fa1e314b240d44f514",
          "sha256": "580edce84318af1d6c9a1fb34e131b54ee82c9f8c949f3fa1e314b240d44f514"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libflowmanager/blobs/sha256:a86cc22af11e7199cbdd65a190fb6621b816bf5b01c0e9e6d3cd9f69fa190656",
          "sha256": "a86cc22af11e7199cbdd65a190fb6621b816bf5b01c0e9e6d3cd9f69fa190656"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libflowmanager/blobs/sha256:85deb8a52e3eb34eaefa5851c1017f77cbad2767968dbb22dc434f1dfba03766",
          "sha256": "85deb8a52e3eb34eaefa5851c1017f77cbad2767968dbb22dc434f1dfba03766"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libflowmanager/blobs/sha256:db47efecc48ea69795a1ee1317217d63825d25678ab8a25fdb5da6bd7daa043d",
          "sha256": "db47efecc48ea69795a1ee1317217d63825d25678ab8a25fdb5da6bd7daa043d"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libflowmanager/blobs/sha256:55a184421e4903a2de88d74bfbb7dc46dcdb649778f01ce7e13b1315d8803279",
          "sha256": "55a184421e4903a2de88d74bfbb7dc46dcdb649778f01ce7e13b1315d8803279"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libflowmanager/blobs/sha256:cb56969ba9c9417ca57ea914fd33358260cdec432b7fae979cfbde80d27ad3bc",
          "sha256": "cb56969ba9c9417ca57ea914fd33358260cdec432b7fae979cfbde80d27ad3bc"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/libflowmanager/blobs/sha256:447c6ca7a8d3774ddc4e5adcb21b9735aff22be9287bb6fbd054e7cd95063286",
          "sha256": "447c6ca7a8d3774ddc4e5adcb21b9735aff22be9287bb6fbd054e7cd95063286"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "autoconf",
    "automake",
    "libtool"
  ],
  "dependencies": [
    "libtrace"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/libflowmanager.rb",
  "ruby_source_checksum": {
    "sha256": "8c6e5bca5848c8a889dee72d8fb081f16868fb1472bbb3aef0dbb2e20bd2928a"
  },
  "date_added": "2011-09-28T20:26:04-07:00",
  "readme": "Libflowmanager - A library for matching packets from trace files to TCP and\nUDP flows\n\nLibflowmanager is Copyright (c) 2009-2012, 2016 The University of Waikato,\nHamilton, New Zealand. All rights reserved.\n\nSee the files COPYING and COPYING.LESSER for full licensing details for this\nsoftware.\n\nReport any bugs, questions or comments to contact@wand.net.nz\n\nIntroduction\n============\nLibflowmanager was designed to perform all of the common tasks that are\nrequired when performing measurement tasks at the flow-level. In particular, it \nmaintains a table of active flows and exports an API for matching packets to\nexisting flows (or creating new flows, if required). It also deals sensibly\nwith flow expiration, ensuring that flows are expired after an appropriate \namount of idle time.\n\nLibflowmanager also comes bundled with an API for reordering TCP packets based\non sequence number. Trace files typically record packets chronologically, \nwhich means that packets often will be read from the trace file out-of-order.\nHowever, many TCP measurement applications become difficult if the packets are\nnot in strict sequence number order. This is where the TCP reordering API comes\nin. \n\n\nRequired Libraries\n==================\nlibtrace 3.0.6 or better\n\t* available from http://research.wand.net.nz/software/libtrace.php\n\nInstallation\n============\nAfter having installed the required libraries, running the following series of\ncommands should install libflowmanager:\n\n\t./configure\n\tmake\n\tmake install\n\nBy default, libflowmanager installs to /usr/local/ - this can be changed by\nappending the --prefix=<new location> option to ./configure.\n\n\nLibflowmanager API Notes\n========================\n\n  * Start by creating a new instance of the FlowManager class, e.g.\n      fm = new FlowManager()\n\n  * Before reading any packets, use fm->setConfigOption() to set any\n    configuration options.\n\n  * For each packet perform the following tasks in the specified order:\n  \t+ Call fm->matchPacketToFlow() on the packet to get a pointer to \n\t  the flow object that the packet matches. \n\t+ Call fm->updateFlowExpiry() to update the TCP state and expiry time\n          for the current flow\n\t+ Repeatedly call fm->expireNextFlow() until all expired flows have\n\t  been returned\n\t\n  * The flow object contains a void pointer called \"extension\". This is\n    designed for the user to store their own per-flow data. Memory should be\n    allocated and initialised for \"extension\" data whenever the \"is_new_flow\"\n    flag is set to true by matchPacketToFlow().\n\n    For example, if I want to store packet and byte counts for each flow, I\n    would allocate a structure containing two counters for each new flow and \n    store a pointer to that structure inside \"extension\". Everytime that flow \n    is subsequently returned by matchPacketToFlow(), I can cast \n    the void pointer \"extension\" to my structure and update the counters.\n    \n  * You are responsible for freeing any \"extension\" data belonging to a flow\n    when that flow expires.\n\n  * Similarly, fm->releaseFlow() MUST be called for any flow object returned by \n    expireNextFlow(). It has been removed from the active flows table\n    but the memory is not freed because libflowmanager assumes that you might\n    want to do something with the flow itself upon expiry.\n  \n  * Some API functions require a direction parameter to indicate whether the \n    packet was incoming or outgoing. We leave this up to the user to define\n    direction because a) trace_get_direction() only works for some trace\n    formats and b) the user may want to define direction differently anyway.\n\n  * When accessing the IP addresses and ports from the flow Id, you now have\n    two options. You can use the get_server_* and get_client_* API functions\n    which have been present in previous versions of libflowmanager or you can\n    use the get_local_* and get_external_* API functions which were newly \n    added in 2.0.3.\n\n    In this context, we use the following definitions:\n    \tserver - the host that was connected to when the flow first began, i.e.\n\t\t the recipient of the first packet.\n\tclient - the host that initiated the flow, i.e. the sender of the first\n\t\t packet.\n\tlocal - the host that is the transmitter of \"outgoing\" packets, where\n\t\toutgoing is defined as having a direction value of 0.\n\texternal - the host that is the transmitter of \"incoming\" packets,\n\t\t   where incoming is defined as having a direction value of 1.\n\nTCP Reordering API Notes\n========================\n\n  * Each flow requires two TCP reorderers, one for each direction. If you\n    are using libflowmanager to manage the flows themselves, you will want to\n    store your TCP reorderers inside the \"extension\" variable described above.\n\n  * Each reorderer needs to be created with tcp_create_reorderer() and\n    should be destroyed using trace_destroy_reorderer when the flow is expired.\n\n  * Each reorderer requires two callback functions - a read callback and a\n    destroy callback. The read callback will be called by the reorderer every\n    time a packet is inserted into the reordering list. The destroy callback\n    to tidy up after any packets left in the reordering list when a reorderer\n    is destroyed, i.e. if the flow expires while there are still gaps in the\n    packet sequence.\n    \n  * The read callback should take a libtrace packet and extract only the \n    information your analysis requires from the packet. It should return a\n    pointer to an allocated structure containing your required data. This\n    pointer can then be accessed when the packet has been reordered so you\n    can access your data.\n\n  * The destroy callback must free any memory that was allocated during the\n    read callback, including the structure that was used to store all the \n    data.\n\n  * Every TCP packet should be passed to tcp_reorder_packet().\n\n  * If the return value of tcp_reorder_packet() did not recommend ignoring the\n    packet, repeatedly call tcp_pop_packet() until there are no packets \n    available to pop from the reordering list.\n  \n  * You will need to manually call your destroy callback on the \"data\"\n    pointer in the reordered packets returned by tcp_pop_packet(). \n\n  * free() MUST also be called on the reordered packets themselves, i.e. the\n    tcp_packet_t, returned by tcp_pop_packet() once you have finished with\n    them. \n  "
}
