{
  "name": "resvg",
  "full_name": "resvg",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "SVG rendering tool and library",
  "license": "MPL-2.0",
  "homepage": "https://github.com/RazrFalcon/resvg",
  "versions": {
    "stable": "0.35.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/RazrFalcon/resvg/archive/refs/tags/v0.35.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "a42b8db69bf3d792bb5c46320e9e1eb77155fce257092797996d3663850c7599"
    },
    "head": {
      "url": "https://github.com/RazrFalcon/resvg.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/resvg/blobs/sha256:89ac01f3efd842bda12e4099bf31c3eeb7e1d4f599dc4ab44c0ba1c5ce4b2e6c",
          "sha256": "89ac01f3efd842bda12e4099bf31c3eeb7e1d4f599dc4ab44c0ba1c5ce4b2e6c"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/resvg/blobs/sha256:a508552cb2d6bc65e3a05d3ec3e40e1022e99a1b858eba6c970b768e49b101ac",
          "sha256": "a508552cb2d6bc65e3a05d3ec3e40e1022e99a1b858eba6c970b768e49b101ac"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/resvg/blobs/sha256:05d352ed05aa3fbbf31c05eae8fb55b7260e41421793a516dc21e3ccc6ce67d3",
          "sha256": "05d352ed05aa3fbbf31c05eae8fb55b7260e41421793a516dc21e3ccc6ce67d3"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/resvg/blobs/sha256:159a8349ab10e016dc74713c21167cc25c43e2f0a544277e791428b66d24a49b",
          "sha256": "159a8349ab10e016dc74713c21167cc25c43e2f0a544277e791428b66d24a49b"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/resvg/blobs/sha256:ce0206df6999f0879319868cfbbc97b94a70c4ab73c7257cbb15640b3c8ac45e",
          "sha256": "ce0206df6999f0879319868cfbbc97b94a70c4ab73c7257cbb15640b3c8ac45e"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/resvg/blobs/sha256:738e2aa23854ca4f33268b96378f7bf7a2d10a1a619530c9607dda0c7fbb0f91",
          "sha256": "738e2aa23854ca4f33268b96378f7bf7a2d10a1a619530c9607dda0c7fbb0f91"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/resvg/blobs/sha256:3e2b349c4b14499b301a4fb6ea8540e733b23013f8cedbc9904340b8bd4bcce3",
          "sha256": "3e2b349c4b14499b301a4fb6ea8540e733b23013f8cedbc9904340b8bd4bcce3"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/resvg.rb",
  "ruby_source_checksum": {
    "sha256": "41400704a75e6973ba11e0f15c0ec372f3a0b5989c01848a4ec8c0eb0f156600"
  },
  "date_added": "2023-04-13T10:03:13-04:00",
  "readme": "## resvg\n![Build Status](https://github.com/RazrFalcon/resvg/workflows/Rust/badge.svg)\n[![Crates.io](https://img.shields.io/crates/v/resvg.svg)](https://crates.io/crates/resvg)\n[![Documentation](https://docs.rs/resvg/badge.svg)](https://docs.rs/resvg)\n[![Rust 1.65+](https://img.shields.io/badge/rust-1.65+-orange.svg)](https://www.rust-lang.org)\n\n*resvg* is an [SVG](https://en.wikipedia.org/wiki/Scalable_Vector_Graphics) rendering library.\n\nIt can be used as a Rust library, as a C library, and as a CLI application to render static SVG files.\n\nThe core idea is to make a fast, small, portable SVG library with the goal to support the whole SVG spec.\n\n## Features\n\n### Designed for edge-cases\n\nSVG is a very complicated format with a large specification (SVG 1.1 is almost 900 pages).\nYou basically need a web browser to handle all of it. But the truth is that even browsers\nfail at this (see [SVG support](https://github.com/RazrFalcon/resvg#svg-support)).\nYes, unlike `resvg`, browsers do support dynamic SVG features like animations and scripting.\nBut using a browser to render SVG _correctly_ is sadly not an option.\n\nTo prove its correctness, `resvg` has a vast test suite that includes around 1500 tests.\nAnd those are only SVG-to-PNG regression tests. This doesn't include tests in `resvg` dependencies.\nAnd the best thing is that `resvg` test suite is available to everyone. It's not tied to `resvg`\nin any way. Which should help people who plan to develop their own SVG libraries.\n\n### Safety\n\nIt's hard not to mention safety when we talk about Rust and processing of a random input.\nAnd we're talking not only about SVG/XML, but also about CSS, TTF, PNG, JPEG, GIF, and GZIP.\n\nWhile `resvg` is not the only SVG library written in Rust, it's the only one that\nis written completely in Rust. There is no non-Rust code in the final binary.\n\nMoreover, there is almost no `unsafe` code either. Still, some dependencies have some `unsafe` code\nand font memory-mapping is inherently `unsafe`, but it's best you can get in terms of memory safety.\n\nHowever, this doesn't stop at memory safety. `resvg` has extensive checks to prevent endless loops (freezes)\nand stack overflows (via recursion).\n\n### Zero bloat\n\nRight now, the `resvg` CLI application is less than 3MB in size and doesn't require any external dependencies.\nThe binary contains nothing that isn't needed for rendering SVG files.\n\n### Portable\n\n`resvg` is guaranteed to work everywhere where you can compile the Rust itself,\nincluding WASM. There are some rough edges with obscure CPU architectures and\nmobile OSs (mainly system fonts loading), but it should be pretty painless otherwise.\n\n### SVG preprocessing\n\nAnother major difference from other SVG rendering libraries is that in `resvg`\nSVG parsing and rendering are two completely separate steps.\nThose steps are also split into two separate libraries: `resvg` and [usvg].\nMeaning you can easily write your own renderer on top of `usvg` using any 2D library of your liking.\n\n### Performance\n\nComparing performance between different SVG rendering libraries is like comparing apples and oranges.\nEveryone has a very different set of supported features, languages, build flags, etc...\nAnyhow, as `resvg` is written in Rust and uses [tiny-skia] for rendering - it's pretty fast.\nThere should also still be quite a lot of room for improvement.\n\n### Reproducibility\n\nSince `resvg` doesn't rely on any system libraries it allows us to have reproducible results\non all supported platforms. Meaning if you render an SVG file on x86 Windows and then render it\non ARM macOS - the produced image will be identical. Each pixel would have the same value.\n\n## Limitations\n\n- No animations<br>\n  There are no plans on implementing them either.\n- No native text rendering<br>\n  `resvg` doesn't rely on any system libraries, which implies that we cannot use native text rendering.\n  Nevertheless, native text rendering is optimized for small horizontal text, which is not\n  that common is SVG.\n- Unicode-only<br>\n  It's the 21th century. Text files that aren't UTF-8 encoded are no longer relevant.\n\n## SVG support\n\n`resvg` aims to only support the [static](http://www.w3.org/TR/SVG11/feature#SVG-static)\nSVG subset; i.e. no `a`, `script`, `view` or `cursor` elements, no events and no animations.\n\n[SVG 2](https://www.w3.org/TR/SVG2/) support is being worked on.\nYou can search for relevant issues with the\n[svg2 tag](https://github.com/RazrFalcon/resvg/issues?q=is%3Aissue+is%3Aopen+label%3Asvg2)\nor our [SVG 2 changelog](https://github.com/RazrFalcon/resvg/blob/master/docs/svg2-changelog.md).\n\n[SVG Tiny 1.2](https://www.w3.org/TR/SVGTiny12/) is not supported and support is also not planned.\n\nResults of the [resvg test suite](https://github.com/RazrFalcon/resvg-test-suite):\n\n![](./.github/chart.svg)\n\nSVG 2 only results:\n\n![](./.github/chart-svg2.svg)\n\nYou can find a complete table of supported features\n[here](https://razrfalcon.github.io/resvg-test-suite/svg-support-table.html).\nIt also includes some alternative libraries.\n\nWe're not testing against all SVG libraries since many of them are pretty bad.\nSome libraries are not on the list because they don't pass the 25% mark.\nSuch libraries are: wxSvg, LunaSVG and nanosvg.\n\n## resvg project\n\nThere is a subtle difference between resvg as a _library_ and resvg as a _project_.\nWhile most users will interact only with the resvg library, it's just a tip of an iceberg.\nThere are a lot of libraries that I had to write to make resvg possible.\nHere are some of them:\n\n- resvg - the actual SVG renderer\n- [usvg] - an SVG preprocessor/simplifier\n- [tiny-skia] - a [Skia](https://github.com/google/skia) subset ported to Rust\n- [rustybuzz] - a [harfbuzz](https://github.com/harfbuzz/harfbuzz) subset ported to Rust\n- [ttf-parser] - a TrueType/OpenType font parser\n- [fontdb] - a simple, in-memory font database with CSS-like queries\n- [roxmltree] + [xmlparser] - an XML parsing libraries\n- [simplecss] - a pretty decent CSS 2 parser and selector\n- [pico-args] - an absolutely minimal, but surprisingly popular command-line arguments parser\n\nSo while the resvg _library_ is deceptively small (around 2500 LOC), the resvg _project_\nis nearing 75'000 LOC. Which is not that much considering how much resvg does.\nIt's definitely the smallest option out there.\n\n## License\n\n`resvg` project is licensed under the [MPLv2.0](https://www.mozilla.org/en-US/MPL/).\n\n[usvg]: https://github.com/RazrFalcon/resvg/tree/master/crates/usvg\n[rustybuzz]: https://github.com/RazrFalcon/rustybuzz\n[tiny-skia]: https://github.com/RazrFalcon/tiny-skia\n[ttf-parser]: https://github.com/RazrFalcon/ttf-parser\n[roxmltree]: https://github.com/RazrFalcon/roxmltree\n[xmlparser]: https://github.com/RazrFalcon/xmlparser\n[simplecss]: https://github.com/RazrFalcon/simplecss\n[fontdb]: https://github.com/RazrFalcon/fontdb\n[pico-args]: https://github.com/RazrFalcon/pico-args"
}
