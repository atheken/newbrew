{
  "name": "clinfo",
  "full_name": "clinfo",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Print information about OpenCL platforms and devices",
  "license": "CC0-1.0",
  "homepage": "https://github.com/Oblomov/clinfo",
  "versions": {
    "stable": "3.0.23.01.25",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/Oblomov/clinfo/archive/3.0.23.01.25.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "6dcdada6c115873db78c7ffc62b9fc1ee7a2d08854a3bccea396df312e7331e3"
    },
    "head": {
      "url": "https://github.com/Oblomov/clinfo.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/clinfo/blobs/sha256:bdab44766ca458a88c221ea4f7449b186b9fd748db904f7eefde045fb6443fb0",
          "sha256": "bdab44766ca458a88c221ea4f7449b186b9fd748db904f7eefde045fb6443fb0"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/clinfo/blobs/sha256:2c1497f49082ece2d52fae1bfc65c5317e7c76a6b2d8272f95fcb69f6068a4a6",
          "sha256": "2c1497f49082ece2d52fae1bfc65c5317e7c76a6b2d8272f95fcb69f6068a4a6"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/clinfo/blobs/sha256:2315c5f2eb3c44d67eed92f81680c2b0baef3d4a9d1e95a230b0e8a1664eecfb",
          "sha256": "2315c5f2eb3c44d67eed92f81680c2b0baef3d4a9d1e95a230b0e8a1664eecfb"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/clinfo/blobs/sha256:f1d18a57e2dd034e082d5df7b51ace021b656d6ea8539462a63ed11d8c2157b4",
          "sha256": "f1d18a57e2dd034e082d5df7b51ace021b656d6ea8539462a63ed11d8c2157b4"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/clinfo/blobs/sha256:86e27c2acbdf720693e142d25e82f1ccd76a4445d9ed2e25901382735b28d6c6",
          "sha256": "86e27c2acbdf720693e142d25e82f1ccd76a4445d9ed2e25901382735b28d6c6"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/clinfo/blobs/sha256:0e7cd2b464087fe9304644a1c6ba611a3b95ff37387eb85ffa1b495d88030b70",
          "sha256": "0e7cd2b464087fe9304644a1c6ba611a3b95ff37387eb85ffa1b495d88030b70"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "opencl-headers"
  ],
  "dependencies": [
    "opencl-icd-loader",
    "pocl"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/clinfo.rb",
  "ruby_source_checksum": {
    "sha256": "534e54026e6247c063541265ae5985dbbe3eb030b761c45c62e77180c92a2c1d"
  },
  "date_added": "2017-08-20T17:09:41+02:00",
  "readme": "# What is this?\n\nclinfo is a simple command-line application that enumerates all possible\n(known) properties of the OpenCL platform and devices available on the\nsystem.\n\nInspired by AMD's program of the same name, it is coded in pure C and it\ntries to output all possible information, including those provided by\nplatform-specific extensions, trying not to crash on unsupported\nproperties (e.g. 1.2 properties on 1.1 platforms).\n\n# Usage\n\n    clinfo [options...]\n\nCommon used options are `-l` to show a synthetic summary of the\navailable devices (without properties), and `-a`, to try and show\nproperties even if `clinfo` would otherwise think they aren't supported\nby the platform or device.\n\nRefer to the man page for further information.\n\n## Use cases\n\n* verify that your OpenCL environment is set up correctly;\n  if `clinfo` cannot find any platform or devices (or fails to load\n  the OpenCL dispatcher library), chances are high no other OpenCL\n  application will run;\n* verify that your OpenCL _development_ environment is set up\n  correctly: if `clinfo` fails to build, chances are high no\n  other OpenCL application will build;\n* explore/report the actual properties of the available device(s).\n\n## Segmentation faults\n\nSome faulty OpenCL platforms may cause `clinfo` to crash. There isn't\nmuch `clinfo` itself can do about it, but you can try and isolate the\nplatform responsible for this. On POSIX systems, you can generally find\nthe platform responsible for the fault with the following one-liner:\n\n    find /etc/OpenCL/vendors/ -name '*.icd' | while read OPENCL_VENDOR_PATH ; do clinfo -l > /dev/null ; echo \"$? ${OPENCL_VENDOR_PATH}\" ; done\n\n## Missing information\n\nIf you know of device properties that are exposed in OpenCL (either as core\nproperties or as extensions), but are not shown by `clinfo`, please [open\nan issue](https://github.com/Oblomov/clinfo/issues) providing as much\ninformation as you can. Patches and pull requests accepted too.\n\n\n# Building\n\n<img\nsrc='https://api.travis-ci.org/Oblomov/clinfo.svg?branch=master'\nalt='Build status on Travis'\nstyle='float: right'>\n\nBuilding requires an OpenCL SDK (or at least OpenCL headers and\ndevelopment files), and the standard build environment for the platform.\nNo special build system is used (autotools, CMake, meson, ninja, etc),\nas I feel adding more dependencies for such a simple program would be\nexcessive. Simply running `make` at the project root should work.\n\n## Android support\n\n### Local build via Termux\n\nOne way to build the application on Android, pioneered by\n[truboxl][truboxl] and described [here][issue46], requires the\ninstallation of [Termux][termux], that can be installed via Google Play\nas well as via F-Droid.\n\n[truboxl]: https://github.com/truboxl\n[issue46]: https://github.com/Oblomov/clinfo/issues/46\n[termux]: https://termux.com/\n\nInside Termux, you will first need to install some common tools:\n\n\tpkg install git make clang -y\n\n\nYou will also need to clone the `clinfo` repository, and fetch the\nOpenCL headers (we'll use the official `KhronosGroup/OpenCL-Headers`\nrepository for that):\n\n\tgit clone https://github.com/Oblomov/clinfo\n\tgit clone https://github.com/KhronosGroup/OpenCL-Headers\n\n(I prefer doing this from a `src` directory I have created for\ndevelopment, but as long as `clinfo` and `OpenCL-Headers` are sibling\ndirectories, the headers will be found. If not, you will have to\noverride `CPPFLAGS` with e.g. `export CPPFLAGS=-I/path/to/where/headers/are`\nbefore running `make`.\nOf course `/path/to/where/headers/are` should be replaced with the actual\npath to which the `OpenCL-Headers` repository was cloned.)\n\nYou can then `cd clinfo` and build the application. You can try simply\nrunning `make` since Android should be autodetected now, buf it\nthis fails you can also force the detectio with\n\n\tmake OS=Android\n\nIf linking fails due to a missing `libOpenCL.so`, then your Android\nmachine probably doesn't support OpenCL. Otherwise, you should have a\nworking `clinfo` you can run. You will most probably need to set\n`LD_LIBRARY_PATH` to let the program know where the OpenCL library is at\nruntime: you will need at least `${ANDROID_ROOT}/vendor/lib64`, but on\nsome machine the OpenCL library actually maps to a different library\n(e.g., on one of my systems, it maps to the GLES library, which is in a\ndifferent subdirectory).\n\nDue to this requirement, on Android the actual binary is now called\n`clinfo.real`, and the produced `clinfo` is just a shell script that\nwill run the actual binary after setting `LD_LIBRARY_PATH`. If this\nis not sufficient on your installation, please open an issue and we'll\ntry to improve the shell script to cover your use case as well.\n\n## MacOS support\n\nclinfo should build without issues out of the box on most macOS installations\n(starting from OSÂ X v10.6).\nIn contrast to most other operating systems,\nthe macOS system OpenCL library only supports Apple's own OpenCL platform.\n\nTo use other platforms such as [PoCL](https://portablecl.org),\nit is necessary to install an alternative OpenCL library that works as an ICD loader,\nsuch as [Homebrew](https://brew.sh)'s [ocl-icd](https://formulae.brew.sh/formula/ocl-icd).\n\nTo build `clinfo` using the Homebrew OpenCL library instead of the macOS system library,\nyou can use\n\n    make OS=Homebrew\n\n\n## Windows support\n\nThe application can usually be built in Windows too (support for which\nrequired way more time than I should have spent, really, but I digress),\nby running `make` in a Developer Command Prompt for Visual Studio,\nprovided an OpenCL SDK (such as the Intel or AMD one) is installed.\n\nPrecompiled Windows executable are available as artefacts of the\nAppVeyor CI.\n\n<table style='margin: 1em auto; width: 100%; max-width: 33em'>\n<tr><th>Build status</th><th colspan=2>Windows binaries</th></tr>\n<tr>\n<td><a href='https://ci.appveyor.com/project/Oblomov/clinfo/'><img\nsrc='https://ci.appveyor.com/api/projects/status/github/Oblomov/clinfo?svg=true'\nalt='Build status on AppVeyor'></a></td>\n<td><a href='https://ci.appveyor.com/api/projects/oblomov/clinfo/artifacts/clinfo.exe?job=platform%3a+x86'>32-bit</a></td>\n<td><a href='https://ci.appveyor.com/api/projects/oblomov/clinfo/artifacts/clinfo.exe?job=platform%3a+x64'>64-bit</a></td>\n</tr>\n</table>"
}
