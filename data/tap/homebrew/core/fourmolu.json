{
  "name": "fourmolu",
  "full_name": "fourmolu",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Formatter for Haskell source code",
  "license": "BSD-3-Clause",
  "homepage": "https://github.com/fourmolu/fourmolu",
  "versions": {
    "stable": "0.13.1.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/fourmolu/fourmolu/archive/v0.13.1.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "bb685094367e129319ce441c8d68748ee65263280267db8567b445466fb17e81"
    },
    "head": {
      "url": "https://github.com/fourmolu/fourmolu.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fourmolu/blobs/sha256:7013b4e76d58e0e55be8fe7a09e86fc1a6596fa6ae0568c669bd7ca6c47b12be",
          "sha256": "7013b4e76d58e0e55be8fe7a09e86fc1a6596fa6ae0568c669bd7ca6c47b12be"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fourmolu/blobs/sha256:3412b7d9bf9828ea2f45a717bf5b457b1707f714fb73861124567fb24ba367e9",
          "sha256": "3412b7d9bf9828ea2f45a717bf5b457b1707f714fb73861124567fb24ba367e9"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fourmolu/blobs/sha256:48c9b51eeaf7cb5b7ea7a8d9260b04b2aa0a333a87e5d2b275cefd8ad8f70b16",
          "sha256": "48c9b51eeaf7cb5b7ea7a8d9260b04b2aa0a333a87e5d2b275cefd8ad8f70b16"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fourmolu/blobs/sha256:8e614c0f97ef93a991509c3d79465a2f3c55680c07a7fd1863cc5744d1acc61c",
          "sha256": "8e614c0f97ef93a991509c3d79465a2f3c55680c07a7fd1863cc5744d1acc61c"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fourmolu/blobs/sha256:cecedf589f0f3f0e0298dc8f5ae30c69151de6550a6edc4435a70abefed16d1d",
          "sha256": "cecedf589f0f3f0e0298dc8f5ae30c69151de6550a6edc4435a70abefed16d1d"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fourmolu/blobs/sha256:21c9d82551319737c8cb59330ae1bbce0e6303f42ccce28c75915d1ef9e9e7ee",
          "sha256": "21c9d82551319737c8cb59330ae1bbce0e6303f42ccce28c75915d1ef9e9e7ee"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fourmolu/blobs/sha256:59f07c0fce4c6fdca4e74f1f6dfe5303d81aefa0f7b48bc506469c4d346d28b9",
          "sha256": "59f07c0fce4c6fdca4e74f1f6dfe5303d81aefa0f7b48bc506469c4d346d28b9"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cabal-install",
    "ghc"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/fourmolu.rb",
  "ruby_source_checksum": {
    "sha256": "6d3dc643de208da0cf373eca294e64cae9f9e7551cdde28bd570fcb8610e3d58"
  },
  "date_added": "2022-03-20T21:34:45+00:00",
  "readme": "# Fourmolu\n\n[![License BSD3](https://img.shields.io/badge/license-BSD3-brightgreen.svg)](http://opensource.org/licenses/BSD-3-Clause)\n[![Hackage](https://img.shields.io/hackage/v/fourmolu.svg?style=flat)](https://hackage.haskell.org/package/fourmolu)\n[![CI](https://github.com/fourmolu/fourmolu/actions/workflows/ci.yml/badge.svg)](https://github.com/fourmolu/fourmolu/actions/workflows/ci.yml)\n\n* [Configuration](#configuration)\n* [Installation](#installation)\n* [Building from source](#building-from-source)\n* [Usage](#usage)\n    * [Web app](#web-app)\n    * [Editor integration](#editor-integration)\n    * [Language extensions, dependencies, and fixities](#language-extensions-dependencies-and-fixities)\n    * [Magic comments](#magic-comments)\n    * [Regions](#regions)\n    * [Exit codes](#exit-codes)\n    * [Using as a library](#using-as-a-library)\n* [Limitations](#limitations)\n* [Contributing](#contributing)\n* [License](#license)\n\nFourmolu is a formatter for Haskell source code. It is a fork of [Ormolu](https://github.com/tweag/ormolu), with upstream improvements continually merged.\n\nWe share all bar one of Ormolu's goals:\n\n* Using GHC's own parser to avoid parsing problems caused by\n  [`haskell-src-exts`](https://hackage.haskell.org/package/haskell-src-exts).\n* Let some whitespace be programmable. The layout of the input influences\n  the layout choices in the output. This means that the choices between\n  single-line/multi-line layouts in certain situations are made by the user,\n  not by an algorithm. This makes the implementation simpler and leaves some\n  control to the user while still guaranteeing that the formatted code is\n  stylistically consistent.\n* Writing code in such a way so it's easy to modify and maintain.\n* That formatting style aims to result in minimal diffs.\n* Choose a style compatible with modern dialects of Haskell. As new Haskell\n  extensions enter broad use, we may change the style to accommodate them.\n* Idempotence: formatting already formatted code doesn't change it.\n* Be well-tested and robust so that the formatter can be used in large\n  projects.\n* ~~Implementing one “true” formatting style which admits no configuration.~~ We allow configuration of various parameters, via CLI options or config files. We encourage any contributions which add further flexibility.\n\n## Configuration\n\nSee https://fourmolu.github.io/config/\n\n## Installation\n\nTo install the latest release from Hackage, simply install with Cabal or Stack:\n\n```console\n$ cabal install fourmolu\n$ stack install fourmolu\n```\n\n## Building from source\n\n```console\n$ cabal build -fdev\n$ stack build --flag fourmolu:dev\n```\n\nThe `dev` flag may be omitted in your local workflow as you work, but CI may not pass if you only build without the `dev` flag.\n\n## Usage\n\nThe following will print the formatted output to the standard output.\n\n```console\n$ fourmolu Module.hs\n```\n\nAdd `-i` (or `--mode inplace`) to replace the contents of the input file with the formatted output.\n\n```console\n$ fourmolu -i Module.hs\n```\n\nSpecify a directory to recursively process all of its `.hs` files:\n\n```console\n$ fourmolu -i src\n```\n\nOr find all files in a project with `git ls-files`:\n\n```bash\n$ fourmolu --mode inplace $(git ls-files '*.hs')\n# Or to avoid hitting command line length limits and enable parallelism (12-way here):\n$ git ls-files -z '*.hs' | xargs -P 12 -0 fourmolu --mode inplace\n```\n\nTo check if files are already formatted (useful on CI):\n\n```console\n$ fourmolu --mode check src\n```\n\n#### :zap: Beware git's `core.autocrlf` on Windows :zap:\nFourmolu's output always uses LF line endings. In particular,\n`fourmolu --mode check` will fail if its input is correctly formatted\n*except* that it has CRLF line endings. This situation can happen on Windows\nwhen checking out a git repository without having set [`core.autocrlf`](\nhttps://www.git-scm.com/docs/git-config#Documentation/git-config.txt-coreautocrlf)\nto `false`.\n\n### Web app\n\nSee https://fourmolu.github.io/ to try Fourmolu in your browser. This is re-deployed on every new commit to `main`, so will use the latest version of Fourmolu, potentially including unreleased changes.\n\n### Editor integration\n\nFourmolu can be integrated with your editor via the [Haskell Language Server](https://haskell-language-server.readthedocs.io/en/latest/index.html). Just set `haskell.formattingProvider` to `fourmolu` ([instructions](https://haskell-language-server.readthedocs.io/en/latest/configuration.html#language-specific-server-options)).\n\n### GitHub actions\n\n[`run-fourmolu`][https://github.com/haskell-actions/run-fourmolu] is the recommended way to ensure that a project is formatted with Fourmolu.\n\n### Language extensions, dependencies, and fixities\n\nFourmolu automatically locates the Cabal file that corresponds to a given\nsource code file. Cabal files are used to extract both default extensions\nand dependencies. Default extensions directly affect behavior of the GHC\nparser, while dependencies are used to figure out fixities of operators that\nappear in the source code. Fixities can also be overridden via the `fixities` configuration option in `fourmolu.yaml`. When the input comes from\nstdin, one can pass `--stdin-input-file` which will give Fourmolu the location\nthat should be used as the starting point for searching for `.cabal` files.\n\nHere is an example of the `fixities` configuration:\n\n```yaml\nfixities:\n  - infixr 9  .\n  - infixr 5  ++\n  - infixl 4  <$\n  - infixl 1  >>, >>=\n  - infixr 1  =<<\n  - infixr 0  $, $!\n  - infixl 4 <*>, <*, *>, <**>\n```\n\nIt uses exactly the same syntax as usual Haskell fixity declarations to make\nit easier for Haskellers to edit and maintain.\n\n`fourmolu.yaml` can also contain instructions about\nmodule re-exports that Fourmolu should be aware of. This might be desirable\nbecause at the moment Fourmolu cannot know about all possible module\nre-exports in the ecosystem and only few of them are actually important when\nit comes to fixity deduction. In 99% of cases the user won't have to do\nanything, especially since most common re-exports are already programmed\ninto Fourmolu. (You are welcome to open PRs to make Fourmolu aware of more\nre-exports by default.) However, when the fixity of an operator is not\ninferred correctly, making Fourmolu aware of a re-export may come in handy.\nHere is an example:\n\n```yaml\nreexports:\n  - module Control.Lens exports Control.Lens.At\n  - module Control.Lens exports \"lens\" Control.Lens.Lens\n```\n\nExplicit package names are allowed in re-export declarations (see the example above).\n\nFinally, all of the above-mentioned parameters can be controlled from the\ncommand line:\n\n* Language extensions can be specified with the `-o` or `--ghc-opt` flag.\n* Dependencies can be specified with the `-p` or `--package` flag.\n* Fixities can be specified with the `-f` or `--fixity` flag.\n* Re-exports can be specified with the `-r` or `--reexport` flag.\n\nSearching for `.cabal` files can be disabled by passing\n`--no-cabal`.\n\n### Magic comments\n\nFourmolu understands two magic comments:\n\n```haskell\n{- FOURMOLU_DISABLE -}\n```\n\nand\n\n```haskell\n{- FOURMOLU_ENABLE -}\n```\n\nThis allows us to disable formatting selectively for code between these\nmarkers or disable it for the entire file. To achieve the latter, just put\n`{- FOURMOLU_DISABLE -}` at the very top. Note that for Fourmolu to work the\nfragments where Fourmolu is enabled must be parseable on their own. Because of\nthat the magic comments cannot be placed arbitrarily, but rather must\nenclose independent top-level definitions.\n\n`{- ORMOLU_DISABLE -}` and `{- ORMOLU_ENABLE -}`, respectively, can be used to the same effect,\nand the two styles of magic comments can be mixed.\n\n### Regions\n\nOne can ask Fourmolu to format a region of input and leave the rest\nunformatted. This is accomplished by passing the `--start-line` and\n`--end-line` command line options. `--start-line` defaults to the beginning\nof the file, while `--end-line` defaults to the end.\n\n### Exit codes\n\nExit code | Meaning\n----------|-----------------------------------------------\n0         | Success\n1         | General problem\n2         | CPP used (deprecated)\n3         | Parsing of original input failed\n4         | Parsing of formatted code failed\n5         | AST of original and formatted code differs\n6         | Formatting is not idempotent\n7         | Unrecognized GHC options\n8         | Cabal file parsing failed\n9         | Missing input file path when using stdin input and accounting for .cabal files\n10        | Parse error while parsing fixity overrides\n100       | In checking mode: unformatted files\n101       | Inplace mode does not work with stdin\n102       | Other issue (with multiple input files)\n400       | Failed to load Fourmolu configuration file\n\n### Using as a library\n\nThe `fourmolu` package can also be depended upon from other Haskell programs.\nFor these purposes only the top `Ormolu` module should be considered stable.\nIt follows [PVP](https://pvp.haskell.org/) starting from the version\n0.10.2.0. Rely on other modules at your own risk.\n\n## Limitations\n\n* CPP support is experimental. CPP is virtually impossible to handle\n  correctly, so we process them as a sort of unchangeable snippets. This\n  works only in simple cases when CPP conditionals surround top-level\n  declarations. See the [CPP](https://github.com/tweag/ormolu/blob/master/DESIGN.md#cpp) section in the design notes for a\n  discussion of the dangers.\n* Input modules should be parsable by Haddock, which is a bit stricter\n  criterion than just being valid Haskell modules.\n* Various minor idempotence issues, most of them are related to comments or column limits.\n* Fourmolu is in a fairly early stage of development. The implementation should be as stable as Ormolu, as it only makes minimal changes, and is extensively tested. But the default configuration style may change in some minor ways in the near future, as we make more options available. It will always be possible to replicate the old default behaviour with a suitable `fourmolu.yaml`.\n\n## Contributing\n\nIf there are any options you'd like to see, let us know. If it's not too complicated to implement (and especially if you implement it yourself!) then we'll probably add it.\n\nSee `DEVELOPER.md` for documentation.\n\n## License\n\nSee [LICENSE.md](LICENSE.md).\n\nCopyright © 2018–2020 Tweag I/O, 2020-present Matt Parsons\n\n## Acknowledgements\n\nThe vast majority of work here has been done by the Ormolu developers, and thus they deserve almost all of the credit. This project is simply intended as a haven for those of us who admire their work, but can't quite get on board with some of their decisions when it comes down to the details."
}
