{
  "name": "colfer",
  "full_name": "colfer",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Schema compiler for binary data exchange",
  "license": "CC0-1.0",
  "homepage": "https://github.com/pascaldekloe/colfer",
  "versions": {
    "stable": "1.8.1",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/pascaldekloe/colfer/archive/v1.8.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "5d184c8a311543f26c957fff6cad3908b9b0a4d31e454bb7f254b300d004dca7"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/colfer/blobs/sha256:ea5a224dfc033cc2a6e2bce8e9f55add8735770539d5db1e4787902594b92a7c",
          "sha256": "ea5a224dfc033cc2a6e2bce8e9f55add8735770539d5db1e4787902594b92a7c"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/colfer/blobs/sha256:bf8074276dffcfb264832e08687f3dcb0618ff7f51806bfe0b316983c08a186a",
          "sha256": "bf8074276dffcfb264832e08687f3dcb0618ff7f51806bfe0b316983c08a186a"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/colfer/blobs/sha256:e909fd6305c6b00a1499756f250666ccb80a285b2cd1115aa95edb6e31593ea7",
          "sha256": "e909fd6305c6b00a1499756f250666ccb80a285b2cd1115aa95edb6e31593ea7"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/colfer/blobs/sha256:a625b32ffe11cfdbf95699c28f73d5ccceec37b0d2fbf1fae720d41e55be902a",
          "sha256": "a625b32ffe11cfdbf95699c28f73d5ccceec37b0d2fbf1fae720d41e55be902a"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/colfer/blobs/sha256:cf4fd7e02a61239f90e3de47e6016ba6cd9c89d31c7728a1a857be854a85add2",
          "sha256": "cf4fd7e02a61239f90e3de47e6016ba6cd9c89d31c7728a1a857be854a85add2"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/colfer/blobs/sha256:9ee59a49a4e15f40a620d526039cb8ef82e5c323f59f6df3074f1aa153c3fea4",
          "sha256": "9ee59a49a4e15f40a620d526039cb8ef82e5c323f59f6df3074f1aa153c3fea4"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/colfer/blobs/sha256:dfdb2743960de62ee18ab35a7ead3d2d8de4207cc6ffa11ff0d8ebf393a591e8",
          "sha256": "dfdb2743960de62ee18ab35a7ead3d2d8de4207cc6ffa11ff0d8ebf393a591e8"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/colfer/blobs/sha256:dfdb2743960de62ee18ab35a7ead3d2d8de4207cc6ffa11ff0d8ebf393a591e8",
          "sha256": "dfdb2743960de62ee18ab35a7ead3d2d8de4207cc6ffa11ff0d8ebf393a591e8"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/colfer/blobs/sha256:dfdb2743960de62ee18ab35a7ead3d2d8de4207cc6ffa11ff0d8ebf393a591e8",
          "sha256": "dfdb2743960de62ee18ab35a7ead3d2d8de4207cc6ffa11ff0d8ebf393a591e8"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/colfer/blobs/sha256:3e68acefc34743620979a02b3adce372b7a0a0a93c0e3a6c51480bfa2c02c29f",
          "sha256": "3e68acefc34743620979a02b3adce372b7a0a0a93c0e3a6c51480bfa2c02c29f"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/colfer.rb",
  "ruby_source_checksum": {
    "sha256": "dbbad8cdb5d3ae0088b3699e7be4959a55d93467f80f1c6c292ae3409c516e54"
  },
  "date_added": "2020-07-06T19:19:05+00:00",
  "readme": "# Colfer\n\nColfer is a binary serialization [format](https://github.com/pascaldekloe/colfer/wiki/Spec)\noptimized for speed and size.\n\nThe project's compiler `colf(1)` generates source code from schema definitions\nto marshal and unmarshall data structures.\n\nThis is free and unencumbered software released into the\n[public domain](http://creativecommons.org/publicdomain/zero/1.0).\nThe format is inspired by Proto**col** Buf**fer**s.\n\n[![CI](https://github.com/pascaldekloe/colfer/actions/workflows/ci.yml/badge.svg)](https://github.com/pascaldekloe/colfer/actions/workflows/ci.yml)\n\n\n#### Language Support\n\n* **C**, ISO/IEC 9899:2011 compliant a.k.a. C11, C++ compatible\n* **Go**, a.k.a. golang\n* **Java**, Android compatible\n* **JavaScript**, a.k.a. ECMAScript, NodeJS compatible\n* 🚧 Gergely Bódi realised a functional **Dart** [port](https://github.com/vendelin8/colfer).\n* 🚧 Karthik Kumar Viswanathan has a **Python** [alternative](https://github.com/guilt/colfer-python) under construction.\n\n\n#### Features\n\n* Simple and straightforward in use\n* No dependencies other than the core library\n* Both faster and smaller than the competition\n* [Robust](#security) against malicious input\n* Maximum of 127 fields per data structure\n* No support for enumerations\n* Framed; suitable for concatenation/streaming\n\n#### TODO's\n\n* Rust and Python support\n* Protocol [revision](https://github.com/pascaldekloe/colfer/commits/v2)\n\n\n## Use\n\nDownload a [prebuilt compiler](https://github.com/pascaldekloe/colfer/releases)\nor run `go get -u github.com/pascaldekloe/colfer/cmd/colf` to make one yourself.\nHomebrew users can also `brew install colfer`.\n\nThe command prints its own manual when invoked without arguments.\n\n```\nNAME\n\tcolf — compile Colfer schemas\n\nSYNOPSIS\n\tcolf [-h]\n\tcolf [-vf] [-b directory] [-p package] \\\n\t\t[-s expression] [-l expression] C [file ...]\n\tcolf [-vf] [-b directory] [-p package] [-t files] \\\n\t\t[-s expression] [-l expression] Go [file ...]\n\tcolf [-vf] [-b directory] [-p package] [-t files] \\\n\t\t[-x class] [-i interfaces] [-c file] \\\n\t\t[-s expression] [-l expression] Java [file ...]\n\tcolf [-vf] [-b directory] [-p package] \\\n\t\t[-s expression] [-l expression] JavaScript [file ...]\n\nDESCRIPTION\n\tThe output is source code for either C, Go, Java or JavaScript.\n\n\tFor each operand that names a file of a type other than\n\tdirectory, colf reads the content as schema input. For each\n\tnamed directory, colf reads all files with a .colf extension\n\twithin that directory. If no operands are given, the contents of\n\tthe current directory are used.\n\n\tA package definition may be spread over several schema files.\n\tThe directory hierarchy of the input is not relevant to the\n\tgenerated code.\n\nOPTIONS\n  -b directory\n    \tUse a base directory for the generated code. (default \".\")\n  -c file\n    \tInsert a code snippet from a file.\n  -f\tNormalize the format of all schema input on the fly.\n  -h\tPrints the manual to standard error.\n  -i interfaces\n    \tMake all generated classes implement one or more interfaces.\n    \tUse commas as a list separator.\n  -l expression\n    \tSet the default upper limit for the number of elements in a\n    \tlist. The expression is applied to the target language under\n    \tthe name ColferListMax. (default \"64 * 1024\")\n  -p package\n    \tCompile to a package prefix.\n  -s expression\n    \tSet the default upper limit for serial byte sizes. The\n    \texpression is applied to the target language under the name\n    \tColferSizeMax. (default \"16 * 1024 * 1024\")\n  -t files\n    \tSupply custom tags with one or more files. Use commas as a list\n    \tseparator. See the TAGS section for details.\n  -v\tEnable verbose reporting to standard error.\n  -x class\n    \tMake all generated classes extend a super class.\n\nTAGS\n\tTags, a.k.a. annotations, are source code additions for structs\n\tand/or fields. Input for the compiler can be specified with the\n\t-t option. The data format is line-oriented.\n\n\t\t<line> :≡ <qual> <space> <code> ;\n\t\t<qual> :≡ <package> '.' <dest> ;\n\t\t<dest> :≡ <struct> | <struct> '.' <field> ;\n\n\tLines starting with a '#' are ignored (as comments). Java output\n\tcan take multiple tag lines for the same struct or field. Each\n\tcode line is applied in order of appearance.\n\nEXIT STATUS\n\tThe command exits 0 on success, 1 on error and 2 when invoked\n\twithout arguments.\n\nEXAMPLES\n\tCompile ./io.colf with compact limits as C:\n\n\t\tcolf -b src -s 2048 -l 96 C io.colf\n\n\tCompile ./*.colf with a common parent as Java:\n\n\t\tcolf -p com.example.model -x com.example.io.IOBean Java\n\nBUGS\n\tReport bugs at <https://github.com/pascaldekloe/colfer/issues>.\n\n\tText validation is not part of the marshalling and unmarshalling\n\tprocess. C and Go just pass any malformed UTF-8 characters. Java\n\tand JavaScript replace unmappable content with the '?' character\n\t(ASCII 63).\n\nSEE ALSO\n\tprotoc(1), flatc(1)\n```\n\nIt is recommended to commit the generated source code into the respective\nversion control to preserve build consistency and minimise the need for compiler\ninstallations. Alternatively, you may use the\n[Maven plugin](https://github.com/pascaldekloe/colfer/wiki/Java#maven).\n\n```xml\n<plugin>\n\t<groupId>net.quies.colfer</groupId>\n\t<artifactId>colfer-maven-plugin</artifactId>\n\t<version>1.11.2</version>\n\t<configuration>\n\t\t<packagePrefix>com/example</packagePrefix>\n\t</configuration>\n</plugin>\n```\n\n\n\n## Schema\n\nData structures are defined in `.colf` files. The format is quite self-explanatory.\n\n```\n// Package demo offers a demonstration.\n// These comment lines will end up in the generated code.\npackage demo\n\n// Course is the grounds where the game of golf is played.\ntype course struct {\n\tID    uint64\n\tname  text\n\tholes []hole\n\timage binary\n\ttags  []text\n}\n\ntype hole struct {\n\t// Lat is the latitude of the cup.\n\tlat float64\n\t// Lon is the longitude of the cup.\n\tlon float64\n\t// Par is the difficulty index.\n\tpar uint8\n\t// Water marks the presence of water.\n\twater bool\n\t// Sand marks the presence of sand.\n\tsand bool\n}\n```\n\nSee what the generated code looks like in\n[C](https://gist.github.com/pascaldekloe/05e903f12a4f02a995f71d0c18872b65),\n[Go](https://gist.github.com/pascaldekloe/786fd46e6e4710c14fee7da1f480c2d4),\n[Java](https://gist.github.com/pascaldekloe/b54326e6b7c5e9f036911a8cbea6ccbf) or\n[JavaScript](https://gist.github.com/pascaldekloe/5653c8bb074ebd29ffcc0deece7495a4).\n\nThe following table shows how Colfer data types are applied per language.\n\n| Colfer\t| C\t\t\t| Go\t\t| Java\t\t| JavaScript\t|\n|:--------------|:----------------------|:--------------|:--------------|:--------------|\n| bool\t\t| char\t\t\t| bool\t\t| boolean\t| Boolean\t|\n| uint8\t\t| uint8_t\t\t| uint8\t\t| byte †\t| Number\t|\n| uint16\t| uint16_t\t\t| uint16\t| short †\t| Number\t|\n| uint32\t| uint32_t\t\t| uint32\t| int †\t\t| Number\t|\n| uint64\t| uint64_t\t\t| uint64\t| long †\t| Number ‡\t|\n| int32\t\t| int32_t\t\t| int32\t\t| int\t\t| Number\t|\n| int64\t\t| int64_t\t\t| int64\t\t| long\t\t| Number ‡\t|\n| float32\t| float\t\t\t| float32\t| float\t\t| Number\t|\n| float64\t| double\t\t| float64\t| double\t| Number\t|\n| timestamp\t| timespec\t\t| time.Time ††\t| time.Instant\t| Date + Number\t|\n| text\t\t| const char* + size_t\t| string\t| String\t| String\t|\n| binary\t| uint8_t* + size_t\t| []byte\t| byte[]\t| Uint8Array\t|\n| list\t\t| * + size_t\t\t| slice\t\t| array\t\t| Array\t\t|\n\n* † signed representation of unsigned data, i.e. may overflow to negative.\n* ‡ range limited to [1 - 2⁵³, 2⁵³ - 1]\n* †† timezone not preserved\n\nLists may contain floating points, text, binaries or data structures.\n\n\n\n## Security\n\nColfer is suited for untrusted data sources such as network I/O or bulk streams.\nMarshalling and unmarshalling comes with built-in size protection to ensure\npredictable memory consumption. The format prevents memory bombs by design.\n\nThe marshaller may not produce malformed output, regardless of the data input.\nIn no event may the unmarshaller read outside the boundaries of a serial. Fuzz\ntesting did not reveal any volnurabilities yet. Computing power is welcome.\n\n\n## Compatibility\n\nName changes do not affect the serialization format. Deprecated fields should be\nrenamed to clearly discourage their use. For backwards compatibility new fields\nmust be added to the end of colfer structs. Thus the number of fields can be\nseen as the schema version.\n\n\n\n## Performance\n\nColfer aims to be the fastest and the smallest format without compromising on\nreliability. See the\n[benchmark wiki](https://github.com/pascaldekloe/colfer/wiki/Benchmark) for a\ncomparison. Suboptimal performance is treated like a bug."
}
