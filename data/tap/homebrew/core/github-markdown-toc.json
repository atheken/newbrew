{
  "name": "github-markdown-toc",
  "full_name": "github-markdown-toc",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Easy TOC creation for GitHub README.md (in go)",
  "license": "MIT",
  "homepage": "https://github.com/ekalinin/github-markdown-toc.go",
  "versions": {
    "stable": "1.2.1",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/ekalinin/github-markdown-toc.go/archive/refs/tags/v1.2.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "64e0fc1b87860ced2697ace61e1a91d9b1a14829df08f0da08e797efe5e91440"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/github-markdown-toc/blobs/sha256:e9228bf710a91e26eb1c4b24bf3815c14ebba843ed99215ad8514eb41cfc2c68",
          "sha256": "e9228bf710a91e26eb1c4b24bf3815c14ebba843ed99215ad8514eb41cfc2c68"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/github-markdown-toc/blobs/sha256:4b6a871dcb95229b7f01e7b3aa2e309e50db59ae2707b05777b01e0d1f340437",
          "sha256": "4b6a871dcb95229b7f01e7b3aa2e309e50db59ae2707b05777b01e0d1f340437"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/github-markdown-toc/blobs/sha256:9b7f9b21a20d0ea3adc57e6f1700f22a1dd02a910ff31b90d5e25d7993eb678f",
          "sha256": "9b7f9b21a20d0ea3adc57e6f1700f22a1dd02a910ff31b90d5e25d7993eb678f"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/github-markdown-toc/blobs/sha256:2b15946d89399f867064dda64f2565ce167ff1f7a240f1a427a67a3d27eff507",
          "sha256": "2b15946d89399f867064dda64f2565ce167ff1f7a240f1a427a67a3d27eff507"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/github-markdown-toc/blobs/sha256:18e637f4ace86aa720ffe6f516811d48badfff316273daa441f364ccf6938876",
          "sha256": "18e637f4ace86aa720ffe6f516811d48badfff316273daa441f364ccf6938876"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/github-markdown-toc/blobs/sha256:ceb4404cd0d9cb9e0470df76d74b6109b4ef6668770d5cced64b0a6a1bb4e6d7",
          "sha256": "ceb4404cd0d9cb9e0470df76d74b6109b4ef6668770d5cced64b0a6a1bb4e6d7"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/github-markdown-toc/blobs/sha256:6b776f3f2b25671f686707ae436c0bf3e04df4cbf9dddd1ba49d2cb706a4ff17",
          "sha256": "6b776f3f2b25671f686707ae436c0bf3e04df4cbf9dddd1ba49d2cb706a4ff17"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/github-markdown-toc.rb",
  "ruby_source_checksum": {
    "sha256": "94fc5e867965f352aeae6877a6b9da2ac600b3c93930275f85b27f3b293ff2cb"
  },
  "date_added": "2016-05-06T10:56:39+01:00",
  "readme": "github-markdown-toc\n===================\n\n[![Go Report Card](https://goreportcard.com/badge/github.com/ekalinin/github-markdown-toc.go)](https://goreportcard.com/report/github.com/ekalinin/github-markdown-toc.go)\n[![codecov](https://codecov.io/gh/ekalinin/github-markdown-toc.go/branch/master/graph/badge.svg)](https://codecov.io/gh/ekalinin/github-markdown-toc.go)\n[![Go Reference](https://pkg.go.dev/badge/github.com/ekalinin/github-markdown-toc.go.svg)](https://pkg.go.dev/github.com/ekalinin/github-markdown-toc.go)\n[![MIT license](https://img.shields.io/badge/license-MIT-brightgreen.svg)](https://opensource.org/licenses/MIT)\n![GitHub release (latest by date)](https://img.shields.io/github/v/release/ekalinin/github-markdown-toc.go)\n\n\nThis is a golang based implementation of the\n[github-markdown-toc](https://github.com/ekalinin/github-markdown-toc) tool.\n\nThe advantages of this implementation:\n\n  * no dependencies (no need curl, wget, awk, etc.)\n  * cross-platform (support for Windows, Mac OS, etc.)\n  * regexp for parsing TOC\n  * parallel processing of multiple documents\n\n\n*Attention*: gh-md-toc is able to work properly only if your machine is\nconnected to the Internet.\n\nTable of Contents\n=================\n\n  * [github-markdown-toc](#github-markdown-toc)\n  * [Installation](#installation)\n    * [Precompiled binaries](#precompiled-binaries)\n    * [Compiling from source](#compiling-from-source)\n    * [Homebew (Mac only)](#homebew-mac-only)\n  * [Tests](#tests)\n  * [Usage](#usage)\n    * [STDIN](#stdin)\n    * [Local files](#local-files)\n    * [Remote files](#remote-files)\n    * [Multiple files](#multiple-files)\n    * [Combo](#combo)\n    * [Depth](#depth)\n    * [No Escape](#no-escape)\n    * [Github token](#github-token)\n    * [Bash/ZSH auto\\-complete](#bashzsh-auto-complete)\n  * [LICENSE](#license)\n\nCreated by [gh-md-toc](https://github.com/ekalinin/github-markdown-toc.go)\n\nInstallation\n============\n\nPrecompiled binaries\n--------------------\n\nSee the releases page, \"Downloads\" section:\n\n  * https://github.com/ekalinin/github-markdown-toc.go/releases\n\nFor example:\n\n```bash\n$ wget https://github.com/ekalinin/github-markdown-toc.go/releases/download/1.1.0/gh-md-toc.linux.amd64.tgz\n$ tar xzvf gh-md-toc.linux.amd64.tgz\ngh-md-toc\n$ ./gh-md-toc --version\n1.1.0\n```\n\nCompiling from source\n---------------------\n\nYou need golang installed in your OS:\n\n```bash\n$ make build\n$ ./gh-md-toc --help\nusage: gh-md-toc [<flags>] [<path>...]\n\nFlags:\n  --help           Show context-sensitive help (also try --help-long and --help-man).\n  --serial         Grab TOCs in the serial mode\n  --hide-header    Hide TOC header\n  --hide-footer    Hide TOC footer\n  --start-depth=0  Start including from this level. Defaults to 0 (include all levels)\n  --depth=0        How many levels of headings to include. Defaults to 0 (all)\n  --no-escape      Do not escape chars in sections\n  --token=TOKEN    GitHub personal token\n  --indent=2       Indent space of generated list\n  --debug          Show debug info\n  --version        Show application version.\n\nArgs:\n  [<path>]  Local path or URL of the document to grab TOC. Read MD from stdin if not entered.\n```\n\nGo Install\n------------------\n\nYou need golang installed in your OS:\n\n```bash\ngo install \"github.com/ekalinin/github-markdown-toc.go/cmd/gh-md-toc@latest\"\n```\n\nHomebew (Mac only)\n------------------\n\n\n```bash\n$ brew install github-markdown-toc\n```\n\nTests\n=====\n\n```bash\n$ make test\ncoverage: 28.8% of statements\nok      _~/projects/my/github-toc.go    0.003s\n```\n\nUsage\n=====\n\nSTDIN\n-----\n\nHere's an example of TOC creating for markdown from STDIN:\n\n```bash\n➥ cat ~/projects/Dockerfile.vim/README.md | ./gh-md-toc\n  * [Dockerfile.vim](#dockerfilevim)\n  * [Screenshot](#screenshot)\n  * [Installation](#installation)\n        * [OR using Pathogen:](#or-using-pathogen)\n        * [OR using Vundle:](#or-using-vundle)\n  * [License](#license)\n```\n\nLocal files\n-----------\n\nHere's an example of TOC creating for a local README.md:\n\n```bash\n➥ ./gh-md-toc ~/projects/Dockerfile.vim/README.md                                                                                                                                                Вс. марта 22 22:51:46 MSK 2015\n\nTable of Contents\n=================\n\n  * [Dockerfile.vim](#dockerfilevim)\n  * [Screenshot](#screenshot)\n  * [Installation](#installation)\n        * [OR using Pathogen:](#or-using-pathogen)\n        * [OR using Vundle:](#or-using-vundle)\n  * [License](#license)\n```\n\nRemote files\n------------\n\nAnd here's an example, when you have a README.md like this:\n\n  * [README.md without TOC](https://github.com/ekalinin/envirius/blob/f939d3b6882bfb6ecb28ef7b6e62862f934ba945/README.md)\n\nAnd you want to generate TOC for it.\n\nThere is nothing easier:\n\n```bash\n➥ ./gh-md-toc https://github.com/ekalinin/envirius/blob/master/README.md\n\nTable of Contents\n=================\n\n  * [envirius](#envirius)\n    * [Idea](#idea)\n    * [Features](#features)\n  * [Installation](#installation)\n  * [Uninstallation](#uninstallation)\n  * [Available plugins](#available-plugins)\n  * [Usage](#usage)\n    * [Check available plugins](#check-available-plugins)\n    * [Check available versions for each plugin](#check-available-versions-for-each-plugin)\n    * [Create an environment](#create-an-environment)\n    * [Activate/deactivate environment](#activatedeactivate-environment)\n      * [Activating in a new shell](#activating-in-a-new-shell)\n      * [Activating in the same shell](#activating-in-the-same-shell)\n    * [Get list of environments](#get-list-of-environments)\n    * [Get current activated environment](#get-current-activated-environment)\n    * [Do something in environment without enabling it](#do-something-in-environment-without-enabling-it)\n    * [Get help](#get-help)\n    * [Get help for a command](#get-help-for-a-command)\n  * [How to add a plugin?](#how-to-add-a-plugin)\n    * [Mandatory elements](#mandatory-elements)\n      * [plug_list_versions](#plug_list_versions)\n      * [plug_url_for_download](#plug_url_for_download)\n      * [plug_build](#plug_build)\n    * [Optional elements](#optional-elements)\n      * [Variables](#variables)\n      * [Functions](#functions)\n    * [Examples](#examples)\n  * [Example of the usage](#example-of-the-usage)\n  * [Dependencies](#dependencies)\n  * [Supported OS](#supported-os)\n  * [Tests](#tests)\n  * [Version History](#version-history)\n  * [License](#license)\n  * [README in another language](#readme-in-another-language)\n```\n\nThat's all! Now all you need — is copy/paste result from console into original\nREADME.md.\n\nAnd here is a result:\n\n  * [README.md with TOC](https://github.com/ekalinin/envirius/blob/24ea3be0d3cc03f4235fa4879bb33dc122d0ae29/README.md)\n\n\nMultiple files\n--------------\n\nIt supports multiple files as well:\n\n```bash\n➥ ./gh-md-toc \\\n    https://github.com/aminb/rust-for-c/blob/master/hello_world/README.md \\\n    https://github.com/aminb/rust-for-c/blob/master/control_flow/README.md \\\n    https://github.com/aminb/rust-for-c/blob/master/primitive_types_and_operators/README.md \\\n    https://github.com/aminb/rust-for-c/blob/master/unique_pointers/README.md\n\n  * [Hello world](https://github.com/aminb/rust-for-c/blob/master/hello_world/README.md#hello-world)\n\n  * [Control Flow](https://github.com/aminb/rust-for-c/blob/master/control_flow/README.md#control-flow)\n    * [If](https://github.com/aminb/rust-for-c/blob/master/control_flow/README.md#if)\n    * [Loops](https://github.com/aminb/rust-for-c/blob/master/control_flow/README.md#loops)\n    * [For loops](https://github.com/aminb/rust-for-c/blob/master/control_flow/README.md#for-loops)\n    * [Switch/Match](https://github.com/aminb/rust-for-c/blob/master/control_flow/README.md#switchmatch)\n    * [Method call](https://github.com/aminb/rust-for-c/blob/master/control_flow/README.md#method-call)\n\n  * [Primitive Types and Operators](https://github.com/aminb/rust-for-c/blob/master/primitive_types_and_operators/README.md#primitive-types-and-operators)\n\n  * [Unique Pointers](https://github.com/aminb/rust-for-c/blob/master/unique_pointers/README.md#unique-pointers)\n```\n\nProcessing of multiple documents is in parallel mode since version 0.4.0\nYou can use (old) serial mode by passing option ``--serial`` in the console:\n\n```bash\n$ ./gh-md-toc --serial ...\n```\n\nTimings:\n\n```bash\n➥ time (./gh-md-toc --serial README.md ../envirius/README.ru.md ../github-toc/README.md > /dev/null)\n\nreal    0m1.200s\nuser    0m0.040s\nsys     0m0.004s\n```\n\n```bash\n➥ time (./gh-md-toc README.md ../envirius/README.ru.md ../github-toc/README.md > /dev/null)\n\nreal    0m0.784s\nuser    0m0.036s\nsys     0m0.004s\n```\n\n\nCombo\n-----\n\nYou can easily combine both ways:\n\n```bash\n➥ ./gh-md-toc \\\n    ~/projects/Dockerfile.vim/README.md \\\n    https://github.com/ekalinin/sitemap.s/blob/master/README.md\n\n  * [Dockerfile.vim](~/projects/Dockerfile.vim/README.md#dockerfilevim)\n  * [Screenshot](~/projects/Dockerfile.vim/README.md#screenshot)\n  * [Installation](~/projects/Dockerfile.vim/README.md#installation)\n        * [OR using Pathogen:](~/projects/Dockerfile.vim/README.md#or-using-pathogen)\n        * [OR using Vundle:](~/projects/Dockerfile.vim/README.md#or-using-vundle)\n  * [License](~/projects/Dockerfile.vim/README.md#license)\n\n  * [sitemap.js](https://github.com/ekalinin/sitemap.js/blob/master/README.md#sitemapjs)\n    * [Installation](https://github.com/ekalinin/sitemap.js/blob/master/README.md#installation)\n    * [Usage](https://github.com/ekalinin/sitemap.js/blob/master/README.md#usage)\n    * [License](https://github.com/ekalinin/sitemap.js/blob/master/README.md#license)\n\nCreated by [gh-md-toc](https://github.com/ekalinin/github-markdown-toc)\n```\n\nStarting Depth\n--------------\n\nUse `--start-depth=INT` to control the starting header level (i.e. include only the levels\nstarting with `INT`)\n\n```bash\n➥ ./gh-md-toc --start-depth=1 ~/projects/Dockerfile.vim/README.md\n\nTable of Contents\n=================\n\n  * [Or using Pathogen:](#or-using-pathogen)\n  * [Or using Vundle:](#or-using-vundle)\n\nCreated by [gh-md-toc](https://github.com/ekalinin/github-markdown-toc)\n```\n\nDepth\n-----\n\nUse `--depth=INT` to control how many levels of headers to include in the TOC\n\n```bash\n➥ ./gh-md-toc --depth=1 ~/projects/Dockerfile.vim/README.md\n\nTable of Contents\n=================\n\n  * [Dockerfile\\.vim](#dockerfilevim)\n  * [Screenshot](#screenshot)\n  * [Installation](#installation)\n  * [License](#license)\n```\n\nNo escape\n---------\n\n```bash\n➥ ./gh-md-toc ~/projects/my/Dockerfile.vim/README.md | grep Docker\n* [Dockerfile\\.vim](#dockerfilevim)\n\n➥ ./gh-md-toc --no-escape ~/projects/my/Dockerfile.vim/README.md | grep Docker\n* [Dockerfile.vim](#dockerfilevim)\n```\n\nGithub token\n------------\n\nAll your tokents are [here](https://github.com/settings/tokens).\n\nExample for cli argument:\n\n```bash\n➥ ./gh-md-toc --depth=1 --token=2a2dabe1f2c2399bd542ba93fe6ce70fe7898563 README.md\n\nTable of Contents\n=================\n\n* [github\\-markdown\\-toc](#github-markdown-toc)\n* [Table of Contents](#table-of-contents)\n* [Installation](#installation)\n* [Tests](#tests)\n* [Usage](#usage)\n* [LICENSE](#license)\n```\n\nExample for environment variable:\n\n```bash\n➥ GH_TOC_TOKEN=2a2dabe1f2c2399bd542ba93fe6ce70fe7898563 ./gh-md-toc --depth=1  README.md\n\nTable of Contents\n=================\n\n* [github\\-markdown\\-toc](#github-markdown-toc)\n* [Table of Contents](#table-of-contents)\n* [Installation](#installation)\n* [Tests](#tests)\n* [Usage](#usage)\n* [LICENSE](#license)\n```\n\nBash/ZSH auto-complete\n----------------------\n\n\n\nJust add a simple command into your `~/.bashrc` or `~/.zshrc`:\n\n```bash\n# for zsh\neval \"$(gh-md-toc --completion-script-zsh)\"\n\n# for bash\neval \"$(gh-md-toc --completion-script-bash)\"\n```\n\nAlpine Linux\n============\n\nAlpine Linux uses _musl_ instead of _glibc_ by default. If you install [`binutils`](https://pkgs.alpinelinux.org/packages?name=binutils&repo=main&arch=x86_64) and run…\n\n```bash\napk add binutils && \\\nreadelf -l /path/to/gh-md-toc\n```\n\n…you'll see that it relies on `/lib64/ld-linux-x86-64.so.2` as its _interpreter_. You can solve this by installing [libc6-compat](https://pkgs.alpinelinux.org/contents?file=ld-linux-x86-64*) alongside downloading the Linux `amd64` build.\n\n```bash\napk add libc6-compat\n```\n\n\nLICENSE\n=======\n\nSee [LICENSE](https://github.com/ekalinin/github-markdown-toc.go/blob/master/LICENSE)\nfile."
}
