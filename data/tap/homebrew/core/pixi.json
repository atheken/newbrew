{
  "name": "pixi",
  "full_name": "pixi",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Package management made easy",
  "license": "BSD-3-Clause",
  "homepage": "https://github.com/prefix-dev/pixi",
  "versions": {
    "stable": "0.0.7",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/prefix-dev/pixi/archive/refs/tags/v0.0.7.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "6b76294da2724604c308c60ca3a7a3654355157fa9df338cfd2b4e4b16fd2f96"
    },
    "head": {
      "url": "https://github.com/prefix-dev/pixi.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pixi/blobs/sha256:d4f3304a341628289cebfd37b08e9fcfce5e2bb324359fd5dfaa9324728682fe",
          "sha256": "d4f3304a341628289cebfd37b08e9fcfce5e2bb324359fd5dfaa9324728682fe"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pixi/blobs/sha256:0ba983170ca108f86a6bfcbd31edd0a82dbbf90665ee1461a9fcf768ffe525aa",
          "sha256": "0ba983170ca108f86a6bfcbd31edd0a82dbbf90665ee1461a9fcf768ffe525aa"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pixi/blobs/sha256:db3fe6e7cbe96e5a6a8e854bbee6b1efbecad9092770926a41745fadbeebbba9",
          "sha256": "db3fe6e7cbe96e5a6a8e854bbee6b1efbecad9092770926a41745fadbeebbba9"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pixi/blobs/sha256:fea6630b2e66322a9b00a2c448249db2b1f45b66292949ee8c680ac65d60f127",
          "sha256": "fea6630b2e66322a9b00a2c448249db2b1f45b66292949ee8c680ac65d60f127"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pixi/blobs/sha256:91b56203302c6d6b79423da6b86e76c41c35d94d8d2cf8c77a25b0c0c5562f33",
          "sha256": "91b56203302c6d6b79423da6b86e76c41c35d94d8d2cf8c77a25b0c0c5562f33"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pixi/blobs/sha256:b6bb76ebc6af9311afba2e683ff1a7631005c4a035ddd0902fe0247e2bb567a9",
          "sha256": "b6bb76ebc6af9311afba2e683ff1a7631005c4a035ddd0902fe0247e2bb567a9"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pixi/blobs/sha256:d83eb43c32fa314176ed221d31848bc952bfa6aa9ff0b8acb909195b17ad07b9",
          "sha256": "d83eb43c32fa314176ed221d31848bc952bfa6aa9ff0b8acb909195b17ad07b9"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake",
    "rust",
    "pkg-config"
  ],
  "dependencies": [
    "openssl@3"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/pixi.rb",
  "ruby_source_checksum": {
    "sha256": "7f260491d1afb3e8fc04751f4e283e1dee0e4b9d05924dfd1e951797113a7f7d"
  },
  "date_added": "2023-07-12T10:49:07-07:00",
  "readme": "<h1>\n  <a href=\"https://github.com/prefix-dev/pixi/\">\n    <picture>\n      <source srcset=\"https://github.com/prefix-dev/pixi/assets/4995967/a3f9ff01-c9fb-4893-83c0-2a3f924df63e\" type=\"image/webp\">\n      <source srcset=\"https://github.com/prefix-dev/pixi/assets/4995967/e42739c4-4cd9-49bb-9d0a-45f8088494b5\" type=\"image/png\">\n      <img src=\"https://github.com/prefix-dev/pixi/assets/4995967/e42739c4-4cd9-49bb-9d0a-45f8088494b5\" alt=\"banner\">\n    </picture>\n  </a>\n</h1>\n\n<h1 align=\"center\">\n\n![License][license-badge]\n[![Build Status][build-badge]][build]\n[![Project Chat][chat-badge]][chat-url]\n\n[license-badge]: https://img.shields.io/badge/license-BSD--3--Clause-blue?style=flat-square\n[build-badge]: https://img.shields.io/github/actions/workflow/status/prefix-dev/pixi/rust.yml?style=flat-square&branch=main\n[build]: https://github.com/prefix-dev/pixi/actions/\n[chat-badge]: https://img.shields.io/discord/1082332781146800168.svg?label=&logo=discord&logoColor=ffffff&color=7389D8&labelColor=6A7EC2&style=flat-square\n[chat-url]: https://discord.gg/kKV8ZxyzY4\n\n</h1>\n\n# pixi: Package management made easy\n\n`pixi` is a cross-platform, multi-language package manager and workflow tool\nbuild on the shoulders of the conda ecosystem.\n\n`pixi` provides all developers the exceptional experience that is usually found\nwith package managers like `cargo` or `yarn` but for any language.\n\nhttps://github.com/prefix-dev/pixi/assets/885054/64666dee-841d-4680-9a61-7927913bc4e2\n\n## Highlights\n\n- Support for **multiple languages** like Python, C++ and R using Conda packages\n- **All OS's**: Linux, Windows, macOS (including Apple Silicon)\n- A **lockfile** is always included and always up-to-date.\n- A clean and simple Cargo-like **command-line interface**.\n- Install tools **per-project** or **system-wide**.\n- Completely written in **Rust** and build on top of the **[rattler](https://github.com/mamba-org/rattler)** library.\n\n## Getting Started\n\n* ⚡ [Installation](#installation)\n* ⚙️ [Examples](/examples)\n* 📚 [Documentation](https://prefix.dev/docs/pixi/overview)\n* 😍 [Contributing](#contributing)\n* 🔨 [Built using Pixi](#pixibuilt)\n\n# Status\n\nThis project is currently in _alpha stage_.\nThere are many features that we want to add.\nThe file formats are still in flux.\nExpect breaking changes while we work towards a v1.0.\n\nSome notable features that we have in the pipeline are:\n\n* **Build and publish** your project as a Conda package.\n* Support for **PyPi packages**.\n* Support **dependencies from source**.\n* Improve docs, examples and user experience\n\n# Installation\nYou can install `pixi` as a binary from the releases.\n`pixi` can be installed on macOS, Linux, and Windows.\nThe provided scripts will automatically download the latest version of `pixi`, extract it, and move the `pixi` binary to `~/.pixi/bin`.\nIf this directory does not already exist, the script will create it.\n\n## macOS and Linux\nTo install Pixi on macOS and Linux, open a terminal and run the following command:\n```bash\ncurl -fsSL https://pixi.sh/install.sh | bash\n# or with brew\nbrew install pixi\n```\nThe script will also update your ~/.bash_profile to include ~/.pixi/bin in your PATH, allowing you to invoke the pixi command from anywhere.\nYou might need to restart your terminal or source your shell for the changes to take effect.\n\n## Windows\nTo install Pixi on Windows, open a PowerShell terminal (you may need to run it as an administrator) and run the following command:\n\n```powershell\niwr -useb https://pixi.sh/install.ps1 | iex\n```\nThe script will inform you once the installation is successful and add the ~/.pixi/bin directory to your PATH, which will allow you to run the pixi command from any location.\n\n## Install from source\n\n`pixi` is 100% written in Rust and therefor it can be installed, build and tested with cargo.\nTo start using `pixi` from a source build run:\n\n```shell\ncargo install --locked pixi\n# Or to use the the latest `main` branch\ncargo install --locked --git https://github.com/prefix-dev/pixi.git\n```\n\nor when you want to make changes use:\n\n```shell\ncargo build\ncargo test\n```\n\nIf you have any issues building because of the dependency on `rattler` checkout\nit's [compile steps](https://github.com/mamba-org/rattler/tree/main#give-it-a-try)\n\n## Uninstall\nTo uninstall the pixi binary should be removed.\nDelete `pixi` from the `$PIXI_DIR` which is default to `~/.pixi/bin/pixi`\n\nSo on linux its:\n```shell\nrm ~/.pixi/bin/pixi\n```\nand on windows:\n```shell\n$PIXI_BIN = \"$Env:LocalAppData\\pixi\\bin\\pixi\"; Remove-Item -Path $PIXI_BIN\n```\nAfter this command you can still use the tools you installed with `pixi`.\nTo remove these as well just remove the whole `~/.pixi` directory and remove the directory from your path.\n\n### Autocompletion\n\nTo get autocompletion run:\n\n```shell\n# On unix (MacOS or Linux), pick your shell (use `echo $SHELL` to find the shell you are using.):\necho 'eval \"$(pixi completion --shell bash)\"' >> ~/.bashrc\necho 'eval \"$(pixi completion --shell zsh)\"' >> ~/.zshrc\necho 'pixi completion --shell fish | source' >> ~/.config/fish/config.fish\necho 'eval (pixi completion --shell elvish | slurp)' >> ~/.elvish/rc.elv\n\n# On Windows:\nAdd-Content -Path $PROFILE -Value 'Invoke-Expression (&pixi completion --shell powershell)'\n```\n\nAnd then restart the shell or source the shell config file.\n\n# Usage\n\nThe cli looks as follows:\n\n```bash\n➜ pixi\nA package management and workflow tool\n\nUsage: pixi [OPTIONS] <COMMAND>\n\nCommands:\n  completion  Generates a completion script for a shell\n  init        Creates a new project\n  add         Adds a dependency to the project\n  run         Runs command in project\n  shell       Start a shell in the pixi environment of the project\n  global      Global is the main entry point for the part of pixi that executes on the global(system) level\n  auth        Login to prefix.dev or anaconda.org servers to access private channels\n  install     Install all dependencies\n  help        Print this message or the help of the given subcommand(s)\n\nOptions:\n  -v, --verbose...  More output per occurrence\n  -q, --quiet...    Less output per occurrence\n  -h, --help        Print help\n  -V, --version     Print version\n\n```\n\n## Creating a pixi project\n\nInitialize a new project and navigate to the project directory\n\n```\npixi init myproject\ncd myproject\n```\n\nAdd the dependencies you want to use\n\n```\npixi add cowpy\n```\n\nRun the installed package in its environment\n\n```bash\npixi run cowpy \"Thanks for using pixi\"\n```\n\nActivate a shell in the environment\n```shell\npixi shell\ncowpy \"Thanks for using pixi\"\nexit\n```\n\n## Installing a conda package globally\n\nYou can also globally install conda packages into their own environment.\nThis behavior is similar to [`pipx`](https://github.com/pypa/pipx) or [`condax`](https://github.com/mariusvniekerk/condax).\n\n```bash\npixi global install cowpy\n```\n\n<a name=\"contributing\"></a>\n\n## Contributing 😍\n\nWe would absolutely love for you to contribute to `pixi`!\nWhether you want to start an issue, fix a bug you encountered, or suggest an\nimprovement, every contribution is greatly appreciated.\n\nIf you're just getting started with our project or stepping into the Rust\necosystem for the first time, we've got your back!\nWe recommend beginning with issues labeled as `good first issue`.\nThese are carefully chosen tasks that provide a smooth entry point into\ncontributing.These issues are typically more straightforward and are a great way\nto get familiar with the project.\n\nGot questions or ideas, or just want to chat? Join our lively conversations on\nDiscord.\nWe're very active and would be happy to welcome you to our\ncommunity. [Join our discord server today!][chat-url]\n\n<a name=\"pixibuilt\"></a>\n## Built using pixi\n\nTo see whats being built with `pixi` check out the [Community](/docs/Community.md) page."
}
