{
  "name": "rtx",
  "full_name": "rtx",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Polyglot runtime manager (asdf rust clone)",
  "license": "MIT",
  "homepage": "https://github.com/jdxcode/rtx",
  "versions": {
    "stable": "1.35.6",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/jdxcode/rtx/archive/refs/tags/v1.35.6.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "7e9723146611592d1b5c4c8dfa33e027e09af4f7da714f6890ef7b09bb0c23f7"
    },
    "head": {
      "url": "https://github.com/jdxcode/rtx.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rtx/blobs/sha256:2c55a62d6632322d56cb466816cf705d556084c5f1f6111768f620fdc40b798e",
          "sha256": "2c55a62d6632322d56cb466816cf705d556084c5f1f6111768f620fdc40b798e"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rtx/blobs/sha256:c323673f9c919b6230b9c09c33e9045d4a88948ce3998cf96894a8091b016a58",
          "sha256": "c323673f9c919b6230b9c09c33e9045d4a88948ce3998cf96894a8091b016a58"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rtx/blobs/sha256:df79d5f8824d096445877d5145fb9107d2b11bfc6c6774d4f453f7ce0b2a5480",
          "sha256": "df79d5f8824d096445877d5145fb9107d2b11bfc6c6774d4f453f7ce0b2a5480"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rtx/blobs/sha256:44ddf7e143029cbab88256edb6d4c86871901107fc6ee6e12cf28a1001c666a6",
          "sha256": "44ddf7e143029cbab88256edb6d4c86871901107fc6ee6e12cf28a1001c666a6"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rtx/blobs/sha256:44a2bf1a57b5cc405b42440a5811f3551929f448206878f4b303e19252888c54",
          "sha256": "44a2bf1a57b5cc405b42440a5811f3551929f448206878f4b303e19252888c54"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rtx/blobs/sha256:146e8198f1d01901cf3bae8a76d670cf4b1a902583d296efc966a4b9c4062943",
          "sha256": "146e8198f1d01901cf3bae8a76d670cf4b1a902583d296efc966a4b9c4062943"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rtx/blobs/sha256:7ceeb3ae4c1f99c1b722342a0f82d10d0535c485f433baa0b08e27033d2afead",
          "sha256": "7ceeb3ae4c1f99c1b722342a0f82d10d0535c485f433baa0b08e27033d2afead"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust",
    "pkg-config"
  ],
  "dependencies": [
    "openssl@3"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/rtx.rb",
  "ruby_source_checksum": {
    "sha256": "5b6e198ab85e6e0c1b032fc89c6844d02ac035fcaee8e62e273f151a67128cb4"
  },
  "date_added": "2023-02-14T08:22:16+00:00",
  "readme": "<div align=\"center\">\n<a href=\"https://github.com/jdxcode/rtx\"><picture>\n  <source media=\"(prefers-color-scheme: dark)\" width=\"617\" srcset=\"./docs/logo-dark@2x.png\">\n  <img alt=\"rtx logo\" width=\"617\" src=\"./docs/logo-light@2x.png\">\n</picture></a>\n<br/>\n<a href=\"https://crates.io/crates/rtx-cli\"><img alt=\"Crates.io\" src=\"https://img.shields.io/crates/v/rtx-cli?style=for-the-badge\"></a>\n<a href=\"https://github.com/jdxcode/rtx/blob/main/LICENSE\"><img alt=\"GitHub\" src=\"https://img.shields.io/github/license/jdxcode/rtx?color=%2320A920&style=for-the-badge\"></a>\n<a href=\"https://github.com/jdxcode/rtx/actions/workflows/rtx.yml\"><img alt=\"GitHub Workflow Status\" src=\"https://img.shields.io/github/actions/workflow/status/jdxcode/rtx/rtx.yml?color=%2320A920&style=for-the-badge\"></a>\n<a href=\"https://codecov.io/gh/jdxcode/rtx\"><img alt=\"Codecov\" src=\"https://img.shields.io/codecov/c/github/jdxcode/rtx?color=%2320A920&style=for-the-badge\"></a>\n<a href=\"https://discord.gg/mABnUDvP57\"><img alt=\"Discord\" src=\"https://img.shields.io/discord/1066429325269794907?color=%23738ADB&style=for-the-badge\"></a>\n<p><em>Polyglot runtime manager (asdf rust clone)</em></p>\n</div>\n\n## Features\n\n- **asdf-compatible** - rtx is compatible with asdf plugins and `.tool-versions` files. It can be used as a drop-in replacement.\n- **Polyglot** - compatible with any language, so no more figuring out how nvm, nodenv, pyenv, etc work individually—just use 1 tool.\n- **Fast** - rtx is written in Rust and is very fast. 20x-200x faster than asdf.\n- **No shims** - shims cause problems, they break `which`, and add overhead. By default, rtx\n  does not use them—however you can if you want to.\n- **Fuzzy matching and aliases** - It's enough to just say you want \"v20\" of node, or the \"lts\"\n  version. rtx will figure out the right version without you needing to specify an exact version.\n- **Arbitrary env vars** - Set custom env vars when in a project directory like `NODE_ENV=production` or `AWS_PROFILE=staging`.\n\n## 30 Second Demo\n\nThe following shows using rtx to install different versions\nof [node](https://nodejs.org).\nNote that calling `which node` gives us a real path to node, not a shim.\n\n[![demo](./docs/demo.gif)](./docs/demo.gif)\n\n## Quickstart\n\nInstall rtx on macOS (other methods [here](#installation)):\n\n```sh-session\n$ curl https://rtx.pub/rtx-latest-macos-arm64 > ~/bin/rtx\n$ chmod +x ~/bin/rtx\n$ rtx --version\nrtx 2023.8.2\n```\n\nHook rtx into your shell (pick the right one for your shell):\n\n```sh-session\n# note this assumes rtx is located at ~/bin/rtx\necho 'eval \"$(~/bin/rtx activate bash)\"' >> ~/.bashrc\necho 'eval \"$(~/bin/rtx activate zsh)\"' >> ~/.zshrc\necho '~/bin/rtx activate fish | source' >> ~/.config/fish/config.fish\n```\n\n> **Warning**\n>\n> If you use direnv with `layout python` or other logic that needs to reference rtx runtimes inside\n> of an `.envrc`, see the [direnv section](#direnv) below.\n\nInstall a runtime and set it as the global default:\n\n```sh-session\n$ rtx use --global node@20\n$ node -v\nv20.0.0\n```\n\n## Table of Contents\n\n<!-- AUTO-GENERATED-CONTENT:START (TOC:collapse=true&collapseText=Click to expand&maxDepth=3) -->\n<details>\n<summary>Click to expand</summary>\n\n- [Features](#features)\n- [30 Second Demo](#30-second-demo)\n- [Quickstart](#quickstart)\n- [About](#about)\n  - [How it works](#how-it-works)\n  - [Common commands](#common-commands)\n- [Installation](#installation)\n  - [Download binary](#download-binary)\n  - [Register shell hook](#register-shell-hook)\n- [Uninstalling](#uninstalling)\n- [Shebang](#shebang)\n- [Configuration](#configuration)\n  - [`.rtx.toml`](#rtxtoml)\n  - [Legacy version files](#legacy-version-files)\n  - [`.tool-versions`](#tool-versions)\n  - [Scopes](#scopes)\n  - [Global config: `~/.config/rtx/config.toml`](#global-config-configrtxconfigtoml)\n  - [Environment variables](#environment-variables)\n- [Aliases](#aliases)\n- [Plugins](#plugins)\n  - [Plugin Options](#plugin-options)\n- [Versioning](#versioning)\n- [Directories](#directories)\n  - [`~/.config/rtx`](#configrtx)\n  - [`~/.cache/rtx`](#cachertx)\n  - [`~/.local/share/rtx`](#localsharertx)\n- [Templates](#templates)\n- [&#91;experimental&#93; Config Environments](#experimental-config-environments)\n- [IDE Integration](#ide-integration)\n- [Core Plugins](#core-plugins)\n- [FAQs](#faqs)\n  - [I don't want to put a `.tool-versions` file into my project since git shows it as an untracked file.](#i-dont-want-to-put-a-tool-versions-file-into-my-project-since-git-shows-it-as-an-untracked-file)\n  - [What is the difference between \"nodejs\" and \"node\" (or \"golang\" and \"go\")?](#what-is-the-difference-between-nodejs-and-node-or-golang-and-go)\n  - [What does `rtx activate` do?](#what-does-rtx-activate-do)\n  - [`rtx activate` doesn't work in `~/.profile`, `~/.bash_profile`, `~/.zprofile`](#rtx-activate-doesnt-work-in-profile-bash_profile-zprofile)\n  - [rtx is failing or not working right](#rtx-is-failing-or-not-working-right)\n  - [Windows support?](#windows-support)\n  - [How do I use rtx with http proxies?](#how-do-i-use-rtx-with-http-proxies)\n  - [How do the shorthand plugin names map to repositories?](#how-do-the-shorthand-plugin-names-map-to-repositories)\n  - [Does \"node@20\" mean the newest available version of node?](#does-node20-mean-the-newest-available-version-of-node)\n  - [How do I migrate from asdf?](#how-do-i-migrate-from-asdf)\n  - [How compatible is rtx with asdf?](#how-compatible-is-rtx-with-asdf)\n  - [rtx isn't working when calling from tmux or another shell initialization script](#rtx-isnt-working-when-calling-from-tmux-or-another-shell-initialization-script)\n  - [How do I disable/force CLI color output?](#how-do-i-disableforce-cli-color-output)\n  - [Is rtx secure?](#is-rtx-secure)\n- [Comparison to asdf](#comparison-to-asdf)\n  - [Performance](#performance)\n  - [Environment variables in rtx](#environment-variables-in-rtx)\n  - [UX](#ux)\n  - [CI/CD](#cicd)\n  - [GitHub Actions](#github-actions)\n- [Shims](#shims)\n- [direnv](#direnv)\n  - [rtx inside of direnv (`use rtx` in `.envrc`)](#rtx-inside-of-direnv-use-rtx-in-envrc)\n  - [Do you need direnv?](#do-you-need-direnv)\n- [Cache Behavior](#cache-behavior)\n  - [Plugin/Runtime Cache](#pluginruntime-cache)\n- [Commands](#commands)\n  - [`rtx activate [OPTIONS] [SHELL_TYPE]`](#rtx-activate-options-shell_type)\n  - [`rtx alias get <PLUGIN> <ALIAS>`](#rtx-alias-get-plugin-alias)\n  - [`rtx alias ls [OPTIONS]`](#rtx-alias-ls-options)\n  - [`rtx alias set <PLUGIN> <ALIAS> <VALUE>`](#rtx-alias-set-plugin-alias-value)\n  - [`rtx alias unset <PLUGIN> <ALIAS>`](#rtx-alias-unset-plugin-alias)\n  - [`rtx bin-paths`](#rtx-bin-paths)\n  - [`rtx cache clear`](#rtx-cache-clear)\n  - [`rtx completion [SHELL]`](#rtx-completion-shell)\n  - [`rtx current [PLUGIN]`](#rtx-current-plugin)\n  - [`rtx deactivate`](#rtx-deactivate)\n  - [`rtx direnv activate`](#rtx-direnv-activate)\n  - [`rtx doctor`](#rtx-doctor)\n  - [`rtx env [OPTIONS] [TOOL@VERSION]...`](#rtx-env-options-toolversion)\n  - [`rtx env-vars [OPTIONS] [ENV_VARS]...`](#rtx-env-vars-options-env_vars)\n  - [`rtx exec [OPTIONS] [TOOL@VERSION]... [-- <COMMAND>...]`](#rtx-exec-options-toolversion----command)\n  - [`rtx implode [OPTIONS]`](#rtx-implode-options)\n  - [`rtx install [OPTIONS] [TOOL@VERSION]...`](#rtx-install-options-toolversion)\n  - [`rtx latest [OPTIONS] <TOOL@VERSION>`](#rtx-latest-options-toolversion)\n  - [`rtx link [OPTIONS] <TOOL@VERSION> <PATH>`](#rtx-link-options-toolversion-path)\n  - [`rtx ls [OPTIONS]`](#rtx-ls-options)\n  - [`rtx ls-remote <TOOL@VERSION> [PREFIX]`](#rtx-ls-remote-toolversion-prefix)\n  - [`rtx outdated [TOOL@VERSION]...`](#rtx-outdated-toolversion)\n  - [`rtx plugins install [OPTIONS] [NAME] [GIT_URL]`](#rtx-plugins-install-options-name-git_url)\n  - [`rtx plugins link [OPTIONS] <NAME> [PATH]`](#rtx-plugins-link-options-name-path)\n  - [`rtx plugins ls [OPTIONS]`](#rtx-plugins-ls-options)\n  - [`rtx plugins ls-remote [OPTIONS]`](#rtx-plugins-ls-remote-options)\n  - [`rtx plugins uninstall <PLUGIN>...`](#rtx-plugins-uninstall-plugin)\n  - [`rtx plugins update [PLUGIN]...`](#rtx-plugins-update-plugin)\n  - [`rtx prune [OPTIONS] [PLUGINS]...`](#rtx-prune-options-plugins)\n  - [`rtx reshim`](#rtx-reshim)\n  - [`rtx self-update`](#rtx-self-update)\n  - [`rtx settings get <KEY>`](#rtx-settings-get-key)\n  - [`rtx settings ls`](#rtx-settings-ls)\n  - [`rtx settings set <KEY> <VALUE>`](#rtx-settings-set-key-value)\n  - [`rtx settings unset <KEY>`](#rtx-settings-unset-key)\n  - [`rtx shell [OPTIONS] [TOOL@VERSION]...`](#rtx-shell-options-toolversion)\n  - [`rtx sync node <--brew|--nvm|--nodenv>`](#rtx-sync-node---brew--nvm--nodenv)\n  - [`rtx sync python --pyenv`](#rtx-sync-python---pyenv)\n  - [`rtx trust [OPTIONS] [CONFIG_FILE]`](#rtx-trust-options-config_file)\n  - [`rtx uninstall <TOOL@VERSION>...`](#rtx-uninstall-toolversion)\n  - [`rtx upgrade [TOOL@VERSION]...`](#rtx-upgrade-toolversion)\n  - [`rtx use [OPTIONS] [TOOL@VERSION]...`](#rtx-use-options-toolversion)\n  - [`rtx version`](#rtx-version)\n  - [`rtx where <TOOL@VERSION>`](#rtx-where-toolversion)\n  - [`rtx which [OPTIONS] <BIN_NAME>`](#rtx-which-options-bin_name)\n\n</details>\n<!-- AUTO-GENERATED-CONTENT:END -->\n\n## About\n\n_New developer? Try reading the [Beginner's Guide](https://dev.to/jdxcode/beginners-guide-to-rtx-ac4) for a gentler introduction._\n\nrtx is a tool for managing programming language and tool versions. For example, use this to install\na particular version of node.js and ruby for a project. Using `rtx activate`, you can have your\nshell automatically switch to the correct node and ruby versions when you `cd` into the project's\ndirectory[^cd]. Other projects on your machine can use a different set of versions.\n\nrtx is inspired by [asdf](https://asdf-vm.com) and uses asdf's vast [plugin ecosystem](https://github.com/asdf-vm/asdf-plugins)\nunder the hood. However, it is _much_ faster than asdf and has a more friendly user experience.\nFor more on how rtx compares to asdf, [see below](#comparison-to-asdf).\n\nrtx can be configured in many ways. The most typical is by `.rtx.toml`, but it's also compatible\nwith asdf `.tool-versions` files. It can also use idiomatic version files like `.node-version` and\n`.ruby-version`. See [Configuration](#configuration) for more.\n\n### How it works\n\nrtx hooks into your shell (with `rtx activate zsh`) and sets the `PATH`\nenvironment variable to point your shell to the correct runtime binaries. When you `cd` into a\ndirectory[^cd] containing a `.tool-versions`/`.rtx.toml` file, rtx will automatically set the\nappropriate tool versions in `PATH`.\n\nAfter activating, every time your prompt displays it will call `rtx hook-env` to fetch new\nenvironment variables.\nThis should be very fast. It exits early if the directory wasn't changed or `.tool-versions`/`.rtx.toml` files haven't been modified.\n\nUnlike asdf which uses shim files to dynamically locate runtimes when they're called, rtx modifies\n`PATH` ahead of time so the runtimes are called directly. This is not only faster since it avoids\nany overhead, but it also makes it so commands like `which node` work as expected. This also\nmeans there isn't any need to run `asdf reshim` after installing new runtime binaries.\n\nYou should note that rtx does not directly install these tools.\nInstead, it leverages plugins to install runtimes.\nSee [plugins](#plugins) below.\n\n[^cd]: Note that rtx does not modify \"cd\". It actually runs every time the prompt is _displayed_.\nSee the [FAQ](#what-does-rtx-activate-do).\n\n### Common commands\n\n    rtx install node@20.0.0  Install a specific version number\n    rtx install node@20      Install a fuzzy version number\n    rtx use node@20          Use node-20.x in current project\n    rtx use -g node@20       Use node-20.x as global default\n\n    rtx install node         Install the current version specified in .tool-versions/.rtx.toml\n    rtx use node@latest      Use latest node in current directory\n    rtx use -g node@system   Use system node as global default\n\n    rtx x node@20 -- node app.js  Run `node app.js` node-20.x on PATH\n\n## Installation\n\nInstalling rtx consists of two steps.\n1. Download the binary.\n   This depends on the device and operating system you are running rtx in.\n1. Register a shell hook.\n   This depends on the shell you are using.\n   Read more about this step in the [FAQ](#what-does-rtx-activate-do).\n\n### Download binary\n\n#### Standalone\n\nNote that it isn't necessary for `rtx` to be on `PATH`. If you run the activate script in your rc\nfile, rtx will automatically add itself to `PATH`.\n\n```\ncurl https://rtx.pub/install.sh | sh\n```\n\nIf you want to verify the install script hasn't been tampered with:\n\n```\ngpg --keyserver hkps://keyserver.ubuntu.com --recv-keys 0x29DDE9E0\ncurl https://rtx.pub/install.sh.sig | gpg --decrypt > install.sh\n# ensure the above is signed with the rtx release key\nsh ./install.sh\n```\n\nor if you're allergic to `| sh`:\n\n```\ncurl https://rtx.pub/rtx-latest-macos-arm64 > /usr/local/bin/rtx\n```\n\nIt doesn't matter where you put it. So use `~/bin`, `/usr/local/bin`, `~/.local/share/rtx/bin/rtx`\nor whatever.\n\nSupported architectures:\n\n- `x64`\n- `arm64`\n\nSupported platforms:\n\n- `macos`\n- `linux`\n\nIf you need something else, compile it with [cargo](#cargo).\n[Windows isn't currently supported.](https://github.com/jdxcode/rtx/discussions/66)\n\n#### Homebrew\n\n```\nbrew install rtx\n```\n\nAlternatively, use the custom tap (which is updated immediately after a release)):\n\n```\nbrew install jdxcode/tap/rtx\n```\n\n#### MacPorts\n\n```\nsudo port install rtx\n```\n\n#### Cargo\n\nBuild from source with Cargo:\n\n```\ncargo install rtx-cli\n```\n\nDo it faster with [cargo-binstall](https://github.com/cargo-bins/cargo-binstall):\n\n```\ncargo install cargo-binstall\ncargo binstall rtx-cli\n```\n\nBuild from the latest commit in main:\n\n```\ncargo install rtx-cli --git https://github.com/jdxcode/rtx --branch main\n```\n\n#### npm\n\nrtx is available on npm as a precompiled binary. This isn't a node.js package—just distributed\nvia npm. This is useful for JS projects that want to setup rtx via `package.json` or `npx`.\n\n```\nnpm install -g rtx-cli\n```\n\nUse npx if you just want to test it out for a single command without fully installing:\n\n```\nnpx rtx-cli exec python@3.11 -- python some_script.py\n```\n\n#### GitHub Releases\n\nDownload the latest release from [GitHub](https://github.com/jdxcode/rtx/releases).\n\n```\ncurl https://github.com/jdxcode/rtx/releases/download/v2023.8.2/rtx-v2023.8.2-linux-x64 > /usr/local/bin/rtx\nchmod +x /usr/local/bin/rtx\n```\n\n#### apt\n\nFor installation on Ubuntu/Debian:\n\n```\nsudo install -dm 755 /etc/apt/keyrings\nwget -qO - https://rtx.pub/gpg-key.pub | gpg --dearmor | sudo tee /etc/apt/keyrings/rtx-archive-keyring.gpg 1> /dev/null\necho \"deb [signed-by=/etc/apt/keyrings/rtx-archive-keyring.gpg arch=amd64] https://rtx.pub/deb stable main\" | sudo tee /etc/apt/sources.list.d/rtx.list\nsudo apt update\nsudo apt install -y rtx\n```\n\n> **Warning**\n>\n> If you're on arm64 you'll need to run the following:\n>\n> ```\n> echo \"deb [signed-by=/etc/apt/keyrings/rtx-archive-keyring.gpg arch=arm64] https://rtx.pub/deb stable main\" | sudo tee /etc/apt/sources.list.d/rtx.list\n> ```\n\n#### dnf\n\nFor Fedora, CentOS, Amazon Linux, RHEL and other dnf-based distributions:\n\n```\ndnf install -y dnf-plugins-core\ndnf config-manager --add-repo https://rtx.pub/rpm/rtx.repo\ndnf install -y rtx\n```\n\n#### yum\n\n```\nyum install -y yum-utils\nyum-config-manager --add-repo https://rtx.pub/rpm/rtx.repo\nyum install -y rtx\n```\n\n#### apk\n\nFor Alpine Linux:\n\n```\napk add rtx\n```\n\n_rtx lives in the [community repository](https://gitlab.alpinelinux.org/alpine/aports/-/blob/master/community/rtx/APKBUILD)._\n\n#### aur\n\nFor Arch Linux:\n\n```\ngit clone https://aur.archlinux.org/rtx.git\ncd rtx\nmakepkg -si\n```\n\n#### nix\n\nFor the Nix package manager, at release 23.05 or later:\n\n```\nnix-env -iA rtx\n```\n\nYou can also import the package directly using\n`rtx-flake.packages.${system}.rtx`. It supports all default Nix\nsystems.\n\n### Register shell hook\n\n#### Bash\n\n```\necho 'eval \"$(rtx activate bash)\"' >> ~/.bashrc\n```\n\n#### Fish\n\n```\necho 'rtx activate fish | source' >> ~/.config/fish/config.fish\n```\n\n#### Nushell\n\n```nushell\ndo {\n  let rtxpath = ($nu.config-path | path dirname | path join \"rtx.nu\")\n  run-external rtx activate nu --redirect-stdout | save $rtxpath -f\n  $\"\\nsource \"($rtxpath)\"\" | save $nu.config-path --append\n}\n```\n\n#### Xonsh\n\nSince `.xsh` files are [not compiled](https://github.com/xonsh/xonsh/issues/3953) you may shave a bit off startup time by using a pure Python import: add the code below to, for example, `~/.config/xonsh/rtx.py` config file and `import rtx` it in `~/.config/xonsh/rc.xsh`:\n\n```xsh\nfrom pathlib        \timport Path\nfrom xonsh.built_ins\timport XSH\n\nctx = XSH.ctx\nrtx_init = subprocess.run([Path('~/bin/rtx').expanduser(),'activate','xonsh'],capture_output=True,encoding=\"UTF-8\").stdout\nXSH.builtins.execx(rtx_init,'exec',ctx,filename='rtx')\n```\n\nOr continue to use `rc.xsh`/`.xonshrc`:\n\n```xsh\necho 'execx($(~/bin/rtx activate xonsh))' >> ~/.config/xonsh/rc.xsh # or ~/.xonshrc\n```\n\nGiven that `rtx` replaces both shell env `$PATH` and OS environ `PATH`, watch out that your configs don't have these two set differently (might throw `os.environ['PATH'] = xonsh.built_ins.XSH.env.get_detyped('PATH')` at the end of a config to make sure they match)\n\n#### Something else?\n\nAdding a new shell is not hard at all since very little shell code is\nin this project.\n[See here](https://github.com/jdxcode/rtx/tree/main/src/shell) for how\nthe others are implemented. If your shell isn't currently supported\nI'd be happy to help you get yours integrated.\n\n## Uninstalling\n\nUse `rtx implode` to uninstall rtx. This will remove the rtx binary and all of its data. Use\n`rtx implode --help` for more information.\n\nAlternatively, manually remove the following directories to fully clean up:\n\n- `~/.local/share/rtx` (can also be `RTX_DATA_DIR` or `XDG_DATA_HOME/rtx`)\n- `~/.config/rtx` (can also be `RTX_CONFIG_DIR` or `XDG_CONFIG_HOME/rtx`)\n- on Linux: `~/.cache/rtx` (can also be `RTX_CACHE_DIR` or `XDG_CACHE_HOME/rtx`)\n- on macOS: `~/Library/Caches/rtx` (can also be `RTX_CACHE_DIR`)\n\n## Shebang\n\nYou can specify a tool and its version in a shebang without needing to first\nsetup `.tool-versions`/`.rtx.toml` config:\n\n```typescript\n#!/usr/bin/env -S rtx x node@20 -- node\n// \"env -S\" allows multiple arguments in a shebang\nconsole.log(`Running node: ${process.version}`);\n```\n\nThis can also be useful in environments where rtx isn't activated\n(such as a non-interactive session).\n\n## Configuration\n\n### `.rtx.toml`\n\n`.rtx.toml` is a new config file that replaces asdf-style `.tool-versions` files with a file\nthat has lot more flexibility. It supports functionality that is not possible with `.tool-versions`, such as:\n\n- setting arbitrary env vars while inside the directory\n- passing options to plugins like `virtualenv='.venv'` for [rtx-python](https://github.com/jdxcode/rtx-python#virtualenv-support).\n- specifying custom plugin urls\n\nHere is what an `.rtx.toml` looks like:\n\n```toml\n[env]\n# supports arbitrary env vars so rtx can be used like direnv/dotenv\nNODE_ENV = 'production'\n\n[tools]\n# specify single or multiple versions\nterraform = '1.0.0'\nerlang = ['23.3', '24.0']\n\n# supports everything you can do with .tool-versions currently\nnode = ['16', 'prefix:20', 'ref:master', 'path:~/.nodes/14']\n\n# send arbitrary options to the plugin, passed as:\n# RTX_TOOL_OPTS__VENV=.venv\npython = {version='3.10', virtualenv='.venv'}\n\n[plugins]\n# specify a custom repo url\n# note this will only be used if the plugin does not already exist\npython = 'https://github.com/jdxcode/rtx-python'\n\n[settings] # project-local settings\nverbose = true\n\n[alias.node] # project-local aliases\nmy_custom_node = '20'\n```\n\n`.rtx.toml` files are hierarchical. The configuration in a file in the current directory will\noverride conflicting configuration in parent directories. For example, if `~/src/myproj/.rtx.toml`\ndefines the following:\n\n```toml\n[tools]\nnode = '20'\npython = '3.10'\n```\n\nAnd `~/src/myproj/backend/.rtx.toml` defines:\n\n```toml\n[tools]\nnode = '18'\nruby = '3.1'\n```\n\nThen when inside of `~/src/myproj/backend`, `node` will be `18`, `python` will be `3.10`, and `ruby`\nwill be `3.1`. You can check the active versions with `rtx ls --current`.\n\nYou can also have environment specific config files like `.rtx.production.toml`, see\n[Config Environments](#experimental-config-environments) for more details.\n\n#### `[env]` - Arbitrary Environment Variables\n\nThe `[env]` section of .rtx.toml allows setting arbitrary environment variables.\nThese can be simple key/value entries like this:\n\n```toml\n[env]\nNODE_ENV = 'production'\n```\n\n`PATH` is treated specially, it needs to be defined as an array in `env_path`:\n\n```toml\nenv_path = [\n    # adds an absolute path\n    \"~/.local/share/bin\",\n    # adds a path relative to the .rtx.toml, not PWD\n    \"./node_modules/.bin\",\n]\n```\n\n_Note: `env_path` is a top-level key, it does not go inside of `[env]`._\n\nEnvironment variable values can be templates, see [Templates](#templates) for details.\n\n```toml\n[env]\nLD_LIBRARY_PATH = \"/some/path:{{env.LD_LIBRARY_PATH}}\"\n```\n\n`env_file` can be used to specify a [dotenv](https://dotenv.org) file to load:\n\n```toml\nenv_file = '.env'\n```\n\n_Note: `env_file` goes at the top of the file, above `[env]`._\n\n```toml\n[env]\nNODE_ENV = false # unset a previously set NODE_ENV\n```\n\n### Legacy version files\n\nrtx supports \"legacy version files\" just like asdf. They're language-specific files like `.node-version`\nand `.python-version`. These are ideal for setting the runtime version of a project without forcing\nother developers to use a specific tool like rtx/asdf.\n\nThey support aliases, which means you can have an `.nvmrc` file with `lts/hydrogen` and it will work\nin rtx and nvm. Here are some of the supported legacy version files:\n\n| Plugin     | \"Legacy\" (Idiomatic) Files                         |\n|------------|----------------------------------------------------|\n| crystal    | `.crystal-version`                                 |\n| elixir     | `.exenv-version`                                   |\n| go         | `.go-version`, `go.mod`                            |\n| java       | `.java-version`, `.sdkmanrc`                       |\n| node       | `.nvmrc`, `.node-version`                          |\n| python     | `.python-version`                                  |\n| ruby       | `.ruby-version`, `Gemfile`                         |\n| terraform  | `.terraform-version`, `.packer-version`, `main.tf` |\n| yarn       | `.yarnrc`                                          |\n\nIn rtx these are enabled by default. You can disable them with `rtx settings set legacy_version_file false`.\nThere is a performance cost to having these when they're parsed as it's performed by the plugin in\n`bin/parse-version-file`. However these are [cached](#cache-behavior) so it's not a huge deal.\nYou may not even notice.\n\n> **Note**\n>\n> asdf calls these \"legacy version files\" so we do too. I think this is a bad name since it implies\n> that they shouldn't be used—which is definitely not the case IMO. I prefer the term \"idiomatic\"\n> version files since they're version files not specific to asdf/rtx and can be used by other tools.\n> (`.nvmrc` being a notable exception, which is tied to a specific tool.)\n\n### `.tool-versions`\n\nThe `.tool-versions` file is asdf's config file and it can be used in rtx just like `.rtx.toml`.\nIt isn't as flexible so it's recommended to use `.rtx.toml` instead. It can be useful if you\nalready have a lot of `.tool-versions` files or work on a team that uses asdf.\n\nHere is an example with all the supported syntax:\n\n```\nnode        20.0.0       # comments are allowed\nruby        3            # can be fuzzy version\nshellcheck  latest       # also supports \"latest\"\njq          1.6\nerlang      ref:master   # compile from vcs ref\ngo          prefix:1.19  # uses the latest 1.19.x version—needed in case \"1.19\" is an exact match\nshfmt       path:./shfmt # use a custom runtime\nnode        lts          # use lts version of node (not supported by all plugins)\n\nnode        sub-2:lts      # install 2 versions behind the latest lts (e.g.: 18 if lts is 20)\npython      sub-0.1:latest # install python-3.10 if the latest is 3.11\n```\n\nSee [the asdf docs](https://asdf-vm.com/manage/configuration.html#tool-versions) for more info on this file format.\n\n### Scopes\n\nBoth `.rtx.toml` and `.tool-versions` support \"scopes\" which modify the behavior of the version:\n\n* `ref:<SHA>` - compile from a vcs (usually git) ref\n* `prefix:<PREFIX>` - use the latest version that matches the prefix. Useful for Go since `1.20`\n  would only match `1.20` exactly but `prefix:1.20` will match `1.20.1` and `1.20.2` etc.\n* `path:<PATH>` - use a custom compiled version at the given path. One use-case is to re-use\n  Homebrew tools (e.g.: `path:/opt/homebrew/opt/node@20`).\n* `sub-<PARTIAL_VERSION>:<ORIG_VERSION>` - subtracts PARTIAL_VERSION from ORIG_VERSION. This can\n  be used to express something like \"2 versions behind lts\" such as `sub-2:lts`. Or 1 minor\n  version behind the latest version: `sub-0.1:latest`.\n\n### Global config: `~/.config/rtx/config.toml`\n\nrtx can be configured in `~/.config/rtx/config.toml`. It's like local `.rtx.toml` files except that\nit is used for all directories.\n\n```toml\n[tools]\n# global tool versions go here\n# you can set these with `rtx use -g`\nnode = 'lts'\npython = ['3.10', '3.11']\n\n[settings]\n# plugins can read the versions files used by other version managers (if enabled by the plugin)\n# for example, .nvmrc in the case of node's nvm\nlegacy_version_file = true                     # enabled by default (unlike asdf)\nlegacy_version_file_disable_tools = ['python'] # disable for specific tools\n\n# configure `rtx install` to always keep the downloaded archive\nalways_keep_download = false        # deleted after install by default\nalways_keep_install = false         # deleted on failure by default\n\n# configure how frequently (in minutes) to fetch updated plugin repository changes\n# this is updated whenever a new runtime is installed\n# (note: this isn't currently implemented but there are plans to add it: https://github.com/jdxcode/rtx/issues/128)\nplugin_autoupdate_last_check_duration = '1 week' # set to 0 to disable updates\n\n# config files with these prefixes will be trusted by default\ntrusted_config_paths = [\n    '~/work/my-trusted-projects',\n]\n\nverbose = false     # set to true to see full installation output, see `RTX_VERBOSE`\nasdf_compat = false # set to true to ensure .tool-versions will be compatible with asdf, see `RTX_ASDF_COMPAT`\njobs = 4            # number of plugins or runtimes to install in parallel. The default is `4`.\nraw = false         # set to true to directly pipe plugins to stdin/stdout/stderr\nyes = false         # set to true to automatically answer yes to all prompts\n\nshorthands_file = '~/.config/rtx/shorthands.toml' # path to the shorthands file, see `RTX_SHORTHANDS_FILE`\ndisable_default_shorthands = false # disable the default shorthands, see `RTX_DISABLE_DEFAULT_SHORTHANDS`\ndisable_tools = ['node']           # disable specific tools, generally used to turn off core tools\n\nexperimental = false # enable experimental features\nlog_level = 'debug' # log verbosity, see `RTX_LOG_LEVEL`\n\n[alias.node]\nmy_custom_node = '20'  # makes `rtx install node@my_custom_node` install node-20.x\n                       # this can also be specified in a plugin (see below in \"Aliases\")\n```\n\nThese settings can also be managed with `rtx settings ls|get|set|unset`.\n\n### Environment variables\n\nrtx can also be configured via environment variables. The following options are available:\n\n#### `RTX_DATA_DIR`\n\nThis is the directory where rtx stores plugins and tool installs. The default location is `~/.local/share/rtx`.\n\n#### `RTX_CACHE_DIR`\n\nThis is the directory where rtx stores internal cache. The default location is `~/.cache/rtx` on\nLinux and\n`~/Library/Caches/rtx` on macOS.\n\n#### `RTX_CONFIG_FILE`\n\nThis is the path to the config file. The default is `~/.config/rtx/config.toml`.\n(Or `$XDG_CONFIG_HOME/config.toml` if that is set)\n\n#### `RTX_DEFAULT_TOOL_VERSIONS_FILENAME`\n\nSet to something other than \".tool-versions\" to have rtx look for `.tool-versions` files but with\na different name.\n\n#### `RTX_DEFAULT_CONFIG_FILENAME`\n\nSet to something other than `.rtx.toml` to have rtx look for `.rtx.toml` config files with a different name.\n\n#### [experimental] `RTX_ENV`\n\nEnables environment-specific config files such as `.rtx.development.toml`.\nUse this for different env vars or different tool versions in\ndevelopment/staging/production environments. See\n[Config Environments](#experimental-config-environments) for more on how\nto use this feature.\n\n#### `RTX_${PLUGIN}_VERSION`\n\nSet the version for a runtime. For example, `RTX_NODE_VERSION=20` will use node@20.x regardless\nof what is set in `.tool-versions`/`.rtx.toml`.\n\n#### `RTX_LEGACY_VERSION_FILE=1`\n\nPlugins can read the versions files used by other version managers (if enabled by the plugin)\nfor example, `.nvmrc` in the case of node's nvm. See [legacy version files](#legacy-version-files) for more\ninformation.\n\nSet to \"0\" to disable legacy version file parsing.\n\n#### `RTX_LEGACY_VERSION_FILE_DISABLE_TOOLS=node,python`\n\nDisable legacy version file parsing for specific tools. Separate with `,`.\n\n#### `RTX_USE_TOML=0`\n\nSet to `1` to default to using `.rtx.toml` in `rtx local` instead of `.tool-versions` for\nconfiguration.\n\nFor now this is not used by `rtx use` which will only use `.rtx.toml` unless `--path` is specified.\n\n#### `RTX_TRUSTED_CONFIG_PATHS`\n\nThis is a list of paths that rtx will automatically mark as\ntrusted. They can be separated with `:`.\n\n#### `RTX_LOG_LEVEL=trace|debug|info|warn|error`\n\nThese change the verbosity of rtx.\n\nYou can also use `RTX_DEBUG=1`, `RTX_TRACE=1`, and `RTX_QUIET=1` as well as\n`--log-level=trace|debug|info|warn|error`.\n\n#### `RTX_LOG_FILE=~/rtx.log`\n\nOutput logs to a file.\n\n#### `RTX_LOG_FILE_LEVEL=trace|debug|info|warn|error`\n\nSame as `RTX_LOG_LEVEL` but for the log _file_ output level. This is useful if you want\nto store the logs but not have them litter your display.\n\n#### `RTX_ALWAYS_KEEP_DOWNLOAD=1`\n\nSet to \"1\" to always keep the downloaded archive. By default it is deleted after install.\n\n#### `RTX_ALWAYS_KEEP_INSTALL=1`\n\nSet to \"1\" to always keep the install directory. By default it is deleted on failure.\n\n#### `RTX_VERBOSE=1`\n\nThis shows the installation output during `rtx install` and `rtx plugin install`.\nThis should likely be merged so it behaves the same as `RTX_DEBUG=1` and we don't have\n2 configuration for the same thing, but for now it is its own config.\n\n#### `RTX_ASDF_COMPAT=1`\n\nOnly output `.tool-versions` files in `rtx local|global` which will be usable by asdf.\nThis disables rtx functionality that would otherwise make these files incompatible with asdf.\n\n#### `RTX_JOBS=1`\n\nSet the number plugins or runtimes to install in parallel. The default is `4`.\n\n#### `RTX_RAW=1`\n\nSet to \"1\" to directly pipe plugin scripts to stdin/stdout/stderr. By default stdin is disabled\nbecause when installing a bunch of plugins in parallel you won't see the prompt. Use this if a\nplugin accepts input or otherwise does not seem to be installing correctly.\n\nSets `RTX_JOBS=1` because only 1 plugin script can be executed at a time.\n\n#### `RTX_SHORTHANDS_FILE=~/.config/rtx/shorthands.toml`\n\nUse a custom file for the shorthand aliases. This is useful if you want to share plugins within\nan organization.\n\nThe file should be in this toml format:\n\n```toml\nelixir = \"https://github.com/my-org/rtx-elixir.git\"\nnode = \"https://github.com/my-org/rtx-node.git\"\n```\n\n#### `RTX_DISABLE_DEFAULT_SHORTHANDS=1`\n\nDisables the shorthand aliases for installing plugins. You will have to specify full urls when\ninstalling plugins, e.g.: `rtx plugin install node https://github.com/asdf-vm/asdf-node.git`\n\n#### `RTX_DISABLE_TOOLS=python,node`\n\nDisables the specified tools. Separate with `,`. Generally used for core plugins but works with\nall.\n\n#### `RTX_YES=yes`\n\nThis will automatically answer yes or no to prompts. This is useful for scripting.\n\n#### `RTX_EXPERIMENTAL=1`\n\nEnables experimental features.\n\n## Aliases\n\nrtx supports aliasing the versions of runtimes. One use-case for this is to define aliases for LTS\nversions of runtimes. For example, you may want to specify `lts-hydrogen` as the version for node@20.x\nso you can use set it with `node lts-hydrogen` in `.tool-versions`/`.rtx.toml`.\n\nUser aliases can be created by adding an `alias.<PLUGIN>` section to `~/.config/rtx/config.toml`:\n\n```toml\n[alias.node]\nmy_custom_20 = '20'\n```\n\nPlugins can also provide aliases via a `bin/list-aliases` script. Here is an example showing node.js\nversions:\n\n```bash\n#!/usr/bin/env bash\n\necho \"lts-hydrogen 18\"\necho \"lts-gallium 16\"\necho \"lts-fermium 14\"\n```\n\n> **Note:**\n>\n> Because this is rtx-specific functionality not currently used by asdf it isn't likely to be in any\n> plugin currently, but plugin authors can add this script without impacting asdf users.\n\n## Plugins\n\nrtx uses asdf's plugin ecosystem under the hood. These plugins contain shell scripts like\n`bin/install` (for installing) and `bin/list-all` (for listing all of the available versions).\n\nSee https://github.com/asdf-vm/asdf-plugins for the list of built-in plugins shorthands. See asdf's\n[Create a Plugin](https://asdf-vm.com/plugins/create.html) for how to create your own or just learn\nmore about how they work.\n\n### Plugin Options\n\nrtx has support for \"plugin options\" which is configuration specified in `.rtx.toml` to change behavior\nof plugins. One example of this is virtualenv on python runtimes:\n\n```toml\n[tools]\npython = {version='3.11', virtualenv='.venv'}\n```\n\nThis will be passed to all plugin scripts as `RTX_TOOL_OPTS__VIRTUALENV=.venv`. The user can specify\nany option and it will be passed to the plugin in that format.\n\nCurrently this only supports simple strings, but we can make it compatible with more complex types\n(arrays, tables) fairly easily if there is a need for it.\n\n## Versioning\n\nrtx uses [Calver](https://calver.org/) versioning (`2023.6.1`).\nBreaking changes will be few but when they do happen,\nthey will be communicated in the CLI with plenty of notice whenever possible.\n\nRather than have semver major releases to communicate change in large releases,\nnew functionality and changes can be opted-into with settings like `experimental = true`.\nThis way plugin authors and users can\ntest out new functionality immediately without waiting for a major release.\n\nThe numbers in Calver (YYYY.MM.RELEASE) simply represent the date of the release—not compatibility\nor how many new features were added.\nEach release will be small and incremental.\n\n## Directories\n\nThe following are the directories that rtx uses.\nThese are the default directories, see\n[Configuration](#configuration) for information on changing the locations.\n\n> **Tip**\n>\n> If you often find yourself using these directories (as I do), I suggest setting all of them to `~/.rtx` for easy access.\n\n### `~/.config/rtx`\n\nThis directory stores the global configuration file `~/.config/rtx/config.toml`.\n\n### `~/.cache/rtx`\n\n_On macOS this is `~/Library/Caches/rtx`._\n\nStores internal cache that rtx uses for things like the list of all available versions of a\nplugin.\nSee [Cache Behavior](#cache-behavior) for more information.\n\n### `~/.local/share/rtx`\n\nThis is the main directory that rtx uses and is where plugins and tools are installed into.\nIt is nearly identical to `~/.asdf` in asdf, so much so that you may be able to get by\nsymlinking these together and using asdf and rtx simultaneously. (Supporting this isn't a\nproject goal, however).\n\n#### `~/.local/share/rtx/downloads`\n\nThis is where plugins may optionally cache downloaded assets such as tarballs. Use the\n`always_keep_downloads` setting to prevent rtx from removing files from here.\n\n#### `~/.local/share/rtx/plugins`\n\nrtx installs plugins to this directory when running `rtx plugins install`. If you are working on a\nplugin, I suggest\nsymlinking it manually by running:\n\n```\nln -s ~/src/rtx-my-tool ~/.local/share/rtx/plugins/my-tool\n```\n\n#### `~/.local/share/rtx/installs`\n\nThis is where tools are installed to when running `rtx install`. For example, `rtx install\nnode@20.0.0` will install to `~/.local/share/rtx/installs/node/20.0.0`\n\nThis will also create other symlinks to this directory for version prefixes (\"20\" and \"20.15\")\nand matching aliases (\"lts\", \"latest\").\nFor example:\n\n```\n20 -> ./20.15.0\n20.15 -> ./20.15.0\nlatest -> ./20.15.0\nlts -> ./20.15.0\n```\n\n#### `~/.local/share/rtx/shims`\n\nThis is where rtx places shims. Generally these are used for IDE integration or if `rtx activate`\ndoes not work for some reason.\n\n## Templates\n\n> **Warning**\n>\n> This functionality is experimental and may change in the future.\n\nTemplates are used in the following locations:\n\n- `.tool-versions` files\n- `.rtx.toml` files for most configuration\n- _(Submit a ticket if you want to see it used elsewhere!)_\n\nThe following context objects are available inside templates:\n\n- `env: HashMap<String, String>` – current environment variables\n- `config_root: PathBuf` – directory containing the `.rtx.toml` file\n\nAs well as these functions:\n\n- `exec(command: &str) -> String` – execute a command and return the output\n\nTemplates are parsed with [tera](https://tera.netlify.app/docs)—which is quite powerful. For\nexample, this snippet will get the directory name of the project:\n\n```toml\n[env]\nPROJECT_NAME = \"{{config_root | split(pat='/') | last}}\"\n```\n\nHere's another using `exec()`:\n\n```toml\n[aliases]\ncurrent = \"{{exec(command='node --version')}}\"\n```\n\n## [experimental] Config Environments\n\nIt's possible to have separate `.rtx.toml` files in the same directory for different\nenvironments like `development` and `production`. To enable, set\n`experimental = true` in `~/.config/rtx/config.toml`, then set `RTX_ENV` to an environment like\n`development` or `production`. rtx will then look for a `.rtx.{RTX_ENV}.toml` file in the current directory.\n\nrtx will also look for \"local\" files like `.rtx.local.toml` and `.rtx.{RTX_ENV}.local.toml` in\nthe current directory. These are intended to not be committed to version control.\n(Add `rtx.*.local.toml` to your `.gitignore` file.)\n\nThe priority of these files goes in this order (bottom overrides top):\n\n* `.rtx.toml`\n* `.rtx.local.toml`\n* `.rtx.{RTX_ENV}.toml`\n* `.rtx.{RTX_ENV}.local.toml`\n\nUse `rtx doctor` to see which files are being used.\n\n_Note that currently modifying `RTX_DEFAULT_CONFIG_FILENAME` to something other than `.rtx.toml`\nwill not work with this feature. For now, it will disable it entirely. This may change in the\nfuture._\n\n## IDE Integration\n\nIDEs work better with shims than they do environment variable modifications. The simplest way is\nto add the rtx shim directory to PATH.\n\nFor IntelliJ and VSCode—and likely others, you can modify `~/.zprofile`\nwith the following:\n\n```\nexport PATH=\"$HOME/.local/share/rtx/shims:$PATH\"\n```\n\nThis won't work for all of rtx's functionality. For example, arbitrary env vars in `[env]` will only be set\nif a shim is executed. For this we need tighter integration with the IDE and a custom plugin. If you feel\nambitious, take a look at existing direnv extensions for your IDE and see if you can modify it to work for rtx.\nDirenv and rtx work similarly and there should be a direnv extension that can be used as a starting point.\n\nAlternatively, you may be able to get tighter integration with a direnv extension and using the\n[`use_rtx`](#direnv) direnv function.\n\n## Core Plugins\n\nrtx comes with some plugins built into the CLI written in Rust. These are new and will improve over\ntime. They can be easily overridden by installing a plugin with the same name, e.g.: `rtx plugin install python`.\n\nYou can see the core plugins with `rtx plugin ls --core`.\n\n* [Python](./docs/python.md)\n* [NodeJS](./docs/node.md)\n* [Ruby](./docs/ruby.md)\n* [Go](./docs/go.md)\n* [Java](./docs/java.md)\n* [Deno (experimental)](./docs/deno.md)\n* [Bun (experimental)](./docs/bun.md)\n\n## FAQs\n\n### I don't want to put a `.tool-versions` file into my project since git shows it as an untracked file.\n\nYou can make git ignore these files in 3 different ways:\n\n- Adding `.tool-versions` to project's `.gitignore` file. This has the downside that you need to commit the change to the ignore file.\n- Adding `.tool-versions` to project's `.git/info/exclude`. This file is local to your project so there is no need to commit it.\n- Adding `.tool-versions` to global gitignore (`core.excludesFile`). This will cause git to ignore `.tool-versions` files in all projects. You can explicitly add one to a project if needed with `git add --force .tool-versions`.\n\n### What is the difference between \"nodejs\" and \"node\" (or \"golang\" and \"go\")?\n\nThese are aliased. For example, `rtx use nodejs@14.0` is the same as `rtx install node@14.0`. This\nmeans it is not possible to have these be different plugins.\n\nThis is for convenience so you don't need to remember which one is the \"official\" name. However if\nsomething with the aliasing is acting up, submit a ticket or just stick to using \"node\" and \"go\".\nUnder the hood, when rtx reads a config file or takes CLI input it will swap out \"nodejs\" and\n\"golang\".\n\nWhile this change is rolling out, there is some migration code that will move installs/plugins from\nthe \"nodejs\" and \"golang\" directories to the new names. If this runs for you you'll see a message\nbut it should not run again unless there is some kind of problem. In this case, it's probably\neasiest to just run `rm -rf ~/.local/share/rtx/installs/{golang,nodejs} ~/.local/share/rtx/plugins/{golang,nodejs}`.\n\nOnce most users have migrated over this migration code will be removed.\n\n### What does `rtx activate` do?\n\nIt registers a shell hook to run `rtx hook-env` every time the shell prompt is displayed.\n`rtx hook-env` checks the current env vars (most importantly `PATH` but there are others like\n`GOROOT` or `JAVA_HOME` for some tools) and adds/removes/updates the ones that have changed.\n\nFor example, if you `cd` into a different directory that has `java 18` instead of `java 17`\nspecified, just before the next prompt is displayed the shell runs: `eval \"$(rtx hook-env)\"`\nwhich will execute something like this in the current shell session:\n\n```sh\nexport JAVA_HOME=$HOME/.local/share/installs/java/18\nexport PATH=$HOME/.local/share/installs/java/18/bin:$PATH\n```\n\nIn reality updating `PATH` is a bit more complex than that because it also needs to remove java-17,\nbut you get the idea.\n\nYou may think that is excessive to run `rtx hook-env` every time the prompt is displayed\nand it should only run on `cd`, however there are plenty of\nsituations where it needs to run without the directory changing, for example if `.tool-versions` or\n`.rtx.toml` was just edited in the current shell.\n\nBecause it runs on prompt display, if you attempt to use `rtx activate` in a\nnon-interactive session (like a bash script), it will never call `rtx hook-env` and in effect will\nnever modify PATH because it never displays a prompt. For this type of setup, you can either call\n`rtx hook-env` manually every time you wish to update PATH, or use [shims](#shims) instead (preferred).\nOr if you only need to use rtx for certain commands, just prefix the commands with\n[`rtx x --`](#rtx-exec-options-toolversion----command).\nFor example, `rtx x -- npm test` or `rtx x -- ./my_script.sh`.\n\n`rtx hook-env` will exit early in different situations if no changes have been made. This prevents\nadding latency to your shell prompt every time you run a command. You can run `rtx hook-env` yourself\nto see what it outputs, however it is likely nothing if you're in a shell that has already been activated.\n\n`rtx activate` also creates a shell function (in most shells) called `rtx`.\nThis is a trick that makes it possible for `rtx shell`\nand `rtx deactivate` to work without wrapping them in `eval \"$(rtx shell)\"`.\n\n### `rtx activate` doesn't work in `~/.profile`, `~/.bash_profile`, `~/.zprofile`\n\n`rtx activate` should only be used in `rc` files. These are the interactive ones used when\na real user is using the terminal. (As opposed to being executed by an IDE or something). The prompt\nisn't displayed in non-interactive environments so PATH won't be modified.\n\nFor non-interactive setups, consider using shims instead which will route calls to the correct\ndirectory by looking at `PWD` every time they're executed. You can also call `rtx exec` instead of\nexpecting things to be directly on PATH. You can also run `rtx env` in a non-interactive shell, however that\nwill only setup the global tools. It won't modify the environment variables when entering into a\ndifferent project.\n\nAlso see the [shebang](#shebang) example for a way to make scripts call rtx to get the runtime.\nThat is another way to use rtx without activation.\n\n### rtx is failing or not working right\n\nFirst try setting `RTX_DEBUG=1` or `RTX_TRACE=1` and see if that gives you more information.\nYou can also set `RTX_LOG_FILE_LEVEL=debug RTX_LOG_FILE=/path/to/logfile` to write logs to a file.\n\nIf something is happening with the activate hook, you can try disabling it and calling `eval \"$(rtx hook-env)\"` manually.\nIt can also be helpful to use `rtx env` which will just output environment variables that would be set.\nAlso consider using [shims](#shims) which can be more compatible.\n\nIf runtime installation isn't working right, try using the `--raw` flag which will install things in\nseries and connect stdin/stdout/stderr directly to the terminal. If a plugin is trying to interact\nwith you for some reason this will make it work.\n\nOf course check the version of rtx with `rtx --version` and make sure it is the latest. Use `rtx self-update`\nto update it. `rtx cache clean` can be used to wipe the internal cache and `rtx implode` can be used\nto remove everything except config.\n\nBefore submitting a ticket, it's a good idea to test what you were doing with asdf. That way we can rule\nout if the issue is with rtx or if it's with a particular plugin. For example, if `rtx install python@latest`\ndoesn't work, try running `asdf install python latest` to see if it's an issue with asdf-python.\n\nLastly, there is `rtx doctor` which will show diagnostic information and any warnings about issues\ndetected with your setup. If you submit a bug report, please include the output of `rtx doctor`.\n\n### Windows support?\n\nThis is something we'd like to add! https://github.com/jdxcode/rtx/discussions/66\n\nIt's not a near-term goal and it would require plugin modifications, but it should be feasible.\n\n### How do I use rtx with http proxies?\n\nShort answer: just set `http_proxy` and `https_proxy` environment variables. These should be lowercase.\n\nrtx doesn't really do anything with http itself. The only exception to that is checking for new versions\nand `rtx self-update`. It uses `git` to clone plugins and the plugins themselves generally will download\nfiles with `curl` or `wget`.\n\nHowever this is really up to the plugin. If you're having a proxy-related issue installing something\nyou should post an issue on the plugin's repo.\n\n### How do the shorthand plugin names map to repositories?\n\ne.g.: how does `rtx plugin install node` know to fetch [https://github.com/rtx-plugins/rtx-nodejs]\n(https://github.com/rtx-plugins/rtx-nodejs)?\n\nasdf maintains [an index](https://github.com/asdf-vm/asdf-plugins) of shorthands that rtx uses as a base.\nThis is regularly updated every time that rtx has a release. This repository is stored directly into\nthe codebase [here](./src/default_shorthands.rs). The bottom of that file contains modifications that\nrtx makes on top of asdf.\n\n### Does \"node@20\" mean the newest available version of node?\n\nIt depends on the command. Normally, for most commands and inside of config files, \"node@20\" will\npoint to the latest _installed_ version of node-20.x. You can find this version by running\n`rtx latest --installed node@20` or by seeing what the `~/.local/share/rtx/installs/node/20` symlink\npoints to:\n\n```sh-session\n$ ls -l ~/.local/share/rtx/installs/node/20\n[...] /home/jdxcode/.local/share/rtx/installs/node/20 -> node-v20.0.0-linux-x64\n```\n\nThere are some exceptions to this, such as the following:\n\n* `rtx install node@20`\n* `rtx latest node@20`\n* `rtx upgrade node@20`\n\nThese will use the latest _available_ version of node-20.x. This generally makes sense because you\nwouldn't want to install a version that is already installed.\n\n### How do I migrate from asdf?\n\nFirst, just install rtx with `rtx activate` like in the getting started guide and remove asdf from your\nshell rc file.\n\nThen you can just run `rtx install` in a directory with an asdf `.tool-versions` file and it will\ninstall the runtimes. You could attempt to avoid this by copying the internal directory from asdf over\nto rtx with `cp -r ~/.asdf ~/.local/share/rtx`. That _should_ work because they use the same structure,\nhowever this isn't officially supported or regularly tested. Alternatively you can set `RTX_DATA_DIR=~/.asdf`\nand see what happens.\n\n### How compatible is rtx with asdf?\n\nrtx should be able to read/install any `.tool-versions` file used by asdf. Any asdf plugin\nshould be usable in rtx. The commands in rtx are slightly\ndifferent, such as `rtx install node@20.0.0` vs `asdf install node 20.0.0`—this is done so\nmultiple tools can be specified at once. However, asdf-style syntax is still supported: (`rtx\ninstall node 20.0.0`). This is the case for most commands, though the help for the command may\nsay that asdf-style syntax is supported.\n\nWhen in doubt, just try asdf syntax and see if it works. If it doesn't open a ticket. It may\nnot be possible to support every command identically, but\nwe should attempt to make things as consistent as possible.\n\nThis isn't important for usability reasons so much as making it so plugins continue to work that\ncall asdf commands.\n\nIf you need to switch to/from asdf or work in a project with asdf users, you can set\n[`RTX_ASDF_COMPAT=1`](#rtx_asdf_compat1). That prevents\nrtx from writing `.tool-versions` files that will not be\ncompatible with asdf. Also consider using `.rtx.toml` instead which won't conflict with asdf setups.\n\n### rtx isn't working when calling from tmux or another shell initialization script\n\n`rtx activate` will not update PATH until the shell prompt is displayed. So if you need to access a\ntool provided by rtx before the prompt is displayed you must manually call `hook-env`:\n\n```bash\neval \"$(rtx activate bash)\"\neval \"$(rtx hook-env)\"\npython --version # will work only after calling hook-env explicitly\n```\n\nFor more information, see [What does `rtx activate` do?](#what-does-rtx-activate-do)\n\n### How do I disable/force CLI color output?\n\nrtx uses [console.rs](https://docs.rs/console/latest/console/fn.colors_enabled.html) which\nhonors the [clicolors spec](https://bixense.com/clicolors/):\n\n* `CLICOLOR != 0`: ANSI colors are supported and should be used when the program isn’t piped.\n* `CLICOLOR == 0`: Don’t output ANSI color escape codes.\n* `CLICOLOR_FORCE != 0`: ANSI colors should be enabled no matter what.\n\n### Is rtx secure?\n\nNot as much as it should be, though currently a bit more secure than asdf. Work will happen in this area as secure\nsupply chains are incredibly important. See [SECURITY.md](./SECURITY.md) for more information.\n\n## Comparison to asdf\n\nrtx is mostly a clone of asdf, but there are notable areas where improvements have been made.\n\n### Performance\n\nasdf made (what I consider) a poor design decision to use shims that go between a call to a runtime\nand the runtime itself. e.g.: when you call `node` it will call an asdf shim file `~/.asdf/shims/node`,\nwhich then calls `asdf exec`, which then calls the correct version of node.\n\nThese shims have terrible performance, adding ~120ms to every runtime call. rtx does not use shims and instead\nupdates `PATH` so that it doesn't have any overhead when simply calling binaries. These shims are the main reason that I wrote this. Note that in the demo gif at the top of this README\nthat `rtx` isn't actually used when calling `node -v` for this reason. The performance is\nidentical to running node without using rtx.\n\nI don't think it's possible for asdf to fix these issues. The author of asdf did a great writeup\nof [performance problems](https://stratus3d.com/blog/2022/08/11/asdf-performance/). asdf is written\nin bash which certainly makes it challenging to be performant, however I think the real problem is the\nshim design. I don't think it's possible to fix that without a complete rewrite.\n\nrtx does call an internal command `rtx hook-env` every time the directory has changed, but because\nit's written in Rust, this is very quick—taking ~10ms on my machine. 4ms if there are no changes, 14ms if it's\na full reload.\n\ntl;dr: asdf adds overhead (~120ms) when calling a runtime, rtx adds a small amount of overhead (~10ms)\nwhen the prompt loads.\n\n### Environment variables in rtx\n\nasdf only helps manage runtime executables. However, some tools are managed via environment variables\n(notably Java which switches via `JAVA_HOME`). This isn't supported very well in asdf and requires\na separate shell extension just to manage.\n\nHowever asdf _plugins_ have a `bin/exec-env` script that is used for exporting environment variables\nlike [`JAVA_HOME`](https://github.com/halcyon/asdf-java/blob/master/bin/exec-env). rtx simply exports\nthe environment variables from the `bin/exec-env` script in the plugin but places them in the shell\nfor _all_ commands. In asdf it only exports those commands when the shim is called. This means if you\ncall `java` it will set `JAVA_HOME`, but not if you call some Java tool like `mvn`.\n\nThis means we're just using the existing plugin script but because rtx doesn't use shims it can be\nused for more things. It would be trivial to make a plugin that exports arbitrary environment\nvariables like [dotenv](https://github.com/motdotla/dotenv) or [direnv](https://github.com/direnv/direnv).\n\n### UX\n\nSome commands are the same in asdf but others have been changed. Everything that's possible\nin asdf should be possible in rtx but may use slightly different syntax. rtx has more forgiving commands,\nsuch as using fuzzy-matching, e.g.: `rtx install node@20`. While in asdf you _can_ run\n`asdf install node latest:20`, you can't use `latest:20` in a `.tool-versions` file or many other places.\nIn `rtx` you can use fuzzy-matching everywhere.\n\nasdf requires several steps to install a new runtime if the plugin isn't installed, e.g.:\n\n```sh-session\nasdf plugin add node\nasdf install node latest:20\nasdf local node latest:20\n```\n\nIn `rtx` this can all be done in a single step to set the local runtime version. If the plugin\nand/or runtime needs to be installed it will prompt:\n\n[![asciicast](https://asciinema.org/a/564031.svg)](https://asciinema.org/a/564031)\n\nI've found asdf to be particularly rigid and difficult to learn. It also made strange decisions like\nhaving `asdf list all` but `asdf latest --all` (why is one a flag and one a positional argument?).\n`rtx` makes heavy use of aliases so you don't need to remember if it's `rtx plugin add node` or\n`rtx plugin install node`. If I can guess what you meant, then I'll try to get rtx to respond\nin the right way.\n\nThat said, there are a lot of great things about asdf. It's the best multi-runtime manager out there\nand I've really been impressed with the plugin system. Most of the design decisions the authors made\nwere very good. I really just have 2 complaints: the shims and the fact it's written in Bash.\n\n### CI/CD\n\nUsing rtx in CI/CD is a great way to synchronize tool versions for dev/build.\n\n### GitHub Actions\n\nUse [`jdxcode/rtx-action`](https://github.com/jdxcode/rtx-action):\n\n```yaml\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: jdxcode/rtx-action@v1\n      - run: node -v # will be the node version from `.rtx.toml`/`.tool-versions`\n```\n\n## Shims\n\nWhile the PATH design of rtx works great in most cases, there are some situations where shims are\npreferable. One example is when calling rtx binaries from an IDE.\n\nTo support this, rtx does have a shim dir that can be used. It's located at `~/.local/share/rtx/shims`.\n\n```sh-session\n$ rtx i node@20.0.0\n$ rtx reshim # may be required if new shims need to be created\n$ ~/.local/share/rtx/shims/node -v\nv20.0.0\n```\n\n## direnv\n\n[direnv](https://direnv.net) and rtx both manage environment variables based on directory. Because they both analyze\nthe current environment variables before and after their respective \"hook\" commands are run, they can sometimes conflict with each other.\n\nIf you have an issue, it's likely to do with the ordering of PATH. This means it would\nreally only be a problem if you were trying to manage the same tool with direnv and rtx. For example,\nyou may use `layout python` in an `.envrc` but also be maintaining a `.tool-versions` file with python\nin it as well.\n\nA more typical usage of direnv would be to set some arbitrary environment variables, or add unrelated\nbinaries to PATH. In these cases, rtx will not interfere with direnv.\n\n### rtx inside of direnv (`use rtx` in `.envrc`)\n\nIf you do encounter issues with `rtx activate`, or just want to use direnv in an alternate way,\nthis is a simpler setup that's less likely to cause issues—at the cost of functionality.\n\nThis may be required if you want to use direnv's `layout python` with rtx. Otherwise there are\nsituations where rtx will override direnv's PATH. `use rtx` ensures that direnv always has control.\n\nTo do this, first use `rtx` to build a `use_rtx` function that you can use in `.envrc` files:\n\n```\nrtx direnv activate > ~/.config/direnv/lib/use_rtx.sh\n```\n\nNow in your `.envrc` file add the following:\n\n```sh-session\nuse rtx\n```\n\ndirenv will now call rtx to export its environment variables. You'll need to make sure to add `use_rtx`\nto all projects that use rtx (or use direnv's `source_up` to load it from a subdirectory). You can also add `use rtx` to `~/.config/direnv/direnvrc`.\n\nNote that in this method direnv typically won't know to refresh `.tool-versions` files\nunless they're at the same level as a `.envrc` file. You'll likely always want to have\na `.envrc` file next to your `.tool-versions` for this reason. To make this a little\neasier to manage, I encourage _not_ actually using `.tool-versions` at all, and instead\nsetting environment variables entirely in `.envrc`:\n\n```\nexport RTX_NODE_VERSION=20.0.0\nexport RTX_PYTHON_VERSION=3.11\n```\n\nOf course if you use `rtx activate`, then these steps won't have been necessary and you can use rtx\nas if direnv was not used.\n\nIf you continue to struggle, you can also try using the [shims method](#shims).\n\n### Do you need direnv?\n\nWhile making rtx compatible with direnv is, and will always be a major goal of this project, I also\nwant rtx to be capable of replacing direnv if needed. This is why rtx includes support for managing\nenv vars and [virtualenv](https://github.com/jdxcode/rtx-python#experimental-virtualenv-support)\nfor python using `.rtx.toml`.\n\nIf you find you continue to need direnv, please open an issue and let me know what it is to see if\nit's something rtx could support. rtx will never be as capable as direnv with a DSL like `.envrc`,\nbut I think we can handle enough common use cases to make that unnecessary for most people.\n\n## Cache Behavior\n\nrtx makes use of caching in many places in order to be efficient. The details about how long to keep\ncache for should eventually all be configurable. There may be gaps in the current behavior where\nthings are hardcoded, but I'm happy to add more settings to cover whatever config is needed.\n\nBelow I explain the behavior it uses around caching. If you're seeing behavior where things don't appear\nto be updating, this is a good place to start.\n\n### Plugin/Runtime Cache\n\nEach plugin has a cache that's stored in `~/$RTX_CACHE_DIR/<PLUGIN>`. It stores\nthe list of versions available for that plugin (`rtx ls-remote <PLUGIN>`), the legacy filenames (see below),\nthe list of aliases, the bin directories within each runtime installation, and the result of\nrunning `exec-env` after the runtime was installed.\n\nRemote versions are updated daily by default. The file is zlib messagepack, if you want to view it you can\nrun the following (requires [msgpack-cli](https://github.com/msgpack/msgpack-cli)).\n\n```sh-session\ncat ~/$RTX_CACHE_DIR/node/remote_versions.msgpack.z | perl -e 'use Compress::Raw::Zlib;my $d=new Compress::Raw::Zlib::Inflate();my $o;undef $/;$d->inflate(<>,$o);print $o;' | msgpack-cli decode\n```\n\nNote that the caching of `exec-env` may be problematic if the script isn't simply exporting\nstatic values. The vast majority of `exec-env` scripts only export static values, but if you're\nworking with a plugin that has a dynamic `exec-env` submit\na ticket and we can try to figure out what to do.\n\nCaching `exec-env` massively improved the performance of rtx since it requires calling bash\nevery time rtx is initialized. Ideally, we can keep this\nbehavior.\n\n<!-- RTX:COMMANDS -->\n## Commands\n\n### `rtx activate [OPTIONS] [SHELL_TYPE]`\n\n```\nInitializes rtx in the current shell\n\nThis should go into your shell's rc file.\nOtherwise, it will only take effect in the current session.\n(e.g. ~/.zshrc, ~/.bashrc)\n\nThis is only intended to be used in interactive sessions, not scripts.\nrtx is only capable of updating PATH when the prompt is displayed to the user.\nFor non-interactive use-cases, use shims instead.\n\nTypically this can be added with something like the following:\n\n    echo 'eval \"$(rtx activate)\"' >> ~/.zshrc\n\nHowever, this requires that \"rtx\" is in your PATH. If it is not, you need to\nspecify the full path like this:\n\n    echo 'eval \"$(/path/to/rtx activate)\"' >> ~/.zshrc\n\nUsage: activate [OPTIONS] [SHELL_TYPE]\n\nArguments:\n  [SHELL_TYPE]\n          Shell type to generate the script for\n\n          [possible values: bash, fish, nu, xonsh, zsh]\n\nOptions:\n      --status\n          Show \"rtx: <PLUGIN>@<VERSION>\" message when changing directories\n\nExamples:\n  $ eval \"$(rtx activate bash)\"\n  $ eval \"$(rtx activate zsh)\"\n  $ rtx activate fish | source\n  $ execx($(rtx activate xonsh))\n```\n### `rtx alias get <PLUGIN> <ALIAS>`\n\n```\nShow an alias for a plugin\n\nThis is the contents of an alias.<PLUGIN> entry in ~/.config/rtx/config.toml\n\nUsage: alias get <PLUGIN> <ALIAS>\n\nArguments:\n  <PLUGIN>\n          The plugin to show the alias for\n\n  <ALIAS>\n          The alias to show\n\nExamples:\n $ rtx alias get node lts-hydrogen\n 20.0.0\n```\n### `rtx alias ls [OPTIONS]`\n\n```\nList aliases\nShows the aliases that can be specified.\nThese can come from user config or from plugins in `bin/list-aliases`.\n\nFor user config, aliases are defined like the following in `~/.config/rtx/config.toml`:\n\n  [alias.node]\n  lts = \"20.0.0\"\n\nUsage: alias ls [OPTIONS]\n\nOptions:\n  -p, --plugin <PLUGIN>\n          Show aliases for <PLUGIN>\n\nExamples:\n  $ rtx aliases\n  node    lts-hydrogen   20.0.0\n```\n### `rtx alias set <PLUGIN> <ALIAS> <VALUE>`\n\n```\nAdd/update an alias for a plugin\n\nThis modifies the contents of ~/.config/rtx/config.toml\n\nUsage: alias set <PLUGIN> <ALIAS> <VALUE>\n\nArguments:\n  <PLUGIN>\n          The plugin to set the alias for\n\n  <ALIAS>\n          The alias to set\n\n  <VALUE>\n          The value to set the alias to\n\nExamples:\n  $ rtx alias set node lts-hydrogen 18.0.0\n```\n### `rtx alias unset <PLUGIN> <ALIAS>`\n\n```\nClears an alias for a plugin\n\nThis modifies the contents of ~/.config/rtx/config.toml\n\nUsage: alias unset <PLUGIN> <ALIAS>\n\nArguments:\n  <PLUGIN>\n          The plugin to remove the alias from\n\n  <ALIAS>\n          The alias to remove\n\nExamples:\n  $ rtx alias unset node lts-hydrogen\n```\n### `rtx bin-paths`\n\n```\nList all the active runtime bin paths\n\nUsage: bin-paths\n```\n### `rtx cache clear`\n\n```\nDeletes all cache files in rtx\n\nUsage: cache clear\n```\n### `rtx completion [SHELL]`\n\n```\nGenerate shell completions\n\nUsage: completion [SHELL]\n\nArguments:\n  [SHELL]\n          Shell type to generate completions for\n\n          [possible values: bash, elvish, fish, powershell, zsh]\n\nExamples:\n  $ rtx completion bash > /etc/bash_completion.d/rtx\n  $ rtx completion zsh  > /usr/local/share/zsh/site-functions/_rtx\n  $ rtx completion fish > ~/.config/fish/completions/rtx.fish\n```\n### `rtx current [PLUGIN]`\n\n```\nShows current active and installed runtime versions\n\nThis is similar to `rtx ls --current`, but this only shows the runtime\nand/or version. It's designed to fit into scripts more easily.\n\nUsage: current [PLUGIN]\n\nArguments:\n  [PLUGIN]\n          Plugin to show versions of e.g.: ruby, node\n\nExamples:\n  # outputs `.tool-versions` compatible format\n  $ rtx current\n  python 3.11.0 3.10.0\n  shfmt 3.6.0\n  shellcheck 0.9.0\n  node 20.0.0\n\n  $ rtx current node\n  20.0.0\n\n  # can output multiple versions\n  $ rtx current python\n  3.11.0 3.10.0\n```\n### `rtx deactivate`\n\n```\nDisable rtx for current shell session\n\nThis can be used to temporarily disable rtx in a shell session.\n\nUsage: deactivate\n\nExamples:\n  $ rtx deactivate bash\n  $ rtx deactivate zsh\n  $ rtx deactivate fish\n  $ execx($(rtx deactivate xonsh))\n```\n### `rtx direnv activate`\n\n```\nOutput direnv function to use rtx inside direnv\n\nSee https://github.com/jdxcode/rtx#direnv for more information\n\nBecause this generates the legacy files based on currently installed plugins,\nyou should run this command after installing new plugins. Otherwise\ndirenv may not know to update environment variables when legacy file versions change.\n\nUsage: direnv activate\n\nExamples:\n  $ rtx direnv activate > ~/.config/direnv/lib/use_rtx.sh\n  $ echo 'use rtx' > .envrc\n  $ direnv allow\n```\n### `rtx doctor`\n\n```\nCheck rtx installation for possible problems.\n\nUsage: doctor\n\nExamples:\n  $ rtx doctor\n  [WARN] plugin node is not installed\n```\n### `rtx env [OPTIONS] [TOOL@VERSION]...`\n\n```\nExports env vars to activate rtx a single time\n\nUse this if you don't want to permanently install rtx. It's not necessary to\nuse this if you have `rtx activate` in your shell rc file.\n\nUsage: env [OPTIONS] [TOOL@VERSION]...\n\nArguments:\n  [TOOL@VERSION]...\n          Tool(s) to use\n\nOptions:\n  -s, --shell <SHELL>\n          Shell type to generate environment variables for\n\n          [possible values: bash, fish, nu, xonsh, zsh]\n\n      --json\n          Output in JSON format\n\n          [short aliases: J]\n\nExamples:\n  $ eval \"$(rtx env -s bash)\"\n  $ eval \"$(rtx env -s zsh)\"\n  $ rtx env -s fish | source\n  $ execx($(rtx env -s xonsh))\n```\n### `rtx env-vars [OPTIONS] [ENV_VARS]...`\n\n```\nManage environment variables\n\nBy default this command modifies \".rtx.toml\" in the current directory.\nYou can specify the file name by either setting the RTX_DEFAULT_CONFIG_FILENAME environment variable, or by using the --file option.\n\nUsage: env-vars [OPTIONS] [ENV_VARS]...\n\nArguments:\n  [ENV_VARS]...\n          Environment variable(s) to set\n          e.g.: NODE_ENV=production\n\nOptions:\n      --file <FILE>\n          The TOML file to update\n\n          Defaults to RTX_DEFAULT_CONFIG_FILENAME environment variable, or \".rtx.toml\".\n\n      --remove <ENV_VAR>\n          Remove the environment variable from config file\n\n          Can be used multiple times.\n```\n### `rtx exec [OPTIONS] [TOOL@VERSION]... [-- <COMMAND>...]`\n\n```\nExecute a command with tool(s) set\n\nuse this to avoid modifying the shell session or running ad-hoc commands with rtx tools set.\n\nTools will be loaded from .rtx.toml/.tool-versions, though they can be overridden with <RUNTIME> args\nNote that only the plugin specified will be overridden, so if a `.tool-versions` file\nincludes \"node 20\" but you run `rtx exec python@3.11`; it will still load node@20.\n\nThe \"--\" separates runtimes from the commands to pass along to the subprocess.\n\nUsage: exec [OPTIONS] [TOOL@VERSION]... [-- <COMMAND>...]\n\nArguments:\n  [TOOL@VERSION]...\n          Tool(s) to start e.g.: node@20 python@3.10\n\n  [COMMAND]...\n          Command string to execute (same as --command)\n\nOptions:\n  -c, --command <C>\n          Command string to execute\n\n      --cd <CD>\n          Change to this directory before executing the command\n\n          [short aliases: C]\n\nExamples:\n  $ rtx exec node@20 -- node ./app.js  # launch app.js using node-20.x\n  $ rtx x node@20 -- node ./app.js     # shorter alias\n\n  # Specify command as a string:\n  $ rtx exec node@20 python@3.11 --command \"node -v && python -V\"\n\n  # Run a command in a different directory:\n  $ rtx x -C /path/to/project node@20 -- node ./app.js\n```\n### `rtx implode [OPTIONS]`\n\n```\nRemoves rtx CLI and all related data\n\nSkips config directory by default.\n\nUsage: implode [OPTIONS]\n\nOptions:\n      --config\n          Also remove config directory\n\n      --dry-run\n          List directories that would be removed without actually removing them\n```\n### `rtx install [OPTIONS] [TOOL@VERSION]...`\n\n```\nInstall a tool version\n\nThis will install a tool version to `~/.local/share/rtx/installs/<PLUGIN>/<VERSION>`\nIt won't be used simply by being installed, however.\nFor that, you must set up a `.rtx.toml`/`.tool-version` file manually or with `rtx use`.\nOr you can call a tool version explicitly with `rtx exec <TOOL>@<VERSION> -- <COMMAND>`.\n\nTools will be installed in parallel. To disable, set `--jobs=1` or `RTX_JOBS=1`\n\nUsage: install [OPTIONS] [TOOL@VERSION]...\n\nArguments:\n  [TOOL@VERSION]...\n          Tool(s) to install e.g.: node@20\n\nOptions:\n  -f, --force\n          Force reinstall even if already installed\n\n  -v, --verbose...\n          Show installation output\n\nExamples:\n  $ rtx install node@20.0.0  # install specific node version\n  $ rtx install node@20      # install fuzzy node version\n  $ rtx install node         # install version specified in .tool-versions or .rtx.toml\n  $ rtx install                # installs everything specified in .tool-versions or .rtx.toml\n```\n### `rtx latest [OPTIONS] <TOOL@VERSION>`\n\n```\nGets the latest available version for a plugin\n\nUsage: latest [OPTIONS] <TOOL@VERSION>\n\nArguments:\n  <TOOL@VERSION>\n          Tool to get the latest version of\n\nOptions:\n  -i, --installed\n          Show latest installed instead of available version\n\nExamples:\n  $ rtx latest node@20  # get the latest version of node 20\n  20.0.0\n\n  $ rtx latest node     # get the latest stable version of node\n  20.0.0\n```\n### `rtx link [OPTIONS] <TOOL@VERSION> <PATH>`\n\n```\nSymlinks a tool version into rtx\n\nUse this for adding installs either custom compiled outside\nrtx or built with a different tool.\n\nUsage: link [OPTIONS] <TOOL@VERSION> <PATH>\n\nArguments:\n  <TOOL@VERSION>\n          Tool name and version to create a symlink for\n\n  <PATH>\n          The local path to the tool version\n          e.g.: ~/.nvm/versions/node/v20.0.0\n\nOptions:\n  -f, --force\n          Overwrite an existing tool version if it exists\n\nExamples:\n  # build node-20.0.0 with node-build and link it into rtx\n  $ node-build 20.0.0 ~/.nodes/20.0.0\n  $ rtx link node@20.0.0 ~/.nodes/20.0.0\n\n  # have rtx use the python version provided by Homebrew\n  $ brew install node\n  $ rtx link node@brew $(brew --prefix node)\n  $ rtx use node@brew\n```\n### `rtx ls [OPTIONS]`\n\n```\nList installed and/or currently selected tool versions\n\nUsage: ls [OPTIONS]\n\nOptions:\n  -p, --plugin <PLUGIN>\n          Only show tool versions from [PLUGIN]\n\n  -c, --current\n          Only show tool versions currently specified in a .tool-versions/.rtx.toml\n\n  -g, --global\n          Only show tool versions currently specified in a the global .tool-versions/.rtx.toml\n\n  -i, --installed\n          Only show tool versions that are installed Hides missing ones defined in .tool-versions/.rtx.toml but not yet installed\n\n      --json\n          Output in json format\n\n          [short aliases: J]\n\n  -m, --missing\n          Display missing tool versions\n\n      --prefix <PREFIX>\n          Display versions matching this prefix\n\nExamples:\n  $ rtx ls\n  node    20.0.0 ~/src/myapp/.tool-versions latest\n  python  3.11.0 ~/.tool-versions           3.10\n  python  3.10.0\n\n  $ rtx ls --current\n  node    20.0.0 ~/src/myapp/.tool-versions 20\n  python  3.11.0 ~/.tool-versions           3.11.0\n\n  $ rtx ls --json\n  {\n    \"node\": [\n      {\n        \"version\": \"20.0.0\",\n        \"install_path\": \"/Users/jdx/.rtx/installs/node/20.0.0\",\n        \"source\": {\n          \"type\": \".rtx.toml\",\n          \"path\": \"/Users/jdx/.rtx.toml\"\n        }\n      }\n    ],\n    \"python\": [...]\n  }\n```\n### `rtx ls-remote <TOOL@VERSION> [PREFIX]`\n\n```\nList runtime versions available for install\n\nnote that the results are cached for 24 hours\nrun `rtx cache clean` to clear the cache and get fresh results\n\nUsage: ls-remote <TOOL@VERSION> [PREFIX]\n\nArguments:\n  <TOOL@VERSION>\n          Plugin to get versions for\n\n  [PREFIX]\n          The version prefix to use when querying the latest version\n          same as the first argument after the \"@\"\n\nExamples:\n  $ rtx ls-remote node\n  18.0.0\n  20.0.0\n\n  $ rtx ls-remote node@20\n  20.0.0\n  20.1.0\n\n  $ rtx ls-remote node 20\n  20.0.0\n  20.1.0\n```\n### `rtx outdated [TOOL@VERSION]...`\n\n```\n[experimental] Shows outdated tool versions\n\nUsage: outdated [TOOL@VERSION]...\n\nArguments:\n  [TOOL@VERSION]...\n          Tool(s) to show outdated versions for\n          e.g.: node@20 python@3.10\n          If not specified, all tools in global and local configs will be shown\n\nExamples:\n  $ rtx outdated\n  Plugin  Requested  Current  Latest\n  python  3.11       3.11.0   3.11.1\n  node    20         20.0.0   20.1.0\n\n  $ rtx outdated node\n  Plugin  Requested  Current  Latest\n  node    20         20.0.0   20.1.0\n```\n### `rtx plugins install [OPTIONS] [NAME] [GIT_URL]`\n\n```\nInstall a plugin\n\nnote that rtx automatically can install plugins when you install a tool\ne.g.: `rtx install node@20` will autoinstall the node plugin\n\nThis behavior can be modified in ~/.config/rtx/config.toml\n\nUsage: plugins install [OPTIONS] [NAME] [GIT_URL]\n\nArguments:\n  [NAME]\n          The name of the plugin to install\n          e.g.: node, ruby\n          Can specify multiple plugins: `rtx plugins install node ruby python`\n\n  [GIT_URL]\n          The git url of the plugin\n\nOptions:\n  -f, --force\n          Reinstall even if plugin exists\n\n  -a, --all\n          Install all missing plugins\n          This will only install plugins that have matching shorthands.\n          i.e.: they don't need the full git repo url\n\n  -v, --verbose...\n          Show installation output\n\nExamples:\n  # install the node via shorthand\n  $ rtx plugins install node\n\n  # install the node plugin using a specific git url\n  $ rtx plugins install node https://github.com/rtx-plugins/rtx-nodejs.git\n\n  # install the node plugin using the git url only\n  # (node is inferred from the url)\n  $ rtx plugins install https://github.com/rtx-plugins/rtx-nodejs.git\n\n  # install the node plugin using a specific ref\n  $ rtx plugins install node https://github.com/rtx-plugins/rtx-nodejs.git#v1.0.0\n```\n### `rtx plugins link [OPTIONS] <NAME> [PATH]`\n\n```\nSymlinks a plugin into rtx\n\nThis is used for developing a plugin.\n\nUsage: plugins link [OPTIONS] <NAME> [PATH]\n\nArguments:\n  <NAME>\n          The name of the plugin\n          e.g.: node, ruby\n\n  [PATH]\n          The local path to the plugin\n          e.g.: ./rtx-node\n\nOptions:\n  -f, --force\n          Overwrite existing plugin\n\nExamples:\n  # essentially just `ln -s ./rtx-node ~/.local/share/rtx/plugins/node`\n  $ rtx plugins link node ./rtx-node\n\n  # infer plugin name as \"node\"\n  $ rtx plugins link ./rtx-node\n```\n### `rtx plugins ls [OPTIONS]`\n\n```\nList installed plugins\n\nCan also show remotely available plugins to install.\n\nUsage: plugins ls [OPTIONS]\n\nOptions:\n  -c, --core\n          The built-in plugins only\n          Normally these are not shown\n\n  -u, --urls\n          Show the git url for each plugin\n          e.g.: https://github.com/asdf-vm/asdf-node.git\n\n      --refs\n          Show the git refs for each plugin\n          e.g.: main 1234abc\n\nExamples:\n  $ rtx plugins ls\n  node\n  ruby\n\n  $ rtx plugins ls --urls\n  node                        https://github.com/asdf-vm/asdf-node.git\n  ruby                          https://github.com/asdf-vm/asdf-ruby.git\n```\n### `rtx plugins ls-remote [OPTIONS]`\n\n```\nList all available remote plugins\n\nThe full list is here: https://github.com/jdxcode/rtx/blob/main/src/default_shorthands.rs\n\nExamples:\n  $ rtx plugins ls-remote\n\n\nUsage: plugins ls-remote [OPTIONS]\n\nOptions:\n  -u, --urls\n          Show the git url for each plugin e.g.: https://github.com/rtx-plugins/rtx-nodejs.git\n\n      --only-names\n          Only show the name of each plugin by default it will show a \"*\" next to installed plugins\n```\n### `rtx plugins uninstall <PLUGIN>...`\n\n```\nRemoves a plugin\n\nUsage: plugins uninstall <PLUGIN>...\n\nArguments:\n  <PLUGIN>...\n          Plugin(s) to remove\n\nExamples:\n  $ rtx uninstall node\n```\n### `rtx plugins update [PLUGIN]...`\n\n```\nUpdates a plugin to the latest version\n\nnote: this updates the plugin itself, not the runtime versions\n\nUsage: plugins update [PLUGIN]...\n\nArguments:\n  [PLUGIN]...\n          Plugin(s) to update\n\nExamples:\n  $ rtx plugins update            # update all plugins\n  $ rtx plugins update node       # update only node\n  $ rtx plugins update node#beta  # specify a ref\n```\n### `rtx prune [OPTIONS] [PLUGINS]...`\n\n```\nDelete unused versions of tools\n\nrtx tracks which config files have been used in ~/.local/share/rtx/tracked_config_files\nVersions which are no longer the latest specified in any of those configs are deleted.\nVersions installed only with environment variables (`RTX_<PLUGIN>_VERSION`) will be deleted,\nas will versions only referenced on the command line (`rtx exec <PLUGIN>@<VERSION>`).\n\nUsage: prune [OPTIONS] [PLUGINS]...\n\nArguments:\n  [PLUGINS]...\n          Prune only versions from these plugins\n\nOptions:\n      --dry-run\n          Do not actually delete anything\n\nExamples:\n  $ rtx prune --dry-run\n  rm -rf ~/.local/share/rtx/versions/node/20.0.0\n  rm -rf ~/.local/share/rtx/versions/node/20.0.1\n```\n### `rtx reshim`\n\n```\nrebuilds the shim farm\n\nThis creates new shims in ~/.local/share/rtx/shims for CLIs that have been added.\nrtx will try to do this automatically for commands like `npm i -g` but there are\nother ways to install things (like using yarn or pnpm for node) that rtx does\nnot know about and so it will be necessary to call this explicitly.\n\nIf you think rtx should automatically call this for a particular command, please\nopen an issue on the rtx repo. You can also setup a shell function to reshim\nautomatically (it's really fast so you don't need to worry about overhead):\n\nnpm() {\n  command npm \"$@\"\n  rtx reshim\n}\n\nUsage: reshim\n\nExamples:\n  $ rtx reshim\n  $ ~/.local/share/rtx/shims/node -v\n  v20.0.0\n```\n### `rtx self-update`\n\n```\nUpdates rtx itself\n\nUses whatever package manager was used to install rtx or just downloads\na binary from GitHub Releases if rtx was installed manually.\nSupports: standalone, brew, deb, rpm\n\nUsage: self-update\n```\n### `rtx settings get <KEY>`\n\n```\nShow a current setting\n\nThis is the contents of a single entry in ~/.config/rtx/config.toml\n\nNote that aliases are also stored in this file\nbut managed separately with `rtx aliases get`\n\nUsage: settings get <KEY>\n\nArguments:\n  <KEY>\n          The setting to show\n\nExamples:\n  $ rtx settings get legacy_version_file\n  true\n```\n### `rtx settings ls`\n\n```\nShow current settings\n\nThis is the contents of ~/.config/rtx/config.toml\n\nNote that aliases are also stored in this file\nbut managed separately with `rtx aliases`\n\nUsage: settings ls\n\nExamples:\n  $ rtx settings\n  legacy_version_file = false\n```\n### `rtx settings set <KEY> <VALUE>`\n\n```\nAdd/update a setting\n\nThis modifies the contents of ~/.config/rtx/config.toml\n\nUsage: settings set <KEY> <VALUE>\n\nArguments:\n  <KEY>\n          The setting to set\n\n  <VALUE>\n          The value to set\n\nExamples:\n  $ rtx settings set legacy_version_file true\n```\n### `rtx settings unset <KEY>`\n\n```\nClears a setting\n\nThis modifies the contents of ~/.config/rtx/config.toml\n\nUsage: settings unset <KEY>\n\nArguments:\n  <KEY>\n          The setting to remove\n\nExamples:\n  $ rtx settings unset legacy_version_file\n```\n### `rtx shell [OPTIONS] [TOOL@VERSION]...`\n\n```\nSets a tool version for the current shell session\n\nOnly works in a session where rtx is already activated.\n\nUsage: shell [OPTIONS] [TOOL@VERSION]...\n\nArguments:\n  [TOOL@VERSION]...\n          Tool(s) to use\n\nOptions:\n  -u, --unset\n          Removes a previously set version\n\nExamples:\n  $ rtx shell node@20\n  $ node -v\n  v20.0.0\n```\n### `rtx sync node <--brew|--nvm|--nodenv>`\n\n```\nSymlinks all tool versions from an external tool into rtx\n\nFor example, use this to import all Homebrew node installs into rtx\n\nUsage: sync node <--brew|--nvm|--nodenv>\n\nOptions:\n      --brew\n          Get tool versions from Homebrew\n\n      --nvm\n          Get tool versions from nvm\n\n      --nodenv\n          Get tool versions from nodenv\n\nExamples:\n  $ brew install node@18 node@20\n  $ rtx sync node --brew\n  $ rtx use -g node@18 - uses Homebrew-provided node\n```\n### `rtx sync python --pyenv`\n\n```\nSymlinks all tool versions from an external tool into rtx\n\nFor example, use this to import all pyenv installs into rtx\n\nUsage: sync python --pyenv\n\nOptions:\n      --pyenv\n          Get tool versions from pyenv\n\nExamples:\n  $ pyenv install 3.11.0\n  $ rtx sync python --pyenv\n  $ rtx use -g python@3.11.0 - uses pyenv-provided python\n```\n### `rtx trust [OPTIONS] [CONFIG_FILE]`\n\n```\nMarks a config file as trusted\n\nThis means rtx will parse the file with potentially dangerous\nfeatures enabled.\n\nThis includes:\n- environment variables\n- templates\n- `path:` plugin versions\n\nUsage: trust [OPTIONS] [CONFIG_FILE]\n\nArguments:\n  [CONFIG_FILE]\n          The config file to trust\n\nOptions:\n      --untrust\n          No longer trust this config\n\nExamples:\n  # trusts ~/some_dir/.rtx.toml\n  $ rtx trust ~/some_dir/.rtx.toml\n\n  # trusts .rtx.toml in the current or parent directory\n  $ rtx trust\n```\n### `rtx uninstall <TOOL@VERSION>...`\n\n```\nRemoves runtime versions\n\nUsage: uninstall <TOOL@VERSION>...\n\nArguments:\n  <TOOL@VERSION>...\n          Tool(s) to remove\n\nExamples:\n  $ rtx uninstall node@18.0.0 # will uninstall specific version\n  $ rtx uninstall node        # will uninstall current node version\n```\n### `rtx upgrade [TOOL@VERSION]...`\n\n```\n[experimental] Upgrades outdated tool versions\n\nUsage: upgrade [TOOL@VERSION]...\n\nArguments:\n  [TOOL@VERSION]...\n          Tool(s) to upgrade\n          e.g.: node@20 python@3.10\n          If not specified, all current tools will be upgraded\n```\n### `rtx use [OPTIONS] [TOOL@VERSION]...`\n\n```\nChange the active version of a tool locally or globally.\n\nThis will install the tool if it is not already installed.\nBy default, this will use an `.rtx.toml` file in the current directory.\nUse the --global flag to use the global config file instead.\nThis replaces asdf's `local` and `global` commands, however those are still available in rtx.\n\nUsage: use [OPTIONS] [TOOL@VERSION]...\n\nArguments:\n  [TOOL@VERSION]...\n          Tool(s) to add to config file\n          e.g.: node@20\n          If no version is specified, it will default to @latest\n\nOptions:\n      --pin\n          Save exact version to config file\n          e.g.: `rtx use --pin node@20` will save `node 20.0.0` to ~/.tool-versions\n\n      --fuzzy\n          Save fuzzy version to config file\n          e.g.: `rtx use --fuzzy node@20` will save `node 20` to ~/.tool-versions\n          this is the default behavior unless RTX_ASDF_COMPAT=1\n\n      --remove <TOOL>\n          Remove the tool(s) from config file\n\n  -g, --global\n          Use the global config file (~/.config/rtx/config.toml) instead of the local one\n\n  -p, --path <PATH>\n          Specify a path to a config file or directory\n\nExamples:\n  # set the current version of node to 20.x in .rtx.toml of current directory\n  # will write the fuzzy version (e.g.: 20)\n  $ rtx use node@20\n\n  # set the current version of node to 20.x in ~/.config/rtx/config.toml\n  # will write the precise version (e.g.: 20.0.0)\n  $ rtx use -g --pin node@20\n```\n### `rtx version`\n\n```\nShow rtx version\n\nUsage: version\n```\n### `rtx where <TOOL@VERSION>`\n\n```\nDisplay the installation path for a runtime\n\nMust be installed.\n\nUsage: where <TOOL@VERSION>\n\nArguments:\n  <TOOL@VERSION>\n          Tool(s) to look up\n          e.g.: ruby@3\n          if \"@<PREFIX>\" is specified, it will show the latest installed version\n          that matches the prefix\n          otherwise, it will show the current, active installed version\n\nExamples:\n  # Show the latest installed version of node\n  # If it is is not installed, errors\n  $ rtx where node@20\n  /home/jdx/.local/share/rtx/installs/node/20.0.0\n\n  # Show the current, active install directory of node\n  # Errors if node is not referenced in any .tool-version file\n  $ rtx where node\n  /home/jdx/.local/share/rtx/installs/node/20.0.0\n```\n### `rtx which [OPTIONS] <BIN_NAME>`\n\n```\nShows the path that a bin name points to\n\nUsage: which [OPTIONS] <BIN_NAME>\n\nArguments:\n  <BIN_NAME>\n          The bin name to look up\n\nOptions:\n      --plugin\n          Show the plugin name instead of the path\n\n      --version\n          Show the version instead of the path\n\n  -t, --tool <TOOL@VERSION>\n          Use a specific tool@version\n          e.g.: `rtx which npm --tool=node@20`\n\nExamples:\n  $ rtx which node\n  /home/username/.local/share/rtx/installs/node/20.0.0/bin/node\n  $ rtx which node --plugin\n  node\n  $ rtx which node --version\n  20.0.0\n```\n<!-- RTX:COMMANDS -->"
}
