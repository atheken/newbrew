{
  "name": "podofo",
  "full_name": "podofo",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Library to work with the PDF file format",
  "license": "LGPL-2.0-only and GPL-2.0-only",
  "homepage": "https://github.com/podofo/podofo",
  "versions": {
    "stable": "0.10.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/podofo/podofo/archive/refs/tags/0.10.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "9b2bb5d54185a547e440413ca2e9ec3ea9c522fec81dfeb9a23dbc3d65fbaa55"
    },
    "head": {
      "url": "https://github.com/podofo/podofo.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/podofo/blobs/sha256:57bb0c459a607efc63fffbf3fc441a31ff5429326048c661303d13f9c2578205",
          "sha256": "57bb0c459a607efc63fffbf3fc441a31ff5429326048c661303d13f9c2578205"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/podofo/blobs/sha256:2b6116b1d99b7499367c66b449c18323258d9d63c248673d2671c078e4ac8cfc",
          "sha256": "2b6116b1d99b7499367c66b449c18323258d9d63c248673d2671c078e4ac8cfc"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/podofo/blobs/sha256:2885c35de6a79655a3bd388f121bd4c85b16bba6bd26b431d08d0b404d5ccd6f",
          "sha256": "2885c35de6a79655a3bd388f121bd4c85b16bba6bd26b431d08d0b404d5ccd6f"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/podofo/blobs/sha256:e8d8ed810ea8911cbbdabf9fe0f5e881dd4753a10302f3f59336db42c5d2afd9",
          "sha256": "e8d8ed810ea8911cbbdabf9fe0f5e881dd4753a10302f3f59336db42c5d2afd9"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/podofo/blobs/sha256:7e6e8a4f4ca608bc9ecd7e656ef4d783d6dab07de01639d7c1f0088ba952cbb7",
          "sha256": "7e6e8a4f4ca608bc9ecd7e656ef4d783d6dab07de01639d7c1f0088ba952cbb7"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/podofo/blobs/sha256:eef1a0c69311eec0cea327113d6135a5a4f91e1654daca0b9399b9dc7483c27c",
          "sha256": "eef1a0c69311eec0cea327113d6135a5a4f91e1654daca0b9399b9dc7483c27c"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/podofo/blobs/sha256:57050d099ff592d3921c0c718aeb5f0f2af9fa79cd5ccc3adc0bc52199126cd3",
          "sha256": "57050d099ff592d3921c0c718aeb5f0f2af9fa79cd5ccc3adc0bc52199126cd3"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [
    "fontconfig",
    "freetype",
    "jpeg-turbo",
    "libidn",
    "libpng",
    "libtiff",
    "openssl@3"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "libxml2"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/podofo.rb",
  "ruby_source_checksum": {
    "sha256": "659bb9139d2a302a10a3ef656446e8c41e96b13692cdbf7ce40d2b525bcca640"
  },
  "date_added": "2011-10-11T11:46:49-07:00",
  "readme": "# PoDoFo [![build-linux](https://github.com/podofo/podofo/actions/workflows/build-linux.yml/badge.svg)](https://github.com/podofo/podofo/actions/workflows/build-linux.yml) [![build-mac](https://github.com/podofo/podofo/actions/workflows/build-mac.yml/badge.svg)](https://github.com/podofo/podofo/actions/workflows/build-mac.yml) [![build-win](https://github.com/podofo/podofo/actions/workflows/build-win.yml/badge.svg)](https://github.com/podofo/podofo/actions/workflows/build-win.yml)\n\n1.  [What is PoDoFo?](#what-is-podofo)\n2.  [Requirements](#requirements)\n3.  [Licensing](#licensing)\n4.  [Development quickstart](#development-quickstart)\n5.  [String encoding and buffer conventions](#string-encoding-and-buffer-conventions)\n6.  [API Stability](#api-stability)\n7.  [PoDoFo tools](#podofo-tools)\n8.  [TODO](#todo)\n9.  [FAQ](#faq)\n10.  [No warranty](#no-warranty)\n11.  [Contributions](#contributions)\n12.  [Authors](#authors)\n\n## What is PoDoFo?\n\nPoDoFo is a s a free portable C++ library to work with the PDF file format.\n\nPoDoFo provides classes to parse a PDF file and modify its content\ninto memory. The changes can be written back to disk easily.\nBesides PDF parsing PoDoFo also provides facilities to create your\nown PDF files from scratch. It currently does not\nsupport rendering PDF content.\n\n## Requirements\n\nTo build PoDoFo lib you'll need a c++17 compiler,\nCMake 3.16 and the following libraries:\n\n* freetype2\n* fontconfig (required for Unix platforms, optional for Windows)\n* OpenSSL (1.1 and 3.0 are supported)\n* LibXml2\n* zlib\n* libjpeg (optional)\n* libtiff (optional)\n* libpng (optional)\n* libidn (optional)\n\nFor the most polular toolchains, PoDoFo requires the following\nminimum versions:\n\n* msvc++ 14.16 (VS 2017 15.9)\n* gcc 8.1\n* clang/llvm 7.0\n\nIt is regularly tested with the following IDE/toolchains versions:\n\n* Visual Studio 2017 15.9\n* Visual Studio 2019 16.11\n* Visual Studio 2022 17.3\n* gcc 9.3.1\n* XCode 13.3\n* NDK r23b\n\n## Licensing\n\nPoDoFo library is licensed under the [LGPL 2.0](https://spdx.org/licenses/LGPL-2.0-or-later.html) or later terms.\nPoDoFo tools are licensed under the [GPL 2.0](https://spdx.org/licenses/GPL-2.0-or-later.html) or later terms.\n\n## Development quickstart\n\nPoDoFo is known to compile through a multitude of package managers (including `apt-get`, [brew](https://brew.sh/), [vcpkg](https://vcpkg.io/), [Conan](https://conan.io/)), and has public continous integration working in [Ubuntu Linux](https://github.com/podofo/podofo/blob/master/.github/workflows/build-linux.yml), [MacOS](https://github.com/podofo/podofo/blob/master/.github/workflows/build-linux.yml) and\n[Windows](https://github.com/podofo/podofo/blob/master/.github/workflows/build-win.yml), bootstrapping the CMake project, building and testing the library. It's highly recommended to build PoDoFo using such package managers. \n\nThere's also a playground area in the repository where you can have\naccess to pre-build dependencies for some popular architectures/operating systems:\nthe playground is the recommended setting to develop the library and reproduce bugs,\nwhile it's not recommended for the deployment of your application using PoDoFo.\nHave a look to the [Readme](https://github.com/podofo/podofo/tree/master/playground) there.\n\n> **Warning**: PoDoFo is known to be working in cross-compilation toolchains (eg. Android/iOS development), but support may not provided in such scenarios. If you decide to manually build dependencies you are assumed to know how to identity possible library clashes/mismatches and how to deal with compilation/linking problems that can arise in your system.\n\n### Build with apt-get\n\nFrom the source root run:\n\n```\nsudo apt-get install -y libfontconfig1-dev libfreetype-dev libxml2-dev libssl-dev libjpeg-dev libpng-dev libtiff-dev libidn11-dev\nmkdir build\ncd build\ncmake -DCMAKE_BUILD_TYPE=Debug ..\ncmake --build . --config Debug\n```\n\n### Build with brew\n\nInstall [brew](https://brew.sh/), then from the source root run:\n\n```\nbrew install fontconfig freetype openssl libxml2 jpeg-turbo libpng libtiff libidn\nmkdir build\ncd build\ncmake  -DCMAKE_BUILD_TYPE=Debug -DCMAKE_FIND_FRAMEWORK=NEVER -DCMAKE_PREFIX_PATH=`brew --prefix` -DFontconfig_INCLUDE_DIR=`brew --prefix fontconfig`/include -DOPENSSL_ROOT_DIR=`brew --prefix openssl@3` ..\ncmake --build . --config Debug\n```\n\n### Build with Conan\n\nInstall [conan](https://docs.conan.io/1/installation.html), then from source root run:\n\n```\nmkdir build\ncd build\nconan install ..\ncmake -DCMAKE_BUILD_TYPE=Debug ..\ncmake --build . --config Debug\n```\n\n### Build with vcpkg\n\nFollow the vcpkg [quickstart](https://vcpkg.io/en/getting-started.html) guide to setup the package manager repository first.\nIn Windows, it may be also useful to set the enviroment variable `VCPKG_DEFAULT_TRIPLET` to `x64-windows` to default installing 64 bit dependencies\nand define a `VCPKG_INSTALLATION_ROOT` variable with the location of the repository as created in the quickstart.\n\nThen from source root run:\n\n```\nvcpkg install fontconfig freetype libxml2 openssl libjpeg-turbo libpng tiff zlib\nmkdir build\ncd build\ncmake -DCMAKE_TOOLCHAIN_FILE=C:\\vcpkg\\scripts\\buildsystems\\vcpkg.cmake -DCMAKE_BUILD_TYPE=Debug ..\ncmake --build . --config Debug\n```\n\n### CMake switches\n\n- `PODOFO_BUILD_TEST`: Build the unit tests, defaults to TRUE;\n\n- `PODOFO_BUILD_EXAMPLES`: Build the examples, defaults to TRUE;\n\n- `PODOFO_BUILD_TOOLS`: Build the PoDoFo tools, defaults to FALSE. See\nthe relevant [section](https://github.com/podofo/podofo/#podofo-tools) in the Readme;\n\n- `PODOFO_BUILD_LIB_ONLY`: If TRUE, it will build only the library component.\nThis unconditionally disable building tests, examples and tools;\n\n- `PODOFO_BUILD_STATIC`: If TRUE, build the library as a static object and use it in tests,\nexamples and tools. By default a shared library is built.\n\n## String encoding and buffer conventions\n\nAll `std::strings` or `std::string_view` in the library are intended\nto hold UTF-8 encoded string content. `PdfString` and `PdfName` constructors\naccept UTF-8 encoded strings by default (`PdfName` accept only characters in the\n`PdfDocEncoding` char set, though). `charbuff` abd `bufferview`\ninstead represent a generic octet buffer.\n\n## API migration\n\nPoDoFo has an unstable API that is the result of an extensive API review of PoDoFo 0.9.x. At this [link](https://github.com/podofo/podofo/wiki/PoDoFo-API-migration-guide/#098---0100) you can find an incomplete guide on migrating 0.9.8 code to 0.10.0. It is expected PoDoFo will converge to a stable API as soon as the review process is completed. See [API Stability](https://github.com/podofo/podofo/wiki/API-Stability) for more details.\n\n## PoDoFo Tools\n\n> **Warning**: Tools are currently **untested** and **unmaintained**.\n\nPoDoFo tools are still available in the source [tree](https://github.com/podofo/podofo/)\nbut their compilation is disabled by default because they are unsted/unmaintained,\nand will not receive support until their status is cleared. It's not recommended to include them in software distributions.\nIf you want to build them make sure to bootstrap the CMake project with ```-DPODOFO_BUILD_TOOLS=TRUE```.\nTools are conveniently enabled in the [playground](https://github.com/podofo/podofo/tree/master/playground)\nat least to ensure library changes won't break their compilation.\n\n## TODO\n\nThere's a [TODO](https://github.com/podofo/podofo/blob/master/TODO.md) list, or look\nat the [issue](https://github.com/podofo/podofo/issues) tracker.\n\n## FAQ\n\n**Q: How do I sign a document?**\n\n**A:** The signing procedure is still as low level as it was before the\nongoing source changes. This is going to change, soon!, with a new high-level\nAPI for signing being worked on, which will be fully unit tested. For now you\nshould check the `podofosign` tool (**WARNING**: untested) which should give\nyou the idea how to sign documents creating a *CMS* structure directly with\nOpenSSL.\nTo describe the procedure briefly, one has to fully Implement a `PdfSigner`,\nretrieve or create a `PdfSignature` field, create an output device (see next question)\nand use `PoDoFo::SignDocument(doc, device, signer, signature)`. When signing,\nthe sequence of calls of `PdfSignature` works in this way: method `PdfSigner::Reset()`\nis called first, then  the `PdfSigner::ComputeSignature(buffer, dryrun)` is called with\nan empty buffer and the `dryrun` argument set to `true`. In this call one can just\nresize the buffer overestimating the required size for the signature, or just\ncompute a fake signature that must be saved on the buffer. Then a sequence of\n`PdfSigner::AppendData(buffer)` are called, receiving all the document data to\nbe signed. A final `PdfSigner::ComputeSignature(buffer, dryrun)` is called, with\nthe `dryrun` parameter set to `false`. The buffer on this call is cleared (capacity\nis not altered) or not accordingly to the value of `PdfSigner::SkipBufferClear()`.\n\n\n**Q: `PdfMemDocument::SaveUpdate()` or `PoDoFo::SignDocument()` write only a partial\nfile: why so and why there's no mechanism to seamlessly handle the incremental\nupdate as it was in PoDoFo? What should be done to correctly update/sign the\ndocument?**\n\n**A:** The previous mechanism in PoDoFo required enablement of document for\nincremental updates, which is a decision step which I believe should be not\nbe necessary. Also:\n1. In case of file loaded document it still required to perform the update in\nthe same file, and the check was performed on the path of the files being\noperated to, which is unsafe;\n2. In case of buffers worked for one update/signing operation but didn't work\nfor following operations.\n\nThe idea is to implement a more explicit mechanism that makes more clear\nand/or enforces the fact that the incremental update must be performed on the\nsame file in case of file loaded documents or that underlying buffer will grow\nfollowing subsequent operations in case of buffer loaded documents.\nBefore that, as a workaround, a couple of examples showing the correct operation\nto either update or sign a document (file or buffer loaded) are presented.\nSave an update on a file loaded document, by copying the source to another\ndestination:\n\n```\n    string inputPath;\n    string outputPath;\n    auto input = std::make_shared<FileStreamDevice>(inputPath);\n    FileStreamDevice output(outputPath, FileMode::Create);\n    input->CopyTo(output);\n\n    PdfMemDocument doc;\n    doc.LoadFromDevice(input);\n\n    doc.SaveUpdate(output);\n```\n\nSign a buffer loaded document:\n\n```\n    bufferview inputBuffer;\n    charbuff outputBuffer;\n    auto input = std::make_shared<SpanStreamDevice>(inputBuffer);\n    BufferStreamDevice output(outputBuffer);\n    input->CopyTo(output);\n\n    PdfMemDocument doc;\n    doc.LoadFromDevice(input);\n    // Retrieve/create the signature, create the signer, ...\n    PoDoFo::SignDocument(doc, output, signer, signature);\n```\n\n**Q: Can I sign a document a second time?**\n\n**A:** Yes, this is tested, but to make sure this will work you'll to re-parse the document a second time,\nas re-using the already loaded document is still untested (this may change later). For example do as it follows:\n\n```\n    bufferview inputBuffer;\n    charbuff outputBuffer;\n    auto input = std::make_shared<SpanStreamDevice>(inputBuffer);\n    BufferStreamDevice output(outputBuffer);\n    input->CopyTo(output);\n\n    {\n        PdfMemDocument doc;\n        doc.LoadFromDevice(input);\n        // Retrieve/create the signature, create the signer, ...\n        PoDoFo::SignDocument(doc, output, signer, signature);\n    }\n\n    input = std::make_shared<SpanStreamDevice>(output);\n    {\n        PdfMemDocument doc;\n        doc.LoadFromDevice(input);\n        // Retrieve/create the signature, create the signer, ...\n        PoDoFo::SignDocument(doc, output, signer, signature);\n    }\n```\n\n## No warranty\n\nPoDoFo may or may not work for your needs and comes with absolutely no\nwarranty. Serious bugs, including security flaws, may be fixed at arbitrary\ntimeframes, or not fixed at all. Priority of implementing new features\nand bug fixing are decided according to the interests and personal\npreferences of the maintainers. If you need PoDoFo to integrate a feature\nor bug fix that is critical to your workflow, the most welcome and fastest\napproach is to [contribute](https://github.com/podofo/podofo/edit/master/README.md#contributions)\nhigh-quality patches.\n\n## Contributions\n\nPlease subscribe to the project mailing [list](https://sourceforge.net/projects/podofo/lists/podofo-users)\nwhich is still followed by several of the original developers of PoDoFo.\nA gitter [community](https://gitter.im/podofo/community) has also been created to ease some more informal chatter.\nIf you find a bug and know how to fix it, or you want to add a small feature, you're welcome to send a [pull request](https://github.com/podofo/podofo/pulls),\nproviding it follows the [coding style](https://github.com/podofo/podofo/blob/master/CODING-STYLE.md)\nof the project. As a minimum requisite, any contribution should be:\n* valuable for a multitude of people and not only self relevant for the contributor;\n* consistent with surrounding code and not result in unpredictable behavior and/or bugs.\n\nOther reasons for the rejection, or hold, of a pull request may be:\n\n* the proposed code is incomplete or hacky;\n* the change doesn't fit the scope of PoDoFo;\n* the change shows lack of knowledge/mastery of the PDF specification and/or C++ language;\n* the change breaks automatic tests performed by the maintainer;\n* general lack of time in reviewing and merging the change.\n\nIf you need to implement a bigger feature or refactor, ask first if\nit was already planned. The feature may be up for grabs, meaning that it's open for external contributions.\nPlease write in the relevant issue that you started to work on that, to receive some feedback/coordination.\nIf it's not, it means that the refactor/feature is planned to be implemented later by the maintainer(s).\nIf the feature is not listed in the issues, add it and/or create a [discussion](https://github.com/podofo/podofo/discussions)\nto receive some feedback and discuss some basic design choices.\n\n## Authors\n\n> **Warning**: Please don't use personal email addresses for technical support inquries, but create\ngithub [issues](https://github.com/podofo/podofo/issues) instead.\n\nPoDoFo is currently developed and maintained by\n[Francesco Pretto](mailto:ceztko@gmail.com), together with Dominik Seichter and others. See the file\n[AUTHORS.md](https://github.com/podofo/podofo/blob/master/AUTHORS.md) for more details."
}
