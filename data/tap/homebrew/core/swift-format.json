{
  "name": "swift-format",
  "full_name": "swift-format",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Formatting technology for Swift source code",
  "license": "Apache-2.0",
  "homepage": "https://github.com/apple/swift-format",
  "versions": {
    "stable": "508.0.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/apple/swift-format.git",
      "tag": "508.0.1",
      "revision": "fbfe1869527923dd9f9b2edac148baccfce0dce7",
      "checksum": null
    },
    "head": {
      "url": "https://github.com/apple/swift-format.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 1,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/swift-format/blobs/sha256:74c93fb3ea0ff22fcb2ccf43328047577baa4f37637a8649f98599796096bb38",
          "sha256": "74c93fb3ea0ff22fcb2ccf43328047577baa4f37637a8649f98599796096bb38"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/swift-format/blobs/sha256:80cc1fc3ba11cc6b4ddfc41d92e6ec5bbe74265bfd8bef28e2af1200c693fb61",
          "sha256": "80cc1fc3ba11cc6b4ddfc41d92e6ec5bbe74265bfd8bef28e2af1200c693fb61"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/swift-format/blobs/sha256:ad55a120d42363640a46cb75b1d18dbb3569dcfc9d3ac08f5a0a8372f696e193",
          "sha256": "ad55a120d42363640a46cb75b1d18dbb3569dcfc9d3ac08f5a0a8372f696e193"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/swift-format/blobs/sha256:a88400e4fef158f06820e9375c8552e48d0b54997a100671e3db8458c66e1779",
          "sha256": "a88400e4fef158f06820e9375c8552e48d0b54997a100671e3db8458c66e1779"
        },
        "x86_64_linux": {
          "cellar": "/home/linuxbrew/.linuxbrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/swift-format/blobs/sha256:bd72a01ee943c12052f9dc34f2bd1952c4ca2d45e7fcc9fa42257a811b689c5f",
          "sha256": "bd72a01ee943c12052f9dc34f2bd1952c4ca2d45e7fcc9fa42257a811b689c5f"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "swift"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [
    {
      "name": "xcode",
      "cask": null,
      "download": null,
      "version": "14.0",
      "contexts": [
        "build"
      ],
      "specs": [
        "stable",
        "head"
      ]
    }
  ],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/swift-format.rb",
  "ruby_source_checksum": {
    "sha256": "5ffff6de3d47f8369131c70263e8696cab9c3f7266b3bef3f48fd833b52022e4"
  },
  "date_added": "2020-03-14T17:09:53-04:00",
  "readme": "# swift-format\n\n`swift-format` provides the formatting technology for\n[SourceKit-LSP](https://github.com/apple/sourcekit-lsp) and the building\nblocks for doing code formatting transformations.\n\nThis package can be used as a [command line tool](#command-line-usage)\nor linked into other applications as a Swift Package Manager dependency and\ninvoked via an [API](#api-usage).\n\n> NOTE: No default Swift code style guidelines have yet been proposed. The\n> style that is currently applied by `swift-format` is just one possibility,\n> and the code is provided so that it can be tested on real-world code and\n> experiments can be made by modifying it.\n\n## Matching swift-format to Your Swift Version\n\n### Swift 5.8 and later\n\nAs of Swift 5.8, swift-format depends on the version of\n[SwiftSyntax](https://github.com/apple/swift-syntax) whose parser has been\nrewritten in Swift and no longer has dependencies on libraries in the\nSwift toolchain.\n\nThis change allows `swift-format` to be built, developed, and run using\nany version of Swift that can compile it, decoupling it from the version\nthat supported a particular syntax. However, earlier versions of swift-format\nwill still not be able to recognize new syntax added in later versions of the\nlanguage and parser.\n\nNote also that the version numbering scheme has changed to match\nSwiftSyntax; the 5.8 release of swift-format is `508.0.0`, not `0.50800.0`.\n\n### Swift 5.7 and earlier\n\n`swift-format` versions 0.50700.0 and earlier depend on versions of\n[SwiftSyntax](https://github.com/apple/swift-syntax) that used a standalone\nparsing library distributed as part of the Swift toolchain. When using these\nversions, you should check out and build `swift-format` from the release\ntag or branch that is compatible with the version of Swift you are using.\n\nThe major and minor version components of `swift-format` and SwiftSyntax must\nbe the same—this is expressed in the `SwiftSyntax` dependency in\n[Package.swift](Package.swift)—and those version components must match the\nSwift toolchain that is installed and used to build and run the formatter:\n\n| Xcode Release   | Swift Version          | `swift-format` Branch / Tags     |\n|:----------------|:-----------------------|:---------------------------------|\n| –               | Swift at `main`        | `main`                           |\n| Xcode 14.0      | Swift 5.7              | `release/5.7` / `0.50700.x`      |\n| Xcode 13.3      | Swift 5.6              | `release/5.6` / `0.50600.x`      |\n| Xcode 13.0–13.2 | Swift 5.5              | `swift-5.5-branch` / `0.50500.x` |\n| Xcode 12.5      | Swift 5.4              | `swift-5.4-branch` / `0.50400.x` |\n| Xcode 12.0–12.4 | Swift 5.3              | `swift-5.3-branch` / `0.50300.x` |\n| Xcode 11.4–11.7 | Swift 5.2              | `swift-5.2-branch` / `0.50200.x` |\n| Xcode 11.0–11.3 | Swift 5.1              | `swift-5.1-branch`               |\n\nFor example, if you are using Xcode 13.3 (Swift 5.6), you will need\n`swift-format` 0.50600.0.\n\n## Getting swift-format\n\nIf you are mainly interested in using swift-format (rather than developing it),\nthen once you have identified the version you need, you can check out the\nsource and build it using the following commands:\n\n```sh\nVERSION=508.0.0  # replace this with the version you need\ngit clone https://github.com/apple/swift-format.git\ncd swift-format\ngit checkout \"tags/$VERSION\"\nswift build -c release\n```\n\nNote that the `git checkout` command above will leave the repository in a\n\"detached HEAD\" state. This is fine if building and running the tool is all you\nwant to do.\n\nOnce the build has finished, the `swift-format` executable will be located at\n`.build/release/swift-format`.\n\nTo test that the formatter was built successfully and is compatible with your\nSwift toolchain, you can also run the following command:\n\n```sh\nswift test --parallel\n```\n\nWe recommend using the `--parallel` flag to speed up the test run since there\nare a large number of tests.\n\n## Command Line Usage\n\nThe general invocation syntax for `swift-format` is as follows:\n\n```sh\nswift-format [SUBCOMMAND] [OPTIONS...] [FILES...]\n```\n\nThe tool supports a number of subcommands, each of which has its own options\nand are described below. Descriptions of the subcommands that are available\ncan also be obtained by running `swift-format --help`, and the description of\na specific subcommand can be obtained by using the `--help` flag after the\nsubcommand name; for example, `swift-format lint --help`.\n\n### Formatting\n\n```sh\nswift-format [format] [OPTIONS...] [FILES...]\n```\n\nThe `format` subcommand formats one or more Swift source files (or source code\nfrom standard input if no file paths are given on the command line). Writing\nout the `format` subcommand is optional; it is the default behavior if no other\nsubcommand is given.\n\nThis subcommand supports all of the\n[common lint and format options](#options-supported-by-formatting-and-linting),\nas well as the formatting-only options below:\n\n*   `-i/--in-place`: Overwrites the input files when formatting instead of\n    printing the results to standard output. _No backup of the original file is\n    made before it is overwritten._\n\n### Linting\n\n```sh\nswift-format lint [OPTIONS...] [FILES...]\n```\n\nThe `lint` subcommand checks one or more Swift source files (or source code\nfrom standard input if no file paths are given on the command line) for style\nviolations and prints diagnostics to standard error for any violations that\nare detected.\n\nThis subcommand supports all of the\n[common lint and format options](#options-supported-by-formatting-and-linting),\nas well as the linting-only options below:\n\n*   `-s/--strict`: If this option is specified, lint warnings will cause the\n    tool to exit with a non-zero exit code (failure). By default, lint warnings\n    do not prevent a successful exit; only fatal errors (for example, trying to\n    lint a file that does not exist) cause the tool to exit unsuccessfully.\n\n### Options Supported by Formatting and Linting\n\nThe following options are supported by both the `format` and `lint`\nsubcommands:\n\n*   `--assume-filename <path>`: The file path that should be used in\n    diagnostics when linting or formatting from standard input. If this option\n    is not provided, then `<stdin>` will be used as the filename printed in\n    diagnostics.\n\n*   `--color-diagnostics/--no-color-diagnostics`: By default, `swift-format`\n    will print diagnostics in color if standard error is connected to a\n    terminal and without color otherwise (for example, if standard error is\n    being redirected to a file). These flags can be used to force colors on\n    or off respectively, regardless of whether the output is going to a\n    terminal.\n\n*   `--configuration <file>`: The path to a JSON file that contains\n    [configurable settings](#configuring-the-command-line-tool) for\n    `swift-format`. If omitted, a default configuration is use (which\n    can be seen by running `swift-format dump-configuration`).\n\n*   `--ignore-unparsable-files`: If this option is specified and a source file\n    contains syntax errors or can otherwise not be parsed successfully by the\n    Swift syntax parser, it will be ignored (no diagnostics will be emitted\n    and it will not be formatted). Without this option, an error will be\n    emitted for any unparsable files.\n\n*   `-p/--parallel`: Process files in parallel, simultaneously across\n    multiple cores.\n\n*   `-r/--recursive`: If specified, then the tool will process `.swift` source\n    files in any directories listed on the command line and their descendants.\n    Without this flag, it is an error to list a directory on the command line.\n\n### Viewing the Default Configuration\n\n```sh\nswift-format dump-configuration\n```\n\nThe `dump-configuration` subcommand dumps the default configuration in JSON\nformat to standard output. This can be used to simplify generating a custom\nconfiguration, by redirecting it to a file and editing it.\n\n### Configuring the Command Line Tool\n\nFor any source file being checked or formatted, `swift-format` looks for a\nJSON-formatted file named `.swift-format` in the same directory. If one is\nfound, then that file is loaded to determine the tool's configuration. If the\nfile is not found, then it looks in the parent directory, and so on.\n\nIf no configuration file is found, a default configuration is used. The\nsettings in the default configuration can be viewed by running\n`swift-format dump-configuration`, which will dump it to standard\noutput.\n\nIf the `--configuration <file>` option is passed to `swift-format`, then that\nconfiguration will be used unconditionally and the file system will not be\nsearched.\n\nSee [Documentation/Configuration.md](Documentation/Configuration.md) for a\ndescription of the configuration file format and the settings that are\navailable.\n\n### Miscellaneous\n\nRunning `swift-format -v` or `swift-format --version` will print version\ninformation about `swift-format` version and then exit.\n\n## API Usage\n\n`swift-format` can be easily integrated into other tools written in Swift.\nInstead of invoking the formatter by spawning a subprocess, users can depend on\n`swift-format` as a Swift Package Manager dependency and import the\n`SwiftFormat` module, which contains the entry points into the formatter's\ndiagnostic and correction behavior.\n\nFormatting behavior is provided by the `SwiftFormatter` class and linting\nbehavior is provided by the `SwiftLinter` class. These APIs can be passed\neither a Swift source file `URL` or a `Syntax` node representing a\nSwiftSyntax syntax tree. The latter capability is particularly useful for\nwriting code generators, since it significantly reduces the amount of trivia\nthat the generator needs to be concerned about adding to the syntax nodes it\ncreates. Instead, it can pass the in-memory syntax tree to the `SwiftFormat`\nAPI and receive perfectly formatted code as output.\n\nPlease see the documentation in the\n[`SwiftFormatter`](Sources/SwiftFormat/SwiftFormatter.swift) and\n[`SwiftLinter`](Sources/SwiftFormat/SwiftLinter.swift) classes for more\ninformation about their usage.\n\n### Checking Out the Source Code for Development\n\nThe `main` branch is used for development. Pull requests should be created\nto merge into the `main` branch; changes that are low-risk and compatible with\nthe latest release branch may be cherry-picked into that branch after they have\nbeen merged into `main`.\n\nIf you are interested in developing `swift-format`, there is additional\ndocumentation about that [here](Documentation/Development.md)."
}
