{
  "name": "tetra",
  "full_name": "tetra",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Tetragon CLI to observe, manage and troubleshoot Tetragon instances",
  "license": "Apache-2.0",
  "homepage": "https://github.com/cilium/tetragon",
  "versions": {
    "stable": "0.10.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/cilium/tetragon/archive/refs/tags/v0.10.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "99cc4e82367eb4ad12dc5d8b710e609f10e7950280f510ea3884caf814f8bab1"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tetra/blobs/sha256:6d694725de8b29c3fadce0d5f653add0d01b640a6ba1b631d3d780a5a7d11d61",
          "sha256": "6d694725de8b29c3fadce0d5f653add0d01b640a6ba1b631d3d780a5a7d11d61"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tetra/blobs/sha256:1ef7b82f4694e349a77dbff4ba03b37dca5ac4e87495cbda55b90f773ab7551c",
          "sha256": "1ef7b82f4694e349a77dbff4ba03b37dca5ac4e87495cbda55b90f773ab7551c"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tetra/blobs/sha256:b5e9c2ec098ca6e865d330332fcf236258b93ad649356a438f5c9cdec4c8b21c",
          "sha256": "b5e9c2ec098ca6e865d330332fcf236258b93ad649356a438f5c9cdec4c8b21c"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tetra/blobs/sha256:5899d07a9b3c2596b5cfd86c7c18fd80ed2b7dfdbd93bc341cf84a38d5458261",
          "sha256": "5899d07a9b3c2596b5cfd86c7c18fd80ed2b7dfdbd93bc341cf84a38d5458261"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tetra/blobs/sha256:4c3ad378e8b5de07c7777f1e389d2445d20d338ab2df29df8ca00c9a05a6aa00",
          "sha256": "4c3ad378e8b5de07c7777f1e389d2445d20d338ab2df29df8ca00c9a05a6aa00"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tetra/blobs/sha256:73bf29013bb21afad43dee7d0c656b52f552ab9daa79bb2d323fbd896d0487c2",
          "sha256": "73bf29013bb21afad43dee7d0c656b52f552ab9daa79bb2d323fbd896d0487c2"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tetra/blobs/sha256:ff61d5ccd98199d373588b5b4c6d1f8ed6cf11c64789739757a708d267cc6a37",
          "sha256": "ff61d5ccd98199d373588b5b4c6d1f8ed6cf11c64789739757a708d267cc6a37"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/tetra.rb",
  "ruby_source_checksum": {
    "sha256": "8ca2a0a7fa3dc1db06fbccce85b3f10049ef49607d9ad768ddb238ecbe18beaf"
  },
  "date_added": "2023-01-30T14:36:43+00:00",
  "readme": "<picture>\n  <source media=\"(prefers-color-scheme: light)\" srcset=\"https://github.com/cilium/tetragon/releases/download/tetragon-cli/logo.png\" width=\"400\">\n  <img src=\"https://github.com/cilium/tetragon/releases/download/tetragon-cli/logo-dark.png\" width=\"400\">\n</picture>\n\n[![License](https://img.shields.io/badge/License-Apache_2.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n\n----\n\nCilium’s new Tetragon component enables powerful realtime, eBPF-based Security Observability and\nRuntime Enforcement.\n\nTetragon detects and is able to react to security-significant events, such as\n\n* Process execution events\n* System call activity\n* I/O activity including network & file access\n\nWhen used in a Kubernetes environment, Tetragon is Kubernetes-aware - that is, it understands\nKubernetes identities such as namespaces, pods and so-on - so that security event detection\ncan be configured in relation to individual workloads.\n\n![Tetragon Overview Diagram](https://github.com/cilium/tetragon/blob/main/docs/static/images/smart_observability.png)\n\n## Functionality Overview\n\n### eBPF Real-Time\n\nTetragon is a runtime security enforcement and observability tool. What this means is Tetragon applies\npolicy and filtering directly in eBPF in the kernel. It performs the filtering,\nblocking, and reacting to events directly in the kernel instead of sending\nevents to a user space agent.\n\nFor an observability use case, applying filters directly in the kernel drastically reduces\nobservation overhead. By avoiding expensive context switching and wake-ups, especially\nfor high frequency events, such as send, read, or write operations, eBPF reduces required\nresources. Instead, Tetragon provides rich filters (file, socket, binary names, namespace/capabilities,\netc.) in eBPF, which allows users to specify the important and relevant events in their\nspecific context, and pass only those to the user-space agent.\n\n### eBPF Flexibility ##\n\nTetragon can hook into any function in the Linux kernel and filter on its arguments,\nreturn value, associated metadata that Tetragon collects about processes (e.g., executable\nnames), files, and other properties. By writing tracing policies users can solve various\nsecurity and observability use cases. We provide a number of examples for these in the repository and\nhighlight some below in the 'Getting Started Guide', but users are encouraged to create new policies that\nmatch their use cases. The examples are just that, jumping off points that users can\nthen use to create new and specific policy deployments even potentially tracing kernel\nfunctions we did not consider. None of the specifics about which functions are traced\nand what filters are applied are hard-coded in the engine itself.\n\nCritically, Tetragon allows hooking deep in the kernel where data structures can not be manipulated\nby user space applications avoiding common issues with syscall tracing where\ndata is incorrectly read, maliciously altered by attackers, or missing due to page\nfaults and other user/kernel boundary errors.\n\nMany of the Tetragon developers are also kernel developers. By leveraging this knowledge base\nTetragon has created a set of tracing policies that can solve many common observability\nand security use cases.\n\n### eBPF Kernel Aware ##\n\nTetragon, through eBPF, has access to the Linux kernel state. Tetragon can then\njoin this kernel state with Kubernetes awareness or user policy to create rules\nenforced by the kernel in real time. This allows annotating and enforcing process\nnamespace and capabilities, sockets to processes, process file descriptor to\nfilenames and so on. For example, when an application changes its privileges we\ncan create a policy to trigger an alert or even kill the process before it has\na chance to complete the syscall and potentially run additional syscalls.\n\n## Table Of Content\n\n* [Local Development](#local-development)\n* [Docker Deployment](#docker-deployment)\n* [Kubernetes Quickstart Guide](#kubernetes-quickstart-guide)\n    * [Requirements](#requirements)\n    * [Create a cluster](#create-a-cluster)\n        * [Kind](#kind)\n        * [GKE](#gke)\n    * [Deploy Tetragon](#deploy-tetragon)\n    * [Deploy Demo Application](#deploy-demo-application)\n    * [Explore Security Observability Events](#explore-security-observability-events)\n        * [Raw JSON events](#raw-json-events)\n        * [`tetra` CLI](#tetra-cli)\n* [Tetragon Events](#tetragon-events)\n    * [Process execution](#process-execution)\n        * [Use case 1: Monitoring Process Execution](#use-case-1-monitoring-process-execution)\n        * [Use case 2: Privileged Execution](#use-case-2-privileged-execution)\n    * [Generic tracing](#generic-tracing)\n        * [Use case 1: File Access](#use-case-1-file-access)\n        * [Use case 2: Network Observability](#use-case-2-network-observability)\n* [BTF Requirement](#btf-requirement)\n* [FAQ](#faq)\n* [Additional Resources](#additional-resources)\n* [Conference Talks](#conference-talks)\n    * [Book](#book)\n    * [Blog posts](#blog-posts)\n    * [Hands-on lab](#hands-on-lab)\n* [Community](#community)\n    * [Slack](#slack)\n\n## Local Development\n\nFor getting started with local development, you can refer to the [Contribution Guide](https://tetragon.cilium.io/docs/contribution-guide/).\n\n## Docker Deployment\n\nFor getting started without having to deploy on a Kubernetes cluster, please refer to the [Docker deployment guide](https://tetragon.cilium.io/docs/getting-started/deployment/container/)\n\n## Package deployment\n\nFor deploying Tetragon as a systemd service, please refer to the [Package deployment guide](https://tetragon.cilium.io/docs/getting-started/deployment/package/)\n\n## Kubernetes Quickstart Guide\n\nThis Quickstart guide uses a Kind cluster and a helm-based installation to\nprovide a simple way to get a hands on experience with Tetragon and\nthe generated events. These events include monitoring process execution,\nnetwork sockets, and file access to see what binaries are executing and making\nnetwork connections or writing to sensitive files.\n\nIn this scenario, we are going to install a demo application,\n\n* observe all process execution happening inside a Kubernetes workload\n* detect file access and writes\n* observe network connections that a Kubernetes workload is making\n* detect privileged processes inside a Kubernetes workload\n\nWhile, we use a Kubernetes Kind cluster in this guide, users can also apply\nthe same concepts in other Kubernetes platforms, bare-metal, or VM environments.\n\n### Requirements\n\nThe base kernel should support [BTF](#btf-requirement) or the BTF file should\nbe placed where Tetragon can read it.\n\nFor reference, the examples below use this [Vagrantfile](#btf-requirement) and we\ncreated our [Kind](https://kind.sigs.k8s.io/docs/user/quick-start/) cluster using\nthe defaults options.\n\n### Create a cluster\n\nCreate a Kubernetes cluster using Kind or GKE.\n\n#### Kind\n\nRun the following command to create the Kubernetes cluster:\n```\nkind create cluster\n```\n\n#### GKE\n\nRun the following command to create a GKE cluster:\n\n```\nexport NAME=\"$(whoami)-$RANDOM\"\ngcloud container clusters create \"${NAME}\" \\\n  --zone us-west2-a \\\n  --num-nodes 1\n```\n\n### Deploy Tetragon\n\nTo install and deploy Tetragon, run the following commands:\n\n```\nhelm repo add cilium https://helm.cilium.io\nhelm repo update\nhelm install tetragon cilium/tetragon -n kube-system\nkubectl rollout status -n kube-system ds/tetragon -w\n```\n\nBy default, kube-system pods are filtered. For the examples below, we use the demo\ndeployment from [Cilium](https://docs.cilium.io/en/v1.11/gettingstarted/http/#gs-http)\nto generate events.\n\n### Deploy Demo Application\n\nOnce Tetragon is installed, you can use our Demo Application to explore\nthe Security Observability Events:\n\n```bash\nkubectl create -f https://raw.githubusercontent.com/cilium/cilium/v1.11/examples/minikube/http-sw-app.yaml\n```\n\nBefore going forward, verify that all pods are up and running - it might take\nseveral seconds for some pods until they satisfy all the dependencies:\n\n```bash\nkubectl get pods\nNAME                         READY   STATUS    RESTARTS   AGE\ndeathstar-6c94dcc57b-7pr8c   1/1     Running   0          10s\ndeathstar-6c94dcc57b-px2vw   1/1     Running   0          10s\ntiefighter                   1/1     Running   0          10s\nxwing                        1/1     Running   0          10s\n```\n\n### Explore Security Observability Events\n\nAfter Tetragon and the Demo Application is up and running you can examine\nthe security and observability events produced by Tetragon in different ways.\n\n#### Raw JSON events\n\nThe first way is to observe the raw json output from the stdout container log:\n\n```\nkubectl logs -n kube-system -l app.kubernetes.io/name=tetragon -c export-stdout -f\n```\n\nThe raw JSON events provide Kubernetes API, identity metadata, and OS\nlevel process visibility about the executed binary, its parent and the execution\ntime.\n\n#### `tetra` CLI\n\nA second way is to pretty print the events using the\n[`tetra` CLI](https://github.com/cilium/tetragon/releases/latest).\nThe tool also allows filtering by process, pod, and other fields.\n\nIf you are using `homebrew`, you can install the latest release with:\n```console\nbrew install tetra\n```\n\nOr you can download and install the latest release with the following commands:\n\n```\nGOOS=$(go env GOOS)\nGOARCH=$(go env GOARCH)\ncurl -L --remote-name-all https://github.com/cilium/tetragon/releases/latest/download/tetra-${GOOS}-${GOARCH}.tar.gz{,.sha256sum}\nsha256sum --check tetra-${GOOS}-${GOARCH}.tar.gz.sha256sum\nsudo tar -C /usr/local/bin -xzvf tetra-${GOOS}-${GOARCH}.tar.gz\nrm tetra-${GOOS}-${GOARCH}.tar.gz{,.sha256sum}\n```\n\n(see https://github.com/cilium/tetragon/releases/latest for supported `GOOS`/`GOARCH` binary releases)\n\nTo start printing events run:\n\n```\nkubectl logs -n kube-system -l app.kubernetes.io/name=tetragon -c export-stdout -f | tetra getevents -o compact\n```\n\nThe `tetra` CLI is also available inside `tetragon` container.\n\n```\nkubectl exec -it -n kube-system ds/tetragon -c tetragon -- tetra getevents -o compact\n```\n\n## Tetragon Events\n\nTetragon is able to observe critical hooks in the kernel through its sensors\nand generates enriched events from them. In the next sections we detail the\navailable sensors and the events they produce:\n1. [Process execution](#process-execution): generating `process_exec` and\n   `process_exit` events.\n1. [Generic tracing](#tracepoints-and-kprobes): generating `process_kprobes`\n   and `process_tracepoint` events.\n\nAlong, we present use cases on how they can be used as a starting point.\n\n### Process execution\n\nTetragon observes process creation and termination with default configuration\nand generates `process_exec` and `process_exit` events:\n\n- The `process_exec` events include useful information about the execution of\n  binaries and related process information. This includes the binary image that\n  was executed, command-line arguments, the UID context the process was\n  executed with, the process parent information, the capabilities that a\n  process had while executed, the process start time, the Kubernetes Pod,\n  labels and more.\n- The `process_exit` events, as the `process_exec` event shows how and when a\n  process started, indicate how and when a process is removed. The information\n  in the event includes the binary image that was executed, command-line\n  arguments, the UID context the process was executed with, process parent\n  information, process start time, the status codes and signals on process\n  exit. Understanding why a process exited and with what status code helps\n  understand the specifics of that exit.\n\nBoth these events include Linux-level metadata (UID, parents, capabilities,\nstart time, etc.) but also Kubernetes-level metadata (Kubernetes namespace,\nlabels, name, etc.). This data make the connection between node-level concepts,\nthe processes, and Kubernetes or container environments.\n\nThese events enable a full lifecycle view into a process that can aid an\nincident investigation, for example, we can determine if a suspicious process\nis still running in a particular environment. For concrete examples of such\nevents, see the next use case on process execution.\n\n#### Use case 1: Monitoring Process Execution\n\nThis first use case is monitoring process execution, which can be observed with\nthe Tetragon `process_exec` and `process_exit` JSON events.\nThese events contain the full lifecycle of processes, from fork/exec to\nexit, including metadata such as:\n\n* Binary name: Defines the name of an executable file\n* Parent process: Helps to identify process execution anomalies (e.g., if a nodejs app forks a shell, this is suspicious)\n* Command-line argument: Defines the program runtime behavior\n* Current working directory: Helps to identify hidden malware execution from a temporary folder, which is a common pattern used in malwares\n* Kubernetes metadata: Contains pods, labels, and Kubernetes namespaces, which are critical to identify service owners, particularly in a multitenant environments\n* exec_id: A unique process identifier that correlates all recorded activity of a process\n\nAs a first step, let's start monitoring the events from the `xwing` pod:\n\n```bash\nkubectl logs -n kube-system -l app.kubernetes.io/name=tetragon -c export-stdout -f | tetra getevents -o compact --namespace default --pod xwing\n```\n\nThen in another terminal, let's `kubectl exec` into the `xwing` pod and execute\nsome example commands:\n\n```bash\nkubectl exec -it xwing -- /bin/bash\nwhoami\n```\n\nIf you observe, the output in the first terminal should be:\n\n```bash\n🚀 process default/xwing /bin/bash\n🚀 process default/xwing /usr/bin/whoami\n💥 exit    default/xwing /usr/bin/whoami 0\n```\n\nHere you can see the binary names along with its arguments, the pod info, and\nreturn codes in a compact one-line view of the events.\n\nFor more details use the raw JSON events to get detailed information, you can stop\nthe Tetragon CLI by `Crl-C` and parse the `tetragon.log` file by executing:\n\n```bash\nkubectl logs -n kube-system -l app.kubernetes.io/name=tetragon -c export-stdout -f | jq 'select(.process_exec.process.pod.name==\"xwing\" or .process_exit.process.pod.name==\"xwing\")'\n```\n\nExample `process_exec` and `process_exit` events can be:\n<details><summary> Process Exec Event </summary>\n<p>\n\n```json\n{\n  \"process_exec\": {\n    \"process\": {\n      \"exec_id\": \"a2luZC1jb250cm9sLXBsYW5lOjExNDI4NjE1NjM2OTAxOjUxNTgz\",\n      \"pid\": 51583,\n      \"uid\": 0,\n      \"cwd\": \"/\",\n      \"binary\": \"/usr/bin/whoami\",\n      \"arguments\": \"--version\",\n      \"flags\": \"execve rootcwd clone\",\n      \"start_time\": \"2022-05-11T12:54:45.615Z\",\n      \"auid\": 4294967295,\n      \"pod\": {\n        \"namespace\": \"default\",\n        \"name\": \"xwing\",\n        \"container\": {\n          \"id\": \"containerd://1fb931d2f6e5e4cfdbaf30fdb8e2fdd81320bdb3047ded50120a4f82838209ce\",\n          \"name\": \"spaceship\",\n          \"image\": {\n            \"id\": \"docker.io/tgraf/netperf@sha256:8e86f744bfea165fd4ce68caa05abc96500f40130b857773186401926af7e9e6\",\n            \"name\": \"docker.io/tgraf/netperf:latest\"\n          },\n          \"start_time\": \"2022-05-11T10:07:33Z\",\n          \"pid\": 50\n        }\n      },\n      \"docker\": \"1fb931d2f6e5e4cfdbaf30fdb8e2fdd\",\n      \"parent_exec_id\": \"a2luZC1jb250cm9sLXBsYW5lOjkwNzkyMjU2MjMyNjk6NDM4NzI=\",\n      \"refcnt\": 1\n    },\n    \"parent\": {\n      \"exec_id\": \"a2luZC1jb250cm9sLXBsYW5lOjkwNzkyMjU2MjMyNjk6NDM4NzI=\",\n      \"pid\": 43872,\n      \"uid\": 0,\n      \"cwd\": \"/\",\n      \"binary\": \"/bin/bash\",\n      \"flags\": \"execve rootcwd clone\",\n      \"start_time\": \"2022-05-11T12:15:36.225Z\",\n      \"auid\": 4294967295,\n      \"pod\": {\n        \"namespace\": \"default\",\n        \"name\": \"xwing\",\n        \"container\": {\n          \"id\": \"containerd://1fb931d2f6e5e4cfdbaf30fdb8e2fdd81320bdb3047ded50120a4f82838209ce\",\n          \"name\": \"spaceship\",\n          \"image\": {\n            \"id\": \"docker.io/tgraf/netperf@sha256:8e86f744bfea165fd4ce68caa05abc96500f40130b857773186401926af7e9e6\",\n            \"name\": \"docker.io/tgraf/netperf:latest\"\n          },\n          \"start_time\": \"2022-05-11T10:07:33Z\",\n          \"pid\": 43\n        }\n      },\n      \"docker\": \"1fb931d2f6e5e4cfdbaf30fdb8e2fdd\",\n      \"parent_exec_id\": \"a2luZC1jb250cm9sLXBsYW5lOjkwNzkxODU5NTMzOTk6NDM4NjE=\",\n      \"refcnt\": 1\n    }\n  },\n  \"node_name\": \"kind-control-plane\",\n  \"time\": \"2022-05-11T12:54:45.615Z\"\n}\n```\n\n</p>\n</details>\n\n<details><summary> Process Exit Event </summary>\n<p>\n\n```json\n{\n  \"process_exit\": {\n    \"process\": {\n      \"exec_id\": \"a2luZC1jb250cm9sLXBsYW5lOjExNDI4NjE1NjM2OTAxOjUxNTgz\",\n      \"pid\": 51583,\n      \"uid\": 0,\n      \"cwd\": \"/\",\n      \"binary\": \"/usr/bin/whoami\",\n      \"arguments\": \"--version\",\n      \"flags\": \"execve rootcwd clone\",\n      \"start_time\": \"2022-05-11T12:54:45.615Z\",\n      \"auid\": 4294967295,\n      \"pod\": {\n        \"namespace\": \"default\",\n        \"name\": \"xwing\",\n        \"container\": {\n          \"id\": \"containerd://1fb931d2f6e5e4cfdbaf30fdb8e2fdd81320bdb3047ded50120a4f82838209ce\",\n          \"name\": \"spaceship\",\n          \"image\": {\n            \"id\": \"docker.io/tgraf/netperf@sha256:8e86f744bfea165fd4ce68caa05abc96500f40130b857773186401926af7e9e6\",\n            \"name\": \"docker.io/tgraf/netperf:latest\"\n          },\n          \"start_time\": \"2022-05-11T10:07:33Z\",\n          \"pid\": 50\n        }\n      },\n      \"docker\": \"1fb931d2f6e5e4cfdbaf30fdb8e2fdd\",\n      \"parent_exec_id\": \"a2luZC1jb250cm9sLXBsYW5lOjkwNzkyMjU2MjMyNjk6NDM4NzI=\"\n    },\n    \"parent\": {\n      \"exec_id\": \"a2luZC1jb250cm9sLXBsYW5lOjkwNzkyMjU2MjMyNjk6NDM4NzI=\",\n      \"pid\": 43872,\n      \"uid\": 0,\n      \"cwd\": \"/\",\n      \"binary\": \"/bin/bash\",\n      \"flags\": \"execve rootcwd clone\",\n      \"start_time\": \"2022-05-11T12:15:36.225Z\",\n      \"auid\": 4294967295,\n      \"pod\": {\n        \"namespace\": \"default\",\n        \"name\": \"xwing\",\n        \"container\": {\n          \"id\": \"containerd://1fb931d2f6e5e4cfdbaf30fdb8e2fdd81320bdb3047ded50120a4f82838209ce\",\n          \"name\": \"spaceship\",\n          \"image\": {\n            \"id\": \"docker.io/tgraf/netperf@sha256:8e86f744bfea165fd4ce68caa05abc96500f40130b857773186401926af7e9e6\",\n            \"name\": \"docker.io/tgraf/netperf:latest\"\n          },\n          \"start_time\": \"2022-05-11T10:07:33Z\",\n          \"pid\": 43\n        }\n      },\n      \"docker\": \"1fb931d2f6e5e4cfdbaf30fdb8e2fdd\",\n      \"parent_exec_id\": \"a2luZC1jb250cm9sLXBsYW5lOjkwNzkxODU5NTMzOTk6NDM4NjE=\"\n    }\n  },\n  \"node_name\": \"kind-control-plane\",\n  \"time\": \"2022-05-11T12:54:45.616Z\"\n}\n```\n\n</p>\n</details>\n\n#### Use case 2: Privileged Execution\n\nTetragon also provides the ability to check process capabilities and kernel\nnamespaces access.\n\nThis information would help us determine which process or Kubernetes pod has\nstarted or gained access to privileges or host namespaces that it should not\nhave. This would help us answer questions like:\n\n> Which Kubernetes pods are running with `CAP_SYS_ADMIN` in my cluster?\n\n> Which Kubernetes pods have host network or pid namespace access in my\n> cluster?\n\nAs a first step let's enable visibility to capability and namespace changes via\nthe configmap by setting `enable-process-cred` and `enable-process-ns` from\n`false` to `true`:\n```bash\nkubectl edit cm -n kube-system tetragon-config\n# change \"enable-process-cred\" from \"false\" to \"true\"\n# change \"enable-process-ns\" from \"false\" to \"true\"\n# then save and exit\n```\nRestart the Tetragon daemonset:\n```\nkubectl rollout restart -n kube-system ds/tetragon\n```\n\nAs a second step, let's start monitoring the Security Observability events from the privileged `test-pod` workload:\n```bash\nkubectl logs -n kube-system -l app.kubernetes.io/name=tetragon -c export-stdout -f | tetra getevents --namespace default --pod test-pod\n```\n\nIn another terminal let's apply the privileged PodSpec:\n```bash\nkubectl apply -f https://raw.githubusercontent.com/cilium/tetragon/main/testdata/specs/testpod.yaml\n```\n\nIf you observe the output in the first terminal, you can see the container start with `CAP_SYS_ADMIN`:\n```bash\n🚀 process default/test-pod /bin/sleep 365d                🛑 CAP_SYS_ADMIN\n🚀 process default/test-pod /usr/bin/jq -r .bundle         🛑 CAP_SYS_ADMIN\n🚀 process default/test-pod /usr/bin/cp /kind/product_name /kind/product_uuid /run/containerd/io.containerd.runtime.v2.task/k8s.io/7c7e513cd4d506417bc9d97dd9af670d94d9e84161c8c8 fdc9fa3a678289a59/rootfs/ 🛑 CAP_SYS_ADMIN\n```\n\n\n### Generic tracing\n\nFor more advanced use cases, Tetragon can observe tracepoints and arbitrary\nkernel calls via kprobes. For that, Tetragon must be extended and configured\nwith custom resources objects named `TracingPolicy`. It can then generates\n`process_tracepoint` and `process_kprobes` events.\n\n`TracingPolicy` is a user-configurable Kubernetes custom resource that allows\nusers to trace arbitrary events in the kernel and optionally define actions to\ntake on a match. For example, a Sigkill signal can be sent to the process or\nthe return value of a system call can be overridden. For bare metal or VM use\ncases without Kubernetes, the same YAML configuration can be passed via a flag\nto the Tetragon binary or via the `tetra` CLI to load the policies via gRPC.\n\nFor more information on `TracingPolicy` and how to write them, see the\n[`TracingPolicy` Guide](https://tetragon.cilium.io/docs/concepts/tracing-policy/).\n\n#### Use case 1: File Access\n\nThe first use case is file access, which can be observed with the Tetragon\n`process_kprobe` JSON events. By using kprobe hook points, these events are\nable to observe arbitrary kernel calls and file descriptors in the Linux\nkernel, giving you the ability to monitor every file a process opens, reads,\nwrites, and closes throughout its lifecycle.\n\nIn this example, we can monitor if a process inside a Kubernetes workload performs\nan open, close, read or write in the `/etc/` directory. The policy may further\nspecify additional directories or specific files if needed.\n\nAs a first step, let's apply the following `TracingPolicy`:\n\n```bash\nkubectl apply -f https://raw.githubusercontent.com/cilium/tetragon/main/examples/tracingpolicy/sys_write_follow_fd_prefix.yaml\n```\n\nAs a second step, let's start monitoring the events from the `xwing` pod:\n```bash\nkubectl logs -n kube-system -l app.kubernetes.io/name=tetragon -c export-stdout -f | tetra getevents -o compact --namespace default --pod xwing\n```\n\nIn another terminal, `kubectl exec` into the `xwing` pod:\n```bash\nkubectl exec -it xwing -- /bin/bash\n```\nand edit the `/etc/passwd` file:\n```bash\nvi /etc/passwd\n```\n\nIf you observe, the output in the first terminal should be:\n```bash\n🚀 process default/xwing /usr/bin/vi /etc/passwd\n📬 open    default/xwing /usr/bin/vi /etc/passwd\n📚 read    default/xwing /usr/bin/vi /etc/passwd 1269 bytes\n📪 close   default/xwing /usr/bin/vi /etc/passwd\n📬 open    default/xwing /usr/bin/vi /etc/passwd\n📝 write   default/xwing /usr/bin/vi /etc/passwd 1277 bytes\n💥 exit    default/xwing /usr/bin/vi /etc/passwd 0\n```\n\nNote, that open and close are only generated for `/etc/` files because of eBPF in kernel\nfiltering. The default CRD additionally filters events associated with the\npod init process to filter init noise from pod start.\n\nSimilarly to the previous example, reviewing the JSON events provides\nadditional data. An example `process_kprobe` event observing a write can be:\n\n<details><summary> Process Kprobe Event </summary>\n<p>\n\n```json\n{\n   \"process_kprobe\":{\n      \"process\":{\n         \"exec_id\":\"a2luZC1jb250cm9sLXBsYW5lOjE1MDA0MzM3MDE1MDI6MTkxNjM=\",\n         \"pid\":19163,\n         \"uid\":0,\n         \"cwd\":\"/\",\n         \"binary\":\"/usr/bin/vi\",\n         \"arguments\":\"/etc/passwd\",\n         \"flags\":\"execve rootcwd clone\",\n         \"start_time\":\"2022-05-26T22:05:13.894Z\",\n         \"auid\":4294967295,\n         \"pod\":{\n            \"namespace\":\"default\",\n            \"name\":\"xwing\",\n            \"container\":{\n               \"id\":\"containerd://4b0df5a137260a6b95cbf6443bb2f4b0c9309e6ccb3d8afdbc3da8fff40c0778\",\n               \"name\":\"spaceship\",\n               \"image\":{\n                  \"id\":\"docker.io/tgraf/netperf@sha256:8e86f744bfea165fd4ce68caa05abc96500f40130b857773186401926af7e9e6\",\n                  \"name\":\"docker.io/tgraf/netperf:latest\"\n               },\n               \"start_time\":\"2022-05-26T21:58:11Z\",\n               \"pid\":25\n            }\n         },\n         \"docker\":\"4b0df5a137260a6b95cbf6443bb2f4b\",\n         \"parent_exec_id\":\"a2luZC1jb250cm9sLXBsYW5lOjEyMDQ1NTIzMTUwNjY6MTc1NDI=\",\n         \"refcnt\":1\n      },\n      \"parent\":{\n\n      },\n      \"function_name\":\"__x64_sys_write\",\n      \"args\":[\n         {\n            \"file_arg\":{\n               \"path\":\"/etc/passwd\"\n            }\n         },\n         {\n            \"bytes_arg\":\"cm9vdDp4OjA6MDpyb290Oi9yb290Oi9iaW4vYXNoCm5hdGFsaWEKYmluOng6MToxOmJpbjovYmluOi9zYmluL25vbG9naW4KZGFlbW9uOng6MjoyOmRhZW1vbjovc2Jpbjovc2Jpbi9ub2xvZ2luCmFkbTp4OjM6NDphZG06L3Zhci9hZG06L3NiaW4vbm9sb2dpbgpscDp4OjQ6NzpscDovdmFyL3Nwb29sL2xwZDovc2Jpbi9ub2xvZ2luCnN5bmM6eDo1OjA6c3luYzovc2JpbjovYmluL3N5bmMKc2h1dGRvd246eDo2OjA6c2h1dGRvd246L3NiaW46L3NiaW4vc2h1dGRvd24KaGFsdDp4Ojc6MDpoYWx0Oi9zYmluOi9zYmluL2hhbHQKbWFpbDp4Ojg6MTI6bWFpbDovdmFyL3Nwb29sL21haWw6L3NiaW4vbm9sb2dpbgpuZXdzOng6OToxMzpuZXdzOi91c3IvbGliL25ld3M6L3NiaW4vbm9sb2dpbgp1dWNwOng6MTA6MTQ6dXVjcDovdmFyL3Nwb29sL3V1Y3BwdWJsaWM6L3NiaW4vbm9sb2dpbgpvcGVyYXRvcjp4OjExOjA6b3BlcmF0b3I6L3Jvb3Q6L2Jpbi9zaAptYW46eDoxMzoxNTptYW46L3Vzci9tYW46L3NiaW4vbm9sb2dpbgpwb3N0bWFzdGVyOng6MTQ6MTI6cG9zdG1hc3RlcjovdmFyL3Nwb29sL21haWw6L3NiaW4vbm9sb2dpbgpjcm9uOng6MTY6MTY6Y3JvbjovdmFyL3Nwb29sL2Nyb246L3NiaW4vbm9sb2dpbgpmdHA6eDoyMToyMTo6L3Zhci9saWIvZnRwOi9zYmluL25vbG9naW4Kc3NoZDp4OjIyOjIyOnNzaGQ6L2Rldi9udWxsOi9zYmluL25vbG9naW4KYXQ6eDoyNToyNTphdDovdmFyL3Nwb29sL2Nyb24vYXRqb2JzOi9zYmluL25vbG9naW4Kc3F1aWQ6eDozMTozMTpTcXVpZDovdmFyL2NhY2hlL3NxdWlkOi9zYmluL25vbG9naW4KeGZzOng6MzM6MzM6WCBGb250IFNlcnZlcjovZXRjL1gxMS9mczovc2Jpbi9ub2xvZ2luCmdhbWVzOng6MzU6MzU6Z2FtZXM6L3Vzci9nYW1lczovc2Jpbi9ub2xvZ2luCnBvc3RncmVzOng6NzA6NzA6Oi92YXIvbGliL3Bvc3RncmVzcWw6L2Jpbi9zaApudXQ6eDo4NDo4NDpudXQ6L3Zhci9zdGF0ZS9udXQ6L3NiaW4vbm9sb2dpbgpjeXJ1czp4Ojg1OjEyOjovdXNyL2N5cnVzOi9zYmluL25vbG9naW4KdnBvcG1haWw6eDo4OTo4OTo6L3Zhci92cG9wbWFpbDovc2Jpbi9ub2xvZ2luCm50cDp4OjEyMzoxMjM6TlRQOi92YXIvZW1wdHk6L3NiaW4vbm9sb2dpbgpzbW1zcDp4OjIwOToyMDk6c21tc3A6L3Zhci9zcG9vbC9tcXVldWU6L3NiaW4vbm9sb2dpbgpndWVzdDp4OjQwNToxMDA6Z3Vlc3Q6L2Rldi9udWxsOi9zYmluL25vbG9naW4Kbm9ib2R5Ong6NjU1MzQ6NjU1MzQ6bm9ib2R5Oi86L3NiaW4vbm9sb2dpbgo=\"\n         },\n         {\n            \"size_arg\":\"1277\"\n         }\n      ],\n      \"action\":\"KPROBE_ACTION_POST\"\n   },\n   \"node_name\":\"kind-control-plane\",\n   \"time\":\"2022-05-26T22:05:25.962Z\"\n}\n```\n\n</p></details>\n\nIn addition to the Kubernetes Identity\nand process metadata from exec events, `process_kprobe` events contain\nthe arguments of the observed system call. In the above case they are\n\n* `path`: the observed file path\n* `bytes_arg`: content of the observed file encoded in base64\n* `size_arg`: size of the observed file in bytes\n\nTo disable the `TracingPolicy` run:\n\n```bash\nkubectl delete -f https://raw.githubusercontent.com/cilium/tetragon/main/examples/tracingpolicy/sys_write_follow_fd_prefix.yaml\n```\n\n#### Use case 2: Network Observability\n\nTo view TCP connect events, apply the example TCP connect `TracingPolicy`:\n\n```bash\nkubectl apply -f https://raw.githubusercontent.com/cilium/tetragon/main/examples/tracingpolicy/tcp-connect.yaml\n```\n\nTo start monitoring events in the `xwing` pod run the Tetragon CLI:\n\n```bash\nkubectl logs -n kube-system -l app.kubernetes.io/name=tetragon -c export-stdout -f | tetra getevents -o compact --namespace default --pod xwing\n```\n\nIn another terminal, start generate a TCP connection. Here we use\ncurl.\n```bash\nkubectl exec -it xwing -- curl http://cilium.io\n```\nThe output in the first terminal will capture the new connect and write,\n```bash\n🚀 process default/xwing /usr/bin/curl http://cilium.io\n🔌 connect default/xwing /usr/bin/curl tcp 10.244.0.6:34965 -> 104.198.14.52:80\n📤 sendmsg default/xwing /usr/bin/curl tcp 10.244.0.6:34965 -> 104.198.14.52:80 bytes 73\n🧹 close   default/xwing /usr/bin/curl tcp 10.244.0.6:34965 -> 104.198.14.52:80\n💥 exit    default/xwing /usr/bin/curl http://cilium.io 0\n```\n\nTo disable the TracingPolicy run:\n```bash\nkubectl delete -f https://raw.githubusercontent.com/cilium/tetragon/main/examples/tracingpolicy/tcp-connect.yaml\n```\n\n\n## BTF Requirement\n\nMany common Linux distributions now ship with BTF enabled and do not require any extra work.\nTo check if BTF is enabled on your Linux system, the standard location is:\n\n```\n$ ls /sys/kernel/btf/\n```\n\nOtherwise Tetragon repository provides a [Vagrantfile](https://github.com/cilium/tetragon/blob/main/Vagrantfile)\nthat can be used to install a vagrant box for running Tetragon with BTF\nrequirement. Other VM solutions work as well.\n\nTo run with [vagrant](https://learn.hashicorp.com/tutorials/vagrant/getting-started-index?in=vagrant/getting-started):\n\n```\n $ vagrant up\n $ vagrant ssh\n ```\n\nThis should be sufficient to create a Kind cluster and run Tetragon. For more information on the vagrant builds, see the [Development Guide](https://tetragon.cilium.io/docs/contribution-guide/development-setup/#local-development-in-vagrant-box).\n\n## Verify Tetragon Image Signatures\n\n### Prerequisites\n\nYou will need to [install cosign](https://docs.sigstore.dev/system_config/installation/).\n\n### Verify Signed Container Images\n\nSince version 0.8.4, all Tetragon container images are signed using cosign.\n\nLet's verify a Tetragon image's signature using the `cosign verify` command:\n\n```bash\n$ COSIGN_EXPERIMENTAL=1 cosign verify --certificate-github-workflow-repository cilium/tetragon --certificate-oidc-issuer https://token.actions.githubusercontent.com <Image URL> | jq\n```\n\n**Note**\n\n`COSIGN_EXPERIMENTAL=1` is used to allow verification of images signed in KEYLESS mode. To learn more about keyless signing, please refer to [Keyless Signatures](https://github.com/sigstore/cosign/blob/main/KEYLESS.md#keyless-signatures).\n\n## Software Bill of Materials\n\nA Software Bill of Materials (SBOM) is a complete, formally structured list of\ncomponents that are required to build a given piece of software. SBOM provides\ninsight into the software supply chain and any potential concerns related to\nlicense compliance and security that might exist.\n\nStarting with version 0.8.4, all Tetragon images include an SBOM. The SBOM is\ngenerated in [SPDX](https://spdx.dev/) format using the [bom](https://github.com/kubernetes-sigs/bom) tool.\nIf you are new to the concept of SBOM, see [what an SBOM can do for you](https://www.chainguard.dev/unchained/what-an-sbom-can-do-for-you).\n\n### Download SBOM\n\n  The SBOM can be downloaded from the supplied Tetragon image using the `cosign download sbom` command.\n\n  ```bash\n  $ cosign download sbom --output-file sbom.spdx <Image URL>\n  ```\n### Verify SBOM Image Signature\n\nTo ensure the SBOM is tamper-proof, its signature can be verified using the\n`cosign verify` command.\n\n```bash\n$ COSIGN_EXPERIMENTAL=1 cosign verify --certificate-github-workflow-repository cilium/tetragon --certificate-oidc-issuer https://token.actions.githubusercontent.com --attachment sbom <Image URL> | jq\n```\nIt can be validated that the SBOM image was signed using Github Actions in the Cilium\nrepository from the `Issuer` and `Subject` fields of the output.\n\n## FAQ\n\n**Q:** Can I install and use Tetragon in standalone mode (outside of k8s)?\n\n**A:** Yes! You can run `make` to generate standalone binaries and run them directly.\nMake sure to take a look at the [Development Setup](https://tetragon.cilium.io/docs/contribution-guide/development-setup/)\nguide for the build requirements. Then use `sudo ./tetragon --bpf-lib bpf/objs`\nto run Tetragon.\n\n----\n\n**Q:** CI is complaining about Go module vendoring, what do I do?\n\n**A:** You can run `make vendor` then add and commit your changes.\n\n----\n\n**Q:** CI is complaining about a missing \"signed-off-by\" line. What do I do?\n\n**A:** You need to add a signed-off-by line to your commit messages. The easiest way to do\nthis is with `git fetch origin/main && git rebase --signoff origin/main`. Then push your changes.\n\n## Additional Resources\n\n## Conference Talks\n\n[Uncovering a Sophisticated Kubernetes Attack in Real-Time](https://www.youtube.com/watch?v=bohnofE_dvw) - Jed Salazar & Natália Réka Ivánkó, KubeCon EU, 2020\n\n[Uncovering a Sophisticated Kubernetes Attack in Real Time Part II.](https://www.oreilly.com/library/view/infrastructure-ops/0636920625377/video335775.html) - Jed Salazar & Natália Réka Ivánkó, O'Reilly Superstream Series, Infrastructure & Ops, 2021\n\n[Keeping your cluster safe from attacks with eBPF](https://www.youtube.com/watch?v=agN68U8x1go) - Jed Salazar & Natália Réka Ivánkó, eBPF Summit, 2021\n\n[You and Your Security Profiles; Generating Security Policies with the Help of eBPF](https://www.youtube.com/watch?v=EhQI1qPVb0E) - John Fastabend & Natália Réka Ivánkó, eBPF Day North America, 2022\n\n[Container Security and Runtime Enforcement with Tetragon](https://www.youtube.com/watch?v=fw40ROmswbM) - Djalal Harouni, eBPF Summit, 2022\n\n[Securing the Superpowers: Who Loaded That eBPF Program?](https://www.youtube.com/watch?v=UBVTJ0LeXxc) - John Fastabend & Natália Réka Ivánkó, CloudNative SecurityCon NA, 2023\n\n### Book\n\n[Security Observability with eBPF](https://isovalent.com/ebpf-security/) - Jed Salazar & Natália Réka Ivánkó, OReilly, 2022\n\n### Blog posts\n\n[Detecting a Container Escape with Cilium and eBPF](https://isovalent.com/blog/post/2021-11-container-escape) - Natália Réka Ivánkó, 2021\n\n[Detecting and Blocking log4shell with Isovalent Cilium Enterprise](https://isovalent.com/blog/post/2021-12-log4shell) - Jed Salazar, 2021\n\n### Hands-on lab\n\n[Security Observability with eBPF and Tetragon](https://isovalent.com/labs/) - Natália Réka Ivánkó, Roland Wolters, Raphaël Pinson\n\n## Community\n\n### Slack\n\nJoin the Tetragon [Slack channel](https://cilium.herokuapp.com/) to chat with developers, maintainers, and other users. This\nis a good first stop to ask questions and share your experiences."
}
