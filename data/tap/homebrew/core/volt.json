{
  "name": "volt",
  "full_name": "volt",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Meta-level vim package manager",
  "license": null,
  "homepage": "https://github.com/vim-volt/volt",
  "versions": {
    "stable": "0.3.7",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/vim-volt/volt.git",
      "tag": "v0.3.7",
      "revision": "e604467d8b440c89793b2e113cd241915e431bf9",
      "checksum": null
    },
    "head": {
      "url": "https://github.com/vim-volt/volt.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/volt/blobs/sha256:59485100787529576ed3a8c6b89aaa86fe1efb46854d39e5b5952769c96d258d",
          "sha256": "59485100787529576ed3a8c6b89aaa86fe1efb46854d39e5b5952769c96d258d"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/volt/blobs/sha256:87cfdbc43edeb2cedc60ddda401062cad644f0fa6d799d7ef112800984a10da7",
          "sha256": "87cfdbc43edeb2cedc60ddda401062cad644f0fa6d799d7ef112800984a10da7"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/volt/blobs/sha256:836f10188a9b461531bac4b6eb803e4f86057342e443df99c0c466e224af18b6",
          "sha256": "836f10188a9b461531bac4b6eb803e4f86057342e443df99c0c466e224af18b6"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/volt/blobs/sha256:c5244e0342f754911a266ba1fa595c9ef9eb14b19e9191f325ff484551be9297",
          "sha256": "c5244e0342f754911a266ba1fa595c9ef9eb14b19e9191f325ff484551be9297"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/volt/blobs/sha256:d7d07259218a768843d6c9131e6e9f616e242b50f01aacbbdb9f539960cbcf77",
          "sha256": "d7d07259218a768843d6c9131e6e9f616e242b50f01aacbbdb9f539960cbcf77"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/volt/blobs/sha256:f08427b7e8f71b984417f65a5154dde9883610fb683891e16e267928c578bd59",
          "sha256": "f08427b7e8f71b984417f65a5154dde9883610fb683891e16e267928c578bd59"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/volt/blobs/sha256:60210297f62f908ef4090a7f69631ad02cb4fe2ce8472e953f67ad91caa9461c",
          "sha256": "60210297f62f908ef4090a7f69631ad02cb4fe2ce8472e953f67ad91caa9461c"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/volt/blobs/sha256:9db9e940c124e8e655cdd84b7d143f526535c588ebd6503acb3960143d08f905",
          "sha256": "9db9e940c124e8e655cdd84b7d143f526535c588ebd6503acb3960143d08f905"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/volt/blobs/sha256:7fd8887efcdc3a9816b2dea510c2e3ba218e0e719390841d3b0b416fde53378e",
          "sha256": "7fd8887efcdc3a9816b2dea510c2e3ba218e0e719390841d3b0b416fde53378e"
        },
        "sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/volt/blobs/sha256:4edc3f1130757ddbf0a7b3c018825f68f2ecb24417f3afc3fd54b532e8c72c46",
          "sha256": "4edc3f1130757ddbf0a7b3c018825f68f2ecb24417f3afc3fd54b532e8c72c46"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/volt/blobs/sha256:fe7d78905a357fa59f18330aab57269cce1fda6af521552918d54911fd075035",
          "sha256": "fe7d78905a357fa59f18330aab57269cce1fda6af521552918d54911fd075035"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    {
      "vim": "test"
    }
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/volt.rb",
  "ruby_source_checksum": {
    "sha256": "15830d2749d7659573f7e2729003f61e6fde4ee0757ce38f567791f5700f29cc"
  },
  "date_added": "2019-04-04T13:51:07+02:00",
  "readme": ":zap: Volt\n[![Travis CI - Build status](https://travis-ci.org/vim-volt/volt.svg?branch=master)](https://travis-ci.org/vim-volt/volt)\n[![AppVeyor - Build status](https://ci.appveyor.com/api/projects/status/github/vim-volt/volt?branch=master&svg=true)](https://ci.appveyor.com/project/vim-volt/volt)\n----\n\n```\n .----------------.  .----------------.  .----------------.  .----------------.\n| .--------------. || .--------------. || .--------------. || .--------------. |\n| | ____   ____  | || |     ____     | || |   _____      | || |  _________   | |\n| ||_  _| |_  _| | || |   .'    `.   | || |  |_   _|     | || | |  _   _  |  | |\n| |  \\ \\   / /   | || |  /  .--.  \\  | || |    | |       | || | |_/ | | \\_|  | |\n| |   \\ \\ / /    | || |  | |    | |  | || |    | |   _   | || |     | |      | |\n| |    \\ ' /     | || |  \\  `--'  /  | || |   _| |__/ |  | || |    _| |_     | |\n| |     \\_/      | || |   `.____.'   | || |  |________|  | || |   |_____|    | |\n| |              | || |              | || |              | || |              | |\n| '--------------' || '--------------' || '--------------' || '--------------' |\n '----------------'  '----------------'  '----------------'  '----------------'\n```\n\nSee [the command reference](https://github.com/vim-volt/volt/blob/master/CMDREF.md) for more details.\n\n\n* [What is Volt](#what-is-volt)\n* [Install](#install)\n* [Self upgrade](#self-upgrade)\n* [Introduction](#introduction)\n  * [VOLTPATH](#voltpath)\n  * [Install plugin(s)](#install-plugins)\n  * [Update plugins](#update-plugins)\n  * [Uninstall plugins](#uninstall-plugins)\n* [How it works](#how-it-works)\n  * [Syncing ~/.vim/pack/volt directory with $VOLTPATH](#syncing-vimpackvolt-directory-with-voltpath)\n* [Config](#config)\n* [Features](#features)\n  * [Easy setup](#easy-setup)\n  * [Configuration per plugin (\"Plugconf\" feature)](#configuration-per-plugin-plugconf-feature)\n  * [Switch set of plugins (\"Profile\" feature)](#switch-set-of-plugins-profile-feature)\n  * [Manage a local directory as a vim plugin](#manage-a-local-directory-as-a-vim-plugin)\n* [Contribution](#tada-contribution)\n\n\n\n## What is Volt\n\n* Multi-platform CLI tool managing Vim plugin life\n* Parallel vim plugin update\n* Based on Vim 8 [packages feature](http://vimhelp.appspot.com/repeat.txt.html#packages)\n    * All plugins are installed under `~/.vim/pack/volt` directory\n* Zero overhead & optimizations\n    * Volt does not slow down your startup\n    * We plan to support transpilation of Vim script (Uglification, Transpiler to LuaJIT, ...)\n* Provides version locking & [easy setup](#easy-setup)\n* Managing plugin configuration by [plugconf](#configuration-per-plugin-plugconf-feature) files\n    * This separates plugin configuration from vimrc, so you can easily disable/remove plugins in a second\n* [Profile feature](#switch-set-of-plugins-profile-feature) saves set of plugins, vimrc, and gvimrc\n    * You can switch those combinations with one command\n    * For example, you can switch various Vim such as Web development mode, Essential plugins + vimrc only, or Vanilla Vim.\n\n## Quickstart\n\n### Install\n\n* [Download](https://github.com/vim-volt/volt/releases)\n* Or `go get github.com/vim-volt/volt`\n\nOptional: Bash/Zsh completion scripts in [\\_contrib/completion/](https://github.com/vim-volt/volt/blob/master/_contrib/completion) directory (by @AvianY, @mrymtsk).\n\n### Self upgrade\n\nIf you already have older version's `volt` command, you can use `volt self-upgrade` command.\n\n```\n$ volt self-upgrade\n```\n\nwill upgrade current running volt binary to the latest version if the [newer releases](https://github.com/vim-volt/volt/releases) published.\n\nOr also you can just checks if the newer releases published by running `volt self-upgrade -check`.\n\n### vimrc / gvimrc\n\nIf you put your vimrc / gvimrc to:\n\n* `$HOME/volt/rc/<profile>/vimrc.vim` (installed to: `$HOME/.vim/vimrc`)\n* `$HOME/volt/rc/<profile>/gvimrc.vim` (installed to: `$HOME/.vim/gvimrc`)\n\nThe default profile is `default`.\n\nWhy volt manages vimrc / gvimrc is to allow easily switching vimrc / gvimrc.\nSee [the profile feature](https://github.com/vim-volt/volt#switch-set-of-plugins-profile-feature) for details.\n\n### VOLTPATH\n\nYou can change base directory of volt by `VOLTPATH` environment variable.\nThis is `$HOME/volt` by default.\n\n### Install plugin(s)\n\nFor example, installing [tyru/caw.vim](https://github.com/tyru/caw.vim) plugin:\n\n```\n$ volt get https://github.com/tyru/caw.vim   # most verbose way (but handy when you copy & paste from browser address bar :)\n$ volt get github.com/tyru/caw.vim           # you can omit https:// of repository URL\n$ volt get tyru/caw.vim                      # you can omit github.com/ if the repository is on GitHub\n```\n\nAnd you can install multiple plugins (parallel download):\n\n```\n$ volt get tyru/open-browser.vim tyru/open-browser-github.vim\n```\n\nFor example, what `volt get tyru/caw.vim` command does internally is:\n\n* Clone and install the repository to `$VOLTPATH/repos/github.com/tyru/caw.vim`\n    * Volt does not require `git` command because it's powered by [go-git](https://github.com/src-d/go-git)\n* Update `$VOLTPATH/lock.json`\n* Run `volt build`\n    * Copy repository files to `~/.vim/pack/volt/opt/github.com_tyru_caw.vim`\n    * Install `~/.vim/pack/volt/start/system/plugin/bundled_plugconf.vim`\n        * It loads plugins like `packadd github.com_tyru_caw.vim`\n\n### Update plugins\n\nYou can update all plugins as follows:\n\n```\n$ volt get -l -u\n```\n\n`-l` works like all plugins in current profile are specified (the repositories list is read from `$VOLTPATH/lock.json`).\nIf you do not use profile feature, or `enable` and `disable` commands, you can\nthink that `-l` specifies all plugins what you have installed.\n`-u` updates specified plugins.\n\nOr, update only specified plugin(s) as follows:\n\n```\n$ volt get -u tyru/caw.vim\n```\n\n### Uninstall plugins\n\nYou can uninstall `tyru/caw.vim` as follows:\n\n```\n$ volt rm tyru/caw.vim   # (sob)\n```\n\n## How it works\n\n### Syncing ~/.vim/pack/volt directory with $VOLTPATH\n\n![volt build](https://raw.githubusercontent.com/vim-volt/volt/master/img/volt-build.png)\n\n`volt build` synchronizes `~/.vim/pack/volt/...` with `$VOLTPATH/rc/<profile>/vimrc.vim` and `$VOLTPATH/rc/<profile>/gvimrc.vim` (if exists), `$VOLTPATH/repos` (repositories), `$VOLTPATH/plugconf` (plugconf):\n\n1. Install `$VOLTPATH/rc/<profile>/{vimrc.vim,gvimrc.vim}` to `~/.vim/vimrc` and `~/.vim/gvimrc`\n1. Copy `$VOLTPATH/repos/<repos>` to `~/.vim/pack/volt/opt/<repos>`\n  * if `$VOLTPATH/repos/<repos>` has modified/new file(s), copy them to `~/.vim/pack/volt/opt/<repos>`\n  * if `$VOLTPATH/repos/<repos>` does not exist, remove `~/.vim/pack/volt/opt/<repos>`\n1. Install bootstrap script to `~/.vim/pack/volt/start/system/plugin/bundled_plugconf.vim` (load plugins & plugconfs)\n\nUsers don't have to run `volt build` when running `volt get`, `volt rm`, `volt add`, `volt profile`, ... commands, because those commands invoke `volt build` command internally if the commands modify repositories, plugconf, lock.json.\nBut if you edit `$VOLTPATH/rc/<profile>/vimrc.vim` or `$VOLTPATH/rc/<profile>/gvimrc.vim`, you have to run `volt build` to copy them to `~/.vim/vimrc` or `~/.vim/gvimrc`.\n\n`volt build` uses cache for the next running.\nNormally `volt build` synchronizes correctly, but if you met the bug, try `volt build -full` (or please [file an issue](https://github.com/vim-volt/volt/issues/new) as possible :) to ignore the previous cache.\n\n## Config\n\nConfig file: `$VOLTPATH/config.toml`\n\n```toml\n[alias]\n# You can use `volt update` in addition to `volt get -u`\nupdate = [\"get\", \"-u\"]\n\n[build]\n# * \"symlink\" (default): \"volt build\" creates symlinks \"~/.vim/pack/volt/opt/<repos>\" referring to \"$VOLTPATH/repos/<repos>\"\n# * \"copy\": \"volt build\" copies \"$VOLTPATH/repos/<repos>\" files to \"~/.vim/pack/volt/opt/<repos>\"\nstrategy = \"symlink\"\n\n[get]\n# * true (default): \"volt get\" creates skeleton plugconf file at \"$VOLTPATH/plugconf/<repos>.vim\"\n# * false: It does not creates skeleton plugconf file\ncreate_skeleton_plugconf = true\n\n# * true (default): When \"volt get\" or \"volt get -u\" fail and \"git\" command is\n#                   installed, it tries to execute \"git clone\" or \"git pull\" as a fallback\n# * false: \"volt get\" or \"volt get -u\" won't try to execute fallback commands\nfallback_git_cmd = true\n\n[edit]\n# If you ever wanted to use emacs to edit your vim plugin config, you can\n# do so with the following. If not specified, volt will try to use\n# vim/nvim, $VISUAL, sensible-editor, or $EDITOR in this order until a usable\n# one is found.\neditor = \"emacs\"\n```\n\n## Features\n\n### Easy setup\n\nIf you want to install set of plugins which you have installed by `volt get`, you can use `volt get -l`.\n\n```\n$ volt get -l   # install missing plugins in current profile in $VOLTPATH/lock.json\n```\n\nFirst, you have to manage the following files under `$VOLTPATH`.\n\n```\n$VOLTPATH/\n├ ─ ─  lock.json\n├ ─ ─  plugconf (optional)\n└ ─ ─  rc (optional)\n```\n\n**NOTE: DO NOT RECOMMEND SHARING VOLT DIRECTORY ITSELF ON DROPBOX** (see [related issues](https://github.com/vim-volt/volt/issues?utf8=%E2%9C%93&q=is%3Aissue+dropbox)).\n\nFor example, my actual setup is:\n\n```\n$ tree -L 1 ~/volt/\n/home/tyru/volt/\n├ ─ ─  lock.json -> /home/tyru/git/dotfiles/dotfiles/volt/lock.json\n├ ─ ─  plugconf -> /home/tyru/git/dotfiles/dotfiles/volt/plugconf\n├ ─ ─  rc -> /home/tyru/git/dotfiles/dotfiles/volt/rc\n└ ─ ─  repos\n```\n\nSee [volt directory](https://github.com/tyru/dotfiles/tree/36456c73e66898c8a725e2043ff0ffcba941ebf4/dotfiles/volt) in [tyru/dotfiles](https://github.com/tyru/dotfiles/) repository for example.\n\n### Configuration per plugin (\"Plugconf\" feature)\n\nYou can write plugin configuration in \"plugconf\" file.\nThe files are placed at:\n\n* `$VOLTPATH/plugconf/<repository>.vim`\n\nFor example, [tyru/open-browser-github.vim](https://github.com/tyru/open-browser-github.vim) configuration is `$VOLTPATH/plugconf/github.com/tyru/open-browser.vim.vim` because \"github.com/tyru/open-browser-github.vim\" is the repository URL.\n\nSome special functions can be defined in plugconf file:\n\n* `s:on_load_pre()`\n    * Plugin configuration to be executed before a plugin is loaded\n* `s:on_load_post()`\n    * Plugin configuration to be executed after a plugin is loaded\n* `s:loaded_on()` (optional)\n    * Return value: String (when to load a plugin by `:packadd`)\n    * This function specifies when to load a plugin by `:packadd`\n    * e.g.: `return \"start\"` (default, load on `VimEnter` autocommand)\n    * e.g.: `return \"filetype=<filetype>\"` (load on `FileType` autocommand)\n    * e.g.: `return \"excmd=<excmd>\"` (load on `CmdUndefined` autocommand)\n* `s:depends()` (optional)\n    * Return value: List (repository name)\n    * The specified plugins by this function are loaded before the plugin of plugconf\n    * e.g.: `[\"github.com/tyru/open-browser.vim\"]`\n\nHowever, you can also define global functions in plugconf (see [tyru/nextfile.vim example](https://github.com/tyru/dotfiles/blob/36456c73e66898c8a725e2043ff0ffcba941ebf4/dotfiles/volt/plugconf/github.com/tyru/nextfile.vim.vim)).\n\nAn example config of [tyru/open-browser-github.vim](https://github.com/tyru/open-browser-github.vim):\n\n```vim\n\" Plugin configuration like the code written in vimrc.\n\" This configuration is executed *before* a plugin is loaded.\nfunction! s:on_load_pre()\n  let g:openbrowser_github_always_use_commit_hash = 1\nendfunction\n\n\" Plugin configuration like the code written in vimrc.\n\" This configuration is executed *after* a plugin is loaded.\nfunction! s:on_load_post()\n  call openbrowser#open('https://example.net/my-start-page.html')\nendfunction\n\n\" This function determines when a plugin is loaded.\n\"\n\" Possible values are:\n\" * 'start' (a plugin will be loaded at VimEnter event)\n\" * 'filetype=<filetypes>' (a plugin will be loaded at FileType event)\n\" * 'excmd=<excmds>' (a plugin will be loaded at CmdUndefined event)\n\" <filetypes> and <excmds> can be multiple values separated by comma.\n\"\n\" This function must contain 'return \"<str>\"' code.\n\" (the argument of :return must be string literal)\nfunction! s:loaded_on()\n  \" this is the default value, you don't have to write this\n  return 'start'\nendfunction\n\n\" Dependencies of this plugin.\n\" The specified plugins are loaded *before* this plugin is loaded.\n\"\n\" This function must contain 'return [<repos>, ...]' code.\n\" (the argument of :return must be list literal, and the elements are string)\nfunction! s:depends()\n  return ['github.com/tyru/open-browser.vim']\nendfunction\n```\n\nNOTE:\n\n* Plugconf file is parsed by [go-vimlparser](https://github.com/haya14busa/go-vimlparser)\n* The rhs of `:return` must be literal\n* Breaking newline by backslash (`\\`) in `s:loaded_on()` and `s:depends()` is safe, but the following code can not be recognized (currently not supported at least)\n\n```vim\n\" Wrong\nfunction! s:loaded_on()\n  let when = 'filetype=vim'\n  return when\nendfunction\n\n\" Wrong\nfunction! s:depends()\n  let list =  ['github.com/tyru/open-browser.vim']\n  return list\nendfunction\n\n\" OK\nfunction! s:depends()\n  return [\n  \\  'github.com/tyru/open-browser.vim'\n  \\]\nendfunction\n```\n\nSee [plugconf directory](https://github.com/tyru/dotfiles/tree/75a37b4a640a5cffecf34d2a52406d0f53ee6f09/dotfiles/volt/plugconf) in [tyru/dotfiles](https://github.com/tyru/dotfiles/) repository for example.\n\n### Switch set of plugins (\"Profile\" feature)\n\nYou can think this is similar feature of **branch** of `git`.\nThe default profile name is \"default\".\n\nYou can see profile list by `volt profile list`.\n\n```\n$ volt profile list\n* default\n```\n\nYou can create a new profile by `volt profile new`.\n\n```\n$ volt profile new foo   # will create profile \"foo\"\n$ volt profile list\n* default\n  foo\n```\n\nYou can switch current profile by `volt profile set`.\n\n```\n$ volt profile set foo   # will switch profile to \"foo\"\n$ volt profile list\n  default\n* foo\n```\n\nYou can delete profile by `volt profile destroy` (but you cannot delete current profile which you are switching on).\n\n```\n$ volt profile destroy foo   # will delete profile \"foo\"\n```\n\nYou can enable/disable plugin by `volt enable` (`volt profile add`), `volt disable` (`volt profile rm`).\n\n```\n$ volt enable tyru/caw.vim    # enable loading tyru/caw.vim on current profile\n$ volt profile add foo tyru/caw.vim    # enable loading tyru/caw.vim on \"foo\" profile\n```\n\n```\n$ volt disable tyru/caw.vim   # disable loading tyru/caw.vim on current profile\n$ volt profile rm foo tyru/caw.vim    # disable loading tyru/caw.vim on \"foo\" profile\n```\n\nYou can create a vimrc & gvimrc file for each profile:\n* vimrc: `$VOLTPATH/rc/<profile name>/vimrc.vim`\n* gvimrc: `$VOLTPATH/rc/<profile name>/gvimrc.vim`\n\nNOTE: If the path(s) exists, `$MYVIMRC` and `$MYGVIMRC` are set. So `:edit $MYVIMRC` does not open generated vimrc (`~/.vim/vimrc`), but above vimrc/gvimrc.\n\nThis file is copied to `~/.vim/vimrc` and `~/.vim/gvimrc` with magic comment (shows error if existing vimrc/gvimrc files exist with no magic comment).\n\nAnd you can enable/disable vimrc by removing (or renaming) `$VOLTPATH/rc/<profile name>/vimrc.vim` file if you don't want vimrc for the profile.\n\nSee `volt help profile` for more detailed information.\n\n\n### Manage a local directory as a vim plugin\n\nYou can manage also a local directory as a vim plugin (it's called `static repository`).\n\nQuick try:\n\n```\n$ mkdir -p ~/volt/repos/localhost/local/hello/plugin\n$ echo 'command! Hello echom \"hello\"' >~/volt/repos/localhost/local/hello/plugin/hello.vim\n$ volt get localhost/local/hello     # will add the local repository as a plugin\n$ vim -c Hello                       # will output \"hello\"\n```\n\n`volt get` does not make a request when the specified repository directory already exists,\nbut it adds to `$VOLTPATH/lock.json` if it does not have.\n\nYou can use a arbitrary name as a repository name, but `localhost/{user}/{name}` is recommended.\nBecause if you run `volt get localhost/{user}/{name}` accidentally you only get `connection refused`.\nSo it is guaranteed that you won't install a unwanted plugin :)\n\nIn other words, this means you can also manage your `~/.vim/*` files as a vim plugin.\nOff cource you can disable/enable it by `volt disable <repos>` and `volt enable <repos>`.\n\n```\nMove files/directories to vimdir\n$ mkdir -p ~/volt/repos/localhost/my/vimdir\n$ mv ~/.vim/* ~/volt/repos/localhost/my/vimdir/\n\nRemove unnecessary files/directories\n$ rm -rf ~/volt/repos/localhost/my/vimdir/pack/volt    # generated by volt\n$ rm -rf ~/volt/repos/localhost/my/vimdir/.netrwhist   # netrw plugin history file\n$ ...\n\nMove to profile directory if you have vimrc/gvimrc\n$ mv ~/volt/repos/localhost/my/vimdir/vimrc ~/volt/repos/default/vimrc.vim\n$ mv ~/volt/repos/localhost/my/vimdir/gvimrc ~/volt/repos/default/gvimrc.vim\n\nInstall vimdir as a vim plugin\n$ volt get localhost/my/vimdir\n```\n\n\n## :tada: Contribution\n\nIf you want to contribute to volt, you can setup like:\n\n```\n$ make precompile   # this speeds up 'go build'\n$ vim ...           # edit sources\n$ make\n$ bin/volt ...      # run volt command\n```"
}
