{
  "name": "hpack",
  "full_name": "hpack",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Modern format for Haskell packages",
  "license": "MIT",
  "homepage": "https://github.com/sol/hpack",
  "versions": {
    "stable": "0.35.3",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/sol/hpack/archive/0.35.3.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "8b8b0df5a2db1c0b1a4219876868e6a66bec382647c37fa78da922090aa7a227"
    },
    "head": {
      "url": "https://github.com/sol/hpack.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/hpack/blobs/sha256:d81f794e8730a80629948005fc985b01847da13297ce5b23b123bfa4fc59b9ce",
          "sha256": "d81f794e8730a80629948005fc985b01847da13297ce5b23b123bfa4fc59b9ce"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/hpack/blobs/sha256:0c746217d349a82f42d23383a1bfae0434ee3f2439c0817a551d497810c9b7c4",
          "sha256": "0c746217d349a82f42d23383a1bfae0434ee3f2439c0817a551d497810c9b7c4"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/hpack/blobs/sha256:12438c63484f81d9805b23eeb16fc82c386540904b748b43537deded6593936d",
          "sha256": "12438c63484f81d9805b23eeb16fc82c386540904b748b43537deded6593936d"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/hpack/blobs/sha256:abae0a154914ee76d8af87a7a7286a44d04d5c29ce608ed543d2788328a0144d",
          "sha256": "abae0a154914ee76d8af87a7a7286a44d04d5c29ce608ed543d2788328a0144d"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/hpack/blobs/sha256:52b3371fbf389889306fff7efb738167fbce2396e59544edf460286223bd28f2",
          "sha256": "52b3371fbf389889306fff7efb738167fbce2396e59544edf460286223bd28f2"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/hpack/blobs/sha256:f2f056f2d451b394d2bc334ec01d885bc4b6e8372454108f439e3df71dfe199e",
          "sha256": "f2f056f2d451b394d2bc334ec01d885bc4b6e8372454108f439e3df71dfe199e"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/hpack/blobs/sha256:dacefe1df0ca943d96aa0931518ded77bbf793a918ee70db845dc3591a1b5909",
          "sha256": "dacefe1df0ca943d96aa0931518ded77bbf793a918ee70db845dc3591a1b5909"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cabal-install",
    "ghc"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "zlib"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/hpack.rb",
  "ruby_source_checksum": {
    "sha256": "afaeac76ec04c00efe5561f1d968faeb4048929e718e5063a9e3114f25e76dc8"
  },
  "date_added": "2019-12-20T09:48:25-05:00",
  "readme": "[![Hackage version](https://img.shields.io/hackage/v/hpack.svg?label=Hackage&color=informational)](http://hackage.haskell.org/package/hpack)\n[![Stackage LTS version](https://www.stackage.org/package/hpack/badge/lts?label=Stackage)](https://www.stackage.org/package/hpack)\n[![hpack on Stackage Nightly](https://stackage.org/package/hpack/badge/nightly)](https://stackage.org/nightly/package/hpack)\n\n# hpack: A modern format for Haskell packages\n\nHpack is a format for Haskell packages.  It is a modern alternative to the\nCabal package format and follows different design principles.\n\n\n## Design principles\nThe guiding design principles for Hpack are:\n\n* Don't require the user to state the obvious, make sensible assumptions by\n  default\n* Give the user 100% control when needed\n* Don't require the user to repeat things, facilitate [DRY](https://en.wikipedia.org/wiki/Don't_repeat_yourself)ness\n\n## Tool integration\n\nHpack packages are described in a file named `package.yaml`.  Both\n[`cabal2nix`](https://hackage.haskell.org/package/cabal2nix) and\n[`stack`](https://haskellstack.org/) support `package.yaml` natively.  For\nother build tools the `hpack` executable can be used to generate a `.cabal`\nfile from `package.yaml`.\n\n## There is no user guide\n\nThere is reference documentation below, but introductory documentation is still\nlacking. For the time being, take a look at the slides from my talk about Hpack\nat the Singapore Haskell meetup: http://typeful.net/talks/hpack\n\n## Examples\n\n * Given this [package.yaml](https://github.com/sol/hpack/blob/master/package.yaml) running `hpack` will generate [hpack.cabal](https://github.com/sol/hpack/blob/master/hpack.cabal)\n * Given this [package.yaml](https://github.com/zalora/getopt-generics/blob/master/package.yaml) running `hpack` will generate [getopt-generics.cabal](https://github.com/zalora/getopt-generics/blob/master/getopt-generics.cabal)\n * Given this [package.yaml](https://github.com/hspec/sensei/blob/master/package.yaml) running `hpack` will generate [sensei.cabal](https://github.com/hspec/sensei/blob/master/sensei.cabal)\n * Given this [package.yaml](https://github.com/haskell-compat/base-orphans/blob/master/package.yaml) running `hpack` will generate [base-orphans.cabal](https://github.com/haskell-compat/base-orphans/blob/master/base-orphans.cabal)\n\n## Documentation\n\n<!--ts-->\n   * [hpack: A modern format for Haskell packages](#hpack-a-modern-format-for-haskell-packages)\n      * [Design principles](#design-principles)\n      * [Tool integration](#tool-integration)\n      * [There is no user guide](#there-is-no-user-guide)\n      * [Examples](#examples)\n      * [Documentation](#documentation)\n         * [Handling of Paths_ modules](#handling-of-paths_-modules)\n         * [Quick-reference](#quick-reference)\n            * [Top-level fields](#top-level-fields)\n            * [cabal-version](#cabal-version)\n            * [Defaults](#defaults)\n            * [Custom setup](#custom-setup)\n            * [Common fields](#common-fields)\n            * [Library fields](#library-fields)\n            * [Executable fields](#executable-fields)\n            * [Test fields](#test-fields)\n            * [Benchmark fields](#benchmark-fields)\n            * [Flags](#flags)\n            * [Dependencies](#dependencies)\n            * [Conditionals](#conditionals)\n         * [File globbing](#file-globbing)\n         * [Passing things to Cabal verbatim](#passing-things-to-cabal-verbatim)\n            * [Objects](#objects)\n            * [Strings](#strings)\n            * [Lists of objects and strings](#lists-of-objects-and-strings)\n         * [Not repeating yourself](#not-repeating-yourself)\n      * [Vim integration](#vim-integration)\n      * [Stack support](#stack-support)\n      * [Binaries for use on Travis CI](#binaries-for-use-on-travis-ci)\n\n<!-- Added by: sol, at: Fri 19 Feb 2021 10:31:47 PM +07 -->\n\n<!--te-->\n\n### Handling of `Paths_` modules\n\nCabal generates a `Paths_` module for every package.  By default Hpack adds\nthat module to `other-modules` when generating a `.cabal` file.  This is\nsometimes useful and most of the time not harmful.\n\nHowever, there are situations when this can lead to compilation errors (e.g\nwhen using a custom `Prelude`).\n\nTo prevent Hpack from adding the `Paths_` module to `other-modules` add the\nfollowing to `package.yaml`:\n\n```yaml\nlibrary:\n  when:\n  - condition: false\n    other-modules: Paths_name # substitute name with the package name\n```\n\n### Quick-reference\n\n#### Top-level fields\n\n| Hpack | Cabal | Default | Notes | Example | Since |\n| --- | --- | --- | --- | --- | --- |\n| `spec-version` |  | | The minimum version of `hpack` that is required to parse this package description.  | `spec-version: 0.30.0` | `0.30.0` |\n| `name` | · | | | | |\n| `version` | · | `0.0.0` | | | |\n| `synopsis` | · | | | | |\n| `description` | · | | | | |\n| `category` | · | | | | |\n| `stability` | · | | | | |\n| `homepage` | · | If `github` given, `<repo>#readme` | | | |\n| `bug-reports` | · | If `github` given, `<repo>/issues` | | | |\n| `author` | · | | May be a list | | |\n| `maintainer` | · | `author` | May be a list | | |\n| `copyright` | · | | May be a list | |\n| `license` | · | Inferred from `license-file` | Both [SPDX license expressions](https://spdx.org/licenses/) and traditional Cabal license identifiers are accepted. | `license: MIT` | SPDX: `0.29.0` |\n| `license-file` | `license-file` or `license-files` | `LICENSE` if file exists | May be a list | | |\n| `tested-with` | · | | May be a list (since `0.34.3`) | | |\n| `build-type` | · | `Simple`, or `Custom` if `custom-setup` exists | Must be `Simple`, `Configure`, `Make`, or `Custom` | | |\n| `extra-source-files` | · | | Accepts [glob patterns](#file-globbing) | | |\n| `extra-doc-files` | · | | Accepts [glob patterns](#file-globbing) | | `0.21.2` |\n| `data-files` | · | | Accepts [glob patterns](#file-globbing) | | |\n| `data-dir` | · | | | | |\n| `github` | `source-repository head` | | Accepts `owner/repo` or `owner/repo/subdir` | `github: foo/bar` |\n| `git`    | `source-repository head` | | No effect if `github` given | `git: https://my.repo.com/foo` | |\n| `custom-setup` | · | | See [Custom setup](#custom-setup) | | |\n| `flags`  | `flag <name>` | | Map from flag name to flag (see [Flags](#flags)) | | |\n| `library` | · | | See [Library fields](#library-fields) | | |\n| `internal-libraries` | `library <name>` | | Map from internal library name to a dict of [library fields](#library-fields) and global top-level fields. | | `0.21.0` |\n| `executables` | `executable <name>` | | Map from executable name to executable (see [Executable fields](#executable-fields)) | | |\n| `executable` | `executable <package-name>` | | Shortcut for `executables: { package-name: ... }` | | `0.18.0` |\n| `tests` | `test-suite <name>` | | Map from test name to test (see [Test fields](#test-fields)) | | |\n| `benchmarks` | `benchmark <name>` | | Map from benchmark name to benchmark (see [Benchmark fields](#benchmark-fields)) | | |\n| `defaults` | | | See [Defaults](#defaults), may be a list | | |\n\n#### cabal-version\n\nHpack does not require you to specify a `cabal-version` manually.  When\ngenerating a `.cabal` file, Hpack sets the `cabal-version` automatically based\non the features that are used.\n\nIf you want to override this behavior you can use `verbatim` to set\n`cabal-version` manually, e.g.:\n\n```yaml\nverbatim:\n  cabal-version: 2.2\n```\n\n#### Defaults\n\nHpack allows the inclusion of [common fields](#common-fields) from a file on\nGitHub or a local file.\n\nTo use this feature a user must specify a GitHub repository, Git reference and\na path to a file within that repository; alternatively, a path to the local\nfile must be given.\n\nExample:\n\n```yaml\ndefaults:\n  github: sol/hpack-template\n  ref: 2017\n  path: defaults.yaml\n```\n\nThis will include all common fields from\nhttps://github.com/sol/hpack-template/blob/2017/defaults.yaml into the package\nspecification.\n\n| Field | Default | Notes | Example |\n| ----- | ------- | ----- | ------- |\n| `github` | For github defaults. | Accepts `<owner>/<repo>` | `github: sol/hpack-template` |\n| `ref` | | For github defaults. | `ref: 2017` |\n| `path` | `.hpack/defaults.yaml` | For github defaults. A relative path to a file within the repository, path segments are separated by `/` and must not contain `:` and `\\`. | `path: defaults.yaml` |\n| `local` | | For local defaults. New in `0.26.0`. | |\n\nExactly one of `github` and `local` must be given in a `defaults` section.\n\nHpack supports shorthand syntax for specifying `github` and `ref` as a string:\n\n```yaml\ndefaults: sol/hpack-template@2017\n```\n\nThis is equivalent to:\n\n```yaml\ndefaults:\n  github: sol/hpack-template\n  ref: 2017\n```\n\n**Note:** Hpack caches downloaded files under\n`~/.hpack/defaults/<owner>/<repo>/<path>`.  Once downloaded, a file is reused\nfrom the cache.  If the content on GitHub changes the file is not updated.  For\nthis reason it is recommended to only use tags as Git references.\n\n * If a defaults file has changed on GitHub and you want to use the latest\n   version, then you have to delete that file from the cache manually.\n\n * If you want to prevent Hpack from accessing the network to download a\n   defaults file, then you can achieve this by adding that file to the cache\n   manually.\n\n#### Custom setup\n\n| Hpack | Cabal | Default | Notes | Example |\n| --- | --- | --- | --- | --- |\n| `dependencies` | `setup-depends` | | Implies `build-type: Custom` | |\n\n#### Common fields\n\nThese fields can be specified top-level or on a per section basis; top-level\nvalues are merged with per section values.\n\n| Hpack | Cabal | Default | Notes |\n| --- | --- | --- | --- |\n| `buildable` | · | | Per section takes precedence over top-level |\n| `source-dirs` | `hs-source-dirs` | | |\n| `default-extensions` | · | | |\n| `language` | `default-language` | `Haskell2010` | Also accepts `Haskell98` or `GHC2021`. Per section takes precedence over top-level |\n| `other-extensions` | · | | |\n| `ghc-options` | · | | |\n| `ghc-prof-options` | · | | |\n| `ghc-shared-options` | · | | |\n| `ghcjs-options` | · | | |\n| `cpp-options` | · | | |\n| `cc-options` | · | | |\n| `c-sources` | · | | Accepts [glob patterns](#file-globbing) |\n| `cxx-options` | · | | |\n| `cxx-sources` | · | | Accepts [glob patterns](#file-globbing) |\n| `js-sources` | · | | Accepts [glob patterns](#file-globbing) |\n| `extra-lib-dirs` | · | | |\n| `extra-libraries` | · | | |\n| `include-dirs` | · | | |\n| `install-includes` | · | | |\n| `frameworks` | · | | |\n| `extra-frameworks-dirs` | · | | |\n| `ld-options` | · | | |\n| `dependencies` | `build-depends` | | See [Dependencies](#dependencies) |\n| `pkg-config-dependencies` | `pkgconfig-depends` | | |\n| `build-tools` | [`build-tools`](https://www.haskell.org/cabal/users-guide/developing-packages.html#pkg-field-build-tools) and/or [`build-tool-depends`](https://www.haskell.org/cabal/users-guide/developing-packages.html#pkg-field-build-tool-depends) | | |\n| `system-build-tools` | `build-tools` | | A set of system executables that have to be on the `PATH` to build this component |\n| `when` | | | Accepts a list of conditionals (see [Conditionals](#conditionals)) |\n\n**`build-tools`: A set of Haskell executables that are needed to build this component**\n\nEach element consists of a *name* and an optional *version constraint*.\n\nThe name can be specified in two ways:\n\n1. Qualified: `<package>:<executable>`\n1. Unqualified: `<executable>`\n\nA qualified name refers to an executable named `<executable>` from a\npackage named `<package>`.\n\nAn unqualified name either refers to an executables in the same package, or if\nno such executable exists it is desugared to `<executable>:<executable>`.\n\n`build-tools` can be specified as a list or a mapping.\n\nExamples:\n```yaml\nbuild-tools:\n  - alex\n  - happy:happy\n  - hspec-discover == 2.*\n```\n```\nbuild-tools:\n  alex: 3.2.*\n  happy:happy: 1.19.*\n  hspec-discover: 2.*\n```\n\nWhen generating a `.cabal` file each element of `build-tools` is either added\nto `build-tools` or `build-tool-depends`.\n\nIf the name refers to one of `alex`, `c2hs`, `cpphs`, `greencard`, `haddock`,\n`happy`, `hsc2hs` or `hscolour` then the element is added to `build-tools`,\notherwise it is added to `build-tool-depends`.\n\nThis is done to allow compatibility with a wider range of `Cabal` versions.\n\n**Note:** Unlike `Cabal`, Hpack does not accept system executables as\n`build-tools`.  Use `system-build-tools` if you need this.\n\n#### Library fields\n\n| Hpack | Cabal | Default | Notes |\n| --- | --- | --- | --- |\n| `exposed` | · | | |\n| `visibility` | · | | |\n| `exposed-modules` | · | All modules in `source-dirs` less `other-modules` less any modules mentioned in `when` | |\n| `generated-exposed-modules` | | | Added to `exposed-modules` and `autogen-modules`. Since `0.23.0`.\n| `other-modules` | · | Outside conditionals: All modules in `source-dirs` less `exposed-modules` less any modules mentioned in `when`. Inside conditionals, and only if `exposed-modules` is not specified inside the conditional: All modules in `source-dirs` of the conditional less any modules mentioned in `when` of the conditional | |\n| `generated-other-modules` | | | Added to `other-modules` and `autogen-modules`. Since `0.23.0`.\n| `reexported-modules` | · | | |\n| `signatures` | · | | |\n\n#### Executable fields\n\n| Hpack | Cabal | Default | Notes |\n| --- | --- | --- | --- |\n| `main` | `main-is` | | |\n| `other-modules` | · | All modules in `source-dirs` less `main` less any modules mentioned in `when` | |\n| `generated-other-modules` | | | Added to `other-modules` and `autogen-modules`. Since `0.23.0`.\n\n#### Test fields\n\n| Hpack | Cabal | Default | Notes |\n| --- | --- | --- | --- |\n| | `type` | `exitcode-stdio-1.0` | |\n| `main` | `main-is` | | |\n| `other-modules` | · | All modules in `source-dirs` less `main` less any modules mentioned in `when` | |\n| `generated-other-modules` | | | Added to `other-modules` and `autogen-modules`. Since `0.23.0`.\n\n#### Benchmark fields\n\n| Hpack | Cabal | Default | Notes |\n| --- | --- | --- | --- |\n| | `type` | `exitcode-stdio-1.0` | |\n| `main` | `main-is` | | |\n| `other-modules` | · | All modules in `source-dirs` less `main` less any modules mentioned in `when` | |\n| `generated-other-modules` | | | Added to `other-modules` and `autogen-modules`. Since `0.23.0`.\n\n#### Flags\n\n| Hpack | Cabal | Default | Notes |\n| --- | --- | --- | --- |\n| `description` | · | | Optional |\n| `manual` | · | | Required (unlike Cabal) |\n| `default` | · | | Required (unlike Cabal) |\n\n#### Dependencies\n\nDependencies can be specified as either a list or an object. These are\nequivalent:\n\n```\n  dependencies:\n    - base >= 4.10.1.0\n    - containers >= 5.10\n```\n\n```\n  dependencies:\n    base: \">= 4.10.1.0\"\n    containers: \">= 5.10\"\n```\n\nThe individual dependencies can also be specified as an object:\n\n```\n  dependencies:\n    - name: base\n      version: \">= 4.10.1.0\"\n    - name: containers\n```\n\nYou can use objects at both levels, or have a mix of valid ways to\nspecify the individual dependencies:\n\n```\n  dependencies:\n    base:\n      version: \">= 4.10.1.0\"\n    # If you don't give a version, it defaults to 'any version'.\n    containers: {}\n    transformers: \">= 0.5.5.0 && < 5.6\"\n```\n\nIndividual dependencies as objects are only supported from version\n`0.31.0`.\n\nWhen a dependency is specified as an object, you can use the `mixin`\nfield to control what modules from the dependency your program will\nsee and how its signatures are filled in:\n\n```\n  dependencies:\n    # This gives you a shorter name to import from, and hides the other modules.\n    - name: containers\n      mixin:\n        - (Data.Map.Lazy as Map)\n    # This hides the System.IO.Unsafe module, and leaves the other modules unchanged.\n    - name: base\n      mixin:\n        - hiding (System.IO.Unsafe)\n    # This exposes only the listed modules - you won't be able to import the others!\n    - name: lens\n      mixin:\n        - (Control.Lens, Data.Set.Lens, Data.Map.Lens as MapL)\n    # This will rename the module, and expose the others.\n    - name: transformers\n      mixin:\n        - hiding (Control.Monad.Trans.State.Lazy)\n        - (Control.Monad.Trans.State.Lazy as State)\n```\n\nFor more information, see the\n[Cabal documentation](https://cabal.readthedocs.io/en/latest/developing-packages.html#pkg-field-mixins).\n\nHint: you can hide the `Prelude` module from `base`, and then rename\nan alternative prelude to `Prelude` so that it doesn't need to be\nimported!\n\n`mixin` was added in version `0.31.0`.\n\n#### Conditionals\n\nConditionals with no else branch:\n\n- Must have a `condition` field\n- May have any number of other fields\n\nFor example,\n\n    when:\n      - condition: os(darwin)\n        extra-lib-dirs: lib/darwin\n\nbecomes\n\n    if os(darwin)\n      extra-lib-dirs:\n        lib/darwin\n\nConditionals with an else branch:\n\n- Must have a `condition` field\n- Must have a `then` field, itself an object containing any number of other fields\n- Must have a `else` field, itself an object containing any number of other fields\n\nFor example,\n\n    when:\n      - condition: flag(fast)\n        then:\n          ghc-options: -O2\n        else:\n          ghc-options: -O0\n\nbecomes\n\n    if flag(fast)\n      ghc-options: -O2\n    else\n      ghc-options: -O0\n\n**Note:** Conditionals with `condition: false` are omitted from the generated\n`.cabal` file.\n\n### File globbing\n\nAt place where you can specify a list of files you can also use glob patterns.\nGlob patterns and ordinary file names can be freely mixed, e.g.:\n\n```yaml\nextra-source-files:\n  - static/*.js\n  - static/site.css\n```\n\nGlob patterns are expanded according to the following rules:\n\n - `?` and `*` are expanded according to POSIX (they match arbitrary\n   characters, except for directory separators)\n - `**` is expanded in a `zsh`-like fashion (matching across directory\n   separators)\n - `?`, `*` and `**` do not match a `.` at the beginning of a file/directory\n\n### Passing things to Cabal verbatim\n\n(since `hpack-0.24.0`)\n\nIn cases where Hpack does not (yet!) support what you want to do, you can use\nthe `verbatim` field to pass things to Cabal verbatim.\nIt is recognized top-level, in sections, and in conditionals.\n\n`verbatim` accepts an object or a string (or a list of objects and strings).\n\n***Disclaimer:*** The content of `verbatim` fields are merged into the\ngenerated `.cabal` file as a final step, after Hpack is done with most of its\nwork.  Before that final step Hpack does not look at any `verbatim` fields.\nConsequently, the content of a `verbatim` field does not affect any other\nfields that are populated by Hpack.  As an example, if you use `verbatim` to\noverride `hs-source-dirs`, the overridden information will not be used when\nHpack infers `exposed-modules` or `other-modules`.\n\n#### Objects\n\nWhen an object is used:\n\n - field values can be strings, numbers, booleans, or `null`\n - existing `.cabal` fields can be overridden\n - existing `.cabal` fields can be removed by overriding with `null`\n - additional `.cabal` fields can be added\n\n Example:\n\n```yaml\ntests:\n  spec:\n    main: Spec.hs\n    source-dirs: test\n    verbatim:\n      type: detailed-0.9     # change type from exitcode-stdio-1.0\n      default-language: null # remove default-language\n```\n\n#### Strings\n\nWhen a string is used:\n\n - it will be added verbatim, indented to match the indentation of the surrounding context.\n - all existing `.cabal` fields are left untouched\n\nExample:\n\n```yaml\nverbatim: |\n  build-tool-depends:\n      hspec-discover:hspec-discover == 2.*\n```\n\n#### Lists of objects and strings\n\nYou can combine the use of objects and strings to gain more fine-grained\ncontrol, e.g. you can remove an existing field with an object and then include\nit with a string so that you have 100% control over the layout.\n\n\n```yaml\nverbatim:\n  - build-depends: null\n  - |\n    -- let's use Cabal 5.0 dependency syntax\n    build-depends:\n      hspec: [2-3[\n```\n\n### Not repeating yourself\n\nIt is possible to use YAML [anchors][yaml-anchor] (`&`), [aliases][yaml-alias]\n(`*`) and [merge keys][yaml-merge] (`<<`) to define fields and reference them\nlater.\n\n[yaml-anchor]: http://yaml.org/spec/1.1/#anchor/syntax\n[yaml-alias]: http://yaml.org/spec/1.1/#alias/syntax\n[yaml-merge]: http://yaml.org/type/merge.html\n\n```yaml\nexecutables:\n  my-exe-1: &my-exe\n    main: my-exe-1.hs\n    dependencies: [base, my-lib]\n    ghc-options: [-threaded]\n  my-exe-2:\n    <<: *my-exe\n    main: my-exe-2.hs\n```\n\nFields that start with an underscore are ignored by `hpack`, so they can be\nused to declare aliases:\n\n```yaml\n_exe-ghc-options: &exe-ghc-options\n  - -threaded\n  - -rtsopts\n\nexecutables:\n  my-exe-1:\n    ghc-options: *exe-ghc-options\n```\n\nIt is also possible to use the `!include` directive:\n\n```yaml\n# ...\n\ntests:\n  hlint: !include \"../common/hlint.yaml\"\n```\n\n`hlint.yaml`:\n\n```yaml\nsource-dirs: test\nmain: hlint.hs\ndependencies: [base, hlint]\n```\n\nThis can also be used to provide entire libraries of snippets:\n\n```yaml\n_common/lib: !include \"../common/lib.yaml\"\n\nname: example1\nversion: '0.1.0.0'\nsynopsis: Example\n<<: *legal\n\n<<: *defaults\n\nlibrary:\n  source-dirs: src\n\ntests:\n  hlint: *test_hlint\n```\n\nlib.yaml:\n\n```yaml\n- &legal\n  maintainer: Some One <someone@example.com>\n  copyright: (c) 2017 Some One\n  license: BSD3\n\n- &defaults\n  dependencies:\n    - base\n    - containers\n  ghc-options:\n    - -Wall\n    - -Werror\n\n- &test_hlint\n  source-dirs: test\n  main: hlint.hs\n  dependencies: [hlint]\n```\n\n## Vim integration\n\nTo run `hpack` automatically on modifications to `package.yaml` add the\nfollowing to your `~/.vimrc`:\n\n```vim\nautocmd BufWritePost package.yaml call Hpack()\n\nfunction Hpack()\n  let err = system('hpack ' . expand('%'))\n  if v:shell_error\n    echo err\n  endif\nendfunction\n```\n\n## Stack support\n\n[Stack](https://haskellstack.org) has built-in support for Hpack.\nIf you are using Stack you can use `package.yaml` instead of a `.cabal` file.  No additional\nsteps are required.\n\n## Binaries for use on Travis CI\n\nYou can get binaries for use on Travis CI with:\n\n```\ncurl -sSL https://github.com/sol/hpack/raw/master/get-hpack.sh | bash\n```\n\n(both Linux and OS X are supported)"
}
