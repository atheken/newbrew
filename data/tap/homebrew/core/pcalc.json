{
  "name": "pcalc",
  "full_name": "pcalc",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Calculator for those working with multiple bases, sizes, and close to the bits",
  "license": "GPL-3.0-or-later",
  "homepage": "https://github.com/alt-romes/programmer-calculator",
  "versions": {
    "stable": "3.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/alt-romes/programmer-calculator/archive/v3.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "6ede71e1442710e73edb99eb1742452e67ad5095cad328526633722850aa1136"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pcalc/blobs/sha256:8726e03985b7241593b16d00eafd49b008e479058d3bf984da595c3e4cc2195a",
          "sha256": "8726e03985b7241593b16d00eafd49b008e479058d3bf984da595c3e4cc2195a"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pcalc/blobs/sha256:8cb160f96c00151800102a58e493b8e394bfdaea743329ca7af245502185bdf5",
          "sha256": "8cb160f96c00151800102a58e493b8e394bfdaea743329ca7af245502185bdf5"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pcalc/blobs/sha256:ba2a72db4f367a3ae6dceef1eba8eb5e9ea84586acef55d163d53503a3ffddb1",
          "sha256": "ba2a72db4f367a3ae6dceef1eba8eb5e9ea84586acef55d163d53503a3ffddb1"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pcalc/blobs/sha256:7929c84fa052dc93f47b5dfe37d4332ff916e2c300739b08f721e72bea265a86",
          "sha256": "7929c84fa052dc93f47b5dfe37d4332ff916e2c300739b08f721e72bea265a86"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pcalc/blobs/sha256:2259c04f3360d9bb7c26693fe47651972408c21d2b18a7760ecc218d2e2a33ab",
          "sha256": "2259c04f3360d9bb7c26693fe47651972408c21d2b18a7760ecc218d2e2a33ab"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pcalc/blobs/sha256:bfef357df427a5d36419bee76ac2a65ce36e191c354d9d773f53b3ed6fd7058f",
          "sha256": "bfef357df427a5d36419bee76ac2a65ce36e191c354d9d773f53b3ed6fd7058f"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pcalc/blobs/sha256:3bfe8638f58d9b4a6b71c50f08d37b6bf10e773ff1d43946879269cf00df69d4",
          "sha256": "3bfe8638f58d9b4a6b71c50f08d37b6bf10e773ff1d43946879269cf00df69d4"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "ncurses"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/pcalc.rb",
  "ruby_source_checksum": {
    "sha256": "e79a5faaba8db30b130ba81b6461a6d1e7808dbebde9f164b05b69c63365e4f7"
  },
  "date_added": "2021-02-17T14:39:30+00:00",
  "readme": "## Programmer calculator\r\n\r\nThe programmer calculator is a simple terminal tool designed to give maximum efficiency and flexibility to the programmer working with: \r\n\r\n* binary, hexadecimal and decimal representations at the same time\r\n* bitwise operations\r\n* various operand sizes *(16bits, 32bits, 8bits, etc)*\r\n\r\nand who likes:\r\n\r\n* a clear, simple and customizable interface\r\n* open source software\r\n* terminal/cli tools\r\n\r\n![Screen](https://raw.githubusercontent.com/alt-romes/programmer-calculator/master/assets/v2.0-ss.png)\r\nThe above picture depicts `pcalc` without colors, and below is an example of `pcalc` with colors enabled (`--colors`) (which change depending on the terminal profile colors)\r\n![Screen-Colored](https://raw.githubusercontent.com/alt-romes/programmer-calculator/colors/assets/v2.0-ss-colors.png)\r\n\r\n## Making of\r\n\r\nThe idea was born while developing a Nintendo Gameboy Emulator. Romes - the pitcher - found that the tools given online were clunky and did not allow for \"nice multitasking\"\r\n\r\nWith the constant need to visualize and manipulate bits, it became evident that a better solution had to come to life\r\n\r\n## Installation\r\n\r\n#### Homebrew\r\n\r\nInstall from the homebrew official packages\r\n```\r\nbrew install pcalc\r\n```\r\n\r\n#### Arch Based Distros\r\n\r\nInstall from AUR\r\n```\r\nyay -S programmer-calculator\r\n```\r\n\r\n#### Building from Source (alternative)\r\n\r\n##### Prerequisites:\r\nTo build from source you need `gcc`, `ncurses`, and the source files. \r\n**If you don't have ncurses, please install it (i.e. with your system's package manager) first.**\r\n*(To install ncurses in Debian based distros run `sudo apt-get install libncurses5-dev libncursesw5-dev`)*\r\n\r\n##### Building:\r\n\r\nFirst, clone the repository and change directory to it\r\n```\r\ngit clone https://github.com/alt-romes/programmer-calculator ; cd programmer-calculator\r\n```\r\n\r\nThen, compile the code into an executable file and install it (installs in /usr/local/bin)\r\n```\r\nsudo make install\r\n```\r\n\r\nConversely, if you ever want to uninstall, you can run:\r\n```\r\nsudo make uninstall\r\n```\r\n\r\n#### Updating\r\nEither re-build from source, or, using brew do\r\n```\r\nbrew update\r\n```\r\nfollowed by\r\n```\r\nbrew upgrade pcalc\r\n```\r\n\r\n#### Running\r\n\r\nJust run the programmer calculator program\r\n```\r\npcalc\r\n```\r\n\r\n## Features\r\n\r\n### Usage\r\n\r\nThere are various ways to insert values/operators, see the example `2 + 2` below:\r\n\r\n* `2`, followed by `+`, followed by `2`\r\n* `2`, followed by `+2`\r\n* `2+`, followed by `2`\r\n* `2+2` (or i.e. `2 + 2`)\r\n\r\n#### Inline Math\r\n\r\nOperator precedence and parenthesis for grouping is used.\r\n\r\n`2+2*3` evaluates to `8` and `(2+2)*3` evaluates to `12`\r\n\r\n\r\n### Hex + Binary + Decimal\r\n\r\nAll three number representations are available at the same time, you can insert `0xff + 0b101101 - 5` directly onto the calculator\r\n\r\n\r\n### Operand Size\r\n\r\nBy default, 64 bits are used for arithmetic, however, when working with bits, quite often we want to work with less. With this calculator you can change the amount of bits used. the number displayed will be unsigned\r\n\r\nTo use 16 bits instead, type `16bit` (bits will also work)\r\n\r\nTo use 8 bits, type `8bit`\r\n\r\nTo use 0 < n <= 64 bits, type `nbit`\r\n\r\n\r\n### Customizing Interface\r\n\r\nWhile running the calculator, you can type *what you see* for it to appear/disappear:\r\n\r\n`history` to toggle the history\r\n`decimal` to toggle the decimal representation\r\n`binary` to toggle the binary representation\r\n`hex` to toggle the hexadecimal representation\r\n`operation` to toggle the operation display\r\n\r\nAdditionally, the interface colors can be toggled on and off.\r\n\r\nTo set a default interface, define an alias for the program with the desired hidden options\r\n```\r\nalias pcalc='pcalc -ibxdosn'\r\n```\r\ni: history, b: binary, x: hex, d: decimal, o: operation, s: symbols, n: no colors\r\n\r\nYou can also use the long options to hide parts: `--history`, `--decimal`, etc.\r\n\r\n\r\n### Operations\r\n```\r\nADD  +    SUB  -    MUL  *    DIV  /\r\nMOD  %    AND  &    OR   |    NOR  $\r\nXOR  ^    NOT  ~    SL   <    SR   >\r\nRL   :    RR   ;    2's  _    SE   @\r\n```\r\n\r\n* ADD: `a + b` arithmetic addition\r\n* SUB: `a - b` arithmetic subtraction\r\n* MUL: `a * b` arithmetic multiplication\r\n* DIV: `a / b` arithmetic integer division\r\n* MOD: `a % b` modulus from the division\r\n* AND: `a & b` bit-wise AND operation\r\n* OR : `a | b` bit-wise OR operation\r\n* NOR: `a $ b` bit-wise NOR operation : opposite of OR\r\n* XOR: `a ^ b` bit-wise XOR operation : exclusive OR\r\n* NOT: `~a`    bit-wise NOT operation : change all bits of a, 0's into 1's and 1's into 0's\r\n* SL : `a < b` bit-wise SHIFT-LEFT operation : shift a left b number of times\r\n* SR : `a > b` bit-wise SHIFT-RIGHT operation : shift a right b number of times\r\n* RL : `a : b` bit-wise ROTATE-LEFT operation : rotate a left b number of times\r\n* RR : `a ; b` bit-wise ROTATE-RIGHT operation : rotate a right b number of times\r\n* 2's: `_a`    2's complement operation : 2's complement of a (usually is the symmetric of a)\r\n* SE : `@a`    swap endianness : swap the byte order of a (uses the number of bits set by `bit` to determine the amount of bits swapped)\r\n\r\n\r\n## Contributing\r\n\r\nPlease reference [Contributing](https://github.com/alt-romes/programmer-calculator/blob/master/CONTRIBUTING.md)\r\n\r\n\r\n---\r\n\r\n#### example usage in iterm panel\r\n\r\n![Panels](https://raw.githubusercontent.com/alt-romes/programmer-calculator/master/assets/panels.png)\r\n\r"
}
