{
  "name": "tinysearch",
  "full_name": "tinysearch",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Tiny, full-text search engine for static websites built with Rust and Wasm",
  "license": "Apache-2.0 or MIT",
  "homepage": "https://github.com/tinysearch/tinysearch",
  "versions": {
    "stable": "0.8.2",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/tinysearch/tinysearch/archive/refs/tags/v0.8.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "103214d77f0624bbb7e396667136156fdb8c8c7abeb6860adb231bf2a00b256d"
    },
    "head": {
      "url": "https://github.com/tinysearch/tinysearch.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tinysearch/blobs/sha256:d3112dab46ff4f6ebfcd130e186cca018d7e72cf503a6a74b8e632dfe30ff147",
          "sha256": "d3112dab46ff4f6ebfcd130e186cca018d7e72cf503a6a74b8e632dfe30ff147"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tinysearch/blobs/sha256:e6419da17e1e7c0f7bc74eeefd60d9fec429f9a351bfa6732336207da27ba62e",
          "sha256": "e6419da17e1e7c0f7bc74eeefd60d9fec429f9a351bfa6732336207da27ba62e"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tinysearch/blobs/sha256:1a3f5895d2f977f0c32c7a80798922f56ea1f628bb6522de0243a74ef9ee6635",
          "sha256": "1a3f5895d2f977f0c32c7a80798922f56ea1f628bb6522de0243a74ef9ee6635"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tinysearch/blobs/sha256:149fcc1be09119c692b20381ed2646170c004909a1998ddab8b5e451d19e6c0c",
          "sha256": "149fcc1be09119c692b20381ed2646170c004909a1998ddab8b5e451d19e6c0c"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tinysearch/blobs/sha256:bb5e206aff6a7ffbf2bf1da5dbb9907e6e72873ad507059f53699984080e6fe6",
          "sha256": "bb5e206aff6a7ffbf2bf1da5dbb9907e6e72873ad507059f53699984080e6fe6"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tinysearch/blobs/sha256:0a256b304d49a871b20915721fde4aea47ef132afa5cd537c6bfba36b8ff24d9",
          "sha256": "0a256b304d49a871b20915721fde4aea47ef132afa5cd537c6bfba36b8ff24d9"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tinysearch/blobs/sha256:741bdce133c7ac5a2fecddb639fa17b3d7b11c3a2adda9f7998bf69e5b2376ce",
          "sha256": "741bdce133c7ac5a2fecddb639fa17b3d7b11c3a2adda9f7998bf69e5b2376ce"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [
    "rustup-init",
    "wasm-pack"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/tinysearch.rb",
  "ruby_source_checksum": {
    "sha256": "4bb90962a6fa293eaf11b53274ebd2ab01b55387336219d348f392a25561a11c"
  },
  "date_added": "2022-05-24T07:18:59+00:00",
  "readme": "# tinysearch\n\n![Logo](logo.svg)\n\n![CI](https://github.com/mre/tinysearch/workflows/CI/badge.svg)\n\ntinysearch is a lightweight, fast, full-text search engine. It is designed for\nstatic websites.\n\ntinysearch is written in Rust, and then compiled to WebAssembly to run in a\nbrowser.\\\nIt can be used together with static site generators such as\n[Jekyll](https://jekyllrb.com/), [Hugo](https://gohugo.io/),\n[Zola](https://www.getzola.org/),\n[Cobalt](https://github.com/cobalt-org/cobalt.rs), or\n[Pelican](https://getpelican.com).\n\n![Demo](tinysearch.gif)\n\n## Is it tiny?\n\nThe test index file of my blog with around 40 posts creates a WASM payload of\n99kB (49kB gzipped, 40kB brotli).\\\nThat is smaller than the demo image above; so yes.\n\n## How it works\n\ntinysearch is a Rust/WASM port of the Python code from the article\n[\"Writing a full-text\nsearch engine using Bloom filters\"](https://www.stavros.io/posts/bloom-filter-search-engine/).\nIt can be seen as an alternative to [lunr.js](https://lunrjs.com/) and\n[elasticlunr](http://elasticlunr.com/), which are too heavy for smaller websites\nand load a lot of JavaScript.\n\nUnder the hood it uses a [Xor Filter](https://arxiv.org/abs/1912.08258) &mdash;\na datastructure for fast approximation of set membership that is smaller than\nbloom and cuckoo filters. Each blog post gets converted into a filter that will\nthen be serialized to a binary blob using\n[bincode](https://github.com/bincode-org/bincode). Please note that the\nunderlying technologies are subject to change.\n\n## Limitations\n\n- Only finds entire words. As a consequence there are no search suggestions\n  (yet). This is a necessary tradeoff for reducing memory usage. A trie\n  datastructure was about 10x bigger than the xor filters. New research on\n  compact datastructures for prefix searches might lift this limitation in the\n  future.\n- Since we bundle all search indices for all articles into one static binary, we\n  recommend to only use it for small- to medium-size websites. Expect around 2\n  kB uncompressed per article (~1 kb compressed).\n\n## Installation\n\n[wasm-pack](https://rustwasm.github.io/wasm-pack/) is required to build the WASM\nmodule. Install it with\n\n```sh\ncargo install wasm-pack\n```\n\nTo optimize the JavaScript output, you'll also need\n[terser](https://github.com/terser/terser):\n\n```\nnpm install terser -g\n```\n\nIf you want to make the WebAssembly as small as possible, we recommend to\ninstall [binaryen](https://github.com/WebAssembly/binaryen) as well. On macOS\nyou can install it with [homebrew](https://brew.sh/):\n\n```sh\nbrew install binaryen\n```\n\nAlternatively, you can download the binary from the\n[release page](https://github.com/WebAssembly/binaryen/releases) or use your OS\npackage manager.\n\nAfter that, you can install tinysearch itself:\n\n```\ncargo install tinysearch\n```\n\n## Usage\n\nA JSON file, which contains the content to index, is required as an input.\nPlease take a look at the [example file](fixtures/index.json).\n\nℹ️ The `body` field in the JSON document is optional and can be skipped to just\nindex post titles.\n\nOnce you created the index, you can run\n\n```\ntinysearch fixtures/index.json\n```\n\nThis will create a WASM module and the JavaScript glue code to integrate it into\nyour website. You can open the `demo.html` from any webserver to see the result.\n\nFor example, Python has a built-in webserver that can be used for a quick test:\n\n```\npython3 -m http.server\n```\n\nthen browse to http://0.0.0.0:8000/demo.html to run the demo.\n\nYou can also take a look at the code examples for different static site\ngenerators [here](https://github.com/mre/tinysearch/tree/master/howto).\n\n## Advanced Usage\n\nFor advanced usage options, run\n\n```\ntinysearch --help\n```\n\nPlease check what's required to\n[host WebAssembly in production](https://rustwasm.github.io/book/reference/deploying-to-production.html)\n-- you will need to explicitly set gzip mime types.\n\n## Docker\n\nIf you don't have a full Rust setup available, you can also use our\nnightly-built Docker images.\n\nHere is how to quickly try tinysearch with Docker:\n\n```sh\n# Download a sample blog index from endler.dev\ncurl -O https://raw.githubusercontent.com/tinysearch/tinysearch/master/fixtures/index.json\n# Create the WASM output\ndocker run -v $PWD:/app tinysearch/cli --engine-version path=\\\"/engine\\\" --path /app/wasm_output /app/index.json\n```\n\nBy default, the most recent stable Alpine Rust image is used. To get nightly,\nrun\n\n```sh\ndocker build --build-arg RUST_IMAGE=rustlang/rust:nightly-alpine -t tinysearch/cli:nightly .\n```\n\n### Advanced Docker Build Args\n\n- `WASM_REPO`: Overwrite the wasm-pack repository\n- `WASM_BRANCH`: Overwrite the repository branch to use\n- `TINY_REPO`: Overwrite repository of tinysearch\n- `TINY_BRANCH`: Overwrite tinysearch branch\n\n## Github action\n\nTo integrate tinysearch in continuous deployment pipelines, a\n[github action](https://github.com/marketplace/actions/tinysearch-action) is\navailable.\n\n```yaml\n- name: Build tinysearch\n  uses: leonhfr/tinysearch-action@v1\n  with:\n    index: public/index.json\n    output_dir: public/wasm\n    output_types: |\n      wasm\n```\n\n## Users\n\nThe following websites use tinysearch:\n\n- [Matthias Endler's blog](https://endler.dev/2019/tinysearch/)\n- [OutOfCheeseError](https://out-of-cheese-error.netlify.app/)\n- [Museum of Warsaw Archdiocese](https://maw.art.pl/cyfrowemaw/)\n\nAre you using tinysearch, too? Add your site here!\n\n## Maintainers\n\n- Matthias Endler (@mre)\n- Jorge-Luis Betancourt (@jorgelbg)\n- Mad Mike (@fluential)\n\n## License\n\ntinysearch is licensed under either of\n\n- Apache License, Version 2.0, (LICENSE-APACHE or\n  http://www.apache.org/licenses/LICENSE-2.0)\n- MIT license (LICENSE-MIT or http://opensource.org/licenses/MIT)\n\nat your option.\n\n[wasm-pack]: https://github.com/rustwasm/wasm-pack"
}
