{
  "name": "cfn-format",
  "full_name": "cfn-format",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Command-line tool for formatting AWS CloudFormation templates",
  "license": "Apache-2.0",
  "homepage": "https://github.com/aws-cloudformation/rain",
  "versions": {
    "stable": "1.4.3",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/aws-cloudformation/rain/archive/v1.4.3.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "b77b985ee964f794030b3c1ed0b16f65680fffba1e24054e02cffb0e1fb91602"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cfn-format/blobs/sha256:fa715486304a5d0bfba960bcb4398aad05de0f10260a32ab58960aa0c0426244",
          "sha256": "fa715486304a5d0bfba960bcb4398aad05de0f10260a32ab58960aa0c0426244"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cfn-format/blobs/sha256:fa715486304a5d0bfba960bcb4398aad05de0f10260a32ab58960aa0c0426244",
          "sha256": "fa715486304a5d0bfba960bcb4398aad05de0f10260a32ab58960aa0c0426244"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cfn-format/blobs/sha256:fa715486304a5d0bfba960bcb4398aad05de0f10260a32ab58960aa0c0426244",
          "sha256": "fa715486304a5d0bfba960bcb4398aad05de0f10260a32ab58960aa0c0426244"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cfn-format/blobs/sha256:2eceae300ee27e0bcb0e39594ceabd02f0c5da2e51d3d2ae8607c998d0a8f570",
          "sha256": "2eceae300ee27e0bcb0e39594ceabd02f0c5da2e51d3d2ae8607c998d0a8f570"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cfn-format/blobs/sha256:2eceae300ee27e0bcb0e39594ceabd02f0c5da2e51d3d2ae8607c998d0a8f570",
          "sha256": "2eceae300ee27e0bcb0e39594ceabd02f0c5da2e51d3d2ae8607c998d0a8f570"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cfn-format/blobs/sha256:2eceae300ee27e0bcb0e39594ceabd02f0c5da2e51d3d2ae8607c998d0a8f570",
          "sha256": "2eceae300ee27e0bcb0e39594ceabd02f0c5da2e51d3d2ae8607c998d0a8f570"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cfn-format/blobs/sha256:1a708f83789bb39f0afb9e8b3c2ae944d88def7e9ae13c02b5b6254ae2e41d43",
          "sha256": "1a708f83789bb39f0afb9e8b3c2ae944d88def7e9ae13c02b5b6254ae2e41d43"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/cfn-format.rb",
  "ruby_source_checksum": {
    "sha256": "4eee03d69a5b134b09ff00ec541e2c9875bebf15d7a21336ed102d289a65d473"
  },
  "date_added": "2020-11-17T23:11:37+00:00",
  "readme": "[![Unit tests](https://github.com/aws-cloudformation/rain/actions/workflows/test.yml/badge.svg)](https://github.com/aws-cloudformation/rain/actions/workflows/test.yml)\n[![Mentioned in Awesome CloudFormation](https://awesome.re/mentioned-badge-flat.svg)](https://github.com/aws-cloudformation/awesome-cloudformation)\n\n# Rain\n\n* Documentation: <https://aws-cloudformation.github.io/rain/>\n\n> Rain is what happens when you have a lot of CloudFormation\n\nRain is also a command line tool for working with [AWS CloudFormation](https://aws.amazon.com/cloudformation/) templates and stacks.\n\n[![Make it Rain](./docs/rain.svg)](https://asciinema.org/a/vtbAXkriC0zg0T2UzP0t63G4S?autoplay=1)\n\n## Discord\n\nJoin us on Discord to discuss rain and all things CloudFormation! Connect and interact with CloudFormation developers and\nexperts, find channels to discuss rain, the CloudFormation registry, StackSets,\ncfn-lint, Guard and more:\n\n[![Join our Discord](https://discordapp.com/api/guilds/981586120448020580/widget.png?style=banner3)](https://discord.gg/9zpd7TTRwq)\n\n## Key features\n\n* **Interactive deployments**: With `rain deploy`, rain packages your CloudFormation templates using [`aws cloudformation package`](https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudformation/package.html), prompts you for any parameters that have not yet been defined, shows you a summary of the changes that will be made, and then displays real-time updates as your stack is being deployed. Once finished, you get a summary of the outcome along with any error messages collected along the way - including errors messages for stacks that have been rolled back and no longer exist.\n\n* **Consistent formatting of CloudFormation templates**: Using `rain fmt`, you can format your CloudFormation templates to a consistent standard or reformat a template from JSON to YAML (or YAML to JSON if you prefer). Rain preserves your comments when using YAML and switches use of [intrinsic functions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html) to use the short syntax where possible.\n\n* **Combined logs for nested stacks with sensible filtering**: When you run `rain log`, you will see a combined stream of logs from the stack you specified along with any nested stack associated with it. Rain also filters out uninteresting log messages by default so you just see the errors that require attention.\n\n* **Build new CloudFormation templates**: `rain build` generates new CloudFormation templates containing skeleton resources that you specify. This saves you having to look up which properties are available and which are required vs. optional.\n\n* **Manipulate CloudFormation stack sets**: `rain stackset deploy` creates a new stackset, updates an existing one or adds a stack instance(s) to an existing stack set. You can list stack sets using `rain stackset ls`, review stack set details with `rain stackset ls <stack set name>` and delete stack set and\\or its instances with `rain stackset rm <stack set name>`\n\n* **Predict deployment failures** (EXPERIMENTAL): `rain forecast` analyzes a template and the target deployment account to predict things that might go wrong when you attempt to create, update, or delete a stack. This command speeds up development by giving you advanced notice for issues like missing permissions, resources that already exist, and a variety of other common resource-specific deployment blockers.\n\n* **Modules** (EXPERIMENTAL): `rain pkg` supports client-side module development with the `!Rain::Module` directive. Rain modules are partial templates that are inserted into the parent template, with some extra functionality added to enable extending existing resource types.\n\n_Note that in order to use experimental commands, you have to add `--experimental` or `-x` as an argument._\n\n## Getting started\n\nIf you have [homebrew](https://brew.sh/) installed, `brew install rain`\n\nOr you can download the appropriate binary for your system from [the releases page](https://github.com/aws-cloudformation/rain/releases).\n\nOr if you're a [Gopher](https://blog.golang.org/gopher), you can `GO111MODULE=on go install github.com/aws-cloudformation/rain/cmd/rain`\n\n```\nUsage:\n  rain [command]\n\nStack commands:\n  cat         Get the CloudFormation template from a running stack\n  deploy      Deploy a CloudFormation stack from a local template\n  logs        Show the event log for the named stack\n  ls          List running CloudFormation stacks\n  rm          Delete a running CloudFormation stack\n  stackset    This command manipulates stack sets.\n  watch       Display an updating view of a CloudFormation stack\n\nTemplate commands:\n  bootstrap   Creates the artifacts bucket\n  build       Create CloudFormation templates\n  diff        Compare CloudFormation templates\n  fmt         Format CloudFormation templates\n  forecast    Predict deployment failures\n  merge       Merge two or more CloudFormation templates\n  pkg         Package local artifacts into a template\n  tree        Find dependencies of Resources and Outputs in a local template\n\nOther Commands:\n  console     Login to the AWS console\n  help        Help about any command\n  info        Show your current configuration\n```\n\nYou can find shell completion scripts in [docs/bash_completion.sh](./docs/bash_completion.sh) and [docs/zsh_completion.sh](./docs/zsh_completion.sh).\n\n## Contributing\n\nRain is written in [Go](https://golang.org/) and uses the [AWS SDK for Go v2](https://github.com/aws/aws-sdk-go-v2).\n\nTo contribute a change to Rain, [fork this repository](https://github.com/aws-cloudformation/rain/fork), make your changes, and submit a Pull Request.\n\n### Go Generate\n\nThe `README.md`, documentation in `docs/`, the auto completion scripts and a copy of the cloudformation specification in `cft/spec/cfn.go` are generated through `go generate`.\n\n## License\n\nRain is licensed under the Apache 2.0 License. \n\n## Example Usage\n\n### Packaging\n\nThe `rain pkg` command can be used as a replacement for the `aws cloudformation\npackage` CLI command.  When packaging a template, `rain` looks for specific\ndirectives to appear in resources.\n\n#### Embed\n\nThe `!Rain::Embed` directive simply inserts the contents of a file into the template as a string.\n\nThe template:\n\n```yaml\nResources:\n  Test:\n    Type: AWS::CloudFormation:WaitHandle\n    Metadata:\n      Comment: !Rain::Embed embed.txt\n```\nThe contents of `embed.txt`, which is in the same directory as the template:\n\n```txt\nThis is a test\n```\n\nThe resulting packaged template:\n\n```yaml\nResources:\n  Test:\n    Type: AWS::CloudFormation:WaitHandle\n    Metadata:\n      Comment: This is a test\n```\n\n#### Include\n\nThe `!Rain::Include` directive parses a YAML or JSON file and inserts the object into the template.\n\nThe template:\n\n```yaml\nResources:\n  Test:\n    !Rain::Include include-file.yaml\n```\n\nThe file to be included:\n\n```yaml\nType: AWS::S3::Bucket\nProperties:\n  BucketName: test\n```\n\nThe resulting packaged template:\n\n```yaml\nResources:\n  Test:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: test\n```\n\n#### Env\n\nThe `!Rain::Env` directive reads environment variables and inserts them into the template as strings.\n\nThe template:\n\n```yaml\nResources:\n  Test:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Rain::Env BUCKET_NAME\n```\n\nThe resulting packaged template, if you have exported an environment variable named `BUCKET_NAME` with value `abc`:\n\n```yaml\nResources:\n  Test:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: abc\n```\n\n#### S3Http\n\nThe `!Rain::S3Http` directive uploads a file or directory to S3 and inserts the\nHTTPS URL into the template as a string.\n\nThe template:\n\n```yaml\nResources:\n  Test:\n    Type: A::B::C\n    Properties:\n      TheS3URL: !Rain::S3Http s3http.txt\n```\n\nIf you have a file called `s3http.txt` in the same directory as the template,\nrain will use your current default profile to upload the file to the artifact\nbucket that rain creates as a part of bootstrapping. If the path provided is a \ndirectory and not a file, the directory will be zipped first.\n\n```yaml\nResources:\n  Test:\n    Type: A::B::C\n    Properties:\n      TheS3URL: https://rain-artifacts-012345678912-us-east-1.s3.us-east-1.amazonaws.com/a84b588aa54068ed4b027b6e06e5e0bb283f83cf0d5a6720002d36af2225dfc3\n```\n\n#### S3 \n\nThe `!Rain::S3` directive is basically the same as `S3Http`, but it inserts the S3 URI instead of an HTTPS URL.\n\nThe template:\n\n```yaml\nResources:\n  Test:\n    Type: A::B::C\n    Properties:\n      TheS3URI: !Rain::S3 s3.txt\n```\n\nIf you have a file called `s3.txt` in the same directory as the template,\nrain will use your current default profile to upload the file to the artifact\nbucket that rain creates as a part of bootstrapping. If the path provided is a \ndirectory and not a file, the directory will be zipped first.\n\n```yaml\nResources:\n  Test:\n    Type: A::B::C\n    Properties:\n      TheS3URI: s3://rain-artifacts-755952356119-us-east-1/a84b588aa54068ed4b027b6e06e5e0bb283f83cf0d5a6720002d36af2225dfc3 \n```\n\nIf instead of providing a path to a file, you supply an object with properties, you can exercise more control over how the object is uploaded to S3. The following example is a common pattern for uploading Lambda function code.\n\n```yaml\nResources:\n  MyFunction:\n    Type: AWS::Lambda::Function\n    Properties:\n      Code: !Rain::S3 \n        Path: lambda-src \n        Zip: true\n        BucketProperty: S3Bucket\n        KeyProperty: S3Key\n```\n\nThe packaged template:\n\n```yaml\nResources:\n  MyFunction:\n    Type: AWS::Lambda::Function\n    Properties:\n      Code:\n        S3Bucket: rain-artifacts-012345678912-us-east-1\n        S3Key: 1b4844dacc843f09941c11c94f80981d3be8ae7578952c71e875ef7add37b1a7\n```\n\n#### Module\n\nThe `!Rain::Module` directive is an experimental feature that allows you to\ncreate local modules of reuseable code that can be inserted into templates. A\nrain module is similar in some ways to a CDK construct, in that a module can\nextend an existing resource, allowing the user of the module to override\nproperties. For example, your module could extend an S3 bucket to provide a\ndefault implementation that passes static security scans. Users of the module\nwould inherit these best practices by default, but they would still have the\nability to configure any of the original properties on `AWS::S3::Bucket`, in\naddition to the properties defined as module parameters.\n\nIn order to use this feature, you have to acknowledge that it's experimental by\nadding a flag on the command line:\n\n`rain pkg -x my-template.yaml`\n\nKeep in mind that with new versions of rain, this functionality could change,\nso use caution if you decide to use this feature for production applications.\nThe `rain pkg` command does not actually deploy any resources if the template\ndoes not upload any objects to S3, so you always have a chance to review the\npackaged template. It's recommended to run linters and scanners on the packaged\ntemplate, rather than a pre-processed template that makes use of these advanced\ndirectives.\n\nA sample module:\n\n```yaml\nDescription: |\n  This module extends AWS::S3::Bucket\n\nParameters:\n  LogBucketName:\n    Type: String\n\nResources:\n  ModuleExtension:\n    Metadata:\n      Extends: AWS::S3::Bucket\n    Properties:\n      LoggingConfiguration:\n        DestinationBucketName: !Ref LogBucket\n      BucketEncryption:\n        ServerSideEncryptionConfiguration:\n          - ServerSideEncryptionByDefault:\n             SSEAlgorithm: AES256\n      PublicAccessBlockConfiguration:\n        BlockPublicAcls: true\n        BlockPublicPolicy: true\n        IgnorePublicAcls: true\n        RestrictPublicBuckets: true\n      Tags:\n        - Key: test-tag\n          Value: test-value1\n  \n  LogBucket:\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Retain\n    Properties:\n      BucketName: !Ref LogBucketName\n      BucketEncryption:\n        ServerSideEncryptionConfiguration:\n          - ServerSideEncryptionByDefault:\n              SSEAlgorithm: AES256\n      VersioningConfiguration:\n        Status: Enabled\n      PublicAccessBlockConfiguration:\n        BlockPublicAcls: true\n        BlockPublicPolicy: true\n        IgnorePublicAcls: true\n        RestrictPublicBuckets: true\n```\n\nA module must include a resource called `ModuleExtension`, and it must indicate \nwhich resource it is extending with a Metadata entry called `Extends`.\n\nNote that we defined a single parameter to the module called `LogBucketName`.\nIn the module, we create an additional bucket to hold logs, and we apply the\nname to that bucket. In the template that uses the module, we specify that name\nas a property. This shows how we have extended the basic behavior of a bucket\nto add something new. \n\nA template that uses the module:\n\n```yaml\nResources:\n  ModuleExample:\n    Type: !Rain::Module \"./bucket-module.yaml\"\n    UpdateReplacePolicy: Delete\n    Properties:\n      LogBucketName: test-module-log-bucket\n      VersioningConfiguration:\n        Status: Enabled\n      Tags:\n        - Key: test-tag\n          Value: test-value2\n```\n\nNote that in addition to supplying the expected `LogBucketName` property, we have also \ndecided to override a few of the properties on the underlying `AWS::S3::Bucket` resource, \nwhich shows the flexibility of the inheritance model.\n\nThe resulting template after running `rain pkg`:\n\n```yaml\nResources:\n  ModuleExample:\n    Type: AWS::S3::Bucket\n    Properties:\n      LoggingConfiguration:\n        DestinationBucketName: !Ref ModuleExampleLogBucket\n      BucketEncryption:\n        ServerSideEncryptionConfiguration:\n          - ServerSideEncryptionByDefault:\n              SSEAlgorithm: AES256\n      PublicAccessBlockConfiguration:\n        BlockPublicAcls: true\n        BlockPublicPolicy: true\n        IgnorePublicAcls: true\n        RestrictPublicBuckets: true\n      Tags:\n        - Key: test-tag\n          Value: test-value2\n      VersioningConfiguration:\n        Status: Enabled\n\n  ModuleExampleLogBucket:\n    DeletionPolicy: Retain\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: test-module-log-bucket\n      BucketEncryption:\n        ServerSideEncryptionConfiguration:\n          - ServerSideEncryptionByDefault:\n              SSEAlgorithm: AES256\n      VersioningConfiguration:\n        Status: Enabled\n      PublicAccessBlockConfiguration:\n        BlockPublicAcls: true\n        BlockPublicPolicy: true\n        IgnorePublicAcls: true\n        RestrictPublicBuckets: true\n```\n\n## Other CloudFormation tools\n\n* [cfn-lint](https://github.com/aws-cloudformation/cfn-python-lint)\n\n    Validate CloudFormation yaml/json templates against the CloudFormation spec and additional checks. Includes checking valid values for resource properties and best practices.\n\n* [cfn-guard](https://docs.aws.amazon.com/cfn-guard/latest/ug/what-is-guard.html)\n\n    Guard is a policy evaluation tool that allows you to build your own rules with a custom DSL. You can also pull rules from the \n    [guard registry](https://github.com/aws-cloudformation/aws-guard-rules-registry) to scan your templates for resources that don't comply with common best practices.\n\n* [taskcat](https://github.com/aws-quickstart/taskcat)\n\n    taskcat is a tool that tests AWS CloudFormation templates. It deploys your AWS CloudFormation template in multiple AWS Regions and generates a report with a pass/fail grade for each region. You can specify the regions and number of Availability Zones you want to include in the test, and pass in parameter values from your AWS CloudFormation template. taskcat is implemented as a Python class that you import, instantiate, and run.\n\nAre we missing an excellent tool? Let us know via a GitHub issue."
}
