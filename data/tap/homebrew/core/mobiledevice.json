{
  "name": "mobiledevice",
  "full_name": "mobiledevice",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "CLI for Apple's Private (Closed) Mobile Device Framework",
  "license": "MIT",
  "homepage": "https://github.com/imkira/mobiledevice",
  "versions": {
    "stable": "2.0.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/imkira/mobiledevice/archive/v2.0.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "07b167f6103175c5eba726fd590266bf6461b18244d34ef6d05a51fc4871e424"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 2,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mobiledevice/blobs/sha256:9840294891d057da453f01b2f91601f9a167c3954e1953f0d48f6d096de0e692",
          "sha256": "9840294891d057da453f01b2f91601f9a167c3954e1953f0d48f6d096de0e692"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mobiledevice/blobs/sha256:2adc416c3d767931c3220285e2d2592f4b9fe037c35aab51a0bb18b17905cd08",
          "sha256": "2adc416c3d767931c3220285e2d2592f4b9fe037c35aab51a0bb18b17905cd08"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mobiledevice/blobs/sha256:f7de95125177db2598a17b99514154a5414d74781c642397eae752645cae9c64",
          "sha256": "f7de95125177db2598a17b99514154a5414d74781c642397eae752645cae9c64"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mobiledevice/blobs/sha256:9289a82ea82bad8477cd20b62298ecbe738103a7c6ff1a5ecce316c3056ae85e",
          "sha256": "9289a82ea82bad8477cd20b62298ecbe738103a7c6ff1a5ecce316c3056ae85e"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mobiledevice/blobs/sha256:259bbbe1bdff8ebb05d6e9990a4450ba5cb3684e1903070483b22a7030546646",
          "sha256": "259bbbe1bdff8ebb05d6e9990a4450ba5cb3684e1903070483b22a7030546646"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mobiledevice/blobs/sha256:a9b9e20ce5c2142da8ea4a1bbc34ff433da46a1e12a522942c3b7c572be9f683",
          "sha256": "a9b9e20ce5c2142da8ea4a1bbc34ff433da46a1e12a522942c3b7c572be9f683"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mobiledevice/blobs/sha256:6912247da18b0d7f033d37115939a67629b93d036458f1369944a58953c12f69",
          "sha256": "6912247da18b0d7f033d37115939a67629b93d036458f1369944a58953c12f69"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mobiledevice/blobs/sha256:1d327ce17e123f4039b9b0e6c351277d8e781a6757dd23060b6b207d791380f8",
          "sha256": "1d327ce17e123f4039b9b0e6c351277d8e781a6757dd23060b6b207d791380f8"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mobiledevice/blobs/sha256:7ac3822649356127001c8b452df55c1435c467938193f223da61bbcdf2a7c11b",
          "sha256": "7ac3822649356127001c8b452df55c1435c467938193f223da61bbcdf2a7c11b"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [
    {
      "name": "macos",
      "cask": null,
      "download": null,
      "version": null,
      "contexts": [],
      "specs": [
        "stable"
      ]
    }
  ],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/mobiledevice.rb",
  "ruby_source_checksum": {
    "sha256": "abeb4ac8e1921d55193c136630e8f4ebfb731b097af2c8ef2bbd7a6b8dbdb39a"
  },
  "date_added": "2015-03-15T16:15:25+00:00",
  "readme": "[日本語はこちら](https://github.com/imkira/mobiledevice/blob/master/README_JP.md)\n\nmobiledevice\n============\n\n[![Build Status](https://travis-ci.org/imkira/mobiledevice.png)](https://travis-ci.org/imkira/mobiledevice)\n\nmobiledevice is a command line utility for interacting with Apple's Private\nMobile Device Framework.  It can be used for automating some tasks like\ninstalling and uninstalling apps on your iPhone/iPad without having to manually\ndo it via Xcode or iTunes.  You don't need a jailbroken device!\n\n## Requirements\n\n* iPhone 3G and above should work / iPad too (tested on iPhone 4, 5, 6).\n* Plug in your iPhone/iPad to your Mac via USB.\n* In order to install apps on the device, you need the iOS development\n  certificates previously installed.\n* Mac OS X 10.6 and above.\n* XCode 3 or above with iOS SDK installed.\n* You need to compile the tool and optionally install it.\n\n## Installation\n\n### Homebrew\n\nIf you use [homebrew](http://brew.sh), you can install mobiledevice by\nexecuting:\n\n```shell\nbrew update\nbrew install mobiledevice\n```\n\n### Manual\n\nTo compile mobiledevice, open a terminal console and type:\n\n```shell\ngit clone git://github.com/imkira/mobiledevice.git\ncd mobiledevice\nmake\n```\n\nTo install mobiledevice in your system, proceed with:\n\n```shell\nmake install\n```\n\n## Usage\n\n### Help\n\nAfter compiling/installing mobiledevice, open a terminal console.\n\nFor the usage screen, you can type\n\n```shell\nmobiledevice help\n```\n\nand the following will be displayed:\n\n```\nmobiledevice help\n  Display this help screen\n\nmobiledevice version [options]\n  Display program version.\n  Options:\n    -r: Include revision identifier\n\nmobiledevice list_devices [options]\n  Display UDID of each connected devices.\n  Options:\n    -t <timeout>: Timeout (in ms) to wait for devices (default: 1)\n    -n <count> : Limit the number of devices to be printed\n\nmobiledevice list_device_props [options]\n  List all property names of device.\n  Options:\n    -u <udid> : Filter by device UDID (default: first detected device)\n    -t <timeout>: Timeout (in ms) to wait for devices (default: 1)\n\nmobiledevice get_device_prop [options] <prop_name>\n  Display value of device property with given name.\n  Options:\n    -u <udid> : Filter by device UDID (default: first detected device)\n    -t <timeout>: Timeout (in ms) to wait for devices (default: 1)\n\nmobiledevice list_apps [options]\n  Lists all apps installed on device\n  Options:\n    -u <udid> : Filter by device UDID (default: first detected device)\n    -t <timeout>: Timeout (in ms) to wait for devices (default: 1)\n\nmobiledevice list_app_props [options] <bundle_id>\n  List all property names of app with given bundle id.\n  Options:\n    -u <udid> : Filter by device UDID (default: first detected device)\n    -t <timeout>: Timeout (in ms) to wait for devices (default: 1)\n\nmobiledevice get_app_prop [options] <bundle_id> <prop_name>\n  Display value of app property with given name.\n  Options:\n    -u <udid> : Filter by device UDID (default: first detected device)\n    -t <timeout>: Timeout (in ms) to wait for devices (default: 1)\n\nmobiledevice install_app [options] <path_to_app>\n  Install app (.app folder) to device\n  Options:\n    -u <udid> : Filter by device UDID (default: first detected device)\n    -t <timeout>: Timeout (in ms) to wait for devices (default: 1)\n\nmobiledevice uninstall_app [options] <bundle_id>\n  Uninstall app with given bundle id from device\n  Options:\n    -u <udid> : Filter by device UDID (default: first detected device)\n    -t <timeout>: Timeout (in ms) to wait for devices (default: 1)\n\nmobiledevice tunnel [options] <from_port> <to_port>\n  Forward TCP connections to connected device\n  Options:\n    -u <udid> : Filter by device UDID (default: first detected device)\n    -t <timeout>: Timeout (in ms) to wait for devices (default: 1)\n\nmobiledevice get_bundle_id <path_to_app>\n  Display bundle identifier of app (.app folder)\n```\n\nOn failure, all commands exit with status code set to a non-zero value, and\nsome print messages to stderr indicating the kind of error.\n\nOn success,  all commands exit with status code set to 0.\n\n### List devices\n\nTo list all connected devices, you can type\n\n```\nmobiledevice list_devices\n```\n\nAnd all devices will be listed by UDID like the following:\n\n```\naaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d\n7c211433f02071597741e6ff5a8ea34789abbf43\n0ab8318acaf6e678dd02e2b5c343ed41111b393d\n```\n\nIn the previous example, there are 3 connected devices.\nIf you want to limit the number of results you can pass the ```-n <count>```\nflag as follows:\n\n```\nmobiledevice list_devices -n 1\n```\n\nThe output will be, as expected, trimmed to one device.\n\n```\naaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d\n```\n\n### List device properties\n\nTo list all properties about a device, you can type:\n\n```\nmobiledevice list_device_props\n```\n\nThe output should be something like:\n\n```\nActivationPublicKey\nActivationState\nActivationStateAcknowledged\nBasebandSerialNumber\nBasebandStatus\nBasebandVersion\nBluetoothAddress\nBuildVersion\nCPUArchitecture\nDeviceCertificate\nDeviceClass\nDeviceColor\nDeviceName\nDevicePublicKey\nDieID\n...\n```\n\nTo specify a different device, you can also append the ```-u <udid>``` flag as\nfollows:\n\n```\nmobiledevice list_device_props -u 7c211433f02071597741e6ff5a8ea34789abbf43\n```\n\nNotes:\n\n* If ```-u <udid>``` is not provided, the first detect device will be used.\n\n### Get device property value\n\nTo display the value of a device property with a given name, you can type:\n\n```\nmobiledevice get_device_prop property_name\n```\n\nFor example to get information on the product type of the device, you can use ```ProductType``` as property name:\n\n```\nmobiledevice get_device_prop ProductType\n```\n\nTo specify a different device, you can also append the ```-u <udid>``` flag as\nfollows:\n\n```\nmobiledevice get_device_prop -u 7c211433f02071597741e6ff5a8ea34789abbf43\nproperty_name\n```\n\nNotes:\n\n* If ```-u <udid>``` is not provided, the first detect device will be used.\n* On successful execution, the output consists of the value followed by a\n  newline character.\n\n### List applications\n\nTo get the list of installed apps, type:\n\n```\nmobiledevice list_apps\n```\n\nThe output should be something like:\n\n```\ncom.apple.VoiceMemos\ncom.apple.mobiletimer\ncom.apple.AdSheetPhone\ncom.apple.weather\ncom.apple.iphoneos.iPodOut\ncom.apple.mobilesafari\ncom.apple.Preferences\n...\ncom.mycompany.myapp1\ncom.mycompany.myapp2\n...\n```\n\nTo specify a different device, you can also append the ```-u <udid>``` flag as\nfollows:\n\n```\nmobiledevice list_apps -u 7c211433f02071597741e6ff5a8ea34789abbf43\n```\n\nNotes:\n\n* If ```-u <udid>``` is not provided, the first detect device will be used.\n\n### List application properties\n\nTo display the value of a device property with a given name, you can type:\n\n```\nmobiledevice list_app_props com.mycompany.myapp\n```\n\nThe output should be something like:\n\n```\nSBIconClass\nCFBundleInfoDictionaryVersion\nEntitlements\nDTPlatformVersion\nCFBundleName\nDTSDKName\nApplicationType\nUIViewControllerBasedStatusBarAppearance\nCFBundleIcons\nUIStatusBarStyle\nContainer\nLSRequiresIPhoneOS\nCFBundleDisplayName\nPrivateURLSchemes\nUIBackgroundModes\nDTSDKBuild\n...\n```\n\nTo specify a different device, you can also append the ```-u <udid>``` flag as\nfollows:\n\n```\nmobiledevice list_app_props -u 7c211433f02071597741e6ff5a8ea34789abbf43 com.mycompany.myapp\n```\n\nNotes:\n\n* If ```-u <udid>``` is not provided, the first detect device will be used.\n\n### Get application property value\n\nTo display the value of an application property with a given name, you can type:\n\n```\nmobiledevice get_app_prop com.mycompany.myapp property_name\n```\n\nFor example to get the path where Apple's Weather app is installed on the device, you can use ```Path``` as property name:\n\n```\nmobiledevice get_app_prop com.apple.weather Path\n```\n\nTo specify a different device, you can also append the ```-u <udid>``` flag as\nfollows:\n\n```\nmobiledevice get_app_prop -u 7c211433f02071597741e6ff5a8ea34789abbf43 com.mycompany.myapp Path\n```\n\nNotes:\n\n* If ```-u <udid>``` is not provided, the first detect device will be used.\n* On successful execution, the output consists of the value followed by a\n  newline character.\n\n### Install application\n\nTo install an app on the device, you can type:\n\n```\nmobiledevice install_app path/to/my_application.app\n```\n\nTo specify a different device, you can also append the ```-u <udid>``` flag as\nfollows:\n\n```\nmobiledevice install_app -u 7c211433f02071597741e6ff5a8ea34789abbf43 path/to/my_application.app\n```\n\nNotes:\n\n* If ```-u <udid>``` is not provided, the first detect device will be used.\n\n### Uninstall application\n\nTo uninstall an app from the device, pass in the bundle identifier and type:\n\n```\nmobiledevice uninstall_app com.mycompany.myapp\n```\n\nTo specify a different device, you can also append the ```-u <udid>``` flag as\nfollows:\n\n```\nmobiledevice uninstall_app -u 7c211433f02071597741e6ff5a8ea34789abbf43 com.mycompany.myapp\n```\n\nNotes:\n\n* If ```-u <udid>``` is not provided, the first detect device will be used.\n\n### Forward (tunnel) TCP connections from Mac to the device\n\nIf your app creates a TCP server by listening on some port, it may be useful to\nconnect to it via USB (no need for WiFi/3G connection). mobiledevice allows\nyou to create a tunnel between your Mac and your device, via a USB cable.\nIf you connect to your Mac (on localhost or 127.0.0.1) mobiledevice will\nforward that connection to the device on the specified port by typing something\nlike:\n\n```\nmobiledevice tunnel 8080 80\n```\n\nThe previous example attempts to illustrate a tunnel between your Mac's TCP\nport 8080 and the device's TCP port 80. The output would be something like:\n\n```\nTunneling from local port 8080 to device port 80...\n```\n\nFrom this point you can `telnet localhost 8080` and communicate with the server\nrunning at TCP port 80 on the mobile app!\n\nTo specify a different device, you can also append the ```-u <udid>``` flag as\nfollows:\n\n```\nmobiledevice tunnel -u 7c211433f02071597741e6ff5a8ea34789abbf43 8080 80\n```\n\nNotes:\n\n* If ```-u <udid>``` is not provided, the first detect device will be used.\n* Please note that if you keep the process open, it will keep forwarding\n  connections. If and when you decide to terminate it (for instance, by\n  pressing CTRL-C), it will terminate all currently tunnelled connections and\n  stop accepting more connections to it.\n* Also note that mobiledevice allows you to keep multiple connections open to\n  the same TCP port on the device (by running a single instance of\n  mobiledevice), or to different ports (by running multiple instances of\n  mobiledevice and specifying the ports for each).\n\n### Get the bundle identifier of an application\n\nThis is just an utility command, and is not related to the MobileDevice\nFramework.  To get the bundle identifier (e.g. com.mycompany.myapp) of an .app\nyou can type the following command (bear in mind it must be a valid .app\nfolder, not a .ipa!):\n\n```\nmobiledevice get_bundle_id path/to/my_application.app\n```\n\nNotes:\n\n* Please note that the previous path is on your local computer, not a path to the device.\n\n## Contribute\n\nFound a bug? Want to contribute and add a new feature?\n\nPlease fork this project and send me a pull request!\n\n### Contributors\n\n* ruudputs: Added initial support for multiple devices.\n* leopatras: Simplified obj-c string-related code and adoption of ARC.\n* 7bp: Fixed compilation issues.\n* k-yamada: Fixed usage screen typos.\n\nYou can check the [full list here](https://github.com/imkira/mobiledevice/graphs/contributors).\n\n## License\n\nmobiledevice is licensed under the MIT license:\n\nwww.opensource.org/licenses/MIT"
}
