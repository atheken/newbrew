{
  "name": "tt",
  "full_name": "tt",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Command-line utility to manage Tarantool applications",
  "license": "BSD-2-Clause",
  "homepage": "https://github.com/tarantool/tt",
  "versions": {
    "stable": "1.1.2",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/tarantool/tt/releases/download/v1.1.2/tt-1.1.2-complete.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "b9425b2b44bde086e9ab54f2f901229d754da6c94167526b3344a0308865ab91"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/tt/blobs/sha256:790695603d18f8a01502d965126d3781fa5774ccf865b5a38244cda746f82972",
          "sha256": "790695603d18f8a01502d965126d3781fa5774ccf865b5a38244cda746f82972"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/tt/blobs/sha256:3d20599ee5caf0417f756b800982b2aca6792f51683315939dbb8ec0da1e5987",
          "sha256": "3d20599ee5caf0417f756b800982b2aca6792f51683315939dbb8ec0da1e5987"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/tt/blobs/sha256:324ab76b91578f6df52cf79f8e09c7da47fe6f936cb24c17841d5d42fb1bda10",
          "sha256": "324ab76b91578f6df52cf79f8e09c7da47fe6f936cb24c17841d5d42fb1bda10"
        },
        "ventura": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/tt/blobs/sha256:7eee737bef94e4b0586a2ce52ae992bcacc2b9fbee894f546b628c76ce4684c5",
          "sha256": "7eee737bef94e4b0586a2ce52ae992bcacc2b9fbee894f546b628c76ce4684c5"
        },
        "monterey": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/tt/blobs/sha256:ca9121d8d02da7ca9276185b7b25b13a38c8b7337eeec5ff00ddd54dabc7dbe4",
          "sha256": "ca9121d8d02da7ca9276185b7b25b13a38c8b7337eeec5ff00ddd54dabc7dbe4"
        },
        "big_sur": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/tt/blobs/sha256:44d735c47bd10d9dd62699091fa10b9d7050dc8b5d5932d290ad2b5f968eb45b",
          "sha256": "44d735c47bd10d9dd62699091fa10b9d7050dc8b5d5932d290ad2b5f968eb45b"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tt/blobs/sha256:9b6a5f05563457a982c8dcf1addde2f06b455cf9db75dbde48131daa5d68f0bc",
          "sha256": "9b6a5f05563457a982c8dcf1addde2f06b455cf9db75dbde48131daa5d68f0bc"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go",
    "mage",
    "pkg-config"
  ],
  "dependencies": [
    "openssl@3"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "curl",
    "unzip",
    "zip"
  ],
  "uses_from_macos_bounds": [
    {},
    {},
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "982192bf852eebace6c92c1e792d894990b8620e",
  "ruby_source_path": "Formula/tt.rb",
  "ruby_source_checksum": {
    "sha256": "8e80054874d7af357ccb165906d16348b7478449d43be614115d2b0b364de901"
  },
  "date_added": "2023-03-25T17:32:46+00:00",
  "readme": "# Tarantool CLI\n\n[![Go Report][report-badge]][report-url]\n[![Release][release-badge]][release-url]\n[![Full CI][testing-actions-badge]][testing-actions-url]\n\nTarantool CLI - command line utility for managing Tarantool packages and\nTarantool-based applications.\n\n## Contents\n\n* [Intro](#intro)\n* [Getting started](#getting-started)\n  * [Installation](#installation)\n  * [Build from source](#build-from-source)\n    * [Prerequisites](#prerequisites)\n    * [Build](#build)\n    * [Dependencies](#dependencies)\n    * [Run tests](#run-tests)\n* [Configuration](#configuration)\n  * [Configuration file](#configuration-file)\n* [Creating tt environment](#creating-tt-environment)\n* [External modules](#external-modules)\n* [CLI Args](#cli-Args)\n  * [Autocompletion](#autocompletion)\n* [TT usage](#tt-usage)\n  * [Working with a set of instances](#working-with-a-set-of-instances)\n  * [Working with application templates](#Working-with-application-templates)\n  * [Working with tt daemon (experimental)](#working-with-tt-daemon-experimental)\n  * [Setting Tarantool configuration parameters via environment variables](#setting-tarantool-configuration-parameters-via-environment-variables)\n* [Commands](#commands)\n\n## Intro\n\n`tt` is tarantool's instance and environment management utility and is used to develop, deploy, run and operate applications.\n\nOne of the basic concepts that `tt` introduces is \"environment\". The \"environment\" is\nan isolated workspace for the tarantool application suite.\n[`tt.yaml` configuration file](#configuration) defines the root and configuration of\nthe *environment*. When `tt` is installed from a repository by a package manager (`apt`,\n`rpm`, ...) a \"system\" config file (`/etc/tarantool/tt.yaml`) is included which forms\nthe \"system\" environment - the case when `tt` replaces the\n[`tarantoolctl`](https://github.com/tarantool/tt/blob/master/doc/examples.md#transition-from-tarantoolctl-to-tt).\nIn case we want to form a local environment (very convenient during development), we\nuse a \"local\" `tt.yaml` generated with the [`tt init`](#creating-tt-environment)\ncommand. In this way, the user/developer can have a large number of different\n\"environments\" in the system in which different versions of both `tarantool`/`tt` and\nthe applications being developed will be used.\n\nThe example of a typical \"environment\":\n\n```mermaid\n\n    C4Component\n\n    Container_Boundary(env, \"Environment\") {\n      Component(cfg, \"tt.yaml\")\n\n      Container(bin, \"bin\", \"tt, tt-ee, tarantool, tarantool-ee\")\n      Container(modules, \"modules\", \"ext_module_1, ext_module_2\")\n      Container(locrep, \"LocalRepos\", \"distfiles, rocks\")\n      Container_Boundary(enabled, \"instances.enabled\") {\n        Component(app1, \"app.lua\")\n        Container(app2, \"app2\", \"init.lua, ...\")\n        Container(multi_inst_app, \"multi instances app\", \"instances.yml, ...\")\n        }\n        Container_Boundary(var, \"var\") {\n            Container_Boundary(run, \"run\") {\n                Container(app_run, \"app_name\", \"app_name.pid, app_name.socket\")\n            }\n            Container_Boundary(log, \"log\") {\n                Container(app_log, \"app_name\", \"app_name.log\")\n            }\n            Container_Boundary(lib, \"lib\") {\n                Container(app_lib, \"app_name\", \"xxx.snap, xxx.xlog\")\n            }\n        }\n    }\n\n    UpdateElementStyle(env, $borderColor=\"#6AA3E9\")\n    UpdateElementStyle(enabled, $borderColor=\"#6AA3E9\")\n    UpdateElementStyle(var, $borderColor=\"#6AA3E9\")\n    UpdateElementStyle(run, $borderColor=\"#6AA3E9\")\n    UpdateElementStyle(log, $borderColor=\"#6AA3E9\")\n    UpdateElementStyle(lib, $borderColor=\"#6AA3E9\")\n```\n\n## Getting started\n\n### Installation\n\nTT can be installed from the deb / rpm repository \"tarantool/modules\".\n\nInstall the tarantool repositories:\n\n<https://www.tarantool.io/en/download/os-installation/>\n\nInstall TT:\n\n-   Deb based distributions:\n\n``` console\napt-get install tt\n```\n\n-   Rpm based distributions:\n\n``` console\nyum install tt\ndnf install tt\n```\n\nOn Gentoo Linux, the TT can be installed from the [Tarantool Gentoo\nOverlay](https://github.com/tarantool/gentoo-overlay):\n\n``` console\nemerge tt\n```\n\nOn MacOS, the TT can be installed from brew:\n\n``` console\nbrew install tt\n```\n\nYou can also install Tarantool CLI by downloading archive with pre-built\nbinary for your OS from GitHub's Releases page.\n\nHowever, on MacOS to run that binary you will need to do additional\nsteps:\n\n1.  After first try to run binary, you will encounter an error:\n\n    <img src=\"doc/images/macOS_error.jpeg\" width=\"250\" alt=\"MacOS error.\" />\n\n1.  To fix it, you should go to 'system settings-\\>privacy and\n    security', then scroll down and find:\n\n    <img src=\"doc/images/macOS_settings.jpeg\" width=\"350\" alt=\"MacOS settings.\" />\n\n1.  Click on 'Allow Anyway' and you should be able to use Tarantool Cli.\n\n### Build from source\n\n#### Prerequisites\n\n-   [Go (version 1.18+)](https://golang.org/doc/install)\n-   [Mage](https://magefile.org/)\n-   [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)\n\nTo run tests:\n\n-   [Python3](https://www.python.org/downloads/)\n-   [pytest](https://docs.pytest.org/en/7.2.x/getting-started.html#get-started)\n-   [flake8](https://pypi.org/project/flake8/)\n-   [flake8-isort](https://pypi.org/project/flake8-isort/)\n-   [flake8-unused-arguments](https://pypi.org/project/flake8-unused-arguments/)\n-   [golangci-lint](https://golangci-lint.run/usage/install/#local-installation)\n-   [lichen](https://github.com/uw-labs/lichen#install)\n-   [docker](https://docs.docker.com/engine/install/)\n-   [NodeJS](https://nodejs.org/en/download)\n-   [CMake](https://cmake.org/install/)\n\n#### Build\n\n``` console\ngit clone https://github.com/tarantool/tt --recursive\ncd tt\n```\n\nYou can build a binary without OpenSSL and TLS support for development\npurposes:\n\n``` console\nTT_CLI_BUILD_SSL=no mage build\nmage build\n```\n\nYou can build a binary with statically linked OpenSSL. This build type\nis used for releases:\n\n``` console\nTT_CLI_BUILD_SSL=static mage build\n```\n\nFinally, you can build a binary with dynamically linked OpenSSL for\ndevelopment purposes:\n\n``` console\nTT_CLI_BUILD_SSL=shared mage build\n```\n\n#### Dependencies\n\n**tt rocks runtime dependencies:**\n\n-   [curl](https://curl.se) or\n    [wget](https://www.gnu.org/software/wget/)\n-   [zip](http://infozip.sourceforge.net/)\n-   [unzip](http://infozip.sourceforge.net/)\n\n**tt install && search runtime dependencies:**\n\n-   [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)\n\n#### Run tests\n\nTo run default set of tests (excluding slow tests):\n\n``` console\nmage test\n```\n\nTo run full set of tests:\n\n``` console\nmage testfull\n```\n\n## Configuration\n\nTaratool CLI can be launched in several modes:\n\n-   System launch (flag `-S`) - the working directory is current,\n    configuration file searched in `/etc/tarantool` directory.\n-   Local launch (flag `-L`) - the working directory is the one you\n    specified, configuration file is searched in this directory. If\n    configuration file doesn't exists, config searched from the working\n    directory to the root. If it is also not found, then take config\n    from `/etc/tarantool`. If tarantool or tt executable files are found\n    in working directory, they will be used further.\n-   Default launch (no flags specified) - configuration file searched\n    from the current directory to the root, going down the directory\n    until file is found. Working directory - the one where the\n    configuration file is found. If configuration file isn't found,\n    config taken from `/etc/tarantool` directory. In this case working\n    directory is current.\n\n### Configuration file\n\nBy default, configuration file is named `tt.yaml`. With the `--cfg` flag\nyou can specify the path to configuration file. Example of configuration\nfile format:\n\n``` yaml\ntt:\n  modules:\n    directory: path/to/modules/dir\n  app:\n    instances_enabled: path/to/available/applications\n    run_dir: path/to/run_dir\n    log_dir: path/to/log_dir\n    bin_dir: path/to/bin_dir\n    inc_dir: path/to/inc_dir\n    wal_dir: var/lib\n    vinyl_dir: var/lib\n    memtx_dir: var/lib\n    log_maxsize: num (MB)\n    log_maxage: num (Days)\n    log_maxbackups: num\n    restart_on_failure: bool\n    tarantoolctl_layout: bool\n  repo:\n    rocks: path/to/rocks\n    distfiles: path/to/install\n  ee:\n    credential_path: path/to/file\n  templates:\n    - path: path/to/templates_dir1\n    - path: path/to/templates_dir2\n```\n\n**modules**\n\n-   `directory` (string) - the path to directory where the external\n    modules are stored.\n\n**app**\n\n-   `instances_enabled` (string) - path to directory that stores all\n    applications.\n-   `run_dir` (string) - path to directory that stores various instance\n    runtime artifacts like console socket, PID file, etc.\n-   `log_dir` (string) - directory that stores log files.\n-   `bin_dir` (string) - directory that stores binary files.\n-   `inc_dir` (string) - directory that stores header files. The path\n    will be padded with a directory named include.\n-   `wal_dir` (string) - directory where write-ahead log (.xlog) files\n    are stored.\n-   `memtx_dir` (string) - directory where memtx stores snapshot (.snap)\n    files.\n-   `vinyl_dir` (string) - directory where vinyl files or subdirectories\n    will be stored.\n-   `log_maxsize` (number) - the maximum size in MB of the log file\n    before it gets rotated. It defaults to 100 MB.\n-   `log_maxage` (numder) - is the maximum number of days to retain old\n    log files based on the timestamp encoded in their filename. Note\n    that a day is defined as 24 hours and may not exactly correspond to\n    calendar days due to daylight savings, leap seconds, etc. The\n    default is not to remove old log files based on age.\n-   `log_maxbackups` (number) - the maximum number of old log files to\n    retain. The default is to retain all old log files (though\n    log_maxage may still cause them to get deleted.)\n-   `restart_on_failure` (bool) - should it restart on failure.\n-   `tarantoolctl_layout` (bool) - enable/disable tarantoolctl layout\n    compatible mode for artifact files: control socket, pid, log files.\n    Data files (wal, vinyl, snapshots) and multi-instance applications\n    are not affected by this option.\n\n**repo**\n\n-   `rocks` (string) - directory that stores rocks files.\n-   `distfiles` (string) - directory that stores installation files.\n\n**ee**\n\n-   `credential_path` (string) - path to file with credentials for\n    downloading tarantool-ee. File must contain login and password. Each\n    parameter on a separate line. Alternatively credentials can be set\n    via environment variables:\n    <span class=\"title-ref\">TT_CLI_EE_USERNAME</span> and\n    <span class=\"title-ref\">TT_CLI_EE_PASSWORD</span>.\n\n**templates**\n\n-   `path` (string) - the path to templates search directory.\n\n## Creating tt environment\n\ntt environment can be created using `init` command:\n\n``` console\n$ tt init\n```\n\n`tt init` searches for existing configuration files in current\ndirectory:\n\n-   `.cartridge.yml`. If `.cartridge.yml` is found, it is loaded, and\n    directory information from it is used for `tt.yaml` generation.\n-   `.tarantoolctl`. If `.tarantoolctl` is found, it is invoked by\n    Tarantool and directory information from `default_cfg` table is used\n    for `tt.yaml` generation. `.tarantoolctl` will not be invoked by\n    `tt start` command, so all variables defined in this script will not\n    be available in application code.\n\nIf there are no existing configs in current directory, `tt init`\ngenerates default `tt.yaml` and creates a set of environment\ndirectories. Here is and example of the default environment filesystem\ntree:\n\n    .\n    ├── bin\n    ├── include\n    ├── distfiles\n    ├── instances.enabled\n    ├── modules\n    ├── tt.yaml\n    └── templates\n\nWhere:\n\n-   `bin` - directory that stores binary files.\n-   `include` - directory that stores header files.\n-   `distfiles` - directory that stores installation files for local\n    install.\n-   `instances.enabled` - directory that stores enabled applications or\n    symlinks.\n-   `modules` - the directory where the external modules are stored.\n-   `tt.yaml` - tt environment configuration file generated by\n    `tt init`.\n-   `templates` - the directory where external templates are stored.\n\n## External modules\n\nExternal module - any executable file stored in modules directory.\nModule must be able to handle `--description` and `--help` flags. When\ncalling with `--description` flag, module should print a short\ndescription of module to stdout. When calling with `--help` flag, module\nshould print a help information about module to stdout.\n\nTarantool CLI already contains a basic set of modules. You can overload\nthese with external ones, or extend functionality with your own module.\nModules getting from directory, which specified in `directory` field\n(see example above).\n\nFor example, you have an external `version` module. When you type\n`tt version`, the external `version` module will be launched. To run the\ninternal implementation, use the `--internal (-I)` flag. If there is no\nexecutable file with the same name, the internal implementation will be\nstarted.\n\nYou can use any external module that doesn't have any internal\nimplementation. For example, you have module named `example-module`.\nJust type `tt example-module` to run it.\n\nTo see list of available modules, type `tt -h`.\n\n## CLI Args\n\nArguments of Tarantool CLI:\n\n-   `--cfg | -c` (string) - path to Tarantool CLI config.\n-   `--internal | -I` - use internal module.\n-   `--local | -L` (string) - run Tarantool CLI as local, in the\n    specified directory.\n-   `--system | -S` - run Tarantool CLI as system.\n-   `--help | -h` - help.\n\n### Autocompletion\n\nYou can generate autocompletion for `bash` or `zsh` shell:\n\n``` console\n. <(tt completion bash)\n```\n\nEnter `tt`, press tab and you will see a list of available modules with\ndescriptions. Also, autocomplete supports external modules.  \n   \nFor commands, which argument is app or instance, autocompletion\nwill show suitable apps, in case of the pattern doesn't contain\ndelimiter `:`, and suitable instances otherwise.    \n\nFor `tt create` command it will show a list of built-in templates and\ntemplates from the configuration file.\n\n## TT usage\n\n### Working with a set of instances\n\n`tt` can manage a set of instances based on one source file.\n\nTo work with a set of instances, you need: a directory where the files\nwill be located: `init.lua` and `instances.yml`.\n\n-   `init.lua` - application source file.\n-   `instances.yml` - description of instances.\n\nInstances are described in `instances.yml` with format:\n\n``` yaml\ninstance_name:\n  parameter: value\n```\n\nThe dot and dash characters in instance names are reserved for system\nuse. if it is necessary for a certain instance to work on a source file\nother than `init.lua`, then you need to create a script with a name in\nthe format: `instance_name.init.lua`.\n\nThe following environment variables are associated with each instance:\n\n-   `TARANTOOL_APP_NAME` - application name (the name of the directory\n    where the application files are present).\n-   `TARANTOOL_INSTANCE_NAME` - instance name.\n\n[Example](https://github.com/tarantool/tt/blob/master/doc/examples.md#working-with-a-set-of-instances)\n\n### Working with application templates\n\n`tt` can create applications from templates.\n\nTo work with application template, you need:\n\n-   A `<path>` where templates directories or archives are located.\n\n-   `tt.yaml` configured to search templates in \\<path\\>:\n\n    ``` yaml\n    tt:\n      templates:\n        - path: <path1>\n        - path: <path2>\n    ```\n\nApplication template may contain:\n\n-   `*.tt.template` - template files, that will be instantiated during\n    application creation.\n-   `MANIFEST.yaml` - template manifest (see details below).\n\nTemplate manifest `MANIFEST.yaml` has the following format:\n\n``` yaml\ndescription: Template description\nvars:\n    - prompt: User name\n      name: user_name\n      default: admin\n      re: ^\\w+$\n\n    - prompt: Retry count\n      default: \"3\"\n      name: retry_count\n      re: ^\\d+$\npre-hook: ./hooks/pre-gen.sh\npost-hook: ./hooks/post-gen.sh\ninclude:\n- init.lua\n- instances.yml\n```\n\nWhere:\n\n-   `description` (string) - template description.\n-   `vars` - template variables used for instantiation.\n    -   `prompt` - user prompt for variable value input.\n    -   `name` - variable name.\n    -   `default` - default value of the variable.\n    -   `re` - regular expression used for value validation.\n-   `pre-hook` (string) - executable to run before template\n    instantiation.\n-   `post-hook` (string) - executable to run after template\n    instantiation.\n-   `include` (list) - list of files to keep in application directory\n    after create.\n\nThere are pre-defined variables that can be used in template text:\n`name` - application name. It is set to `--name` CLI argument value.\n\nDon't include the .rocks directory in your application template. To\nspecify application dependencies, use the .rockspec.\n\n[Custom template\nexample](https://github.com/tarantool/tt/blob/master/doc/examples.md#working-with-application-templates)\n\n### Working with tt daemon (experimental)\n\n`tt daemon` module is used to manage `tt` daemon on a given machine.\nThis way instances can be operated remotely. Daemon can be configured\nwith `tt_daemon.yaml` config.\n\n`tt_daemon.yaml` file format:\n\n``` yaml\ndaemon:\n      run_dir: path\n      log_dir: path\n      log_maxsize: num (MB)\n      log_maxage: num (Days)\n      log_maxbackups: num\n      log_file: string (file name)\n      listen_interface: string\n      port: num\n      pidfile: string (file name)\n```\n\nWhere:\n\n-   `run_dir` (string) - path to directory that stores various instance\n    runtime artifacts like console socket, PID file, etc. Default:\n    `run`.\n-   `log_dir` (string) - directory that stores log files. Default:\n    `log`.\n-   `log_maxsize` (number) - the maximum size in MB of the log file\n    before it gets rotated. Default: 100 MB.\n-   `log_maxage` (numder) - is the maximum number of days to retain old\n    log files based on the timestamp encoded in their filename. Note\n    that a day is defined as 24 hours and may not exactly correspond to\n    calendar days due to daylight savings, leap seconds, etc. Default:\n    not to remove old log files based on age.\n-   `log_maxbackups` (number) - the maximum number of old log files to\n    retain. Default: to retain all old log files (though log_maxage may\n    still cause them to get deleted).\n-   `log_file` (string) - name of file contains log of daemon process.\n    Default: `tt_daemon.log`.\n-   `listen_interface` (string) - network interface the IP address\n    should be found on to bind http server socket. Default: loopback\n    (`lo`/`lo0`).\n-   `port` (number) - port number to be used for daemon http server.\n    Default: 1024.\n-   `pidfile` (string) - name of file contains pid of daemon process.\n    Default: `tt_daemon.pid`.\n\n[TT daemon\nexample](https://github.com/tarantool/tt/blob/master/doc/examples.md#working-with-tt-daemon-experimental)\n\n### Setting Tarantool configuration parameters via environment variables\n\nUsing `tt`, you can specify configuration parameters via special\nenvironment variables even on Tarantool versions that does not natively\nsupport it. The name of a variable should have the following pattern:\n`TT_<NAME>`, where `<NAME>` is the uppercase name of the corresponding\n[box.cfg](https://www.tarantool.io/en/doc/latest/reference/configuration/#box-cfg-params-ref)\nparameter.\n\n## Commands\n\nCommon description. For a detailed description, use `tt help command` .\n\n-   `start` - start a tarantool instance(s).\n-   `stop` - stop the tarantool instance(s).\n-   `status` - get current status of the instance(s).\n-   `restart` - restart the instance(s).\n-   `version` - show Tarantool CLI version information.\n-   `completion` - generate autocomplete for a specified shell.\n-   `help` - display help for any command.\n-   `logrotate` - rotate logs of a started tarantool instance(s).\n-   `check` - check an application file for syntax errors.\n-   `connect` - connect to the tarantool instance.\n-   `rocks` - LuaRocks package manager.\n-   `cat` - print into stdout the contents of .snap/.xlog files.\n-   `play` - play the contents of .snap/.xlog files to another Tarantool\n    instance.\n-   `coredump` - pack/unpack/inspect tarantool coredump.\n-   `run` - start a tarantool instance.\n-   `search` - show available tt/tarantool versions.\n-   `clean` - clean instance(s) files.\n-   `create` - create an application from a template.\n-   `build` - build an application.\n-   `install` - install tarantool/tt.\n-   `uninstall` - uninstall tarantool/tt.\n-   `init` - create tt environment configuration file.\n-   `daemon (experimental)` - manage tt daemon.\n-   `cfg dump` - print tt environment configuration.\n-   `pack` - pack an environment into a tarball/RPM/Deb.\n-   `instances` - show enabled applications.\n-   `binaries` - show a list of installed binaries and their versions.\n\n\n[report-badge]: https://goreportcard.com/badge/github.com/tarantool/tt\n[report-url]: https://goreportcard.com/report/github.com/tarantool/tt\n\n[release-badge]: https://img.shields.io/github/v/release/tarantool/tt?include_prereleases&label=Release&labelColor=2d3532\n[release-url]: https://github.com/tarantool/tt/releases\n\n[testing-actions-badge]: https://github.com/tarantool/tt/workflows/Full%20CI/badge.svg\n[testing-actions-url]: https://github.com/tarantool/tt/actions/workflows/full-ci.yml"
}
