{
  "name": "dislocker",
  "full_name": "dislocker",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "FUSE driver to read/write Windows' BitLocker-ed volumes",
  "license": "GPL-2.0-only",
  "homepage": "https://github.com/Aorimn/dislocker",
  "versions": {
    "stable": "0.7.3",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/Aorimn/dislocker/archive/refs/tags/v0.7.3.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "8d5275577c44f2bd87f6e05dd61971a71c0e56a9cbedf000bd38deadd8b6c1e6"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dislocker/blobs/sha256:39d819d5a39665f1de591aa76cda6ac58e334807dc246d6476169964e35998b9",
          "sha256": "39d819d5a39665f1de591aa76cda6ac58e334807dc246d6476169964e35998b9"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [
    "libfuse@2",
    "mbedtls@2"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [
    {
      "name": "linux",
      "cask": null,
      "download": null,
      "version": null,
      "contexts": [],
      "specs": [
        "stable"
      ]
    }
  ],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/dislocker.rb",
  "ruby_source_checksum": {
    "sha256": "39412709f4b24542dead44c89e1383504ce5e07ed729ef0a17a5da9c7cafa840"
  },
  "date_added": "2017-12-01T08:38:26-08:00",
  "readme": "# Dislocker [![Build Status](https://travis-ci.org/Aorimn/dislocker.svg?branch=develop)](https://travis-ci.org/Aorimn/dislocker)\n\n## Introduction and explanations\n\nThis software has been designed to read BitLocker encrypted partitions under a\nLinux system. The driver has the capability to read/write on:\n - Windows Vista, 7, 8, 8.1 and 10 encrypted partitions - that's AES-CBC,\n   AES-XTS, 128 or 256 bits, with or without the Elephant diffuser, encrypted\n   partitions;\n - BitLocker-To-Go encrypted partitions - that's USB/FAT32 partitions.\n\nThe core driver is composed of a library, with multiple binaries (see the NOTES\nsection below) using this library. Two binaries are of interest when wanting to\ndecrypt a BitLocker encrypted partition:\n\n1. `dislocker-fuse`: binary using FUSE to dynamically decrypt the BitLocker-ed\npartition. You have to give it a mount point where, once keys are decrypted, a\nfile named `dislocker-file` appears. This file is a virtual NTFS partition, so\nyou can mount it as any NTFS partition and then read from or write to it. Note\nthat writing to the NTFS virtual file will change the underlying BitLocker\npartition's content.\n\n2. `dislocker-file`: binary decrypting a BitLocker encrypted partition into a flat\nfile. This file has to be given through command line and, once dislocker-file is\nfinished, will be an NTFS partition. It won't have any link to the original\nBitLocker partition. Therefore, if you write to this file, the BitLocker volume\nwon't change, only the NTFS file will. Note that this may take a long time to\ncreate that file, depending on the size of the encrypted partition. But\nafterward, once the partition is decrypted, the access to the NTFS partition\nwill be faster. Another thing to think about is the size on your disk this\nbinary needs: the same size as the volume you're trying to decrypt.\nNevertheless, once the partition is decrypted, you can mount your file as any\nNTFS partition.\n\nThanks goes to Rogier Wolff for testing, hugsy for all the OSX support and\npatches, Will Dyson for the patches, and all the people who give feedbacks.\n\n## Installation and requirements\n\nSee `INSTALL.md` for things dealing with the install process.\nOnce installed, see `dislocker(1)` for details on how to use it.\n\n## Bugs\n\nThere may be bugs, and I'll be happy to hear about it!\n\nFeel free to send comments and feedbacks to [dislocker __AT__ hsc __DOT__ fr](),\nor to open an [issue](https://github.com/Aorimn/dislocker/issues).\n\n## A note on Bitlocker-To-Go\n\nMicrosoft's idea behind BitLocker-To-Go is that computers running Microsoft\noperating systems will be able to mount encrypted removable media without too\nmuch trouble.\n\nTo achieve this, the data on the media has a dual format. First it is\na valid FAT32 filesystem. In that filesystem they store executables and\ndatafiles that allow access to the encrypted volume. Besides that you\nwill see big \"encrypted\" files that hold the actual encrypted volume.\n\nOn the other side, it is a BitLocker volume. Just with some unused space, from\nthe BitLocker point-of-view. That's where the FAT32 stuff lives.\n\nSo, to access a  BitLocker-To-Go encrypted media, the whole partition is the\nvolume that dislocker works with. The use of dislocker is therefore the same\nwhether the volume is a standard BitLocker partition or a BitLocker-To-Go one.\n\n## A note on fstab\n\nBitLocker partitions can be mount-ed using the /etc/fstab file and dislocker's\nlong options.\nThe line below is an example line, which has to be adapted to each case:\n```\n/dev/sda2 /mnt/dislocker fuse.dislocker user-password=blah,nofail 0 0\n```\n\n## Note\n\nFive binaries are built when compiling dislocker as described in the `INSTALL.md`\nfile:\n\n1. `dislocker-bek`: for dissecting a .bek file and printing information about it\n\n2. `dislocker-metadata`: for printing information about a BitLocker-encrypted volume\n\n3. `dislocker-find`: not a binary but a Ruby script which tries to find BitLocker\n  encrypted partition among the plugged-in disks (only work if the library is\n  compiled with the Ruby bindings)\n\n4. `dislocker-file`: for decrypting a BitLocker encrypted partition into a flat file\nformatted as an NTFS partition you can mount\n\n5. `dislocker-fuse`: the one you're using when calling `dislocker',\nwhich dynamically decrypts a BitLocker encrypted partition using FUSE\n\nYou can build each one independently providing it as the makefile target. For\ninstance, if you want to compile dislocker-fuse only, you'd simply run:\n```bash\n$ cmake .\n$ make dislocker-fuse\n```"
}
