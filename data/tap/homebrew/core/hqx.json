{
  "name": "hqx",
  "full_name": "hqx",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Magnification filter designed for pixel art",
  "license": "LGPL-2.1",
  "homepage": "https://github.com/grom358/hqx",
  "versions": {
    "stable": "1.2",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/grom358/hqx.git",
      "tag": "v1.2",
      "revision": "124c9399fa136fb0f743417ca27dfa2ca2860c2d",
      "checksum": null
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 2,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/hqx/blobs/sha256:83b6c8f9ae3cfcf01fd4745bf1170829206069830a119324cf382c7a258ea66b",
          "sha256": "83b6c8f9ae3cfcf01fd4745bf1170829206069830a119324cf382c7a258ea66b"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/hqx/blobs/sha256:09abea6af7106f8bdcf0e58e7b17cd91e1c22074139596a2c4f23afdbf9c9a07",
          "sha256": "09abea6af7106f8bdcf0e58e7b17cd91e1c22074139596a2c4f23afdbf9c9a07"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/hqx/blobs/sha256:d782e36758fe3e2a3b354a3c9e021078230934c2bbc2bd4f7043cf7ad570f542",
          "sha256": "d782e36758fe3e2a3b354a3c9e021078230934c2bbc2bd4f7043cf7ad570f542"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/hqx/blobs/sha256:dcf39c5df3a0caa4b58e68cf62d77fb1f5c75fdfb1c2d1cd31dab8ad263d69f5",
          "sha256": "dcf39c5df3a0caa4b58e68cf62d77fb1f5c75fdfb1c2d1cd31dab8ad263d69f5"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/hqx/blobs/sha256:3d8f69b255851ecfcefd4ddaf2011eb70a2a038868001194fcff7f87c777c891",
          "sha256": "3d8f69b255851ecfcefd4ddaf2011eb70a2a038868001194fcff7f87c777c891"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/hqx/blobs/sha256:8eccb719985ba896880e42efd7266c24ee920c3952441ac90f8fb327c875b1c0",
          "sha256": "8eccb719985ba896880e42efd7266c24ee920c3952441ac90f8fb327c875b1c0"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/hqx/blobs/sha256:d59524a43357e8590e15fbb039891261b2d3c6c33bf073fece8bfa568c3b9710",
          "sha256": "d59524a43357e8590e15fbb039891261b2d3c6c33bf073fece8bfa568c3b9710"
        },
        "mojave": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/hqx/blobs/sha256:3714c62ed8c552ddf8242b87845c5d35d17341d44ffea5cc3feceaa2e4c7e960",
          "sha256": "3714c62ed8c552ddf8242b87845c5d35d17341d44ffea5cc3feceaa2e4c7e960"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/hqx/blobs/sha256:d10418410cbd8fb6be975c40e233a41031491a307ef05a021f5be55e379063cc",
          "sha256": "d10418410cbd8fb6be975c40e233a41031491a307ef05a021f5be55e379063cc"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "autoconf",
    "automake",
    "libtool",
    "pkg-config"
  ],
  "dependencies": [
    "devil"
  ],
  "test_dependencies": [
    "php"
  ],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/hqx.rb",
  "ruby_source_checksum": {
    "sha256": "dc1d2a943c44f68ba0b050bde53103d12cf9e922fd22d1dc862b875c80163e1f"
  },
  "date_added": "2012-03-13T07:04:06-07:00",
  "readme": "hqx Library README\n==================\n\n# Introduction\nhqx (\"hq\" stands for \"high quality\" and \"x\" stands for magnification) is one of the pixel art scaling algorithms developed by Maxim Stepin, used in emulators such as Nestopia, bsnes, ZSNES, Snes9x, FCE Ultra and many more. There are 3 hqx filters: hq2x, hq3x and hq4x which magnify by factor of 2, 3 and 4 respectively.\n\n# Build\n\n    autoreconf -vi\n\n# Install\nNOTE: [DevIL](http://openil.sf.net/) library and development headers are required.\n\n    ./configure\n    make && make install\n\nFor more information refer to INSTALL.\n\n# Usage\nhqx -s scaleBy input output\nWhere scaleBy is either 2, 3 or 4\n\nFor example:\n```\nhqx -s 4 test.png out.png\n```\n\n# Example\n```c\n#include <stdint.h>\n#include <hqx.h>\n\nuint32_t *src; // Pointer to source bitmap in RGB format\nsize_t width, height; // Size of source bitmap\n\n/*\n * Code to init src, width & height\n */\n\nuint32_t *dest = (uint32_t *) malloc(width * 4 * height * 4 * sizeof(uint32_t));\nhqxInit();\nhq4x_32(src, dest, width, height);\n```\n\n# Implementation\nThe first step is an analysis of the 3x3 area of the source pixel. At first, we\ncalculate the color difference between the central pixel and its 8 nearest\nneighbors. Then that difference is compared to a predefined threshold, and these\npixels are sorted into two categories: \"close\" and \"distant\" colored. There are\n8 neighbors, so we are getting 256 possible combinations.\n\nFor the next step, which is filtering, a lookup table with 256 entries is used,\none entry per each combination of close/distant colored neighbors. Each entry\ndescribes how to mix the colors of the source pixels from 3x3 area to get\ninterpolated pixels of the filtered image.\n\nThe present implementation is using YUV color space to calculate color\ndifferences, with more tolerance on Y (brightness) component, then on color\ncomponents U and V. That color space conversion is quite easy to implement if\nthe format of the source image is 16 bit per pixel, using a simple lookup table.\nIt is also possible to calculate the color differences and compare them to a\nthreshold very fast, using MMX instructions.\n\nCreating a lookup table was the most difficult part - for each combination the\nmost probable vector representation of the area has to be determined, with the\nidea of edges between the different colored areas of the image to be preserved,\nwith the edge direction to be as close to a correct one as possible. That vector\nrepresentation is then rasterised with higher (3x) resolution using\nanti-aliasing, and the result is stored in the lookup table.\n\nThe filter was not designed for photographs, but for images with clear sharp\nedges, like line graphics or cartoon sprites. It was also designed to be fast\nenough to process 256x256 images in real-time."
}
