{
  "name": "prr",
  "full_name": "prr",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Mailing list style code reviews for github",
  "license": "GPL-2.0-only",
  "homepage": "https://github.com/danobi/prr",
  "versions": {
    "stable": "0.8.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/danobi/prr/archive/refs/tags/v0.8.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "15fc841f50c3313ca8646240e937fb76b87d5270cd3db64042e48e819745e5af"
    },
    "head": {
      "url": "https://github.com/danobi/prr.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/prr/blobs/sha256:cddba8742edd307becd8bf74510d893108b06bb27771f93b533915c53754c123",
          "sha256": "cddba8742edd307becd8bf74510d893108b06bb27771f93b533915c53754c123"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/prr/blobs/sha256:6f7df8f2c4452b383291d33dae9c24a7e6fbd3986cc890d78f56b1ad3e13085f",
          "sha256": "6f7df8f2c4452b383291d33dae9c24a7e6fbd3986cc890d78f56b1ad3e13085f"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/prr/blobs/sha256:482cd1bb86b33a3dae2819552f8e1a1511393b22dabf17fbe9cb1ff3512b1e79",
          "sha256": "482cd1bb86b33a3dae2819552f8e1a1511393b22dabf17fbe9cb1ff3512b1e79"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/prr/blobs/sha256:118c222fb49ced9d3193cb802160b566206d9d305e553bd151bc26d54ecd8046",
          "sha256": "118c222fb49ced9d3193cb802160b566206d9d305e553bd151bc26d54ecd8046"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/prr/blobs/sha256:3bf4a7ad20bdf2648fefe3459703ae01c29ddd45fb3dc7e40deeb8692c155932",
          "sha256": "3bf4a7ad20bdf2648fefe3459703ae01c29ddd45fb3dc7e40deeb8692c155932"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/prr/blobs/sha256:8d9352097065f6c68ebaf425e9e7c4394429dbf6a3c47901cd6c6c1a499fdd2c",
          "sha256": "8d9352097065f6c68ebaf425e9e7c4394429dbf6a3c47901cd6c6c1a499fdd2c"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/prr/blobs/sha256:81914293781ece90566832ee3736e472b53148b634daabdae6293d7e7d2277f1",
          "sha256": "81914293781ece90566832ee3736e472b53148b634daabdae6293d7e7d2277f1"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust",
    "pkg-config"
  ],
  "dependencies": [
    "openssl@3"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "zlib"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/prr.rb",
  "ruby_source_checksum": {
    "sha256": "87eb1d9c28c4daba03c6c3c61965fb561929326bbcd766ec43a84eab3ed00282"
  },
  "date_added": "2022-08-03T06:03:13+00:00",
  "readme": "# Pull request review\n\n[![Rust](https://github.com/danobi/prr/actions/workflows/rust.yml/badge.svg?branch=master)](https://github.com/danobi/prr/actions/workflows/rust.yml)\n\n`prr` is a tool that brings mailing list style code reviews to Github PRs.\nThis means offline reviews and inline comments, more or less.\n\nTo that end, `prr` introduces a new workflow for reviewing PRs:\n\n1. Download the PR into a \"review file\" on your filesystem\n1. Mark up the review file using your favorite text editor\n1. Submit the review at your convenience\n\nThe tool was born of frustration from using the point-and-click editor text\nboxes on PRs. I happen to do a lot of code review and tabbing to and from the\nbrowser to cross reference code from the changes was driving me nuts.\n\n### Installation / Quickstart\n\n1. Install `prr`:\n\n    - **Option 1:** Install rust toolchain (if you haven't already): https://rustup.rs/\n\n        ```sh\n        $ cargo install prr\n        ```\n\n    - **Option 2:** [Homebrew](https://brew.sh/)\n\n        ```sh\n        $ brew install prr\n        ```\n\n2. Create a Github Personal Access Token (PAT) for `prr`:\n\n    `prr` will need this token so it can make GH API calls on your behalf.\n    Create the token by going to `Settings -> Developer settings -> Personal\n    access tokens -> Generate new token` and give the token `repo` permissions.\n\n    Keep the newly generated token handy for the next step.\n\n3. Create a `prr` config file:\n\n    ```sh\n    $ mkdir -p ~/.config/prr\n\n    $ cat << EOF > ~/.config/prr/config.toml\n    [prr]\n    token = \"$YOUR_PAT_FROM_LAST_STEP\"\n    workdir = \"/home/dxu/dev/review\"\n    EOF\n    ```\n\n    where `$YOUR_PAT_FROM_LAST_STEP` is the PAT token from step 3 and `workdir`\n    is the directory you want `prr` to place all your review files.\n\n4. Review your first PR:\n\n    Feel free to test `prr` out against my test repository, by the way.\n\n    ```sh\n    $ prr get danobi/prr-test-repo/6\n    /home/dxu/dev/review/danobi/prr-test-repo/6.prr\n\n    $ vim /home/dxu/dev/review/danobi/prr-test-repo/6.prr\n\n    $ prr submit danobi/prr-test-repo/6\n    ```\n\n    For details on how to actually mark up the review file, see the next\n    section titled \"Features\"\n\n### Features\n\n#### Review comment\n\nDescription: PR-level review comment. You only get one of these per review.\n\nSyntax: Non-whitespace, non-quoted text at the beginning of the review file.\n\n[Example](examples/review_comment.prr)\n\n#### Inline comment\n\nDescription: Inline comment attached to a specific line of the diff.\n\nSyntax: None-whitespace, non-quoted text on a newline immediately following\na quoted non-header part of the diff.\n\n[Example](examples/inline_comment.prr)\n\n#### Spanned inline comment\n\nDescription: Like an inline comment, except it covers a span of lines.\n\nSyntax: To start a span, insert one or more newlines immediately before\na quoted, non-header part of the diff. To terminate a span, insert a\ninline comment.\n\n[Example](examples/spanned_inline_comment.prr)\n\n#### Review directives\n\nDescription: Meta-directives to give to `prr` in review comment. Currently\nonly supports approving, requesting changes to, and commenting on a PR.\n\nSyntax: `@prr approve`, `@prr reject`, or `@prr comment`.\n\n[Example](examples/prr_directive.prr)\n\n### Vim integration\n\n\"Vim integration\" is a bit overselling it, but I've created some `ftdetect`\nand `syntax` configs to enable syntax highlighting for `prr` review files.\n\nIt can be pretty hard to look at a diff without having deletes and additions\nhighlighted in different colors.\n\n### Config\n\n`prr` supports various configuration options spread over one or more config\nfiles. The global config file must be located at `$XDG_CONFIG_HOME/prr/config.toml`.\nThis typically expands to `$HOME/.config/prr/config.toml`.\n\n`prr` also supports local config files. Local config files must be named\n`.prr.toml` and will be searched for starting from the current working\ndirectory up every parent directory until either the first match or the root\ndirectory is hit. Local config files override values in the global config.\nTable specific semantics are documented below.\n\n#### [prr]\n\nThe `[prr]` table controls installation wide settings.\n\n* `prr.token`: Personal authentication token (required)\n* `prr.workdir`: Directory to place review files (optional)\n* `prr.url`: URL to github API (optional)\n\nIf this table is specified in a local config file, it must be fully specified\nand will override the global config file.\n\n#### [local]\n\nThe `[local]` table contains configuration local to a directory and its\nsub-directories.\n\n* `local.repository`: A string in format of `${ORG}/${REPO}` (optional)\n    * If specified, you may omit the `${ORG}/${REPO}` from PR string arguments.\n      For example, you may run `prr get 6` instead of `prr get danobi/prr/6`.\n\nThis table may not be specified in both a local config file and the global\nconfig file."
}
