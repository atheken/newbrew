{
  "name": "bash-preexec",
  "full_name": "bash-preexec",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Preexec and precmd functions for Bash (like Zsh)",
  "license": "MIT",
  "homepage": "https://github.com/rcaloras/bash-preexec",
  "versions": {
    "stable": "0.5.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/rcaloras/bash-preexec/archive/0.5.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "23c589cd1da209c0598f92fac8d81bb11632ba1b2e68ccaf4ad2c4f3204b877c"
    },
    "head": {
      "url": "https://github.com/rcaloras/bash-preexec.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bash-preexec/blobs/sha256:bbc6178de7bf7f51abae6cba24f2a178efac44b00aa077cde3c5a2a4184a01b3",
          "sha256": "bbc6178de7bf7f51abae6cba24f2a178efac44b00aa077cde3c5a2a4184a01b3"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": "Add the following line to your bash profile (e.g. ~/.bashrc, ~/.profile, or ~/.bash_profile)\n  [ -f $HOMEBREW_PREFIX/etc/profile.d/bash-preexec.sh ] && . $HOMEBREW_PREFIX/etc/profile.d/bash-preexec.sh\n",
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "2706c66e8def3eeba4d9bf1adf66221c8ad70701",
  "ruby_source_path": "Formula/bash-preexec.rb",
  "ruby_source_checksum": {
    "sha256": "c9253fd422623d88135d9a98596b9eff49fa8cdf34671057d77eda84ad80d40a"
  },
  "date_added": "2015-12-06T01:18:38+00:00",
  "readme": "[![Build Status](https://github.com/rcaloras/bash-preexec/actions/workflows/bats.yaml/badge.svg)](https://github.com/rcaloras/bash-preexec/actions/)\n[![GitHub version](https://badge.fury.io/gh/rcaloras%2Fbash-preexec.svg)](https://badge.fury.io/gh/rcaloras%2Fbash-preexec)\n\nBash-Preexec \n============\n\n**preexec** and **precmd** hook functions for Bash 3.1+ in the style of Zsh. They aim to emulate the behavior [as described for Zsh](http://zsh.sourceforge.net/Doc/Release/Functions.html#Hook-Functions).\n\n<a href=\"https://bashhub.com\" target=\"_blank\"><img src=\"https://bashhub.com/assets/images/bashhub-logo.png\" alt=\"Bashhub Logo\" width=\"200\"></a>\n\nThis project is currently being used in production by [Bashhub](https://github.com/rcaloras/bashhub-client), [iTerm2](https://github.com/gnachman/iTerm2), and [Fig](https://fig.io). Hype!\n\n## Quick Start\n```bash\n# Pull down our file from GitHub and write it to your home directory as a hidden file.\ncurl https://raw.githubusercontent.com/rcaloras/bash-preexec/master/bash-preexec.sh -o ~/.bash-preexec.sh\n# Source our file to bring it into our environment\nsource ~/.bash-preexec.sh\n# Define a couple functions.\npreexec() { echo \"just typed $1\"; }\nprecmd() { echo \"printing the prompt\"; }\n```\n\n## Install\nYou'll want to pull down the file and add it to your bash profile/configuration (i.e ~/.bashrc, ~/.profile, ~/.bash_profile, etc). **It must be the last thing imported in your bash profile.**\n```bash\n# Pull down our file from GitHub and write it to your home directory as a hidden file.\ncurl https://raw.githubusercontent.com/rcaloras/bash-preexec/master/bash-preexec.sh -o ~/.bash-preexec.sh\n# Source our file at the end of our bash profile (e.g. ~/.bashrc, ~/.profile, or ~/.bash_profile)\necho '[[ -f ~/.bash-preexec.sh ]] && source ~/.bash-preexec.sh' >> ~/.bashrc\n```\n\n## Usage\nTwo functions **preexec** and **precmd** can now be defined and they'll be automatically invoked by bash-preexec if they exist.\n\n* `preexec` Executed just after a command has been read and is about to be executed. The string that the user typed is passed as the first argument.\n* `precmd` Executed just before each prompt. Equivalent to PROMPT_COMMAND, but more flexible and resilient.\n```bash\nsource ~/.bash-preexec.sh\npreexec() { echo \"just typed $1\"; }\nprecmd() { echo \"printing the prompt\"; }\n```\nShould output something like:\n```\nelementz@Kashmir:~/git/bash-preexec (master)$ ls\njust typed ls\nbash-preexec.sh  README.md  test\nprinting the prompt\n```\n#### Function Arrays\nYou can also define functions to be invoked by appending them to two different arrays. This is great if you want to have many functions invoked for either hook. Both preexec and precmd functions are added to these by default and don't need to be added manually.\n* `$preexec_functions` Array of functions invoked by preexec.\n* `$precmd_functions` Array of functions invoked by precmd.\n\n#### preexec\n```bash\n# Define some function to use preexec\npreexec_hello_world() { echo \"You just entered $1\"; }\n# Add it to the array of functions to be invoked each time.\npreexec_functions+=(preexec_hello_world)\n```\n\n#### precmd\n```bash\nprecmd_hello_world() { echo \"This is invoked before the prompt is displayed\"; }\nprecmd_functions+=(precmd_hello_world)\n```\n\nYou can also define multiple functions to be invoked like so.\n\n```bash\nprecmd_hello_one() { echo \"This is invoked on precmd first\"; }\nprecmd_hello_two() { echo \"This is invoked on precmd second\"; }\nprecmd_functions+=(precmd_hello_one)\nprecmd_functions+=(precmd_hello_two)\n```\n\nYou can check the functions set for each by echoing its contents.\n\n```bash\necho ${preexec_functions[@]}\necho ${precmd_functions[@]}\n```\n\n## Subshells\nbash-preexec does not support invoking preexec() for subshells by default. It must be enabled by setting \n`__bp_enable_subshells`.\n```bash\n# Enable experimental subshell support\nexport __bp_enable_subshells=\"true\"\n```\nThis is disabled by default due to buggy situations related to to `functrace` and Bash's `DEBUG trap`. See [Issue #25](https://github.com/rcaloras/bash-preexec/issues/25)\n\n## Library authors\nIf you want to detect bash-preexec in your library (for example, to add hooks to `preexec_functions` when available), use the Bash variable `bash_preexec_imported`:\n\n```bash\nif [[ -n \"${bash_preexec_imported:-}\" ]]; then\n    echo \"Bash-preexec is loaded.\"\nfi\n```\n\n## Tests\nYou can run tests using [Bats](https://github.com/bats-core/bats-core).\n```bash\nbats test\n```\nShould output something like:\n```\nelementz@Kashmir:~/git/bash-preexec(master)$ bats test\n ✓ No functions defined for preexec should simply return\n ✓ precmd should execute a function once\n ✓ preexec should execute a function with the last command in our history\n ✓ preexec should execute multiple functions in the order added to their arrays\n ✓ preecmd should execute multiple functions in the order added to their arrays\n```"
}
