{
  "name": "sk",
  "full_name": "sk",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Fuzzy Finder in rust!",
  "license": "MIT",
  "homepage": "https://github.com/lotabout/skim",
  "versions": {
    "stable": "0.10.4",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/lotabout/skim/archive/v0.10.4.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "eb5609842ad7c19b1267e77682ee5ae11aa8e84e46c27d9d198cc22d00c5e924"
    },
    "head": {
      "url": "https://github.com/lotabout/skim.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sk/blobs/sha256:e28dbbdb5930443d04b934d8966af2dec58f037f859432f7a412c52568990e1d",
          "sha256": "e28dbbdb5930443d04b934d8966af2dec58f037f859432f7a412c52568990e1d"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sk/blobs/sha256:a96933375963dac24744a541d7835a9694bf9050481e8d302b9f22187a0e8184",
          "sha256": "a96933375963dac24744a541d7835a9694bf9050481e8d302b9f22187a0e8184"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sk/blobs/sha256:e7b9c3bc71263bd5f16a6cdf08cb36e1076ea698f5b26fcac5fa8fe1c82032c1",
          "sha256": "e7b9c3bc71263bd5f16a6cdf08cb36e1076ea698f5b26fcac5fa8fe1c82032c1"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sk/blobs/sha256:afaa23049ae7c7268e5bc86bdba95abe0d99dfe83057c4614ce95ae7ac580830",
          "sha256": "afaa23049ae7c7268e5bc86bdba95abe0d99dfe83057c4614ce95ae7ac580830"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sk/blobs/sha256:de7b821fe89afa96598770fdd98d7b55a78b57be6867284f6e4aa41db9469331",
          "sha256": "de7b821fe89afa96598770fdd98d7b55a78b57be6867284f6e4aa41db9469331"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sk/blobs/sha256:ab8e698b22382f4faed083f426fb8aa1fa0e0393c7e43169deba03021fa502ea",
          "sha256": "ab8e698b22382f4faed083f426fb8aa1fa0e0393c7e43169deba03021fa502ea"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sk/blobs/sha256:9dee90b1f10ffc8ab60ed7549c0c5fb16afda00b94de1a34eee59ffd21205412",
          "sha256": "9dee90b1f10ffc8ab60ed7549c0c5fb16afda00b94de1a34eee59ffd21205412"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/sk.rb",
  "ruby_source_checksum": {
    "sha256": "499c25e25be2b33f6b81098478c19d042cb7dd804d201396420230dcaa77e2f8"
  },
  "date_added": "2019-04-14T21:33:53+01:00",
  "readme": "<p align=\"center\">\n  <a href=\"https://crates.io/crates/skim\">\n    <img src=\"https://img.shields.io/crates/v/skim.svg\" alt=\"Crates.io\" />\n  </a>\n  <a href=\"https://github.com/lotabout/skim/actions?query=workflow%3A%22Build+%26+Test%22\">\n    <img src=\"https://github.com/lotabout/skim/workflows/Build%20&%20Test/badge.svg\" alt=\"Build & Test\" />\n  </a>\n  <a href=\"https://repology.org/project/skim/versions\">\n    <img src=\"https://repology.org/badge/tiny-repos/skim.svg\" alt=\"Packaging status\" />\n  </a>\n  <a href=\"https://discord.gg/23PuxttufP\">\n    <img alt=\"Skim Discord\" src=\"https://img.shields.io/discord/1031830957432504361?label=&color=7389d8&labelColor=6a7ec2&logoColor=ffffff&logo=discord\" />\n  </a>\n</p>\n\n> Life is short, skim!\n\nHalf of our life is spent on navigation: files, lines, commandsâ€¦ You need skim!\nIt is a general fuzzy finder that saves you time.\n\n[![skim demo](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm.svg)](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm)\n\nskim provides a single executable: `sk`. Basically anywhere you would want to use\n`grep`, try `sk` instead.\n\n# Table of contents\n\n- [Installation](#installation)\n- [Usage](#usage)\n    - [As Filter](#as-filter)\n    - [As Interactive Interface](#as-interactive-interface)\n    - [Key Bindings](#key-bindings)\n    - [Search Syntax](#search-syntax)\n    - [Exit code](#exit-code)\n- [Customization](#customization)\n    - [Keymap to redefine](#keymap)\n    - [Sort Criteria](#sort-criteria)\n    - [Color Scheme](#color-scheme)\n    - [Misc](#misc)\n- [Advance Topics](#advance-topics)\n    - [Interactive Mode](#interactive-mode)\n    - [Executing external programs](#executing-external-programs)\n    - [Preview Window](#preview-window)\n    - [Fields Support](#fields-support)\n    - [Use as a Library](#use-as-a-library)\n- [FAQ](#faq)\n    - [How to ignore files?](#how-to-ignore-files)\n    - [Some files are not shown in vim plugin](#some-files-are-not-shown-in-vim-plugin)\n- [Differences to fzf](#differences-to-fzf)\n- [How to contribute](#how-to-contribute)\n\n# Installation\n\nThe skim project contains several components:\n\n1. `sk` executable -- the core.\n2. `sk-tmux` -- script for launching `sk` in a tmux pane.\n3. Vim/Nvim plugin -- to call `sk` inside Vim/Nvim. check [skim.vim](https://github.com/lotabout/skim.vim) for more Vim support.\n\n## Package Managers\n\n| Distribution   | Package Manager   | Command                      |\n| -------------- | ----------------- | ---------------------------- |\n| macOS          | Homebrew          | `brew install sk`            |\n| macOS          | MacPorts          | `sudo port install skim`     |\n| Fedora         | dnf               | `dnf install skim`           |\n| Alpine         | apk               | `apk add skim`               |\n| Arch           | pacman            | `pacman -S skim`             |\n| Gentoo         | Portage           | `emerge --ask app-misc/skim` |\n\nSee [repology](https://repology.org/project/skim/versions) for a comprehensive overview of package availability.\n\n\n## Install as Vim plugin\n\nVia vim-plug (recommended):\n\n```vim\nPlug 'lotabout/skim', { 'dir': '~/.skim', 'do': './install' }\n```\n\n## Hard Core\n\nAny of the following applies:\n\n- Using Git\n    ```sh\n    $ git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim\n    $ ~/.skim/install\n    ```\n- Using Binary: directly [download the sk executable](https://github.com/lotabout/skim/releases).\n- Install from [crates.io](https://crates.io/): `cargo install skim`\n- Build Manually\n    ```sh\n    $ git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim\n    $ cd ~/.skim\n    $ cargo install\n    $ cargo build --release\n    $ # put the resulting `target/release/sk` executable on your PATH.\n    ```\n\n# Usage\n\nskim can be used as a general filter (like `grep`) or as an interactive\ninterface for invoking commands.\n\n## As filter\n\nTry the following\n\n```bash\n# directly invoke skim\nsk\n\n# or pipe some input to it: (press TAB key select multiple items with -m enabled)\nvim $(find . -name \"*.rs\" | sk -m)\n```\nThe above command will allow you to select files with \".rs\" extension and open\nthe ones you selected in Vim.\n\n## As Interactive Interface\n\n`skim` can invoke other commands dynamically. Normally you would want to\nintegrate it with [grep](https://www.gnu.org/software/grep/),\n[ack](https://github.com/petdance/ack2),\n[ag](https://github.com/ggreer/the_silver_searcher), or\n[rg](https://github.com/BurntSushi/ripgrep) for searching contents in a\nproject directory:\n\n```sh\n# works with grep\nsk --ansi -i -c 'grep -rI --color=always --line-number \"{}\" .'\n# works with ack\nsk --ansi -i -c 'ack --color \"{}\"'\n# works with ag\nsk --ansi -i -c 'ag --color \"{}\"'\n# works with rg\nsk --ansi -i -c 'rg --color=always --line-number \"{}\"'\n```\n\n![interactive mode demo](https://cloud.githubusercontent.com/assets/1527040/21603930/655d859a-d1db-11e6-9fec-c25099d30a12.gif)\n\n## Key Bindings\n\nSome commonly used key bindings:\n\n| Key               | Action                                     |\n|------------------:|--------------------------------------------|\n| Enter             | Accept (select current one and quit)       |\n| ESC/Ctrl-G        | Abort                                      |\n| Ctrl-P/Up         | Move cursor up                             |\n| Ctrl-N/Down       | Move cursor Down                           |\n| TAB               | Toggle selection and move down (with `-m`) |\n| Shift-TAB         | Toggle selection and move up (with `-m`)   |\n\nFor full list of key bindings, check out the [man\npage](https://github.com/lotabout/skim/blob/master/man/man1/sk.1) (`man sk`).\n\n## Search Syntax\n\n`skim` borrowed `fzf`'s syntax for matching items:\n\n| Token    | Match type                 | Description                       |\n|----------|----------------------------|-----------------------------------|\n| `text`   | fuzzy-match                | items that match `text`           |\n| `^music` | prefix-exact-match         | items that start with `music`     |\n| `.mp3$`  | suffix-exact-match         | items that end with `.mp3`        |\n| `'wild`  | exact-match (quoted)       | items that include `wild`         |\n| `!fire`  | inverse-exact-match        | items that do not include `fire`  |\n| `!.mp3$` | inverse-suffix-exact-match | items that do not end with `.mp3` |\n\n`skim` also supports the combination of tokens.\n\n- Whitespace has the meaning of `AND`. With the term `src main`, `skim` will search\n    for items that match **both** `src` and `main`.\n- ` | ` means `OR` (note the spaces around `|`). With the term `.md$ |\n    .markdown$`, `skim` will search for items ends with either `.md` or\n    `.markdown`.\n- `OR` has higher precedence. So `readme .md$ | .markdown$` is grouped into\n    `readme AND (.md$ OR .markdown$)`.\n\nIn case that you want to use regular expressions, `skim` provides `regex` mode:\n\n```sh\nsk --regex\n```\n\nYou can switch to `regex` mode dynamically by pressing `Ctrl-R` (Rotate Mode).\n\n## exit code\n\n| Exit Code | Meaning                           |\n|-----------|-----------------------------------|\n| 0         | Exit normally                     |\n| 1         | No Match found                    |\n| 130       | Abort by Ctrl-C/Ctrl-G/ESC/etc... |\n\n# Customization\n\nThe doc here is only a preview, please check the man page (`man sk`) for a full\nlist of options.\n\n## Keymap\n\nSpecify the bindings with comma separated pairs (no space allowed), example:\n\n```sh\nsk --bind 'alt-a:select-all,alt-d:deselect-all'\n```\n\nAdditionally, use `+` to concatenate actions, such as `execute-silent(echo {} | pbcopy)+abort`.\n\nSee the _KEY BINDINGS_ section of the man page for details.\n\n## Sort Criteria\n\nThere are five sort keys for results: `score, index, begin, end, length`, you can\nspecify how the records are sorted by `sk --tiebreak score,index,-begin` or any\nother order you want.\n\n## Color Scheme\n\nIt is a high chance that you are a better artist than me. Luckily you won't\nbe stuck with the default colors, `skim` supports customization of the color scheme.\n\n```sh\n--color=[BASE_SCHEME][,COLOR:ANSI]\n```\n\nThe configuration of colors starts with the name of the base color scheme,\nfollowed by custom color mappings. For example:\n\n\n```sh\nsk --color=current_bg:24\nsk --color=light,fg:232,bg:255,current_bg:116,info:27\n```\n\nSee `--color` option in the man page for details.\n\n## Misc\n\n- `--ansi`: to parse ANSI color codes (e.g., `\\e[32mABC`) of the data source\n- `--regex`: use the query as regular expression to match the data source\n\n# Advanced Topics\n\n## Interactive mode\n\nWith \"interactive mode\", you could invoke command dynamically. Try out:\n\n```sh\nsk --ansi -i -c 'rg --color=always --line-number \"{}\"'\n```\n\nHow it works?\n\n![skim's interactive mode](https://user-images.githubusercontent.com/1527040/53381293-461ce380-39ab-11e9-8e86-7c3bbfd557bc.png)\n\n- Skim could accept two kinds of source: command output or piped input\n- Skim has two kinds of prompts: A query prompt to specify the query pattern and a\n    command prompt to specify the \"arguments\" of the command\n- `-c` is used to specify the command to execute while defaults to `SKIM_DEFAULT_COMMAND`\n- `-i` is to tell skim open command prompt on startup, which will show `c>` by default.\n\nIf you want to further narrow down the results returned by the command, press\n`Ctrl-Q` to toggle interactive mode.\n\n## Executing external programs\n\nYou can set up key bindings for starting external processes without leaving skim (`execute`, `execute-silent`).\n\n```sh\n# Press F1 to open the file with less without leaving skim\n# Press CTRL-Y to copy the line to clipboard and aborts skim (requires pbcopy)\nsk --bind 'f1:execute(less -f {}),ctrl-y:execute-silent(echo {} | pbcopy)+abort'\n```\n\n## Preview Window\n\nThis is a great feature of fzf that skim borrows. For example, we use 'ag' to\nfind the matched lines, once we narrow down to the target lines, we want to\nfinally decide which lines to pick by checking the context around the line.\n`grep` and `ag` has an option `--context`, skim can do better with preview\nwindow. For example:\n\n```sh\nsk --ansi -i -c 'ag --color \"{}\"' --preview \"preview.sh {}\"\n```\n\n(Note the [preview.sh](https://github.com/junegunn/fzf.vim/blob/master/bin/preview.sh) is a script to print the context given filename:lines:columns)\nYou got things like this:\n\n![preview demo](https://user-images.githubusercontent.com/1527040/30677573-0cee622e-9ebf-11e7-8316-c741324ecb3a.png)\n\n### How does it work?\n\nIf the preview command is given by the `--preview` option, skim will replace the\n`{}` with the current highlighted line surrounded by single quotes, call the\ncommand to get the output, and print the output on the preview window.\n\nSometimes you don't need the whole line for invoking the command. In this case\nyou can use `{}`, `{1..}`, `{..3}` or `{1..5}` to select the fields. The\nsyntax is explained in the section \"Fields Support\".\n\nLast, you might want to configure the position of preview windows, use\n`--preview-window`.\n- `--preview-window up:30%` to put the window in the up position with height\n    30% of the total height of skim.\n- `--preview-window left:10:wrap`, to specify the `wrap` allows the preview\n    window to wrap the output of the preview command.\n- `--preview-window wrap:hidden` to hide the preview window at startup, later\n    it can be shown by the action `toggle-preview`.\n\n## Fields support\n\nNormally only plugin users need to understand this.\n\nFor example, you have the data source with the format:\n\n```sh\n<filename>:<line number>:<column number>\n```\n\nHowever, you want to search `<filename>` only when typing in queries. That\nmeans when you type `21`, you want to find a `<filename>` that contains `21`,\nbut not matching line number or column number.\n\nYou can use `sk --delimiter ':' --nth 1` to achieve this.\n\nAlso you can use `--with-nth` to re-arrange the order of fields.\n\n**Range Syntax**\n\n- `<num>` -- to specify the `num`-th fields, starting with 1.\n- `start..` -- starting from the `start`-th fields, and the rest.\n- `..end` -- starting from the `0`-th field, all the way to `end`-th field,\n    including `end`.\n- `start..end` -- starting from `start`-th field, all the way to `end`-th\n    field, including `end`.\n\n## Use as a library\n\nSkim can be used as a library in your Rust crates.\n\nFirst, add skim into your `Cargo.toml`:\n\n```toml\n[dependencies]\nskim = \"*\"\n```\n\nThen try to run this simple example:\n\n```rust\nextern crate skim;\nuse skim::prelude::*;\nuse std::io::Cursor;\n\npub fn main() {\n    let options = SkimOptionsBuilder::default()\n        .height(Some(\"50%\"))\n        .multi(true)\n        .build()\n        .unwrap();\n\n    let input = \"aaaaa\\nbbbb\\nccc\".to_string();\n\n    // `SkimItemReader` is a helper to turn any `BufRead` into a stream of `SkimItem`\n    // `SkimItem` was implemented for `AsRef<str>` by default\n    let item_reader = SkimItemReader::default();\n    let items = item_reader.of_bufread(Cursor::new(input));\n\n    // `run_with` would read and show items from the stream\n    let selected_items = Skim::run_with(&options, Some(items))\n        .map(|out| out.selected_items)\n        .unwrap_or_else(|| Vec::new());\n\n    for item in selected_items.iter() {\n        print!(\"{}{}\", item.output(), \"\\n\");\n    }\n}\n```\n\nGiven an `Option<SkimItemReceiver>`, skim will read items accordingly, do its\njob and bring us back the user selection including the selected items, the\nquery, etc. Note that:\n\n- `SkimItemReceiver` is `crossbeam::channel::Receiver<Arc<dyn SkimItem>>`\n- If it is none, it will invoke the given command and read items from command output\n- Otherwise, it will read the items from the (crossbeam) channel.\n\nTrait `SkimItem` is provided to customize how a line could be displayed,\ncompared and previewed. It is implemented by default for `AsRef<str>`\n\nPlus, `SkimItemReader` is a helper to convert a `BufRead` into\n`SkimItemReceiver` (we can easily turn a `File` for `String` into `BufRead`).\nSo that you could deal with strings or files easily.\n\nCheck more examples under [examples/](https://github.com/lotabout/skim/tree/master/examples) directory.\n\n# FAQ\n\n## How to ignore files?\n\nSkim invokes `find .` to fetch a list of files for filtering. You can override\nthat by setting the environment variable `SKIM_DEFAULT_COMMAND`. For example:\n\n```sh\n$ SKIM_DEFAULT_COMMAND=\"fd --type f || git ls-tree -r --name-only HEAD || rg --files || find .\"\n$ sk\n```\n\nYou could put it in your `.bashrc` or `.zshrc` if you like it to be default.\n\n## Some files are not shown in Vim plugin\n\nIf you use the Vim plugin and execute the `:SK` command, you might find some\nof your files not shown.\n\nAs described in [#3](https://github.com/lotabout/skim/issues/3), in the Vim\nplugin, `SKIM_DEFAULT_COMMAND` is set to the command by default:\n\n```vim\nlet $SKIM_DEFAULT_COMMAND = \"git ls-tree -r --name-only HEAD || rg --files || ag -l -g \\\"\\\" || find .\"\n```\n\nThat means, the files not recognized by git will not shown. Either override the\ndefault with `let $SKIM_DEFAULT_COMMAND = ''` or find the missing file by\nyourself.\n\n# Differences to fzf\n\n[fzf](https://github.com/junegunn/fzf) is a command-line fuzzy finder written\nin Go and [skim](https://github.com/lotabout/skim) tries to implement a new one\nin Rust!\n\nThis project is written from scratch. Some decisions of implementation are\ndifferent from fzf. For example:\n\n1. `skim` is a binary as well as a library while fzf is only a binary.\n2. `skim` has an interactive mode.\n3. `skim` supports pre-selection\n4. The fuzzy search algorithm is different.\n5. ~~UI of showing matched items. `fzf` will show only the range matched while\n   `skim` will show each character matched.~~ (fzf has this now)\n6. ~~`skim`'s range syntax is Git style~~: now it is the same with fzf.\n\n# How to contribute\n\n[Create new issues](https://github.com/lotabout/skim/issues/new) if you meet any bugs\nor have any ideas. Pull requests are warmly welcomed.\n\n# Troubleshooting\n\n## No line feed issues with nix , FreeBSD, termux\n\nIf you encounter display issues like:\n\n```bash\n$ for n in {1..10}; do echo \"$n\"; done | sk\n  0/10 0/0.> 10/10  10  9  8  7  6  5  4  3  2> 1\n```\n\nFor example\n\n- https://github.com/lotabout/skim/issues/412\n- https://github.com/lotabout/skim/issues/455\n\nYou need to set TERMINFO or TERMINFO_DIRS to the path to a correct terminfo database path\n\nFor example, with termux, you can add in your bashr:\n\n```\nexport TERMINFO=/data/data/com.termux/files/usr/share/terminfo\n```"
}
