{
  "name": "primecount",
  "full_name": "primecount",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Fast prime counting function program and C/C++ library",
  "license": "BSD-2-Clause",
  "homepage": "https://github.com/kimwalisch/primecount",
  "versions": {
    "stable": "7.9",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/kimwalisch/primecount/archive/refs/tags/v7.9.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "872975ba2cbb43f5cc1ff5f5fda9ec4ec3f2be1eb3e3e906abe5d0b29a997f5b"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/primecount/blobs/sha256:2cd3fe1055bb9ce4063eb098b6273732463728f193e0e0ed5d9add00d74a9dae",
          "sha256": "2cd3fe1055bb9ce4063eb098b6273732463728f193e0e0ed5d9add00d74a9dae"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/primecount/blobs/sha256:60030cdaabb4d4bb378b7dbfde0236972f43f1e79f709e0c2b369158b75e6eb5",
          "sha256": "60030cdaabb4d4bb378b7dbfde0236972f43f1e79f709e0c2b369158b75e6eb5"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/primecount/blobs/sha256:64f337ab4851f0c1d164097818e71e1344ceaebc93617f1b7ac6e01a6a21fd5a",
          "sha256": "64f337ab4851f0c1d164097818e71e1344ceaebc93617f1b7ac6e01a6a21fd5a"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/primecount/blobs/sha256:5985fd7228b47c055cf511215d17c38fe098402f243fc5b57c604d70b87820b2",
          "sha256": "5985fd7228b47c055cf511215d17c38fe098402f243fc5b57c604d70b87820b2"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/primecount/blobs/sha256:e03aa189690d2f7c2936898c782366ded4b32683d6d7b9f4c2b936ea25c68ee1",
          "sha256": "e03aa189690d2f7c2936898c782366ded4b32683d6d7b9f4c2b936ea25c68ee1"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/primecount/blobs/sha256:b2ac0708bb66d3e9433696888b0da707ab1eda5d92aa1f79b7c1313d2950049a",
          "sha256": "b2ac0708bb66d3e9433696888b0da707ab1eda5d92aa1f79b7c1313d2950049a"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/primecount/blobs/sha256:7fad895ddd225f61047d98a2fdf6562cbdc91ed3a9af0ef63eab7dcc0a9367ed",
          "sha256": "7fad895ddd225f61047d98a2fdf6562cbdc91ed3a9af0ef63eab7dcc0a9367ed"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [
    "primesieve"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/primecount.rb",
  "ruby_source_checksum": {
    "sha256": "b1a40947f2a7467b5b68df0a8b8b7c9af1b7a46ba9129c207f2a96667dc52658"
  },
  "date_added": "2022-05-05T06:52:02+00:00",
  "readme": "# primecount\n\n[![Build status](https://github.com/kimwalisch/primecount/actions/workflows/ci.yml/badge.svg)](https://github.com/kimwalisch/primecount/actions/workflows/ci.yml) [![Build Status](https://ci.appveyor.com/api/projects/status/github/kimwalisch/primecount?branch=master&svg=true)](https://ci.appveyor.com/project/kimwalisch/primecount)\n[![Github Releases](https://img.shields.io/github/release/kimwalisch/primecount.svg)](https://github.com/kimwalisch/primecount/releases)\n\nprimecount is a command-line program and [C/C++ library](doc/libprimecount.md)\nthat counts the number of primes&nbsp;≤&nbsp;x (maximum 10<sup>31</sup>) using\n**highly optimized** implementations of the combinatorial\n[prime counting algorithms](https://en.wikipedia.org/wiki/Prime-counting_function#Algorithms_for_evaluating_%CF%80(x)).\n\nprimecount includes implementations of all important combinatorial\nprime counting algorithms known up to this date all of which have\nbeen parallelized using [OpenMP](https://en.wikipedia.org/wiki/OpenMP).\nprimecount contains the first ever open source implementations of\nthe Deleglise-Rivat algorithm and Xavier Gourdon's algorithm (that works).\nprimecount also features a [novel load balancer](https://github.com/kimwalisch/primecount/blob/master/src/LoadBalancerS2.cpp)\nthat is shared amongst all implementations and that scales up to\nhundreds of CPU cores. primecount has already been used to compute\nseveral prime counting function [world records](doc/Records.md).\n\n## Installation\n\nThe primecount command-line program is available in a few package managers.\nFor doing development with libprimecount you may need to install\n```libprimecount-dev``` or ```libprimecount-devel```.\n\n<table>\n    <tr>\n        <td><b>Windows:</b></td>\n        <td><code>winget install primecount</code></td>\n    </tr>\n    <tr>\n        <td><b>macOS:</b></td>\n        <td><code>brew install primecount</code></td>\n    </tr>\n    <tr>\n        <td><b>Arch Linux:</b></td>\n        <td><code>sudo pacman -S primecount</code></td>\n    </tr>\n    <tr>\n        <td><b>Debian/Ubuntu:</b></td>\n        <td><code>sudo apt install primecount</code></td>\n    </tr>\n    <tr>\n        <td><b>Fedora:</b></td>\n        <td><code>sudo dnf install primecount</code></td>\n    </tr>\n    <tr>\n        <td><b>FreeBSD:</b></td>\n        <td><code>pkg install primecount</code></td>\n    </tr>\n    <tr>\n        <td><b>openSUSE:</b></td>\n        <td><code>sudo zypper install primecount</code></td>\n    </tr>\n</table>\n\n## Build instructions\n\nYou need to have installed a C++ compiler and CMake. Ideally\nprimecount should be compiled using GCC or Clang as these compilers\nsupport both OpenMP (multi-threading library) and 128-bit integers.\n\n```sh\ncmake .\ncmake --build . --parallel\nsudo cmake --install .\nsudo ldconfig\n```\n\n* [Detailed build instructions](doc/BUILD.md)\n\n## Usage examples\n\n```sh\n# Count the primes ≤ 10^14\nprimecount 1e14\n\n# Print progress and status information during computation\nprimecount 1e20 --status\n\n# Count primes using Meissel's algorithm\nprimecount 2**32 --meissel\n\n# Find the 10^14th prime using 4 threads\nprimecount 1e14 --nth-prime --threads=4 --time\n```\n\n## Command-line options\n\n```\nUsage: primecount x [options]\nCount the number of primes less than or equal to x (<= 10^31).\n\nOptions:\n\n  -d, --deleglise-rivat  Count primes using the Deleglise-Rivat algorithm\n  -g, --gourdon          Count primes using Xavier Gourdon's algorithm.\n                         This is the default algorithm.\n  -l, --legendre         Count primes using Legendre's formula\n      --lehmer           Count primes using Lehmer's formula\n      --lmo              Count primes using Lagarias-Miller-Odlyzko\n  -m, --meissel          Count primes using Meissel's formula\n      --Li               Approximate pi(x) using the logarithmic integral\n      --Li-inverse       Approximate the nth prime using Li^-1(x)\n  -n, --nth-prime        Calculate the nth prime\n  -p, --primesieve       Count primes using the sieve of Eratosthenes\n      --phi <X> <A>      phi(x, a) counts the numbers <= x that are not\n                         divisible by any of the first a primes\n      --Ri               Approximate pi(x) using Riemann R\n      --Ri-inverse       Approximate the nth prime using Ri^-1(x)\n  -s, --status[=NUM]     Show computation progress 1%, 2%, 3%, ...\n                         Set digits after decimal point: -s1 prints 99.9%\n      --test             Run various correctness tests and exit\n      --time             Print the time elapsed in seconds\n  -t, --threads=NUM      Set the number of threads, 1 <= NUM <= CPU cores.\n                         By default primecount uses all available CPU cores.\n  -v, --version          Print version and license information\n  -h, --help             Print this help menu\n```\n\n<details>\n<summary>Advanced options</summary>\n\n```\nAdvanced options for the Deleglise-Rivat algorithm:\n\n  -a, --alpha=NUM        Set tuning factor: y = x^(1/3) * alpha\n      --P2               Compute the 2nd partial sieve function\n      --S1               Compute the ordinary leaves\n      --S2-trivial       Compute the trivial special leaves\n      --S2-easy          Compute the easy special leaves\n      --S2-hard          Compute the hard special leaves\n\nAdvanced options for Xavier Gourdon's algorithm:\n\n      --alpha-y=NUM      Set tuning factor: y = x^(1/3) * alpha_y\n      --alpha-z=NUM      Set tuning factor: z = y * alpha_z\n      --AC               Compute the A + C formulas\n      --B                Compute the B formula\n      --D                Compute the D formula\n      --Phi0             Compute the Phi0 formula\n      --Sigma            Compute the 7 Sigma formulas\n```\n\n</details>\n\n## Benchmarks\n\n<table>\n  <tr align=\"center\">\n    <td><b>x</b></td>\n    <td><b>Prime Count</b></td>\n    <td><b>Legendre</b></td>\n    <td><b>Meissel</b></td>\n    <td><b>Lagarias<br/>Miller<br/>Odlyzko</b></td>\n    <td><b>Deleglise<br/>Rivat</b></td>\n    <td><b>Gourdon</b></td>\n  </tr>\n  <tr align=\"right\">\n    <td>10<sup>10</sup></td>\n    <td>455,052,511</td>\n    <td>0.01s</td>\n    <td>0.01s</td>\n    <td>0.01s</td>\n    <td>0.01s</td>\n    <td>0.00s</td>\n  </tr>\n  <tr align=\"right\">\n    <td>10<sup>11</sup></td>\n    <td>4,118,054,813</td>\n    <td>0.01s</td>\n    <td>0.01s</td>\n    <td>0.01s</td>\n    <td>0.01s</td>\n    <td>0.01s</td>\n  </tr>\n  <tr align=\"right\">\n    <td>10<sup>12</sup></td>\n    <td>37,607,912,018</td>\n    <td>0.03s</td>\n    <td>0.02s</td>\n    <td>0.02s</td>\n    <td>0.01s</td>\n    <td>0.01s</td>\n  </tr>\n  <tr align=\"right\">\n    <td>10<sup>13</sup></td>\n    <td>346,065,536,839</td>\n    <td>0.09s</td>\n    <td>0.06s</td>\n    <td>0.03s</td>\n    <td>0.02s</td>\n    <td>0.03s</td>\n  </tr>\n  <tr align=\"right\">\n    <td>10<sup>14</sup></td>\n    <td>3,204,941,750,802</td>\n    <td>0.44s</td>\n    <td>0.20s</td>\n    <td>0.08s</td>\n    <td>0.08s</td>\n    <td>0.04s</td>\n  </tr>\n  <tr align=\"right\">\n    <td>10<sup>15</sup></td>\n    <td>29,844,570,422,669</td>\n    <td>2.33s</td>\n    <td>0.89s</td>\n    <td>0.29s</td>\n    <td>0.16s</td>\n    <td>0.11s</td>\n  </tr>\n  <tr align=\"right\">\n    <td>10<sup>16</sup></td>\n    <td>279,238,341,033,925</td>\n    <td>15.49s</td>\n    <td>5.10s</td>\n    <td>1.26s</td>\n    <td>0.58s</td>\n    <td>0.38s</td>\n  </tr>\n  <tr align=\"right\">\n    <td>10<sup>17</sup></td>\n    <td>2,623,557,157,654,233</td>\n    <td>127.10s</td>\n    <td>39.39s</td>\n    <td>5.62s</td>\n    <td>2.26s</td>\n    <td>1.34s</td>\n  </tr>\n  <tr align=\"right\">\n    <td>10<sup>18</sup></td>\n    <td>24,739,954,287,740,860</td>\n    <td>1,071.14s</td>\n    <td>366.93s</td>\n    <td>27.19s</td>\n    <td>9.96s</td>\n    <td>5.35s</td>\n  </tr>\n  <tr align=\"right\">\n    <td>10<sup>19</sup></td>\n    <td>234,057,667,276,344,607</td>\n    <td>NaN</td>\n    <td>NaN</td>\n    <td>NaN</td>\n    <td>40.93s</td>\n    <td>20.16s</td>\n  </tr>\n  <tr align=\"right\">\n    <td>10<sup>20</sup></td>\n    <td>2,220,819,602,560,918,840</td>\n    <td>NaN</td>\n    <td>NaN</td>\n    <td>NaN</td>\n    <td>167.64s</td>\n    <td>81.98s</td>\n  </tr>\n  <tr align=\"right\">\n    <td>10<sup>21</sup></td>\n    <td>21,127,269,486,018,731,928</td>\n    <td>NaN</td>\n    <td>NaN</td>\n    <td>NaN</td>\n    <td>706.70s</td>\n    <td>353.01s</td>\n  </tr>\n  <tr align=\"right\">\n    <td>10<sup>22</sup></td>\n    <td>201,467,286,689,315,906,290</td>\n    <td>NaN</td>\n    <td>NaN</td>\n    <td>NaN</td>\n    <td>3,012.10s</td>\n    <td>1,350.47s</td>\n  </tr>\n</table>\n\nThe benchmarks above were run on an AMD 7R32 CPU (from 2020) with 16 cores/32 threads\nclocked at 3.30GHz. Note that Jan Büthe mentions in <a href=\"doc/References.md\">[11]</a>\nthat he computed $\\pi(10^{25})$ in 40,000 CPU core hours using the analytic prime\ncounting function algorithm. Büthe also mentions that by using additional zeros of the\nzeta function the runtime could have potentially been reduced to 4,000 CPU core hours.\nHowever using primecount and Xavier Gourdon's algorithm $\\pi(10^{25})$ can be computed\nin only 460 CPU core hours on an AMD Ryzen 3950X CPU!\n\n## Performance tips\n\nIf you have an x64 CPU and you have installed primecount using the package manager of\nyour Linux distribution, then it is possible that the ```POPCNT``` instruction has been\ndisabled in order to ensure that primecount works on very old CPUs. Unfortunately this\ndecreases performance by about 30%. On the other hand, if you compile primecount from\nsource the ```POPCNT``` instruction will be enabled by default. The fastest primecount\nbinary can be built using the ```-march=native``` option.\n\n```bash\nCXXFLAGS=\"-march=native\" cmake .\ncmake --build . --parallel\n```\n\nBy default primecount scales nicely up until 10<sup>23</sup> on current x64 CPUs.\nFor larger values primecount's large memory usage causes many\n[TLB (translation lookaside buffer)](https://en.wikipedia.org/wiki/Translation_lookaside_buffer)\ncache misses that significantly deteriorate primecount's performance.\nFortunately the Linux kernel allows to enable\n[transparent huge pages](https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html)\nso that large memory allocations will automatically be done using huge\npages instead of ordinary pages which dramatically reduces the number of\nTLB cache misses.\n\n```bash\n# Enable transparent huge pages until next reboot\nsudo bash -c 'echo always > /sys/kernel/mm/transparent_hugepage/enabled'\n```\n\n## Algorithms\n\n<table>\n  <tr>\n    <td>Legendre's Formula</td>\n    <td>$\\pi(x)=\\pi(\\sqrt{x})+\\phi(x,\\pi(\\sqrt{x}))-1$</td>\n  </tr>\n  <tr>\n    <td>Meissel's Formula</td>\n    <td>$\\pi(x)=\\pi(\\sqrt[3]{x})+\\phi(x,\\pi(\\sqrt[3]{x}))-\\mathrm{P_2}(x,\\pi(\\sqrt[3]{x}))-1$</td>\n  </tr>\n  <tr>\n    <td>Lehmer's Formula</td>\n    <td>$\\pi(x)=\\pi(\\sqrt[4]{x})+\\phi(x,\\pi(\\sqrt[4]{x}))-\\mathrm{P_2}(x,\\pi(\\sqrt[4]{x}))-\\mathrm{P_3}(x,\\pi(\\sqrt[4]{x}))-1$</td>\n  </tr>\n  <tr>\n    <td>LMO Formula</td>\n    <td>$\\pi(x)=\\pi(\\sqrt[3]{x})+\\mathrm{S_1}(x,\\pi(\\sqrt[3]{x}))+\\mathrm{S_2}(x,\\pi(\\sqrt[3]{x}))-\\mathrm{P_2}(x,\\pi(\\sqrt[3]{x}))-1$</td>\n  </tr>\n</table>\n\nUp until the early 19th century the most efficient known method for counting primes was the\nsieve of Eratosthenes which has a running time of $O(x\\log{\\log{x}})$ operations. The first\nimprovement to this bound was Legendre's formula (1830) which uses the inclusion-exclusion\nprinciple to calculate the number of primes below x without enumerating the individual\nprimes. Legendre's formula has a running time of $O(x)$ operations and uses $O(\\sqrt{x}/\\log{x})$\nspace. In 1870 E. D. F. Meissel improved Legendre's formula by setting $a=\\pi(\\sqrt[3]{x})$\nand by adding the correction term $\\mathrm{P_2}(x,a)$, Meissel's formula has a running time\nof $O(x/\\log^3{x})$ operations and uses $O(\\sqrt[3]{x})$ space. In 1959 D. H. Lehmer\nextended Meissel's formula and slightly improved the running time to $O(x/\\log^4{x})$\noperations and $O(x^{\\frac{3}{8}})$ space. In 1985 J. C. Lagarias, V. S. Miller and A. M.\nOdlyzko published a new algorithm based on Meissel's formula which has a lower runtime\ncomplexity of $O(x^{\\frac{2}{3}}/\\log{x})$ operations and which uses only\n$O(\\sqrt[3]{x}\\ \\log^2{x})$ space.\n\nprimecount's Legendre, Meissel and Lehmer implementations are based\non Hans Riesel's book <a href=\"doc/References.md\">[5]</a>,\nits Lagarias-Miller-Odlyzko and Deleglise-Rivat implementations are\nbased on Tomás Oliveira's paper <a href=\"doc/References.md\">[9]</a>\nand the implementation of Xavier Gourdon's algorithm is based\non Xavier Gourdon's paper <a href=\"doc/References.md\">[7]</a>.\nprimecount's implementation of the so-called hard special leaves is different\nfrom the algorithms that have been described in any of the combinatorial\nprime counting papers so far. Instead of using a binary indexed tree\nfor counting which is very cache inefficient primecount uses a linear\ncounter array in combination with the POPCNT instruction which is more\ncache efficient and much faster. The\n[Hard-Special-Leaves.md](doc/Hard-Special-Leaves.md) document contains more\ninformation. primecount's [easy special leaf implementation](doc/Easy-Special-Leaves.md)\nand its [partial sieve function implementation](doc/Partial-Sieve-Function.md)\nalso contain significant improvements.\n\n## Fast nth prime calculation\n\nThe most efficient known method for calculating the nth prime is a combination\nof the prime counting function and a prime sieve. The idea is to closely\napproximate the nth prime e.g. using the inverse logarithmic integral\n$\\mathrm{Li}^{-1}(n)$ or the inverse Riemann R function $\\mathrm{R}^{-1}(n)$\nand then count the primes up to this guess using the prime counting function.\nOnce this is done one starts sieving (e.g. using the segmented sieve of\nEratosthenes) from there on until one finds the actual nth prime. The author\nhas implemented ```primecount::nth_prime(n)``` this way\n(option: ```--nth-prime```), it finds the nth prime in $O(x^{\\frac{2}{3}}/\\log^2{x})$\noperations using $O(\\sqrt{x})$ space.\n\n## C API\n\nInclude the ```<primecount.h>``` header to use primecount's C API.\nAll functions that are part of primecount's C API return ```-1``` in case an\nerror occurs and print the corresponding error message to the standard error\nstream.\n\n```C\n#include <primecount.h>\n#include <stdio.h>\n\nint main()\n{\n    int64_t pix = primecount_pi(1000);\n    printf(\"primes <= 1000: %ld\\n\", pix);\n\n    return 0;\n}\n```\n\n* [C API documentation](doc/libprimecount.md#libprimecount)\n* [libprimecount build instructions](doc/libprimecount.md#build-instructions)\n\n## C++ API\n\nInclude the ```<primecount.hpp>``` header to use primecount's C++ API.\nAll functions that are part of primecount's C++ API throw a\n```primecount_error``` exception (which is derived from\n```std::exception```) in case an error occurs.\n\n```C++\n#include <primecount.hpp>\n#include <iostream>\n\nint main()\n{\n    int64_t pix = primecount::pi(1000);\n    std::cout << \"primes <= 1000: \" << pix << std::endl;\n\n    return 0;\n}\n```\n\n* [C++ API documentation](doc/libprimecount.md#libprimecount)\n* [libprimecount build instructions](doc/libprimecount.md#build-instructions)\n\n## Bindings for other languages\n\nprimesieve natively supports C and C++ and has bindings available for:\n\n<table>\n    <tr>\n        <td><b>Common Lisp:</b></td>\n        <td><a href=\"https://github.com/AaronChen0/cl-primecount\">cl-primecount</a></td>\n    </tr>\n    <tr>\n        <td><b>Julia:</b></td>\n        <td><a href=\"https://github.com/JuliaBinaryWrappers/primecount_jll.jl\">primecount_jll.jl</a></td>\n    </tr>\n    <tr>\n        <td><b>Haskell:</b></td>\n        <td><a href=\"https://github.com/pgujjula/primecount-haskell\">primecount-haskell</a></td>\n    </tr>\n    <tr>\n        <td><b>Python:</b></td>\n        <td><a href=\"https://github.com/dimpase/primecountpy\">primecountpy</a></td>\n    </tr>\n    <tr>\n        <td><b>Python:</b></td>\n        <td><a href=\"https://github.com/hearot/primecount-python\">primecount-python</a></td>\n    </tr>\n    <tr>\n        <td><b>Rust:</b></td>\n        <td><a href=\"https://github.com/maitbayev/primecount-rs\">primecount-rs</a></td>\n    </tr>\n</table>\n\nMany thanks to the developers of these bindings!"
}
