{
  "name": "clang-build-analyzer",
  "full_name": "clang-build-analyzer",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Tool to analyze compilation time",
  "license": "Unlicense and Zlib and MIT and BSL-1.0 and BSD-3-Clause and Apache-2.0 and BSD-2-Clause and (Apache-2.0 with LLVM-exception)",
  "homepage": "https://github.com/aras-p/ClangBuildAnalyzer",
  "versions": {
    "stable": "1.4.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/aras-p/ClangBuildAnalyzer/archive/v1.4.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "dae8e7838145a72c01c397c3998d9f6801fc4dc819d552010d702cab7dede530"
    },
    "head": {
      "url": "https://github.com/aras-p/ClangBuildAnalyzer.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/clang-build-analyzer/blobs/sha256:033384eb04d9403e430fa6d21711f3cb60719dceeaf71a84553a60c6bbb3d61f",
          "sha256": "033384eb04d9403e430fa6d21711f3cb60719dceeaf71a84553a60c6bbb3d61f"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/clang-build-analyzer/blobs/sha256:5a933ac5b121555f3dbae54608797f2e2b19bdd4de1de24ee2cafc54f1de6be5",
          "sha256": "5a933ac5b121555f3dbae54608797f2e2b19bdd4de1de24ee2cafc54f1de6be5"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/clang-build-analyzer/blobs/sha256:051d8080f8656cfb3b49a8079bb801a881f86e4418ba8f0ba1d1561458a0cdbd",
          "sha256": "051d8080f8656cfb3b49a8079bb801a881f86e4418ba8f0ba1d1561458a0cdbd"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/clang-build-analyzer/blobs/sha256:01071d118960d3f1ba3717297648be28d20135681647c8b4741f4acdec873348",
          "sha256": "01071d118960d3f1ba3717297648be28d20135681647c8b4741f4acdec873348"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/clang-build-analyzer/blobs/sha256:bbf4f25cc4f6681ab9bdd7d63da4bd8e5ed76d800c6484475623b6abbd0746f6",
          "sha256": "bbf4f25cc4f6681ab9bdd7d63da4bd8e5ed76d800c6484475623b6abbd0746f6"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/clang-build-analyzer/blobs/sha256:2d494732c257972bc8738c8983beb7dae65b3ecfb5b4d4b03186b736627008a8",
          "sha256": "2d494732c257972bc8738c8983beb7dae65b3ecfb5b4d4b03186b736627008a8"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/clang-build-analyzer/blobs/sha256:adca3e73a50eb9927e20ae463af18b0df22fe57f85372e76876bd797d7647999",
          "sha256": "adca3e73a50eb9927e20ae463af18b0df22fe57f85372e76876bd797d7647999"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "llvm"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/clang-build-analyzer.rb",
  "ruby_source_checksum": {
    "sha256": "dbd82a85bfe8034b5be619d7f01905e8f36c74ea3122408d21432e34cac45cb0"
  },
  "date_added": "2023-01-26T16:40:44+00:00",
  "readme": "# Clang Build Analyzer [![Build Status](https://github.com/aras-p/ClangBuildAnalyzer/workflows/build_and_test/badge.svg)](https://github.com/aras-p/ClangBuildAnalyzer/actions)\n\nClang C/C++ build analysis tool when using Clang 9+ `-ftime-trace`. The `-ftime-trace` compiler flag\n(see [blog post](https://aras-p.info/blog/2019/01/16/time-trace-timeline-flame-chart-profiler-for-Clang/) or\n[Clang 9 release notes](https://releases.llvm.org/9.0.0/tools/clang/docs/ReleaseNotes.html#new-compiler-flags)) can be useful\nto figure out what takes time during compilation of *one* source file. This tool helps to aggregate time trace\nreports from multiple compilations, and output \"what took the most time\" summary:\n\n- Which files are slowest to parse? i.e. spend time in compiler lexer/parser front-end\n- Which C++ templates took the most time to instantiate?\n- Which files are slowest to generate code for? i.e. spend time in compiler backend doing codegen and optimizations\n- Which functions are slowest to generate code for?\n- Which header files are included the most in the whole build, how much time is spent parsing them, and what are the include chains of them?\n\n\n### Usage\n\n1. **Start the build capture**: `ClangBuildAnalyzer --start <artifacts_folder>`<br/>\n   This will write current timestamp in a `ClangBuildAnalyzerSession.txt` file under the given `artifacts_folder`. The artifacts\n   folder is where the compiled object files (and time trace report files) are expected to be produced by your build.\n1. **Do your build**. Does not matter how; an IDE build, a makefile, a shell script, whatever. As long as it invokes\n   Clang and passes `-ftime-trace` flag to the compiler (**Clang 9.0 or later is required** for this).\n1. **Stop the build capture**: `ClangBuildAnalyzer --stop <artifacts_folder> <capture_file>`<br/>\n   This will load all Clang time trace compatible `*.json` files under the given `artifacts_folder` that were modified after\n   `--start` step was done (Clang `-ftime-trace` produces one JSON file next to each object file), process them and store data file into\n   a binary `capture_file`.\n1. **Run the build analysis**: `ClangBuildAnalyzer --analyze <capture_file>`<br/>\n   This will read the `capture_file` produced by `--stop` step, calculate the slowest things and print them. If a\n   `ClangBuildAnalyzer.ini` file exists in the current folder, it will be read to control how many of various things to print.\n\nAternatively, instead of doing `--start` and `--stop` steps, you can do `ClangBuildAnalyzer --all <artifacts_folder> <capture_file>` after your build; that will\ninclude all the compatible `*.json` files for analysis, no matter when they were produced.\n\n\n### Analysis Output\n\nThe analysis output will look something like this:\n\n```\nAnalyzing build trace from 'artifacts/FullCapture.bin'...\n**** Time summary:\nCompilation (7664 times):\n  Parsing (frontend):         2118.9 s\n  Codegen & opts (backend):   1204.1 s\n\n**** Files that took longest to parse (compiler frontend):\n  5084 ms: cycles_scene.build/RelWithDebInfo/volume.o\n  4471 ms: extern_ceres.build/RelWithDebInfo/covariance_impl.o\n  4225 ms: bf_intern_libmv.build/RelWithDebInfo/resect.o\n  4121 ms: bf_blenkernel.build/RelWithDebInfo/volume_to_mesh.o\n \n**** Files that took longest to codegen (compiler backend):\n 47123 ms: bf_blenkernel.build/RelWithDebInfo/volume.o\n 39617 ms: bf_blenkernel.build/RelWithDebInfo/volume_to_mesh.o\n 37488 ms: bf_modifiers.build/RelWithDebInfo/MOD_volume_displace.o\n 30676 ms: bf_gpu.build/RelWithDebInfo/gpu_shader_create_info.o\n\n**** Templates that took longest to instantiate:\n 11172 ms: fmt::detail::vformat_to<char> (142 times, avg 78 ms)\n  6662 ms: std::__scalar_hash<std::_PairT, 2>::operator() (3549 times, avg 1 ms)\n  6281 ms: std::__murmur2_or_cityhash<unsigned long, 64>::operator() (3549 times, avg 1 ms)\n  5757 ms: std::basic_string<char>::basic_string (3597 times, avg 1 ms)\n  5541 ms: blender::CPPType::to_static_type_tag<float, blender::VecBase<float, ... (70 times, avg 79 ms)\n\n**** Template sets that took longest to instantiate:\n 32421 ms: std::unique_ptr<$> (30461 times, avg 1 ms)\n 30098 ms: Eigen::MatrixBase<$> (8639 times, avg 3 ms)\n 27524 ms: Eigen::internal::call_assignment_no_alias<$> (2397 times, avg 11 ms)\n\n**** Functions that took longest to compile:\n 28359 ms: gpu_shader_create_info_init (source/blender/gpu/intern/gpu_shader_create_info.cc)\n  4090 ms: ccl::GetConstantValues(ccl::KernelData const*) (intern/cycles/device/metal/kernel.mm)\n  3996 ms: gpu_shader_dependency_init (source/blender/gpu/intern/gpu_shader_dependency.cc)\n\n**** Function sets that took longest to compile / optimize:\n 10606 ms: bool openvdb::v10_0::tree::NodeList<$>::initNodeChildren<$>(openvdb:... (470 times, avg 22 ms)\n  9640 ms: void tbb::interface9::internal::dynamic_grainsize_mode<$>::work_bala... (919 times, avg 10 ms)\n  9459 ms: void tbb::interface9::internal::dynamic_grainsize_mode<$>::work_bala... (715 times, avg 13 ms)\n  7279 ms: blender::Vector<$>::realloc_to_at_least(long long) (1840 times, avg 3 ms)\n \n**** Expensive headers:\n261580 ms: /Developer/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/algorithm (included 3389 times, avg 77 ms), included via:\n  341x: BKE_context.h BLI_string_ref.hh string \n  180x: DNA_mesh_types.h BLI_math_vector_types.hh array \n  125x: DNA_space_types.h DNA_node_types.h DNA_node_tree_interface_types.h BLI_function_ref.hh BLI_memory_utils.hh \n  ...\n\n188777 ms: /Developer/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/string (included 3447 times, avg 54 ms), included via:\n  353x: BKE_context.h BLI_string_ref.hh \n  184x: DNA_mesh_types.h BLI_offset_indices.hh BLI_index_mask.hh BLI_linear_allocator.hh BLI_string_ref.hh \n  131x: DNA_node_types.h DNA_node_tree_interface_types.h BLI_span.hh \n  ...\n\n174792 ms: source/blender/makesdna/DNA_node_types.h (included 1653 times, avg 105 ms), included via:\n  316x: ED_screen.hh DNA_space_types.h \n  181x: DNA_space_types.h \n  173x: <direct include>\n  ...\n```\n\nGranularity and amount of most expensive things (files, functions, templates, includes) that are reported can be controlled by having an\n`ClangBuildAnalyzer.ini` file in the working directory. Take a look at [`ClangBuildAnalyzer.ini`](/ClangBuildAnalyzer.ini) for an example.\n\n\n### Building it\n\n* Windows: Visual Studio 2019 solution at `projects/vs2019/ClangBuildAnalyzer.sln`.\n* Mac: Xcode 10.x project at `projects/xcode/ClangBuildAnalyzer.xcodeproj`.\n* Linux: Makefile for gcc (tested with 7.4), build with `make -f projects/make/Makefile`.\n* You can also use provided `CMakeLists.txt`, if you want to build using `CMake`.\n\n### Limitations\n\n* Does not capture anything related to linking or LTO right now.\n* May or may not scale to _huge_ builds (I haven't tried on something ginormous like a Chrome\n  build). However I have tried it on Unity editor and Blender builds and it worked fine.\n\n\n### License\n\nLicense for the Clang Build Analyzer itself is [Unlicense](https://unlicense.org/), i.e. public domain. However, the source code\nincludes several external library source files (all under `src/external`), each with their own license:\n\n* `cute_files.h` from [RandyGaul/cute_headers](https://github.com/RandyGaul/cute_headers): zlib or public domain,\n* `cwalk` from [likle/cwalk](https://github.com/likle/cwalk): MIT,\n* `enkiTS`, from [dougbinks/enkiTS](https://github.com/dougbinks/enkiTS): zlib,\n* `flat_hash_map`, from [skarupke/flat_hash_map](https://github.com/skarupke/flat_hash_map): Boost 1.0,\n* `inih`, from [benhoyt/inih](https://github.com/benhoyt/inih): BSD 3 clause,\n* `llvm-Demangle`, part of [LLVM](https://llvm.org/): Apache-2.0 with LLVM-exception,\n* `simdjson` from [lemire/simdjson](https://github.com/lemire/simdjson): Apache-2.0, version 3.2.2 (2023 Aug),\n* `sokol_time.h` from [floooh/sokol](https://github.com/floooh/sokol): zlib/libpng,\n* `xxHash` from [Cyan4973/xxHash](https://github.com/Cyan4973/xxHash): BSD 2 clause."
}
