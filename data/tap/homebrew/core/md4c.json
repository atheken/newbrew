{
  "name": "md4c",
  "full_name": "md4c",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "C Markdown parser. Fast. SAX-like interface",
  "license": "MIT",
  "homepage": "https://github.com/mity/md4c",
  "versions": {
    "stable": "0.4.8",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/mity/md4c/archive/release-0.4.8.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "4a457df853425b6bb6e3457aa1d1a13bccec587a04c38c622b1013a0da41439f"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/md4c/blobs/sha256:8057cee0cc192a2db1c29a4a49a3c9b175891b9c2aff8b0481a64c8da807d4b3",
          "sha256": "8057cee0cc192a2db1c29a4a49a3c9b175891b9c2aff8b0481a64c8da807d4b3"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/md4c/blobs/sha256:154f5f1eb77492727a5475922c642db680724a1b5abbd221b6ac65cb0d4c7c52",
          "sha256": "154f5f1eb77492727a5475922c642db680724a1b5abbd221b6ac65cb0d4c7c52"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/md4c/blobs/sha256:1873e516760235dba2670bb63a612b99b51714baf657b99c2c411da40c3162ec",
          "sha256": "1873e516760235dba2670bb63a612b99b51714baf657b99c2c411da40c3162ec"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/md4c/blobs/sha256:4ab00b6654d56bdf2805cfcec8b4bec4ff1704a0cf499fafc5fd451b86c9fe78",
          "sha256": "4ab00b6654d56bdf2805cfcec8b4bec4ff1704a0cf499fafc5fd451b86c9fe78"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/md4c/blobs/sha256:29d7e311c2821193496c531b4f8bec1d3857d5bd949da3578ee1abc6e9d2d20c",
          "sha256": "29d7e311c2821193496c531b4f8bec1d3857d5bd949da3578ee1abc6e9d2d20c"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/md4c/blobs/sha256:8b4ae9a5232e84db3d0ab6793a8dd5bd56071fb32832fd94d16fa8162ec08a16",
          "sha256": "8b4ae9a5232e84db3d0ab6793a8dd5bd56071fb32832fd94d16fa8162ec08a16"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/md4c/blobs/sha256:8368b905e33301b5019e8520f7d010e3a57f74855ebd5cbbbf87aa1d8ded50a7",
          "sha256": "8368b905e33301b5019e8520f7d010e3a57f74855ebd5cbbbf87aa1d8ded50a7"
        },
        "mojave": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/md4c/blobs/sha256:ad888318dd048fc87594ff6a67321b9f9711bafb835f121f46f8f3e31de1931a",
          "sha256": "ad888318dd048fc87594ff6a67321b9f9711bafb835f121f46f8f3e31de1931a"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/md4c/blobs/sha256:53d6b4590104e353ecbc591400815db823603d960894dc5a5fb1a84306290580",
          "sha256": "53d6b4590104e353ecbc591400815db823603d960894dc5a5fb1a84306290580"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/md4c.rb",
  "ruby_source_checksum": {
    "sha256": "7395822bbbabea76fac9ad778ef732dcd833e83cac63beeb05e43e696b2c68a0"
  },
  "date_added": "2020-12-31T00:26:51+00:00",
  "readme": "[![Linux Build Status (travis-ci.com)](https://img.shields.io/travis/mity/md4c/master.svg?logo=linux&label=linux%20build)](https://travis-ci.com/mity/md4c)\n[![Windows Build Status (appveyor.com)](https://img.shields.io/appveyor/ci/mity/md4c/master.svg?logo=windows&label=windows%20build)](https://ci.appveyor.com/project/mity/md4c/branch/master)\n[![Code Coverage Status (codecov.io)](https://img.shields.io/codecov/c/github/mity/md4c/master.svg?logo=codecov&label=code%20coverage)](https://codecov.io/github/mity/md4c)\n[![Coverity Scan Status](https://img.shields.io/coverity/scan/mity-md4c.svg?label=coverity%20scan)](https://scan.coverity.com/projects/mity-md4c)\n\n\n# MD4C Readme\n\n* Home: http://github.com/mity/md4c\n* Wiki: http://github.com/mity/md4c/wiki\n* Issue tracker: http://github.com/mity/md4c/issues\n\nMD4C stands for \"Markdown for C\" and that's exactly what this project is about.\n\n\n## What is Markdown\n\nIn short, Markdown is the markup language this `README.md` file is written in.\n\nThe following resources can explain more if you are unfamiliar with it:\n* [Wikipedia article](http://en.wikipedia.org/wiki/Markdown)\n* [CommonMark site](http://commonmark.org)\n\n\n## What is MD4C\n\nMD4C is Markdown parser implementation in C, with the following features:\n\n* **Compliance:** Generally, MD4C aims to be compliant to the latest version of\n  [CommonMark specification](http://spec.commonmark.org/). Currently, we are\n  fully compliant to CommonMark 0.30.\n\n* **Extensions:** MD4C supports some commonly requested and accepted extensions.\n  See below.\n\n* **Performance:** MD4C is [very fast](https://talk.commonmark.org/t/2520).\n\n* **Compactness:** MD4C parser is implemented in one source file and one header\n  file. There are no dependencies other than standard C library.\n\n* **Embedding:** MD4C parser is easy to reuse in other projects, its API is\n  very straightforward: There is actually just one function, `md_parse()`.\n\n* **Push model:** MD4C parses the complete document and calls few callback\n  functions provided by the application to inform it about a start/end of\n  every block, a start/end of every span, and with any textual contents.\n\n* **Portability:** MD4C builds and works on Windows and POSIX-compliant OSes.\n  (It should be simple to make it run also on most other platforms, at least as\n  long as the platform provides C standard library, including a heap memory\n  management.)\n\n* **Encoding:** MD4C by default expects UTF-8 encoding of the input document.\n  But it can be compiled to recognize ASCII-only control characters (i.e. to\n  disable all Unicode-specific code), or (on Windows) to expect UTF-16 (i.e.\n  what is on Windows commonly called just \"Unicode\"). See more details below.\n\n* **Permissive license:** MD4C is available under the [MIT license](LICENSE.md).\n\n\n## Using MD4C\n\n### Parsing Markdown\n\nIf you need just to parse a Markdown document, you need to include `md4c.h`\nand link against MD4C library (`-lmd4c`); or alternatively add `md4c.[hc]`\ndirectly to your code base as the parser is only implemented in the single C\nsource file.\n\nThe main provided function is `md_parse()`. It takes a text in the Markdown\nsyntax and a pointer to a structure which provides pointers to several callback\nfunctions.\n\nAs `md_parse()` processes the input, it calls the callbacks (when entering or\nleaving any Markdown block or span; and when outputting any textual content of\nthe document), allowing application to convert it into another format or render\nit onto the screen.\n\n\n### Converting to HTML\n\nIf you need to convert Markdown to HTML, include `md4c-html.h` and link against\nMD4C-HTML library (`-lmd4c-html`); or alternatively add the sources `md4c.[hc]`,\n`md4c-html.[hc]` and `entity.[hc]` into your code base.\n\nTo convert a Markdown input, call `md_html()` function. It takes the Markdown\ninput and calls the provided callback function. The callback is fed with\nchunks of the HTML output. Typical callback implementation just appends the\nchunks into a buffer or writes them to a file.\n\n\n## Markdown Extensions\n\nThe default behavior is to recognize only Markdown syntax defined by the\n[CommonMark specification](http://spec.commonmark.org/).\n\nHowever, with appropriate flags, the behavior can be tuned to enable some\nextensions:\n\n* With the flag `MD_FLAG_COLLAPSEWHITESPACE`, a non-trivial whitespace is\n  collapsed into a single space.\n\n* With the flag `MD_FLAG_TABLES`, GitHub-style tables are supported.\n\n* With the flag `MD_FLAG_TASKLISTS`, GitHub-style task lists are supported.\n\n* With the flag `MD_FLAG_STRIKETHROUGH`, strike-through spans are enabled\n  (text enclosed in tilde marks, e.g. `~foo bar~`).\n\n* With the flag `MD_FLAG_PERMISSIVEURLAUTOLINKS` permissive URL autolinks\n  (not enclosed in `<` and `>`) are supported.\n\n* With the flag `MD_FLAG_PERMISSIVEEMAILAUTOLINKS`, permissive e-mail\n  autolinks (not enclosed in `<` and `>`) are supported.\n\n* With the flag `MD_FLAG_PERMISSIVEWWWAUTOLINKS` permissive WWW autolinks\n  without any scheme specified (e.g. `www.example.com`) are supported. MD4C\n  then assumes `http:` scheme.\n\n* With the flag `MD_FLAG_LATEXMATHSPANS` LaTeX math spans (`$...$`) and\n  LaTeX display math spans (`$$...$$`) are supported. (Note though that the\n  HTML renderer outputs them verbatim in a custom tag `<x-equation>`.)\n\n* With the flag `MD_FLAG_WIKILINKS`, wiki-style links (`[[link label]]` and\n  `[[target article|link label]]`) are supported. (Note that the HTML renderer\n  outputs them in a custom tag `<x-wikilink>`.)\n\n* With the flag `MD_FLAG_UNDERLINE`, underscore (`_`) denotes an underline\n  instead of an ordinary emphasis or strong emphasis.\n\nFew features of CommonMark (those some people see as mis-features) may be\ndisabled with the following flags:\n\n* With the flag `MD_FLAG_NOHTMLSPANS` or `MD_FLAG_NOHTMLBLOCKS`, raw inline\n  HTML or raw HTML blocks respectively are disabled.\n\n* With the flag `MD_FLAG_NOINDENTEDCODEBLOCKS`, indented code blocks are\n  disabled.\n\n\n## Input/Output Encoding\n\nThe CommonMark specification declares that any sequence of Unicode code points\nis a valid CommonMark document.\n\nBut, under a closer inspection, Unicode plays any role in few very specific\nsituations when parsing Markdown documents:\n\n1. For detection of word boundaries when processing emphasis and strong\n   emphasis, some classification of Unicode characters (whether it is\n   a whitespace or a punctuation) is needed.\n\n2. For (case-insensitive) matching of a link reference label with the\n   corresponding link reference definition, Unicode case folding is used.\n\n3. For translating HTML entities (e.g. `&amp;`) and numeric character\n   references (e.g. `&#35;` or `&#xcab;`) into their Unicode equivalents.\n\n   However note MD4C leaves this translation on the renderer/application; as\n   the renderer is supposed to really know output encoding and whether it\n   really needs to perform this kind of translation. (For example, when the\n   renderer outputs HTML, it may leave the entities untranslated and defer the\n   work to a web browser.)\n\nMD4C relies on this property of the CommonMark and the implementation is, to\na large degree, encoding-agnostic. Most of MD4C code only assumes that the\nencoding of your choice is compatible with ASCII. I.e. that the codepoints\nbelow 128 have the same numeric values as ASCII.\n\nAny input MD4C does not understand is simply seen as part of the document text\nand sent to the renderer's callback functions unchanged.\n\nThe two situations (word boundary detection and link reference matching) where\nMD4C has to understand Unicode are handled as specified by the following\npreprocessor macros (as specified at the time MD4C is being built):\n\n* If preprocessor macro `MD4C_USE_UTF8` is defined, MD4C assumes UTF-8 for the\n  word boundary detection and for the case-insensitive matching of link labels.\n\n  When none of these macros is explicitly used, this is the default behavior.\n\n* On Windows, if preprocessor macro `MD4C_USE_UTF16` is defined, MD4C uses\n  `WCHAR` instead of `char` and assumes UTF-16 encoding in those situations.\n  (UTF-16 is what Windows developers usually call just \"Unicode\" and what\n  Win32API generally works with.)\n\n  Note that because this macro affects also the types in `md4c.h`, you have\n  to define the macro both when building MD4C as well as when including\n  `md4c.h`.\n\n  Also note this is only supported in the parser (`md4c.[hc]`). The HTML\n  renderer does not support this and you will have to write your own custom\n  renderer to use this feature.\n\n* If preprocessor macro `MD4C_USE_ASCII` is defined, MD4C assumes nothing but\n  an ASCII input.\n\n  That effectively means that non-ASCII whitespace or punctuation characters\n  won't be recognized as such and that link reference matching will work in\n  a case-insensitive way only for ASCII letters (`[a-zA-Z]`).\n\n\n## Documentation\n\nThe API of the parser is quite well documented in the comments in the `md4c.h`.\nSimilarly, the markdown-to-html API is described in its header `md4c-html.h`.\n\nThere is also [project wiki](http://github.com/mity/md4c/wiki) which provides\nsome more comprehensive documentation. However note it is incomplete and some\ndetails may be somewhat outdated.\n\n\n## FAQ\n\n**Q: How does MD4C compare to a parser XY?**\n\n**A:** Some other implementations combine Markdown parser and HTML generator\ninto a single entangled code hidden behind an interface which just allows the\nconversion from Markdown to HTML. They are often unusable if you want to\nprocess the input in any other way.\n\nEven when the parsing is available as a standalone feature, most parsers (if\nnot all of them; at least within the scope of C/C++ language) are full DOM-like\nparsers: They construct abstract syntax tree (AST) representation of the whole\nMarkdown document. That takes time and it leads to bigger memory footprint.\n\nIt's completely fine as long as you really need it. If you don't need the full\nAST, there is a very high chance that using MD4C will be substantially faster\nand less hungry in terms of memory consumption.\n\nLast but not least, some Markdown parsers are implemented in a naive way. When\nfed with a [smartly crafted input pattern](test/pathological_tests.py), they\nmay exhibit quadratic (or even worse) parsing times. What MD4C can still parse\nin a fraction of second may turn into long minutes or possibly hours with them.\nHence, when such a naive parser is used to process an input from an untrusted\nsource, the possibility of denial-of-service attacks becomes a real danger.\n\nA lot of our effort went into providing linear parsing times no matter what\nkind of crazy input MD4C parser is fed with. (If you encounter an input pattern\nwhich leads to a sub-linear parsing times, please do not hesitate and report it\nas a bug.)\n\n**Q: Does MD4C perform any input validation?**\n\n**A:** No. And we are proud of it. :-)\n\nCommonMark specification states that any sequence of Unicode characters is\na valid Markdown document. (In practice, this more or less always means UTF-8\nencoding.)\n\nIn other words, according to the specification, it does not matter whether some\nMarkdown syntax construction is in some way broken or not. If it is broken, it\nwill simply not be recognized and the parser should see it just as a verbatim\ntext.\n\nMD4C takes this a step further: It sees any sequence of bytes as a valid input,\nfollowing completely the GIGO philosophy (garbage in, garbage out). I.e. any\nill-formed UTF-8 byte sequence will propagate to the respective callback as\na part of the text.\n\nIf you need to validate that the input is, say, a well-formed UTF-8 document,\nyou have to do it on your own. The easiest way how to do this is to simply\nvalidate the whole document before passing it to the MD4C parser.\n\n\n## License\n\nMD4C is covered with MIT license, see the file `LICENSE.md`.\n\n\n## Links to Related Projects\n\nPorts and bindings to other languages:\n\n* [commonmark-d](https://github.com/AuburnSounds/commonmark-d):\n  Port of MD4C to D language.\n\n* [markdown-wasm](https://github.com/rsms/markdown-wasm):\n  Port of MD4C to WebAssembly.\n\n* [PyMD4C](https://github.com/dominickpastore/pymd4c):\n  Python bindings for MD4C\n\nSoftware using MD4C:\n\n* [QOwnNotes](https://www.qownnotes.org/):\n  A plain-text file notepad and todo-list manager with markdown support and\n  ownCloud / Nextcloud integration.\n\n* [Qt](https://www.qt.io/):\n  Cross-platform C++ GUI framework.\n\n* [Textosaurus](https://github.com/martinrotter/textosaurus):\n  Cross-platform text editor based on Qt and Scintilla.\n\n* [8th](https://8th-dev.com/):\n  Cross-platform concatenative programming language."
}
