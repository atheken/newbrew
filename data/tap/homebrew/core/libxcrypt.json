{
  "name": "libxcrypt",
  "full_name": "libxcrypt",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Extended crypt library for descrypt, md5crypt, bcrypt, and others",
  "license": "LGPL-2.1-or-later",
  "homepage": "https://github.com/besser82/libxcrypt",
  "versions": {
    "stable": "4.4.36",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/besser82/libxcrypt/releases/download/v4.4.36/libxcrypt-4.4.36.tar.xz",
      "tag": null,
      "revision": null,
      "checksum": "e5e1f4caee0a01de2aee26e3138807d6d3ca2b8e67287966d1fefd65e1fd8943"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libxcrypt/blobs/sha256:95e6481674d9f4cd29bdeb45f0efb5eda7c96cab827212acceda923d27a52a66",
          "sha256": "95e6481674d9f4cd29bdeb45f0efb5eda7c96cab827212acceda923d27a52a66"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libxcrypt/blobs/sha256:aecdd70eeff240670db9c78bb147623ba1d23e2b2ebbe7cb92e57ea1d03b8d20",
          "sha256": "aecdd70eeff240670db9c78bb147623ba1d23e2b2ebbe7cb92e57ea1d03b8d20"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libxcrypt/blobs/sha256:81f38fded3d8f8a10657051bfbe8a0660b5b60d691c42177638c72d6181e092e",
          "sha256": "81f38fded3d8f8a10657051bfbe8a0660b5b60d691c42177638c72d6181e092e"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libxcrypt/blobs/sha256:6fc07249ae12fef0b10f26aa56d3a52b26c285593ed416d6cb5589e8455c58b9",
          "sha256": "6fc07249ae12fef0b10f26aa56d3a52b26c285593ed416d6cb5589e8455c58b9"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libxcrypt/blobs/sha256:92fdac7885e9f441437725c76059b58386445951fec07bad2bc88af873333e2b",
          "sha256": "92fdac7885e9f441437725c76059b58386445951fec07bad2bc88af873333e2b"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libxcrypt/blobs/sha256:ca6918b378488e583071841562c5ce1632053124b2916951bb968478033b99f1",
          "sha256": "ca6918b378488e583071841562c5ce1632053124b2916951bb968478033b99f1"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/libxcrypt/blobs/sha256:ad1c4b570d7a66046038c13345b54337d858a2db78dcfb7e90a2b21adc1d6802",
          "sha256": "ad1c4b570d7a66046038c13345b54337d858a2db78dcfb7e90a2b21adc1d6802"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": {
    "reason": ":provided_by_macos",
    "explanation": ""
  },
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [
    "include/crypt.h",
    "lib/libcrypt.so"
  ],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/libxcrypt.rb",
  "ruby_source_checksum": {
    "sha256": "318cdd10695cb69093a6bca76a3ac2768423b1fe3bf360b8f7e959be713a7aa5"
  },
  "date_added": "2022-04-27T13:41:33+00:00",
  "readme": "[![Build matrix](https://github.com/besser82/libxcrypt/actions/workflows/config-matrix.yml/badge.svg)](https://github.com/besser82/libxcrypt/actions/workflows/config-matrix.yml)\n[![Memcheck](https://github.com/besser82/libxcrypt/actions/workflows/memcheck.yml/badge.svg)](https://github.com/besser82/libxcrypt/actions/workflows/memcheck.yml)\n[![Distcheck](https://github.com/besser82/libxcrypt/actions/workflows/distcheck.yml/badge.svg)](https://github.com/besser82/libxcrypt/actions/workflows/distcheck.yml)\n[![COPR Build Status](https://copr.fedorainfracloud.org/coprs/besser82/libxcrypt_CI/package/libxcrypt/status_image/last_build.png)](https://copr.fedorainfracloud.org/coprs/besser82/libxcrypt_CI)\n[![codecov](https://codecov.io/gh/besser82/libxcrypt/branch/develop/graph/badge.svg)](https://codecov.io/gh/besser82/libxcrypt)\n[![Coverity Scan Build Status](https://scan.coverity.com/projects/17073/badge.svg)](https://scan.coverity.com/projects/besser82-libxcrypt)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/1ebaa2314aca4bab92e14130906d5096)](https://www.codacy.com/manual/besser82/libxcrypt?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=besser82/libxcrypt&amp;utm_campaign=Badge_Grade)\n\nREADME for libxcrypt\n====================\n\nlibxcrypt is a modern library for one-way hashing of passwords.  It\nsupports a wide variety of both modern and historical hashing methods:\nyescrypt, gost-yescrypt, scrypt, bcrypt, sha512crypt, sha256crypt,\nmd5crypt, SunMD5, sha1crypt, NT, bsdicrypt, bigcrypt, and descrypt.\nIt provides the traditional Unix `crypt` and `crypt_r` interfaces, as\nwell as a set of extended interfaces pioneered by Openwall Linux,\n`crypt_rn`, `crypt_ra`, `crypt_gensalt`, `crypt_gensalt_rn`, and\n`crypt_gensalt_ra`.\n\nlibxcrypt is intended to be used by `login(1)`, `passwd(1)`, and other\nsimilar programs; that is, to hash a small number of passwords during\nan interactive authentication dialogue with a human.  It is not\nsuitable for use in bulk password-cracking applications, or in any\nother situation where speed is more important than careful handling of\nsensitive data.  However, it *is* intended to be fast and lightweight\nenough for use in servers that must field thousands of login attempts\nper minute.\n\nAuthorship and Licensing\n------------------------\n\nlibxcrypt is currently maintained by Björn Esser and Zack Weinberg.\nMany people have contributed to the code making up libxcrypt, often\nunder the aegis of a different project.  Please see the AUTHORS and\nTHANKS files for a full set of credits.\n\nlibxcrypt as a whole is licensed under the GNU Lesser General Public\nLicense (version 2.1, or at your option, any later version).  However,\nmany individual files may be reused under more permissive licenses if\nseparated from the library.  Please see the LICENSING file for a\ncomprehensive inventory of licenses, and COPYING.LIB for the terms of\nthe LGPL.\n\nBug Reports, Feature Requests, Contributions, Etc.\n--------------------------------------------------\n\nlibxcrypt is currently maintained at Github: the canonical repository\nURL is <https://github.com/besser82/libxcrypt>.  Please file bug\nreports at <https://github.com/besser82/libxcrypt/issues>.  This is\nalso the appropriate place to suggest new features, offer patches,\netc.  All your feedback is welcome and will eventually receive a\nresponse, but this is a spare-time project for all of the present\nmaintainers, so please be patient.\n\nBuild Requirements and Instructions\n-----------------------------------\n\nTo build from a tarball release, the tools required are the standard\nUnix shell environment, a C compiler, and Perl (version 5.14 or\nlater).  Follow the generic build and installation instructions in the\nfile `INSTALL`.  There are several package-specific configure options;\nrun `./configure --help` for more detail on these options.\nRun `man -l crypt.5` for more detail on the hashing algorithms that\ncan be enabled or disabled by `--enable-hashes`.  You can do both of\nthese things before building the software.\n\nBuilding from a Git checkout additionally requires the Autotools\nsuite: `autoconf`, `automake`, `libtool`, and `pkg-config`.\nRun `./autogen.sh` at the top level of the source tree, and then\nfollow the instructions in `INSTALL` (which is created by that command).\n\nThe oldest versions of Autotools components that are known to work\nare: autoconf 2.69, automake 1.14, libtool 2.4.6, pkg-config 0.29.\nIf you test with an older version of one of these and find that it\nworks, please let us know.  We are not deliberately requiring newer\nversions; we just can’t conveniently test older versions ourselves.\n\nPortability Notes\n-----------------\n\nlibxcrypt should be buildable with any ISO C1999-compliant C compiler,\nwith one critical exception: the symbol versioning macros in\n`crypt-port.h` only work with compilers that implement certain GCC and\nGNU Binutils extensions (`__attribute__((alias))`, GCC-style `asm`,\nand `.symver`).\n\nA few C2011 features are used; the intention is not to use any of them\nwithout a fallback, but we do not currently test this.  A few POSIX\nand nonstandard-but-widespread Unix APIs are also used; again, the\nintention is not to use any of them without a fallback, but we do not\ncurrently test this.  In particular, the crypt_gensalt functions may\nnot always be able to retrieve cryptographically-sound random numbers\nfrom the operating system; if you call these functions with a null\npointer for the “rbytes” argument, be prepared for them to fail.\n\nAs of mid-2018, GCC and LLVM don’t support link-time optimization of\nlibraries that use symbol versioning.  If you build libxcrypt with\neither of these compilers, do not use `-flto`.  See [GCC bug 48200][1]\nfor specifics; the problem is very similar for LLVM.  Because this is,\nat its root, a set of missing compiler features, we expect link-time\noptimization won’t work in other C compilers either, but we haven’t\ntested it ourselves.\n\n[1]: https://gcc.gnu.org/bugzilla/show_bug.cgi?id=48200\n\nCompatibility Notes\n-------------------\n\nOn Linux-based systems, by default libxcrypt will be binary backward\ncompatible with the libcrypt.so.1 shipped as part of the GNU C\nLibrary.  This means that all existing binary executables linked\nagainst glibc’s libcrypt should work unmodified with this library’s\nlibcrypt.so.1.  We have taken pains to provide exactly the same symbol\nversions as were used by glibc on various CPU architectures, and to\naccount for the variety of ways in which the Openwall extensions were\npatched into glibc’s libcrypt by some Linux distributions.  (For\ninstance, compatibility symlinks for SUSE’s “libowcrypt” are provided.)\n\nHowever, the converse is not true: programs linked against libxcrypt\nwill not work with glibc’s libcrypt.  Also, programs that use certain\nlegacy APIs supplied by glibc’s libcrypt (`encrypt`, `encrypt_r`,\n`setkey`, `setkey_r`, and `fcrypt`) cannot be *compiled* against\nlibxcrypt.\n\nBinary backward compatibility can be disabled by supplying the\n`--disable-obsolete-api` switch to `configure`, in which case libxcrypt\nwill install libcrypt.so.2 instead of libcrypt.so.1.  This\nconfiguration is always used on all operating systems other than\nLinux.  We are willing to consider adding binary backward\ncompatibility for other operating systems’ existing libcrypts, but we\ndon’t currently plan to do that work ourselves.\n\nIndividual hash functions may be enabled or disabled by use of the\n`--enable-hashes` switch to `configure`.  The default is to enable all\nsupported hashes.  Disabling the traditional ‘des’ hash algorithm\nimplies `--disable-obsolete-api`.  Security-conscious environments\nwithout backward compatibility constraints are encouraged to use\n`--enable-hashes=strong`, which enables only the hash functions that\nare strong enough to be safe for newly hashed passwords.\n\nThe original implementation of the SunMD5 hashing algorithm has a bug,\nwhich is mimicked by libxcrypt to be fully compatible with hashes\ngenerated on (Open)Solaris.  According to the only existing\n[documentation of this algorithm][2], its hashes were supposed to have\nthe format `$md5[,rounds=%u]$<salt>$<checksum>`, and include only the\nbare string `$md5[,rounds=%u]$<salt>` in the salt digest\nstep. However, almost all hashes encountered in production\nenvironments have the format `$md5[,rounds=%u]$<salt>$$<checksum>`\n(note the double $$).  Unfortunately, it is not merely a cosmetic\ndifference: hashes of this format incorporate the first $ after the\nsalt within the salt digest step, so the resulting checksum is\ndifferent.  The documentation hints that this stems from a bug within\nthe production implementation’s parser.  This bug causes the\nimplementation to return `$$`-format hashes when passed a\nconfiguration string that ends with `$`.  It returns the intended\noriginal format and checksum only if there is at least one letter\nafter the `$`, e.g. `$md5[,rounds=%u]$<salt>$x`.\n\nThe NT algorithm, in its original implementation, never came with any\n`gensalt` function, because the algorithm does not use any.  libxcrypt\nships a bogus `gensalt` function for the NT algorithm, which simply\nreturns `$3$`.\n\nglibc’s libcrypt could optionally be configured to use Mozilla’s NSS\nlibrary’s implementations of the cryptographic primitives md5crypt,\nsha256crypt, and sha512crypt.  This option is not available in\nlibxcrypt, because we do not currently believe it is a desirable\noption.  The stated rationale for the option was to source all\ncryptographic primitives from a library that has undergone FIPS\ncertification, but we believe FIPS certification would need to cover\nall of libxcrypt itself to have any meaningful value.  Moreover, the\nstrongest hashing methods, yescrypt and bcrypt, use cryptographic\nprimitives that are not available from NSS, so the certification\nwould not cover any part of what will hopefully be the most used code\npaths.\n\n[2]: https://dropsafe.crypticide.com/article/1389"
}
