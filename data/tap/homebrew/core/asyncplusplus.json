{
  "name": "asyncplusplus",
  "full_name": "asyncplusplus",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Concurrency framework for C++11",
  "license": "MIT",
  "homepage": "https://github.com/Amanieu/asyncplusplus",
  "versions": {
    "stable": "1.1",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/Amanieu/asyncplusplus/archive/v1.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "d160d3a433a1e08f51c785742843182c2b81a7bc872766f57bf5f3108377b858"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/asyncplusplus/blobs/sha256:898eddc5042c1c1022f157a250372b55a373d1c2a9d54c929280f60c3ea503f1",
          "sha256": "898eddc5042c1c1022f157a250372b55a373d1c2a9d54c929280f60c3ea503f1"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/asyncplusplus/blobs/sha256:b6d8ffe80f5931825874903e480010524c9ce2d3a2d3f19b0152897459748bf9",
          "sha256": "b6d8ffe80f5931825874903e480010524c9ce2d3a2d3f19b0152897459748bf9"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/asyncplusplus/blobs/sha256:c44cc09dbae0270a7e13b87eb4a9e5b0af39ba3e7ba13032e37065014e621be9",
          "sha256": "c44cc09dbae0270a7e13b87eb4a9e5b0af39ba3e7ba13032e37065014e621be9"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/asyncplusplus/blobs/sha256:3a0aa2292b9a2da7e16e906d48e48d4d4eb94e93b27f6b2dcc966fee2d6b7a80",
          "sha256": "3a0aa2292b9a2da7e16e906d48e48d4d4eb94e93b27f6b2dcc966fee2d6b7a80"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/asyncplusplus/blobs/sha256:8f08fedb9006a57b2bf0a6af9a78bdf49fc742e47f2a9dc7af5cd34beb2d2ad0",
          "sha256": "8f08fedb9006a57b2bf0a6af9a78bdf49fc742e47f2a9dc7af5cd34beb2d2ad0"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/asyncplusplus/blobs/sha256:c825975d9087a779f70d1daee59e259ac781353c0bdf169dc2255b19afaab447",
          "sha256": "c825975d9087a779f70d1daee59e259ac781353c0bdf169dc2255b19afaab447"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/asyncplusplus/blobs/sha256:8116d1e5d9aefd7de88cb70633fdc91181460f7f0279bcc356f8d020a590510b",
          "sha256": "8116d1e5d9aefd7de88cb70633fdc91181460f7f0279bcc356f8d020a590510b"
        },
        "mojave": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/asyncplusplus/blobs/sha256:805297c643ba0c1fe0d774ea606f6e0925112b1a364b74122c877d51f1e729fb",
          "sha256": "805297c643ba0c1fe0d774ea606f6e0925112b1a364b74122c877d51f1e729fb"
        },
        "high_sierra": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/asyncplusplus/blobs/sha256:ac6212a38c5aa391ee1eb547879615437a830967444deb15674e748c63f0b5b1",
          "sha256": "ac6212a38c5aa391ee1eb547879615437a830967444deb15674e748c63f0b5b1"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/asyncplusplus/blobs/sha256:79a9f2c4744ed1a2aca8a323ac6be7753bb3efd5fc4ac06ef999b7c99ada77ed",
          "sha256": "79a9f2c4744ed1a2aca8a323ac6be7753bb3efd5fc4ac06ef999b7c99ada77ed"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "2706c66e8def3eeba4d9bf1adf66221c8ad70701",
  "ruby_source_path": "Formula/asyncplusplus.rb",
  "ruby_source_checksum": {
    "sha256": "3fb3ac5dfc68d653ca759039ef29c68f14beabe434195f0e65a4950f82914881"
  },
  "date_added": "2019-07-18T17:37:30+02:00",
  "readme": "Async++\n=======\n\nAsync++ is a lightweight concurrency framework for C++11. The concept was inspired by the [Microsoft PPL library](http://msdn.microsoft.com/en-us/library/dd492418.aspx) and the [N3428](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3428.pdf) C++ standard proposal.\n\nExample\n-------\nHere is a short example which shows some features of Async++:\n\n```c++\n#include <iostream>\n#include <async++.h>\n\nint main()\n{\n    auto task1 = async::spawn([] {\n        std::cout << \"Task 1 executes asynchronously\" << std::endl;\n    });\n    auto task2 = async::spawn([]() -> int {\n        std::cout << \"Task 2 executes in parallel with task 1\" << std::endl;\n        return 42;\n    });\n    auto task3 = task2.then([](int value) -> int {\n        std::cout << \"Task 3 executes after task 2, which returned \"\n                  << value << std::endl;\n        return value * 3;\n    });\n    auto task4 = async::when_all(task1, task3);\n    auto task5 = task4.then([](std::tuple<async::task<void>,\n                                          async::task<int>> results) {\n        std::cout << \"Task 5 executes after tasks 1 and 3. Task 3 returned \"\n                  << std::get<1>(results).get() << std::endl;\n    });\n\n    task5.get();\n    std::cout << \"Task 5 has completed\" << std::endl;\n\n    async::parallel_invoke([] {\n        std::cout << \"This is executed in parallel...\" << std::endl;\n    }, [] {\n        std::cout << \"with this\" << std::endl;\n    });\n\n    async::parallel_for(async::irange(0, 5), [](int x) {\n        std::cout << x;\n    });\n    std::cout << std::endl;\n\n    int r = async::parallel_reduce({1, 2, 3, 4}, 0, [](int x, int y) {\n        return x + y;\n    });\n    std::cout << \"The sum of {1, 2, 3, 4} is \" << r << std::endl;\n}\n\n// Output (order may vary in some places):\n// Task 1 executes asynchronously\n// Task 2 executes in parallel with task 1\n// Task 3 executes after task 2, which returned 42\n// Task 5 executes after tasks 1 and 3. Task 3 returned 126\n// Task 5 has completed\n// This is executed in parallel...\n// with this\n// 01234\n// The sum of {1, 2, 3, 4} is 10\n```\n\nSupported Platforms\n-------------------\n\nThe only requirement to use Async++ is a C++11 compiler and standard library. Unfortunately C++11 is not yet fully implemented on most platforms. Here is the list of OS and compiler combinations which are known to work.\n\n- Linux: Works with GCC 4.7+, Clang 3.2+ and Intel compiler 15+.\n- Mac: Works with Apple Clang (using libc++). GCC also works but you must get a recent version (4.7+).\n- iOS: Works with Apple Clang (using libc++). Note: because iOS has no thread local support, the library uses a workaround based on pthreads.\n- Windows: Works with GCC 4.8+ (with pthread-win32) and Visual Studio 2013+.\n\nBuilding and Installing\n-----------------------\nInstructions for compiling Async++ and using it in your code are available on the [Building and Installing](https://github.com/Amanieu/asyncplusplus/wiki/Building-and-Installing) page.\n\nDocumentation\n------------\nThe Async++ documentation is split into four parts:\n- [Tasks](https://github.com/Amanieu/asyncplusplus/wiki/Tasks): This describes task objects which are the core Async++. Reading this first is strongly recommended.\n- [Parallel algorithms](https://github.com/Amanieu/asyncplusplus/wiki/Parallel-algorithms): This describes functions to run work on ranges in parallel.\n- [Schedulers](https://github.com/Amanieu/asyncplusplus/wiki/Schedulers): This describes the low-level details of Async++ and how to customize it.\n- [API Reference](https://github.com/Amanieu/asyncplusplus/wiki/API-Reference): This gives detailed descriptions of all the classes and functions available in Async++.\n\nContact\n-------\nYou can contact me by email at amanieu@gmail.com."
}
