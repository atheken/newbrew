{
  "name": "ghostunnel",
  "full_name": "ghostunnel",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Simple SSL/TLS proxy with mutual authentication",
  "license": "Apache-2.0",
  "homepage": "https://github.com/ghostunnel/ghostunnel",
  "versions": {
    "stable": "1.7.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/ghostunnel/ghostunnel/archive/refs/tags/v1.7.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "b4eced76660e5e4bcdead3a3026608d500576fac574e49371cf9de8c98041b71"
    },
    "head": {
      "url": "https://github.com/ghostunnel/ghostunnel.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ghostunnel/blobs/sha256:f6456eea77410787d8fe28c7f9cae2ae8624fbaffc2fba2e06d11dda74b3bc9c",
          "sha256": "f6456eea77410787d8fe28c7f9cae2ae8624fbaffc2fba2e06d11dda74b3bc9c"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ghostunnel/blobs/sha256:b66f6e2fec5210fe2189461b3732ff558386fcc98d0850442a5df862bdec0910",
          "sha256": "b66f6e2fec5210fe2189461b3732ff558386fcc98d0850442a5df862bdec0910"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ghostunnel/blobs/sha256:3d37b5c7e36c2192474cbc43bcc966af03534f8c8ab7da0ab192aae4e3650d8f",
          "sha256": "3d37b5c7e36c2192474cbc43bcc966af03534f8c8ab7da0ab192aae4e3650d8f"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ghostunnel/blobs/sha256:9fd269914394018868615f572f955d0d0cf733565ef51715ce8c33e0806b440c",
          "sha256": "9fd269914394018868615f572f955d0d0cf733565ef51715ce8c33e0806b440c"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ghostunnel/blobs/sha256:7ff079fa2a391da1c5e3cae5b8a117fb8d6db3ab0e0998961cd2253339eb9f2c",
          "sha256": "7ff079fa2a391da1c5e3cae5b8a117fb8d6db3ab0e0998961cd2253339eb9f2c"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ghostunnel/blobs/sha256:1a675c369ce55275aaa2905e42b1b2ef2f14d1bbc0fb08ca681b442caded0e7b",
          "sha256": "1a675c369ce55275aaa2905e42b1b2ef2f14d1bbc0fb08ca681b442caded0e7b"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/ghostunnel.rb",
  "ruby_source_checksum": {
    "sha256": "767942340e75f5ab1f6479ba0d01ae2fb64335b64b1d52476e8627e60f757da0"
  },
  "date_added": "2021-08-21T18:09:30+00:00",
  "readme": "Ghostunnel\n==========\n\n[![license](http://img.shields.io/badge/license-apache_2.0-blue.svg?style=flat)](https://raw.githubusercontent.com/ghostunnel/ghostunnel/master/LICENSE) [![release](https://img.shields.io/github/release/ghostunnel/ghostunnel.svg?style=flat)](https://github.com/ghostunnel/ghostunnel/releases) [![docker](https://img.shields.io/badge/docker-hub-blue.svg?style=flat)](https://hub.docker.com/r/ghostunnel/ghostunnel) [![test](https://img.shields.io/github/checks-status/ghostunnel/ghostunnel/master)](https://github.com/ghostunnel/ghostunnel/actions) [![coverage](https://img.shields.io/codecov/c/github/ghostunnel/ghostunnel/master)](https://app.codecov.io/gh/ghostunnel/ghostunnel/) [![report](https://goreportcard.com/badge/github.com/ghostunnel/ghostunnel)](https://goreportcard.com/report/github.com/ghostunnel/ghostunnel)\n\nðŸ‘»\n\nGhostunnel is a simple TLS proxy with mutual authentication support for\nsecuring non-TLS backend applications.\n\nGhostunnel supports two modes, client mode and server mode. Ghostunnel in\nserver mode runs in front of a backend server and accepts TLS-secured\nconnections, which are then proxied to the (insecure) backend. A backend can be\na TCP domain/port or a UNIX domain socket. Ghostunnel in client mode accepts\n(insecure) connections through a TCP or UNIX domain socket and proxies them to\na TLS-secured service. In other words, ghostunnel is a replacement for stunnel.\n\n**Supported platforms**: Ghostunnel is developed primarily for Linux and Darwin\n(macOS), although it should run on any UNIX system that exposes `SO_REUSEPORT`,\nincluding FreeBSD, OpenBSD and NetBSD. Ghostunnel also supports running on\nWindows, though with a reduced feature set. \n\nSee `ghostunnel --help`, `ghostunnel server --help` and `ghostunnel client --help`.\n\nFeatures\n========\n\n**[Access control](#access-control-flags)**: Ghostunnel enforces mutual\nauthentication by requiring a valid client certificate for all connections.\nPolicies can enforce checks on the peer certificate in a connection, either\nvia simple flags or declarative policies using [Open \nPolicy Agent](https://www.openpolicyagent.org). This is useful \nfor restricting access to services that don't have native access control.\n\n**[Certificate hotswapping](#certificate-hotswapping)**: Ghostunnel can reload\ncertificates at runtime without dropping existing connections. Certificates can\nbe loaded from disk, the [SPIFFE Workload API](https://spiffe.io), or a PKCS#11 module.\nThis allows short-lived certificates to be used with Ghostunnel as you can pick\nup new certificates transparently.\n\n**[ACME Support](#acme-support)**: In server mode, Ghostunnel can optionally\nobtain and automatically renew a public TLS certificate via the ACME protocol,\nsuch as through Let's Encrypt. Note that this requires a valid FQDN accessible\non the public internet for verification.\n\n**[Monitoring and metrics](#metrics--profiling)**: Ghostunnel has a built-in\nstatus feature that can be used to collect metrics and monitor a running\ninstance. Metrics can be fed into Graphite or Prometheus to see number of\nopen connections, rate of new connections, connection lifetimes, timeouts, and\nother info.\n\n**[Emphasis on security](BUG-BOUNTY.md)**: We have put some thought into making\nGhostunnel secure by default and prevent accidental misconfiguration. For example, \nwe always negotiate TLS v1.2 (or greater) and only use safe cipher suites. Ghostunnel\nalso supports PKCS#11 which makes it possible to use Hardware Security Modules (HSMs)\nto protect private keys. \n\nGetting Started\n===============\n\nTo get started and play around with the implementation, you will need to\ngenerate some test certificates. If you want to bootstrap a full PKI, one\ngood way to get started is to use a package like\n[square/certstrap](https://github.com/square/certstrap). If you only need\nsome test certificates for playing around with the tunnel, you can find\nsome pre-generated ones in the `test-keys` directory (alongside instructions\non how to generate new ones with OpenSSL).\n\n### Install\n\nGhostunnel is available through [GitHub releases][rel] and through [Docker Hub][hub].\n\n    # Compile for local architecture\n    make ghostunnel\n\nNote that ghostunnel requires Go 1.19 or later to build, and CGO is required for\nPKCS#11 support.\n\n[rel]: https://github.com/ghostunnel/ghostunnel/releases\n[hub]: https://hub.docker.com/r/ghostunnel/ghostunnel\n\n### Develop\n\nGhostunnel has an extensive suite of integration tests. Our integration test\nsuite requires Python 3.5 (or later) and [gocovmerge][gcvm] to run. We use [Go\nmodules][gomod] for managing vendored dependencies. \n\nTo run tests:\n\n    # Option 1: run unit & integration tests locally\n    make test\n\n    # Option 2: run unit & integration tests in a Docker container\n    GO_VERSION=1.19 make docker-test\n\n    # Open coverage information in browser\n    go tool cover -html coverage-merged.out\n\nFor more information on how to contribute, please see the [CONTRIBUTING](CONTRIBUTING.md) file.\n\n[gcvm]: https://github.com/wadey/gocovmerge\n[gomod]: https://github.com/golang/go/wiki/Modules\n\nUsage\n=====\n\nBy default, ghostunnel runs in the foreground and logs to stderr. You can set\n`--syslog` to log to syslog instead of stderr. If you want to run ghostunnel\nin the background, we recommend using a service manager such as [systemd][systemd] or\n[runit][runit], or use a wrapper such as [daemonize][daemonize] or [dumb-init][dumb-init].\n\n[runit]: http://smarden.org/runit\n[systemd]: https://www.freedesktop.org/wiki/Software/systemd\n[daemonize]: http://software.clapper.org/daemonize\n[dumb-init]: https://github.com/Yelp/dumb-init\n\n### Certificates\n\nGhostunnel accepts certificates in multiple different file formats.\n\nThe `--keystore` flag can take a PKCS#12 keystore or a combined PEM file with the\ncertificate chain and private key as input (format is auto-detected). The `--cert` /\n`--key` flags can be used to load a certificate chain and key from separate PEM files\n(instead of a combined one).\n\nGhostunnel also supports loading identities from the macOS keychain or the\nSPIFFE Workload API and having private keys backed by PKCS#11 modules, see the\n\"Advanced Features\" section below for more information.\n\n### Server mode \n\nThis is an example for how to launch ghostunnel in server mode, listening for\nincoming TLS connections on `localhost:8443` and forwarding them to\n`localhost:8080`. Note that while we use TCP sockets on `localhost` in this\nexample, both the listen and target flags can also accept paths to UNIX domain\nsockets as their argument.\n\nTo set allowed clients, you must specify at least one of `--allow-all`,\n`--allow-cn`, `--allow-ou`, `--allow-dns` or `--allow-uri`. All checks are made\nagainst the certificate of the client. Multiple flags are treated as a logical\ndisjunction (OR), meaning clients can connect as long as any of the flags\nmatches (see [ACCESS-FLAGS](docs/ACCESS-FLAGS.md) for more information). In\nthis example, we assume that the CN of the client cert we want to accept\nconnections from is `client`.\n\nStart a backend server:\n\n    nc -l localhost 8080\n\nStart a ghostunnel in server mode to proxy connections:\n\n    ghostunnel server \\\n        --listen localhost:8443 \\\n        --target localhost:8080 \\\n        --keystore test-keys/server-keystore.p12 \\\n        --cacert test-keys/cacert.pem \\\n        --allow-cn client\n\nVerify that clients can connect with their client certificate:\n\n    openssl s_client \\\n        -connect localhost:8443 \\\n        -cert test-keys/client-combined.pem \\\n        -key test-keys/client-combined.pem \\\n        -CAfile test-keys/cacert.pem\n\nNow we have a TLS proxy running for our backend service. We terminate TLS in\nghostunnel and forward the connections to the insecure backend.\n\n### Client mode\n\nThis is an example for how to launch ghostunnel in client mode, listening on\n`localhost:8080` and proxying requests to a TLS server on `localhost:8443`. \n\nStart a backend TLS server:\n\n    openssl s_server \\\n        -accept 8443 \\\n        -cert test-keys/server-combined.pem \\\n        -key test-keys/server-combined.pem \\\n        -CAfile test-keys/cacert.pem\n\nStart a ghostunnel with a client certificate to forward connections:\n\n    ghostunnel client \\\n        --listen localhost:8080 \\\n        --target localhost:8443 \\\n        --keystore test-keys/client-combined.pem \\\n        --cacert test-keys/cacert.pem\n\nVerify that we can connect to `8080`:\n\n    nc -v localhost 8080\n\nNow we have a TLS proxy running for our client. We take the insecure local\nconnection, wrap them in TLS, and forward them to the secure backend.\n\n### Full tunnel (client plus server)\n\nWe can combine the above two examples to get a full tunnel. Note that you can\nstart the ghostunnels in either order.\n\nStart netcat on port `8001`:\n\n    nc -l localhost 8001\n\nStart the ghostunnel server:\n\n    ghostunnel server \\\n        --listen localhost:8002 \\\n        --target localhost:8001 \\\n        --keystore test-keys/server-combined.pem \\\n        --cacert test-keys/cacert.pem \\\n        --allow-cn client\n\nStart the ghostunnel client:\n\n    ghostunnel client \\\n        --listen localhost:8003 \\\n        --target localhost:8002 \\\n        --keystore test-keys/client-keystore.p12 \\\n        --cacert test-keys/cacert.pem\n\nVerify that we can connect to `8003`:\n\n    nc -v localhost 8003\n\nNow we have a full tunnel running. We take insecure client connections, \nforward them to the server side of the tunnel via TLS, and finally terminate\nand proxy the connection to the insecure backend.\n\nAdvanced Features\n=================\n\n### Access Control Flags\n\nGhostunnel supports different types of access control flags in both client and\nserver modes.  All checks are made against the certificate of the client or\nserver. Multiple flags are treated as a logical disjunction (OR), meaning\nclients can connect as long as any of the flags matches. Ghostunnel is\ncompatible with [SPIFFE][spiffe] [X.509 SVIDs][svid].\n\nGhostunnel also has experimental support for [Open Policy\nAgent](https://www.openpolicyagent.org/) (OPA) policies. Policies can be\nreloaded at runtime much like certificates.\n\nSee [ACCESS-FLAGS](docs/ACCESS-FLAGS.md) for details.\n\n[spiffe]: https://spiffe.io/\n[svid]: https://github.com/spiffe/spiffe/blob/master/standards/X509-SVID.md\n\n### Logging Options\n\nYou can silence specific types of log messages using the `--quiet=...` flag,\nsuch as `--quiet=conns` or `--quiet=handshake-errs`. You can pass this flag\nrepeatedly if you want to silence multiple different kinds of log messages.\n\nSupported values are:\n* `all`: silences **all** log messages\n* `conns`: silences log messages about new and closed connections. \n* `conn-errs`: silences log messages about connection errors encountered (post handshake). \n* `handshake-errs`: silences log messages about failed handshakes. \n\nIn particular we recommend setting `--quiet=handshake-errs` if you are\nrunning TCP health checks in Kubernetes on the listening port, and you\nwant to avoid seeing error messages from aborted connections on each health\ncheck.\n\n### Certificate Hotswapping\n\nTo trigger a reload, simply send `SIGUSR1` to the process or set a time-based\nreloading interval with the `--timed-reload` flag. This will cause ghostunnel\nto reload the certificate and private key from the files on disk. Once\nsuccessful, the reloaded certificate will be used for new connections going\nforward.\n\nAdditionally, ghostunnel uses `SO_REUSEPORT` to bind the listening socket on\nplatforms where it is supported (Linux, Apple macOS, FreeBSD, NetBSD, OpenBSD\nand DragonflyBSD). This means a new ghostunnel can be started on the same\nhost/port before the old one is terminated, to minimize dropped connections (or\navoid them entirely depending on how the OS implements the `SO_REUSEPORT`\nfeature).\n\nNote that if you are using an HSM/PKCS#11 module, only the certificate will\nbe reloaded. It is assumed that the private key in the HSM remains the same.\nThis means the updated/reissued certificate much match the private key that\nwas loaded from the HSM previously, everything else works the same.\n\n### ACME Support\n\nTo have Ghostunnel automatically obtain and renew a public TLS certificate via ACME,\nuse the `--auto-acme-cert=` flag (e.g. - `--auto-acme-cert=myservice.example.com`).\nYou must also specify an email address so you will get notices from the CA about\npotentially important certificate lifecycle events. Specify the email address with\nthe `--auto-acme-email=` flag. To use this feature, you must also specify the\n`--auto-acme-agree-to-tos` flag to indicate your explicit agreement with the CA's\nTerms of Service.\n\nGhostunnel defaults to using Let's Encrypt, but you can specify a different ACME\nCA URL using the `--auto-acme-ca=` flag. If you wish to test Ghostunnel's ACME\nfeatures against a non-production ACME CA, use the `--auto-acme-testca=` flag.\nIf `--auto-acme-testca` is specified, all ACME interaction will be with the\nspecified test CA URL and the `--auto-acme-ca=` flag will be ignored.\n\nACME is only supported in server mode. Additionally, Ghostunnel must either be\nlistening to a public interface on tcp/443, or somehow have a public tcp/443\nlistening interface forwarded to it (e.g. - systemd socket, iptables, etc.). Public\nDNS records must exist for a valid public DNS FQDN that resolves to the public\nlistening interface IP.\n### Metrics & Profiling\n\nGhostunnel has a notion of \"status port\", a TCP port (or UNIX socket) that can\nbe used to expose status and metrics information over HTTPS. The status port\nfeature can be controlled via the `--status` flag. Profiling endpoints on the\nstatus port can be enabled with `--enable-pprof`.\n\nSee [METRICS](docs/METRICS.md) for details.\n\n### HSM/PKCS#11 support\n\nGhostunnel has support for loading private keys from PKCS#11 modules, which\nshould work with any hardware security module that exposes a PKCS#11 interface.\n\nSee [HSM-PKCS11](docs/HSM-PKCS11.md) for details.\n\n### SPIFFE Workload API\n\nGhostunnel has support for maintaining up-to-date, frequently rotated\nidentities and trusted CA certificates from the SPIFFE Workload API.\n\nSee [SPIFFE-WORKLOAD-API](docs/SPIFFE-WORKLOAD-API.md) for details.\n\n### Socket Activation (experimental)\n\nGhostunnel supports socket activation via both systemd (on Linux) and launchd\n(on macOS). Socket activation is support for the `--listen` and `--status`\nflags, and can be used by passing an address of the form `systemd:<name>` or\n`launchd:<name>`, where `<name>` should be the name of the socket as defined in\nyour systemd/launchd configuration.\n\nSee [SOCKET-ACTIVATION](docs/SOCKET-ACTIVATION.md) for examples.\n\n### PROXY Protocol (experimental)\n\nGhostunnel in server mode supports signalling of transport connection information\nto the backend using the [PROXY protocol](https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt)\n(v2), just pass the `--proxy-protocol` flag on startup. Note that the backend must\nalso support the PROXY protocol and must be configured to use it when setting\nthis option.\n\n### MacOS Keychain Support (experimental)\n\nGhostunnel supports loading certificates from the macOS keychain. This is useful\nif you have identities stored in your local keychain that you want to use with\nghostunnel, e.g. if you want your private key(s) to be backed by the SEP on newer\nTouch ID MacBooks. Certificates from the keychain can be loaded by selecting them\nbased on the serial number, Common Name (CN) of the subject, or Common Name (CN)\nof the issuer.\n\nFor example, to load an identity based on subject name login keychain:\n\n    ghostunnel client \\\n        --keychain-identity <common-name-or-serial> \\\n        --listen unix:/path/to/unix/socket \\\n        --target example.com:443 \\\n        --cacert test-keys/cacert.pem\n\nOr, if you'd like to load an identity by filtering on issuer name:\n\n    ghostunnel client \\\n        --keychain-issuer <issuer-common-name> \\\n        --listen unix:/path/to/unix/socket \\\n        --target example.com:443 \\\n        --cacert test-keys/cacert.pem\n\nBoth commands above launch a ghostunnel instance that uses the certificate and\nprivate key for the selected keychain identity to proxy plaintext connections from\na given UNIX socket to example.com:443. Note that combining both the identity and\nissuer flags in one command will cause ghostunnel to select certificates where both\nattributes match (matching with AND on both subject name/issuer)."
}
