{
  "name": "youtubeuploader",
  "full_name": "youtubeuploader",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Scripted uploads to Youtube",
  "license": "Apache-2.0",
  "homepage": "https://github.com/porjo/youtubeuploader",
  "versions": {
    "stable": "23.02",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/porjo/youtubeuploader/archive/23.02.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "48f4315c713581547cd90b399c51a98f7d8a79c698f9a1f19f8a0d3dc70bd814"
    },
    "head": {
      "url": "https://github.com/porjo/youtubeuploader.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/youtubeuploader/blobs/sha256:07b89e4ed8ee773dde84b81772471e48ee910d291989d577136c0368cc34f67f",
          "sha256": "07b89e4ed8ee773dde84b81772471e48ee910d291989d577136c0368cc34f67f"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/youtubeuploader/blobs/sha256:07b89e4ed8ee773dde84b81772471e48ee910d291989d577136c0368cc34f67f",
          "sha256": "07b89e4ed8ee773dde84b81772471e48ee910d291989d577136c0368cc34f67f"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/youtubeuploader/blobs/sha256:07b89e4ed8ee773dde84b81772471e48ee910d291989d577136c0368cc34f67f",
          "sha256": "07b89e4ed8ee773dde84b81772471e48ee910d291989d577136c0368cc34f67f"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/youtubeuploader/blobs/sha256:a24e908a50675105dd26c9392e9f02f639555c1f00588e450646159279b234c0",
          "sha256": "a24e908a50675105dd26c9392e9f02f639555c1f00588e450646159279b234c0"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/youtubeuploader/blobs/sha256:a24e908a50675105dd26c9392e9f02f639555c1f00588e450646159279b234c0",
          "sha256": "a24e908a50675105dd26c9392e9f02f639555c1f00588e450646159279b234c0"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/youtubeuploader/blobs/sha256:a24e908a50675105dd26c9392e9f02f639555c1f00588e450646159279b234c0",
          "sha256": "a24e908a50675105dd26c9392e9f02f639555c1f00588e450646159279b234c0"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/youtubeuploader/blobs/sha256:cdb69cdbb2b5e68d63cc9a4234b01cf2ee89f2d2da18a4df1c5b28268e46e29e",
          "sha256": "cdb69cdbb2b5e68d63cc9a4234b01cf2ee89f2d2da18a4df1c5b28268e46e29e"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/youtubeuploader.rb",
  "ruby_source_checksum": {
    "sha256": "1d5797cc3f8651f6e6639b5e62503a20da0e1a7f3dc398201d69e48dff4e33cf"
  },
  "date_added": "2021-11-05T00:56:36+00:00",
  "readme": "# Youtube Uploader\n\nScripted uploads to youtube.\n\n- upload video files from local disk or from the web.\n- ratelimit upload bandwidth\n\n## Download\n\nGrab a [precompiled binary](https://github.com/porjo/youtubeuploader/releases) for Linux, Mac or Windows or build it yourself.\n\n## Setup\n\n### Youtube API\n\nTalking to the Youtube API requires oauth2 authentication. As such, you must:\n\n1. Create an account on the [Google Developers Console](https://console.developers.google.com)\n1. Create a new project for this app\n1. Enable the Youtube API (APIs & Services -> Enable APIs and Services -> Click 'ENABLE APIS AND SERVICES' top right). Select 'YouTube Data API v3'\n1. Create OAuth consent screen (APIs & Services -> OAuth Consent Screen)\n   - Add a test user. This can be any Google User account but it should correspond with the Youtube account where videos will be uploaded.\n1. Create Credentials (APIs & Services -> Credentials -> click 'CREATE CREDENTIALS'), select 'OAuth client ID', select 'Web application'\n   - Add an 'Authorized redirect URI' of 'http://localhost:8080/oauth2callback'\n1. Download the client secrets JSON file (click download icon next to newly created client ID) and save it as file `client_secrets.json` in the same directory as the utility e.g.\n\n```\n{\n  \"web\": {\n    \"client_id\": \"xxxxxxxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com\",\n    \"project_id\": \"youtubeuploader-yyyyy\",\n    \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n    \"token_uri\": \"https://oauth2.googleapis.com/token\",\n    \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n    \"client_secret\": \"xxxxxxxxxxxxxxxxxxxx\",\n    \"redirect_uris\": [\n      \"http://localhost:8080/oauth2callback\"\n    ]\n  }\n}\n```\n\n**NOTE** Google will apply 'private' status on videos uploaded to newly created projects - from [Google's Announcement](https://developers.google.com/youtube/v3/revision_history#july-28,-2020):\n\n> All videos uploaded via the videos.insert endpoint from unverified API projects created after 28 July 2020 will be restricted to private viewing mode. To lift this restriction, each project must undergo an audit to verify compliance with the Terms of Service.\n\nSee [Issue #86](https://github.com/porjo/youtubeuploader/issues/86) for more information.\n\n## Usage\n\nAt a minimum, just specify a filename:\n\n```\n./youtubeuploader -filename blob.mp4\n```\n\nIf it is the first time you've run the utility, a browser window should popup and prompt you to provide Youtube credentials. A token will be created and stored in `request.token` file in the local directory for subsequent use. To run the utility on a headless-server, generate the token file locally first, then simply copy the token file along with `youtubeuploader` and `client_secrets.json` to the remote host.\n\nFull list of options:\n```\n  -cache string\n    \ttoken cache file (default \"request.token\")\n  -caption string\n    \tcaption filename. Can be a URL\n  -categoryId string\n    \tvideo category Id\n  -chunksize int\n    \tsize (in bytes) of each upload chunk. A zero value will cause all data to be uploaded in a single request (default 16777216)\n  -debug\n    \tturn on verbose log output\n  -description string\n    \tvideo description (default \"uploaded by youtubeuploader\")\n  -filename string\n    \tvideo filename. Can be a URL. Read from stdin with '-'\n  -language string\n    \tvideo language (default \"en\")\n  -limitBetween string\n    \tonly rate limit between these times e.g. 10:00-14:00 (local time zone)\n  -metaJSON string\n    \tJSON file containing title,description,tags etc (optional)\n  -metaJSONout string\n    \tfilename to write uploaded video metadata into (optional)\n  -notify\n    \tnotify channel subscribers of new video. Specify '-notify=false' to disable. (default true)\n  -oAuthPort int\n    \tTCP port to listen on when requesting an oAuth token (default 8080)\n  -privacy string\n    \tvideo privacy status (default \"private\")\n  -quiet\n    \tsuppress progress indicator\n  -ratelimit int\n    \trate limit upload in Kbps. No limit by default\n  -secrets string\n    \tClient Secrets configuration (default \"client_secrets.json\")\n  -tags string\n    \tcomma separated list of video tags\n  -thumbnail string\n    \tthumbnail filename. Can be a URL\n  -title string\n    \tvideo title\n  -version\n    \tshow version\n```\n*NOTE:* When specifying a URL as the filename, the data will be streamed through the localhost (download from remote host, then upload to Youtube)\n\nIf `-quiet` is specified, no upload progress will be displayed. Current progress can be output by sending signal `USR1` to the process e.g. `kill -USR1 <pid>` (Linux/Unix only).\n\n### Metadata\n\nVideo title, description etc can specified via the command line flags or via a JSON file using the `-metaJSON` flag. An example JSON file would be:\n\n```json\n{\n  \"title\": \"my test title\",\n  \"description\": \"my test description\",\n  \"tags\": [\"test tag1\", \"test tag2\"],\n  \"privacyStatus\": \"private\",\n  \"madeForKids\": false,\n  \"embeddable\": true,\n  \"license\": \"creativeCommon\",\n  \"publicStatsViewable\": true,\n  \"publishAt\": \"2017-06-01T12:05:00+02:00\",\n  \"categoryId\": \"10\",\n  \"recordingdate\": \"2017-05-21\",\n  \"playlistIds\":  [\"xxxxxxxxxxxxxxxxxx\", \"yyyyyyyyyyyyyyyyyy\"],\n  \"playlistTitles\":  [\"my test playlist\"],\n  \"language\":  \"fr\"\n}\n```\n- all fields are optional\n- use `\\n` in the description to insert newlines\n- times can be provided in one of two formats: `yyyy-mm-dd` (UTC) or `yyyy-mm-ddThh:mm:ss+zz:zz`\n- any values supplied via command line will take precedence\n\n## Releases\n\nReleases are built with [Goreleaser](https://github.com/goreleaser/goreleaser):\n```\n# Signed tag\ngit tag -s <tag>\ngit push --tags\nGITHUB_TOKEN=xxxxyyy goreleaser release\n```\n\n## Credit\n\nBased on [Go Youtube API Sample code](https://github.com/youtube/api-samples/tree/master/go)\n\nThanks to [github.com/tokland/youtube-upload](https://github.com/tokland/youtube-upload) for insight into how to update playlists."
}
