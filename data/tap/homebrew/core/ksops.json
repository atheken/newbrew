{
  "name": "ksops",
  "full_name": "ksops",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Flexible Kustomize Plugin for SOPS Encrypted Resources",
  "license": "Apache-2.0",
  "homepage": "https://github.com/viaduct-ai/kustomize-sops",
  "versions": {
    "stable": "4.2.1",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/viaduct-ai/kustomize-sops/archive/refs/tags/v4.2.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "0e9501af7ac0323d246c9fa4d49d9f12fe4ddf65be21e9fbbe58a041dbfbeece"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ksops/blobs/sha256:7be87fae2bd05f216b4ae5d6658ba5304fb8df6856a44d22800ea9f725ee46a4",
          "sha256": "7be87fae2bd05f216b4ae5d6658ba5304fb8df6856a44d22800ea9f725ee46a4"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ksops/blobs/sha256:7be87fae2bd05f216b4ae5d6658ba5304fb8df6856a44d22800ea9f725ee46a4",
          "sha256": "7be87fae2bd05f216b4ae5d6658ba5304fb8df6856a44d22800ea9f725ee46a4"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ksops/blobs/sha256:7be87fae2bd05f216b4ae5d6658ba5304fb8df6856a44d22800ea9f725ee46a4",
          "sha256": "7be87fae2bd05f216b4ae5d6658ba5304fb8df6856a44d22800ea9f725ee46a4"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ksops/blobs/sha256:d4033ab623c841873a1ab5ac10e54e315f2cdd18e7cfb4fea26dac9535353956",
          "sha256": "d4033ab623c841873a1ab5ac10e54e315f2cdd18e7cfb4fea26dac9535353956"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ksops/blobs/sha256:d4033ab623c841873a1ab5ac10e54e315f2cdd18e7cfb4fea26dac9535353956",
          "sha256": "d4033ab623c841873a1ab5ac10e54e315f2cdd18e7cfb4fea26dac9535353956"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ksops/blobs/sha256:d4033ab623c841873a1ab5ac10e54e315f2cdd18e7cfb4fea26dac9535353956",
          "sha256": "d4033ab623c841873a1ab5ac10e54e315f2cdd18e7cfb4fea26dac9535353956"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ksops/blobs/sha256:ac116c085b91608fcce4350d0af4c8f97d88525a983f3f93acbc161150f9d875",
          "sha256": "ac116c085b91608fcce4350d0af4c8f97d88525a983f3f93acbc161150f9d875"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/ksops.rb",
  "ruby_source_checksum": {
    "sha256": "6f774df756771fb9c23e50bdbe9ec581b5b109e88a17779f7211ce6adc25713a"
  },
  "date_added": "2023-04-01T18:15:28-04:00",
  "readme": "# KSOPS - A Flexible Kustomize Plugin for SOPS Encrypted Resources\n\n![Tests and Build](https://github.com/viaduct-ai/kustomize-sops/workflows/Run%20Tests%20and%20Build/badge.svg?branch=master)\n\n- [Background](#background)\n- [Overview](#overview)\n- [Requirements](#requirements)\n- [Installation Options](#installation-options)\n- [Getting Started](#getting-started-tutorial)\n- [Generator Options](#generator-options)\n- [Development and Testing](#development-and-testing)\n- [Legacy Exec Plugin](#legacy-exec-plugin)\n- [Argo CD Integration ðŸ¤–](#argo-cd-integration-)\n\n## Background\n\nAt [Viaduct](https://www.viaduct.ai/), we manage our Kubernetes resources via the [GitOps](https://www.weave.works/blog/gitops-operations-by-pull-request) pattern; however, we could not find a solution compatible with our stack for managing secrets via the GitOps paradigm. We built `KSOPS` to connect [kustomize](https://github.com/kubernetes-sigs/kustomize/) to [SOPS](https://github.com/mozilla/sops) and integrated it with [Argo CD](https://github.com/argoproj/argo-cd) to safely manage our secrets the same way we manage the rest our Kubernetes manifest.\n\n## Overview\n\n`KSOPS`, or kustomize-SOPS, is a [kustomize](https://github.com/kubernetes-sigs/kustomize/) [KRM exec plugin](https://kubectl.docs.kubernetes.io/guides/extending_kustomize/exec_krm_functions/) for SOPS encrypted resources. `KSOPS` can be used to decrypt any Kubernetes resource, but is most commonly used to decrypt encrypted Kubernetes Secrets and ConfigMaps. As a [kustomize](https://github.com/kubernetes-sigs/kustomize/) plugin, `KSOPS` allows you to manage, build, and apply encrypted manifests the same way you manage the rest of your Kubernetes manifests.\n\n## Requirements\n\n- [kustomize](https://github.com/kubernetes-sigs/kustomize/)\n\n## Installation\n\n### Install the Latest Release\n\nUsing curl\n\n```bash\ncurl -s https://raw.githubusercontent.com/viaduct-ai/kustomize-sops/master/scripts/install-ksops-archive.sh | bash\n```\n\nOr using wget\n\n```bash\nwget -qcO - https://raw.githubusercontent.com/viaduct-ai/kustomize-sops/master/scripts/install-ksops-archive.sh | bash\n```\n\nIf you receive a `Permission denied` error, try running the command with `sudo`\n\n```bash\nwget -qcO - https://raw.githubusercontent.com/viaduct-ai/kustomize-sops/master/scripts/install-ksops-archive.sh | sudo bash \n```\n\n### Install from Source\n\n_Note:_ Installing from source requires Go\n\n```bash\n# Optionally, install kustomize via\n# make kustomize\n# Verify the $GOPATH environment variable exists\nmake install\n```\n\n## Getting Started (Tutorial)\n\n### 0. Verify Requirements\n\nBefore continuing, verify your installation of [kustomize](https://github.com/kubernetes-sigs/kustomize/)\nand `gpg`. Below are a few non-comprehensive commands to quickly check your installations:\n\n```bash\n# Verify kustomize is installed\nkustomize version\n\n# Verify gpg is installed\ngpg --help\n```\n\n### 1. Download and install KSOPS\n\nMake KSOPS available to your shell's PATH\n\n```bash\nsource <(curl -s https://raw.githubusercontent.com/viaduct-ai/kustomize-sops/master/scripts/install-ksops-archive.sh)\n```\n\n### 2. Import Test PGP Keys\n\nTo simplify local development and testing, we use PGP test keys. To import the keys, run the following command from the repository's root directory:\n\n```bash\nmake import-test-keys\n```\n\nIf you are following this tutorial, be sure to run this before the following steps. The PGP keys will also be imported when you run `make test`\n\nSee [SOPS](https://github.com/mozilla/sops) for details.\n\n### 3. Configure SOPS via .sops.yaml\n\nFor this example and testing, `KSOPS` relies on the `SOPS` creation rules defined in `.sops.yaml`. To make encrypted secrets more readable, we suggest using the following encryption regex to only encrypt `data` and `stringData` values. This leaves non-sensitive fields, like the secret's name, unencrypted and human readable.\n\n**Note:** You only have to modify `.sops.yaml` if you want to use your key management service in this example instead of the default PGP key imported in the previous step.\n\n```yaml\ncreation_rules:\n  - unencrypted_regex: \"^(apiVersion|metadata|kind|type)$\"\n    # Specify kms/pgp/etc encryption key\n    # This tutorial uses a local PGP key for encryption.\n    # DO NOT USE IN PRODUCTION ENV\n    pgp: \"FBC7B9E2A4F9289AC0C1D4843D16CEE4A27381B4\"\n    # Optionally you can configure to use a providers key store\n    # kms: XXXXXX\n    # gcp_kms: XXXXXX\n```\n\n### 4. Create a Resource\n\n```bash\n# Create a local Kubernetes Secret\ncat <<EOF > secret.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mysecret\ntype: Opaque\ndata:\n  username: YWRtaW4=\n  password: MWYyZDFlMmU2N2Rm\nEOF\n```\n\n### 5. Encrypt the Resources\n\n```bash\n# Encrypt with SOPS CLI\n# Specify SOPS configuration in .sops.yaml\nsops -e secret.yaml > secret.enc.yaml\n```\n\n### 6. Define KSOPS kustomize Generator\n\n```bash\n# Create a local Kubernetes Secret\ncat <<EOF > secret-generator.yaml\napiVersion: viaduct.ai/v1\nkind: ksops\nmetadata:\n  # Specify a name\n  name: example-secret-generator\n  annotations:\n    config.kubernetes.io/function: |\n        exec:\n          # if the binary is in your PATH, you can do\n          path: ksops\n          # otherwise, path should be relative to manifest files, like\n          # path: ../../../ksops\nfiles:\n  - ./secret.enc.yaml\nEOF\n```\n\n### 7. Create the kustomization.yaml\n\n[Read about kustomize plugins](https://kubectl.docs.kubernetes.io/guides/extending_kustomize/exec_plugins/)\n\n```bash\ncat <<EOF > kustomization.yaml\ngenerators:\n  - ./secret-generator.yaml\nEOF\n```\n\n### 8. Build with kustomize ðŸ”‘\n\n```bash\n# Build with kustomize to verify\n# In kustomize v2 and v3 the command is\n# kustomize build --enable_alpha_plugins .\nkustomize build --enable-alpha-plugins --enable-exec .\n```\n\n### Troubleshooting\n\n#### Sanity Checks\n\n- Validate `ksops` command is in your path\n\n```bash\n# Should output a path to KSOPS executable\ncommand -v ksops\n```\n\n- If you prefer to not install `ksops` to your path, make sure the path to the executable in the generator manifest is relative to the manifests files\n\n#### Check Existing Issues\n\nSomeone might have already encountered your issue.\n\nhttps://github.com/viaduct-ai/kustomize-sops/issues\n\n## Generate secret directly from encrypted files\n\n`KSOPS` can also generate a Kubernetes Secret directly from encrypted files or dotenv files.\n\n```bash\n# Create a Kubernetes Secret from encrypted file\ncat <<EOF > secret-generator.yaml\napiVersion: viaduct.ai/v1\nkind: ksops\nmetadata:\n  name: example-secret-generator\n  annotations:\n    config.kubernetes.io/function: |\n        exec:\n          path: ksops\nsecretFrom:\n- metadata:\n    name: secret-name\n    labels:\n      app: foo\n    annotations:\n      kustomize.config.k8s.io/needs-hash: \"false\"\n  type: Opaque\n  files:\n  - ./secret.enc.conf\n  - secret.yaml=./secret.enc.yaml\nEOF\n```\n\n```bash\n# Create a Kubernetes Secret from encrypted dotenv file\ncat <<EOF > secret-generator.yaml\napiVersion: viaduct.ai/v1\nkind: ksops\nmetadata:\n  name: example-secret-generator\n  annotations:\n    config.kubernetes.io/function: |\n        exec:\n          path: ksops\nsecretFrom:\n- metadata:\n    name: secret-name\n  envs:\n  - ./secret.enc.env\nEOF\n```\n\n## Generator Options\n\n`KSOPS` supports kustomize annotation based generator options. At the time of writing, the supported annotations are:\n\n- `kustomize.config.k8s.io/needs-hash`\n- `kustomize.config.k8s.io/behavior`\n\nFor information, read the [kustomize generator options documentation](https://github.com/kubernetes-sigs/kustomize/blob/master/examples/generatorOptions.md).\n\n### Encrypted Secret Overlays w/ Generator Options\n\nSometimes there is a default secret as part of a project's base manifests, like the [base Argo CD secret](https://github.com/argoproj/argo-cd/blob/master/manifests/base/config/argocd-secret.yaml), which you want to `replace` in your overlay. Other times, you have parts of base secret that are common across different overlays but you want to partially update, or `merge`, changes specific to each overlay as well. You can achieve both of these goals by simply adding the following annotations to your encrypted secrets:\n\n#### Replace a Base Secret\n\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: argocd-secret\n  annotations:\n    # replace the base secret data/stringData values with these encrypted data/stringData values\n    kustomize.config.k8s.io/behavior: replace\ntype: Opaque\ndata:\n  # Encrypted data here\nstringData:\n  # Encrypted data here\n```\n\n#### Merge/Patch a Base Secret\n\n```yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: argocd-secret\n  annotations:\n    # merge the base secret data/stringData values with these encrypted data/stringData values\n    kustomize.config.k8s.io/behavior: merge\ntype: Opaque\ndata:\n  # Encrypted data here\nstringData:\n  # Encrypted data here\n```\n\n## Development and Testing\n\nBefore developing or testing `KSOPS`, ensure all external [requirements](#requirements) are properly installed.\n\n```bash\n# Setup development environment\nmake setup\n```\n\n### Development\n\n`KSOPS` implements the [kustomize](https://github.com/kubernetes-sigs/kustomize/) plugin API in `ksops.go`.\n\n`KSOPS`'s logic is intentionally simple. Given a list of SOPS encrypted Kubernetes manifests, it iterates over each file and decrypts it via SOPS [decrypt](https://godoc.org/go.mozilla.org/sops/decrypt) library. `KSOPS` assumes nothing about the structure of the encrypted resource and relies on [kustomize](https://github.com/kubernetes-sigs/kustomize/) for manifest validation. `KSOPS` expects the encryption key to be accessible. This is important to consider when using `KSOPS` for CI/CD.\n\n### Testing\n\nTesting `KSOPS` requires:\n\nEverything is handled for you by `make test`. Just run it from the repo's root directory:\n\n```bash\nmake test\n```\n\n## Legacy Exec Plugin\n\nIf you are on an older version (`<=v3.x.x`) of `KSOPS` or want to use legacy exec style plugin, the then read the [Legacy README](./README-legacy.md) for instructions.\n\n## Argo CD Integration ðŸ¤–\n\n`KSOPS` becomes even more powerful when integrated with a CI/CD pipeline. By combining `KSOPS` with [Argo CD](https://github.com/argoproj/argo-cd/), you can manage Kubernetes secrets via the same Git Ops pattern you use to manage the rest of your kubernetes manifests. To integrate `KSOPS` and [Argo CD](https://github.com/argoproj/argo-cd/), you will need to update the Argo CD ConifgMap and create a [strategic merge patch](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-api-machinery/strategic-merge-patch.md) or a [custom Argo CD build](https://argoproj.github.io/argo-cd/operator-manual/custom_tools/#byoi-build-your-own-image). As an alternative you can also use the [Argo CD Helm Chart](https://github.com/argoproj/argo-helm/tree/master/charts/argo-cd) with [custom values](#argo-cd-helm-chart-with-custom-tooling). Don't forget to inject any necessary credentials (i.e AWS credentials) when deploying the [Argo CD](https://github.com/argoproj/argo-cd/) + `KSOPS` build!\n\n[KSOPS Docker Image](https://hub.docker.com/r/viaductoss/ksops)\n\n[KSOPS Quay.io Image](https://quay.io/repository/viaductoss/ksops)\n\n### Enable Kustomize Plugins via Argo CD ConfigMap\n\nAs of now to allow [Argo CD](https://github.com/argoproj/argo-cd/) to use [kustomize](https://github.com/kubernetes-sigs/kustomize/) plugins you must use the `--enable-alpha-plugins` and `--enable-exec` flags. This is configured by the `kustomize.buildOptions` setting in the [Argo CD](https://github.com/argoproj/argo-cd/) ConfigMap\n\n```yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: argocd-cm\n  labels:\n    app.kubernetes.io/name: argocd-cm\n    app.kubernetes.io/part-of: argocd\ndata:\n  kustomize.buildOptions: \"--enable-alpha-plugins --enable-exec\"\n```\n\n### KSOPS Repo Sever Patch\n\nThe simplest way to integrate `KSOPS` with [Argo CD](https://github.com/argoproj/argo-cd/) is with a [strategic merge patch](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-api-machinery/strategic-merge-patch.md) on the Argo CD repo server deployment. The patch below uses an init container to build `KSOPS` and volume mount to inject the `KSOPS` plugin and, optionally, override the [kustomize](https://github.com/kubernetes-sigs/kustomize/) executable.\n\n```yaml\n# argo-cd-repo-server-ksops-patch.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: argocd-repo-server\nspec:\n  template:\n    spec:\n      # 1. Define an emptyDir volume which will hold the custom binaries\n      volumes:\n        - name: custom-tools\n          emptyDir: {}\n      # 2. Use an init container to download/copy custom binaries into the emptyDir\n      initContainers:\n        - name: install-ksops\n          image: viaductoss/ksops:v4.2.1\n          command: [\"/bin/sh\", \"-c\"]\n          args:\n            - echo \"Installing KSOPS...\";\n              mv ksops /custom-tools/;\n              mv kustomize /custom-tools/;\n              echo \"Done.\";\n          volumeMounts:\n            - mountPath: /custom-tools\n              name: custom-tools\n      # 3. Volume mount the custom binary to the bin directory (overriding the existing version)\n      containers:\n        - name: argocd-repo-server\n          volumeMounts:\n            - mountPath: /usr/local/bin/kustomize\n              name: custom-tools\n              subPath: kustomize\n            - mountPath: /usr/local/bin/ksops\n              name: custom-tools\n              subPath: ksops\n        ## If you use AWS or GCP KMS, don't forget to include the necessary credentials to decrypt the secrets!\n        # env:\n        #  - name: AWS_ACCESS_KEY_ID\n        #    valueFrom:\n        #      secretKeyRef:\n        #        name: argocd-aws-credentials\n        #        key: accesskey\n        #  - name: AWS_SECRET_ACCESS_KEY\n        #    valueFrom:\n        #      secretKeyRef:\n        #        name: argocd-aws-credentials\n        #        key: secretkey\n```\n\n### Custom Argo CD w/ KSOPS Dockerfile\n\nAlternatively, for more control and faster pod start times you can build a custom docker image.\n\n```Dockerfile\nARG ARGO_CD_VERSION=\"v2.6.7\"\n# https://github.com/argoproj/argo-cd/blob/master/Dockerfile\nARG KSOPS_VERSION=\"v4.2.1\"\n\n#--------------------------------------------#\n#--------Build KSOPS and Kustomize-----------#\n#--------------------------------------------#\n\nFROM viaductoss/ksops:$KSOPS_VERSION as ksops-builder\n\n#--------------------------------------------#\n#--------Build Custom Argo Image-------------#\n#--------------------------------------------#\n\nFROM argoproj/argocd:$ARGO_CD_VERSION\n\n# Switch to root for the ability to perform install\nUSER root\n\nARG PKG_NAME=ksops\n\n# Override the default kustomize executable with the Go built version\nCOPY --from=ksops-builder /usr/local/bin/kustomize /usr/local/bin/kustomize\n\n# Add ksops executable to path\nCOPY --from=ksops-builder /usr/local/bin/ksops /usr/local/bin/ksops\n\n# Switch back to non-root user\nUSER argocd\n```\n\n### Argo CD Helm Chart with Custom Tooling\n\nWe can setup `KSOPS` custom tooling in the [Argo CD Chart](https://github.com/argoproj/argo-helm/tree/master/charts/argo-cd) with the following values:\n\n```yaml\n# Enable Kustomize Alpha Plugins via Argo CD ConfigMap, required for ksops\nserver:\n  config:\n    kustomize.buildOptions: \"--enable-alpha-plugins --enable-exec\"\n\nrepoServer:\n  # Use init containers to configure custom tooling\n  # https://argoproj.github.io/argo-cd/operator-manual/custom_tools/\n  volumes:\n    - name: custom-tools\n      emptyDir: {}\n\n  initContainers:\n    - name: install-ksops\n      image: viaductoss/ksops:v4.2.1\n      command: [\"/bin/sh\", \"-c\"]\n      args:\n        - echo \"Installing KSOPS...\";\n          mv ksops /custom-tools/;\n          mv kustomize /custom-tools/;\n          echo \"Done.\";\n      volumeMounts:\n        - mountPath: /custom-tools\n          name: custom-tools\n  volumeMounts:\n    - mountPath: /usr/local/bin/kustomize\n      name: custom-tools\n      subPath: kustomize\n    - mountPath: /usr/local/bin/ksops\n      name: custom-tools\n      subPath: ksops\n```"
}
