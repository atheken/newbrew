{
  "name": "swift-protobuf",
  "full_name": "swift-protobuf",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Plugin and runtime library for using protobuf with Swift",
  "license": "Apache-2.0",
  "homepage": "https://github.com/apple/swift-protobuf",
  "versions": {
    "stable": "1.22.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/apple/swift-protobuf/archive/1.22.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "a1c023c2eaf393350800e3cfadbea327c48f072626df4b12f238a52eee3a0f7b"
    },
    "head": {
      "url": "https://github.com/apple/swift-protobuf.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/swift-protobuf/blobs/sha256:d0c3ad89a86fed8f23163d4fc31a5f8652ccd21640967372685670a0d9647126",
          "sha256": "d0c3ad89a86fed8f23163d4fc31a5f8652ccd21640967372685670a0d9647126"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/swift-protobuf/blobs/sha256:c0adf4afc0fdd0ad5e3b09f8c42df914803e4c3cb844a4e9d8b656fb81aabe03",
          "sha256": "c0adf4afc0fdd0ad5e3b09f8c42df914803e4c3cb844a4e9d8b656fb81aabe03"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/swift-protobuf/blobs/sha256:8c4be07b3f2f920a4a15b1bc7b212ed8a48b330dc872f3783940f7e0c96d14b1",
          "sha256": "8c4be07b3f2f920a4a15b1bc7b212ed8a48b330dc872f3783940f7e0c96d14b1"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/swift-protobuf/blobs/sha256:f353ecca6db6bd4a06bd45d62308720889d2f71cb0767a0079244301ee16fd6a",
          "sha256": "f353ecca6db6bd4a06bd45d62308720889d2f71cb0767a0079244301ee16fd6a"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/swift-protobuf/blobs/sha256:12fa11360a9034aadf3a63fd96bb2a30082ab9596f8a7e1449ed2d18146d2efe",
          "sha256": "12fa11360a9034aadf3a63fd96bb2a30082ab9596f8a7e1449ed2d18146d2efe"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/swift-protobuf/blobs/sha256:5072488cfef69bd220cee4327ad46d9f39bdb49c2045798d8852c71396b473e1",
          "sha256": "5072488cfef69bd220cee4327ad46d9f39bdb49c2045798d8852c71396b473e1"
        },
        "x86_64_linux": {
          "cellar": "/home/linuxbrew/.linuxbrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/swift-protobuf/blobs/sha256:2109d7354d89d9faf3f5faf0d9fdb8161f2e6e9501762070467655105fe47eda",
          "sha256": "2109d7354d89d9faf3f5faf0d9fdb8161f2e6e9501762070467655105fe47eda"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "protobuf"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "swift"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [
    {
      "name": "xcode",
      "cask": null,
      "download": null,
      "version": "8.3",
      "contexts": [
        "build"
      ],
      "specs": [
        "stable",
        "head"
      ]
    }
  ],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/swift-protobuf.rb",
  "ruby_source_checksum": {
    "sha256": "16b171dc1cb6b1d89245a03900e1035dce7f37d0b3bb941d6a2522af37955718"
  },
  "date_added": "2017-10-21T05:14:19-07:00",
  "readme": "<img src=\"https://swift.org/assets/images/swift.svg\" alt=\"Swift logo\" height=\"70\" >\n\n# Swift Protobuf\n\n**Welcome to Swift Protobuf!**\n\n[Apple's Swift programming language](https://swift.org/) is a perfect\ncomplement to [Google's Protocol Buffer](https://protobuf.dev/)\n(\"protobuf\") serialization technology.\nThey both emphasize high performance and programmer safety.\n\nThis project provides both the command-line program that adds Swift\ncode generation to Google's `protoc` and the runtime library that is\nnecessary for using the generated code.\nAfter using the protoc plugin to generate Swift code from your .proto\nfiles, you will need to add this library to your project.\n\n[![Build and Test](https://github.com/apple/swift-protobuf/workflows/Build%20and%20Test/badge.svg)](https://github.com/apple/swift-protobuf/actions?query=workflow%3A%22Build+and+Test%22)\n[![Check Upstream Protos](https://github.com/apple/swift-protobuf/workflows/Check%20Upstream%20Proto%20Files/badge.svg)](https://github.com/apple/swift-protobuf/actions?query=workflow%3A%22Check+Upstream+Proto+Files%22)\n[![Run Conformance Tests](https://github.com/apple/swift-protobuf/workflows/Run%20Conformance%20Tests/badge.svg)](https://github.com/apple/swift-protobuf/actions?query=workflow%3A%22Run+Conformance+Tests%22)\n\n# Features of SwiftProtobuf\n\nSwiftProtobuf offers many advantages over alternative serialization\nsystems:\n\n* Safety: The protobuf code-generation system avoids the\n  errors that are common with hand-built serialization code.\n* Correctness: SwiftProtobuf passes both its own extensive\n  test suite and Google's full conformance test for protobuf\n  correctness.\n* Schema-driven: Defining your data structures in a separate\n  `.proto` schema file clearly documents your communications\n  conventions.\n* Idiomatic: SwiftProtobuf takes full advantage of the Swift language.\n  In particular, all generated types provide full Swift copy-on-write\n  value semantics.\n* Efficient binary serialization: The `.serializedBytes()`\n  method returns a bag of bytes with a compact binary form of your data.\n  You can deserialize the data using the `init(serializedBytes:)`\n  initializer.\n* Standard JSON serialization: The `.jsonUTF8Bytes()` method returns a JSON\n  form of your data that can be parsed with the `init(jsonUTF8Bytes:)`\n  initializer.\n* Hashable, Equatable: The generated struct can be put into a\n  `Set<>` or `Dictionary<>`.\n* Performant: The binary and JSON serializers have been\n  extensively optimized.\n* Extensible: You can add your own Swift extensions to any\n  of the generated types.\n\nBest of all, you can take the same `.proto` file and generate\nJava, C++, Python, or Objective-C for use on other platforms. The\ngenerated code for those languages will use the exact same\nserialization and deserialization conventions as SwiftProtobuf, making\nit easy to exchange serialized data in binary or JSON forms, with no\nadditional effort on your part.\n\n# Documentation\n\nMore information is available in the associated documentation:\n\n * [Google's protobuf documentation](https://protobuf.dev/)\n   provides general information about protocol buffers, the protoc compiler,\n   and how to use protocol buffers with C++, Java, and other languages.\n * [PLUGIN.md](Documentation/PLUGIN.md) documents the `protoc-gen-swift`\n   plugin that adds Swift support to the `protoc` program\n * [API.md](Documentation/API.md) documents how to use the generated code.\n   This is recommended reading for anyone using SwiftProtobuf in their\n   project.\n * [INTERNALS.md](Documentation/INTERNALS.md) documents the internal structure\n   of the generated code and the library.  This\n   should only be needed by folks interested in working on SwiftProtobuf\n   itself.\n * [STYLE_GUIDELINES.md](Documentation/STYLE_GUIDELINES.md) documents the style\n   guidelines we have adopted in our codebase if you are interested in\n   contributing\n\n# Getting Started\n\nIf you've worked with Protocol Buffers before, adding Swift support is very\nsimple: you just need to build the `protoc-gen-swift` program and copy it into\nyour PATH.\nThe `protoc` program will find and use it automatically, allowing you\nto build Swift sources for your proto files.\nYou will also, of course, need to add the SwiftProtobuf runtime library to\nyour project as explained below.\n\n## System Requirements\n\nTo use Swift with Protocol buffers, you'll need:\n\n* A Swift 5.6 or later compiler (or, if building with Xcode, Xcode 14.1 or later\n  as required by the App Store). The Swift protobuf project is being developed\n  and tested against the latest release version of Swift available from\n  [Swift.org](https://swift.org)\n\n* Google's protoc compiler.  The Swift protoc plugin is being actively developed\n  and tested against the latest protobuf sources. The SwiftProtobuf tests need a\n  version of protoc which supports the `swift_prefix` option (introduced in\n  protoc 3.2.0). It may work with earlier versions of protoc. You can get recent\n  versions from\n  [Google's github repository](https://github.com/protocolbuffers/protobuf).\n\n## Building and Installing the Code Generator Plugin\n\nTo translate `.proto` files into Swift, you will need both Google's\nprotoc compiler and the SwiftProtobuf code generator plugin.\n\nBuilding the plugin should be simple on any supported Swift platform:\n\n```\ngit clone https://github.com/apple/swift-protobuf.git\ncd swift-protobuf\n```\n\nPick what released version of SwiftProtobuf you are going to use.  You can get\na list of tags with:\n\n```\ngit tag -l\n```\n\nOnce you pick the version you will use, set your local state to match, and\nbuild the protoc plugin:\n\n```\ngit checkout tags/[tag_name]\nswift build -c release\n```\n\nThis will create a binary called `protoc-gen-swift` in the `.build/release`\ndirectory.\n\nTo install, just copy this one executable into a directory that is\npart of your `PATH` environment variable.\n\nNOTE: The Swift runtime support is now included with macOS. If you are\nusing old Xcode versions or are on older system versions, you might need\nto use also use `--static-swift-stdlib` with `swift build`.\n\n### Alternatively install via Homebrew\n\nIf you prefer using [Homebrew](https://brew.sh):\n\n```\nbrew install swift-protobuf\n```\n\nThis will install `protoc` compiler and Swift code generator plugin.\n\n## Converting .proto files into Swift\n\nTo generate Swift output for your .proto files, you run the `protoc` command as\nusual, using the `--swift_out=<directory>` option:\n\n```\nprotoc --swift_out=. my.proto\n```\n\nThe `protoc` program will automatically look for `protoc-gen-swift` in your\n`PATH` and use it.\n\nEach `.proto` input file will get translated to a corresponding `.pb.swift`\nfile in the output directory.\n\nMore information about building and using `protoc-gen-swift` can be found\nin the [detailed Plugin documentation](Documentation/PLUGIN.md).\n\n## Adding the SwiftProtobuf library to your project...\n\nTo use the generated code, you need to include the `SwiftProtobuf` library\nmodule in your project.  How you do this will vary depending on how\nyou're building your project.  Note that in all cases, we strongly recommend\nthat you use the version of the SwiftProtobuf library that corresponds to\nthe version of `protoc-gen-swift` you used to generate the code.\n\n### ...using `swift build`\n\nAfter copying the `.pb.swift` files into your project, you will need to add the\n[SwiftProtobuf library](https://github.com/apple/swift-protobuf) to your\nproject to support the generated code.\nIf you are using the Swift Package Manager, add a dependency to your\n`Package.swift` file and import the `SwiftProtobuf` library into the desired\ntargets.  Adjust the `\"1.6.0\"` here to match the `[tag_name]` you used to build\nthe plugin above:\n\n```swift\ndependencies: [\n    .package(url: \"https://github.com/apple/swift-protobuf.git\", from: \"1.6.0\"),\n],\ntargets: [\n    .target(\n      name: \"MyTarget\",\n      dependencies: [.product(name: \"SwiftProtobuf\", package: \"swift-protobuf\")]\n    ),\n]\n```\n\n### ...using Xcode\n\nIf you are using Xcode, then you should:\n\n* Add the `.pb.swift` source files generated from your protos directly to your\n  project\n* Add this SwiftPM package as dependency of your xcode project:\n  [Apple Docs](https://developer.apple.com/documentation/swift_packages/adding_package_dependencies_to_your_app)\n\n### ...using CocoaPods\n\nIf you're using CocoaPods, add this to your `Podfile` adjusting the `:tag` to\nmatch the `[tag_name]` you used to build the plugin above:\n\n```ruby\npod 'SwiftProtobuf', '~> 1.0'\n```\n\nAnd run `pod install`.\n\nNOTE: CocoaPods 1.7 or newer is required.\n\n# Quick Start\n\nOnce you have installed the code generator, used it to\ngenerate Swift code from your `.proto` file, and\nadded the SwiftProtobuf library to your project, you can\njust use the generated types as you would any other Swift\nstruct.\n\nFor example, you might start with the following very simple\nproto file:\n```protobuf\nsyntax = \"proto3\";\n\nmessage BookInfo {\n   int64 id = 1;\n   string title = 2;\n   string author = 3;\n}\n```\n\nThen generate Swift code using:\n```\nprotoc --swift_out=. DataModel.proto\n```\n\nThe generated code will expose a Swift property for\neach of the proto fields as well as a selection\nof serialization and deserialization capabilities:\n```swift\n// Create a BookInfo object and populate it:\nvar info = BookInfo()\ninfo.id = 1734\ninfo.title = \"Really Interesting Book\"\ninfo.author = \"Jane Smith\"\n\n// As above, but generating a read-only value:\nlet info2 = BookInfo.with {\n    $0.id = 1735\n    $0.title = \"Even More Interesting\"\n    $0.author = \"Jane Q. Smith\"\n  }\n\n// Serialize to binary protobuf format: you can choose to serialize into\n// any type conforming to SwiftProtobufContiguousBytes. For example:\nlet binaryData: Data = try info.serializedBytes()\nlet binaryDataAsBytes: [UInt8] = try info.serializedBytes()\n\n// Deserialize a received Data object from `binaryData`\nlet decodedInfo = try BookInfo(serializedData: binaryData)\n\n// Deserialize a received [UInt8] object from `binaryDataAsBytes`\nlet decodedInfo = try BookInfo(serializedBytes: binaryDataAsBytes)\n\n// Serialize to JSON format as a Data object, or as any other type conforming to\n// SwiftProtobufContiguousBytes. For example:\nlet jsonData: Data = try info.jsonUTF8Data()\nlet jsonBytes: [UInt8] = try info.jsonUTF8Bytes()\n\n// Deserialize from JSON format from `jsonBytes`\nlet receivedFromJSON = try BookInfo(jsonUTF8Bytes: jsonBytes)\n```\n\nYou can find more information in the detailed\n[API Documentation](Documentation/API.md).\n\n## Report any issues\n\nIf you run into problems, please send us a detailed report.\nAt a minimum, please include:\n\n* The specific operating system and version (for example, \"macOS 10.12.1\" or\n  \"Ubuntu 16.10\")\n* The version of Swift you have installed (from `swift --version`)\n* The version of the protoc compiler you are working with from\n  `protoc --version`\n* The specific version of this source code (you can use `git log -1` to get the\n  latest commit ID)\n* Any local changes you may have"
}
