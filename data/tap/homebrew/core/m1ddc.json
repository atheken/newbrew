{
  "name": "m1ddc",
  "full_name": "m1ddc",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Control external displays (USB-C/DisplayPort Alt Mode) using DDC/CI on M1 Macs",
  "license": "MIT",
  "homepage": "https://github.com/waydabber/m1ddc",
  "versions": {
    "stable": "1.0.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/waydabber/m1ddc/archive/refs/tags/v1.0.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "884b65910e69915db29182363590d663a1a6d983e13ca5c41a74209058084c44"
    },
    "head": {
      "url": "https://github.com/waydabber/m1ddc.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/m1ddc/blobs/sha256:1e81833fe542690bd540109b71b584e72105b9a52a2f39c8f8864d7b682d16db",
          "sha256": "1e81833fe542690bd540109b71b584e72105b9a52a2f39c8f8864d7b682d16db"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/m1ddc/blobs/sha256:dbb0437173b2133d7312cb91a73dfc0f25946f79ef94ca365025e1f4034c7edb",
          "sha256": "dbb0437173b2133d7312cb91a73dfc0f25946f79ef94ca365025e1f4034c7edb"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [
    {
      "name": "arch",
      "cask": null,
      "download": null,
      "version": "arm",
      "contexts": [],
      "specs": [
        "stable",
        "head"
      ]
    },
    {
      "name": "macos",
      "cask": null,
      "download": null,
      "version": "12",
      "contexts": [],
      "specs": [
        "stable",
        "head"
      ]
    },
    {
      "name": "macos",
      "cask": null,
      "download": null,
      "version": null,
      "contexts": [],
      "specs": [
        "stable",
        "head"
      ]
    }
  ],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/m1ddc.rb",
  "ruby_source_checksum": {
    "sha256": "42818f17d9aee919b7764603cfbdd18acd51f9919bdaf4148931a536b713d784"
  },
  "date_added": "2023-01-26T05:43:44+00:00",
  "readme": "# m1ddc\n\nThis little tool controls external displays (connected via USB-C/DisplayPort Alt Mode) using DDC/CI on M1 Macs. Useful to embed in various scripts.\n\n*Please note that this tool does not support the HDMI port of the 2020 M1/M2 Mini and does not support M2 Pro Macs either (the USB-C ports of entry level M2 macs are supported). This tool does not support Intel Macs either. You can use [BetterDisplay](https://github.com/waydabber/BetterDisplay#readme) for free DDC control on all Macs and all ports..*\n\n## Prerequisites\n\nYou need `clang` from Apple's Command Line Tools (installs automatically if not present).\n\n## Installation\n\nAfter download, enter (in Terminal):\n\n    make\n\nYou can then run the app by entering:\n\n    ./m1ddc\n\n## Usage examples:\n\n`m1ddc set contrast 5` - Sets contrast to 5 on default display\n\n`m1ddc get luminance` - Returns current luminance (\"brightness\") on default display\n\n`m1ddc set red 90` - Sets red gain to 90\n\n`m1ddc chg volume -10` - Decreases volume by 10 on default display\n\n`m1ddc display list` - Lists displays\n\n`m1ddc display 1 set volume 50` - Sets volume to 50 on Display 1\n\n`m1ddc display 10ACB8A0-0000-0000-1419-0104A2435078 set input 15` - Sets input to DisplayPort 1 on display with UUID 10ACB8A0-0000-0000-1419-0104A2435078\n\n## Commands:\n\n`set luminance n` - Sets luminance (\"brightness\") to n, where n is a number between 0 and the maximum value (usually 100).\n\n`set contrast n` - Sets contrast to n, where n is a number between 0 and the maximum value (usually 100).\n\n`set (red,green,blue) n` - Sets selected color channel gain to n, where n is a number between 0 and the maximum value (usually 100).\n\n`set volume n` - Sets volume to n, where n is a number between 0 and the maximum value (usually 100).\n\n`set input n` - Sets input source to n, common values include:<br/>\nDisplayPort 1: 15, DisplayPort 2: 16, HDMI 1: 17 HDMI 2: 18, USB-C: 27.\n\n`set input-alt n` - Sets input source to n (using alternate addressing, as used by LG), common values include:<br/>\nDisplayPort 1: 208, DisplayPort 2: 209, HDMI 1: 144 HDMI 2: 145, USB-C / DP 3: 210.\n\n`set mute on` - Sets mute on (you can use 1 instead of 'on')\n\n`set mute off` - Sets mute off (you can use 2 instead of 'off')\n\n`get luminance` - Returns current luminance (if supported by the display).\n\n`get contrast` - Returns current contrast (if supported by the display).\n\n`get (red,green,blue)` - Returns current color gain (if supported by the display).\n\n`get volume` - Returns current volume (if supported by the display).\n\n`max luminance` - Returns maximum luminance (if supported by the display, usually 100).\n\n`max contrast` - Returns maximum contrast (if supported by the display, usually 100).\n\n`max (red,green,blue)` - Returns maximum color gain (if supported by the display, usually 100).\n\n`max volume` - Returns maximum volume (if supported by the display, usually 100).\n\n`chg luminance n` - Changes luminance by n and returns the current value (requires current and max reading support).\n\n`chg contrast n` - Changes contrast by n and returns the current value (requires current and max reading support).\n\n`chg (red,green,blue) n` - Changes color gain by n and returns the current value (requires current and max reading support).\n\n`chg volume n` - Changes volume by n and returns the current value (requires current and max reading support).\n\n`display list` - Lists displays.\n\n`display n` - Chooses which display to control (use number 1, 2 etc.)\n\nYou can also use 'l', 'v' instead of 'luminance', 'volume' etc.\n\n## Example use in a script\n\nCheck out the following [hammerspoon](https://github.com/Hammerspoon/hammerspoon) script.\n\nThis script allows you to control the volume of your external Display' brightness, contrast and volume via DDC (if you use an M1 Mac) using [m1ddc](https://github.com/waydabber/m1ddc) and also control your Yamaha AV Receiver through network. The script listens to the standard Apple keyboard media keys and shos the standard macOS Birghtness and Volume OSDs via uses [showosd](https://github.com/waydabber/showosd) :\n\nhttps://gist.github.com/waydabber/3241fc146cef65131a42ce30e4b6eab7\n\n## BetterDisplay\n\nIf you like m1ddc, you'll like [BetterDisplay](https://betterdisplay.pro) even better!\n\nIf you need a complete Swift implementation for DDC control on Apple Silicon macs, you can take a look at [arm64DDC](https://github.com/MonitorControl/MonitorControl/blob/master/MonitorControl/Support/Arm64DDC.swift) which is a complete self contained library I made for BetterDisplay and MonitorControl.\n\n## Thanks\n\nThanks to [@tao-j](https://github.com/tao-j) [@alin23](https://github.com/alin23), [@ybbond](https://github.com/ybbond)\n\nEnjoy!"
}
