{
  "name": "plustache",
  "full_name": "plustache",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "C++ port of Mustache templating system",
  "license": "MIT",
  "homepage": "https://github.com/mrtazz/plustache",
  "versions": {
    "stable": "0.4.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/mrtazz/plustache/archive/0.4.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "83960c412a7c176664c48ba4d718e72b5d39935b24dc13d7b0f0840b98b06824"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/plustache/blobs/sha256:e2c59b901c06ae27cc3576cc279e6f3bbc546db4c4a461beda62500a4f58e35d",
          "sha256": "e2c59b901c06ae27cc3576cc279e6f3bbc546db4c4a461beda62500a4f58e35d"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/plustache/blobs/sha256:0ef2e1ec65b8dfd26c959c5511d645c239fb8ec29343c1785df52d6abbafd466",
          "sha256": "0ef2e1ec65b8dfd26c959c5511d645c239fb8ec29343c1785df52d6abbafd466"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/plustache/blobs/sha256:5f186a90b7ca267f82e8516a3f0f057d052ad2fc5795ee5c6d2ce89ab562eabd",
          "sha256": "5f186a90b7ca267f82e8516a3f0f057d052ad2fc5795ee5c6d2ce89ab562eabd"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/plustache/blobs/sha256:7a9331bddff426646291a13c0cde40ecc1399acc8a44db3073d6756d56ca5621",
          "sha256": "7a9331bddff426646291a13c0cde40ecc1399acc8a44db3073d6756d56ca5621"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/plustache/blobs/sha256:c851f4db6bd4095dd61c1f4a2b192f39b21f05aa8c6e994b9f75d6f183e0bbb8",
          "sha256": "c851f4db6bd4095dd61c1f4a2b192f39b21f05aa8c6e994b9f75d6f183e0bbb8"
        },
        "mojave": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/plustache/blobs/sha256:e6edf87d690e5c17b32a04d0da7ffe6cdf185cb6273a23058c56373b62bd554d",
          "sha256": "e6edf87d690e5c17b32a04d0da7ffe6cdf185cb6273a23058c56373b62bd554d"
        },
        "high_sierra": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/plustache/blobs/sha256:046e756acf6694ae9b8768c62981f807a93aaef52d175bbff7005a29bb23aa00",
          "sha256": "046e756acf6694ae9b8768c62981f807a93aaef52d175bbff7005a29bb23aa00"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "autoconf",
    "automake",
    "libtool"
  ],
  "dependencies": [
    "boost"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": true,
  "disable_date": "2022-07-31",
  "disable_reason": "repo_archived",
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/plustache.rb",
  "ruby_source_checksum": {
    "sha256": "5dd9ea037d9fccabe2cba284aa726d0b1347382587593fdf6499af0fb1ed2e5b"
  },
  "date_added": "2010-08-17T07:46:49-07:00",
  "readme": "# plustache - mustache templates for C++\n\n[![Build Status](https://travis-ci.org/mrtazz/plustache.svg?branch=master)](https://travis-ci.org/mrtazz/plustache)\n[![Coverage Status](https://coveralls.io/repos/mrtazz/plustache/badge.svg?branch=master&service=github)](https://coveralls.io/github/mrtazz/plustache?branch=master)\n[![Packagecloud](https://img.shields.io/badge/packagecloud-available-brightgreen.svg)](https://packagecloud.io/mrtazz/plustache)\n[![MIT license](https://img.shields.io/badge/license-MIT-blue.svg)](http://opensource.org/licenses/MIT)\n\nBasic port of [mustache templating](http://mustache.github.com) to C++.\n\n## Motivation\nI just wanted to port mustache and build simple templating for C++.\nAnd I am still trying hard to keep it simple.\n\n## Usage\n\n### Simple Usage\nCreate a template:\n\n```html\n<h1>{{title}}</h1>\nHi I am {{name}}.\nI like {{thing}}.\n```\n\nFill the context:\n\n```C++\n#include <string>\n#include <plustache/plustache_types.hpp>\n#include <plustache/template.hpp>\n\nusing std::string;\nusing PlustacheTypes::ObjectType;\nusing Plustache::template_t;\n\nObjectType ctx;\nctx[\"title\"] = \"About\";\nctx[\"name\"] = \"Daniel\";\nctx[\"thing\"] = \"turtles\";\n```\n\nInstantiate template class and render the template:\n\n```C++\ntemplate_t t;\nstring template(\"<h1>{{title}}</h1>\\nHi I am {{name}}.\\nI like {{thing}}.\");\n\nstring result = t.render(template, ctx);\n```\n\nResult:\n\n```html\n<h1>About</h1>\nHi I am Daniel.\nI like turtles.\n```\n\n### Advanced Usage\nCreate the template:\n\n```html\n<h1> {{title}} </h1>\n<ul>\n    {{# friends}}\n      <li> {{name}}</li>\n      <li> {{job}}</li>\n      <li> {{status}}</li>\n    {{/ friends}}\n</ul>\n```\n\nCreate the context:\n\n```C++\n// create types\ncontext ctx;\nCollectionType c;\nObjectType jim;\nObjectType john;\nObjectType jack;\n// Fill values\nctx.add(\"title\", \"My friends\");\njim[\"name\"] = \"Jim\";\njim[\"job\"] = \"Wizard\";\njim[\"status\"] = \"Eating\";\njohn[\"name\"] = \"John\";\njohn[\"job\"] = \"Rainbow Painter\";\njohn[\"status\"] = \"Sleeping\";\njack[\"name\"] = \"Jack\";\njack[\"job\"] = \"Unicorn Trainer\";\njack[\"status\"] = \"Riding\";\n// enter data\nc.push_back(jim);\nc.push_back(john);\nctx.add(\"friends\", c);\n// also possible\nctx.add(\"friends\", jack);\n```\n\nRender the template:\n\n```C++\ntemplate_t t;\nstring result = t.render(template, ctx);\n```\n\n## Installation\nThere are packages available for some Linux distributions on\n[Packagecloud](https://packagecloud.io/mrtazz/plustache).\n\nOtherwise clone this repository and run the manual install task:\n\n    git clone git://github.com/mrtazz/plustache.git\n    autoreconf -i\n    ./configure\n    make\n    make install\n\nOn OSX you can get it via [my homebrew\ntap](https://github.com/mrtazz/homebrew-oss):\n\n    brew tap mrtazz/oss\n    brew install plustache\n\n## Running the unit tests\n\n### Build the google test library:\n\n    cd vendor/gtest-1.7.0\n    ./configure\n    make\n\nOn OS X, you may get an error:\n\n    vendor/gtest-1.7.0/include/gtest/internal/gtest-port.h:499:13: fatal error:\n    'tr1/tuple' file not found\n    #   include <tr1/tuple>  // NOLINT\n\nIf so, re-run configure with the following argument\n\n    ./configure CPPFLAGS=-DGTEST_USE_OWN_TR1_TUPLE=1\n    make\n\n### Build the test program\n\nRun this from the top-level plustache source directory:\n\n    make test-program\n\nIf you get the tr1/tuple error, do:\n\n    ./configure CPPFLAGS=-DGTEST_USE_OWN_TR1_TUPLE=1\n    make test-program\n\n### Run the test program\n\n    ./test-program\n\n\n### Building with Microsoft Visual Studio\nThe supplied MSBuild files will look for an installation of boost in the parent\ndirectory of this repo. The boost regex library must be built. For example:\n\n```\ncd boost_1_55_0\nbootstrap\nb2 -j8 toolset=msvc-12.0 address-model=64 --with-regex --prefix=../boost install\n```\n\nThe boost directories and other build parameters can be\nconfigured by creating a\n[Directories.targets](msvc/Directories.targets.example) file.\n\nThe gtest project files are generated by cmake. Use a command like this to\nrecreate the gtest project files:\n\n```\ncd msvc/x64/msvc120/gtest\ncmake -G \"Visual Studio 12 Win64\" ../../../../vendor/gtest-1.6.0 -Dgtest_force_shared_crt=ON\n```\n\n## Supported Functionality (as described in [the man page](http://mustache.github.com/mustache.5.html))\n* Variables\n* Sections\n  * False Values/Empty Lists\n  * Non-Empty-Lists\n* Inverted Sections\n* Comments\n* Partials\n* Set Delimiter\n* HTML escape syntax (triple mustaches)\n\n## TODO\n* plustache executable\n\n## Dependencies\n* boost for regex and some other things\n* google test for unit testing (included)"
}
