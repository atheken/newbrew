{
  "name": "xlsxio",
  "full_name": "xlsxio",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "C library for reading values from and writing values to .xlsx files",
  "license": "MIT",
  "homepage": "https://github.com/brechtsanders/xlsxio",
  "versions": {
    "stable": "0.2.34",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/brechtsanders/xlsxio/archive/refs/tags/0.2.34.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "726e3bc3cf571ac20e5c39b1f192f3793d24ebfdeaadcd210de74aa1ec100bb6"
    },
    "head": {
      "url": "https://github.com/brechtsanders/xlsxio.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/xlsxio/blobs/sha256:56c7fa7ec1da583535d5effabb7226d828f497501ce54104bb7154584b47de19",
          "sha256": "56c7fa7ec1da583535d5effabb7226d828f497501ce54104bb7154584b47de19"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/xlsxio/blobs/sha256:684dd876731be71b25aedf3dcf35e1f56041444b70f91619d04bca5ef2f83bdc",
          "sha256": "684dd876731be71b25aedf3dcf35e1f56041444b70f91619d04bca5ef2f83bdc"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/xlsxio/blobs/sha256:3f5990bbf6820eeed17c52b458d90aaa46662673f57467e5d42ac6795000fad3",
          "sha256": "3f5990bbf6820eeed17c52b458d90aaa46662673f57467e5d42ac6795000fad3"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/xlsxio/blobs/sha256:8b7adb558e5a28b157c01ff2560b0fcf7fbd0d087ceb0ee225a0036b25c33a40",
          "sha256": "8b7adb558e5a28b157c01ff2560b0fcf7fbd0d087ceb0ee225a0036b25c33a40"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/xlsxio/blobs/sha256:6fdc5c9d184f6fd6af07aea182d295e4ac81072b95e625bfbd25c38829fc134e",
          "sha256": "6fdc5c9d184f6fd6af07aea182d295e4ac81072b95e625bfbd25c38829fc134e"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/xlsxio/blobs/sha256:0a3920eb3bcc417d80d78948ae01b746ec74e7213cd33a6066a9990a1c079f07",
          "sha256": "0a3920eb3bcc417d80d78948ae01b746ec74e7213cd33a6066a9990a1c079f07"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/xlsxio/blobs/sha256:b0f66d061d5d7b64aac85eeea619e224ef9412302f80225dd6ab11f183904327",
          "sha256": "b0f66d061d5d7b64aac85eeea619e224ef9412302f80225dd6ab11f183904327"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "libzip"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "expat"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/xlsxio.rb",
  "ruby_source_checksum": {
    "sha256": "ced6eb3f42b72d9125c8ad915bcd818d255839cbd91098a7e718ac8032d2c15b"
  },
  "date_added": "2023-07-30T21:20:51-04:00",
  "readme": "XLSX I/O\r\n========\r\n[![Mentioned in Awesome C](https://awesome.re/mentioned-badge-flat.svg)](https://github.com/oz123/awesome-c)\r\n\r\nCross-platform C library for reading values from and writing values to .xlsx files.\r\n\r\nDescription\r\n-----------\r\nXLSX I/O aims to provide a C library for reading and writing .xlsx files.\r\nThe .xlsx file format is the native format used by Microsoft(R) Excel(TM) since version 2007.\r\n\r\nGoal\r\n----\r\nThe library was written with the following goals in mind:\r\n- written in standard C, but allows being used by C++\r\n- simple interface\r\n- small footprint\r\n- portable across different platforms (Windows, *nix)\r\n- minimal dependencies: only depends on expat (only for reading) and minizip or libzip (which in turn depend on zlib)\r\n- separate library for reading and writing .xlsx files\r\n- does not require Microsoft(R) Excel(TM) to be installed\r\n\r\nReading .xlsx files:\r\n- intended to process .xlsx files as a data table, which assumes the following:\r\n  + assumes the first row contains header names\r\n  + assumes the next rows contain values in the same columns as where the header names are supplied\r\n  + only values are processed, anything else is ignored (formulas, layout, graphics, charts, ...)\r\n- the entire shared string table is loaded in memory (warning: could be large for big spreadsheets with a lot of different values)\r\n- supports .xlsx files without shared string table\r\n- worksheet data itself is read on the fly without the need to buffer data in memory\r\n- 2 methods are provided\r\n  + a simple method that allows the application to iterate through rows and cells\r\n  + an advanced method (with less overhead) which calls callback functions for each cell and after each row\r\n\r\nWriting .xlsx files:\r\n- intended for writing data tables as .xlsx files, which assumes the following:\r\n  + only support for writing data (no support for formulas, layout, graphics, charts, ...)\r\n  + no support for multiple worksheets (only one worksheet per file)\r\n- on the fly file generation without the need to buffer data in memory\r\n- no support for shared strings (all values are written as inline strings)\r\n\r\nLibraries\r\n---------\r\n\r\nThe following libraries are provided:\r\n- `-lxlsxio_read` - library for reading .xlsx files, requires `#include <xlsxio_read.h>`\r\n- `-lxlsxio_write` - library for writing .xlsx files, requires `#include <xlsxio_write.h>`\r\n- `-lxlsxio_readw` - experimental library for reading .xlsx files, linked with `-lexpatw`, requires `#define XML_UNICODE` before `#include <xlsxio_read.h>`\r\n\r\nCommand line utilities\r\n----------------------\r\nSome command line utilities are included:\r\n- `xlsxio_xlsx2csv` - converts all sheets in all specified .xlsx files to individual CSV (Comma Separated Values) files.\r\n- `xlsxio_csv2xlsx` - converts all specified CSV (Comma Separated Values) files to .xlsx files.\r\n\r\nDependencies\r\n------------\r\nThis project has the following dependencies:\r\n- [expat](http://www.libexpat.org/) (only for libxlsxio_read)\r\n- [minizip](http://www.winimage.com/zLibDll/minizip.html) or [libzip](http://www.nih.at/libzip/) (libxlsxio_read and libxlsxio_write)\r\n\r\nNote that minizip is preferred, as there have been reports that .xlsx files generated with XLSX I/O built against libzip can't be opened with LibreOffice.\r\n\r\nThere is no dependency on Microsoft(R) Excel(TM).\r\n\r\nXLSX I/O was written with cross-platform portability in mind and works on multiple operating systems, including Windows, macOS and Linux.\r\n\r\nBuilding from source\r\n--------------------\r\nRequirements:\r\n- a C compiler like gcc or clang, on Windows MinGW and MinGW-w64 are supported\r\n- the dependency libraries (see Dependencies)\r\n- a shell environment, on Windows MSYS is supported\r\n- the make command\r\n- CMake version 2.6 or higher (optional, but preferred)\r\n\r\nThere are 2 methods to build XLSX I/O:\r\n- using the basic Makefile included\r\n- using CMake (preferred)\r\n\r\nBuilding with make\r\n- build and install by running `make install` optionally followed by:\r\n  + `PREFIX=<path>` - Base path were files will be installed (defaults to /usr/local)\r\n  + `WITH_LIBZIP=1` - Use libzip instead of minizip\r\n  + `WIDE=1` - Also build UTF-16 library (xlsxio_readw)\r\n  + `STATICDLL=1` - Build a static DLL (= doesn't depend on any other DLLs) - only supported on Windows\r\n\r\nBuilding with CMake (preferred method)\r\n- configure by running `cmake -G\"Unix Makefiles\"` (or `cmake -G\"MSYS Makefiles\"` on Windows) optionally followed by:\r\n  + `-DCMAKE_INSTALL_PREFIX:PATH=<path>` Base path were files will be installed\r\n  + `-DBUILD_STATIC:BOOL=OFF` - Don't build static libraries\r\n  + `-DBUILD_SHARED:BOOL=OFF` - Don't build shared libraries\r\n  + `-DBUILD_TOOLS:BOOL=OFF` - Don't build tools (only libraries)\r\n  + `-DBUILD_EXAMPLES:BOOL=OFF` - Don't build examples\r\n  + `-DWITH_LIBZIP:BOOL=ON` - Use libzip instead of Minizip\r\n  + `-DLIBZIP_DIR:PATH=<path>` - Location of libzip library\r\n  + `-DMINIZIP_DIR:PATH=<path>` - Location of Minizip library\r\n  + `-DWITH_WIDE:BOOL=ON` - Also build UTF-16 library (libxlsxio_readw)\r\n- build and install by running `make install` (or `make install/strip` to strip symbols)\r\n\r\nPrebuilt binaries\r\n-----------------\r\nPrebuilt binaries are also available for download for the following platforms:\r\n- Windows 32-bit\r\n- Windows 64-bit\r\n\r\nBoth Windows versions were built using the MinGW-w64 under an MSYS2 shell.\r\nTo link with the .dll libraries from Microsoft Visual C++ you need a .lib file for each .dll. This file can be generated using the `lib` tool that comes with Microsoft Visual C++.\r\n\r\nFor 32-bit Windows:\r\n```bat\r\ncd lib\r\nlib /def:libxlsxio_write.def /out:libxlsxio_write.lib /machine:x86\r\nlib /def:libxlsxio_read.def /out:libxlsxio_read.lib /machine:x86\r\nlib /def:libxlsxio_readw.def /out:libxlsxio_readw.lib /machine:x86\r\n```\r\nFor 64-bit Windows:\r\n```bat\r\ncd lib\r\nlib /def:libxlsxio_write.def /out:libxlsxio_write.lib /machine:x64\r\nlib /def:libxlsxio_read.def /out:libxlsxio_read.lib /machine:x64\r\nlib /def:libxlsxio_readw.def /out:libxlsxio_readw.lib /machine:x64\r\n```\r\n\r\nExample C programs\r\n------------------\r\n### Reading from an .xlsx file\r\n```c\r\n#include <xlsxio_read.h>\r\n```\r\n```c\r\n//open .xlsx file for reading\r\nxlsxioreader xlsxioread;\r\nif ((xlsxioread = xlsxioread_open(filename)) == NULL) {\r\n  fprintf(stderr, \"Error opening .xlsx file\\n\");\r\n  return 1;\r\n}\r\n\r\n//read values from first sheet\r\nchar* value;\r\nxlsxioreadersheet sheet;\r\nconst char* sheetname = NULL;\r\nprintf(\"Contents of first sheet:\\n\");\r\nif ((sheet = xlsxioread_sheet_open(xlsxioread, sheetname, XLSXIOREAD_SKIP_EMPTY_ROWS)) != NULL) {\r\n  //read all rows\r\n  while (xlsxioread_sheet_next_row(sheet)) {\r\n    //read all columns\r\n    while ((value = xlsxioread_sheet_next_cell(sheet)) != NULL) {\r\n      printf(\"%s\\t\", value);\r\n      xlsxioread_free(value);\r\n    }\r\n    printf(\"\\n\");\r\n  }\r\n  xlsxioread_sheet_close(sheet);\r\n}\r\n\r\n//clean up\r\nxlsxioread_close(xlsxioread);\r\n```\r\n### Listing all worksheets in an .xlsx file\r\n```c\r\n#include <xlsxio_read.h>\r\n```\r\n```c\r\n//open .xlsx file for reading\r\nxlsxioreader xlsxioread;\r\nif ((xlsxioread = xlsxioread_open(filename)) == NULL) {\r\n  fprintf(stderr, \"Error opening .xlsx file\\n\");\r\n  return 1;\r\n}\r\n\r\n//list available sheets\r\nxlsxioreadersheetlist sheetlist;\r\nconst char* sheetname;\r\nprintf(\"Available sheets:\\n\");\r\nif ((sheetlist = xlsxioread_sheetlist_open(xlsxioread)) != NULL) {\r\n  while ((sheetname = xlsxioread_sheetlist_next(sheetlist)) != NULL) {\r\n    printf(\" - %s\\n\", sheetname);\r\n  }\r\n  xlsxioread_sheetlist_close(sheetlist);\r\n}\r\n\r\n//clean up\r\nxlsxioread_close(xlsxioread);\r\n```\r\n### Writing to an .xlsx file\r\n```c\r\n#include <xlsxio_write.h>\r\n```\r\n```c\r\n//open .xlsx file for writing (will overwrite if it already exists)\r\nxlsxiowriter handle;\r\nif ((handle = xlsxiowrite_open(filename, \"MySheet\")) == NULL) {\r\n  fprintf(stderr, \"Error creating .xlsx file\\n\");\r\n  return 1;\r\n}\r\n\r\n//write column names\r\nxlsxiowrite_add_column(handle, \"Col1\", 16);\r\nxlsxiowrite_add_column(handle, \"Col2\", 0);\r\nxlsxiowrite_next_row(handle);\r\n\r\n//write data\r\nint i;\r\nfor (i = 0; i < 1000; i++) {\r\n  xlsxiowrite_add_cell_string(handle, \"Test\");\r\n  xlsxiowrite_add_cell_int(handle, i);\r\n  xlsxiowrite_next_row(handle);\r\n}\r\n\r\n//close .xlsx file\r\nxlsxiowrite_close(handle);\r\n```\r\n\r\nLicense\r\n-------\r\nXLSX I/O is released under the terms of the MIT License (MIT), see LICENSE.txt.\r\n\r\nThis means you are free to use XLSX I/O in any of your projects, from open source to commercial.\r\n\r\nThis library does not require Microsoft(R) Excel(TM) to be installed.\r"
}
