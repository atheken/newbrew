{
  "name": "clblas",
  "full_name": "clblas",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Library containing BLAS functions written in OpenCL",
  "license": "Apache-2.0",
  "homepage": "https://github.com/clMathLibraries/clBLAS",
  "versions": {
    "stable": "2.12",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/clMathLibraries/clBLAS/archive/v2.12.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "7269c7cb06a43c5e96772010eba032e6d54e72a3abff41f16d765a5e524297a9"
    }
  },
  "revision": 1,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/clblas/blobs/sha256:ddd0d6b3d160284e87fee5d6cbb6585632cd24842c1f26954205acb665e3c74a",
          "sha256": "ddd0d6b3d160284e87fee5d6cbb6585632cd24842c1f26954205acb665e3c74a"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/clblas/blobs/sha256:ec2838495fac090d05c5eb2e2f5cb8fd3640bb238fc068459900e50cc7f28674",
          "sha256": "ec2838495fac090d05c5eb2e2f5cb8fd3640bb238fc068459900e50cc7f28674"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/clblas/blobs/sha256:8ade8c33c4231863fb5ebda26cd90cd1e1b5f30193c9b7bb113939e2c588c9e9",
          "sha256": "8ade8c33c4231863fb5ebda26cd90cd1e1b5f30193c9b7bb113939e2c588c9e9"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/clblas/blobs/sha256:d8bc99eb36031d7e6f662b40b2d8ef98a1d60fe414959c2ec5f23c590ebcf353",
          "sha256": "d8bc99eb36031d7e6f662b40b2d8ef98a1d60fe414959c2ec5f23c590ebcf353"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/clblas/blobs/sha256:2be6e0730bf2740496eb4b90b90077ce65185ab8fc1c0714edb8ea834904a8ec",
          "sha256": "2be6e0730bf2740496eb4b90b90077ce65185ab8fc1c0714edb8ea834904a8ec"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/clblas/blobs/sha256:3f4f8ceae96d4b24049e7b81e89f7bc5785bcd7968bf5378fb54cafd259b6d92",
          "sha256": "3f4f8ceae96d4b24049e7b81e89f7bc5785bcd7968bf5378fb54cafd259b6d92"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/clblas/blobs/sha256:afc8e13fe7b5d465840eac248a461975d7fd33b89ba74a238cb743c1ac6c7c1f",
          "sha256": "afc8e13fe7b5d465840eac248a461975d7fd33b89ba74a238cb743c1ac6c7c1f"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "boost",
    "cmake",
    "python@3.11",
    "opencl-headers"
  ],
  "dependencies": [
    "opencl-icd-loader",
    "pocl"
  ],
  "test_dependencies": [
    "opencl-headers"
  ],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/clblas.rb",
  "ruby_source_checksum": {
    "sha256": "67fccb54402aadb5912b910699f72392289b62dec61da008091dbea255159c90"
  },
  "date_added": "2017-08-20T17:09:40+02:00",
  "readme": "## Build Status\n| Build branch | master | develop |\n|-----|-----|-----|\n| GCC/Clang x64 | [![Build Status](https://travis-ci.org/clMathLibraries/clBLAS.svg?branch=master)](https://travis-ci.org/clMathLibraries/clBLAS/branches) | [![Build Status](https://travis-ci.org/clMathLibraries/clBLAS.svg?branch=develop)](https://travis-ci.org/clMathLibraries/clBLAS/branches) |\n| Visual Studio x64 | [![Build status](https://ci.appveyor.com/api/projects/status/v384bi6e8xv8nxjm/branch/master?svg=true)](https://ci.appveyor.com/project/kknox/clblas-5ph9i/branch/master)|[![Build status](https://ci.appveyor.com/api/projects/status/v384bi6e8xv8nxjm/branch/develop?svg=true)](https://ci.appveyor.com/project/kknox/clblas-5ph9i/branch/develop) |\n\nclBLAS\n=====\nThis repository houses the code for the OpenCLâ„¢ BLAS portion of clMath.\nThe complete set of BLAS level 1, 2 & 3 routines is implemented. Please\nsee Netlib BLAS for the list of supported routines. In addition to GPU\ndevices, the library also supports running on CPU devices to facilitate\ndebugging and multicore programming. APPML 1.12 is the most current\ngenerally available pre-packaged binary version of the library available\nfor download for both Linux and Windows platforms.\n\nThe primary goal of clBLAS is to make it easier for developers to\nutilize the inherent performance and power efficiency benefits of\nheterogeneous computing. clBLAS interfaces do not hide nor wrap OpenCL\ninterfaces, but rather leaves OpenCL state management to the control of\nthe user to allow for maximum performance and flexibility. The clBLAS\nlibrary does generate and enqueue optimized OpenCL kernels, relieving\nthe user from the task of writing, optimizing and maintaining kernel\ncode themselves.\n\n## clBLAS update notes 01/2017\n\n- v2.12 is a bugfix release as a rollup of all fixes in /develop branch\n  - Thanks to @pavanky, @iotamudelta, @shahsan10, @psyhtest, @haahh, @hughperkins, @tfauck\n    @abhiShandy, @IvanVergiliev, @zougloub, @mgates3 for contributions to clBLAS v2.12\n- Summary of fixes available to read on the releases tab\n\n## clBLAS library user documentation\n\n[Library and API documentation][] for developers is available online as\na GitHub Pages website\n\n## Google Groups\n\nTwo mailing lists have been created for the clMath projects:\n\n-   [clmath@googlegroups.com][] - group whose focus is to answer\n    questions on using the library or reporting issues\n\n-   [clmath-developers@googlegroups.com][] - group whose focus is for\n    developers interested in contributing to the library code itself\n\n## clBLAS Wiki\n\nThe [project wiki][] contains helpful documentation, including a [build\nprimer][]\n\n## Contributing code\n\nPlease refer to and read the [Contributing][] document for guidelines on\nhow to contribute code to this open source project. The code in the\n/master branch is considered to be stable, and all pull-requests should\nbe made against the /develop branch.\n\n## License\nThe source for clBLAS is licensed under the [Apache License, Version 2.0]( http://www.apache.org/licenses/LICENSE-2.0 )\n\n## Example\nThe simple example below shows how to use clBLAS to compute an OpenCL accelerated SGEMM\n\n```c\n    #include <sys/types.h>\n    #include <stdio.h>\n\n    /* Include the clBLAS header. It includes the appropriate OpenCL headers */\n    #include <clBLAS.h>\n\n    /* This example uses predefined matrices and their characteristics for\n     * simplicity purpose.\n    */\n\n    #define M  4\n    #define N  3\n    #define K  5\n\n    static const cl_float alpha = 10;\n\n    static const cl_float A[M*K] = {\n    11, 12, 13, 14, 15,\n    21, 22, 23, 24, 25,\n    31, 32, 33, 34, 35,\n    41, 42, 43, 44, 45,\n    };\n    static const size_t lda = K;        /* i.e. lda = K */\n\n    static const cl_float B[K*N] = {\n    11, 12, 13,\n    21, 22, 23,\n    31, 32, 33,\n    41, 42, 43,\n    51, 52, 53,\n    };\n    static const size_t ldb = N;        /* i.e. ldb = N */\n\n    static const cl_float beta = 20;\n\n    static cl_float C[M*N] = {\n        11, 12, 13,\n        21, 22, 23,\n        31, 32, 33,\n        41, 42, 43,\n    };\n    static const size_t ldc = N;        /* i.e. ldc = N */\n\n    static cl_float result[M*N];\n\n    int main( void )\n    {\n    cl_int err;\n    cl_platform_id platform = 0;\n    cl_device_id device = 0;\n    cl_context_properties props[3] = { CL_CONTEXT_PLATFORM, 0, 0 };\n    cl_context ctx = 0;\n    cl_command_queue queue = 0;\n    cl_mem bufA, bufB, bufC;\n    cl_event event = NULL;\n    int ret = 0;\n\n    /* Setup OpenCL environment. */\n    err = clGetPlatformIDs( 1, &platform, NULL );\n    err = clGetDeviceIDs( platform, CL_DEVICE_TYPE_GPU, 1, &device, NULL );\n\n    props[1] = (cl_context_properties)platform;\n    ctx = clCreateContext( props, 1, &device, NULL, NULL, &err );\n    queue = clCreateCommandQueue( ctx, device, 0, &err );\n\n    /* Setup clBLAS */\n    err = clblasSetup( );\n\n    /* Prepare OpenCL memory objects and place matrices inside them. */\n    bufA = clCreateBuffer( ctx, CL_MEM_READ_ONLY, M * K * sizeof(*A),\n                          NULL, &err );\n    bufB = clCreateBuffer( ctx, CL_MEM_READ_ONLY, K * N * sizeof(*B),\n                          NULL, &err );\n    bufC = clCreateBuffer( ctx, CL_MEM_READ_WRITE, M * N * sizeof(*C),\n                          NULL, &err );\n\n    err = clEnqueueWriteBuffer( queue, bufA, CL_TRUE, 0,\n        M * K * sizeof( *A ), A, 0, NULL, NULL );\n    err = clEnqueueWriteBuffer( queue, bufB, CL_TRUE, 0,\n        K * N * sizeof( *B ), B, 0, NULL, NULL );\n    err = clEnqueueWriteBuffer( queue, bufC, CL_TRUE, 0,\n        M * N * sizeof( *C ), C, 0, NULL, NULL );\n\n        /* Call clBLAS extended function. Perform gemm for the lower right sub-matrices */\n        err = clblasSgemm( clblasRowMajor, clblasNoTrans, clblasNoTrans,\n                                M, N, K,\n                                alpha, bufA, 0, lda,\n                                bufB, 0, ldb, beta,\n                                bufC, 0, ldc,\n                                1, &queue, 0, NULL, &event );\n\n    /* Wait for calculations to be finished. */\n    err = clWaitForEvents( 1, &event );\n\n    /* Fetch results of calculations from GPU memory. */\n    err = clEnqueueReadBuffer( queue, bufC, CL_TRUE, 0,\n                                M * N * sizeof(*result),\n                                result, 0, NULL, NULL );\n\n    /* Release OpenCL memory objects. */\n    clReleaseMemObject( bufC );\n    clReleaseMemObject( bufB );\n    clReleaseMemObject( bufA );\n\n    /* Finalize work with clBLAS */\n    clblasTeardown( );\n\n    /* Release OpenCL working objects. */\n    clReleaseCommandQueue( queue );\n    clReleaseContext( ctx );\n\n    return ret;\n    }\n```\n\n## Build dependencies\n### Library for Windows\n*  WindowsÂ® 7/8\n*  Visual Studio 2010 SP1, 2012\n*  An OpenCL SDK, such as APP SDK 2.8\n*  Latest CMake\n\n### Library for Linux\n*  GCC 4.6 and onwards\n*  An OpenCL SDK, such as APP SDK 2.9\n*  Latest CMake\n\n### Library for Mac OSX\n*  Recommended to generate Unix makefiles with cmake\n\n### Test infrastructure\n*  Googletest v1.6\n*  Latest Boost\n*  CPU BLAS\n  - Netlib CBLAS (recommended)\n    Ubuntu: install by \"apt-get install libblas-dev\"\n    Windows: download & install lapack-3.6.0 which comes with CBLAS\n  - or ACML on windows/linux; Accelerate on Mac OSX\n\n### Performance infrastructure\n* Python\n\n  [Library and API documentation]: http://clmathlibraries.github.io/clBLAS/\n  [clmath@googlegroups.com]: https://groups.google.com/forum/#!forum/clmath\n  [clmath-developers@googlegroups.com]: https://groups.google.com/forum/#!forum/clmath-developers\n  [project wiki]: https://github.com/clMathLibraries/clBLAS/wiki\n  [build primer]: https://github.com/clMathLibraries/clBLAS/wiki/Build\n  [Contributing]: CONTRIBUTING.md\n  [Apache License, Version 2.0]: http://www.apache.org/licenses/LICENSE-2.0"
}
