{
  "name": "aicommits",
  "full_name": "aicommits",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Writes your git commit messages for you with AI",
  "license": "MIT",
  "homepage": "https://github.com/Nutlope/aicommits",
  "versions": {
    "stable": "1.11.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://registry.npmjs.org/aicommits/-/aicommits-1.11.0.tgz",
      "tag": null,
      "revision": null,
      "checksum": "b74cf25eb31eb7098d01f482cd64a87e2f59d7efa11f5273fbb353f35e850c5d"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/aicommits/blobs/sha256:a500d7ca5f6978eb4e3bb96677f8f332267c5b3070aafb8f8c7b4af851435bc3",
          "sha256": "a500d7ca5f6978eb4e3bb96677f8f332267c5b3070aafb8f8c7b4af851435bc3"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "node"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "2706c66e8def3eeba4d9bf1adf66221c8ad70701",
  "ruby_source_path": "Formula/aicommits.rb",
  "ruby_source_checksum": {
    "sha256": "a8794ce159d76e178b2527770f9e4b0a5beb7f4c33c7687aac069809f7d60f12"
  },
  "date_added": "2023-03-17T13:00:40+00:00",
  "readme": "<div align=\"center\">\n  <div>\n    <img src=\".github/screenshot.png\" alt=\"AI Commits\"/>\n    <h1 align=\"center\">AI Commits</h1>\n  </div>\n\t<p>A CLI that writes your git commit messages for you with AI. Never write a commit message again.</p>\n\t<a href=\"https://www.npmjs.com/package/aicommits\"><img src=\"https://img.shields.io/npm/v/aicommits\" alt=\"Current version\"></a>\n</div>\n\n---\n\n## Setup\n\n> The minimum supported version of Node.js is the latest v14. Check your Node.js version with `node --version`.\n\n\n1. Install _aicommits_:\n\n    ```sh\n    npm install -g aicommits\n    ```\n\n2. Retrieve your API key from [OpenAI](https://platform.openai.com/account/api-keys)\n\n    > Note: If you haven't already, you'll have to create an account and set up billing.\n\n3. Set the key so aicommits can use it:\n\n    ```sh\n    aicommits config set OPENAI_KEY=<your token>\n    ```\n\n    This will create a `.aicommits` file in your home directory.\n\n\n### Upgrading\n\nCheck the installed version with:\n```\naicommits --version\n```\n\nIf it's not the [latest version](https://github.com/Nutlope/aicommits/releases/latest), run:\n\n```sh\nnpm update -g aicommits\n```\n\n## Usage\n### CLI mode\n\nYou can call `aicommits` directly to generate a commit message for your staged changes:\n\n```sh\ngit add <files...>\naicommits\n```\n\n`aicommits` passes down unknown flags to `git commit`, so you can pass in [`commit` flags](https://git-scm.com/docs/git-commit).\n\nFor example, you can stage all changes in tracked files with as you commit:\n```sh\naicommits --all # or -a\n```\n\n> ðŸ‘‰Â **Tip:** Use the `aic` alias if `aicommits` is too long for you.\n\n#### Generate multiple recommendations\n\nSometimes the recommended commit message isn't the best so you want it to generate a few to pick from. You can generate multiple commit messages at once by passing in the `--generate <i>` flag, where 'i' is the number of generated messages:\n```sh\naicommits --generate <i> # or -g <i>\n```\n\n> Warning: this uses more tokens, meaning it costs more.\n\n#### Generating Conventional Commits\n\nIf you'd like to generate [Conventional Commits](https://conventionalcommits.org/), you can use the `--type` flag followed by `conventional`. This will prompt `aicommits` to format the commit message according to the Conventional Commits specification:\n\n```sh\naicommits --type conventional # or -t conventional\n```\n\nThis feature can be useful if your project follows the Conventional Commits standard or if you're using tools that rely on this commit format.\n\n### Git hook\n\nYou can also integrate _aicommits_ with Git via the [`prepare-commit-msg`](https://git-scm.com/docs/githooks#_prepare_commit_msg) hook. This lets you use Git like you normally would, and edit the commit message before committing.\n\n#### Install\n\nIn the Git repository you want to install the hook in:\n```sh\naicommits hook install\n```\n\n#### Uninstall\nIn the Git repository you want to uninstall the hook from:\n\n```sh\naicommits hook uninstall\n```\n\n#### Usage\n\n1. Stage your files and commit:\n    ```sh\n    git add <files...>\n    git commit # Only generates a message when it's not passed in\n    ```\n\n    > If you ever want to write your own message instead of generating one, you can simply pass one in: `git commit -m \"My message\"`\n\n2. Aicommits will generate the commit message for you and pass it back to Git. Git will open it with the [configured editor](https://docs.github.com/en/get-started/getting-started-with-git/associating-text-editors-with-git) for you to review/edit it.\n\n3. Save and close the editor to commit!\n\n## Configuration\n\n### Reading a configuration value\nTo retrieve a configuration option, use the command:\n\n```sh\naicommits config get <key>\n```\n\nFor example, to retrieve the API key, you can use:\n```sh\naicommits config get OPENAI_KEY\n```\n\nYou can also retrieve multiple configuration options at once by separating them with spaces:\n\n```sh\naicommits config get OPENAI_KEY generate\n```\n\n### Setting a configuration value\n\nTo set a configuration option, use the command:\n\n```sh\naicommits config set <key>=<value>\n```\n\nFor example, to set the API key, you can use:\n\n```sh\naicommits config set OPENAI_KEY=<your-api-key>\n```\n\nYou can also set multiple configuration options at once by separating them with spaces, like\n\n```sh\naicommits config set OPENAI_KEY=<your-api-key> generate=3 locale=en\n```\n\n### Options\n#### OPENAI_KEY\n\nRequired\n\nThe OpenAI API key. You can retrieve it from [OpenAI API Keys page](https://platform.openai.com/account/api-keys).\n\n#### locale\nDefault: `en`\n\nThe locale to use for the generated commit messages. Consult the list of codes in: https://wikipedia.org/wiki/List_of_ISO_639-1_codes.\n\n#### generate\n\nDefault: `1`\n\nThe number of commit messages to generate to pick from.\n\nNote, this will use more tokens as it generates more results.\n\n#### proxy\n\nSet a HTTP/HTTPS proxy to use for requests.\n\nTo clear the proxy option, you can use the command (note the empty value after the equals sign):\n\n```sh\naicommits config set proxy=\n```\n\n#### model\n\nDefault: `gpt-3.5-turbo`\n\nThe Chat Completions (`/v1/chat/completions`) model to use. Consult the list of models available in the [OpenAI Documentation](https://platform.openai.com/docs/models/model-endpoint-compatibility).\n\n> Tip: If you have access, try upgrading to [`gpt-4`](https://platform.openai.com/docs/models/gpt-4) for next-level code analysis. It can handle double the input size, but comes at a higher cost. Check out OpenAI's website to learn more.\n\n\n#### timeout\nThe timeout for network requests to the OpenAI API in milliseconds.\n\nDefault: `10000` (10 seconds)\n\n```sh\naicommits config set timeout=20000 # 20s\n```\n\n#### max-length\nThe maximum character length of the generated commit message.\n\nDefault: `50`\n\n```sh\naicommits config set max-length=100\n```\n\n#### type\n\nDefault: `\"\"` (Empty string)\n\nThe type of commit message to generate. Set this to \"conventional\" to generate commit messages that follow the Conventional Commits specification:\n\n```sh\naicommits config set type=conventional\n```\n\nYou can clear this option by setting it to an empty string:\n\n```sh\naicommits config set type=\n```\n\n## How it works\n\nThis CLI tool runs `git diff` to grab all your latest code changes, sends them to OpenAI's GPT-3, then returns the AI generated commit message.\n\nVideo coming soon where I rebuild it from scratch to show you how to easily build your own CLI tools powered by AI.\n\n## Maintainers\n\n- **Hassan El Mghari**: [@Nutlope](https://github.com/Nutlope) [<img src=\"https://img.shields.io/twitter/follow/nutlope?style=flat&label=nutlope&logo=twitter&color=0bf&logoColor=fff\" align=\"center\">](https://twitter.com/nutlope)\n\n\n- **Hiroki Osame**: [@privatenumber](https://github.com/privatenumber) [<img src=\"https://img.shields.io/twitter/follow/privatenumbr?style=flat&label=privatenumbr&logo=twitter&color=0bf&logoColor=fff\" align=\"center\">](https://twitter.com/privatenumbr)\n\n\n## Contributing\n\nIf you want to help fix a bug or implement a feature in [Issues](https://github.com/Nutlope/aicommits/issues), checkout the [Contribution Guide](CONTRIBUTING.md) to learn how to setup and test the project."
}
