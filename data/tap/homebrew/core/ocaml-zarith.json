{
  "name": "ocaml-zarith",
  "full_name": "ocaml-zarith",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "OCaml library for arbitrary-precision arithmetic",
  "license": "LGPL-2.0-only",
  "homepage": "https://github.com/ocaml/Zarith",
  "versions": {
    "stable": "1.13",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/ocaml/Zarith/archive/release-1.13.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "a5826d33fea0103ad6e66f92583d8e075fb77976de893ffdd73ada0409b3f83b"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/ocaml-zarith/blobs/sha256:6ea3674d28c24ef63bbe635871fbac608eb8215370058e8bb067e52fac64ad31",
          "sha256": "6ea3674d28c24ef63bbe635871fbac608eb8215370058e8bb067e52fac64ad31"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/ocaml-zarith/blobs/sha256:f19a7da2a824ac3881aeb88979badb774fd3f5181908b6280961b7bc7b031b9e",
          "sha256": "f19a7da2a824ac3881aeb88979badb774fd3f5181908b6280961b7bc7b031b9e"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/ocaml-zarith/blobs/sha256:d79d6bb89cb272f3dbaed00db063e3e8e50de18b37a6e6193c69980d3a27f7a4",
          "sha256": "d79d6bb89cb272f3dbaed00db063e3e8e50de18b37a6e6193c69980d3a27f7a4"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/ocaml-zarith/blobs/sha256:2395358b13bed8bc9cf57f891bf9d3cf5576154df991869dbe7613ce1403e71a",
          "sha256": "2395358b13bed8bc9cf57f891bf9d3cf5576154df991869dbe7613ce1403e71a"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/ocaml-zarith/blobs/sha256:2dc837f6b5b386f2903d62b044736474561083c866727bf65b7fea8cbd7ed0a1",
          "sha256": "2dc837f6b5b386f2903d62b044736474561083c866727bf65b7fea8cbd7ed0a1"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/ocaml-zarith/blobs/sha256:e062e7f558a9d3e4115126e5255d28908ee5800803d41fa5681119c75a2c94ab",
          "sha256": "e062e7f558a9d3e4115126e5255d28908ee5800803d41fa5681119c75a2c94ab"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ocaml-zarith/blobs/sha256:b4133fea100b0af1214fb2fb9ba1db745f4ffb8702726b9744c153750f00948c",
          "sha256": "b4133fea100b0af1214fb2fb9ba1db745f4ffb8702726b9744c153750f00948c"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "ocaml-findlib"
  ],
  "dependencies": [
    "gmp",
    "ocaml"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/ocaml-zarith.rb",
  "ruby_source_checksum": {
    "sha256": "ee6ed7a0b74ccaca1d6b1c449f96e563a93edcd32e5bfb9ebce735f7455f370a"
  },
  "date_added": "2021-01-07T20:23:34+00:00",
  "readme": "# The Zarith library\n\n## OVERVIEW\n\nThis library implements arithmetic and logical operations over\narbitrary-precision integers.\n\nThe module is simply named `Z`.  Its interface is similar to that of\nthe `Int32`, `Int64` and `Nativeint` modules from the OCaml standard\nlibrary, with some additional functions.  See the file `z.mli` for\ndocumentation.\n\nThe implementation uses GMP (the GNU Multiple Precision arithmetic\nlibrary) to compute over big integers.\nHowever, small integers are represented as unboxed Caml integers, to save\nspace and improve performance. Big integers are allocated in the Caml heap,\nbypassing GMP's memory management and achieving better GC behavior than e.g.\nthe MLGMP library.\nComputations on small integers use a special, faster path (in C or OCaml)\neschewing calls to GMP, while computations on large intergers use the\nlow-level MPN functions from GMP.\n\nArbitrary-precision integers can be compared correctly using OCaml's\npolymorphic comparison operators (`=`, `<`, `>`, etc.).\n\nAdditional features include:\n* a module `Q` for rationals, built on top of `Z` (see `q.mli`)\n* a compatibility layer `Big_int_Z` that implements the same API as Big_int from the legacy `Num` library, but uses `Z` internally\n\nSupport for [js_of_ocaml](https://github.com/ocsigen/js_of_ocaml/) is\nprovided by [Zarith_stubs_js](https://github.com/janestreet/zarith_stubs_js).\n\n## REQUIREMENTS\n\n* OCaml, version 4.04.0 or later.\n* Either the GMP library or the MPIR library, including development files.\n* GCC or Clang or a gcc-compatible C compiler and assembler (other compilers may work).\n* The Findlib package manager (optional, recommended).\n\n\n## INSTALLATION\n\n1) First, run the \"configure\" script by typing:\n```\n   ./configure\n```\nThe `configure` script has a few options. Use the `-help` option to get a\nlist and short description of each option.\n\n2) It creates a Makefile, which can be invoked by:\n```\n   make\n```\nThis builds native and bytecode versions of the library.\n\n3) The libraries are installed by typing:\n```\n   make install\n```\nor, if you install to a system location but are not an administrator\n```\n   sudo make install\n```\nIf Findlib is detected, it is used to install files.\nOtherwise, the files are copied to a `zarith/` subdirectory of the directory\ngiven by `ocamlc -where`.\n\nThe libraries are named `zarith.cmxa` and `zarith.cma`, and the Findlib module\nis named `zarith`.\n\nCompiling and linking with the library requires passing the `-I +zarith`\noption to `ocamlc` / `ocamlopt`, or the `-package zarith` option to `ocamlfind`.\n\n4) (optional, recommended) Test programs are built and run by the additional command\n```\n  make tests\n```\n(but these are  not installed).\n\n5) (optional) HTML API documentation is built (using `ocamldoc`) by the additional command\n```\n  make doc\n```\n\n## ONLINE DOCUMENTATION\n\nThe documentation for the latest release is hosted on [GitHub Pages](https://antoinemine.github.io/Zarith/doc/latest/index.html).\n\n\n## LICENSE\n\nThis Library is distributed under the terms of the GNU Library General\nPublic License version 2, with a special exception allowing unconstrained\nstatic linking.\nSee LICENSE file for details.\n\n\n## AUTHORS\n\n* Antoine Miné, Sorbonne Université, formerly at ENS Paris.\n* Xavier Leroy, Collège de France, formerly at Inria Paris.\n* Pascal Cuoq, TrustInSoft.\n* Christophe Troestler (toplevel module)\n\n\n## COPYRIGHT\n\nCopyright (c) 2010-2011 Antoine Miné, Abstraction project.\nAbstraction is part of the LIENS (Laboratoire d'Informatique de l'ENS),\na joint laboratory by:\nCNRS (Centre national de la recherche scientifique, France),\nENS (École normale supérieure, Paris, France),\nINRIA Rocquencourt (Institut national de recherche en informatique, France).\n\n\n## CONTENTS\n\nSource files        | Description\n--------------------|-----------------------------------------\n  configure         | configuration script\n  z.ml[i]           | Z module and implementation for small integers\n  caml_z.c          | C implementation\n  big_int_z.ml[i]   | wrapper to provide a Big_int compatible API to Z\n  q.ml[i]           | rational library, pure OCaml on top of Z\n  zarith_top.ml     | toplevel module to provide pretty-printing\n  projet.mak        | builds Z, Q and the tests\n  zarith.opam       | package description for opam\n  z_mlgmpidl.ml[i]  | conversion between Zarith and MLGMPIDL\n  tests/            | simple regression tests and benchmarks"
}
