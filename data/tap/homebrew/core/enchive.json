{
  "name": "enchive",
  "full_name": "enchive",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Encrypted personal archives",
  "license": "Unlicense",
  "homepage": "https://github.com/skeeto/enchive",
  "versions": {
    "stable": "3.5",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/skeeto/enchive/releases/download/3.5/enchive-3.5.tar.xz",
      "tag": null,
      "revision": null,
      "checksum": "cb867961149116443a85d3a64ef5963e3c399bdd377b326669bb566a3453bd06"
    },
    "head": {
      "url": "https://github.com/skeeto/enchive.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/enchive/blobs/sha256:d4031f7e6516988ab5a83c2e1b9f88af552d71575772348383860a6015fe121b",
          "sha256": "d4031f7e6516988ab5a83c2e1b9f88af552d71575772348383860a6015fe121b"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/enchive/blobs/sha256:bfc24708c8b6d000fc36f7d2fd305af3ad5a1f3718e0d0c92cf122e140866e57",
          "sha256": "bfc24708c8b6d000fc36f7d2fd305af3ad5a1f3718e0d0c92cf122e140866e57"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/enchive/blobs/sha256:653b17e2b34133e5cbbff75e3df94c251c92f043a0d2af28719ffbccf2835efa",
          "sha256": "653b17e2b34133e5cbbff75e3df94c251c92f043a0d2af28719ffbccf2835efa"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/enchive/blobs/sha256:6e1fe9e5471985e9d9caadc563297313ff0d0e15a8aa1ac3ccb15be45ec4879f",
          "sha256": "6e1fe9e5471985e9d9caadc563297313ff0d0e15a8aa1ac3ccb15be45ec4879f"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/enchive/blobs/sha256:abca74b9d636453d9612bd0a89f2256684dc3ed42aa72bf8fdb2fcfc84788819",
          "sha256": "abca74b9d636453d9612bd0a89f2256684dc3ed42aa72bf8fdb2fcfc84788819"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/enchive/blobs/sha256:a3844247a43c518b50f8a33847a39e5c91db46fdd177b810ac9d2776b842ed7b",
          "sha256": "a3844247a43c518b50f8a33847a39e5c91db46fdd177b810ac9d2776b842ed7b"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/enchive/blobs/sha256:116e7fa59dc5c555ef911ca1668175cb71fce934dcc3f475433e84ce6d2f4d14",
          "sha256": "116e7fa59dc5c555ef911ca1668175cb71fce934dcc3f475433e84ce6d2f4d14"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/enchive.rb",
  "ruby_source_checksum": {
    "sha256": "e00e6b5c4bd1facc2ba4671bf99dac08345d04f8696fbbfae4314e728fd9faf9"
  },
  "date_added": "2023-03-30T21:54:19-04:00",
  "readme": "# Enchive : encrypted personal archives\n\nEnchive is a tool to encrypt files to yourself for long-term archival.\nIt's a focused, simple alternative to more complex solutions such as\nGnuPG or encrypted filesystems. Enchive has no external dependencies\nand is trivial to build for local use. Portability is emphasized over\nperformance.\n\nSupported platforms: Linux, BSD, macOS, Windows\n\nThe name is a portmanteau of \"encrypt\" and \"archive,\" pronounced\nen'kīv.\n\nFiles are secured with ChaCha20, Curve25519, and HMAC-SHA256.\n\nManual page: [`enchive(1)`](http://nullprogram.com/enchive/)\n\n## Installation\n\nClone this repository, then:\n\n    $ make PREFIX=/usr install\n\nThis will install both the compiled binary and manual page under\n`PREFIX`. For staged installs, `DESTDIR` is also supported. The binary\ndoesn't have any external dependencies and doesn't actually need to be\ninstalled before use.\n\n## Usage\n\nThere are only three commands to worry about: `keygen`, `archive`, and\n`extract`. The very first thing to do is generate a master keypair\nusing `keygen`. You will be prompted for the passphrase to protect the\nsecret key, just like `ssh-keygen`.\n\n    $ enchive keygen\n\nBy default, this will create two files in `$XDG_CONFIG_HOME/enchive`\n(or `$HOME/.config/enchive`): `enchive.pub` (public key) and\n`enchive.sec` (secret key). On Windows, these are found under\n`%APPDATA%\\enchive` instead. Distribute `enchive.pub` to any machines\nwhere you plan to archive files. It's sufficient to encrypt files, but\nnot to decrypt them.\n\nTo archive a file for storage:\n\n    $ enchive archive sensitive.zip\n\nThis will encrypt `sensitive.zip` as `sensitive.zip.enchive` (leaving\nthe original in place). You can safely archive this wherever.\n\nTo extract the file on a machine with `enchive.sec`, use `extract`. It\nwill prompt for the passphrase you entered during key generation.\n\n    $ enchive extract sensitive.zip.enchive\n\nThe original `sensitive.zip` will be reproduced.\n\nWith no filenames, `archive` and `extract` operate on standard input\nand output.\n\n### Key management\n\nOne of the core features of Enchive is the ability to derive an\nasymmetric key pair from a passphrase. This means you can store your\narchive key in your brain! To access this feature, use the `--derive`\n(`-d`) option with the `keygen` command.\n\n    $ enchive keygen --derive\n\nThere's an optional argument to `--derive` that controls the number of\nkey derivation iterations (e.g. `--derive=26`). The default is 29.\nThis is a power two exponent, so every increment doubles the cost both\nin memory and computational demands.\n\nIf you want to change your protection passphrase, use the `--edit`\noption with `keygen`. It will load the secret key as if it were going\nto \"extract\" an archive, then write it back out with the new options.\nThis mode will also regenerate the public key file whether or not it\nexists.\n\nEnchive has a built-in protection key agent that keeps the protection\nkey in memory for a configurable period of time (default: 15 minutes)\nafter a protection passphrase has been read. This allows many files to\nbe decrypted inside a brief window with only a single passphrase\nprompt. Use the `--agent` (`-a`) global option to enable it. If it's\nenabled by default, use `--no-agent` to turn it off.\n\n    $ enchive --agent extract file.enchive\n\nUnlike gpg-agent and ssh-agent, this agent need not be started ahead\nof time. It is started on demand, shuts down on timeout, and does not\ncoordinate with environment variables. One agent is created per unique\nsecret key file. This feature requires a unix-like system.\n\n## Notes\n\nThe major version number increments each time any of the file formats\nchange, including the key derivation algorithm.\n\nThere's no effort at error recovery. It bails out on early on the\nfirst error. It should clean up any incomplete files when it does so.\n\nA purposeful design choice is that encrypted/archived files have no\ndistinguishing marks whatsoever (magic numbers, etc.), making them\nindistinguishable from random data.\n\n### Frequently asked questions\n\n> This tool will never achieve critical mass, so what's the point?\n\nEnchive doesn't need to interact with any other systems or people, so\nthere's no need for critical mass, nor that there are any other users.\n\n> Why can't you use an existing/established tool instead?\n\nI'm not aware of any tool that does everything Enchive does. GnuPG\ncomes close, but doesn't support deriving a key pair from a\npassphrase. If you're aware of an equal or better tool, please let me\nknow.\n\n> Isn't it dangerous to derive a key pair from a passphrase?\n\nIt is when it's done incorrectly. However, Enchive uses a memory-hard\nkey derivation scheme that makes cracking passphrases very expensive —\nprohibitively so for any decent passphrase. This is because anyone who\nhas access to even a single encrypted file can mount an offline\nattack.\n\nDeriving asymmetric keys from a passphrase is a standard practice in\nthe Bitcoin world: [brainwallets][bw]. The caveat is that the\npassphrase must be sufficiently long, preferably chosen by a computer\nor [with dice][dw].\n\nWhen generating a master key, Enchive's default configuration is\nextremely paranoid. It would be far cheaper to break into your home\nand perform an evil maid attack than it would be to crack even a short\npassphrase. This is not the weak point.\n\n> Shouldn't the initialization vector (IV) be generated randomly?\n\nThe purpose of an IV is to allow the same key to be safely used\nmultiple times. This is particularly important when the same key is\nderived on different occasions by Diffie-Hellman between the same key\npair. Enchive generates a random ephemeral key pair each time a file\nis encrypted, so the IV is unnecessary.\n\nSince ChaCha20 requires an IV regardless, Enchive simply uses the hash\nof the key. This has the additional effect of allowing the client to\nverify its symmetric key before beginning decryption. Otherwise a\nwrong key would only be detected by the MAC after decryption has\ncompleted.\n\n> I'm getting the error \"Value too large for defined data type.\"\n\nThis is a flaw in the 32-bit version of glibc that prevents C programs\nfrom even opening files larger than 2GB. Compile with \"large file\nsupport\" enabled:\n\n    make CFLAGS='-O3 -D_FILE_OFFSET_BITS=64'\n\nAlternatively, use your shell to open files for Enchive:\n\n    $ enchive archive <largefile >largefile.enchive\n\nNote that Enchive will not be able to delete shell-opened files in case\nof errors (tampering, etc.).\n\n## Encryption/decryption algorithm\n\nThe process for encrypting a file:\n\n1. Generate an ephemeral 256-bit Curve25519 key pair.\n2. Perform a Curve25519 Diffie-Hellman key exchange with the master\n   key to produce a shared secret.\n3. SHA-256 hash the shared secret to generate a 64-bit IV.\n4. Add the format number to the first byte of the IV.\n5. Initialize ChaCha20 with the shared secret as the key.\n6. Write the 8-byte IV.\n7. Write the 32-byte ephemeral public key.\n8. Encrypt the file with ChaCha20 and write the ciphertext.\n9. Write `HMAC(key, plaintext)`.\n\nThe process for decrypting a file:\n\n1. Read the 8-byte ChaCha20 IV.\n2. Read the 32-byte ephemeral public key.\n3. Perform a Curve25519 Diffie-Hellman key exchange with the ephemeral\n   public key.\n4. Validate the IV against the shared secret hash and format version.\n5. Initialize ChaCha20 with the shared secret as the key.\n6. Decrypt the ciphertext using ChaCha20.\n7. Verify `HMAC(key, plaintext)`.\n\n## Key derivation algorithm\n\nEnchive uses an scrypt-like algorithm for key derivation, requiring a\nlarge buffer of random access memory. Derivation is controlled by a\nsingle difficulty exponent *D*. Secret key derivation requires 512MB\nof memory (D=29) by default, and protection key derivation requires\n32MB by default (D=25). The salt for the secret key is all zeros.\n\n1. Allocate a `(1 << D) + 32` byte buffer, *M*.\n2. Compute `HMAC_SHA256(salt, passphrase)` and write this 32-byte\n   result to the beginning of *M*.\n3. For each uninitialized 32-byte chunk in *M*, compute the SHA-256\n   hash of the previous 32-byte chunk.\n4. Initialize a byte pointer *P* to the last 32-byte chunk of *M*.\n5. Compute the SHA-256 hash, *H*, of the 32 bytes at *P*.\n6. Overwrite the memory at *P* with *H*.\n7. Take the first *D* bits of *H* and use this value to set a new *P*\n   pointing into *M*.\n8. Repeat from step 5 `1 << (D - 5)` times.\n9. *P* points to the result.\n\n## Compilation\n\nTo build on any unix-like system, run `make`. The resulting binary has\nno dependencies or external data, so you can just copy/move this into\nyour `PATH`.\n\n    $ make\n\nThe easiest way to build with Visual Studio is to use the amalgamation\nbuild. On any unix-like system (requires `sed`):\n\n    $ make amalgamation\n\nThis will create `enchive-cli.c`, a standalone C program that you can\ncopy anywhere and compile. Over on Windows:\n\n    C:\\> cl.exe -nologo -Ox enchive-cli.c advapi32.lib\n\nThe compile-time options below also apply to this amalgamation build.\n\n### Compile-time configuration\n\nVarious options and defaults can be configured at compile time using C\ndefines (`-D...`).\n\n#### `ENCHIVE_OPTION_AGENT`\n\nWhether to expose the `--agent` and `--no-agent` option. This option\nis 0 by default on Windows since agents are unsupported.\n\n#### `ENCHIVE_AGENT_TIMEOUT`\n\nThe default agent timeout in seconds. This can be configured at run\ntime with an optional argument to `--agent`.\n\n#### `ENCHIVE_AGENT_DEFAULT_ENABLED`\n\nWhether or not to enable the agent by default. This can be explicitly\noverridden at run time with `--agent` and `--no-agent`.\n\n#### `ENCHIVE_PINENTRY_DEFAULT`\n\nThe default program to use for `pinentry`.\n\n#### `ENCHIVE_PINENTRY_DEFAULT_ENABLED`\n\nWhether or not to use `pinentry` by default when reading passphrases.\n\n#### `ENCHIVE_FILE_EXTENSION`\n\nThe file extension to add when archiving and remove when extracting. The\ndefault is `.enchive`, as it appears in the examples.\n\n#### `ENCHIVE_KEY_DERIVE_ITERATIONS`\n\nPower-of-two exponent for protection key derivation. Can be configured\nat run time with `--iterations`.\n\n#### `ENCHIVE_SECKEY_DERIVE_ITERATIONS`\n\nPower-of-two exponent for secret key derivation. Can be configured at\nrun time with the optional argument to `--derive`.\n\n#### `ENCHIVE_PASSPHRASE_MAX`\n\nMaximum passphrase size in bytes, including null terminator.\n\n\n[myths]: http://www.2uo.de/myths-about-urandom/\n[djb]: https://blog.cr.yp.to/20140205-entropy.html\n[getrandom]: https://manpages.debian.org/testing/manpages-dev/getrandom.2.en.html\n[getentropy]: http://man.openbsd.org/OpenBSD-current/man2/getentropy.2\n[csp]: https://msdn.microsoft.com/en-us/library/windows/desktop/aa380246(v=vs.85).aspx\n[bw]: https://en.bitcoin.it/wiki/Brainwallet\n[dw]: http://world.std.com/~reinhold/diceware.html"
}
