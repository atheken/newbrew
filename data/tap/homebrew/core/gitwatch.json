{
  "name": "gitwatch",
  "full_name": "gitwatch",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Watch a file or folder and automatically commit changes to a git repo easily",
  "license": "GPL-3.0-or-later",
  "homepage": "https://github.com/gitwatch/gitwatch",
  "versions": {
    "stable": "0.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/gitwatch/gitwatch/archive/refs/tags/v0.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "ed52d5c799c19dc6f920f3625964bc4b4948b6f8929c289aece462304e419697"
    },
    "head": {
      "url": "https://github.com/gitwatch/gitwatch.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gitwatch/blobs/sha256:5957f7e3213426ce3de17562735be772158d30c95fbede147a3952d9816b343c",
          "sha256": "5957f7e3213426ce3de17562735be772158d30c95fbede147a3952d9816b343c"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "coreutils",
    "inotify-tools"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/gitwatch.rb",
  "ruby_source_checksum": {
    "sha256": "8ced82a9afa1092532f985379116d8d51ce1c3a1cacd10ff3ecd198edbe3acf6"
  },
  "date_added": "2021-05-20T09:33:53+00:00",
  "readme": "<!-- Generated by github-markdown-toc -->\n<!-- gh-md-toc --insert README.md -->\n<!-- markdownlint-disable -->\n<!--ts-->\n   * [gitwatch](#gitwatch)\n      * [What to use it for?](#what-to-use-it-for)\n      * [Installation](#installation)\n         * [From Source](#from-source)\n            * [Update](#update)\n         * [bpkg](#bpkg)\n         * [Archlinux](#archlinux)\n      * [Requirements](#requirements)\n         * [Notes for Mac](#notes-for-mac)\n      * [What it does](#what-it-does)\n      * [Usage](#usage)\n         * [Starting on Boot](#starting-on-boot)\n            * [SysVInit](#sysvinit)\n            * [systemd](#systemd)\n      * [Other Articles](#other-articles)\n         * [On the Gitwatch Wiki](#on-the-gitwatch-wiki)\n\n<!-- Added by: harleypig, at: Sun Mar  7 03:39:32 PM MST 2021 -->\n\n<!--te-->\n<!-- markdownlint-enable -->\n# gitwatch\n\nA bash script to watch a file or folder and commit changes to a git repo\n\n## What to use it for?\n\nThat's really up to you, but here are some examples:\n\n* **config files**: some programs auto-write their config files, without\n  waiting for you to click an 'Apply' button; or even if there is such\n  a button, most programs offer you no way of going  back to an earlier\n  version of your settings. If you commit your config file(s) to a git repo,\n  you can track changes and go back to older versions. This script makes it\n  convenient, to have all changes recorded automatically.\n* **document files**: if you use an editor that does not have built-in git\n  support (or maybe if you don't like the git support it has), you can use\n  gitwatch to automatically commit your files when you save them, or combine\n  it with the editor's auto-save feature to fully automatically and regularly\n  track your changes\n* *more stuff!* If you have any other uses, or can think of ones, please let\n  us know, and we can add them to this list!\n\n## Installation\n\n`gitwatch` can be installed in various ways.\n\n### From Source\n\n`gitwatch` can be installed from source by simply cloning the repository and\nputting the shell script into your `$PATH`. The commands below will do that\nfor you if `/usr/local/bin` is in your `$PATH`. You may need to invoke\n`install` with `sudo`.\n\n```sh\ngit clone https://github.com/gitwatch/gitwatch.git\ncd gitwatch\n[sudo] install -b gitwatch.sh /usr/local/bin/gitwatch\n```\n\n#### Update\n\nIf you installed `gitwatch` from source, you can update it by following the\nexact same steps (or `git pull` rather than clone if you kept the repository\naround).\n\n### bpkg\n\n`gitwatch` can be installed with [bpkg](https://github.com/bpkg/bpkg). Make\nsure you have [bpkg](https://github.com/bpkg/bpkg) installed before running\nthe command below. You may need to invoke `bpkg` with `sudo` when using the\n`-g` flag.\n\n```sh\n[sudo] bpkg install -g gitwatch/gitwatch\n```\n\n### Archlinux\n\nThere is an [AUR](https://aur.archlinux.org/packages/gitwatch-git/) package\nfor Archlinux. Install it with you favorite aur helper.\n\n## Requirements\n\nTo run this script, you must have installed and globally available:\n\n* `git` ([git/git](https://github.com/git/git) | [git-scm](http://www.git-scm.com))\n* `inotifywait` (part of **[inotify-tools](https://github.com/rvoicilas/inotify-tools)**)\n\n### Notes for Mac\n\nIf running on OS X, you'll need to install the following Homebrew tools:\n\n```sh\nbrew install fswatch\nbrew install coreutils\n```\n\n## What it does\n\nWhen you start the script, it prepares some variables and checks if the file\nor directory given as input really exists.\n\nThen it goes into the main loop (which will run forever, until the script is\nforcefully stopped/killed), which will:\n\n* watch for changes to the file/directory using `inotifywait` (`inotifywait`\n  will block until something happens)\n* wait 2 seconds\n* case file:\n  * `cd` into the directory containing the file (because `git` likes to operate locally)\n  * `git add <file>`\n  * `git commit -m \"Scripted auto-commit on change (<date>)\"`\n* case directory:\n  * `cd` into the directory  (because `git` likes to operate locally)\n  * `git add --all .`\n  * `git commit -m \"Scripted auto-commit on change (<date>)\"`\n* if a remote is defined (with `-r`) do a push after the commit (a specific\n  branch can be selected with `-b`)\n\nNotes:\n\n* the waiting period of 2 sec is added to allow for several changes to be\n  written out completely before committing; depending on how fast the script\n  is executed, this might otherwise cause race conditions when watching\n  a folder\n* currently, folders are always watched recursively\n\n## Usage\n\n`gitwatch.sh [-r <remote> [-b <branch>]] <file or directory to watch>`\n\nIt is expected that the watched file/directory are already in a git repository\n(the script will not create a repository). If a folder is being watched, this\nwill be watched fully recursively; this also means that all files and\nsub-folders added and removed from the directory will always be added and\nremoved in the next commit. The `.git` folder will be excluded from the\n`inotifywait` call so changes to it will not cause unnecessary triggering of\nthe script.\n\nIf you have any large files in your repository that are changing frequently,\nyou might wish to ignore them with a `.gitignore` file.\n\n### Starting on Boot\n\nIf you want to have the script auto-started upon boot, the method to do this\ndepends on your operating system and distribution. If you have a GUI dialog to\nset up startup launches, you might want to use that, so you can more easily\nfind and change the startup script calls later on.\n\nPlease also note that if either of the paths involved (script or target)\ncontains spaces or special characters, you need to escape them accordingly; if\nyou don't know how to do that, the internet will help you, or feel free to ask\nhere or contact me directly.\n\n#### SysVInit\n\nA central place to put startup scripts on Linux is generally `/etc/rc.local`\n(to my knowledge; only tested and confirmed on Ubuntu). This file, if it has\nthe +x bit, will be executed upon startup, **by the root user account**. If\nyou want to start `gitwatch` from `rc.local`, the recommended way to call it\nis:\n\n<!-- markdownlint-disable -->\n`su -c \"/absolute/path/to/script/gitwatch.sh /absolute/path/to/watched/file/or/folder\" -l <username> &`\n<!-- markdownlint-restore -->\n\nThe `<username>` bit should be replaced with your username or that of any\nother (non-root) user account; it only needs write-access to the git\nrepository of the file/folder you want to watch. The ampersand (`&`) at the\nend sends the launched process into the background (this is important if you\nhave other calls in `rc.local` after the mentioned line, because the\n`gitwatch` call does not usually return).\n\n#### systemd\n\n* If installed to a path other than `/usr/local/bin/gitwatch`, modify\n  `gitwatch@.service` to suit\n* Create dir if it does not exist and copy systemd service file with `mkdir -p\n  \"$HOME/.config/systemd/user\" && cp gitwatch@.service\n  $HOME/.config/systemd/user`\n* Start and enable the service for a given path by running `systemctl --user\n  --now enable gitwatch@$(systemd-escape \"'-r url/to/repository'\n  /path/to/folder\").service`\n\n## Other Articles\n\n### On the Gitwatch Wiki\n\n* [How to install `gitwatch` as a Debian service with `supervisord`](https://github.com/gitwatch/gitwatch/wiki/gitwatch-as-a-service-on-Debian-with-supervisord)"
}
