{
  "name": "ormolu",
  "full_name": "ormolu",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Formatter for Haskell source code",
  "license": "BSD-3-Clause",
  "homepage": "https://github.com/tweag/ormolu",
  "versions": {
    "stable": "0.7.1.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/tweag/ormolu/archive/0.7.1.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "1acfd517930a8bd57d4362c2f7a72d308fa35e8580787352fd53601249345934"
    },
    "head": {
      "url": "https://github.com/tweag/ormolu.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ormolu/blobs/sha256:a3e96790979fc0009694a27dc78f48eadf6ec433e66bf0d629073958a3872e6d",
          "sha256": "a3e96790979fc0009694a27dc78f48eadf6ec433e66bf0d629073958a3872e6d"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ormolu/blobs/sha256:b3af6fbee8eb58dbe46da471dea0c1e52ef30b40897332b5c274ca829dcd5ae0",
          "sha256": "b3af6fbee8eb58dbe46da471dea0c1e52ef30b40897332b5c274ca829dcd5ae0"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ormolu/blobs/sha256:a0e25823bfdd9fa45ad0d9563cf881e01dd08f4cfc382330b62f87a2715a86d3",
          "sha256": "a0e25823bfdd9fa45ad0d9563cf881e01dd08f4cfc382330b62f87a2715a86d3"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ormolu/blobs/sha256:7519bbf8e7fa4a63db733fec3bfc5531c3a4797526d19da8fd05550fe0c694ab",
          "sha256": "7519bbf8e7fa4a63db733fec3bfc5531c3a4797526d19da8fd05550fe0c694ab"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ormolu/blobs/sha256:1b4d9e60eb5be7a3e29cbad312567a967aa37075f14b945712072280e0017c91",
          "sha256": "1b4d9e60eb5be7a3e29cbad312567a967aa37075f14b945712072280e0017c91"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ormolu/blobs/sha256:d2a8f5a7343c43099c99644493c71783494cdc37621b18c18259d24b8e2392e5",
          "sha256": "d2a8f5a7343c43099c99644493c71783494cdc37621b18c18259d24b8e2392e5"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ormolu/blobs/sha256:19738fdad76b187cad3d628f8d5f56b0aea5b50c1c594dd92112484f4fffdab4",
          "sha256": "19738fdad76b187cad3d628f8d5f56b0aea5b50c1c594dd92112484f4fffdab4"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cabal-install",
    "ghc"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/ormolu.rb",
  "ruby_source_checksum": {
    "sha256": "958959bb3d5e6848779b621f32dad3e8e7d9763a36d9840d7db447aa0207d5c9"
  },
  "date_added": "2020-09-01T18:14:22+00:00",
  "readme": "# Ormolu\n\n[![License BSD3](https://img.shields.io/badge/license-BSD3-brightgreen.svg)](http://opensource.org/licenses/BSD-3-Clause)\n[![Hackage](https://img.shields.io/hackage/v/ormolu.svg?style=flat)](https://hackage.haskell.org/package/ormolu)\n[![Stackage Nightly](http://stackage.org/package/ormolu/badge/nightly)](http://stackage.org/nightly/package/ormolu)\n[![Stackage LTS](http://stackage.org/package/ormolu/badge/lts)](http://stackage.org/lts/package/ormolu)\n[![CI](https://github.com/tweag/ormolu/actions/workflows/ci.yml/badge.svg)](https://github.com/tweag/ormolu/actions/workflows/ci.yml)\n\n* [Installation](#installation)\n* [Building from source](#building-from-source)\n* [Usage](#usage)\n    * [Ormolu Live](#ormolu-live)\n    * [Editor integration](#editor-integration)\n    * [Haskell Language Server](#haskell-language-server)\n    * [GitHub actions](#github-actions)\n    * [Language extensions, dependencies, and fixities](#language-extensions-dependencies-and-fixities)\n    * [Magic comments](#magic-comments)\n    * [Regions](#regions)\n    * [Exit codes](#exit-codes)\n    * [Using as a library](#using-as-a-library)\n* [Limitations](#limitations)\n* [Running on Hackage](#running-on-hackage)\n* [Forks and modifications](#forks-and-modifications)\n* [Contributing](#contributing)\n* [License](#license)\n\nOrmolu is a formatter for Haskell source code. The project was created with\nthe following goals in mind:\n\n* Using GHC's own parser to avoid parsing problems caused by\n  [`haskell-src-exts`][haskell-src-exts].\n* Let some whitespace be programmable. The layout of the input influences\n  the layout choices in the output. This means that the choices between\n  single-line/multi-line layouts in certain situations are made by the user,\n  not by an algorithm. This makes the implementation simpler and leaves some\n  control to the user while still guaranteeing that the formatted code is\n  stylistically consistent.\n* Writing code in such a way so it's easy to modify and maintain.\n* Implementing one “true” formatting style which admits no configuration.\n* The formatting style aims to result in minimal diffs.\n* Choose a style compatible with modern dialects of Haskell. As new Haskell\n  extensions enter broad use, we may change the style to accommodate them.\n* Idempotence: formatting already formatted code doesn't change it.\n* Be well-tested and robust so that the formatter can be used in large\n  projects.\n\nTry it out in your browser at <https://ormolu-live.tweag.io>!\nSee [Ormolu Live](#ormolu-live) for more info.\n\n## Installation\n\nThe [release page][releases] has binaries for Linux, macOS and Windows.\n\nYou can also install using `cabal` or `stack`:\n\n```console\n$ cabal install ormolu\n$ stack install ormolu\n```\n\nOrmolu is also included in several package repositories. E.g., on Arch Linux,\none can use [the package on AUR][aur]:\n\n```console\n$ yay -S ormolu\n```\n\n## Building from source\n\nThe easiest way to build the project is with Nix:\n\n```console\n$ nix build\n```\n\nMake sure to accept the offered Nix caches (in particular the IOG cache),\notherwise building may take a very long time.\n\nAlternatively, `stack` could be used as follows:\n\n```console\n$ stack build # to build\n$ stack install # to install\n```\n\nTo use Ormolu directly from GitHub with Nix flakes, this snippet may come in handy:\n\n```nix\n{\n  inputs.ormolu.url = \"github:tweag/ormolu\";\n  outputs = { ormolu, ... }: {\n    # use ormolu.packages.${system}.default here\n  };\n}\n```\n\n## Usage\n\nThe following will print the formatted output to the standard output.\n\n```console\n$ ormolu Module.hs\n```\n\nAdd `--mode inplace` to replace the contents of the input file with the\nformatted output.\n\n```console\n$ ormolu --mode inplace Module.hs\n```\n\nUse `find` to format a tree recursively:\n\n```console\n$ ormolu --mode inplace $(find . -name '*.hs')\n```\n\nOr find all files in a project with `git ls-files`:\n\n```console\n$ ormolu --mode inplace $(git ls-files '*.hs')\n```\n\nTo check if files are are already formatted (useful on CI):\n\n```console\n$ ormolu --mode check $(find . -name '*.hs')\n```\n\n#### :zap: Beware git's `core.autocrlf` on Windows :zap:\nOrmolu's output always uses LF line endings. In particular,\n`ormolu --mode check` will fail if its input is correctly formatted\n*except* that it has CRLF line endings. This situation can happen on Windows\nwhen checking out a git repository without having set [`core.autocrlf`](\nhttps://www.git-scm.com/docs/git-config#Documentation/git-config.txt-coreautocrlf)\nto `false`.\n\n### Ormolu Live\n\nOn every new commit to `master`, [Ormolu Live](./ormolu-live) is deployed to\nhttps://ormolu-live.tweag.io. Older versions are available at\nhttps://COMMITHASH--ormolu-live.netlify.app.\n\n### Editor integration\n\nWe know of the following editor integrations:\n\n* [Emacs][emacs-package]\n* [VS Code][vs-code-plugin]\n* Vim: [neoformat][neoformat], [vim-ormolu][vim-ormolu]\n\n### Haskell Language Server\n\n[Haskell Language Server](https://haskell-language-server.readthedocs.io)\nhas built-in support for using Ormolu as a formatter.\n\n### GitHub actions\n\n[`run-ormolu`][run-ormolu] is the recommended way to ensure that a project\nis formatted with Ormolu.\n\n### Language extensions, dependencies, and fixities\n\nOrmolu automatically locates the Cabal file that corresponds to a given\nsource code file. Cabal files are used to extract both default extensions\nand dependencies. Default extensions directly affect behavior of the GHC\nparser, while dependencies are used to figure out fixities of operators that\nappear in the source code. Fixities can also be overridden via an `.ormolu`\nfile which should be located at a higher level in the file system hierarchy\nthan the source file that is being formatted. When the input comes from\nstdin, one can pass `--stdin-input-file` which will give Ormolu the location\nthat should be used as the starting point for searching for `.cabal` and\n`.ormolu` files.\n\nHere is an example of `.ormolu` file:\n\n```haskell\ninfixr 9  .\ninfixr 5  ++\ninfixl 4  <$\ninfixl 1  >>, >>=\ninfixr 1  =<<\ninfixr 0  $, $!\ninfixl 4 <*>, <*, *>, <**>\n```\n\nIt uses exactly the same syntax as usual Haskell fixity declarations to make\nit easier for Haskellers to edit and maintain.\n\nAs of Ormolu 0.7.0.0, `.ormolu` files can also contain instructions about\nmodule re-exports that Ormolu should be aware of. This might be desirable\nbecause at the moment Ormolu cannot know about all possible module\nre-exports in the ecosystem and only few of them are actually important when\nit comes to fixity deduction. In 99% of cases the user won't have to do\nanything, especially since most common re-exports are already programmed\ninto Ormolu. (You are welcome to open PRs to make Ormolu aware of more\nre-exports by default.) However, when the fixity of an operator is not\ninferred correctly, making Ormolu aware of a re-export may come in handy.\nHere is an example:\n\n```haskell\nmodule Control.Lens exports Control.Lens.At\nmodule Control.Lens exports \"lens\" Control.Lens.Lens\n```\n\nModule re-export declarations can be mixed freely with fixity overrides, as\nlong as each declaration is on its own line. As of Ormolu 0.7.1.0 explicit\npackage names are allowed in re-export declarations (see the example above).\n\nFinally, all of the above-mentioned parameters can be controlled from the\ncommand line:\n\n* Language extensions can be specified with the `-o` or `--ghc-opt` flag.\n* Dependencies can be specified with the `-p` or `--package` flag.\n* Fixities can be specified with the `-f` or `--fixity` flag.\n* Re-exports can be specified with the `-r` or `--reexport` flag.\n\nSearching for `.cabal` and `.ormolu` files can be disabled by passing\n`--no-cabal` and `--no-dot-ormolu` respectively.\n\n### Magic comments\n\nOrmolu understands two magic comments:\n\n```haskell\n{- ORMOLU_DISABLE -}\n```\n\nand\n\n```haskell\n{- ORMOLU_ENABLE -}\n```\n\nThis allows us to disable formatting selectively for code between these\nmarkers or disable it for the entire file. To achieve the latter, just put\n`{- ORMOLU_DISABLE -}` at the very top. Note that for Ormolu to work the\nfragments where Ormolu is enabled must be parseable on their own. Because of\nthat the magic comments cannot be placed arbitrarily, but rather must\nenclose independent top-level definitions.\n\n### Regions\n\nOne can ask Ormolu to format a region of input and leave the rest\nunformatted. This is accomplished by passing the `--start-line` and\n`--end-line` command line options. `--start-line` defaults to the beginning\nof the file, while `--end-line` defaults to the end.\n\n### Exit codes\n\nExit code | Meaning\n----------|-----------------------------------------------\n0         | Success\n1         | General problem\n2         | CPP used (deprecated)\n3         | Parsing of original input failed\n4         | Parsing of formatted code failed\n5         | AST of original and formatted code differs\n6         | Formatting is not idempotent\n7         | Unrecognized GHC options\n8         | Cabal file parsing failed\n9         | Missing input file path when using stdin input and accounting for .cabal files\n10        | Parse error while parsing fixity overrides\n100       | In checking mode: unformatted files\n101       | Inplace mode does not work with stdin\n102       | Other issue (with multiple input files)\n\n### Using as a library\n\nThe `ormolu` package can also be depended upon from other Haskell programs.\nFor these purposes only the top `Ormolu` module should be considered stable.\nIt follows [PVP](https://pvp.haskell.org/) starting from the version\n0.5.3.0. Rely on other modules at your own risk.\n\n## Limitations\n\n* CPP support is experimental. CPP is virtually impossible to handle\n  correctly, so we process them as a sort of unchangeable snippets. This\n  works only in simple cases when CPP conditionals surround top-level\n  declarations. See the [CPP][design-cpp] section in the design notes for a\n  discussion of the dangers.\n* Input modules should be parsable by Haddock, which is a bit stricter\n  criterion than just being valid Haskell modules.\n\n## Running on Hackage\n\nIt's possible to try Ormolu on arbitrary packages from Hackage. For that\nexecute (from the root of the cloned repo):\n\n```console\n$ nix build .#hackage.<package>\n```\n\nThen inspect `result/log.txt` for possible problems. The derivation will\nalso contain formatted `.hs` files for inspection and original inputs with\n`.hs-original` extension (those are with CPP dropped, exactly what is fed\ninto Ormolu).\n\n## Forks and modifications\n\nWe know of the following actively maintained forks:\n\n* [Fourmolu][fourmolu], which uses 4-space indentation and allows arbitrary\n  configuration.\n\n## Contributing\n\nSee [CONTRIBUTING.md][contributing].\n\n## License\n\nSee [LICENSE.md][license].\n\nCopyright © 2018–present Tweag I/O\n\n[aur]: https://aur.archlinux.org/packages/ormolu\n[design-cpp]: https://github.com/tweag/ormolu/blob/master/DESIGN.md#cpp\n[emacs-package]: https://github.com/vyorkin/ormolu.el\n[haskell-src-exts]: https://hackage.haskell.org/package/haskell-src-exts\n[neoformat]: https://github.com/sbdchd/neoformat\n[releases]: https://github.com/tweag/ormolu/releases\n[run-ormolu]: https://github.com/haskell-actions/run-ormolu\n[vim-ormolu]: https://github.com/sdiehl/vim-ormolu\n[vs-code-plugin]: https://marketplace.visualstudio.com/items?itemName=sjurmillidahl.ormolu-vscode\n[fourmolu]: https://github.com/fourmolu/fourmolu\n[contributing]: https://github.com/tweag/ormolu/blob/master/CONTRIBUTING.md\n[license]: https://github.com/tweag/ormolu/blob/master/LICENSE.md"
}
