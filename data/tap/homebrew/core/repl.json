{
  "name": "repl",
  "full_name": "repl",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Wrap non-interactive programs with a REPL",
  "license": "MIT",
  "homepage": "https://github.com/defunkt/repl",
  "versions": {
    "stable": "1.0.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/defunkt/repl/archive/v1.0.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "d0542404f03159b0d6eb22a1aa4a509714c87c8594fca5121c578d50d950307d"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/repl/blobs/sha256:497a5e7b673fbd288181f823e1b1a7ba71770b6d3da82bd66ac100c60b0295b3",
          "sha256": "497a5e7b673fbd288181f823e1b1a7ba71770b6d3da82bd66ac100c60b0295b3"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/repl.rb",
  "ruby_source_checksum": {
    "sha256": "3659c5fd306fc4a68cb3f5f63af6f75bbc2827ec66fd7440cc443c601f463013"
  },
  "date_added": "2010-01-30T00:37:09-08:00",
  "readme": "repl(1) -- sometimes you need a repl\n====================================\n\n`repl` is an interactive program which tenderly wraps another,\nnon-interactive program.\n\nFor example:\n\n    $ repl redis-cli -p 6665\n    >> set name chris\n    OK\n    >> get name\n    chris\n    >> info\n    redis_version:1.000\n    uptime_in_seconds:182991\n    uptime_in_days:2\n    .. etc ..\n\n\nOr:\n\n    $ repl gem\n    >> --version\n    1.3.5\n    >> search yajl\n\n    *** LOCAL GEMS ***\n\n    yajl-ruby (0.6.7)\n    >> search yajl -r\n\n    *** REMOTE GEMS ***\n\n    brianmario-yajl-ruby (0.6.3)\n    filipegiusti-yajl-ruby (0.6.4)\n    jdg-yajl-ruby (0.5.12)\n    oortle-yajl-ruby (0.5.8)\n    yajl-ruby (0.6.7)\n\n\nOr even:\n\n    $ repl git\n    >> branch\n      gh-pages\n    * master\n    >> tag\n    rm\n    v0.1.0\n    v0.1.1\n    v0.1.2\n    v0.1.3\n    >> tag -d rm\n    Deleted tag 'rm'\n    >> pwd\n    git: 'pwd' is not a git-command. See 'git --help'.\n\n    Did you mean this?\n      add\n\nYou can also use `%s` to tell repl where to stick the input:\n\n    $ repl heroku %s --app domainy\n    >> info\n    === domainy\n    Web URL:        http://domainy.heroku.com/\n    Git Repo:       git@heroku.com:domainy.git\n    Dynos:          1\n    Workers:        0\n    Repo size:      288k\n    Slug size:      4k\n    Data size:      0K in 0 table\n    Addons:         Piggyback SSL\n    Owner:          b****@*******.com\n\n\nIf you have [rlwrap(1)][0] installed you'll automatically get the full\nbenefits of readline: history, reverse searches, etc.\n\n`repl` is meant to wrap programs which accept command line arguments\nand print to the standard output. It keeps no state between executed\nlines and, as such, cannot be used to replace `irb` or the Python\nREPL (for example).\n\n\nInstall\n-------\n\n### Standalone\n\n`repl` is easily installed as a standalone script:\n\n    export REPL_BIN=~/bin/repl\n    curl -s https://raw.github.com/defunkt/repl/latest/bin/repl > $REPL_BIN\n    chmod 755 $REPL_BIN\n\nChange `$REPL_BIN` to your desired location and have at! (Just make\nsure it's in your `$PATH`.)\n\n### RubyGems\n\n`repl` can also be installed as a RubyGem:\n\n    $ gem install repl\n\n\nCompletion\n----------\n\nBecause `rlwrap` supports completion, `repl` does too. Any file in\n`~/.repl` matching the name of the command you start `repl` with will\nbe used for completion.\n\nFor instance, a file named `~/.repl/redis-cli` containing \"get set\ninfo\" will cause \"get\", \"set\", and \"info\" to be tab completeable at\nthe `repl redis-cli` prompt.\n\nThe directory searched for completion files can be configured using\nthe `REPL_COMPLETION_DIR` environment variable.\n\nSee the [repl-completion](http://github.com/defunkt/repl-completion)\nproject for a few common, pre-rolled completion files.\n\n\nConfiguration\n-------------\n\nThe following environment variables affect `repl`'s behavior:\n\n`REPL_PROMPT`:\n    the prompt to display before each line of input. defaults to >>\n\n`REPL_COMPLETION_DIR`:\n    directory in which completion files are kept\n\n\nContributing\n------------\n\nOnce you've made your great commits:\n\n1. [Fork][1] repl\n2. Create a topic branch - `git checkout -b my_branch`\n3. Push to your branch - `git push origin my_branch`\n4. Create an [Issue][2] with a link to your branch\n5. That's it!\n\n\nMeta\n----\n\n* Code: `git clone git://github.com/defunkt/repl.git`\n* Home: <https://github.com/defunkt/repl>\n* Bugs: <https://github.com/defunkt/repl/issues>\n* Gems: <http://gemcutter.org/gems/repl>\n\n\nAuthor\n------\n\nChris Wanstrath :: chris@ozmm.org :: @defunkt\n\n\n[0]: http://utopia.knoware.nl/~hlub/rlwrap/\n[1]: http://help.github.com/forking/\n[2]: https://github.com/defunkt/repl/issues"
}
