{
  "name": "goproxy",
  "full_name": "goproxy",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Global proxy for Go modules",
  "license": "MIT",
  "homepage": "https://github.com/goproxyio/goproxy",
  "versions": {
    "stable": "2.0.7",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/goproxyio/goproxy/archive/v2.0.7.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "d87f3928467520f8d6b0ba8adcbf5957dc6eb2dc9936249edd6568ceb01a71ca"
    },
    "head": {
      "url": "https://github.com/goproxyio/goproxy.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/goproxy/blobs/sha256:3e2aa6365f5d64d9ef502521cd45fb6cd8168be310ec0f98264884b89ba46bef",
          "sha256": "3e2aa6365f5d64d9ef502521cd45fb6cd8168be310ec0f98264884b89ba46bef"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/goproxy/blobs/sha256:416e6d61492d983b2bc83aecde39fc718a75bf0a13e443d3224d9f9985e7f23b",
          "sha256": "416e6d61492d983b2bc83aecde39fc718a75bf0a13e443d3224d9f9985e7f23b"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/goproxy/blobs/sha256:79bbb0c810d5411ed592e149ce76f13dffc99cc08eeb639fe4939e10b1a588b0",
          "sha256": "79bbb0c810d5411ed592e149ce76f13dffc99cc08eeb639fe4939e10b1a588b0"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/goproxy/blobs/sha256:aba91922176d4874a6a1b2a6da7fae4fcb669f472d38c259241b0dfb619c1c3f",
          "sha256": "aba91922176d4874a6a1b2a6da7fae4fcb669f472d38c259241b0dfb619c1c3f"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/goproxy/blobs/sha256:855041ffba9435944868115752c8cc020cf9a30f63e81b236bc00baeb95edc8b",
          "sha256": "855041ffba9435944868115752c8cc020cf9a30f63e81b236bc00baeb95edc8b"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/goproxy/blobs/sha256:bc3750bfaf43401d883d3b0463518007f2fcdf744327b688e3495562106a0808",
          "sha256": "bc3750bfaf43401d883d3b0463518007f2fcdf744327b688e3495562106a0808"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/goproxy/blobs/sha256:ff2d41442228fba93e1d08be90f64dd3db210cf47e3543f22b452ed7327866b7",
          "sha256": "ff2d41442228fba93e1d08be90f64dd3db210cf47e3543f22b452ed7327866b7"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/goproxy/blobs/sha256:5a35f434f319bd48a948c27172bff1d60be27307cfe9cd18bbdfc36ab4e56007",
          "sha256": "5a35f434f319bd48a948c27172bff1d60be27307cfe9cd18bbdfc36ab4e56007"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/goproxy/blobs/sha256:aea5ace7890ba7d5035f69fab75985928a2f8e1a8514e2ab2ec58c3470d9c250",
          "sha256": "aea5ace7890ba7d5035f69fab75985928a2f8e1a8514e2ab2ec58c3470d9c250"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [
    "go"
  ],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/goproxy.rb",
  "ruby_source_checksum": {
    "sha256": "49b9891f76fdef2cc2b5b32b9c785816e600c27bb24883721414aafeff342f08"
  },
  "date_added": "2021-10-20T08:05:38+00:00",
  "readme": "# GOPROXY\n\n[![CircleCI](https://circleci.com/gh/goproxyio/goproxy.svg?style=svg)](https://circleci.com/gh/goproxyio/goproxy)\n[![Go Report Card](https://goreportcard.com/badge/github.com/goproxyio/goproxy)](https://goreportcard.com/report/github.com/goproxyio/goproxy)\n[![GoDoc](https://godoc.org/github.com/goproxyio/goproxy?status.svg)](https://godoc.org/github.com/goproxyio/goproxy)\n\nA global proxy for go modules. see: [https://goproxy.io](https://goproxy.io)\n\n## Requirements\n\nThis service invokes the local `go` command to answer requests.\n\nThe default `cacheDir` is `GOPATH`, you can set it up by yourself according to the situation.\n\n## Build\n\n```shell\ngit clone https://github.com/goproxyio/goproxy.git\ncd goproxy\nmake\n```\n\n## Started\n\n### Proxy mode    \n\n```shell\n./bin/goproxy -listen=0.0.0.0:80 -cacheDir=/tmp/test\n```\n\nIf you run `go get -v pkg` in the proxy machine, you should set a new `GOPATH` which is different from the original `GOPATH`, or you may encounter a deadlock.\n\nSee [`test/get_test.sh`](./test/get_test.sh).\n\n### Router mode    \n\n```shell\n./bin/goproxy -listen=0.0.0.0:80 -proxy https://goproxy.io\n```\n\nUse the `-proxy` flag combined with the `-exclude` flag to enable `Router mode`, which implements route filter to routing private modules or public modules.\n\n```\n                                         direct\n                      +----------------------------------> private repo\n                      |\n                 match|pattern\n                      |\n                  +---+---+           +----------+\ngo get  +-------> |goproxy| +-------> |goproxy.io| +---> golang.org/x/net\n                  +-------+           +----------+\n                 router mode           proxy mode\n```\n\nIn `Router mode`, use the `-exclude` flag to set a glob pattern. The glob will specify what packages should not try to resolve with the value of `-proxy`. Modules which match the `-exclude` pattern will resolve direct to the repo which \nmatches the module path.\n\nNOTE: Patterns are matched to the full path specified, not only to the host component.\n\n```shell\n./bin/goproxy -listen=0.0.0.0:80 -cacheDir=/tmp/test -proxy https://goproxy.io -exclude \"*.corp.example.com,rsc.io/private\"\n```\n\n### Private module authentication\n\nSome private modules are gated behind `git` authentication. To resolve this, you can force git to rewrite the URL with a personal access token present for auth\n\n```shell\ngit config --global url.\"https://${GITHUB_PERSONAL_ACCESS_TOKEN}@github.com/\".insteadOf https://github.com/\n```\n\nThis can be done for other git providers as well, following the same pattern\n\n## Use docker image\n\n```shell\ndocker run -d -p80:8081 goproxy/goproxy\n```\n\nUse the -v flag to persisting the proxy module data (change ___cacheDir___ to your own dir):\n\n```\ndocker run -d -p80:8081 -v cacheDir:/go goproxy/goproxy\n```\n\n## Docker Compose\n\n```shell\ndocker-compose up\n```\n\n## Kubernetes\n\nDeployment:\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: goproxy\n  name: goproxy\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: goproxy\n    spec:\n      containers:\n      - args:\n        - -proxy\n        - https://goproxy.io\n        - -listen\n        - 0.0.0.0:8081\n        - -cacheDir\n        - /tmp/test\n        - -exclude\n        - github.com/my-org/*\n        image: goproxy/goproxy\n        name: goproxy\n        ports:\n        - containerPort: 8081\n        volumeMounts:\n        - mountPath: /tmp/test\n          name: goproxy\n      volumes:\n      - emptyDir:\n          medium: Memory\n          sizeLimit: 500Mi\n        name: goproxy\n```\n\nDeployment (with gitconfig secret):\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: goproxy\n  name: goproxy\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: goproxy\n    spec:\n      containers:\n      - args:\n        - -proxy\n        - https://goproxy.io\n        - -listen\n        - 0.0.0.0:8081\n        - -cacheDir\n        - /tmp/test\n        - -exclude\n        - github.com/my-org/*\n        image: goproxy/goproxy\n        name: goproxy\n        ports:\n        - containerPort: 8081\n        volumeMounts:\n        - mountPath: /tmp/test\n          name: goproxy\n        - mountPath: /root\n          name: gitconfig\n          readOnly: true\n      volumes:\n      - emptyDir:\n          medium: Memory\n          sizeLimit: 500Mi\n        name: goproxy\n      - name: gitconfig\n        secret:\n          secretName: gitconfig\n---\napiVersion: v1\ndata:\n  # NOTE: Encoded version of the following, replacing ${GITHUB_PERSONAL_ACCESS_TOKEN}\n  # [url \"https://${GITHUB_PERSONAL_ACCESS_TOKEN}@github.com/\"]\n  # insteadOf = https://github.com/\n  .gitconfig: *****************************\nkind: Secret\nmetadata:\n  name: test\n```\n\n## Appendix\n\n- If running locally, set `export GOPROXY=http://localhost[:PORT]` to use your goproxy.\n- Set `export GOPROXY=direct` to directly access modules without your goproxy.\n\n## Sponsors\n\n<img src=\"https://goproxy.io/images/sponsors/yzh_inc.png\" width=\"200\" />"
}
