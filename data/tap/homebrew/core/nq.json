{
  "name": "nq",
  "full_name": "nq",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Unix command-line queue utility",
  "license": "CC0-1.0",
  "homepage": "https://github.com/leahneukirchen/nq",
  "versions": {
    "stable": "0.5",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/leahneukirchen/nq/archive/v0.5.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "3f01aaf0b8eee4f5080ed1cd71887cb6485d366257d4cf5470878da2b734b030"
    },
    "head": {
      "url": "https://github.com/leahneukirchen/nq.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/nq/blobs/sha256:3006d397e3423d928d11d7473559b0ef1f68cc95d11a784d450b7e0afc0b1182",
          "sha256": "3006d397e3423d928d11d7473559b0ef1f68cc95d11a784d450b7e0afc0b1182"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/nq/blobs/sha256:5b050bc2a3667662b9f12ec156c2aa73758b5a58803029c56172ba8c8ce0dd0f",
          "sha256": "5b050bc2a3667662b9f12ec156c2aa73758b5a58803029c56172ba8c8ce0dd0f"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/nq/blobs/sha256:8f30174530722649e4515ff41c06d3d4d88d96db7a5f69299ee827c2112c9274",
          "sha256": "8f30174530722649e4515ff41c06d3d4d88d96db7a5f69299ee827c2112c9274"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/nq/blobs/sha256:b8ab76c16891d21276c7db64fe81a29a81fac99c745ab37181df9674e717d3ed",
          "sha256": "b8ab76c16891d21276c7db64fe81a29a81fac99c745ab37181df9674e717d3ed"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/nq/blobs/sha256:3b0266ca4e323c0d7edabfe047d20d2dad6065d2d41708e89ed29af617ddc5c4",
          "sha256": "3b0266ca4e323c0d7edabfe047d20d2dad6065d2d41708e89ed29af617ddc5c4"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/nq/blobs/sha256:57fa203a54904a2fdc06cb0031a6d2bea0cfcd3137562b0c64cf3ac92dc4dd7f",
          "sha256": "57fa203a54904a2fdc06cb0031a6d2bea0cfcd3137562b0c64cf3ac92dc4dd7f"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/nq/blobs/sha256:c33190abc0b66757582008bf593ab4e37c977f7d9faeafdea6b1631c455ca4a6",
          "sha256": "c33190abc0b66757582008bf593ab4e37c977f7d9faeafdea6b1631c455ca4a6"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/nq.rb",
  "ruby_source_checksum": {
    "sha256": "78200f2ae04ce41ea3fb0a9b415cd3d1eb7a1b94647a88f2d5c730033553a80e"
  },
  "date_added": "2015-09-04T21:09:23+01:00",
  "readme": "## nq: queue utilities\n\nThese small utilities allow creating very lightweight job queue\nsystems which require no setup, maintenance, supervision, or any\nlong-running processes.\n\n`nq` should run on any POSIX.1-2008 compliant system which also\nprovides a working flock(2).  Tested on Linux 2.6.37, Linux 4.1,\nOpenBSD 5.7, FreeBSD 10.1, NetBSD 7.0.2, Mac OS X 10.3 and\nSmartOS joyent_20160304T005100Z.\n\nThe intended purpose is ad-hoc queuing of command lines (e.g., for\nbuilding several targets of a Makefile, downloading multiple files one\nat a time, running benchmarks in several configurations, or simply as\na glorified `nohup`). But as any good Unix tool, it can be abused for\nwhatever you like.\n\nJob order is enforced by a timestamp `nq` gets immediately when\nstarted.  Synchronization happens on file-system level.  Timer\nresolution is milliseconds.  No sub-second file system time stamps are\nrequired.  Polling is not used.  Exclusive execution is maintained\nstrictly.\n\nEnforcing job order works like this:\n- every job has a flock(2)ed output file, ala `,TIMESTAMP.PID`\n- every job starts only after all earlier flock(2)ed files are unlocked\n- Why flock(2)? Because it locks the file handle, which is shared\n  across exec(2) with the child process (the actual job), and it will\n  unlock when the file is closed (usually when the job terminates).\n\nYou enqueue (get it?) new jobs using `nq CMDLINE...`.  The job ID is\noutput (unless suppressed using `-q`) and `nq` detaches immediately,\nrunning the job in the background.  STDOUT and STDERR are redirected\ninto the log file.\n\n`nq` tries hard (but does not guarantee) to ensure the log file of the\ncurrently running job has `+x` bit set.  Thus you can use `ls -F` to get\na quick overview of the state of your queue.\n\nThe \"file extension\" of the log file is actually the PID, so you can\nkill jobs easily.  Before the job is started, it is the PID of `nq`,\nso you can cancel a queued job by killing it as well.\n\nDue to the initial `exec` line in the log files, you can resubmit a\njob by executing it as a shell command file (i.e. running `sh $jobid`).\n\nYou can wait for jobs to finish using `nq -w`, possibly listing job\nIDs you want to wait for; the default is all of them.  Likewise, you\ncan test if there are jobs which need to be waited upon using `-t`.\n\nBy default, job IDs are per-directory, but you can set `$NQDIR` to put\nthem elsewhere.  Creating `nq` wrappers setting `$NQDIR` to provide\ndifferent queues for different purposes is encouraged.\n\nAll these operations take worst-case quadratic time in the amount of\nlock files produced, so you should clean them regularly.\n\n## Examples\n\nBuild targets `clean`, `depends`, `all`, without occupying the terminal:\n\n\t% nq make clean\n\t% nq make depends\n\t% nq make all\n\t% fq\n\t... look at output, can interrupt with C-c any time\n\twithout stopping the build ...\n\nSimple download queue, accessible from multiple terminals:\n\n\t% mkdir -p /tmp/downloads\n\t% alias qget='NQDIR=/tmp/downloads nq wget'\n\t% alias qwait='NQDIR=/tmp/downloads fq -q'\n\twindow1% qget http://mymirror/big1.iso\n\twindow2% qget http://mymirror/big2.iso\n\twindow3% qget http://mymirror/big3.iso\n\t% qwait\n\t... wait for all downloads to finish ...\n\nAs `nohup` replacement (The benchmark will run in background, every run\ngets a different output file, and the command line you ran is logged,\ntoo!):\n\n\t% ssh remote\n\tremote% nq ./run-benchmark\n\t,14f6f3034f8.17035\n\tremote% ^D\n\t% ssh remote\n\tremote% fq\n\t... see output, fq exits when job finished ...\n\n## Assumptions\n\n`nq` will only work correctly when:\n- `$NQDIR` (respectively `.`) is writable.\n- `flock(2)` works in `$NQDIR` (respectively `.`).\n- `gettimeofday` behaves monotonic (using `CLOCK_MONOTONIC` would\n  create confusing file names).  Else job order can be confused and\n  multiple tasks can run at once due to race conditions.\n- No other programs put files matching `,*` into `$NQDIR` (respectively `.`).\n\n## nq helpers\n\nTwo helper programs are provided:\n\n**`fq`** outputs the log of the currently running jobs, exiting when the\njobs are done.  If no job is running, the output of the last job is\nshown.  `fq -a` shows the output of all jobs, `fq -q` only shows one\nline per job.  `fq` uses `inotify` on Linux and falls back to polling\nfor size change else.  (`fq.sh` is a similar tool, not quite as robust,\nimplemented as shell-script calling `tail`.)\n\n**`tq`** wraps `nq` and displays the `fq` output in a new `tmux` or screen window.\n\n(A pure shell implementation of `nq` is provided as `nq.sh`.  It needs\n`flock` from util-linux, and only has a timer resolution of 1s.\nLock files from `nq` and `nq.sh` should not be mixed.)\n\n## Installation\n\nUse `make all` to build, `make install` to install relative to `PREFIX`\n(`/usr/local` by default).  The `DESTDIR` convention is respected.\nYou can also just copy the binaries into your `PATH`.\n\nYou can use `make check` to run a simple test suite, if you have\nPerl's `prove` installed.\n\n## Comparison to `at`, `batch`, and `task-spooler`\n\n* `at` runs jobs at a given time.\n  `batch` runs jobs \"when system load levels permit\".\n  `nq` and [`task-spooler`](https://vicerveza.homeunix.net/~viric/soft/ts/)\n  run jobs in sequence with no regard to the system's load average.\n\n* `at` and `batch` have 52 built-in queues: a-z and A-Z.\n  Any directory can be a queue for `nq`.\n  `task-spooler` can have different queues for different terminals.\n\n* You can follow the output of an `nq` queue tail-style with `fq`.\n\n* The syntax is different: `at` and `batch` take whole scripts from\n  the standard input or a file; `nq` takes a single command as its\n  command line arguments.\n\n* `nq` doesn't rely on a daemon, and uses a directory to manage the queue.\n  `task-spooler` automatically launches a daemon to manage a queue.\n\n* `task-spooler` can set a maximum number of simultaneous jobs.\n\n## Copyright\n\n`nq` is in the public domain.\n\nTo the extent possible under law,\nLeah Neukirchen <leah@vuxu.org>\nhas waived all copyright and related or\nneighboring rights to this work.\n\nhttp://creativecommons.org/publicdomain/zero/1.0/"
}
