{
  "name": "gaze",
  "full_name": "gaze",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Execute commands for you",
  "license": "MIT",
  "homepage": "https://github.com/wtetsu/gaze",
  "versions": {
    "stable": "1.1.6",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/wtetsu/gaze/archive/refs/tags/v1.1.6.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "3fd0ab0b3451e78b85bf2104d5b23b3c4d018cc8f2ed824e103761f8a327c713"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gaze/blobs/sha256:1e5652b24e3da96ec9085d07c4b776b8fa8ebb6315bf5ce8c98361200d1f71b4",
          "sha256": "1e5652b24e3da96ec9085d07c4b776b8fa8ebb6315bf5ce8c98361200d1f71b4"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gaze/blobs/sha256:1e5652b24e3da96ec9085d07c4b776b8fa8ebb6315bf5ce8c98361200d1f71b4",
          "sha256": "1e5652b24e3da96ec9085d07c4b776b8fa8ebb6315bf5ce8c98361200d1f71b4"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gaze/blobs/sha256:1e5652b24e3da96ec9085d07c4b776b8fa8ebb6315bf5ce8c98361200d1f71b4",
          "sha256": "1e5652b24e3da96ec9085d07c4b776b8fa8ebb6315bf5ce8c98361200d1f71b4"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gaze/blobs/sha256:883b90c8117e35667b597728ceb2d23106ab6021fcd920055d85e6230dc74539",
          "sha256": "883b90c8117e35667b597728ceb2d23106ab6021fcd920055d85e6230dc74539"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gaze/blobs/sha256:883b90c8117e35667b597728ceb2d23106ab6021fcd920055d85e6230dc74539",
          "sha256": "883b90c8117e35667b597728ceb2d23106ab6021fcd920055d85e6230dc74539"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gaze/blobs/sha256:883b90c8117e35667b597728ceb2d23106ab6021fcd920055d85e6230dc74539",
          "sha256": "883b90c8117e35667b597728ceb2d23106ab6021fcd920055d85e6230dc74539"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gaze/blobs/sha256:7f7c23c489737fd48d591e6093ab500dd9614706e8c98179d65273aad343a84c",
          "sha256": "7f7c23c489737fd48d591e6093ab500dd9614706e8c98179d65273aad343a84c"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/gaze.rb",
  "ruby_source_checksum": {
    "sha256": "590be182b00a7edd8bf4ad829e2153e6eaf0b16b7cb7114c3bf260eb5e2e75cc"
  },
  "date_added": "2022-08-01T16:40:39+00:00",
  "readme": "\n<p align=\"center\">\n  <img width=\"500\" src=\"https://user-images.githubusercontent.com/515948/179385932-48ea38a3-3bbb-4f45-8d68-63dc076e757d.png\" alt=\"gaze logo\" />\n  <br/>\n  Gaze is gazing at you\n</p>\n\n<p align=\"center\">\n  <a href=\"https://github.com/wtetsu/gaze/actions?query=workflow%3ATest\"><img src=\"https://github.com/wtetsu/gaze/workflows/Test/badge.svg\" alt=\"Test\" /></a>\n  <a href=\"https://goreportcard.com/report/github.com/wtetsu/gaze\"><img src=\"https://goreportcard.com/badge/github.com/wtetsu/gaze\" alt=\"Go Report Card\" /></a>\n  <a href=\"https://codeclimate.com/github/wtetsu/gaze/maintainability\"><img src=\"https://api.codeclimate.com/v1/badges/bd322b9104f5fcd3e37e/maintainability\" alt=\"Maintainability\" /></a>\n  <a href=\"https://codecov.io/gh/wtetsu/gaze\"><img src=\"https://codecov.io/gh/wtetsu/gaze/branch/master/graph/badge.svg\" alt=\"codecov\" /></a>\n  <a href=\"https://pkg.go.dev/github.com/wtetsu/gaze\"><img src=\"https://pkg.go.dev/badge/github.com/wtetsu/gaze.svg\" alt=\"Go Reference\"></a>\n</p>\n\n\n# What is Gaze?\n\nüëÅÔ∏èGaze runs a command, **right after** you save a file.\n\nIt greatly helps you to focus on writing code!\n![gaze02](https://user-images.githubusercontent.com/515948/73607575-1fbfe900-45fb-11ea-813e-6be6bf9ece6d.gif)\n\n---\n\nSetting up Gaze is easy.\n\n```\ngaze .\n```\n\nThen, invoke your favorite editor on another terminal and edit it!\n\n```\nvi a.py\n```\n\n## Installation\n\n### Brew (for macOS)\n\n```\nbrew install gaze\n```\n\nOr, [download binary](https://github.com/wtetsu/gaze/releases)\n\n## Usage examples\n\n- Modify a.py -> üëÅÔ∏èRuns `python a.py`\n- Modify a.rb -> üëÅÔ∏èRuns `rubocop` \n- Modify a.js -> üëÅÔ∏èRuns `npm run lint`\n- Modify a.go -> üëÅÔ∏èRuns `make build`\n- Modify Dockerfile -> üëÅÔ∏èRuns `docker build`\n- And so forth...\n\n---\n\nSoftware development often requires us to repeatedly execute the same command manually.\n\nFor example, when writing a simple Python script, you may create a.py file, write a few lines of code, and run `python a.py`. If the result isn't what you expected, you edit a.py and run `python a.py` again.\n\nAgain and again...\n\nAs a result, you may find yourself constantly switching between the editor and terminal, typing the same command repeatedly.\n\nThis can be frustrating and a waste of time and energyüôÑ\n\n---\n\nüëÅÔ∏èGaze runs a command for you, **right after** you save a file.\n\n## Why Gaze? (Features)\n\nGaze is designed as a CLI tool that accelerates your coding.\n\n- üì¶ Easy to use, out-of-the-box\n- ‚ö° Super quick reaction\n- üåé Language-agnostic, editor-agnostic\n- üîß Flexible configuration\n- üíª Multiplatform (macOS, Windows, Linux)\n- üìù Create-and-rename file actions handling\n- üîç Advanced options for more control\n  - `-r`: restart (useful for server applications)\n  - `-t 2000`: timeout (useful if you sometimes write infinite loops)\n- üöÄ Optimal parallel handling\n  - See also: [Parallel handling](/doc/parallel.md)\n  - <img src=\"doc/img/p04.png\" width=\"300\">\n\n---\n\nGaze was developed for supporting daily coding.\n\nEven though there are already many \"update-and-run\" type of tools, I would say Gaze is the best for quick coding because all the technical design decisions have been made for that purpose.\n\n# How to use Gaze\n\nThe top priority of the Gaze's design is \"easy to invoke\".\n\n```\ngaze .\n```\n\nThen, switch to another terminal and run `vi a.py`. Gaze executes a.py in response to your file modifications.\n\n### Other examples\n\nGaze at one file.\n\n```\ngaze a.py\n```\n\n---\n\nSpecify files with pattern matching (\\*, \\*\\*, ?, {, })\n\n```\ngaze \"*.py\"\n```\n\n```\ngaze \"src/**/*.rb\"\n```\n\n```\ngaze \"{aaa,bbb}/*.{rb,py}\"\n```\n\n---\n\nSpecify an arbitrary command by `-c` option.\n\n```\ngaze \"src/**/*.js\" -c \"eslint {{file}}\"\n```\n\n---\n\nKill the previous one before launching a new process. This is useful if you are writing a server.\n\n```\ngaze -r server.py\n```\n\n---\n\nKill an ongoing process after 1000(ms). This is useful if you love infinite loops.\n\n```\ngaze -t 1000 complicated.py\n```\n\n---\n\nSpecify multiple commands in quotations, separated by newlines.\n\n```\ngaze \"*.cpp\" -c \"gcc {{file}} -o a.out\nls -l a.out\n./a.out\"\n```\n\nOutput when a.cpp was updated.\n\n```\n[gcc a.cpp -o a.out](1/3)\n\n[ls -l a.out](2/3)\n-rwxr-xr-x 1 user group 42155 Mar  3 00:31 a.out\n\n[./a.out](3/3)\nhello, world!\n```\n\nIf a certain command exited with non-zero, Gaze doesn't invoke the next command.\n\n```\n[gcc a.cpp -o a.out](1/3)\na.cpp: In function 'int main()':\na.cpp:5:28: error: expected ';' before '}' token\n   printf(\"hello, world!\\n\")\n                            ^\n                            ;\n }\n ~\nexit status 1\n```\n\n### Configuration\n\nGaze is Language-agnostic.\n\nFor convenience, it has useful default configurations for some major languages (e.g. Go, Python, Ruby, JavaScript, Rust, and so forth)\n\nThanks to the default configurations, the command below is valid.\n\n```\ngaze a.py\n```\n\nThe above command is equivalent to `gaze a.py -c 'python \"{{file}}\"'`.\n\n\nYou can display the default YAML configuration by `gaze -y`.\n\n```yaml\ncommands:\n  - ext: .go\n    cmd: go run \"{{file}}\"\n  - ext: .py\n    cmd: python \"{{file}}\"\n  - ext: .rb\n    cmd: ruby \"{{file}}\"\n  - ext: .js\n    cmd: node \"{{file}}\"\n  - ext: .d\n    cmd: dmd -run \"{{file}}\"\n  - ext: .groovy\n    cmd: groovy \"{{file}}\"\n  - ext: .php\n    cmd: php \"{{file}}\"\n  - ext: .java\n    cmd: java \"{{file}}\"\n  - ext: .kts\n    cmd: kotlinc -script \"{{file}}\"\n  - ext: .rs\n    cmd: |\n      rustc \"{{file}}\" -o\"{{base0}}.out\"\n      ./\"{{base0}}.out\"\n  - ext: .cpp\n    cmd: |\n      gcc \"{{file}}\" -o\"{{base0}}.out\"\n      ./\"{{base0}}.out\"\n  - ext: .ts\n    cmd: |\n      tsc \"{{file}}\" --out \"{{base0}}.out\"\n      node ./\"{{base0}}.out\"\n  - re: ^Dockerfile$\n    cmd: docker build -f \"{{file}}\" .\n```\n\nNote:\n\n- To specify both ext and re for one cmd is prohibited\n- cmd can have multiple commands. Use vertical line(|) to write multiple commands\n\nIf you want to customize it, please set up your own configuration file.\n\n```\ngaze -y > ~/.gaze.yml\nvi ~/.gaze.yml\n```\n\nGaze searches a configuration file according to its priority rule.\n\n1. A file specified by -f option\n1. ~/.config/gaze/gaze.yml\n1. ~/.gaze.yml\n1. (Default)\n\n\n### Options:\n\n```\nUsage: gaze [options...] file(s)\n\nOptions:\n  -c  Command(s) to run when files are changed.\n  -r  Restart mode. Sends SIGTERM to the ongoing process before invoking the next command.\n  -t  Timeout(ms). Sends SIGTERM to the ongoing process after the specified time has elapsed.\n  -f  Specify a YAML configuration file.\n  -v  Verbose mode. Displays additional information.\n  -q  Quiet mode. Suppresses normal output.\n  -y  Displays the default YAML configuration.\n  -h  Displays help.\n  --color    Color mode (0:plain, 1:colorful).\n  --version  Display version information.\n\nExamples:\n  gaze .\n  gaze main.go\n  gaze a.rb b.rb\n  gaze -c make \"**/*.c\"\n  gaze -c \"eslint {{file}}\" \"src/**/*.js\"\n  gaze -r server.py\n  gaze -t 1000 complicated.py\n\nFor more information: https://github.com/wtetsu/gaze\n```\n\n### Command format\n\nYou can write [Mustache](<https://en.wikipedia.org/wiki/Mustache_(template_system)>) templates for commands.\n\n```\ngaze -c \"echo {{file}} {{ext}} {{abs}}\" .\n```\n\n| Parameter | Example                   |\n| --------- | ------------------------- |\n| {{file}}  | src/mod1/main.py          |\n| {{ext}}   | .py                       |\n| {{base}}  | main.py                   |\n| {{base0}} | main                      |\n| {{dir}}   | src/mod1                  |\n| {{abs}}   | /my/proj/src/mod1/main.py |\n\n# Third-party data\n\n- Great Go libraries\n  - See [go.mod](https://github.com/wtetsu/gaze/blob/master/go.mod) and [license.zip](https://github.com/wtetsu/gaze/releases)"
}
