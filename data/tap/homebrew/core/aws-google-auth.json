{
  "name": "aws-google-auth",
  "full_name": "aws-google-auth",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Acquire AWS credentials using Google Apps",
  "license": "MIT",
  "homepage": "https://github.com/cevoaustralia/aws-google-auth",
  "versions": {
    "stable": "0.0.38",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://files.pythonhosted.org/packages/32/4c/3a1dd1781c9d3bb4a85921b3d3e6e32fc0f0bad61ace6a8e1bd1a59c5ba0/aws-google-auth-0.0.38.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "7a044636df2f0ce6ceb01f8f57aba0b6a79ae58a91bef788b0ccc6474914e8ee"
    },
    "head": {
      "url": "https://github.com/cevoaustralia/aws-google-auth.git",
      "branch": "master"
    }
  },
  "revision": 5,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/aws-google-auth/blobs/sha256:e39ef675d33f1476202a79eec7f21cd8d864a34546828f04e5a62f24bed9058e",
          "sha256": "e39ef675d33f1476202a79eec7f21cd8d864a34546828f04e5a62f24bed9058e"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/aws-google-auth/blobs/sha256:519222664990894e2fd8d02279975878f5c6d934207783ffb3feafb9a601256d",
          "sha256": "519222664990894e2fd8d02279975878f5c6d934207783ffb3feafb9a601256d"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/aws-google-auth/blobs/sha256:65eb3032d4d6e8a522232ed8fa2314a3764bca51c4456b507c71d63a42000105",
          "sha256": "65eb3032d4d6e8a522232ed8fa2314a3764bca51c4456b507c71d63a42000105"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/aws-google-auth/blobs/sha256:5a2b26be71e8cfcf32f847a5a05237ee9e27eac0b8eaf4210e9267d0b6a863ad",
          "sha256": "5a2b26be71e8cfcf32f847a5a05237ee9e27eac0b8eaf4210e9267d0b6a863ad"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/aws-google-auth/blobs/sha256:5e5a0b0d82165f6ea2dbb13fff29526fb53d0d7c183d3b2afd61cdb9442aa927",
          "sha256": "5e5a0b0d82165f6ea2dbb13fff29526fb53d0d7c183d3b2afd61cdb9442aa927"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/aws-google-auth/blobs/sha256:d75348893fb9fa8bbe76d36fd32c17fce207c5d54f266a2e7394e404a048ecc7",
          "sha256": "d75348893fb9fa8bbe76d36fd32c17fce207c5d54f266a2e7394e404a048ecc7"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/aws-google-auth/blobs/sha256:facb35e9f65e97994ae8ba4ceff61ca8ec80a2a4ef71108fc73f92395e79b5a3",
          "sha256": "facb35e9f65e97994ae8ba4ceff61ca8ec80a2a4ef71108fc73f92395e79b5a3"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "pkg-config",
    "rust"
  ],
  "dependencies": [
    "keyring",
    "pillow",
    "python-tabulate",
    "python@3.11",
    "six",
    "cffi",
    "openssl@3"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "libffi",
    "libxml2",
    "libxslt"
  ],
  "uses_from_macos_bounds": [
    {},
    {},
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "2706c66e8def3eeba4d9bf1adf66221c8ad70701",
  "ruby_source_path": "Formula/aws-google-auth.rb",
  "ruby_source_checksum": {
    "sha256": "785456ebb1889d64c536207d1fded0c04235bdbe769a2d987fcfadaf290f4f3b"
  },
  "date_added": "2019-07-22T00:17:00+02:00",
  "readme": "aws-google-auth\n===============\n\n|github-badge| |docker-badge| |pypi-badge| |coveralls-badge|\n\n.. |github-badge| image:: https://github.com/cevoaustralia/aws-google-auth/workflows/Python%20package/badge.svg\n   :target: https://github.com/cevoaustralia/aws-google-auth/actions\n   :alt: GitHub build badge\n\n.. |docker-badge| image:: https://img.shields.io/docker/build/cevoaustralia/aws-google-auth.svg\n   :target: https://hub.docker.com/r/cevoaustralia/aws-google-auth/\n   :alt: Docker build status badge\n\n.. |pypi-badge| image:: https://img.shields.io/pypi/v/aws-google-auth.svg\n   :target: https://pypi.python.org/pypi/aws-google-auth/\n   :alt: PyPI version badge\n\n.. |coveralls-badge| image:: https://coveralls.io/repos/github/cevoaustralia/aws-google-auth/badge.svg?branch=master\n   :target: https://coveralls.io/github/cevoaustralia/aws-google-auth?branch=master\n\nThis command-line tool allows you to acquire AWS temporary (STS)\ncredentials using Google Apps as a federated (Single Sign-On, or SSO)\nprovider.\n\nSetup\n-----\n\nYou'll first have to set up Google Apps as a SAML identity provider\n(IdP) for AWS. There are tasks to be performed on both the Google Apps\nand the Amazon sides; these references should help you with those\nconfigurations:\n\n-  `How to Set Up Federated Single Sign-On to AWS Using Google\n   Apps <https://aws.amazon.com/blogs/security/how-to-set-up-federated-single-sign-on-to-aws-using-google-apps/>`__\n-  `Using Google Apps SAML SSO to do one-click login to\n   AWS <https://blog.faisalmisle.com/2015/11/using-google-apps-saml-sso-to-do-one-click-login-to-aws/>`__\n\nIf you need a fairly simple way to assign users to roles in AWS\naccounts, we have another tool called `Google AWS\nFederator <https://github.com/cevoaustralia/google-aws-federator>`__\nthat might help you.\n\nImportant Data\n~~~~~~~~~~~~~~\n\nYou will need to know Google's assigned Identity Provider ID, and the ID\nthat they assign to the SAML service provider.\n\nOnce you've set up the SAML SSO relationship between Google and AWS, you\ncan find the SP ID by drilling into the Google Apps console, under\n``Apps > SAML Apps > Settings for AWS SSO`` -- the URL will include a\ncomponent that looks like ``...#AppDetails:service=123456789012...`` --\nthat number is ``GOOGLE_SP_ID``\n\nYou can find the ``GOOGLE_IDP_ID``, again from the admin console, via\n``Security > Set up single sign-on (SSO)`` -- the ``SSO URL`` includes a\nstring like ``https://accounts.google.com/o/saml2/idp?idpid=aBcD01AbC``\nwhere the last bit (after the ``=``) is the IDP ID.\n\nInstallation\n------------\n\nYou can install quite easily via ``pip``, if you want to have it on your\nlocal system:\n\n.. code:: shell\n\n    # For basic installation\n    localhost$ sudo pip install aws-google-auth\n\n    # For installation with U2F support\n    localhost$ sudo pip install aws-google-auth[u2f]\n\n\n*Note* If using ZSH you will need to quote the install, as below:\n\n.. code:: shell\n\n   localhost$ sudo pip install \"aws-google-auth[u2f]\"\n\nIf you don't want to have the tool installed on your local system, or if\nyou prefer to isolate changes, there is a Dockerfile provided, which you\ncan build with:\n\n.. code:: shell\n\n    # Perform local build\n    localhost$ cd ..../aws-google-auth && docker build -t aws-google-auth .\n\n    # Use the Docker Hub version\n    localhost$ docker pull cevoaustralia/aws-google-auth\n\nDevelopment\n-----------\n\nIf you want to develop the AWS-Google-Auth tool itself, we thank you! In order\nto help you get rolling, you'll want to install locally with pip. Of course,\nyou can use your own regular workflow, with tools like `virtualenv <https://virtualenv.pypa.io/en/stable/>`__.\n\n.. code:: shell\n\n    # Install (without U2F support)\n    pip install -e .\n\n    # Install (with U2F support)\n    pip install -e .[u2f]\n\nWe welcome you to review our `code of conduct <CODE_OF_CONDUCT.md>`__ and\n`contributing <CONTRIBUTING.md>`__ documents.\n\nUsage\n-----\n\n.. code:: shell\n\n    $ aws-google-auth -h\n    usage: aws-google-auth [-h] [-u USERNAME] [-I IDP_ID] [-S SP_ID] [-R REGION]\n                           [-d DURATION] [-p PROFILE] [-D] [-q]\n                           [--bg-response BG_RESPONSE]\n                           [--saml-assertion SAML_ASSERTION] [--no-cache]\n                           [--print-creds] [--resolve-aliases]\n                           [--save-failure-html] [--save-saml-flow] [-a | -r ROLE_ARN] [-k]\n                           [-l {debug,info,warn}] [-V]\n\n    Acquire temporary AWS credentials via Google SSO\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -u USERNAME, --username USERNAME\n                            Google Apps username ($GOOGLE_USERNAME)\n      -I IDP_ID, --idp-id IDP_ID\n                            Google SSO IDP identifier ($GOOGLE_IDP_ID)\n      -S SP_ID, --sp-id SP_ID\n                            Google SSO SP identifier ($GOOGLE_SP_ID)\n      -R REGION, --region REGION\n                            AWS region endpoint ($AWS_DEFAULT_REGION)\n      -d DURATION, --duration DURATION\n                            Credential duration (defaults to value of $DURATION, then\n                            falls back to 43200)\n      -p PROFILE, --profile PROFILE\n                            AWS profile (defaults to value of $AWS_PROFILE, then\n                            falls back to 'sts')\n      -D, --disable-u2f     Disable U2F functionality.\n      -q, --quiet           Quiet output\n      --bg-response BG_RESPONSE\n                            Override default bgresponse challenge token ($GOOGLE_BG_RESPONSE).\n      --saml-assertion SAML_ASSERTION\n                            Base64 encoded SAML assertion to use.\n      --no-cache            Do not cache the SAML Assertion.\n      --print-creds         Print Credentials.\n      --resolve-aliases     Resolve AWS account aliases.\n      --save-failure-html   Write HTML failure responses to file for\n                            troubleshooting.\n      --save-saml-flow      Write all GET and PUT requests and HTML responses to/from Google to files for troubleshooting.\n      -a, --ask-role        Set true to always pick the role\n      -r ROLE_ARN, --role-arn ROLE_ARN\n                            The ARN of the role to assume ($AWS_ROLE_ARN)\n      -k, --keyring         Use keyring for storing the password.\n      -l {debug,info,warn}, --log {debug,info,warn}\n                            Select log level (default: warn)\n      -V, --version         show program's version number and exit\n\n\n**Note** If you want a longer session than the AWS default 3600 seconds (1 hour)\nduration, you must also modify the IAM Role to permit this. See\n`the AWS documentation <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_manage_modify.html>`__\nfor more information.\n\nNative Python\n~~~~~~~~~~~~~\n\n1. Execute ``aws-google-auth``\n2. You will be prompted to supply each parameter\n\n*Note* You can skip prompts by either passing parameters to the command, or setting the specified Environment variables.\n\nVia Docker\n~~~~~~~~~~~~~\n\n1. Set environment variables for anything listed in Usage with ``($VARIABLE)`` after command line option:\n\n   ``GOOGLE_USERNAME``, ``GOOGLE_IDP_ID``, and ``GOOGLE_SP_ID``\n   (see above under \"Important Data\" for how to find the last two; the first one is usually your email address)\n\n   ``AWS_PROFILE``: Optional profile name you want the credentials set for (default is 'sts')\n\n   ``ROLE_ARN``: Optional ARN of the role to assume\n\n2. For Docker:\n   ``docker run -it -e GOOGLE_USERNAME -e GOOGLE_IDP_ID -e GOOGLE_SP_ID -e AWS_PROFILE -e ROLE_ARN -v ~/.aws:/root/.aws cevoaustralia/aws-google-auth``\n\nYou'll be prompted for your password. If you've set up an MFA token for\nyour Google account, you'll also be prompted for the current token\nvalue.\n\nIf you have a U2F security key added to your Google account, you won't\nbe able to use this via Docker; the Docker container will not be able to\naccess any devices connected to the host ports. You will likely see the\nfollowing error during runtime: \"RuntimeWarning: U2F Device Not Found\".\n\nIf you have more than one role available to you (and you haven't set up ROLE_ARN),\nyou'll be prompted to choose the role from a list.\n\nFeeding password from stdin\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo enhance usability when using third party tools for managing passwords (aka password manager) you can feed data in\n``aws-google-auth`` from ``stdin``.\n\nWhen receiving data from ``stdin`` ``aws-google-auth`` disables the interactive prompt and uses ``stdin`` data.\n\nBefore `#82 <https://github.com/cevoaustralia/aws-google-auth/issues/82>`_, all interactive prompts could be fed from ``stdin`` already apart from the ``Google Password:`` prompt.\n\nExample usage:\n```\n$ password-manager show password | aws-google-auth\nGoogle Password: MFA token:\nAssuming arn:aws:iam::123456789012:role/admin\nCredentials Expiration: ...\n```\n\n**Note:** this feature is intended for password manager integration, not for passing passwords from command line.\nPlease use interactive prompt if you need to pass the password manually, as this provide enhanced security avoid\npassword leakage to shell history.\n\nStorage of profile credentials\n------------------------------\n\nThrough the use of AWS profiles, using the ``-p`` or ``--profile`` flag, the ``aws-google-auth`` utility will store the supplied username, IDP and SP details in your ``./aws/config`` files.\n\nWhen re-authenticating using the same profile, the values will be remembered to speed up the re-authentication process.\nThis enables an approach that enables you to enter your username, IPD and SP values once and then after only need to re-enter your password (and MFA if enabled).\n\nCreating an alias as below can be a quick and easy way to re-authenticate with a simple command shortcut.\n\n```\nalias aws-development='unset AWS_PROFILE; aws-google-auth -I $GOOGLE_IDP_ID -S $GOOGLE_SP_ID -u $USERNAME -p aws-dev ; export AWS_PROFILE=aws-dev'\n```\n\nOr, if you've alredy established a profile with valid cached values:\n\n```\nalias aws-development='unset AWS_PROFILE; aws-google-auth -p aws-dev ; export AWS_PROFILE=aws-dev'\n```\n\n\nNotes on Authentication\n-----------------------\n\nGoogle supports a number of 2-factor authentication schemes. Each of these\nresults in a slightly different \"next\" URL, if they're enabled, during ``do_login``\n\nGoogle controls the preference ordering of these schemes in the case that\nyou have multiple ones defined.\n\nThe varying 2-factor schemes and their representative URL fragments handled\nby this tool are:\n\n+------------------+-------------------------------------+\n| Method           | URL Fragment                        |\n+==================+=====================================+\n| No second factor | (none)                              |\n+------------------+-------------------------------------+\n| TOTP (eg Google  | ``.../signin/challenge/totp/...``   |\n|  Authenticator   |                                     |\n|  or Authy)       |                                     |\n+------------------+-------------------------------------+\n| SMS (or voice    | ``.../signin/challenge/ipp/...``    |\n|  call)           |                                     |\n+------------------+-------------------------------------+\n| SMS (or voice    | ``.../signin/challenge/iap/...``    |\n|  call) with      |                                     |\n|  number          |                                     |\n|  submission      |                                     |\n+------------------+-------------------------------------+\n| Google Prompt    | ``.../signin/challenge/az/...``     |\n|  (phone app)     |                                     |\n+------------------+-------------------------------------+\n| Security key     | ``.../signin/challenge/sk/...``     |\n|  (eg yubikey)    |                                     |\n+------------------+-------------------------------------+\n| Dual prompt      | ``.../signin/challenge/dp/...``     |\n|  (Validate 2FA ) |                                     |\n+------------------+-------------------------------------+\n| Backup code      | ``... (unknown yet) ...``           |\n|  (printed codes) |                                     |\n+------------------+-------------------------------------+\n\nAcknowledgments\n----------------\n\nThis work is inspired by `keyme <https://github.com/wheniwork/keyme>`__\n-- their digging into the guts of how Google SAML auth works is what's\nenabled it.\n\nThe attribute management and credential injection into AWS configuration files\nwas heavily borrowed from `aws-adfs <https://github.com/venth/aws-adfs>`"
}
