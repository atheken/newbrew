{
  "name": "zlog",
  "full_name": "zlog",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "High-performance C logging library",
  "license": "LGPL-2.1-only",
  "homepage": "https://github.com/HardySimpson/zlog",
  "versions": {
    "stable": "1.2.16",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/HardySimpson/zlog/archive/1.2.16.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "742401902f2134eb272c49631fe5c38d7aeb9a2ad56fa3ec3d15219b371ba655"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/zlog/blobs/sha256:b1c7b07083c3667fb8f32eba4437d2f3f7c872a184476968963b902a8a850aac",
          "sha256": "b1c7b07083c3667fb8f32eba4437d2f3f7c872a184476968963b902a8a850aac"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/zlog/blobs/sha256:16588f7d867f7426696693b19ee0221ff7483c2d7a34a856e3acb32c46c8ea41",
          "sha256": "16588f7d867f7426696693b19ee0221ff7483c2d7a34a856e3acb32c46c8ea41"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/zlog/blobs/sha256:04ed8b2ebcbbf23a3e6ad76b8d80914f939e6fc6cadfd297b91c3d4d1d29b8b0",
          "sha256": "04ed8b2ebcbbf23a3e6ad76b8d80914f939e6fc6cadfd297b91c3d4d1d29b8b0"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/zlog/blobs/sha256:f76ab42f65f676cd34a153fcac5c8a543edce5dd6bc462700dc23f0e99000b68",
          "sha256": "f76ab42f65f676cd34a153fcac5c8a543edce5dd6bc462700dc23f0e99000b68"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/zlog/blobs/sha256:19cf707f5b5720aefa8f7cbb851a032a9a16900b7b17685530aa59081cbb0ee5",
          "sha256": "19cf707f5b5720aefa8f7cbb851a032a9a16900b7b17685530aa59081cbb0ee5"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/zlog/blobs/sha256:f1384547bacef98381ae766dc90efc690a6a2a87dca0763a0572a3288ad68aee",
          "sha256": "f1384547bacef98381ae766dc90efc690a6a2a87dca0763a0572a3288ad68aee"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/zlog/blobs/sha256:62f3fbab6a72eb27a201c1c31cdb2cf8d4170053fdbfbe27130452026d01da69",
          "sha256": "62f3fbab6a72eb27a201c1c31cdb2cf8d4170053fdbfbe27130452026d01da69"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zlog/blobs/sha256:204935c1271f0c1cca1543ba6e71f7b1fcfcb611b97c6b32057c452abc1c2478",
          "sha256": "204935c1271f0c1cca1543ba6e71f7b1fcfcb611b97c6b32057c452abc1c2478"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/zlog.rb",
  "ruby_source_checksum": {
    "sha256": "60ae9fec8b1ea14617f1750d511bd755bf4ca8db10443ed2d4f76bab437ce448"
  },
  "date_added": "2018-08-19T05:53:21+01:00",
  "readme": "0. What is zlog?\n-------------\n\nzlog is a reliable, high-performance, thread safe, flexible, clear-model, pure C logging library.\n\n  Actually, in the C world there was NO good logging library for applications like logback in java or log4cxx in c++. Using printf can work, but can not be redirected or reformatted easily. syslog is slow and is designed for system use. \n  So I wrote zlog. \n  It is faster, safer and more powerful than log4c. So it can be widely used. \n\n1. Install\n-------------\n\nDownloads: https://github.com/HardySimpson/zlog/releases\n\n    $ tar -zxvf zlog-latest-stable.tar.gz\n    $ cd zlog-latest-stable/\n    $ make \n    $ sudo make install\n    \nor\n\n    $ make PREFIX=/usr/local/\n    $ sudo make PREFIX=/usr/local/ install\n\nPREFIX indicates the installation destination for zlog. After installation, refresh your dynamic linker to make sure your program can find zlog library.  \n\n    $ sudo vi /etc/ld.so.conf\n    /usr/local/lib\n    $ sudo ldconfig\n\nBefore running a real program, make sure libzlog.so is in the directory where the system's dynamic lib loader can find it. The command metioned above are for linux. Other systems will need a similar set of actions.\n\n\n2. Introduce configure file\n-------------\n\nThere are 3 important concepts in zlog: categories, formats and rules.\n\nCategories specify different kinds of log entries. In the zlog source code, category is a (zlog_cateogory_t *) variable. In your program, different categories for the log entries will distinguish them from each other.\n\nFormats describe log patterns, such as: with or without time stamp, source file, source line.\n\nRules consist of category, level, output file (or other channel) and format. In brief, if the category string in a rule in the configuration file equals the name of a category variable in the source, then they match. Still there is complex match range of category. Rule decouples variable conditions. For example, log4j must specify a level for each logger(or inherit from father logger). That's not convenient when each grade of logger has its own level for output(child logger output at the level of debug, when father logger output at the level of error)\n\nNow create a configuration file. The function zlog_init takes the files path as its only argument.\n    $ cat /etc/zlog.conf\n\n    [formats]\n    simple = \"%m%n\"\n    [rules]\n    my_cat.DEBUG    >stdout; simple\n\nIn the configuration file log messages in the category \"my_cat\" and a level of DEBUG or higher are output to standard output, with the format of simple(%m - usermessage %n - newline). If you want to direct out to a file and limit the files maximum size, use this configuration\n\n    my_cat.DEBUG            \"/var/log/aa.log\", 1M; simple\n\n3. Using zlog API in C source file\n-------------\n\t$ vi test_hello.c\n\n    #include <stdio.h> \n\n    #include \"zlog.h\"\n\n    int main(int argc, char** argv)\n    {\n    \tint rc;\n    \tzlog_category_t *c;\n\n    \trc = zlog_init(\"/etc/zlog.conf\");\n    \tif (rc) {\n    \t\tprintf(\"init failed\\n\");\n    \t\treturn -1;\n    \t}\n\n    \tc = zlog_get_category(\"my_cat\");\n    \tif (!c) {\n    \t\tprintf(\"get cat fail\\n\");\n    \t\tzlog_fini();\n    \t\treturn -2;\n    \t}\n\n    \tzlog_info(c, \"hello, zlog\");\n\n    \tzlog_fini();\n\n    \treturn 0;\n    } \n\n4. Compile, and run it!\n-------------\n    $ cc -c -o test_hello.o test_hello.c -I/usr/local/include\n    $ cc -o test_hello test_hello.o -L/usr/local/lib -lzlog -lpthread\n    $ ./test_hello\n    hello, zlog\n\n5. Advanced Usage\n-------------\n *  syslog model, better than log4j model\n *  log format customization\n *  multiple output destinations including static file path, dynamic file path, stdout, stderr, syslog, user-defined output\n *  runtime manually or automatically refresh configure(safely)\n *  high-performance, 250'000 logs/second on my laptop, about 1000 times faster than syslog(3) with rsyslogd\n *  user-defined log level\n *  thread-safe and process-safe log file rotation\n *  microsecond accuracy\n *  dzlog, a default category log API for easy use\n *  MDC, a log4j style key-value map\n *  self debuggable, can output zlog's self debug&error log at runtime\n *  No external dependencies, just based on a POSIX system and a C99 compliant vsnprintf.\n\n6. Links:\n-------------\n * Homepage: http://hardysimpson.github.io/zlog\n * Downloads: https://github.com/HardySimpson/zlog/releases\n * Author's Email: HardySimpson1984@gmail.com\n * auto tools version: https://github.com/bmanojlovic/zlog\n * cmake verion: https://github.com/lisongmin/zlog\n * windows version: https://github.com/lopsd07/WinZlog"
}
