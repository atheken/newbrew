{
  "name": "burst",
  "full_name": "burst",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Radix sort, lazy ranges and iterators, and more. Boost-like header-only library",
  "license": "BSL-1.0",
  "homepage": "https://github.com/izvolov/burst",
  "versions": {
    "stable": "3.1.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/izvolov/burst/archive/refs/tags/v3.1.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "ee58c7b98ca1709dd452b9ba46cb4c91fc0b2952edd020ed5bc2d600b3edeae7"
    },
    "head": {
      "url": "https://github.com/izvolov/burst.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/burst/blobs/sha256:2eff842d73b54a3df54ba7c6d5547c507736c15fe155905d49dde29090ad5c0a",
          "sha256": "2eff842d73b54a3df54ba7c6d5547c507736c15fe155905d49dde29090ad5c0a"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [
    "boost"
  ],
  "test_dependencies": [
    "cmake"
  ],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/burst.rb",
  "ruby_source_checksum": {
    "sha256": "7e1a208f0117eaa218545fac9c49bab92f06903cb2ce8572d8df5b1240fef0a7"
  },
  "date_added": "2022-08-20T09:58:19+00:00",
  "readme": "Burst\n=====\n\nТо, чего нет в Бусте.\n\n![Статус сборки под Linux](https://github.com/izvolov/burst/workflows/Linux/badge.svg) ![Статус сборки под macOS](https://github.com/izvolov/burst/workflows/macOS/badge.svg) [![Покрытие кода тестами](https://codecov.io/gh/izvolov/burst/branch/master/graph/badge.svg)](https://codecov.io/gh/izvolov/burst) [![Качество кода](https://api.codacy.com/project/badge/Grade/ddaf89951f3245b685a08e19e8f274d8)](https://www.codacy.com/app/izvolov/burst) [![Попробовать онлайн на Wandbox.org](https://img.shields.io/badge/try-online-blue.svg)](https://wandbox.org/permlink/sClSvn2yz7117J2h)\n\nО проекте\n---------\n\nСтандартная библиотека неплоха, но в ней кое-чего не хватает. Поэтому умные люди написали набор библиотек, которые дополняли бы стандартную тем, чего в ней нет.\nОднако, и в этих дополнительных библиотеках тоже кое-чего не хватает.\n\nВ данном проекте я попытался собрать некоторые алгоритмы и инструменты, совместимые с СБШ и Бустом, которые нужны в повседневной работе, но которых пока нет ни в стандартной библиотеке, ни в библиотеке Boost, либо же они есть, но не устраивают с точки зрения интерфейса или производительности.\n\nСодержание\n----------\n\n1.  [Что интересного?](#что-интересного)\n    1.  [Целочисленные сортировки](#целочисленные-сортировки)\n    2.  [Динамический кортеж](#динамический-кортеж)\n    3.  [Ленивые вычисления над диапазонами](#ленивые-вычисления-над-диапазонами)\n2.  [Требования](#требования)\n3.  [Установка](#установка)\n    1.  [Вариант 1: Скопировать исходники](#вариант-1-скопировать-исходники)\n    2.  [Вариант 2: Установить с помощью CMake](#вариант-2-установить-с-помощью-cmake)\n    3.  [Вариант 3: Подключить папку с проектом в CMake](#вариант-3-подключить-папку-с-проектом-в-cmake)\n    4.  [Вариант 4: CMake FetchContent](#вариант-4-cmake-fetchcontent)\n\nЧто интересного?\n----------------\n\nПолный список интересных штук можно изучить в [справочнике](doc/README.md).\n\n### Целочисленные сортировки\n\nАлгоритмы сортировок стандартной библиотеки `std::sort` и `std::stable_sort` являются классическими представителями сортировок, основанных на сравнениях. В то же время время существует другой класс алгоритмов, применимый к целым числам и не использующий в своей работе сравнения. Таким алгоритмом является [поразрядная сортировка](https://ru.wikipedia.org/wiki/%D0%9F%D0%BE%D1%80%D0%B0%D0%B7%D1%80%D1%8F%D0%B4%D0%BD%D0%B0%D1%8F_%D1%81%D0%BE%D1%80%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%BA%D0%B0). И, хотя это такой же классический алгоритм, как, например, быстрая сортировка или сортировка подсчётом, реализации поразрядной сортировки, как правило, оставляют желать лучшего. Возможно, поэтому многие люди до сих пор считают поразрядку алгоритмом, представляющим исключительно академический интерес, и малоприменимым в реальности. Однако, это заблуждение.\n\nПредставленная в данной библиотеке реализация поразрядной сортировки существенно быстрее стандартных `std::sort` и `std::stable_sort` (и даже [`boost::integer_sort`](https://www.boost.org/doc/libs/1_71_0/libs/sort/doc/html/boost/sort/spreadsort/integer__idm46709765154208.html)) при условии, что сортируются целые числа или доступно отображение из сортируемых элементов в целые числа.\n\n![Сравнение сортировок целых чисел](doc/images/radix_sort_is_fast.png)\n\nПомимо обычного, существует и многопоточный вариант целочисленных сортировок, который на достаточно больших массивах даёт кратный рост скорости сортировки:\n\n![Последовательный и параллельный варианты](doc/images/parallel_radix_sort_is_even_faster.png)\n\n[Подробнее про `burst::radix_sort` и `burst::counting_sort`](doc/README.md#intsort).\n\n### Динамический кортеж\n\nПредставьте, что вам нужно сложить в один контейнер объекты разных типов, при этом набор типов неизвестен на этапе компиляции, а объекты должны быть расположены в непрерывной области памяти и плотно упакованы, то есть между ними не должно быть пустот.\n\nНикакая комбинация стандартных средств (`tuple`, `vector`, `any`) не позволяют добиться требуемого результата.\n\nПоэтому был разработан класс `burst::dynamic_tuple`, удовлетворяющий всем этим требованиям, а соответствие данным требованиям означает оптимальность по занимаемой памяти и времени доступа к нужным объектам.\n\n```cpp\nburst::dynamic_tuple t(std::string(\"123\"));\n\nt.push_back(std::vector<int>{1, 2, 3});\nt.push_back(true);\nt.push_back(123u);\n\nassert(t.size() == 4);\nassert(t.get<std::string>(0) == \"123\");\nassert((t.get<std::vector<int>>(1) == std::vector<int>{1, 2, 3}));\nassert(t.get<bool>(2) == true);\n\nt.get<unsigned>(3) = 789u;\nassert(t.get<unsigned>(3) == 789u);\n```\n\n[Подробнее про `burst::dynamic_tuple`](doc/README.md#dynamic-tuple).\n\n### Ленивые вычисления над диапазонами\n\nПериодически возникает потребность в работе с диапазонами как с множествами, то есть производить операции разности, слияния, объединения, пересечения и т.д. Стандартные средства (`std::set_intersection` и т.д.) умеют работать только с двумя диапазонами одновременно, а кроме того, память, в которую будет записан результат, должен быть известен заранее.\n\nВ данной библиотеке реализован ряд алгоритмов, каждый из которых работает с произвольным количеством диапазонов, а результатом является ленивый диапазон, который производит нужную операцию (пересечение, слияние и т.д.) \"на лету\".\n\nНапример, следующим образом можно получить пересечение нескольких диапазонов, причём исходные диапазоны могут быть разного типа:\n\n```cpp\nauto natural = std::vector<int>{1, 2, 3, 4, 5, 6, 7};\nauto   prime = std::list<int>  {   2, 3,    5,    7};\nauto     odd = std::deque<int> {1,    3,    5,    7};\n//                                    ^     ^     ^\n\nauto intersected_range = burst::intersect(std::tie(natural, prime, odd));\n\nauto expected_collection = {3, 5, 7};\nassert(intersected_range == expected_collection);\n```\n\nДоступные операции:\n1.  [Склейка](doc/README.md#join)\n2.  [Слияние](doc/README.md#merge)\n3.  [Пересечение](doc/README.md#intersect)\n4.  [Полупересечение](doc/README.md#semiintersect)\n5.  [Объединение](doc/README.md#union)\n6.  [Разность](doc/README.md#difference)\n7.  [Симметрическая разность](doc/README.md#symmetric-difference)\n8.  [Разбиение на куски](doc/README.md#buffered-chunks)\n\n[Подробнее про ленивые вычисления над диапазонами](doc/README.md#lazy-ranges).\n\nТребования\n----------\n\n1.  Система сборки [CMake](https://cmake.org/) версии 3.8.2 и выше;\n2.  Компилятор [GCC](https://gcc.gnu.org/) версии 7.3 и выше или компилятор [Clang](http://clang.llvm.org/) версии 8 и выше<sup>1</sup>;\n3.  Библиотека тестирования [doctest](https://github.com/onqtam/doctest) \\[Не обязательно<sup>2</sup>\\];\n4.  Библиотека [Boost](https://www.boost.org/) (модуль [`program_options`](https://www.boost.org/doc/libs/1_66_0/doc/html/program_options.html) \\[Не обязательно<sup>3</sup>\\], модуль [`system`](https://www.boost.org/doc/libs/1_77_0/libs/system/doc/html/system.html) \\[Не обязательно<sup>4</sup>\\]) версии 1.66 и выше;\n5.  [Doxygen](http://doxygen.nl) \\[Не обязательно\\].\n\nЗаведомо работающие конфигурации перечислены в [интеграционных скриптах](.github/workflows).\n\n> <sup>1</sup> При работе с идущей в комплекте `libc++` или `libstdc++` версии 7 и выше.\n\n> <sup>2</sup> Можно миновать этап сборки и тестирования, если при сборке с помощью `CMake` выключить опцию `BURST_TESTING`:\n>\n> ```shell\n> cmake -DBURST_TESTING=OFF <прочие аргументы ...>\n> ```\n>\n> Также тестирование автоматически отключается в случае, если Burst подключается в качестве подпроекта.\n>\n> Если тестирование всё-таки включено, но doctest отсутствует в системе, то он будет автоматически скачан из репозитория и установлен локально с помощью CMake FetchContent.\n\n> <sup>3</sup> `Boost.Program_options` не понадобится, если отключить этап сборки замеров производительности с помощью опции `BURST_BENCHMARKING`:\n>\n> ```shell\n> cmake -DBURST_BENCHMARKING=OFF <прочие аргументы ...>\n> ```\n>\n> Также замеры производительности отключаются в случае, если Burst подключается в качестве подпроекта.\n\n> <sup>4</sup> `Boost.System` нужен только при использовании параллельных алгоритмов (например, [параллельной версии `radix_sort`](doc/README.md#radix-par)).\n\nУстановка\n---------\n\nВозможны следующие варианты установки.\n\n### Вариант 1: Скопировать исходники\n\nПоскольку Burst — полностью заголовочная библиотека, то достаточно скопировать в нужную директорию все заголовки из папки `include` из [репозитория](https://github.com/izvolov/burst) и подключить их в свой проект.\n\n### Вариант 2: Установить с помощью CMake\n\n```shell\ncd path/to/build/directory\ncmake -DCMAKE_BUILD_TYPE=Release path/to/burst\ncmake --build . --target install\n```\n\nПосле этого в системе сборки CMake будет доступен пакет `Burst`:\n\n```cmake\nfind_package(Burst)\n```\n\nЭта команда породит интерфейсную библиотеку `Burst::burst`, которую можно использовать при подключении библиотек:\n\n```cmake\nadd_executable(program program.cpp)\ntarget_link_libraries(program PRIVATE Burst::burst)\n```\n\n### Вариант 3: Подключить папку с проектом в CMake\n\n```cmake\nadd_subdirectory(\"path/to/burst\")\n```\n\nПосле этого в системе сборки CMake будет доступна цель `Burst::burst`, которую можно использовать при подключении библиотек:\n\n```cmake\nadd_executable(program program.cpp)\ntarget_link_libraries(program PRIVATE Burst::burst)\n```\n\n### Вариант 4: CMake FetchContent\n\nНачиная с версии CMake 3.14 можно скачать и подключить репозиторий с зависимостью прямо во время сборки с помощью модуля [FetchContent](https://cmake.org/cmake/help/v3.14/module/FetchContent.html). В случае с библиотекой `Burst` это можно записать тремя командами:\n\n```cmake\ninclude(FetchContent)\nFetchContent_Declare(Burst GIT_REPOSITORY https://github.com/izvolov/burst.git)\nFetchContent_MakeAvailable(Burst)\n```\n\nЭтот набор команд породит интерфейсную библиотеку Burst::burst, которую можно использовать при подключении библиотек:\n\n```cmake\nadd_executable(program program.cpp)\ntarget_link_libraries(program PRIVATE Burst::burst)\n```"
}
