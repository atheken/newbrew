{
  "name": "docker-gen",
  "full_name": "docker-gen",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Generate files from docker container metadata",
  "license": "MIT",
  "homepage": "https://github.com/nginx-proxy/docker-gen",
  "versions": {
    "stable": "0.10.6",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/nginx-proxy/docker-gen/archive/0.10.6.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "bb8207cf194bfeba0a92ba7f2215fd039ebc0d5d3730d3d2403f47419d67c957"
    },
    "head": {
      "url": "https://github.com/nginx-proxy/docker-gen.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/docker-gen/blobs/sha256:846dacd97e7d5e3cc9a6fe3ee82ffa4ef03561bd222c9afff19cae51aece4725",
          "sha256": "846dacd97e7d5e3cc9a6fe3ee82ffa4ef03561bd222c9afff19cae51aece4725"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/docker-gen/blobs/sha256:846dacd97e7d5e3cc9a6fe3ee82ffa4ef03561bd222c9afff19cae51aece4725",
          "sha256": "846dacd97e7d5e3cc9a6fe3ee82ffa4ef03561bd222c9afff19cae51aece4725"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/docker-gen/blobs/sha256:846dacd97e7d5e3cc9a6fe3ee82ffa4ef03561bd222c9afff19cae51aece4725",
          "sha256": "846dacd97e7d5e3cc9a6fe3ee82ffa4ef03561bd222c9afff19cae51aece4725"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/docker-gen/blobs/sha256:3633fff4ff83cdf232b6f9018cb6f3fd237a83a333a970766b08d4b8ef539402",
          "sha256": "3633fff4ff83cdf232b6f9018cb6f3fd237a83a333a970766b08d4b8ef539402"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/docker-gen/blobs/sha256:3633fff4ff83cdf232b6f9018cb6f3fd237a83a333a970766b08d4b8ef539402",
          "sha256": "3633fff4ff83cdf232b6f9018cb6f3fd237a83a333a970766b08d4b8ef539402"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/docker-gen/blobs/sha256:3633fff4ff83cdf232b6f9018cb6f3fd237a83a333a970766b08d4b8ef539402",
          "sha256": "3633fff4ff83cdf232b6f9018cb6f3fd237a83a333a970766b08d4b8ef539402"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/docker-gen/blobs/sha256:22fa57371ee73306de9f77e993d3430fb786630844b3f150b04525935b420b3e",
          "sha256": "22fa57371ee73306de9f77e993d3430fb786630844b3f150b04525935b420b3e"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/docker-gen.rb",
  "ruby_source_checksum": {
    "sha256": "9c0a861c000e41097c150346013c2343e33c0dddc06d811d1ba59a61d07fbc88"
  },
  "date_added": "2016-02-19T01:07:13-05:00",
  "readme": "docker-gen\n=====\n\n\n[![Tests](https://github.com/nginx-proxy/docker-gen/actions/workflows/tests.yml/badge.svg)](https://github.com/nginx-proxy/docker-gen/actions/workflows/tests.yml)\n[![GitHub release](https://img.shields.io/github/v/release/nginx-proxy/docker-gen)](https://github.com/nginx-proxy/docker-gen/releases)\n[![Docker Image Size](https://img.shields.io/docker/image-size/nginxproxy/docker-gen?sort=semver)](https://hub.docker.com/r/nginxproxy/docker-gen \"Click to view the image on Docker Hub\")\n[![Docker stars](https://img.shields.io/docker/stars/nginxproxy/docker-gen.svg)](https://hub.docker.com/r/nginxproxy/docker-gen 'DockerHub')\n[![Docker pulls](https://img.shields.io/docker/pulls/nginxproxy/docker-gen.svg)](https://hub.docker.com/r/nginxproxy/docker-gen 'DockerHub')\n\n`docker-gen` is a file generator that renders templates using docker container meta-data.\n\nIt can be used to generate various kinds of files for:\n\n * **Centralized logging** - [fluentd](https://github.com/nginx-proxy/docker-gen/blob/main/templates/fluentd.conf.tmpl), logstash or other centralized logging tools that tail the containers JSON log file or files within the container.\n * **Log Rotation** - [logrotate](https://github.com/nginx-proxy/docker-gen/blob/main/templates/logrotate.tmpl) files to rotate container JSON log files\n * **Reverse Proxy Configs** - [nginx](https://github.com/nginx-proxy/docker-gen/blob/main/templates/nginx.tmpl), [haproxy](https://github.com/jwilder/docker-discover), etc. reverse proxy configs to route requests from the host to containers\n * **Service Discovery** - Scripts (python, bash, etc..) to register containers within [etcd](https://github.com/jwilder/docker-register), hipache, etc..\n\n===\n\n### Installation\n\nThere are three common ways to run docker-gen:\n* on the host\n* bundled in a container with another application\n* separate standalone containers\n\n#### Host Install\n\nLinux/OSX binaries for release [0.9.0](https://github.com/nginx-proxy/docker-gen/releases)\n\n* [amd64](https://github.com/nginx-proxy/docker-gen/releases/download/0.9.0/docker-gen-linux-amd64-0.9.0.tar.gz)\n* [i386](https://github.com/nginx-proxy/docker-gen/releases/download/0.9.0/docker-gen-linux-i386-0.9.0.tar.gz)\n* [alpine-linux](https://github.com/nginx-proxy/docker-gen/releases/download/0.9.0/docker-gen-alpine-linux-amd64-0.9.0.tar.gz)\n\nDownload the version you need, untar, and install to your PATH.\n\n```\n$ wget https://github.com/nginx-proxy/docker-gen/releases/download/0.9.0/docker-gen-linux-amd64-0.9.0.tar.gz\n$ tar xvzf docker-gen-linux-amd64-0.9.0.tar.gz\n$ ./docker-gen\n```\n\n#### Bundled Container Install\n\nDocker-gen can be bundled inside of a container along-side applications.\n\n[nginx-proxy/nginx-proxy](https://hub.docker.com/r/nginxproxy/nginx-proxy) trusted build is an example of\nrunning docker-gen within a container along-side nginx.\n[jwilder/docker-register](https://github.com/jwilder/docker-register) is an example of running\ndocker-gen within a container to do service registration with etcd.\n\n#### Separate Container Install\n\nIt can also be run as two separate containers using the [nginx-proxy/docker-gen](https://hub.docker.com/r/nginxproxy/docker-gen)\nimage, together with virtually any other image.\n\nThis is how you could run the official [nginx](https://registry.hub.docker.com/_/nginx/) image and\nhave docker-gen generate a reverse proxy config in the same way that `nginx-proxy` works. You may want to do\nthis to prevent having the docker socket bound to a publicly exposed container service.\n\nStart nginx with a shared volume:\n\n```\n$ docker run -d -p 80:80 --name nginx -v /tmp/nginx:/etc/nginx/conf.d -t nginx\n```\n\nFetch the template and start the docker-gen container with the shared volume:\n```\n$ mkdir -p /tmp/templates && cd /tmp/templates\n$ curl -o nginx.tmpl https://raw.githubusercontent.com/nginx-proxy/docker-gen/main/templates/nginx.tmpl\n$ docker run -d --name nginx-gen --volumes-from nginx \\\n   -v /var/run/docker.sock:/tmp/docker.sock:rw \\\n   -v /tmp/templates:/etc/docker-gen/templates \\\n   -t nginxproxy/docker-gen -notify-sighup nginx -watch -only-exposed /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf\n```\n\nStart a container, taking note of any Environment variables a container expects. See the top of a template for details.\n\n```\n$ docker run --env VIRTUAL_HOST='example.com' --env VIRTUAL_PORT=80 ...\n```\n\n===\n\n### Usage\n```\n$ docker-gen\nUsage: docker-gen [options] template [dest]\n\nGenerate files from docker container meta-data\n\nOptions:\n  -config value\n      config files with template directives. Config files will be merged if this option is specified multiple times. (default [])\n  -endpoint string\n      docker api endpoint (tcp|unix://..). Default unix:///var/run/docker.sock\n  -interval int\n      notify command interval (secs)\n  -keep-blank-lines\n      keep blank lines in the output file\n  -notify restart xyz\n      run command after template is regenerated (e.g restart xyz)\n  -notify-output\n      log the output(stdout/stderr) of notify command\n  -notify-container container-ID\n      container to send a signal to\n  -notify-signal signal\n      signal to send to the -notify-container. -1 to call docker restart. Defaults to 1 aka. HUP.\n      All available signals available on the [dockerclient](https://github.com/fsouza/go-dockerclient/blob/01804dec8a84d0a77e63611f2b62d33e9bb2b64a/signal.go)\n  -notify-sighup container-ID\n      send HUP signal to container.  Equivalent to 'docker kill -s HUP container-ID', or `-notify-container container-ID -notify-signal 1`\n  -only-exposed\n      only include containers with exposed ports\n  -only-published\n      only include containers with published ports (implies -only-exposed)\n  -include-stopped\n      include stopped containers\n  -tlscacert string\n      path to TLS CA certificate file (default \"/Users/jason/.docker/machine/machines/default/ca.pem\")\n  -tlscert string\n      path to TLS client certificate file (default \"/Users/jason/.docker/machine/machines/default/cert.pem\")\n  -tlskey string\n      path to TLS client key file (default \"/Users/jason/.docker/machine/machines/default/key.pem\")\n  -tlsverify\n      verify docker daemon's TLS certicate (default true)\n  -version\n      show version\n  -watch\n      watch for container changes\n  -wait\n      minimum (and/or maximum) duration to wait after each container change before triggering\n\nArguments:\n  template - path to a template to generate\n  dest - path to write the template. If not specfied, STDOUT is used\n\nEnvironment Variables:\n  DOCKER_HOST - default value for -endpoint\n  DOCKER_CERT_PATH - directory path containing key.pem, cert.pm and ca.pem\n  DOCKER_TLS_VERIFY - enable client TLS verification]\n```\n\nIf no `<dest>` file is specified, the output is sent to stdout. Mainly useful for debugging.\n\n\n### Configuration file\n\nUsing the -config flag from above you can tell docker-gen to use the specified config file instead of command-line options. Multiple templates can be defined and they will be executed in the order that they appear in the config file.\n\nAn example configuration file, **docker-gen.cfg** can be found in the examples folder.\n\n#### Configuration File Syntax\n```\n[[config]]\nStarts a configuration section\n\ndest = \"path/to/a/file\"\npath to write the template. If not specfied, STDOUT is used\n\nnotifycmd = \"/etc/init.d/foo reload\"\nrun command after template is regenerated (e.g restart xyz)\n\nonlyexposed = true\nonly include containers with exposed ports\n\ntemplate = \"/path/to/a/template/file.tmpl\"\npath to a template to generate\n\nwatch = true\nwatch for container changes\n\nwait = \"500ms:2s\"\ndebounce changes with a min:max duration. Only applicable if watch = true\n\n\n[config.NotifyContainers]\nStarts a notify container section\n\ncontainername = 1\ncontainer name followed by the signal to send\n\ncontainer_id = 1\nor the container id can be used followed by the signal to send\n```\nPutting it all together here is an example configuration file.\n```\n[[config]]\ntemplate = \"/etc/nginx/nginx.conf.tmpl\"\ndest = \"/etc/nginx/sites-available/default\"\nonlyexposed = true\nnotifycmd = \"/etc/init.d/nginx reload\"\n\n[[config]]\ntemplate = \"/etc/logrotate.conf.tmpl\"\ndest = \"/etc/logrotate.d/docker\"\nwatch = true\n\n[[config]]\ntemplate = \"/etc/docker-gen/templates/nginx.tmpl\"\ndest = \"/etc/nginx/conf.d/default.conf\"\nwatch = true\nwait = \"500ms:2s\"\n\n[config.NotifyContainers]\nnginx = 1  # 1 is a signal number to be sent; here SIGHUP\ne75a60548dc9 = 1  # a key can be either container name (nginx) or ID\n```\n\n===\n\n### Templating\n\nThe templates used by docker-gen are written using the Go [text/template](http://golang.org/pkg/text/template/) language. In addition to the [built-in functions](http://golang.org/pkg/text/template/#hdr-Functions) supplied by Go, docker-gen uses [sprig](https://masterminds.github.io/sprig/) and some additional functions to make it simpler (or possible) to generate your desired output. Some templates rely on environment variables within the container to make decisions on what to generate from the template.\n\n#### Emit Structure\n\nWithin the templates, the object emitted by docker-gen will be a structure consisting of following Go structs:\n\n```go\ntype RuntimeContainer struct {\n    ID           string\n    Addresses    []Address\n    Networks     []Network\n    Gateway      string\n    Name         string\n    Hostname     string\n    Image        DockerImage\n    Env          map[string]string\n    Volumes      map[string]Volume\n    Node         SwarmNode\n    Labels       map[string]string\n    IP           string\n    IP6LinkLocal string\n    IP6Global    string\n    Mounts       []Mount\n    State        State\n}\n\ntype Address struct {\n    IP           string\n    IP6LinkLocal string\n    IP6Global    string\n    Port         string\n    HostPort     string\n    Proto        string\n    HostIP       string\n}\n\ntype Network struct {\n    IP                  string\n    Name                string\n    Gateway             string\n    EndpointID          string\n    IPv6Gateway         string\n    GlobalIPv6Address   string\n    MacAddress          string\n    GlobalIPv6PrefixLen int\n    IPPrefixLen         int\n}\n\ntype DockerImage struct {\n    Registry   string\n    Repository string\n    Tag        string\n}\n\ntype Mount struct {\n  Name        string\n  Source      string\n  Destination string\n  Driver      string\n  Mode        string\n  RW          bool\n}\n\ntype Volume struct {\n    Path      string\n    HostPath  string\n    ReadWrite bool\n}\n\ntype SwarmNode struct {\n    ID      string\n    Name    string\n    Address Address\n}\n\ntype State struct {\n  Running bool\n}\n\n// Accessible from the root in templates as .Docker\ntype Docker struct {\n    Name                 string\n    NumContainers        int\n    NumImages            int\n    Version              string\n    ApiVersion           string\n    GoVersion            string\n    OperatingSystem      string\n    Architecture         string\n    CurrentContainerID   string\n}\n\n// Host environment variables accessible from root in templates as .Env\n\n```\n\nFor example, this is a JSON version of an emitted RuntimeContainer struct:\n\n```json\n{\n   \"ID\":\"71e9768075836eb38557adcfc71a207386a0c597dbeda240cf905df79b18cebf\",\n   \"Addresses\":[\n      {\n         \"IP\":\"172.17.0.4\",\n         \"Port\":\"22\",\n         \"Proto\":\"tcp\",\n         \"HostIP\":\"192.168.10.24\",\n         \"HostPort\":\"2222\"\n      }\n   ],\n   \"Gateway\":\"172.17.42.1\",\n   \"Node\": {\n       \"ID\":\"I2VY:P7PF:TZD5:PGWB:QTI7:QDSP:C5UD:DYKR:XKKK:TRG2:M2BL:DFUN\",\n       \"Name\":\"docker-test\",\n       \"Address\": {\n           \"IP\":\"192.168.10.24\"\n       }\n   },\n   \"Labels\": {\n       \"operatingsystem\":\"Ubuntu 14.04.2 LTS\",\n       \"storagedriver\":\"devicemapper\",\n       \"anything_foo\":\"something_bar\"\n   },\n   \"IP\":\"172.17.0.4\",\n   \"Name\":\"docker_register\",\n   \"Hostname\":\"71e976807583\",\n   \"Image\":{\n      \"Registry\":\"jwilder\",\n      \"Repository\":\"docker-register\"\n   },\n   \"Env\":{\n      \"ETCD_HOST\":\"172.17.42.1:4001\",\n      \"PATH\":\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\",\n      \"DOCKER_HOST\":\"unix:///var/run/docker.sock\",\n      \"HOST_IP\":\"172.17.42.1\"\n   },\n   \"Volumes\":{\n      \"/mnt\":{\n         \"Path\":\"/mnt\",\n         \"HostPath\":\"/Users/joebob/tmp\",\n         \"ReadWrite\":true\n      }\n   }\n}\n```\n\n#### Functions\n\n* [Functions from Go](https://pkg.go.dev/text/template#hdr-Functions)\n* [Functions from Sprig v3](https://masterminds.github.io/sprig/), except for those that have the same name as one of the following functions.\n* *`closest $array $value`*: Returns the longest matching substring in `$array` that matches `$value`\n* *`coalesce ...`*: Returns the first non-nil argument.\n* *`contains $map $key`*: Returns `true` if `$map` contains `$key`. Takes maps from `string` to any type.\n* *`dir $path`*: Returns an array of filenames in the specified `$path`.\n* *`exists $path`*: Returns `true` if `$path` refers to an existing file or directory. Takes a string.\n* *`eval $templateName [$data]`*: Evaluates the named template like Go's built-in `template` action, but instead of writing out the result it returns the result as a string so that it can be post-processed.  The `$data` argument may be omitted, which is equivalent to passing `nil`.\n* *`groupBy $containers $fieldPath`*: Groups an array of `RuntimeContainer` instances based on the values of a field path expression `$fieldPath`. A field path expression is a dot-delimited list of map keys or struct member names specifying the path from container to a nested value, which must be a string. Returns a map from the value of the field path expression to an array of containers having that value. Containers that do not have a value for the field path in question are omitted.\n* *`groupByKeys $containers $fieldPath`*: Returns the same as `groupBy` but only returns the keys of the map.\n* *`groupByMulti $containers $fieldPath $sep`*: Like `groupBy`, but the string value specified by `$fieldPath` is first split by `$sep` into a list of strings. A container whose `$fieldPath` value contains a list of strings will show up in the map output under each of those strings.\n* *`groupByLabel $containers $label`*: Returns the same as `groupBy` but grouping by the given label's value.\n* *`intersect $slice1 $slice2`*: Returns the strings that exist in both string slices.\n* *`json $value`*: Returns the JSON representation of `$value` as a `string`.\n* *`keys $map`*: Returns the keys from `$map`. If `$map` is `nil`, a `nil` is returned. If `$map` is not a `map`, an error will be thrown.\n* *`parseBool $string`*: parseBool returns the boolean value represented by the string. It accepts 1, t, T, TRUE, true, True, 0, f, F, FALSE, false, False. Any other value returns an error. Alias for [`strconv.ParseBool`](http://golang.org/pkg/strconv/#ParseBool) \n* *`replace $string $old $new $count`*: Replaces up to `$count` occurences of `$old` with `$new` in `$string`. Alias for [`strings.Replace`](http://golang.org/pkg/strings/#Replace)\n* *`sha1 $string`*: Returns the hexadecimal representation of the SHA1 hash of `$string`.\n* *`split $string $sep`*: Splits `$string` into a slice of substrings delimited by `$sep`. Alias for [`strings.Split`](http://golang.org/pkg/strings/#Split)\n* *`splitN $string $sep $count`*: Splits `$string` into a slice of substrings delimited by `$sep`, with number of substrings returned determined by `$count`. Alias for [`strings.SplitN`](https://golang.org/pkg/strings/#SplitN)\n* *`sortStringsAsc $strings`: Returns a slice of strings `$strings` sorted in ascending order.\n* *`sortStringsDesc $strings`: Returns a slice of strings `$strings` sorted in descending (reverse) order.\n* *`sortObjectsByKeysAsc $objects $fieldPath`: Returns the array `$objects`, sorted in ascending order based on the values of a field path expression `$fieldPath`.\n* *`sortObjectsByKeysDesc $objects $fieldPath`: Returns the array `$objects`, sorted in descending (reverse) order based on the values of a field path expression `$fieldPath`.\n* *`trimPrefix $prefix $string`*: If `$prefix` is a prefix of `$string`, return `$string` with `$prefix` trimmed from the beginning. Otherwise, return `$string` unchanged.\n* *`trimSuffix $suffix $string`*: If `$suffix` is a suffix of `$string`, return `$string` with `$suffix` trimmed from the end. Otherwise, return `$string` unchanged.\n* *`toLower $string`*: Replace capital letters in `$string` to lowercase.\n* *`toUpper $string`*: Replace lowercase letters in `$string` to uppercase.\n* *`when $condition $trueValue $falseValue`*: Returns the `$trueValue` when the `$condition` is `true` and the `$falseValue` otherwise\n* *`where $items $fieldPath $value`*: Filters an array or slice based on the values of a field path expression `$fieldPath`. A field path expression is a dot-delimited list of map keys or struct member names specifying the path from container to a nested value. Returns an array of items having that value.\n* *`whereNot $items $fieldPath $value`*: Filters an array or slice based on the values of a field path expression `$fieldPath`. A field path expression is a dot-delimited list of map keys or struct member names specifying the path from container to a nested value. Returns an array of items **not** having that value.\n* *`whereExist $items $fieldPath`*: Like `where`, but returns only items where `$fieldPath` exists (is not nil).\n* *`whereNotExist $items $fieldPath`*: Like `where`, but returns only items where `$fieldPath` does not exist (is nil).\n* *`whereAny $items $fieldPath $sep $values`*: Like `where`, but the string value specified by `$fieldPath` is first split by `$sep` into a list of strings. The comparison value is a string slice with possible matches. Returns items which OR intersect these values.\n* *`whereAll $items $fieldPath $sep $values`*: Like `whereAny`, except all `$values` must exist in the `$fieldPath`.\n* *`whereLabelExists $containers $label`*: Filters a slice of containers based on the existence of the label `$label`.\n* *`whereLabelDoesNotExist $containers $label`*: Filters a slice of containers based on the non-existence of the label `$label`.\n* *`whereLabelValueMatches $containers $label $pattern`*: Filters a slice of containers based on the existence of the label `$label` with values matching the regular expression `$pattern`.\n\n===\n\n### Examples\n\n* [Automated Nginx Reverse Proxy for Docker](http://jasonwilder.com/blog/2014/03/25/automated-nginx-reverse-proxy-for-docker/)\n* [Docker Log Management With Fluentd](http://jasonwilder.com/blog/2014/03/17/docker-log-management-using-fluentd/)\n* [Docker Service Discovery Using Etcd and Haproxy](http://jasonwilder.com/blog/2014/07/15/docker-service-discovery/)\n\n#### NGINX Reverse Proxy Config\n\n[nginxproxy/nginx-proxy](https://hub.docker.com/r/nginxproxy/nginx-proxy) trusted build.\n\nStart nginx-proxy:\n\n```\n$ docker run -d -p 80:80 -v /var/run/docker.sock:/tmp/docker.sock -t nginxproxy/nginx-proxy\n```\n\nThen start containers with a VIRTUAL_HOST (and the VIRTUAL_PORT if more than one port is exposed) env variable:\n\n```\n$ docker run -e VIRTUAL_HOST=foo.bar.com -e VIRTUAL_PORT=80 -t ...\n```\n\nIf you wanted to run docker-gen directly on the host, you could do it with:\n\n```\n$ docker-gen -only-published -watch -notify \"/etc/init.d/nginx reload\" templates/nginx.tmpl /etc/nginx/sites-enabled/default\n```\n\n#### Fluentd Log Management\n\nThis template generate a fluentd.conf file used by fluentd. It would then ship log files off\nthe host.\n\n```\n$ docker-gen -watch -notify \"restart fluentd\" templates/fluentd.tmpl /etc/fluent/fluent.conf\n```\n\n#### Service Discovery in Etcd\n\n\nThis template is an example of generating a script that is then executed. This template generates\na python script that is then executed which register containers in Etcd using its HTTP API.\n\n```\n$ docker-gen -notify \"/bin/bash /tmp/etcd.sh\" -interval 10 templates/etcd.tmpl /tmp/etcd.sh\n```\n\n\n### Development\n\nThis project uses [Go Modules](https://golang.org/ref/mod) for managing 3rd party dependencies.\nThis means that at least `go 1.11` is required. \n\nFor `go 1.11` and `go 1.12` it is additionally required to manually enable support by setting `GO111MODULE=on`. \nFor later versions, this is not required. \n\n```\n$ git clone <your fork>\n$ cd <your fork>\n$ make get-deps\n$ make\n```\n\n### TODO\n\n * Add event status for handling start and stop events differently\n\n### License\n\nMIT"
}
