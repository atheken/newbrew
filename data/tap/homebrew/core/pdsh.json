{
  "name": "pdsh",
  "full_name": "pdsh",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Efficient rsh-like utility, for using hosts in parallel",
  "license": "GPL-2.0",
  "homepage": "https://github.com/chaos/pdsh",
  "versions": {
    "stable": "2.34",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/chaos/pdsh/releases/download/pdsh-2.34/pdsh-2.34.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "b47b3e4662736ef44b6fe86e3d380f95e591863e69163aa0592e9f9f618521e9"
    },
    "head": {
      "url": "https://github.com/chaos/pdsh.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": "/opt/homebrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/pdsh/blobs/sha256:90fc0bacf6810f69bbb1370768ddc0175a28aec274f2ce3fae28799e9a4c8854",
          "sha256": "90fc0bacf6810f69bbb1370768ddc0175a28aec274f2ce3fae28799e9a4c8854"
        },
        "arm64_monterey": {
          "cellar": "/opt/homebrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/pdsh/blobs/sha256:4f4123b72684e34e5e78b67269da1aae6e29e0ae60d1f144754d521289230d5a",
          "sha256": "4f4123b72684e34e5e78b67269da1aae6e29e0ae60d1f144754d521289230d5a"
        },
        "arm64_big_sur": {
          "cellar": "/opt/homebrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/pdsh/blobs/sha256:08092fc19817b2eb4fbbb1ffe7849246f7a8c0cfc1b3493d631f41b77ab68de6",
          "sha256": "08092fc19817b2eb4fbbb1ffe7849246f7a8c0cfc1b3493d631f41b77ab68de6"
        },
        "ventura": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/pdsh/blobs/sha256:8ffea11eaf9081562800cccb058238eae31212b95c6d1e533714d55ef1e2cdb1",
          "sha256": "8ffea11eaf9081562800cccb058238eae31212b95c6d1e533714d55ef1e2cdb1"
        },
        "monterey": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/pdsh/blobs/sha256:6f62900a3ebb6760631932fab7cf15c6cc3a12f2c2c8d390a46710f157716baf",
          "sha256": "6f62900a3ebb6760631932fab7cf15c6cc3a12f2c2c8d390a46710f157716baf"
        },
        "big_sur": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/pdsh/blobs/sha256:c9865e6ec25dd5d76c412919c161377a73e0e72f53b97c433488377ea6c69ece",
          "sha256": "c9865e6ec25dd5d76c412919c161377a73e0e72f53b97c433488377ea6c69ece"
        },
        "catalina": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/pdsh/blobs/sha256:db103afd01523d00761df3c077b309ffeaa7e816a538ab9b739fac7b58a8171b",
          "sha256": "db103afd01523d00761df3c077b309ffeaa7e816a538ab9b739fac7b58a8171b"
        },
        "mojave": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/pdsh/blobs/sha256:d5ce164360edacbda30b059e8964fc6e4c886adc5f63218a37667756419ef51a",
          "sha256": "d5ce164360edacbda30b059e8964fc6e4c886adc5f63218a37667756419ef51a"
        },
        "high_sierra": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/pdsh/blobs/sha256:4063ea4d575eef74e2af6993a74658df6c48e42b81df8a77a49aee745c7527a0",
          "sha256": "4063ea4d575eef74e2af6993a74658df6c48e42b81df8a77a49aee745c7527a0"
        },
        "x86_64_linux": {
          "cellar": "/home/linuxbrew/.linuxbrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/pdsh/blobs/sha256:02ddcbc57a480f8a5f049e6f50de9621b7eb6f84ca6e52ecd91a8747035641b6",
          "sha256": "02ddcbc57a480f8a5f049e6f50de9621b7eb6f84ca6e52ecd91a8747035641b6"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "readline"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/pdsh.rb",
  "ruby_source_checksum": {
    "sha256": "55f72c5bfc2606052e2c579845ed351d18c94983255ea9e74370db266e24ddfb"
  },
  "date_added": "2010-08-22T18:29:11-07:00",
  "readme": "+-------------+\n| Description |\n+-------------+\nPdsh is a multithreaded remote shell client which executes commands on\nmultiple remote hosts in parallel.  Pdsh can use several different\nremote shell services, including standard \"rsh\", Kerberos IV, and ssh.\n\nSee the man page in the doc directory for usage information.\n\n+---------------+\n| Configuration |\n+---------------+\n\nPdsh uses GNU autoconf for configuration.  Dynamically loadable\nmodules of each shell service (as well as other features) will be\ncompiled based on configuration.  By default, rsh, Kerberos IV, \nand SDR (for IBM SPs) will be compiled if they exist on the system.\n\nThe README.modules file distributed with pdsh contains a description\nof each module available, as well as its requirements and/or \nconflicts.\n\nIf your system does not support dynamically loadable modules, you\nmay compile modules in statically using the --enable-static-modules\noption.\n\nTo configure in additional feature modules:\n\n./configure [options]\n\n--without-rsh \n\tDisable support for BSD rcmd(3) (standard rsh).\n\n--with-ssh\n        Enable support of ssh(1) remote shell service.\n\n--with-machines=/path/to/machines\n\tUse a flat file list of machine names for -a instead of genders\n\n--with-genders\n        Enable support of a genders database through the genders(3)\n        library.  For pdsh's -i option to function properly, the genders\n        database must have alternate node names listed as the value of\n        the \"altname\" attribute. \n\n--with-dshgroups\n\t\tEnable support of dsh-style group files in ~/.dsh/group/groupname\n\t\tor /etc/dsh/group/groupname. Allows use of -g/-X to target\n\t\tor exclude hosts in dsh group files.\n\n--with-netgroup\n\t\tEnable use of netgroups (via /etc/netgroup or NIS) to build lists\n\t\tof target hosts using -g/-X to include/exclude hosts.\n\n--with-nodeupdown\n        Enable support of dynamic elimination of down nodes through\n        the nodeupdown(3) library. \n\n--with-mrsh\n        Enable support of mrsh(1) remote shell service.\n   \n--with-slurm\n\tSupport running pdsh under SLURM allocation.\n\n--with-fanout=N\n\tSpecify default fanout (default is 32).\n\n--with-timeout=N\n\tSet default connect timeout (default is 10 seconds).\n\n--with-readline\n\tUse the GNU readline library to parse input in interactive mode.\n\nNote that a number of the above configurations options may \"conflict\"\nwith each other because they perform identical operations.  For\nexample, genders and nodeattr both support the -g option.  If several\nmodules are installed that support identical options, the options will\ndefault to one particular module.  Static compilation of modules will\nfail if conflicting modules are selected.  See the man page in this\ndirectory for details on which modules conflict.\n\n+------------+\n| INSTALLING |\n+------------+\nmake\nmake install\n\nBy default, pdsh is now installed without setuid permissions. This\nis because, for the majority of the rcmd connect protocols, root\npermissions are not necessarily needed. If you are using either of\nthe \"rcmd/rsh\" or \"rcmd/qsh\" modules, you will need to change the\npermissions of pdsh and pdcp to be setuid root after the install.\nFor example:\n\n > chown root PREFIX/bin/pdsh PREFIX/bin/pdcp\n > chmod 4755 PREFIX/bin/pdsh PREFIX/bin/pdcp\n\n+---------+\n| GOTCHAS |\n+---------+\n\nWatch out for the following gotchas:\n\n1) When executing remote commands via rsh, krb4, qsh, or ssh, pdsh\nuses one reserved socket for each active connection, two if it is\nmaintaining a separate connection for stderr.  It obtains these\nsockets by calling rresvport(), which normally draws from a pool of\n256 sockets.  You may exhaust these if multiple pdsh's are running\nsimultanously on a machine, or if the fanout is set too high.  Mrsh \nand mqsh do not use reserved ports, and therefore are not affected\nthis problem as severely. \n\n2) When pdsh is using a remote shell service that is wrapped with TCP\nwrappers, there are three areas where bottlenecks can be created:\nIDENT, DNS, and SYSLOG.  If your hosts.allow includes \"user@\", e.g.\n\"in.rshd : ALL@ALL : ALLOW\" and TCP wrappers is configured to support\nIDENT, each simultaneous remote shell connection will result in an\nIDENT query back to the source.  For large fanouts this can quickly\noverwhelm the source.  Similarly, if TCP wrappers is configured to\nquery the DNS on every connection, pdsh may overwhelm the DNS server.\nFinally, if every remote shell connection results in a remote syslog\nentry, syslogd on your loghost may be overwhelmed and logs may grow\nexcessively long.\n\nIf local security policy permits, consider configuring TCP wrappers to\navoid calling IDENT, DNS, or SYSLOG on every remote shell connection.\nConfiguring without the \"PARANOID\" option (which requires all\nconnections to be registered in the DNS), permitting a simple list of\nIP addresses or a subnet (no names, and no user@ prefix), and setting\nthe SYSLOG severity for the remote shell service to a level that is\nnot remotely logged will avoid these pitfalls.  If these actions are\nnot possible, you may wish to reduce pdsh's default fanout (configure\n--with-fanout=N).\n\n+---------------------+\n| THEORY OF OPERATION |\n+---------------------+\nWe will generalize for the common remote shell service rsh.  The\nfollowing is similar for all other shell services (ssh, krb4, qsh,\netc.), but other shell services may include additional security or\nfeatures.\n\nA thread is created for each rsh connection to a node.  Each thread\nopens a connection using an MT-safe rcmd-like function, returns\nstdin and stderr streams, then terminates.\n\nThe mainline starts fanout number of rsh threads and waits on a\ncondition variable that is signalled by the rsh threads as they\nterminate.  When the condition variable is signalled, the main thread\nstarts a new rsh thread to maintain the fanout, until all remote\ncommands have been executed.\n\nA timeout thread is created that monitors the state of the threads and\nterminates any that take too much time connecting or, if requested on\nthe command line, take too long to complete.\n\nTyping ^C causes pdsh to list threads that are in the connected state.\nAnother ^C immediately following the first one terminates the program.\n\n+--------+\n| AUTHOR |\n+--------+\nJim Garlick <garlick@llnl.gov>\n\nPlease send suggestions, bug reports, or just a note letting me know\nthat you are using pdsh (it would be interesting to hear how many\nnodes are in your cluster).\n\n+------+\n| NOTE |\n+------+\nThis product includes software developed by the University of\nCalifornia, Berkeley and its contributors.  Modifications have been\nmade and bugs are probably mine.\n\nThe PDSH software package has no affiliation with the Democratic Party\nof Albania (www.pdsh.org)."
}
