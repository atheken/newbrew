{
  "name": "ada-url",
  "full_name": "ada-url",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "WHATWG-compliant and fast URL parser written in modern C++",
  "license": "Apache-2.0 or MIT",
  "homepage": "https://github.com/ada-url/ada",
  "versions": {
    "stable": "2.6.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/ada-url/ada/archive/refs/tags/v2.6.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "09551bfbd92853e59d731e5f44a88a690425fd2906977ad03a6a1059615a02a5"
    },
    "head": {
      "url": "https://github.com/ada-url/ada.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ada-url/blobs/sha256:9ec07f532ccc837bbe6196090f2ac2c441d6a2984545a3ca157d4ab71f6c76a6",
          "sha256": "9ec07f532ccc837bbe6196090f2ac2c441d6a2984545a3ca157d4ab71f6c76a6"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ada-url/blobs/sha256:bd216301e44a6151556ce5516c9c2c66f173a9eb6f430fc9babee747788b3652",
          "sha256": "bd216301e44a6151556ce5516c9c2c66f173a9eb6f430fc9babee747788b3652"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ada-url/blobs/sha256:ae3d248605c4a27a1a10a7687a3707690f0f47469dfb8a92a4995126609b72df",
          "sha256": "ae3d248605c4a27a1a10a7687a3707690f0f47469dfb8a92a4995126609b72df"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ada-url/blobs/sha256:e09bf2f78250e9f30e84e433597e736432e90d4d59d33fb87ae650d24d71e6e6",
          "sha256": "e09bf2f78250e9f30e84e433597e736432e90d4d59d33fb87ae650d24d71e6e6"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ada-url/blobs/sha256:27eb45aa96ab95706ffb2604ec98ed473dee0b338b63a669fcff0bbca3dbe691",
          "sha256": "27eb45aa96ab95706ffb2604ec98ed473dee0b338b63a669fcff0bbca3dbe691"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ada-url/blobs/sha256:6cd12a9990a40ded4b1a44ee64412d13a72b50179b32fcee9e5be9b0826a709d",
          "sha256": "6cd12a9990a40ded4b1a44ee64412d13a72b50179b32fcee9e5be9b0826a709d"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ada-url/blobs/sha256:9dad115d0ee0f5b1e652faa6f10bb8f63f9196a1d0dfec361dbd21392a3a9ddc",
          "sha256": "9dad115d0ee0f5b1e652faa6f10bb8f63f9196a1d0dfec361dbd21392a3a9ddc"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake",
    "python@3.11"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [
    {
      "name": "macos",
      "cask": null,
      "download": null,
      "version": "10.15",
      "contexts": [],
      "specs": [
        "stable",
        "head"
      ]
    }
  ],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "2706c66e8def3eeba4d9bf1adf66221c8ad70701",
  "ruby_source_path": "Formula/ada-url.rb",
  "ruby_source_checksum": {
    "sha256": "de765a218be6471cdd1344ae22fde10c417003d2b19dcc4ccc8eb608ea66f18c"
  },
  "date_added": "2023-04-21T10:35:18+08:00",
  "readme": "# Ada\n[![OpenSSF Scorecard](https://api.securityscorecards.dev/projects/github.com/ada-url/ada/badge)](https://securityscorecards.dev/viewer/?uri=github.com/ada-url/ada)\n[![OpenSSF Best Practices](https://bestpractices.coreinfrastructure.org/projects/7085/badge)](https://bestpractices.coreinfrastructure.org/projects/7085)\n[![Ubuntu 22.04](https://github.com/ada-url/ada/actions/workflows/ubuntu.yml/badge.svg)](https://github.com/ada-url/ada/actions/workflows/ubuntu.yml)\n[![VS17-CI](https://github.com/ada-url/ada/actions/workflows/visual_studio.yml/badge.svg)](https://github.com/ada-url/ada/actions/workflows/visual_studio.yml)\n[![VS17-clang-CI](https://github.com/ada-url/ada/actions/workflows/visual_studio_clang.yml/badge.svg)](https://github.com/ada-url/ada/actions/workflows/visual_studio_clang.yml)\n[![Ubuntu s390x (GCC 11)](https://github.com/ada-url/ada/actions/workflows/ubuntu-s390x.yml/badge.svg)](https://github.com/ada-url/ada/actions/workflows/ubuntu-s390x.yml)\n\nAda is a fast and spec-compliant URL parser written in C++.\nSpecification for URL parser can be found from the\n[WHATWG](https://url.spec.whatwg.org/#url-parsing) website.\n\nThe Ada library passes the full range of tests from the specification,\nacross a wide range of platforms (e.g., Windows, Linux, macOS). It fully\nsupports the relevant [Unicode Technical Standard](https://www.unicode.org/reports/tr46/#ToUnicode).\n\n### Requirements\n\nThe project is otherwise self-contained and it has no dependency.\nA recent C++ compiler supporting C++17. We test GCC 9 or better, LLVM 10 or better and Microsoft Visual Studio 2022.\n\n## Ada is fast. \n\nOn a benchmark where we need to validate and normalize [thousands URLs found\non popular websites](https://github.com/ada-url/url-various-datasets/tree/main/top100), \nwe find that ada can be several times faster than popular competitors (system: Apple MacBook 2022\nwith LLVM 14).\n\n\n```\n      ada ▏  188 ns/URL ███▏\nservo url ▏  664 ns/URL ███████████▎\n     CURL ▏ 1471 ns/URL █████████████████████████\n```\n\nAda has improved the performance of the popular JavaScript environment Node.js:\n\n> Since Node.js 18, a new URL parser dependency was added to Node.js — Ada. This addition bumped the Node.js performance when parsing URLs to a new level. Some results could reach up to an improvement of **400%**. ([State of Node.js Performance 2023](https://blog.rafaelgss.dev/state-of-nodejs-performance-2023))\n\n## Bindings of Ada\n\nWe provide clients for different programming languages through our C API.\n\n- [Rust](https://github.com/ada-url/rust): Rust bindings for Ada\n- [Go](https://github.com/ada-url/goada): Go bindings for Ada\n- [Python](https://github.com/ada-url/python): Python bindings for Ada\n\n## Usage\n\nAda supports two types of URL instances, `ada::url` and `ada::url_aggregator`. The usage is\nthe same in either case: we have an parsing function template `ada::parse` which can return\neither a result of type `ada::result<ada::url>` or of type `ada::result<ada::url_aggregator>`\ndepending on your needs. The `ada::url_aggregator` class is smaller and it is backed by a precomputed\nserialized URL string. The `ada::url` class is made of several separate strings for the various\ncomponents (path, host, and so forth).\n\n### Parsing & Validation\n\n- Parse and validate a URL from an ASCII or UTF-8 string\n\n```cpp\nada::result<ada::url_aggregator> url = ada::parse<ada::url_aggregator>(\"https://www.google.com\");\nif (url) { /* URL is valid */ }\n```\n\nAfter calling 'parse', you *must* check that the result is valid before\naccessing it when you are not sure that it will succeed. The following\ncode is unsafe:\n\n```cpp\nada::result<ada::url_aggregator> url = ada::parse<ada::url_aggregator>(\"some bad url\");\nurl->get_href();\n```\n\nYou should do...\n\n```cpp\nada::result<ada::url_aggregator> url = ada::parse<ada::url_aggregator>(\"some bad url\");\nif(url) {\n  // next line is now safe:\n  url->get_href();\n} else {\n  // report a parsing failure\n}\n```\n\nFor simplicity, in the examples below, we skip the check because\nwe know that parsing succeeds.\n\n### Examples\n\n- Get/Update credentials\n\n```cpp\nada::result<ada::url_aggregator> url = ada::parse<ada::url_aggregator>(\"https://www.google.com\");\nurl->set_username(\"username\");\nurl->set_password(\"password\");\n// ada->get_href() will return \"https://username:password@www.google.com/\"\n```\n\n- Get/Update Protocol\n\n```cpp\nada::result<ada::url_aggregator> url = ada::parse<ada::url_aggregator>(\"https://www.google.com\");\nurl->set_protocol(\"wss\");\n// url->get_protocol() will return \"wss:\"\n// url->get_href() will return \"wss://www.google.com/\"\n```\n\n- Get/Update host\n\n```cpp\nada::result<ada::url_aggregator> url = ada::parse<ada::url_aggregator>(\"https://www.google.com\");\nurl->set_host(\"github.com\");\n// url->get_host() will return \"github.com\"\n// you can use `url.set_hostname` depending on your usage.\n```\n\n- Get/Update port\n\n```cpp\nada::result<ada::url_aggregator> url = ada::parse<ada::url_aggregator>(\"https://www.google.com\");\nurl->set_port(\"8080\");\n// url->get_port() will return \"8080\"\n```\n\n- Get/Update pathname\n\n```cpp\nada::result<ada::url_aggregator> url = ada::parse<ada::url_aggregator>(\"https://www.google.com\");\nurl->set_pathname(\"/my-super-long-path\")\n// url->get_pathname() will return \"/my-super-long-path\"\n```\n\n- Get/Update search/query\n\n```cpp\nada::result<ada::url_aggregator> url = ada::parse<ada::url_aggregator>(\"https://www.google.com\");\nurl->set_search(\"target=self\");\n// url->get_search() will return \"?target=self\"\n```\n\n- Get/Update hash/fragment\n\n```cpp\nada::result<ada::url_aggregator> url = ada::parse<ada::url_aggregator>(\"https://www.google.com\");\nurl->set_hash(\"is-this-the-real-life\");\n// url->get_hash() will return \"#is-this-the-real-life\"\n```\nFor more information about command-line options, please refer to the [CLI documentation](docs/cli.md).\n### C wrapper\n\nSee the file `include/ada_c.h` for our C interface. We expect ASCII or UTF-8 strings.\n\n```C\n#include \"ada_c.h\"\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nstatic void ada_print(ada_string string) {\n  printf(\"%.*s\\n\", (int)string.length, string.data);\n}\n\nint main(int c, char *arg[] ) {\n  ada_url url = ada_parse(\"https://username:password@www.google.com:8080/\"\n      \"pathname?query=true#hash-exists\");\n  if(!ada_is_valid(url)) { puts(\"failure\"); return EXIT_FAILURE; }\n  ada_print(ada_get_href(url)); // prints https://username:password@host:8080/pathname?query=true#hash-exists\n  ada_print(ada_get_protocol(url)); // prints https:\n  ada_print(ada_get_username(url)); // prints username\n  ada_set_href(url, \"https://www.yagiz.co\");\n  if(!ada_is_valid(url)) { puts(\"failure\"); return EXIT_FAILURE; }\n  ada_set_hash(url, \"new-hash\");\n  ada_set_hostname(url, \"new-host\");\n  ada_set_host(url, \"changed-host:9090\");\n  ada_set_pathname(url, \"new-pathname\");\n  ada_set_search(url, \"new-search\");\n  ada_set_protocol(url, \"wss\");\n  ada_print(ada_get_href(url)); // will print wss://changed-host:9090/new-pathname?new-search#new-hash\n  ada_free(url);\n  return EXIT_SUCCESS;\n}\n```\n\nWhen linking against the ada library from C++, be minding that ada requires access to the standard\nC++ library. E.g., you may link with the C++ compiler.\n\nE.g., if you grab our single-header C++ files (`ada.cpp` and `ada.h`), as well as the C header (`ada_c.h`),\nyou can often compile a C program (`demo.c`) as follows under Linux/macOS systems:\n\n```\nc++ -c ada.cpp -std=c++17\ncc -c demo.c\nc++ demo.o ada.o -o cdemo\n./cdemo\n```\n\n### CMake dependency\n\nSee the file `tests/installation/CMakeLists.txt` for an example of how you might use ada from your own\nCMake project, after having installed ada on your system.\n\n## Installation\n\n### Homebrew\n\nAda is available through [Homebrew](https://formulae.brew.sh/formula/ada-url#default).\nYou can install Ada using `brew install ada-url`.\n\n## Contributing\n\n### Building\n\nAda uses cmake as a build system. It's recommended you to run the following commands to build it locally.\n\n- **Build**: `cmake -B build && cmake --build build`\n- **Test**: `ctest --output-on-failure --test-dir build`\n\nWindows users need additional flags to specify the build configuration, e.g. `--config Release`.\n\nThe project can also be built via docker using default docker file of repository with following commands.\n\n`docker build -t ada-builder . && docker run --rm -it -v ${PWD}:/repo ada-builder`\n\n### Amalgamation\n\nYou may amalgamate all source files into only two files (`ada.h` and `ada.cpp`) by typing executing the Python\n3 script `singleheader/amalgamate.py`. By default, the files are created in the `singleheader` directory.\n\n### License\n\nThis code is made available under the Apache License 2.0 as well as the MIT license. \n\nOur tests include third-party code and data. The benchmarking code includes third-party code: it is provided for research purposes only and not part of the library."
}
