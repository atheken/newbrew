{
  "name": "s2n",
  "full_name": "s2n",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Implementation of the TLS/SSL protocols",
  "license": "Apache-2.0",
  "homepage": "https://github.com/aws/s2n-tls",
  "versions": {
    "stable": "1.3.48",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/aws/s2n-tls/archive/v1.3.48.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "26ab869394c6886b64ff57a0974934e51ed9faa963b66149ba90a60adf4651ac"
    },
    "head": {
      "url": "https://github.com/aws/s2n-tls.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/s2n/blobs/sha256:be157fd33cbe025017d5c45d26bdb3512ee5e39c3c7c722be062b6e8747ebacd",
          "sha256": "be157fd33cbe025017d5c45d26bdb3512ee5e39c3c7c722be062b6e8747ebacd"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/s2n/blobs/sha256:d523342dc1227ed6048c2911f75d67f785c59b4c92255ace693cef327dedefad",
          "sha256": "d523342dc1227ed6048c2911f75d67f785c59b4c92255ace693cef327dedefad"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/s2n/blobs/sha256:234333b5e8312188c7e33ead94b4e818cb6ef13781799b3a4d066bd429b5c67c",
          "sha256": "234333b5e8312188c7e33ead94b4e818cb6ef13781799b3a4d066bd429b5c67c"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/s2n/blobs/sha256:9fad7778e17e9c8bb49f8a62ea7e1ad263bb210ef3489dc8415d9ab22e61b33e",
          "sha256": "9fad7778e17e9c8bb49f8a62ea7e1ad263bb210ef3489dc8415d9ab22e61b33e"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/s2n/blobs/sha256:5645ef20beb819c9e8d90f22203c5b6b25a64268be087709563cae6422734e3a",
          "sha256": "5645ef20beb819c9e8d90f22203c5b6b25a64268be087709563cae6422734e3a"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/s2n/blobs/sha256:519832617eb08e14a0b6ec44984ea5bad5ce0cce6764a9f568897a0a50a10334",
          "sha256": "519832617eb08e14a0b6ec44984ea5bad5ce0cce6764a9f568897a0a50a10334"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/s2n/blobs/sha256:f769d41b23775bfcf4ce0b55b042b7469fa3ba97dbc08ec6a86eae221cbf1185",
          "sha256": "f769d41b23775bfcf4ce0b55b042b7469fa3ba97dbc08ec6a86eae221cbf1185"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [
    "openssl@3"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/s2n.rb",
  "ruby_source_checksum": {
    "sha256": "3a0cbbdc51ed20ad72c138244492129932af47879473b793a237c29bff83b3b1"
  },
  "date_added": "2020-06-26T09:50:18+00:00",
  "readme": "<img src=\"docs/images/s2n_logo_github.png\" alt=\"s2n\">\n\ns2n-tls is a C99 implementation of the TLS/SSL protocols that is designed to be simple, small, fast, and with security as a priority. It is released and licensed under the Apache License 2.0.\n\n> s2n-tls is short for \"signal to noise\" and is a nod to the almost magical act of encryption â€” disguising meaningful signals, like your critical data, as seemingly random noise.\n>\n> -- [s2n-tls announcement](https://aws.amazon.com/blogs/security/introducing-s2n-a-new-open-source-tls-implementation/)\n\n[![Build Status](https://codebuild.us-west-2.amazonaws.com/badges?uuid=eyJlbmNyeXB0ZWREYXRhIjoiMndlTzJNbHVxWEo3Nm82alp4eGdGNm4rTWdxZDVYU2VTbitIR0ZLbHVtcFFGOW5majk5QnhqaUp3ZEkydG1ueWg0NGlhRE43a1ZnUzZaQTVnSm91TzFFPSIsIml2UGFyYW1ldGVyU3BlYyI6IlJLbW42NENlYXhJNy80QnYiLCJtYXRlcmlhbFNldFNlcmlhbCI6MX0%3D&branch=main)](https://github.com/aws/s2n-tls/)\n[![Apache 2 License](https://img.shields.io/github/license/aws/s2n-tls.svg)](http://aws.amazon.com/apache-2-0/)\n[![C99](https://img.shields.io/badge/language-C99-blue.svg)](http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf)\n[![Github forks](https://img.shields.io/github/forks/aws/s2n-tls.svg)](https://github.com/aws/s2n-tls/network)\n[![Github stars](https://img.shields.io/github/stars/aws/s2n-tls.svg)](https://github.com/aws/s2n-tls/stargazers)\n[![Join the chat at https://gitter.im/awslabs/s2n](https://badges.gitter.im/awslabs/s2n.svg)](https://gitter.im/awslabs/s2n?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n## Quickstart for Ubuntu\n\n```bash\n# clone s2n-tls\ngit clone https://github.com/aws/s2n-tls.git\ncd s2n-tls\n\n# install build dependencies\nsudo apt update\nsudo apt install cmake\n\n# install a libcrypto\nsudo apt install libssl-dev\n\n# build s2n-tls\ncmake . -Bbuild \\\n    -DCMAKE_BUILD_TYPE=Release \\\n    -DCMAKE_INSTALL_PREFIX=./s2n-tls-install\ncmake --build build -j $(nproc)\nCTEST_PARALLEL_LEVEL=$(nproc) ctest --test-dir build\ncmake --install build\n```\n\nSee the [s2n-tls build documentation](docs/BUILD.md) for further guidance on building s2n-tls for your platform.\n\n## Have a Question?\nIf you have any questions about Submitting PR's, Opening Issues, s2n-tls API usage, or something similar, we have a public chatroom available here to answer your questions: https://gitter.im/awslabs/s2n\n\nOtherwise, if you think you might have found a security impacting issue, please instead follow [our Security Notification Process.](#security-issue-notifications)\n\n## Documentation\n\ns2n-tls uses [Doxygen](https://doxygen.nl/index.html) to document its public API. The latest s2n-tls documentation can be found on [GitHub pages](https://aws.github.io/s2n-tls/doxygen/). The [Usage Guide](docs/USAGE-GUIDE.md) explains how different TLS features can be configured and used.\n\nDocumentation for older versions or branches of s2n-tls can be generated locally. To generate the documentation, install doxygen and run `doxygen docs/doxygen/Doxyfile`. The doxygen documentation can now be found at `docs/doxygen/output/html/index.html`.\n\nDoxygen installation instructions are available at the [Doxygen](https://doxygen.nl/download.html) webpage.\n\n## Using s2n-tls\n\nThe s2n-tls I/O APIs are designed to be intuitive to developers familiar with the widely-used POSIX I/O APIs, and s2n-tls supports blocking, non-blocking, and full-duplex I/O. Additionally there are no locks or mutexes within s2n-tls.\n\n```c\n/* Create a server mode connection handle */\nstruct s2n_connection *conn = s2n_connection_new(S2N_SERVER);\nif (conn == NULL) {\n    ... error ...\n}\n\n/* Associate a connection with a file descriptor */\nif (s2n_connection_set_fd(conn, fd) < 0) {\n    ... error ...\n}\n\n/* Negotiate the TLS handshake */\ns2n_blocked_status blocked;\nif (s2n_negotiate(conn, &blocked) < 0) {\n    ... error ...\n}\n\n/* Write data to the connection */\nint bytes_written;\nbytes_written = s2n_send(conn, \"Hello World\", sizeof(\"Hello World\"), &blocked);\n```\n\nFor details on building the s2n-tls library and how to use s2n-tls in an application you are developing, see the [usage guide](https://github.com/aws/s2n-tls/blob/main/docs/USAGE-GUIDE.md).\n\n## s2n-tls features\n\ns2n-tls implements SSLv3, TLS1.0, TLS1.1, TLS1.2, and TLS1.3. For encryption, s2n-tls supports 128-bit and 256-bit AES in the CBC and GCM modes, ChaCha20, 3DES, and RC4. For forward secrecy, s2n-tls supports both DHE and ECDHE. s2n-tls also supports the Server Name Indicator (SNI), Application-Layer Protocol Negotiation (ALPN), and Online Certificate Status Protocol (OCSP) TLS extensions. SSLv3, RC4, 3DES, and DHE are each disabled by default for security reasons.\n\nAs it can be difficult to keep track of which encryption algorithms and protocols are best to use, s2n-tls features a simple API to use the latest \"default\" set of preferences. If you prefer to remain on a specific version for backwards compatibility, that is also supported.\n\n```c\n/* Use the latest s2n-tls \"default\" set of ciphersuite and protocol preferences */\ns2n_config_set_cipher_preferences(config, \"default\");\n\n/* Use a specific set of preferences, update when you're ready */\ns2n_config_set_cipher_preferences(config, \"20150306\")\n```\n\n## s2n-tls safety mechanisms\n\nInternally s2n-tls takes a systematic approach to data protection and includes several mechanisms designed to improve safety.\n\n##### Small and auditable code base\nIgnoring tests, blank lines and comments, s2n-tls is about 6,000 lines of code. s2n's code is also structured and written with a focus on reviewability. All s2n-tls code is subject to code review, and we plan to complete security evaluations of s2n-tls on an annual basis.\n\nTo date there have been two external code-level reviews of s2n-tls, including one by a commercial security vendor. s2n-tls has also been shared with some trusted members of the broader cryptography, security, and Open Source communities. Any issues discovered are always recorded in the s2n-tls issue tracker.\n\n##### Static analysis, fuzz-testing and penetration testing\n\nIn addition to code reviews, s2n-tls is subject to regular static analysis, fuzz-testing, and penetration testing. Several penetration tests have occurred, including two by commercial vendors.\n\n##### Unit tests and end-to-end testing\n\ns2n-tls includes positive and negative unit tests and end-to-end test cases.\n\n##### Erase on read\ns2n-tls encrypts or erases plaintext data as quickly as possible. For example, decrypted data buffers are erased as they are read by the application.\n\n##### Built-in memory protection\ns2n-tls uses operating system features to protect data from being swapped to disk or appearing in core dumps.\n\n##### Minimalist feature adoption\ns2n-tls avoids implementing rarely used options and extensions, as well as features with a history of triggering protocol-level vulnerabilities. For example there is no support for session renegotiation or DTLS.\n\n##### Compartmentalized random number generation\nThe security of TLS and its associated encryption algorithms depends upon secure random number generation. s2n-tls provides every thread with two separate random number generators. One for \"public\" randomly generated data that may appear in the clear, and one for \"private\" data that should remain secret. This approach lessens the risk of potential predictability weaknesses in random number generation algorithms from leaking information across contexts.\n\n##### Modularized encryption\ns2n-tls has been structured so that different encryption libraries may be used. Today s2n-tls supports OpenSSL (versions 1.0.2, 1.1.1 and 3.0.x), LibreSSL, BoringSSL, AWS-LC, and the Apple Common Crypto framework to perform the underlying cryptographic operations.\n\n##### Timing blinding\ns2n-tls includes structured support for blinding time-based side-channels that may leak sensitive data. For example, if s2n-tls fails to parse a TLS record or handshake message, s2n-tls will add a randomized delay of between 10 and 30 seconds, granular to nanoseconds, before responding. This raises the complexity of real-world timing side-channel attacks by a factor of at least tens of trillions.\n\n##### Table based state-machines\ns2n-tls uses simple tables to drive the TLS/SSL state machines, making it difficult for invalid out-of-order states to arise.\n\n##### C safety\ns2n-tls is written in C, but makes light use of standard C library functions and wraps all memory handling, string handling, and serialization in systematic boundary-enforcing checks.\n\n## Security issue notifications\nIf you discover a potential security issue in s2n-tls we ask that you notify\nAWS Security via our [vulnerability reporting page](http://aws.amazon.com/security/vulnerability-reporting/). Please do **not** create a public github issue.\n\nIf you package or distribute s2n-tls, or use s2n-tls as part of a large multi-user service, you may be eligible for pre-notification of future s2n-tls releases. Please contact s2n-pre-notification@amazon.com.\n\n## Contributing to s2n-tls\nIf you are interested in contributing to s2n-tls, please see our [development guide](https://github.com/aws/s2n-tls/blob/main/docs/DEVELOPMENT-GUIDE.md).\n\n## Language Bindings for s2n-tls\nSee our [language bindings list](https://github.com/aws/s2n-tls/blob/main/docs/BINDINGS.md) for language bindings for s2n-tls that we're aware of."
}
