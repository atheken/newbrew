{
  "name": "liblerc",
  "full_name": "liblerc",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Ersi LERC library (Limited Error Raster Compression)",
  "license": "Apache-2.0",
  "homepage": "https://github.com/Esri/lerc",
  "versions": {
    "stable": "4.0.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/Esri/lerc/archive/refs/tags/v4.0.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "91431c2b16d0e3de6cbaea188603359f87caed08259a645fd5a3805784ee30a0"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/liblerc/blobs/sha256:bda5945718a4ae8c186d1c0574c70667b95b6e2cf1cd95060fc3a7b4c78a63cb",
          "sha256": "bda5945718a4ae8c186d1c0574c70667b95b6e2cf1cd95060fc3a7b4c78a63cb"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/liblerc/blobs/sha256:ac9a9d7025ab1fd8e49d79518ce278bd9c3a08a782478a6eebf793c663e9673d",
          "sha256": "ac9a9d7025ab1fd8e49d79518ce278bd9c3a08a782478a6eebf793c663e9673d"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/liblerc/blobs/sha256:b498cb1e4a46236e877b8497c293f0be9d8c47ee4357b5f12dfd94a22fe5f29b",
          "sha256": "b498cb1e4a46236e877b8497c293f0be9d8c47ee4357b5f12dfd94a22fe5f29b"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/liblerc/blobs/sha256:436d533a3de8a6ec1f4a099d9ee816c9a1b01cfcc1b2b933b8f5a1d4e10bcd51",
          "sha256": "436d533a3de8a6ec1f4a099d9ee816c9a1b01cfcc1b2b933b8f5a1d4e10bcd51"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/liblerc/blobs/sha256:222a3e3fad0f4528161894f262458ec850ce1e8525475b7c3b4e0158f0d3c944",
          "sha256": "222a3e3fad0f4528161894f262458ec850ce1e8525475b7c3b4e0158f0d3c944"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/liblerc/blobs/sha256:f3d0aa49310e3fcc3b88c07f8609dc1988990b9f270e3d002947a9a237ca2c5b",
          "sha256": "f3d0aa49310e3fcc3b88c07f8609dc1988990b9f270e3d002947a9a237ca2c5b"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/liblerc/blobs/sha256:5d409346584f40f2fd9aafa46860d7a5668b9c5f42b3de930868cf65daf556d7",
          "sha256": "5d409346584f40f2fd9aafa46860d7a5668b9c5f42b3de930868cf65daf556d7"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/liblerc.rb",
  "ruby_source_checksum": {
    "sha256": "a68bc4fe0be505c12dc303adde9d07250afb9b9f43fabc0709eab26718fde2ea"
  },
  "date_added": "2023-01-22T23:11:42+00:00",
  "readme": "# LERC - Limited Error Raster Compression\r\n\r\n## What is LERC?\r\n\r\nLERC is an open-source image or raster format which supports rapid encoding and decoding for any pixel type (not just RGB or Byte). Users set the maximum compression error per pixel while encoding, so the precision of the original input image is preserved (within user defined error bounds).\r\n\r\nThis repository contains a C++ library for both encoding and decoding images. You can also do this directly from Python. And we have decoders for JavaScript and C#.\r\n\r\n## The LERC C API\r\n\r\nFunction | Description\r\n--- | ---\r\n`uint lerc_computeCompressedSize(...)` | Computes the buffer size that needs to be allocated so the image can be Lerc compressed into that buffer. The size is accurate to the byte. This function is optional. It is faster than `lerc_encode(...)`. It can also be called to decide whether an image or image tile should be encoded by Lerc or another method.\r\n`uint lerc_encode(...)` | Compresses a given image into a pre-allocated buffer. If that buffer is too small, the function fails with the corresponding error code. The function also returns the number of bytes written.\r\n`uint lerc_getBlobInfo(...)` | Looks into a given Lerc byte blob and returns an array with all the header info. From this, the image to be decoded can be allocated and constructed. This function is optional. You don't need to call it if you already know the image properties such as tile size and data type.\r\n`uint lerc_getDataRanges(...)` | Looks into a given Lerc byte blob and returns 2 double arrays with the minimum and maximum values per band and depth. This function is optional. It allows fast access to the data ranges without having to decode the pixels.\r\n`uint lerc_decode(...)` | Uncompresses a given Lerc byte blob into a pre-allocated image. If the data found in the Lerc byte blob does not fit the specified image properties, the function fails with the corresponding error code.\r\n`uint lerc_decodeToDouble(...)` | Uncompresses a given Lerc byte blob into a pre-allocated image of type double independent of the compressed data type. This function was added mainly to be called from other languages such as Python and C#.\r\n\r\nTo support the case that not all image pixels are valid, a mask image can be passed. It has one byte per pixel, 1 for valid, 0 for invalid.\r\n\r\nSee the sample program `src/LercTest/main.cpp` which demonstrates how the above functions are called and used. Also see the two header files in the `src/LercLib/include/` folder and the comments in there.\r\n\r\nAbout multiple bands, or multiple values per pixel. This has changed with Lerc version 2.4. Before, you could either store each band into its own Lerc byte blob which allowed you to access / decode each band individually. Lerc also allowed to stack bands together into one single Lerc byte blob. This could be useful if the bands are always used together anyway. Now, since Lerc version 2.4, you can additionally store multiple values per pixel interleaved, meaning an array of values for pixel 1, next array of values for pixel 2, and so forth. We have added a new parameter \"nDepth\" for this number of values per pixel.\r\n\r\nWhile the above can be used as an \"interleave flag\" to store multiple raster bands as a 3D array as either [nBands, nRows, nCols] for band interleaved or as [nRows, nCols, nDepth] for pixel interleaved, it also allows to do both at the same time and store a 4D array as [nBands, nRows, nCols, nDepth]. \r\n\r\nNote that the valid / invalid pixel byte mask is not 4D but limited to [nBands, nRows, nCols]. This mask is per pixel per band. For nDepth > 1 or an array of values per pixel, up to Lerc version 3.0, Lerc assumed all values in that array at that pixel are either valid or invalid. If the values in the innermost array per pixel can be partially valid and invalid, use a predefined noData value or NaN. \r\n\r\nTo better support this special \"mixed\" case, we have added new Lerc API functions *_4D() in Lerc version 4.0, see [Lerc_c_api.h](https://github.com/Esri/lerc/blob/master/src/LercLib/include/Lerc_c_api.h). These functions allow to pass one noData value per band to the encode_4D() function and can receive it back in the decode_4D() function. This way such data can be compressed with maxZError > 0 or lossy, despite the presence of noData values in the data. Note that Lerc will convert noData values to 0 bytes in the valid / invalid byte mask whenever possible. This also allows now to pass raster data with noData values to the encoder without first creating the valid / invalid byte mask. NoData values can be passed both ways, as noData or as byte mask. Note that on decode Lerc only returns a noData value for the mixed case of valid and invalid values at the same pixel (which can only happen for nDepth > 1). The valid / invalid byte mask remains the preferred way to represent void or noData values. \r\n\r\nRemark about NaN. As Lerc supports both integer and floating point data types, and there is no NaN for integer types, Lerc filters out NaN values and replaces them. Preferred it pushes NaN's into the valid / invalid byte mask. For the mixed case, it replaces NaN by the passed noData value. If there is no noData value, encode will fail. Lerc decode won't return any NaN's. \r\n\r\n## When to use\r\n\r\nIn image or raster compression, there are two different options:\r\n\r\n- compress an image as much as possible but so it still looks ok\r\n  (jpeg and relatives). The max coding error per pixel can be large.\r\n\r\n- prioritize control over the max coding error per pixel (elevation,\r\n  scientific data, medical image data, ...).\r\n\r\nIn the second case, data is often compressed using lossless methods, such as LZW, gzip, and the like. The compression ratios achieved are often low. On top the encoding is often slow and time consuming.\r\n\r\nLerc allows you to set the max coding error per pixel allowed, called `\"MaxZError\"`. You can specify any number from `0` (lossless) to a number so large that the decoded image may come out flat.\r\n\r\nIn a nutshell, if jpeg is good enough for your images, use jpeg. If not, if you would use png instead, or gzip, then you may want to try out Lerc.\r\n\r\n## How to use\r\n\r\nLerc can be run anywhere without external dependencies. This project includes test samples of how to use LERC directly, currently for C++, Python, JavaScript, and C#. We have added a few small data samples under `testData/`. There is also a precompiled Windows dll and a Linux .so file under `bin/`.\r\n\r\n### How to use without compiling LERC\r\n\r\nCheck out the Lerc decoders and encoders in `OtherLanguages/`. You may need to adjust the paths to input or output data and the dll or .so file. Other than that they should just work.\r\n\r\n### Other download sites\r\n\r\n- [Lerc for Python / Conda](https://anaconda.org/Esri/lerc)\r\n- [Lerc for JavaScript / npm](https://www.npmjs.com/package/lerc)\r\n- [Lerc conda-forge install](https://anaconda.org/conda-forge/lerc)\r\n\r\n### How to compile LERC and the C++ test program\r\n\r\nFor building the Lerc library on any platform using CMake, use `CMakeLists.txt`. \r\nFor the most common platforms you can find alternative project files under `build/`. \r\n\r\n#### Windows\r\n\r\n- Open `build/Windows/MS_VS2022/Lerc.sln` with Microsoft Visual Studio. \r\n- Build and run.\r\n\r\n#### Linux\r\n\r\n- Open `build/Linux/CodeBlocks/Lerc/Lerc_so.cbp` using the free Code::Blocks IDE for Linux.\r\n- Build it. Should create `libLerc_so.so`.\r\n- Open `build/Linux/CodeBlocks/Test/Test.cbp`.\r\n- Build and run.\r\n\r\n#### MacOS\r\n\r\n- Open `build/MacOS/Lerc64/Lerc64.xcodeproj` with Xcode.\r\n- Build to create dynamic library.\r\n\r\nLERC can also be used as a compression mode for the GDAL image formats GeoTIFF (since GDAL 2.4) and MRF (since GDAL 2.1) via [GDAL](http://gdal.org).\r\n\r\n## LERC Properties\r\n\r\n- works on any common data type, not just 8 bit:\r\n  char, byte, short, ushort, int, uint, float, double.\r\n\r\n- works with any given MaxZError or max coding error per pixel.\r\n\r\n- can work with a byte mask that specifies which pixels are valid\r\n  and which ones are not.\r\n\r\n- is very fast: encoding time is about 20-30 ms per MegaPixel per band, decoding time is about 5 ms per MegaPixel per band.\r\n\r\n- compression is better than most other compression methods for\r\n  larger bitdepth data (int types larger than 8 bit, float, double).\r\n\r\n- for 8 bit data lossless compression, PNG can be better, but is\r\n  much slower.\r\n\r\n- in general for lossy compression with MaxZError > 0, the larger\r\n  the error allowed, the stronger the compression.\r\n  Compression factors larger than 100x have been reported.\r\n\r\n- this Lerc package can read all (legacy) codec versions of Lerc, such as Lerc1, Lerc2 v1 to v5, and the current Lerc2 v6. It always writes the latest stable version.\r\n\r\nThe main principle of Lerc and history can be found in [doc/MORE.md](doc/MORE.md)\r\n\r\n## Benchmarks\r\n\r\nSome benchmarks are in\r\n[doc/LercBenchmarks_Feb_2016.pdf](doc/LercBenchmarks_Feb_2016.pdf)\r\n\r\n## Bugs?\r\n\r\nThe codecs Lerc2 and Lerc1 have been in use for years, bugs in those low level modules are very unlikely. All software updates are tested in Esri software for months before they are uploaded to this repo. \r\n\r\n## Licensing\r\n\r\nCopyright 2015-2022 Esri\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\nhttp://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and limitations under the License.\r\n\r\nA copy of the license is available in the repository's [LICENSE](./LICENSE) file.\r\n\r"
}
