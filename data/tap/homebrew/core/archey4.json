{
  "name": "archey4",
  "full_name": "archey4",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Simple system information tool written in Python",
  "license": "GPL-3.0-or-later",
  "homepage": "https://github.com/HorlogeSkynet/archey4",
  "versions": {
    "stable": "4.14.1.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://files.pythonhosted.org/packages/f7/af/f674dccea083f60f39649de5104bc5e2120d9540b3e136578510407d16a7/archey4-4.14.1.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "cb321e67154c730726c3757672a46c3af9b2ffe1af7f295830f9c061fd7a69ea"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/archey4/blobs/sha256:8313a95885e3e88849580727c3b8c9077373ff48d462eef1d5571b3347708883",
          "sha256": "8313a95885e3e88849580727c3b8c9077373ff48d462eef1d5571b3347708883"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/archey4/blobs/sha256:ae692f19361034c48820cbee73476185bba034c6418c816e34a02420e9eb3746",
          "sha256": "ae692f19361034c48820cbee73476185bba034c6418c816e34a02420e9eb3746"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/archey4/blobs/sha256:8c815b2741e778f9cca0d9ba6e08bf4793b2f938b82d15f47e1341c7a5c38c7a",
          "sha256": "8c815b2741e778f9cca0d9ba6e08bf4793b2f938b82d15f47e1341c7a5c38c7a"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/archey4/blobs/sha256:5eed1e7424385b25d06095d70efdef76282c81349ca554daea2fb5e6cac96a4d",
          "sha256": "5eed1e7424385b25d06095d70efdef76282c81349ca554daea2fb5e6cac96a4d"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/archey4/blobs/sha256:7bd96471606b7a7efafd4b55876db1fd9e326b2e435a3d1294d0d4414ddcdac8",
          "sha256": "7bd96471606b7a7efafd4b55876db1fd9e326b2e435a3d1294d0d4414ddcdac8"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/archey4/blobs/sha256:81278aa510c3a73f8f0359c4f0d1367b01ad4f235bc17421b5ccf4004d126535",
          "sha256": "81278aa510c3a73f8f0359c4f0d1367b01ad4f235bc17421b5ccf4004d126535"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/archey4/blobs/sha256:e3088805d286b345d9845cc40b6ee1646fd7f74af21647583b68b06e3342cb2f",
          "sha256": "e3088805d286b345d9845cc40b6ee1646fd7f74af21647583b68b06e3342cb2f"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "python@3.11"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [
    "archey"
  ],
  "conflicts_with_reasons": [
    "both install `archey` binaries"
  ],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "2706c66e8def3eeba4d9bf1adf66221c8ad70701",
  "ruby_source_path": "Formula/archey4.rb",
  "ruby_source_checksum": {
    "sha256": "35f157597b91daa6d20f54563b05e7ee240635b106d97fb451b7f5a71745c98b"
  },
  "date_added": "2021-04-19T11:22:33+00:00",
  "readme": "# Archey 4\n\n> Archey is a simple system information tool written in Python\n\n<p align=\"center\">\n\t<img src=\".github/archey4.png\" alt=\"Archey logo\" title=\"CC-BY Brume Archey logo\" longdesc=\"https://brume.ink/\">\n\t<br />\n\t<br />\n\t<!-- PYPI (supported Python versions) -->\n\t<a href=\"https://pypi.org/project/archey4/\"><img src=\"https://img.shields.io/pypi/pyversions/archey4.svg?style=for-the-badge\"></a>\n\t<br />\n\t<!-- GITHUB (latest release) -->\n\t<a href=\"https://github.com/HorlogeSkynet/archey4/releases/latest\"><img src=\"https://img.shields.io/github/release/HorlogeSkynet/archey4.svg?style=for-the-badge&label=github\"></a>\n\t<!-- PYPI (latest version) -->\n\t<a href=\"https://pypi.org/project/archey4/\"><img src=\"https://img.shields.io/pypi/v/archey4.svg?style=for-the-badge\"></a>\n\t<!-- AUR (latest version) -->\n\t<a href=\"https://aur.archlinux.org/packages/archey4/\"><img src=\"https://img.shields.io/aur/version/archey4.svg?style=for-the-badge\"></a>\n\t<!-- HOMEBREW (latest version) -->\n\t<a href=\"https://formulae.brew.sh/formula/archey4\"><img src=\"https://img.shields.io/homebrew/v/archey4.svg?style=for-the-badge\"></a>\n\t<br />\n\t<!-- GITHUB (downloads) -->\n\t<a href=\"https://github.com/HorlogeSkynet/archey4/releases/latest\"><img src=\"https://img.shields.io/github/downloads/HorlogeSkynet/archey4/total?style=for-the-badge&label=downloads\"></a>\n\t<!-- PYPI (downloads) -->\n\t<a href=\"https://pypi.org/project/archey4/\"><img src=\"https://img.shields.io/pypi/dm/archey4?style=for-the-badge\"></a>\n\t<!-- AUR (votes) -->\n\t<a href=\"https://aur.archlinux.org/packages/archey4/\"><img src=\"https://img.shields.io/aur/votes/archey4.svg?style=for-the-badge\"></a>\n\t<!-- HOMEBREW (downloads) -->\n\t<a href=\"https://formulae.brew.sh/formula/archey4\"><img src=\"https://img.shields.io/homebrew/installs/dm/archey4.svg?style=for-the-badge\"></a>\n</p>\n\n## Why (again) a f\\*cking new Archey fork ?\n\nThe answer is [here](https://blog.samuel.domains/archey4).\n\n> Note : Since the 21st September of 2017, you may notice that this repository no longer has the official status of fork.  \n> Actually, the maintainer decided to separate it from the original one's \"network\" with the help of _GitHub_'s staff.  \n> Nevertheless, **this piece of software is still a fork of [djmelik's Archey project](https://github.com/djmelik/archey.git)**.\n\n## Features\n\n* Run as quickly as possible\n* Stay as light as possible\n* Keep entries ordered despite parallelism\n* Extensive local and public IP addresses detection\n* General temperature detection\n* JSON output\n* Screen capture (\"best effort\")\n* Custom entries\n\n## Supported platforms\n\n* BSD and derivatives\n* Darwin (macOS)\n* GNU/Linux distributions\n* WSL\n\n> Details [here](https://github.com/HorlogeSkynet/archey4/blob/master/archey/distributions.py#L17).\n\n## What does it look like ?\n\n<p align=\"center\"><img alt=\"Archey 4 complete preview\" src=\"https://blog.samuel.domains/img/blog/the-archey-project-what-i-ve-decided-to-do.png?v4.14.0.0\"></p>\n\n## Which packages do I need to run this project ?\n\n### Required packages\n\n* `python3` (>= 3.6)\n* `python3-distro` (`python-distro` on Arch Linux)\n* `python3-netifaces` (`python-netifaces` on Arch Linux)\n\n> PyPy is supported and may replace CPython.\n\n> Looking for Python 3.4 support ? Please refer to the latest v4.9 release.  \n> Looking for Python 3.5 support ? Please refer to the latest v4.10 release.\n\n### Highly recommended packages\n\n|     Environments      |             Packages              |                       Reasons                        |              Notes              |\n| :-------------------- | :-------------------------------- | :--------------------------------------------------- | :------------------------------ |\n| All                   | `procps` (maybe `procps-ng`)      | Many entries would not work as expected              | Would provide `ps`              |\n| All                   | `dnsutils` (maybe `bind-tools`)   | **WAN\\_IP** would be detected faster                 | Would provide `dig`             |\n| All                   | `lm-sensors` (maybe `lm_sensors`) | **Temperature** would be more accurate               | N/A                             |\n| macOS (Darwin)        | [`iStats`] or [`osx-cpu-temp`]    | **Temperature** wouldn't be detected without it      | N/A                             |\n| Graphical (desktop)   | `pciutils` or `pciconf`           | **GPU** wouldn't be detected without it              | Would provide `lspci`/`pciconf` |\n| Graphical (desktop)   | `wmctrl`                          | **WindowManager** would be more accurate             | N/A                             |\n| Virtual w/o `systemd` | `virt-what`                       | **Model** would contain details about the hypervisor | **root** privileges required    |\n\n## Installation\n\n### Install from package\n\nFirst, grab a package for your distribution from the latest release [here](https://github.com/HorlogeSkynet/archey4/releases/latest).  \nNow, it's time to use your favorite package manager. Some examples :\n\n* Arch-based distributions : `pacman -U ./archey4-4.X.Y.Z-R-any.pkg.tar.zst`\n* Debian-based distributions : `apt install ./archey4_4.X.Y.Z-R_all.deb`\n* RPM-based distributions : `dnf install ./archey4-4.X.Y.Z-R.py??.noarch.rpm`\n\nFurther information about packaging are available [here](https://github.com/HorlogeSkynet/archey4/wiki/Packaging).\n\n### Install from [PyPI](https://pypi.org/project/archey4/)\n\n```bash\npip3 install archey4\n```\n\n### Install from [AUR](https://aur.archlinux.org/packages/archey4/)\n\n```bash\nyay -S archey4\n```\n\n### Install from [Homebrew](https://formulae.brew.sh/formula/archey4)\n\n```bash\nbrew install archey4\n```\n\n### Install from [FreeBSD ports](https://cgit.freebsd.org/ports/tree/sysutils/archey4)\n\n```bash\npkg install archey4\n```\n\n### Install from source\n\n#### Step 1 : Fetch sources\n\n```bash\n# If you want the latest release :\nwget -qO archey4.tar.gz \"https://github.com/HorlogeSkynet/archey4/archive/v4.14.1.0.tar.gz\"\ntar xvzf archey4.tar.gz\ncd archey4-*/\n\n# If you want the latest revision :\ngit clone https://github.com/HorlogeSkynet/archey4.git\ncd archey4/\n```\n\n#### Step 2 : Installation\n\n```bash\n# If you have PIP installed on your system :\npip3 install .\n\n# But if you don't have PIP, no worries :\npython3 setup.py install\n```\n\n#### Step 3 (optional) : Configuration\n\n```bash\n# System-wide configuration file (privileges required) :\ninstall -D -m0644 config.json /etc/archey4/config.json\n\n# User-specific configuration file :\ninstall -D -m0644 config.json ~/.config/archey4/config.json\n```\n\n#### Step 4 (optional) : Standalone building\n\n> Some years ago, Archey was a simple and unique Python file.  \n> Project evolved, and now it's a Python package.  \n> Some procedures below walk you through several ways of building Archey as a standalone program.\n\n```bash\n# Using PEX (recommended) :\npip3 install pex\npex \\\n    -o dist/archey \\\n    -m archey \\\n    .\n\n# Since v4.10 logos are dynamically imported for performance purposes.\n# This means that we have to explicitly make Stickytape and PyInstaller include them.\n# Please **replace** `debian` identifier below by yours (multiple flags allowed).\n\n# Using Stickytape :\npip3 install stickytape\nstickytape \\\n    --copy-shebang \\\n    --add-python-path . \\\n    --output-file dist/archey \\\n    --add-python-module archey.logos.debian \\\n    archey/__main__.py\nchmod +x dist/archey\n\n# Using PyInstaller :\npip3 install pyinstaller\npyinstaller \\\n    --distpath dist \\\n    --specpath dist \\\n    --name archey \\\n    --onefile archey/__main__.py \\\n    --hidden-import archey.logos.debian \\\n    --log-level WARN\n```\n\nResulting program may now be installed system-wide (privileges required).\n\n```bash\n# Standalone execution.\n./dist/archey\n\n# System-wide install.\ninstall -D -m0755 dist/archey /usr/local/bin/archey\n```\n\n## Usage\n\n```bash\narchey --help\n```\n\nor if you only want to try this out (for instance, from source) :\n\n```bash\npython3 -m archey --help\n```\n\n## Configuration (optional)\n\nSince v4.3.0, Archey 4 **may** be \"tweaked\" a bit with external configuration.  \nYou can place a [`config.json`](config.json) file in these locations :\n\n1. `/etc/archey4/config.json` (system preferences)\n2. `~/.config/archey4/config.json` (user preferences)\n3. `./config.json` (local preferences)\n\n**If an option is defined in multiple places, it will be overridden according to the order above (local preferences > user preferences > system preferences).**\n\nAlternatively, you may specify your own configuration file with the `-c` command-line option.\n\nThe [example file](config.json) provided in this repository lists exhaustively the parameters you can set.  \nBelow stand further descriptions for each available (default) option :\n\n<!-- We use JavaScript syntax coloration below because JSON does not allow the usage of comments in it -->\n```javascript\n{\n\t// If set to `false`, configurations defined afterwards won't be loaded.\n\t// Developers running Archey from the original project may keep in there the original `config.json`,\n\t//   while having their own external configuration set elsewhere.\n\t\"allow_overriding\": true,\n\t// Set to `false` to disable multi-threaded loading of entries.\n\t\"parallel_loading\": true,\n\t// If set to `true`, any execution warning or error would be hidden.\n\t// Configuration parsing warnings **would** still be shown.\n\t\"suppress_warnings\": false,\n\t// Use this option to specify a custom color for entries (logo won't be affected).\n\t// Value should be a string suitable for inclusion in the ANSI/ECMA-48 escape code for setting graphical rendition\n\t//\n\t// For instance \"5;31;47\" would result in yellow text blinking on white background.\n\t// See <https://wiki.bash-hackers.org/scripting/terminalcodes> for more information.\n\t\"entries_color\": \"\",\n\t// Set this option to `false` to force Archey to use its own colors palettes.\n\t// `true` by default to honor os-release(5) `ANSI_COLOR` option.\n\t\"honor_ansi_color\": true,\n\t// Set this option to an alternative logo style identifier instead of the default one for your distro.\n\t// For example, \"retro\" would show the retro styled Apple logo on Darwin platforms.\n\t// Note that the `--logo-style` argument overrides this setting.\n\t\"logo_style\": \"\",\n\t// Entries list.\n\t// Add a `disabled` option set to `true` to temporary hide one.\n\t// You may change entry displayed name by adding a `name` option.\n\t// You may re-order the entries list as you wish.\n\t\"entries\": [\n\t\t{ \"type\": \"User\" },\n\t\t{ \"type\": \"Hostname\" },\n\t\t{ \"type\": \"Model\" },\n\t\t{ \"type\": \"Distro\" },\n\t\t{\n\t\t\t\"type\": \"Kernel\",\n\t\t\t// Set to `true` to enable kernel release check against <www.kernel.org>.\n\t\t\t// /!\\ `DO_NOT_TRACK` environment variable may affect this feature behavior ! /!\\\n\t\t\t\"check_version\": false\n\t\t},\n\t\t{ \"type\": \"Uptime\" },\n\t\t{\n\t\t\t\"type\": \"LoadAverage\",\n\t\t\t// Number of decimal places to display for the load average.\n\t\t\t\"decimal_places\": 2,\n\t\t\t// Some thresholds you can adjust to customize warning/danger colors.\n\t\t\t\"warning_threshold\": 1.0,\n\t\t\t\"danger_threshold\": 2.0\n\t\t},\n\t\t{ \"type\": \"Processes\" },\n\t\t{ \"type\": \"WindowManager\" },\n\t\t{ \"type\": \"DesktopEnvironment\" },\n\t\t{ \"type\": \"Shell\" },\n\t\t{\n\t\t\t\"type\": \"Terminal\",\n\t\t\t// Leave this option set to `true` to display a beautiful colors palette.\n\t\t\t// Set it to `false` to allow compatibility with non-Unicode locales.\n\t\t\t\"use_unicode\": true\n\t\t},\n\t\t{ \"type\": \"Packages\" },\n\t\t{\n\t\t\t\"type\": \"Temperature\",\n\t\t\t// The character to display between the temperature value and the unit (as '°' in 53.2°C).\n\t\t\t\"char_before_unit\": \" \",\n\t\t\t\"sensors_chipsets\": [\n\t\t\t\t// Whitelist of chipset identifiers (strings) passed to LM-SENSORS when computing the average temperature.\n\t\t\t\t// Leaving empty (the default) would make Archey process input data from **all** available chipsets.\n\t\t\t\t// Use this option if one of your sensors happens to return irrelevant values, or if you want to process only a subset of them.\n\t\t\t\t//\n\t\t\t\t// You may want to run `sensors -A` to list the available chipsets on your system (e.g. `coretemp-isa-0000`, `acpitz-acpi-0`, ...).\n\t\t\t\t// Then, you will be able to add them once double-quoted in this list, for instance :\n\t\t\t\t//\"coretemp-isa-0000\",\n\t\t\t\t//\"acpitz-acpi-0\"\n\t\t\t],\n\t\t\t\"sensors_excluded_subfeatures\": [\n\t\t\t\t// Blacklist of chipset \"subfeature\" (in LM-SENSORS terms) identifiers (strings) to exclude from average computation.\n\t\t\t\t// Leaving empty (the default) would make Archey process input data from **all** available subfeatures providing valid temperatures.\n\t\t\t\t//\n\t\t\t\t// For instance, AMD Ryzen X series CPUs include a thermal bias sensor, appearing as a subfeature named `Tctl`.\n\t\t\t\t// Excluding it can be achieved this way :\n\t\t\t\t//\"Tctl\"\n\t\t\t],\n\t\t\t// Display temperature values in Fahrenheit instead of Celsius.\n\t\t\t\"use_fahrenheit\": false\n\t\t},\n\t\t{\n\t\t\t\"type\": \"CPU\",\n\t\t\t// Set to `true` to join all CPUs on the same line.\n\t\t\t\"one_line\": false,\n\t\t\t// Set to `false` to hide the number of cores.\n\t\t\t\"show_cores\": true,\n\t\t\t//\n\t\t\t// As explained above, you may rename entries as you wish.\n\t\t\t\"name\": \"Processor\"\n\t\t},\n\t\t{\n\t\t\t\"type\": \"GPU\",\n\t\t\t// Set to `true` to join all GPUs on the same line.\n\t\t\t\"one_line\": false,\n\t\t\t// The maximum number of GPUs you want to display.\n\t\t\t// `false` --> Unlimited.\n\t\t\t\"max_count\": 2\n\t\t},\n\t\t{\n\t\t\t\"type\": \"RAM\",\n\t\t\t// Some threshold values you can adjust affecting warning/danger colors.\n\t\t\t\"warning_use_percent\": 33.3,\n\t\t\t\"danger_use_percent\": 66.7\n\t\t},\n\t\t{\n\t\t\t\"type\": \"Disk\",\n\t\t\t// Which filesystems to show:\n\t\t\t// `[\"local\"]` shows only local filesystems.\n\t\t\t// You can alternatively list specific filesystems as:\n\t\t\t//  * A list of device paths - e.g. `[\"/dev/sda1\", \"/dev/nvme0n1p1\"]`\n\t\t\t//  * A list of mount points - e.g. `[\"/\", \"/mnt\"]`\n\t\t\t//  * A combination of the above - e.g. `[\"/\", \"/dev/sda2\"]`\n\t\t\t\"show_filesystems\": [\"local\"],\n\t\t\t// Set to `false` to write each filesystem on its own line.\n\t\t\t\"combine_total\": true,\n\t\t\t// Defines which labels to use for each disk (only works if `combine_total` is false!)\n\t\t\t// The options available are:\n\t\t\t//  * `\"mount_points\"`: Shows the mount point of the filesystem.\n\t\t\t//      e.g. `Disk (/): 10.0 GiB/100.0 GiB`\n\t\t\t//           `Disk (/mnt): 15.0 GiB / 200.0 GiB`\n\t\t\t//  * `\"device_paths\"`: Shows the device path of the filesystem.\n\t\t\t//      e.g. `Disk (/dev/sda1): 10.0 GiB / 100.0 GiB`\n\t\t\t//           `Disk (/dev/mmcblk0p1): 15.0 GiB / 200.0 GiB`\n\t\t\t//  * `false` or `null` (no quote marks!): Don't show any device labels.\n\t\t\t//      e.g. `Disk: 10.0 GiB / 100.0 GiB`\n\t\t\t//           `Disk: 15.0 GiB / 200.0 GiB`\n\t\t\t\"disk_labels\": null,\n\t\t\t// Set to `true` to hide the \"Disk\" entry name from the output.\n\t\t\t// i.e. null  --> `Disk (/):`\n\t\t\t//      false --> `Disk (/):`\n\t\t\t//      true  --> `(/):`\n\t\t\t\"hide_entry_name\": null,\n\t\t\t// Some threshold values you can adjust affecting warning/danger colors.\n\t\t\t\"warning_use_percent\": 50,\n\t\t\t\"danger_use_percent\": 75\n\t\t},\n\t\t{\n\t\t\t\"type\": \"LAN_IP\",\n\t\t\t// Set to `false` not to join all IP addresses on the same line.\n\t\t\t\"one_line\": true,\n\t\t\t// The maximum number of local addresses you want to display.\n\t\t\t// `false` --> Unlimited.\n\t\t\t\"max_count\": 2,\n\t\t\t// Set to `true` if your local network does not honor RFC1918.\n\t\t\t\"show_global\": false,\n\t\t\t// Set to `false` to only display IPv4 LAN addresses.\n\t\t\t\"ipv6_support\": true\n\t\t},\n\t\t{\n\t\t\t\"type\": \"WAN_IP\",\n\t\t\t//\n\t\t\t// As explained above, you may temporary hide entries as you wish.\n\t\t\t// See below example to hide your public IP addresses before posting your configuration on Internet.\n\t\t\t//\"disabled\": true,\n\t\t\t//\n\t\t\t// Set to `false` not to join all IP addresses on the same line.\n\t\t\t\"one_line\": true,\n\t\t\t//\n\t\t\t// Below are settings relative to IPv4/IPv6 public addresses retrieval.\n\t\t\t// I hope options are self-explanatory.\n\t\t\t// You may set `dns_query` (or `http_url`) to `false` to disable them.\n\t\t\t// You may directly set `ipv4` or `ipv6` fields to `false` to completely disable them.\n\t\t\t//\n\t\t\t// <https://ident.me/> server sources : <https://github.com/pcarrier/identme>.\n\t\t\t//\n\t\t\t// /!\\ `DO_NOT_TRACK` environment variable may affect this entry behavior ! /!\\\n\t\t\t\"ipv4\": {\n\t\t\t\t\"dns_query\": \"myip.opendns.com\",\n\t\t\t\t\"dns_resolver\": \"resolver1.opendns.com\",\n\t\t\t\t\"dns_timeout\": 1,\n\t\t\t\t\"http_url\": \"https://v4.ident.me/\",\n\t\t\t\t\"http_timeout\": 1\n\t\t\t},\n\t\t\t\"ipv6\": {\n\t\t\t\t\"dns_query\": \"myip.opendns.com\",\n\t\t\t\t\"dns_resolver\": \"resolver1.opendns.com\",\n\t\t\t\t\"dns_timeout\": 1,\n\t\t\t\t\"http_url\": \"https://v6.ident.me/\",\n\t\t\t\t\"http_timeout\": 1\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"type\": \"Custom\",\n\t\t\t// `command` option is mandatory. `shell` option defaults to `false`.\n\t\t\t// Don't forget to set a `name` !\n\t\t\t\"name\": \"GPU\",\n\t\t\t// The custom shell command to execute.\n\t\t\t\"shell\": true,\n\t\t\t\"command\": \"lshw -C display 2> /dev/null | rg product | cut -d ':' -f 2\",\n\t\t\t// A custom program and its arguments to execute.\n\t\t\t\"shell\": false,\n\t\t\t\"command\": [\"echo\", \"My super GPU model !\"],\n\t\t\t// Whether or not command exit status code should be ignored (defaults to `true`).\n\t\t\t\"check\": true,\n\t\t\t// Whether or not STDERR should be silenced instead of logged (defaults to `true`).\n\t\t\t\"log_stderr\": true,\n\t\t\t// Set to `false` not to join all output content on the same line.\n\t\t\t\"one_line\": true\n\t\t}\n\t],\n\t\"default_strings\": {\n\t\t// Use this section to override default strings (internationalization).\n\t}\n}\n\n```\n\n## Test cases\n\nAn extensive test suite is available.  \nHere is a short procedure to run them (you'll only need `python3`) :\n\n```bash\ngit clone https://github.com/HorlogeSkynet/archey4.git\ncd archey4/\npython3 -m unittest\n```\n\nAny improvement would be appreciated.\n\n## Notes to users\n\n* For a good ASCII art display, a terminal monospaced font is recommended (see <https://en.wikipedia.org/wiki/Monospaced_font>).\n\n* If you experience any trouble during the installation or usage, please do **[open an issue](https://github.com/HorlogeSkynet/archey4/issues/new)**.\n\n* If you had to tweak this project to make it work on your system, please **[open a pull request](https://github.com/HorlogeSkynet/archey4/pulls)** so as to share your modifications with the rest of the world and participate in this project !\n\n* If your distribution is not (currently) supported, please check [How do I add a distribution to Archey?](https://github.com/HorlogeSkynet/archey4/wiki/How-do-I-add-a-distribution-to-Archey%3F).\n\n## Notes to developers\n\n* Don't forget to check the [Info for contributors](https://github.com/HorlogeSkynet/archey4/wiki/Info-for-contributors) wiki page.\n\n* Any patch sent by e-mail to [dev+archey@samuel.domains](mailto:dev+archey@samuel.domains) would get properly reviewed.\n\n[`iStats`]: https://github.com/Chris911/iStats\n[`osx-cpu-temp`]: https://github.com/lavoiesl/osx-cpu-temp"
}
