{
  "name": "openiothub-server",
  "full_name": "openiothub-server",
  "tap": "homebrew/core",
  "oldname": "server-go",
  "oldnames": [
    "server-go"
  ],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Server for OpenIoTHub",
  "license": "MIT",
  "homepage": "https://github.com/OpenIoTHub/server-go",
  "versions": {
    "stable": "1.2.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/OpenIoTHub/server-go.git",
      "tag": "v1.2.1",
      "revision": "e9b10913f1e291cebd9daeeecb88054a51585759",
      "checksum": null
    },
    "head": {
      "url": "https://github.com/OpenIoTHub/server-go.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/openiothub-server/blobs/sha256:2e577ddde46d0ad27a625a73e9637d24e72961c3622fad535eb60059082135b4",
          "sha256": "2e577ddde46d0ad27a625a73e9637d24e72961c3622fad535eb60059082135b4"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/openiothub-server/blobs/sha256:13dbc955f87f4db7312684958f4a37e10a87fddbc839b28d727f6a54754475de",
          "sha256": "13dbc955f87f4db7312684958f4a37e10a87fddbc839b28d727f6a54754475de"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/openiothub-server/blobs/sha256:611a932dba202a72cda774c99e7e4fcc946dd9ea3ed5905dc0c9458a0a3c16e4",
          "sha256": "611a932dba202a72cda774c99e7e4fcc946dd9ea3ed5905dc0c9458a0a3c16e4"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/openiothub-server/blobs/sha256:843ab385316ce21a0c37e406d1434023e05c6a0dd2add39e977fc0fae8c9d816",
          "sha256": "843ab385316ce21a0c37e406d1434023e05c6a0dd2add39e977fc0fae8c9d816"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/openiothub-server/blobs/sha256:68189ff6031ff8e611d6a1a858cc485f0410f0ba5a35a5492beacfcae0ecd798",
          "sha256": "68189ff6031ff8e611d6a1a858cc485f0410f0ba5a35a5492beacfcae0ecd798"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/openiothub-server/blobs/sha256:e2d3403311ba16b4564ea082a2eabe71a2dee04ee67a1de95bc1392361793072",
          "sha256": "e2d3403311ba16b4564ea082a2eabe71a2dee04ee67a1de95bc1392361793072"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/openiothub-server/blobs/sha256:d5a7c18d1ebb71d72a9f8510e19be548b529f26af377762d394a6fcc556e6ac0",
          "sha256": "d5a7c18d1ebb71d72a9f8510e19be548b529f26af377762d394a6fcc556e6ac0"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/openiothub-server/blobs/sha256:e79346dfe3caf01f3e10f48de9f284b642146665b0d1c49916cfd55fa8930e0d",
          "sha256": "e79346dfe3caf01f3e10f48de9f284b642146665b0d1c49916cfd55fa8930e0d"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": {
    "run": [
      "/home/linuxbrew/.linuxbrew/opt/openiothub-server/bin/openiothub-server",
      "-c",
      "/home/linuxbrew/.linuxbrew/etc/server-go.yaml"
    ],
    "run_type": "immediate",
    "keep_alive": {
      "always": true
    },
    "log_path": "/home/linuxbrew/.linuxbrew/var/log/openiothub-server.log",
    "error_log_path": "/home/linuxbrew/.linuxbrew/var/log/openiothub-server.log"
  },
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/openiothub-server.rb",
  "ruby_source_checksum": {
    "sha256": "47ad92e7a2f8b71c0aaee44739f45abdecd82d03f85f9561b46d7c0c0d567249"
  },
  "date_added": "2022-06-08T09:08:48+00:00",
  "readme": "# Server for OpenIoTHub\n[![Build Status](https://travis-ci.com/OpenIoTHub/server-go.svg?branch=master)](https://travis-ci.com/OpenIoTHub/server-go)\n\n[![Get it from the Snap Store](https://snapcraft.io/static/images/badges/en/snap-store-white.svg)](https://snapcraft.io/server-go)\n## OpenIoTHub 物联网服务器\n\n### 如果你有自建转发服务端的需求则可以自建此服务端，服务器需要同时开启指定的TCP，UDP端口\n#### 建好此服务器之后，[网关](https://github.com/OpenIoTHub/gateway-go/releases )就可以连接自建的服务器了！\n\n```\n如果使用redis持久化保存Http代理配置请将配置文件中的redis的使能打开enabled: true\n```\n```\n如果使用redis后OpenIoTHub App无法添加http代理成功请尝试在redis-cli中执行config set stop-writes-on-bgsave-error no\n参考：https://www.baidu.com/s?ie=UTF-8&wd=MISCONF Redis is configured to save RDB snapshots\n127.0.0.1:6379> config set stop-writes-on-bgsave-error no\n如果配置redis后正常使用请忽略本条问题\n```\n\n```yaml\nmy_public_ip_or_domian: \"\" #你运行本软件的服务器的域名或者ip地址，用来使用命令生成token时有用\nlogconfig:\n  enablestdout: true #是否输出日志到控制台\n  logfilepath: \"./mylog.log\" #配置日志输出文件的位置，空则不输出到文件\ncommon:\n  bind_addr: 0.0.0.0 #服务器监听的IP地址，默认监听所有\n  tcp_port: 34320 #服务器使用的tcp端口\n  kcp_port: 34320 #服务器使用的kcp(实际上是udp)端口\n  udp_p2p_port: 34321 #服务器使用的UDP端口，用于辅助p2p\n  kcp_p2p_port: 34322 #服务器使用的kcp（UDP）端口，用于辅助p2p\n  tls_port: 34321 #服务器使用的tls(实际上是tcp)端口，用于安全通信\n  grpc_port: 34322 #服务器使用的grpc(实际上是tcp)端口，用于grpc通信\n  http_port: 80 #服务器监听的http（tcp）端口，用于提供http代理功能\n  https_port: 443 #服务器监听的https（tcp）端口，用于提供https代理功能\nsecurity:\n  login_key: HLLdsa544&*S #用户自定义的服务器秘钥，此为默认，用户个人使用服务器请修改\n  tls_Cert_file_path: \"\"\n  tls_key_file_path: \"\"\n  https_cert_file_path: \"\"\n  https_key_file_path: \"\"\nredisconfig:\n  enabled: false #是否使用redis保存用户http代理配置 <----这里打开redis\n  network: tcp  #redis使用tcp连接，默认即可\n  address: 127.0.0.1:6379 #redis的地址，默认本机，redis默认端口6379，请根据自己的redis配置\n  database: 0 #redis的默认服务器0，如果你不懂请保持0\n  needAuth: false #redis是否需要密码验证，默认不需要false，如果你的redis需要密码请将false改为true并配置下面password为redis密码\n  password: \"\" #redis的密码，needAuth:true时有效\n```\n\nYou can install the pre-compiled binary (in several different ways),\nuse Docker.\n\nHere are the steps for each of them:\n\n## Install the pre-compiled binary\n\n**homebrew tap** (only on macOS for now):\n\n```sh\n$ brew install OpenIoTHub/tap/server-go\n```\n\n**homebrew** (may not be the latest version):\n\n```sh\n$ brew install server-go\n```\nhomebrew pr [server-go](https://github.com/Homebrew/homebrew-core/blob/master/Formula/server-go.rb)\n```text\n*** config file : \n/usr/local/etc/server-go/server-go.yaml\n```\n\n**snapcraft**:\n\n```sh\n$ sudo snap install server-go\n```\n```text\n*** config file : \n/root/snap/server-go/current/server-go.yaml\n```\n\n**scoop**:\n\n```sh\n$ scoop bucket add OpenIoTHub https://github.com/OpenIoTHub/scoop-bucket.git\n$ scoop install server-go\n```\n\n**deb/rpm**:\n\nDownload the `.deb` or `.rpm` from the [releases page][releases] and\ninstall with `dpkg -i` and `rpm -i` respectively.\n```text\n*** config file : \n/etc/server-go/server-go.yaml\n```\n\n\n**Shell script**:\n\n```sh\n$ curl -sfL https://install.goreleaser.com/github.com/OpenIoTHub/server-go.sh | sh\n```\n\n**manually**:\n\nDownload the pre-compiled binaries from the [releases page][releases] and\ncopy to the desired location.\n\n## Running with Docker\n\nYou can also use it within a Docker container. To do that, you'll need to\nexecute something more-or-less like the following:\n\n```sh\n$ docker run openiothub/server:latest\n```\n\nNote that the image will almost always have the last stable Go version.\n\n[releases]: https://github.com/OpenIoTHub/server-go/releases"
}
