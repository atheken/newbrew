{
  "name": "dufs",
  "full_name": "dufs",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Static file server",
  "license": "Apache-2.0 or MIT",
  "homepage": "https://github.com/sigoden/dufs",
  "versions": {
    "stable": "0.34.2",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/sigoden/dufs/archive/refs/tags/v0.34.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "d01f05744dca57b7dfc2d70c994b2532bf9fa4790d6fd1a5f87486eec2f2d95d"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dufs/blobs/sha256:73eaeeea2f66a33e6aa8be920efa141db669dbdc5d2cf66f2b8bfd63435bfefd",
          "sha256": "73eaeeea2f66a33e6aa8be920efa141db669dbdc5d2cf66f2b8bfd63435bfefd"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dufs/blobs/sha256:4370d59550d6847b39730631865e336845d2023013f0d95de7ad8ab7904e3838",
          "sha256": "4370d59550d6847b39730631865e336845d2023013f0d95de7ad8ab7904e3838"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dufs/blobs/sha256:d1bef4f7921d091f59aba08bbf92972f626ec9f218454f2a0703395df0ec9b43",
          "sha256": "d1bef4f7921d091f59aba08bbf92972f626ec9f218454f2a0703395df0ec9b43"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dufs/blobs/sha256:850af7ac3d66c46adbe60538fde2c12e758e36f61bcd182f82a8a763fd44e249",
          "sha256": "850af7ac3d66c46adbe60538fde2c12e758e36f61bcd182f82a8a763fd44e249"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dufs/blobs/sha256:9ec3f783d35831864e9172a6277868f54958d027525316207d6865b747b6b4d7",
          "sha256": "9ec3f783d35831864e9172a6277868f54958d027525316207d6865b747b6b4d7"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dufs/blobs/sha256:0532d34a195e12fdcffe407c51029f1dddd8938dbce9964af216d1b800fa4356",
          "sha256": "0532d34a195e12fdcffe407c51029f1dddd8938dbce9964af216d1b800fa4356"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dufs/blobs/sha256:123e4e200d2db51328b5876f72b4367760b5eeb0fa1e88febb55676688d38727",
          "sha256": "123e4e200d2db51328b5876f72b4367760b5eeb0fa1e88febb55676688d38727"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/dufs.rb",
  "ruby_source_checksum": {
    "sha256": "b0a2123d972b114d227d0e7f25a0da21151c956e1f0cc5c49f70d375382c4dd6"
  },
  "date_added": "2022-12-22T16:41:43+00:00",
  "readme": "# Dufs\n\n[![CI](https://github.com/sigoden/dufs/actions/workflows/ci.yaml/badge.svg)](https://github.com/sigoden/dufs/actions/workflows/ci.yaml)\n[![Crates](https://img.shields.io/crates/v/dufs.svg)](https://crates.io/crates/dufs)\n\nDufs is a distinctive utility file server that supports static serving, uploading, searching, accessing control, webdav...\n\n![demo](https://user-images.githubusercontent.com/4012553/220513063-ff0f186b-ac54-4682-9af4-47a9781dee0d.png)\n\n## Features\n\n- Serve static files\n- Download folder as zip file\n- Upload files and folders (Drag & Drop)\n- Create/Edit/Search files\n- Partial responses (Parallel/Resume download)\n- Access control\n- Support https\n- Support webdav\n- Easy to use with curl\n\n## Install\n\n### With cargo\n\n```\ncargo install dufs\n```\n\n### With docker\n\n```\ndocker run -v `pwd`:/data -p 5000:5000 --rm -it sigoden/dufs /data -A\n```\n\n### With [Homebrew](https://brew.sh)\n\n```\nbrew install dufs\n```\n\n### Binaries on macOS, Linux, Windows\n\nDownload from [Github Releases](https://github.com/sigoden/dufs/releases), unzip and add dufs to your $PATH.\n\n## CLI\n\n```\nDufs is a distinctive utility file server - https://github.com/sigoden/dufs\n\nUsage: dufs [OPTIONS] [serve_path]\n\nArguments:\n  [serve_path]  Specific path to serve [default: .]\n\nOptions:\n  -b, --bind <addrs>         Specify bind address or unix socket\n  -p, --port <port>          Specify port to listen on [default: 5000]\n      --path-prefix <path>   Specify a path prefix\n      --hidden <value>       Hide paths from directory listings, separated by `,`\n  -a, --auth <rules>         Add auth role\n      --auth-method <value>  Select auth method [default: digest] [possible values: basic, digest]\n  -A, --allow-all            Allow all operations\n      --allow-upload         Allow upload files/folders\n      --allow-delete         Allow delete files/folders\n      --allow-search         Allow search files/folders\n      --allow-symlink        Allow symlink to files/folders outside root directory\n      --allow-archive        Allow zip archive generation\n      --enable-cors          Enable CORS, sets `Access-Control-Allow-Origin: *`\n      --render-index         Serve index.html when requesting a directory, returns 404 if not found index.html\n      --render-try-index     Serve index.html when requesting a directory, returns directory listing if not found index.html\n      --render-spa           Serve SPA(Single Page Application)\n      --assets <path>        Use custom assets to override builtin assets\n      --tls-cert <path>      Path to an SSL/TLS certificate to serve with HTTPS\n      --tls-key <path>       Path to the SSL/TLS certificate's private key\n      --log-format <format>  Customize http log format\n      --completions <shell>  Print shell completion script for <shell> [possible values: bash, elvish, fish, powershell, zsh]\n  -h, --help                 Print help\n  -V, --version              Print version\n```\n\n## Examples\n\nServe current working directory in readonly mode\n\n```\ndufs\n```\n\nAllow all operations like upload/delete/search/create/edit...\n\n```\ndufs -A\n```\n\nOnly allow upload operation\n\n```\ndufs --allow-upload\n```\n\nServe a specific directory\n\n```\ndufs Downloads\n```\n\nServe a single file\n\n```\ndufs linux-distro.iso\n```\n\nServe a single-page application like react/vue\n\n```\ndufs --render-spa\n```\n\nServe a static website with index.html\n\n```\ndufs --render-index\n```\n\nRequire username/password\n\n```\ndufs -a admin:123@/:rw\n```\n\nListen on specific host:ip \n\n```\ndufs -b 127.0.0.1 -p 80\n```\n\nListen on unix socket\n```\ndufs -b /tmp/dufs.socket\n```\n\nUse https\n\n```\ndufs --tls-cert my.crt --tls-key my.key\n```\n\n## API\n\nUpload a file\n\n```\ncurl -T path-to-file http://127.0.0.1:5000/new-path/path-to-file\n```\n\nDownload a file\n```\ncurl http://127.0.0.1:5000/path-to-file\n```\n\nDownload a folder as zip file\n\n```\ncurl -o path-to-folder.zip http://127.0.0.1:5000/path-to-folder?zip\n```\n\nDelete a file/folder\n\n```\ncurl -X DELETE http://127.0.0.1:5000/path-to-file-or-folder\n```\n\nCreate a directory\n\n```\ncurl -X MKCOL https://127.0.0.1:5000/path-to-folder\n```\n\nMove the file/folder to the new path\n\n```\ncurl -X MOVE https://127.0.0.1:5000/path -H \"Destination: https://127.0.0.1:5000/new-path\"\n```\n\nList/search directory contents\n\n```\ncurl http://127.0.0.1:5000?simple                 # output names only, just like `ls -1`\ncurl http://127.0.0.1:5000?json                   # output paths in json format\ncurl http://127.0.0.1:5000?q=Dockerfile&simple    # search for files, just like `find -name Dockerfile`\n```\n\nWith authorization\n\n```\ncurl --user user:pass --digest http://192.168.8.10:5000/file  # digest auth\ncurl --user user:pass http://192.168.8.10:5000/file           # basic auth\n```\n\n<details>\n<summary><h2>Advanced topics</h2></summary>\n\n### Access Control\n\nDufs supports account based access control. You can control who can do what on which path with `--auth`/`-a`.\n\n```\ndufs -a [user:pass]@path[:rw][,path[:rw]...][|...]\n```\n\n1. Multiple rules are separated by \"|\"\n2. User and pass are the account name and password, if omitted, it is an anonymous user\n3. One rule can set multiple paths, separated by \",\"\n4. Add `:rw` after the path to indicate that the path has read and write permissions, otherwise the path has readonly permissions.\n\n```\ndufs -A -a admin:admin@/:rw\n```\n`admin` has all permissions for all paths.\n\n```\ndufs -A -a admin:admin@/:rw -a guest:guest@/\n```\n`guest` has readonly permissions for all paths.\n\n```\ndufs -A -a admin:admin@/:rw -a @/\n```\nAll paths is public, everyone can view/download it.\n\n```\ndufs -A -a admin:admin@/:rw -a user1:pass1@/user1:rw -a user2:pass2@/user2\ndufs -A -a \"admin:admin@/:rw|user1:pass1@/user1:rw|user2:pass2@/user2\"\n```\n`user1` has all permissions for `/user1/*` path.\n`user2` has all permissions for `/user2/*` path.\n\n```\ndufs -A -a user:pass@/dir1:rw,/dir2:rw,dir3\n```\n`user` has all permissions for `/dir1/*` and `/dir2/*`, has readonly permissions for `/dir3/`.\n\n```\ndufs -a admin:admin@/\n```\nSince dufs only allows viewing/downloading, `admin` can only view/download files.\n\n### Hide Paths\n\nDufs supports hiding paths from directory listings via option `--hidden <glob>,...`.\n\n```\ndufs --hidden .git,.DS_Store,tmp\n```\n\n> The glob used in --hidden only matches file and directory names, not paths. So `--hidden dir1/file` is invalid.\n\n```sh\ndufs --hidden '.*'            # hidden dotfiles\ndufs --hidden '*/'            # hidden all folders\ndufs --hidden '*.log,*.lock'  # hidden by exts\n```\n\n### Log Format\n\nDufs supports customize http log format with option `--log-format`.\n\nThe log format can use following variables.\n\n| variable     | description                                                               |\n| ------------ | ------------------------------------------------------------------------- |\n| $remote_addr | client address                                                            |\n| $remote_user | user name supplied with authentication                                    |\n| $request     | full original request line                                                |\n| $status      | response status                                                           |\n| $http_       | arbitrary request header field. examples: $http_user_agent, $http_referer |\n\n\nThe default log format is `'$remote_addr \"$request\" $status'`.\n```\n2022-08-06T06:59:31+08:00 INFO - 127.0.0.1 \"GET /\" 200\n```\n\nDisable http log\n```\ndufs --log-format=''\n```\n\nLog user-agent\n```\ndufs --log-format '$remote_addr \"$request\" $status $http_user_agent'\n```\n```\n2022-08-06T06:53:55+08:00 INFO - 127.0.0.1 \"GET /\" 200 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36\n```\n\nLog remote-user\n```\ndufs --log-format '$remote_addr $remote_user \"$request\" $status' -a /@admin:admin -a /folder1@user1:pass1\n```\n```\n2022-08-06T07:04:37+08:00 INFO - 127.0.0.1 admin \"GET /\" 200\n```\n\n## Environment variables\n\nAll options can be set using environment variables prefixed with `DUFS_`.\n\n```\n  [SERVE_PATH]                DUFS_SERVE_PATH=/dir\n  -b, --bind <addrs>          DUFS_BIND=0.0.0.0\n  -p, --port <port>           DUFS_PORT=5000\n      --path-prefix <path>    DUFS_PATH_PREFIX=/path\n      --hidden <value>        DUFS_HIDDEN=*.log\n  -a, --auth <rules>          DUFS_AUTH=\"admin:admin@/:rw|@/\" \n      --auth-method <value>   DUFS_AUTH_METHOD=basic\n  -A, --allow-all             DUFS_ALLOW_ALL=true\n      --allow-upload          DUFS_ALLOW_UPLOAD=true\n      --allow-delete          DUFS_ALLOW_DELETE=true\n      --allow-search          DUFS_ALLOW_SEARCH=true\n      --allow-symlink         DUFS_ALLOW_SYMLINK=true\n      --allow-archive         DUFS_ALLOW_ARCHIVE=true\n      --enable-cors           DUFS_ENABLE_CORS=true\n      --render-index          DUFS_RENDER_INDEX=true\n      --render-try-index      DUFS_RENDER_TRY_INDEX=true\n      --render-spa            DUFS_RENDER_SPA=true\n      --assets <path>         DUFS_ASSETS=/assets\n      --tls-cert <path>       DUFS_TLS_CERT=cert.pem\n      --tls-key <path>        DUFS_TLS_KEY=key.pem\n      --log-format <format>   DUFS_LOG_FORMAT=\"\"\n```\n\n### Customize UI\n\nDufs allows users to customize the UI with your own assets.\n\n```\ndufs --assets my-assets-dir/\n```\n\nYour assets folder must contains a `index.html` file.\n\n`index.html` can use the following placeholder variables to retrieve internal data.\n\n- `__INDEX_DATA__`: directory listing data\n- `__ASSETS_PREFIX__`: assets url prefix\n\n</details>\n\n## License\n\nCopyright (c) 2022 dufs-developers.\n\ndufs is made available under the terms of either the MIT License or the Apache License 2.0, at your option.\n\nSee the LICENSE-APACHE and LICENSE-MIT files for license details."
}
