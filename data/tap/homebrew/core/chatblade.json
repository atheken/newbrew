{
  "name": "chatblade",
  "full_name": "chatblade",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "CLI Swiss Army Knife for ChatGPT",
  "license": "GPL-3.0-only",
  "homepage": "https://github.com/npiv/chatblade",
  "versions": {
    "stable": "0.3.1",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://files.pythonhosted.org/packages/02/bc/c3dd9e46eaeae6218909b2a13b79a71b8b6ad30fe7ede8f9dc2dba530d5b/chatblade-0.3.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "401511bcf7c305b845f80850d12b07627673af944ddfa0aa6b60eb010656d205"
    }
  },
  "revision": 2,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/chatblade/blobs/sha256:b0ed3f981dd53db1c454a014886a40aae3771463bfd1dd63af1223270caa9aa6",
          "sha256": "b0ed3f981dd53db1c454a014886a40aae3771463bfd1dd63af1223270caa9aa6"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/chatblade/blobs/sha256:24f7e2a3b936434c51180ff02679bf25bb1b61bffbfc21e1a654160a04d4dcb9",
          "sha256": "24f7e2a3b936434c51180ff02679bf25bb1b61bffbfc21e1a654160a04d4dcb9"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/chatblade/blobs/sha256:4fd53066ced3bebf833afdd383e9775996790e8d9c15f9b666ae104dcd6eecdd",
          "sha256": "4fd53066ced3bebf833afdd383e9775996790e8d9c15f9b666ae104dcd6eecdd"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/chatblade/blobs/sha256:65e2ec5693a6cd9eed600a37f2d0cc20281f6f322af82d02d4de3ef2d9acbbb2",
          "sha256": "65e2ec5693a6cd9eed600a37f2d0cc20281f6f322af82d02d4de3ef2d9acbbb2"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/chatblade/blobs/sha256:c3f2730097f501179b39bb6ea6511bd93d22521a17dd266b54aa3dc6def11aba",
          "sha256": "c3f2730097f501179b39bb6ea6511bd93d22521a17dd266b54aa3dc6def11aba"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/chatblade/blobs/sha256:c4eb83160aaeda296e8b389e437e2298a132fac2702cc0c409b580a87773d516",
          "sha256": "c4eb83160aaeda296e8b389e437e2298a132fac2702cc0c409b580a87773d516"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/chatblade/blobs/sha256:42a4a9078b7a98d8cba511135f206af4968d56305363bb9fe47c69301e677267",
          "sha256": "42a4a9078b7a98d8cba511135f206af4968d56305363bb9fe47c69301e677267"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [
    "pygments",
    "python@3.11",
    "pyyaml"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/chatblade.rb",
  "ruby_source_checksum": {
    "sha256": "8048b05b1085460385a06702b802d23c82e70019e859f1972b5e9b1bcb923603"
  },
  "date_added": "2023-04-19T11:28:13+02:00",
  "readme": "# Chatblade\n## A CLI Swiss Army Knife for ChatGPT\n\nChatblade is a versatile command-line interface (CLI) tool designed to interact with OpenAI's ChatGPT. It accepts piped input, arguments, or both, and allows you to save common prompt preambles for quick usage. Additionally, Chatblade provides utility methods to extract JSON or Markdown from ChatGPT responses.\n\n**Note**: You'll need to set up your OpenAI API key to use Chatblade.\n\nYou can do that by either passing `--openai-api-key KEY` or by setting an env variable `OPENAI_API_KEY` (recommended). The examples below all assume an env variable is set.\n\n## Install\n\n### Latest and greatest\n\nTo stay up to date with the current main branch you can:\n- check out the project, and run `pip install .`\n- or `pip install 'chatblade @ git+https://github.com/npiv/chatblade'`\n\n### Via pypi\n\nThe last released version can be installed with `pip install chatblade --upgrade`\n\n### Via Brew\n\n```\nbrew install chatblade\n```\n\n## Documentation\n\n### Making queries\n\n#### A new conversation\n\nYou can begin any query by just typing. eg\n\n```bash\nchatblade how can I extract a still frame from a video at 22:01 with ffmpeg\n```\n<img width=\"650\" alt=\"image\" src=\"https://user-images.githubusercontent.com/452020/226869260-1dcd4faf-521c-466b-998a-fd5cfdc5b3c7.png\">\n\n#### recall the last conversation\n\nif you would like to recall the last conversation just call it back with `-l`\n\n```bash\nchatblade -l\n```\n\n#### Continue the last conversation\n\nTo continue the conversation and ask for a change within the context, you can again use `-l` but with a query.\n\n```bash\nchatblade -l can we make a gif instead from 00:22:01 to 00:22:04\n```\n\n`-l` is shorthand for `-S last` or the last session. We can keep track of and continue various distinct conversations using the [session options](#session-options)\n\n\n#### Picking between gpt-3.5 and 4\n\nBy default gpt-3.5 is used, you can switch at any point to 4 by using `-c 4`\n\nor you can pass any arbitrary full model name, eg `-c gpt-3.5-turbo-16k`\n\n#### Chatting interactively\n\nIf you would prefer to chat interactively instead just use `chatblade -i`.\n\n#### Show streaming text (experimental)\n\nYou can also stream the responses, just like in the webui. At the end of the stream it will format the result. This can be combined in an interactive session\n\n```chatblade -s -i```\n\nhttps://user-images.githubusercontent.com/452020/226891636-54d12df2-528f-4365-a4f3-e51cb025773c.mov\n\n\n### Formatting the results\n\nResponses are parsed and if chatblade thinks its markdown it will be presented as such, to get syntax highlighting. But sometimes this may not be what you want, as it removes new lines, or because you are only interested in extracting a part of the result to pipe to another command.\n\nIn that case you have 2 options:\n- `-r` for raw, which just prints the text exactly as ChatGPT returned it, and doesn't pass it through markdown.\n- `-e` for extract, which will try to detect what was returned (either a code block or json) and extract only that part. If neither of those are found it does the same as `-r`\n\nBoth options can be used either with a new query, e.g.\n\n```bash\nchatblade -e write me a python boilerplate script that starts a server and prints hello world > main.py\n```\n\nor with the last result (json in this example)\n```bash\nchatblade -l -e | jq\n```\n\n### Piping content into chatblade\n\nIf we have long prompts we don't want to type everytime, or just want to provide context for our query we can pipe into chatblade.\n\ne.g.\n\n```bash\ncurl https://news.ycombinator.com/rss | chatblade given the above rss can you show me the top 3 articles about AI and their links -c 4\n```\n\nThe piped input is placed above the query and sent to ChatGPT.\n\n<img src=\"assets/example3.png\">\n\nor\n\n```bash\nchatblade what does this script do < script.sh\n```\n\nWhat gets sent to ChatGPT over the wire is:\n\n```\npiped input\n-------\nquery\n```\n\n#### Session Options\n\nSessions are named conversations.\n\nIf you start chatblade with a session name SESS of your choice:\n\n```bash\nchatblade -S SESS can we make a gif instead from 00:22:01 to 00:22:04\n```\n\nchatblade will create a session called SESS if it does not exist, and it will store the current exchange (query-response pair) for SESS.\n\nIf such a session already exists, the saved conversation will be loaded and the new exchange will be appended.\n\nWithout a session argument, the exchange also gets stored in a session named `last`; however, subsequent sessionless invocation will overwrite the content of `last`. (You can continue a conversation that was started as a sessionless exchange by passing `-S last`, but `last` won't be a safe space for keeping a conversation, as the next sessionless invocation will clear it again.) The `-l` option is provided as a shorthand for `-S last`.\n\nIf you specify a session without a query:\n\n```bash\nchatblade -S SESS\n```\n\nchatblade will recall the conversation without modifying the session.\n\nchatblade supports various operations on sessions. It provides the `--session-OP` options, where `OP` can be `list`, `path`, `dump`, `delete`, `rename`.\n\n### Checking token count and estimated costs\n\nIf you want to check the approximate cost and token usage of a previous query, you can use the `-t` flag for \"tokens.\"\n\nWe could do this when passing in a lot of context like in the example above for instance.\n\n```bash\ncurl https://news.ycombinator.com/rss | chatblade given the above rss can you show me the top 3 articles about AI and their links -t\n```\n\n<img width=\"650\" alt=\"image\" src=\"https://user-images.githubusercontent.com/452020/226874588-28c53f53-1d19-4ce3-b7ec-b01c2f7cf75a.png\">\n\nThis won't perform any action over the wire, and just calculates the tokens locally.\n\n### Use custom prompts (the system msg)\n\nThe system message is used to instruct the model how to behave, see [OpenAI - Instructing Chat Models](https://platform.openai.com/docs/guides/chat/instructing-chat-models).\n\nThese can be loaded with `-p`. For convenience any file we place under ~/.config/chatblade/ will be picked up by this command.\n\nSo for example, given the following file `~/.config/chatblade/etymology`, which contains:\n\n```\nI want you to act as a professional Etymologist and Quiz Generator. You have a deep knowledge of etymology and will be provided with a word.\nThe goal is to create cards that quiz on both the etymology and finding the word by its definition.\n\nThe following is what a perfect answer would look like for the word \"disparage\":\n\n[{\n  \"question\": \"A verb used to indicate the act of speaking about someone or something in a negative or belittling way.<br/> <i>E.g He would often _______ his coworkers behind their backs.</i>\",\n  \"answer\": \"disparage\"\n},\n{\n  \"question\": \"What is the etymological root of the word disparage?\",\n  \"answer\": \"From the Old French word <i>'desparagier'</i>, meaning 'marry someone of unequal rank', which comes from <i>'des-'</i> (dis-) and <i>'parage'</i> (equal rank)\"\n}]\n\nYou will return answers in JSON only. Answer truthfully and if you don't know then say so. Keep questions as close as possible to the\nprovided examples. Make sure to include an example in the definition question. Use HTML within the strings to nicely format your answers.\n\nIf multiple words are provided, create questions and answers for each of them in one list.\n\nOnly answer in JSON, don't provide any more text. Valid JSON uses \"\" quotes to wrap its items.\n```\n\nWe can now run a command and refer to this prompt with `-p etymology`:\n\n```bash\nchatblade -p etymology gregarious\n```\n\nYou can also point -p to a file path directly to load a system message from any arbitrary location\n\n<img src=\"assets/example5.png\">\n\nAnd since we asked for JSON, we can pipe our result to something else, e.g.:\n\n```bash\nchatblade -l -e > toanki\n```\n\n### Configuring for Azure OpenAI\n\nchatblade can be used with an Azure OpenAI endpoint, in which case in addition to the `OPENAI_API_KEY` you'll need to set the following environment variables:\n\n- `OPENAI_API_TYPE` :: Set to `azure`. As required by [openai-python](https://github.com/openai/openai-python)\n- `OPENAI_API_BASE` :: URL to your cognitive services endpoint, e.g. `https://eastus.api.cognitive.microsoft.com/`\n- `OPENAI_API_AZURE_ENGINE` :: name of your deployment in Azure, eg `my-gpt-35-turbo` (maps to a specific model)\n\n*Note*: that this will override any option for `-c 3.5` or `-c 4` which don't make sense in this case.\n\n### Help\n\n```\nusage: Chatblade [-h] [--openai-api-key key] [--temperature t] [-c CHAT_GPT] [-i] [-s] [-t] [-p name] [-e] [-r] [-n] [-o] [--theme theme] [-l] [-S sess] [--session-list]\n\na CLI Swiss Army Knife for ChatGPT\n\npositional arguments:\n  query                            Query to send to chat GPT\n\noptions:\n  -h, --help                       show this help message and exit\n  --openai-api-key key             the OpenAI API key can also be set as env variable OPENAI_API_KEY\n  --temperature t                  temperature (openai setting)\n  -c CHAT_GPT, --chat-gpt CHAT_GPT\n                                   chat GPT model 3.5/4 shorthand or full qualified model name, can also be set via env variable OPENAI_API_MODEL\n  -i, --interactive                start an interactive chat session. This will implicitly continue the conversation\n  -s, --stream                     Stream the incoming text to the terminal\n  -t, --tokens                     display what *would* be sent, how many tokens, and estimated costs\n  -p name, --prompt-file name      prompt name - will load the prompt with that name at ~/.config/chatblade/name or a path to a file\n\nresult formatting options:\n  -e, --extract                    extract content from response if possible (either json or code block)\n  -r, --raw                        print session as pure text, don't pretty print or format\n  -n, --no-format                  do not add pretty print formatting to output\n  -o, --only                       Only display the response, omit query\n  --theme theme                    Set the theme for syntax highlighting see https://pygments.org/styles/, can also be set with CHATBLADE_THEME\n\nsession options:\n  -l, --last                       alias for '-S last', the default session if none is specified\n  -S sess, --session sess          initiate or continue named session\n  --session-list                   list sessions\n  --session-path                   show path to session file\n  --session-dump                   dump session to stdout\n  --session-delete                 delete session\n  --session-rename newsess         rename session\n```"
}
