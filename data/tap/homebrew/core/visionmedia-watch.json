{
  "name": "visionmedia-watch",
  "full_name": "visionmedia-watch",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Periodically executes the given command",
  "license": "MIT",
  "homepage": "https://github.com/tj/watch",
  "versions": {
    "stable": "0.4.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/tj/watch/archive/0.4.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "d37ead189a644661d219b566170122b80d44f235c0df6df71b2b250f3b412547"
    },
    "head": {
      "url": "https://github.com/tj/watch.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/visionmedia-watch/blobs/sha256:483b9ff4d88bc672f1fbdaeecabda4c664f392efed8077af088449b5be541048",
          "sha256": "483b9ff4d88bc672f1fbdaeecabda4c664f392efed8077af088449b5be541048"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/visionmedia-watch/blobs/sha256:40495ba873ac4427ecab5da7d30a23594efd23d27b26996045ba1a38c357f3ca",
          "sha256": "40495ba873ac4427ecab5da7d30a23594efd23d27b26996045ba1a38c357f3ca"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/visionmedia-watch/blobs/sha256:4df49e42fc91ffb6991b43ce81c7b9e7d7f261bac48c712aac427f7e61385f4d",
          "sha256": "4df49e42fc91ffb6991b43ce81c7b9e7d7f261bac48c712aac427f7e61385f4d"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/visionmedia-watch/blobs/sha256:62cb611c93b182fddcfdb54a2e1053b1c1a8140046dca0f9737269d60bed5be6",
          "sha256": "62cb611c93b182fddcfdb54a2e1053b1c1a8140046dca0f9737269d60bed5be6"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/visionmedia-watch/blobs/sha256:f749ac37533097322fc34e946c16eb286a3eee82ac4d36125ebe29dc39f0c4e5",
          "sha256": "f749ac37533097322fc34e946c16eb286a3eee82ac4d36125ebe29dc39f0c4e5"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/visionmedia-watch/blobs/sha256:9df96f9ac4ae658f41cc25dbbb863f1a9974cbe28cb0ef7b8efbb54751fd41cb",
          "sha256": "9df96f9ac4ae658f41cc25dbbb863f1a9974cbe28cb0ef7b8efbb54751fd41cb"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/visionmedia-watch/blobs/sha256:8a8d2389c8d830b692fdb2431a6414bfa68e80575b5cf303b81fc04ba851e5c8",
          "sha256": "8a8d2389c8d830b692fdb2431a6414bfa68e80575b5cf303b81fc04ba851e5c8"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/visionmedia-watch/blobs/sha256:8cb94f6e2c5faca9161daf2f8332862c7130ef2ac82f7b8258f5d927f40f5b11",
          "sha256": "8cb94f6e2c5faca9161daf2f8332862c7130ef2ac82f7b8258f5d927f40f5b11"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/visionmedia-watch/blobs/sha256:1dcfe8e94d71a7fd667ce896127b665675c2a4d18f04c8c3d317efe50e5ae68f",
          "sha256": "1dcfe8e94d71a7fd667ce896127b665675c2a4d18f04c8c3d317efe50e5ae68f"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [
    "watch"
  ],
  "conflicts_with_reasons": [
    null
  ],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/visionmedia-watch.rb",
  "ruby_source_checksum": {
    "sha256": "474be9eeff182e67faebc99d0ddf955c85c97cc062442786ad2827c90a78ec4b"
  },
  "date_added": "2013-06-30T08:49:30-07:00",
  "readme": "\n# Watch\n\n  A tiny C program used to periodically execute a command.\n\n## Usage\n\n```\n\nUsage: watch [options] <cmd>\n\nOptions:\n\n  -q, --quiet           only output stderr\n  -x, --halt            halt on failure\n  -i, --interval <n>    interval in seconds or ms defaulting to 1\n  -c, --clear           clear the screen between iterations\n  -v, --version         output version number\n  -h, --help            output this help information\n\n```\n\n## Installation\n\n```\n$ make install\n```\n\nOr in your local bin (`~/bin`)\n\n```\n$ PREFIX=~ make install\n```\n\n## About\n\n  This project is very similar to original [watch(1)](http://linux.die.net/man/1/watch) implemented in 1991, differences include:\n\n  - ansi escape sequences (colors etc)\n  - terminal is not cleared (unless `--clear` is provided)\n  - lower default interval of 1s\n  - millisecond interval resolution\n\n## Milliseconds resolution\n\n This version of `watch(1)` support millisecond resolution\n with the `ms` suffix:\n\n```\n$ watch -i 300ms echo hey\n```\n\nwhereas `300` would be seconds:\n\n```\n$ watch -i 300 echo hey\n```\n\n## Examples\n\n Watch is pretty handy, here are a few use-cases:\n\n### Running tests\n\n  Ad-hoc mtime watchers are annoying to construct,\n  and have relatively no purpose when you can simply\n  execute your tests at a regular interval. For example\n  run `watch(1)` as a job, running tests each second (or a \n  second after the program exits):\n\n```\n$ watch make test &\n[1] 3794\n✔ bifs.components\n✔ bifs.dark\n✔ bifs.darken\n✔ bifs.image-size\n...\n```\n\n Your tests will happily chug away, when you want to\n stop watch simply foreground the job and ^C:\n \n```\n$ fg\n```\n\n### Auto-build CSS / JS etc\n\n Need to build CSS or JavaScript dependencies? use a _Makefile_. With the large quantity of copy-cats (Rake,Jake,Sake,Cake...) people seem to be forgetting that Make is awesome, if you take a little bit of time to learn it you'll love it (or at least most of it). Make will utilize `mtime` and only build what's necessary, this is _great_.\n\n Let's say we had some Jade templates, even some nested in sub-directories, we could list them in a _Makefile_ quite easily.\n \n Below __JADE__ is a list constructed by the shell command `find templates -name \"*.jade\"`, which is usually a lot easier to manage than listing these files manually, which is also valid, and sometimes important of ordering is relevant. Following that we have __HTML__ which simply substitutes \".jade\" with \".html\", giving us our HTML targets. \n\n```make\nJADE = $(shell find templates -name \"*.jade\")\nHTML = $(JADE:.jade=.html)\n```\n\n Our first target is `all`, becoming the default target for `make`. On the right-hand side of this we specify the dependencies, which in this case is a list of all of our HTML files, not yet built. Make will see this and execute the `%.html` targets, which allows use to use the `jade(1)` executable to translate the dependency on the right of `:`, to the target on the left. \n\n```make\nJADE = $(shell find templates -name \"*.jade\")\nHTML = $(JADE:.jade=.html)\n\nall: $(HTML)\n\n%.html: %.jade\n\tjade < $< > $@\n```\n\n Now we can build all of these files with a single command `make`:\n\n```\n$ make\njade < templates/bar.jade > templates/bar.html\njade < templates/baz/raz.jade > templates/baz/raz.html\njade < templates/foo.jade > templates/foo.html\n```\n\n We can also add a `clean` pseudo-target to remove the compiled files with `make clean`. Here it's listed to the right of `.PHONY:`, telling make that it does not expect a file named `./clean` on the fs, so it wont compare mtimes etc. Make is smart about re-executing these actions, if you `make` again you'll notice that since none of the dependencies have changed it'll simply tell you \"make: Nothing to be done for `all'.\".\n\n```make\nJADE = $(shell find templates -name \"*.jade\")\nHTML = $(JADE:.jade=.html)\n\nall: $(HTML)\n\n%.html: %.jade\n\tjade < $< > $@\n\nclean:\n\trm -f $(HTML)\n\n.PHONY: clean\n```\n\n  The one missing component is periodical action, which is where `watch(1)` or similar utilities come in, this functionality coupled with Make as a build system creates a powerful duo. "
}
