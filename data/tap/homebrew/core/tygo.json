{
  "name": "tygo",
  "full_name": "tygo",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Generate Typescript types from Golang source code",
  "license": "MIT",
  "homepage": "https://github.com/gzuidhof/tygo",
  "versions": {
    "stable": "0.2.5",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/gzuidhof/tygo.git",
      "tag": "v0.2.5",
      "revision": "5ca20f4df7f4154560450a6cf976696e4d1cf356",
      "checksum": null
    },
    "head": {
      "url": "https://github.com/gzuidhof/tygo.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tygo/blobs/sha256:788b1c0f5f0c7b86cb0092193b8a08a2c641488ba5b8428f13a19ea5cbf7062b",
          "sha256": "788b1c0f5f0c7b86cb0092193b8a08a2c641488ba5b8428f13a19ea5cbf7062b"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tygo/blobs/sha256:788b1c0f5f0c7b86cb0092193b8a08a2c641488ba5b8428f13a19ea5cbf7062b",
          "sha256": "788b1c0f5f0c7b86cb0092193b8a08a2c641488ba5b8428f13a19ea5cbf7062b"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tygo/blobs/sha256:788b1c0f5f0c7b86cb0092193b8a08a2c641488ba5b8428f13a19ea5cbf7062b",
          "sha256": "788b1c0f5f0c7b86cb0092193b8a08a2c641488ba5b8428f13a19ea5cbf7062b"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tygo/blobs/sha256:8f3f74f0031597742eb5e3def14a88167e66f735cf48cfe1fa60d8454d897f62",
          "sha256": "8f3f74f0031597742eb5e3def14a88167e66f735cf48cfe1fa60d8454d897f62"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tygo/blobs/sha256:8f3f74f0031597742eb5e3def14a88167e66f735cf48cfe1fa60d8454d897f62",
          "sha256": "8f3f74f0031597742eb5e3def14a88167e66f735cf48cfe1fa60d8454d897f62"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tygo/blobs/sha256:8f3f74f0031597742eb5e3def14a88167e66f735cf48cfe1fa60d8454d897f62",
          "sha256": "8f3f74f0031597742eb5e3def14a88167e66f735cf48cfe1fa60d8454d897f62"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tygo/blobs/sha256:f34170b8825da73995176a822dff146df9113af0b621e292fb94059b31f18494",
          "sha256": "f34170b8825da73995176a822dff146df9113af0b621e292fb94059b31f18494"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [
    "go"
  ],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "982192bf852eebace6c92c1e792d894990b8620e",
  "ruby_source_path": "Formula/tygo.rb",
  "ruby_source_checksum": {
    "sha256": "00740e35c7638046a509d28587c5cff9a98136702a624fa02f36e2c2eecb5211"
  },
  "date_added": "2022-05-02T14:32:26+00:00",
  "readme": "# ðŸŽ‘ tygo\n\nTygo is a tool for generating Typescript typings from Golang source files that just works.\n\nIt preserves comments, understands constants and also supports non-struct `type` expressions. It's perfect for generating equivalent types for a Golang REST API to be used in your front-end codebase.\n\n**ðŸš€ Now supports Golang 1.18 generic types, struct inheritance**\n\n## Installation\n\n```shell\n# Go >= 1.17\ngo install github.com/gzuidhof/tygo@latest\n# Go < 1.17:\ngo install github.com/gzuidhof/tygo\n```\n\n## Example\n\n_Golang input file_\n\n```go\n// Comments are kept :)\ntype ComplexType map[string]map[uint16]*uint32\n\ntype UserRole = string\nconst (\n\tUserRoleDefault UserRole = \"viewer\"\n\tUserRoleEditor  UserRole = \"editor\" // Line comments are also kept\n)\n\ntype UserEntry struct {\n\t// Instead of specifying `tstype` we could also declare the typing\n\t// for uuid.NullUUID in the config file.\n\tID uuid.NullUUID `json:\"id\" tstype:\"string | null\"`\n\n\tPreferences map[string]struct {\n\t\tFoo uint32 `json:\"foo\"`\n\t\t// An unknown type without a `tstype` tag or mapping in the config file\n\t\t// becomes `any`\n\t\tBar uuid.UUID `json:\"bar\"`\n\t} `json:\"prefs\"`\n\n\tMaybeFieldWithStar *string  `json:\"address\"`\n\tNickname           string   `json:\"nickname,omitempty\"`\n\tRole               UserRole `json:\"role\"`\n\n\tComplex    ComplexType `json:\"complex\"`\n\tunexported bool        // Unexported fields are omitted\n\tIgnored    bool        `tstype:\"-\"` // Fields with - are omitted too\n}\n\ntype ListUsersResponse struct {\n\tUsers []UserEntry `json:\"users\"`\n}\n```\n\n_Typescript output_\n\n```typescript\n/**\n * Comments are kept :)\n */\nexport type ComplexType = {\n  [key: string]: {\n    [key: number /* uint16 */]: number /* uint32 */ | undefined;\n  };\n};\nexport type UserRole = string;\nexport const UserRoleDefault: UserRole = \"viewer\";\nexport const UserRoleEditor: UserRole = \"editor\"; // Line comments are also kept\nexport interface UserEntry {\n  /**\n   * Instead of specifying `tstype` we could also declare the typing\n   * for uuid.NullUUID in the config file.\n   */\n  id: string | null;\n  prefs: {\n    [key: string]: {\n      foo: number /* uint32 */;\n      /**\n       * An unknown type without a `tstype` tag or mapping in the config file\n       * becomes `any`\n       */\n      bar: any /* uuid.UUID */;\n    };\n  };\n  address?: string;\n  nickname?: string;\n  role: UserRole;\n  complex: ComplexType;\n}\nexport interface ListUsersResponse {\n  users: UserEntry[];\n}\n```\n\nFor a real baptism by fire example, [here is a Gist with output for the Go built-in `net/http` and `time` package](https://gist.github.com/gzuidhof/7e192a2f33d8a4f5bde5b77fb2c5048c).\n\n## Usage\n\n### Option A: CLI (recommended)\n\nCreate a file `tygo.yaml` in which you specify which packages are to be converted and any special type mappings you want to add.\n\n```yaml\npackages:\n  - path: \"github.com/gzuidhof/tygo/examples/bookstore\"\n    type_mappings:\n      time.Time: \"string /* RFC3339 */\"\n      null.String: \"null | string\"\n      null.Bool: \"null | boolean\"\n      uuid.UUID: \"string /* uuid */\"\n      uuid.NullUUID: \"null | string /* uuid */\"\n```\n\nThen run\n\n```shell\ntygo generate\n```\n\nThe output Typescript file will be next to the Go source files.\n\n### Option B: Library-mode\n\n```go\nconfig := &tygo.Config{\n  Packages: []*tygo.PackageConfig{\n      &tygo.PackageConfig{\n          Path: \"github.com/gzuidhof/tygo/examples/bookstore\",\n      },\n  },\n}\ngen := tygo.New(config)\nerr := gen.Generate()\n```\n\n## Config\n\n```yaml\n# You can specify more than one package\npackages:\n  # The package path just like you would import it in Go\n  - path: \"github.com/my/package\"\n\n    # Where this output should be written to.\n    # If you specify a folder it will be written to a file `index.ts` within that folder. By default it is written into the Golang package folder.\n    output_path: \"webapp/api/types.ts\"\n\n    # Customize the indentation (use \\t if you want tabs)\n    indent: \"    \"\n\n    # Specify your own custom type translations, useful for custom types, `time.Time` and `null.String`.\n    # Be default unrecognized types will be `any`.\n    type_mappings:\n      time.Time: \"string\"\n      my.Type: \"SomeType\"\n\n    # This content will be put at the top of the output Typescript file, useful for importing custom types.\n    frontmatter: |\n      \"import {SomeType} from \"../lib/sometype.ts\"\n\n    # Filenames of Go source files that should not be included\n    # in the output.\n    exclude_files:\n      - \"private_stuff.go\"\n```\n\nSee also the source file [tygo/config.go](./tygo/config.go).\n\n## Type hints through tagging\n\nYou can tag struct fields with `tstype` to specify their output Typescript type.\n\n### Custom type mapping\n\n```golang\n// Golang input\n\ntype Book struct {\n\tTitle    string    `json:\"title\"`\n\tGenre    string    `json:\"genre\" tstype:\"'novel' | 'crime' | 'fantasy'\"`\n}\n```\n\n```typescript\n// Typescript output\n\nexport interface Book {\n  title: string;\n  genre: \"novel\" | \"crime\" | \"fantasy\";\n}\n```\n\n**Alternative**\n\nYou could use the `frontmatter` field in the config to inject `export type Genre = \"novel\" | \"crime\" | \"fantasy\"` at the top of the file, and use `tstype:\"Genre\"`. I personally prefer that as we may use the `Genre` type more than once.\n\n### Required fields\n\nPointer type fields usually become optional in the Typescript output, but sometimes you may want to require it regardless.\n\nYou can add `,required` to the `tstype` tag to mark a pointer type as required.\n\n```golang\n// Golang input\ntype Nicknames struct {\n\tAlice   *string `json:\"alice\"`\n\tBob     *string `json:\"bob\" tstype:\"BobCustomType,required\"`\n\tCharlie *string `json:\"charlie\" tstype:\",required\"`\n}\n```\n\n```typescript\n// Typescript output\nexport interface Nicknames {\n  alice?: string;\n  bob: BobCustomType;\n  charlie: string;\n}\n```\n\n### Readonly fields\n\nSometimes a field should be immutable, you can add `,readonly` to the `tstype` tag to mark a field as `readonly`.\n\n```golang\n// Golang input\ntype Cat struct {\n\tName    string `json:\"name,readonly\"`\n\tOwner   string `json:\"owner\"`\n}\n```\n\n```typescript\n// Typescript output\nexport interface Cat {\n  readonly name: string;\n  owner: string;\n}\n```\n\n## Inheritance\n\nTygo supports interface inheritance. To extend an `inlined` struct, use the tag `tstype:\",extends\"` on struct fields you wish to extend. Only `struct` types can be extended.\n\nStruct pointers are optionally extended using `Partial<MyType>`. To mark these structs as required, use the tag `tstype:\",extends,required\"`.\n\nNamed `struct fields` can also be extended.\n\nExample usage [here](examples/inheritance)\n\n```go\n// Golang input\nimport \"example.com/external\"\n\ntype Base struct {\n\tName string `json:\"name\"`\n}\n\ntype Base2[T string | int] struct {\n\tID T `json:\"id\"`\n}\n\ntype OptionalPtr struct {\n\tField string `json:\"field\"`\n}\n\ntype Other[T int] struct {\n\t*Base                  `       tstype:\",extends,required\"`\n\tBase2[T]               `       tstype:\",extends\"`\n\t*OptionalPtr           `       tstype:\",extends\"`\n\texternal.AnotherStruct `       tstype:\",extends\"`\n\tOtherValue             string `                  json:\"other_value\"`\n}\n```\n\n```typescript\n// Typescript output\nexport interface Base {\n  name: string;\n}\n\nexport interface Base2<T extends string | number /* int */> {\n  id: T;\n}\n\nexport interface OptionalPtr {\n  field: string;\n}\n\nexport interface Other<T extends number /* int */>\n  extends Base,\n    Base2<T>,\n    Partial<OptionalPtr>,\n    external.AnotherStruct {\n  other_value: string;\n}\n```\n\n## Generics\n\nTygo supports generic types (Go version >= 1.18) out of the box.\n\n```go\n// Golang input\ntype UnionType interface {\n\tuint64 | string\n}\n\ntype ABCD[A, B string, C UnionType, D int64 | bool] struct {\n\tA A `json:\"a\"`\n\tB B `json:\"b\"`\n\tC C `json:\"c\"`\n\tD D `json:\"d\"`\n}\n```\n\n```typescript\n// Typescript output\nexport type UnionType = number /* uint64 */ | string;\n\nexport interface ABCD<\n  A extends string,\n  B extends string,\n  C extends UnionType,\n  D extends number /* int64 */ | boolean\n> {\n  a: A;\n  b: B;\n  c: C;\n  d: D;\n}\n```\n\n## YAML support\n\nTygo supports generating typings for YAML-serializable objects that can be understood by Go apps.\nBy default, Tygo will respect `yaml` Go struct tags, in addition to `json`, but it will not apply any transformations to untagged fields.\nHowever, the default behavior of the popular `gopkg.in/yaml.v2` package for Go structs without tags is to downcase the struct field names.\nTo emulate this behavior, one can use the `flavor` configuration option:\n\n```yaml\npackages:\n  - path: \"github.com/my/package\"\n    output_path: \"webapp/api/types.ts\"\n    flavor: \"yaml\"\n```\n\n```go\n// Golang input\ntype Foo struct {\n\tTaggedField string `yaml:\"custom_field_name_in_yaml\"`\n    UntaggedField string\n}\n```\n\n```typescript\n// Typescript output\nexport interface Foo {\n  custom_field_name_in_yaml: string;\n  untaggedfield: string;\n}\n```\n\n## Related projects\n\n- [**typescriptify-golang-structs**](https://github.com/tkrajina/typescriptify-golang-structs): Probably the most popular choice. The downside of this package is that it relies on reflection rather than parsing, which means that certain things can't be kept such as comments without adding a bunch of tags to your structs. The CLI generates a Go file which is then executed and reflected on, and its library requires you to manually specify all types that should be converted.\n- [**go2ts**](https://github.com/StirlingMarketingGroup/go2ts): A transpiler with a web interface, this project was based off this project. It's perfect for quick one-off transpilations. There is no CLI, no support for `const` and there are no ways to customize the output.\n\nIf this repository was useful for your project, consider leaving a star.\n\n## License\n\n[MIT](./LICENSE)"
}
