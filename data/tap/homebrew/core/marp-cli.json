{
  "name": "marp-cli",
  "full_name": "marp-cli",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Easily convert Marp Markdown files into static HTML/CSS, PDF, PPT and images",
  "license": "MIT",
  "homepage": "https://github.com/marp-team/marp-cli",
  "versions": {
    "stable": "3.1.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://registry.npmjs.org/@marp-team/marp-cli/-/marp-cli-3.1.0.tgz",
      "tag": null,
      "revision": null,
      "checksum": "b6bd44ccd6cae0ce9f17a748f57908ad66d27e061c5dc8b1e904880b25551412"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/marp-cli/blobs/sha256:06b6f829df44233aa39d014e6002d6c2f5fc2e23878b401c68c8fecac6626520",
          "sha256": "06b6f829df44233aa39d014e6002d6c2f5fc2e23878b401c68c8fecac6626520"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/marp-cli/blobs/sha256:06b6f829df44233aa39d014e6002d6c2f5fc2e23878b401c68c8fecac6626520",
          "sha256": "06b6f829df44233aa39d014e6002d6c2f5fc2e23878b401c68c8fecac6626520"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/marp-cli/blobs/sha256:06b6f829df44233aa39d014e6002d6c2f5fc2e23878b401c68c8fecac6626520",
          "sha256": "06b6f829df44233aa39d014e6002d6c2f5fc2e23878b401c68c8fecac6626520"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/marp-cli/blobs/sha256:4b9d6c2374612bf8a3101849655478f57bd55ee52f89ea9c337e315708f3ddf2",
          "sha256": "4b9d6c2374612bf8a3101849655478f57bd55ee52f89ea9c337e315708f3ddf2"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/marp-cli/blobs/sha256:4b9d6c2374612bf8a3101849655478f57bd55ee52f89ea9c337e315708f3ddf2",
          "sha256": "4b9d6c2374612bf8a3101849655478f57bd55ee52f89ea9c337e315708f3ddf2"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/marp-cli/blobs/sha256:4b9d6c2374612bf8a3101849655478f57bd55ee52f89ea9c337e315708f3ddf2",
          "sha256": "4b9d6c2374612bf8a3101849655478f57bd55ee52f89ea9c337e315708f3ddf2"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/marp-cli/blobs/sha256:275efc8ae6bd63ec3a658e088d9d6323cc4cb06d3279967779fc92241efd2a78",
          "sha256": "275efc8ae6bd63ec3a658e088d9d6323cc4cb06d3279967779fc92241efd2a78"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "node"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/marp-cli.rb",
  "ruby_source_checksum": {
    "sha256": "a69e71494dec3bb6604b4cce907d139cca4c0d5749609147411f012ee08b82a1"
  },
  "date_added": "2021-05-20T23:13:59+00:00",
  "readme": "# @marp-team/marp-cli\n\n[![CircleCI](https://img.shields.io/circleci/project/github/marp-team/marp-cli/main.svg?style=flat-square&logo=circleci)](https://circleci.com/gh/marp-team/marp-cli/)\n[![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/marp-team/marp-cli/test-win.yml?branch=main&style=flat-square&logo=github)](https://github.com/marp-team/marp-cli/actions?query=workflow%3A%22Test+for+Windows%22+branch%3Amain)\n[![Codecov](https://img.shields.io/codecov/c/github/marp-team/marp-cli/main.svg?style=flat-square&logo=codecov)](https://codecov.io/gh/marp-team/marp-cli)\n[![npm](https://img.shields.io/npm/v/@marp-team/marp-cli.svg?style=flat-square&logo=npm)](https://www.npmjs.com/package/@marp-team/marp-cli)\n[![Docker](https://img.shields.io/docker/pulls/marpteam/marp-cli.svg?logo=docker&style=flat-square)](https://hub.docker.com/r/marpteam/marp-cli/)\n[![LICENSE](https://img.shields.io/github/license/marp-team/marp-cli.svg?style=flat-square)](./LICENSE)\n\n**A CLI interface, for [Marp](https://github.com/marp-team/marp)** (using [@marp-team/marp-core](https://github.com/marp-team/marp-core)) and any slide deck converter based on [Marpit](https://marpit.marp.app/) framework.\n\nIt can convert Marp / Marpit Markdown files into static HTML / CSS, PDF, PowerPoint document, and image(s) easily.\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/marp-team/marp-cli/main/docs/images/marp-cli.gif\" />\n</p>\n\n## Try it now!\n\n### npx\n\n[npx (`npm exec`)](https://docs.npmjs.com/cli/v7/commands/npx) is the best way to use the latest Marp CLI if you wanted\none-shot Markdown conversion _without install_. Just run below if you have\ninstalled [Node.js](https://nodejs.org/) v16 and later.\n\n```bash\n# Convert slide deck into HTML\nnpx @marp-team/marp-cli@latest slide-deck.md\nnpx @marp-team/marp-cli@latest slide-deck.md -o output.html\n\n# Convert slide deck into PDF\nnpx @marp-team/marp-cli@latest slide-deck.md --pdf\nnpx @marp-team/marp-cli@latest slide-deck.md -o output.pdf\n\n# Convert slide deck into PowerPoint document (PPTX)\nnpx @marp-team/marp-cli@latest slide-deck.md --pptx\nnpx @marp-team/marp-cli@latest slide-deck.md -o output.pptx\n\n# Watch mode\nnpx @marp-team/marp-cli@latest -w slide-deck.md\n\n# Server mode (Pass directory to serve)\nnpx @marp-team/marp-cli@latest -s ./slides\n```\n\n> :information_source: You have to install [Google Chrome]<!--, [Chromium], --> or [Microsoft Edge] to convert slide deck into PDF, PPTX, and image(s).\n\n[google chrome]: https://www.google.com/chrome/\n[chromium]: https://www.chromium.org/\n[microsoft edge]: https://www.microsoft.com/edge\n\n### Docker\n\nDon't you like installing Node.js and Chrome to local? We have [an official Docker image `marpteam/marp-cli`][marp-cli-docker] ready to use CLI.\n\n[Please refer how to use at Docker Hub.][marp-cli-docker]\n\n[marp-cli-docker]: https://hub.docker.com/r/marpteam/marp-cli/\n\n## Install\n\n### Use package manager\n\nYou can use the package manager to install and update Marp CLI easily.\n\n_Disclaimer: Package manifests are maintained by the community, not Marp team._\n\n<!-- For contributors: For contributors: This section describes only package managers that Marp manifest has been actively maintained. Each tools are following update within a few days of the latest CLI update. -->\n\n#### macOS: **[Homebrew](https://brew.sh/)**\n\n```bash\nbrew install marp-cli\n```\n\n<!-- https://github.com/Homebrew/homebrew-core/blob/master/Formula/marp-cli.rb -->\n\n#### Windows: **[Scoop](https://scoop.sh/)**\n\n```cmd\nscoop install marp\n```\n\n<!-- https://github.com/ScoopInstaller/Main/blob/master/bucket/marp.json -->\n\n### Local installation\n\nWe recommend to install Marp CLI into your Node.js project. You may control the CLI version (and engine if you want) exactly.\n\n> :information_source: Marp CLI is working only with [actively supported Node.js versions](https://endoflife.date/nodejs), so Node.js v16 and later is required when installing into your Node.js project.\n\n```bash\nnpm install --save-dev @marp-team/marp-cli\n```\n\nThe installed `marp` command is available in [npm-scripts](https://docs.npmjs.com/misc/scripts) or `npx marp`.\n\n#### Global installation\n\nYou can install with `-g` option if you want to use `marp` command globally.\n\n```bash\nnpm install -g @marp-team/marp-cli\n```\n\n### [Standalone binary][releases]\n\nWe also provide standalone binaries for Linux, macOS, and Windows. These have bundled Marp CLI with Node.js binary, so no need to install Node.js separately.\n\n**[:fast_forward: Download the latest standalone binary from release page.][releases]**\n\n[releases]: https://github.com/marp-team/marp-cli/releases\n\n## Basic usage\n\n### Convert to HTML\n\nThe passed markdown will be converted to HTML file by default. In the below example, a converted `slide-deck.html` will output to the same directory.\n\n```bash\nmarp slide-deck.md\n```\n\nYou can change the output path by `--output` (`-o`) option.\n\n```bash\nmarp slide-deck.md -o output.html\n```\n\nMarp CLI supports converting multiple files by passing multiple paths, directories, and glob patterns. In this case, `--output` option cannot use.\n\nWhen you want to output the converted result to another directory with keeping the origin directory structure, you can use `--input-dir` (`-I`) option. `--output` option would be available for specify the output directory.\n\n### Convert to PDF (`--pdf`)\n\nIf you passed `--pdf` option or the output filename specified by `--output` (`-o`) option ends with `.pdf`, Marp CLI will try to convert Markdown into PDF file through the browser.\n\n```bash\nmarp --pdf slide-deck.md\nmarp slide-deck.md -o converted.pdf\n```\n\nAll kind of conversions except HTML _require to install [Google Chrome]<!--, [Chromium]-->, [Microsoft Edge], or [Chromium] (flavored) browser._ When an unexpected problem has occurred while converting, please update your browser to the latest version or try installing [Google Chrome Canary].\n\n[google chrome canary]: https://www.google.com/chrome/canary/\n\n> :information_source: If you want to use Chromium or flavored browsers to convert, you have to specify the path to the browser binary through `CHROME_PATH` environment variable. For example: `CHROME_PATH=$(which brave) marp --pdf slide-deck.md`\n\n#### PDF output options\n\n- **`--pdf-notes`**: Add PDF note annotations to the lower left when the slide page has [Marpit presenter notes].\n- **`--pdf-outlines`**: Add PDF outlines/bookmarks.\n\n`--pdf-outlines` will make outlines based on slide pages and Markdown headings by default. If necessary, you may prevent making outlines from one of them, by setting `--pdf-outlines.pages=false` or `--pdf-outlines.headings=false`.\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/marp-team/marp-cli/main/docs/images/pdf-output-options.png\" width=\"500\" />\n</p>\n\n[marpit presenter notes]: https://marpit.marp.app/usage?id=presenter-notes\n\n### Convert to PowerPoint document (`--pptx`)\n\nDo you want more familiar way to present and share your deck? PPTX conversion to create PowerPoint document is available by passing `--pptx` option or specify the output path with PPTX extension.\n\n```bash\nmarp --pptx slide-deck.md\nmarp slide-deck.md -o converted.pptx\n```\n\nA created PPTX includes rendered Marp slide pages and the support of [Marpit presenter notes]. It can open with PowerPoint, Keynote, Google Slides, LibreOffice Impress, and so on...\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/marp-team/marp-cli/main/docs/images/pptx.png\" height=\"300\" />\n</p>\n\n> :information_source: A converted PPTX consists of pre-rendered images. Please note that contents would not be able to modify or re-use in PowerPoint.\n\n### Convert to PNG/JPEG image(s)\n\n#### Multiple images (`--images`)\n\nYou can convert the slide deck into multiple images when specified `--images [png|jpeg]` option.\n\n```bash\n# Convert into multiple PNG image files\nmarp --images png slide-deck.md\n\n# Convert into multiple JPEG image files\nmarp --images jpeg slide-deck.md\n```\n\nOutput files have a suffix of page number, like `slide-deck.001.png`, `slide-deck.002.png`, and so on.\n\n#### Title slide (`--image`)\n\nWhen you passed `--image` option or specified the output path with PNG/JPEG extension, Marp CLI will convert _only the first page (title slide)_ of the targeted slide deck into an image.\n\n```bash\n# Convert the title slide into an image\nmarp --image png slide-deck.md\nmarp slide-deck.md -o output.png\n```\n\nIt would be useful for creating [Open Graph] image that can specify with [`image` global directive and `--og-image` option](#metadata).\n\n#### Scale factor\n\nYou can set the scale factor for rendered image(s) through `--image-scale` option. It is useful for making high-resolution image from the slide.\n\n```bash\n# Generate high-resolution image of the title slide\nmarp slide-deck.md -o title-slide@2x.png --image-scale 2\n```\n\n> :information_source: `--image-scale` is not affect to the actual size of presentation.\n>\n> It is also available for PPTX conversion. By default, Marp CLI will use `2` as the default scale factor in PPTX to suppress deterioration of slide rendering in full-screen presentation.\n\n### Export presenter notes (`--notes`)\n\nYou can export [presenter notes][marpit presenter notes] in Marp / Marpit Markdown as a text file by using `--notes` option or specifying the output path with TXT extension.\n\n```bash\n# Export presenter notes as a text\nmarp --notes slide-deck.md\nmarp slide-deck.md -o output.txt\n```\n\n### Security about local files\n\nBecause of [the security reason](https://github.com/marp-team/marp-cli/pull/10#user-content-security), **PDF, PPTX and image(s) conversion cannot use local files by default.**\n\nMarp CLI would output incompleted result with warning if the blocked local file accessing is detected. We recommend uploading your assets to online.\n\nIf you really need to use local files in these conversion, `--allow-local-files` option helps to find your local files. _Please use only to the trusted Markdown because there is a potential security risk._\n\n```bash\nmarp --pdf --allow-local-files slide-deck.md\n```\n\n## Conversion modes\n\n### Watch mode (`--watch` / `-w`) <a name=\"watch-mode\"></a>\n\nMarp CLI will observe a change of Markdown and using theme CSS when passed with `--watch` (`-w`) option. The conversion will be triggered whenever the content of file is updated.\n\nWhile you are opening the converted HTML in browser, it would refresh the opened page automatically.\n\n### Server mode (`--server` / `-s`)\n\nServer mode supports on-demand conversion by HTTP request. We require to pass `--server` (`-s`) option and a directory to serve.\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/marp-team/marp-cli/main/docs/images/server-mode.gif\" />\n</p>\n\nIn this mode, the converted file outputs as the result of accessing to server, and not to disk. You can set the server port by setting the environment variable `PORT`, for example `PORT=5000 marp -s ./slides` would listen on port number 5000.\n\nYou would get the converted PDF, PPTX, PNG, and JPEG by adding corresponded query string when requesting. e.g. `http://localhost:8080/deck-a.md?pdf` returns converted PDF.\n\n#### `index.md` / `PITCHME.md`\n\nMarp CLI server will provide the list of served files by default, but you can place the default Markdown deck like a common web server's `index.html`.\n\nPlace Markdown named `index.md` or `PITCHME.md` ([GitPitch style](https://gitpitch.github.io/gitpitch/#/conventions/pitchme-md)) to served directory. It would be redirected just accessing to `http://localhost:8080/`.\n\n### Preview window (`--preview` / `-p`)\n\nWhen conversions were executed together with `--preview` (`-p`) option, Marp CLI will open preview window(s) to check the converted result immediately.\n\nUnlike opening with browser, you may present deck with the immersive window.\n[Watch mode](#watch-mode) is automatically enabled while using preview window.\n\n> :information_source: `--preview` option cannot use when you are using Marp CLI through official docker image.\n\n## Template\n\nYou can choose a built-in HTML templates by `--template` option. Default template is `bespoke`.\n\n```bash\nmarp --template bespoke slide-deck.md\n```\n\n### `bespoke` template (default)\n\nThe `bespoke` template is using [Bespoke.js](https://github.com/bespokejs/bespoke) as the name implies. It has several features to be useful in a real presentation. A few features may control by CLI options.\n\n#### Features\n\n- **Navigation**: Navigate the deck through keyboard and swipe geasture.\n- **Fullscreen**: Toggle fullscreen by hitting <kbd>f</kbd> / <kbd>F11</kbd> key.\n- **On-screen controller**: There is a touch-friendly OSC. You may also disable by `--bespoke.osc=false` if unneccesary.\n- **Fragmented list**: Recognize [Marpit's fragmented list](https://github.com/marp-team/marpit/issues/145) and appear list one-by-one if used `*` and `1)` as the bullet marker.\n- **Presenter view**: Open presenter view in external window by hitting <kbd>p</kbd> key.\n- **Progress bar** (optional): By setting `--bespoke.progress` option, you can add a progress bar on the top of the deck.\n- [**Slide transitions**][transitions]: Support transitions (`transition` local directive) powered by [View Transitions API].\n\n[transitions]: ./docs/bespoke-transitions/README.md\n[view transitions api]: https://www.w3.org/TR/css-view-transitions-1/\n\n> ℹ️ Presenter view may be disabled if [the browser restricted using localStorage](https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API#Feature-detecting_localStorage) (e.g. Open HTML in the old Safari with private browsing, or open the _local_ HTML file with Chrome that has blocked 3rd party cookies in `chrome://settings/content/cookies`).\n\n#### Docs\n\n- **[Slide transitions in `bespoke` template][transitions]**<br />\n  Learn all about of slide transitions for `bespoke` template: Built-in transitions, custom transitions, and morphing animations.\n\n<p align=\"center\">\n  <a href=\"./docs/bespoke-transitions/README.md\">\n    <img src=\"https://raw.githubusercontent.com/marp-team/marp-cli/main/docs/bespoke-transitions/images/morphing-animation.gif\" width=\"320\" />\n  </a>\n</p>\n\n### `bare` template\n\nThe `bare` template is a primitive template, and there is no extra features. It only has minimum assets to give your presentation with browser.\n\n#### Zero-JS slide deck\n\nWhen [the conversion engine is changed to Marpit framework by setting `engine` option](#use-marpit-framework), _it would not use any scripts._ Even then, it has enough to use for the browser-based presentation.\n\n```bash\nmarp --template bare --engine @marp-team/marpit slide-deck.md\n```\n\n## Metadata\n\nThrough [global directives] or CLI options, you can set metadata for a converted HTML, PDF, and PPTX slide deck.\n\n| [Global directives] |   CLI option    | Description                     | Available in    |\n| :-----------------: | :-------------: | :------------------------------ | :-------------- |\n|       `title`       |    `--title`    | Define title of the slide deck  | HTML, PDF, PPTX |\n|    `description`    | `--description` | Define description of the slide | HTML, PDF, PPTX |\n|      `author`       |   `--author`    | Define author of the slide deck | HTML, PDF, PPTX |\n|     `keywords`      |  `--keywords`   | Define comma-separated keywords | HTML, PDF       |\n|        `url`        |     `--url`     | Define [canonical URL] \\*       | HTML            |\n|       `image`       |  `--og-image`   | Define [Open Graph] image URL   | HTML            |\n\n> \\*: If could not parse a specified value as valid, the URL will be ignored.\n\n[canonical url]: https://en.wikipedia.org/wiki/Canonical_link_element\n[open graph]: http://ogp.me/\n\n### By [global directives]\n\nMarp CLI supports _additional [global directives]_ to specify metadata in Markdown. You can define meta values in Markdown front-matter.\n\n```markdown\n---\ntitle: Marp slide deck\ndescription: An example slide deck created by Marp CLI\nauthor: Yuki Hattori\nkeywords: marp,marp-cli,slide\nurl: https://marp.app/\nimage: https://marp.app/og-image.jpg\n---\n\n# Marp slide deck\n```\n\n[global directives]: https://marpit.marp.app/directives?id=global-directives-1\n\n### By CLI option\n\nMarp CLI prefers CLI option to global directives. You can override metadata values by `--title`, `--description`, `--author`, `--keywords`, `--url`, and `--og-image`.\n\n## Theme\n\n### Override theme\n\nYou can override theme you want to use by `--theme` option. For example to use [Gaia](https://github.com/marp-team/marp-core/tree/main/themes#gaia) built-in theme in Marp Core:\n\n```bash\nmarp --theme gaia\n```\n\n### Use custom theme\n\nA custom theme created by user also can use easily by passing the path of CSS file.\n\n```bash\nmarp --theme custom-theme.css\n```\n\n> :information_source: Normally [Marpit theme CSS requires `@theme` meta comment](https://marpit.marp.app/theme-css?id=metadata), but it's not required in this usage.\n\n### Theme set\n\n`--theme-set` option has to specify theme set composed by multiple theme CSS files. The registed themes are usable in [Marpit's `theme` directive](https://marpit.marp.app/directives?id=theme).\n\n```bash\n# Multiple theme CSS files\nmarp --theme-set theme-a.css theme-b.css theme-c.css -- deck-a.md deck-b.md\n\n# Theme directory\nmarp --theme-set ./themes -- deck.md\n```\n\n## Engine\n\nMarp CLI is calling the [Marpit framework](https://marpit.marp.app/) based converter as \"Engine\". Normally we use the bundled [Marp Core](https://github.com/marp-team/marp-core), but you may swap the conversion engine to another Marpit based engine through `--engine` option.\n\nYou can use Marp (and compatible markdown-it) plugins while converting, or completely swap the converter to the other Marpit-based engine which published to npm.\n\n### Use Marpit framework\n\nFor example, you can convert Markdown with using the pure Marpit framework.\n\n```bash\n# Install Marpit framework\nnpm i @marp-team/marpit\n\n# Specify engine to use Marpit\nmarp --engine @marp-team/marpit marpit-deck.md\n```\n\nNotice that Marpit has not provided theme. It would be good to include inline style in Markdown, or pass CSS file by `--theme` option.\n\n> If you want to use the Marpit-based custom engine by the module name, the specified module must be exporting a class inherited from Marpit as the default export.\n\n### Functional engine\n\nWhen you specified the path to JavaScript file (`.js`, `.cjs`, or `.mjs`) in `--engine` option, you may use more customized engine by a JavaScript function.\n\n#### Spec\n\nThe functional engine should export a function as the default export, which should have a single argument representing [the constructor option of Marpit](https://marpit-api.marp.app/marpit)/[Marp Core](https://github.com/marp-team/marp-core#constructor-options).\n\nThe function must return a class inherited from Marpit, or an instance of Marpit-based engine made by the parameter passed by argument.\n\n```javascript\n// engine.mjs (ES modules)\nimport { MarpitBasedEngine } from 'marpit-based-engine'\n\nexport default () => MarpitBasedEngine // Return a class inherited from Marpit\n```\n\n```javascript\n// engine.cjs (CommonJS)\nconst { MarpitBasedEngine } = require('marpit-based-engine')\n\nmodule.exports = function (constructorOptions) {\n  // Return an instance of Marpit initialized by passed constructor options\n  return new MarpitBasedEngine(constructorOptions)\n}\n```\n\nThis function can return [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) object so you can use [async function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function) too.\n\n```javascript\nexport default async (constructorOptions) => {\n  const { MarpitBasedEngine } = await import('marpit-based-engine')\n  return new MarpitBasedEngine(constructorOptions)\n}\n```\n\n> :information_source: Currently ES Modules can resolve only when using Marp CLI via Node.js. [The standalone binary](#standalone-binary) cannot resolve ESM due to [vercel/pkg#1291](https://github.com/vercel/pkg/issues/1291).\n\n#### `marp` getter property\n\nMarp CLI also exposes `marp` getter property to the parameter. It returns a prepared instance of the built-in Marp Core engine, so you can apply several customizations to Marp engine with simple declarations.\n\n```javascript\nconst marpPlugin = require('marp-plugin-foo')\nconst andMorePlugin = require('marp-plugin-bar')\n\nmodule.exports = ({ marp }) => marp.use(marpPlugin).use(andMorePlugin)\n```\n\nIt allows converting Markdown with additional syntaxes that were provided by Marp (or compatible markdown-it) plugins.\n\n#### Example: [markdown-it-mark](https://github.com/markdown-it/markdown-it-mark)\n\n```javascript\n// engine.mjs\nimport markdownItMark from 'markdown-it-mark'\n\nexport default ({ marp }) => marp.use(markdownItMark)\n```\n\n```bash\n# Install markdown-it-mark into your project\nnpm i markdown-it-mark --save\n\n# Specify the path to functional engine\nmarp --engine ./engine.mjs slide-deck.md\n```\n\nThe customized engine will convert `==marked==` to `<mark>marked</mark>`.\n\n### Confirm engine version\n\nBy using `--version` (`-v`) option, you may confirm the version of engine that is expected to use in current configuration.\n\n```console\n$ marp --version\n@marp-team/marp-cli v1.x.x (w/ @marp-team/marp-core v2.x.x)\n```\n\n### Use specific version of Marp Core\n\nMarp CLI prefers to use _an installed core to local project by user_ than the bundled.\n\nIf the current project has installed `@marp-team/marp-core` individually, it would show its version and the annotation: `w/ user-installed @marp-team/marp-core vX.X.X` or `w/ customized engine`.\n\n```console\n$ npm i @marp-team/marp-cli @marp-team/marp-core@^3.2.0 --save-dev\n$ npx marp --version\n@marp-team/marp-cli v2.x.x (w/ user-installed @marp-team/marp-core v3.2.0)\n```\n\n## Configuration file\n\nMarp CLI can be configured options with file, such as `marp.config.js`, `marp.config.mjs` (ES Modules), `marp.config.cjs` (CommonJS), `.marprc` (JSON / YAML), and `marp` section of `package.json`.\n\nIt is useful to configure settings for the whole of project.\n\n```javascript\n// package.json\n{\n  \"marp\": {\n    \"inputDir\": \"./slides\",\n    \"output\": \"./public\",\n    \"themeSet\": \"./themes\"\n  }\n}\n```\n\n```yaml\n# .marprc.yml\nallowLocalFiles: true\noptions:\n  looseYAML: false\n  markdown:\n    breaks: false\npdf: true\n```\n\n```javascript\n// marp.config.mjs\nimport markdownItContainer from 'markdown-it-container'\n\nexport default {\n  // Customize engine on configuration file directly\n  engine: ({ marp }) => marp.use(markdownItContainer, 'custom'),\n}\n```\n\nBy default we use configuration file that is placed on current directory, but you may also specify the path for a configuration file by `--config-file` (`--config` / `-c`) option.\n\nIf you want to prevent looking up a configuration file, you can pass `--no-config-file` (`--no-config`) option.\n\n> :information_source: Currently ES Modules can resolve only when using Marp CLI via Node.js. [The standalone binary](#standalone-binary) cannot resolve ESM due to [vercel/pkg#1291](https://github.com/vercel/pkg/issues/1291).\n\n### Options\n\n| Key               |            Type             |        CLI option         | Description                                                                                                 |\n| :---------------- | :-------------------------: | :-----------------------: | :---------------------------------------------------------------------------------------------------------- |\n| `allowLocalFiles` |           boolean           |   `--allow-local-files`   | Allow to access local files from Markdown while converting PDF _(NOT SECURE)_                               |\n| `author`          |           string            |        `--author`         | Define author of the slide deck                                                                             |\n| `bespoke`         |           object            |                           | Setting options for `bespoke` template                                                                      |\n| ┗ `osc`           |           boolean           |      `--bespoke.osc`      | \\[Bespoke\\] Use on-screen controller (`true` by default)                                                    |\n| ┗ `progress`      |           boolean           |   `--bespoke.progress`    | \\[Bespoke\\] Use progress bar (`false` by default)                                                           |\n| ┗ `transition`    |           boolean           |  `--bespoke.transition`   | \\[Bespoke\\] Use [transitions] (Only in browsers supported [View Transitions API]: `true` by default)        |\n| `description`     |           string            |      `--description`      | Define description of the slide deck                                                                        |\n| `engine`          | string \\| Class \\| Function |        `--engine`         | Specify Marpit based engine                                                                                 |\n| `html`            |      boolean \\| object      |         `--html`          | Enable or disable HTML tags (Configuration file can pass [the whitelist object] if you are using Marp Core) |\n| `image`           |       `png` \\| `jpeg`       |         `--image`         | Convert the first slide page into an image file                                                             |\n| `images`          |       `png` \\| `jpeg`       |        `--images`         | Convert slide deck into multiple image files                                                                |\n| `imageScale`      |           number            |      `--image-scale`      | The scale factor for rendered images (`1` by default, or `2` for PPTX conversion)                           |\n| `inputDir`        |           string            |    `--input-dir` `-I`     | The base directory to find markdown and theme CSS                                                           |\n| `jpegQuality`     |           number            |     `--jpeg-quality`      | Setting JPEG image quality (`85` by default)                                                                |\n| `keywords`        |     string \\| string[]      |       `--keywords`        | Define keywords for the slide deck (Accepts comma-separated string and array of string)                     |\n| `lang`            |           string            |                           | Define the language of converted HTML                                                                       |\n| `notes`           |           boolean           |         `--notes`         | Convert slide deck notes into a text file                                                                   |\n| `ogImage`         |           string            |       `--og-image`        | Define [Open Graph] image URL                                                                               |\n| `options`         |           object            |                           | The base options for the constructor of engine                                                              |\n| `output`          |           string            |      `--output` `-o`      | Output file path (or directory when input-dir is passed)                                                    |\n| `pdf`             |           boolean           |          `--pdf`          | Convert slide deck into PDF                                                                                 |\n| `pdfNotes`        |           boolean           |       `--pdf-notes`       | Add [presenter notes][marpit presenter notes] to PDF as annotations                                         |\n| `pdfOutlines`     |      boolean \\| object      |     `--pdf-outlines`      | Add outlines (bookmarks) to PDF                                                                             |\n| ┗ `pages`         |           boolean           |  `--pdf-outlines.pages`   | Make PDF outlines from slide pages (`true` by default when `pdfOutlines` is enabled)                        |\n| ┗ `headings`      |           boolean           | `--pdf-outlines.headings` | Make PDF outlines from Markdown headings (`true` by default when `pdfOutlines` is enabled)                  |\n| `pptx`            |           boolean           |         `--pptx`          | Convert slide deck into PowerPoint document                                                                 |\n| `preview`         |           boolean           |     `--preview` `-p`      | Open preview window                                                                                         |\n| `server`          |           boolean           |      `--server` `-s`      | Enable server mode                                                                                          |\n| `template`        |     `bare` \\| `bespoke`     |       `--template`        | Choose template (`bespoke` by default)                                                                      |\n| `theme`           |           string            |         `--theme`         | Override theme by name or CSS file                                                                          |\n| `themeSet`        |     string \\| string[]      |       `--theme-set`       | Path to additional theme CSS files                                                                          |\n| `title`           |           string            |         `--title`         | Define title of the slide deck                                                                              |\n| `url`             |           string            |          `--url`          | Define [canonical URL]                                                                                      |\n| `watch`           |           boolean           |      `--watch` `-w`       | Watch input markdowns for changes                                                                           |\n\n[the whitelist object]: https://github.com/marp-team/marp-core#html-boolean--object\n\nSome of options that cannot specify through CLI options can be configured by file.\n\nFor example, `options` field can set the base options for the constructor of the used engine. You can fine-tune constructor options for the engine, [Marp Core](https://github.com/marp-team/marp-core#constructor-options) / [Marpit](https://marpit-api.marp.app/marpit).\n\n<details>\n<summary>Example: Customize engine's constructor option</summary>\n\n```json\n{\n  \"options\": {\n    \"markdown\": {\n      \"breaks\": false\n    },\n    \"minifyCSS\": false\n  }\n}\n```\n\nThis configuration will set the constructor option for Marp Core as specified:\n\n- Disables [Marp Core's line breaks conversion](https://github.com/marp-team/marp-core#marp-markdown) (`\\n` to `<br />`) to match for CommonMark, by passing [markdown-it's `breaks` option](https://markdown-it.github.io/markdown-it/#MarkdownIt.new) as `false`.\n- Disable minification for rendered theme CSS to make debug your style easily, by passing [`minifyCSS`](https://github.com/marp-team/marp-core#minifycss-boolean) as `false`.\n\n> :warning: Some options may be overridden by used template.\n\n</details>\n\n### Type annotation\n\nFor getting better IDE support (such as [IntelliSense](https://code.visualstudio.com/docs/editor/intellisense)) to write a config, you can annotate the config object through JSDoc, with Marp CLI's `Config` type.\n\n```javascript\n/** @type {import('@marp-team/marp-cli').Config} */\nconst config = {\n  // ...\n}\n\nexport default config\n```\n\n#### `Config` type with custom engine\n\nIf you've swapped the engine into another Marpit based engine, you also can provide better suggestion for `options` field by passing the engine type to generics.\n\n```javascript\n/** @type {import('@marp-team/marp-cli').Config<typeof import('@marp-team/marpit').Marpit>} */\nconst config = {\n  engine: '@marp-team/marpit',\n  options: {\n    // Suggest only Marpit constructor options, not Marp Core\n  },\n}\n\nexport default config\n```\n\n## API _(EXPERIMENTAL)_\n\nYou can use Marp CLI through Node.js [if installed Marp CLI into your local project](#local-installation).\n\n```js\nconst { marpCli } = require('@marp-team/marp-cli')\n\nmarpCli(['test.md', '--pdf'])\n  .then((exitStatus) => {\n    if (exitStatus > 0) {\n      console.error(`Failure (Exit status: ${exitStatus})`)\n    } else {\n      console.log('Success')\n    }\n  })\n  .catch(console.error)\n```\n\n`marpCli()` accepts an argument of CLI options as array, and returns `Promise` to resolve an expected exit status in CLI. It would be rejected with the instance of `Error` if CLI met an error to suspend the conversion process.\n\n### Error handling\n\nWe have exported [`CLIError` class and `CLIErrorCode` enum](https://github.com/marp-team/marp-cli/blob/main/src/error.ts) from `@marp-team/marp-cli`, to allow handling for specific errors that have already known by Marp CLI.\n\nIf `CLIError` instance was thrown, you can identify the reason why CLI throwed error by checking `errorCode` member.\n\n### Wait for observation\n\n`marpCli()` would not be resolved initiatively if started some observation: Watch mode, server mode, and preview window.\n\n`waitForObservation()` is helpful to handle them. It returns `Promise` that would be resolved with helper object when ready to observe resources in `marpCli()`.\n\n```javascript\nconst { marpCli, waitForObservation } = require('@marp-team/marp-cli')\n\nmarpCli(['--server', './slides/'])\n  .then((exitCode) => console.log(`Done with exit code ${exitCode}`))\n  .catch(console.error)\n\nwaitForObservation().then(({ stop }) => {\n  console.log('Observed')\n\n  // Stop observations to resolve marpCli()'s Promise\n  stop()\n})\n```\n\nThe resolved helper has `stop()` method for telling Marp CLI to stop observation and resolve `Promise`.\n\n## Contributing\n\nAre you interested in contributing? Please see [CONTRIBUTING.md](.github/CONTRIBUTING.md) and [the common contributing guideline for Marp team](https://github.com/marp-team/.github/blob/master/CONTRIBUTING.md).\n\n## Author\n\nManaged by [@marp-team](https://github.com/marp-team).\n\n- <img src=\"https://github.com/yhatt.png\" width=\"16\" height=\"16\"/> Yuki Hattori ([@yhatt](https://github.com/yhatt))\n\n## License\n\nThis tool releases under the [MIT License](LICENSE)."
}
