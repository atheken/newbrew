{
  "name": "needle",
  "full_name": "needle",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Compile-time safe Swift dependency injection framework with real code",
  "license": "Apache-2.0",
  "homepage": "https://github.com/uber/needle",
  "versions": {
    "stable": "0.23.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/uber/needle/archive/v0.23.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "d1560e078ef79d219fd9c03575b572fd2bfd57367b25251b38d66f1dd9cd8359"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/needle/blobs/sha256:9d36075eb688cbb3bc7ee5c8ce3842059f6633d1a9651a19203540832be0781b",
          "sha256": "9d36075eb688cbb3bc7ee5c8ce3842059f6633d1a9651a19203540832be0781b"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/needle/blobs/sha256:582013f3c319c53d9e890417a421614191c25967a5e0210f98f6e77a517ae28c",
          "sha256": "582013f3c319c53d9e890417a421614191c25967a5e0210f98f6e77a517ae28c"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/needle/blobs/sha256:89a92a4e64b6356e56fac67816f6dd7b6f351dbc49c257102ff9dece34f022cd",
          "sha256": "89a92a4e64b6356e56fac67816f6dd7b6f351dbc49c257102ff9dece34f022cd"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/needle/blobs/sha256:ed684d01c9d0284002e201806ea57df88ab25ba750f9a7669d10d40c695831ef",
          "sha256": "ed684d01c9d0284002e201806ea57df88ab25ba750f9a7669d10d40c695831ef"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [
    {
      "name": "xcode",
      "cask": null,
      "download": null,
      "version": "14.0",
      "contexts": [
        "build"
      ],
      "specs": [
        "stable"
      ]
    },
    {
      "name": "macos",
      "cask": null,
      "download": null,
      "version": null,
      "contexts": [],
      "specs": [
        "stable"
      ]
    }
  ],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/needle.rb",
  "ruby_source_checksum": {
    "sha256": "27478095a8bd7804583e1d37b3312c0e3452671ee429f2c53567ff5fd4cd4d1e"
  },
  "date_added": "2019-01-10T17:18:43+01:00",
  "readme": "# ![](Images/logo.png)\n\n[![Build Status](https://travis-ci.com/uber/needle.svg?branch=master)](https://travis-ci.com/uber/needle?branch=master)\n[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n\nNeedle is a dependency injection (DI) system for Swift. Unlike other DI frameworks, such as [Cleanse](https://github.com/square/Cleanse), [Swinject](https://github.com/Swinject/Swinject), Needle encourages **hierarchical DI structure and utilizes code generation to ensure compile-time safety**. This allows us to develop our apps and make code changes with confidence. **If it compiles, it works.** In this aspect, Needle is more similar to [Dagger for the JVM](https://google.github.io/dagger/).\n\nNeedle aims to achieve the following primary goals:\n1. Provide high reliability by ensuring dependency injection code is compile-time safe.\n2. Ensure code generation is highly performant even when used with multi-million-line codebases.\n3. Be compatible with all iOS application architectures, including RIBs, MVx etc.\n\n## The gist\n\nUsing Needle to write DI code for your application is easy and compile-time safe. Each dependency scope is defined by a `Component`. And its dependencies are encapsulated in a Swift `protocol`. The two are linked together using Swift generics.\n\n```swift\n/// This protocol encapsulates the dependencies acquired from ancestor scopes.\nprotocol MyDependency: Dependency {\n    /// These are objects obtained from ancestor scopes, not newly introduced at this scope.\n    var chocolate: Food { get }\n    var milk: Food { get }\n}\n\n/// This class defines a new dependency scope that can acquire dependencies from ancestor scopes\n/// via its dependency protocol, provide new objects on the DI graph by declaring properties,\n/// and instantiate child scopes.\nclass MyComponent: Component<MyDependency> {\n\n    /// A new object, hotChocolate, is added to the dependency graph. Child scope(s) can then\n    /// acquire this via their dependency protocol(s).\n    var hotChocolate: Drink {\n        return HotChocolate(dependency.chocolate, dependency.milk)\n    }\n\n    /// A child scope is always instantiated by its parent(s) scope(s).\n    var myChildComponent: MyChildComponent {\n        return MyChildComponent(parent: self)\n    }\n}\n```\n\nThis is pretty much it, when writing DI code with Needle. As you can see, everything is real, compilable Swift code. No fragile comments or \"annotations\". To quickly recap, the three key concepts here are dependency protocol, component and instantiation of child component(s). Please refer to the [Getting started with Needle](#getting-started-with-needle) section below for more detailed explanations and advanced topics.\n\n## Getting started with Needle\n\nUsing and integrating with Needle has two steps. Each of the following steps has detailed instructions and explanations in the linked documents.\n\n1. [Integrate Needle's code generator with your Swift project](./GENERATOR.md).\n2. [Write application DI code following NeedleFoundation's API](./API.md).\n\n## Installation\n\nNeedle has two parts, the `NeedleFoundation` framework and the executable code generator. Both parts need to be integrated with your Swift project in order to use Needle as your DI system.\n\n### Install `NeedleFoundation` framework\n\n#### Using [Carthage](https://github.com/Carthage/Carthage)\n\nPlease follow the standard [Carthage installation process](https://github.com/Carthage/Carthage#quick-start) to integrate the `NeedleFoundation` framework with your Swift project.\n```\ngithub \"https://github.com/uber/needle.git\" ~> VERSION_OF_NEEDLE\n```\n\n#### Using [Swift Package Manager](https://github.com/apple/swift-package-manager)\n\nPlease specify Needle as a dependency via the standard [Swift Package Manager package definition process](https://github.com/apple/swift-package-manager/blob/master/Documentation/Usage.md) to integrate the `NeedleFoundation` framework with your Swift project.\n```\ndependencies: [\n    .package(url: \"https://github.com/uber/needle.git\", .upToNextMajor(from: \"VERSION_NUMBER\")),\n],\ntargets: [\n    .target(\n        name: \"YOUR_MODULE\",\n        dependencies: [\n            \"NeedleFoundation\",\n        ]),\n],\n```\n\n#### Using [CocoaPods](https://github.com/CocoaPods/CocoaPods)\n\nPlease follow the standard pod integration process and use `NeedleFoundation` pod.\n\n### Install code generator\n\n#### Using [Carthage](https://github.com/Carthage/Carthage)\n\nIf Carthage is used to integrate  the `NeedleFoundation` framework, then a copy of the code generator executable of the corresponding version is already downloaded in the Carthage folder. It can be found at `Carthage/Checkouts/needle/Generator/bin/needle`.\n\n#### Using [Homebrew](https://github.com/Homebrew/brew)\n\nRegardless of how the `NeedleFoundation` framework is integrated into your project, the generator can always be installed via [Homebrew](https://github.com/Homebrew/brew).\n```\nbrew install needle\n```\n\n## [Why use dependency injection?](./WHY_DI.md)\n\nThe linked document uses a somewhat real example to explain what the dependency injection pattern is, and its benefits.\n\n## Translations\n\n- [Korean](./Documents/ko_KR/README.md)\n\n## Related projects\n\nIf you like Needle, check out other related open source projects from our team:\n- [Swift Concurrency](https://github.com/uber/swift-concurrency): a set of concurrency utility classes used by Uber, inspired by the equivalent [java.util.concurrent](https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/package-summary.html) package classes.\n- [Swift Abstract Class](https://github.com/uber/swift-abstract-class): a light-weight library along with an executable that enables compile-time safe abstract class development for Swift projects.\n- [Swift Common](https://github.com/uber/swift-common): common libraries used by this set of Swift open source projects.\n\n## License\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fuber%2Fswift-concurrency.svg?type=large)](https://app.fossa.io/projects/git%2Bgithub.com%2Fuber%2Fswift-concurrency?ref=badge_large)"
}
