{
  "name": "mle",
  "full_name": "mle",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Flexible terminal-based text editor",
  "license": "Apache-2.0",
  "homepage": "https://github.com/adsr/mle",
  "versions": {
    "stable": "1.7.2",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/adsr/mle/archive/refs/tags/v1.7.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "5275fcfc58d3d4890d074077d94497db488b2648287b3e48e67b00ea517b02ba"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/mle/blobs/sha256:ddeba783462112b24a7d5fbb7c29630207fdbb51a673ce8ec92faf612c4f077d",
          "sha256": "ddeba783462112b24a7d5fbb7c29630207fdbb51a673ce8ec92faf612c4f077d"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/mle/blobs/sha256:056a20a65b133842b690b2fdc939fe6895701c465853fdfbcc48d0a17e6002f2",
          "sha256": "056a20a65b133842b690b2fdc939fe6895701c465853fdfbcc48d0a17e6002f2"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/mle/blobs/sha256:d40a5279f04a3104a425a739b3f734fcca7abd025f2510c078684cbc910f2f86",
          "sha256": "d40a5279f04a3104a425a739b3f734fcca7abd025f2510c078684cbc910f2f86"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/mle/blobs/sha256:50f5723f83057f3e3ff647cfa5a7de27757dc30bf7f95be6cfe8b4be663648a5",
          "sha256": "50f5723f83057f3e3ff647cfa5a7de27757dc30bf7f95be6cfe8b4be663648a5"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/mle/blobs/sha256:e12c72f828b8b070527cafc5a54fdd1dfc4bd9b2200f235fba457785de2b62c3",
          "sha256": "e12c72f828b8b070527cafc5a54fdd1dfc4bd9b2200f235fba457785de2b62c3"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/mle/blobs/sha256:493774af04dcfd335301a1845db88772a9b100fa8f4478f891ca5c9ad4e09c05",
          "sha256": "493774af04dcfd335301a1845db88772a9b100fa8f4478f891ca5c9ad4e09c05"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mle/blobs/sha256:b163c0cdfde98734db406062d8f829d2c64d178c31ef3b7dad8ca75619e58cc5",
          "sha256": "b163c0cdfde98734db406062d8f829d2c64d178c31ef3b7dad8ca75619e58cc5"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "uthash"
  ],
  "dependencies": [
    "lua",
    "pcre2"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/mle.rb",
  "ruby_source_checksum": {
    "sha256": "1c717ac43eef1b08af15373ba9ac8e092d2d7dab528dbd728915f8f527cad8ee"
  },
  "date_added": "2022-07-05T17:33:01+00:00",
  "readme": "# mle\n\nmle is a small, flexible, terminal-based text editor written in C.\n\nRuns on Linux, Windows (Cygwin or WSL), FreeBSD, macOS, and more.\n\n[![Build Status](https://travis-ci.org/adsr/mle.svg?branch=master)](https://travis-ci.org/adsr/mle)\n\n[![Packaging status](https://repology.org/badge/vertical-allrepos/mle.svg)](https://repology.org/project/mle/versions)\n\n### Demos\n\n[![asciicast](https://i.imgur.com/PZocaOT.png)](https://asciinema.org/a/162536)\n\n* [Emacs-style jump](https://i.imgur.com/atS11HX.gif)\n* [Large file benchmark](http://i.imgur.com/VGGMmGg.gif)\n* [Older demos](http://imgur.com/a/ZBmmQ)\n\n### Aims\n\n* Keep codebase small and hackable\n* Minimize build-time and run-time dependencies\n* Make extensible and configurable\n* Favor simplicity over portability\n* Use shell commands to enhance functionality (e.g., grep, tree)\n\n### Features\n\n* Small codebase (~10k sloc)\n* Full UTF-8 support\n* Syntax highlighting\n* Stackable key maps (modes)\n* Extensible via [Lua](https://www.lua.org)\n* Scriptable rc file\n* Key macros\n* Multiple splittable windows\n* Regex search and replace\n* Large file support\n* Incremental search\n* Linear undo and redo\n* Multiple cursors\n* Auto indent\n* Headless mode\n* Navigation via [ctags](https://github.com/universal-ctags/ctags)\n* Movement via [less](https://www.gnu.org/software/less/)\n* Fuzzy file search via [fzf](https://github.com/junegunn/fzf)\n* File browsing via [tree](http://mama.indstate.edu/users/ice/tree/)\n* File grep via [grep](https://www.gnu.org/software/grep/)\n* String manip via [perl](https://www.perl.org/)\n\n### Building\n\n    $ sudo apt install git build-essential # install git, make, gcc, libc-dev\n    $\n    $ git clone --recursive https://github.com/adsr/mle.git\n    $ cd mle\n    $ make mle_vendor=1\n\nTo build a completely static binary, try `make mle_vendor=1 mle_static=1`.\n\nYou can also run plain `make` to link against system libraries instead of\n`vendor/`. Note this requires the following packages to be installed:\n\n    uthash-dev\n    liblua5.4-dev\n    libpcre2-dev\n\nTo install to `/usr/local/bin`:\n\n    $ make install\n\nTo install to a custom directory, supply `prefix`, e.g.:\n\n    $ make install prefix=/usr # /usr/bin/mle\n\n### Installing from a repo\n\nmle may be available to install via your system's package manager.\n\n    # apt install mle   # Ubuntu and Debian-based distros\n    # dnf install mle   # CentOS, RHEL, Fedora-based distros\n    # pkg install mle   # FreeBSD\n    # yay -S mle        # Arch (via AUR)\n    # snap install mle  # all major Linux distros\n    # nix-env -i mle    # NixOS (via nixpkgs)\n    # apk add mle       # Alpine\n    # xbps-install mle  # Void\n    # brew install mle  # macOS (Homebrew)\n    # port install mle  # macOS (MacPorts)\n    # setup-x86.exe -q -P mle # Cygwin\n\n### Basic usage\n\n    $ mle               # Open blank buffer\n    $ mle one.c         # Edit one.c\n    $ mle one.c:100     # Edit one.c at line 100\n    $ mle one.c two.c   # Edit one.c and two.c\n    $ mle -h            # Show command line help\n\nThe default key bindings are intuitive. Input text as normal, use directional\nkeys to move around, use `Ctrl-S` to save, `Ctrl-O` to open, `Ctrl-X` to exit.\n\nPress `F2` for full help.\n\n### Advanced usage: mlerc\n\nmle is customized via command line options. Run `mle -h` to view all cli\noptions.\n\nTo set default options, make an rc file named `~/.mlerc` (or `/etc/mlerc`). The\ncontents of the rc file are any number of cli options separated by newlines.\nLines that begin with a semi-colon are interpretted as comments.\n\nIf `~/.mlerc` is executable, mle executes it and interprets the resulting stdout\nas described above. For example, consider the following snippet from an\nexecutable `~/.mlerc` bash(1) script:\n\n    # Define 'test' kmap\n    echo '-Ktest,,1'\n\n    # M-q: replace grep with git grep if `.git` exists\n    if [ -d \".git\" ]; then\n      echo '-kcmd_grep,M-q,git grep --color=never -P -i -I -n %s 2>/dev/null'\n    fi\n\n    # Set default kmap\n    echo '-n test'\n\nThis overrides the built-in grep command with `git grep` if `.git` exists in\nthe current working directory.\n\n### Shell command integration\n\nThe following programs will enable or enhance certain features of mle if they\nexist in `PATH`.\n\n* [bash](https://www.gnu.org/software/bash/) (tab completion)\n* [fzf](https://github.com/junegunn/fzf) (fuzzy file search)\n* [grep](https://www.gnu.org/software/grep/) (file grep)\n* [less](https://www.gnu.org/software/less/) (less integration)\n* [perl](https://www.perl.org/) (perl 1-liners)\n* [readtags](https://github.com/universal-ctags/ctags) (ctags integration)\n* [tree](http://mama.indstate.edu/users/ice/tree/) (file browsing)\n\nArbitrary shell commands can also be run via `cmd_shell` (M-e by default). If\nany text is selected, it is sent to stdin of the command. Any resulting stdout\nis inserted into the text buffer.\n\n### Advanced usage: Headless mode\n\nmle provides support for non-interactive editing which may be useful for using\nthe editor as a regular command line tool. In headless mode, mle reads stdin\ninto a buffer, applies a startup macro if specified, and then writes the buffer\ncontents to stdout. For example:\n\n    $ echo -n hello | mle -M 'test C-e space w o r l d enter' -p test\n    hello world\n\nIf stdin is a pipe, mle goes into headless mode automatically. Headless mode can\nbe explicitly enabled or disabled with the `-H` option.\n\nIf stdin is a pipe and headless mode is disabled via `-H0`, mle reads stdin into\na new buffer and then runs as normal in interactive mode.\n\n### Advanced usage: Scripting\n\nmle is extensible via the [Lua](https://www.lua.org) programming language.\nScripts are loaded via the `-x` cli option. Commands registered by scripts can\nbe mapped to keys as normal via `-k`. See `uscript.lua` for a simple example.\n\nThere is also a `wren` branch with [Wren](http://wren.io) scripting support.\nThat work is on pause.\n\n### Forks\n\n* [eon](https://github.com/tomas/eon) - mouse support and Notepad-like\n  selections\n* [turbo-mle](https://github.com/magiblot/turbo-mle) - Turbo Vision port\n\n### Acknowledgments\n\nmle makes extensive use of the following libraries.\n\n* [uthash](https://troydhanson.github.io/uthash) for hash maps and linked lists\n* [termbox2](https://github.com/termbox/termbox2) for TUI\n* [PCRE2](http://www.pcre.org/) for syntax highlighting and search"
}
