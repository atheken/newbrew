{
  "name": "moz-git-tools",
  "full_name": "moz-git-tools",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Tools for working with Git at Mozilla",
  "license": "GPL-2.0-only and CC0-1.0",
  "homepage": "https://github.com/mozilla/moz-git-tools",
  "versions": {
    "stable": "0.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/mozilla/moz-git-tools/archive/refs/tags/v0.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "defb5c369ff94f72d272692282404044fa21aa616487bcb4d26e51635c3bc188"
    },
    "head": {
      "url": "https://github.com/mozilla/moz-git-tools.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/moz-git-tools/blobs/sha256:908939f8f921ec7d4a31b8f27686d7f44ffb2492ceaae621b080121b60b581d8",
          "sha256": "908939f8f921ec7d4a31b8f27686d7f44ffb2492ceaae621b080121b60b581d8"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": "git-root was not installed because it conflicts with the version provided by git-extras.\n",
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/moz-git-tools.rb",
  "ruby_source_checksum": {
    "sha256": "4f7f7d6fea3baf7f7f9490744c024b68f0c6733a4b21d5fc9bdce39e72e99628"
  },
  "date_added": "2015-12-19T00:01:35-05:00",
  "readme": "# Tools for working with Git at Mozilla.\n\nIn order to set this up, clone this repository somewhere,\nrun the `git submodule init` and then `git submodule update`\ncommand, and add your clone to $PATH.\n\nSome commands require `python2`. If using mozilla-build on windows, `python2`\nmight be missing, but `python` exists and is actually python 2 (check by running\n`python -V`). On such case, you can create a copy of `python.exe` as `python2.exe`\nat the same location - probably at `<mozilla-build>/python/`.\n\nMany of these tools rely on a notion of your current branch's \"upstream\nbranch\".  For example, `git push-to-try` pushes to try all patches in your\ncurrent branch that aren't upstream.  See the `git-tracks` section below for\ndetails on how to change your upstream branch.\n\n## git-bz\n\nPush commits from git to bugzilla.  For example, to push the two top commits in\nyour repository, run\n\n    git bz attach -e HEAD^^..\n\n(This will complain if your commits don't mention the same bug number in their\nsummaries.)\n\nIf a commit's message starts with \"FOLD\", it will be folded into the previous\ncommit before pushing to bugzilla.\n\n(Actually, git-bz can do more than push commits from git to bugzilla.  But I\ndon't use it for anything else, so I'm not sure which of the other features\nwork with bugzilla.mozilla.org.)\n\n## git-bzexport\n\nUsage: `git bzexport [-t/--tip] PATH_TO_HG_REPO [GIT_REVS]`\n\nPush commits from git to bugzilla using the `bzexport` Mercurial extension from\nthe [Mozilla version control tools repo](https://hg.mozilla.org/hgcustom/version-control-tools).\n\nThe `bzexport` extension has some advantages over `bz attach` - for example, if\nmultiple Bugzilla reviewers match the reviewer name you specify, `bzexport` will\nlet you choose between them using a menu - so some users may prefer it.\n\nThis command is implemented using `git-push-to-hg`, so see that command's\ndocumentation for more details on the argument syntax.\n\n## git-new-workdir\n\nCreate a new working directory based off an existing local git repository.\n\n## git-tracks\n\nGets the name of the current branch's upstream branch.  With `-d` or\n`--default`, git-tracks outputs \"origin/master\" if there's no upstream branch.\n\nYou can set this with `git branch --set-upstream CURRENT_BRANCH\nUPSTREAM_BRANCH`.  (Don't do `git branch --set-upstream BRANCH`; that won't\nwork right!)\n\nMany other tools in this package use `git tracks -d` as your branch's \"upstream\nbranch\".\n\n## git-to-hg-commit\n\nFind the hg commit corresponding to a git commit.\n\n## git-push-to-hg\n\nUsage: `git push-to-hg [-t/--tip] PATH_TO_HG_REPO [GIT_REVS]`\n\nPush commits from git to a new qqueue in an hg repository.  If GIT\\_REVS is\nomitted, push the commits `$(git merge-base HEAD $(git-tracks))..HEAD` (i.e.\neverything in the current branch that's not upstream).\n\nIf `-t` or `--tip` is specified, pull and update the hg repository to latest\ntip before pushing.  Otherwise, update the hg repository to the revision atop\nwhich the git commits are based.\n\n## git-push-to-try\n\nUsage: `git push-to-try [-r/--rev REVISION_OR_RANGE] [-t/--tip] PATH_TO_HG_REPO TRYCHOOSER_PARAMS`\n\nPush the commits `$(git merge-base HEAD $(git-tracks))..HEAD` (i.e. everything\nin the current branch that's not upstream) to try, by way of the given hg\nrepository.\n\nIf `-r/--rev REVISION_OR_RANGE` is supplied, then push those commits to try\ninstead of `$(git merge-base HEAD $(git-tracks))..HEAD`. For example, if you are\nworking on a feature branch that was branched off of master, and want to push\neverything on that branch to try, use `--rev master..HEAD`.\n\nTRYCHOOSER\\_PARAMS should be, e.g. `-b do -p all -u all -t none`.\n\n## git-push-to-mozreview\n\nUsage: `git push-to-review [-r/--rev REVISION_OR_RANGE] [-t/--tip] PATH_TO_HG_REPO`\n\n**PLEASE NOTE** [git-cinnabar combined with\ngit-mozreview](https://mozilla-version-control-tools.readthedocs.io/en/latest/mozreview/install-git.html)\nis the better-supported way to push to mozreview using git!\n\nPush the commits `$(git merge-base HEAD $(git-tracks))..HEAD` (i.e. everything\nin the current branch that's not upstream) to mozreview, by way of the given hg\nrepository.\n\nIf `-r/--rev REVISION_OR_RANGE` is supplied, then push those commits to mozreview\ninstead of `$(git merge-base HEAD $(git-tracks))..HEAD`. For example, if you are\nworking on a feature branch that was branched off of master, and want to push\neverything on that branch to try, use `--rev master..HEAD`.\n\n## git-push-to-trychooser\n\nUsage: `git push-to-trychooser [-t/--tip] PATH_TO_HG_REPO [GIT_REVS]`\n\nThe same as `git push-to-hg`, but also runs the interactive trychooser command\nbefore pushing the commits to try from the given hg repository.\n\nTo use this, you must install the `trychooser` Mercurial extension from\n[its repository](https://bitbucket.org/sfink/trychooser). (There are some\nout-of-date versions of this extension floating around, so be sure to use this\nrepository.)\n\n## git-qparent\n\nOutputs the last common revision of the current branch and upstream.\n(This command is a synonym for `git merge-base HEAD $(git-tracks)`.)\n\n## git-qrebase\n\nAn alias for `git rebase -i $(git qparent)`.  This lets you interactively\nrebase your current branch without moving the commits to a new upstream base.\n\n## git-edit-files\n\nOpen all the files modified in the specified rev range in your `$EDITOR`.  (If\nno rev range is specified, open the files modified in your current checkout.)\n\n## git-fix-whitespace\n\nEliminate any trailing whitespace from your uncommitted changes.\n\nNote that this will reset your index; that is, any changes you've `git add`'ed\nwill need to be added again.  But it won't (or at least, shouldn't!) erase\nany changes.\n\n## git-qapplied\n\nLike `hg qapplied`, output the commits in this branch which are not upstream.\n\n## git-patch-to-hg-patch\n\nFormat a patch from `git format-patch` as an hg patch.\n\n## git-branchname\n\nOutput the name of the active git branch, but if there's no git repository\nbelow the cwd, output nothing.  This is useful when you want to display the\ncurrent branch name on the command line.\n\nFor example, I have in my ~/.bashrc:\n\n    function vcs-branchname() {\n      git_branch=`git branchname`\n      if [[ \"$git_branch\" != \"\" ]]; then\n        echo \" ($git_branch)\"\n      fi\n    }\n\n    PROMPT_COLOR=\"35m\"\n    PROMPT_COMMAND='BRANCH_NAME=`vcs-branchname`'\n    PS1='\\[\\033[01;$PROMPT_COLOR\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;$PROMPT_COLOR\\]\\w\\[\\033[00m\\]$BRANCH_NAME\\$ '\n\nwhich makes my prompt look like\n\n    jlebar@hostname:~/current/path (name-of-git-branch)$\n\n## pre-commit\n\nA pre-commit hook which checks for .orig files and trailing whitespace.\n\nTo install this hook, symlink it into your repository's `.git/hooks` directory (with the name pre-commit)."
}
