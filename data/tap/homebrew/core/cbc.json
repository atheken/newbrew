{
  "name": "cbc",
  "full_name": "cbc",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Mixed integer linear programming solver",
  "license": "EPL-2.0",
  "homepage": "https://github.com/coin-or/Cbc",
  "versions": {
    "stable": "2.10.10",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/coin-or/Cbc/archive/releases/2.10.10.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "f394efecccc40a51bf79fba2c2af0bc92561f3e6b8b6e4c6e36d5e70986f734f"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cbc/blobs/sha256:32da450c124aa43693350de653d23fa411fabaed1ba97f8e94933573eb0e1357",
          "sha256": "32da450c124aa43693350de653d23fa411fabaed1ba97f8e94933573eb0e1357"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cbc/blobs/sha256:fd6a0b813968f05f2bad57997854b015544b05e1f85b311491e8a91ee740f52f",
          "sha256": "fd6a0b813968f05f2bad57997854b015544b05e1f85b311491e8a91ee740f52f"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cbc/blobs/sha256:196878c4018b81771965a8bda4708df33265570d1eaa8af8556188da729e8ecc",
          "sha256": "196878c4018b81771965a8bda4708df33265570d1eaa8af8556188da729e8ecc"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cbc/blobs/sha256:8aed7852512faccee24efcb137c5ca34dbb34a0623286ab197a85d5d45528686",
          "sha256": "8aed7852512faccee24efcb137c5ca34dbb34a0623286ab197a85d5d45528686"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cbc/blobs/sha256:f5e472945f58484d6ac18920aca10ed79e9dd64e41b98cfb5dec00e0e9def371",
          "sha256": "f5e472945f58484d6ac18920aca10ed79e9dd64e41b98cfb5dec00e0e9def371"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cbc/blobs/sha256:a206dcdd7b939067d87e21689f2c55f97259ae2cff3941813de0ef7fa555d715",
          "sha256": "a206dcdd7b939067d87e21689f2c55f97259ae2cff3941813de0ef7fa555d715"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cbc/blobs/sha256:bbfab36d64d93b418cf658d0f06a73eaff5a582124846b5740e9756a07f5a0d5",
          "sha256": "bbfab36d64d93b418cf658d0f06a73eaff5a582124846b5740e9756a07f5a0d5"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "pkg-config"
  ],
  "dependencies": [
    "cgl",
    "clp",
    "coinutils",
    "osi"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/cbc.rb",
  "ruby_source_checksum": {
    "sha256": "63e2c864c90b6e3ce15c2a8f76416cfa5fce0ba68af2899c3b4c10b2f7c80419"
  },
  "date_added": "2020-08-12T04:06:18+00:00",
  "readme": "# Cbc\n\n[![A COIN-OR Project](https://coin-or.github.io/coin-or-badge.png)](https://www.coin-or.org)\n\nProjects such as this one are maintained by a small group of volunteers under\nthe auspices of the non-profit [COIN-OR Foundation](https://www.coin-or.org)\nand we need your help! Please consider [sponsoring our\nactivities](https://github.com/sponsors/coin-or) or [volunteering](mailto:volunteer@coin-or.org) to help!\n\n[![Latest Release](https://img.shields.io/github/v/release/coin-or/Cbc?sort=semver)](https://github.com/coin-or/Cbc/releases)\n\n_This file is auto-generated from [config.yml](.coin-or/config.yml) using the \n[generate_readme](.coin-or/generate_readme) script.\nTo make changes, please edit [config.yml](.coin-or/config.yml) or the generation scripts\n[here](.coin-or/generate_readme) and [here](https://github.com/coin-or/coinbrew/blob/master/scripts/generate_readme)._\n\nCbc (*C*oin-or *b*ranch and *c*ut) is an open-source mixed integer linear programming solver written in C++.\nIt can be used as a callable library or using a stand-alone executable.\nIt can be used in a wide variety of ways through various modeling systems, packages, etc. \n * Stand-alone modeling languages and systems\n   * AIMMS (via the [AIMMSlinks](https://github.com/coin-or/AIMMSlinks) project),\n   * AMPL (natively),\n   * [CMPL](https://github.com/coin-or/Cmpl),\n   * GAMS (through the [GAMSlinks](https://github.com/coin-or/GAMSlinks) project),\n   * Mathematica,\n   * Matlab (https://inverseproblem.co.nz/OPTI/)\n   * [MiniZinc](http://www.minizinc.org/),\n   * MPL (through the [CoinMP](https://github.com/coin-or/CoinMP) project),\n   * R (https://rdrr.io/github/yuehmeir2/myFormAssembler/man/cbc.html)\n * Python-based modeling languages and extensions\n   * [cbcpy](https://pypi.org/project/cbcpy).\n   * [cvxpy](https://github.com/cvxpy/cvxpy)\n   * [CyLP](https://github.com/coin-or/CyLP),\n   * [Google's or-tools](https://developers.google.com/optimization),\n   * [PuLP](https://github.com/coin-or/PuLP)/[DiPPy](https://github.com/coin-or/Dip),\n   * [python-mip](https://github.com/coin-or/python-mip),\n   * [yaposib](https://github.com/coin-or/yaposib)\n * Extensions in other languages\n   * [JuMP](https://github.com/JuliaOpt/JuMP.jl) (Julia),\n   * [rust-lp-modeler](https://github.com/jcavat/rust-lp-modeler) (Rust)\n   * [good_lp](https://github.com/rust-or/good_lp) (Rust)\n * Spreadsheet extensions\n   * [OpenSolver for Excel](http://opensolver.org)\n   * [OpenSolver for Google Sheets](https://opensolver.org/opensolver-for-google-sheets/)\n\nBinaries for most platforms are available for download from\n[here](https://www.coin-or.org/download/binary/Cbc). AMPL also provides\nstand-alone [Cbc\nexecutables](http://ampl.com/products/solvers/open-source/#cbc) that can be\nused with (or without) AMPL. Julia provides a wide range of\n[binaries](https://github.com/JuliaBinaryWrappers/Cbc_jll.jl/releases).\nAlternatives include [conda](https://github.com/conda-forge/coin-or-cbc-feedstock) and\nyour favorite package manager, as detailed [below](https://github.com/coin-or/Cbc#binaries).\n\nCbc is developed by John Forrest, now retired from IBM Research, and others.\nThe project is currently managed by John Forrest, [Ted\nRalphs](http://github.com/tkralphs), [Stefan\nVigerske](https://github.com/svigerske), [Haroldo Gambini\nSantos](https://github.com/h-g-s), and the rest of the Cbc team. \n\nCbc is written in C++ and is released as open source under the [Eclipse Public License 2.0](http://www.opensource.org/licenses/EPL-2.0).\n\nIt is distributed under the auspices of the [COIN-OR Foundation](https://www.coin-or.org).\n\nThe Cbc development site is https://github.com/coin-or/Cbc.\n\n## CITE\n\nCode: [![DOI](https://zenodo.org/badge/173509563.svg)](https://zenodo.org/badge/latestdoi/173509563)\n\n## CURRENT BUILD STATUS\n\n[![Windows Builds](https://github.com/coin-or/Cbc/actions/workflows/windows-ci.yml/badge.svg?branch=master)](https://github.com/coin-or/Cbc/actions/workflows/windows-ci.yml?query=branch%3Amaster)\n\n[![Linux and MacOS Builds](https://github.com/coin-or/Cbc/actions/workflows/linux-ci.yml/badge.svg?branch=master)](https://github.com/coin-or/Cbc/actions/workflows/linux-ci.yml?query=branch%3Amaster)\n\n## DOWNLOAD\n\nWhat follows is a quick start guide for obtaining or building\nCbc on common platforms. More detailed information is\navailable [here](https://coin-or.github.io/user_introduction.html).\n\n### Docker image\n\nThere is a Docker image that provides Cbc, as well as other projects\nin the [COIN-OR Optimization\nSuite](https://github.com/coin-or/COIN-OR-OptimizationSuite) [here](https://hub.docker.com/repository/docker/coinor/coin-or-optimization-suite)\n\n### Binaries\n\nFor newer releases, binaries will be made available as assets attached to\nreleases in Github\n[here](https://github.com/coin-or/Cbc/releases). Older binaries\nare archived as part of Cbc\n[here](https://www.coin-or.org/download/binary/Cbc).\n\n * *Linux* (see https://repology.org/project/coin-or-cbc/versions for a complete listing): \n   * arch:\n     ```\n     $ sudo pacman -S  coin-or-cbc\n     ```\n   * Debian/Ubuntu:\n     ```\n     $ sudo apt-get install  coinor-cbc coinor-libcbc-dev\n     ```\n   * Fedora/Redhat/CentOS:\n     ```\n     $ sudo yum install  coin-or-Cbc coin-or-Cbc-devel\n     ```\n   * freebsd:\n     ```\n     $ sudo pkg install math/cbc\n     ```\n   * linuxbrew:\n     ```\n     $ brew install cbc\n     ```\n * *Windows*: The easiest way to get Cbc on Windows is to download an archive as described above.\n * *Mac OS X*: The easiest way to get Cbc on Mac OS X is through [Homebrew](https://brew.sh).\n     ```\n     $ brew tap coin-or-tools/coinor\n     $ brew install coin-or-tools/coinor/cbc\n     ```\n\n* *conda* (cross-platform, no Windows for now):\n     ```\n     $ conda install coin-or-cbc\n     ```\n\nDue to license incompatibilities, pre-compiled binaries lack some \nfunctionality. If binaries are not available for your platform for the latest \nversion and you would like to request them to be built and posted, feel free \nto let us know on the mailing list. \n\n### Source\n\nSource code can be obtained either by\n\n * Downloading a snapshot of the source code for the latest release version of Cbc from the\n [releases](https://github.com/coin-or/Cbc/releases) page,\n * Cloning this repository from [Github](https://github.com/coin-or/Cbc), or \n * Using the [coinbrew](https://github.com/coin-or/coinbrew) script to get the project and all dependencies (recommended, see below).   \n\n### Dependencies\n\nCbc has a number of dependencies, which are detailed in\n[config.yml](.coin-or/config.yml). Dependencies on other COIN-OR projects are\nautomatically downloaded when obtaining the source with `coinbrew`. For some\nof the remaining third-party dependencies, automatic download scripts and\nbuild wrappers are provided (and will also be automatically run for required\nand recommended dependencies), while other libraries that are aeasy to obtain\nmust be installed using an appropriate package manager (or may come with your\nOS by default). \n\n## BUILDING from source\n\nThese quick start instructions assume you are in a bash shell. \n\n### Using `coinbrew`\n\nTo download and build Cbc from source, execute the \nfollowing on the command line. \n```\nwget https://raw.githubusercontent.com/coin-or/coinbrew/master/coinbrew\nchmod u+x coinbrew\n./coinbrew fetch Cbc@master\n./coinbrew build Cbc\n```\nFor more detailed instructions on coinbrew, see https://coin-or.github.io/coinbrew.\nThe `coinbrew` script will fetch the additional projects specified in the Dependencies section of [config.yml](.coin-or/config.yml).\n\n### Without `coinbrew` (Expert users)\n\n * Download the source code, e.g., by cloning the git repo https://github.com/coin-or/Cbc\n * Download and install the source code for the dependencies listed in [config.yml](.coin-or/config.yml)\n * Build the code as follows (make sure to set PKG_CONFIG_PTH to install directory for dependencies).\n\n```\n./configure -C\nmake\nmake test\nmake install\n```\n\n### With Microsoft Visual Studio\n\nFor Microsoft Visual C++ users, there are project files for version 10\navailable in the `MSVisualStudio` directory. First, obtain the source code\nusing either a Windows git client or download a snapshot. In MSVC++ Version\n10, open the solution file (this should be converted to whatever version of\nMSVC+ you are using) and build the Cbc project. The code should build out of\nthe box with default settings.\n\nIt is also possible to build Cbc with the Visual Studio compiler from the\ncommand line using the procedure for Unix-like environments, using the Msys2\nshell or CYGWIN. This is the recommended and best-supported way of building\nCbc in Windows from source. To do so, make sure the `cl` compiler is in your\npath and add `--enable-msvc to build command of `coinbrew`.  \n\nIf you want to build a *parallel version* of CBC using Visual Studio you can\nfollowing instructions: (thanks to Tobias Stengel and Alexis Guigue).\n\nAssumptions:\n\n- A VS solution with all necessary projects (libCbc, libClp, libCbcSolver,\n  libCgl, libCoinUtils, libOsi, libOsiCbc, libOsiClp). The project files can\n  be found inside the `MSVisualStudio` folders. \n\nSteps (based on VS 2013):\n\n1. for each of the lib* projects do:\n   add `CBC_THREAD` under Properties -> Configuration Properties -> C/C++ ->\n   Preprocessor -> Preprocessor Definitions (a subset of the lib* projects may\n   be sufficient, but it doesn't hurt to do it for all) \n\n2. Link against a pthreads library.\n   [PThreadsWin32](https://www.sourceware.org/pthreads-win32/) works (even in\n   64 bits systems) and is distributed under the LGPL. If you decide to use\n   the precompiled binaries: both pthreadVC2 and pthreadVS2 seem to work.\n   Otherwise: third party VS project files for pthreads4win can be found on\n   github.\n\n   Note: If you use C++/Cli, make sure that no callback (eventHandlers, custom\n   cut generators, custom heuristics, ...) contains managed code. Otherwise\n   your code will crash at runtime with AssembyNotFoundExceptions inside the\n   native threads created by Cbc. Even if not, problems with the GC are\n   likely.\n\n3. If you link statically against pthreads4win, you have to define\n   PTW32_STATIC_LIB when building your program/Cbc (e.g. via Properties ->\n   C/C++/Preprocessor -> Preprocessor Definitions) AND - only if you build\n   pthreads yourself - when building pthreads. Linking pthreads dynamically\n   works without additional preprocessor definitions.\n\n4. pass `-threads yourNumber` to `CbcMain1`\n\n## Doxygen Documentation\n\nIf you have `Doxygen` available, you can build a HTML documentation by typing\n\n`make doxygen-docs` \n\nin the build directory. If Cbc was built via `coinbrew`, then the build\ndirectory will be `./build/Cbc/master` by default. The doxygen documentation main file\nis found at `<build-dir>/doxydoc/html/index.html`.\n\nIf you don't have `doxygen` installed locally, you can use also find the\ndocumentation [here](http://coin-or.github.io/Cbc/Doxygen).\n\n## DOCUMENTATION\n\n * [User's Guide](https://coin-or.github.io/Cbc) (from 2005)\n * Source code [examples](examples)\n * [Cbc command-line guide](https://github.com/coin-or/COIN-OR-OptimizationSuite/raw/master/Installer/files/doc/cbcCommandLine.pdf)\n\n\n## Project Links\n\n * [Code of Conduct](https://www.coin-or.org/code-of-conduct/)\n * [COIN-OR Web Site](http://www.coin-or.org/)\n * [COIN-OR general discussion forum](https://github.com/orgs/coin-or/discussions)\n * [Cbc Discussion forum](https://github.com/coin-or/Cbc/discussions)\n * [Report a bug](https://github.com/coin-or/Cbc/issues/new)\n * [Doxygen generated documentation](http://coin-or.github.io/Cbc/Doxygen)\n\n## CHANGELOG\n\n * Release 3.0 (in preparation)\n   * Added possibility for incomplete MIP start files.\n     The filename suffix indicates which values Cbc should choose for\n     missing variables (see change r2549)\n   * Larger renovation of the build system and a changed directory structure.\n     As a consequence, a monolithic build of Cbc, which builds Cbc with\n     all its dependencies in one run of configure and make is no longer\n     possible. Dependencies should now be build and installed before\n     building Cbc.\n     - Removed svn:externals. Dependencies (CoinUtils, Osi, Clp, Cgl, etc)\n       now need to be build and installed in advance, either manually or\n       by using coinbrew.\n     - When using a GCC-compatible compiler, the Cbc interface\n       functions are now declared with `visibility(default)`-attribute,\n       thus building Cbc with `-fvisibility=hidden` still produces a\n       usable library.\n     - When using a MSVC-compatible compiler, Cbc interface functions\n       are now declared with `dllimport`-attribute, so that a Cbc C++ DLL\n       can be used.\n     - Under Windows/Msys2, DLLs are now build by default.\n     - Cygwin and MSys1 are no longer supported.\n     - pkg-config is now mandatory. On Windows, make sure to use a\n       pkg-config version that produces Unix-style paths.\n     - `*_addlibs` files have been removed, pkg-config should be used instead.\n     - Script `compile` is now used to wrap around calls of cl/icl/ifort\n       and translate GCC-style compiler flags to MSVC style.\n     - Header files are now installed in the better named\n       `$prefix/include/coin-or` instead of `$prefix/include/coin`.\n     - The default for `--prefix` is no longer the build directory, but\n       the autotools-default, probably `/usr/local`.\n     - `--enable-debug` does not imply `--disable-shared` anymore.\n     - Removed `--enable-debug-cbc`, use `--enable-debug` instead.\n     - Removed configure variables OPT/DBG_C/CXXFLAGS. Use C/CXXFLAGS instead.\n     - Silent build output is now enabled by default, use configure\n       flag `--disable-silent-rules` or call make with `V=1` to disable.\n     - Also for static builds, PIC objects are now generated by default,\n       use `--without-pic` to disable.\n     - The `--with-*-incdir` and `--with-*-lib` configure flags have been\n       replaced by corresponding `--with-*-cflags` and `--with-*-lflags`\n       flags. Note that the include directories need to be specified\n       via `-I<dir>` in `--with-*-cflags`.\n    * `--enable-cbc-parallel` is now enabled by default if a pthread library\n      is found. Use `--disable-cbc-parallel` to disable.\n    * Added a conflict graph infrastructure and conflict-based routines:\n      - `CglCliqueStrengthening`: preprocessing routine applied on set packing constraints.\n      - `CglBKClique`: clique cut separator based on an improved version of Bron-Kerbosch algorithm.\n      - `CglOddWheel`: odd-cycle separator with a lifting routine.\n      - New parameters in the command line:\n          - `cgraph`: sets the use of conflict graph-based routines (CglBKClique, CglOddWheel and CliqueStrengthening) - \"off\"=turns these routines off, \"on\"=turns these routines on, \"clq\"=turns these routines off and enables the cut separator of CglClique - default=\"on\"\n          - `clqstr`: sets the use of the preprocessing routine based on clique strengthening (CglCliqueStrengthening) - \"off\"=turn off this routine, \"before\"=perform clique strengthening before initial solve, \"after\"=perform clique strengthening after initial solve - default=\"after\".\n          - `clique`: sets the use of CglBKClique (on, root, ifmove, forceOn, onglobal) - default=\"ifmove\".\n          - `bkpivot`: pivoting strategy used by Bron-Kerbosch algorithm in CglBKClique - 0=off, 1=random, 2=degree, 3=weight, 4=modified degree, 5=modified weight, 6=modified degree + modified weight - default=3.\n          - `bkmaxcalls`: maximum number of recursive calls that can be made by Bron-Kerbosch algorithm in CglBKClique - default=1000.\n          - `bkclqext`: strategy used to extend violated cliques found by CglBKClique - 0=off, 1=random, 2=degree, 3=modified degree, 4=reduced cost(inversely proportional), 5=reduced cost(inversely proportional) + modified degree - default = 4.\n          - `oddwheel`: sets the use of CglOddWheel (on, root, ifmove, forceOn, onglobal) - default = ifmove.\n          - `oddwext`: strategy used to search for wheel centers for the cuts found by CglOddWheel - 0=off, 1=one variable, 2=clique - default=2.\n      - CglClique was replaced by CglBKClique as the default clique separator in CbcSolver.cpp.\n\n * Release 2.10.10\n   * Fix for accidental introduction of private symbol into public header.\n\n * Release 2.10.9\n   * Improvements to symmetry handling.\n   * Maintenance release to push out accumulates patches.\n\n * Release 2.10.8\n   * Re-generate binaries due to mistake in Github Actions configuration and \n     incorporate new release of Cgl. \n\n * Release 2.10.7\n   * Fix a bug that would cause the unit test not to run correctly if the \n     MIPLIB3 project was not present\n\n * Release 2.10.6\n   * Accumulated fixes related to build, test, and CI. \n\n * Release 2.10.5\n   * Revert fix that stopped Clp when timelimit reached, as that lead to\n     all cleanup solves afterwards to stop without proper finishing and\n     giving wrong results\n\n * Release 2.10.4\n   * Allow .lp files to be read from stdin.\n   * Fix parsing of optional arguments to AMPL interface.\n   * More bugfixes.\n\n * Release 2.10.3\n   * Improve performance of some primal heuristics, incl. feasibility pump, \n     by making integer slacks continuous\n   * Added additional timelimit checks\n   * Fixed initialization of Cbc_clone result\n   * Additional bugfixes\n\n * Release 2.10.2\n   * Bugfixes\n\n * Release 2.10.1\n   * Fixed Cbc_clone in C interface\n   * Fixed CbcMain1() call in examples/driver3.cpp\n   * Fixed possible issue with MIPstart if presolve added variables\n   * More minor bugfixes\n\n * Release 2.10.0\n   * Improved handling of SOS, starting point, and symmetries\n   * Improved performance of primal heuristics regarding the handling of\n     implicit integer variables\n   * Mini-B&B is now disabled when solving with multiple threads\n   * Changed default value for zero half cuts parameter from off to ifmove\n   * Added CbcModel::postProcessedSolver() to obtained LP after presolve\n   * New option `PrepNames` to indicate whether column names should be\n     kept in the pre-processed model\n   * New option `sosPrioritize` to determine how to prioritize SOS\n   * Added new event `generatedCuts`\n   * CbcSolver can now read compressed .lp files (GZIP, BZIP2)\n   * New functions in the C interface: Cbc_readLp, Cbc_writeLp,\n     Cbc_addCol, Cbc_addRow, Cbc_getNumIntegers, Cbc_bestSolution,\n     Cbc_getObjValue, Cbc_getRowNz, Cbc_getRowIndices, Cbc_getRowCoeffs,\n     Cbc_getRowRHS, Cbc_getRowSense, Cbc_getColNz, Cbc_getColIndices,\n     Cbc_getColCoeffs, Cbc_getReducedCost, Cbc_numberSavedSolutions,\n     Cbc_savedSolution, Cbc_savedSolutionObj, Cbc_setMIPStart,\n     Cbc_setMIPStartI, Cbc_addCutCallback, Osi_getNumCols, Osi_getColName,\n     Osi_getColLower, Osi_getColUpper, Osi_isInteger, Osi_getNumRows,\n     Osi_getRowNz, Osi_getRowIndices, Osi_getRowCoeffs, Osi_getRowRHS,\n     Osi_getRowSense, Osi_getColSolution, OsiCuts_addRowCut,\n     Cbc_getAllowableGap, Cbc_setAllowableGap, Cbc_getAllowableFractionGap,\n     Cbc_setAllowableFractionGap, Cbc_getAllowablePercentageGap,\n     Cbc_setAllowablePercentageGap, Cbc_getCutoff, Cbc_setCutoff,\n     Cbc_getMaximumNodes, Cbc_setMaximumNodes, Cbc_getMaximumSolutions,\n     Cbc_setMaximumSolutions, Cbc_getLogLevel, Cbc_setLogLevel,\n     Cbc_getMaximumSeconds, Cbc_setMaximumSeconds\n   * New action `guess` checks properties of the model to decide the best\n     parameters for solving the LP relaxation.\n   * New example inc.cpp to illustrate solution callback\n   * New example driver5.cpp to illustrate user-defined branching rule\n   * New example clpdriver.cpp to illustrate use of ClpEventHandler\n   * Added support for using OsiHiGHS with CbcGeneric\n   * Added MSVC 14 project files\n   * Bugfixes\n\n * Release 2.9.10\n   * Fix a numerical issue\n   * Fix some memory leaks\n   * Fix issue when root node is obviously infeasible\n   * Performance improvements for mini-B&B\n   * Fix name of bound in final message\n   * Fix names in preprocessed problem\n\n * Release 2.9.9\n\n   * Fixes for SOS2\n   * Updates to mipstart\n   * Switching to new build system\n   * Updates for CI\n\n * Release 2.9.8\n\n   * Update to most current releases of dependencies\n   * Small bug fixes\n   * Add support for automatic build and test with Travis and Appveyor\n\n * Release 2.9.7\n\n   * Small bug fixes\n   * Option to switch to line buffered output\n\n * Release 2.9.6\n\n   * Small bug fixes\n\n * Release 2.9.5\n\n   * Small bug fixes\n\n * Release 2.9.4\n\n   * Small fixes for stability\n   * Fixes for Doygen documentation generation\n\n * Release 2.9.3\n\n   * Minor bug fixes\n\n * Release 2.9.2\n\n   * Fix for proper installation with `DESTDIR`\n\n * Release 2.9.1\n\n   * Fix for dependency linking\n   * Minor bug fixes\n\n * Release 2.9.0\n\n   * Introduced specialized branching methods for dealing with \"big Ms\".\n   * Introduced new methods for dealing with symmetry (requires installation of [nauty](http://pallini.di.uniroma1.it/))\n   * Introduction of conflict cuts (off by default, turn on with `-constraint conflict`)\n\n * Release 2.8.13\n\n   * Improved message handling\n   * Miscellaneous bug fixes.\n\n * Release 2.8.12\n\n   * Update for dependencies.\n\n * Release 2.8.11\n\n   * Major overhaul of C interface\n   * Fixes to SOS\n   * Miscellaneous bug fixes\n\n * Release 2.8.10\n\n   * More changes related to thread safety.\n   * Fix bug in build system with Visual Studio compiler.\n   * Miscellaneous bug fixes.\n\n * Release 2.8.9\n\n   * Attempt to make Cbc thread safe.\n   * Add parallel examples.\n   * Add CbcSolverUsefulInfo.\n   * Bug fixes.\n\n * Release 2.8.8\n\n   * Added example to show how to use Cbc with installed libraries in MSVC++\n   * Fixed inconsistency in addition of libCbcSolver to dependencies in\n     {{{cbc_addlibs.txt}}}.\n\n * Release 2.8.7\n\n   * Changed so that Doxygen builds LaTex\n   * Fixes for build system\n\n * Release 2.8.6\n\n   * Added option to explicitly link dependencies to comply with packaging\n     requirements on Fedora and Debian, as well as allow building of MinGW\n     DLLs.\n\n * Release 2.8.5\n\n   * Minor fixes to build system\n\n * Release 2.8.4\n\n   * Small bug fixes\n   * Upgrades to build system\n\n * Release 2.8.3:\n\n   * Fix for handling SOS.\n\n * Release 2.8.2:\n\n   * Fixed recognition of Glpk source in main configure.\n   * Minor bug fixes in CoinUtils, Clp, and Cbc.\n\n * Release 2.8.1:\n\n   * Minor bug fixes\n\n * Release 2.8.0:\n\n   * Introduced new secondaryStatus 8 to indicate that solving stopped due to\n     an iteration limit.\n   * Solution pool is now accessible via the command line and the CbcMain*\n     interface.\n   * New mipstart option to read an initial feasible solution from a file.\n     Only values for discrete variables need to be provided.\n\n   * Added Proximity Search heuristic by Fischetti and Monaci (off by\n     default): The simplest way to switch it on using stand-alone version is\n     `-proximity on`.\n\n     Proximity Search is the new \"No-Neighborhood Search\" 0-1 MIP refinement\n     heuristic recently proposed by Fischetti and Monaci (2012). The idea is\n     to define a sub-MIP without additional constraints but with a modified\n     objective function intended to attract the search in the proximity of the\n     incumbent. The approach works well for 0-1 MIPs whose solution landscape\n     is not too irregular (meaning the there is reasonable probability of\n     finding an improved solution by flipping a small number of binary\n     variables), in particular when it is applied to the first heuristic\n     solutions found at the root node.\n\n   * An implementation of Zero-Half-Cuts by Alberto Caprara is now available.\n     By default, these cuts are off. To use add to your command line\n     -zerohalfCuts root (or other options) or just -zero. So far, they may\n     help only on a small subset of problems and may need some tuning.\n\n     The implementation of these cuts is described in G. Andreello, A.\n     Caprara, and M. Fischetti \"Embedding Cuts in a Branch and Cut Framework:\n     a Computational Study with {0,1/2}-Cuts\" INFORMS Journal on Computing\n     19(2), 229-238, 2007 http://dx.doi.org/10.1287/ijoc.1050.0162\n\n   * An alternative implementation of a reduce and split cut generator by\n     Giacomo Nannicini is now available. By default, these cuts are off. To\n     use add to your command line -reduce2AndSplitCuts root (or other\n     options).\n\n     The implementation of these cuts is described in G. Cornuejols and G.\n     Nannicini \"Practical strategies for generating rank-1 split cuts in\n     mixed-integer linear programming\" Mathematical Programming Computation\n     3(4), 281-318, 2011 http://dx.doi.org/10.1007/s12532-011-0028-6\n\n   * An alternative robust implementation of a Gomory cut generator by Giacomo\n     Nannicini is now available. By default, these cuts are off. To use add to\n     your command line -GMI root (or other options).\n\n     The implementation of these cuts is described in G. Cornuejols, F.\n     Margot, and G. Nannicini \"On the safety of Gomory cut generators\"\n     http://faculty.sutd.edu.sg/~nannicini/index.php?page=publications\n\n   * To encourage the use of some of the more exotic/expensive cut generators\n     a parameter -slowcutpasses has been added. The idea is that the code does\n     these cuts just a few times - less than the more usual cuts. The default\n     is 10. The cut generators identified by \"may be slow\" at present are just\n     Lift and project and ReduceAndSplit (both versions).\n\n   * Allow initialization of random seed by user. Pseudo-random numbers are\n     used in Cbc and Clp. In Clp they are used to break ties in degenerate\n     problems, while in Cbc heuristics such as the Feasibility Pump use them\n     to decide whether to round up or down. So if a different pseudo-random\n     seed is given to Clp then you may get a different continuous optimum and\n     so different cuts and heuristic solutions. This can be switched on by\n     setting randomSeed for Clp and/or randomCbcSeed for Cbc. The special\n     value of 0 tells code to use time of day for initial seed.\n\n   * Building on this idea, Andrea Lodi, Matteo Fischetti, Michele Monaci,\n     Domenico Salvagnin, Yuji Shinano, and Andrea Tramontani suggest that this\n     idea be improved by running at the root node with multiple copies of\n     solver, each with its own different seed and then passing in the\n     solutions and cuts so that the main solver has a richer set of solutions\n     and possibly stronger cuts. This is switched on by setting\n     -multipleRootPasses. These can also be done in parallel.\n\n   * Few changes to presolve for special variables and badly scaled problems\n     (in CoinUtils).\n\n   * New option -extraVariables <number> which switches on a trivial\n    re-formulation that introduces extra integer variables to group together\n    variables with same cost.\n\n   * For some problems, cut generators and general branching work better if\n     the problem would be infeasible if the cost is too high. If the new\n     option -constraintFromCutoff is set, the objective function is added as a\n     constraint which rhs is set to the current cutoff value (objective value\n     of best known solution).\n\n * Release 2.7.8:\n\n   * Change message when LP simplex iteration limit is hit from \"Exiting on\n     maximum nodes\" to \"Exiting on maximum number of iterations\"\n   * Fix for using overlapping SOS.\n   * Fixes in buildsystem.\n\n * Release 2.7.7:\n\n   * Fix to report interruption on user event if SIGINT is received by\n     CbcSolver. model->status() should now be 5 if this event happened. Added\n     method CbcModel::sayEventHappened() to make cbc stop due to an 'user\n     event'.\n\n   * Other minor fixes.\n\n * Release 2.7.6:\n\n   * Fixes to build system.\n\n   * Other minor fixes.\n\n * Release 2.7.5:\n\n   * Fixes to get AMPL interface working again.\n\n   * More fixes to MSVC++ files.\n\n * Release 2.7.4:\n\n   * Minor bugfixes.\n\n * Release 2.7.3:\n\n   * Minor bugfixes.\n\n   * Fixes to MSVC++ files.\n\n * Release 2.7.2:\n\n   * Allow row/column names for GMPL models.\n\n   * Added CbcModel::haveMultiThreadSupport() to indicate whether Cbc library\n     has been compiled with multithread support.\n\n   * Added CbcModel::waitingForMiniBranchAndBound() to indicate whether\n     sub-MIP heuristic is currently running.\n\n   * Cbc shell should work with readline if configured with\n     `--enable-gnu-packages`.\n\n   * Support for compressed input files (.gz, .bz2) is now enabled by default.\n\n   * Fix problems with relative gap tolerance > 100% and further bugs.\n\n   * Fixes for MSVC++ Version 9 files.\n\n   * Minor fixes in buildsystem; update to BuildTools 0.7.1.\n\n * Release 2.7.1:\n\n   * Fixes to MSVC++ files\n\n * Release 2.7.0:\n\n   * License has been changed to the EPL.\n\n   * Support for MSVC++ version 10 added.\n\n   * Support for BuildTools version 0.7 to incorporate recent enhancements,\n     including proper library versioning in Linux, prohibiting installation of\n     private headers, etc.\n\n   * Updated externals to new stable versions of dependent projects.\n\n   * Improvements to heuristics.\n\n   * New options for cut generation.\n\n   * Improved reporting of results."
}
