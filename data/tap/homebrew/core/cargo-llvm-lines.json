{
  "name": "cargo-llvm-lines",
  "full_name": "cargo-llvm-lines",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Count lines of LLVM IR per generic function",
  "license": "Apache-2.0 or MIT",
  "homepage": "https://github.com/dtolnay/cargo-llvm-lines",
  "versions": {
    "stable": "0.4.32",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/dtolnay/cargo-llvm-lines/archive/0.4.32.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "cb815a297dc32e61a2e9b9d4a129c09ec0985921e0327ede671482428d4e5a8c"
    },
    "head": {
      "url": "https://github.com/dtolnay/cargo-llvm-lines.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cargo-llvm-lines/blobs/sha256:041969ccde933fa85ca34a5aadbd03b49937c01c4321c5fcadbd9171bd5494cc",
          "sha256": "041969ccde933fa85ca34a5aadbd03b49937c01c4321c5fcadbd9171bd5494cc"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cargo-llvm-lines/blobs/sha256:978545b1c99b3939e716388f854d25fc8a02f872da77e0924bba1043ff2a39e1",
          "sha256": "978545b1c99b3939e716388f854d25fc8a02f872da77e0924bba1043ff2a39e1"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cargo-llvm-lines/blobs/sha256:f2077e90e15fb6d2665e046c60c3dbd087d7d17e1c3748f29bff754803d2242f",
          "sha256": "f2077e90e15fb6d2665e046c60c3dbd087d7d17e1c3748f29bff754803d2242f"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cargo-llvm-lines/blobs/sha256:d0fdd42a17b4e0e9c89ba3211989e6489b4c004eb66e845d7556fb3db4d2706b",
          "sha256": "d0fdd42a17b4e0e9c89ba3211989e6489b4c004eb66e845d7556fb3db4d2706b"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cargo-llvm-lines/blobs/sha256:1fcb1e0c58030f803dd28c1e3fb1b2e5592d0f11af9427b521d0c45333fd836f",
          "sha256": "1fcb1e0c58030f803dd28c1e3fb1b2e5592d0f11af9427b521d0c45333fd836f"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cargo-llvm-lines/blobs/sha256:29b5fd6f18b31ad492782d75a336a3e8f8e8929a6b7785ddadddd1daa2b35187",
          "sha256": "29b5fd6f18b31ad492782d75a336a3e8f8e8929a6b7785ddadddd1daa2b35187"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cargo-llvm-lines/blobs/sha256:96804a779be524dc604156941af5b5b86b964ac89cca86dab7433036bfbd310c",
          "sha256": "96804a779be524dc604156941af5b5b86b964ac89cca86dab7433036bfbd310c"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [
    "rustup-init"
  ],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/cargo-llvm-lines.rb",
  "ruby_source_checksum": {
    "sha256": "e5edcc59e750f9afd1c177376c2c158ca3783b2f0848ba33147ad5afa24422b9"
  },
  "date_added": "2021-08-23T08:19:27+00:00",
  "readme": "# cargo-llvm-lines\n\n[<img alt=\"github\" src=\"https://img.shields.io/badge/github-dtolnay/cargo--llvm--lines-8da0cb?style=for-the-badge&labelColor=555555&logo=github\" height=\"20\">](https://github.com/dtolnay/cargo-llvm-lines)\n[<img alt=\"crates.io\" src=\"https://img.shields.io/crates/v/cargo-llvm-lines.svg?style=for-the-badge&color=fc8d62&logo=rust\" height=\"20\">](https://crates.io/crates/cargo-llvm-lines)\n[<img alt=\"build status\" src=\"https://img.shields.io/github/actions/workflow/status/dtolnay/cargo-llvm-lines/ci.yml?branch=master&style=for-the-badge\" height=\"20\">](https://github.com/dtolnay/cargo-llvm-lines/actions?query=branch%3Amaster)\n\nThis tool measures the number and size of instantiations of each generic\nfunction in a program, indicating which parts of your code offer the highest\nleverage in improving compilation metrics.\n\nGeneric functions in Rust can be instantiated multiple times, so they can\ndisproportionately affect compile time, compiler memory usage, and the size of\ncompiled executables.\n\n## Installation\n\nInstall with `cargo install cargo-llvm-lines`.\n\n## Output\n\nExample output from running `cargo llvm-lines` on its own codebase:\n\n```console\n$ cargo llvm-lines | head -20\n\n  Lines                Copies              Function name\n  -----                ------              -------------\n  51637                1222                (TOTAL)\n   2240 (4.3%,  4.3%)     1 (0.1%,  0.1%)  <cargo_llvm_lines::opts::LlvmLines as clap_builder::derive::Args>::augment_args\n   1190 (2.3%,  6.6%)     1 (0.1%,  0.2%)  <cargo_llvm_lines::opts::LlvmLines as clap_builder::derive::FromArgMatches>::from_arg_matches_mut\n   1005 (1.9%,  8.6%)     3 (0.2%,  0.4%)  alloc::raw_vec::RawVec<T,A>::grow_amortized\n    973 (1.9%, 10.5%)     7 (0.6%,  1.0%)  clap_builder::parser::matches::arg_matches::ArgMatches::try_remove_arg_t\n    939 (1.8%, 12.3%)     7 (0.6%,  1.6%)  alloc::sync::Arc<T>::try_unwrap\n    935 (1.8%, 14.1%)     6 (0.5%,  2.0%)  <alloc::vec::Vec<T> as alloc::vec::spec_from_iter_nested::SpecFromIterNested<T,I>>::from_iter\n    861 (1.7%, 15.8%)     7 (0.6%,  2.6%)  alloc::sync::Arc<dyn core::any::Any+core::marker::Send+core::marker::Sync>::downcast\n    761 (1.5%, 17.2%)     5 (0.4%,  3.0%)  alloc::vec::Vec<T,A>::extend_desugared\n    638 (1.2%, 18.5%)     1 (0.1%,  3.1%)  cargo_llvm_lines::table::print\n    599 (1.2%, 19.6%)    16 (1.3%,  4.4%)  core::option::Option<T>::ok_or_else\n    592 (1.1%, 20.8%)     2 (0.2%,  4.6%)  core::slice::sort::merge\n    574 (1.1%, 21.9%)     2 (0.2%,  4.7%)  core::slice::sort::merge_sort\n    561 (1.1%, 23.0%)     7 (0.6%,  5.3%)  clap_builder::parser::matches::any_value::AnyValue::downcast_into\n    556 (1.1%, 24.1%)     4 (0.3%,  5.6%)  <core::slice::iter::Iter<T> as core::iter::traits::iterator::Iterator>::next\n    541 (1.0%, 25.1%)    16 (1.3%,  7.0%)  core::option::Option<T>::map\n    536 (1.0%, 26.1%)     8 (0.7%,  7.6%)  <alloc::sync::Weak<T> as core::ops::drop::Drop>::drop\n    533 (1.0%, 27.2%)     1 (0.1%,  7.7%)  core::str::pattern::simd_contains\n```\n\nThere is one line per function with three columns of output:\n\n1. Total number of lines of LLVM IR generated across all instantiations of the\n   function (plus the percentage of the total and the cumulative percentage\n   of all functions so far).\n2. Number of instantiations of the function (plus the percentage of the total\n   and the cumulative percentage of all functions so far). For a generic\n   function, the number of instantiations is roughly the number of distinct\n   combinations of generic type parameters it is called with.\n3. Name of the function.\n\n## Multicrate Projects\n\nInterpreting the output in the presence of multiple crates and generics can be\ntricky. `cargo llvm-lines` only shows the contribution of the root crate;\ndependencies are not included. To assess the contribution of an intermediate\ncrate, use the `-p` flag:\n\n```console\n$ cargo llvm-lines -p some-dependency\n```\n\nNote however, that Rust generics are monomorphised &mdash; a generic function\nwill be accounted for in the crates that use it, rather than in the defining\ncrate.\n\nThere is a trick to get a holistic view: enabling link time optimization causes\nall code generation to happen in the root crate. So you can use the following\ninvocation to get a full picture:\n\n```console\n$ CARGO_PROFILE_RELEASE_LTO=fat cargo llvm-lines --release\n```\n\n## Acknowledgements\n\nBased on a suggestion from **@eddyb** on how to count monomorphized functions\nin order to debug compiler memory usage, executable size and compile time.\n\n> **\\<eddyb>** unoptimized LLVM IR<br>\n> **\\<eddyb>** first used grep '^define' to get only the lines defining function bodies<br>\n> **\\<eddyb>** then regex replace in my editor to remove everything before @ and everything after (<br>\n> **\\<eddyb>** then sort | uniq -c<br>\n\n<br>\n\n#### License\n\n<sup>\nLicensed under either of <a href=\"LICENSE-APACHE\">Apache License, Version\n2.0</a> or <a href=\"LICENSE-MIT\">MIT license</a> at your option.\n</sup>\n\n<br>\n\n<sub>\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in this crate by you, as defined in the Apache-2.0 license, shall\nbe dual licensed as above, without any additional terms or conditions.\n</sub>"
}
