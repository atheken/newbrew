{
  "name": "git-subrepo",
  "full_name": "git-subrepo",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Git Submodule Alternative",
  "license": "MIT",
  "homepage": "https://github.com/ingydotnet/git-subrepo",
  "versions": {
    "stable": "0.4.6",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/ingydotnet/git-subrepo/archive/0.4.6.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "6dcfce781007e7a755444c59e3622eb436e5671c197b8031eaf69fdbaea2b189"
    },
    "head": {
      "url": "https://github.com/ingydotnet/git-subrepo.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-subrepo/blobs/sha256:198e49f8a5a9df95401bdb6b04e5cdf172ff2fc72cb224bc4c015b3d6f0e127d",
          "sha256": "198e49f8a5a9df95401bdb6b04e5cdf172ff2fc72cb224bc4c015b3d6f0e127d"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-subrepo/blobs/sha256:198e49f8a5a9df95401bdb6b04e5cdf172ff2fc72cb224bc4c015b3d6f0e127d",
          "sha256": "198e49f8a5a9df95401bdb6b04e5cdf172ff2fc72cb224bc4c015b3d6f0e127d"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-subrepo/blobs/sha256:198e49f8a5a9df95401bdb6b04e5cdf172ff2fc72cb224bc4c015b3d6f0e127d",
          "sha256": "198e49f8a5a9df95401bdb6b04e5cdf172ff2fc72cb224bc4c015b3d6f0e127d"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-subrepo/blobs/sha256:e070c11eb2fcffba7113d08541dbc52a43cc0171e59a2227adaf158a4378d3d8",
          "sha256": "e070c11eb2fcffba7113d08541dbc52a43cc0171e59a2227adaf158a4378d3d8"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-subrepo/blobs/sha256:e070c11eb2fcffba7113d08541dbc52a43cc0171e59a2227adaf158a4378d3d8",
          "sha256": "e070c11eb2fcffba7113d08541dbc52a43cc0171e59a2227adaf158a4378d3d8"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-subrepo/blobs/sha256:e070c11eb2fcffba7113d08541dbc52a43cc0171e59a2227adaf158a4378d3d8",
          "sha256": "e070c11eb2fcffba7113d08541dbc52a43cc0171e59a2227adaf158a4378d3d8"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-subrepo/blobs/sha256:198e49f8a5a9df95401bdb6b04e5cdf172ff2fc72cb224bc4c015b3d6f0e127d",
          "sha256": "198e49f8a5a9df95401bdb6b04e5cdf172ff2fc72cb224bc4c015b3d6f0e127d"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "bash"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/git-subrepo.rb",
  "ruby_source_checksum": {
    "sha256": "6ff40b55ea0b402cc6839b8bdf360fe685ce1c126c651a768f17712346b2cd7c"
  },
  "date_added": "2015-04-14T11:38:09-07:00",
  "readme": "=pod\n\n=for comment\nDO NOT EDIT. This Pod was generated by Swim v0.1.48.\nSee http://github.com/ingydotnet/swim-pm#readme\n\n=encoding utf8\n\n=head1 Name\n\ngit-subrepo - Git Submodule Alternative\n\n=head1 Synopsis\n\n    git subrepo -h    # Help Overview\n\n    git subrepo clone <remote-url> [<subdir>]\n    git subrepo init <subdir>\n    git subrepo pull <subdir>\n    git subrepo push <subdir>\n\n    git subrepo fetch <subdir>\n    git subrepo branch <subdir>\n    git subrepo commit <subdir>\n    git subrepo config <subdir>\n\n    git subrepo status [<subdir>]\n    git subrepo clean <subdir>\n\n    git subrepo help [<command> | --all]\n    git subrepo version\n    git subrepo upgrade\n\n=head1 Description\n\nThis git command \"clones\" an external git repo into a subdirectory of your\nrepo. Later on, upstream changes can be pulled in, and local changes can be\npushed back. Simple.\n\n=head1 Benefits\n\nThis command is an improvement from C<git-submodule> and C<git-subtree>; two\nother git commands with similar goals, but various problems.\n\nIt assumes there are 3 main roles of people interacting with a repo, and\nattempts to serve them all well:\n\n=over\n\n=item * B<owner> - The person who authors/owns/maintains a repo.\n\n=item * B<users> - People who are just using/installing the repo.\n\n=item * B<collaborators> - People who commit code to the repo and subrepos.\n\n=back\n\nThe C<git-subrepo> command benefits these roles in the following ways:\n\n=over\n\n=item * Simple and intuitive commandline usage (with tab completion).\n\n=item * Users get your repo and all your subrepos just by cloning your repo.\n\n=item * Users do not need to install C<git-subrepo>, ever.\n\n=item * Collaborators do not need to install unless they want to push/pull.\n\n=item * Collaborators know when a subdir is a subrepo (it has a C<.gitrepo> file).\n\n=item * The C<.gitrepo> file never gets pushed back to the subrepo upstream.\n\n=item * Well named branches and remotes are generated for manual operations.\n\n=item * Owners do not deal with the complications of keeping submodules in sync.\n\n=item * Subrepo repositories can contain subrepos themselves.\n\n=item * Branching with subrepos JustWorks™.\n\n=item * Different branches can have different subrepos in different states, etc.\n\n=item * Moving/renaming/deleting a subrepo subdir JustWorks™.\n\n=item * You can C<init> an existing subdirectory into a subrepo.\n\n=item * Your git history is kept squeaky clean.\n\n=item * Upstream history (clone/pull) is condensed into a single commit.\n\n=item * Pulls can use a C<merge>, C<rebase> or C<force> strategies.\n\n=item * You can see the subrepo history with C<< git log subrepo/<subdir>/fetch >>.\n\n=item * Commits pushed back upstream are B<not> condensed (by default).\n\n=item * Trivial to try any subrepo operations and then reset back.\n\n=item * No configuration required.\n\n=item * Does not introduce history that messes up other git commands.\n\n=item * Fixes known rebase failures with C<git-subtree>.\n\n=back\n\n=head1 Installation\n\nThe best short answer is:\n\n    git clone https://github.com/ingydotnet/git-subrepo /path/to/git-subrepo\n    echo 'source /path/to/git-subrepo/.rc' >> ~/.bashrc\n\nThe complete \"Installation Instructions\" can be found below.\n\nNote: git-subrepo needs a git version (> 2.7) that supports worktree:s.\n\n=head1 Commands\n\nAll the B<subrepo> commands use names of actual Git commands and try to do\noperations that are similar to their Git counterparts. They also attempt to\ngive similar output in an attempt to make the subrepo usage intuitive to\nexperienced Git users.\n\nPlease note that the commands are I<not> exact equivalents, and do not take\nall the same arguments. Keep reading…\n\n=over\n\n=item C<< git subrepo clone <repository> [<subdir>] [-b <branch>] [-f] [-m <msg>] [--file=<msg file>] [-e] [--method <merge|rebase>] >>\n\nAdd a repository as a subrepo in a subdir of your repository.\n\nThis is similar in feel to C<git clone>. You just specify the remote repo url,\nand optionally a sub-directory and/or branch name. The repo will be fetched\nand merged into the subdir.\n\nThe subrepo history is I<squashed> into a single commit that contains the\nreference information. This information is also stored in a special file\ncalled C<< <subdir>/.gitrepo >>. The presence of this file indicates that the\ndirectory is a subrepo.\n\nAll subsequent commands refer to the subrepo by the name of the\nI<subdir>. From the subdir, all the current information about the subrepo\ncan be obtained.\n\nThe C<--force> option will \"reclone\" (completely replace) an existing subdir.\n\nThe C<--method> option will decide how the join process between branches are\nperformed. The default option is merge.\n\nThe C<clone> command accepts the C<--branch=> C<--edit>, C<--file>, C<--force>\nand C<--message=> options.\n\n=item C<< git subrepo init <subdir> [-r <remote>] [-b <branch>] [--method <merge|rebase>] >>\n\nTurn an existing subdirectory into a subrepo.\n\nIf you want to expose a subdirectory of your project as a published subrepo,\nthis command will do that. It will split out the content of a normal\nsubdirectory into a branch and start tracking it as a subrepo. Afterwards your\noriginal repo will look exactly the same except that there will be a C<<<subdir>/.gitrepo >> file.\n\nIf you specify the C<--remote> (and optionally the C<--branch>) option, the\nvalues will be added to the C<< <subdir>/.gitrepo >> file. The C<--remote>\noption is the upstream URL, and the C<--branch> option is the upstream branch\nto push to. These values will be needed to do a C<git subrepo push> command,\nbut they can be provided later on the C<push> command (and saved to C<<<subdir>/.gitrepo >> if you also specify the C<--update> option).\n\nNote: You will need to create the empty upstream repo and push to it on your\n      own, using C<< git subrepo push <subdir> >>.\n\nThe C<--method> option will decide how the join process between branches are\nperformed. The default option is merge.\n\nThe C<init> command accepts the C<--branch=> and C<--remote=> options.\n\n=item C<< git subrepo pull <subdir>|--all [-M|-R|-f] [-m <msg>] [--file=<msg file>] [-e] [-b <branch>] [-r <remote>] [-u] >>\n\nUpdate the subrepo subdir with the latest upstream changes.\n\nThe C<pull> command fetches the latest content from the remote branch pointed\nto by the subrepo's C<.gitrepo> file, and then tries to merge the changes into\nthe corresponding subdir. It does this by making a branch of the local commits\nto the subdir and then merging or rebasing (see below) it with the fetched\nupstream content. After the merge, the content of the new branch replaces your\nsubdir, the C<.gitrepo> file is updated and a single 'pull' commit is added to\nyour mainline history.\n\nThe C<pull> command will attempt to do the following commands in one go:\n\n    git subrepo fetch <subdir>\n    git subrepo branch <subdir>\n    git merge/rebase subrepo/<subdir>/fetch subrepo/<subdir>\n    git subrepo commit <subdir>\n    # Only needed for a consequential push:\n    git update-ref refs/subrepo/<subdir>/pull subrepo/<subdir>\n\nIn other words, you could do all the above commands yourself, for the same\neffect. If any of the commands fail, subrepo will stop and tell you to finish\nthis by hand. Generally a failure would be in the merge or rebase part, where\nconflicts can happen. Since Git has lots of ways to resolve conflicts to your\npersonal tastes, the subrepo command defers to letting you do this by hand.\n\nWhen pulling new data, the method selected in clone/init is used. This has no\neffect on the final result of the pull, since it becomes a single commit. But\nit does affect the resulting C<< subrepo/<subdir> >> branch, which is often\nused for a subrepo C<push> command. See 'push' below for more information. If\nyou want to change the method you can use the C<config> command for this.\n\nWhen you pull you can assume a fast-forward strategy (default) or you can\nspecify a C<--rebase>, C<--merge> or C<--force> strategy. The latter is the\nsame as a C<clone --force> operation, using the current remote and branch.\n\nLike the C<clone> command, C<pull> will squash all the changes (since the last\npull or clone) into one commit. This keeps your mainline history nice and\nclean. You can easily see the subrepo's history with the C<git log> command:\n\n    git log refs/subrepo/<subdir>/fetch\n\nThe set of commands used above are described in detail below.\n\nThe C<pull> command accepts the C<--all>, C<--branch=>, C<--edit>, C<--file>,\nC<--force>, C<--message=>, C<--remote=> and C<--update> options.\n\n=item C<< git subrepo push <subdir>|--all [<branch>] [-m msg] [--file=<msg file>] [-r <remote>] [-b <branch>] [-M|-R] [-u] [-f] [-s] [-N] >>\n\nPush a properly merged subrepo branch back upstream.\n\nThis command takes the subrepo branch from a successful pull command and\npushes the history back to its designated remote and branch. You can also use\nthe C<branch> command and merge things yourself before pushing if you want to\n(although that is probably a rare use case).\n\nThe C<push> command requires a branch that has been properly merged/rebased\nwith the upstream HEAD (unless the upstream HEAD is empty, which is common\nwhen doing a first C<push> after an C<init>). That means the upstream HEAD is\none of the commits in the branch.\n\nBy default the branch ref C<< refs/subrepo/<subdir>/pull >> will be pushed,\nbut you can specify a (properly merged) branch to push.\n\nAfter that, the C<push> command just checks that the branch contains the\nupstream HEAD and then pushes it upstream.\n\nThe C<--force> option will do a force push. Force pushes are typically\ndiscouraged. Only use this option if you fully understand it. (The C<--force>\noption will NOT check for a proper merge. ANY branch will be force pushed!)\n\nThe C<push> command accepts the C<--all>, C<--branch=>, C<--dry-run>, C<--file>, C<--force>, C<--merge>, C<--message>, C<--rebase>, C<--remote=>, C<--squash> and C<--update> options.\n\n=item C<< git subrepo fetch <subdir>|--all [-r <remote>] [-b <branch>] >>\n\nFetch the remote/upstream content for a subrepo.\n\nIt will create a Git reference called C<< subrepo/<subdir>/fetch >> that\npoints at the same commit as C<FETCH_HEAD>. It will also create a remote\ncalled C<< subrepo/<subdir> >>. These are temporary and you can easily remove\nthem with the subrepo C<clean> command.\n\nThe C<fetch> command accepts the C<--all>, C<--branch=> and C<--remote=> options.\n\n=item C<< git subrepo branch <subdir>|--all [-f] [-F] >>\n\nCreate a branch with local subrepo commits.\n\nScan the history of the mainline for all the commits that affect the C<subdir>\nand create a new branch from them called C<< subrepo/<subdir> >>.\n\nThis is useful for doing C<pull> and C<push> commands by hand.\n\nUse the C<--force> option to write over an existing C<< subrepo/<subdir>\n>> branch.\n\nThe C<branch> command accepts the C<--all>, C<--fetch> and C<--force> options.\n\n=item C<< git subrepo commit <subdir> [<subrepo-ref>] [-m <msg>] [--file=<msg file>] [-e] [-f] [-F] >>\n\nAdd subrepo branch to current history as a single commit.\n\nThis command is generally used after a hand-merge. You have done a C<subrepobranch> and merged (rebased) it with the upstream. This command takes the HEAD\nof that branch, puts its content into the subrepo subdir and adds a new commit\nfor it to the top of your mainline history.\n\nThis command requires that the upstream HEAD be in the C<< subrepo/<subdir> >>\nbranch history. That way the same branch can push upstream. Use the C<--force>\noption to commit anyway.\n\nThe C<commit> command accepts the C<--edit>, C<--fetch>, C<--file>, C<--force>\nand C<--message=> options.\n\n=item C<< git subrepo status [<subdir>|--all|--ALL] [-F] [-q|-v] >>\n\nGet the status of a subrepo. Uses the C<--all> option by default. If the C<--quiet> flag is used, just print the subrepo names, one per line.\n\nThe C<--verbose> option will show all the recent local and upstream commits.\n\nUse C<--ALL> to show the subrepos of the subrepos (ie the\n\"subsubrepos\"), if any.\n\nThe C<status> command accepts the C<--all>, C<--ALL>, C<--fetch>, C<--quiet>\nand C<--verbose> options.\n\n=item C<< git subrepo clean <subdir>|--all|--ALL [-f] >>\n\nRemove artifacts created by C<fetch> and C<branch> commands.\n\nThe C<fetch> and C<branch> operations (and other commands that call them)\ncreate temporary things like refs, branches and remotes. This command removes\nall those things.\n\nUse C<--force> to remove refs. Refs are not removed by default because they\nare sometimes needed between commands.\n\nUse C<--all> to clean up after all the current subrepos. Sometimes you might\nchange to a branch where a subrepo doesn't exist, and then C<--all> won't find\nit. Use C<--ALL> to remove any artifacts that were ever created by subrepo.\n\nTo remove ALL subrepo artifacts:\n\n    git subrepo clean --ALL --force\n\nThe C<clean> command accepts the C<--all>, C<--ALL>, and C<--force> options.\n\n=item C<< git subrepo config <subdir> <option> [<value>] [-f] >>\n\nRead or update configuration values in the subdir/.gitrepo file.\n\nBecause most of the values stored in the .gitrepo file are generated you\nwill need to use C<--force> if you want to change anything else then the\nC<method> option.\n\nExample to update the C<method> option for a subrepo:\n\n    git subrepo config foo method rebase\n\n=item C<< git subrepo help [<command>|--all] >>\n\nSame as C<git help subrepo>. Will launch the manpage. For the shorter usage,\nuse C<git subrepo -h>.\n\nUse C<< git subrepo help <command> >> to get help for a specific command. Use\nC<--all> to get a summary of all commands.\n\nThe C<help> command accepts the C<--all> option.\n\n=item C<git subrepo version [-q|-v]>\n\nThis command will display version information about git-subrepo and its\nenvironment. For just the version number, use C<git subrepo --version>. Use\nC<--verbose> for more version info, and C<--quiet> for less.\n\nThe C<version> command accepts the C<--quiet> and C<--verbose> options.\n\n=item C<git subrepo upgrade>\n\nUpgrade the C<git-subrepo> software itself. This simply does a C<git pull>\non the git repository that the code is running from. It only works if you\nare on the C<master> branch. It won't work if you installed C<git-subrepo>\nusing C<make install>; in that case you'll need to C<make install> from the\nlatest code.\n\n=back\n\n=head1 Command Options\n\n=over\n\n=item C<-h>\n\nShow a brief view of the commands and options.\n\n=item C<--help>\n\nGives an overview of the help options available for the subrepo command.\n\n=item C<--version>\n\nPrint the git-subrepo version. Just the version number. Try the C<version>\ncommand for more version info.\n\n=item C<--all> (C<-a>)\n\nIf you have multiple subrepos, issue the command to all of them (if\napplicable).\n\n=item C<--ALL> (C<-A>)\n\nIf you have subrepos that also have subrepos themselves, issue the command to\nALL of them. Note that the C<--ALL> option only works for a subset of the\ncommands that C<--all> works for.\n\n=item C<< --branch=<branch-name> >> (C<< -b <branch-name> >>)\n\nUse a different upstream branch-name than the remote HEAD or the one saved in\nC<.gitrepo> locally.\n\n=item C<--dry-run> (C<-N>)\n\nFor the push command, do everything up until the push and then print out the\nactual C<git push> command needed to finish the operation.\n\n=item C<--edit> (C<-e>)\n\nEdit the commit message before committing.\n\n=item C<--fetch> (C<-F>)\n\nUse this option to fetch the upstream commits, before running the command.\n\n=item C<< --file=<commit msg file> >>\n\nSupply your own commit message from a file\n\n=item C<--force> (C<-f>)\n\nUse this option to force certain commands that fail in the general case.\n\nNOTE: The C<--force> option means different things for different commands.\n      Read the command specific doc for the exact meaning.\n\n=item C<--merge> (C<-M>)\n\nUse a C<merge> strategy to include upstream subrepo commits on a pull (or\nsetup for push).\n\n=item C<< --message=<message> >> (C<< -m <message> >>)\n\nSpecify your own commit message on the command line.\n\n=item C<--rebase> (C<-R>)\n\nUse a C<rebase> strategy to include upstream subrepo commits on a pull (or\nsetup for push).\n\n=item C<< --remote=<remote-url> >> (C<< -r <remote-url> >>)\n\nUse a different remote-url than the one saved in C<.gitrepo> locally.\n\n=item C<--squash> (C<-s>)\n\nSquash all commits on a push into one new commit.\n\n=item C<--update> (C<-u>)\n\nIf C<--branch> or C<--remote> are used, and the command updates the\nC<.gitrepo> file, include these values to the update.\n\n=back\n\n=head1 Output Options\n\n=over\n\n=item C<--quiet> (C<-q>)\n\nPrint as little info as possible. Applicable to most commands.\n\n=item C<--verbose> (C<-v>)\n\nPrint more information about the command execution and results. Applicable to\nmost commands.\n\n=item C<--debug> (C<-d>)\n\nShow the actual git (and other) commands being executed under the hood.\nApplicable to most commands.\n\n=item C<--DEBUG> (C<-x>)\n\nUse the Bash C<set -x> option which prints every command before it is\nrun. VERY noisy, but extremely useful in deep debugging. Applicable to\nall commands.\n\n=back\n\n=head1 Environment Variables\n\nThe C<git-subrepo> command exports and honors some environment variables:\n\n=over\n\n=item C<GIT_SUBREPO_ROOT>\n\nThis is set by the C<.rc> file, if you use that method to install / enable C<git-subrepo>. It contains the path of the C<git-subrepo> repository.\n\n=item C<GIT_SUBREPO_RUNNING>\n\nThis variable is exported when C<git-subrepo> is running. It is set to the pid\nof the C<git-subrepo> process that is running. Other processes, like git hooks\nfor instance, can use this information to adjust accordingly.\n\n=item C<GIT_SUBREPO_COMMAND>\n\nThis variable is exported when C<git-subrepo> is running. It is set to the\nname of the C<git-subrepo> subcommand that is running.\n\n=item C<GIT_SUBREPO_PAGER>\n\nUse this to specify the pager to use for long output commands. Defaults to\nC<$PAGER> or C<less>.\n\n=item C<GIT_SUBREPO_QUIET>\n\nSet this for quiet (C<-q>) output.\n\n=item C<GIT_SUBREPO_VERBOSE>\n\nSet this for verbose (C<-v>) output.\n\n=item C<GIT_SUBREPO_DEBUG>\n\nSet this for debugging (C<-d>) output.\n\n=back\n\n=head1 Installation Instructions\n\nThere are currently 3 ways to install C<git-subrepo>. For all of them you need\nto get the source code from GitHub:\n\n    git clone https://github.com/ingydotnet/git-subrepo /path/to/git-subrepo\n\nThe first installation method is preferred: C<source> the C<.rc> file. Just\nadd a line like this one to your shell startup script:\n\n    source /path/to/git-subrepo/.rc\n\nThat will modify your C<PATH> and C<MANPATH>, and also enable command\ncompletion.\n\nThe second method is to do these things by hand. This might afford you more\ncontrol of your shell environment. Simply add the C<lib> and C<man>\ndirectories to your C<PATH> and C<MANPATH>:\n\n    export GIT_SUBREPO_ROOT=\"/path/to/git-subrepo\"\n    export PATH=\"/path/to/git-subrepo/lib:$PATH\"\n    export MANPATH=\"/path/to/git-subrepo/man:$MANPATH\"\n\nSee below for info on how to turn on Command Completion.\n\nThe third method is a standard system install, which puts C<git-subrepo> next\nto your other git commands:\n\n    make install        # Possibly with 'sudo'\n\nThis method does not account for upgrading and command completion yet.\n\n=head2 Windows\n\nThis command is known to work in these Windows environments:\n\n=over\n\n=item * Git for Windows -- L<https://git-for-windows.github.io/>\n\n=item * Babun -- L<http://babun.github.io/>\n\n=item * Cygwin -- L<https://www.cygwin.com/>\n\n=back\n\nLet us know if there are others that it works (or doesn't work) in.\n\n=head1 Testing\n\nThe C<git-subrepo> repository comes with a extensive test suite. You can\nrun it with:\n\n    make test\n\nor if you don't have C<make> on your system:\n\n    prove -v test\n\n=head1 Upgrading\n\nIf you used the C<.rc> or C<PATH> method of installation, just run this to\nupgrade C<git-subrepo>:\n\n    git subrepo upgrade\n\nOr (same thing):\n\n    cd /path/to/git-subrepo\n    git pull\n\nIf you used C<make install> method, then run this again (after C<git pull>):\n\n    make install        # Possibly with 'sudo'\n\n=head1 Command Completion\n\nThe C<git subrepo> command supports C<< <TAB> >>-based command completion. If\nyou don't use the C<.rc> script (see Installation, above), you'll need to\nenable this manually to use it.\n\n=head2 In Bash\n\nIf your Bash setup does not already provide command completion for Git, you'll\nneed to enable that first:\n\n    source <Git completion script>\n\nOn your system, the Git completion script might be found at any of the\nfollowing locations (or somewhere else that we don't know about):\n\n=over\n\n=item * C</etc/bash_completion.d/git>\n\n=item * C</usr/share/bash-completion/git>\n\n=item * C</usr/share/bash-completion/completions/git>\n\n=item * C</opt/local/share/bash-completion/completions/git>\n\n=item * C</usr/local/etc/bash_completion.d/git>\n\n=item * C<~/.homebrew/etc/bash_completion.d/git>\n\n=back\n\nIn case you can't find any of these, this repository contains a copy of the\nGit completion script:\n\n    source /path/to/git-subrepo/share/git-completion.bash\n\nOnce Git completion is enabled (whether you needed to do that manually or\nnot), you can turn on C<git-subrepo> completion with a command like this:\n\n    source /path/to/git-subrepo/share/completion.bash\n\n=head2 In zsh\n\nIn the Z shell (zsh), you can manually enable C<git-subrepo> completion by\nadding the following line to your C<~/.zshrc>, B<before> the C<compinit>\nfunction is called:\n\n    fpath=('/path/to/git-subrepo/share/zsh-completion' $fpath)\n\n=head1 Status\n\nThe git-subrepo command has been in use for well over a year and seems to get\nthe job done. Development is still ongoing but mostly just for fixing bugs.\n\nTrying subrepo out is simple and painless (this is not C<git submodule>).\nNothing is permanent (if you do not push to shared remotes). ie You can always\nplay around and reset back to the beginning without pain.\n\nThis command has a test suite (run C<make test>), but surely has many bugs. If\nyou have expertise with Git and subcommands, please review the code, and file\nissues on anything that seems wrong.\n\nIf you want to chat about the C<git-subrepo> command, join C<#gitcommands> on\nC<irc.freenode.net>.\n\n=head1 Notes\n\n=over\n\n=item * Works on POSIX systems: Linux, BSD, OSX, etc.\n\n=item * Works on various Windows environments. See \"Windows\" section above.\n\n=item * The C<git-subrepo> repo itself has 2 subrepos under the C<ext/> subdirectory.\n\n=item * Written in (very modern) Bash, with full test suite. Take a look.\n\n=item * A C<.gitrepo> file never is in the top level dir (next to a C<.git/> dir).\n\n=back\n\n=head1 Authors\n\n=over\n\n=item * Ingy döt Net <ingy@ingy.net>\n\n=item * Magnus Carlsson <grimmymail@gmail.com>\n\n=item * Austin Morgan <admorgan@morgancomputers.net>\n\n=back\n\n=head1 License and Copyright\n\nThe MIT License (MIT)\n\nCopyright (c) 2013-2020 Ingy döt Net\n\n=cut"
}
