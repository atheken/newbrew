{
  "name": "c",
  "full_name": "c",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Compile and execute C \"scripts\" in one go",
  "license": "MIT",
  "homepage": "https://github.com/ryanmjacobs/c",
  "versions": {
    "stable": "0.14",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/ryanmjacobs/c/archive/v0.14.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "2b66d79d0d5c60b8e6760dac734b8ec9a7d6a5e57f033b97086821b1985a870b"
    },
    "head": {
      "url": "https://github.com/ryanmjacobs/c.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/c/blobs/sha256:61a07ffb8d1f341bf995e6aae382b6053d2cb8ba7864c02d6832e988f3df795f",
          "sha256": "61a07ffb8d1f341bf995e6aae382b6053d2cb8ba7864c02d6832e988f3df795f"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/c.rb",
  "ruby_source_checksum": {
    "sha256": "e5da1f1731d0cfa9916a83e801c3e3c5dff1fec8e812287555a82e488d3769fd"
  },
  "date_added": "2022-09-05T13:40:15+00:00",
  "readme": "# c\n\n<!--\n[![Build Status](https://travis-ci.org/ryanmjacobs/c.svg)](https://travis-ci.org/ryanmjacobs/c)\n-->\n\n> \"There isn't much that's special about C. That's one of the reasons why it's\nfast.\"\n\nI love C for its raw speed (although it does have its drawbacks). We should\nall write more C.\n\nWith this shell script, you can compile and execute C \"scripts\" in one go!\n\n(Oh yeah, and it works for C++ too.)\n\n![GIF Demo](http://i.imgur.com/aWnG03r.gif)\n\nHere's a simple example:\n```c\n#include <stdio.h>\n\nint main(void) {\n    printf(\"Hello World!\\n\");\n    return 0;\n}\n```\n\nRun it by typing:\n```bash\n$ c hello.c\nHello World!\n```\n\nOr, call it from the shebang!\n```c\n#!/usr/bin/c\n#include <stdio.h>\n\nint main(void) {\n    printf(\"Hello World!\\n\");\n    return 0;\n}\n```\n```bash\n$ chmod +x hello.c\n$ ./hello.c\nHello World!\n```\n\n## Hooked? Here's how to install it:\nUse a package manager? [Check here](https://github.com/ryanmjacobs/c#packages).\n\nFor the entire system:\n```bash\n$ wget https://raw.githubusercontent.com/ryanmjacobs/c/master/c\n$ sudo install -m 755 c /usr/bin/c\n\n# Or... for systems that prefer /usr/local/bin (e.g. macOS)\n$ sudo install -m 755 c /usr/local/bin/c\n```\n\nFor your local user only:\n```bash\n$ wget https://raw.githubusercontent.com/ryanmjacobs/c/master/c\n$ sudo install -Dm 755 c ~/.bin/c\n$ echo 'PATH=$PATH:$HOME/.bin' >> ~/.bashrc\n```\n\nNote: if you install it somewhere other than `/usr/bin/c`, then your shebang\nwill be different. For example it may be something more similar to\n`#!/home/ryan/.bin/c`.\n\n## Okay, how do I use it?\nc will use whatever `$CC` is set to. You can change this with:\n```bash\n$ export CC=clang\n$ export CC=tcc\n$ # etc...\n```\n## CLI\n### Multiple Files - CLI\nAnything you want passed to the compiler, put in quotes as the first argument.\nWhether they're flags (`-Wall`, `-O2`, etc.) or file names (`file.c`,\n`main.c`, etc.).\n\n```bash\n$ c \"main.c other.c\" arg1 arg2\n$ c \"main.c other.c -O3 -Wall -lncurses\" arg1 arg2\n```\n### Single File - CLI\nWith only one file, omit the quotes:\n```bash\n$ c hello.c\n$ c main.c arg1 arg2\n```\n\n## Shebang!\nAfter adding a shebang, just set the file to executable and it's ready to run.\n```bash\n$ chmod +x file.c\n$ ./file.c\n```\n\n### Single File - Shebang\nAdd this to the top of your C file:\n```c\n#!/usr/bin/c\n```\n\n### Multiple Files - Shebang\nJust tack on any extra flags, options, or files you want passed to the compiler.\nThen be sure to add the terminating `--` characters.\n```c\n#!/usr/bin/c file1.c file2.c -lncurses -lm --\n```\n\n## Caching\nThe default cache size is set to 5 MB. You can change this with:\n```bash\n$ export C_CACHE_SIZE=$((10*1024)) # 10 MB\n```\nThe default cache path is set to `$TMPDIR/c.cache`. You can change this with:\n```bash\n$ export C_CACHE_PATH=\"/tmp/the_cache\"\n```\n\n# Contributing\nFeel free to submit any ideas, questions, or problems by reporting an issue.\nOr, if you're feeling a bit brave, submit a pull request. :grimacing:\n\nJust hack away and make sure that all the tests pass.\n```bash\n$ cd tests\n$ ./test.sh\n```\n\n## Why?\nFirst of all, I want to clarify why this is **not** the same as `tcc -run`.\nTCC is a compiler. We all know that. TCC will perform its own set of\noptimizations, just as GCC will perform its own and Clang will perform its\nown. The purpose of this script is to give a simple front-end to your favorite\ncompiler.\n\nWhether it's GCC, Clang, or something else entirely, **you** get to choose\nyour compiler.\n\nSecond reason: it's simply satisfying to type `c hello.c` and see it run instantly.\n\nThird reason: I'm a fan of speed, and C definitely offers it. Being able to\nwrite a small, fast, and portable C \"script\" is great. You can pass around a\nC \"script\" just like you would a BASH script.\n\n## zsh\nIf you're using `zsh`, then you can take advantage of `zsh`'s suffix aliases:\n```bash\n$ alias -s c='c'\n$ alias -s cc='c'\n$ alias -s cpp='c'\n```\nThen you can run files with `./file.c` without `chmod +x`.\n\n## Packages\nUse a package manager? You've come to the right place.\n\nAUR: https://aur.archlinux.org/packages/c/<br>\nbpkg: `bpkg install ryanmjacobs/c`<br>\nbrew: `brew install c`\n(shebang will be `#!/usr/local/bin/c` for Intel-based Macs or `#!/opt/homebrew/bin/c` for Apple Silicon)<br>\n\n## Todo\n~~Maybe later we can implement caching.~~ Done!\n\n## License\n[MIT License](https://raw.githubusercontent.com/ryanmjacobs/c/master/LICENSE).\n\nBasically, you can do whatever you want provided that you include\nthe LICENSE notice in any copy of the source. Also, I am not liable\nif the script breaks anything."
}
