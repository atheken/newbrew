{
  "name": "vips",
  "full_name": "vips",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [
    "libvips"
  ],
  "versioned_formulae": [],
  "desc": "Image processing library",
  "license": "LGPL-2.1-or-later",
  "homepage": "https://github.com/libvips/libvips",
  "versions": {
    "stable": "8.14.3",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/libvips/libvips/releases/download/v8.14.3/vips-8.14.3.tar.xz",
      "tag": null,
      "revision": null,
      "checksum": "f884d61a6b54c99cdae855001c8b9523e13b4982be7e76cac03faccb91be105c"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": "/opt/homebrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/vips/blobs/sha256:738b579bf0a9ca1451084a3e6131d76d9a65630bc7ed919d6afa9ecb3e83c1fe",
          "sha256": "738b579bf0a9ca1451084a3e6131d76d9a65630bc7ed919d6afa9ecb3e83c1fe"
        },
        "arm64_monterey": {
          "cellar": "/opt/homebrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/vips/blobs/sha256:d203896a72ff98855d0cd16f65d436844b3a0c52740f558e0e4f2a8bf91ce171",
          "sha256": "d203896a72ff98855d0cd16f65d436844b3a0c52740f558e0e4f2a8bf91ce171"
        },
        "arm64_big_sur": {
          "cellar": "/opt/homebrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/vips/blobs/sha256:290d46d540a48e99cf8f03cde06905f5bd9c97eef56465f38d8b3bccf1015b2d",
          "sha256": "290d46d540a48e99cf8f03cde06905f5bd9c97eef56465f38d8b3bccf1015b2d"
        },
        "ventura": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/vips/blobs/sha256:4e7b98aaa3e75eacd2a74602be2674cda01a1667b643925e3df0699f141a1523",
          "sha256": "4e7b98aaa3e75eacd2a74602be2674cda01a1667b643925e3df0699f141a1523"
        },
        "monterey": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/vips/blobs/sha256:9677cfb3676af73199c8574200586979041cf2aef8e9803dfb676624bd86c6c6",
          "sha256": "9677cfb3676af73199c8574200586979041cf2aef8e9803dfb676624bd86c6c6"
        },
        "big_sur": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/vips/blobs/sha256:f028a3d1a5d3b2a4b19a837fee657e3f72c7eba951dce480a329a7c22682f1b3",
          "sha256": "f028a3d1a5d3b2a4b19a837fee657e3f72c7eba951dce480a329a7c22682f1b3"
        },
        "x86_64_linux": {
          "cellar": "/home/linuxbrew/.linuxbrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/vips/blobs/sha256:ed66bca9afe0046a6e25b2ad33aa2751fc42f89280f1f14c70af9a6cafc73662",
          "sha256": "ed66bca9afe0046a6e25b2ad33aa2751fc42f89280f1f14c70af9a6cafc73662"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "gobject-introspection",
    "meson",
    "ninja",
    "pkg-config"
  ],
  "dependencies": [
    "cairo",
    "cfitsio",
    "cgif",
    "fftw",
    "fontconfig",
    "gettext",
    "glib",
    "imagemagick",
    "jpeg-xl",
    "libexif",
    "libgsf",
    "libheif",
    "libimagequant",
    "libmatio",
    "librsvg",
    "libspng",
    "libtiff",
    "little-cms2",
    "mozjpeg",
    "openexr",
    "openjpeg",
    "openslide",
    "orc",
    "pango",
    "poppler",
    "webp"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "expat",
    "zlib"
  ],
  "uses_from_macos_bounds": [
    {},
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/vips.rb",
  "ruby_source_checksum": {
    "sha256": "fca3bf23b3002495da4b66fc5aa1406b9f15a371884496eda77cf801421c9677"
  },
  "date_added": "2010-08-09T13:03:37+02:00",
  "readme": "# libvips : an image processing library\n\n[![CI](https://github.com/libvips/libvips/workflows/CI/badge.svg)](https://github.com/libvips/libvips/actions)\n[![Fuzzing Status](https://oss-fuzz-build-logs.storage.googleapis.com/badges/libvips.svg)](https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&can=2&q=proj:libvips)\n[![Coverity Status](https://scan.coverity.com/projects/6503/badge.svg)](https://scan.coverity.com/projects/jcupitt-libvips)\n[![Gitter](https://badges.gitter.im/libvips/devchat.svg)](https://gitter.im/libvips/devchat?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\n# Introduction\n\nlibvips is a [demand-driven, horizontally\nthreaded](https://github.com/libvips/libvips/wiki/Why-is-libvips-quick)\nimage processing library. Compared to similar\nlibraries, [libvips runs quickly and uses little\nmemory](https://github.com/libvips/libvips/wiki/Speed-and-memory-use).\nlibvips is licensed under the [LGPL\n2.1+](https://www.gnu.org/licenses/old-licenses/lgpl-2.1.en.html).\n\nIt has around [300\noperations](https://libvips.github.io/libvips/API/current/func-list.html)\ncovering arithmetic, histograms, convolution, morphological\noperations, frequency filtering, colour, resampling,\nstatistics and others. It supports a large range of [numeric\ntypes](https://libvips.github.io/libvips/API/current/VipsImage.html#VipsBandFormat),\nfrom 8-bit int to 128-bit complex. Images can have any number of bands.\nIt supports a good range of image formats, including JPEG, JPEG2000, JPEG-XL,\nTIFF, PNG, WebP, HEIC, AVIF, FITS, Matlab, OpenEXR, PDF, SVG, HDR, PPM / PGM /\nPFM, CSV, GIF, Analyze, NIfTI, DeepZoom, and OpenSlide. It can also load\nimages via ImageMagick or GraphicsMagick, letting it work with formats\nlike DICOM.\n\nIt comes with bindings for\n[C](https://libvips.github.io/libvips/API/current/using-from-c.html),\n[C++](https://libvips.github.io/libvips/API/current/libvips-from-C++.html),\nand the\n[command-line](https://libvips.github.io/libvips/API/current/using-cli.html).\nFull bindings are available for :\n\n| Language | Binding |\n|---|---|\n| Ruby | [ruby-vips](https://rubygems.org/gems/ruby-vips) |\n| Python | [pyvips](https://pypi.python.org/pypi/pyvips) |\n| PHP | [php-vips](https://github.com/libvips/php-vips) |\n| C# / .NET | [NetVips](https://www.nuget.org/packages/NetVips) |\n| Go | [govips](https://github.com/davidbyttow/govips) |\n| Lua | [lua-vips](https://github.com/libvips/lua-vips) |\n| Crystal | [crystal-vips](https://github.com/naqvis/crystal-vips) |\n| Elixir | [vix](https://github.com/akash-akya/vix) |\n\nlibvips is used as an image processing engine by:\n\n| |\n|---|\n| [sharp (on node.js)](https://www.npmjs.org/package/sharp) |\n| [bimg](https://github.com/h2non/bimg) |\n| [sharp for Go](https://github.com/DAddYE/vips) |\n| [Ruby on Rails](https://edgeguides.rubyonrails.org/active_storage_overview.html) |\n| [carrierwave-vips](https://github.com/eltiare/carrierwave-vips) |\n| [mediawiki](https://www.mediawiki.org/wiki/Extension:VipsScaler) |\n| [PhotoFlow](https://github.com/aferrero2707/PhotoFlow) |\n\nand others. The official libvips GUI is\n[nip2](https://github.com/libvips/nip2), a strange combination of a\nspreadsheet and a photo editor.\n\n# Install\n\nThere are packages for most Unix-like operating systems, including\nmacOS. Check your package manager.\n\nThere are binaries for Windows in\n[releases](https://github.com/libvips/libvips/releases).\n\nThe [libvips website](https://libvips.github.io/libvips) has [detailed\ninstall notes](https://libvips.github.io/libvips/install.html).\n\n# Building from source\n\nlibvips uses the [Meson build system](https://mesonbuild.com), version 0.56\nor later. Meson can use [`ninja`](https://ninja-build.org), Visual Studio or\nXCode as a backend, so you'll also need one of them.\n\nlibvips must have `build-essential`, `pkg-config`, `libglib2.0-dev`,\n`libexpat1-dev`.  See the **Dependencies** section below for a full list\nof the libvips optional dependencies.\n\nThere are basic bash completions in `completions/`, see the README in there.\n\n## Cheatsheet \n\n```\ncd libvips-x.y.x\nmeson setup build --prefix /my/install/prefix\ncd build\nmeson compile\nmeson test\nmeson install\n```\n\nCheck the output of `meson setup` carefully and make sure it found everything\nyou wanted it to find.  Add arguments to `meson setup` to change the build\nconfiguration.\n\n- Add flags like `-Dnsgif=false` to turn libvips options on and off, see\n  `meson_options.txt` for a list of all the build options libvips supports.\n\n- Add flags like `-Dmagick=disabled` to turn libvips dependencies on and off, \n  see `meson_options.txt` and the list below for a summary of all the libvips\n  dependencies.\n\n- You might need to add `--libdir lib` on Debian if you don't want the arch \n  name in the library path.\n\n- Add `--default-library static` for a static build.\n\n- Use eg. `CC=clang CXX=clang++ meson setup ...` to change compiler.\n\n- You can have many `build-dir`, pick whatever names you like, for example \n  one for release and one for debug.\n\nThere's a more comprehensive test suite you can run once libvips has been\ninstalled. Use `pytest` in the libvips base directory.\n\n## Optional dependencies\n\nIf suitable versions are found, libvips will add support for the following\nlibraries automatically. Packages are generally found with `pkg-config`,\nso make sure that is working. \n\n### libjpeg\n\nAnything that is compatible with the IJG JPEG library. Use `mozjpeg` if you\ncan. Another option is `libjpeg-turbo`. \n\n### libexif\n\nIf available, libvips adds support for EXIF metadata in JPEG files.\n\n### librsvg\n\nThe usual SVG loader. If this is not present, vips will try to load SVGs\nvia imagemagick instead.\n\n### PDFium\n\nIf present, libvips will attempt to load PDFs with PDFium. Download the \nprebuilt pdfium binary from: \n\n    https://github.com/bblanchon/pdfium-binaries\n\nUntar to the libvips install prefix, for example:\n\n    cd ~/vips\n    tar xf ~/pdfium-linux.tgz\n\nCreate a `pdfium.pc` like this (update the version number):\n\n    VIPSHOME=/home/john/vips\n    cat > $VIPSHOME/lib/pkgconfig/pdfium.pc << EOF\n         prefix=$VIPSHOME\n         exec_prefix=\\${prefix}\n         libdir=\\${exec_prefix}/lib\n         includedir=\\${prefix}/include\n         Name: pdfium\n         Description: pdfium\n         Version: 4290\n         Requires:\n         Libs: -L\\${libdir} -lpdfium\n         Cflags: -I\\${includedir}\n    EOF\n\nIf PDFium is not detected, libvips will look for `poppler-glib` instead.\n\n### poppler-glib\n\nThe Poppler PDF renderer, with a glib API. If this is not present, vips\nwill try to load PDFs via imagemagick.\n\n### cgif\n\nIf available, libvips will save GIFs with\n[cgif](https://github.com/dloebl/cgif). If this is not present, vips will\ntry to save gifs via imagemagick instead.\n\n### libarchive\n\nIf available, libvips adds support for creating image pyramids with `dzsave`.\n\n### libtiff\n\nThe TIFF library. It needs to be built with support for JPEG and\nZIP compression. 3.4b037 and later are known to be OK. \n\n### fftw3\n\nIf libvips finds this library, it uses it for fourier transforms. \n\n### lcms2\n\nIf present, `vips_icc_import()`, `vips_icc_export()` and `vips_icc_transform()`\ncan be used to manipulate images with ICC profiles. \n\n### libspng\n\nIf present, libvips will load and save PNG files using libspng. If not, it\nwill look for the standard libpng package.\n\n### libimagequant, quantizr\n\nIf one of these quantisation packages is present, libvips can write 8-bit\npalette-ised PNGs and GIFs.\n\n### ImageMagick, or optionally GraphicsMagick\n\nIf available, libvips adds support for loading and saving all\nlibMagick-supported image file types. You can enable and disable load and save\nseparately. \n\nImagemagick 6.9+ needs to have been built with `--with-modules`. Most packaged\nIMs are, I think.\n\nIf you are going to be using libvips with untrusted images, perhaps in a\nweb server, for example, you should consider the security implications of\nenabling a package with such a large attack surface. \n\n### pangocairo\n\nIf available, libvips adds support for text rendering. You need the\npackage pangocairo in `pkg-config --list-all`.\n\n### orc-0.4\n\nIf available, vips will accelerate some operations with this run-time\ncompiler.\n\n### matio\n\nIf available, vips can load images from Matlab save files.\n\n### cfitsio\n\nIf available, vips can load FITS images.\n\n### libwebp\n\nIf available, vips can load and save WebP images.\n\n### libniftiio\n\nIf available, vips can load and save NIfTI images.\n\n### OpenEXR\n\nIf available, libvips will directly read (but not write, sadly)\nOpenEXR images.\n\n### OpenJPEG\n\nIf available, libvips will read and write JPEG2000 images.\n\n### libjxl\n\nIf available, libvips will read and write JPEG-XL images.\n\n### OpenSlide\n\nIf available, libvips can load OpenSlide-supported virtual slide\nfiles: Aperio, Hamamatsu, Leica, MIRAX, Sakura, Trestle, and Ventana.\n\n### libheif\n\nIf available, libvips can load and save HEIC and AVIF images. Your libheif (in\nturn) needs to be built with the correct decoders and encoders. You can check\nwith eg.:\n\n```console\n$ heif-convert --list-decoders\nHEIC decoders:\n- libde265 = libde265 HEVC decoder, version 1.0.9\nAVIF decoders:\n- dav1d = dav1d v6.6.0\n- aom = AOMedia Project AV1 Decoder v3.5.0\n$ heif-enc --list-encoders\nHEIC encoders:\n- x265 = x265 HEVC encoder (3.5+1-f0c1022b6) [default]\nAVIF encoders:\n- aom = AOMedia Project AV1 Encoder v3.5.0 [default]\n- svt = SVT-AV1 encoder v1.1.0\n- rav1e = Rav1e encoder\n```\n\n# Contributors\n\n### Code Contributors\n\nThis project exists thanks to all the people who contribute. \n\n<a href=\"https://github.com/libvips/libvips/graphs/contributors\"><img src=\"https://opencollective.com/libvips/contributors.svg?width=890&button=false\" /></a>\n\n### Organizations\n\nWe've had generous financial support from our sponsors. Thank you very much!\n\n<img src=\"https://opencollective.com/libvips/sponsors.svg?width=890&button=false\" />"
}
