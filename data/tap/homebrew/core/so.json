{
  "name": "so",
  "full_name": "so",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Terminal interface for StackOverflow",
  "license": "MIT",
  "homepage": "https://github.com/samtay/so",
  "versions": {
    "stable": "0.4.9",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/samtay/so/archive/v0.4.9.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "b6327268acf3e9652acebea49c1dfa5d855cf25db6c7b380f1a0a85737464a4a"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 2,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/so/blobs/sha256:06d9d49939df633028f759557787975e717b12e496a3d20da54afd375c3967e6",
          "sha256": "06d9d49939df633028f759557787975e717b12e496a3d20da54afd375c3967e6"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/so/blobs/sha256:9b94994807aa75017eaec7f76ea78cc80c3fbcf2c0a65dfba043a3ca2d62b663",
          "sha256": "9b94994807aa75017eaec7f76ea78cc80c3fbcf2c0a65dfba043a3ca2d62b663"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/so/blobs/sha256:8afac14e917fad150dd5b06f28b96c14d49ca5c7b2894e7488f9dedbfcbfb9e8",
          "sha256": "8afac14e917fad150dd5b06f28b96c14d49ca5c7b2894e7488f9dedbfcbfb9e8"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/so/blobs/sha256:f845494b286ee5b6301c5a347ca3df396cb071797cdf9fbfadb47d9309acddf1",
          "sha256": "f845494b286ee5b6301c5a347ca3df396cb071797cdf9fbfadb47d9309acddf1"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/so/blobs/sha256:0feba955d0c7ffc8ce409df43b27831f263f9b1d85c4496ab4c4d31116e43b55",
          "sha256": "0feba955d0c7ffc8ce409df43b27831f263f9b1d85c4496ab4c4d31116e43b55"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/so/blobs/sha256:982259bab8f867dd1387facce0ee77c60610f478214f0579ccc46db24c87cd62",
          "sha256": "982259bab8f867dd1387facce0ee77c60610f478214f0579ccc46db24c87cd62"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/so/blobs/sha256:c36a6333d2954cb49b323520e4e337b81d975c440c440aae10eb4f315cb210fd",
          "sha256": "c36a6333d2954cb49b323520e4e337b81d975c440c440aae10eb4f315cb210fd"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust",
    "pkg-config"
  ],
  "dependencies": [
    "openssl@3"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/so.rb",
  "ruby_source_checksum": {
    "sha256": "ae62daf688969f1494ee3ce235ae845727660122894d574bfb6e17a3c119d6e4"
  },
  "date_added": "2020-07-09T07:34:20+00:00",
  "readme": "<h1 align=\"center\">\n<img width=\"300px\" src=\"assets/logo.png\" />\n\n[![ci][s0]][l0] [![appveyor][s1]][l1] [![crates][s2]][l2] [![MIT][s3]][l3] [![Packaging status](https://repology.org/badge/tiny-repos/so.svg)](https://repology.org/project/so/versions)\n</h1>\n\n[s0]: https://github.com/samtay/so/actions/workflows/ci.yml/badge.svg\n[l0]: https://github.com/samtay/so/actions/workflows/ci.yml\n[s1]: https://ci.appveyor.com/api/projects/status/pu7e63f2sqq6x1iq/branch/master?svg=true\n[l1]: https://ci.appveyor.com/project/samtay/so/branch/master\n[s2]: https://img.shields.io/crates/v/so.svg\n[l2]: https://crates.io/crates/so\n[s3]: https://img.shields.io/badge/license-MIT-blue.svg\n[l3]: ./LICENSE\n\n<h5 align=\"center\"> A terminal interface for StackOverflow written in Rust </h5>\n\n<h1 align=\"center\">\n\n![](assets/demo.gif)\n\n</h1>\n\n## example usage\nWhile I like the acronym *so*, this tool would actually be better described as\n*se*: an interface to the StackExchange network. In particular one thing that\ndifferentiates it from [similar](https://github.com/santinic/how2)\n[tools](https://github.com/gleitz/howdoi) is that you can simultaneously search\nany number of sites in the StackExchange network:\n```shell\n# search using your default configuration\n$ so how do i reverse a list in python\n\n# search for a latex solution\n$ so --site tex how to put tilde over character\n\n# use google to search stackoverflow.com, askubuntu.com, and unix.stackexchange.com\n$ so -e google -s askubuntu -s stackoverflow -s unix how do i install linux\n```\n\n## installation\n\n#### Arch Linux\nYou can install the AUR package\n[so](https://aur.archlinux.org/packages/so/) (tracks latest release)\nor\n[so-git](https://aur.archlinux.org/packages/so-git/) (tracks master), e.g.\n```\nyay -S so-git\n```\n\n#### FreeBSD\nYou can install the package [so](https://cgit.freebsd.org/ports/tree/www/so) via\n```\npkg install so\n```\n\n#### NetBSD\nYou can install the package [so](https://pkgsrc.se/www/so) via\n```\npkgin install so\n```\n\n#### MacOS\nYou can install the homebrew [formula](https://formulae.brew.sh/formula/so)\n```\nbrew install so\n```\n\nAlternatively, you can use [MacPorts](https://www.macports.org) to install [so](https://ports.macports.org/port/so/):\n```\nsudo port install so\n```\n\n#### Windows\nIf you have [scoop](https://scoop.sh/) you can install via the extras bucket:\n```shell\n# add extras bucket\nscoop bucket add extras\n\n# install so\nscoop install so\n```\n\n#### from source\nFor any OS you can install the crate [so](https://crates.io/crates/so) directly:\n```\n# everything but windows\ncargo install so\n\n# windows\ncargo install so --no-default-features --features windows\n```\nFor more information on the feature flags, see [selecting a\nbackend](#selecting-a-backend).\n\n#### release binaries\nStatic binaries are available on the [releases\npage](https://github.com/samtay/so/releases) for common Linux, MacOS, and\nWindows targets. You can quickly install the one you need to directory `DEST`\nwith:\n```bash\ncurl --proto '=https' --tlsv1.2 -sSf https://samtay.github.io/so/install.sh \\\n  | bash -s -- --to DEST\n```\nRight now I'm only building the most common targets, but in theory it should be\neasy to add more, so if you don't see what you are looking for just open an\nissue and I can add it. Here's a\nlist of the [supported\ntargets](https://github.com/japaric/trust#supported-targets). If you don't know\nwhat you need, you can install [rustc](https://www.rust-lang.org/tools/install)\nand open an issue with the output of `rustc -Vv | grep host | cut -d' ' -f2`.\n\n## documentation\n\n### configuration\nThe configuration files for e.g. a user `Alice` can be found in the following\ndirectories:\n\n- Linux: `/home/alice/.config/so`\n- Windows: `C:\\Users\\Alice\\AppData\\Roaming\\Sam Tay\\so`\n- MacOS: `/Users/Alice/Library/Preferences/io.Sam-Tay.so`\n\n#### defaults\nThe `config.yml` file lets you specify your CLI defaults. So if you dislike the\nlucky prompt, always search serverfault.com and unix.stackexchange.com, and\nwant the [fastest search engine](#search-engines), you can set your config file like this:\n```yaml\n# config.yml\n---\napi_key: ~\nlimit: 10\nlucky: false\nsites:\n  - serverfault\n  - unix\nsearch_engine: stackexchange\n```\nRun `so --help` to see your current defaults.\n\n#### themes\nIn the same directory you'll find `colors.toml` which is self-documented. The\ndefault theme attempts to blend in with your default terminal theme, but you can\nchange it as necessary. In particular, you may want to change the `highlight_text` if the current selection is difficult to read. There are some themes in the [themes](./themes) directory as well.\n\n#### system clipboard integration\nThere's a very primitive integration in place to copy the contents of\nthe currently focused question or answer to the system clipboard. This requires\nsome command in your PATH that can accept stdin and pipe to the clipboard.\nOn mac & windows, this will work out of the box with the default set to `pbcopy`\n& `clip` respectively. On Linux, I've made the assumption that `xclip` is likely\nthe most popular, but if you use something else (e.g. `wl-copy` on wayland),\nyou'll need to set the command directly:\n```yaml\n# config.yml\n---\ncopy_cmd: copy --option-to-take-stdin\n```\n\n#### api keys\nIf you want to use your own [StackExchange API\nKey](https://api.stackexchange.com/docs) you can set it via\n```\nso --set-api-key <KEY>\n```\nYou can also choose to use no key by editing your configuration to `api_key: ~`.\nIf for some reason my API key is globally throttled, you can hit the\nStackExchange API with no key up to 300 times per day per IP, which I imagine is\nfine for most users.\n\n### search engines\nThe available search engines are StackExchange, DuckDuckGo, and Google.\nStackExchange will always be the fastest to search because it doesn't require an\nadditional request or any HTML parsing; however, it is also very primitive.\n~~DuckDuckGo is in second place for speed, as its response HTML is much smaller\nthan Google's. I've found that it performs well for my queries, so it is the\ndefault search engine.~~\n\nDuckDuckGo [sometimes blocks requests](https://github.com/samtay/so/issues/16), so\nit is no longer the default.\n\n### multi-site searching\nAs stated in the [docs](https://api.stackexchange.com/docs/throttle),\n\n> If a single IP is making more than 30 requests a second, new requests will be dropped.\n\nSo, don't go crazy with the multi-site search, since it is all done in parallel.\nIn particular, if you specify more than 30 sites, SE will likely ban you for a short time.\n\n### selecting a backend\nIf you're installing from source, you can choose from a number of available\nbackend rendering engines. Note that the package `default` and `windows` feature\nflags do not have an ncurses dependency, for the sake of portability.  The\ndefault backend is [termion](https://github.com/redox-os/termion), a bindless\nlibrary in pure Rust which seems to work quite well on Linux, MacOS, BSD, and\nRedox.  The windows backend is by default\n[crossterm](https://github.com/crossterm-rs/crossterm), and while its level of\nsupport is awesome, it does comes at a price in performance. On my machine, the\napp kind of flashes between draws. So if you are on Mac, Linux, or Redox, your\nbest bet is to compile with default features which uses the termion backend. If\nyou are on windows, use crossterm, but know it will be slightly jumpy.\n\nIf the crossterm folks figure out a fix for allowing ncurses to receive [resize\nevents](https://github.com/crossterm-rs/crossterm/issues/447), and you have\n[ncurses installed](https://github.com/gyscos/cursive/wiki/Install-ncurses) on\nyour system, then the ncurses and pancurses backends are likely the most\nperformant.  Just know that *currently* if you choose this option, and you run\nthe `--lucky` prompt, you won't be able to resize the terminal window while the\nTUI is open.\n\nAvailable backends:\n\n- `termion-backend`\n- `ncurses-backend`\n- `pancurses-backend`\n- `crossterm-backend`\n\nE.g. to use `ncurses-backend`:\n```\ncargo install so --no-default-features --features ncurses-backend\n```\n\nSee more information about this choice\n[here](https://github.com/gyscos/cursive/wiki/Backends).\n\n## contributing\n**Warning**: this was my first time writing Rust and there is very likely some\nnon-idiomatic and straight up ugly code throughout this project, so don't come\nlooking here for a good Rust example! That being said, I would love to improve\nthe codebase. Feel free to check out the [contributing\nguidelines](.github/CONTRIBUTING.md) and submit any refactoring issues or pull\nrequests.\n\n## credits\nCredit to my good friend [Charles](http://heyitscharles.com) for logo design."
}
