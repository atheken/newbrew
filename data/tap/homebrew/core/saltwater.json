{
  "name": "saltwater",
  "full_name": "saltwater",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "C compiler written in Rust, with a focus on good error messages",
  "license": "BSD-3-Clause",
  "homepage": "https://github.com/jyn514/saltwater",
  "versions": {
    "stable": "0.11.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/jyn514/saltwater/archive/0.11.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "a9fedbb53586e045798ba26295b4da28157e4eb9945b5a74bbdaebca830f1316"
    },
    "head": {
      "url": "https://github.com/jyn514/saltwater.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/saltwater/blobs/sha256:dc1395bf530b4ea186fe898fc7aa8305c2392fc11dcda12c36b906d21721380a",
          "sha256": "dc1395bf530b4ea186fe898fc7aa8305c2392fc11dcda12c36b906d21721380a"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/saltwater/blobs/sha256:3ce720ef4e471ca3cf3b0f3bc9dbb4cf8988eeae18d1d9620de5dc3f779132cb",
          "sha256": "3ce720ef4e471ca3cf3b0f3bc9dbb4cf8988eeae18d1d9620de5dc3f779132cb"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/saltwater/blobs/sha256:750182bb83130c00ce6a9ea828261aed154c5c9914a1965172575be861985088",
          "sha256": "750182bb83130c00ce6a9ea828261aed154c5c9914a1965172575be861985088"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/saltwater/blobs/sha256:3474f55537373be89128ac84c91a86f52cc10ac8a01934f784ae9ff07797ba43",
          "sha256": "3474f55537373be89128ac84c91a86f52cc10ac8a01934f784ae9ff07797ba43"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/saltwater/blobs/sha256:da2e7d1937a9e47c96329261c76a3cc3ec445b0826b92115d3c48ab6885ca8a1",
          "sha256": "da2e7d1937a9e47c96329261c76a3cc3ec445b0826b92115d3c48ab6885ca8a1"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/saltwater/blobs/sha256:a10a0a2c825a5d3e0b14d0115fcb18ec3190365678d397283d468a898bc6218e",
          "sha256": "a10a0a2c825a5d3e0b14d0115fcb18ec3190365678d397283d468a898bc6218e"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": true,
  "disable_date": "2022-07-31",
  "disable_reason": "repo_archived",
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/saltwater.rb",
  "ruby_source_checksum": {
    "sha256": "92330eb6ecec6d1683f4cb65b085a20270a00abf7f9adce3b93a34178ea2a3b2"
  },
  "date_added": "2020-07-02T02:54:16+00:00",
  "readme": "# Saltwater\n\n[![Build Status](https://travis-ci.org/jyn514/rcc.svg?branch=master)](https://travis-ci.org/jyn514/rcc)\n[Join us on Discord](https://discord.gg/BPER7PF)\n\nsaltwater: the part of the sea causing lots of rust\n\nA C compiler written in Rust, with a focus on good error messages.\n\n---\n\n_**This project is no longer maintained.**_\n\n---\n\n## Running\n\n`swcc` reads from standard in by default, so you can type in code directly.\nIt's not interactive though, you have to hit Ctrl+D to indicate end of file (Ctrl+Z on Windows).\n\nUse `swcc --help` for all options (or see [below](#all-options)).\n\n### Running on Windows\n\nYou need to have `cc` on your PATH. You can either install mingw + gcc or MSVC.\nOther than that, it should work exactly the same as on Linux.\n\n### Homebrew\n\n```\nbrew install saltwater\n```\n\n## Unimplemented features\n\n- Defining functions taking variadic arguments. Note that calling variadic functions (like `printf`) is already supported.\n- Variable-length arrays (`int a[n]`)\n- Multiple translation units (files)\n- Bitfields\n- Compiling on non-x86 platforms\n- Cross-compilation\n\n## Examples\n\n```c\n$ cat tests/runner-tests/readme.c\n// output: j is 6\nint printf(const char *, ...);\n\ntypedef struct s *sp;\n\nint i = 1;\nint a[3] = {1, 2, 3};\nfloat f = 2.5;\n\nstruct s {\n  int outer;\n} my_struct;\n\nint g(int);\n\nint main(void) {\n  sp my_struct_pointer = &my_struct;\n  const int c = my_struct_pointer->outer = 4;\n  // should return 6\n  int j = i + f*a[2] - c/g(1);\n  printf(\"j is %d\\n\", j);\n  return j;\n}\n\nint g(int i) {\n  if (i < 0 || i >= 3) {\n    return 0;\n  }\n  return a[i];\n}\n$ swcc tests/runner-tests/readme.c\n$Ô∏è ./a.out\nj is 6\n```\n\n### Debug output\n\n```c\n$ cat tests/runner-tests/cpp/if/defined.c\n// code: 2\n\n#define a\n#define b\n\n#if defined(a)\nint i = 2;\n#endif\n\n#ifndef b\nsyntax error\n#endif\n\n# if defined b && defined(a)\n    int main() { return i; }\n#endif\n$ swcc -E tests/runner-tests/cpp/if/defined.c\nint i = 2 ; int main ( ) { return i ; }\n```\n\n```c\n$ echo 'int i = 1 + 2 ^ 3 % 5 / 2 & 1; int main(){}' | swcc --debug-ast\nast: int i = ((1) + (2)) ^ ((((3) % (5)) / (2)) & (1));\nast: int main(){\n}\n```\n\n```c\n$ cat tests/runner-tests/hello_world.c\n#include<stdio.h>\nint main() {\n    puts(\"Hello, world!\");\n}\n$ swcc --debug-ir tests/runner-tests/hello_world.c\nfunction u0:0() -> i32 system_v {\n    gv0 = symbol colocated u1:3\n    sig0 = (i64) -> i32 system_v\n    fn0 = u0:26 sig0\n\nblock0:\n    v0 = global_value.i64 gv0\n    v1 = call fn0(v0)\n    v2 = iconst.i32 0\n    return v2\n}\n$ ./a.out\nHello, world!\n```\n\n### All options\n\n```txt\n$ swcc --help\nswcc 0.9.0\nJoshua Nelson <jyn514@gmail.com>\nA C compiler written in Rust, with a focus on good error messages.\nHomepage: https://github.com/jyn514/rcc/\n\nusage: swcc [FLAGS] [OPTIONS] [<file>]\n\nFLAGS:\n        --debug-ast        If set, print the parsed abstract syntax tree (AST) in addition to compiling.\n                            The AST does no type checking or validation, it only parses.\n        --debug-hir        If set, print the high intermediate representation (HIR) in addition to compiling.\n                            This does type checking and validation and also desugars various expressions.\n        --debug-ir         If set, print the intermediate representation (IR) of the program in addition to compiling.\n        --debug-lex        If set, print all tokens found by the lexer in addition to compiling.\n        --jit              If set, will use JIT compilation for C code and instantly run compiled code (No files produced).\n                            NOTE: this option only works if swcc was compiled with the `jit` feature.\n    -h, --help             Prints help information\n    -c, --no-link          If set, compile and assemble but do not link. Object file is machine-dependent.\n    -E, --preprocess-only  If set, preprocess only, but do not do anything else.\n                            Note that preprocessing discards whitespace and comments.\n                            There is not currently a way to disable this behavior.\n    -V, --version          Prints version information\n\nOPTIONS:\n        --color <when>       When to use color. May be \"never\", \"auto\", or \"always\". [default: auto]\n    -o, --output <output>    The output file to use. [default: a.out]\n        --max-errors <max>   The maximum number of errors to allow before giving up.\n                             Use 0 to allow unlimited errors. [default: 10]\n    -I, --include <dir>      Add a directory to the local include path (`#include \"file.h\"`).\n                              Can be specified multiple times to add multiple directories.\n    -D, --define <id[=val]>  Define an object-like macro.\n                              Can be specified multiple times to add multiple macros.\n                              `val` defaults to `1`.\n\nARGS:\n    <file>    The file to read C source from. \"-\" means stdin (use ./- to read a file called '-').\n              Only one file at a time is currently accepted. [default: -]\n```\n\n## Testing\n\n```sh\ncargo test\n# optionally, you can fuzz the compiler\n# it may be more helpful to just `grep -R unimplemented src`, though\n\n# libFuzzer/AFL\ntests/fuzz.sh\n\n# Honggfuzz:\n# Running Honggfuzz locally requires some parameters to use it at its full potential,\n# so it is probably a good idea to have a look here: https://github.com/rust-fuzz/honggfuzz-rs/blob/master/README.md\n# and here: https://github.com/google/honggfuzz/blob/master/docs/USAGE.md\n# we suggest the following:\nHFUZZ_RUN_ARGS=\"--tmout_sigvtalrm --exit_upon_crash\" tests/hfuzz.sh\n```\n\n## FAQ\n\nSee [FAQ.md](FAQ.md)\n\n## Implementation Defined Behavior\n\nSee [IMPLEMENTATION\\_DEFINED.md](IMPLEMENTATION_DEFINED.md)\n\n## Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md).\nThis also includes reporting bugs."
}
