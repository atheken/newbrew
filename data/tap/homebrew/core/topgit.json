{
  "name": "topgit",
  "full_name": "topgit",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Git patch queue manager",
  "license": "GPL-2.0-only",
  "homepage": "https://github.com/mackyle/topgit",
  "versions": {
    "stable": "0.19.13",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/mackyle/topgit/archive/topgit-0.19.13.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "eaab17c64c95e70acfcc9d4061e7cc4143eb5f6dbe7bc23a5091cb45885a682c"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/topgit/blobs/sha256:5f1d4fc904d11ddc99f4a774692587c24e44c210c64a94955ffb9fdd4c53a555",
          "sha256": "5f1d4fc904d11ddc99f4a774692587c24e44c210c64a94955ffb9fdd4c53a555"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/topgit.rb",
  "ruby_source_checksum": {
    "sha256": "3195bb1f3dec54b003393d2403131661c7a364c465750864f81263d6ab3f49c4"
  },
  "date_added": "2011-09-01T10:26:46-07:00",
  "readme": "TopGit -- A Different Patch Queue Manager\n=========================================\n\nOverview\n--------\n\nTopGit manages one or more \"patch queue\"s (aka \"patch set\"s) using\nGit.\n\nWhereas a utility such as `quilt` maintains each individual patch\nas a \"diff\" file on disk, TopGit (the `tg` command) maintains each\nindividual patch as _two_ branches in Git -- the patch's \"branch\"\nand the patch's \"base branch\".  The patch itself is simply the\n\"diff\" from the patch's \"base branch\" to the patch's \"branch\".\n\nWhereas a utilty such as `quilt` maintains the list of active patch\n\"diff\" files and the correct order to apply them in a file (the\n`series` file), TopGit maintains this information in a `.topdeps`\nfile that is part of each patch's \"branch\".\n\nTopGit maintains any desired \"documentation\" (aka the patch header)\nin a `.topmsg` file that is also part of each patch's \"branch\" and\nprepends it when generating a patch \"diff\".\n\n\nSimplistic Quilt vs. TopGit Example\n-----------------------------------\n\nConsider the following files:\n\n    frabjous.tar.gz    # tarball of \"frabjous\" sources\n    0001-brillig.diff  # first patch to apply\n    0002-gimble.diff   # second patch to apply\n\nWith Quilt they might be used like so:\n\n    $ tar -xzf frabjous.tar.gz\n    $ cd frabjous\n    $ quilt import ../0001-brillig.diff && quilt push\n    $ quilt import ../0002-gimble.diff && quilt push\n    $ quilt applied\n    patches/0001-brillig.diff\n    patches/0002-gimble.diff\n\nWith TopGit they might be used like so:\n\n    $ tar -xzf frabjous.tar.gz\n    $ cd frabjous\n    $ git -c init.defaultBranch=master init && git add -A\n    $ git -c user.name=- -c user.email=- commit -qm frabjous\n    $ git checkout -b patches\n    $ git -c user.name=- -c user.email=- am ../0001-brillig.diff\n    $ git -c user.name=- -c user.email=- am ../0002-gimble.diff\n    $ git checkout master\n    $ git config topgit.top-bases heads # not the default...yet!\n    $ tg -c user.name=- -c user.email=- import ..patches\n    $ git branch\n      master\n      patches\n      t/brillig\n    * t/gimble\n      {top-bases}/t/brillig\n      {top-bases}/t/gimble\n    $ tg summary\n      t/brillig  [PATCH] brillig\n    > t/gimble   [PATCH] gimble\n    $ tg summary --rdeps --heads\n    t/gimble\n      t/brillig\n        master\n\nWhereas with Quilt, the \"0001-brillig.diff\" patch is maintained as\nthe original patch file (in `patches/0001-brillig.diff`), with\nTopGit, the \"0001-brillig.diff\" patch becomes _two_ Git branches,\n`{top-bases}/t/brillig` which represents the sources before the\n\"0001-brillig.diff\" patch has been applied and `t/brillig` which\nrepresents the sources after the \"0001-brillig.diff\" patch has been\napplied.\n\nThe original \"0001-brillig.diff\" patch can be re-generated with this\nTopGit command:\n\n    $ tg patch t/brillig\n\nAnd is roughly equivalent to the diff from the `{top-bases}/t/brillig`\nbranch to the `t/brillig` branch.  (It's the diff excluding the two\nTopGit metadata files with the patch header prepended to the result.)\n\nTo work on the \"brillig\" patch, one simply does a checkout of the\n`t/brillig` branch and makes and commits changes as normal using\nregular Git commands.  After the changes have been made, the \"gimble\"\npatch may need updating if any of the changes made to the \"brillig\"\npatch modified the same files affected by the \"gimble\" patch.  That\ncan be accomplished with this command:\n\n    $ tg update --all\n\nFinally, when a new set of \".diff\" patch files needs to be generated,\nthese commands can be used:\n\n    $ git checkout t/gimble\n    $ tg export --quilt --strip --numbered patchdir\n    $ ls -1 patchdir\n    0001-brillig.diff\n    0002-gimble.diff\n    series\n\n\nTopGit Advantages\n-----------------\n\n### Patch Dependency Topology\n\nWhereas the `series` file in Quilt is (obviously) limited to a\n\"linear\" topology, TopGit's `.topdeps` file is not.\n\nFor example, consider that you have three patches:\n\n 1. add \"feature A\"\n 2. add \"feature B\"\n 3. add \"feature C\" that requires both feature A and feature B\n\nIf \"feature A\" and \"feature B\" are completely independent features,\nthen the order that the \"feature A\" and \"feature B\" patches are\napplied does not matter as long as they are both applied before the\n\"feature C\" patch.\n\nTopGit can represent this by listing both the \"feature A\" and\n\"feature B\" patches in the `.topdeps` file for the \"feature C\"\npatch.\n\n### Patch Change History\n\nWhereas with Quilt there is no history of changes (aka edits) to a\npatch (unless explicit backups are made along the way), all changes\nto a patch in TopGit are made via regular Git commands.\n\nThis means all the standard Git introspection commands (e.g. \"log\",\n\"diff\", \"bisect\", \"blame\", etc.) are available to view the history\nof an individual patch.\n\n### Patch Updating\n\nWith Quilt when the \"upstream\" sources are updated (or even an early\npatch in the series is updated) in such a way as to cause a patch\nto no longer apply cleanly, the patch must be fixed by hand.\n\nWith TopGit, the full Git merge machinery is used to merge the\n\"upstream\" changes (or changes to an earlier patch) into the patches\nin dependency topological order.  This can often avoid patch\nconflicts.\n\nIn the case where a patch must be fixed by hand (yes, this still\ncan happen in TopGit), the Git `rerere` (reuse recorded resolution)\nmechanism can be used to record the hand-crafted fix and later\nautomatically reuse that fix when needed.\n\n### Patch Identification\n\nWhen there are a very large number of patches in a patch set, it\nmay be difficult to remember (especially if you're not the original\nauthor) which individual patch of a \"patch set\" contains a particular\nchange.\n\nAfter using the various Git introspection commands (e.g. \"log\",\n\"diff\", \"bisect\", \"blame\", etc.) to locate a commit containing a\nparticular change, the TopGit `tg contains` command can be used to\nidentify the individual patch of a \"patch set\" that logically\ncontains that commit.\n\nIn other words, `tg contains` identifies which TopGit branch would\nproduce a patch \"diff\" file that makes the change introduced by the\ngiven commit.\n\n### Collaboration\n\nBecause TopGit stores all information directly in Git, all of Git's\nnormal push/pull/remote functionality can be used to collaborate\non and/or share TopGit \"patch set\"s with others.  The `tg push`\ncommand facilitates pushing all branches in one or more TopGit\n\"patch set\"s at once.\n\n\nTopGit Features\n---------------\n\n### Multiple Patch Sets\n\nWith Quilt it is possible to use different `series` files to combine\npatch \"diff\" files into different arrangements (e.g. for different\nmachine architectures or development branches).\n\nTopGit also allows multiple \"patch set\"s to exist at the same time\nwhere a single \"patch\" may be used by more than one \"patch set\".\n\n### Patch Set History\n\nAs an alternative to maintaining two or more different versions of\nthe same patch (e.g. for different development branches) under\ndifferent names such as, for example, \"patch1-oldstable\", \"patch1-stable\"\nand \"patch1-unstable\", it's possible to use a TopGit tag to record\nthe state of a \"patch set\" (via the `tg tag` command) and then later\ngo back to that state (via the `tg shell` command) to, for example,\nproduce an updated patch set for an older software version and\nrecord that new state of the older software version \"patch set\"\nwithout disturbing the current version of the \"patch set\".\n\nThe advantage of using this mechanism is that the branch names for\nthe individual patches always remain the same no matter how many\ndifferent versions are being kept.\n\n### Import and Export\n\nTopGit can import and export \"patch set\"s to other formats.  This\nincludes the one \"diff\" file per patch and one \"commit\" per patch\nformats.\n\nThis makes it easy to produce a set of \"diff\" patch files on demand\nfor external (e.g. non-Git) use for a \"patch set\".\n\n\nTopGit Downsides\n----------------\n\nForget about using `git rebase` on a TopGit branch (either a patch's\n\"branch\" or its \"base branch\").  With the exception being commits\nthat have not yet been merged into any other patch's \"branch\" or\n\"base branch\".  (TopGit does, however, have its own `tgstash` that\nprovides a kind of \"undo\" after unfortunate update accidents.)\n\nThe merge history for a \"patch set\" can become rather complex as a\n\"patch set\" is maintained over time (via the `tg update` command)\nsince nothing is ever thrown away.\n\nTopGit has a learning curve and those unfamiliar with Git will need\nto become comfortable with Git too.\n\n\nAdditional Information\n----------------------\n\n[Full documentation][1] is available including a [fully formatted\nversion of the manual][2] (created from `README_DOCS.rst` which\nincorporates a few [examples][3]) and the [TopGit changelog][4].\n\n\n[1]: https://mackyle.github.io/topgit\n[2]: https://mackyle.github.io/topgit/topgit.html\n[3]: https://mackyle.github.io/topgit/topgit.html#synopsis\n[4]: https://mackyle.github.io/topgit/changelog.html"
}
