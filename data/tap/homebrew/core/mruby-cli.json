{
  "name": "mruby-cli",
  "full_name": "mruby-cli",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Build native command-line applications for Linux, MacOS, and Windows",
  "license": "MIT",
  "homepage": "https://github.com/hone/mruby-cli",
  "versions": {
    "stable": "0.0.4",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/hone/mruby-cli/archive/v0.0.4.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "97d889b5980193c562e82b42089b937e675b73950fa0d0c4e46fbe71d16d719f"
    },
    "head": {
      "url": "https://github.com/hone/mruby-cli.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mruby-cli/blobs/sha256:4495dfded8fc9a3f3f90961612d6943113b3cc81b787e0cba2d4eadab304cd08",
          "sha256": "4495dfded8fc9a3f3f90961612d6943113b3cc81b787e0cba2d4eadab304cd08"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mruby-cli/blobs/sha256:53b4a66eed494c2bd2e66d41dd5fe7d9f0332a866a0d7d39b6a77557717a35f0",
          "sha256": "53b4a66eed494c2bd2e66d41dd5fe7d9f0332a866a0d7d39b6a77557717a35f0"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mruby-cli/blobs/sha256:ac082ff3a558eba68662a837eba2a9dfed46d52b757bb0e0b046b6a4d2d1105a",
          "sha256": "ac082ff3a558eba68662a837eba2a9dfed46d52b757bb0e0b046b6a4d2d1105a"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mruby-cli/blobs/sha256:cf56c32770f4c9e65be960b9ae93fc65ff51b13d78d4b1a4f289c1b0a0eb5668",
          "sha256": "cf56c32770f4c9e65be960b9ae93fc65ff51b13d78d4b1a4f289c1b0a0eb5668"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mruby-cli/blobs/sha256:5c60103d037511f0808f55b744aea92a2b404160c0d268624ba8204bfbb5a62c",
          "sha256": "5c60103d037511f0808f55b744aea92a2b404160c0d268624ba8204bfbb5a62c"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mruby-cli/blobs/sha256:e15510585f6f0d64a93288218ab267281230937d0c97dc6982913683641bc98b",
          "sha256": "e15510585f6f0d64a93288218ab267281230937d0c97dc6982913683641bc98b"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mruby-cli/blobs/sha256:0418ca77d1a6adeaaf3184e9cbd566bab2829f2f736cc0f7f07ecf79e3bb6195",
          "sha256": "0418ca77d1a6adeaaf3184e9cbd566bab2829f2f736cc0f7f07ecf79e3bb6195"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mruby-cli/blobs/sha256:232802e1ee21a4c1d3790272414914f9d5b7ab073a2fd819c9ef5fc6872a165f",
          "sha256": "232802e1ee21a4c1d3790272414914f9d5b7ab073a2fd819c9ef5fc6872a165f"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mruby-cli/blobs/sha256:267baff54cace7684edd4184625afd6fb788cdb072035e88b9c10e4d274454fe",
          "sha256": "267baff54cace7684edd4184625afd6fb788cdb072035e88b9c10e4d274454fe"
        },
        "sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mruby-cli/blobs/sha256:d436b8d717f89db9807338345f4b0f385abcfc45f56e9b0b7decc333d4d05ad6",
          "sha256": "d436b8d717f89db9807338345f4b0f385abcfc45f56e9b0b7decc333d4d05ad6"
        },
        "el_capitan": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mruby-cli/blobs/sha256:2f56375783e9365bafc0868d505b54eea315f6dad9a0095decbbd61abeb345ac",
          "sha256": "2f56375783e9365bafc0868d505b54eea315f6dad9a0095decbbd61abeb345ac"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mruby-cli/blobs/sha256:826d12cb63bd84483619ef0c51ebbd4cd90a7becb3e3110ed661ba20a4be2f61",
          "sha256": "826d12cb63bd84483619ef0c51ebbd4cd90a7becb3e3110ed661ba20a4be2f61"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "ruby@2.7"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    {
      "bison": "build"
    }
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": true,
  "disable_date": "2023-06-19",
  "disable_reason": "unmaintained",
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/mruby-cli.rb",
  "ruby_source_checksum": {
    "sha256": "26a2dcc5e2325d01f85743de8afb32a7cbf53f5c5f6668624a0664ceb2ce82c1"
  },
  "date_added": "2017-06-25T19:30:37-07:00",
  "readme": "# mruby CLI\nA utility for setting up a CLI with [mruby](https://www.mruby.org) that compiles binaries to Linux, OS X, and Windows.\n\n## Prerequisites\nYou'll need the following installed and in your `PATH`:\n\n* [mruby-cli](https://github.com/hone/mruby-cli/releases)\n* [Docker](https://docs.docker.com/installation/)\n* [Docker Compose](https://docs.docker.com/compose/install/)\n\nOn Mac OS X and Windows, [Docker Toolbox](https://www.docker.com/toolbox) is the recommended way to install Docker and docker-compose (does not work on windows).\n\n## Building a CLI app\nTo generate a new mruby CLI, there's a `--setup` option.\n\n```sh\n$ mruby-cli --setup <app name>\n```\n\nThis will generate a folder `<app name>` containing a basic skeleton for getting started. Once you're in the folder, you can build all the binaries:\n\n```sh\n$ docker-compose run compile\n```\n\nYou'll be able to find the binaries in the following directories:\n\n* Linux (64-bit): `mruby/build/x86_64-pc-linux-gnu/bin`\n* Linux (32-bit): `mruby/build/i686-pc-linux-gnu/bin`\n* OS X (64-bit): `mruby/build/x86_64-apple-darwin14/bin/`\n* OS X (32-bit): `mruby/build/i386-apple-darwin14/bin`\n* Windows (64-bit): `mruby/build/x86_64-w64-mingw32/bin/`\n* Windows (32-bit): `mruby/build/i686-w64-mingw32/bin`\n\nYou should be able to run the respective binary that's native on your platform. There's a `shell` service that can be used as well. In the example below, `mruby-cli --setup hello_world` was run.\n\n```sh\n$ docker-compose run shell\nroot@3da278e931fc:/home/mruby/code# mruby/build/host/bin/hello_world\nHello World\n```\n\n### On Windows system\n\nWhen running on a windows system `docker-compose run`, you need to add the flag\n`-d`. For instance, `docker-compose run -d compile`. If you don't add it, you\nwill got the following error:\n\n```\n[31mERROR\nPlease pass the -d flag when using `docker-compose run`.\n```\n\n## Docker\n\nEach app will be generated with a Dockerfile that inherits a base image.\n\nYou can pull the image from docker hub here:\nhttps://registry.hub.docker.com/u/hone/mruby-cli/\n\nThe Dockerfile for the base image is available on github:\nhttps://github.com/hone/mruby-cli-docker\n\n## Hello World\n\nBuilding the canonical hello world example in mruby-cli is quite simple. The two files of note from the generate skeleton are `mrblib/hello_world.rb` and `mrbgem.rake`. The CLI hooks into the `__main__` method defined here and passes all the arguments as `argv`.\n\n`mrblib/hello_world.rb`:\n```ruby\ndef __main__(argv)\n  puts \"Hello World\"\nend\n```\n\n### Dependencies\nThe rubygems equivalent is mrbgems. [mgem-list](https://github.com/mruby/mgem-list) contains a list of mgems you can pull from. By default mruby does not include everything in the kitchen sink like MRI. This means to even get `puts`, we need to include the `mruby-print`. The list of core gems can be found [here](https://github.com/mruby/mruby/tree/master/mrbgems). Adding dependencies is simple, you just need to add a line near the bottom of your `mrbgem.rake` with the two arguments: name and where it comes from.\n\n`mrbgem.rake`:\n```ruby\nMRuby::Gem::Specification.new('hello_world') do |spec|\n  spec.license = 'MIT'\n  spec.author  = 'Terence Lee'\n  spec.summary = 'Hello World'\n  spec.bins    = ['hello_world']\n\n  spec.add_dependency 'mruby-print', :core => 'mruby-print'\n  spec.add_dependency 'mruby-mtest', :mgem => 'mruby-test'\nend\n```\n### CLI Architecture\nThe app is built from two parts a C wrapper in `tools/` and a mruby part in `mrblib/`. The C wrapper is fairly minimal and executes the `__main__` method in mruby and instantiates `ARGV` and passes it to the mruby code. You won't need to touch the C wrapper. The rest of the CLI is written in mruby. You can't have subfolders in `mrblib/` but you can have as many files in `mrblib/`. All these files are precompiled into mruby bytecode The build tool for mruby is written in CRuby (MRI).\n\n### Testing\nBy default, `mruby-cli` generates two kinds of tests: mtest and bintest.\n\n#### mtest\nThese tests are unit tests, are written in mruby, and go in the `test/` directory. It uses the mrbgem [`mruby-mtest`](https://github.com/iij/mruby-mtest). The available methods to be used can be found [here](https://github.com/mruby/mruby/blob/master/test/assert.rb). To run the tests, just execute:\n\n```sh\n$ docker-compose run mtest\n```\n\n#### bintest\nThese are integration tests, are written in CRuby (MRI), and go in the `bintest/` directory. It tests the status and output of the host binary inside a docker container. To run them just execute:\n\n```sh\n$ docker-compose run bintest\n```\n\n## Examples\n* `mruby-cli` itself is an app generated by `mruby-cli`, so you can explore this repo on how to build one.\n* [mjruby](https://github.com/jkutner/mjruby) - replacement for jruby-launcher.\n* [mruby-eso-research](https://github.com/hone/mruby-eso-research) - an app for managing crafting research in Elder Scrolls Online. It uses YAML as the data store.\n* [nhk-easy-cli](https://github.com/nhk-ruby/nhk-easy-cli) - a command-line client for reading NHK News Web Easy.\n* [mruby-static](https://github.com/zzak/mruby-static) - a static site generator\n\n## mruby-cli Development\n\n### Compile the mruby-cli binaries\n\nThis app is built as a `mruby-cli` app. To compile the binaries, you **must** type\n\n```\ndocker-compose run compile\n```\n\nand find the binaries in the appropriate directories (`mruby/build/<target>/bin/`).\n\nThe docker container contains the necessary cross toolchain to compile a binary for each supported target. That's why it is checked before running a rake task if it is run inside a container.\n\nIndeed, just using `rake compile` will not work out of the box because the main build is designed to compile on a 64-bit Linux host. It could work if you are on a 64-Linux host and you have an cross toolchain equivalent to the one we provide into the docker container.\n\nThis means that if you want to add a new rake task `my_task`, you need to add it to the `docker-compose.yml` to make it available through `docker-compose run my_task`.\n\n### Create the releases\n\nJust type: `docker-compose run release`\n\nAfter this command finishes, you'll see the releases for each target in the `releases` directory.\n\n### Create package\n\nWe can package the ad hoc release as deb, rpm, msi, or dmg for the following\nLinux.\n\nTo create all the package, just type\n\n```\ndocker-compose run package\n```"
}
