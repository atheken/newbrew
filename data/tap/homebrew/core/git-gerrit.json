{
  "name": "git-gerrit",
  "full_name": "git-gerrit",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Gerrit code review helper scripts",
  "license": "BSD-3-Clause",
  "homepage": "https://github.com/fbzhong/git-gerrit",
  "versions": {
    "stable": "0.3.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/fbzhong/git-gerrit/archive/v0.3.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "433185315db3367fef82a7332c335c1c5e0b05dabf8d4fbeff9ecf6cc7e422eb"
    },
    "head": {
      "url": "https://github.com/fbzhong/git-gerrit.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-gerrit/blobs/sha256:f787bba2e4465a7f5df3bebcdb625c3815331a721abc0024ab09b14b868b3ec5",
          "sha256": "f787bba2e4465a7f5df3bebcdb625c3815331a721abc0024ab09b14b868b3ec5"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-gerrit/blobs/sha256:865ffd990de756622dd9c3bb37fd0f8e7af04eba58bd38013cda9b6a6c551f95",
          "sha256": "865ffd990de756622dd9c3bb37fd0f8e7af04eba58bd38013cda9b6a6c551f95"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-gerrit/blobs/sha256:865ffd990de756622dd9c3bb37fd0f8e7af04eba58bd38013cda9b6a6c551f95",
          "sha256": "865ffd990de756622dd9c3bb37fd0f8e7af04eba58bd38013cda9b6a6c551f95"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-gerrit/blobs/sha256:89d72fc6229fb8d4a7a1e8e403bbe382bfea7463965440554e517179eeaeed70",
          "sha256": "89d72fc6229fb8d4a7a1e8e403bbe382bfea7463965440554e517179eeaeed70"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-gerrit/blobs/sha256:911fa65cea72dfe849d36ab108a6a36acd1295ea9c8f395a8f8ded8bdd930fbf",
          "sha256": "911fa65cea72dfe849d36ab108a6a36acd1295ea9c8f395a8f8ded8bdd930fbf"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-gerrit/blobs/sha256:911fa65cea72dfe849d36ab108a6a36acd1295ea9c8f395a8f8ded8bdd930fbf",
          "sha256": "911fa65cea72dfe849d36ab108a6a36acd1295ea9c8f395a8f8ded8bdd930fbf"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-gerrit/blobs/sha256:911fa65cea72dfe849d36ab108a6a36acd1295ea9c8f395a8f8ded8bdd930fbf",
          "sha256": "911fa65cea72dfe849d36ab108a6a36acd1295ea9c8f395a8f8ded8bdd930fbf"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-gerrit/blobs/sha256:911fa65cea72dfe849d36ab108a6a36acd1295ea9c8f395a8f8ded8bdd930fbf",
          "sha256": "911fa65cea72dfe849d36ab108a6a36acd1295ea9c8f395a8f8ded8bdd930fbf"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-gerrit/blobs/sha256:f787bba2e4465a7f5df3bebcdb625c3815331a721abc0024ab09b14b868b3ec5",
          "sha256": "f787bba2e4465a7f5df3bebcdb625c3815331a721abc0024ab09b14b868b3ec5"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/git-gerrit.rb",
  "ruby_source_checksum": {
    "sha256": "17d2a13b7bc1f118274c574b6eff82e9da1d1dba037a661fef7e473fb9b9a04f"
  },
  "date_added": "2012-01-08T10:20:44-08:00",
  "readme": "# Git-Gerrit\n\nA few scripts to make code review via [Gerrit Code Review](http://gerrit.googlecode.com) easier for developers.\nThey are improved and maintained to fit the needs of the [TYPO3](http://typo3.org) review workflow.\n\nThis project is forked from my [gerrit-tools](https://github.com/fbzhong/gerrit-tools) repo, which was originally developed by [Andr√© Arko](https://github.com/indirect/gerrit-tools), modified by [Steffen Gebert](https://github.com/StephenKing/gerrit-tools) and [Philipp Gampe](https://github.com/pgampe/gerrit-tools).\n\n## Change Logs\n\n    v0.3.0\n        + squashing push commit to refs/changes/<number> in review branch.\n        + add --all-approvals in changes command.\n        - remove rebase command.\n        * bug fixing.\n\n    v0.2.0\n        + patchset command.\n        + more bash completion support.\n        + installation scripts.\n        * bug fix.\n\n    v0.1.0 fork from gerrit tools.\n\n## gerrit-cherry-pick\n\nThis is a script that allows you to cherry-pick a particular patch from Gerrit, so that it can be reviewed easily. It comes from Gerrit 2.2.1.\n\n## gerrit\n\nGerrit is a warpper script to execute gerrit commands via ssh.\n\n## git-gerrit\n\nGit-gerrit is a wrapper script to make creating, reviewing, and approving Gerrit changes very simple. In the simplest case, you can have an entire Git workflow that looks like this for people creating a new changeset:\n\n    git gerrit push\n\nAnd looks like this for people reviewing someone else's changeset:\n\n    // show changes\n    git gerrit changes\n\n    // show change detail\n    git gerrit changes 123\n\n    // apply change for review\n    git gerrit apply 123\n\n    // show patchset diff.\n    git gerrit patchset\n\n    // verify...\n    rake\n\n    // review\n    git gerrit review\n\n    // submit\n    git gerrit submit\n\n    // reset\n    git gerrit reset\n\nWhen we have to update and re-submit the changeset according to the code review result, we can do like that:\n\n    // apply change for review\n    git gerrit apply 123\n\n    // let's update the code and commit locally, just like development.\n    vim ... ; git commit ; ...\n\n    // ok, time to submit changeset again.\n    git gerrit push\n    // your changes are already submit to gerrit.\n\n    // update current review branch if you press n before.\n    git gerrit update\n\n### Usage\n\n    Usage: git-gerrit [<options>] init\n       or: git-gerrit [<options>] open [<change number>]\n       or: git-gerrit [<options>] merge <branch>\n       or: git-gerrit [<options>] push [<repository>] [<refspec>]\n       or: git-gerrit [<options>] changes [<search operators>]\n       or: git-gerrit [<options>] changes [<change number>]\n       or: git-gerrit [<options>] apply <change number>\n       or: git-gerrit [<options>] reset [-f]\n       or: git-gerrit [<options>] update\n       or: git-gerrit [<options>] patchset [<git-diff options>] [<commit>]\n       or: git-gerrit [<options>] diff <patchset1> [<patchset2>]\n       or: git-gerrit [<options>] review\n       or: git-gerrit [<options>] submit\n       or: git-gerrit [<options>] abandon\n\n    init\n      Init the gerrit hook.\n\n    open\n      Open current change or <change number> in browser, if the BROWSER environment\n      variable is set. Otherwise the URL will be displayed.\n\n    merge <branch>\n      Merge the current gerrit branch with the <branch>, with squashing commit.\n\n    push [<repository>] [<refspec>]\n      Pushes a single patch (or - if confirmed - multiple patches) to <repository> <refspec> for review.\n      If you are not on a review branch, you need to confirm the <refspec> to push to and\n      you may choose a topic.\n\n      If you are on a review branch , the current patch will be added as a new patchset, following\n      the same reset rules as above.\n\n    changes [<change number>]\n      Show the detail of specific <change number>.\n\n    changes [<search operators>]\n      Show the changes information, <status:open> by default. The <search operators> are\n      the same with the operators of Gerrit Code Review - Searching Changes.\n\n      The following are particial <search operators>:\n          commit:'SHA1'\n          status:open\n          status:merged\n          status:abandoned\n\n      For more information of <search operators>, please refer to the Gerrit Documentation\n      Gerrit Code Review - Searching Changes http://gerrit.googlecode.com/svn/documentation/2.2.1/user-search.html\n\n    apply <change number>\n      Applies the latest patch for the <change number> change on \"upstream\" of the current\n      branch, if it's a tracking branch, or master on a branch named for <change number>,\n      allowing you to review the change.\n\n    reset [-f]\n      Removes the current change branch created by the \"start\" subcommand and switches\n      back to tracking branch.\n      Use -f to reset if the current branch has uncommitted changes, otherwise reset will\n      refuse to do this.\n      If the current branch does not start with \"r\" followed by an integer, nothing\n      will be done and $this exists with an error.\n\n    update\n      Updates the review branch that you are currently on to the latest patch.\n\n    patchset [<git-diff options>] [<commit>]\n        Display a diff between the top of previous branch and <commit>. <commit> will\n        be HEAD when <commit> is not specified.\n\n    diff [<patch number> [<patch number>]]\n      Depending of the number of arguments, displays a diff of\n        (0) the last two patchsets.\n        (1) the given patchset und the last patchset.\n        (2) the given patchsets. You can swap the two numbers to get an inverse diff.\n        (3) a specific change specified with <change> <patchset1> <patchset2>. Giving a\n            change number means you can use this command without being on a review branch.\n\n    review\n      Review the current patch but does not merge it.\n      You will be promted for your vote and for a message.\n\n    submit\n      Submit the current patch to merge it.\n\n    abandon\n      Abandon the current patch.\n\n### Bash Completion\n\nBy referencing the project [git-flow-completion](https://github.com/bobthecow/git-flow-completion), I do implement a bash completion script git-gerrit-completion.bash.\n\n## Installation (Latest Release Version)\n\n### Mac OS X\n\n    brew install https://raw.github.com/fbzhong/homebrew-library/master/Library/git-gerrit.rb\n\n### Linux\n\n    curl https://raw.github.com/fbzhong/git-gerrit/master/install.sh | bash\n\n## Installation (Latest Development Version)\n\n### Mac OS X and Linux\n\n    curl https://raw.github.com/fbzhong/git-gerrit/master/develop.sh | bash\n\nor clone to local, then\n\n    bash install_local.sh\n\n## Contributing\n\nFeel free to fork and send a pull request if you think you've improved anything.\n\n## New BSD License\n\nCopyright (c) 2012, Robin Zhong <fbzhong@gmail.com>\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * Neither the name of the Robin Zhong nor the\n      names of its contributors may be used to endorse or promote products\n      derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n## Credit\n\n* [Andr√© Arko](https://github.com/indirect/gerrit-tools)\n\n* [Steffen Gebert](https://github.com/StephenKing/gerrit-tools)\n\n* [Philipp Gampe](https://github.com/pgampe/gerrit-tools).\n\n* [Justin Hileman](https://github.com/bobthecow/git-flow-completion)"
}
