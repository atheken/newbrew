{
  "name": "llnode",
  "full_name": "llnode",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "LLDB plugin for live/post-mortem debugging of node.js apps",
  "license": "MIT",
  "homepage": "https://github.com/nodejs/llnode",
  "versions": {
    "stable": "4.0.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/nodejs/llnode/archive/v4.0.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "abc295c077443f823444faffb165ada4c6ca377f2b1af4c002e8a9eea0f30135"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/llnode/blobs/sha256:c11ee956c445277d3a77bfe5ab6b3fa9553c922aabf22731af6e2135d1c2b361",
          "sha256": "c11ee956c445277d3a77bfe5ab6b3fa9553c922aabf22731af6e2135d1c2b361"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/llnode/blobs/sha256:e1c93fd5aefebd887138fd244b50db737433cc30c278c6d18a3e87f0d6316f29",
          "sha256": "e1c93fd5aefebd887138fd244b50db737433cc30c278c6d18a3e87f0d6316f29"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/llnode/blobs/sha256:a86c196564ac07429bc188fbeb4780d408865721cc7e929e9aceaf24f8e79109",
          "sha256": "a86c196564ac07429bc188fbeb4780d408865721cc7e929e9aceaf24f8e79109"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/llnode/blobs/sha256:ec584fb90528046e31353b134abf6e017a72da189ff394a72d3d9e1affc6b9f6",
          "sha256": "ec584fb90528046e31353b134abf6e017a72da189ff394a72d3d9e1affc6b9f6"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/llnode/blobs/sha256:0737158c515f49e2cb56c68df835f789daa8d13f5b85a9a300532078318a86e5",
          "sha256": "0737158c515f49e2cb56c68df835f789daa8d13f5b85a9a300532078318a86e5"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/llnode/blobs/sha256:fb32b0d19ff9f0c760a79bafdc830f0574a85165601ab493a9b8c7737e5dfef7",
          "sha256": "fb32b0d19ff9f0c760a79bafdc830f0574a85165601ab493a9b8c7737e5dfef7"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/llnode/blobs/sha256:d8d1926e4447e8a07e56744001bccd5661fce6186fbb33e75218d11bf57c4908",
          "sha256": "d8d1926e4447e8a07e56744001bccd5661fce6186fbb33e75218d11bf57c4908"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/llnode/blobs/sha256:343c83b8b3a42ad4496c3866dda8da056a4cea95a09bebdec3280cbe3c301484",
          "sha256": "343c83b8b3a42ad4496c3866dda8da056a4cea95a09bebdec3280cbe3c301484"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "llvm",
    "node"
  ],
  "dependencies": [],
  "test_dependencies": [
    "node"
  ],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "llvm"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": "`brew install llnode` does not link the plugin to LLDB PlugIns dir.\n\nTo load this plugin in LLDB, one will need to either\n\n* Type `plugin load $HOMEBREW_PREFIX/opt/llnode/lib/llnode/llnode.dylib` on each run of lldb\n* Install plugin into PlugIns dir manually (macOS only):\n\n    mkdir -p \"$HOME/Library/Application Support/LLDB/PlugIns\"\n    ln -sf '$HOMEBREW_PREFIX/opt/llnode/lib/llnode/llnode.dylib' \"$HOME/Library/Application Support/LLDB/PlugIns/\"\n",
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/llnode.rb",
  "ruby_source_checksum": {
    "sha256": "5a376318e3c6cbd55709e26c250f7ca123718bd873f1cf064c1ea4419d3cec1a"
  },
  "date_added": "2016-04-22T00:32:18+02:00",
  "readme": "<p align=\"left\">\n  <a href=\"https://github.com/nodejs/llnode\">\n    <img\n      alt=\"llnode\"\n      src=\"logo.svg\"\n      width=\"400\"\n    />\n  </a>\n</p>\n\n[![npm](https://img.shields.io/npm/v/llnode.svg?style=flat-square)](https://npmjs.org/package/llnode)\n![ci](https://img.shields.io/github/workflow/status/nodejs/llnode/on%20push%20or%20pull_request/main?style=flat-square)\n[![coverage](https://img.shields.io/coveralls/github/nodejs/llnode/mmain?style=flat-square)](https://coveralls.io/github/nodejs/llnode)\n\n\nNode.js v10.x+ C++ plugin for the [LLDB](http://lldb.llvm.org) debugger.\n\nThe llnode plugin adds the ability to inspect JavaScript stack frames, objects,\nsource code and more to the standard C/C++ debugging facilities when working\nwith Node.js processes or core dumps in LLDB.\n\n## Demo\n\nhttps://asciinema.org/a/29589\n\n## Quick start\n\nStart an LLDB session with the llnode plugin automatically loaded:\n\n```bash\nnpm install -g llnode\nllnode `which node` -c /path/to/core/dump\n```\n\n- Never install llnode with `sudo` as it can easily lead to errors during\n  installation and execution.\n- For more details on starting llnode see the [Usage](#usage) section.\n- To get started with the llnode commands see the [Commands](#commands) section.\n\n## Install Instructions\n\n### Prerequisites: Official, active Node.js version\n\n`llnode` only supports currently active Node.js versions installed via official\nchannels. We recommend installing Node.js with [nvm](https://github.com/nvm-sh/nvm)\nas it allows users to install global packages without `sudo` by default, and\nit always installs the official executables from https://nodejs.org.\n\n**Do not install Node.js from the default Ubuntu/Debian apt repositories (or from\nthe default repositories of other Linux distributions), llnode is not compatible\nwith Node.js installed that way**. If you still want to install Node.js via\n`apt-get`, take a look at\n[nodesource/distributions](https://github.com/nodesource/distributions).\n\n### Prerequisites: Install LLDB and its Library\n\nTo use llnode you need to have the LLDB debugger installed. The recommended\nversion is LLDB 3.9 and above.\n\n- OS X/macOS\n  - You can install [Xcode](https://developer.apple.com/xcode/) and use the\n    LLDB that comes with it.\n  - Optionally, you can install newer versions of lldb using Homebrew with\n\n    ```bash\n    brew update && brew install --with-lldb --with-toolchain llvm\n    ```\n\n    and make sure `/usr/local/opt/llvm/bin` gets searched before `/usr/bin/`\n    on your `PATH`. llnode will link to the LLDB installation returned by\n    `llvm-config` if available.\n- Linux\n  - You can install the lldb package using the package manager of your\n    distribution. You may need to install additional packages for `liblldb`\n    as well.\n  - For example, on Ubuntu 18.04 you can install the prerequisites with\n\n    ```bash\n    apt-get install lldb-8 liblldb-8-dev\n    ```\n- FreeBSD\n\n  ```bash\n  # Install llvm with lldb and headers\n  pkg install llvm39\n  rm -f /usr/bin/lldb\n  ln -s /usr/local/bin/lldb39 /usr/bin/lldb\n  ```\n\n- Windows\n  - You can install a [binary distribution of LLVM](http://releases.llvm.org/download.html)\n    directly or using [Chocolatey](https://chocolatey.org/install#installing-chocolatey):\n\n    ```bat\n    cinst -y visualstudio2017buildtools visualstudio2017-workload-vctools llvm git\n    ```\n\n    Visual Studio is required for MSBuild and headers when building llnode. Git\n    is required to download the lldb headers.\n\n- Android / Termux (Experimental)\n  - Install Termux (https://termux.com)\n\n  - Install Termux Packages\n    - pkg install clang lldb lldb-dev make\n    - pkg install nodejs-lts nodejs-lts-dev\n  - To debug:\n  ```\n  llnode -- /data/data/com.termux/files/usr/bin/node --abort_on_uncaught_exception script.js\n  (llnode) run\n  ```\n\n### Install the Plugin\n\n#### Install llnode globally via npm\n\nIf you have `lldb` available on your `PATH`, simply run:\n\n```bash\nnpm install -g llnode\n```\n\nTo build llnode against a specific lldb version matching an lldb executable,\nuse the `--lldb_exe` npm option. For example, on Linux the executable on the\n`PATH` might be `lldb-3.9`:\n\n```bash\nnpm install --lldb_exe=`which lldb-3.9` -g llnode\n```\n\nAfter installing with npm, `llnode` should be available on your `PATH` as a\nshortcut for running LLDB with the llnode plugin.\n\n#### Optional: Install with Homebrew (OS X/macOS)\n\n```bash\nbrew install llnode\n```\n\n## Loading the llnode Plugin\n\nThere are several ways to load the llnode plugin:\n\n### 1. Using the llnode shortcut\n\nIf you install llnode globally via npm (`npm install -g llnode`), you can use\nthe `llnode` shortcut script. This starts `lldb` and automatically issues\nthe `plugin load` command. All parameters to the llnode script are passed\ndirectly to lldb. If you it's not a local installation, the shortcut will be in\n`node_modules/.bin/llnode`.\n\n### 2. Using `~/.lldbinit` to load the Plugin Automatically\n\nTo tell LLDB to load llnode automatically regardless of the\nversion of lldb that you are running, add this line to `~/.lldbinit`:\n\n```\nplugin load /path/to/the/llnode/plugin\n```\n\nThe path to the llnode plugin should be printed when the installation\nis finished. On OS X/macOS the plugin is typically\n`node_modules/llnode/llnode.dylib`, on Linux it's\n`node_modules/llnode/llnode.so`.\n\n### 3. Loading the Plugin Manually\n\nThe llnode plugin can also be manually loaded into LLDB using the\n`plugin load` command within lldb.\n\nIt does not matter whether the `plugin load` command is issued before or after\nloading a core dump or attaching to a process.\n\n### 4. Install the Plugin to the LLDB System Plugin Directory\n\nSimilar to the `~/.lldbinit` approach, this way LLDB will also load the plugin\nautomatically on start-up. Doing this may require additional permissions\nto be able to copy the plugin library to the system plugin directory.\n\nOn Linux, run `make install-linux` in the project directory, or if\ninstalling with npm, copy `node_modules/llnode/llnode.so`\nto `/usr/lib/lldb/plugins` or create a link there.\n\nOn OS X/macOS, run `make install-osx` in the project directory, or if\ninstalling with npm, copy `node_modules/llnode/llnode.dylib`\nto `~/Library/Application\\ Support/LLDB/PlugIns/` or create a link there.\n\n# Usage\n\nTo use llnode with a core dump the core dump needs to be loaded into lldb\nalong with the exact executable that created the core dump. The executable\ncontains information that lldb and the llnode plugin need to make sense of\nthe data in the core dump.\n\nTo load a core dump when starting llnode use:\n```\nllnode /path/to/bin/node -c /path/to/core\n```\nor to load the core dump after starting lldb:\n```\n(llnode) target create /path/to/bin/node -c /path/to/core\n```\n\nTo use llnode against a live process:\n```\nllnode -- /path/to/bin/node script.js\n(llnode) run\n```\nThis is ideal for debugging an npm package with native code.\nTo debug a Node.js crash on uncaught exception:\n```\nllnode -- /path/to/bin/node --abort_on_uncaught_exception script.js\n(llnode) run\n```\nlldb will stop your process when it crashes. To see where it stopped use the\nv8 bt command. See the [Commands](#commands) section below for more commands.\n\n### Commands\n\n```\n(llnode) v8 help\n     Node.js helpers\n\nSyntax: v8\n\nThe following subcommands are supported:\n\n      bt              -- Show a backtrace with node.js JavaScript functions and their args. An optional argument is accepted; if\n                         that argument is a number, it specifies the number of frames to display. Otherwise all frames will be\n                         dumped.\n\n                         Syntax: v8 bt [number]\n      findjsinstances -- List every object with the specified type name.\n                         Use -v or --verbose to display detailed `v8 inspect` output for each object.\n                         Accepts the same options as `v8 inspect`\n      findjsobjects   -- List all object types and instance counts grouped by typename and sorted by instance count. Use\n                         -d or --detailed to get an output grouped by type name, properties, and array length, as well as\n                         more information regarding each type.\n      findrefs        -- Finds all the object properties which meet the search criteria.\n                         The default is to list all the object properties that reference the specified value.\n                         Flags:\n\n                          * -v, --value expr     - all properties that refer to the specified JavaScript object (default)\n                          * -n, --name  name     - all properties with the specified name\n                          * -s, --string string  - all properties that refer to the specified JavaScript string value\n\n      getactivehandles  -- Print all pending handles in the queue. Equivalent to running process._getActiveHandles() on\n                           the living process.\n\n      getactiverequests -- Print all pending requests in the queue. Equivalent to running process._getActiveRequests() on\n                           the living process.\n\n      inspect         -- Print detailed description and contents of the JavaScript value.\n\n                         Possible flags (all optional):\n\n                          * -F, --full-string    - print whole string without adding ellipsis\n                          * -m, --print-map      - print object's map address\n                          * -s, --print-source   - print source code for function objects\n                          * -l num, --length num - print maximum of `num` elements from string/array\n\n                         Syntax: v8 inspect [flags] expr\n      nodeinfo        -- Print information about Node.js\n      print           -- Print short description of the JavaScript value.\n\n                         Syntax: v8 print expr\n      source list     -- Print source lines around the currently selected\n                         JavaScript frame.\n                         Syntax: v8 source list [flags]\n                         Flags:\n                         * -l <line> - Print source code below line <line>.\n\nFor more help on any particular subcommand, type 'help <command> <subcommand>'.\n```\n\n## Develop and Test\n\n### Configure and Build\n\nThe easiest way to build the plugin:\n\n```bash\n# Clone this repo\ngit clone https://github.com/nodejs/llnode.git && cd llnode\n\n# Configure and build the plugin with npm\nnpm install\n# To configure and build the plugin without npm\nnode scripts/configure.js && node scripts/install.js && node scripts/cleanup.js\n# Or use make\nmake plugin\n\n# To configure and build both the plugin and the addon\nnpm install --llnode_build_addon=true\n# To configure and build with a specific path to headers\nnpm install --llnode_lldb_include_dir=/path/to/lldb/include\n\n# Without npm\nLLNODE_BUILD_ADDON=true node scripts/configure.js && node scripts/install.js && node scripts/cleanup.js\n# Or use make\nmake addon # Builds the addon\nmake       # Builds both the addon and the plugin\n```\n\nTo configure the build yourself:\n\n```bash\n# Detect available lldb installation and download headers if necessary\nnode scripts/configure.js\n# To build the addon, set the environment variable LLNODE_BUILD_ADDON=true\n\n# To configure with the detected lldb installation\nnode-gyp configure\n# To configure with a specified path to headers, where `$lldb_include_dir`\n# contains the <lldb/*/*.h> headers\nnode-gyp configure -- -Dlldb_include_dir=/usr/local/Cellar/llvm/5.0.0/include\n# To configure with a specified path to the libraries, where `$lldb_lib_dir`\n# contains `liblldb.so` or `liblldb.dylib`\nnode-gyp configure -- -Dlldb_lib_dir=/usr/lib/llvm-3.9/lib\n\n# Build the plugin (and the addon if LLNODE_BUILD_ADDON=true)\nnode-gyp build\n\n# Move the built plugin to the project directory\nnode scripts/cleanup.js\n```\n\n### Test\n\nTo run the tests, if `lldb` is an executable on the `PATH`:\n\n```bash\nnpm run test-all    # Run both addon and plugin tests\nnpm run test-plugin # Run plugin tests\nnpm run test-addon    # Run addon tests\n```\n\nIf the LLDB executable is named differently, point `TEST_LLDB_BINARY`\nto it before running the tests:\n\n```bash\nTEST_LLDB_BINARY=`which lldb-4.0` npm run test-all\n```\n\n### Useful Environment Variables\n\n* `LLNODE_DEBUG=true` to see additional debug info from llnode\n* `TEST_LLNODE_DEBUG=true` to see additional debug info coming from the tests\n* `LLNODE_CORE=/path/to/core/dump LLNODE_NODE_EXE=/path/to/node`\n  to use a prepared core dump instead of generating one on-the-fly when running\n  the tests.\n\nFor example, to inspect the process of `inspect-scenario.js`, run:\n\n```bash\nLLNODE_DEBUG=true lldb -- \\\n  node --abort_on_uncaught_exception --expose_externalize_string \\\n  test/fixtures/inspect-scenario.js\n(lldb) run\n```\n\nTo debug `test/scan-test.js` with a prepared core dump:\n\n```\nLLNODE_DEBUG=true TEST_LLNODE_DEBUG=true \\\n  LLNODE_CORE=/path/to/core/dump/of/inspect/scenario.js \\\n  LLNODE_NODE_EXE=/path/to/node \\\n  node test/scan-test.js\n```\n\n## LICENSE\n\nThis software is licensed under the MIT License.\n\nCopyright Fedor Indutny, 2016.\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to permit\npersons to whom the Software is furnished to do so, subject to the\nfollowing conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\nNO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\nDAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\nUSE OR OTHER DEALINGS IN THE SOFTWARE."
}
