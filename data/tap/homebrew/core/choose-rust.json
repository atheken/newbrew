{
  "name": "choose-rust",
  "full_name": "choose-rust",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Human-friendly and fast alternative to cut and (sometimes) awk",
  "license": "GPL-3.0-or-later",
  "homepage": "https://github.com/theryangeary/choose",
  "versions": {
    "stable": "1.3.4",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/theryangeary/choose/archive/v1.3.4.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "6c711901bb094a1241a2cd11951d5b7c96f337971f8d2eeff33f38dfa6ffb6ed"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/choose-rust/blobs/sha256:82ed2e1824a5e50d813e988e5e29bef7497a554d16765bc9499aeb413f7c293c",
          "sha256": "82ed2e1824a5e50d813e988e5e29bef7497a554d16765bc9499aeb413f7c293c"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/choose-rust/blobs/sha256:d57acf95592fce37b4300637b1c38989564d423de789b9fc624223f53de1c796",
          "sha256": "d57acf95592fce37b4300637b1c38989564d423de789b9fc624223f53de1c796"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/choose-rust/blobs/sha256:f009a6ef6eb59df17bf53037237cb94c97d9f8a00e6a20de63d1952fde5fc56b",
          "sha256": "f009a6ef6eb59df17bf53037237cb94c97d9f8a00e6a20de63d1952fde5fc56b"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/choose-rust/blobs/sha256:38fc4f96b6ed022b5d0a0066155e7aeb98e9b27bc95368a2b86dc98c49e13faf",
          "sha256": "38fc4f96b6ed022b5d0a0066155e7aeb98e9b27bc95368a2b86dc98c49e13faf"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/choose-rust/blobs/sha256:eb7a88d2f6a7ea5dbc28602995baab358344289b590446d003e861fe3460f40f",
          "sha256": "eb7a88d2f6a7ea5dbc28602995baab358344289b590446d003e861fe3460f40f"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/choose-rust/blobs/sha256:b2fa7efa2e78068e948a7991caa5d2a92b346af9118c1e775405a1ae5fc80b61",
          "sha256": "b2fa7efa2e78068e948a7991caa5d2a92b346af9118c1e775405a1ae5fc80b61"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/choose-rust/blobs/sha256:da599fbd49ceee7815a21a1589b34f96d65efd6366d4ea286969f7b8efe0075c",
          "sha256": "da599fbd49ceee7815a21a1589b34f96d65efd6366d4ea286969f7b8efe0075c"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/choose-rust/blobs/sha256:f1040d82ce5edb40b14f394947486e4cb07bfb4e1fdc0a387365a56debd5d07a",
          "sha256": "f1040d82ce5edb40b14f394947486e4cb07bfb4e1fdc0a387365a56debd5d07a"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [
    "choose",
    "choose-gui"
  ],
  "conflicts_with_reasons": [
    "both install a `choose` binary",
    "both install a `choose` binary"
  ],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/choose-rust.rb",
  "ruby_source_checksum": {
    "sha256": "53ad76c4a03f6848c3764c3aeaa90d27807eb754ba414ec47b3855e620a61f78"
  },
  "date_added": "2020-06-26T09:50:57+00:00",
  "readme": "# Choose\n\nThis is `choose`, a human-friendly and fast alternative to `cut` and (sometimes) `awk`\n\n[![`choose` demo](https://asciinema.org/a/315932.png)](https://asciinema.org/a/315932?autoplay=1)\n\n## Features\n\n- terse field selection syntax similar to Python's list slices\n- negative indexing from end of line\n- optional start/end index\n- zero-indexed\n- reverse ranges\n- slightly faster than `cut` for sufficiently long inputs, much faster than\n  `awk`\n- regular expression field separators using Rust's regex syntax\n\n## Rationale\n\nThe AWK programming language is designed for text processing and is extremely\ncapable in this endeavor. However, the `awk` command is not ideal for rapid\nshell use, with its requisite quoting of a line wrapped in curly braces, even\nfor the simplest of programs:\n\n```bash\nawk '{print $1}'\n```\n\nLikewise, `cut` is far from ideal for rapid shell use, because of its confusing\nsyntax. Field separators and ranges are just plain difficult to get right on the\nfirst try.\n\nIt is for these reasons that I present to you `choose`. It is not meant to be a\ndrop-in or complete replacement for either of the aforementioned tools, but\nrather a simple and intuitive tool to reach for when the basics of `awk` or\n`cut` will do, but the overhead of getting them to behave should not be\nnecessary.\n\n## Contributing\n\nPlease see our guidelines in [contributing.md](contributing.md).\n\n## Usage\n\n```\n$ choose --help\nchoose 1.2.0\n`choose` sections from each line of files\n\nUSAGE:\n    choose [FLAGS] [OPTIONS] <choices>...\n\nFLAGS:\n    -c, --character-wise    Choose fields by character number\n    -d, --debug             Activate debug mode\n    -x, --exclusive         Use exclusive ranges, similar to array indexing in many programming languages\n    -h, --help              Prints help information\n    -n, --non-greedy        Use non-greedy field separators\n    -V, --version           Prints version information\n\nOPTIONS:\n    -f, --field-separator <field-separator>\n            Specify field separator other than whitespace, using Rust `regex` syntax\n\n    -i, --input <input>                                      Input file\n    -o, --output-field-separator <output-field-separator>    Specify output field separator\n\nARGS:\n    <choices>...    Fields to print. Either a, a:b, a..b, or a..=b, where a and b are integers. The beginning or end\n                    of a range can be omitted, resulting in including the beginning or end of the line,\n                    respectively. a:b is inclusive of b (unless overridden by -x). a..b is exclusive of b and a..=b\n                    is inclusive of b\n```\n\n### Examples\n\n```bash\nchoose 5                # print the 5th item from a line (zero indexed)\n\nchoose -f ':' 0 3 5     # print the 0th, 3rd, and 5th item from a line, where\n                        # items are separated by ':' instead of whitespace\n\nchoose 2:5              # print everything from the 2nd to 5th item on the line,\n                        # inclusive of the 5th\n\nchoose -x 2:5           # print everything from the 2nd to 5th item on the line,\n                        # exclusive of the 5th\n\nchoose :3               # print the beginning of the line to the 3rd item\n\nchoose -x :3            # print the beginning of the line to the 3rd item,\n                        # exclusive\n\nchoose 3:               # print the third item to the end of the line\n\nchoose -1               # print the last item from a line\n\nchoose -3:-1            # print the last three items from a line\n```\n\n## Compilation and Installation\n\n### Installing From Source\n\nIn order to build `choose` you will need the rust toolchain installed. You can\nfind instructions [here](https://www.rust-lang.org/tools/install).\n\nThen, to install:\n\n```bash\ngit clone https://github.com/theryangeary/choose.git\ncd choose\ncargo build --release\ninstall target/release/choose <DESTDIR>\n```\n\nJust make sure DESTDIR is in your path.\n\n### Installing From Package Managers\n\nCargo:\n\n```sh\ncargo install choose\n```\n\nArch Linux:\n\n```sh\nyay -S choose-rust-git\n```\n\nFedora/CentOS [COPR](https://copr.fedorainfracloud.org/coprs/atim/choose/):\n\n```sh\ndnf copr enable atim/choose\ndnf install choose\n```\n\nHomebrew:\n\n```sh\nbrew install choose-rust\n```\n\nMacPorts:\n\n```sh\nsudo port install choose\n```\n\n### Benchmarking\n\nBenchmarking is performed using the [`bench` utility](https://github.com/Gabriel439/bench).\n\nBenchmarking is based on the assumption that there are five files in `test/`\nthat match the glob \"long*txt\". GitHub doesn't support files big enough in\nnormal repos, but for reference the files I'm working with have lengths like\nthese:\n\n```sh\n     1000 test/long.txt\n    19272 test/long_long.txt\n    96360 test/long_long_long.txt\n   963600 test/long_long_long_long.txt\n 10599600 test/long_long_long_long_long.txt\n```\n\nand content generally like this:\n\n```\nThose an equal point no years do. Depend warmth fat but her but played. Shy and\nsubjects wondered trifling pleasant. Prudent cordial comfort do no on colonel as\nassured chicken. Smart mrs day which begin. Snug do sold mr it if such.\nTerminated uncommonly at at estimating. Man behaviour met moonlight extremity\nacuteness direction.\n\nIgnorant branched humanity led now marianne too strongly entrance. Rose to shew\nbore no ye of paid rent form. Old design are dinner better nearer silent excuse.\nShe which are maids boy sense her shade. Considered reasonable we affronting on\nexpression in. So cordial anxious mr delight. Shot his has must wish from sell\n```"
}
