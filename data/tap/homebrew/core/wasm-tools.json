{
  "name": "wasm-tools",
  "full_name": "wasm-tools",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Low level tooling for WebAssembly in Rust",
  "license": "Apache-2.0 with LLVM-exception",
  "homepage": "https://github.com/bytecodealliance/wasm-tools",
  "versions": {
    "stable": "1.0.38",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/bytecodealliance/wasm-tools/archive/refs/tags/wasm-tools-1.0.38.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "d0009455c4616c81c85e0b97ba171537c1da73f02009fcea611a0b10cc109351"
    },
    "head": {
      "url": "https://github.com/bytecodealliance/wasm-tools.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/wasm-tools/blobs/sha256:1f22bba7a6b7328d5259e3146242c17113e7a24fc04763a889516c60f3c3cb27",
          "sha256": "1f22bba7a6b7328d5259e3146242c17113e7a24fc04763a889516c60f3c3cb27"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/wasm-tools/blobs/sha256:77fc4b4ac0761309b6fc8df75fe4df149c85901458e1c88748d62a155c4ec386",
          "sha256": "77fc4b4ac0761309b6fc8df75fe4df149c85901458e1c88748d62a155c4ec386"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/wasm-tools/blobs/sha256:1812a5cefeedaae6239e488a73e4cbcfcab387e9124fd0aefe895335c22307f5",
          "sha256": "1812a5cefeedaae6239e488a73e4cbcfcab387e9124fd0aefe895335c22307f5"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/wasm-tools/blobs/sha256:223d85ecc5d2e4cd6a863981aad5b2bf65787624a66f998faf959c68db7ad696",
          "sha256": "223d85ecc5d2e4cd6a863981aad5b2bf65787624a66f998faf959c68db7ad696"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/wasm-tools/blobs/sha256:995271b6c159833829f042fda94bcb59a5a98cf99e0387c9abddbda6d2444a24",
          "sha256": "995271b6c159833829f042fda94bcb59a5a98cf99e0387c9abddbda6d2444a24"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/wasm-tools/blobs/sha256:44325d0715e493daf6488d82a57161e482c48b43c91d0f33e598f1f1fe5c5335",
          "sha256": "44325d0715e493daf6488d82a57161e482c48b43c91d0f33e598f1f1fe5c5335"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/wasm-tools/blobs/sha256:27d669845f957dbda08d6b1397f8948801a479a0a73789cde1f2de68821c6549",
          "sha256": "27d669845f957dbda08d6b1397f8948801a479a0a73789cde1f2de68821c6549"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/wasm-tools.rb",
  "ruby_source_checksum": {
    "sha256": "2d6bb4523c024c190707af54d2272253e289ce4942b117f40e33352b119c5f92"
  },
  "date_added": "2022-03-28T13:52:57+00:00",
  "readme": "<div align=\"center\">\n  <h1><code>wasm-tools</code></h1>\n\n<strong>A <a href=\"https://bytecodealliance.org/\">Bytecode Alliance</a> project</strong>\n\n  <p>\n    <strong>Rust tooling for low-level manipulation of WebAssembly modules</strong>\n  </p>\n</div>\n\n# Installation\n\nThis project can be installed and compiled from source with this Cargo command:\n\n```\n$ cargo install wasm-tools\n```\n\nAdditionally there are [precompiled artifacts built on CI][artifacts] which are\navailable for download as well.\n\n[artifacts]: https://github.com/bytecodealliance/wasm-tools/releases\n\nInstallation can be confirmed with:\n\n```\n$ wasm-tools --version\n```\n\nSubcommands can be explored with:\n\n```\n$ wasm-tools help\n```\n\n# Tools included\n\nThe `wasm-tools` binary internally contains a number of subcommands for working\nwith wasm modules. Many subcommands also come with Rust crates that can be use\nprogrammatically as well:\n\n| Tool | Crate | Description |\n|------|------|------------|\n| `wasm-tools validate` | [wasmparser] | Validate a WebAssembly file |\n| `wasm-tools parse` | [wat] and [wast] | Translate the WebAssembly text format to binary |\n| `wasm-tools print` | [wasmprinter] | Translate the WebAssembly binary format to text |\n| `wasm-tools smith` | [wasm-smith] | Generate a \"random\" valid WebAssembly module |\n| `wasm-tools mutate` | [wasm-mutate] | Mutate an input wasm file into a new valid wasm file |\n| `wasm-tools shrink` | [wasm-shrink] | Shrink a wasm file while preserving a predicate |\n| `wasm-tools dump` |   | Print debugging information about the binary format |\n| `wasm-tools objdump` |   | Print debugging information about section headers |\n| `wasm-tools strip` |   | Remove custom sections from a WebAssembly file |\n| `wasm-tools demangle` |   | Demangle Rust and C++ symbol names in the `name` section |\n| `wasm-tools compose` | [wasm-compose] | Compose wasm components together |\n| `wasm-tools component new` | [wit-component] | Create a component from a core wasm binary |\n| `wasm-tools component wit` |  | Extract a `*.wit` interface from a component |\n| `wasm-tools component embed` |  | Embed a `component-type` custom section in a core wasm binary |\n| `wasm-tools metadata show` |  [wasm-metadata] | Show name and producer metadata in a component or module |\n| `wasm-tools metadata add` |  | Add name or producer metadata to a component or module |\n| `wasm-tools addr2line` |  | Translate wasm offsets to filename/line numbers with DWARF |\n\n[wasmparser]: https://crates.io/crates/wasmparser\n[wat]: https://crates.io/crates/wat\n[wast]: https://crates.io/crates/wast\n[wasmprinter]: https://crates.io/crates/wasmprinter\n[wasm-smith]: https://crates.io/crates/wasm-smith\n[wasm-mutate]: https://crates.io/crates/wasm-mutate\n[wasm-shrink]: https://crates.io/crates/wasm-shrink\n[wit-component]: https://crates.io/crates/wit-component\n[wasm-compose]: https://crates.io/crates/wasm-compose\n[wasm-metadata]: https://crates.io/crates/wasm-metadata\n\nThe `wasm-tools` CLI is primarily intended to be a debugging aid. The various\nsubcommands all have `--help` explainer texts to describe more about their\nfunctionality as well.\n\n# Libraries\n\nAs mentioned above many of the tools of the `wasm-tools` CLI have libraries\nimplemented in this repository as well. These libraries are:\n\n* [**`wasmparser`**](crates/wasmparser) - a library to parse WebAssembly binaries\n* [**`wat`**](crates/wat) - a library to parse the WebAssembly text format\n* [**`wast`**](crates/wast) - like `wat`, except provides an AST\n* [**`wasmprinter`**](crates/wasmprinter) - prints WebAssembly binaries in their\n  string form\n* [**`wasm-mutate`**](crates/wasm-mutate) - a WebAssembly test case mutator\n* [**`wasm-shrink`**](crates/wasm-shrink) - a WebAssembly test case shrinker\n* [**`wasm-smith`**](crates/wasm-smith) - a WebAssembly test case generator\n* [**`wasm-encoder`**](crates/wasm-encoder) - a crate to generate a binary\n  WebAssembly module\n* [**`wit-parser`**](crates/wit-parser) - a crate to parse and manage `*.wit`\n  files and interfaces.\n* [**`wit-component`**](crates/wit-component) - a crate to create components\n  from core wasm modules.\n* [**`wasm-metadata`**](crates/wasm-metadata) - a crate to manipulate name and\n  producer metadata (custom sections) in a wasm module or component.\n\nIt's recommended to use the libraries directly rather than the CLI tooling when\nembedding into a separate project.\n\n# C/C++ bindings\n\nUsing the `CMakeLists.txt` in `crates/c-api`, `wasm-tools` can be used from the [`wasm-tools.h` header](crates/c-api/include/wasm-tools.h).\n\n# License\n\nThis project is licensed under the Apache 2.0 license with the LLVM exception.\nSee [LICENSE](LICENSE) for more details.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in this project by you, as defined in the Apache-2.0 license,\nshall be licensed as above, without any additional terms or conditions."
}
