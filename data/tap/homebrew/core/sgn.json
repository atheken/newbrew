{
  "name": "sgn",
  "full_name": "sgn",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Shikata ga nai (仕方がない) encoder ported into go with several improvements",
  "license": "MIT",
  "homepage": "https://github.com/EgeBalci/sgn",
  "versions": {
    "stable": "2.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/EgeBalci/sgn/archive/refs/tags/2.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "b894e4cb396a5bb118a4081db9c54938e4ca903f67a998e7de8ec2763f2fcf53"
    },
    "head": {
      "url": "https://github.com/EgeBalci/sgn.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sgn/blobs/sha256:5f5990b3ec44deda15b1feb6da75576080e00d5bfdfc9d23147c18940a09c8af",
          "sha256": "5f5990b3ec44deda15b1feb6da75576080e00d5bfdfc9d23147c18940a09c8af"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sgn/blobs/sha256:32c9256c57f43403fca7b8a9b7c868f62151456a93be910f5060eb74a49b2140",
          "sha256": "32c9256c57f43403fca7b8a9b7c868f62151456a93be910f5060eb74a49b2140"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sgn/blobs/sha256:faea6873e40ca31b5c5d825fab69f30ca7b702c32c4c932bb173654142634b69",
          "sha256": "faea6873e40ca31b5c5d825fab69f30ca7b702c32c4c932bb173654142634b69"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sgn/blobs/sha256:ae6a45a60edc4e1d155427dedfa9c4d9baa653ca53278ad0021540751aaac83b",
          "sha256": "ae6a45a60edc4e1d155427dedfa9c4d9baa653ca53278ad0021540751aaac83b"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sgn/blobs/sha256:65251c7362ce98f1aa9484aa23f67e78d6b7fb665c0117c2358ceec2009f029a",
          "sha256": "65251c7362ce98f1aa9484aa23f67e78d6b7fb665c0117c2358ceec2009f029a"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sgn/blobs/sha256:35ee722f342c3522588f1c5e3c9b5661ad7c5a44166ad3ee8283d2f8103201ac",
          "sha256": "35ee722f342c3522588f1c5e3c9b5661ad7c5a44166ad3ee8283d2f8103201ac"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sgn/blobs/sha256:392e46d698ec3b250eee575d40f727669e1de5a5e621245c916d61c72ea918ff",
          "sha256": "392e46d698ec3b250eee575d40f727669e1de5a5e621245c916d61c72ea918ff"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go",
    "keystone"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/sgn.rb",
  "ruby_source_checksum": {
    "sha256": "8497f664c4a245afa8180efd518347a44888d56f57a4b474399d07401f1eddec"
  },
  "date_added": "2022-07-13T13:52:02+00:00",
  "readme": "<p align=\"center\">\n  <img src=\"https://github.com/EgeBalci/sgn/raw/master/img/banner.png\">\n  </br>\n  <a href=\"https://github.com/EgeBalci/sgn\">\n    <img src=\"https://img.shields.io/badge/version-2.0.0-green.svg?style=flat-square\">\n  </a>\n  <a href=\"https://goreportcard.com/report/github.com/egebalci/sgn\">\n    <img src=\"https://goreportcard.com/badge/github.com/egebalci/sgn?style=flat-square\">\n  </a>\n  <a href=\"https://github.com/EgeBalci/sgn/issues\">\n    <img src=\"https://img.shields.io/github/issues/egebalci/sgn?style=flat-square&color=red\">\n  </a>\n  <a href=\"https://raw.githubusercontent.com/EgeBalci/sgn/master/LICENSE\">\n    <img src=\"https://img.shields.io/github/license/egebalci/sgn.svg?style=flat-square\">\n  </a>\n  <a href=\"https://twitter.com/egeblc\">\n    <img src=\"https://img.shields.io/badge/twitter-@egeblc-55acee.svg?style=flat-square\">\n  </a>\n</p>\n\nSGN is a polymorphic binary encoder for offensive security purposes such as generating statically undetecable binary payloads. It uses a additive feedback loop to encode given binary instructions similar to [LFSR](https://en.wikipedia.org/wiki/Linear-feedback_shift_register). This project is the reimplementation of the [original Shikata ga nai](https://github.com/rapid7/metasploit-framework/blob/master/modules/encoders/x86/shikata_ga_nai.rb) in golang with many improvements. \n\n\n## How? & Why?\nFor offensive security community, the original implementation of shikata ga nai encoder is considered to be the best shellcode encoder(until now). But over the years security researchers found several pitfalls for statically detecing the encoder(related work [FireEye article](https://www.fireeye.com/blog/threat-research/2019/10/shikata-ga-nai-encoder-still-going-strong.html)). The main motive for this project was to create a better encoder that encodes the given binary to the point it is identical with totally random data and not possible to detect the presence of a decoder. With the help of [keystone](http://www.keystone-engine.org/) assembler library following improvments are implemented.\n\n- [x] 64 bit support. `Finally properly encoded x64 shellcodes !`\n- [x] New smaller decoder stub. `LFSR key reduced to 1 byte`\n- [x] Encoded stub with pseudo random schema. `Decoder stub is also encoded with a psudo random schema`\n- [x] No visible loop condition `Stub decodes itself WITHOUT using any loop conditions !!` \n- [x] Decoder stub obfuscation. `Random garbage instruction generator added with keystone`\n- [x] Safe register option. `Non of the registers are clobbered (optional preable, may reduce polimorphism)` \n\n## Install\n\nYou can get the pre-compiled binaries [HERE](https://github.com/EgeBalci/sgn/releases). For building from source follow the steps bellow.\n\n**Dependencies:**\n\nThe only dependency for building the source is the [keystone engine](https://github.com/keystone-engine/keystone), follow [these](https://github.com/keystone-engine/keystone/blob/master/docs/COMPILE.md) instructions for installing the library. Once libkeystone is installed on the system, simply just go get it ツ\n\n```\ngo install github.com/EgeBalci/sgn@latest\n```\n\n***DOCKER INSTALL***\n\n[![Docker](http://dockeri.co/image/egee/sgn)](https://hub.docker.com/r/egee/sgn/)\n\n```\ndocker pull egee/sgn\ndocker run -it egee/sgn\n```\n\n**Usage**\n\n`-h` is pretty self explanatory use `-v` if you want to see what's going on behind the scenes `( ͡° ͜ʖ ͡°)_/¯`\n<p align=\"center\">\n  <img src=\"https://github.com/EgeBalci/sgn/raw/master/img/usage.gif\">\n</p>\n\n\n```\n       __   _ __        __                               _ \n  ___ / /  (_) /_____ _/ /____ _  ___ ____ _  ___  ___ _(_)\n (_-</ _ \\/ /  '_/ _ `/ __/ _ `/ / _ `/ _ `/ / _ \\/ _ `/ / \n/___/_//_/_/_/\\_\\\\_,_/\\__/\\_,_/  \\_, /\\_,_/ /_//_/\\_,_/_/  \n========[Author:-Ege-Balcı-]====/___/=======v2.0.0=========  \n    ┻━┻ ︵ヽ(`Д´)ﾉ︵ ┻━┻           (ノ ゜Д゜)ノ ︵ 仕方がない\n\nUsage: sgn [OPTIONS] <FILE>\n  -a int\n    \tBinary architecture (32/64) (default 32)\n  -asci\n    \tGenerates a full ASCI printable payload (takes very long time to bruteforce)\n  -badchars string\n    \tDon't use specified bad characters given in hex format (\\x00\\x01\\x02...)\n  -c int\n    \tNumber of times to encode the binary (increases overall size) (default 1)\n  -h\tPrint help\n  -max int\n    \tMaximum number of bytes for obfuscation (default 20)\n  -o string\n    \tEncoded output binary name\n  -plain-decoder\n    \tDo not encode the decoder stub\n  -safe\n    \tDo not modify and register values\n  -v\tMore verbose output\n```\n\n***Docker Usage***\n\n```\ndocker run -it -v /tmp/:/tmp/ sgn /tmp/shellcode\n```\n\n## Using As Library\nWarning !! SGN package is still under development for better performance and several improvements. Most of the functions are subject to change.\n\n```\npackage main\n\nimport (\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\n\tsgn \"github.com/egebalci/sgn/lib\"\n)\n\nfunc main() {\n\t// First open some file\n\tfile, err := ioutil.ReadFile(\"myfile.bin\")\n\tif err != nil { // check error\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\t// Create a new SGN encoder\n\tencoder := sgn.NewEncoder()\n\t// Set the proper architecture\n\tencoder.SetArchitecture(64)\n\t// Encode the binary\n\tencodedBinary, err := encoder.Encode(file)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\t// Print out the hex dump of the encoded binary\n\tfmt.Println(hex.Dump(encodedBinary))\n\n}\n```\n\n\n## Execution Flow\n\nThe following image is a basic workflow diagram for the encoder. But keep in mind that the sizes, locations and orders will change for garbage instructions, decoders and schema decoders on each iteration. \n\n<p align=\"center\">\n  <img src=\"https://github.com/EgeBalci/sgn/raw/master/img/flow.png\">\n</p>\n\nLFSR itself is pretty powerful in terms of probability space. For even more polimorphism garbage instructions are appended at the begining of the unencoded raw payload. Below image shows the the companion matrix of the characteristic polynomial of the LFSR and denoting the seed as a column vector, the state of the register in Fibonacci configuration after k steps.\n\n<p align=\"center\">\n  <img src=\"https://github.com/EgeBalci/sgn/raw/master/img/matrices.svg\">\n</p>\n\n\n## [Challenge](https://github.com/EgeBalci/sgn/wiki/Challange_Guidelines)\n\nConsidering the probability space of this encoder I personally don't think that any rule based static detection mechanism can detect the binaries that are encoded with SGN. In fact I am willing to give out the donation money for this project as a symbolic prize if anyone can write a YARA rule that can detect every encoded output. Check out [***HERE***](https://github.com/EgeBalci/sgn/wiki/Challange_Guidelines) for the guidelines and rules for claiming the donation money.\n\n[***Current Donation Amount***](https://www.blockchain.com/tr/btc/address/1615NKMjpHShh3hWHrazWybgJxpqZgz4f2)\n\n[![QR](https://github.com/EgeBalci/sgn/raw/master/img/btc_qr.png)](https://www.blockchain.com/tr/btc/address/1615NKMjpHShh3hWHrazWybgJxpqZgz4f2)\n\nIf you tried and failed please consider donating `[̲̅$̲̅(̲̅ ͡° ͜ʖ ͡°̲̅)̲̅$̲̅]`"
}
