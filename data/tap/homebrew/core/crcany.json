{
  "name": "crcany",
  "full_name": "crcany",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Compute any CRC, a bit at a time, a byte at a time, and a word at a time",
  "license": "Zlib",
  "homepage": "https://github.com/madler/crcany",
  "versions": {
    "stable": "2.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/madler/crcany/archive/v2.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "e07cf86f2d167ea628e6c773369166770512f54a34a3d5c0acd495eb947d8a1b"
    },
    "head": {
      "url": "https://github.com/madler/crcany.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/crcany/blobs/sha256:3146496202ceb4f73456d12996ad9cbdc506119617f4c5454882c3b3c7a0dcff",
          "sha256": "3146496202ceb4f73456d12996ad9cbdc506119617f4c5454882c3b3c7a0dcff"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/crcany/blobs/sha256:06926e476afee66cf7594c159afb442dde00ff967b2658d6420ad728354cf8cf",
          "sha256": "06926e476afee66cf7594c159afb442dde00ff967b2658d6420ad728354cf8cf"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/crcany/blobs/sha256:55fb14e87a929f10fabaf64463015c1cbea366ad0035199802acf5f3871b13de",
          "sha256": "55fb14e87a929f10fabaf64463015c1cbea366ad0035199802acf5f3871b13de"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/crcany/blobs/sha256:f032e8a58904a3325852630bb6749c920bf1461636eca319b2aa9d6617f5bc5d",
          "sha256": "f032e8a58904a3325852630bb6749c920bf1461636eca319b2aa9d6617f5bc5d"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/crcany/blobs/sha256:3f78920ca550faf57358c20b567af28ab3fc29955df0f3f50fac0ce6319f9ee7",
          "sha256": "3f78920ca550faf57358c20b567af28ab3fc29955df0f3f50fac0ce6319f9ee7"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/crcany/blobs/sha256:c7092bf62c6bcb2e59db55725e0cc5e7fca8135382844bdc8e8e2023d1db5b1c",
          "sha256": "c7092bf62c6bcb2e59db55725e0cc5e7fca8135382844bdc8e8e2023d1db5b1c"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/crcany/blobs/sha256:f84a1c61faf5e8fcf8e411faaa78ab2c6b3e8b0decd12745e895ed854a37775f",
          "sha256": "f84a1c61faf5e8fcf8e411faaa78ab2c6b3e8b0decd12745e895ed854a37775f"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/crcany/blobs/sha256:508e19628c74e47337d647c79a8c05831250ee2ca9c71d673960d4d0901bf19e",
          "sha256": "508e19628c74e47337d647c79a8c05831250ee2ca9c71d673960d4d0901bf19e"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/crcany/blobs/sha256:a8ef2be75d86b017a0d85c1abb309cec9bc01695c4ccf9ae9db2ce8fd2d04293",
          "sha256": "a8ef2be75d86b017a0d85c1abb309cec9bc01695c4ccf9ae9db2ce8fd2d04293"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/crcany.rb",
  "ruby_source_checksum": {
    "sha256": "71faf531dc1398b50b85fc376ae6209653026ebf9aef96253a5d4fc9203bd585"
  },
  "date_added": "2021-01-17T10:08:37+00:00",
  "readme": "Synopsis\n--------\n\n_crcany_ is a suite of programs that generalize CRC calculations, and that\ngenerate C code to compute and combine CRCs efficiently. Any CRC can be\ncomputed given the set of parameters that describe it. Those parameters are\nprovided in the form as used by Greg Cook's catalog of over one-hundred CRCs,\nfound at https://reveng.sourceforge.io/crc-catalogue/all.htm . That set of\nparameters were first defined by Ross Williams in his excellent tutorial on\nCRCs, which can be found at http://zlib.net/crc_v3.txt .\n\n_crcany_ can compute a CRC in three different ways. First, computing a bit at a\ntime, as would be done in a hardware shift-register implementation. Second,\ncomputing the CRC a byte at a time, first using the bit-at-a-time algorithm to\ncreate a table of the 256 CRCs of all byte values. Third, using the byte-wise\ntable to generate another _n-1_ tables, where _n_ is the number of bytes in the\nword, to enable computing a CRC a word at a time. The word-wise approach has\ntwo flavors, one for little-endian machines, and one for big-endian machines.\n\n_crcany_ can combine CRCs efficiently. Given only the CRCs of two sequences of\nbytes, and the length of the second sequence, the CRC of the two sequences\nconcatenated can be computed efficiently.\n\n_crcany_ can generate C code in .c and .h files for one or a series of CRC\ndefinitions. By default, code is generated for the machine being run on (i.e.\nwith respect to the lengths of the integer types and their endianess). Code can\noptionally be generated for 32-bit or 64-bit words, and for big-endian or\nlittle-endian. Code can be generated for any CRC whose width is less than or\nequal to the maximum integer size.\n\nThe bit-wise calculation can be done on CRCs up to twice the word length, e.g.\n128 bits on machines with 64-bit integers. The byte and word-wise calculations\ncan be done on CRCs up to the word size, e.g. up to 64-bit CRCs using 64-bit\nintegers. CRC code can be generated for CRCs up to 64 bits in length.\n\nMotivation\n----------\n\nProvide once and for all a definitive reference for how to compute and combine\nany CRC with any of bit, byte, or word-at-a-time algorithms, on any big or\nlittle-endian architecture.\n\nInstallation\n------------\n\nThis will compile the crcany, crctest, crcall, crcadd, and mincrc executables:\n\n    make\n\nTest\n----\n\nTest the calculation of CRCs and the generation of CRC code using the list of\nall catalogued CRCs:\n\n    make test\n\nA Brief Tour of the Components\n------------------------\n\nCallable routines:\n- model.[ch] -- define a particular CRC, read a CRC description from a file\n- crc.[ch] -- compute a CRC using the given model, combine CRCs\n- crcdbl.[ch] -- compute a CRC longer than 64 bits, up to 128 bits in length\n- crcgen.[ch] -- generate C code to efficiently calculate a CRC\n\nExecutables:\n- crcany.c -- compute a CRC by name (from the catalogue) on the provided data\n- crcall.c -- generate C code and test code for all provided CRC definitions\n- crcadd.c -- generate C code only for all provided CRC definitions\n- crctest.c -- test the code generated by crcall\n- mincrc.c -- maximally abbreviate the provided CRC definitions\n- getcrcs -- scrape Greg Cook's site for all of the CRC definitions\n\nInformation:\n- README.md -- this file\n- Makefile -- generate and test code for all CRCs in allcrcs-abbrev.txt\n- allcrcs.txt -- all of the CRC definitions, one per line, from Greg Cook's catalogue\n- allcrcs-abbrev.txt -- allcrcs.txt abbreviated\n- allcrcs/ -- directory with a copy of Greg Cook's catalogue\n\nLicense\n-------\n\nThis code is under the zlib license, permitting free commercial use."
}
