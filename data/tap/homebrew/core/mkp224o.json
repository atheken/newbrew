{
  "name": "mkp224o",
  "full_name": "mkp224o",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Vanity address generator for tor onion v3 (ed25519) hidden services",
  "license": "CC0-1.0",
  "homepage": "https://github.com/cathugger/mkp224o",
  "versions": {
    "stable": "1.6.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/cathugger/mkp224o/releases/download/v1.6.1/mkp224o-1.6.1-src.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "772d4b429c08f04eca3bc45cd3f6ce57b71fa912fa6c061cd39f73bf2fec8e70"
    },
    "head": {
      "url": "https://github.com/cathugger/mkp224o.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/mkp224o/blobs/sha256:168d1f78395804cde88bc0ad7c087c18ed1b8d3d986efd4f9ab77cb7cefe944d",
          "sha256": "168d1f78395804cde88bc0ad7c087c18ed1b8d3d986efd4f9ab77cb7cefe944d"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/mkp224o/blobs/sha256:5fd449e1ed8792a81732494b7362c75507fa96567b5b1248c76522193762a3d0",
          "sha256": "5fd449e1ed8792a81732494b7362c75507fa96567b5b1248c76522193762a3d0"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/mkp224o/blobs/sha256:77672818a99d4b11411863bd952acf9472b1b2b89415839c41600c8c7bae3cfd",
          "sha256": "77672818a99d4b11411863bd952acf9472b1b2b89415839c41600c8c7bae3cfd"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/mkp224o/blobs/sha256:2385ca2636a695be5689171e96f562355d3055386166855549bafb512d07cb56",
          "sha256": "2385ca2636a695be5689171e96f562355d3055386166855549bafb512d07cb56"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/mkp224o/blobs/sha256:3cef4d9204063c22271e2faca7e67b7b603ba5c2e4270431933d6715b7048dd7",
          "sha256": "3cef4d9204063c22271e2faca7e67b7b603ba5c2e4270431933d6715b7048dd7"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/mkp224o/blobs/sha256:a3766fdff5c7010b3995300f688a0545961a19bec4137aad2c5304d3f849da85",
          "sha256": "a3766fdff5c7010b3995300f688a0545961a19bec4137aad2c5304d3f849da85"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/mkp224o/blobs/sha256:4133de045c807282326009a66f7bc1d5e56be43d75cd2be4201ac450391add06",
          "sha256": "4133de045c807282326009a66f7bc1d5e56be43d75cd2be4201ac450391add06"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mkp224o/blobs/sha256:13c559ae3f988d2a848f7932862b22a03820ce0f2d1409d67c96c41762a74b16",
          "sha256": "13c559ae3f988d2a848f7932862b22a03820ce0f2d1409d67c96c41762a74b16"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "libsodium"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/mkp224o.rb",
  "ruby_source_checksum": {
    "sha256": "3dc0ea9371cc763f2da1fce9a70dcebe44a6634e5ef69c5cdbded838dfc35bcf"
  },
  "date_added": "2022-07-15T22:35:24+00:00",
  "readme": "## mkp224o - vanity address generator for ed25519 onion services\n\nThis tool generates vanity ed25519 ([hidden service version 3][v3],\nformely known as proposal 224) onion addresses.\n\n### Requirements for building\n\n* C99 compatible compiler (gcc and clang should work)\n* libsodium (including headers)\n* GNU make\n* GNU autoconf (to generate configure script, needed only if not using release tarball)\n* UNIX-like platform (currently tested in Linux and OpenBSD, but should\n  also build under cygwin and msys2).\n\nFor debian-like linux distros, this should be enough to prepare for building:\n\n```bash\napt install gcc libc6-dev libsodium-dev make autoconf\n```\n\n### Building\n\nRun `./autogen.sh` to generate a configure script, if there isn't one already.\n\nRun `./configure` to generate a makefile.\nOn \\*BSD platforms you may need to specify extra include/library paths:\n`./configure CPPFLAGS=\"-I/usr/local/include\" LDFLAGS=\"-L/usr/local/lib\"`.\n\nOn AMD64 platforms, you probably also want to pass something like\n`--enable-amd64-51-30k` to the configure script invocation for faster key generation;\nrun `./configure --help` to see all available options.\n\nFinally, `make` to start building (`gmake` in \\*BSD platforms).\n\n### Usage\n\nmkp224o needs one or more filters to work.\nYou may specify them as command line arguments,\neg `./mkp224o test`, or load them from file with `-f` switch.\n\nIt makes directories with secret/public keys and hostnames\nfor each discovered service. By default, the working directory is the current\ndirectory, but that can be overridden with `-d` switch.\n\nUse `-s` switch to enable printing of statistics, which may be useful\nwhen benchmarking different ed25519 implementations on your machine.\n\nUse `-h` switch to obtain all available options.\n\nI highly recommend reading [OPTIMISATION.txt][OPTIMISATION] for\nperformance-related tips.\n\n### FAQ and other useful info\n\n* How do I generate address?\n\n  Once compiled, run it like `./mkp224o neko`, and it will try creating\n  keys for onions starting with \"neko\" in this example; use `./mkp224o\n  -d nekokeys neko` to not litter current directory and put all\n  discovered keys in directory named \"nekokeys\".\n\n* How do I make tor use generated keys?\n\n  Copy key folder (though technically only `hs_ed25519_secret_key` is required)\n  to where you want your service keys to reside:\n\n  ```bash\n  sudo cp -r neko54as6d54....onion /var/lib/tor/nekosvc\n  ```\n\n  You may need to adjust ownership and permissions:\n\n  ```bash\n  sudo chown -R tor: /var/lib/tor/nekosvc\n  sudo chmod -R u+rwX,og-rwx /var/lib/tor/nekosvc\n  ```\n\n  Then edit `torrc` and add new service with that folder.\\\n  After reload/restart tor should pick it up.\n\n* How to generate addresses with `0-1` and `8-9` digits?\n\n  Onion addresses use base32 encoding which does not include `0,1,8,9`\n  numbers.\\\n  So no, that's not possible to generate these, and mkp224o tries to\n  detect invalid filters containing them early on.\n\n* How long is it going to take?\n\n  Because of probablistic nature of brute force key generation, and\n  varience of hardware it's going to run on, it's hard to make promisses\n  about how long it's going to take, especially when the most of users\n  want just a few keys.\\\n  See [this issue][#27] for very valuable discussion about this.\\\n  If your machine is powerful enough, 6 character prefix shouldn't take\n  more than few tens of minutes, if using batch mode (read\n  [OPTIMISATION.txt][OPTIMISATION]) 7 characters can take hours\n  to days.\\\n  No promisses though, it depends on pure luck.\n\n* Will this work with onionbalance?\n\n  It appears that onionbalance supports loading usual\n  `hs_ed25519_secret_key` key so it should work.\n\n* Is there a docker image?\n\n  Yes, if you do not wish to compile mkp224o yourself, you can use\n  the `ghcr.io/cathugger/mkp224o` image like so:\n\n  ```bash\n  docker run --rm -it -v $PWD:/keys ghcr.io/cathugger/mkp224o:master -d /keys neko\n  ```\n\n### Acknowledgements & Legal\n\nTo the extent possible under law, the author(s) have dedicated all\ncopyright and related and neighboring rights to this software to the\npublic domain worldwide. This software is distributed without any\nwarranty.\nYou should have received a copy of the CC0 Public Domain Dedication\nalong with this software. If not, see [CC0][].\n\n* `keccak.c` is based on [Keccak-more-compact.c][keccak.c]\n* `ed25519/{ref10,amd64-51-30k,amd64-64-24k}` are adopted from\n  [SUPERCOP][]\n* `ed25519/ed25519-donna` adopted from [ed25519-donna][]\n* Idea used in `worker_fast()` is stolen from [horse25519][]\n* base64 routines and initial YAML processing work contributed by\n  Alexander Khristoforov (heios at protonmail dot com)\n* Passphrase-based generation code and idea used in `worker_batch()`\n  contributed by [foobar2019][]\n\n[v3]: https://gitweb.torproject.org/torspec.git/plain/rend-spec-v3.txt\n[OPTIMISATION]: ./OPTIMISATION.txt\n[#27]: https://github.com/cathugger/mkp224o/issues/27\n[keccak.c]: https://github.com/XKCP/XKCP/blob/master/Standalone/CompactFIPS202/C/Keccak-more-compact.c\n[CC0]: https://creativecommons.org/publicdomain/zero/1.0/\n[SUPERCOP]: https://bench.cr.yp.to/supercop.html\n[ed25519-donna]: https://github.com/floodyberry/ed25519-donna\n[horse25519]: https://github.com/Yawning/horse25519\n[foobar2019]: https://github.com/foobar2019"
}
