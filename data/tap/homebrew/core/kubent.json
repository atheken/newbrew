{
  "name": "kubent",
  "full_name": "kubent",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Easily check your clusters for use of deprecated APIs",
  "license": "MIT",
  "homepage": "https://github.com/doitintl/kube-no-trouble",
  "versions": {
    "stable": "0.7.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/doitintl/kube-no-trouble.git",
      "tag": "0.7.0",
      "revision": "d1bb4e5fd6550b533b2013671aa8419d923ee042",
      "checksum": null
    },
    "head": {
      "url": "https://github.com/doitintl/kube-no-trouble.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kubent/blobs/sha256:b253c116737aa11ffe96165128063e0cfd361ebb4b83cecadd4e58cb4a67971a",
          "sha256": "b253c116737aa11ffe96165128063e0cfd361ebb4b83cecadd4e58cb4a67971a"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kubent/blobs/sha256:5cddd6fee8427d67e9261d1cc5cac91245c2564bc20375a7b53a2106b610e921",
          "sha256": "5cddd6fee8427d67e9261d1cc5cac91245c2564bc20375a7b53a2106b610e921"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kubent/blobs/sha256:24cc7e7c89661ff0f22472460e3f00af8943c823f36df5efd070e24dc5cafaf2",
          "sha256": "24cc7e7c89661ff0f22472460e3f00af8943c823f36df5efd070e24dc5cafaf2"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kubent/blobs/sha256:e43bb284c4c03fc17bb739a5cf85e5961cfe490e025044b4777fa383921840e8",
          "sha256": "e43bb284c4c03fc17bb739a5cf85e5961cfe490e025044b4777fa383921840e8"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kubent/blobs/sha256:51299269284628a9ea395e29c88a464ec4721da7148e1b269dbea1c18356b557",
          "sha256": "51299269284628a9ea395e29c88a464ec4721da7148e1b269dbea1c18356b557"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kubent/blobs/sha256:c00f175140366cdacd8f3595c6470ed0b967fda98a09ffa0eb51988a4a2a9331",
          "sha256": "c00f175140366cdacd8f3595c6470ed0b967fda98a09ffa0eb51988a4a2a9331"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kubent/blobs/sha256:ee4f92a7de119b79f18b88aed128a6ca80847a6f1f0837b69c992469ec40b43b",
          "sha256": "ee4f92a7de119b79f18b88aed128a6ca80847a6f1f0837b69c992469ec40b43b"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/kubent.rb",
  "ruby_source_checksum": {
    "sha256": "8687d641a4b933eedb28ec1a42210d5a487b76883ec9ce5682709a715314c961"
  },
  "date_added": "2023-01-06T18:24:54+00:00",
  "readme": "![Kubent (Kube-No-Trouble) logo](./docs/imgs/kubent-logo.svg)\n\n__*Easily check your clusters for use of deprecated APIs*__\n\nKubernetes 1.16 is slowly starting to roll out, not only across various managed\nKubernetes offerings, and with that come a lot of API deprecations[1][1].\n\n*Kube No Trouble (__`kubent`__)* is a simple tool to check whether you're using\nany of these API versions in your cluster and therefore should upgrade your\nworkloads first, before upgrading your Kubernetes cluster.\n\nThis tool will be able to detect deprecated APIs depending on how you deploy\nyour resources, as we need the original manifest to be stored somewhere. In\nparticular following tools are supported:\n- **file**    - local manifests in YAML or JSON\n- **kubectl** - uses the `kubectl.kubernetes.io/last-applied-configuration` annotation\n- **Helm v3** - uses Helm manifests stored as Secrets or ConfigMaps directly in individual namespaces\n\n[1]: https://kubernetes.io/blog/2019/07/18/api-deprecations-in-1-16/\n\n**Additional resources:**\n- Blog post on K8s deprecated APIs and introduction of kubent: [Kubernetes: Deprecated APIs aka Introducing Kube-No-Trouble][2]\n\n[2]: https://stepan.wtf/kubernetes-deprecated-apis-introducing-kubent/\n\n## Install\n\nRun the following command in your terminal to install `kubent` using a shell script:\n\n```sh\nsh -c \"$(curl -sSL https://git.io/install-kubent)\"\n```\n\n*(The script will download latest version and unpack to `/usr/local/bin`).*\n\n### Manual Installation\n\nYou can download the\n[latest release](https://github.com/doitintl/kube-no-trouble/releases/latest)\nfor your platform and unpack manually.\n\n### Third-Party Installation\n\nPlease note that third-party installation methods are maintained by the community.\nThe packages may not always be up-to-date with the latest releases of `kubent`.\n\n#### Homebrew\n\n`kubent` is available as a [formula](https://formulae.brew.sh/formula/kubent)\non [Homebrew](https://brew.sh/). If you're using macOS or Linux, you can run\nthe following command to install `kubent`:\n\n```sh\nbrew install kubent\n```\n\n## Usage\n\nConfigure Kubectl's current context to point to your cluster, `kubent` will\nlook for the kube `.config` file in standard locations (you can point it to custom\nlocation using the `-k` switch).\n\n**`kubent`** will collect resources from your cluster and report on found issues.\n\n*Please note that you need to have sufficient permissions to read Secrets in the\ncluster in order to use `Helm*` collectors.*\n\n```sh\n$./kubent\n6:25PM INF >>> Kube No Trouble `kubent` <<<\n6:25PM INF Initializing collectors and retrieving data\n6:25PM INF Retrieved 103 resources from collector name=Cluster\n6:25PM INF Retrieved 0 resources from collector name=\"Helm v3\"\n6:25PM INF Loaded ruleset name=deprecated-1-16.rego\n6:25PM INF Loaded ruleset name=deprecated-1-20.rego\n__________________________________________________________________________________________\n>>> 1.16 Deprecated APIs <<<\n------------------------------------------------------------------------------------------\nKIND         NAMESPACE     NAME                    API_VERSION\nDeployment   default       nginx-deployment-old    apps/v1beta1\nDeployment   kube-system   event-exporter-v0.2.5   apps/v1beta1\nDeployment   kube-system   k8s-snapshots           extensions/v1beta1\nDeployment   kube-system   kube-dns                extensions/v1beta1\n__________________________________________________________________________________________\n>>> 1.20 Deprecated APIs <<<\n------------------------------------------------------------------------------------------\nKIND      NAMESPACE   NAME           API_VERSION\nIngress   default     test-ingress   extensions/v1beta1\n```\n\n### Arguments\n\nYou can list all the configuration options available using `--help` switch:\n```sh\n$./kubent -h\nUsage of ./kubent:\n  -A, --additional-annotation strings   additional annotations that should be checked to determine the last applied config\n  -a, --additional-kind strings         additional kinds of resources to report in Kind.version.group.com format\n  -c, --cluster                         enable Cluster collector (default true)\n  -x, --context string                  kubeconfig context\n  -e, --exit-error                      exit with non-zero code when issues are found\n  -f, --filename strings                manifests to check, use - for stdin\n      --helm3                           enable Helm v3 collector (default true)\n  -k, --kubeconfig string               path to the kubeconfig file\n  -l, --log-level string                set log level (trace, debug, info, warn, error, fatal, panic, disabled) (default \"info\")\n  -o, --output string                   output format - [text|json|csv] (default \"text\")\n  -O, --output-file string        output file, use - for stdout (default \"-\")\n  -t, --target-version string           target K8s version in SemVer format (autodetected by default)\n  -v, --version                         prints the version of kubent and exits\n```\n- *`--additional-annotation`*\n  Check additional annotations for the last applied configuration. This can be useful if a resource was applied\n  with a tool other than kubectl. The flag can be used multiple times.\n\n- *`-a, --additional-kind`*\n  Tells `kubent` to flag additional custom resources when found in the specified version. The flag can be used multiple\n  times. The expected format is full *Kind.version.group.com* form - e.g. `-a ManagedCertificate.v1.networking.gke.io`.\n\n- *`-x, --context`*\n  Select context from kubeconfig file (`current-context` from the file is used by default).\n\n- *`k, --kubeconfig`*\n  Path to kubeconfig file to use. This takes precedence over `KUBECONFIG` environment variable, which is also supported\n  and can contain multiple paths, and default `~.kube/config`.\n\n- *`-t, --target-version`*\n  `Kubent` will try to detect K8S cluster version and display only relevant findings. This flag allows to override this\n  version for scenarios like use in CI with the file collector only, when detection from an actual cluster is not possible.\n  Expected format is `major.minor[.patch]`, e.g. `1.16` or `1.16.3`.\n\n### Docker Image\n\nWe also publish official container image, which can be found at:\n`ghcr.io/doitintl/kube-no-trouble:latest` (also available tagged with each\nindividual release version).\n\nTo run locally, you'll need to provide credentials, e.g. by sharing your\nkubectl config:\n\n```sh\n$ docker run -it --rm \\\n    -v \"${HOME}/.kube/config:/.kubeconfig\" \\\n    ghcr.io/doitintl/kube-no-trouble:latest \\\n    -k /.kubeconfig\n```\n\nYou can use `kubectl run` to run inside a K8S cluster, as a one-off. In that\ncase the credentials will be picked up via the pod's service account from the\nenvironment, but you'll want to grant relevant permissions first (see\n[docs/k8s-sa-and-role-example.yaml](docs/k8s-sa-and-role-example.yaml)):\n\n```sh\n$ kubectl run kubent --restart=Never --rm -i --tty \\\n    --image ghcr.io/doitintl/kube-no-trouble:latest \\\n    --overrides='{\"spec\": {\"serviceAccount\": \"kubent\"}}'\n```\n\n### Use in CI\n\n#### Exit codes\n\n`kubent` will by default return `0` exit code if the program succeeds, even if\nit finds deprecated resources, and non-zero exit code if there is an error\nduring runtime. Because all info output goes to stderr, it's easy to check in\nshell if any issues were found:\n\n```shell\ntest -z \"$(kubent)\"                 # if stdout output is empty, means no issues were found\n                                    # equivalent to [ -z \"$(kubent)\" ]\n```\n\nIt's actually better so split this into two steps, in order to differentiate\nbetween runtime error and found issues:\n\n```shell\nif ! OUTPUT=\"$(kubent)\"; then       # check for non-zero return code first\n  echo \"kubent failed to run!\"\nelif [ -n \"${OUTPUT}\" ]; then       # check for empty stdout\n  echo \"Deprecated resources found\"\nfi\n```\n\nYou can also use `--exit-error` (`-e`) flag, which will make kubent to exit\nwith non-zero return code (`200`) in case any issues are found.\n\nAlternatively, use the json output and smth. like `jq` to check if the result is\nempty:\n\n```\nkubent -o json | jq -e 'length == 0'\n```\n\n#### Scanning all files in directory\n\nIf you want to scan all files in a given directory, you can use the following\nshell snippet:\n\n```shell\nFILES=($(ls *.yaml)); kubent ${FILES[@]/#/-f} --helm3=false -c=false\n```\n\n## Development\n\nThe simplest way to build `kubent` is:\n\n```sh\n# Clone the repository\ngit clone https://github.com/doitintl/kube-no-trouble.git\ncd kube-no-trouble/\n# Build\ngo build -o bin/kubent cmd/kubent/main.go\n```\n\nOtherwise there's `Makefile`\n```sh\n$ make\nmake\nall                            Cean, build and pack\nhelp                           Prints list of tasks\nbuild                          Build binary\ngenerate                       Go generate\nrelease-artifacts              Create release artifacts\nclean                          Clean build artifacts\n```\n\n### Commit messages\n\nWe enforce simple version of [Conventional Commits][cc] in the form:\n\n```\n<type>: <summary>\n\n[optional body]\n\n[optional footer(s)]\n```\n\nWhere type is one of:\n- **build** - Affects build and/or build system\n- **chore** - Other non-functional changes\n- **ci** - Affects CI (e.g. GitHub actions)\n- **dep** - Dependency update\n- **docs** - Documentation only change\n- **feat** - A new feature\n- **fix** - A bug fix\n- **ref** - Code refactoring without functionality change\n- **style** - Formatting changes\n- **test** - Adding/changing tests\n\n[cc]: https://www.conventionalcommits.org/\n\nUse imperative, present tense (Add, not ~Added~), capitalize first letter of\nsummary, no dot at the and. The body and footer are optional. Relevant GitHub\nissues should be referenced in the footer in the form `Fixes #123, fixes #456`.\n\n### Changelog\n\nChangelog is generated automatically based on merged PRs using\n[changelog-gen][chlg-gen]. Template can be found in `scripts/changelog.tmpl`.\n\nPRs are categorized based on their labels, into following sections:\n- Announcements - `announcement` label\n- Breaking Changes - `breaking-change` label\n- Features - `feature` label\n- Changes - `change` label\n- Fixes - `fix` label\n- Internal/Other - everything else\n\nPR can be excluded from changelog with `no-release-note` label. PR title is\nused by default, however, the copy can be customized by including following\nblock in the PR body:\n\n~~~\n```release-note\nThis is an example release note!\n```\n~~~\n\n[chlg-gen]: https://github.com/paultyng/changelog-gen\n\n## Issues and Contributions\n\nPlease open any issues and/or PRs against github.com/doitintl/kube-no-trouble repository.\n\nPlease ensure any contributions are signed with a valid gpg key. We use this to validate that you have committed this and no one else. You can learn how to create a GPG key [here](https://docs.github.com/en/authentication/managing-commit-signature-verification/generating-a-new-gpg-key).\n\nFeedback and contributions are always welcome!"
}
