{
  "name": "demumble",
  "full_name": "demumble",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "More powerful symbol demangler (a la c++filt)",
  "license": "Apache-2.0",
  "homepage": "https://github.com/nico/demumble",
  "versions": {
    "stable": "1.2.2",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/nico/demumble/archive/refs/tags/v1.2.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "663e5d205c83cc36a257bb168d3ecbc2a49693088c0451b2405d25646651c63e"
    },
    "head": {
      "url": "https://github.com/nico/demumble.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/demumble/blobs/sha256:7bfa72834af03942bb6eacc60ec52006997dd1fbdc68351398a78ffe046e19d8",
          "sha256": "7bfa72834af03942bb6eacc60ec52006997dd1fbdc68351398a78ffe046e19d8"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/demumble/blobs/sha256:ff3563d728d6ad3ba851fe1a9e95e599f0fb835ea6e046b30e329537f19aaedc",
          "sha256": "ff3563d728d6ad3ba851fe1a9e95e599f0fb835ea6e046b30e329537f19aaedc"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/demumble/blobs/sha256:b43c1b4396d845e300f9f5c7746fb6a393ea8a3189c822ba96c35cb1ddd7786b",
          "sha256": "b43c1b4396d845e300f9f5c7746fb6a393ea8a3189c822ba96c35cb1ddd7786b"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/demumble/blobs/sha256:e98aeeb71355a2125a7e5c7d91c3926e2889864242ca65cf961b2de49900d55d",
          "sha256": "e98aeeb71355a2125a7e5c7d91c3926e2889864242ca65cf961b2de49900d55d"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/demumble/blobs/sha256:3677ec9a895d02cd6694710152625d98f903720e891774d292a5ea454d11bbc0",
          "sha256": "3677ec9a895d02cd6694710152625d98f903720e891774d292a5ea454d11bbc0"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/demumble/blobs/sha256:f7dc50c58c1188bd07b90c0ecb57031f24ad3b463f41befd78ea5b5cfd1577e0",
          "sha256": "f7dc50c58c1188bd07b90c0ecb57031f24ad3b463f41befd78ea5b5cfd1577e0"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/demumble/blobs/sha256:c79b46404de20da59fb13b225006147666199f6a03b56e43820d20ae818dafff",
          "sha256": "c79b46404de20da59fb13b225006147666199f6a03b56e43820d20ae818dafff"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/demumble/blobs/sha256:f843e7116cf05d2a7dff4fb8351d0609e8120d49aad84e810f44cc85d6b62811",
          "sha256": "f843e7116cf05d2a7dff4fb8351d0609e8120d49aad84e810f44cc85d6b62811"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/demumble/blobs/sha256:addf214742de13338bbbc8f19e8f41593bc66bcacb6870f9add57a9e00c0eca9",
          "sha256": "addf214742de13338bbbc8f19e8f41593bc66bcacb6870f9add57a9e00c0eca9"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/demumble.rb",
  "ruby_source_checksum": {
    "sha256": "f033f7842531920402f93a1cde47c29c20af56030b3d491c9853d43f6c3426ee"
  },
  "date_added": "2021-06-30T20:08:24+00:00",
  "readme": "# demumble\n\n`demumble` demangles both Itanium and Visual Studio symbols. It runs on\nboth POSIX and Windows.\n\n    $ demumble _Z4funcPci\n    func(char*, int)\n    $ demumble '?Fx_i@@YAHP6AHH@Z@Z'\n    int __cdecl Fx_i(int (__cdecl *)(int))\n\nIt can also demangle Rust and D symbols.\n\n## Download\n\nThere are prebuilt x64 binaries for Linux, Mac (10.9+), and Windows on the\n[releases page](https://github.com/nico/demumble/releases).\n\n## But why\n\nIt has several nice features that c++filt lacks (and lacks many of c++filt's\nfeatures I never use).\n\nSmart about underscores: C++ symbols have an additional leading underscore on\nmacOS. `operator new` is mangled as `_Znw` on Linux but `__Znw` on Mac. macOS's\nc++filt automatically strips one leading underscore, but Linux's c++filt\ndoesn't. So if you want to demangle a Linux symbol on macOS, you need to pass\n`-n` to tell it to not strip the underscore, and if you want to demangle an OS\nX symbol on Linux you likewise need to pass `-_`. demumble just does the right\nthing:\n\n    $ c++filt _Znw\n    _Znw\n    $ c++filt __Znw\n    operator new\n    $ demumble _Znw\n    operator new\n    $ demumble __Znw\n    operator new\n\nSmart about filtering: Both c++filt and demumble can work as a stdin filter.\ndemumble only demangles function symbols (which never look like other words),\nwhile c++filt on macOS defaults to demangling type names too, which are likely\nto look like regular words. demumble does demangle types when they're passed\nas args without requiring the `--types` switch that c++filt needs on Linux:\n\n    # on macOS:\n    $ echo 'I like Pi and _Znw' | c++filt\n    I like int* and _Znw\n    $ echo 'I like Pi and _Znw' | demumble\n    I like Pi and operator new\n    $ c++filt Pi\n    int*\n    $ demumble Pi\n    int*\n    # on Linux:\n    $ c++filt Pi\n    Pi\n\nCross-platform: demumble runs on Windows. demumble can demangle Windows-style\nsymbols (also when running on non-Windows).\n\n    $ demumble '??2@YAPEAX_K@Z'\n    void * __cdecl operator new(unsigned __int64)\n    $ c++filt '??2@YAPEAX_K@Z'\n    ??2@YAPEAX_K@Z\n\nOptionally print _only_ demangled things: For example, print demangled names of\nall functions defined in a bitcode file:\n\n    $ grep '^define' bitcode-win.ll  | demumble -m | head -1\n    unsigned int __cdecl v8::RoundUpToPowerOfTwo32(unsigned int)\n\nOptionally print both mangled and demangled names:\n\n    $ echo _ZN3fooC1Ev _ZN3fooC2Ev | ./demumble -b\n    \"foo::foo()\" (_ZN3fooC1Ev) \"foo::foo()\" (_ZN3fooC2Ev)\n\n## Build instructions\n\nUse cmake to build: `cmake -G Ninja . && ninja`\n\nRun tests after building: `python demumble_test.py`\n\n`cxa_demangle.cpp` needs more C++11 than Visual Studio 2013 supports, so\nto build on Windows you need to use Visual Studion 2015 or use clang-cl\nas C++ compiler like so:\n\n    cmake -G Ninja -DCMAKE_CXX_COMPILER=path/to/llvm-build/bin/clang-cl.exe"
}
