{
  "name": "sbjson",
  "full_name": "sbjson",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "JSON CLI parser & reformatter based on SBJson v5",
  "license": "BSD-3-Clause",
  "homepage": "https://github.com/SBJson/SBJson",
  "versions": {
    "stable": "5.0.3",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/SBJson/SBJson/archive/v5.0.3.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "9a03f6643b42a82300f4aefcfb6baf46cc2c519f1bb7db3028f338d6d1c56f1b"
    },
    "head": {
      "url": "https://github.com/SBJson/SBJson.git",
      "branch": "trunk"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sbjson/blobs/sha256:a9198287e6912393936ae4881bc483e6afcce1f9ae9665b561ae4edcbf7ef72e",
          "sha256": "a9198287e6912393936ae4881bc483e6afcce1f9ae9665b561ae4edcbf7ef72e"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sbjson/blobs/sha256:3fbf857117011107c8e7d3c8e82ab89468abddaa74d29b4696cba6338e89b454",
          "sha256": "3fbf857117011107c8e7d3c8e82ab89468abddaa74d29b4696cba6338e89b454"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sbjson/blobs/sha256:d3cb04de93bf5460c41623c296b5cd81884379d277afc874a64b0ff1cc34ac6a",
          "sha256": "d3cb04de93bf5460c41623c296b5cd81884379d277afc874a64b0ff1cc34ac6a"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sbjson/blobs/sha256:7bd3ad976f084a295edade17403886612453e3b0da624c22a4e1d45496fad5b7",
          "sha256": "7bd3ad976f084a295edade17403886612453e3b0da624c22a4e1d45496fad5b7"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sbjson/blobs/sha256:b75a6403eff1226c4e348d9766c20694d43388c9ee9afa00fe4f637ab3dd7a9c",
          "sha256": "b75a6403eff1226c4e348d9766c20694d43388c9ee9afa00fe4f637ab3dd7a9c"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sbjson/blobs/sha256:695ced76533bfe9a4e893ffe22ea58402dbd93bd180e2ca4b4a96004d5c60581",
          "sha256": "695ced76533bfe9a4e893ffe22ea58402dbd93bd180e2ca4b4a96004d5c60581"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sbjson/blobs/sha256:e703b87ff205bfec1cfc09e9c200ebca6be643df15ec99b85c590110a4885fb2",
          "sha256": "e703b87ff205bfec1cfc09e9c200ebca6be643df15ec99b85c590110a4885fb2"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sbjson/blobs/sha256:8b145bcfef84733c00d94e57cbe0eac56a7981654cda6068ff219264353b25bd",
          "sha256": "8b145bcfef84733c00d94e57cbe0eac56a7981654cda6068ff219264353b25bd"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sbjson/blobs/sha256:649463e051c03596a72400a04b95f993222f5ba6d42a879241291660fef8605c",
          "sha256": "649463e051c03596a72400a04b95f993222f5ba6d42a879241291660fef8605c"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [
    {
      "name": "xcode",
      "cask": null,
      "download": null,
      "version": null,
      "contexts": [
        "build"
      ],
      "specs": [
        "stable",
        "head"
      ]
    },
    {
      "name": "macos",
      "cask": null,
      "download": null,
      "version": null,
      "contexts": [],
      "specs": [
        "stable",
        "head"
      ]
    }
  ],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/sbjson.rb",
  "ruby_source_checksum": {
    "sha256": "9d7be2b88b731af7ec33838bfa92fc8dcfd4691a7cf1a932bbe125d0cfe02161"
  },
  "date_added": "2016-11-16T10:29:00+00:00",
  "readme": "# SBJson 5\n\nChunk-based JSON parsing and generation in Objective-C.\n\n[![CircleCI](https://circleci.com/gh/SBJson/SBJson.svg?style=svg)](https://circleci.com/gh/SBJson/SBJson)\n[![Project Status: Inactive - The project has reached a stable, usable state but is no longer being actively developed; support/maintenance will be provided as time allows.](http://www.repostatus.org/badges/0.1.0/inactive.svg)](http://www.repostatus.org/#inactive)\n[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage)\n\n# Overview\n\nSBJson's number one feature is stream/chunk-based operation. Feed the parser one or\nmore chunks of UTF8-encoded data and it will call a block you provide with each\nroot-level document or array. Or, optionally, for each top-level entry in each\nroot-level array.\n\nWith this you can reduce the apparent latency for each\ndownload/parse cycle of documents over a slow connection. You can start\nparsing *and return chunks of the parsed document* before the full document\nhas downloaded. You can also parse massive documents bit by bit so you\ndon't have to keep them all in memory.\n\nSBJson maps JSON types to Objective-C types in the following way:\n\n| JSON Type | Objective-C Type                |\n|-----------|---------------------------------|\n| null      | NSNull                          |\n| string    | NSString                        |\n| array     | NSMutableArray                  |\n| object    | NSMutableDictionary             |\n| true      | -[NSNumber numberWithBool: YES] |\n| false     | -[NSNumber numberWithBool: NO]  |\n| number    | NSNumber                        |\n\n- Booleans roundtrip properly even though Objective-C doesn't have a\n  dedicated class for boolean values.\n- Integers use either `long long` or `unsigned long long` if they fit,\n  to avoid rounding errors.  For all other numbers we use the `double`\n  type, with all the potential rounding errors that entails.\n\n## \"Plain\" Chunk Based Parsing\n\nFirst define a simple block & an error handler. (These are just minimal\nexamples. You should strive to do something better that makes sense in your\napplication!)\n\n```objc\nSBJson5ValueBlock block = ^(id v, BOOL *stop) {\n    BOOL isArray = [v isKindOfClass:[NSArray class]];\n    NSLog(@\"Found: %@\", isArray ? @\"Array\" : @\"Object\");\n};\n\nSBJson5ErrorBlock eh = ^(NSError* err) {\n    NSLog(@\"OOPS: %@\", err);\n    exit(1);\n};\n```\n\nThen create a parser and add data to it:\n\n```objc\nid parser = [SBJson5Parser parserWithBlock:block\n                              errorHandler:eh];\n\nid data = [@\"[true,\" dataWithEncoding:NSUTF8StringEncoding];\n[parser parse:data]; // returns SBJson5ParserWaitingForData\n\n// block is not called yet...\n\n// ok, now we add another value and close the array\n\ndata = [@\"false]\" dataWithEncoding:NSUTF8StringEncoding];\n[parser parse:data]; // returns SBJson5ParserComplete\n\n// the above -parse: method calls your block before returning.\n```\n\nAlright! Now let's look at something slightly more interesting.\n\n## Handling multiple documents\n\nThis is useful for something like Twitter's feed, which gives you one JSON\ndocument per line. Here is an example of parsing many consequtive JSON\ndocuments, where your block will be called once for each document:\n\n```objc\nid parser = [SBJson5Parser multiRootParserWithBlock:block\n                                       errorHandler:eh];\n\n// Note that this input contains multiple top-level JSON documents\nid data = [@\"[]{}\" dataWithEncoding:NSUTF8StringEncoding];\n[parser parse:data];\n[parser parse:data];\n```\n\nThe above example will print:\n\n```\nFound: Array\nFound: Object\nFound: Array\nFound: Object\n```\n\n## Unwrapping a gigantic top-level array\n\nOften you won't have control over the input you're parsing, so can't use a\nmultiRootParser. But, all is not lost: if you are parsing a long array you can\nget the same effect by using an unwrapRootArrayParser:\n\n```objc\nid parser = [SBJson5Parser unwrapRootArrayParserWithBlock:block\n                                             errorHandler:eh];\n\n// Note that this input contains A SINGLE top-level document\nid data = [@\"[[],{},[],{}]\" dataWithEncoding:NSUTF8StringEncoding];\n[parser parse:data];\n```\n\n## Other features\n\n* For safety there is a max nesting level for all input. This defaults to 32,\n  but is configurable.\n* The writer can sort dictionary keys so output is consistent across writes.\n* The writer can create human-readable output, with newlines and indents.\n* You can install SBJson v3, v4 and v5 side-by-side in the same application.\n  (This is possible because all classes & public symbols contains the major\n  version number.)\n\n## A word of warning\n\nStream based parsing does mean that you lose some of the correctness\nverification you would have with a parser that considered the entire input\nbefore returning an answer. It is technically possible to have some parts of a\ndocument returned *as if they were correct* but then encounter an error in a\nlater part of the document. You should keep this in mind when considering\nwhether it would suit your application.\n\n# American Fuzzy Lop\n\nI've run [AFL][] on the sbjson binary for over 24 hours, with no crashes\nfound. (I cannot reproduce the hangs reported when attempting to parse them\nmanually.)\n\n[AFL]: http://lcamtuf.coredump.cx/afl/\n\n```\n                       american fuzzy lop 2.35b (sbjson)\n\n┌─ process timing ─────────────────────────────────────┬─ overall results ─────┐\n│        run time : 1 days, 0 hrs, 45 min, 26 sec      │  cycles done : 2      │\n│   last new path : 0 days, 0 hrs, 5 min, 24 sec       │  total paths : 555    │\n│ last uniq crash : none seen yet                      │ uniq crashes : 0      │\n│  last uniq hang : 0 days, 2 hrs, 11 min, 43 sec      │   uniq hangs : 19     │\n├─ cycle progress ────────────────────┬─ map coverage ─┴───────────────────────┤\n│  now processing : 250* (45.05%)     │    map density : 0.70% / 1.77%         │\n│ paths timed out : 0 (0.00%)         │ count coverage : 3.40 bits/tuple       │\n├─ stage progress ────────────────────┼─ findings in depth ────────────────────┤\n│  now trying : auto extras (over)    │ favored paths : 99 (17.84%)            │\n│ stage execs : 603/35.6k (1.70%)     │  new edges on : 116 (20.90%)           │\n│ total execs : 20.4M                 │ total crashes : 0 (0 unique)           │\n│  exec speed : 481.9/sec             │   total hangs : 44 (19 unique)         │\n├─ fuzzing strategy yields ───────────┴───────────────┬─ path geometry ────────┤\n│   bit flips : 320/900k, 58/900k, 5/899k             │    levels : 8          │\n│  byte flips : 0/112k, 4/112k, 3/112k                │   pending : 385        │\n│ arithmetics : 66/6.24M, 0/412k, 0/35                │  pend fav : 1          │\n│  known ints : 5/544k, 0/3.08M, 0/4.93M              │ own finds : 554        │\n│  dictionary : 0/0, 0/0, 29/1.83M                    │  imported : n/a        │\n│       havoc : 64/300k, 0/0                          │ stability : 100.00%    │\n│        trim : 45.19%/56.5k, 0.00%                   ├────────────────────────┘\n^C────────────────────────────────────────────────────┘             [cpu: 74%]\n\n+++ Testing aborted by user +++\n[+] We're done here. Have a nice day!\n```\n\n# API Documentation\n\nPlease see the [API Documentation](http://cocoadocs.org/docsets/SBJson) for\nmore details.\n\n\n# Installation\n\n## CocoaPods\n\nThe preferred way to use SBJson is by using\n[CocoaPods](http://cocoapods.org/?q=sbjson). In your Podfile use:\n\n    pod 'SBJson', '~> 5.0.0'\n\n## Carthage\n\nSBJson is compatible with _Carthage_. Follow the [Getting Started Guide for iOS](https://github.com/Carthage/Carthage#if-youre-building-for-ios-tvos-or-watchos).\n\n\tgithub \"SBJson/SBJson\" == 5.0.2\n\n## Bundle the source files\n\nAn alternative that I no longer recommend is to copy all the source files (the\ncontents of the `Classes` folder) into your own Xcode project.\n\n# Examples\n\n* https://github.com/SBJson/ChunkedDelivery - a toy example showing how one can\n  use `NSURLSessionDataDelegate` to do chunked delivery.\n* https://github.com/SBJson/DisplayPretty - a very brief example using SBJson 4\n  to reflow JSON on OS X.\n\n# Support\n\n* Review (or create) StackOverflow questions [tagged with\n  `SBJson`](http://stackoverflow.com/questions/tagged/sbjson) if you\n  have questions about how to use the library.\n* Use the [issue tracker](http://github.com/SBJson/SBJson/issues) if you\n  have found a bug.\n* I regret I'm only able to support the current major release.\n\n## Philosophy on backwards compatibility\n\nSBJson practice [Semantic Versioning](https://semver.org/), which\nmeans we do not break the API in major releases. If something requires\na backwards-incompatible change, we release a new major version.\n(Hence why a library of less than 1k lines has more major versions\nthan Emacs.)\n\nI also try support a gradual migration from one major version to the\nother by allowing the last three major versions to co-exist in the\nsame app without conflicts. The way to do this is putting the major\nversion number in all the library's symbols and file names. So if v6\never comes out, the `SBJson5Parser` class would become\n`SBJson6Parser`, etc.\n\n# License\n\nBSD. See [LICENSE](LICENSE) for details."
}
