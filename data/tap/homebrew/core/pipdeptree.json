{
  "name": "pipdeptree",
  "full_name": "pipdeptree",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "CLI to display dependency tree of the installed Python packages",
  "license": "MIT",
  "homepage": "https://github.com/tox-dev/pipdeptree",
  "versions": {
    "stable": "2.12.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://files.pythonhosted.org/packages/53/4f/986058cb64d7b9697242e2456ed8109086339a91f72447ac39fd94823c6f/pipdeptree-2.12.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "d58b34eca0092d56cba92961cee6edebef2beba56c88dcc11e411c753c155b86"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pipdeptree/blobs/sha256:6dc4a125b4345a7e74f88f77279380ef1d58f2bd3d3b829b3134605fbb8cf4c1",
          "sha256": "6dc4a125b4345a7e74f88f77279380ef1d58f2bd3d3b829b3134605fbb8cf4c1"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pipdeptree/blobs/sha256:9648ea612e56f44d42e1a9c83471b3c80d2fed0f449fe583b2f5e02ee245a2f9",
          "sha256": "9648ea612e56f44d42e1a9c83471b3c80d2fed0f449fe583b2f5e02ee245a2f9"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pipdeptree/blobs/sha256:362a82d9554f33e2f9591b5eb5c347104b37db17769df70f78a066cccd3fc4cd",
          "sha256": "362a82d9554f33e2f9591b5eb5c347104b37db17769df70f78a066cccd3fc4cd"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pipdeptree/blobs/sha256:1d9371589bce16ba0b2bdeee5f3870b4e626439b505c09ecbcfbefe7565a7977",
          "sha256": "1d9371589bce16ba0b2bdeee5f3870b4e626439b505c09ecbcfbefe7565a7977"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pipdeptree/blobs/sha256:c7c4818c0becac2a65217120f816f4a4924858c69209d5bf4fd3bc51fd152b79",
          "sha256": "c7c4818c0becac2a65217120f816f4a4924858c69209d5bf4fd3bc51fd152b79"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pipdeptree/blobs/sha256:e26c876cfab9dbf5b78de11b5327a5d758b7a19c289dbc95014479876c6b36eb",
          "sha256": "e26c876cfab9dbf5b78de11b5327a5d758b7a19c289dbc95014479876c6b36eb"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pipdeptree/blobs/sha256:f627f35269bd339301a7745c3c50b8262807ebd7e0680f33c7e2da26521993dc",
          "sha256": "f627f35269bd339301a7745c3c50b8262807ebd7e0680f33c7e2da26521993dc"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "python@3.11"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/pipdeptree.rb",
  "ruby_source_checksum": {
    "sha256": "2d43bbf91ca2121b9484a0df42228faec017e3a8aeae3be9f0125d78a2bce757"
  },
  "date_added": "2023-01-22T06:09:27+00:00",
  "readme": "# pipdeptree\n\n[![PyPI](https://img.shields.io/pypi/v/pipdeptree)](https://pypi.org/project/pipdeptree/)\n[![Supported Python\nversions](https://img.shields.io/pypi/pyversions/pipdeptree.svg)](https://pypi.org/project/pipdeptree/)\n[![Downloads](https://static.pepy.tech/badge/pipdeptree/month)](https://pepy.tech/project/pipdeptree)\n[![check](https://github.com/tox-dev/pipdeptree/actions/workflows/check.yml/badge.svg)](https://github.com/tox-dev/pipdeptree/actions/workflows/check.yml)\n[![pre-commit.ci status](https://results.pre-commit.ci/badge/github/tox-dev/pipdeptree/main.svg)](https://results.pre-commit.ci/latest/github/tox-dev/pipdeptree/main)\n\n`pipdeptree` is a command line utility for displaying the installed python packages in form of a dependency tree. It\nworks for packages installed globally on a machine as well as in a virtualenv. Since `pip freeze` shows all dependencies\nas a flat list, finding out which are the top level packages and which packages do they depend on requires some effort.\nIt\\'s also tedious to resolve conflicting dependencies that could have been installed because older version of `pip`\ndidn\\'t have true dependency resolution[^1]. `pipdeptree` can help here by identifying conflicting dependencies\ninstalled in the environment.\n\nTo some extent, `pipdeptree` is inspired by the `lein deps :tree` command of [Leiningen](http://leiningen.org/).\n\n## Installation\n\n```bash\npip install pipdeptree\n```\n\n## Running in virtualenvs\n\n`New in ver. 2.0.0`\n\nIf you want to run pipdeptree in the context of a particular virtualenv, you can specify the `--python` option. Note\nthat this capability has been recently added in version `2.0.0`.\n\nAlternatively, you may also install pipdeptree inside the virtualenv and then run it from there.\n\n## Usage and examples\n\nTo give you a brief idea, here is the output of `pipdeptree` compared with `pip freeze`:\n\n```bash\n$ pip freeze\nFlask==0.10.1\nitsdangerous==0.24\nJinja2==2.11.2\n-e git+git@github.com:naiquevin/lookupy.git@cdbe30c160e1c29802df75e145ea4ad903c05386#egg=Lookupy\nMarkupSafe==0.22\npipdeptree @ file:///private/tmp/pipdeptree-2.0.0b1-py3-none-any.whl\nWerkzeug==0.11.2\n```\n\nAnd now see what `pipdeptree` outputs,\n\n```bash\n$ pipdeptree\nWarning!!! Possibly conflicting dependencies found:\n* Jinja2==2.11.2\n - MarkupSafe [required: >=0.23, installed: 0.22]\n------------------------------------------------------------------------\nFlask==0.10.1\n  - itsdangerous [required: >=0.21, installed: 0.24]\n  - Jinja2 [required: >=2.4, installed: 2.11.2]\n    - MarkupSafe [required: >=0.23, installed: 0.22]\n  - Werkzeug [required: >=0.7, installed: 0.11.2]\nLookupy==0.1\npipdeptree==2.0.0b1\n  - pip [required: >=6.0.0, installed: 20.1.1]\nsetuptools==47.1.1\nwheel==0.34.2\n```\n\n## Is it possible to find out why a particular package is installed?\n\n`New in ver. 0.5.0`\n\nYes, there\\'s a `--reverse` (or simply `-r`) flag for this. To find out which packages depend on a particular\npackage(s), it can be combined with `--packages` option as follows:\n\n```bash\n$ pipdeptree --reverse --packages itsdangerous,MarkupSafe\nWarning!!! Possibly conflicting dependencies found:\n* Jinja2==2.11.2\n - MarkupSafe [required: >=0.23, installed: 0.22]\n------------------------------------------------------------------------\nitsdangerous==0.24\n  - Flask==0.10.1 [requires: itsdangerous>=0.21]\nMarkupSafe==0.22\n  - Jinja2==2.11.2 [requires: MarkupSafe>=0.23]\n    - Flask==0.10.1 [requires: Jinja2>=2.4]\n```\n\n## What\\'s with the warning about conflicting dependencies?\n\nAs seen in the above output, `pipdeptree` by default warns about possible conflicting dependencies. Any package that\\'s\nspecified as a dependency of multiple packages with different versions is considered as a conflicting dependency.\nConflicting dependencies are possible if older version of pip\\<=20.2\n([without the new resolver](https://github.com/pypa/pip/issues/988)[^2]) was ever used to install dependencies at some\npoint. The warning is printed to stderr instead of stdout and it can be completely silenced by specifying the\n`-w silence` or `--warn silence` option. On the other hand, it can be made mode strict with `--warn fail`, in which case\nthe command will not only print the warnings to stderr but also exit with a non-zero status code. This is useful if you\nwant to fit this tool into your CI pipeline.\n\n**Note**: The `--warn` option is added in version `0.6.0`. If you are using an older version, use `--nowarn` flag to\nsilence the warnings.\n\n## Warnings about circular dependencies\n\nIn case any of the packages have circular dependencies (eg. package A depends on package B and package B depends on\npackage A), then `pipdeptree` will print warnings about that as well.\n\n```bash\n$ pipdeptree --exclude pip,pipdeptree,setuptools,wheel\nWarning!!! Cyclic dependencies found:\n- CircularDependencyA => CircularDependencyB => CircularDependencyA\n- CircularDependencyB => CircularDependencyA => CircularDependencyB\n------------------------------------------------------------------------\nwsgiref==0.1.2\nargparse==1.2.1\n```\n\nSimilar to the warnings about conflicting dependencies, these too are printed to stderr and can be controlled using the\n`--warn` option.\n\nIn the above example, you can also see `--exclude` option which is the opposite of `--packages` ie. these packages will\nbe excluded from the output.\n\n## Using pipdeptree to write requirements.txt file\n\nIf you wish to track only top level packages in your `requirements.txt` file, it\\'s possible by grep-ing[^3]. only the\ntop-level lines from the output,\n\n```bash\n$ pipdeptree --warn silence | grep -E '^\\w+'\nFlask==0.10.1\ngnureadline==8.0.0\nLookupy==0.1\npipdeptree==2.0.0b1\nsetuptools==47.1.1\nwheel==0.34.2\n```\n\nThere is a problem here though - The output doesn\\'t mention anything about `Lookupy` being installed as an _editable_\npackage (refer to the output of `pip freeze` above) and information about its source is lost. To fix this, `pipdeptree`\nmust be run with a `-f` or `--freeze` flag.\n\n```bash\n$ pipdeptree -f --warn silence | grep -E '^[a-zA-Z0-9\\-]+'\nFlask==0.10.1\ngnureadline==8.0.0\n-e git+git@github.com:naiquevin/lookupy.git@cdbe30c160e1c29802df75e145ea4ad903c05386#egg=Lookupy\npipdeptree @ file:///private/tmp/pipdeptree-2.0.0b1-py3-none-any.whl\nsetuptools==47.1.1\nwheel==0.34.2\n\n$ pipdeptree -f --warn silence | grep -E '^[a-zA-Z0-9\\-]+' > requirements.txt\n```\n\nThe freeze flag will not prefix child dependencies with hyphens, so you could dump the entire output of `pipdeptree -f`\nto the requirements.txt file thus making it human-friendly (due to indentations) as well as pip-friendly.\n\n```bash\n$ pipdeptree -f | tee locked-requirements.txt\nFlask==0.10.1\n  itsdangerous==0.24\n  Jinja2==2.11.2\n    MarkupSafe==0.23\n  Werkzeug==0.11.2\ngnureadline==8.0.0\n-e git+git@github.com:naiquevin/lookupy.git@cdbe30c160e1c29802df75e145ea4ad903c05386#egg=Lookupy\npipdeptree @ file:///private/tmp/pipdeptree-2.0.0b1-py3-none-any.whl\n  pip==20.1.1\nsetuptools==47.1.1\nwheel==0.34.2\n```\n\nOn confirming that there are no conflicting dependencies, you can even treat this as a \\\"lock file\\\" where all packages,\nincluding the transient dependencies will be pinned to their currently installed versions. Note that the\n`locked-requirements.txt` file could end up with duplicate entries. Although `pip install` wouldn\\'t complain about\nthat, you can avoid duplicate lines (at the cost of losing indentation) as follows,\n\n```bash\n$ pipdeptree -f | sed 's/ //g' | sort -u > locked-requirements.txt\n```\n\n## Using pipdeptree with external tools\n\n`New in ver. 0.5.0`\n\nIt\\'s also possible to have `pipdeptree` output json representation of the dependency tree so that it may be used as\ninput to other external tools.\n\n```bash\n$ pipdeptree --json\n```\n\nNote that `--json` will output a flat list of all packages with their immediate dependencies. This is not very useful in\nitself. To obtain nested json, use `--json-tree`\n\n`New in ver. 0.11.0`\n\n```bash\n$ pipdeptree --json-tree\n```\n\n## Visualizing the dependency graph\n\nThe dependency graph can also be visualized using [GraphViz](http://www.graphviz.org/):\n\n```bash\n$ pipdeptree --graph-output dot > dependencies.dot\n$ pipdeptree --graph-output pdf > dependencies.pdf\n$ pipdeptree --graph-output png > dependencies.png\n$ pipdeptree --graph-output svg > dependencies.svg\n```\n\nNote that `graphviz` is an optional dependency ie. required only if you want to use `--graph-output`. If the version of\n`graphviz` installed in the env is older than 0.18.1, then a warning will be displayed about upgrading `graphviz`.\nSupport for older versions of graphviz will be dropped soon.\n\nSince version `2.0.0b1`, `--package` and `--reverse` flags are supported for all output formats ie. text, json,\njson-tree and graph.\n\nIn earlier versions, `--json`, `--json-tree` and `--graph-output` options override `--package` and `--reverse`.\n\n## Usage\n\n```bash\nusage: pipdeptree.py [-h] [-v] [-f] [--python PYTHON] [-a] [-l] [-u]\n                     [-w [{silence,suppress,fail}]] [-r] [-p PACKAGES]\n                     [-e PACKAGES] [-j] [--json-tree]\n                     [--graph-output OUTPUT_FORMAT]\n\nDependency tree of the installed python packages\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --version         show program's version number and exit\n  -f, --freeze          Print names so as to write freeze files\n  --python PYTHON       Python to use to look for packages in it (default:\n                        where installed)\n  -a, --all             list all deps at top level\n  -l, --local-only      If in a virtualenv that has global access do not show\n                        globally installed packages\n  -u, --user-only       Only show installations in the user site dir\n  -w [{silence,suppress,fail}], --warn [{silence,suppress,fail}]\n                        Warning control. \"suppress\" will show warnings but\n                        return 0 whether or not they are present. \"silence\"\n                        will not show warnings at all and always return 0.\n                        \"fail\" will show warnings and return 1 if any are\n                        present. The default is \"suppress\".\n  -r, --reverse         Shows the dependency tree in the reverse fashion ie.\n                        the sub-dependencies are listed with the list of\n                        packages that need them under them.\n  -p PACKAGES, --packages PACKAGES\n                        Comma separated list of select packages to show in the\n                        output. Wildcards are supported, like 'somepackage.*'.\n                        If set, --all will be ignored.\n  -e PACKAGES, --exclude PACKAGES\n                        Comma separated list of select packages to exclude\n                        from the output. Wildcards are supported, like\n                        'somepackage.*'. If set, --all will be ignored.\n  -j, --json            Display dependency tree as json. This will yield \"raw\"\n                        output that may be used by external tools. This option\n                        overrides all other options.\n  --json-tree           Display dependency tree as json which is nested the\n                        same way as the plain text output printed by default.\n                        This option overrides all other options (except\n                        --json).\n  --graph-output OUTPUT_FORMAT\n                        Print a dependency graph in the specified output\n                        format. Available are all formats supported by\n                        GraphViz, e.g.: dot, jpeg, pdf, png, svg\n```\n\n## Known issues\n\n1.  `pipdeptree` relies on the internal API of `pip`. I fully understand that it\\'s a bad idea but it mostly works! On\n    rare occasions, it breaks when a new version of `pip` is out with backward incompatible changes in internal API. So\n    beware if you are using this tool in environments in which `pip` version is unpinned, specially automation or CD/CI\n    pipelines.\n\n## Limitations & Alternatives\n\n`pipdeptree` merely looks at the installed packages in the current environment using pip, constructs the tree, then\noutputs it in the specified format. If you want to generate the dependency tree without installing the packages, then\nyou need a dependency resolver. You might want to check alternatives such as\n[pipgrip](https://github.com/ddelange/pipgrip) or [poetry](https://github.com/python-poetry/poetry).\n\n## License\n\nMIT (See [LICENSE](./LICENSE))\n\n## Footnotes\n\n[^1]:\n    pip version 20.3 has been released in Nov 2020 with the dependency resolver\n    \\<<https://blog.python.org/2020/11/pip-20-3-release-new-resolver.html>\\>\\_\n\n[^2]:\n    pip version 20.3 has been released in Nov 2020 with the dependency resolver\n    \\<<https://blog.python.org/2020/11/pip-20-3-release-new-resolver.html>\\>\\_\n\n[^3]:\n    If you are on windows (powershell) you can run `pipdeptree --warn silence | Select-String -Pattern '^\\w+'` instead\n    of grep"
}
