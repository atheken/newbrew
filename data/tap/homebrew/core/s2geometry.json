{
  "name": "s2geometry",
  "full_name": "s2geometry",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Computational geometry and spatial indexing on the sphere",
  "license": "Apache-2.0",
  "homepage": "https://github.com/google/s2geometry",
  "versions": {
    "stable": "0.10.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/google/s2geometry/archive/v0.10.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "1c17b04f1ea20ed09a67a83151ddd5d8529716f509dde49a8190618d70532a3d"
    }
  },
  "revision": 4,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/s2geometry/blobs/sha256:7c3d433e915ffd03e92c73b1d3be5e1cbf127041c6cedb761ea266831a9d0d57",
          "sha256": "7c3d433e915ffd03e92c73b1d3be5e1cbf127041c6cedb761ea266831a9d0d57"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/s2geometry/blobs/sha256:f5017d82e3624b783074ffc704819fb3c278ccce7b4f7749cba5f18c80de01d1",
          "sha256": "f5017d82e3624b783074ffc704819fb3c278ccce7b4f7749cba5f18c80de01d1"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/s2geometry/blobs/sha256:3b4b5686c10ebddf04b5faa31520c8f80f91e0457596cad877b8ca123b5b2411",
          "sha256": "3b4b5686c10ebddf04b5faa31520c8f80f91e0457596cad877b8ca123b5b2411"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/s2geometry/blobs/sha256:c8521cc65e3e8de4ecd1080a7e6186f03e90696bdd09176effc21ef5af1cc4d2",
          "sha256": "c8521cc65e3e8de4ecd1080a7e6186f03e90696bdd09176effc21ef5af1cc4d2"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/s2geometry/blobs/sha256:4a166d13c69aa0089127fd0c4b9a49f11007f85437649f4a0466c75113af0c79",
          "sha256": "4a166d13c69aa0089127fd0c4b9a49f11007f85437649f4a0466c75113af0c79"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/s2geometry/blobs/sha256:ec151db9a713cf396de417583f4e2c72e77a200852d0bad3dfc76dedfa54baed",
          "sha256": "ec151db9a713cf396de417583f4e2c72e77a200852d0bad3dfc76dedfa54baed"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/s2geometry/blobs/sha256:6e929ca8b220797e1dac8396b1da10dac728f022d421072e43ef76e94583f73c",
          "sha256": "6e929ca8b220797e1dac8396b1da10dac728f022d421072e43ef76e94583f73c"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [
    "abseil",
    "glog",
    "openssl@3"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/s2geometry.rb",
  "ruby_source_checksum": {
    "sha256": "7822bfd67ab05021b1dda5ebcfacb434c972e24f62cb1e0b40ec43a98013913c"
  },
  "date_added": "2019-03-22T13:35:23+01:00",
  "readme": "# S2 Geometry Library\n\n## Overview\n\nThis is a package for manipulating geometric shapes. Unlike many geometry\nlibraries, S2 is primarily designed to work with _spherical geometry_, i.e.,\nshapes drawn on a sphere rather than on a planar 2D map. This makes it\nespecially suitable for working with geographic data.\n\nIf you want to learn more about the library, start by reading the\n[overview](http://s2geometry.io/about/overview) and [quick start\ndocument](http://s2geometry.io/devguide/cpp/quickstart), then read the\nintroduction to the [basic types](http://s2geometry.io/devguide/basic_types).\n\nS2 documentation can be found on [s2geometry.io](http://s2geometry.io).\n\n## API/ABI Stability\n\nNote that all [releases](https://github.com/google/s2geometry/releases) are\nversion 0.x, so there are\n[no API or ABI stability guarantees](https://semver.org/#spec-item-4).\nStarting with 1.0 we will adhere to [SemVer](https://semver.org/).\n\nThe Python API is particularly unstable, and it is planned that the SWIGged\nAPI will be replaced by a pybind11 version with more Pythonic names and more\ncomplete functionality.\n\n## Requirements for End Users\n\n* [CMake](http://www.cmake.org/)\n* A C++ compiler with C++14 support, such as [g++ >= 5](https://gcc.gnu.org/)\n* [Abseil](https://github.com/abseil/abseil-cpp) (standard library extensions)\n* [OpenSSL](https://github.com/openssl/openssl) (for its bignum library)\n* [googletest testing framework >= 1.10](https://github.com/google/googletest)\n  (to build tests and example programs, optional)\n\nOn Ubuntu, all of these other than abseil can be installed via apt-get:\n\n```\nsudo apt-get install cmake googletest libssl-dev\n```\n\nOtherwise, you may need to install some from source.\n\nCurrently, Abseil must always be installed from source.  See the use of\n`-DCMAKE_PREFIX_PATH` in the [build instructions below](#building).\nThis is likely to change.\n\nOn macOS, use [MacPorts](http://www.macports.org/) or\n[Homebrew](http://brew.sh/).  For MacPorts:\n\n```\nsudo port install cmake openssl\n```\n\nDo not install `gtest` from MacPorts; instead download [release\n1.10.0](https://github.com/google/googletest/releases/tag/release-1.10.0), unpack,\nand substitute\n\n```\ncmake -DGOOGLETEST_ROOT=/...absolute path to.../googletest-release-1.10.0 ..\n```\n\nin the build instructions below.\n\nThorough testing has only been done on Ubuntu 14.04.3 and macOS 10.12.\n\n## Build and Install\n\nYou may either download the source as a ZIP archive, or [clone the git\nrepository](https://help.github.com/articles/cloning-a-repository/).\n\n### Via ZIP archive\n\nDownload [ZIP file](https://github.com/google/s2geometry/archive/master.zip)\n\n```\ncd [parent of directory where you want to put S2]\nunzip [path to ZIP file]/s2geometry-master.zip\ncd s2geometry-master\n```\n\n### Via `git clone`\n\n```\ncd [parent of directory where you want to put S2]\ngit clone https://github.com/google/s2geometry.git\ncd s2geometry\n```\n\n### Building\n\nFirst, [install Abseil](https://github.com/abseil/abseil-cpp/blob/master/CMake/README.md#traditional-cmake-set-up).\nIt must be configured with `-DCMAKE_POSITION_INDEPENDENT_CODE=ON`.\ns2geometry must be configured to use the same C++ version that\nabseil uses.  The easiest way to achieve this is to pass\n`-DCMAKE_CXX_STANDARD=14` (or `-DCMAKE_CXX_STANDARD=17`) to `cmake`\nwhen compiling both abseil and s2geometry.\n\nFrom the appropriate directory depending on how you got the source:\n\n```\nmkdir build\ncd build\n# You can omit -DGOOGLETEST_ROOT to skip tests; see above for macOS.\n# Use the same CMAKE_CXX_STANDARD value that was used with absl.\ncmake -DGOOGLETEST_ROOT=/usr/src/googletest -DCMAKE_PREFIX_PATH=/path/to/absl/install -DCMAKE_CXX_STANDARD=14 ..\nmake -j $(nproc)\nmake test ARGS=\"-j$(nproc)\"  # If GOOGLETEST_ROOT specified above.\nsudo make install\n```\n\nOn macOS, `sysctl -n hw.logicalcpu` is the equivalent of `nproc`.\n\nDisable building of shared libraries with `-DBUILD_SHARED_LIBS=OFF`.\n\nEnable the python interface with `-DWITH_PYTHON=ON`.\n\nIf OpenSSL is installed in a non-standard location set `OPENSSL_ROOT_DIR`\nbefore running configure, for example on macOS:\n```\nOPENSSL_ROOT_DIR=/opt/homebrew/Cellar/openssl@3/3.1.0 cmake -DCMAKE_PREFIX_PATH=/opt/homebrew -DCMAKE_CXX_STANDARD=17\n```\n\n## Installing\n\nFrom `build` subdirectory:\n\n```\nmake install\n```\n\nPrefix it with `sudo` if needed:\n\n```\nsudo make install\n```\n\n_NOTE_: There is not `uninstall` target but `install_manifest.txt` may be helpfull.\n\nAll files will be installed at location specified in `CMAKE_INSTALL_PREFIX` variable.\n\nSeveral suffix variables used for some file groups:\n\nVariable | Default | Description\n-------- | ------- | -----------\n`CMAKE_INSTALL_INCLUDEDIR` | `include` | For header files\n`CMAKE_INSTALL_BINDIR`     | `bin`     | For executables and `*.dll` files on `DLL`-based platforms\n`CMAKE_INSTALL_LIBDIR`     | `lib`     | For library files (`*.so`, `*.a`, `*.lib` etc)\n\nIf needed set this variables on command line as `cmake` arguments with `-D` prefix or edit from `build` subdirectory:\n\n```\nmake edit_cache\n```\n\nFor more info read: [The CMake Cache](https://cmake.org/cmake/help/latest/guide/user-interaction/index.html#the-cmake-cache).\n\n## Python\n\nIf you want the Python interface, you need to run cmake using\n`-DWITH_PYTHON=ON`. You will also need to install the following dependencies:\n\n* [SWIG 4](https://github.com/swig/swig) (for Python support, optional)\n* python3-dev (for Python support, optional)\n\nwhich can be installed via\n\n```\nsudo apt-get install swig python3-dev\n```\n\nor on macOS:\n\n```\nsudo port install swig\n```\nVersion 4.0 is required, but it should be easy to make it work 3.0 or probably\neven 2.0.\n\nPython 3 is required.\n\n### Creating wheels\nFirst, make a virtual environment and install `cmake_build_extension` and `wheel`\ninto it:\n```\npython3 -m venv venv\nsource venv/bin/activate\npip install cmake_build_extension wheel\n```\n\nThen build the wheel:\n```\npython setup.py bdist_wheel\n```\n\nThe resulting wheel will be in the `dist` directory.\n\n> If OpenSSL is in a non-standard location make sure to set `OPENSSL_ROOT_DIR` \n> when calling `setup.py`, see above for more information.\n\n## Other S2 implementations\n\n* [Go](https://github.com/golang/geo) (Approximately 40% complete.)\n* [Java](https://github.com/google/s2-geometry-library-java)\n* [Kotlin](https://github.com/Enovea/s2-geometry-kotlin) (Complete except binary serialization)\n\n## Disclaimer\n\nThis is not an official Google product."
}
