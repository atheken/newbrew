{
  "name": "tag",
  "full_name": "tag",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Manipulate and query tags on macOS files",
  "license": "MIT",
  "homepage": "https://github.com/jdberry/tag/",
  "versions": {
    "stable": "0.10",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/jdberry/tag/archive/v0.10.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "5ab057d3e3f0dbb5c3be3970ffd90f69af4cb6201c18c1cbaa23ef367e5b071e"
    },
    "head": {
      "url": "https://github.com/jdberry/tag.git",
      "branch": "master"
    }
  },
  "revision": 1,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tag/blobs/sha256:f02aa65b8800efb9bc93089aded8bff111549d41f28e7ba223b02a1240d5c7b2",
          "sha256": "f02aa65b8800efb9bc93089aded8bff111549d41f28e7ba223b02a1240d5c7b2"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tag/blobs/sha256:87582cbaf5cadbc19c6d8c2c9ea6793d3116a119d7de6b18b7b5a6d898b4ffd4",
          "sha256": "87582cbaf5cadbc19c6d8c2c9ea6793d3116a119d7de6b18b7b5a6d898b4ffd4"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tag/blobs/sha256:68b99acc16647610b02c286aae5b302c7c2128164817d9eb197d2d5f9f51ca72",
          "sha256": "68b99acc16647610b02c286aae5b302c7c2128164817d9eb197d2d5f9f51ca72"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tag/blobs/sha256:b8b8096c01415421b0b68db1e01003d7ce635db093f5f00120dd133055f782d3",
          "sha256": "b8b8096c01415421b0b68db1e01003d7ce635db093f5f00120dd133055f782d3"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tag/blobs/sha256:4b70ddf8fa1ead9e8bffdd2d12194301be5c2be66ea3a355b62eee2836d5c0bc",
          "sha256": "4b70ddf8fa1ead9e8bffdd2d12194301be5c2be66ea3a355b62eee2836d5c0bc"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tag/blobs/sha256:a63e067af22cda164f890108f610bfecd4bc3b2759fd1dd473dac59d1654a156",
          "sha256": "a63e067af22cda164f890108f610bfecd4bc3b2759fd1dd473dac59d1654a156"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tag/blobs/sha256:e1572ae47d558d60983f7c1cbe9ae42a5c7f2dcb950762ab6c721e81351f5657",
          "sha256": "e1572ae47d558d60983f7c1cbe9ae42a5c7f2dcb950762ab6c721e81351f5657"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tag/blobs/sha256:ee5dbe68476b6ae900b92486f3dc3c7a9755296c1fee54a75cd64c7d6af66763",
          "sha256": "ee5dbe68476b6ae900b92486f3dc3c7a9755296c1fee54a75cd64c7d6af66763"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tag/blobs/sha256:5801c9fac7b1a4bad52f02fd8a09b64050ebc52515bd96115153c7049bd4619f",
          "sha256": "5801c9fac7b1a4bad52f02fd8a09b64050ebc52515bd96115153c7049bd4619f"
        },
        "sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tag/blobs/sha256:5711ce58bd5b224252f1869f84f937c6bca0775bf4c86a6a1168418c1218dc98",
          "sha256": "5711ce58bd5b224252f1869f84f937c6bca0775bf4c86a6a1168418c1218dc98"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [
    {
      "name": "macos",
      "cask": null,
      "download": null,
      "version": null,
      "contexts": [],
      "specs": [
        "stable",
        "head"
      ]
    }
  ],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/tag.rb",
  "ruby_source_checksum": {
    "sha256": "a9a21788a554eeb3b1d1f9972c34b52c2495d9796c8b90f1427222d3df9415c0"
  },
  "date_added": "2013-11-06T15:26:59+00:00",
  "readme": "tag\n===\n**tag** is a command line tool to manipulate tags on Mac OS X files (10.9 Mavericks and above), and to query for files with those tags. **tag** can use the file system's built-in metadata search functionality to rapidly find all files that have been tagged with a given set of tags.\n\nUsage\n---\n\n### Synopsis\n\n\ttag - A tool for manipulating and querying file tags.\n\t  usage:\n\t\ttag -a | --add <tags> <path>...     Add tags to file\n\t\ttag -r | --remove <tags> <path>...  Remove tags from file\n\t\ttag -s | --set <tags> <path>...     Set tags on file\n\t\ttag -m | --match <tags> <path>...   Display files with matching tags\n\t\ttag -f | --find <tags> <path>...    Find all files with tags, limited to paths if present\n\t\ttag -l | --list <path>...           List the tags on file\n\t\ttag -u | --usage <tags> <path>...   Display tags used, with usage counts\n\t  <tags> is a comma-separated list of tag names; use * to match/find any tag.\n\t  additional options:\n\t\t\t-v | --version      Display version\n\t\t\t-h | --help         Display this help\n\t\t\t-A | --all          Display invisible files while enumerating\n\t\t\t-e | --enter        Enter/enumerate directories provided\n\t\t\t-R | --recursive    Recursively process directories\n\t\t\t-n | --name         Turn on filename display in output (default)\n\t\t\t-N | --no-name      Turn off filename display in output (list, find, match)\n\t\t\t-t | --tags         Turn on tags display in output (find, match)\n\t\t\t-T | --no-tags      Turn off tags display in output (list)\n\t\t\t-g | --garrulous    Display tags each on own line (list, find, match)\n\t\t\t-G | --no-garrulous Display tags comma-separated after filename (default)\n\t\t\t-c | --color        Display tags in color\n\t\t\t-p | --slash        Terminate each directory name with a slash\n\t\t\t-0 | --nul          Terminate lines with NUL (\\0) for use with xargs -0\n\t\t\t     --home         Find tagged files in user home directory\n\t\t\t     --local        Find tagged files in home + local filesystems\n\t\t\t     --network      Find tagged files in home + local + network filesystems\n\n### Add tags to a file\n\nThe *add* operation adds one or more tags to the specified files without modifying any tags already there.\n\n\ttag --add tagname file\n\ttag --add tagname1,tagname2,... file1 file2...\n\t\n### Remove tags from a file\n\nThe *remove* operation removes one or more tags from the specified files.\n\n\ttag --remove tagname file\n\ttag --remove tagname1,tagname2,... file1 file2...\n\nTo remove all tags from a file, use the wildcard * to match all tags:\n\n\ttag --remove \\* file\n\n### Set tags on a file\n\nThe *set* operation replaces all tags on the specified files with one or more new tags.\n\n\ttag --set tagname file\n\ttag --set tagname1,tagname2,... file1 file2...\n\n### Show files matching tags\n\nThe *match* operation prints the file names that match the specified tags.  Matched files must have at least *all* of the tags specified. Note that *match* matches only against the files that are provided as parameters (and those that it encounters if you use the --enter or --recursive options). To search for tagged files across your filesystem, see the *find* operation.\n\n\ttag --match tagname file\n\ttag --match tagname1,tagname2,... file1 file2...\n\nYou can use a wildcard (*) character in the tags list to match against any/all tags. Note, however, that you'll need to quote that * against shell expansion. To display all files in the current directory that have any combination of tags (but not _no_ tags), use:\n\n\ttag --match '*' *\n\nConversely, to match against paths that have _no_ tags, use an empty tag expression:\n\n\ttag --match '' *\n\nTurn on --tags display mode for this operation to additionally show the tags on the file:\n\n\ttag --match '*' --tags *\n\nTurn on garrulous output to format those tags onto multiple lines:\n\n\ttag --match '*' --tags --garrulous *\n\nYou may use short options as well. The following is equivalent to the previous command:\n\n\ttag -tgm '*' *\n\nYou may use the --enter or --recursive options to match the contents of, or recursively process, any directories provided. This is similar to the --find operation, but operates recursively from the directories you specify. There may be significant differences in performance and/or output ordering in particular cases, so neither *find* nor *match* will be the better solution for all cases.\n\n\ttag --match '*' --recursive .\n\nIf no file arguments are given, *match* will enumerate and match against the contents of the current directory:\n\n\ttag --match tagname\n\n### List the tags on a file\n\nThis *list* operation lists the given files, displaying the tags on each:\n\t\n\ttag --list file\n\ttag --list file1 file2...\n\n*list* is the default operation, so you may omit the list option:\n\n\ttag file1 file2...\n\nAs with *match*, if no file arguments are given, *list* will display the contents of the current directory and any tags on those files:\n\n\ttag\n\nYou can turn on garrulous mode for *list* as well:\n\n\ttag -g *\n\nIf you just want to see tags, but not filenames, turn off display of files:\n\n\ttag --no-name *\n\nYou may use the --enter or --recursive options to list the contents of, or recursively process, any directories provided:\n\n\ttag --list --enter .\n\ttag --list --recursive .\n\ttag -R .\n\n### Find all files on the filesystem with specified tags\n\nThe *find* operation searches across your filesystem for all files that contain the specified tags. This uses the same filesystem metadata database that Spotlight uses, so it is fast.\n\n\ttag --find tagname\n\ttag --find tagname1,tagname2...\n\nYou can use the wildcard here too to find all files that contain a tag of any name:\n\n\ttag --find '*'\n\nOr use an empty tag expression to find all files that have _no_ tag:\n\n\ttag --find ''\n\t\nAnd of course you could turn on display of tag names, and even ask it to be garrulous, which displays all files on your system with tags, listing the tags independently on lines below the file names.\n\n\ttag -tgf '*'\n\n*find* by default will search everywhere that it can. You may supply options to specify a search scope of the user home directory, local disks, or attached network file systems.\n\n\ttag --find tagname --home\n\ttag --find tagname --local\n\ttag --find tagname --network\n\nYou may also supply one or more paths in which to search. \n\n\ttag --find tagname /path/to/here\n\ttag --find tagname --home /path/to/here ./there\n\t\n### Display tag usage\n\nThe *usage* operation follows the syntax and operation of *find*, but instead of displaying the files found, it lists the tags found, prefixed with the usage count of each. In contrast to *find*, the tag operand to *usage* is optional: it defaults to '*'.\n\nIn the simplest usage, *usage* finds all tagged files on the system, listing the count of each tag encountered:\n\n\ttag --usage\n\ttag --usage '*'\n\nIf you limit the search to specific tags, then the files with those tags will be found, and usage information for all of the tags on those files will be displayed:\n\n\ttag --usage tagname\n\ttag --usage tagname1,tagname2\n\nNote that when asking for usage of specific tags, you may see usage displayed for additional tags: those are other tags that occur on the files discovered by your search. \n\nAs with the *find* operation, you may control the paths searched by *usage*:\n\t\n\ttag --usage '*' /path/to/here\n\ttag --usage '*' --home /path/to/here\n\t\n### Colored Output\n\nIf your terminal supports ANSI color sequences, you may pass the -c/--color option. With this option in effect, any tags with known colors will be displayed in approximately the right color. Note that support for this option is dependent upon parsing private Finder data, and so may not always be supported correctly.\n\n### Get help\n\nThe --help option will show you the command synopsis:\n\n\ttag --help\n\nPrebuilt Packages\n---\nYou may install **tag** using the following package managers:\n\n### MacPorts\n\n\tsudo port install tag\n\t\n### Homebrew\n\t\n\tbrew install tag\n\nBuilding and Installing\n---\nYou must have Xcode or the Command Line Tools installed to build/install.\n\nTo build without installing:\n\n\tmake\n\nThis will build **tag** into ./bin/tag\n\nTo build and install onto your system:\n\n\tmake && sudo make install\n\nThis will install **tag** at /usr/local/bin/tag and the man page at /usr/local/share/man/man1/tag.1\n\nAdvanced Usage\n----\n* Wherever a \"tagname\" is expected, a list of tags may be provided. They must be comma-separated.\n* Tag names may include spaces, but the entire tag list must be provided as one parameter: \"tag1,a multiword tag name,tag3\".\n* Because the comma is used to separate tag names, it may not be used in tags (we don't support escaping that comma yet).\n* For *match*, *find*, *usage*, and *remove*, a tag name of '*' is the wildcard and will match any tag. An empty tag expression '' will match only files with no tags.\n* Wherever a \"file\" is expected, a list of files may be used instead. These are provided as separate parameters.\n* Note that directories can be tagged as well, so directories may be specified instead of files.\n* The --all, --enter, and --recursive options apply to --add, --remove, --set, --match, and --list, and control whether hidden files are processed and whether directories are entered and/or processed recursively. If a directory is supplied, but neither of --enter or --recursive, then the operation will apply to the directory itself, rather than to its contents.\n* The operation selector --add, --remove, --set, --match, --list, --find, or --usage may be abbreviated as -a, -r, -s, -m, -l, -f, or -u respectively. All of the options have a short version, in fact. See see the synopsis above, or output from help.\n* If no operation selector is given, the operation will default to *list*.\n* A *list* operation will default to the current directory if no directory is given.\n* For compatibility with Finder, tags are compared in a case-insensitive manner.\n* If you plan to pipe the output of **tag** through **xargs**, you might want to use the -0 option of each.\n* For compatibility with versions 0.8.1 and earlier, -d/--descend is an alias for -R/--recursive.\n\nOmissions\n---\nThe following features are contemplated for future enhancement:\n\n* Regex or glob matching of tags\n* More complicated boolean matching criteria"
}
