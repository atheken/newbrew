{
  "name": "libcpuid",
  "full_name": "libcpuid",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Small C library for x86 CPU detection and feature extraction",
  "license": "BSD-2-Clause",
  "homepage": "https://github.com/anrieff/libcpuid",
  "versions": {
    "stable": "0.6.3",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/anrieff/libcpuid/archive/v0.6.3.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "da570fdeb450634d84208f203487b2e00633eac505feda5845f6921e811644fc"
    },
    "head": {
      "url": "https://github.com/anrieff/libcpuid.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libcpuid/blobs/sha256:84d3564619410abf63cb5dd759bd5c129d9caf273ab972bc1f04ff4fa3fcb29a",
          "sha256": "84d3564619410abf63cb5dd759bd5c129d9caf273ab972bc1f04ff4fa3fcb29a"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libcpuid/blobs/sha256:d05aefe01176128d788f2c914d02b8ffc6a111ef2c2e04d142a2c3f3fc46a68b",
          "sha256": "d05aefe01176128d788f2c914d02b8ffc6a111ef2c2e04d142a2c3f3fc46a68b"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libcpuid/blobs/sha256:35cae66754dd499614f854c21da717fec919aaf7cfd50ea8e0a3c9b83e332a19",
          "sha256": "35cae66754dd499614f854c21da717fec919aaf7cfd50ea8e0a3c9b83e332a19"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/libcpuid/blobs/sha256:583ac04b1bd04fde3501f4f18fa0743f38f2302094f91369963b001349230343",
          "sha256": "583ac04b1bd04fde3501f4f18fa0743f38f2302094f91369963b001349230343"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "autoconf",
    "automake",
    "libtool"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [
    {
      "name": "arch",
      "cask": null,
      "download": null,
      "version": "x86_64",
      "contexts": [],
      "specs": [
        "stable",
        "head"
      ]
    }
  ],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/libcpuid.rb",
  "ruby_source_checksum": {
    "sha256": "b5ded3fce4456a59ff4eb470910c9890803feb63b26a3f5ac6367bc8c203f7cb"
  },
  "date_added": "2020-04-26T18:37:28+00:00",
  "readme": "libcpuid\n========\n\nlibcpuid provides CPU identification for the x86 (and x86_64).\nFor details about the programming API, you might want to\ntake a look at the project's website on sourceforge\n(http://libcpuid.sourceforge.net/). There you'd find a short\n[tutorial](http://libcpuid.sf.net/documentation.html), as well\nas the full [API reference](http://libcpuid.sf.net/doxy).\n\nConfiguring after checkout\n--------------------------\n\nUnder Linux, where you download the sources, there's no\nconfigure script to run. This is because it isn't a good practice to keep\nsuch scripts in a source control system. To create it, you need to run the\nfollowing commands once, after you checkout the libcpuid sources\nfrom github:\n\n        1. run \"libtoolize\"\n        2. run \"autoreconf --install\"\n\nYou need to have `autoconf`, `automake` and `libtool` installed.\n\nAfter that you can run `./configure` and `make` - this will build\nthe library.\n\n`make dist` will create a tarball (with \"configure\" inside) with the\nsources.\n\nPrerequisites\n-------------\n\nUsing libcpuid requires no dependencies on any of the supported OSes.\nBuilding it requires the aforementioned libtool and autotools commands\nto be available, which is a matter of installing a few common packages\nwith related names (e.g. automake, autoconf, libtool).\nIt also requires a POSIX-compatible shell. On NetBSD, you may need\nto install one (credits to @brucelilly):\n\n1. Install a POSIX-compatible shell such as ksh93\n   (pkg_add ast-ksh || pkgin in ast-ksh)\n2. export CONFIG_SHELL=/usr/pkg/bin/ksh93 (substitute the\n   correct path if required)\n3. Follow the regular Linux instructions\n\nTesting\n-------\n\nAfter any change to the detection routines or match tables, it's always\na good idea to run `make test`. If some test fails, and you're confident\nthat the test is wrong and needs fixing, run `make fix-tests`.\n\nYou can also add a new test (which is basically a file containing\nthe raw CPUID data and the expected decoded items) by using\n`tests/create_test.py`. The workflow there is as follows:\n\n1. Run \"cpuid_tool\" with no arguments. It will tell you that it\n   has written a pair of files, raw.txt and report.txt. Ensure\n   that report.txt contains meaningful data.\n2. Run \"tests/create_test.py raw.txt report.txt > «my-cpu».test\"\n3. Use a proper descriptive name for the test (look into tests/amd\n   and tests/intel to get an idea) and copy your test file to an\n   appropriate place within the tests directory hierarchy.\n\nAIDA64 CPUID dumps (mostly found on [InstLatx64](http://instlatx64.atw.hu/)) are also supported.\nTo create a new test based on a AIDA64 CPUID dump, you can do:\n```sh\ncpuid_tool --load=aida64_raw.txt --outfile=report.txt --report\n./tests/create_test.py aida64_raw.txt report.txt > tests/xxx/yyy/my-cpu.test\n```\n\nFor non-developers, who still want to contribute tests for the project,\nuse [this page](http://libcpuid.sourceforge.net/bugreport.php) to report\nmisdetections or new CPUs that libcpuid doesn't handle well yet.\n\nUsers\n-----\n\nSo far, I'm aware of the following projects which utilize libcpuid (listed alphabetically):\n\n* CPU-X (https://github.com/X0rg/CPU-X)\n* fre:ac (https://www.freac.org/)\n* I-Nex (https://github.com/i-nex/I-Nex)\n* Multiprecision Computing Toolbox for MATLAB (https://www.advanpix.com/)\n* ucbench (http://anrieff.net/ucbench)\n\nWe'd love to hear from you if you are also using libcpuid and want your project listed above.\n\nDownloads\n---------\n\nYou can find latest versioned archives [here](https://github.com/anrieff/libcpuid/releases/latest), with binaries for macOS and Windows.\n\n#### Binary packages\n\nAlso, libcpuid is available for following systems in official repositories:\n\n* [Arch Linux](https://archlinux.org/packages/community/x86_64/libcpuid/): `pacman -S libcpuid`\n* [Debian (since version 11 \"Bullseye\")](https://packages.debian.org/source/bullseye/libcpuid): `apt install cpuidtool libcpuid-dev`\n* [Fedora (since version 25)](https://src.fedoraproject.org/rpms/libcpuid): `dnf install libcpuid libcpuid-devel`\n* [FreeBSD (since version 11)](https://www.freshports.org/sysutils/libcpuid): `pkg install libcpuid`\n* [OpenMandriva Lx (since version 4.0 \"Nitrogen\")](https://github.com/OpenMandrivaAssociation/libcpuid): `dnf install libcpuid-tools libcpuid-devel`\n* [openSUSE Leap (since version 15.1)](https://software.opensuse.org/package/libcpuid): `zypper install libcpuid-tools libcpuid-devel`\n* [Solus](https://packages.getsol.us/shannon/libc/libcpuid/): `eopkg install libcpuid libcpuid-devel`\n* [Ubuntu (since version 20.04 \"Focal Fossa\")](https://packages.ubuntu.com/source/focal/libcpuid) : `apt install cpuidtool libcpuid-dev`\n\nBelow, the full lists of repositories:  \n[![Packaging status](https://repology.org/badge/vertical-allrepos/libcpuid.svg?exclude_unsupported=1)](https://repology.org/project/libcpuid/versions)\n\n#### Build tool\n\n* Vcpkg: `vcpkg install cpuid`"
}
