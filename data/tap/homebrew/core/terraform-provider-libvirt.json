{
  "name": "terraform-provider-libvirt",
  "full_name": "terraform-provider-libvirt",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Terraform provisioning with Linux KVM using libvirt",
  "license": "Apache-2.0",
  "homepage": "https://github.com/dmacvicar/terraform-provider-libvirt",
  "versions": {
    "stable": "0.7.1",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/dmacvicar/terraform-provider-libvirt/archive/v0.7.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "a540d3f5fc6afc7ee7759d03a43f85df7af2263fdfa6d73a8014fb4f5c480fa5"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terraform-provider-libvirt/blobs/sha256:335b225a4a6dd7fd48fc292ae3829ad26f01365f271a9b4c7d965bdc1c1233fb",
          "sha256": "335b225a4a6dd7fd48fc292ae3829ad26f01365f271a9b4c7d965bdc1c1233fb"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terraform-provider-libvirt/blobs/sha256:4a99d4558f10f6d9a24860ba42908e0fd6e5704c6218477d1ccb20268c25d199",
          "sha256": "4a99d4558f10f6d9a24860ba42908e0fd6e5704c6218477d1ccb20268c25d199"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terraform-provider-libvirt/blobs/sha256:d0fe876c72f0393c1afa0419c0153b1cc42fb8d76340413b447e6feb12c2c82c",
          "sha256": "d0fe876c72f0393c1afa0419c0153b1cc42fb8d76340413b447e6feb12c2c82c"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terraform-provider-libvirt/blobs/sha256:90e16f849bb32ed97d4558e7748fdf825602211f2abf25248f34521460f4e258",
          "sha256": "90e16f849bb32ed97d4558e7748fdf825602211f2abf25248f34521460f4e258"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terraform-provider-libvirt/blobs/sha256:53ee35a68dee46b5d4130c8bd40fd7aa980f6567935f837c31e5fc2ee3e7ed87",
          "sha256": "53ee35a68dee46b5d4130c8bd40fd7aa980f6567935f837c31e5fc2ee3e7ed87"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terraform-provider-libvirt/blobs/sha256:5f342b2c06761eb27b0fde6a3a81a7a26563e72020df3296547fe04dd48dc0c7",
          "sha256": "5f342b2c06761eb27b0fde6a3a81a7a26563e72020df3296547fe04dd48dc0c7"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terraform-provider-libvirt/blobs/sha256:f5d4e59ee77616ee37b6821d033bfef567d930e06162cec6c1525a72a87a3f2c",
          "sha256": "f5d4e59ee77616ee37b6821d033bfef567d930e06162cec6c1525a72a87a3f2c"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go",
    "pkg-config"
  ],
  "dependencies": [
    "libvirt",
    "terraform"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/terraform-provider-libvirt.rb",
  "ruby_source_checksum": {
    "sha256": "b2dcde351513093bd349e50c8348ed05352267256884316b8d9d8b1cfe318da4"
  },
  "date_added": "2020-02-22T21:30:58+01:00",
  "readme": "# Terraform provider for libvirt\n\n- [![Gitter chat](https://badges.gitter.im/terraform-provider-libvirt/Lobby.png)](https://gitter.im/terraform-provider-libvirt/Lobby) ([IRC gateway](https://irc.gitter.im/))\n- Planning board: [Github Projects](https://github.com/dmacvicar/terraform-provider-libvirt/projects/1)\n\n\n![alpha](https://img.shields.io/badge/stability%3F-beta-yellow.svg) [![Tests](https://github.com/dmacvicar/terraform-provider-libvirt/actions/workflows/test.yml/badge.svg)](https://github.com/dmacvicar/terraform-provider-libvirt/actions/workflows/test.yml) [![Registry](https://img.shields.io/badge/libvirt-Terraform%20Registry-blue)](https://registry.terraform.io/providers/dmacvicar/libvirt/latest/docs)\n\n___\nThis is a terraform provider that lets you provision\nservers on a [libvirt](https://libvirt.org/) host via [Terraform](https://terraform.io/).\n\n## Introduction & Goals\n\nThis project exists:\n\n* To allow teams to get the benefits [Software Defined Infrastructure](https://en.wikipedia.org/wiki/Software-defined_infrastructure) Terraform provides, on top of classical and cheap virtualization infrastructure provided by Linux and [KVM](https://www.linux-kvm.org)\n  This helps in very dynamic [DevOps](https://en.wikipedia.org/wiki/DevOps), Development and Testing activities.\n* To allow for mixing KVM resources with other infrastructure Terraform is able to manage\n\nWhat is *NOT* in scope:\n\n* To support every advanced feature [libvirt](https://libvirt.org/) supports\n\n  This would make the mapping from terraform complicated and not maintanable. See the [How to contribute](CONTRIBUTING.md) section to understand how to approach new features.\n\n## Getting started\n\nThe provider is available for auto-installation from the [Terraform Registry](https://registry.terraform.io/providers/dmacvicar/libvirt/latest).\n\nIn your `main.tf` file, specify the version you want to use:\n\n\n```hcl\nterraform {\n  required_providers {\n    libvirt = {\n      source = \"dmacvicar/libvirt\"\n    }\n  }\n}\n\nprovider \"libvirt\" {\n  # Configuration options\n}\n```\n\nAnd now run terraform init:\n\n```\n$ terraform init\n```\n\n### Creating your first virtual machine\n\nHere is an example that will setup the following:\n\n+ A virtual server resource\n\n(create this as main.tf and run terraform commands from this directory):\n```hcl\nprovider \"libvirt\" {\n    uri = \"qemu:///system\"\n}\n```\n\nYou can also set the URI in the LIBVIRT_DEFAULT_URI environment variable.\n\nNow, define a libvirt domain:\n\n```hcl\nresource \"libvirt_domain\" \"terraform_test\" {\n  name = \"terraform_test\"\n}\n```\n\nNow you can see the plan, apply it, and then destroy the infrastructure:\n\n```console\n$ terraform init\n$ terraform plan\n$ terraform apply\n$ terraform destroy\n```\n\nLook at more advanced examples [here](examples/) and check the [documentation](https://registry.terraform.io/providers/dmacvicar/libvirt/latest/docs).\n\n## Manual installation\n\nYou can also manually download the provider from the [releases section](https://github.com/dmacvicar/terraform-provider-libvirt/releases) on Github. To install it, refer to the [Terraform documentation](https://www.terraform.io/docs/cli/config/config-file.html#provider-installation).\n\n## Building from source\n\n-\t[Go](https://golang.org/doc/install) is required for building.\n\n```\ngit clone https://github.com/dmacvicar/terraform-provider-libvirt.git\ncd terraform-provider-libvirt\nmake\n```\n\nThe binary will be called `terraform-provider-libvirt`.\n\n### Using multiple hypervisors / provider instances\n\nYou can target different libvirt hosts instantiating the [provider multiple times](https://www.terraform.io/docs/configuration/providers.html#multiple-provider-instances). [Example](examples/v0.12/multiple).\n\n### Using qemu-agent\n\nFrom its documentation, [qemu-agent](https://wiki.libvirt.org/page/Qemu_guest_agent):\n\n>It is a daemon program running inside the domain which is supposed to help management applications with executing functions which need assistance of the guest OS.\n\nUntil terraform-provider-libvirt 0.4.2, qemu-agent was used by default to get network configuration. However, if qemu-agent is not running, this creates a delay until connecting to it times-out.\n\nIn current versions, we default to not to attempt connecting to it, and attempting to retrieve network interface information from the agent needs to be enabled explicitly with `qemu_agent = true`, further details [here](https://github.com/dmacvicar/terraform-provider-libvirt/blob/master/website/docs/r/domain.html.markdown). Note that you still need to make sure the agent is running in the OS, and that is unrelated to this option.\n\nNote: when using bridge network configurations you need to enable the `qemu_agent = true`. otherwise you will not retrieve the ip adresses of domains. \n\nBe aware that this variables may be subject to change again in future versions.\n\n## Upstream projects using terraform-libvirt:\n\n* [sumaform](https://github.com/moio/sumaform)\n   sumaform is a way to quickly configure, deploy, test [Uyuni](https://www.uyuni-project.org/) and [SUSE Manager](https://www.suse.com/products/suse-manager/) setups with clients and servers.\n\n* [ha-cluster-sap](https://github.com/SUSE/ha-sap-terraform-deployments)\n  Automated HA and SAP Deployments in Public/Private Clouds (including Libvirt/KVM)\n\n* [ceph-open-terrarium](https://github.com/MalloZup/ceph-open-terrarium)\n   ceph-open-terrarium is a way to quickly configure, deploy, tests CEPH cluster without or with [Deepsea](https://github.com/SUSE/DeepSea)\n\n* [kubic](https://github.com/kubic-project)\n    *   [kubic-terraform-kvm](https://github.com/kubic-project/kubic-terraform-kvm) Kubic Terraform script using KVM/libvirt\n\n* [Community Driven Docker Examples](contrib/)\n   Docker examples showing how to use the Libvirt Provider\n\n* [Openshift 4 Installer](https://github.com/openshift/installer)\n  The Openshift 4 Installer uses Terraform for cluster orchestration and relies on terraform-provider-libvirt for\n  libvirt platform.\n  \n* [Kubitect](https://github.com/MusicDin/kubitect) - a CLI tool for deploying and managing Kubernetes clusters on libvirt platform.\n\n## Authors\n\n* Duncan Mac-Vicar P. <duncan@mac-vicar.eu>\n\nSee also the list of [contributors](https://github.com/dmacvicar/terraform-provider-libvirt/graphs/contributors) who participated in this project.\n\nThe structure and boilerplate is inspired from the [Softlayer](https://github.com/finn-no/terraform-provider-softlayer) and [Google](https://github.com/terraform-providers/terraform-provider-google) Terraform provider sources.\n\n## License\n\n* Apache 2.0, See LICENSE file"
}
