{
  "name": "scriptcs",
  "full_name": "scriptcs",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Tools to write and execute C#",
  "license": "Apache-2.0",
  "homepage": "https://github.com/scriptcs/scriptcs",
  "versions": {
    "stable": "0.17.1",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/scriptcs/scriptcs/archive/v0.17.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "e876118d82f52cbdd9569783ec9278c4ac449055aa628cdcb2d785bf8098a434"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/scriptcs/blobs/sha256:d25a27968072aa23232a11aceed62f1f8edcbdbe31ac2637cdd5becba69bed6e",
          "sha256": "d25a27968072aa23232a11aceed62f1f8edcbdbe31ac2637cdd5becba69bed6e"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/scriptcs/blobs/sha256:f5187aaee21aced8951a79b8a23c8e9a870ce5e17da5d15837add0aeadb3f5dd",
          "sha256": "f5187aaee21aced8951a79b8a23c8e9a870ce5e17da5d15837add0aeadb3f5dd"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/scriptcs/blobs/sha256:507936c0cd4b26dd49508ebf8725b1d9356a611d958a93da0a024e98632b5484",
          "sha256": "507936c0cd4b26dd49508ebf8725b1d9356a611d958a93da0a024e98632b5484"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/scriptcs/blobs/sha256:630be0cd09a3dc16e8c7404875adfe89d009ce9a73f6d5dcae9700253a3c110c",
          "sha256": "630be0cd09a3dc16e8c7404875adfe89d009ce9a73f6d5dcae9700253a3c110c"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/scriptcs/blobs/sha256:9153f24a59a73f78f74915a8e1d8de488ec016deb1aac1825774e19d6420545d",
          "sha256": "9153f24a59a73f78f74915a8e1d8de488ec016deb1aac1825774e19d6420545d"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/scriptcs/blobs/sha256:c14c80f7b24ac5f2c14119ec2f371416ae07b9fba8bd9b0eb90d57ef5104f765",
          "sha256": "c14c80f7b24ac5f2c14119ec2f371416ae07b9fba8bd9b0eb90d57ef5104f765"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/scriptcs/blobs/sha256:121137df4078b2819a16f0f3e75924b10eba51a3ca7ac0a4be3d9010d2d1f7aa",
          "sha256": "121137df4078b2819a16f0f3e75924b10eba51a3ca7ac0a4be3d9010d2d1f7aa"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/scriptcs/blobs/sha256:263fda7addb857a9ed3c0c15856c422d3684ad069c2efc644858bb1779a92e91",
          "sha256": "263fda7addb857a9ed3c0c15856c422d3684ad069c2efc644858bb1779a92e91"
        },
        "sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/scriptcs/blobs/sha256:9ccece2f779060ab23e699b07d6cc6ce0b2c2e0058cc995b1541e1170f69a6eb",
          "sha256": "9ccece2f779060ab23e699b07d6cc6ce0b2c2e0058cc995b1541e1170f69a6eb"
        },
        "el_capitan": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/scriptcs/blobs/sha256:e3b6cb117d23ccf9a745e0ac5e61fcb531d7e8a08476699d2ece6c31e564450e",
          "sha256": "e3b6cb117d23ccf9a745e0ac5e61fcb531d7e8a08476699d2ece6c31e564450e"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "mono"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": true,
  "deprecation_date": "2023-02-21",
  "deprecation_reason": "unmaintained",
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/scriptcs.rb",
  "ruby_source_checksum": {
    "sha256": "5eac3ddbcce0ad3f8391fce4e515f49f1698f069bffd2b670f8cdcbd8ec3b464"
  },
  "date_added": "2015-03-23T08:48:47+00:00",
  "readme": "# scriptcs\n\n[![Chocolatey Version](http://img.shields.io/chocolatey/v/scriptcs.svg?style=flat-square)](http://chocolatey.org/packages/scriptcs) [![Chocolatey Downloads](http://img.shields.io/chocolatey/dt/scriptcs.svg?style=flat-square)](http://chocolatey.org/packages/scriptcs) [![NuGet version (ScriptCs.Hosting)](https://img.shields.io/nuget/v/ScriptCs.Hosting.svg?style=flat-square)](https://www.nuget.org/packages/ScriptCs.Hosting/)\n\n[![*nix Build Status](http://img.shields.io/travis/scriptcs/scriptcs/dev.svg?style=flat-square&label=linux-build)](https://travis-ci.org/scriptcs/scriptcs) [![Windows Build Status](http://img.shields.io/teamcity/codebetter/Scriptcs_Ci.svg?style=flat-square&label=windows-build)](http://ci.scriptcs.net) [![Coverity Scan Build Status](https://img.shields.io/badge/coverity-passed-brightgreen.svg?style=flat-square)](https://scan.coverity.com/projects/2356)\n\n[![Issue Stats](http://issuestats.com/github/scriptcs/scriptcs/badge/pr?style=flat-square)](http://issuestats.com/github/scriptcs/scriptcs) [![Issue Stats](http://issuestats.com/github/scriptcs/scriptcs/badge/issue?style=flat-square)](http://issuestats.com/github/scriptcs/scriptcs)\n\n## What is it?\n\nscriptcs makes it easy to write and execute C# with a simple text editor.\n\nWhile Visual Studio, and other IDEs, are powerful tools, they can sometimes hinder productivity more than they promote it. You donâ€™t always need, or want, the overhead of a creating a new solution or project. Sometimes you want to just type away in your favorite text editor.\n\nscriptcs frees you from Visual Studio, without sacrificing the advantages of a strongly-typed language. \n\n* Write C# in your favorite text editor.\n* Use NuGet to manage your dependencies.\n* The relaxed C# scripting syntax means you can write and execute an application with only one line of code. \n* Script Packs allow you to bootstrap the environment for new scripts, further reduces the amount of code necessary to take advantage of your favorite C# frameworks.\n\n\n## Getting scriptcs\n\nReleases and nightly builds should be installed using [Chocolatey](http://chocolatey.org/). To install Chocolatey, execute the following command in your command prompt:\n\n    @powershell -NoProfile -ExecutionPolicy Unrestricted -Command \"iex ((New-Object Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET PATH=%PATH%;%systemdrive%\\chocolatey\\bin\n\nIf the above fails with the error indicating that proxy authentication is required (i.e. [HTTP 407](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.8)) then try again with the following on the command prompt that uses your default credentials:\n\n    @powershell -NoProfile -ExecutionPolicy Unrestricted -Command \"[Net.WebRequest]::DefaultWebProxy.Credentials = [Net.CredentialCache]::DefaultCredentials; iex ((New-Object Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET PATH=%PATH%;%systemdrive%\\chocolatey\\bin\n\n**Note:** If you are using a version of Chocolatey > 0.9.9.0 you can pass the `-y` into the install and upgrade commands to prevent the confirmation that will appear.\n\n### Installing scriptcs\n\nOnce Chocolatey has been installed, you can install the latest stable version of scriptcs from your command prompt:\n\n    choco install scriptcs\n\nChocolatey will install scriptcs to `%LOCALAPPDATA%\\scriptcs\\` and update your PATH accordingly.\n\n**Note:** You may need to restart your command prompt after the installation completes.\n\n### Staying up-to-date\n\nWith Chocolatey, keeping scriptcs updated is just as easy:\n\n    choco upgrade scriptcs\n\n**Note:** If you are using a version of Chocolatey < 0.9.0.0 you will need to use `choco update scriptcs`, but also think about updating Chocolatey itself.\n\n### Nightly builds\n\nNightly builds are hosted on [MyGet](https://www.myget.org/), and can also be installed through with Chocolatey:\n\n    choco install scriptcs -pre -source https://www.myget.org/F/scriptcsnightly/ \n\n### Building from source\n\n#### Windows\n\n1. Ensure you have .NET Framework 4.6.1 installed.\n\n2. Execute the build script.\n\n    `build.cmd`\n\n#### Linux\n\n1. Ensure you have [Mono 5.12](https://www.mono-project.com/download/stable/) or later installed.\n    \n2. Execute the build script\n\n    `./build.sh`\n\n## Getting Started\n\n### Using the REPL\nThe scriptcs REPL can be started by running scriptcs without any parameters. The REPL allows you to execute C# statements directly from your command prompt.\n\n```batchfile\nC:\\> scriptcs\nscriptcs (ctrl-c or blank to exit)\n\n> var message = \"Hello, world!\";\n> Console.WriteLine(message);\nHello, world!\n> \n\nC:\\>\n```\n\nREPL supports all C# language constructs (i.e. class definition, method definition), as well as multi-line input. For example:\n\n```batchfile\nC:\\> scriptcs\nscriptcs (ctrl-c or blank to exit)\n\n> public class Test {\n    public string Name { get; set; }\n  }\n> var x = new Test { Name = \"Hello\" };\n> x\n{Name: \"Hello\"}\n\nC:\\>\n```\n\n### Writing a script\n\n* In an empty directory, create a new file named `app.csx`:\n\n```c#\nusing Raven.Client;\nusing Raven.Client.Embedded;\nusing Raven.Client.Indexes;\n\nConsole.WriteLine(\"Starting RavenDB server...\");\n\nusing (var documentStore = new EmbeddableDocumentStore { UseEmbeddedHttpServer = true })\n{\n    documentStore.Initialize();\n    Console.WriteLine($\"RavenDB started, listening on http://localhost:{documentStore.Configuration.Port}\");\n    Console.ReadKey();\n}\n```\n\n* Install the [RavenDB.Embedded](https://nuget.org/packages/RavenDB.Embedded/) package from NuGet using the [install command](https://github.com/scriptcs/scriptcs/wiki/Package-installation).\n\n```batchfile\nscriptcs -install RavenDB.Embedded\n```\n\n* Execute your script. Note that listening on a port requires that the command prompt be launched using the **Run as Administrator** option.\n\n```batchfile\n> scriptcs app.csx\nINFO : Starting to create execution components\nINFO : Starting execution\nStarting RavenDB server...\n.. snip ..\nRavenDB started, listening on http://localhost:8080.\n```\n\n* Navigating to the URL that Raven is listening on will now bring up the RavenDB management studio.\n\n### Bootstrap scripts with Script Packs\n\nScript Packs can be used to further reduce the amount of code you need to write when working with common frameworks. \n\n* In an empty directory, install the [ScriptCs.WebApi](https://nuget.org/packages/ScriptCs.WebApi/) script pack from NuGet. The script pack automatically imports the Web API namespaces and provides a convenient factory method for initializing the Web API host. It also replaces the default `ControllerResolver` with a custom implementation that allows Web API to discover controllers declared in scripts.\n\n```batchfile\nscriptcs -install ScriptCs.WebApi\n```\n\n* Script packs can be imported into a script by calling `Require<TScriptPack>()`. Create a file named `server.csx` that contains the following code:\n\n```c#\npublic class TestController : ApiController {\n    public string Get() {\n        return \"Hello world!\";\n    }\n}\n\nvar webApi = Require<WebApi>();\nvar server = webApi.CreateServer(\"http://localhost:8888\");\nserver.OpenAsync().Wait();\n\nConsole.WriteLine(\"Listening...\");\nConsole.ReadKey();\nserver.CloseAsync().Wait();\n```\n\n* In a command prompt running as administrator, execute the `server.csx` file.\n\n```batchfile\nscriptcs server.csx \n```\n\n* Browse to http://localhost:8888/test/ to see the result of the TestController.Get method.\n\n```xml\n<string xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/\">Hello world!</string>\n```\n\n### Referencing scripts\n\n* Move the TestController class from the previous example into a new file named `controller.csx` with the following content.\n\n* On the first line of `server.csx`, reference `controller.csx` using the [#load directive](https://github.com/scriptcs/scriptcs/wiki/Writing-a-script#loading-referenced-scripts). **Note:** #load directives must be placed at the top of a script, otherwise they will be ignored.\n\n```c#\n#load \"controller.csx\"\n```\n\n* In a command prompt running as administrator, execute the `server.csx` file.\n\n```batchfile\nscriptcs server.csx \n```\n\n* Browse to http://localhost:8888/test/ to see the result of the TestController.Get method.\n\n```xml\n<string xmlns=\"http://schemas.microsoft.com/2003/10/Serialization/\">Hello world!</string>\n```\n\n\n### Referencing assemblies\n\nYou can reference additional assemblies from the GAC or from the `bin` folder in your script's directory using the [#r directive](https://github.com/scriptcs/scriptcs/wiki/Writing-a-script#referencing-assemblies):\n\n```c#\n#r \"nunit.core.dll\"\n#r \"nunit.core.interfaces.dll\"\n\nvar path = \"UnitTests.dll\";\nvar runner = TestSetup.GetRunner(new[] {path});\nvar result = runner.Run(new ConsoleListener(msg => Console.WriteLine(msg)), TestFilter.Empty, true,     LoggingThreshold.All);\n\nConsole.ReadKey();\n```\n\n### Debugging\n\nInstructions for debugging scripts using Visual Studio can be found on the [wiki](https://github.com/scriptcs/scriptcs/wiki/Debugging-a-script).\n\n### Package installation\n\nYou can install any NuGet packages directly from the scriptcs CLI. This will pull the relevant packages from NuGet, and install them in the scriptcs_packages folder.\n\nOnce the packages are installed, you can simply start using them in your script code directly (just import the namespaces - no additional bootstrapping or DLL referencing is needed).\n\nThe `install` command will also create a `scriptcs_packages.config` file if you don't have one - so that you can easily redistribute your script (without having to copy the package binaries).\n\n - `scriptcs -install {package name}` will install the desired package from NuGet. \n \t\n\tFor example: \n\n\t\tscriptcs -install ServiceStack\n\t\t\n - `scriptcs -install` (without package name) will look for the `scriptcs_packages.config` file located in the current execution directory, and install all the packages specified there. You only need to specify **top level** packages.\n\nFor example, you might create the following `scriptcs_packages.config`:\n\n\t<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\t<packages>\n  \t\t<package id=\"Nancy.Hosting.Self\" version=\"0.16.1\" targetFramework=\"net40\" />\n  \t\t<package id=\"Nancy.Bootstrappers.Autofac\" version=\"0.16.1\" targetFramework=\"net40\" />\n  \t\t<package id=\"Autofac\" version=\"2.6.3.862\" targetFramework=\"net40\" />\n\t</packages>\n\nAnd then just call:\n\n    scriptcs -install\n\nAs a result, all packages specified in the `scriptcs_packages.config`, including all dependencies, will be downloaded and installed in the `scriptcs_packages` folder. \n\n\n## Contributing\n\n* Read our [Contribution Guidelines](https://github.com/scriptcs/scriptcs/blob/master/CONTRIBUTING.md). \n\n\n## Samples and Documentation\n\nAdditional samples can be contributed to our [samples repository](https://github.com/scriptcs/scriptcs-samples). Documentation can be found on our [wiki](https://github.com/scriptcs/scriptcs/wiki). \n\n\n## Community\n\nWant to chat? In addition to Twitter, you can find us on [Google Groups](https://groups.google.com/forum/?fromgroups#!forum/scriptcs) and [JabbR](https://jabbr.net/#/rooms/scriptcs)!\n\n\n## Coordinators\n\n* [Glenn Block](https://github.com/glennblock) ([@gblock](https://twitter.com/intent/user?screen_name=gblock))\n* [Justin Rusbatch](https://github.com/jrusbatch) ([@jrusbatch](https://twitter.com/intent/user?screen_name=jrusbatch))\n* [Filip Wojcieszyn](https://github.com/filipw) ([@filip_woj](https://twitter.com/intent/user?screen_name=filip_woj))\n\n\n## Core Committers\n\n* [Damian Schenkelman](http://github.com/dschenkelman) ([@dschenkelman](https://twitter.com/intent/user?screen_name=dschenkelman))\n* [Kristian Hellang](http://github.com/khellang) ([@khellang](https://twitter.com/intent/user?screen_name=khellang))\n* [Adam Ralph](http://github.com/adamralph) ([@adamralph](https://twitter.com/intent/user?screen_name=adamralph))\n* [Paul Bouwer](http://github.com/paulbouwer) ([@pbouwer](https://twitter.com/intent/user?screen_name=pbouwer))\n\n## Credits \n\n* Check out the [list of developers](https://github.com/scriptcs/scriptcs/wiki/Contributors) responsible for getting scriptcs to where it is today! \n* Special thanks to Filip Wojcieszyn for being the inspiration behind this with his Roslyn Web API posts.\n* Thanks to the Roslyn team who helped point me in the right direction.\n\n\n## License \n\n[Apache 2 License](https://github.com/scriptcs/scriptcs/blob/master/LICENSE.md)"
}
