{
  "name": "jd",
  "full_name": "jd",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "JSON diff and patch",
  "license": "MIT",
  "homepage": "https://github.com/josephburnett/jd",
  "versions": {
    "stable": "1.7.1",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/josephburnett/jd/archive/v1.7.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "3d0b693546891bab41ca5c3be859bc760631608c9add559aa561fb751cdd1c92"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/jd/blobs/sha256:0a2b07ba96ff95b927175fcdf22386d458b43fd0fd318263d7dfcd851deaa920",
          "sha256": "0a2b07ba96ff95b927175fcdf22386d458b43fd0fd318263d7dfcd851deaa920"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/jd/blobs/sha256:a5459ba7e6a8b80bc8874dde1d866fda9b99f291ac41e462ec0de9c1eee45d2a",
          "sha256": "a5459ba7e6a8b80bc8874dde1d866fda9b99f291ac41e462ec0de9c1eee45d2a"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/jd/blobs/sha256:e23b8fd52d1d4d56c8e402127d7fd5ec9f7d3939ebf0be57c0360265bdab09ab",
          "sha256": "e23b8fd52d1d4d56c8e402127d7fd5ec9f7d3939ebf0be57c0360265bdab09ab"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/jd/blobs/sha256:17ae4f04c0016a933f923aacc09696a7ec54ac8ea76e5f2e7ba28903d84b2738",
          "sha256": "17ae4f04c0016a933f923aacc09696a7ec54ac8ea76e5f2e7ba28903d84b2738"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/jd/blobs/sha256:9080e532d8e9c322d6322148d2c7a21bc8606fd9257683724d02f43f21cd4742",
          "sha256": "9080e532d8e9c322d6322148d2c7a21bc8606fd9257683724d02f43f21cd4742"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/jd/blobs/sha256:f40bd8456140f8332ec1e13efef5a260f12e33908306a6b6429cea3446140408",
          "sha256": "f40bd8456140f8332ec1e13efef5a260f12e33908306a6b6429cea3446140408"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/jd/blobs/sha256:112215528c11ec54910cdbd320d9c0ced6714d87f27a573fb86e40c26829b70b",
          "sha256": "112215528c11ec54910cdbd320d9c0ced6714d87f27a573fb86e40c26829b70b"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/jd.rb",
  "ruby_source_checksum": {
    "sha256": "46c4e85ad9ac7f33ef7981264e4fc9f4690338bb3f63663778d7099101e852a1"
  },
  "date_added": "2019-11-02T19:44:41-04:00",
  "readme": "[![Go Report Card](https://goreportcard.com/badge/josephburnett/jd)](https://goreportcard.com/report/josephburnett/jd)\n\n# JSON diff and patch\n\n`jd` is a commandline utility and Go library for diffing and patching JSON and YAML values. It supports a native `jd` format (similar to unified format) as well as JSON Merge Patch ([RFC 7386](https://datatracker.ietf.org/doc/html/rfc7386)) and a subset of JSON Patch ([RFC 6902](https://datatracker.ietf.org/doc/html/rfc6902)). Try it out at http://play.jd-tool.io/.\n\n![jd logo](logo_small.png)\n\n## Installation\n\nTo get the `jd` commandline utility:\n* run `brew install jd`, or\n* run `go install github.com/josephburnett/jd@latest`, or\n* visit https://github.com/josephburnett/jd/releases/latest and download the pre-built binary for your architecture/os, or\n* run in a Docker image `jd(){ docker run --rm -i -v $PWD:$PWD -w $PWD josephburnett/jd \"$@\"; }`.\n\nTo use the `jd` web UI:\n* visit http://play.jd-tool.io/, or\n* run `jd -port 8080` and visit http://localhost:8080.\n\n## Command line usage\n\n```\nUsage: jd [OPTION]... FILE1 [FILE2]\nDiff and patch JSON files.\n\nPrints the diff of FILE1 and FILE2 to STDOUT.\nWhen FILE2 is omitted the second input is read from STDIN.\nWhen patching (-p) FILE1 is a diff.\n\nOptions:\n  -color     Print color diff.\n  -p         Apply patch FILE1 to FILE2 or STDIN.\n  -o=FILE3   Write to FILE3 instead of STDOUT.\n  -set       Treat arrays as sets.\n  -mset      Treat arrays as multisets (bags).\n  -setkeys   Keys to identify set objects\n  -yaml      Read and write YAML instead of JSON.\n  -port=N    Serve web UI on port N\n  -f=FORMAT  Produce diff in FORMAT \"jd\" (default), \"patch\" (RFC 6902) or\n             \"merge\" (RFC 7386)\n  -t=FORMATS Translate FILE1 between FORMATS. Supported formats are \"jd\",\n             \"patch\" (RFC 6902), \"merge\" (RFC 7386), \"json\" and \"yaml\".\n             FORMATS are provided as a pair separated by \"2\". E.g.\n             \"yaml2json\" or \"jd2patch\".\n\nExamples:\n  jd a.json b.json\n  cat b.json | jd a.json\n  jd -o patch a.json b.json; jd patch a.json\n  jd -set a.json b.json\n  jd -f patch a.json b.json\n  jd -f merge a.json b.json\n```\n\n## Library usage\n\nNote: import only release commits (`v1.Y.Z`) because `master` can be unstable.\n\n```Go\nimport (\n\t\"fmt\"\n\tjd \"github.com/josephburnett/jd/lib\"\n)\n\nfunc ExampleJsonNode_Diff() {\n\ta, _ := jd.ReadJsonString(`{\"foo\":\"bar\"}`)\n\tb, _ := jd.ReadJsonString(`{\"foo\":\"baz\"}`)\n\tfmt.Print(a.Diff(b).Render())\n\t// Output:\n\t// @ [\"foo\"]\n\t// - \"bar\"\n\t// + \"baz\"\n}\n\nfunc ExampleJsonNode_Patch() {\n\ta, _ := jd.ReadJsonString(`[\"foo\"]`)\n\tdiff, _ := jd.ReadDiffString(`` +\n\t\t`@ [1]` + \"\\n\" +\n\t\t`+ \"bar\"` + \"\\n\")\n\tb, _ := a.Patch(diff)\n\tfmt.Print(b.Json())\n\t// Output:\n\t// [\"foo\",\"bar\"]\n}\n```\n\n## Diff language\n\n![Railroad diagram of EBNF](/ebnf.png)\n\n- A diff is zero or more sections\n- Sections start with a `@` header and the path to a node\n- A path is a JSON list of zero or more elements accessing collections\n- A JSON number element (e.g. `0`) accesses an array\n- A JSON string element (e.g. `\"foo\"`) accesses an object\n- An empty JSON object element (`{}`) accesses an array as a set or multiset\n- After the path is one or more removals or additions, removals first\n- Removals start with `-` and then the JSON value to be removed\n- Additions start with `+` and then the JSON value to added\n\n### EBNF\n\n```EBNF\nDiff ::= ( '@' '[' ( 'JSON String' | 'JSON Number' | 'Empty JSON Object' )* ']' '\\n' ( ( '-' 'JSON Value' '\\n' )+ | '+' 'JSON Value' '\\n' ) ( '+' 'JSON Value' '\\n' )* )*\n```\n\n### Examples\n\n```DIFF\n@ [\"a\"]\n- 1\n+ 2\n```\n\n```DIFF\n@ [2]\n+ {\"foo\":\"bar\"}\n```\n\n```DIFF\n@ [\"Movies\",67,\"Title\"]\n- \"Dr. Strangelove\"\n+ \"Dr. Evil Love\"\n@ [\"Movies\",67,\"Actors\",\"Dr. Strangelove\"]\n- \"Peter Sellers\"\n+ \"Mike Myers\"\n@ [\"Movies\",102]\n+ {\"Title\":\"Austin Powers\",\"Actors\":{\"Austin Powers\":\"Mike Myers\"}}\n```\n\n```DIFF\n@ [\"Movies\",67,\"Tags\",{}]\n- \"Romance\"\n+ \"Action\"\n+ \"Comedy\"\n```\n\n## Cookbook\n\n### Use git diff to produce a structural diff:\n```\ngit difftool -yx jd @ -- foo.json\n@ [\"foo\"]\n- \"bar\"\n+ \"baz\"\n```\n\n### See what changes in a Kubernetes Deployment:\n```\nkubectl get deployment example -oyaml > a.yaml\nkubectl edit deployment example\n# change cpu resource from 100m to 200m\nkubectl get deployment example -oyaml | jd -yaml a.yaml\n```\noutput:\n```diff\n@ [\"metadata\",\"annotations\",\"deployment.kubernetes.io/revision\"]\n- \"2\"\n+ \"3\"\n@ [\"metadata\",\"generation\"]\n- 2\n+ 3\n@ [\"metadata\",\"resourceVersion\"]\n- \"4661\"\n+ \"5179\"\n@ [\"spec\",\"template\",\"spec\",\"containers\",0,\"resources\",\"requests\",\"cpu\"]\n- \"100m\"\n+ \"200m\"\n@ [\"status\",\"conditions\",1,\"lastUpdateTime\"]\n- \"2021-12-23T09:40:39Z\"\n+ \"2021-12-23T09:41:49Z\"\n@ [\"status\",\"conditions\",1,\"message\"]\n- \"ReplicaSet \\\"nginx-deployment-787d795676\\\" has successfully progressed.\"\n+ \"ReplicaSet \\\"nginx-deployment-795c7f5bb\\\" has successfully progressed.\"\n@ [\"status\",\"observedGeneration\"]\n- 2\n+ 3\n```\napply these change to another deployment:\n```\n# edit file \"patch\" to contain only the hunk updating cpu request\nkubectl patch deployment example2 --type json --patch \"$(jd -t jd2patch ~/patch)\"\n```"
}
