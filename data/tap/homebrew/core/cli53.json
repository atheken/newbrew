{
  "name": "cli53",
  "full_name": "cli53",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Command-line tool for Amazon Route 53",
  "license": "MIT",
  "homepage": "https://github.com/barnybug/cli53",
  "versions": {
    "stable": "0.8.22",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/barnybug/cli53/archive/0.8.22.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "5acf576662cf8cb01ecbe027dfc3531e19bd03c1cd22425125e2a0a986273a7a"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cli53/blobs/sha256:fb27aef03a8a1238d7d6daebc3b1a40569c3895b3ff94deb2cbf600b3001e4e9",
          "sha256": "fb27aef03a8a1238d7d6daebc3b1a40569c3895b3ff94deb2cbf600b3001e4e9"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cli53/blobs/sha256:fb27aef03a8a1238d7d6daebc3b1a40569c3895b3ff94deb2cbf600b3001e4e9",
          "sha256": "fb27aef03a8a1238d7d6daebc3b1a40569c3895b3ff94deb2cbf600b3001e4e9"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cli53/blobs/sha256:fb27aef03a8a1238d7d6daebc3b1a40569c3895b3ff94deb2cbf600b3001e4e9",
          "sha256": "fb27aef03a8a1238d7d6daebc3b1a40569c3895b3ff94deb2cbf600b3001e4e9"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cli53/blobs/sha256:0cbae4a4ed0e2f14e48ae285d665b9d683a4f3c23b74735992f4a6d77c5fe0de",
          "sha256": "0cbae4a4ed0e2f14e48ae285d665b9d683a4f3c23b74735992f4a6d77c5fe0de"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cli53/blobs/sha256:0cbae4a4ed0e2f14e48ae285d665b9d683a4f3c23b74735992f4a6d77c5fe0de",
          "sha256": "0cbae4a4ed0e2f14e48ae285d665b9d683a4f3c23b74735992f4a6d77c5fe0de"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cli53/blobs/sha256:0cbae4a4ed0e2f14e48ae285d665b9d683a4f3c23b74735992f4a6d77c5fe0de",
          "sha256": "0cbae4a4ed0e2f14e48ae285d665b9d683a4f3c23b74735992f4a6d77c5fe0de"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cli53/blobs/sha256:fe47a8f80755ada1e60568573e4cf46bc61307892747d726ad9899b89f093ff5",
          "sha256": "fe47a8f80755ada1e60568573e4cf46bc61307892747d726ad9899b89f093ff5"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/cli53.rb",
  "ruby_source_checksum": {
    "sha256": "0d1badc3310272addb1935ec17c927a28e739af9ffd56266fe2b89de98cca48c"
  },
  "date_added": "2016-04-29T23:04:29+01:00",
  "readme": "[![Build status](https://secure.travis-ci.org/barnybug/cli53.svg?branch=main)](https://secure.travis-ci.org/barnybug/cli53) [![codecov.io](http://codecov.io/github/barnybug/cli53/coverage.svg?branch=main)](http://codecov.io/github/barnybug/cli53?branch=main)\n[![Join the chat at https://gitter.im/barnybug/cli53](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/barnybug/cli53?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n# cli53 - Command line tool for Amazon Route 53\n\n## Introduction\n\ncli53 provides import and export from BIND format and simple command line management of\nRoute 53 domains.\n\nFeatures:\n\n- import and export BIND format\n\n- create, delete and list hosted zones\n\n- create, delete and update individual records\n\n- create AWS extensions: failover, geolocation, latency, weighted and ALIAS records\n\n- create, delete and use reusable delegation sets\n\n## Installation\n\nInstallation is easy, just download the binary from the github releases page (builds are available for Linux, Mac and Windows):\nhttps://github.com/barnybug/cli53/releases/latest\n\n    $ sudo mv cli53-my-platform /usr/local/bin/cli53\n    $ sudo chmod +x /usr/local/bin/cli53\n\nAlternatively, on Mac you can install it using homebrew\n\n    $ brew install cli53\n\nTo configure your Amazon credentials, either place them in a file `~/.aws/credentials`:\n\n\t[default]\n\taws_access_key_id = AKID1234567890\n\taws_secret_access_key = MY-SECRET-KEY\n\nOr set the environment variables: `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.\n\nYou can switch between different sets in the credentials file by passing\n`--profile` to any command, or setting the environment variable `AWS_PROFILE`.\n For example:\n\n        cli53 list --profile my_profile\n\nYou can also assume a specific role by passing `--role-arn` to any command.\nFor example:\n\n        cli53 list --role-arn arn:aws:iam::123456789012:role/myRole\n\nYou can combine role with profile.\nFor example:\n\n        cli53 list --profile my_profile --role-arn arn:aws:iam::123456789012:role/myRole\n\nFor more information, see: http://blogs.aws.amazon.com/security/post/Tx3D6U6WSFGOK2H/A-New-and-Standardized-Way-to-Manage-Credentials-in-the-AWS-SDKs\n\nNote: for Alpine on Docker, the pre-built binaries do not work, so either use Debian, or follow the instructions below for Building from source.\n\n## Building from source\n\nTo build yourself from source (you will need golang >= 1.5 installed):\n\n    $ export GO15VENDOREXPERIMENT=1\n    $ go get github.com/barnybug/cli53/cmd/cli53\n\nThis will produce a binary `cli53` in `$GOPATH/bin`, after this follow the steps as above.\n\n## Getting Started\n\nCreate a hosted zone:\n\n\t$ cli53 create example.com --comment 'my first zone'\n\nCheck what we've done:\n\n\t$ cli53 list\n\nList also supports other output formats (eg. json for scripting using [jq](https://stedolan.github.io/jq/)):\n\n\t$ cli53 list -format json | jq .[].Name\n\nImport a BIND zone file:\n\n\t$ cli53 import --file zonefile.txt example.com\n\nReplace with an imported zone, waiting for completion:\n\n\t$ cli53 import --file zonefile.txt --replace --wait example.com\n\nAlso you can 'dry-run' import, to check what will happen:\n\n\t$ cli53 import --file zonefile.txt --replace --wait --dry-run example.com\n\nUpsert with an imported zone (replace existing and add new records, without deleting):\n\n\t$ cli53 import --file zonefile.txt --upsert example.com\n\nValidate a zone file syntax:\n\n\t$ cli53 validate --file zonefile.txt\n\nCreate an A record pointed to 192.168.0.1 with TTL of 60 seconds:\n\n\t$ cli53 rrcreate example.com 'www 60 A 192.168.0.1'\n\nUpdate this A record to point to 192.168.0.2:\n\n\t$ cli53 rrcreate --replace example.com 'www 60 A 192.168.0.2'\n\nDelete the A record:\n\n\t$ cli53 rrdelete example.com www A\n\nCreate an MX record:\n\n\t$ cli53 rrcreate example.com '@ MX 10 mail1.' '@ MX 20 mail2.'\n\nCreate a round robin A record:\n\n\t$ cli53 rrcreate example.com '@ A 127.0.0.1' '@ A 127.0.0.2'\n\nFor CNAME records, relative domains have no trailing dot, but absolute domains should:\n\n\t$ cli53 rrcreate example.com 'login CNAME www'\n\t$ cli53 rrcreate example.com 'mail CNAME ghs.googlehosted.com.'\n\nExport as a BIND zone file (for backup!):\n\n\t$ cli53 export example.com\n\nExport fully-qualified domain names (instead of just prefixes) to `stdout`, and send AWS debug logging to `stderr`:\n\n    $ cli53 export --full --debug example.com > example.com.txt 2> example.com.err.log\n\nCreate some weighted records:\n\n\t$ cli53 rrcreate --identifier server1 --weight 10 example.com 'www A 192.168.0.1'\n\t$ cli53 rrcreate --identifier server2 --weight 20 example.com 'www A 192.168.0.2'\n\nCreate an alias to an ELB:\n\n\t$ cli53 rrcreate example.com 'www AWS ALIAS A dns-name.elb.amazonaws.com. ABCDEFABCDE false'\n\nCreate an alias to an A record:\n\n\t$ cli53 rrcreate example.com 'www AWS ALIAS A server1 $self false'\n\nCreate an alias to a CNAME:\n\n\t$ cli53 rrcreate example.com 'docs AWS ALIAS CNAME mail $self false'\n\nCreate some geolocation records:\n\n\t$ cli53 rrcreate -i Africa --continent-code AF example.com 'geo 300 IN A 127.0.0.1'\n\t$ cli53 rrcreate -i California --country-code US --subdivision-code CA example.com 'geo 300 IN A 127.0.0.2'\n\nCreate a primary/secondary pair of health checked records:\n\n\t$ cli53 rrcreate -i Primary --failover PRIMARY --health-check 2e668584-4352-4890-8ffe-6d3644702a1b example.com 'ha 300 IN A 127.0.0.1'\n\t$ cli53 rrcreate -i Secondary --failover SECONDARY example.com 'ha 300 IN A 127.0.0.2'\n\nCreate a multivalue record with health checks:\n\n\t$ cli53 rrcreate -i One --multivalue --health-check 2e668584-4352-4890-8ffe-6d3644702a1b example.com 'ha 300 IN A 127.0.0.1'\n\t$ cli53 rrcreate -i Two --multivalue --health-check 7c90445d-ad67-47bd-9649-3ca0985e1f88 example.com 'ha 300 IN A 127.0.0.2'\n\nCreate, list and then delete a reusable delegation set:\n\n\t$ cli53 dscreate\n\t$ cli53 dslist\n\t$ cli53 dsdelete NA24DEGBDGB32\n\nFurther documentation is available, e.g.:\n\n\t$ cli53 --help\n\t$ cli53 rrcreate --help\n\n## Bug reports\n\nPlease open a github issue including cli53 version number `cli53 --version`\nand the commands or a zone file to reproduce the issue. A good bug report is\nmuch appreciated!\n\n## Pull requests\n\nPull requests are gratefully received, though please do include a test case\ntoo.\n\n## Where's python/pypi cli53?\n\nI've since rewritten the original python cli53. As people were still\ninstalling the old version I've taken it off pypi. If you must, you can still\ninstall the python cli53 by giving pip the github branch:\n\n\t$ pip install git+https://github.com/barnybug/cli53.git@python\n\nPlease note I'll no longer be supporting this any more, so any bug reports\nwill be flatly closed!\n\n## Broken CNAME exports (GoDaddy)\n\nSome DNS providers export broken bind files, without the trailing '.'\non CNAME records. This is a requirement for absolute records\n(i.e. ones outside of the qualifying domain).\n\nIf you see CNAME records being imported to route53 with an extra\nmydomain.com on the end (e.g. ghs.google.com.mydomain.com), then you\nneed to fix your zone file before importing:\n\n\t$ perl -pe 's/((CNAME|MX\\s+\\d+)\\s+[-a-zA-Z0-9._]+)(?!.)$/$1./i' broken.txt > fixed.txt\n\n## Private/public zones\n\nTo manage zones that have both a private and a public zone, you must specify the\nzone ID instead the domain name, which is ambiguous. This is the 13 character ID\nafter '/hostedzone/' you can see in the output to 'cli53 list'. eg:\n\n    $ cli53 rrcreate ZZZZZZZZZZZZZ 'name A 127.0.0.1'\n\n## Setting Endpoint URL\n\nSimilar to the AWS CLI, the Route 53 endpoint can be set with the --endpoint-url flag. It can be a hostname or a fully qualified URL. This is particularly useful for testing.\n\n    $ cli53 list --endpoint-url \"http://localhost:4580\"\n\n## Caveats\n\nAs Amazon limits operations to a maximum of 100 changes, if you\nperform a large operation that changes over 100 resource records it\nwill be split. An operation that involves deletes, followed by updates\nsuch as an import with --replace will very briefly leave the domain\ninconsistent. You have been warned!\n\n## Changelog\n\nSee: [CHANGELOG](CHANGELOG.md)"
}
