{
  "name": "rebar3",
  "full_name": "rebar3",
  "tap": "homebrew/core",
  "oldname": "rebar@3",
  "oldnames": [
    "rebar@3"
  ],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Erlang build tool",
  "license": "Apache-2.0",
  "homepage": "https://github.com/erlang/rebar3",
  "versions": {
    "stable": "3.22.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/erlang/rebar3/archive/3.22.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "28b256038b445ec818d2cc33000b3217f42a946219ede55ab5970503bfcf6647"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rebar3/blobs/sha256:eab1d6a772d460fc9d97933b173123ebb0c9cecf15de1daa3024af8d983b2150",
          "sha256": "eab1d6a772d460fc9d97933b173123ebb0c9cecf15de1daa3024af8d983b2150"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rebar3/blobs/sha256:ed52ccd16079c79ac55885a1e9f88e6b01fccb1b64941e57326d4861bc650e65",
          "sha256": "ed52ccd16079c79ac55885a1e9f88e6b01fccb1b64941e57326d4861bc650e65"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rebar3/blobs/sha256:f3b77b3ad4bb436efe07ebeef78cacd7e9b851eddb81d73f05aae3a7573e256d",
          "sha256": "f3b77b3ad4bb436efe07ebeef78cacd7e9b851eddb81d73f05aae3a7573e256d"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rebar3/blobs/sha256:c52c7648d0e04fcbd911a58bcf2b8ed28cf2c0ff7048d9e1527871dfce7bbcc5",
          "sha256": "c52c7648d0e04fcbd911a58bcf2b8ed28cf2c0ff7048d9e1527871dfce7bbcc5"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rebar3/blobs/sha256:51ed0f2f1cfe8ec49e0d72afcfe3c5930ccc48d29d38b6a996a7a76e37f7d0bb",
          "sha256": "51ed0f2f1cfe8ec49e0d72afcfe3c5930ccc48d29d38b6a996a7a76e37f7d0bb"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rebar3/blobs/sha256:cc4903f96c219d7abd4a374f01aee030e0a2601dc640abe0855e690254e8af98",
          "sha256": "cc4903f96c219d7abd4a374f01aee030e0a2601dc640abe0855e690254e8af98"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rebar3/blobs/sha256:6545152988f17d28c9c0c424910086a60f752226c8f55596e0ec06ee56e3aadc",
          "sha256": "6545152988f17d28c9c0c424910086a60f752226c8f55596e0ec06ee56e3aadc"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "erlang"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/rebar3.rb",
  "ruby_source_checksum": {
    "sha256": "a76b484879d299b100616889c142c8e9a58be5107fd97d389369a18dadb91546"
  },
  "date_added": "2018-09-03T13:29:29+10:00",
  "readme": "# Rebar3\n\n[![Build Status](https://github.com/erlang/rebar3/workflows/Common%20Test/badge.svg)](https://github.com/erlang/rebar3/actions?query=branch%3Amaster+workflow%3A\"Common+Test\") [![Erlang Versions](https://img.shields.io/badge/Supported%20Erlang%2FOTP-24.0%20to%2026.0-blue)](http://www.erlang.org)\n\n1. [What is Rebar3?](#what-is-rebar3)\n2. [Why Rebar3?](#why-rebar3)\n3. [Should I Use Rebar3?](#should-i-use-rebar3)\n4. [Getting Started](#getting-started)\n5. [Documentation](#documentation)\n6. [Features](#features)\n7. [Migrating from rebar2](#migrating-from-rebar2)\n8. [Additional Resources](#additional-resources)\n\n## What is Rebar3\n\nRebar3 is an Erlang tool that makes it easy to create, develop, and\nrelease Erlang libraries, applications, and systems in a repeatable manner.\n\nRebar3 will:\n- respect and enforce standard Erlang/OTP conventions for project\n  structure so they are easily reusable by the community;\n- manage source dependencies and Erlang [packages](https://hex.pm)\n  while ensuring repeatable builds;\n- handle build artifacts, paths, and libraries such that standard\n  development tools can be used without a headache;\n- adapt to projects of all sizes on almost any platform;\n- treat [documentation](https://rebar3.org/docs/) as a feature,\n  and errors or lack of documentation as a bug.\n\nRebar3 is also a self-contained Erlang script. It is easy to distribute or\nembed directly in a project. Tasks or behaviours can be modified or expanded\nwith a [plugin system](https://rebar3.org/docs/configuration/plugins)\n[flexible enough](https://github.com/lfe-rebar3/rebar3_lfe) that even other languages\non the Erlang VM will use it as a build tool.\n\n## Why Rebar3\n\nRebar3 is the spiritual successor to [rebar\n2.x](https://github.com/rebar/rebar), which was the first usable build tool\nfor Erlang that ended up seeing widespread community adoption. It however\nhad several shortcomings that made it difficult to use with larger projects\nor with teams with users new to Erlang.\n\nRebar3 was our attempt at improving over the legacy of Rebar 2.x, providing the\nfeatures we felt it was missing, and to provide a better environment in which\nnewcomers joining our teams could develop.\n\n## Should I use Rebar3?\n\nIf your main language for your system is Erlang, that you value repeatable builds\nand want your various tools to integrate together, we do believe Rebar3 is the\nbest experience you can get.\n\n## Getting Started\n\nA [getting started guide is maintained on the official documentation website](https://rebar3.org/docs/getting-started),\nbut installing rebar3 can be done by any of the ways described below\n\nLatest stable compiled version:\n```bash\n$ wget https://s3.amazonaws.com/rebar3/rebar3 && chmod +x rebar3\n```\n\nFrom Source (assuming you have a full Erlang install):\n\n```bash\n$ git clone https://github.com/erlang/rebar3.git\n$ cd rebar3\n$ ./bootstrap\n```\n\nStable versions can also be obtained from the [releases page](https://github.com/erlang/rebar3/releases).\n\nThe rebar3 escript can also extract itself with a run script under the user's home directory:\n\n```bash\n$ ./rebar3 local install\n===> Extracting rebar3 libs to ~/.cache/rebar3/lib...\n===> Writing rebar3 run script ~/.cache/rebar3/bin/rebar3...\n===> Add to $PATH for use: export PATH=~/.cache/rebar3/bin:$PATH\n```\n\nTo keep it up to date after you've installed rebar3 this way you can use `rebar3 local upgrade` which\nfetches the latest stable release and extracts to the same place as above. A [nightly version can\nalso be obtained](https://s3.amazonaws.com/rebar3-nightly/rebar3) if desired.\n\nRebar3 may also be available on various OS-specific package managers such as\nFreeBSD Ports. Those are maintained by the community and Rebar3 maintainers\nthemselves are generally not involved in that process.\n\nIf you do not have a full Erlang install, we recommend using [erln8](https://erln8.github.io/erln8/)\nor [kerl](https://github.com/yrashk/kerl). For binary packages, use those provided\nby [Erlang Solutions](https://www.erlang-solutions.com/resources/download.html),\nbut be sure to choose the \"Standard\" download option or you'll have issues building\nprojects.\n\nDo note that if you are planning to work with multiple Erlang versions on the same machine, you will want to build Rebar3 with the oldest one of them. The 3 newest major Erlang releases are supported at any given time: if the newest version is OTP-26, building with versions as old as OTP-24 will be supported, and produce an executable that will work with those that follow.\n\n## Documentation\n\nRebar3 documentation is maintained on [https://rebar3.org/docs](https://rebar3.org/docs)\n\n## Features\n\nRebar3 supports the following features or tools by default, and may provide many\nothers via the plugin ecosystem:\n\n| features             | Description |\n|--------------------- |------------ |\n| Command composition  | Rebar3 allows multiple commands to be run in sequence by calling `rebar3 do <task1>,<task2>,...,<taskN>`. |\n| Command dependencies | Rebar3 commands know their own dependencies. If a test run needs to fetch dependencies and build them, it will do so. |\n| Command namespaces   | Allows multiple tools or commands to share the same name. |\n| Compiling            | Build the project, including fetching all of its dependencies by calling `rebar3 compile` |\n| Clean up artifacts   | Remove the compiled beam files from a project with `rebar3 clean` or just remove the `_build` directory to remove *all* compilation artifacts |\n| Code Coverage        | Various commands can be instrumented to accumulate code coverage data (such as `eunit` or `ct`). Reports can be generated with `rebar3 cover` |\n| Common Test          | The test framework can be run by calling `rebar3 ct` |\n| Dependencies         | Rebar3 maintains local copies of dependencies on a per-project basis. They are fetched deterministically, can be locked, upgraded, fetched from source, packages, or from local directories. See [Dependencies on the documentation website](https://rebar3.org/docs/configuration/dependencies/). Call `rebar3 tree` to show the whole dependency tree. |\n| Documentation        | Print help for rebar3 itself (`rebar3 help`) or for a specific task (`rebar3 help <task>`). Full reference at [rebar3.org](https://rebar3.org/docs). |\n| Dialyzer             | Run the Dialyzer analyzer on the project with `rebar3 dialyzer`. Base PLTs for each version of the language will be cached and reused for faster analysis |\n| Edoc                 | Generate documentation using edoc with `rebar3 edoc` |\n| Escript generation   | Rebar3 can be used to generate [escripts](http://www.erlang.org/doc/man/escript.html) providing an easy way to run all your applications on a system where Erlang is installed |\n| Eunit                | The test framework can be run by calling `rebar3 eunit` |\n| Locked dependencies  | Dependencies are going to be automatically locked to ensure repeatable builds. Versions can be changed with `rebar3 upgrade` or `rebar3 upgrade <app>`, or locks can be released altogether with `rebar3 unlock`. |\n| Packages             | A given [Hex package](https://hex.pm) can be inspected `rebar3 pkgs <name>`. This will output its description and available versions |\n| Path                 | While paths are managed automatically, you can print paths to the current build directories with `rebar3 path`. |\n| Plugins              | Rebar3 can be fully extended with [plugins](https://rebar3.org/docs/configuration/plugins/). List or upgrade plugins by using the plugin namespace (`rebar3 plugins`). |\n| Profiles             | Rebar3 can have subconfiguration options for different profiles, such as `test` or `prod`. These allow specific dependencies or compile options to be used in specific contexts. See [Profiles](https://rebar3.org/docs/configuration/profiles) in the docs. |\n| Releases             | Rebar3 supports [building releases](https://rebar3.org/docs/deployment/releases) with the `relx` tool, providing a way to ship fully self-contained Erlang systems. Release update scripts for live code updates can also be generated. |\n| Shell                | A full shell with your applications available can be started with `rebar3 shell`. From there, call tasks as `r3:do(compile)` to automatically recompile and reload the code without interruption |\n| Tarballs             | Releases can be packaged into tarballs ready to be deployed. |\n| Templates            | Configurable templates ship out of the box (try `rebar3 new` for a list or `rebar3 new help <template>` for a specific one). [Custom templates](https://rebar3.org/docs/tutorials/templates) are also supported, and plugins can also add their own. |\n| Xref                 | Run cross-reference analysis on the project with [xref](http://www.erlang.org/doc/apps/tools/xref_chapter.html) by calling `rebar3 xref`. |\n\n## Migrating From rebar2\n\nThe grievances we had with Rebar 2.x were not fixable without breaking\ncompatibility in some very important ways.\n\nA full guide titled [From Rebar 2.x to Rebar3](https://rebar3.org/docs/tutorials/from_rebar2_to_rebar3/)\nis provided on the documentation website.\n\nNotable modifications include mandating a more standard set of directory\nstructures, changing the handling of dependencies, moving some compilers (such\nas C, Diameter, ErlyDTL, or ProtoBuffs) to\n[plugins](https://rebar3.org/docs/configuration/plugins) rather than\nmaintaining them in core rebar, and moving release builds from reltool to\nrelx.\n\n## Additional Resources\n\nIn the case of problems that cannot be solved through documentation or examples, you\nmay want to try to contact members of the community for help. The community is\nalso where you want to go for questions about how to extend rebar, fill in bug\nreports, and so on.\n\nIf you need\nquick feedback, you can try the #rebar channel on\n[irc.freenode.net](https://freenode.net) or the #rebar3 channel on\n[erlanger.slack.com](https://erlanger.slack.com/). Be sure to check the\n[documentation](https://rebar3.org/docs) first, just to be sure you're not\nasking about things with well-known answers.\n\nFor bug reports, roadmaps, and issues, visit the [github issues\npage](https://github.com/erlang/rebar3/issues).\n\nGeneral rebar community resources and links can be found at\n[rebar3.org/docs/about/about-us/#community](https://rebar3.org/docs/about/about-us/#community)\n\nTo contribute to rebar3, please refer to [CONTRIBUTING](CONTRIBUTING.md)."
}
