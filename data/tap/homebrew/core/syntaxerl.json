{
  "name": "syntaxerl",
  "full_name": "syntaxerl",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Syntax checker for Erlang code and config files",
  "license": "MIT",
  "homepage": "https://github.com/ten0s/syntaxerl",
  "versions": {
    "stable": "0.15.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/ten0s/syntaxerl/archive/0.15.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "61d2d58e87a7a5eab1f58c5857b1a9c84a091d18cd683385258c3c0d7256eb64"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/syntaxerl/blobs/sha256:b8b0d346a0d701c3146aa9c6beedf9122be2efd84112b78b05d07e45d343cb00",
          "sha256": "b8b0d346a0d701c3146aa9c6beedf9122be2efd84112b78b05d07e45d343cb00"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/syntaxerl/blobs/sha256:3b345b0ceabb3e230634ef5f9d8fe3bfee1500f94dc94a79b504bbf6173a6758",
          "sha256": "3b345b0ceabb3e230634ef5f9d8fe3bfee1500f94dc94a79b504bbf6173a6758"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/syntaxerl/blobs/sha256:ab2fde926ac270aa052a969bef6b5a41deed043b9ca49255c77f6d4ec94d9041",
          "sha256": "ab2fde926ac270aa052a969bef6b5a41deed043b9ca49255c77f6d4ec94d9041"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/syntaxerl/blobs/sha256:9cc0483c3b108df574160bd98eb42cbfc72567e59fdefa71dc2998b45b2b65b5",
          "sha256": "9cc0483c3b108df574160bd98eb42cbfc72567e59fdefa71dc2998b45b2b65b5"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/syntaxerl/blobs/sha256:a534cfe8a626f0021cbb59bc36be178167b074b8305d4d56b7e38b6501735cc5",
          "sha256": "a534cfe8a626f0021cbb59bc36be178167b074b8305d4d56b7e38b6501735cc5"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/syntaxerl/blobs/sha256:ba352469157bac0b0645fc0a2cfc1ec738487e2fbf3f6e9c5842c8ce9d4e5a0c",
          "sha256": "ba352469157bac0b0645fc0a2cfc1ec738487e2fbf3f6e9c5842c8ce9d4e5a0c"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/syntaxerl/blobs/sha256:1d83b5507f1a4f1ac6ae3a09ae41056ab6588caab3d0737ac3707384faa45770",
          "sha256": "1d83b5507f1a4f1ac6ae3a09ae41056ab6588caab3d0737ac3707384faa45770"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/syntaxerl/blobs/sha256:b2b5d4afd0e7f5e4feb748dc7cc738f65612cb06e4f09a59f7b8f3fdcbb4c424",
          "sha256": "b2b5d4afd0e7f5e4feb748dc7cc738f65612cb06e4f09a59f7b8f3fdcbb4c424"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/syntaxerl/blobs/sha256:81bba7402fee8403b05bef71b2552e65303b0a4399c7465d5c653fdab659fb9a",
          "sha256": "81bba7402fee8403b05bef71b2552e65303b0a4399c7465d5c653fdab659fb9a"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/syntaxerl/blobs/sha256:4e47e3fbad8b97527b59bf69db9d9d765e04352e6a408827bd995091f6400f65",
          "sha256": "4e47e3fbad8b97527b59bf69db9d9d765e04352e6a408827bd995091f6400f65"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rebar3"
  ],
  "dependencies": [
    "erlang"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/syntaxerl.rb",
  "ruby_source_checksum": {
    "sha256": "28d08f1545d24d644d5f51fe7b75f76069f7911ad6d4329547b8cfd0dab8d76f"
  },
  "date_added": "2015-05-28T21:43:48+01:00",
  "readme": "[![Build Status](https://travis-ci.org/ten0s/syntaxerl.svg?branch=master)](https://travis-ci.org/ten0s/syntaxerl)\n\nSyntaxErl\n=========\n\nSyntaxErl is a syntax checker tool for Erlang. The syntax checker currently\nsupports erlang source files (.erl), erlang header files (.hrl), erlang configs\n(.config, .rel, .script, .app, .app.src), escript files (.erl, .escript, .es),\nleex files (.xrl), and yecc files (.yrl). Its main purpose is to be used by tools\nlike Emacs's [Flymake](https://github.com/ten0s/syntaxerl#flymake) and Vim's\n[Syntastic](https://github.com/ten0s/syntaxerl#syntastic) or\n[ALE](https://github.com/ten0s/syntaxerl#ale).\n\nSyntaxErl uses [rebar](https://github.com/rebar/rebar),\n[rebar3](https://github.com/erlang/rebar3) or [erlang.mk](https://erlang.mk)\nconfigs under the hood to determine deps and libs paths. Some common compile options\nare hardcoded, while others project specific are read from the config files.\nFor the syntax checker to work correctly, make sure that your project is compilable\nand all the deps are at their places.\n\nBuilding\n--------\n\nInformation on building and installing [Erlang/OTP](http://www.erlang.org)\ncan be found [here](https://github.com/erlang/otp/wiki/Installation)\n([more info](https://github.com/erlang/otp/blob/master/INSTALL.md)).\n\n### Dependencies\n\nTo build SyntaxErl you will need a working installation of Erlang, git, and GNU make.\n\n#### Building SyntaxErl\n\n```sh\n$ git clone git://github.com/ten0s/syntaxerl.git\n$ cd syntaxerl\n$ make\n```\n\nAfter performing the steps above in the current working directory you now\nhave a script called `syntaxerl'. Place this script anywhere in your path.\n\nUsage\n-----\n\n### Command line\n\n```sh\n$ syntaxerl\nSyntax checker for Erlang (0.16.0)\nUsage: syntaxerl [-d | --debug] <FILENAME>\n       syntaxerl <-h | --help>\n  -d, --debug    Enable debug output\n  -h, --help     Show this message\n```\n\n### Emacs\n\n#### Flymake\n\n```elisp\n;;;----------------------------------------\n;;; erlang-mode\n;;;----------------------------------------\n\n(setq erlang-root-dir \"/opt/r16b03-1\")\n(setq load-path (cons (car (file-expand-wildcards (concat erlang-root-dir \"/lib/tools-*/emacs\"))) load-path))\n(setq erlang-electric-commands nil)\n(require 'erlang-start)\n\n(add-hook 'erlang-mode-hook\n  '(lambda()\n     (imenu-add-to-menubar \"Imenu\")))\n\n; define auto erlang mode for these files/extensions.\n(add-to-list 'auto-mode-alist '(\".*\\\\.app\\\\'\"     . erlang-mode))\n(add-to-list 'auto-mode-alist '(\".*app\\\\.src\\\\'\"  . erlang-mode))\n(add-to-list 'auto-mode-alist '(\".*\\\\.config\\\\'\"  . erlang-mode))\n(add-to-list 'auto-mode-alist '(\".*\\\\.rel\\\\'\"     . erlang-mode))\n(add-to-list 'auto-mode-alist '(\".*\\\\.script\\\\'\"  . erlang-mode))\n(add-to-list 'auto-mode-alist '(\".*\\\\.escript\\\\'\" . erlang-mode))\n(add-to-list 'auto-mode-alist '(\".*\\\\.es\\\\'\"      . erlang-mode))\n(add-to-list 'auto-mode-alist '(\".*\\\\.xrl\\\\'\"     . erlang-mode))\n(add-to-list 'auto-mode-alist '(\".*\\\\.yrl\\\\'\"     . erlang-mode))\n\n; add include directory to default compile path.\n(defvar erlang-compile-extra-opts\n  '(bin_opt_info debug_info (i . \"../include\") (i . \"../deps\") (i . \"../../\") (i . \"../../../deps\")))\n\n; define where put beam files.\n(setq erlang-compile-outdir \"../ebin\")\n\n;;;----------------------------------------\n;;; flymake\n;;;----------------------------------------\n\n(require 'flymake)\n(require 'flymake-cursor) ; http://www.emacswiki.org/emacs/FlymakeCursor\n(setq flymake-log-level 3)\n\n(defun flymake-compile-script-path (path)\n  (let* ((temp-file (flymake-init-create-temp-buffer-copy\n                     'flymake-create-temp-inplace))\n         (local-file (file-relative-name\n                      temp-file\n                      (file-name-directory buffer-file-name))))\n    (list path (list local-file))))\n\n(defun flymake-syntaxerl ()\n  (flymake-compile-script-path \"~/bin/syntaxerl\"))\n\n(add-hook 'erlang-mode-hook\n  '(lambda()\n     (add-to-list 'flymake-allowed-file-name-masks '(\"\\\\.erl\\\\'\"     flymake-syntaxerl))\n     (add-to-list 'flymake-allowed-file-name-masks '(\"\\\\.hrl\\\\'\"     flymake-syntaxerl))\n     (add-to-list 'flymake-allowed-file-name-masks '(\"\\\\.xrl\\\\'\"     flymake-syntaxerl))\n     (add-to-list 'flymake-allowed-file-name-masks '(\"\\\\.yrl\\\\'\"     flymake-syntaxerl))\n     (add-to-list 'flymake-allowed-file-name-masks '(\"\\\\.app\\\\'\"     flymake-syntaxerl))\n     (add-to-list 'flymake-allowed-file-name-masks '(\"\\\\.app.src\\\\'\" flymake-syntaxerl))\n     (add-to-list 'flymake-allowed-file-name-masks '(\"\\\\.config\\\\'\"  flymake-syntaxerl))\n     (add-to-list 'flymake-allowed-file-name-masks '(\"\\\\.rel\\\\'\"     flymake-syntaxerl))\n     (add-to-list 'flymake-allowed-file-name-masks '(\"\\\\.script\\\\'\"  flymake-syntaxerl))\n     (add-to-list 'flymake-allowed-file-name-masks '(\"\\\\.escript\\\\'\" flymake-syntaxerl))\n     (add-to-list 'flymake-allowed-file-name-masks '(\"\\\\.es\\\\'\"      flymake-syntaxerl))\n\n     ;; should be the last.\n     (flymake-mode 1)\n))\n\n; see /usr/local/lib/erlang/lib/tools-<Ver>/emacs/erlang-flymake.erl\n(defun erlang-flymake-only-on-save ()\n  \"Trigger flymake only when the buffer is saved (disables syntax\ncheck on newline and when there are no changes).\"\n  (interactive)\n  ;; There doesn't seem to be a way of disabling this; set to the\n  ;; largest int available as a workaround (most-positive-fixnum\n  ;; equates to 8.5 years on my machine, so it ought to be enough ;-) )\n  (setq flymake-no-changes-timeout most-positive-fixnum)\n  (setq flymake-start-syntax-check-on-newline nil))\n\n(erlang-flymake-only-on-save)\n```\n\n#### Erlang-flymake\n\nYour help is welcome.\n\n### Vim\n\n#### Syntastic\n\nSetup everything as described [here](https://github.com/scrooloose/syntastic).\nThen add\n\n    let g:syntastic_erlang_checkers=['syntaxerl']\n\nto your vimrc.\n\nThanks [locojay](https://github.com/locojay) for that.\n\n#### ALE\n\nInstall [ALE](https://github.com/w0rp/ale) plugin for vim 8+ or neovim.\n\nTo disable erlc linter please add the following lines to your vimrc:\n\n```\nlet g:ale_linters = {\n\\   'erlang': ['syntaxerl'],\n\\}\n```"
}
