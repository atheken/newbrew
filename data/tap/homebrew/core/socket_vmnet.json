{
  "name": "socket_vmnet",
  "full_name": "socket_vmnet",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Daemon to provide vmnet.framework support for rootless QEMU",
  "license": "Apache-2.0",
  "homepage": "https://github.com/lima-vm/socket_vmnet",
  "versions": {
    "stable": "1.1.2",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/lima-vm/socket_vmnet/archive/refs/tags/v1.1.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "0c0c8670d7512f75a427df601a4d15b7bef888e07c8f54adce83a5d8be1423a4"
    },
    "head": {
      "url": "https://github.com/lima-vm/socket_vmnet.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/socket_vmnet/blobs/sha256:5b80c0b4a8d5d9ec994161b7ccc3a712238bacf200e1ea3fddaaf32dc9706725",
          "sha256": "5b80c0b4a8d5d9ec994161b7ccc3a712238bacf200e1ea3fddaaf32dc9706725"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/socket_vmnet/blobs/sha256:edcfe4eac3bc20de7cdf15e62f420aef9b69ed2510aa725ad30b49087b2ab53c",
          "sha256": "edcfe4eac3bc20de7cdf15e62f420aef9b69ed2510aa725ad30b49087b2ab53c"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/socket_vmnet/blobs/sha256:4c8593ba13dff05be5a3432b7a92da5526f12097bea10329f4c6b9ae43311725",
          "sha256": "4c8593ba13dff05be5a3432b7a92da5526f12097bea10329f4c6b9ae43311725"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/socket_vmnet/blobs/sha256:b8f647a42a7d6cc4ef91ece3f641a427c06c81645a9c04a80a71b0441f204885",
          "sha256": "b8f647a42a7d6cc4ef91ece3f641a427c06c81645a9c04a80a71b0441f204885"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/socket_vmnet/blobs/sha256:a3569285d7af1b1d8cdb14d3e4f456287c9fc5f082d890f9917f335eee957213",
          "sha256": "a3569285d7af1b1d8cdb14d3e4f456287c9fc5f082d890f9917f335eee957213"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/socket_vmnet/blobs/sha256:730dc7cbe4f6686591dd909733d764e33e0ef3dd7dcae3e358a0f09f4a263715",
          "sha256": "730dc7cbe4f6686591dd909733d764e33e0ef3dd7dcae3e358a0f09f4a263715"
        }
      }
    }
  },
  "keg_only": true,
  "keg_only_reason": {
    "reason": "Homebrew's bin directory is often writable by a non-admin user",
    "explanation": ""
  },
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [
    {
      "name": "macos",
      "cask": null,
      "download": null,
      "version": null,
      "contexts": [],
      "specs": [
        "stable",
        "head"
      ]
    },
    {
      "name": "macos",
      "cask": null,
      "download": null,
      "version": "10.15",
      "contexts": [],
      "specs": [
        "stable",
        "head"
      ]
    }
  ],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": "socket_vmnet requires root privileges so you will need to run\n  `sudo $HOMEBREW_PREFIX/opt/socket_vmnet/socket_vmnet` or `sudo brew services start socket_vmnet`.\nYou should be certain that you trust any software you grant root privileges.\n",
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": true,
  "service": {
    "run": [
      "/home/linuxbrew/.linuxbrew/opt/socket_vmnet/bin/socket_vmnet",
      "--vmnet-gateway=192.168.105.1",
      "/home/linuxbrew/.linuxbrew/var/run/socket_vmnet"
    ],
    "run_type": "immediate",
    "require_root": true,
    "log_path": "/home/linuxbrew/.linuxbrew/var/log/socket_vmnet/stdout",
    "error_log_path": "/home/linuxbrew/.linuxbrew/var/log/socket_vmnet/stderr"
  },
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/socket_vmnet.rb",
  "ruby_source_checksum": {
    "sha256": "d475cfe911988029dddad942c68ce04c46a235a92b5ca4f95fd808d3f8bdbc39"
  },
  "date_added": "2022-12-01T05:39:49+00:00",
  "readme": "# socket_vmnet: vmnet.framework support for rootless and VDE-less QEMU\n\n`socket_vmnet` provides [vmnet.framework](https://developer.apple.com/documentation/vmnet) support for QEMU.\n\n`socket_vmnet` does not require QEMU to run as the root user.\n\n(But `socket_vmnet` itself has to run as the root, in most cases.)\n\n`socket_vmnet` was forked from [`vde_vmnet`](https://github.com/lima-vm/vde_vmnet) v0.6.0.\nUnlike `vde_vmnet`, `socket_vmnet` does not depend on VDE.\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Install](#install)\n  - [From Homebrew](#from-homebrew)\n  - [From source](#from-source)\n- [Usage](#usage)\n  - [QEMU](#qemu)\n  - [Lima](#lima)\n- [Advanced usage](#advanced-usage)\n  - [Multi VM](#multi-vm)\n  - [Bridged mode](#bridged-mode)\n- [FAQs](#faqs)\n  - [Why does `socket_vmnet` require root?](#why-does-socket_vmnet-require-root)\n  - [Is it possible to run `socket_vmnet` with SETUID?](#is-it-possible-to-run-socket_vmnet-with-setuid)\n  - [How is socket_vmnet related to vde_vmnet?](#how-is-socket_vmnet-related-to-vde_vmnet)\n  - [How is socket_vmnet related to QEMU-builtin vmnet support?](#how-is-socket_vmnet-related-to-qemu-builtin-vmnet-support)\n  - [How to use static IP addresses?](#how-to-use-static-ip-addresses)\n  - [How to reserve DHCP addresses?](#how-to-reserve-dhcp-addresses)\n  - [IP address is not assigned](#ip-address-is-not-assigned)\n- [Links](#links)\n- [Troubleshooting](#troubleshooting)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Install\n\nRequires macOS 10.15 or later.\n\n### From Homebrew\n\n```bash\nbrew install socket_vmnet\n```\n\nThe binaries will be installed onto the following paths:\n- `${HOMEBREW_PREFIX}/opt/socket_vmnet/bin/socket_vmnet`\n- `${HOMEBREW_PREFIX}/opt/socket_vmnet/bin/socket_vmnet_client`\n\nThe `${HOMEBREW_PREFIX}` path defaults to `/opt/homebrew` on ARM, `/usr/local` on Intel.\n\nThe `${HOMEBREW_PREFIX}/opt/socket_vmnet` directory is usually symlinked to `../Cellar/socket_vmnet/${VERSION}`.\n\nRun the following command to start the daemon:\n```bash\nmkdir -p ${HOMEBREW_PREFIX}/var/run\nsudo ${HOMEBREW_PREFIX}/opt/socket_vmnet/bin/socket_vmnet --vmnet-gateway=192.168.105.1 ${HOMEBREW_PREFIX}/var/run/socket_vmnet\n```\n\n> **Warning**\n>\n> Typically, the `socket_vmnet` binary in the `${HOMEBREW_PREFIX}` can be replaced by any user in the `admin` group.\n\n<details>\n\n<summary>Launchd (optional, not needed for Lima)</summary>\n\n<p>\n\n\nTo install the launchd service:\n```bash\nbrew tap homebrew/services\n# sudo is necessary for the next line\nsudo ${HOMEBREW_PREFIX}/bin/brew services start socket_vmnet\n```\n\nThe launchd unit file will be installed as `/Library/LaunchDaemons/homebrew.mxcl.socket_vmnet.plist`.\n\nDefault configuration:\n\nConfig  | Value\n--------|--------------------------------------------------\nSocket  | `${HOMEBREW_PREFIX}/var/run/socket_vmnet`\nStdout  | `${HOMEBREW_PREFIX}/var/log/socket_vmnet/stdout`\nStderr  | `${HOMEBREW_PREFIX}/var/log/socket_vmnet/stderr`\nGateway | 192.168.105.1\n\nTo uninstall the launchd service:\n```bash\nsudo ${HOMEBREW_PREFIX}/bin/brew services stop socket_vmnet\n```\n\n</p>\n\n</details>\n\n### From source\n\n<details>\n\n<p>\n\n```bash\nsudo make PREFIX=/opt/socket_vmnet install.bin\n```\n\nThe `PREFIX` dir below does not necessarily need to be `/opt/socket_vmnet`, however, it is highly recommended\nto set the prefix to a directory that can be only written by the root.\n\nNote that `/usr/local/bin` is sometimes chowned for a non-admin user, so `/usr/local` is *not* an appropriate prefix.\n\nThe binaries will be installed onto the following paths:\n- `/opt/socket_vmnet/bin/socket_vmnet`\n- `/opt/socket_vmnet/bin/socket_vmnet_client`\n\nRun the following command to start the daemon:\n```bash\nsudo /opt/socket_vmnet/bin/socket_vmnet --vmnet-gateway=192.168.105.1 /var/run/socket_vmnet\n```\n\n<details>\n\n<summary>Launchd (optional, not needed for Lima)</summary>\n\n<p>\n\n\nTo install the launchd service:\n```bash\nsudo make PREFIX=/opt/socket_vmnet install.launchd\n```\n\nThe launchd unit file will be installed as `/Library/LaunchDaemons/io.github.lima-vm.socket_vmnet.plist`.\n\nDefault configuration:\n\nConfig  | Value\n--------|--------------------------------------------------\nSocket  | `/var/run/socket_vmnet`\nStdout  | `/var/log/socket_vmnet/stdout`\nStderr  | `/var/log/socket_vmnet/stderr`\nGateway | 192.168.105.1\n\n\nTo uninstall the launchd service:\n```bash\nsudo make PREFIX=/opt/socket_vmnet uninstall.launchd\n```\n\n</p>\n\n</details>\n\n</p>\n\n</details>\n\n## Usage\n\n### QEMU\nMake sure that the `socket_vmnet` daemon is running, and execute QEMU via `socket_vmnet_client` as follows:\n\n```console\n${HOMEBREW_PREFIX}/opt/socket_vmnet/bin/socket_vmnet_client \\\n  ${HOMEBREW_PREFIX}/var/run/socket_vmnet \\\n  qemu-system-x86_64 \\\n  -device virtio-net-pci,netdev=net0 -netdev socket,id=net0,fd=3 \\\n  -m 4096 -accel hvf -cdrom ubuntu-22.04-desktop-amd64.iso\n```\n\nThe guest IP is assigned by the DHCP server provided by macOS.\n\nThe guest is accessible to the internet, and the guest IP is accessible from the host.\n\nTo confirm, run `sudo apt-get update && sudo apt-get install -y apache2` in the guest, and access the guest IP via Safari on the host.\n\n### Lima\n\nLima (since v0.12.0) provides built-in support for `socket_vmnet`:\n\n```console\n$ limactl sudoers | sudo tee /etc/sudoers.d/lima\n$ limactl start --name=default template://vmnet\n```\n\nSee also https://github.com/lima-vm/lima/blob/master/docs/network.md\n\n## Advanced usage\n### Multi VM\nMultiple VMs can be connected to a single `socket_vmnet` instance.\n\nMake sure to specify unique MAC addresses to VMs: `-device virtio-net-pci,netdev=net0,mac=de:ad:be:ef:00:01` .\n\nNOTE: don't confuse MAC addresses of VMs with the MAC address of `socket_vmnet` itself that is printed as `vmnet_mac_address` in the debug log.\nYou do not need to configure (and you can't, currently) the MAC address of `socket_vmnet` itself.\n\n### Bridged mode\n\nSee [`./launchd/io.github.lima-vm.socket_vmnet.bridged.en0.plist`](./launchd/io.github.lima-vm.socket_vmnet.bridged.en0.plist).\n\nInstall:\n```bash\nBRIDGED=en0\nsed -e \"s@/opt@${HOMEBREW_PREFIX}/opt@g; s@/var@${HOMEBREW_PREFIX}/var@g; s@en0@${BRIDGED}@g\" ./launchd/io.github.lima-vm.socket_vmnet.bridged.en0.plist \\\n  | sudo tee /Library/LaunchDaemons/io.github.lima-vm.socket_vmnet.bridged.${BRIDGED}.plist\nsudo launchctl bootstrap system /Library/LaunchDaemons/io.github.lima-vm.socket_vmnet.bridged.${BRIDGED}.plist\nsudo launchctl enable system/io.github.lima-vm.socket_vmnet.bridged.${BRIDGED}\nsudo launchctl kickstart -kp system/io.github.lima-vm.socket_vmnet.bridged.${BRIDGED}\n```\n\nUse `${HOMEBREW_PREFIX}/var/run/socket_vmnet.bridged.en0` as the socket.\n\nUninstall:\n```bash\nBRIDGED=en0\nsudo launchctl bootout system /Library/LaunchDaemons/io.github.lima-vm.socket_vmnet.bridged.${BRIDGED}.plist\nsudo rm /Library/LaunchDaemons/io.github.lima-vm.socket_vmnet.bridged.${BRIDGED}.plist\n```\n\n## FAQs\n\n### Why does `socket_vmnet` require root?\n\nRunning `socket_vmnet` without root could be possible by signing the `socket_vmnet` binary with `com.apple.vm.networking` entitlement.\n\nHowever, signing a binary with `com.apple.vm.networking` entitlement seems to require some contract with Apple.\n:disappointed:\n\n> This entitlement is restricted to developers of virtualization software. To request this entitlement, contact your Apple representative.\n\nhttps://developer.apple.com/documentation/bundleresources/entitlements/com_apple_vm_networking\n\n### Is it possible to run `socket_vmnet` with SETUID?\n\nYes, but discouraged, as it allows non-root users to write arbitrary files, by specifying certain CLI args and environment variables.\n\nInstead, consider using launchd or sudo.\n\nSee [`./etc_sudoers.d/socket_vmnet`](./etc_sudoers.d/socket_vmnet) to allow running `sudo socket_vmnet` with reduced set of args and environment variables.\n\n### How is socket_vmnet related to vde_vmnet?\n\n`socket_vmnet` was forked from [`vde_vmnet`](https://github.com/lima-vm/vde_vmnet) v0.6.0.\nUnlike `vde_vmnet`, `socket_vmnet` does not depend on VDE.\n\n### How is socket_vmnet related to QEMU-builtin vmnet support?\nQEMU 7.1 added [the built-in support for vmnet](https://github.com/qemu/qemu/blob/v7.1.0/qapi/net.json#L626-L631).\n\nHowever, QEMU-builtin vmnet requires running the entire QEMU process as root.\n\nOn the other hand, `socket_vmnet` does not require the entire QEMU process to run as root, though `socket_vmnet` has to run as root.\n\n### How to use static IP addresses?\nWhen `--vmnet-gateway=IP` is set to \"192.168.105.1\", the whole subnet (192.168.105.2-192.168.105.254) is used as the DHCP range.\n\nTo use static IP addresses, limit the DHCP range with `--vmnet-dhcp-end=IP`.\n\nFor example, `--vmnet-gateway=192.168.105.1 --vmnet-dhcp-end=192.168.105.100` allows using `192.168.105.101-192.168.105.254`\nas non-DHCP static addresses.\n\n### How to reserve DHCP addresses?\n- Decide a unique MAC address for the VM, e.g. `de:ad:be:ef:00:01`.\n\n- Decide a reserved IP address, e.g., \"192.168.105.100\"\n\n- Create `/etc/bootptab` like this. Make sure not to drop the \"%%\" header.\n```\n# bootptab\n%%\n# hostname      hwtype  hwaddr              ipaddr          bootfile\ntmp-vm01        1       de:ad:be:ef:00:01   192.168.105.100\n```\n\n- Reload the DHCP daemon.\n```\nsudo /bin/launchctl kickstart -kp system/com.apple.bootpd\n```\n\n- Run QEMU with the MAC address: `-device virtio-net-pci,netdev=net0,mac=de:ad:be:ef:00:01` .\n\nNOTE: don't confuse MAC addresses of VMs with the MAC address of `socket_vmnet` itself that is printed as `vmnet_mac_address` in the debug log.\nYou do not need to configure (and you can't, currently) the MAC address of `socket_vmnet` itself.\n\n### IP address is not assigned\nTry the following commands:\n```console\n/usr/libexec/ApplicationFirewall/socketfilterfw --add /usr/libexec/bootpd\n/usr/libexec/ApplicationFirewall/socketfilterfw --unblock /usr/libexec/bootpd\n```\n\n## Links\n- https://developer.apple.com/documentation/vmnet\n- https://developer.apple.com/documentation/bundleresources/entitlements/com_apple_vm_networking\n- [`file:///Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks/vmnet.framework/Versions/Current/Headers/vmnet.h`](file:///Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks/vmnet.framework/Versions/Current/Headers/vmnet.h)\n\n## Troubleshooting\n- Set environment variable `DEBUG=1`\n- See `${HOMEBREW_PREFIX}/var/log/socket_vmnet/{stdout,stderr}` (when using launchd).\n  The path was previously `${HOMEBREW_PREFIX}/var/run/socket_vmnet.{stdout,stderr}` until March 2023."
}
