{
  "name": "docuum",
  "full_name": "docuum",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Perform least recently used (LRU) eviction of Docker images",
  "license": "MIT",
  "homepage": "https://github.com/stepchowfun/docuum",
  "versions": {
    "stable": "0.22.4",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/stepchowfun/docuum/archive/v0.22.4.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "d5653d1aaf5a0ea5d0122155cd482a57086e47b4c5fa4e4d6c8a774801765822"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/docuum/blobs/sha256:1998523f2e7ee00a3893b04b907c47936a2f9673d128159ef8bdeb8ef4079ad2",
          "sha256": "1998523f2e7ee00a3893b04b907c47936a2f9673d128159ef8bdeb8ef4079ad2"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/docuum/blobs/sha256:91f26fc8c6e5bfe0f7a527e9d46cbb4e158cd08ee06b0b506134ceeddd8cdb37",
          "sha256": "91f26fc8c6e5bfe0f7a527e9d46cbb4e158cd08ee06b0b506134ceeddd8cdb37"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/docuum/blobs/sha256:374dc2b41c9075bfb7a3eb8fdb9ceedaa9963397ad4dc48d8b173224c8fe1f78",
          "sha256": "374dc2b41c9075bfb7a3eb8fdb9ceedaa9963397ad4dc48d8b173224c8fe1f78"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/docuum/blobs/sha256:c7d22bf0cced4b18c52b3bfbd15a80964135b76e888c004c0402f3a2eae939c0",
          "sha256": "c7d22bf0cced4b18c52b3bfbd15a80964135b76e888c004c0402f3a2eae939c0"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/docuum/blobs/sha256:0719108fcdb843450cd290a1a50fea33c0851e42d4ede180cd4e50ea5aab9b72",
          "sha256": "0719108fcdb843450cd290a1a50fea33c0851e42d4ede180cd4e50ea5aab9b72"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/docuum/blobs/sha256:f625120f9dd07688f19495e2c628887f2bf95d735875ed259215ba4b4695daa3",
          "sha256": "f625120f9dd07688f19495e2c628887f2bf95d735875ed259215ba4b4695daa3"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/docuum/blobs/sha256:78e83fbe523a9b5260362fd29a8671eaf0b44def71b745a5a9dc9683a4f25f0a",
          "sha256": "78e83fbe523a9b5260362fd29a8671eaf0b44def71b745a5a9dc9683a4f25f0a"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": {
    "run": "/home/linuxbrew/.linuxbrew/opt/docuum/bin/docuum",
    "run_type": "immediate",
    "keep_alive": {
      "always": true
    },
    "environment_variables": {
      "PATH": "/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin"
    },
    "log_path": "/home/linuxbrew/.linuxbrew/var/log/docuum.log",
    "error_log_path": "/home/linuxbrew/.linuxbrew/var/log/docuum.log"
  },
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/docuum.rb",
  "ruby_source_checksum": {
    "sha256": "7cd71d5d2441221596020396b66afb120e30186041db12406d2c5edf3ccbb242"
  },
  "date_added": "2021-08-07T13:35:07+00:00",
  "readme": "# Docuum: LRU eviction of Docker images\n\n[![Build status](https://github.com/stepchowfun/docuum/workflows/Continuous%20integration/badge.svg?branch=main)](https://github.com/stepchowfun/docuum/actions?query=branch%3Amain)\n\n*Docuum* performs least recently used (LRU) eviction of Docker images to keep the disk usage below a given threshold.\n\nDocker's built-in `docker image prune --all --filter until=â€¦` command serves a similar purpose. However, the built-in solution isn't ideal since it uses the image creation time, rather than the last usage time, to determine which images to remove. That means it can delete frequently used images, which may be expensive to rebuild.\n\nDocuum is ideal for use cases such as continuous integration (CI) workers, developer workstations, or any other environment in which Docker images accumulate on disk over time. Docuum works well with tools like [Toast](https://github.com/stepchowfun/toast) and [Docker Compose](https://docs.docker.com/compose/).\n\nDocuum is used by Airbnb on its fleet of 1.5k+ CI workers.\n\n## How it works\n\n[Docker doesn't record when an image was last used.](https://github.com/moby/moby/issues/4237) To work around this, Docuum listens for notifications via `docker events` to learn when images are used. It maintains a small piece of state in a local data directory (see [this](https://docs.rs/dirs/3.0.2/dirs/fn.data_local_dir.html) for details about where this directory is on various platforms). That persisted state allows you to freely restart Docuum (or the whole machine) without losing the image usage timestamp data.\n\nWhen Docuum first starts and subsequently whenever a new Docker event comes in, LRU eviction is performed until the total disk usage due to Docker images is below the given threshold. This design has a few advantages over evicting images based on a fixed [time to live](https://en.wikipedia.org/wiki/Time_to_live) (TTL), which is what various other tools in the Docker ecosystem do:\n\n1. There is no need to configure and tune an interval to run on. Docuum evicts images immediately whenever the disk usage exceeds the threshold without waiting for any timers.\n2. Docuum uses no CPU resources when there is no Docker activity. You can run it on your laptop without worrying about draining your battery.\n3. In order to prevent your disk from filling up, it's more straightforward to set a threshold based on disk usage rather than guessing an appropriate maximum image age.\n\nDocuum also respects the parent-child relationships between images. In particular, it will delete children of a parent before deleting the parent (even if the children were used more recently than the parent), because Docker doesn't allow images with children to be deleted.\n\n## Usage\n\nOnce Docuum is [installed](#installation-instructions), you can run it manually from the command line as follows:\n\n```sh\ndocuum --threshold '10 GB'\n```\n\nDocuum will then start listening for Docker events. You can use `Ctrl`+`C` to stop it.\n\nYou probably want to run Docuum as a [daemon](https://en.wikipedia.org/wiki/Daemon_\\(computing\\)), e.g., with [launchd](https://www.launchd.info/), [systemd](https://www.freedesktop.org/wiki/Software/systemd/), etc. See the [Configuring your operating system to run the binary as a daemon](#configuring-your-operating-system-to-run-the-binary-as-a-daemon) section below for instructions.\n\nHere are the supported command-line options:\n\n```\nUSAGE:\n    docuum\n\nOPTIONS:\n    -d, --deletion-chunk-size <DELETION CHUNK SIZE>\n            Removes specified quantity of images at a time (default: 1)\n\n    -h, --help\n            Prints help information\n\n    -k, --keep <REGEX>...\n            Prevents deletion of images for which repository:tag matches <REGEX>\n\n    -t, --threshold <THRESHOLD>\n            Sets the maximum amount of space to be used for Docker images (default: 10 GB)\n\n    -v, --version\n            Prints version information\n```\n\nThe `--threshold` flag accepts [multiple representations](https://docs.rs/byte-unit/4.0.12/byte_unit/struct.Byte.html#examples-2), like `10 GB`, `10 GiB`, or `10GB`. On Linux, percentage-based thresholds like `50%` are also supported.\n\nYou can change the log verbosity by setting an environment variable named `LOG_LEVEL` to one of `trace`, `debug`, `info`, `warning`, or `error`. The default is `debug`.\n\n## Installation instructions\n\nInstallation consists of two steps:\n\n1. Installing the binary\n2. Configuring your operating system to run the binary as a daemon\n\n### Installing the binary\n\n#### Installation on macOS or Linux (AArch64 or x86-64)\n\nIf you're running macOS or Linux (AArch64 or x86-64), you can install Docuum with this command:\n\n```sh\ncurl https://raw.githubusercontent.com/stepchowfun/docuum/main/install.sh -LSfs | sh\n```\n\nThe same command can be used again to update to the latest version.\n\nThe installation script supports the following optional environment variables:\n\n- `VERSION=x.y.z` (defaults to the latest version)\n- `PREFIX=/path/to/install` (defaults to `/usr/local/bin`)\n\nFor example, the following will install Docuum into the working directory:\n\n```sh\ncurl https://raw.githubusercontent.com/stepchowfun/docuum/main/install.sh -LSfs | PREFIX=. sh\n```\n\nIf you prefer not to use this installation method, you can download the binary from the [releases page](https://github.com/stepchowfun/docuum/releases), make it executable (e.g., with `chmod`), and place it in some directory in your [`PATH`](https://en.wikipedia.org/wiki/PATH_\\(variable\\)) (e.g., `/usr/local/bin`).\n\n#### Installation on Windows (AArch64 or x86-64)\n\nIf you're running Windows (AArch64 or x86-64), download the latest binary from the [releases page](https://github.com/stepchowfun/docuum/releases) and rename it to `docuum` (or `docuum.exe` if you have file extensions visible). Create a directory called `Docuum` in your `%PROGRAMFILES%` directory (e.g., `C:\\Program Files\\Docuum`), and place the renamed binary in there. Then, in the \"Advanced\" tab of the \"System Properties\" section of Control Panel, click on \"Environment Variables...\" and add the full path to the new `Docuum` directory to the `PATH` variable under \"System variables\". Note that the `Program Files` directory might have a different name if Windows is configured for a language other than English.\n\nTo update to an existing installation, simply replace the existing binary.\n\n#### Installation with Homebrew\n\nIf you have [Homebrew](https://brew.sh/), you can install Docuum as follows:\n\n```sh\nbrew install docuum\n```\n\nYou can update an existing installation with `brew upgrade docuum`.\n\n#### Installation with Cargo\n\nIf you have [Cargo](https://doc.rust-lang.org/cargo/), you can install Docuum as follows:\n\n```sh\ncargo install docuum\n```\n\nYou can run that command with `--force` to update an existing installation.\n\n#### Running Docuum in a Docker container on a host capable of running Linux containers\n\nIf you prefer not to install Docuum on your system and you're running macOS or Linux on an x86-64 CPU, you can run it in a container:\n\n```sh\ndocker run \\\n  --init \\\n  --rm \\\n  --tty \\\n  --name docuum \\\n  --volume /var/run/docker.sock:/var/run/docker.sock \\\n  --volume docuum:/root \\\n  stephanmisc/docuum --threshold '10 GB'\n```\n\nIf you're on a Windows system configured to run Linux containers, use this command:\n\n```powershell\ndocker run `\n  --init `\n  --rm `\n  --tty `\n  --name docuum `\n  --volume //var/run/docker.sock:/var/run/docker.sock `\n  --volume docuum:/root `\n  stephanmisc/docuum --threshold '10 GB'\n```\n\nWe don't currently publish a Windows-based image, because some Windows machines (namely, those which run containers with process isolation rather than Hyper-V) can only run Windows containers that were built for the exact build of Windows (e.g., 1809) which is running on the host. This makes Windows-based images less portable, and as a result we'd need to publish a separate Windows-based image for each build of Windows we want to support. At this time, we don't have the infrastructure to do that.\n\nThe instructions below for configuring your operating system to run Docuum as a daemon assume it's installed as an executable binary. If you prefer to run it as a Docker container, change the relevant service definition to run a Docker command like the relevant one above, with the following adjustments:\n\n- Omit the `--tty` flag. This prevents Docuum from printing colored logs, which you probably don't want for a daemon.\n- Configure Docker as a hard dependency. Ordinarily, Docuum and Docker can be started in any order, and Docuum will patiently wait for Docker to start if needed. However, when running Docuum as a Docker container, then of course Docker must be started first.\n\n### Configuring your operating system to run the binary as a daemon\n\n#### Creating a launchd service on macOS\n\nOn macOS, [launchd](https://www.launchd.info/) can be used to run Docuum as a daemon. Create a file (owned by root) called `/Library/LaunchDaemons/local.docuum.plist` with the following contents, adjusting the arguments as needed:\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"https://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n    <dict>\n        <key>Label</key>\n        <string>local.docuum</string>\n        <key>Program</key>\n        <string>/usr/local/bin/docuum</string>\n        <key>ProgramArguments</key>\n        <array>\n            <string>/usr/local/bin/docuum</string>\n            <string>--threshold</string>\n            <string>10 GB</string>\n        </array>\n        <key>StandardOutPath</key>\n        <string>/var/log/docuum.log</string>\n        <key>StandardErrorPath</key>\n        <string>/var/log/docuum.log</string>\n        <key>EnvironmentVariables</key>\n        <dict>\n            <key>PATH</key>\n            <string>/bin:/usr/bin:/usr/local/bin</string>\n        </dict>\n        <key>KeepAlive</key>\n        <true/>\n    </dict>\n</plist>\n```\n\nRun `sudo launchctl load /Library/LaunchDaemons/local.docuum.plist` to start the service. You can view the logs with `tail -F /var/log/docuum.log`.\n\n#### Creating a systemd service on Linux\n\nOn most Linux distributions, [systemd](https://www.freedesktop.org/wiki/Software/systemd/) can be used to run Docuum as a daemon. Create a file (owned by root) called `/etc/systemd/system/docuum.service` with the following contents, adjusting the arguments as needed:\n\n```ini\n[Unit]\nDescription=Docuum\nAfter=docker.service\nWants=docker.service\n\n[Service]\nEnvironment='THRESHOLD=10 GB'\nExecStart=/usr/local/bin/docuum --threshold ${THRESHOLD}\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\n```\n\nRun `sudo systemctl enable docuum --now` to enable and start the service. You can view the logs with `sudo journalctl --follow --unit docuum`.\n\n#### Creating an NSSM service on Windows\n\nOn Windows, [NSSM](https://nssm.cc/), the \"Non-Sucking Service Manager\", can be used to run Docuum as a daemon. [Install NSSM](https://nssm.cc/download) by downloading the binary and adding it to your `PATH` (see the [Installation on Windows (x86-64)](#installation-on-windows-x86-64) section for instructions on how to configure this environment variable), then run Windows Terminal _as Administrator_ and enter the following command:\n\n```powershell\nnssm install Docuum\n```\n\nNSSM will then open a configuration window. Configure the following:\n\n- In the `Application` tab, select the path to the Docuum binary. You can optionally add arguments like `--threshold \"10 GB\"`.\n- Optionally, in the `I/O` tab, choose where you want the logs to be written.\n\nThen click the `Install service` button. Back in Windows Terminal, run the following to start the service:\n\n```powershell\nnssm start Docuum\n```\n\nIf you configured a path for the log file in the `I/O` tab of the installation window, you can view those logs with `Get-Content -Wait docuum.log` (adjusting the file path as needed).\n\n## Requirements\n\n- Docuum requires [Docker Engine](https://www.docker.com/products/container-runtime) 17.03.0 or later.\n  - If you are using Docker Engine 18.09.0 or later with [BuildKit mode](https://docs.docker.com/develop/develop-images/build_enhancements/) enabled, Docker does not create intermediate images for each build step and instead uses a separate \"build cache\". Docuum will only clean up images, not the Buildkit build cache. BuildKit's built-in garbage collection feature can be used for the build cache (e.g., `docker builder prune --all --force --keep-storage '10 GB'`). If you are not using BuildKit mode, Docker's caching mechanism uses intermediate images, and Docuum will happily vacuum such images as usual."
}
