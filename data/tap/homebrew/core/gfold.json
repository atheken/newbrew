{
  "name": "gfold",
  "full_name": "gfold",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Help keep track of your Git repositories, written in Rust",
  "license": "Apache-2.0",
  "homepage": "https://github.com/nickgerace/gfold",
  "versions": {
    "stable": "4.4.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/nickgerace/gfold/archive/refs/tags/4.4.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "d1f8c5a578bc20751a8584c73d4df3092364b0616226656d71dbf954edd481c3"
    },
    "head": {
      "url": "https://github.com/nickgerace/gfold.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/gfold/blobs/sha256:387c3b56addb62d66d5b4a90fd4f9c5a810b0410ff4968db25ce6dc918d16dac",
          "sha256": "387c3b56addb62d66d5b4a90fd4f9c5a810b0410ff4968db25ce6dc918d16dac"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/gfold/blobs/sha256:b10b2cc728ebaba127538a8c6c32cf6735cd1c464305c8bfb68bc12554188683",
          "sha256": "b10b2cc728ebaba127538a8c6c32cf6735cd1c464305c8bfb68bc12554188683"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/gfold/blobs/sha256:f458032d5fbfc31ade19cc9a5c633268ba5bdbb1376d11ccd816d8b99685da96",
          "sha256": "f458032d5fbfc31ade19cc9a5c633268ba5bdbb1376d11ccd816d8b99685da96"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/gfold/blobs/sha256:808d959ef6219ac17f0005f8264fb1c0ec49401d63a74cefe200772937549fde",
          "sha256": "808d959ef6219ac17f0005f8264fb1c0ec49401d63a74cefe200772937549fde"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/gfold/blobs/sha256:f0dfc994e3c2148775dcf20e02b93a0d23cb9e636e726fb56241d536f388e8e6",
          "sha256": "f0dfc994e3c2148775dcf20e02b93a0d23cb9e636e726fb56241d536f388e8e6"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/gfold/blobs/sha256:68d48c0c4cd08ecd3c0fc79614664e682234d5dea6a7920e1fe8f116b0d9c823",
          "sha256": "68d48c0c4cd08ecd3c0fc79614664e682234d5dea6a7920e1fe8f116b0d9c823"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gfold/blobs/sha256:f12c02b19246e2a783c112ec1f95da175df5c226f31c874a3a3bdf4321fac984",
          "sha256": "f12c02b19246e2a783c112ec1f95da175df5c226f31c874a3a3bdf4321fac984"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "pkg-config",
    "rust"
  ],
  "dependencies": [
    "libgit2"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "zlib"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [
    "coreutils"
  ],
  "conflicts_with_reasons": [
    "both install `gfold` binaries"
  ],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/gfold.rb",
  "ruby_source_checksum": {
    "sha256": "64a98b0d81a3aefb5a19919e4ecc477d0dc859f8213213cfa741cb1da3f53708"
  },
  "date_added": "2023-03-13T12:05:54+00:00",
  "readme": "# gfold\n\n[![latest release tag](https://img.shields.io/github/v/tag/nickgerace/gfold?sort=semver&logo=git&logoColor=white&label=version&style=flat-square&color=blue)](https://github.com/nickgerace/gfold/releases/latest)\n[![crates.io version](https://img.shields.io/crates/v/gfold?style=flat-square&logo=rust&color=orange)](https://crates.io/crates/gfold)\n[![license](https://img.shields.io/github/license/nickgerace/gfold?style=flat-square&logo=apache&color=silver)](./LICENSE)\n[![build status](https://img.shields.io/github/actions/workflow/status/nickgerace/gfold/ci.yml?branch=main&style=flat-square&logo=github&logoColor=white)](https://github.com/nickgerace/gfold/actions)\n\n`gfold` is a CLI tool that helps you keep track of multiple Git repositories.\n\n[![A GIF showcasing gfold in action](https://raw.githubusercontent.com/nickgerace/gfold/main/assets/demo.gif)](https://raw.githubusercontent.com/nickgerace/gfold/main/assets/demo.gif)\n\nIf you'd prefer to use the classic display mode by default, and avoid setting the flag every time, you can set it in the config file (see **Usage** section).\n\n## Description\n\nThis app displays relevant information for multiple Git repositories in one to many directories.\nIt only reads from the filesystem and will never write to it.\nWhile this tool might seem limited in scope and purpose, that is by design.\n\nBy default, `gfold` looks at every Git repository via traversal from the current working directory.\nIf you would like to target another directory, you can pass its path (relative or absolute) as the first argument or change the default path in the config file.\n\nAfter traversal, `gfold` leverages [rayon](https://github.com/rayon-rs/rayon) to perform concurrent, read-only analysis of all Git repositories detected.\nAnalysis is performed by leveraging the [git2-rs](https://github.com/rust-lang/git2-rs) library.\n\n## Usage\n\nProvide the `-h/--help` flag to see all the options for using this application.\n\n```shell\n# Operate in the current working directory or in the location provided by a config file, if one exists.\ngfold\n\n# Operate in the parent directory.\ngfold ..\n\n# Operate in the home directory (first method).\ngfold $HOME\n\n# Operate in the home directory (second method).\ngfold ~/\n\n# Operate with an absolute path.\ngfold /this/is/an/absolute/path\n\n# Operate with a relative path.\ngfold ../../this/is/a/relative/path\n```\n\n### Config File\n\nIf you find yourself providing the same arguments frequently, you can create and use a config file.\n`gfold` does not come with a config file by default and config files are entirely optional.\n\nHow does it work?\nUpon execution, `gfold` will look for a config file at the following path on macOS, Linux and similar operating systems.\n\n\n```shell\n$HOME/.config/gfold.toml\n```\n\nOn Windows, the lookup path will be in a similar location.\n\n```powershell\n{FOLDERID_Profile}\\.config\\gfold.toml\n```\n\nFor config file creation, you can use the `--dry-run` flag to print valid TOML.\nHere is an example config file creation workflow on macOS, Linux and similar platforms:\n\n```shell\ngfold -d classic -c never ~/ --dry-run > $HOME/.config/gfold.toml\n```\n\nHere are the contents of the resulting config file:\n\n```toml\npath = '/home/neloth'\ndisplay_mode = 'Classic'\ncolor_mode = 'Never'\n```\n\nLet's say you created a config file, but wanted to execute `gfold` with entirely different settings _and_ you want to ensure that\nyou do not accidentally inherit options from the config file.\nIn that scenario you can ignore your config file by using the `-i` flag.\n\n```shell\ngfold -i\n```\n\nYou can restore the config file to its defaults by using the same flag.\n\n```shell\ngfold -i > $HOME/.config/gfold.toml\n```\n\nIn addition, you can ignore the existing config file, configure specific options, and use defaults for unspecified options all at once.\nHere is an example where we want to use the classic display mode and override all other settings with their default values:\n\n```shell\ngfold -i -d classic > $HOME/.config/gfold.toml\n```\n\nYou can back up a config file and track its history with `git`.\nOn macOS, Linux, and most systems, you can link the file back to a `git` repository.\n\n```shell\nln -s <path-to-repository>/gfold.toml $HOME/.config/gfold.toml\n```\n\nNow, you can update the config file within your repository and include the linking as part of your environment setup workflow.\n\n## Installation\n\n[![Packaging status](https://repology.org/badge/vertical-allrepos/gfold.svg)](https://repology.org/project/gfold/versions)\n\n### Homebrew\n\nYou can use [Homebrew](https://brew.sh) to install `gfold` with a choice of two methods.\n\n#### Core (macOS and Linux)\n\n`gfold` is now available in the [core formulae](https://formulae.brew.sh/formula/gfold)!\nHowever, you may run into a naming collision on macOS if [coreutils](https://formulae.brew.sh/formula/coreutils) is installed via `brew`.\nSee the [troubleshooting](#troubleshooting-and-known-issues) section for a workaround and more information.\n\n```shell\nbrew install gfold\n```\n\n#### Tap (macOS only)\n\nThe [tap](https://github.com/nickgerace/homebrew-nickgerace/blob/main/Formula/gfold.rb) is still available if you would like to use it.\nThis is subject to change.\n\n```shell\nbrew install nickgerace/nickgerace/gfold\n```\n\n### Arch Linux\n\nYou can use [pacman](https://wiki.archlinux.org/title/Pacman) to install `gfold` from the [extra repository](https://archlinux.org/packages/extra/x86_64/gfold/).\n\n```shell\npacman -S gfold\n```\n\n### Nix and NixOS\n\nYou can install `gfold` from [nixpkgs](https://github.com/NixOS/nixpkgs/blob/master/pkgs/applications/version-management/gfold/default.nix):\n\n```shell\nnix-env --install gfold\n```\n\nIf you are using [flakes](https://nixos.wiki/wiki/Flakes), you can install using the `nix` command directly.\n\n```shell\nnix profile install \"nixpkgs#gfold\"\n```\n\n### Cargo\n\nYou can use [cargo](https://crates.io) to install the [crate](https://crates.io/crates/gfold) on almost any platform.\n\n```shell\ncargo install gfold\n```\n\nUse the `--locked` flag if you'd like Cargo to use `Cargo.lock`.\n\n```shell\ncargo install --locked gfold\n```\n\nKeeping the crate up to date is easy with [cargo-update](https://crates.io/crates/cargo-update).\n\n```shell\ncargo install cargo-update\ncargo install-update -a\n```\n\n### Download a Binary\n\nIf you do not want to use one of the above installation methods and do not want to clone the repository, you can download a binary from the [releases](https://github.com/nickgerace/gfold/releases) page.\nFor an example on how to do that, refer to the [manual install](./docs/MANUAL_INSTALL.md) guide.\n\n### Build From Source\n\nIf you would like an example on how to build from source, refer to the [manual install](./docs/MANUAL_INSTALL.md) guide.\n\n### Preferred Installation Method Not Listed?\n\nPlease [file an issue](https://github.com/nickgerace/gfold/issues/new)!\n\n## Compatibility\n\n`gfold` is intended to be ran on _any_ tier one Rust 🦀 target.\nPlease [file an issue](https://github.com/nickgerace/gfold/issues) if your platform is unsupported.\n\n## Usage as a Library\n\nThere are two ways to use `gfold` as a \"library\".\n\n1) Use the [`libgfold`](./lib/libgfold/README.md) crate that powers `gfold`\n1) Consume valid JSON results from `gfold -d json` (not a library, but useful for non-Rust applications)\n\n## Troubleshooting and Known Issues\n\nIf you encounter unexpected behavior or a bug and would like to see more details, please run `gfold` with the following\nenvironment variables:\n\n```shell\n# You may also want to add relevant arg(s) and flag(s).\nRUST_BACKTRACE=1 RUST_LOG=debug gfold\n```\n\nIf the issue persists, please [file an issue](https://github.com/nickgerace/gfold/issues).\n\n### Tuning Environment Variables\n\nSince [`RUST_BACKTRACE`](https://doc.rust-lang.org/std/backtrace/index.html) and\n[`RUST_LOG`](https://docs.rs/env_logger/latest/env_logger/) do not have `gfold`-specific behaviors, you can adjust\nthem just as you would in other projects to aid investigation.\nPlease attach relevant logs from execution with _sensitive bits redacted_ in order to help resolve your issue.\n\n### Coreutils Collision on macOS\n\nIf `fold` from [GNU Coreutils](https://www.gnu.org/software/coreutils/) is installed on macOS via `brew`, it will be named `gfold`.\nYou can avoid this collision with shell aliases, shell functions, and/or `PATH` changes.\nHere is an example with the `o` dropped from `gfold`:\n\n```shell\nalias gfld=$HOME/.cargo/bin/gfold\n```\n\n### Upstream `libgit2` Issue\n\nIf you are seeing `unsupported extension name extensions.worktreeconfig` or similar errors, it may be related to\n[libgit2/libgit2#6044](https://github.com/libgit2/libgit2/issues/6044).\n\nThis repository's tracking issue is [#205](https://github.com/nickgerace/gfold/issues/205).\n\n## Community\n\nFor more information and thanks to contributors, users, and the \"community\" at large, please refer to the **[THANKS](./docs/THANKS.md)** file.\n\n- [Packages for NixOS, Arch Linux and more](https://repology.org/project/gfold/versions)\n- [\"One Hundred Rust Binaries\"](https://www.wezm.net/v2/posts/2020/100-rust-binaries/page2/), an article that featured `gfold`\n- [nvim-gfold.lua](https://github.com/AckslD/nvim-gfold.lua), a `neovim` plugin for `gfold` _([announcement Reddit post](https://www.reddit.com/r/neovim/comments/t209wy/introducing_nvimgfoldlua/))_"
}
