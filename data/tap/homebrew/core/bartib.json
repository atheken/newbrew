{
  "name": "bartib",
  "full_name": "bartib",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Simple timetracker for the command-line",
  "license": "GPL-3.0-only",
  "homepage": "https://github.com/nikolassv/bartib",
  "versions": {
    "stable": "1.0.1",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/nikolassv/bartib/archive/refs/tags/v1.0.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "51ee91f0ebcdba8a3e194d1f800aab942d99b1be1241d9d29f85615a89c87e6e"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bartib/blobs/sha256:15996d83f968c926df74e66a89e377a37a14382edda4c1afa477e48b8b45372a",
          "sha256": "15996d83f968c926df74e66a89e377a37a14382edda4c1afa477e48b8b45372a"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bartib/blobs/sha256:eef66c3c27b46728a1d67621d9346c9598bde8c8c55c03dd67f5bc10c50252c9",
          "sha256": "eef66c3c27b46728a1d67621d9346c9598bde8c8c55c03dd67f5bc10c50252c9"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bartib/blobs/sha256:1141518c093053f6b5bbad3ca09abc2c38838e3d221db77057475f6cf39b0a07",
          "sha256": "1141518c093053f6b5bbad3ca09abc2c38838e3d221db77057475f6cf39b0a07"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bartib/blobs/sha256:41d9f2157bc293eb594fa43ce44971e7928e8f1872b06e95f091717b14275d86",
          "sha256": "41d9f2157bc293eb594fa43ce44971e7928e8f1872b06e95f091717b14275d86"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bartib/blobs/sha256:f0c1cc58be69351e85e2a3f1dfcbd2432a2bf346c7aad5ff84fd3b50af8ca969",
          "sha256": "f0c1cc58be69351e85e2a3f1dfcbd2432a2bf346c7aad5ff84fd3b50af8ca969"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bartib/blobs/sha256:f3581eeeebeebf1061930980b9230b8db484b70e83d6784922eb349a5c351504",
          "sha256": "f3581eeeebeebf1061930980b9230b8db484b70e83d6784922eb349a5c351504"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bartib/blobs/sha256:f5d156cbad858dbaff07cabab759b8ccdd83ccf846ae3cf470c913ed9c143713",
          "sha256": "f5d156cbad858dbaff07cabab759b8ccdd83ccf846ae3cf470c913ed9c143713"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bartib/blobs/sha256:e1eb8567563a520c2931305243a98d5851bfa15c9d3dd6342d33cdc0062a4a9b",
          "sha256": "e1eb8567563a520c2931305243a98d5851bfa15c9d3dd6342d33cdc0062a4a9b"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "2706c66e8def3eeba4d9bf1adf66221c8ad70701",
  "ruby_source_path": "Formula/bartib.rb",
  "ruby_source_checksum": {
    "sha256": "b2aecae51694496de2ef5f144af702bcb590c2ffb245210261dd85c4af08fde2"
  },
  "date_added": "2022-04-25T15:37:18+00:00",
  "readme": "# Bartib\n\n![Illustration of the White Rabbit from Alice in Wonderland](misc/white-rabbit.png \"Oh dear! Oh dear! I shall be too late\")\n\nBartib is an easy to use time tracking tool for the command line. It saves a log of all tracked activities as a plaintext file and allows you to create flexible reports.\n\n[![Crates info](https://img.shields.io/crates/v/bartib.svg)](https://crates.io/crates/bartib)\n[![License: GPL](https://img.shields.io/badge/license-GPL-blue)](LICENSE)\n[![Number of Stars](https://img.shields.io/github/stars/nikolassv/bartib.svg?style=flat&logo=github&colorB=green&label=stars)](https://github.com/nikolassv/bartib/stargazers)\n![Rust](https://img.shields.io/github/languages/top/nikolassv/bartib?color=orange)\n[![Tests](https://github.com/nikolassv/bartib/actions/workflows/test.yml/badge.svg)](https://github.com/nikolassv/bartib/actions/workflows/test.yml)\n\n## Contents\n\n- [Bartib](#bartib)\n  - [Contents](#contents)\n  - [Tutorial](#tutorial)\n  - [How To ...](#how-to-)\n    - [How to install Bartib](#how-to-install-bartib)\n      - [Download an executable](#download-an-executable)\n      - [With Cargo](#with-cargo)\n      - [From the AUR (Arch Linux)](#from-the-aur-arch-linux)\n      - [Via homebrew](#via-homebrew)\n      - [Via apk (Alpine Linux)](#via-apk-alpine-linux)\n    - [How to build Bartib](#how-to-build-bartib)\n    - [How to define in which file to save the log of your activities](#how-to-define-in-which-file-to-save-the-log-of-your-activities)\n    - [How to edit or delete tracked activities](#how-to-edit-or-delete-tracked-activities)\n    - [How to activate auto completion](#how-to-activate-auto-completion)\n  - [Command overview](#command-overview)\n    - [The essentials](#the-essentials)\n    - [Getting Help](#getting-help)\n    - [Tracking activities](#tracking-activities)\n    - [Reporting and listing activities](#reporting-and-listing-activities)\n    - [Edit activities](#edit-activities)\n    - [Doing other stuff](#doing-other-stuff)\n\n## Tutorial\n\nAlice is not chasing white rabbits any more. She has a real job now with real clients and project managers. Therefore, she has to keep track of how she uses the hours of her working day. See how Alice uses Bartib for this and learn how you can use it, too.\n\nAt 8:00 a.m. Alice arrives at the office. She got an email from her project manager who asks her to start working right away on _Urgent Task X_ from _Important Project A_. So Alice types at the command line:\n\n```console\nalice@work: ~ $ bartib start -d \"Urgent Task X\" -p \"Important Project\"\n```\n\nAnd Bartib confirms:\n\n```\nStarted activity: \"Urgent Task X\" (Important Project) at 2021-10-29 08:00\n```\n\nAt 8:43 one of her colleagues drops by and they decide to have a coffee. As she cannot bill this time to her clients, Alice stops the running activity in Bartib:\n\n```console\nalice@work: ~ $ bartib stop\nStopped activity: \"Urgent Task X\" (Important Project) started at 2021-10-29 08:00 (43m)\n```\n\nAlmost 10 minutes later she is back at her desk and continues work:\n\n```console\nalice@work: ~ $ bartib continue\nStarted activity: \"Urgent Task X\" (Important Project) at 2021-10-29 08:51\n``` \n\nAt 10:13 another email arrives: _Urgent Task X_ has to wait! Now _More Urgent Task Y_ from _Just Another Project B_ has to be carried out immediately.\n\nAlice types:\n\n```console\nalice@work: ~ $ bartib start -d \"More Urgent Task Y\" -p \"Just Another Project B\"\nStopped activity: \"Urgent Task X\" (Important Project) started at 2021-10-29 09:01 (1h 12m)\nStarted activity: \"More Urgent Task Y\" (Just Another Project B) at 2021-10-29 10:13\n```\n\nSee how Bartib just stops the running activity when another one starts? No need to stop it manually.\n\nIt is a productive morning. After _More Urgent Task Y_ Alice works on other projects and other tasks, but now it is time for lunch and Alice lets Bartib list all the activities she has tracked today until now:\n\n```console\nalice@work: ~ $ bartib list --today\n\nStarted Stopped Description        Project                Duration \n08:00   08:43   Urgent Task X      Important Project         43m      \n08:51   10:13   Urgent Task X      Important Project      1h 22m      \n10:13   10:35   More Urgent Task Y Just Another Project B    22m      \n10:35   10:53   Urgent Task X      Important Project         18m      \n10:53   11:45   Simple Task Z      Less Important Project    52m       \n11:45   12:34   Boring Task XY     Internal Project C        49m    \n```\n\nAfter her lunch break Alice wants to continue work on _More Urgent Task Y_. Instead of typing the task description and the project name again, she asks Bartib for a list of all the tasks she has recently worked on:\n\n```console\nalice@work: ~ $ bartib last\n\n #  Description        Project                \n[3] More Urgent Task Y Just Another Project B \n[2] Urgent Task X      Important Project      \n[1] Simple Task Z      Less Important Project \n[0] Boring Task XY     Internal Project C \n```\n\nAnd she instructs Bartib to continue task #3:\n\n```console\nalice@work: ~ $ bartib continue 3\nStarted activity: \"More Urgent Task Y\" (Just Another Project B) at 2021-10-29 12:52\n```\n\nAn exciting day at work continues. As it is a Friday Alice decides to already leave work at shortly after seven. She stops her latest activity and asks Bartib for a report:\n\n```console\nalice@work: ~ $ bartib report --today\n\nImportant Project.................................  2h 43m\n    Another Task xyz..............................     15m\n    Important Call with the Client................     35m\n    Urgent Task X.................................  1h 53m\n\nInternal Project C................................  4h 30m\n    Another Meeting...............................     45m\n    Boring Task XY................................  1h 15m\n    Long Meeting with Everyone from the Department  2h 30m\n\nJust Another Project B............................     45m\n    More Urgent Task Y............................     45m\n\nLess Important Project............................  2h 27m\n    Simple Task No. 5.............................  1h 35m\n    Simple Task Z.................................     52m\n\nTotal............................................. 10h 25m\n```\n\nAlice is happy. This was just another great day at the company and thanks to Bartib tracking her time was a breeze.\n\nDo you want to be as happy as Alice? Use Bartib!\n\n## How To ...\n\n### How to install Bartib\n\n#### Download an executable\n\nSimply download a suitable executable from <https://github.com/nikolassv/bartib/releases> and copy it in some directory that is listed in your `PATH` (e.g. ~/bin).\n\n#### With Cargo\n\nYou may also use cargo to install Bartib from crates.io:\n\n```bash\ncargo install bartib\n```\n\n#### From the AUR (Arch Linux)\n\n```sh\nyay -S bartib\n```\n\n#### Via homebrew\n\n```sh\nbrew install bartib\n```\n\n#### Via apk (Alpine Linux)\n\n```sh\napk add bartib\n```\n\n(Currently bartib is only available in the [testing repository](https://pkgs.alpinelinux.org/packages?name=bartib))\n\n### How to build Bartib\n\nBartib is written in rust. You may build it yourself with the help of cargo. Just clone this repository and execute the `cargo build` command in its main directory:\n\n```bash\ncargo build --release\n```\n\n### How to define in which file to save the log of your activities\n\nYou may either specify the absolute path to your log as an extra parameter (`--file` or `-f`) to your bartib command:\n\n```bash\nbartib -f /home/username/activities.bartib report\n```\n\nOr you may set the environment variable `BARTIB_FILE` to the path of your log. Just add this line to your `.profile` file:\n\n```bash\nexport BARTIB_FILE=\"/home/username/activities.bartib\"\n```\n\nIf the specified log file does not exist yet Bartib creates it.\n\n### How to edit or delete tracked activities\n\nJust open your activity log in your favorite text editor to edit or delete former activities. You may even add new activities manually in this file. The format is self explanatory.\n\nBartib even offers the `bartib edit` command which opens the log in the editor defined by your `EDITOR` environment variable. If you are unsure whether your edits are readable by bartib, use the `bartib check` command. It will inform you about any parsing errors.\n\n### How to activate auto completion\n\nBartib offers a simple auto completion for project names. This saves you from typing out long project names each time you start a new task. Just source the script [misc/bartibCompletion.sh](misc/bartibCompletion.sh) in your `.bashrc` to enable it.\n\nFor fish users, add the [misc/bartib.fish](misc/bartib.fish) to either the `~/.config/fish/completions/` or `~/.local/share/fish/vendor_completions.d/` directory.\nCurrently, you must set the `BARTIB_FILE` in your fish shell for the project and description names completions.\n\n## Command overview\n\nAll these commands require that you have set the `BARTIB_FILE` environment variable to the file path of your activity log. Otherwise they require an additional `-f/--file` parameter between `bartib` and the subcommand (see above: [How to define in which file to save the log of your activities](#how-to-define-in-which-file-to-save-the-log-of-your-activities)).\n\n### The essentials\n\n```bash\nbartib -h    # get help\nbartib start -p \"name of the project\" -d \"description of the activity\"    # start a new activity\nbartib stop    # stop an activity\nbartib list --today    # list all activities of the current day\nbartib report --today    # create a report for today\n```\n\n### Getting Help\n\n```bash\nbartib -h    # Print a concise help\nbartib start -h    # Print a help for any subcommand\n```\n\n### Tracking activities\n\n```bash\nbartib start -p \"The name of the associated project\" -d \"A description of the activity\"    # Start a new activity with a short description and an associated project\nbartib start -p \"The name of the associated project\" -d \"A description of the activity\" -t 13:45    # Start a new activity at a given time\n\nbartib stop    # Stop the currently running activity\nbartib stop -t 14:00    # Stop the currently running activity at a given time\n\nbartib last    # Print a list of the ten most recently used projects and descriptions\nbartib last -n 25   # Prints a list of recently used projects and descriptions with more entries\n\n# All numbers used with the following commands refer to the indexes in the list created with `bartib last`\nbartib continue 5    # Start an activity with a recently used project and description\nbartib continue    # Continue the latest activity\nbartib continue 3 -d \"Another description\"    # Continue activity number 3 but overwrite the description\nbartib continue 7 -t 8:15    # Continue activity number 7 but have it started at a given time\n\nbartib cancel    # Cancels a running activity by deleting its entry in the activity log\n```\n\n### Reporting and listing activities\n\n```bash\nbartib report    # create a report of how much time has been spent on which projects and activities\nbartib report --today    # create a report for today\nbartib report --yesterday    # create a report for yesterday\nbartib report --current_week    # create a report for the current week (since monday)\nbartib report --last_week    # create a report for the last week\nbartib report --date 2021-09-03    # create a report for a given day\nbartib report --from 2021-09-01 --to 2021-09-05    # create a report for a given time range\nbartib report --project \"The most exciting project\"    # create a report for a given project\n\nbartib list    # list all activities grouped by day\nbartib list --no_grouping    # list all activities but do not group them by day\n\nbartib list --today    # list todays' activities\nbartib list --yesterday    # list yesterdays' activities\nbartib list --current_week    # list activities of the current week (since monday)\nbartib list --last_week    # list activities of the last week\nbartib list --date 2021-09-03    # list activities on a given day\nbartib list --from 2021-09-01 --to 2021-09-05    # list activities in a given time range\nbartib list --project \"The most exciting project\"    # list activities for a given project\n```\n\n### Edit activities\n\n```bash\nbartib change -d \"A new description\"   # change the description of the current activity\nbartib change -p \"Another project\"   # change the project for the current activity\nbartib change -t 8:15   # change the start time of the current activity\n\nbartib edit   # open the activity log in the editor you have defined in your `EDITOR` environment variable\nbartib edit -e vim    # open the activity log in a given editor\n```\n\n### Doing other stuff\n\n```bash\nbartib current    # show currently running activity\nbartib projects    # list all projects ever used\nbartib projects -c # show current project only\n\nbartib check    # check your activity log for invalid lines\nbartib sanity    # check for activities with logical errors (e.g activities with negative duration)\n```"
}
