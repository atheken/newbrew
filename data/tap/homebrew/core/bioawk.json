{
  "name": "bioawk",
  "full_name": "bioawk",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "AWK modified for biological data",
  "license": null,
  "homepage": "https://github.com/lh3/bioawk",
  "versions": {
    "stable": "1.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/lh3/bioawk/archive/v1.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "5cbef3f39b085daba45510ff450afcf943cfdfdd483a546c8a509d3075ff51b5"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bioawk/blobs/sha256:a80d9d6887393ec604646dd2e79090bda1034f5947488995c383d29b8fbb2f47",
          "sha256": "a80d9d6887393ec604646dd2e79090bda1034f5947488995c383d29b8fbb2f47"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bioawk/blobs/sha256:a568547e0fb85d1d0678d157c93aee71710f58d3bc4591186365ae28e4502b24",
          "sha256": "a568547e0fb85d1d0678d157c93aee71710f58d3bc4591186365ae28e4502b24"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bioawk/blobs/sha256:de4d41adcf20cf87de3d2310d98c1dbfbff95eb3432e6d0888be964889f024c6",
          "sha256": "de4d41adcf20cf87de3d2310d98c1dbfbff95eb3432e6d0888be964889f024c6"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bioawk/blobs/sha256:d10e6430821b1876cf8ad863dce1978f7aa4564bc3508e48f7cfa9d8e4d89306",
          "sha256": "d10e6430821b1876cf8ad863dce1978f7aa4564bc3508e48f7cfa9d8e4d89306"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bioawk/blobs/sha256:844d8041e128ebcf46d1a5dec20dfc22f0a3fc1ff48388310cf810685acd9890",
          "sha256": "844d8041e128ebcf46d1a5dec20dfc22f0a3fc1ff48388310cf810685acd9890"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bioawk/blobs/sha256:f0e6d3b143b32066da8f41266d1edf2855ab0d780982c8eb09b78194c1e2484e",
          "sha256": "f0e6d3b143b32066da8f41266d1edf2855ab0d780982c8eb09b78194c1e2484e"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bioawk/blobs/sha256:c7377ef6e226404f71d52c04715ea0bb8456e1c90493e93e78101dfb3ed2190e",
          "sha256": "c7377ef6e226404f71d52c04715ea0bb8456e1c90493e93e78101dfb3ed2190e"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bioawk/blobs/sha256:7082d4073e07ba3dfa849f95eb126d966a45f9fceb1d197595119a216e465727",
          "sha256": "7082d4073e07ba3dfa849f95eb126d966a45f9fceb1d197595119a216e465727"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bioawk/blobs/sha256:023f5cafaa31404e68b8fc6bcfbeee27e63eb5fbcab897d2f406fceda90ec9ff",
          "sha256": "023f5cafaa31404e68b8fc6bcfbeee27e63eb5fbcab897d2f406fceda90ec9ff"
        },
        "sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bioawk/blobs/sha256:154d44dd9ea56db8170127711e991950d487e379ae12df76332e4b7512f79fe8",
          "sha256": "154d44dd9ea56db8170127711e991950d487e379ae12df76332e4b7512f79fe8"
        },
        "el_capitan": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bioawk/blobs/sha256:df0810bc087f924cdddcdb73f00faf9772de9475e0e698c7af8a7d036b3a4c91",
          "sha256": "df0810bc087f924cdddcdb73f00faf9772de9475e0e698c7af8a7d036b3a4c91"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bioawk/blobs/sha256:1d611e2578e57304e571f02a58ec46efc83752a97a7d830b40e03a2c83749bb3",
          "sha256": "1d611e2578e57304e571f02a58ec46efc83752a97a7d830b40e03a2c83749bb3"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    {
      "bison": "build"
    },
    "zlib"
  ],
  "uses_from_macos_bounds": [
    {},
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "2706c66e8def3eeba4d9bf1adf66221c8ad70701",
  "ruby_source_path": "Formula/bioawk.rb",
  "ruby_source_checksum": {
    "sha256": "f619a92a042e404f73ee633830badbd5e8f090d173ded7c6518dcd9e764f6bce"
  },
  "date_added": "2018-01-08T07:54:39-08:00",
  "readme": "### Introduction\n\nBioawk is an extension to [Brian Kernighan's awk][1], adding the support of\nseveral common biological data formats, including optionally gzip'ed BED, GFF,\nSAM, VCF, FASTA/Q and TAB-delimited formats with column names. It also adds a\nfew built-in functions and an command line option to use TAB as the\ninput/output delimiter. When the new functionality is not used, bioawk is\nintended to behave exactly the same as the original BWK awk.\n\nThe original awk requires a YACC-compatible parser generator (e.g. Byacc or\nBison). Bioawk further depends on [zlib][zlib] so as to work with gzip'd files.\n\n### New functionality\n\n##### Command line option `-t`\n\nUsing this option is equivalent to\n\n    bioawk -F'\\t' -v OFS=\"\\t\"\n\n##### Command line option `-c arg`\n\nThis option specifies the input format. When this option is in use, bioawk will\nseamlessly add variables that name the fields, based on either the format or\nthe first line of the input, depending *arg*. This option also enables bioawk\nto read gzip'd files. The argument *arg* may take the following values:\n\n* `help`. List the supported formats and the naming variables.\n\n* `hdr` or `header`. Name each column based on the first line in the input.\n  Special characters in the first are converted to underscore. For example:\n\n        grep -v ^## in.vcf | bioawk -tc hdr '{print $_CHROM,$POS}'\n\n  prints the `CHROM` and `POS` columns of the input VCF file.\n\n* `sam`, `vcf`, `bed` and `gff`. SAM, VCF, BED and GFF formats.\n\n* `fastx`. This option regards a FASTA or FASTQ as a TAB delimited file with\n  four columns: sequence name, sequence, quality and FASTA/Q comment, such that\n  various fields can be retrieved with column names. See also example 4 in the\n  following.\n\n##### New built-in functions\n\nSee `awk.1`.\n\n### Examples\n\n1. List the supported formats:\n\n        bioawk -c help\n\n2. Extract unmapped reads without header:\n\n        bioawk -c sam 'and($flag,4)' aln.sam.gz\n\n3. Extract mapped reads with header:\n\n        bioawk -Hc sam '!and($flag,4)'\n\n4. Reverse complement FASTA:\n\n        bioawk -c fastx '{print \">\"$name;print revcomp($seq)}' seq.fa.gz\n\n5. Create FASTA from SAM (uses revcomp if FLAG & 16)\n\n        samtools view aln.bam | \\\n            bioawk -c sam '{s=$seq; if(and($flag, 16)) {s=revcomp($seq)} print \">\"$qname\"\\n\"s}'\n\n6. Print the genotypes of sample `foo` and `bar` from a VCF:\n\n        grep -v ^## in.vcf | bioawk -tc hdr '{print $foo,$bar}'\n\n\n### Potential limitations\n\n1. When option `-c` is in use, bioawk replaces the line reading module of awk.\n   The new line reading function parses FASTA and FASTQ files and seamlessly\n   reads gzip'ed files. However, the new code does not fully mimic the original\n   code. It may fail in corner cases (though this has not happened yet). Thus\n   when `-c` is not specified, awk falls back to the original line reading code\n   and does not support gzip'ed input.\n\n2. When `-c` is in use, several strings allocated in the new line reading\n   module are not freed in the end. These will be reported by valgrind as\n   \"still reachable\". To some extent, these are not memory leaks.\n\n\n[1]: http://www.cs.princeton.edu/~bwk/btl.mirror/\n[zlib]: http://zlib.net"
}
