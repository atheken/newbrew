{
  "name": "howdoi",
  "full_name": "howdoi",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Instant coding answers via the command-line",
  "license": "MIT",
  "homepage": "https://github.com/gleitz/howdoi",
  "versions": {
    "stable": "2.0.20",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://files.pythonhosted.org/packages/6d/43/0e8166583575bd500c0f8f1a4ab9429af9466feb6fcdc006e88de8fd23e9/howdoi-2.0.20.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "51cd40c53e0c0f8f8da88f480eb7423183be2350ab4f0a4d9d4763ca6ac3e2a9"
    }
  },
  "revision": 3,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/howdoi/blobs/sha256:acf6e1d11328156bcc9e1ff7b963d219476a871b3b3e03956136dbb7e0978afd",
          "sha256": "acf6e1d11328156bcc9e1ff7b963d219476a871b3b3e03956136dbb7e0978afd"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/howdoi/blobs/sha256:885ac40f5d1d8536812af58d41ce539df180e306167dc844298c669356bf939a",
          "sha256": "885ac40f5d1d8536812af58d41ce539df180e306167dc844298c669356bf939a"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/howdoi/blobs/sha256:5f11cf45fc35a89db56a3a861e345fa07b975a04a787dbc14273c4f9fa9d3967",
          "sha256": "5f11cf45fc35a89db56a3a861e345fa07b975a04a787dbc14273c4f9fa9d3967"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/howdoi/blobs/sha256:5dda158b2c85c9675ba9de564817cfa17e011b12e12ab97df2fb5c7af5d826f5",
          "sha256": "5dda158b2c85c9675ba9de564817cfa17e011b12e12ab97df2fb5c7af5d826f5"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/howdoi/blobs/sha256:4f53b4d5cc926f6e27647043f22e0fb96af25e3c010fe0700ffda2969b0f6502",
          "sha256": "4f53b4d5cc926f6e27647043f22e0fb96af25e3c010fe0700ffda2969b0f6502"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/howdoi/blobs/sha256:82e4969ae3e652bcdfaaf4d9d2432ab927f655120b4b2c441a91e501c6c89550",
          "sha256": "82e4969ae3e652bcdfaaf4d9d2432ab927f655120b4b2c441a91e501c6c89550"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/howdoi/blobs/sha256:29d73a6c354d8ee56fa3aa23b17e08e55e18b7d3e71d61ce0ec526440869a598",
          "sha256": "29d73a6c354d8ee56fa3aa23b17e08e55e18b7d3e71d61ce0ec526440869a598"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake",
    "pkg-config",
    "rust"
  ],
  "dependencies": [
    "cffi",
    "openssl@3",
    "pygments",
    "python@3.11",
    "six"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "libxml2",
    "libxslt"
  ],
  "uses_from_macos_bounds": [
    {},
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/howdoi.rb",
  "ruby_source_checksum": {
    "sha256": "b2b7cc1b3ea87ae64890bcc2fb1d496d6f13e26cf780272d14e340a0be57c41f"
  },
  "date_added": "2018-02-09T07:27:54-08:00",
  "readme": "<p align=\"center\">\n    <a href=\"https://pypi.python.org/pypi/howdoi\">\n        <img src=\"https://www.dropbox.com/s/dk13iy2uoufdwr7/HowDoIcolor512.png?raw=1\" alt=\"Sherlock, your neighborhood command-line sloth sleuth\" />\n    </a>\n</p>\n<h1 align=\"center\">howdoi</h1>\n<h2 align=\"center\">Instant coding answers via the command line</h2>\n<p align=\"center\"><strong>⚡ Never open your browser to look for help again ⚡</strong></p>\n\n<p align=\"center\">\n    <a href=\"https://github.com/gleitz/howdoi/actions?query=workflow%3A%22Python+CI%22\"><img src=\"https://img.shields.io/github/actions/workflow/status/gleitz/howdoi/python.yml?style=plastic&color=78dce8\" alt=\"build status\"></a>\n    <a href=\"https://pepy.tech/project/howdoi\"><img src=\"https://img.shields.io/pypi/dm/howdoi?style=plastic&color=ab9df2&maxAge=86400&label=downloads&query=%24.total_downloads&url=https%3A%2F%2Fapi.pepy.tech%2Fapi%2Fprojects%2Fhowdoi\" alt=\"downloads\"></a>\n    <a href=\"https://pypi.python.org/pypi/howdoi\"><img src=\"https://img.shields.io/pypi/pyversions/howdoi.svg?style=plastic&color=ff6188\" alt=\"Python versions\"></a>\n</p>\n\n------------------------------------------------------------------------\n\n## Introduction to howdoi\n\nAre you a hack programmer? Do you find yourself constantly Googling for\nhow to do basic programming tasks?\n\nSuppose you want to know how to format a date in bash. Why open your\nbrowser and read through blogs (risking major distraction) when you can\nsimply stay in the console and ask howdoi:\n\n    $ howdoi format date bash\n    > DATE=`date +%Y-%m-%d`\n\nhowdoi will answer all sorts of queries:\n\n    $ howdoi print stack trace python\n    > import traceback\n    >\n    > try:\n    >     1/0\n    > except:\n    >     print '>>> traceback <<<'\n    >     traceback.print_exc()\n    >     print '>>> end of traceback <<<'\n    > traceback.print_exc()\n\n    $ howdoi convert mp4 to animated gif\n    > video=/path/to/video.avi\n    > outdir=/path/to/output.gif\n    > mplayer \"$video\" \\\n    >         -ao null \\\n    >         -ss \"00:01:00\" \\  # starting point\n    >         -endpos 10 \\ # duration in second\n    >         -vo gif89a:fps=13:output=$outdir \\\n    >         -vf scale=240:180\n\n    $ howdoi create tar archive\n    > tar -cf backup.tar --exclude \"www/subf3\" www\n\n[![image](http://imgs.xkcd.com/comics/tar.png)](https://xkcd.com/1168/)\n\n## Installation\n\n    pip install howdoi\n\nor\n\n    brew install howdoi\n\n## Usage\n\n### New to howdoi?\n\n    howdoi howdoi\n\n### RTFM\n\n-   [Introduction and\n    installation](http://gleitz.github.io/howdoi/introduction/)\n-   [Usage](http://gleitz.github.io/howdoi/usage/)\n-   [Contributing to\n    howdoi](http://gleitz.github.io/howdoi/contributing_to_howdoi/)\n-   [Advanced\n    usage](http://gleitz.github.io/howdoi/howdoi_advanced_usage/)\n-   [Troubleshooting](http://gleitz.github.io/howdoi/troubleshooting/)\n\n### Commands\n\n    usage: howdoi [-h] [-p POS] [-n NUM] [-a] [-l] [-c] [-x] [-C] [-j] [-v] [-e [ENGINE]]\n    [--save] [--view] [--remove] [--empty] [QUERY ...]\n\n    instant coding answers via the command line\n\n    positional arguments:\n      QUERY                 the question to answer\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -p POS, --pos POS     select answer in specified position (default: 1)\n      -n NUM, --num NUM     number of answers to return (default: 1)\n      -a, --all             display the full text of the answer\n      -l, --link            display only the answer link\n      -c, --color           enable colorized output\n      -x, --explain         explain how answer was chosen\n      -C, --clear-cache     clear the cache\n      -j, --json            return answers in raw json format\n      -v, --version         display the current version of howdoi\n      -e [ENGINE], --engine [ENGINE]\n                            search engine for this query (google, bing, duckduckgo)\n      --save, --stash       stash a howdoi answer\n      --view                view your stash\n      --remove              remove an entry in your stash\n      --empty               empty your stash\n\n    environment variable examples:\n      HOWDOI_COLORIZE=1\n      HOWDOI_DISABLE_CACHE=1\n      HOWDOI_DISABLE_SSL=1\n      HOWDOI_SEARCH_ENGINE=google\n      HOWDOI_URL=serverfault.com\n\nUsing the howdoi stashing feature (for more advanced features view the\n[keep documentation](https://github.com/OrkoHunter/keep)).\n\n    stashing: howdoi --save QUERY\n    viewing:  howdoi --view\n    removing: howdoi --remove (will be prompted which answer to delete)\n    emptying: howdoi --empty (empties entire stash, will be prompted to confirm)\n\nAs a shortcut, if you commonly use the same parameters each time and\ndon\\'t want to type them, add something similar to your .bash_profile\n(or otherwise). This example gives you 5 colored results each time.\n\n    alias h='function hdi(){ howdoi $* -c -n 5; }; hdi'\n\nAnd then to run it from the command line simply type:\n\n    $ h format date bash\n\nYou can also search other [StackExchange\nproperties](https://stackexchange.com/sites#traffic) for answers:\n\n    HOWDOI_URL=cooking.stackexchange.com howdoi make pesto\n\nor as an alias:\n\n    alias hcook='function hcook(){ HOWDOI_URL=cooking.stackexchange.com howdoi $* ; }; hcook'\n    hcook make pesto\n\nOther useful aliases:\n\n    alias hless='function hdi(){ howdoi $* -c | less --raw-control-chars --quit-if-one-screen --no-init; }; hdi'\n\n## Integrations\n\n-   Slack integration available through\n    [slack-howdoi](https://github.com/ellisonleao/slack-howdoi)\n-   Telegram integration available through\n    [howdoi-telegram](https://github.com/aahnik/howdoi-telegram)\n-   Discord integration available through\n    [discord-howdoi](https://github.com/MLH-Fellowship/0.5.1-howDoIDiscord)\n-   Emacs integration available through\n    [emacs-howdoi](https://blog.gleitzman.com/post/700738401851277312/howdoi-use-howdoi-in-emacs)\n-   VSCode integration available on the\n    [marketplace](https://marketplace.visualstudio.com/items?itemName=howdoi-org.howdoi)\n-   Alfred integration available through\n    [alfred-howdoi](https://github.com/gleitz/alfred-howdoi)\n\n## Contributors\n\n-   Benjamin Gleitzman ([\\@gleitz](http://twitter.com/gleitz))\n-   Yanlam Ko ([\\@YKo20010](https://github.com/YKo20010))\n-   Diana Arreola ([\\@diarreola](https://github.com/diarreola))\n-   Eyitayo Ogunbiyi ([\\@tayoogunbiyi](https://github.com/tayoogunbiyi))\n-   Chris Nguyen ([\\@chrisngyn](https://github.com/chrisngyn))\n-   Shageldi Ovezov ([\\@ovezovs](https://github.com/chrisngyn))\n-   Mwiza Simbeye\n    ([\\@mwizasimbeye11](https://github.com/mwizasimbeye11))\n-   Shantanu Verma ([\\@SaurusXI](https://github.com/SaurusXI))\n-   Sheza Munir ([\\@ShezaMunir](https://github.com/ShezaMunir))\n-   Jyoti Bisht ([\\@joeyouss](https://github.com/joeyouss))\n-   And [more!](https://github.com/gleitz/howdoi/graphs/contributors)\n\n## How to contribute\n\nWe welcome contributions that make howdoi better and improve the\nexisting functionalities of the project. We have created a separate\n[guide to contributing to\nhowdoi](http://gleitz.github.io/howdoi/contributing_to_howdoi/) that explains\nhow to get up and running with your first pull request.\n\n## Notes\n\n-   Works with Python 3.7 and newer. Unfortunately Python 2.7 support\n    has been discontinued :(\n-   Special thanks to Rich Jones\n    ([\\@miserlou](https://github.com/miserlou)) for the idea\n-   More thanks to [Ben Bronstein](https://benbronstein.com/) for the\n    logo"
}
