{
  "name": "marksman",
  "full_name": "marksman",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Language Server Protocol for Markdown",
  "license": "MIT",
  "homepage": "https://github.com/artempyanykh/marksman",
  "versions": {
    "stable": "2023-07-25",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/artempyanykh/marksman/archive/refs/tags/2023-07-25.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "0b04ab2eeb185ab321f0ab0f7ab19c02d91b8c2ce377d6ea2af494cd1ef48a7b"
    },
    "head": {
      "url": "https://github.com/artempyanykh/marksman.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/marksman/blobs/sha256:bf3be1cdc036e59ecba83f07cc51ea06b8d7197b0ac531019bb6e264b08bb557",
          "sha256": "bf3be1cdc036e59ecba83f07cc51ea06b8d7197b0ac531019bb6e264b08bb557"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/marksman/blobs/sha256:a3f90276b1f17a84573149b4380188190a8cf62a66cf62644b0b5c38d2c4fa2c",
          "sha256": "a3f90276b1f17a84573149b4380188190a8cf62a66cf62644b0b5c38d2c4fa2c"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/marksman/blobs/sha256:daf54f16db3c68f0314ebb56c98287adbd147690049209fadfe2acbfe14eb548",
          "sha256": "daf54f16db3c68f0314ebb56c98287adbd147690049209fadfe2acbfe14eb548"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/marksman/blobs/sha256:5534cb88d413b457cc92d37f506d3b373abb750cb5a0bf852ebf7cbeeb05fd53",
          "sha256": "5534cb88d413b457cc92d37f506d3b373abb750cb5a0bf852ebf7cbeeb05fd53"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/marksman/blobs/sha256:aee1de132cd15a34a513c8d8a3f7e80f88b77d88d82ecfcd69122e7c930f58a8",
          "sha256": "aee1de132cd15a34a513c8d8a3f7e80f88b77d88d82ecfcd69122e7c930f58a8"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/marksman/blobs/sha256:fcde5660ad404c33f7e04a650ea42d7b459d99d4c3256374d3e23f5b8edae0b7",
          "sha256": "fcde5660ad404c33f7e04a650ea42d7b459d99d4c3256374d3e23f5b8edae0b7"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/marksman/blobs/sha256:bb8eb4232c1cc858efe61d63bbac0192ca11a9d5a5881bc5f05ee4a20a0ccf7a",
          "sha256": "bb8eb4232c1cc858efe61d63bbac0192ca11a9d5a5881bc5f05ee4a20a0ccf7a"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "dotnet"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "zlib"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/marksman.rb",
  "ruby_source_checksum": {
    "sha256": "ad7fe95c1034027b3fd3a6c38a039609b60c869d398a2b9bc41290d423d10934"
  },
  "date_added": "2022-12-23T23:09:22+00:00",
  "readme": "[![Build & Test](https://github.com/artempyanykh/marksman/actions/workflows/build.yml/badge.svg)](https://github.com/artempyanykh/marksman/actions/workflows/build.yml)\n[![release](https://img.shields.io/github/v/release/artempyanykh/marksman)](https://github.com/artempyanykh/marksman/releases)\n[![homebrew](https://img.shields.io/homebrew/v/marksman)](https://formulae.brew.sh/formula/marksman)\n[![marksman](https://snapcraft.io/marksman/badge.svg)](https://snapcraft.io/marksman)\n\n# Marksman\n\n_Write Markdown with code assist and intelligence in the comfort of your favourite editor._\n\n![splash](assets/readme/splash.png)\n\n---\n\nMarksman is a program that integrates with your editor to assist you in writing and maintaining your Markdown documents.\nUsing [LSP protocol][lsp-main] it provides **completion**, goto **definition**, find **references**, **rename**\nrefactoring, **diagnostics**, and more. In addition to regular Markdown, it also supports **wiki-link**-style references\nthat enable [Zettelkasten-like][zettel-wiki][^roam-research]<sup>,</sup> [^markdown-memo] note taking. See more about Marksman's\nfeatures below.\n\nMarksman **works on MacOS, Linux, and Windows** and is distributed as a **self-contained binary** for each OS.\n\nThe server provides assistance with:\n\n* Markdown inline links:\n   ```md\n   This is [inline link](/some-file.md#some-heading).\n   This is an internal [anchor link](#heading).\n   ```\n* Markdown reference links:\n   ```md\n   See [reference].\n\n   [reference]: /url \"Title\"\n   ```\n* Wiki-links:\n   ```md\n   Link to [[another-note]].\n   Link to [[another-notes#heading]].\n   Internal link to [[#a-heading]].\n   ```\n\nAll types of links support completion, hover, goto definition/references. Additionally, Marksman provides diagnostics\nfor wiki-links to detect broken references and duplicate/ambiguous headings.\n\n## Existing editor integrations[^lsp]:\n\n* VSCode via [Marksman VSCode][mn-vscode].\n* Neovim:\n    * via [mason.nvim][mason-nvim] (automatic server installation) (requires [mason-lspconfig.nvim][mason-nvim-lsp-config])\n    * via [nvim-lspconfig][nvim-marksman],\n    * via [CoC-marksman][coc-marksman].\n* Vim:\n    * via [ale](ale) - will support Marksman out-of-the-box once [PR](https://github.com/dense-analysis/ale/pull/4565) is merged; in the meantime...\n\n      Example config (add the following to your `~/.vim/after/ftplugin/markdown.vim`):\n\n      ```viml\n      if exists('g:loaded_ale')\n        call ale#linter#Define('markdown', { 'name': 'marksman', 'lsp': 'stdio', 'executable': 'marksman', 'command': '%e server', 'initialization_options': {} })\n      end\n      ```\n\n    * via [lsp](lsp)\n\n      Example config (add the following to your `~/.vim/after/ftplugin/markdown.vim`):\n\n      ```viml\n      if exists('g:loaded_lsp')\n        call LspAddServer([#{ name: 'marksman', filetype: ['markdown'], path: '/path/to/marksman', args: ['server'], syncInit: v:true }])\n      end\n      ```\n\n* Emacs:\n    * via [LSP Mode](https://emacs-lsp.github.io/lsp-mode/page/lsp-marksman/) (automatic server installation).\n\n      Example config for `use-package` users:\n\n      ```lisp\n      (use-package markdown-mode\n        :hook (markdown-mode . lsp)\n        :config\n        (require 'lsp-marksman))\n      ```\n    * via [Eglot][eglot], requires configuration (unless\n      [eglot#1013][eglot-marksman-pr] gets merged); add the following to your\n      `init.el`\n\n      ```lisp\n      (add-to-list 'eglot-server-programs '(markdown-mode . (\"marksman\")))\n      (add-hook 'markdown-mode-hook #'eglot-ensure)\n      ```\n* [Helix](https://helix-editor.com/) supports Marksman out of the box. However, you need add `marksman` binary to\n  your `PATH` manually.\n* Sublime Text via [LSP-marksman][sublime-marksman] (automatic server\n  installation).\n* BBEdit [can be configured](https://github.com/artempyanykh/marksman/discussions/206#discussioncomment-5906423) to use Marksman as an LSP server for Markdown files.\n\n## How to install\n\nSee the [installation instructions](/docs/install.md).\n\n## Demos and tutorials\n\n* See [this page](/docs/demo.md) for a mix of Neovim, VSCode, and Emacs screen captures.\n* See [this post](https://medium.com/@chrisatmachine/lunarvim-improve-markdown-editing-with-marksman-739d06c73a26)\n  on how to use Marksman with [LunarVim](https://www.lunarvim.org).\n* Check out [this YouTube video](https://www.youtube.com/watch?v=8GQKOLh_V5E)\n  by Luke Pighetti on how to use Marksman with Helix.\n\n![Completion Markdown](/assets/readme/gifs/completion-markdown.gif)\n\n## Features\n\nSee [the Features page](/docs/features.md) to learn more about language features, configurations, and single- and multi-file modes.\n\n## FAQ\n\n* Cross-file references and completions don't work.\n    + Either create an empty `.marksman.toml` in the root folder of your project or initialize a repository (e.g. `git init`). See [this page](/docs/features.md#workspace-folders-project-roots-and-single-file-mode) to learn more about single- and mult-file modes.\n* I'm getting \"marksman canâ€™t be opened because Apple cannot check it for malicious software\" on MacOS.\n    + Run the following command to bypass it and let Mac know that it's fine: `xattr -d com.apple.quarantine <path-to-marksman-bin>`.\n\n[^roam-research]: You may have heard about [Roam Research][roam]. That is a commercial implementation of the\nZettelkasten method and another point of reference for what Marksman is about. However, unlike a proprietary Roam\nResearch, Marksman is free, open-source and integrated into your favourite editor (albeit for not not as feature rich as\nRoam Research).\n\n[^markdown-memo]: There is an excellent VSCode extension called [Markdown Memo][md-memo]. You definitely need\nto check it out if you're primarily using VSCode as it has some features that are missing in Marksman and [Marksman\nVSCode extension][mn-vscode]. However, Markdown Memo is VSCode specific while Marksman is a generic language server, so\ncan be used with any editor that has LSP support: Emacs, Vim, Neovim, etc.\n\n[^lsp]: Since Marksman is a regular Language Server most of the functionality works out of the box\nwith any LSP client.\n\n[^single-file-mode]: There is an initiative to add a single-file mode to\nLSP but it's not a part of the spec at least until and including v3.17.\n\n[zettel-wiki]: https://en.wikipedia.org/wiki/Zettelkasten\n\n[roam]: https://roamresearch.com\n\n[md-memo]: https://github.com/svsool/vscode-memo\n\n[mn-vscode]: https://github.com/artempyanykh/marksman-vscode\n\n[original-zn]: https://github.com/artempyanykh/zeta-note\n\n[nvim-marksman]: https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md#marksman\n\n[mason-nvim]: https://github.com/williamboman/mason.nvim\n\n[mason-nvim-lsp-config]: https://github.com/williamboman/mason-lspconfig.nvim\n\n[lsp-main]: https://microsoft.github.io/language-server-protocol/\n\n[helix-editor]: https://helix-editor.com\n\n[helix-marksman-pr]: https://github.com/helix-editor/helix/pull/3499\n\n[coc-marksman]: https://github.com/yaegassy/coc-marksman\n\n[eglot]: https://github.com/joaotavora/eglot\n\n[eglot-marksman-pr]: https://github.com/joaotavora/eglot/pull/1013\n\n[sublime-marksman]: https://github.com/bitsper2nd/LSP-marksman\n\n[ale]: https://github.com/dense-analysis/ale"
}
