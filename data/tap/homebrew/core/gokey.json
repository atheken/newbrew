{
  "name": "gokey",
  "full_name": "gokey",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Simple vaultless password manager in Go",
  "license": "BSD-3-Clause",
  "homepage": "https://github.com/cloudflare/gokey",
  "versions": {
    "stable": "0.1.2",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/cloudflare/gokey/archive/refs/tags/v0.1.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "31144a7906682acf25279c5c0958aff2273c24f83da0d9ad27962fbd9c3d7d5b"
    },
    "head": {
      "url": "https://github.com/cloudflare/gokey.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gokey/blobs/sha256:79c2de4a09b14270dbb34a722bf3de6b15f8139d7bf05f216b6ed79d7a1f8911",
          "sha256": "79c2de4a09b14270dbb34a722bf3de6b15f8139d7bf05f216b6ed79d7a1f8911"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gokey/blobs/sha256:12d61d5319e53dee658e15b69e69744833092e45adea973390ad3c770c90e281",
          "sha256": "12d61d5319e53dee658e15b69e69744833092e45adea973390ad3c770c90e281"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gokey/blobs/sha256:289fb7726ca245695374d2e7fc51fce988e748acda51adf05aa83d19e7b81259",
          "sha256": "289fb7726ca245695374d2e7fc51fce988e748acda51adf05aa83d19e7b81259"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gokey/blobs/sha256:d6d274f4e2d9f22efcf87d576496061701e8e4aa8a1732d1ea34791b0eb2779d",
          "sha256": "d6d274f4e2d9f22efcf87d576496061701e8e4aa8a1732d1ea34791b0eb2779d"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gokey/blobs/sha256:9aec79e51fc11ba5db465a4ecd2b78c80fd4dfeee3f4382f16ab59e6e7eb51d1",
          "sha256": "9aec79e51fc11ba5db465a4ecd2b78c80fd4dfeee3f4382f16ab59e6e7eb51d1"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gokey/blobs/sha256:49f8a560cbaff9a6d48656fbabe3b7ca23e743dc6b53394fa89778879e0be08b",
          "sha256": "49f8a560cbaff9a6d48656fbabe3b7ca23e743dc6b53394fa89778879e0be08b"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gokey/blobs/sha256:3cf427d0e4e3cba9c647cc28626c957ff00ffb09af87c9e9d68c6dab7aec033d",
          "sha256": "3cf427d0e4e3cba9c647cc28626c957ff00ffb09af87c9e9d68c6dab7aec033d"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go",
    "go-md2man"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/gokey.rb",
  "ruby_source_checksum": {
    "sha256": "80fceb7a6b445b2e6f4ade3a63e6b64a6f616716697f359d3e44a81a6f7c0967"
  },
  "date_added": "2023-01-14T04:42:40+00:00",
  "readme": "# gokey\n\n![build](https://github.com/cloudflare/gokey/actions/workflows/ci.yml/badge.svg)\n[![Go Report Card](https://goreportcard.com/badge/github.com/cloudflare/gokey)](https://goreportcard.com/report/github.com/cloudflare/gokey)\n\n## A simple vaultless password manager in Go\n\n**gokey** is a password manager, which does not require a password vault.\nInstead of storing your passwords in a vault it derives your password on the\nfly from your master password and supplied _realm_ string (for example,\nresource URL). This way you do not have to manage, backup or sync your password\nvault (or trust its management to a third party) as your passwords are\navailable immediately anywhere.\n\n###### example\n```\ngokey -p super-secret-master-password -r example.com\n```\n\n###### options\n\n  - `-o <output path>` - by default **gokey** outputs generated data to\n  `stdout`\n  - `-P </path/to/password>` - path to master password file which will be used\n  to generate other passwords/keys or to encrypt seed file (see [Modes of\n  operation](#modes-of-operation) below, if no master password or master\n  password file is provided, **gokey** will ask for it interactively)\n  - `-p <master password>` - master password which will be used to generate\n  other passwords/keys or to encrypt seed file (see [Modes of\n  operation](#modes-of-operation) below, if no master password or master\n  password file is provided, **gokey** will ask for it interactively)\n  - `-r <password/key realm>` - any string which identifies requested\n  password/key, most likely key usage or resource URL\n  - `-s <path to seed file>` - needed, if you want to use seed file instead of\n  master password as an entropy source (see [Modes of\n  operation](#modes-of-operation) below); can be generated with `-t seed` flag\n  as described below\n  - `-skip <number of bytes>` - number of bytes to skip when reading seed file\n  - `-u` - **UNSAFE**, allow generating keys without using a seed file (see\n  [Modes of operation](#modes-of-operation) below)\n  - `-t <password/key type>` - requested password/key output type\n  - `-l <length>` - number of characters in the generated password or number of\n  bytes in the generated raw stream (default 10 for \"pass\" type and 32 for\n  \"raw\" type)\n\nSupported password/key types:\n  * `pass` - default, generates a password\n  * `seed` - generates a seed file, which can be used with `-s` option later\n  * `raw` - generates 32 random bytes (can be used as a symmetric key)\n  * `ec256` - generates ECC P-256 private key\n  * `ec384` - generates ECC P-384 private key\n  * `ec521` - generates ECC P-521 private key\n  * `rsa2048` - generates 2048-bit RSA private key\n  * `rsa4096` - generates 4096-bit RSA private key\n  * `x25519` - generates x25519 (also known as curve25519) ECC private key\n  * `ed25519` - generates ed25519 ECC private key\n\n### Installation\n\nThe **gokey** command-line utility can be downloaded and compiled using standard\n`go install` approach. Assuming you have [Go](https://golang.org/doc/install)\ninstalled, do\n```\ngo install github.com/cloudflare/gokey/cmd/gokey@latest\n```\nThe `gokey` binary should appear in your `$GOPATH/bin` directory. (Default\n`$HOME/go/bin`)\n\nPrecompiled binaries are also available in the [Releases section](https://github.com/cloudflare/gokey/releases)\n\n### Modes of operation\n\n**gokey** can generate passwords and cryptographic private keys (ECC and RSA\nkeys are currently supported). However, without any additional options\nspecified it uses your master password as a single source of entropy for\ngenerated data. For passwords it is acceptable most of the time, but keys\nusually have much higher entropy requirements.\n\nFor cases, where higher entropy is required for generated passwords/keys,\n**gokey** can use a seed file (a blob with random data) instead of the master\npassword as a source of entropy.\n\n#### Simple mode (without a seed file)\n\nIn simple mode passwords are derived directly from your master password and the\nrealm string. That is each unique combination of a master password and a realm\nstring will produce a unique password.\n\nFor example, if your master password is `super-secret-master-password` and you\nwant to generate a password for `example.com`, you would invoke **gokey** like\n```\ngokey -p super-secret-master-password -r example.com\n```\n\nIf you need a password for a different resource, (`example2.com`), you would\nchange the realm string\n```\ngokey -p super-secret-master-password -r example2.com\n```\nThis way you need to remember only your master password and you can always\nrecreate passwords for your services/resources.\n\nNOTE: In this mode generated passwords are as strong as your master password,\nso do have your master password strong enough. You can also derive private keys\nfrom your master password, but keep in mind, that these keys will have low\nentropy. That is why it is considered unsafe, so **gokey** does not allow it by\ndefault. If you **_really_** know what you are doing, you can override this\ndefault by supplying `-u` flag.\n\n#### Using a seed file\n\nIf you plan to generate not only passwords, but also private keys or you want\nto have your passwords/keys with higher entropy, you can use a seed file\ninstead of the master password. You still need to supply a master password,\nwhen invoking **gokey**, but it will be used only to protect the seed file\nitself; all generated passwords/keys will be derived from the data in the seed\nfile. **gokey** uses seed files protected (encrypted) with your master\npassword, so it is reasonably safe to store/backup seed files to a third party\nlocation, such as Google Drive or Dropbox.\n\nTo generate an encrypted seed file, use\n```\ngokey -p super-secret-master-password -t seed -o seedfile\n```\nThis will create a seed file `seedfile` with 256 bytes of random data. The data\nis encrypted using AES-256-GCM mode and `super-secret-master-password` as a\nkey.\n\nThen, to generate EC-256 private key for `example.com`, use\n```\ngokey -p super-secret-master-password -s seedfile -r example.com -t ec256\n```\n\nNOTE: you still need to remember your master password and keep a backup copy of\nyour seed file. If you forget your master password or lose your seed file, you\nwill lose all derived passwords/keys as well."
}
