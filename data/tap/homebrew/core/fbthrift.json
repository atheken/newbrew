{
  "name": "fbthrift",
  "full_name": "fbthrift",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Facebook's branch of Apache Thrift, including a new C++ server",
  "license": "Apache-2.0",
  "homepage": "https://github.com/facebook/fbthrift",
  "versions": {
    "stable": "2023.07.24.00",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/facebook/fbthrift/archive/refs/tags/v2023.07.24.00.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "92d4920338af200138c3d12d2757145f7ba1b2888bfbb10a7676ccbff03a0a08"
    },
    "head": {
      "url": "https://github.com/facebook/fbthrift.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/fbthrift/blobs/sha256:c6334fa782e693d39ce9691f7c4249104e7cfd6424cc6c56ed167b82b40c09ab",
          "sha256": "c6334fa782e693d39ce9691f7c4249104e7cfd6424cc6c56ed167b82b40c09ab"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/fbthrift/blobs/sha256:217812a7cf8b12dcfbc92ac61b488c38b314c5af583b707452955f0408707445",
          "sha256": "217812a7cf8b12dcfbc92ac61b488c38b314c5af583b707452955f0408707445"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/fbthrift/blobs/sha256:62193ae469f59d9de52809851b9f6ab301b2adbb3e8d505ee43027c9cf75a181",
          "sha256": "62193ae469f59d9de52809851b9f6ab301b2adbb3e8d505ee43027c9cf75a181"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/fbthrift/blobs/sha256:0c4fd676d8524cd5c0afd1d72166707070eb3b71a42be23befd9fe96de3b61d4",
          "sha256": "0c4fd676d8524cd5c0afd1d72166707070eb3b71a42be23befd9fe96de3b61d4"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/fbthrift/blobs/sha256:6b80eff7343ac015c778b79dd5a4fab0e97ca69227701f62241ecb736399ee81",
          "sha256": "6b80eff7343ac015c778b79dd5a4fab0e97ca69227701f62241ecb736399ee81"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/fbthrift/blobs/sha256:4c1129397a3e1e72142d669f9a065f12bd851abdc2ad98e935ddde043f44a69a",
          "sha256": "4c1129397a3e1e72142d669f9a065f12bd851abdc2ad98e935ddde043f44a69a"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fbthrift/blobs/sha256:cc47fc7ceba2f40fc333d8fe80b6192dce4b6c6102182ce4ac9cadeed4c3ca99",
          "sha256": "cc47fc7ceba2f40fc333d8fe80b6192dce4b6c6102182ce4ac9cadeed4c3ca99"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "bison",
    "cmake",
    "mvfst"
  ],
  "dependencies": [
    "boost",
    "fizz",
    "fmt",
    "folly",
    "gflags",
    "glog",
    "openssl@3",
    "wangle",
    "zstd"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    {
      "flex": "build"
    },
    "zlib"
  ],
  "uses_from_macos_bounds": [
    {},
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/fbthrift.rb",
  "ruby_source_checksum": {
    "sha256": "0d31f5abe99439a81bbb32d86c06eb2539db19e63e81fb9178770c96ee241f00"
  },
  "date_added": "2022-01-17T07:20:08+00:00",
  "readme": "Facebook Thrift\n---------------\n\n[![Support Ukraine](https://img.shields.io/badge/Support-Ukraine-FFD500?style=flat&labelColor=005BBB)](https://opensource.fb.com/support-ukraine)\n[![Linux Build Status](https://github.com/facebook/fbthrift/workflows/linux/badge.svg)](\n  https://github.com/facebook/fbthrift/actions/workflows/getdeps_linux.yml)\n[![macOS Build Status](https://github.com/facebook/fbthrift/workflows/mac/badge.svg)](\n  https://github.com/facebook/fbthrift/actions/workflows/getdeps_mac.yml)\n[![Windows Build Status](https://github.com/facebook/fbthrift/workflows/windows/badge.svg)](\n  https://github.com/facebook/fbthrift/actions/workflows/getdeps_windows.yml)\n<img src=\"thrift/website/static/img/logo.svg\"\n     alt=\"Facebook Thrift Logo\" align=\"right\" width=\"20%\"/>\n\nThrift is a serialization and RPC framework for service communication. Thrift enables these features in all major languages, and there is strong support for C++, Python, Hack, and Java. Most services at Facebook are written using Thrift for RPC, and some storage systems use Thrift for serializing records on disk.\n\nFacebook Thrift is not a distribution of [Apache Thrift](https://thrift.apache.org/). This is an evolved internal branch of Thrift that Facebook re-released to open source community in February 2014. Facebook Thrift was originally released closely tracking Apache Thrift but is now evolving in new directions. In particular, the compiler was rewritten from scratch and the new implementation features a fully asynchronous Thrift server. Read more about these improvements in the [ThriftServer documentation](https://github.com/facebook/fbthrift/blob/main/thrift/doc/languages/cpp/cpp2.md).\n\nYou can also learn more about this project in the original Facebook Code [blog post](https://code.facebook.com/posts/1468950976659943/under-the-hood-building-and-open-sourcing-fbthrift/).\n\nTable of Contents\n=========================\n\n* [About Thrift](#about-thrift)\n  * [A Code Generator](#a-code-generator)\n  * [A Serialization Framework](#a-serialization-framework)\n  * [An RPC Framework](#an-rpc-framework)\n* [Building](#building)\n  * [Dependencies](#dependencies)\n  * [Build](#build)\n  * [Thrift Files](#thrift-files)\n* [C++ Static Reflection](#c-static-reflection)\n* [C++ Server Metrics](#c-server-metrics)\n\n## About Thrift\nAt a high level, Thrift is three major things:\n\n### A Code Generator\n\nThrift has a code generator which generates data structures that can be serialized using Thrift, and client and server stubs for RPC, in different languages.\n\n### A Serialization Framework\n\nThrift has a set of protocols for serialization that may be used in different languages to serialize the generated structures created from the code generator.\n\n### An RPC Framework\n\nThrift has a framework to frame messages to send between clients and servers and to call application-defined functions when receiving messages in different languages.\n\nThere are several key goals for these components:\n* Ease of use:\n  Thrift takes care of the boilerplate of serialization and RPC and enables the developer to focus on the schema of the system's serializable types and on the interfaces of the system's RPC services.\n\n* Cross-language support:\n  Thrift enables intercommunication between different languages. For example, a Python client communicating with a C++ server.\n\n* Performance:\n  Thrift structures and services enable fast serialization and deserialization, and its RPC protocol and frameworks are designed with performance as a feature.\n\n* Backwards compatibility:\n  Thrift allows fields to be added to and removed from serializable types in a manner that preserves backward and forward compatibility.\n\n## Building\n\n### Dependencies\n\nOn Linux or MacOS (with [Homebrew](https://brew.sh/) installed) you can install\nsystem dependencies to avoid building them:\n\n    # Clone the repo\n    git clone https://github.com/facebook/fbthrift\n    # Install dependencies\n    cd fbthrift\n    ./build/fbcode_builder/getdeps.py install-system-deps --recursive fbthrift\n\nOn other platforms or if on Linux and without system dependencies `getdeps.py`\nwill mostly download and build them for you during the build step.\n\nSome of the dependencies `getdeps.py` uses and installs are:\n\n**System**:\n[Boost](https://www.boost.org),\n[CMake](https://cmake.org),\n[OpenSSLv1.0.2g](https://www.openssl.org),\n[PThreads](https://computing.llnl.gov/tutorials/pthreads),\n[Python](https://www.python.org/), and\n[Zlib](https://zlib.net)\n\n**External**:\n[{fmt}](https://github.com/fmtlib/fmt),\n[GFlags](https://github.com/gflags/gflags),\n[GLog](https://github.com/google/glog), and\n[GTest and GMock](https://github.com/google/googletest)\n\n**Facebook**:\n[Fizz](https://github.com/facebookincubator/fizz),\n[Folly](https://github.com/facebook/folly),\n[Wangle](https://github.com/facebook/wangle), and\n[Zstd](https://github.com/facebook/zstd)\n\nThe Thrift compiler only depends on Boost, CMake and {fmt}.\n\n### Build\n\n    # Clone the repo\n    git clone https://github.com/facebook/fbthrift\n    cd fbthrift\n    # Build, using system dependencies if available\n    ./build/fbcode_builder/getdeps.py --allow-system-packages build fbthrift\n\n`getdeps.py` will invoke cmake etc and put output in its scratch area (you can see in logs, and can override with `--scratch-path`):\n\n* `installed/fbthrift/bin/thrift1`: The Thrift compiler binary to generate client and\n  server code.\n* `installed/fbthrift/lib/libthriftcpp2.a`: Library for clients and servers.\n\nIf you want to invoke `cmake` again to iterate, there is an helpful `run_cmake.py` output in the scratch `build/fbthrift` directory.\n\nCMake options:\n\n* `THRIFT_COMPILER_ONLY`:\n  specifies whether to build only the Thrift compiler (OFF by default)\n* `enable_tests`:\n  specifies whether to enable tests\n\n### Thrift Files\n\nWhen using thrift and the CMake build system, include: `ThriftLibrary.cmake` in\nyour project. This includes the following macro to help building Thrift files:\n\n    thrift_library(\n      #file_name\n      #services\n      #language\n      #options\n      #file_path\n      #output_path\n    )\n\nThis generates a library called `file_name-<language>`. That is, for\n`Test.thrift` compiled as cpp2, it will generate the library `Test-cpp2`.\nThis should be added as a dependency to any source or header file that contains\nan include to generated code.\n\n## C++ Static Reflection\n\nInformation regarding C++ Static Reflection support can be found under the [static reflection library directory](thrift/lib/cpp2/reflection/), in the corresponding [`README` file](thrift/lib/cpp2/reflection/README.md).\n\n## C++ Server Metrics\n\nTo collect runtime stats from a Thrift server, e.g. the number of active requests/connections, the C++ Thrift server supports an observer API that installs callbacks at a set of specific execution points in the server.\n\nTo expose collected metrics out of the server process, one way is to use `fb303` interfaces, see [fb303 Github repo](https://github.com/facebook/fb303)."
}
