{
  "name": "poac",
  "full_name": "poac",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Package Manager for C++",
  "license": "Apache-2.0",
  "homepage": "https://github.com/poac-dev/poac",
  "versions": {
    "stable": "0.6.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/poac-dev/poac/archive/refs/tags/0.6.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "40f55553f7cca3bdad39599ce8c9049aeecf8f6140cfebac28c51d7d9abbbb78"
    },
    "head": {
      "url": "https://github.com/poac-dev/poac.git",
      "branch": "main"
    }
  },
  "revision": 3,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/poac/blobs/sha256:a2d1bbd692d862ed69a18aea000a2f3c3f9cb242a477c63536c21db759cb1a04",
          "sha256": "a2d1bbd692d862ed69a18aea000a2f3c3f9cb242a477c63536c21db759cb1a04"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/poac/blobs/sha256:75266575278a200e0cdbb398b71ae0af259e6d707ed82f7d267285e206462b45",
          "sha256": "75266575278a200e0cdbb398b71ae0af259e6d707ed82f7d267285e206462b45"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/poac/blobs/sha256:70968a60b071fb721aa96c9ca6574c65084ffd8d1114da4d1bde0be6972b0ba0",
          "sha256": "70968a60b071fb721aa96c9ca6574c65084ffd8d1114da4d1bde0be6972b0ba0"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/poac/blobs/sha256:f006371b2f7fbd03ab4d33035a7dad2f201242e4cd694103866669e5ce6626b3",
          "sha256": "f006371b2f7fbd03ab4d33035a7dad2f201242e4cd694103866669e5ce6626b3"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/poac/blobs/sha256:b86f19b504b00fad55955e52a67d69c5a035a3d7773f445480e7a3423c943380",
          "sha256": "b86f19b504b00fad55955e52a67d69c5a035a3d7773f445480e7a3423c943380"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/poac/blobs/sha256:f4ce26e6cd14546d3d7df1ff451d80cd84aa14644ef50c35f76dccccd9c48f28",
          "sha256": "f4ce26e6cd14546d3d7df1ff451d80cd84aa14644ef50c35f76dccccd9c48f28"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/poac/blobs/sha256:6c78e46360c37b849eddaf9ca395c6384c178e70d9a26b568a7d0b7521066771",
          "sha256": "6c78e46360c37b849eddaf9ca395c6384c178e70d9a26b568a7d0b7521066771"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [
    "boost",
    "fmt",
    "libgit2",
    "openssl@3",
    "spdlog"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "libarchive"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/poac.rb",
  "ruby_source_checksum": {
    "sha256": "1e71e96a4bec351922589057c870aba8fcbfd115043380aeaf21e3689388c700"
  },
  "date_added": "2022-06-18T18:12:38+00:00",
  "readme": "<div align=\"center\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://user-images.githubusercontent.com/26405363/170157214-51b03bbd-cd29-432b-99ca-8f65c01f973e.svg\">\n    <source media=\"(prefers-color-scheme: light)\" srcset=\"https://user-images.githubusercontent.com/26405363/170157184-e338188c-e4fa-4967-ac74-aba03aefa0bc.svg\">\n    <img alt=\"Poac Logo\" width=\"250\" src=\"https://user-images.githubusercontent.com/26405363/170157184-e338188c-e4fa-4967-ac74-aba03aefa0bc.svg\">\n  </picture>\n</div>\n\n---\n\n[![GitHub Release Version](https://img.shields.io/github/release/poac-dev/poac.svg?style=flat)](https://github.com/poac-dev/poac/releases)\n[![GitHub License](https://img.shields.io/github/license/poac-dev/poac.svg)](LICENSE)\n[![DOI](https://zenodo.org/badge/119684778.svg)](https://zenodo.org/badge/latestdoi/119684778)\n[![codecov](https://codecov.io/gh/poac-dev/poac/branch/main/graph/badge.svg?token=eyNsQ5nugd)](https://codecov.io/gh/poac-dev/poac)\n[![Codacy Badge](https://app.codacy.com/project/badge/Grade/ac87f6b4a0284a2d8b88f3feb6c19f2b)](https://www.codacy.com/gh/poac-dev/poac/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=poac-dev/poac&amp;utm_campaign=Badge_Grade)\n[![CodeFactor](https://www.codefactor.io/repository/github/poac-dev/poac/badge)](https://www.codefactor.io/repository/github/poac-dev/poac)\n\n## Description\n\n> **Note**: Poac is still under development and may contain a bunch of bugs.\n\nPoac (pronounced as `/pəʊək/`) is a package manager and build system for C++ users, inspired by Cargo for Rust.\n\nPoac can download project's dependencies and compile a project.\nPlease visit [poac.dev](https://poac.dev) and [The Poac Book](https://doc.poac.dev) for more details.\n\n## Demo\n\nBy using Poac, you can create a C++ project, build sources, and execute an application:\n\n![demo](https://user-images.githubusercontent.com/26405363/169694620-2e3f769e-c6c5-4e6a-a645-e5bae226a8cb.gif)\n\n## Hello World\n\nYou can get started with just a few commands as the demo shows. Let's create a new Poac project as follows:\n\n```console\nyou:~$ poac create hello_world\n     Created binary (application) `hello_world` package\n```\n\nThen, you can use the `poac run` command to run your application:\n\n```console\nyou:~$ cd hello_world\nyou:~/hello_world$ poac run\n   Compiling 1/1: hello_world v0.1.0 (/Users/you/hello_world)\n    Finished debug target(s) in 0.90s\n     Running `/Users/you/hello_world/poac-out/debug/hello_world`\nHello, world!\n```\n\n## Supported Operating Systems\n\n|                                                                                   Linux                                                                                    |                                                                                   macOS                                                                                    |\n|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------:|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------:|\n| [![GitHub Actions Linux Build](https://github.com/poac-dev/poac/workflows/Linux/badge.svg?branch=main)](https://github.com/poac-dev/poac/actions?query=workflow%3A%22Linux%22) | [![GitHub Actions macOS Build](https://github.com/poac-dev/poac/workflows/macOS/badge.svg?branch=main)](https://github.com/poac-dev/poac/actions?query=workflow%3A%22macOS%22) |\n\n## Installation\n\n### 3rd Party Installation (recommended)\n\nSince packages through these providers may not be maintained by Poac owners, install them at your own risk.\n\n[![Packaging status](https://repology.org/badge/vertical-allrepos/poac.svg)](https://repology.org/project/poac/versions)\n\nIt is important to verify the package name and copy it accurately to prevent typosquatting attacks. You can check the correct name by following the link in [`Packaging status` (Repology)](https://repology.org/project/poac/versions).\n\n#### Homebrew (macOS & Linux)\n\n```sh\nbrew install poac\n```\n\n#### MacPorts (macOS)\n\n```sh\nsudo port install poac\n```\n\n### Build from source\n\nIf your environment is not included in the released packages, you have to construct Poac from the source. To build Poac, you will require the following compilers, tools, and libraries:\n\n#### compilers\n\n* Compilers which support [C++20](https://en.cppreference.com/w/cpp/20) and modules\n  <!-- * `GCC`: `11` or later -->\n  * `Clang`: `16` or later\n  <!-- * `Apple Clang`: provided by `macOS Big Sur (11)` or later -->\n\n#### tools\n\n* [`CMake`](https://gitlab.kitware.com/cmake/cmake): [`3.26`](https://cmake.org/cmake/help/latest/release/3.26.html) or later\n* [`Ninja`](https://github.com/ninja-build/ninja): [`1.11`](https://github.com/ninja-build/ninja/releases/tag/v1.11.0) or later\n\n#### libraries\n\n* [`boost`](https://github.com/boostorg): [`1.70.0`](https://github.com/boostorg/boost/releases/tag/boost-1.70.0) or later\n  * algorithm\n  * asio\n  * beast\n  * container_hash\n  * dynamic_bitset\n  * graph\n  * predef\n  * preprocessor\n  * property_tree\n  * range\n  * regex\n  * scope_exit\n  * uuid\n* [`openssl`](https://github.com/openssl/openssl): [`3.0.0`](https://github.com/openssl/openssl/releases/tag/openssl-3.0.0) or later\n  * some `SHA256` functions are marked as [deprecated](https://github.com/openssl/openssl/blob/openssl-3.0.0/include/openssl/sha.h#L57-L79) since `3.0.0`\n\n<details>\n<summary>\n\n> **Note**:\n> When configuring with CMake, the following libraries will be installed automatically. Therefore, there is usually no need to be concerned about them. (click here to view additional dependencies.)\n</summary>\n\n---\n\n**dependencies**\n\n* [`fmt`](https://github.com/fmtlib/fmt): [`9.0.0`](https://github.com/fmtlib/fmt/releases/tag/9.0.0) or later\n* [`git2-cpp`](https://github.com/ken-matsui/git2-cpp): [`0.1.1`](https://github.com/ken-matsui/git2-cpp/releases/tag/0.1.1) or later\n* [`glob`](https://github.com/p-ranav/glob): [`v0.0.1`](https://github.com/p-ranav/glob/releases/tag/v0.0.1) or later\n* [`libarchive`](https://github.com/libarchive/libarchive): [`v3.6.1`](https://github.com/libarchive/libarchive/tree/master) or later\n  * requires [this commit](https://github.com/libarchive/libarchive/commit/a4c3c90bb828ab5f01589718266ac5d3fdccb854)\n* [`libgit2`](https://github.com/libgit2/libgit2): [`v1.4.3`](https://github.com/libgit2/libgit2/releases/tag/v1.4.3) or later\n  * requires security updates\n* [`mitama-cpp-result`](https://github.com/LoliGothick/mitama-cpp-result): [`v9.3.0`](https://github.com/LoliGothick/mitama-cpp-result/releases/tag/v9.3.0) or later\n  * requires [this commit](https://github.com/LoliGothick/mitama-cpp-result/commit/ec7f22ae921f750b0115681623d0c06223737819)\n* [`ninja`](https://github.com/ninja-build/ninja): [`57b8fee`](https://github.com/ninja-build/ninja/commit/57b8fee639a4290176086f3839c78bfc0d02c42b) or later\n  * requires [this commit](https://github.com/ninja-build/ninja/commit/57b8fee639a4290176086f3839c78bfc0d02c42b)\n  * [`v1.11.1`](https://github.com/ninja-build/ninja/releases/tag/v1.11.1) does not include the commit\n* [`spdlog`](https://github.com/gabime/spdlog): [`1.9.0`](https://github.com/gabime/spdlog/releases/tag/v1.9.0) or later\n* [`structopt`](https://github.com/p-ranav/structopt): [`b1e1e16`](https://github.com/p-ranav/structopt/commit/b1e1e16867a5cf282664d392a18680cb5e3f6041) or later\n  * requires [this commit](https://github.com/p-ranav/structopt/commit/b1e1e16867a5cf282664d392a18680cb5e3f6041)\n  * awaiting the next release above [`v0.1.3`](https://github.com/p-ranav/structopt/releases/tag/v0.1.3)\n* [`toml11`](https://github.com/ToruNiina/toml11): [`9086b11`](https://github.com/ToruNiina/toml11/commit/9086b1114f39a8fb10d08ca704771c2f9f247d02) or later\n  * requires [this commit](https://github.com/ToruNiina/toml11/commit/9086b1114f39a8fb10d08ca704771c2f9f247d02)\n  * awaiting the next release above [`v3.7.1`](https://github.com/ToruNiina/toml11/releases/tag/v3.7.1)\n\n**dev-dependencies**\n\n* [`μt`](https://github.com/boost-ext/ut): [`v1.1.9`](https://github.com/boost-ext/ut/releases/tag/v1.1.9) or later\n\n---\n\n</details>\n\nOnce you have all the necessary requirements in place, you can proceed to build Poac by executing the following commands:\n\n```bash\ngit clone https://github.com/poac-dev/poac.git\ncd poac\ncmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release\ncd build\nninja\nninja install\n```\n\nPoac attempts to utilize locally installed dependencies by default. To bypass the use of local packages, you can specify `-DCPM_USE_LOCAL_PACKAGES=OFF` as an option for the `cmake` command.\n\n## Usage\n\n### Start a new project with Poac\n\nThe `poac create` command lets you start a new Poac project:\n\n```console\nyou:~$ poac create hello_world\n     Created binary (application) `hello_world` package\n```\n\n> **Note**:\n> If you want to integrate your existing project with Poac, use the `init` command:\n> \n> ```console\n> you:~/your-pj$ poac init\n>      Created binary (application) `your-pj` package\n> ```\n> \n> This command just creates a `poac.toml` file not to break your project.\n\n### Build the project\n\nIn most cases, you will want to execute a binary as well as build the project—of course, you can.\n\n```console\nyou:~/hello_world$ poac run\n   Compiling 1/1: hello_world v0.1.0 (/Users/you/hello_world)\n    Finished debug target(s) in 0.90s\n     Running `/Users/you/hello_world/poac-out/debug/hello_world`\nHello, world!\n```\n\nShould you just build it, run the `build` command:\n\n```console\nyou:~/hello_world$ poac build\n    Finished debug target(s) in 0.21s\n```\n\nPoac uses a cache since we executed the command with no changes.\n\n### Install dependencies\n\nLike Cargo for Rust does, Poac installs dependencies at build time.\nHowever, Poac does not support [weired version specifiers](https://stackoverflow.com/q/22343224), such as `~` and `^`.\nYou can specify dependencies like:\n\n`poac.toml`\n\n```toml\n[dependencies]\n\"boost/bind\" = \">=1.64.0 and <2.0.0\"\n```\n\nWe regularly avoid auto updating packages to major versions which bring breaking changes, but minor and patch are acceptable.\n\n> **Note**:\n> If you would use a specific version, you can write the version as following:\n>\n> ```toml\n> [dependencies]\n> \"boost/bind\" = \"1.66.0\"\n> ```\n\n#### Conan V1 Registry\n\nPoac also supports Conan V1 Registry. To use it:\n\n`poac.toml`\n\n```toml\n[dependencies]\nfmt = { version = \"9.1.0\", registry = \"conan-v1\" }\nspdlog = { version = \"1.10.0\", registry = \"conan-v1\" }\nleveldb = { version = \"1.23\", registry = \"conan-v1\" }\n```\n\n*The demo is publised on [wx257osn2/poac-conan-demo](https://github.com/wx257osn2/poac-conan-demo)*\n\nAfter editing `poac.toml`, executing the `build` command will install the package and its dependencies.\n\n```console\nyou:~/hello_world$ poac build\n   Resolving dependencies ...\n Downloading packages ...\n  Downloaded boost/bind v1.66.0\n  Downloaded boost/core v1.66.0\n  Downloaded boost/assert v1.66.0\n  Downloaded boost/config v1.66.0\n   Compiling 1/1: hello_world v0.1.0 (/Users/you/hello_world)\n    Finished debug target(s) in 0.70s\n```\n\nTo use this dependency, update the `main.cpp` file.\n\n`src/main.cpp`\n\n```cpp\n#include <iostream>\n#include <boost/bind.hpp>\n\nint f(int a, int b) {\n  return a + b;\n}\n\nint main(int argc, char** argv) {\n  std::cout << boost::bind(f, 5, _1)(10) << std::endl;\n}\n```\n\nYou can now run this source code:\n\n```console\nyou:~/hello_world$ poac run\n   Compiling 1/1: hello_world v0.1.0 (/Users/you/hello_world)\n    Finished debug target(s) in 0.50s\n     Running `/Users/you/hello_world/poac-out/debug/hello_world`\n15\n```\n\n> **Warning**:\n> We currently support building a project with header-only dependencies.\n> Building with build-required dependencies will be soon supported.\n\n### Create a dependency graph\n\nYou can create a dependency graph by using the `graph` command:\n\n```console\nyou:~/hello_world$ poac graph -o out.png\n   Generated out.png\n```\n\n![Dependency Graph](https://user-images.githubusercontent.com/26405363/173274015-9fd4869d-94cf-4667-b07f-8e9fd94a02a6.png)\n\nOr you can export the graph as a `.dot` file:\n\n```console\nyou:~/hello_world$ poac graph -o out.dot\n   Generated out.dot\n```\n\n```dot\ndigraph G {\n0[label=\"boost/bind: 1.66.0\"];\n1[label=\"boost/config: 1.66.0\"];\n2[label=\"boost/core: 1.66.0\"];\n3[label=\"boost/assert: 1.66.0\"];\n0->2 ;\n0->1 ;\n2->3 ;\n2->1 ;\n3->1 ;\n}\n```\n\n> **Note**:\n> When you want to export the graph as a `.png` file, please ensure `graphviz` is installed.\n\nIf you omit specifying the output path, then Poac emits the graph to standard output:\n\n```console\nyou:~/hello_world$ poac graph\nboost/bind -> boost/core\nboost/bind -> boost/config\nboost/core -> boost/assert\nboost/core -> boost/config\nboost/assert -> boost/config\n```\n\n### Run linter\n\nLinting source code is essential to protect its quality.\nPoac supports linting it by a simple command with `cpplint`:\n\n```console\nyou:~/hello_world$ poac lint\n     Linting hello_world\nsrc/main.cpp:0:  No copyright message found.  You should have a line: \"Copyright [year] <Copyright Owner>\"  [legal/copyright] [5]\nDone processing src/main.cpp\nTotal errors found: 1\n\nError: `cpplint` completed with exit code 1\n```\n\n> **Note**:\n> If you do not have `cpplint`, install it with the following command:\n>\n> ```bash\n> pip install cpplint\n> ```\n\nThe `lint` command works without configurations, and Poac would automatically opt out of unwanted lints by adjusting to each project.\nTo customize the lint settings, try adding the `[lint.cpplint]` key in your `poac.toml` like [this](https://github.com/poac-dev/poac/blob/cc30b706fb49860903384df56d650a0955aca16c/poac.toml#L67-L83)\nor creating a [`CPPLINT.cfg`](https://github.com/poac-dev/poac/blob/5e7e3792e8818d165149214e94f30958fb0fef66/CPPLINT.cfg) file to the repository root.\n\n### Run formatter\n\nPoac also supports formatting your source code with `clang-format`.\nEnsure having installed `clang-format` before running this command.\n\n```console\nyou:~/hello_world$ poac fmt\n  Formatting hello_world\n```\n\n> **Note**:\n> This command automatically detects what files we need to format to avoid bothering commands like:\n>\n> ```console\n> $ # We need to avoid the `build` dir and such dirs ...\n> $ clang-format ./src/*.cpp -i\n> $ clang-format ./include/**/*.hpp -i\n> $ clang-format ./tests/**/*.cpp -i\n> $ ...\n> ```\n\nTo customize the format settings, try creating a [`.clang-format`](/.clang-format) file to the repository root.\n\n### Search packages\n\nIn case you would find what packages are provided, you can use the `search` command or visit [poac.dev](https://poac.dev).\n\n```console\n$ poac search func\nboost/function = \"1.66.0\"               # Boost.org function module\nboost/function_types = \"1.66.0\"         # Boost.org function_types module\nboost/functional = \"1.66.0\"             # Boost.org functional module\n```\n\n### Publish packages\n\nWIP\n\n## Roadmap\n\n|                        Feature                      |       Status       |\n|:---------------------------------------------------:|:------------------:|\n|                 Install dependencies                | :white_check_mark: |\n|     Build a project with header-only dependencies   | :white_check_mark: |\n|               Support dev-dependencies              | :white_check_mark: |\n| Build a project including separated headers & impls |                    |\n|                   Publish packages                  |        WIP         |\n|    Build a project with build-required dependencies |                    |\n|               Build a project with CMake            |                    |\n\n## Why Poac?\n\nC++ is often considered a complex language and unconsciously avoided by many. The absence of a definitive package manager and the unfamiliar syntax of build systems like [CMake](https://cmake.org) make it seem difficult to set up a C++ environment, leaving people hesitant.\n\nTo simplify the process and allow users to develop applications and libraries without worrying about [CMake](https://cmake.org), I created a package manager and build system with an intuitive interface, similar to [Cargo](https://github.com/rust-lang/cargo). This allows developers to focus on learning C++ without any hindrances. Additionally, I aim to integrate with other build systems and package managers, providing a seamless transition between development environments.\n\n### Naming Background\n\nPoac is originated from `cpp` but designed to prioritize ease of typing and reduce strain on one hand as it will be frequently used as a command. Its name is ergonomically optimized to prevent the development of tenosynovitis.\n\n<img width=\"1230\" alt=\"ergo\" src=\"https://user-images.githubusercontent.com/26405363/169741684-ecb8aaad-2599-45ae-a680-a26f11652132.png\">\n\nDespite C++ often being overlooked for product development, I believe that Poac can help to promote it as a fun language. Amemiya and Mizutani argue that the sound of `/p/` is associated with a bright and soft impression among Japanese consonants (157)[^1]. In the same way, I believe that Poac's name can convey a similarly positive impression.\n\n## Contributing\n\n### Source Code Documentation\n\nA source code documentation for Poac is generated by Doxygen every commit to the `main` branch:\n\nhttps://dev.poac.dev\n\n### Before submitting your PR\n\nPlease make sure to follow these steps:\n> **Note**: I expect you to use the latest `clang-tidy` and `clang-format`.\n\n#### Run linter (`cpplint`)\n\n```bash\npoac lint\n```\n\n#### Run formatter (`clang-format`)\n\n```bash\npoac fmt\n```\n\n#### Build with `clang-tidy`\n\nFollow the instruction at [Build from source](#build-from-source).\n\nThese are also done when pre-push as specified in [`.githooks/pre-push`](/.githooks/pre-push).\nIn case you would skip these hooks, use the [`--no-verify`](https://git-scm.com/docs/git-commit#Documentation/git-commit.txt---no-verify) option.\n\n---\n\nThis project exists thanks to all the people who contribute.\n\n<a href=\"https://github.com/poac-dev/poac/graphs/contributors\">\n  <img src=\"https://contributors-img.web.app/image?repo=poac-dev/poac\" />\n</a>\n\n## License\n\nPoac is licensed under the terms of the Apache License version 2.0.\n\nPlease see [LICENSE](LICENSE) for details.\n\n### Third-party software\n\n* boost - <https://github.com/boostorg/boost/blob/master/LICENSE_1_0.txt>\n* fmt - <https://github.com/fmtlib/fmt/blob/master/LICENSE.rst>\n* git2-cpp - <https://github.com/ken-matsui/git2-cpp/blob/main/LICENSE>\n* glob - <https://github.com/p-ranav/glob/blob/master/LICENSE>\n* libarchive - <https://github.com/libarchive/libarchive/blob/master/COPYING>\n* libgit2 - <https://github.com/libgit2/libgit2/blob/master/COPYING>\n* mitama-cpp-result - <https://github.com/LoliGothick/mitama-cpp-result/blob/master/LICENSE>\n* ninja - <https://github.com/ninja-build/ninja/blob/master/COPYING>\n* openssl - <https://github.com/openssl/openssl/blob/master/LICENSE.txt>\n* spdlog - <https://github.com/gabime/spdlog/blob/v1.x/LICENSE>\n* structopt - <https://github.com/p-ranav/structopt/blob/master/LICENSE>\n* toml11 - <https://github.com/ToruNiina/toml11/blob/master/LICENSE>\n* μt - <https://github.com/boost-ext/ut/blob/master/LICENSE.md>\n\n\n[^1]: Amemiya, T., & Mizutani, S. (2006). On the Basic Affective Dimensions of Japanese Onomatopoeia and the Basic Level of Japanese Phonesthemes. 関西大学社会学部紀要, 37(2), 139–166. https://hdl.handle.net/10112/12311"
}
