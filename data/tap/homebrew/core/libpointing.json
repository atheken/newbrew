{
  "name": "libpointing",
  "full_name": "libpointing",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Provides direct access to HID pointing devices",
  "license": "GPL-2.0",
  "homepage": "https://github.com/INRIA/libpointing",
  "versions": {
    "stable": "1.0.8",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/INRIA/libpointing/releases/download/v1.0.8/libpointing-mac-1.0.8.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "b19a701b9181be05c3879bbfc901709055c27de7995bd59ada4e3f631dfad8f2"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libpointing/blobs/sha256:79773a252a784d765237674545e3355bec847c95f9ac82cc89826936954f8990",
          "sha256": "79773a252a784d765237674545e3355bec847c95f9ac82cc89826936954f8990"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libpointing/blobs/sha256:777a0f897878a4da3693f9d8a5717f42ff70fc281a81b57b4841a31ce17e7100",
          "sha256": "777a0f897878a4da3693f9d8a5717f42ff70fc281a81b57b4841a31ce17e7100"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libpointing/blobs/sha256:19de172dd9ad6744f9939955a5c526d3626400727631cdd07a6e22d8791fbf48",
          "sha256": "19de172dd9ad6744f9939955a5c526d3626400727631cdd07a6e22d8791fbf48"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libpointing/blobs/sha256:97732d46ffab874e21adbaeaf3a6953df026772565ccfa5dcb5f5d51378ac75e",
          "sha256": "97732d46ffab874e21adbaeaf3a6953df026772565ccfa5dcb5f5d51378ac75e"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libpointing/blobs/sha256:9fad8e2c767cc76679b49546cf443a0ec1d7b7115dbd82faaff20649b3b77ff4",
          "sha256": "9fad8e2c767cc76679b49546cf443a0ec1d7b7115dbd82faaff20649b3b77ff4"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libpointing/blobs/sha256:e9168eee924fc759e012e3ef41d64750d732f0d09a7af068fd935746835da472",
          "sha256": "e9168eee924fc759e012e3ef41d64750d732f0d09a7af068fd935746835da472"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libpointing/blobs/sha256:d56d66f5df0d6e1c80cc4e4951e8add9cbb0c5fb76080c9107f66665b8b46e48",
          "sha256": "d56d66f5df0d6e1c80cc4e4951e8add9cbb0c5fb76080c9107f66665b8b46e48"
        },
        "mojave": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libpointing/blobs/sha256:adecdbec3a556dfd78dd1aa24f6868814fc4b3243310311192fee4e9de912c62",
          "sha256": "adecdbec3a556dfd78dd1aa24f6868814fc4b3243310311192fee4e9de912c62"
        },
        "high_sierra": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libpointing/blobs/sha256:97e7550c8e3c3007df96cc98eab35a297ed857a6fd1bc24011d1dea8350966e5",
          "sha256": "97e7550c8e3c3007df96cc98eab35a297ed857a6fd1bc24011d1dea8350966e5"
        },
        "sierra": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libpointing/blobs/sha256:1fc9b4bdab762eb8f93c4a75c57e82b14f3274186f5185fa9a17e8d0f3bc3452",
          "sha256": "1fc9b4bdab762eb8f93c4a75c57e82b14f3274186f5185fa9a17e8d0f3bc3452"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/libpointing.rb",
  "ruby_source_checksum": {
    "sha256": "a167086c288b32a98367930a76eb595913645fc4654576930b50316f3e5601ff"
  },
  "date_added": "2014-12-07T01:08:45-05:00",
  "readme": "[![PyPI Version](https://img.shields.io/pypi/v/libpointing)](https://pypi.org/project/libpointing/)\n[![NPM Version](https://badge.fury.io/js/libpointing.svg?style=flat)](https://npmjs.org/package/libpointing)\n[![Homebrew Version](https://img.shields.io/homebrew/v/libpointing.svg)](https://formulae.brew.sh/formula/libpointing)\n[![choco-shield](https://img.shields.io/chocolatey/v/libpointing)](https://community.chocolatey.org/packages/libpointing)\n\n[![Linux](https://github.com/INRIA/libpointing/actions/workflows/linux.yml/badge.svg)](https://github.com/INRIA/libpointing/actions/workflows/linux.yml)\n[![macOS](https://github.com/INRIA/libpointing/actions/workflows/macOS.yml/badge.svg)](https://github.com/INRIA/libpointing/actions/workflows/macOS.yml)\n\n# Libpointing\n\nAn open-source cross-platform library to get raw events from pointing devices and master transfer functions.\n\n## Description\n\nLibpointing is an open-source cross-platform library written in C++ that provides direct access to HID pointing devices and supports the design of pointing transfer functions. External contributions as pull requests are welcome!\n\n- If you use libpointing for industrial purposes, please consider funding libpointing through a research contract with Inria (contact GÃ©ry Casiez or Nicolas Roussel for this).\n\n- If you use libpointing for academic purposes, please cite: Casiez, G. & Roussel, N. (2011). No more bricolage! Methods and tools to characterize, replicate and compare pointing transfer functions. In proceedings of UIST'11, the 24th ACM Symposium on User Interface Software and Technology, 603-614. ACM Press. [DOI](http://dx.doi.org/10.1145/2047196.2047276)\n\n[![DOI](https://img.shields.io/badge/doi-10.1145%2F2047196.2047276-blue)](https://doi.org/10.1145/2047196.2047276)\n\n```\n@inproceedings{Casiez:2011:NMB:2047196.2047276,\n author = {Casiez, G{\\'e}ry and Roussel, Nicolas},\n title = {No More Bricolage!: Methods and Tools to Characterize, Replicate and Compare Pointing Transfer Functions},\n booktitle = {Proceedings of the 24th Annual ACM Symposium on User Interface Software and Technology},\n series = {UIST '11},\n year = {2011},\n isbn = {978-1-4503-0716-1},\n location = {Santa Barbara, California, USA},\n pages = {603--614},\n numpages = {12},\n url = {http://doi.acm.org/10.1145/2047196.2047276},\n doi = {10.1145/2047196.2047276},\n acmid = {2047276},\n publisher = {ACM},\n address = {New York, NY, USA},\n keywords = {CD gain, control-display gain functions, pointer acceleration, pointing, toolkit, transfer functions},\n} \n```\n\n## Installation\n\nVisit [installation page](https://github.com/INRIA/libpointing/wiki/Installation) or build it from source.\n\n## Documentation\n\nPlease visit our [wiki](https://github.com/INRIA/libpointing/wiki).\n\n## Features\n\n* runs on Windows, Mac OS X and Linux,\n* makes it easy to choose the devices at run-time through the use of URIs,\n* provides raw information from input devices,\n* provides resolution and frequency information for the available pointing and display devices,\n* supports hot-plugging\n* allows to bypass the system's transfer functions to receive raw asynchronous events from one or more pointing devices.\n* replicates as faithfully as possible the transfer functions used by **Microsoft Windows**, **Apple OS X** and **Xorg** (the X.Org Foundation server).\n* running on these three platforms, it makes it possible to compare the replicated functions to the genuine ones as well as custom ones.\n* provides the functionality to use existing transfer functions, custom ones or even build your own functions.\n* supports [subpixel interaction](http://dx.doi.org/10.1145/2380116.2380162).\n* Java, Python, Node.js bindings are available.\n\n## Minimalistic example\n\nOnce you correctly installed *libpointing* and linked it to your project, simply write `#include <pointing/pointing.h>` and start coding. Here is the console example which applies system specific transfer function to an input device and outputs the results to console:\n\n```C++\n#include <iostream>\n#include <pointing/pointing.h>\n\nusing namespace pointing;\n\nTransferFunction *func = 0;\n\n// context is user data, timestamp is a moment at which the event was received\n// input_dx, input_dy are displacements in horizontal and vertical directions\n// buttons is a variable indicating which buttons of the pointing device were pressed.\nvoid pointingCallback(void *, TimeStamp::inttime timestamp, int input_dx, int input_dy, int buttons) {\n\tif (!func) return;\n\n\tint output_dx = 0, output_dy = 0;\n\t// In order to use a particular transfer function, its applyi method must be called.\n\tfunc->applyi(input_dx, input_dy, &output_dx, &output_dy, timestamp);\n\n\tstd::cout << \"Displacements in x and y: \" << input_dx << \" \" << input_dy << std::endl;\n\tstd::cout << \"Corresponding pixel displacements: \" << output_dx << \" \" << output_dy << std::endl;\n}\n\nint main() {\n\t// Basically, to start using main functionality of libpointing\n\t// one needs to create objects of PointingDevice, DisplayDevice classes,\n\t// connect them passing to TransferFunction class object.\n\n\t// Any available pointing and display devices\n\t// if debugLevel > 0, the list of available devices\n\t// and extended information will be output.\n\tPointingDevice *input = PointingDevice::create(\"any:?debugLevel=1\");\n\tDisplayDevice *output = DisplayDevice::create(\"any:?debugLevel=1\");\n\n\tfunc = TransferFunction::create(\"sigmoid:?debugLevel=2\", input, output);\n\n\t// To receive events from PointingDevice object, a callback function must be set.\n\tinput->setPointingCallback(pointingCallback);\n\twhile (1)\n\t\tPointingDevice::idle(100); // milliseconds\n\n\tdelete input;\n\tdelete output;\n\tdelete func;\n\n\treturn 0;\n}\n```\n\n## Contributors\n\n* [Nicolas Roussel](http://interaction.lille.inria.fr/~roussel)\n* [GÃ©ry Casiez](http://cristal.univ-lille.fr/~casiez/)\n* [Izzatbek Mukhanov](https://www.linkedin.com/in/izzat-mukhanov-26a93b63)\n\n## License\n\nThis software may be used and distributed according to the terms of the GNU General Public License version 2 or any later version.\n\nAd-hoc licences can be granted upon request."
}
