{
  "name": "vint",
  "full_name": "vint",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Vim script Language Lint",
  "license": "MIT",
  "homepage": "https://github.com/Vimjas/vint",
  "versions": {
    "stable": "0.3.21",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://files.pythonhosted.org/packages/9c/c7/d5fbe5f778edee83cba3aea8cc3308db327e4c161e0656e861b9cc2cb859/vim-vint-0.3.21.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "5dc59b2e5c2a746c88f5f51f3fafea3d639c6b0fdbb116bb74af27bf1c820d97"
    },
    "head": {
      "url": "https://github.com/Vimjas/vint.git",
      "branch": "master"
    }
  },
  "revision": 2,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 2,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vint/blobs/sha256:903c19aef5bbbd7e125cdb721c1b605d3db84143ba8c48b2acda71fa3a8c5b3a",
          "sha256": "903c19aef5bbbd7e125cdb721c1b605d3db84143ba8c48b2acda71fa3a8c5b3a"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vint/blobs/sha256:903c19aef5bbbd7e125cdb721c1b605d3db84143ba8c48b2acda71fa3a8c5b3a",
          "sha256": "903c19aef5bbbd7e125cdb721c1b605d3db84143ba8c48b2acda71fa3a8c5b3a"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vint/blobs/sha256:903c19aef5bbbd7e125cdb721c1b605d3db84143ba8c48b2acda71fa3a8c5b3a",
          "sha256": "903c19aef5bbbd7e125cdb721c1b605d3db84143ba8c48b2acda71fa3a8c5b3a"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vint/blobs/sha256:260e13702ec21eca7707a1fc7ce138e2056bfe1756fb5551650f947971c3b865",
          "sha256": "260e13702ec21eca7707a1fc7ce138e2056bfe1756fb5551650f947971c3b865"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vint/blobs/sha256:260e13702ec21eca7707a1fc7ce138e2056bfe1756fb5551650f947971c3b865",
          "sha256": "260e13702ec21eca7707a1fc7ce138e2056bfe1756fb5551650f947971c3b865"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vint/blobs/sha256:260e13702ec21eca7707a1fc7ce138e2056bfe1756fb5551650f947971c3b865",
          "sha256": "260e13702ec21eca7707a1fc7ce138e2056bfe1756fb5551650f947971c3b865"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vint/blobs/sha256:260e13702ec21eca7707a1fc7ce138e2056bfe1756fb5551650f947971c3b865",
          "sha256": "260e13702ec21eca7707a1fc7ce138e2056bfe1756fb5551650f947971c3b865"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vint/blobs/sha256:e33a39133442c624e46b3ae03af2629a7f6e35f4aabb8e0d6095472f87f98de7",
          "sha256": "e33a39133442c624e46b3ae03af2629a7f6e35f4aabb8e0d6095472f87f98de7"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "python@3.11",
    "pyyaml"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/vint.rb",
  "ruby_source_checksum": {
    "sha256": "147bc45d40fffc945457499521c777ece4bece9519c8e6883d5a9d38932d461c"
  },
  "date_added": "2020-10-23T13:19:54+00:00",
  "readme": ".. figure:: https://raw.githubusercontent.com/Kuniwak/vint/logo/logo.png\n   :alt: logo\n\n----\n\n|Development Status| |Latest Version| |Supported Python versions|\n|Supported Python implementations| |Build Status|\n\nVint is a Vim script Language Lint. The goal to reach for Vint is:\n\n-  Highly extensible\n-  Highly customizable\n-  High performance\n\n**But now, Vint is under development. We hope you develop a policy to\nhelp us.**\n\nQuick start\n-----------\n\nYou can install with `pip <https://pip.pypa.io/en/latest/>`__.\n\n::\n\n    $ pip install vim-vint\n\nYou can use Vint with\n`vim-syntastic/syntastic <https://github.com/vim-syntastic/syntastic>`__::\n\n    let g:syntastic_vim_checkers = ['vint']\n\nConfigure\n---------\n\nVint will read config files on the following priority order:\n\n-  `User config <#user-config>`__:\n-  e.g. ``~/.vintrc.yaml`` (the filename can be ``.vintrc.yml`` or ``.vintrc``)\n\n-  `Project config <#project-config>`__:\n-  e.g. ``path/to/proj/.vintrc.yaml`` (the filename can be ``.vintrc.yml`` or ``.vintrc``)\n\n-  `Command line config <#command-line-config>`__:\n-  e.g. ``$ vint --error``, ``$ vint --max-violations 10``\n\n-  `Comment config <#comment-config>`__ (highest priority):\n-  e.g. ``\" vint: -ProhibitAbbreviationOption +ProhibitSetNoCompatible``\n\nYou can see all options on `Wiki <https://github.com/Kuniwak/vint/wiki/Config>`__.\n\nThe default configuration is defined in\n`default_config.yaml <vint/asset/default_config.yaml>`_.\n\n\nUser config\n~~~~~~~~~~~\n\nYou can configure global Vint config by ``~/.vintrc.yaml`` as following:\n\n.. code:: yaml\n\n    cmdargs:\n      # Checking more strictly\n      severity: style_problem\n\n      # Enable coloring\n      color: true\n\n      # Enable Neovim syntax\n      env:\n        neovim: true\n\n    policies:\n      # Disable a violation\n      ProhibitSomethingEvil:\n        enabled: false\n\n      # Enable a violation\n      ProhibitSomethingBad:\n        enabled: true\n\nYou can see all policy names on `Vint linting policy\nsummary <https://github.com/Kuniwak/vint/wiki/Vint-linting-policy-summary>`__.\n\nProject config\n~~~~~~~~~~~~~~\n\nYou can configure project local Vint config by ``.vintrc.yaml`` as\nfollowing:\n\n.. code:: yaml\n\n    cmdargs:\n      # Checking more strictly\n      severity: style_problem\n\n      # Enable coloring\n      color: true\n\n      # Enable Neovim syntax\n      env:\n        neovim: true\n\n    policies:\n      # Disable a violation\n      ProhibitSomethingEvil:\n        enabled: false\n\n      # Enable a violation\n      ProhibitSomethingBad:\n        enabled: true\n\nYou can see all policy names on `Vint linting policy\nsummary <https://github.com/Kuniwak/vint/wiki/Vint-linting-policy-summary>`__.\n\nCommand line config\n~~~~~~~~~~~~~~~~~~~\n\nYou can configure linting severity, max errors, ... as following:\n\n::\n\n    $ vint --color --style ~/.vimrc\n\nAnd you can see all available options by using `--help`:\n\n::\n\n    $ vint --help\n    usage: vint [-h] [-v] [-V] [-e] [-w] [-s] [-m MAX_VIOLATIONS] [-c]\n                [--no-color] [-j] [-t] [--enable-neovim] [-f FORMAT]\n                [--stdin-display-name STDIN_DISPLAY_NAME]\n                [files [files ...]]\n\n    Lint Vim script\n\n    positional arguments:\n      files                 file or directory path to lint\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -v, --version         show program's version number and exit\n      -V, --verbose         output verbose message\n      -e, --error           report only errors\n      -w, --warning         report errors and warnings\n      -s, --style-problem   report errors, warnings and style problems\n      -m MAX_VIOLATIONS, --max-violations MAX_VIOLATIONS\n                            limit max violations count\n      -c, --color           colorize output when possible\n      --no-color            do not colorize output\n      -j, --json            output json style\n      -t, --stat            output statistic info\n      --enable-neovim       enable Neovim syntax\n      -f FORMAT, --format FORMAT\n                            set output format\n      --stdin-display-name STDIN_DISPLAY_NAME\n                            specify a file path that is used for reporting when\n                            linting standard inputs\n\nComment config\n~~~~~~~~~~~~~~\n\nYou can enable/disable linting policies by a comment as following:\n\n.. code:: vim\n\n    \" vint: -ProhibitAbbreviationOption\n\n    let s:save_cpo = &cpo\n    set cpo&vim\n\n    \" vint: +ProhibitAbbreviationOption\n\n    \" do something...\n\n    \" vint: -ProhibitAbbreviationOption\n\n    let &cpo = s:save_cpo\n    unlet s:save_cpo\n\nAnd you can use line config comments. It can enable/disable linting policies in only one line by the postfix comment:\n\n.. code:: vim\n\n    \" vint: next-line -ProhibitUnusedVariable\n    let s:foobar = 'x'\n    echo s:{'foo' . 'bar'}\n\nThis syntax is: `\" vint: [next-line] [+-]<PolicyName> [+-]<PolicyName> ...`.\nYou can see all policy names on `Vint linting policy summary <https://github.com/Kuniwak/vint/wiki/Vint-linting-policy-summary>`__.\n\nCode health\n-----------\n\n|Coverage Status| |Code Health| |Dependency Status|\n\nLicense\n-------\n\n`MIT <http://orgachem.mit-license.org/>`__\n\nAcknowledgement\n---------------\n\n-  `vim-jp/vim-vimlparser <https://github.com/vim-jp/vim-vimlparser>`__\n-  `Google Vimscript Style\n   Guide <https://google.github.io/styleguide/vimscriptguide.xml>`__\n-  `Anti-pattern of\n   vimrc <http://rbtnn.hateblo.jp/entry/2014/12/28/010913>`__\n\n.. |Development Status| image:: https://img.shields.io/pypi/status/vim-vint.svg\n   :target: https://pypi.python.org/pypi/vim-vint/\n.. |Latest Version| image:: https://img.shields.io/pypi/v/vim-vint.svg\n   :target: https://pypi.python.org/pypi/vim-vint/\n.. |Supported Python versions| image:: https://img.shields.io/pypi/pyversions/vim-vint.svg\n   :target: https://pypi.python.org/pypi/vim-vint/\n.. |Supported Python implementations| image:: https://img.shields.io/pypi/implementation/vim-vint.svg\n   :target: https://pypi.python.org/pypi/vim-vint/\n.. |Build Status| image:: https://github.com/Vimjas/vint/actions/workflows/ci.yml/badge.svg\n   :target: https://github.com/Vimjas/vint/actions/workflows/ci.yml\n.. |Coverage Status| image:: https://codecov.io/gh/Vimjas/vint/branch/master/graph/badge.svg\n   :target: https://app.codecov.io/gh/Vimjas/vint\n.. |Code Health| image:: https://landscape.io/github/Kuniwak/vint/master/landscape.png\n   :target: https://landscape.io/github/Kuniwak/vint/master\n.. |Dependency Status| image:: https://gemnasium.com/Kuniwak/vint.svg\n   :target: https://gemnasium.com/Kuniwak/vint"
}
