{
  "name": "scc",
  "full_name": "scc",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Fast and accurate code counter with complexity and COCOMO estimates",
  "license": "MIT or Unlicense",
  "homepage": "https://github.com/boyter/scc/",
  "versions": {
    "stable": "3.1.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/boyter/scc/archive/v3.1.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "bffea99c7f178bc48bfba3c64397d53a20a751dfc78221d347aabdce3422fd20"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/scc/blobs/sha256:e799f0018b65a9294d964bcc59ef84cc77e24d111e9009061fe97bb9b63204b6",
          "sha256": "e799f0018b65a9294d964bcc59ef84cc77e24d111e9009061fe97bb9b63204b6"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/scc/blobs/sha256:9a0673820371df7a7e07e4990324b483cf2457e55cb235b3d0137be51c89d90f",
          "sha256": "9a0673820371df7a7e07e4990324b483cf2457e55cb235b3d0137be51c89d90f"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/scc/blobs/sha256:552d9eab337b742208a1ce8d66d502d33221336ad909d0ecb41ed1d69c0f3a9f",
          "sha256": "552d9eab337b742208a1ce8d66d502d33221336ad909d0ecb41ed1d69c0f3a9f"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/scc/blobs/sha256:b01ea7538c30a19861c26d6a78e7739cff2c71ce221c848b03030d710c63b70f",
          "sha256": "b01ea7538c30a19861c26d6a78e7739cff2c71ce221c848b03030d710c63b70f"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/scc/blobs/sha256:bb7b61c5a9d671a0de9716bc4b887ba926a19580772cce384c8c96713e220012",
          "sha256": "bb7b61c5a9d671a0de9716bc4b887ba926a19580772cce384c8c96713e220012"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/scc/blobs/sha256:36876856ba28b5a555f15071da17f64336891f856c879be49812b22d0d18594e",
          "sha256": "36876856ba28b5a555f15071da17f64336891f856c879be49812b22d0d18594e"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/scc/blobs/sha256:afac05ed759796401196977828e378b9f12d6709610c1a508570c2668f6c492e",
          "sha256": "afac05ed759796401196977828e378b9f12d6709610c1a508570c2668f6c492e"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/scc/blobs/sha256:8528a5c7e12c1a512f43f0c3afeeec0b5f878812ea4c3c52224cee5911f98c32",
          "sha256": "8528a5c7e12c1a512f43f0c3afeeec0b5f878812ea4c3c52224cee5911f98c32"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/scc.rb",
  "ruby_source_checksum": {
    "sha256": "ab412760987cd38fbf1b2cdfa185f7454c311c94f5c6fd17a90b90940df1789c"
  },
  "date_added": "2019-09-14T15:59:16+02:00",
  "readme": "Sloc Cloc and Code (scc)\n------------------------\n\n<img alt=\"scc\" src=https://github.com/boyter/scc/raw/master/scc.jpg>\n\nA tool similar to cloc, sloccount and tokei. For counting the lines of code, blank lines, comment lines, and physical lines of source code in many programming languages.\n\nGoal is to be the fastest code counter possible, but also perform COCOMO calculation like sloccount and to estimate code complexity similar to cyclomatic complexity calculators. In short one tool to rule them all.\n\nAlso it has a very short name which is easy to type `scc`. \n\nIf you don't like sloc cloc and code feel free to use the name `Succinct Code Counter`.\n\n[![Go](https://github.com/boyter/scc/actions/workflows/go.yml/badge.svg)](https://github.com/boyter/scc/actions/workflows/go.yml)\n[![Go Report Card](https://goreportcard.com/badge/github.com/boyter/scc)](https://goreportcard.com/report/github.com/boyter/scc)\n[![Coverage Status](https://coveralls.io/repos/github/boyter/scc/badge.svg?branch=master)](https://coveralls.io/github/boyter/scc?branch=master)\n[![Scc Count Badge](https://sloc.xyz/github/boyter/scc/)](https://github.com/boyter/scc/)\n[![Mentioned in Awesome Go](https://awesome.re/mentioned-badge.svg)](https://github.com/avelino/awesome-go)\n\nDual-licensed under MIT or the [UNLICENSE](http://unlicense.org).\n\n### Install\n\n#### Go Get\n\nIf you are comfortable using Go and have >= 1.17 installed:\n\n`go install github.com/boyter/scc/v3@latest`\n\nor bleeding edge with\n\n`go install github.com/boyter/scc@master`\n\n#### Snap\n\nA [snap install](https://snapcraft.io/scc) exists thanks to [Ricardo](https://feliciano.tech/).\n\n`$ sudo snap install scc`\n\n*NB* Snap installed applications cannot run outside of `/home` https://askubuntu.com/questions/930437/permission-denied-error-when-running-apps-installed-as-snap-packages-ubuntu-17 so you may encounter issues if you use snap and attempt to run outside this directory.\n\n#### Homebrew\n\nOr if you have [homebrew](https://brew.sh/) installed\n\n`$ brew install scc`\n\n#### MacPorts\n\nOn macOS, you can also install via [MacPorts](https://www.macports.org)\n\n`$ sudo port install scc`\n\n#### Scoop\n\nOr if you are using [Scoop](https://scoop.sh/) on Windows\n\n`$ scoop install scc`\n\n#### Chocolatey\n\nOr if you are using [Chocolatey](https://chocolatey.org/) on Windows\n\n`$ choco install scc`\n\n#### FreeBSD\n\nOn FreeBSD, scc is available as a package\n\n`$ pkg install scc`\n\nOr, if you prefer to build from source, you can use the ports tree\n\n`$ cd /usr/ports/devel/scc && make install clean`\n\n#### Manual\n\nBinaries for Windows, GNU/Linux and macOS for both i386 and x86_64 machines are available from the [releases](https://github.com/boyter/scc/releases) page.\n\n#### GitHub Action workflow\n\nhttps://github.com/marketplace/actions/scc-docker-action https://github.com/iRyanBell/scc-docker-action\n\n_.github/workflows/main.yml_\n\n```\non: [push]\n\njobs:\n  scc_job:\n    runs-on: ubuntu-latest\n    name: A job to count the lines of code.\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Get the lines of code.\n        id: scc\n        uses: iryanbell/scc-docker-action@v1.0.2\n        with:\n          args: ${{ env.workspace }} -i js,go,html,css\n```\n\n#### GitLab\n\nhttps://about.gitlab.com/blog/2023/02/15/code-counting-in-gitlab/\n\n#### Other\n\nIf you would like to assist with getting `scc` added into apt/chocolatey/etc... please submit a PR or at least raise an issue with instructions.\n\n### Background\n\nRead all about how it came to be along with performance benchmarks,\n\n - https://boyter.org/posts/sloc-cloc-code/\n - https://boyter.org/posts/why-count-lines-of-code/\n - https://boyter.org/posts/sloc-cloc-code-revisited/\n - https://boyter.org/posts/sloc-cloc-code-performance/\n - https://boyter.org/posts/sloc-cloc-code-performance-update/\n\nSome reviews of `scc`\n\n - https://nickmchardy.com/2018/10/counting-lines-of-code-in-koi-cms.html\n - https://www.feliciano.tech/blog/determine-source-code-size-and-complexity-with-scc/\n - https://metaredux.com/posts/2019/12/13/counting-lines.html\n\nA talk given at the first GopherCon AU about `scc` (press S to see speaker notes)\n\n - https://boyter.org/static/gophercon-syd-presentation/\n - https://www.youtube.com/watch?v=jd-sjoy3GZo\n\nFor performance see the [Performance](https://github.com/boyter/scc#performance) section\n\nOther similar projects,\n\n - [SLOCCount](https://www.dwheeler.com/sloccount/) the original sloc counter\n - [cloc](https://github.com/AlDanial/cloc), inspired by SLOCCount; implemented in Perl for portability\n - [gocloc](https://github.com/hhatto/gocloc) a sloc counter in Go inspired by tokei\n - [loc](https://github.com/cgag/loc) rust implementation similar to tokei but often faster\n - [loccount](https://gitlab.com/esr/loccount) Go implementation written and maintained by ESR\n - [ployglot](https://github.com/vmchale/polyglot) ATS sloc counter\n - [tokei](https://github.com/XAMPPRocky/tokei) fast, accurate and written in rust\n - [sloc](https://github.com/flosse/sloc) coffeescript code counter\n\nInteresting reading about other code counting projects tokei, loc, polyglot and loccount\n\n - https://www.reddit.com/r/rust/comments/59bm3t/a_fast_cloc_replacement_in_rust/\n - https://www.reddit.com/r/rust/comments/82k9iy/loc_count_lines_of_code_quickly/\n - http://blog.vmchale.com/article/polyglot-comparisons\n - http://esr.ibiblio.org/?p=8270\n\nFurther reading about processing files on the disk performance\n\n - https://blog.burntsushi.net/ripgrep/\n \nUsing `scc` to process 40 TB of files from Github/Bitbucket/Gitlab\n\n - https://boyter.org/posts/an-informal-survey-of-10-million-github-bitbucket-gitlab-projects/\n\n### Pitch\n\nWhy use `scc`?\n\n - It is very fast and gets faster the more CPU you throw at it\n - Accurate\n - Works very well across multiple platforms without slowdown (Windows, Linux, macOS)\n - Large language support\n - Can ignore duplicate files\n - Has complexity estimations\n - You need to tell the difference between Coq and Verilog in the same directory\n - cloc yaml output support so potentially a drop in replacement for some users\n - Can identify or ignore minified files\n - Able to identify many #! files ADVANCED! https://github.com/boyter/scc/issues/115\n - Can ignore large files by lines or bytes\n\nWhy not use `scc`?\n\n - You don't like Go for some reason\n - It cannot count D source with different nested multi-line comments correctly https://github.com/boyter/scc/issues/27\n\n### Differences\n\nThere are some important differences between `scc` and other tools that are out there. Here are a few important ones for you to consider.\n\nBlank lines inside comments are counted as comments. While the line is technically blank the decision was made that \nonce in a comment everything there should be considered a comment until that comment is ended. As such the following,\n \n```\n/* blank lines follow\n\n\n*/\n```\n\nWould be counted as 4 lines of comments. This is noticeable when comparing scc's output to other tools on large\nrepositories.\n\n`scc` is able to count verbatim strings correctly. For example in C# the following,\n\n```\nprivate const string BasePath = @\"a:\\\";\n// The below is returned to the user as a version\nprivate const string Version = \"1.0.0\";\n```\n\nBecause of the prefixed @ this string ends at the trailing \" by ignoring the escape character \\ and as such should be \ncounted as 2 code lines and 1 comment. Some tools are unable to\ndeal with this and instead count up to the \"1.0.0\" as a string which can cause the middle comment to be counted as\ncode rather than a comment.\n\n`scc` will also tell you the number of bytes it has processed (for most output formats) allowing you to estimate the\ncost of running some static analysis tools. \n\n### Usage\n\nCommand line usage of `scc` is designed to be as simple as possible.\nFull details can be found in `scc --help` or `scc -h`. Note that the below reflects the state of master not a release, as such\nfeatures listed below may be missing from your installation.\n\n```\n$ scc -h                                                                                      \nSloc, Cloc and Code. Count lines of code in a directory with complexity estimation.\nVersion 3.1.0\nBen Boyter <ben@boyter.org> + Contributors\n\nUsage:\n  scc [flags] [files or directories]\n\nFlags:\n      --avg-wage int                 average wage value used for basic COCOMO calculation (default 56286)\n      --binary                       disable binary file detection\n      --by-file                      display output for every file\n      --ci                           enable CI output settings where stdout is ASCII\n      --cocomo-project-type string   change COCOMO model type [organic, semi-detached, embedded, \"custom,1,1,1,1\"] (default \"organic\")\n      --count-as string              count extension as language [e.g. jsp:htm,chead:\"C Header\" maps extension jsp to html and chead to C Header]\n      --currency-symbol string       set currency symbol (default \"$\")\n      --debug                        enable debug output\n      --eaf float                    the effort adjustment factor derived from the cost drivers (1.0 if rated nominal) (default 1)\n      --exclude-dir strings          directories to exclude (default [.git,.hg,.svn])\n  -x, --exclude-ext strings          ignore file extensions (overrides include-ext) [comma separated list: e.g. go,java,js]\n      --file-gc-count int            number of files to parse before turning the GC on (default 10000)\n  -f, --format string                set output format [tabular, wide, json, csv, csv-stream, cloc-yaml, html, html-table, sql, sql-insert, openmetrics] (default \"tabular\")\n      --format-multi string          have multiple format output overriding --format [e.g. tabular:stdout,csv:file.csv,json:file.json]\n      --gen                          identify generated files\n      --generated-markers strings    string markers in head of generated files (default [do not edit,<auto-generated />])\n  -h, --help                         help for scc\n  -i, --include-ext strings          limit to file extensions [comma separated list: e.g. go,java,js]\n      --include-symlinks             if set will count symlink files\n  -l, --languages                    print supported languages and extensions\n      --large-byte-count int         number of bytes a file can contain before being removed from output (default 1000000)\n      --large-line-count int         number of lines a file can contain before being removed from output (default 40000)\n      --min                          identify minified files\n  -z, --min-gen                      identify minified or generated files\n      --min-gen-line-length int      number of bytes per average line for file to be considered minified or generated (default 255)\n      --no-cocomo                    remove COCOMO calculation output\n  -c, --no-complexity                skip calculation of code complexity\n  -d, --no-duplicates                remove duplicate files from stats and output\n      --no-gen                       ignore generated files in output (implies --gen)\n      --no-gitignore                 disables .gitignore file logic\n      --no-ignore                    disables .ignore file logic\n      --no-large                     ignore files over certain byte and line size set by max-line-count and max-byte-count\n      --no-min                       ignore minified files in output (implies --min)\n      --no-min-gen                   ignore minified or generated files in output (implies --min-gen)\n      --no-size                      remove size calculation output\n  -M, --not-match stringArray        ignore files and directories matching regular expression\n  -o, --output string                output filename (default stdout)\n      --overhead float               set the overhead multiplier for corporate overhead (facilities, equipment, accounting, etc.) (default 2.4)\n      --remap-all string             inspect every file and remap by checking for a string and remapping the language [e.g. \"-*- C++ -*-\":\"C Header\"]\n      --remap-unknown string         inspect files of unknown type and remap by checking for a string and remapping the language [e.g. \"-*- C++ -*-\":\"C Header\"]\n      --size-unit string             set size unit [si, binary, mixed, xkcd-kb, xkcd-kelly, xkcd-imaginary, xkcd-intel, xkcd-drive, xkcd-bakers] (default \"si\")\n      --sloccount-format             print a more SLOCCount like COCOMO calculation\n  -s, --sort string                  column to sort by [files, name, lines, blanks, code, comments, complexity] (default \"files\")\n      --sql-project string           use supplied name as the project identifier for the current run. Only valid with the --format sql or sql-insert option\n  -t, --trace                        enable trace output (not recommended when processing multiple files)\n  -v, --verbose                      verbose output\n      --version                      version for scc\n  -w, --wide                         wider output with additional statistics (implies --complexity)\n```\n\nOutput should look something like the below for the redis project\n\n```\n$ scc redis \n───────────────────────────────────────────────────────────────────────────────\nLanguage                 Files     Lines   Blanks  Comments     Code Complexity\n───────────────────────────────────────────────────────────────────────────────\nC                          296    180267    20367     31679   128221      32548\nC Header                   215     32362     3624      6968    21770       1636\nTCL                        143     28959     3130      1784    24045       2340\nShell                       44      1658      222       326     1110        187\nAutoconf                    22     10871     1038      1326     8507        953\nLua                         20       525       68        70      387         65\nMarkdown                    16      2595      683         0     1912          0\nMakefile                    11      1363      262       125      976         59\nRuby                        10       795       78        78      639        116\ngitignore                   10       162       16         0      146          0\nYAML                         6       711       46         8      657          0\nHTML                         5      9658     2928        12     6718          0\nC++                          4       286       48        14      224         31\nLicense                      4       100       20         0       80          0\nPlain Text                   3       185       26         0      159          0\nCMake                        2       214       43         3      168          4\nCSS                          2       107       16         0       91          0\nPython                       2       219       12         6      201         34\nSystemd                      2        80        6         0       74          0\nBASH                         1       118       14         5       99         31\nBatch                        1        28        2         0       26          3\nC++ Header                   1         9        1         3        5          0\nExtensible Styleshe…         1        10        0         0       10          0\nSmarty Template              1        44        1         0       43          5\nm4                           1       562      116        53      393          0\n───────────────────────────────────────────────────────────────────────────────\nTotal                      823    271888    32767     42460   196661      38012\n───────────────────────────────────────────────────────────────────────────────\nEstimated Cost to Develop (organic) $6,918,301\nEstimated Schedule Effort (organic) 28.682292 months\nEstimated People Required (organic) 21.428982\n───────────────────────────────────────────────────────────────────────────────\nProcessed 9425137 bytes, 9.425 megabytes (SI)\n───────────────────────────────────────────────────────────────────────────────\n```\n\nNote that you don't have to specify the directory you want to run against. Running `scc` will assume you want to run against the current directory.\n\nYou can also run against multiple files or directories `scc directory1 directory2 file1 file2` with the results aggregated in the output.\n\n### Ignore Files\n\n`scc` mostly supports .ignore files inside directories that it scans. This is similar to how ripgrep, ag and tokei work. .ignore files are 100% the same as .gitignore files with the same syntax, and as such `scc` will ignore files and directories listed in them. You can add .ignore files to ignore things like vendored dependency checked in files and such. The idea is allowing you to add a file or folder to git and have ignored in the count.\n\n### Interesting Use Cases\n\nUsed inside Intel Nemu Hypervisor to track code changes between revisions https://github.com/intel/nemu/blob/topic/virt-x86/tools/cloc-change.sh#L9\nAppears to also be used inside both http://codescoop.com/ https://pinpoint.com/ https://github.com/chaoss/grimoirelab-graal\n\nIt also is used to count code and guess language types in https://searchcode.com/ which makes it one of the most frequently run code counters in the world. \n\nYou can also hook scc into your gitlab pipeline https://gitlab.com/guided-explorations/ci-cd-plugin-extensions/ci-cd-plugin-extension-scc\n\nAlso used by CodeQL https://github.com/boyter/scc/pull/317 and Scaleway https://twitter.com/Scaleway/status/1488087029476995074?s=20&t=N2-z6O-ISDdDzULg4o4uVQ\n\n### Features\n\n`scc` uses a small state machine in order to determine what state the code is when it reaches a newline `\\n`. As such it is aware of and able to count\n\n - Single Line Comments\n - Multi Line Comments\n - Strings\n - Multi Line Strings\n - Blank lines\n\nBecause of this it is able to accurately determine if a comment is in a string or is actually a comment.\n\nIt also attempts to count the complexity of code. This is done by checking for branching operations in the code. For example, each of the following `for if switch while else || && != ==` if encountered in Java would increment that files complexity by one.\n\n### Complexity Estimates\n\nLets take a minute to discuss the complexity estimate itself.\n\nThe complexity estimate is really just a number that is only comparable to files in the same language. It should not be used to compare languages directly without weighting them. The reason for this is that its calculated by looking for branch and loop statements in the code and incrementing a counter for that file.\n\nBecause some languages don't have loops and instead use recursion they can have a lower complexity count. Does this mean they are less complex? Probably not, but the tool cannot see this because it does not build an AST of the code as it only scans through it.\n\nGenerally though the complexity there is to help estimate between projects written in the same language, or for finding the most complex file in a project `scc --by-file -s complexity` which can be useful when you are estimating on how hard something is to maintain, or when looking for those files that should probably be refactored.\n\n### COCOMO\n\nThe COCOMO statistics displayed at the bottom of any command line run can be configured as needed.\n\n```\nEstimated Cost to Develop (organic) $664,081\nEstimated Schedule Effort (organic) 11.772217 months\nEstimated People Required (organic) 5.011633\n```\n\nTo change the COCOMO parameters, you can either use one of the default COCOMO models.\n\n```\nscc --cocomo-project-type organic\nscc --cocomo-project-type semi-detached\nscc --cocomo-project-type embedded\n```\n\nYou can also supply your own parameters if you are familiar with COCOMO as follows,\n\n```\nscc --cocomo-project-type \"custom,1,1,1,1\"\n```\n\nSee below for details about how the model choices, and the parameters they use.\n\nOrganic – A software project is said to be an organic type if the team size required is adequately small, the\nproblem is well understood and has been solved in the past and also the team members have a nominal experience\nregarding the problem.\n\n`scc --cocomo-project-type \"organic,2.4,1.05,2.5,0.38\"`\n\nSemi-detached – A software project is said to be a Semi-detached type if the vital characteristics such as team-size,\nexperience, knowledge of the various programming environment lie in between that of organic and Embedded.\nThe projects classified as Semi-Detached are comparatively less familiar and difficult to develop compared to\nthe organic ones and require more experience and better guidance and creativity. Eg: Compilers or\ndifferent Embedded Systems can be considered of Semi-Detached type.\n\n`scc --cocomo-project-type \"semi-detached,3.0,1.12,2.5,0.35\"`\n\nEmbedded – A software project with requiring the highest level of complexity, creativity, and experience\nrequirement fall under this category. Such software requires a larger team size than the other two models\nand also the developers need to be sufficiently experienced and creative to develop such complex models.\n\n`scc --cocomo-project-type \"embedded,3.6,1.20,2.5,0.32\"`\n\n### Large File Detection\n\nYou can have `scc` exclude large files from the output. \n\nThe option to do so is `--no-large` which by default will exclude files over 1,000,000 bytes or 40,000 lines.\n\nYou can control the size of either value using `--large-byte-count` or `--large-line-count`.\n\nFor example to exclude files over 1,000 lines and 50kb you could use the following,\n\n`scc --no-large --large-byte-count 50000 --large-line-count 1000`\n\n### Minified/Generated File Detection\n\nYou can have `scc` identify and optionally remove files identified as being minified or generated from the output.\n\nYou can do so by enabling the `-z` flag like so `scc -z` which will identify any file with an average line byte size >= 255 (by default) as being minified.\n\nMinified files appear like so in the output.\n\n```\n$ scc --no-cocomo -z ./examples/minified/jquery-3.1.1.min.js\n───────────────────────────────────────────────────────────────────────────────\nLanguage                 Files     Lines   Blanks  Comments     Code Complexity\n───────────────────────────────────────────────────────────────────────────────\nJavaScript (min)             1         4        0         1        3         17\n───────────────────────────────────────────────────────────────────────────────\nTotal                        1         4        0         1        3         17\n───────────────────────────────────────────────────────────────────────────────\nProcessed 86709 bytes, 0.087 megabytes (SI)\n───────────────────────────────────────────────────────────────────────────────\n```\n\nMinified files are indicated with the text `(min)` after the language name.\n\nGenerated files are indicated with the text `(gen)` after the language name.\n\nYou can control the average line byte size using `--min-gen-line-length` such as `scc -z --min-gen-line-length 1`. Please note you need `-z` as modifying this value does not imply minified detection.\n\nYou can exclude minified files from the count totally using the flag `--no-min-gen`. Files which match the minified check will be excluded from the output.\n\n### Remapping\n\nSome files may not have an extension. They will be checked to see if they are a #! file. If they are then the language will be remapped to the \ncorrect language. Otherwise, it will not process.\n\nHowever, you may have the situation where you want to remap such files based on a string inside it. To do so you can use `--remap-unknown`\n\n```\n scc --remap-unknown \"-*- C++ -*-\":\"C Header\"\n```\n\nThe above will inspect any file with no extension looking for the string `-*- C++ -*-` and if found remap the file to be counted using the C Header rules. \nYou can have multiple remap rules if required,\n\n```\n scc --remap-unknown \"-*- C++ -*-\":\"C Header\",\"other\":\"Java\"\n```\n\nThere is also the `--remap-all` parameter which will remap all files.\n\nNote that in all cases if the remap rule does not apply normal #! rules will apply.\n\n### Output Formats\n\nBy default `scc` will output to the console. However you can produce output in other formats if you require.\n\nThe different options are `tabular, wide, json, csv, csv-stream, cloc-yaml, html, html-table, sql, sql-insert, openmetrics`. \n\nNote that you can write `scc` output to disk using the `-o, --output` option. This allows you to specify a file to\nwrite your output to. For example `scc -f html -o output.html` will run `scc` against the current directory, and output\nthe results in html to the file `output.html`.\n\nYou can also write to multiple output files, or multiple types to stdout if you want using the `--format-multi` option. This is \nmost useful when working in CI/CD systems where you want HTML reports as an artefact while also displaying the counts in stdout. \n\n```\nscc --format-multi \"tabular:stdout,html:output.html,csv:output.csv\"\n```\n\nThe above will run against the current directory, outputting to standard output the the default output, as well as writing\nto output.html and output.csv with the appropiate formats.\n\n#### Tabular \n\nThis is the default output format when scc is run.\n\n#### Wide \n\nWide produces some additional information which is the complexity/lines metric. This can be useful when trying to\nidentify the most complex file inside a project based on the complexity estimate.\n\n#### JSON\n\nJSON produces JSON output. Mostly designed to allow `scc` to feed into other programs.\n\nNote that this format will give you the byte size of every file `scc` reads allowing you to get a breakdown of the\nnumber of bytes processed.\n\n#### CSV\n\nCSV as an option is good for importing into a spreadsheet for analysis. \n\nNote that this format will give you the byte size of every file `scc` reads allowing you to get a breakdown of the\nnumber of bytes processed. Also note that CSV respects `--by-file` and as such will return a summary by default.\n\n#### CSV-Stream\n\ncsv-stream is an option useful for processing very large repositories where you are likely to run into memory issues. It's output format is 100% the same as CSV. \n\nNote that you should not use this with the `format-multi` option as it will always print to standard output, and because of how it works will negate the memory saving it normally gains.\nsavings that this option provides. Note that there is no sort applied with this option. \n\n#### cloc-yaml \n\nIs a drop in replacement for cloc using its yaml output option. This is quite often used for passing into other \nbuild systems and can help with replacing cloc if required.\n\n```\n$ scc -f cloc-yml processor\n# https://github.com/boyter/scc/\nheader:\n  url: https://github.com/boyter/scc/\n  version: 2.11.0\n  elapsed_seconds: 0.008\n  n_files: 21\n  n_lines: 6562\n  files_per_second: 2625\n  lines_per_second: 820250\nGo:\n  name: Go\n  code: 5186\n  comment: 273\n  blank: 1103\n  nFiles: 21\nSUM:\n  code: 5186\n  comment: 273\n  blank: 1103\n  nFiles: 21\n\n$ cloc --yaml processor\n      21 text files.\n      21 unique files.\n       0 files ignored.\n\n---\n# http://cloc.sourceforge.net\nheader :\n  cloc_url           : http://cloc.sourceforge.net\n  cloc_version       : 1.60\n  elapsed_seconds    : 0.196972846984863\n  n_files            : 21\n  n_lines            : 6562\n  files_per_second   : 106.613679608407\n  lines_per_second   : 33314.2364566841\nGo:\n  nFiles: 21\n  blank: 1137\n  comment: 606\n  code: 4819\nSUM:\n  blank: 1137\n  code: 4819\n  comment: 606\n  nFiles: 21\n```\n\n#### HTML and HTML-TABLE\n\nThe HTML output options produce a minimal html report using a table that is either standalone `html` or as just a table `html-table`\nwhich can be injected into your own HTML pages. The only difference between the two is that the `html` option includes \nhtml head and body tags with minimal styling.\n\nThe markup is designed to allow your own custom styles to be applied. An example report\n[is here to view](SCC-OUTPUT-REPORT.html).\n\nNote that the HTML options follow the command line options, so you can use `scc --by-file -f html` to produce a report with every\nfile and not just the summary.\n\nNote that this format if it has the `--by-file` option will give you the byte size of every file `scc` reads allowing you to get a breakdown of the\nnumber of bytes processed.\n\n#### SQL and SQL-Insert\n\nThe SQL output format \"mostly\" compatible with cloc's SQL output format https://github.com/AlDanial/cloc#sql-\n\nWhile all queries on the cloc documentation should work as expected, you will not be able to append output from `scc` and `cloc` into the same database. This is because the table format is slightly different\nto account for scc including complexity counts and bytes.\n\nThe difference between `sql` and `sql-insert` is that `sql` will include table creation while the latter will only have the insert commands.\n\nUsage is 100% the same as any other `scc` command but sql output will always contain per file details. You can compute totals yourself using SQL.\n\nThe below will run scc against the current directory, name the ouput as the project scc and then pipe the output to sqlite to put into the database code.db\n\n```\nscc --format sql --sql-project scc . | sqlite3 code.db\n```\n\nAssuming you then wanted to append another project\n\n```\nscc --format sql-insert --sql-project redis . | sqlite3 code.db\n```\n\nYou could then run SQL against the database,\n\n```\nsqlite3 code.db 'select project,file,max(nCode) as nL from t\n                         group by project order by nL desc;'\n```\n\nSee the cloc documentation for more examples.\n\n\n#### OpenMetrics\n\n[OpenMetrics](https://openmetrics.io/) is a metric reporting format specification extending the Prometheus exposition text format.\n\nThe produced output is natively supported by [Prometheus](https://prometheus.io/) and [GitLab CI](https://docs.gitlab.com/ee/ci/metrics_reports.html)\n\nNote that OpenMetrics respects `--by-file` and as such will return a summary by default.\n\nThe output includes a metadata header containing definitions of the returned metrics: \n```text\n# TYPE scc_files count\n# HELP scc_files Number of sourcecode files.\n# TYPE scc_lines count\n# UNIT scc_lines lines\n# HELP scc_lines Number of lines.\n# TYPE scc_code count\n# HELP scc_code Number of lines of actual code.\n# TYPE scc_comments count\n# HELP scc_comments Number of comments.\n# TYPE scc_blanks count\n# HELP scc_blanks Number of blank lines.\n# TYPE scc_complexity count\n# HELP scc_complexity Code complexity.\n# TYPE scc_bytes count\n# UNIT scc_bytes bytes\n# HELP scc_bytes Size in bytes.\n```\n\nThe header is followed by the metric data in either language summary form:\n```text\nscc_files{language=\"Go\"} 1\nscc_lines{language=\"Go\"} 1000\nscc_code{language=\"Go\"} 1000\nscc_comments{language=\"Go\"} 1000\nscc_blanks{language=\"Go\"} 1000\nscc_complexity{language=\"Go\"} 1000\nscc_bytes{language=\"Go\"} 1000\n```\n\nor, if `--by-file` is present, in per file form:\n```text\nscc_lines{language=\"Go\",file=\"./bbbb.go\"} 1000\nscc_code{language=\"Go\",file=\"./bbbb.go\"} 1000\nscc_comments{language=\"Go\",file=\"./bbbb.go\"} 1000\nscc_blanks{language=\"Go\",file=\"./bbbb.go\"} 1000\nscc_complexity{language=\"Go\",file=\"./bbbb.go\"} 1000\nscc_bytes{language=\"Go\",file=\"./bbbb.go\"} 1000\n```\n\n### Performance\n\nGenerally `scc` will the fastest code counter compared to any I am aware of and have compared against. The below comparisons are taken from the fastest alternative counters. See `Other similar projects` above to see all of the other code counters compared against. It is designed to scale to as many CPU's cores as you can provide.\n\nHowever if you want greater performance and you have RAM to spare you can disable the garbage collector like the following on linux `GOGC=-1 scc .` which should speed things up considerably. For some repositories turning off the code complexity calculation via `-c` can reduce runtime as well.\n\nBenchmarks are run on fresh 32 Core CPU Optimised Digital Ocean Virtual Machine 2022/09/20 all done using [hyperfine](https://github.com/sharkdp/hyperfine) with 3 warm-up runs and 10 timed runs.\n\n```\nscc v3.1.0\ntokei v12.1.2\nloc v0.5.0\npolyglot v0.5.29\n```\n\nSee https://github.com/boyter/scc/blob/master/benchmark.sh to see how the benchmarks are run.\n\n\n#### Redis https://github.com/antirez/redis/\n\n```shell\nBenchmark 1: scc redis\n  Time (mean ± σ):      20.2 ms ±   1.7 ms    [User: 127.1 ms, System: 47.0 ms]\n  Range (min … max):    16.8 ms …  25.8 ms    132 runs\n \nBenchmark 2: scc -c redis\n  Time (mean ± σ):      17.0 ms ±   1.4 ms    [User: 91.6 ms, System: 32.7 ms]\n  Range (min … max):    14.3 ms …  21.6 ms    169 runs\n \nBenchmark 3: tokei redis\n  Time (mean ± σ):      33.7 ms ±   5.0 ms    [User: 246.4 ms, System: 55.0 ms]\n  Range (min … max):    24.2 ms …  47.5 ms    76 runs\n \nBenchmark 4: loc redis\n  Time (mean ± σ):      36.9 ms ±  30.6 ms    [User: 756.5 ms, System: 20.7 ms]\n  Range (min … max):     9.9 ms … 123.9 ms    71 runs\n \nBenchmark 5: polyglot redis\n  Time (mean ± σ):      21.8 ms ±   0.9 ms    [User: 32.1 ms, System: 46.3 ms]\n  Range (min … max):    20.0 ms …  28.4 ms    138 runs\n \nSummary\n  'scc -c redis' ran\n    1.19 ± 0.14 times faster than 'scc redis'\n    1.28 ± 0.12 times faster than 'polyglot redis'\n    1.98 ± 0.33 times faster than 'tokei redis'\n    2.17 ± 1.81 times faster than 'loc redis'\n```\n\n#### CPython https://github.com/python/cpython\n\n```shell\nBenchmark 1: scc cpython\n  Time (mean ± σ):      52.6 ms ±   3.8 ms    [User: 624.3 ms, System: 121.5 ms]\n  Range (min … max):    45.3 ms …  62.3 ms    47 runs\n \nBenchmark 2: scc -c cpython\n  Time (mean ± σ):      46.0 ms ±   3.8 ms    [User: 468.0 ms, System: 111.2 ms]\n  Range (min … max):    40.0 ms …  58.0 ms    67 runs\n \nBenchmark 3: tokei cpython\n  Time (mean ± σ):     110.4 ms ±   6.6 ms    [User: 1239.8 ms, System: 114.5 ms]\n  Range (min … max):    98.3 ms … 123.6 ms    26 runs\n \nBenchmark 4: loc cpython\n  Time (mean ± σ):      52.9 ms ±  25.2 ms    [User: 1103.0 ms, System: 57.4 ms]\n  Range (min … max):    30.0 ms … 118.9 ms    49 runs\n \nBenchmark 5: polyglot cpython\n  Time (mean ± σ):      82.4 ms ±   3.0 ms    [User: 153.3 ms, System: 168.8 ms]\n  Range (min … max):    74.8 ms …  88.7 ms    36 runs\n \nSummary\n  'scc -c cpython' ran\n    1.14 ± 0.13 times faster than 'scc cpython'\n    1.15 ± 0.56 times faster than 'loc cpython'\n    1.79 ± 0.16 times faster than 'polyglot cpython'\n    2.40 ± 0.24 times faster than 'tokei cpython'\n```\n\n#### Linux Kernel https://github.com/torvalds/linux\n\n```shell\nBenchmark 1: scc linux\n  Time (mean ± σ):     743.0 ms ±  18.8 ms    [User: 17133.4 ms, System: 1280.2 ms]\n  Range (min … max):   709.4 ms … 778.8 ms    10 runs\n \nBenchmark 2: scc -c linux\n  Time (mean ± σ):     528.8 ms ±  11.8 ms    [User: 10272.0 ms, System: 1236.9 ms]\n  Range (min … max):   508.9 ms … 543.1 ms    10 runs\n \nBenchmark 3: tokei linux\n  Time (mean ± σ):     736.5 ms ±  18.2 ms    [User: 13098.3 ms, System: 2276.0 ms]\n  Range (min … max):   699.3 ms … 760.8 ms    10 runs\n \nBenchmark 4: loc linux\n  Time (mean ± σ):     567.1 ms ± 113.4 ms    [User: 15984.5 ms, System: 1037.0 ms]\n  Range (min … max):   381.8 ms … 656.3 ms    10 runs\n \nBenchmark 5: polyglot linux\n  Time (mean ± σ):      1.241 s ±  0.027 s    [User: 2.973 s, System: 2.636 s]\n  Range (min … max):    1.196 s …  1.299 s    10 runs\n \nSummary\n  'scc -c linux' ran\n    1.07 ± 0.22 times faster than 'loc linux'\n    1.39 ± 0.05 times faster than 'tokei linux'\n    1.41 ± 0.05 times faster than 'scc linux'\n    2.35 ± 0.07 times faster than 'polyglot linux'\n```\n\nIf you enable duplicate detection expect performance to fall by about 20% in `scc`.\n\nPerformance is tracked over each release and presented below. Currently, the most recent release 3.1.0 is the fastest version.\n\n<img alt=\"scc\" src=https://github.com/boyter/scc/raw/master/performance-over-time.png>\n\nhttps://jsfiddle.net/m1w7kgqv/\n\n### CI/CD Support\n\nSome CI/CD systems which will remain nameless do not work very well with the box-lines used by `scc`. To support those systems better there is an option `--ci` which will change the default output to ASCII only.\n\n```\n$ scc --ci main.go\n-------------------------------------------------------------------------------\nLanguage                 Files     Lines   Blanks  Comments     Code Complexity\n-------------------------------------------------------------------------------\nGo                           1       272        7         6      259          4\n-------------------------------------------------------------------------------\nTotal                        1       272        7         6      259          4\n-------------------------------------------------------------------------------\nEstimated Cost to Develop $6,539\nEstimated Schedule Effort 2.268839 months\nEstimated People Required 0.341437\n-------------------------------------------------------------------------------\nProcessed 5674 bytes, 0.006 megabytes (SI)\n-------------------------------------------------------------------------------\n```\n\nThe `--format-multi` option is especially useful in CI/CD where you want to get multiple output formats useful for storage or reporting.\n\n### Development\n\nIf you want to hack away feel free! PR's are accepted. Some things to keep in mind. If you want to change a language definition you need to update `languages.json` and then run `go generate` which will convert it into the `processor/constants.go` file.\n\nFor all other changes ensure you run all tests before submitting. You can do so using `go test ./...`. However for maximum coverage please run `test-all.sh` which will run `gofmt`, unit tests, race detector and then all of the integration tests. All of those must pass to ensure a stable release.\n\n### API Support\n\nThe core part of `scc` which is the counting engine is exposed publicly to be integrated into other Go applications. See https://github.com/pinpt/ripsrc for an example of how to do this. \n\nIt also powers all of the code calculations displayed in https://searchcode.com/ such as https://searchcode.com/file/169350674/main.go/ making it one of the more used code counters in the world.\n\nHowever as a quick start consider the following,\n\nNote that you must pass in the number of bytes in the content in order to ensure it is counted!\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\n\t\"github.com/boyter/scc/v3/processor\"\n)\n\ntype statsProcessor struct{}\n\nfunc (p *statsProcessor) ProcessLine(job *processor.FileJob, currentLine int64, lineType processor.LineType) bool {\n\tswitch lineType {\n\tcase processor.LINE_BLANK:\n\t\tfmt.Println(currentLine, \"lineType\", \"BLANK\")\n\tcase processor.LINE_CODE:\n\t\tfmt.Println(currentLine, \"lineType\", \"CODE\")\n\tcase processor.LINE_COMMENT:\n\t\tfmt.Println(currentLine, \"lineType\", \"COMMENT\")\n\t}\n\treturn true\n}\n\nfunc main() {\n\tbts, _ := ioutil.ReadFile(\"somefile.go\")\n\n\tt := &statsProcessor{}\n\tfilejob := &processor.FileJob{\n\t\tFilename: \"test.go\",\n\t\tLanguage: \"Go\",\n\t\tContent:  bts,\n\t\tCallback: t,\n\t\tBytes:    int64(len(bts)),\n\t}\n\n\tprocessor.ProcessConstants() // Required to load the language information and need only be done once\n\tprocessor.CountStats(filejob)\n}\n```\n\n\n### Adding/Modifying Languages\n\nTo add or modify a language you will need to edit the `languages.json` file in the root of the project, and then run `go generate` to build it into the application. You can then `go install` or `go build` as normal to produce the binary with your modifications.\n\n### Issues\n\nIts possible that you may see the counts vary between runs. This usually means one of two things. Either something is changing or locking the files under scc, or that you are hitting ulimit restrictions. To change the ulimit see the following links.\n\n - https://superuser.com/questions/261023/how-to-change-default-ulimit-values-in-mac-os-x-10-6#306555\n - https://unix.stackexchange.com/questions/108174/how-to-persistently-control-maximum-system-resource-consumption-on-mac/221988#221988\n - https://access.redhat.com/solutions/61334\n - https://serverfault.com/questions/356962/where-are-the-default-ulimit-values-set-linux-centos\n - https://www.tecmint.com/increase-set-open-file-limits-in-linux/\n\nTo help identify this issue run scc like so `scc -v .` and look for the message `too many open files` in the output. If it is there you can rectify it by setting your ulimit to a higher value.\n\n### Low Memory\n\nIf you are running `scc` in a low memory environment < 512 MB of RAM you may need to set `--file-gc-count` to a lower value such as `0` to force the garbage collector to be on at all times.\n\nA sign that this is required will be `scc` crashing with panic errors.\n\n### Tests\n\nscc is pretty well tested with many unit, integration and benchmarks to ensure that it is fast and complete.\n\n### Package\n\nPackaging as of version v3.1.0 is done through https://goreleaser.com/ \n\n### Containers\n\nNote if you plan to run `scc` in Alpine containers you will need to build with CGO_ENABLED=0.\n\nSee the below dockerfile as an example on how to achieve this based on this issue https://github.com/boyter/scc/issues/208\n\n```\nFROM golang as scc-get\n\nENV GOOS=linux \\\nGOARCH=amd64 \\\nCGO_ENABLED=0\n\nARG VERSION\nRUN git clone --branch $VERSION --depth 1 https://github.com/boyter/scc\nWORKDIR /go/scc\nRUN go build -ldflags=\"-s -w\"\n\nFROM alpine\nCOPY --from=scc-get /go/scc/scc /bin/\nENTRYPOINT [\"scc\"]\n```\n\n### Badges (beta)\n\nYou can use `scc` to provide badges on your github/bitbucket/gitlab open repositories. For example, [![Scc Count Badge](https://sloc.xyz/github/boyter/scc/)](https://github.com/boyter/scc/)\n The format to do so is,\n\nhttps://sloc.xyz/PROVIDER/USER/REPO\n\nAn example of the badge for `scc` is included below, and is used on this page.\n\n```\n[![Scc Count Badge](https://sloc.xyz/github/boyter/scc/)](https://github.com/boyter/scc/)\n```\n\nBy default the badge will show the repo's lines count. You can also specify for it to show a different category, by using the `?category=` query string. \n\nValid values include `code, blanks, lines, comments, cocomo` and examples of the appearance are included below.\n\n[![Scc Count Badge](https://sloc.xyz/github/boyter/scc/?category=code)](https://github.com/boyter/scc/)\n[![Scc Count Badge](https://sloc.xyz/github/boyter/scc/?category=blanks)](https://github.com/boyter/scc/)\n[![Scc Count Badge](https://sloc.xyz/github/boyter/scc/?category=lines)](https://github.com/boyter/scc/)\n[![Scc Count Badge](https://sloc.xyz/github/boyter/scc/?category=comments)](https://github.com/boyter/scc/)\n[![Scc Count Badge](https://sloc.xyz/github/boyter/scc/?category=cocomo)](https://github.com/boyter/scc/)\n\n\nFor `cocomo` you can also set the `avg-wage` value similar to `scc` itself. For example,\n\nhttps://sloc.xyz/github/boyter/scc/?category=cocomo&avg-wage=1\nhttps://sloc.xyz/github/boyter/scc/?category=cocomo&avg-wage=100000 \n\nNote that the avg-wage value must be a positive integer otherwise it will revert back to the default value of 56286.\n\n*NB* it may not work for VERY large repositories (has been tested on Apache hadoop/spark without issue).\n\nYou can find the source code for badges in the repository at https://github.com/boyter/scc/blob/master/cmd/badges/main.go \n\n### Languages\n\nList of supported languages. The master version of `scc` supports 239 languages at last count. Note that this is always assumed that you built from master, and it might trail behind what is actually supported. To see what your version of `scc` supports run `scc --languages`\n\n[Click here to view all languages supported by master](LANGUAGES.md)"
}
