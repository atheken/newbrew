{
  "name": "websocat",
  "full_name": "websocat",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Command-line client for WebSockets",
  "license": "MIT",
  "homepage": "https://github.com/vi/websocat",
  "versions": {
    "stable": "1.11.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/vi/websocat/archive/v1.11.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "943d6f66045658cca7341dd89fe1c2f5bdac62f4a3c7be40251b810bc811794f"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/websocat/blobs/sha256:82c1a32b50dd9c07a625cadc44eade492e099a86bcd2111378c557d8d0174630",
          "sha256": "82c1a32b50dd9c07a625cadc44eade492e099a86bcd2111378c557d8d0174630"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/websocat/blobs/sha256:af7d785dc7fbf24f0040ab34387f89c446f91b2f20ce5ac006874076bc9a12a6",
          "sha256": "af7d785dc7fbf24f0040ab34387f89c446f91b2f20ce5ac006874076bc9a12a6"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/websocat/blobs/sha256:6bcd20eb41f33a1404a9049c0c7b2a1401ff0206dae3727662f2a148318579a3",
          "sha256": "6bcd20eb41f33a1404a9049c0c7b2a1401ff0206dae3727662f2a148318579a3"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/websocat/blobs/sha256:d0d58cc427f5588b766dd7f3589be840721bce3f843a6d8304ecdc448d60cc88",
          "sha256": "d0d58cc427f5588b766dd7f3589be840721bce3f843a6d8304ecdc448d60cc88"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/websocat/blobs/sha256:ac96cc2a92e1376a38d876acfb50d1d1cbc85796111a783ceef62431955f2171",
          "sha256": "ac96cc2a92e1376a38d876acfb50d1d1cbc85796111a783ceef62431955f2171"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/websocat/blobs/sha256:10ed5b08af56b99543afdcb6aa44baf4b59ae105c802985d81282b7ceb02ac58",
          "sha256": "10ed5b08af56b99543afdcb6aa44baf4b59ae105c802985d81282b7ceb02ac58"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/websocat/blobs/sha256:81368b9bb04779db0bbc183a878e9ca716cbc6cb1d4d3b28c9670441255364af",
          "sha256": "81368b9bb04779db0bbc183a878e9ca716cbc6cb1d4d3b28c9670441255364af"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/websocat/blobs/sha256:fe471d55a2ad82d0bd0fff47f3531271c01631b838344f467095e6617ade30d9",
          "sha256": "fe471d55a2ad82d0bd0fff47f3531271c01631b838344f467095e6617ade30d9"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust",
    "pkg-config"
  ],
  "dependencies": [
    "openssl@3"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/websocat.rb",
  "ruby_source_checksum": {
    "sha256": "02267038c9a4ff972f9e71c772b1278d7f8cd5aaef5b21c2c359e1818208ae80"
  },
  "date_added": "2018-11-30T00:06:08+01:00",
  "readme": "# websocat\nNetcat, curl and socat for [WebSockets](https://en.wikipedia.org/wiki/WebSocket).\n\n[![Gitter](https://badges.gitter.im/websocat.svg)](https://gitter.im/websocat/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=body_badge)\n\n## Examples\n\n### Connect to public echo server\n\n```\n$ websocat ws://ws.vi-server.org/mirror\n123\n123\nABC\nABC\n```\n\n### Serve and connect\n\n```\nA$ websocat -s 1234\nListening on ws://127.0.0.1:1234/\nABC\n123\n\nB$ websocat ws://127.0.0.1:1234/\nABC\n123\n```\n\n### Open a tab in Chromium using remote debugging.\n\n```\n$ chromium --remote-debugging-port=9222&\n$ curl -sg http://127.0.0.1:9222/json/new | grep webSocketDebuggerUrl | cut -d'\"' -f4 | head -1\nws://127.0.0.1:9222/devtools/page/A331E56CCB8615EB4FCB720425A82259\n$ echo 'Page.navigate {\"url\":\"https://example.com\"}' | websocat -n1 --jsonrpc --jsonrpc-omit-jsonrpc ws://127.0.0.1:9222/devtools/page/A331E56CCB8615EB4FCB720425A82259\n{\"id\":2,\"result\":{\"frameId\":\"A331E56CCB8615EB4FCB720425A82259\",\"loaderId\":\"EF5AAD19F2F8BB27FAF55F94FFB27DF9\"}}\n```\n\n\n### Proxy TCP connections to WebSocket connections and back.\n\n```\n$ websocat --oneshot -b ws-l:127.0.0.1:1234 tcp:127.0.0.1:22&\n$ websocat --oneshot -b tcp-l:127.0.0.1:1236 ws://127.0.0.1:1234/&\n$ nc 127.0.0.1 1236\nSSH-2.0-OpenSSH_7.4p1 Debian-10+deb9u3\nqwertyu\nProtocol mismatch.\n```\n\n\n### Broadcast all messages between connected WebSocket clients\n\n```\nA$ websocat -t ws-l:127.0.0.1:1234 broadcast:mirror:\nB$ websocat ws://127.0.0.1:1234\nC$ websocat ws://127.0.0.1:1234\n```\n\n(if you like this one, you may actually want https://github.com/vi/wsbroad/ instead)\n\nSee [moreexamples.md](./moreexamples.md) for further examples.\n\n## Features\n\n* Connecting to and serving WebSockets from command line.\n* Executing external program and making it communicate to WebSocket using stdin/stdout.\n* Text and binary modes, converting between lines (or null-terminated records) and messages.\n* Inetd mode, UNIX sockets (including abstract namespaced on Linux).\n* Integration with Nginx using TCP or UNIX sockets.\n* Directly using unauthenticated SOCKS5 servers for connecting to WebSockets and listening WebSocket connection.\n* Auto-reconnect and connection-reuse modes.\n* Linux, Windows and Mac support, with [pre-built executables][releases].\n* Low-level WebSocket clients and servers with overridable underlying transport connection, e.g. calling external program to serve as a transport for websocat (for SSL, proxying, etc.).\n\n[releases]:https://github.com/vi/websocat/releases\n\n# Installation\n\nThere are multiple options for installing WebSocat. From easy to hard:\n\n* If you're on Fedora, you can install WebSocat from [Copr](https://copr.fedorainfracloud.org/coprs/atim/websocat/): `sudo dnf copr enable atim/websocat -y && sudo dnf install websocat`\n* If you're on FreeBSD, you may install WebSocat with the following command: `pkg install websocat`.\n* If you're on Linux Debian or Ubuntu (or other dpkg-based), try downloading a pre-build executable from [GitHub releases][releases]. Websocat is not yet officially packaged for Debian. Some older versions of Websocat may also have Debian package files available on Github releases.\n* If you're on macOS, you can do:\n  * `brew install websocat` using [Homebrew](https://brew.sh)\n  * `sudo port install websocat` using [MacPorts](https://www.macports.org)\n* Download a pre-build executable and install it to PATH.\n* Install the [Rust toolchain](https://rustup.rs/) and do `cargo install --features=ssl websocat`. If something fails with a `-sys` crate, try without `--features=ssl`;\n* Build Websocat from source code (see below), then move `target/release/websocat` somewhere to the PATH.\n\nPre-built binaries for Linux (usual and musl), Windows, OS X and Android are available on the [releases page](https://github.com/vi/websocat/releases).\n\n\nBuilding from source code\n---\n\n1. Install the [Rust toolchain](https://rustup.rs/). Note that Websocat v1 (i.e. the current stable version) may fail to support too new Rust due to its old dependencies which can be broken by e.g. [this](https://github.com/rust-lang/rust/pull/78802).\n2. `cargo build --release --features=ssl`.\n3. Find the executable somewhere under `target/`, e.g. in `target/release/websocat`.\n\n### Rust versions\n\n\n|Websocat versions|Minimal Rust version|Maximal Rust version|\n|----|----|----|\n| 1.9 - 1.11| 1.46 | maybe 1.63 |\n| 1.6 - 1.8 | 1.34 | maybe 1.63  |\n| 1.3 - 1.5 | 1.31 | 1.47 |\n| 1.2       | 1.28 | 1.47 |\n| 1.0-1.1   | 1.23 | 1.47 |\n\nNote that building with legacy Rust version (e.g. 1.46) may require manually copying `Cargo.lock.legacy` to `Cargo.lock` prior to the building.\n\nEarly non-async versions of Websocat should be buildable by even older rustc.  \n\nNote that old versions of Websocat may misbehave if built by Rust 1.48 or later due to https://github.com/rust-lang/rust/pull/71274/.\n\nIt may be not a good idea to build v1.x line of Websocat with Rust 1.64 due to [IP address representation refactor]. It may expose previously hidden undefined behaviour in legacy dependencies.\n\n[ipaddr]:https://github.com/rust-lang/rust/pull/78802\n\n\nSSL on Android\n---\n\nwebsocat's `wss://` may fail on Android. As a workaround, download certificate bundle, for example, from https://curl.haxx.se/ca/cacert.pem and specify it explicitly:\n\n    SSL_CERT_FILE=cacert.pem /data/local/tmp/websocat wss://echo.websocket.org\n\nOr just use `--insecure` option.\n\nDocumentation\n---\n\nBasic usage examples are provided at the top of this README and in `--help` message. More tricks are described in [moreexamples.md](./moreexamples.md).\n\nThere is a [list of all address types and overlays](doc.md).\n\n<details><summary>`websocat --help=long` output</summary>\n\n```\nwebsocat 1.11.0\nVitaly \"_Vi\" Shukela <vi0oss@gmail.com>\nCommand-line client for web sockets, like netcat/curl/socat for ws://.\n\nUSAGE:\n    websocat ws://URL | wss://URL               (simple client)\n    websocat -s port                            (simple server)\n    websocat [FLAGS] [OPTIONS] <addr1> <addr2>  (advanced mode)\n\nFLAGS:\n        --stdout-announce-listening-ports       [A] Print a line to stdout for each port being listened\n        --async-stdio                           [A] On UNIX, set stdin and stdout to nonblocking mode instead of\n                                                spawning a thread. This should improve performance, but may break other\n                                                programs running on the same console.\n        --compress-deflate                      [A] Compress data coming to a WebSocket using deflate method. Affects\n                                                only binary WebSocket messages.\n        --compress-gzip                         [A] Compress data coming to a WebSocket using gzip method. Affects only\n                                                binary WebSocket messages.\n        --compress-zlib                         [A] Compress data coming to a WebSocket using zlib method. Affects only\n                                                binary WebSocket messages.\n        --crypto-reverse                        [A] Swap encryption and decryption operations in `crypto:` specifier -\n                                                encrypt on read, decrypto on write.\n        --dump-spec                             [A] Instead of running, dump the specifiers representation to stdout\n    -e, --set-environment                       Set WEBSOCAT_* environment variables when doing exec:/cmd:/sh-c:\n                                                Currently it's WEBSOCAT_URI and WEBSOCAT_CLIENT for\n                                                request URI and client address (if TCP)\n                                                Beware of ShellShock or similar security problems.\n    -E, --exit-on-eof                           Close a data transfer direction if the other one reached EOF\n        --foreachmsg-wait-read                  [A] Wait for reading to finish before closing foreachmsg:'s peer\n        --jsonrpc                               Format messages you type as JSON RPC 2.0 method calls. First word\n                                                becomes method name, the rest becomes parameters, possibly automatically\n                                                wrapped in [].\n        --just-generate-key                     [A] Just a Sec-WebSocket-Key value without running main Websocat\n        --linemode-strip-newlines               [A] Don't include trailing \\n or \\r\\n coming from streams in WebSocket\n                                                messages\n    -0, --null-terminated                       Use \\0 instead of \\n for linemode\n        --no-line                               [A] Don't automatically insert line-to-message transformation\n        --no-exit-on-zeromsg                    [A] Don't exit when encountered a zero message. Zero messages are used\n                                                internally in Websocat, so it may fail to close connection at all.\n        --no-fixups                             [A] Don't perform automatic command-line fixups. May destabilize\n                                                websocat operation. Use --dump-spec without --no-fixups to discover what\n                                                is being inserted automatically and read the full manual about Websocat\n                                                internal workings.\n        --no-async-stdio                        [A] Inhibit using stdin/stdout in a nonblocking way if it is not a tty\n    -1, --one-message                           Send and/or receive only one message. Use with --no-close and/or -u/-U.\n        --oneshot                               Serve only once. Not to be confused with -1 (--one-message)\n        --print-ping-rtts                       Print measured round-trip-time to stderr after each received WebSocket\n                                                pong.\n        --exec-sighup-on-stdin-close            [A] Make exec: or sh-c: or cmd: send SIGHUP on UNIX when input is\n                                                closed.\n        --exec-sighup-on-zero-msg               [A] Make exec: or sh-c: or cmd: send SIGHUP on UNIX when facing incoming\n                                                zero-length message.\n    -q                                          Suppress all diagnostic messages, except of startup errors\n        --reuser-send-zero-msg-on-disconnect    [A] Make reuse-raw: send a zero-length message to the peer when some\n                                                clients disconnects.\n    -s, --server-mode                           Simple server mode: specify TCP port or addr:port as single argument\n    -S, --strict                                strict line/message mode: drop too long messages instead of splitting\n                                                them, drop incomplete lines.\n        --timestamp-monotonic                   [A] Use monotonic clock for `timestamp:` overlay\n    -k, --insecure                              Accept invalid certificates and hostnames while connecting to TLS\n        --udp-broadcast                         [A] Set SO_BROADCAST\n        --udp-multicast-loop                    [A] Set IP[V6]_MULTICAST_LOOP\n        --udp-oneshot                           [A] udp-listen: replies only one packet per client\n        --udp-reuseaddr                         [A] Set SO_REUSEADDR for UDP socket. Listening TCP sockets are always\n                                                reuseaddr.\n        --uncompress-deflate                    [A] Uncompress data coming from a WebSocket using deflate method.\n                                                Affects only binary WebSocket messages.\n        --uncompress-gzip                       [A] Uncompress data coming from a WebSocket using deflate method.\n                                                Affects only binary WebSocket messages.\n        --uncompress-zlib                       [A] Uncompress data coming from a WebSocket using deflate method.\n                                                Affects only binary WebSocket messages.\n    -u, --unidirectional                        Inhibit copying data in one direction\n    -U, --unidirectional-reverse                Inhibit copying data in the other direction (or maybe in both directions\n                                                if combined with -u)\n        --accept-from-fd                        [A] Do not call `socket(2)` in UNIX socket listener peer, start with\n                                                `accept(2)` using specified file descriptor number as argument instead\n                                                of filename\n        --unlink                                [A] Unlink listening UNIX socket before binding to it\n    -V, --version                               Prints version information\n    -v                                          Increase verbosity level to info or further\n    -b, --binary                                Send message to WebSockets as binary messages\n    -n, --no-close                              Don't send Close message to websocket on EOF\n        --websocket-ignore-zeromsg              [A] Silently drop incoming zero-length WebSocket messages. They may\n                                                cause connection close due to usage of zero-len message as EOF flag\n                                                inside Websocat.\n    -t, --text                                  Send message to WebSockets as text messages\n        --base64                                Encode incoming binary WebSocket messages in one-line Base64 If\n                                                `--binary-prefix` (see `--help=full`) is set, outgoing WebSocket\n                                                messages that start with the prefix are decoded from base64 prior to\n                                                sending.\n        --base64-text                           [A] Encode incoming text WebSocket messages in one-line Base64. I don't\n                                                know whether it can be ever useful, but it's for symmetry with\n                                                `--base64`.\n\nOPTIONS:\n        --socks5 <auto_socks5>\n            Use specified address:port as a SOCKS5 proxy. Note that proxy authentication is not supported yet. Example:\n            --socks5 127.0.0.1:9050\n        --autoreconnect-delay-millis <autoreconnect_delay_millis>\n            [A] Delay before reconnect attempt for `autoreconnect:` overlay. [default: 20]\n\n        --basic-auth <basic_auth>\n            Add `Authorization: Basic` HTTP request header with this base64-encoded parameter\n\n        --queue-len <broadcast_queue_len>\n            [A] Number of pending queued messages for broadcast reuser [default: 16]\n\n    -B, --buffer-size <buffer_size>                                  Maximum message size, in bytes [default: 65536]\n        --byte-to-exit-on <byte_to_exit_on>\n            [A] Override the byte which byte_to_exit_on: overlay looks for [default: 28]\n\n        --client-pkcs12-der <client_pkcs12_der>                      [A] Client identity TLS certificate\n        --client-pkcs12-passwd <client_pkcs12_passwd>\n            [A] Password for --client-pkcs12-der pkcs12 archive. Required on Mac.\n\n        --close-reason <close_reason>\n            Close connection with a reason message. This option only takes effect if --close-status-code option is\n            provided as well.\n        --close-status-code <close_status_code>                      Close connection with a status code.\n        --crypto-key <crypto_key>\n            [A] Specify encryption/decryption key for `crypto:` specifier. Requires `base64:`, `file:` or `pwd:` prefix.\n\n    -H, --header <custom_headers>...\n            Add custom HTTP header to websocket client request. Separate header name and value with a colon and\n            optionally a single space. Can be used multiple times. Note that single -H may eat multiple further\n            arguments, leading to confusing errors. Specify headers at the end or with equal sign like -H='X: y'.\n        --server-header <custom_reply_headers>...\n            Add custom HTTP header to websocket upgrade reply. Separate header name and value with a colon and\n            optionally a single space. Can be used multiple times. Note that single -H may eat multiple further\n            arguments, leading to confusing errors.\n        --exec-args <exec_args>...\n            [A] Arguments for the `exec:` specifier. Must be the last option, everything after it gets into the exec\n            args list.\n        --header-to-env <headers_to_env>...\n            Forward specified incoming request header to H_* environment variable for `exec:`-like specifiers.\n\n    -h, --help <help>\n            See the help.\n            --help=short is the list of easy options and address types\n            --help=long lists all options and types (see [A] markers)\n            --help=doc also shows longer description and examples.\n        --just-generate-accept <just_generate_accept>\n            [A] Just a Sec-WebSocket-Accept value based on supplied Sec-WebSocket-Key value without running main\n            Websocat\n        --max-messages <max_messages>\n            Maximum number of messages to copy in one direction.\n\n        --max-messages-rev <max_messages_rev>\n            Maximum number of messages to copy in the other direction.\n\n        --conncap <max_parallel_conns>\n            Maximum number of simultaneous connections for listening mode\n\n        --max-ws-frame-length <max_ws_frame_length>\n            [A] Maximum size of incoming WebSocket frames, to prevent memory overflow [default: 104857600]\n\n        --max-ws-message-length <max_ws_message_length>\n            [A] Maximum size of incoming WebSocket messages (sans of one data frame), to prevent memory overflow\n            [default: 209715200]\n        --origin <origin>                                            Add Origin HTTP header to websocket client request\n        --pkcs12-der <pkcs12_der>\n            Pkcs12 archive needed to accept SSL connections, certificate and key.\n            A command to output it: openssl pkcs12 -export -out output.pkcs12 -inkey key.pem -in cert.pem\n            Use with -s (--server-mode) option or with manually specified TLS overlays.\n            See moreexamples.md for more info.\n        --pkcs12-passwd <pkcs12_passwd>\n            Password for --pkcs12-der pkcs12 archive. Required on Mac.\n\n    -p, --preamble <preamble>...\n            Prepend copied data with a specified string. Can be specified multiple times.\n\n    -P, --preamble-reverse <preamble_reverse>...\n            Prepend copied data with a specified string (reverse direction). Can be specified multiple times.\n\n        --prometheus <prometheus>\n            Expose Prometheus metrics on specified IP address and port in addition to running usual Websocat session\n\n        --request-header <request_headers>...\n            [A] Specify HTTP request headers for `http-request:` specifier.\n\n    -X, --request-method <request_method>                            [A] Method to use for `http-request:` specifier\n        --request-uri <request_uri>                                  [A] URI to use for `http-request:` specifier\n        --restrict-uri <restrict_uri>\n            When serving a websocket, only accept the given URI, like `/ws`\n            This liberates other URIs for things like serving static files or proxying.\n    -F, --static-file <serve_static_files>...\n            Serve a named static file for non-websocket connections.\n            Argument syntax: <URI>:<Content-Type>:<file-path>\n            Argument example: /index.html:text/html:index.html\n            Directories are not and will not be supported for security reasons.\n            Can be specified multiple times. Recommended to specify them at the end or with equal sign like `-F=...`,\n            otherwise this option may eat positional arguments\n        --socks5-bind-script <socks5_bind_script>\n            [A] Execute specified script in `socks5-bind:` mode when remote port number becomes known.\n\n        --socks5-destination <socks_destination>\n            [A] Examples: 1.2.3.4:5678  2600:::80  hostname:5678\n\n        --tls-domain <tls_domain>\n            [A] Specify domain for SNI or certificate verification when using tls-connect: overlay\n\n        --udp-multicast <udp_join_multicast_addr>...\n            [A] Issue IP[V6]_ADD_MEMBERSHIP for specified multicast address. Can be specified multiple times.\n\n        --udp-multicast-iface-v4 <udp_join_multicast_iface_v4>...\n            [A] IPv4 address of multicast network interface. Has to be either not specified or specified the same number\n            of times as multicast IPv4 addresses. Order matters.\n        --udp-multicast-iface-v6 <udp_join_multicast_iface_v6>...\n            [A] Index of network interface for IPv6 multicast. Has to be either not specified or specified the same\n            number of times as multicast IPv6 addresses. Order matters.\n        --udp-ttl <udp_ttl>                                          [A] Set IP_TTL, also IP_MULTICAST_TTL if applicable\n        --protocol <websocket_protocol>\n            Specify this Sec-WebSocket-Protocol: header when connecting\n\n        --server-protocol <websocket_reply_protocol>\n            Force this Sec-WebSocket-Protocol: header when accepting a connection\n\n        --websocket-version <websocket_version>                      Override the Sec-WebSocket-Version value\n        --binary-prefix <ws_binary_prefix>\n            [A] Prepend specified text to each received WebSocket binary message. Also strip this prefix from outgoing\n            messages, explicitly marking them as binary even if `--text` is specified\n        --ws-c-uri <ws_c_uri>\n            [A] URI to use for ws-c: overlay [default: ws://0.0.0.0/]\n\n        --ping-interval <ws_ping_interval>                           Send WebSocket pings each this number of seconds\n        --ping-timeout <ws_ping_timeout>\n            Drop WebSocket connection if Pong message not received for this number of seconds\n\n        --text-prefix <ws_text_prefix>\n            [A] Prepend specified text to each received WebSocket text message. Also strip this prefix from outgoing\n            messages, explicitly marking them as text even if `--binary` is specified\n\nARGS:\n    <addr1>    In simple mode, WebSocket URL to connect. In advanced mode first address (there are many kinds of\n               addresses) to use. See --help=types for info about address types. If this is an address for\n               listening, it will try serving multiple connections.\n    <addr2>    In advanced mode, second address to connect. If this is an address for listening, it will accept only\n               one connection.\n\n\nBasic examples:\n  Command-line websocket client:\n    websocat ws://ws.vi-server.org/mirror/\n    \n  WebSocket server\n    websocat -s 8080\n    \n  WebSocket-to-TCP proxy:\n    websocat --binary ws-l:127.0.0.1:8080 tcp:127.0.0.1:5678\n    \n\nFull list of address types:\n\tws://           \tInsecure (ws://) WebSocket client. Argument is host and URL.\n\twss://          \tSecure (wss://) WebSocket client. Argument is host and URL.\n\tws-listen:      \tWebSocket server. Argument is host and port to listen.\n\tinetd-ws:       \tWebSocket inetd server. [A]\n\tl-ws-unix:      \tWebSocket UNIX socket-based server. [A]\n\tl-ws-abstract:  \tWebSocket abstract-namespaced UNIX socket server. [A]\n\tws-lowlevel-client:\t[A] Low-level HTTP-independent WebSocket client connection without associated HTTP upgrade.\n\tws-lowlevel-server:\t[A] Low-level HTTP-independent WebSocket server connection without associated HTTP upgrade.\n\twss-listen:     \tListen for secure WebSocket connections on a TCP port\n\thttp:           \t[A] Issue HTTP request, receive a 1xx or 2xx reply, then pass\n\tasyncstdio:     \t[A] Set stdin and stdout to nonblocking mode, then use it as a communication counterpart. UNIX-only.\n\tinetd:          \tLike `asyncstdio:`, but intended for inetd(8) usage. [A]\n\ttcp:            \tConnect to specified TCP host and port. Argument is a socket address.\n\ttcp-listen:     \tListen TCP port on specified address.\n\tssl-listen:     \tListen for SSL connections on a TCP port\n\tsh-c:           \tStart specified command line using `sh -c` (even on Windows)\n\tcmd:            \tStart specified command line using `sh -c` or `cmd /C` (depending on platform)\n\texec:           \tExecute a program directly (without a subshell), providing array of arguments on Unix [A]\n\treadfile:       \tSynchronously read a file. Argument is a file path.\n\twritefile:      \tSynchronously truncate and write a file.\n\tappendfile:     \tSynchronously append a file.\n\tudp:            \tSend and receive packets to specified UDP socket, from random UDP port  \n\tudp-listen:     \tBind an UDP socket to specified host:port, receive packet\n\topen-async:     \tOpen file for read and write and use it like a socket. [A]\n\topen-fd:        \tUse specified file descriptor like a socket. [A]\n\tthreadedstdio:  \t[A] Stdin/stdout, spawning a thread (threaded version).\n\t-               \tRead input from console, print to console. Uses threaded implementation even on UNIX unless requested by `--async-stdio` CLI option.\n\tunix:           \tConnect to UNIX socket. Argument is filesystem path. [A]\n\tunix-listen:    \tListen for connections on a specified UNIX socket [A]\n\tunix-dgram:     \tSend packets to one path, receive from the other. [A]\n\tabstract:       \tConnect to UNIX abstract-namespaced socket. Argument is some string used as address. [A]\n\tabstract-listen:\tListen for connections on a specified abstract UNIX socket [A]\n\tabstract-dgram: \tSend packets to one address, receive from the other. [A]\n\tmirror:         \tSimply copy output to input. No arguments needed.\n\tliteralreply:   \tReply with a specified string for each input packet.\n\tclogged:        \tDo nothing. Don't read or write any bytes. Keep connections in \"hung\" state. [A]\n\tliteral:        \tOutput a string, discard input.\n\tassert:         \tCheck the input.  [A]\n\tassert2:        \tCheck the input. [A]\n\tseqpacket:      \tConnect to AF_UNIX SOCK_SEQPACKET socket. Argument is a filesystem path. [A]\n\tseqpacket-listen:\tListen for connections on a specified AF_UNIX SOCK_SEQPACKET socket [A]\n\trandom:         \tGenerate random bytes when being read from, discard written bytes.\nFull list of overlays:\n\tws-upgrade:     \tWebSocket upgrader / raw server. Specify your own protocol instead of usual TCP. [A]\n\thttp-request:   \t[A] Issue HTTP request, receive a 1xx or 2xx reply, then pass\n\thttp-post-sse:  \t[A] Accept HTTP/1 request. Then, if it is GET,\n\tssl-connect:    \tOverlay to add TLS encryption atop of existing connection [A]\n\tssl-accept:     \tAccept an TLS connection using arbitrary backing stream. [A]\n\treuse-raw:      \tReuse subspecifier for serving multiple clients: unpredictable mode. [A]\n\tbroadcast:      \tReuse this connection for serving multiple clients, sending replies to all clients.\n\tautoreconnect:  \tRe-establish underlying connection on any error or EOF\n\tws-c:           \tLow-level WebSocket connector. Argument is a some another address. [A]\n\tmsg2line:       \tLine filter: Turns messages from packet stream into lines of byte stream. [A]\n\tline2msg:       \tLine filter: turn lines from byte stream into messages as delimited by '\\\\n' or '\\\\0' [A]\n\tforeachmsg:     \tExecute something for each incoming message.\n\tlog:            \tLog each buffer as it pass though the underlying connector.\n\tjsonrpc:        \t[A] Turns messages like `abc 1,2` into `{\"jsonrpc\":\"2.0\",\"id\":412, \"method\":\"abc\", \"params\":[1,2]}`.\n\ttimestamp:      \t[A] Prepend timestamp to each incoming message.\n\tsocks5-connect: \tSOCKS5 proxy client (raw) [A]\n\tsocks5-bind:    \tSOCKS5 proxy client (raw, bind command) [A]\n\tcrypto:         \t[A] Encrypts written messages and decrypts (and verifies) read messages with a static key, using ChaCha20-Poly1305 algorithm.\n\tprometheus:     \t[A] Account connections, messages, bytes and other data and expose Prometheus metrics on a separate port.\n\texit_on_specific_byte:\t[A] Turn specific byte into a EOF, allowing user to escape interactive Websocat session\n```\n</details>\n\n\nSome notes\n---\n\n* IPv6 is supported, surround your IP in square brackets or use it as is, depending on context.\n* Web socket usage is not obligatory, you can use any specs on both sides.\n* Typically one line in binary stream correspond to one WebSocket text message. This is adjustable with options.\n\nLimitations\n---\n\n* It is not convenient when text and binary WebSocket messages are mixed. This affects `mirror:` specifier, making it a bit different from ws://echo.websocket.org. There are `--binary-prefix`, `--text-prefix` and `--base64` options to handle mixture of binary and text.\n* Current version of Websocat don't receive notification about closed sockets. This makes serving without `-E` or `-u` options or in backpressure scenarios prone to socket leak.\n* Readline is not integrated. Users are advices to wrap websocat using [`rlwrap`](https://linux.die.net/man/1/rlwrap) tool for more convenient CLI.\n* Build process of current version of Websocat is not properly automated and is fragile.\n* `ws://localhost` may fail if service is not listening both IPv4 and IPv6 properly. There is a workaround based on `ws-c:tcp:` if needed. Or just use `ws://127.0.0.1`.\n\nSee also\n---\n\n* [wstunnel](https://github.com/erebe/wstunnel)\n* [wscat](https://github.com/websockets/wscat)\n* [websocketd](https://github.com/joewalnes/websocketd)\n* [wsd](https://github.com/alexanderGugel/wsd)"
}
