{
  "name": "mstch",
  "full_name": "mstch",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Complete implementation of {{mustache}} templates using modern C++",
  "license": "MIT",
  "homepage": "https://github.com/no1msd/mstch",
  "versions": {
    "stable": "1.0.2",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/no1msd/mstch/archive/1.0.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "811ed61400d4e9d4f9ae0f7679a2ffd590f0b3c06b16f2798e1f89ab917cba6c"
    }
  },
  "revision": 1,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mstch/blobs/sha256:de4dc750e2737a8745de171858fc53741ee2625540f3ed64516f5afd9a8abc6f",
          "sha256": "de4dc750e2737a8745de171858fc53741ee2625540f3ed64516f5afd9a8abc6f"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mstch/blobs/sha256:16e5ebc65aa83659f1ae24aedc277490f3423336de6081092a16c54d541d535d",
          "sha256": "16e5ebc65aa83659f1ae24aedc277490f3423336de6081092a16c54d541d535d"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mstch/blobs/sha256:091a9f16feb7f238f196e7e184fd67d175d06d5f40b6237ae5fe89e9cfb25f40",
          "sha256": "091a9f16feb7f238f196e7e184fd67d175d06d5f40b6237ae5fe89e9cfb25f40"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mstch/blobs/sha256:c7077d9fab11fe2dd54f86d558faafdeea1d053bf93a52cff6702a0e07e2a407",
          "sha256": "c7077d9fab11fe2dd54f86d558faafdeea1d053bf93a52cff6702a0e07e2a407"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mstch/blobs/sha256:54d4bc0f632f178d01ade96cd1baad2e928ef3fe47cf016b4a9bceb2696d3dbe",
          "sha256": "54d4bc0f632f178d01ade96cd1baad2e928ef3fe47cf016b4a9bceb2696d3dbe"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mstch/blobs/sha256:94803b150e7503fdb744b8eb8ab27b9e22b0a3e1720f63233268044fe25514ee",
          "sha256": "94803b150e7503fdb744b8eb8ab27b9e22b0a3e1720f63233268044fe25514ee"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mstch/blobs/sha256:8e7784c0a95b0fb2a5ada7d237102a9bd038ca1fbdab1c62bed686640cad5ede",
          "sha256": "8e7784c0a95b0fb2a5ada7d237102a9bd038ca1fbdab1c62bed686640cad5ede"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mstch/blobs/sha256:cc3206f041325c9dc4217c73cad3064ecbd58e679f7cde926fbed9d244102686",
          "sha256": "cc3206f041325c9dc4217c73cad3064ecbd58e679f7cde926fbed9d244102686"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [
    "boost"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/mstch.rb",
  "ruby_source_checksum": {
    "sha256": "1f408e1539429ce3e53f28935b34ee549604423dac95022b969509f72cb48209"
  },
  "date_added": "2015-10-19T10:04:29+01:00",
  "readme": "# mstch - {{mustache}} templates in C++11 \n\n![mstch logo](http://i.imgur.com/MRyStO5.png)\n\nmstch is a complete implementation of [{{mustache}}](http://mustache.github.io/) \ntemplates using modern C++. It's compliant with [specifications](https://github.com/mustache/spec)\nv1.1.3, including the lambda module.\n\n[![Try it online](https://img.shields.io/badge/try%20it-online-blue.svg)](http://melpon.org/wandbox/permlink/EqyOe7IBRYPGVk5f)\n[![GitHub version](https://badge.fury.io/gh/no1msd%2Fmstch.svg)](http://badge.fury.io/gh/no1msd%2Fmstch)\n[![Build Status](https://travis-ci.org/no1msd/mstch.svg?branch=master)](https://travis-ci.org/no1msd/mstch)\n[![Build status](https://ci.appveyor.com/api/projects/status/d6mxp0uba5646x16?svg=true)](https://ci.appveyor.com/project/no1msd/mstch)\n\n## Supported features\n\nmstch supports the complete feature set described in the `mustache(5)` [manpage](http://mustache.github.com/mustache.5.html):\n\n - JSON-like data structure using [Boost.Variant](http://www.boost.org/libs/variant)\n - variables, sections, inverted sections\n - partials\n - changing the delimiter\n - C++11 lambdas\n - C++ objects as view models\n\n## Basic usage\n\n```c++\n#include <iostream>\n#include <mstch/mstch.hpp>\n\nint main() {\n  std::string view{\"{{#names}}Hi {{name}}!\\n{{/names}}\"};\n  mstch::map context{\n    {\"names\", mstch::array{\n      mstch::map{{\"name\", std::string{\"Chris\"}}},\n      mstch::map{{\"name\", std::string{\"Mark\"}}},\n      mstch::map{{\"name\", std::string{\"Scott\"}}},\n    }}\n  };\n  \n  std::cout << mstch::render(view, context) << std::endl;\n  \n  return 0;\n}\n\n```\n\nThe output of this example will be:\n\n```html\nHi Chris!\nHi Mark!\nHi Scott!\n```\n\n### Data structure\n\nThe types in the example above, `mstch::array` and `mstch::map` are  actually \naliases for standard types:\n\n```c++\nusing map = std::map<const std::string, node>;\nusing array = std::vector<node>;\n```\n\n`mstch::node` is a `boost::variant` that can hold a `std::string`, `int`, \n`double`, `bool`, `mstch::lambda` or a `std::shared_ptr<mstch::object>` \n(see below), also a map or an array recursively. Essentially it works just like \na JSON object.\n\nNote that when using a `std::string` as value you must explicitly specify the \ntype, since a `const char*` literal like `\"foobar\"` would be implicitly \nconverted to `bool`. Alternatively you can use [C++14 string_literals](http://en.cppreference.com/w/cpp/string/basic_string/operator%22%22s)\nif your compiler supports it.\n\n## Advanced usage\n\n### Partials\n\nPartials can be passed in a `std::map` as the third parameter of the \n`mstch::render` function:\n\n```c++\nstd::string view{\"{{#names}}{{> user}}{{/names}}\"};\nstd::string user_view{\"<strong>{{name}}\\n</strong>\"};\nmstch::map context{\n  {\"names\", mstch::array{\n    mstch::map{{\"name\", std::string{\"Chris\"}}},\n    mstch::map{{\"name\", std::string{\"Mark\"}}},\n    mstch::map{{\"name\", std::string{\"Scott\"}}},\n  }}\n};\n  \nstd::cout << mstch::render(view, context, {{\"user\", user_view}}) << std::endl;\n```\n\nOutput:\n\n```html\n<strong>Chris</strong>\n<strong>Mark</strong>\n<strong>Scott</strong>\n```\n\n### Lambdas\n\nC++11 lambda expressions can be used to add logic to your templates. Like a\n`const char*` literal, lambdas can be implicitly converted to `bool`, so they\nmust be wrapped in a `mstch::lambda` object when used in a `mstch::node`. The \nlambda expression passed to `mstch::lambda` must itself return a `mstch::node`.\nThe returned node will be rendered to a string, then it will be parsed as a\ntemplate.\n\nThe lambda expression accepts either no parameters:\n\n```c++\nstd::string view{\"Hello {{lambda}}!\"};\nmstch::map context{\n  {\"lambda\", mstch::lambda{[]() -> mstch::node {\n    return std::string{\"World\"};\n  }}}\n};\n\nstd::cout << mstch::render(view, context) << std::endl;\n```\n\nOutput:\n\n```html\nHello World!\n```\n\nOr it accepts a `const std::string&` that gets the unrendered literal block:\n\n```c++\nstd::string view{\"{{#bold}}{{yay}} :){{/bold}}\"};\nmstch::map context{\n  {\"yay\", std::string{\"Yay!\"}},\n  {\"bold\", mstch::lambda{[](const std::string& text) -> mstch::node {\n    return \"<b>\" + text + \"</b>\";\n  }}}\n};\n\nstd::cout << mstch::render(view, context) << std::endl;\n```\n\nOutput:\n\n```html\n<b>Yay! :)</b>\n```\n\n### Objects\n\nCustom objects can also be used as context for rendering templates. The class \nmust inherit from `mstch::object`, and register it's exported methods with\n`register_methods`. Exported methods must have the return type of `mstch::node`.\nObjects must be created as a `std::shared_ptr`.\n\n```c++\nclass example: public mstch::object {\n public:\n  example(): m_value(1) {\n    register_methods(this, {\n      {\"count\", &example::count},\n      {\"names\", &example::names}  \n    });\n  }\n  \n  mstch::node count() {\n    return m_value++;\n  }\n  \n  mstch::node names() {\n    return mstch::array{\n      std::string{\"Chris\"}, std::string{\"Mark\"}, std::string{\"Scott\"}};\n  }\n  \n private:\n  int m_value;\n};\n\nstd::string view{\"{{#names}}<b>{{count}}</b>: {{.}}\\n{{/names}}\"};\nconst auto context = std::make_shared<example>();\n\nstd::cout << mstch::render(view, context) << std::endl;\n```\n\nOutput:\n\n```html\n<b>1</b>: Chris\n<b>2</b>: Mark\n<b>3</b>: Scott\n```\n\n### Custom escape function\n\nBy default, mstch uses HTML escaping on the output, as per specification. This\nis not useful if your output is not HTML, so mstch provides a way to supply\nyour own escape implementation. Just assign any callable object to the static\n`mstch::config::escape`, which is an initially empty\n`std::function<std::string(const std::string&)>`. \n\nFor example you can turn off escaping entirely with a lambda:\n\n```c++\nmstch::config::escape = [](const std::string& str) -> std::string {\n  return str;\n};\n```\n\n## Requirements\n\n - A C++ compiler with decent C++11 support. Currently tested with:\n   - GCC 4.7, 4.8, 4.9, 5.1\n   - clang 3.5, 3.6, 3.7 (both libstdc++ and libc++ are supported)\n   - MSVC 2013, 2015\n - Boost 1.54+ for [Boost.Variant](http://www.boost.org/libs/variant)\n - CMake 3.0+ for building\n\n## Using mstch in your project\n\nIf you are using CMake, the easiest way to include mstch in your project is to \ncopy the whole directory to your source tree, and use `add_subdirectory` in your \nCMakeLists.txt. This will set a variable named `mstch_INCLUDE_DIR` that contains \nits include path, and add a static library target named `mstch`. For example:\n\n```cmake\nadd_subdirectory(external/mstch)\ninclude_directories(${mstch_INCLUDE_DIR})\ntarget_link_libraries(your_project mstch)\n```\n\nIf you prefer to install the library globally, you can simply do the following \nfrom the root of the source tree:\n\n```bash\n $ mkdir build\n $ cd build\n $ cmake ..\n $ make\n $ make install\n```\n\nThe install command may require root privileges. This will also install CMake \nconfig files, so you can use use `find_package` in your CMakeLists.txt:\n\n```cmake\nfind_package(mstch)\ntarget_link_libraries(your_project mstch::mstch)\n```\n\n## Running the unit tests\n\nUnit tests are using the [Catch](https://github.com/philsquared/Catch) framework\nand [rapidjson](http://rapidjson.org/) to parse the\n[Mustache specifications](https://github.com/mustache/spec), all of which are \nincluded in the repository as git submodules. Various \n[Boost](http://www.boost.org/) libraries are also required to build them.\n\nDon't forget to initialize submodules:\n\n```bash\n $ git submodule init\n $ git submodule update\n```\n\nTo build and run the unit tests:\n\n```bash\n $ mkdir build\n $ cd build\n $ cmake -DWITH_UNIT_TESTS=ON ..\n $ make\n $ make test\n```\n\n## License\n\nmstch is licensed under the [MIT license](https://github.com/no1msd/mstch/blob/master/LICENSE)."
}
