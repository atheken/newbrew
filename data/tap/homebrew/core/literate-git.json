{
  "name": "literate-git",
  "full_name": "literate-git",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Render hierarchical git repositories into HTML",
  "license": "GPL-3.0-or-later",
  "homepage": "https://github.com/bennorth/literate-git",
  "versions": {
    "stable": "0.3.1",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/bennorth/literate-git/archive/v0.3.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "f1dec77584236a5ab2bcee9169e16b5d976e83cd53d279512136bdc90b04940a"
    }
  },
  "revision": 13,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/literate-git/blobs/sha256:31e0c7b5e24fa754a3a9c093101535e64af4a5e00618fdfe4eea06afcca8ad2e",
          "sha256": "31e0c7b5e24fa754a3a9c093101535e64af4a5e00618fdfe4eea06afcca8ad2e"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/literate-git/blobs/sha256:268a50887b3929b544fed71277bd93e65c8285fed93d3d81d70b30391fae72d6",
          "sha256": "268a50887b3929b544fed71277bd93e65c8285fed93d3d81d70b30391fae72d6"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/literate-git/blobs/sha256:e2f80196bf354dc363f82bfacc81bb8872deee508d1f8b2b3fec34d7d64e3c7a",
          "sha256": "e2f80196bf354dc363f82bfacc81bb8872deee508d1f8b2b3fec34d7d64e3c7a"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/literate-git/blobs/sha256:c4270a2bc1b79e32660ad64483746ef2c734a898edd98453976a468903b2c93f",
          "sha256": "c4270a2bc1b79e32660ad64483746ef2c734a898edd98453976a468903b2c93f"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/literate-git/blobs/sha256:68117dad13005e6bbb6ec4b3e6759137d5a6c2cc9a1a3dc2081cdf4a39b6c637",
          "sha256": "68117dad13005e6bbb6ec4b3e6759137d5a6c2cc9a1a3dc2081cdf4a39b6c637"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/literate-git/blobs/sha256:9127986e4e878f5711f623f7198d10718e916528ebf81d2d8f70cf901e209fbc",
          "sha256": "9127986e4e878f5711f623f7198d10718e916528ebf81d2d8f70cf901e209fbc"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/literate-git/blobs/sha256:cfdb32662011363420758133f66f4837af84e07ebdae57cf9416057eb66bf815",
          "sha256": "cfdb32662011363420758133f66f4837af84e07ebdae57cf9416057eb66bf815"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "pkg-config"
  ],
  "dependencies": [
    "pygit2",
    "python@3.11"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/literate-git.rb",
  "ruby_source_checksum": {
    "sha256": "0338a60537c10bad6ef6d34134856f71091928946f473d7b223384a2bc563490"
  },
  "date_added": "2020-02-23T21:58:47-05:00",
  "readme": "# Literate Git\n\nTool to render a hierarchical `git` history into HTML.\n\n[![Build Status](https://travis-ci.org/bennorth/literate-git.svg?branch=develop)](https://travis-ci.org/bennorth/literate-git)\n\n\n## Motivation: Literate Programming\n\nThis project is a partner to my\n[`git-dendrify`](https://github.com/bennorth/git-dendrify/) project,\nwhich allows easy conversion between a *linear* form of git history, and\na *hierarchical* (tree-like) form.  The idea I am exploring in these\nprojects is that the presentation of the history of a piece of software\ncould benefit from the same hierarchical approach we use when writing an\narticle, paper, or other document.\n\nWe don't typically write a paper as one long flat stream of paragraphs,\nbut rather break it into sections and sub-sections.  I am exploring the\nidea of presenting the development of a piece of software in the same\nway, using a git repo with merge commits to represent the hierarchical\nstructure.\n\nAs noted in the\n[git-dendrify write-up](https://github.com/bennorth/git-dendrify/blob/master/README.md),\nunfortunately not all tools work well with a git history making heavy\nuse of such 'sections'.\n\n\n## Presenting the hierarchical history\n\nThis project improves the situation by rendering a git history into an\nHTML document which explicitly shows the hierarchical structure of the\ncode's development.\n\nThe document contains the commit messages (parsed as markdown to allow\nsome formatting), together with the source-code diffs.  Each 'top level'\ncommit becomes a 'section' in the HTML, which can be interacted with so\nas to expand it into its constituent sub-commits.\n\n\n## Demo\n\nThe best way to demonstrate the idea is with an example of the results:\n\n - [A Tamagotchi-style web app](http://www.redfrontdoor.org/20210314-literate-git-demo/index.html)\n   &mdash; This is based on a course I developed and gave, jointly with\n   Brian Gillespie, at a local primary school as a 'next step beyond\n   [Scratch](https://scratch.mit.edu)' after-school course.  Note that\n   'Tamagotchi' is a trademark of Bandai.\n\n### Initial view\n\nOn paging through to an arbitrary section, using the `>` button, we\ninitially see this page (showing only the top portion):\n\n![Initial view of section](ReadMe-Images/initial-w640.png)\n\n### Expanded view\n\nOn clicking the `+` button, the presentation changes to show the\nindividual steps which make up this section:\n\n![Expanded view of section](ReadMe-Images/expanded-w640.png)\n\nThere are eight subsections within *Make Tamagotchi's appearance show\nits state*, as can be seen by\n[playing with the demo](http://www.redfrontdoor.org/20210314-literate-git-demo/index.html).\n\n### Interacting with the demo\n\nIn general, the 'RESULT' link opens a tab with the current state of the\nweb-app as of that commit, and the 'SOURCE' link opens a tab with GitHub\nbrowsing the tree at that commit.  The very first commit's tree is empty\nso RESULT gives an error but subsequent ones work.\n\nYou can navigate forward and backward in the history using the `>` and\n`<` buttons.  You can also use vi-style `h` and `l` letter keys.\n\nThe `+` button to the left of the diff replaces it with its expansion in\nterms of the sub-commits, with more explanation; the `-` button then\ncollapses back.\n\nThis sample only has one level of nesting but the idea would work for\ndeeper structures too.\n\n\n## Installing\n\n```\n# via pip\npip install literategit\n\n# via homebrew\nbrew install literate-git\n```\n\n\n## Usage of these rendering tools\n\nThis is still at the stage of a proof-of-concept, so the workflow is not\nfully automated.  The two tools provided by this project are\n\n - `git literate-render`\n - `git dump-all-trees`\n\nUsing them, the steps to produce a rendered document are:\n\n### Generate structured history\n\nYou can create the structured history yourself with careful merging,\nbut for this particular example, I developed the history in a linear\nfashion and then 'dendrified' it using the\n[`git-dendrify`](https://github.com/bennorth/git-dendrify/) project.\nThe dendrification was done with the command\n\n<pre>git dendrify dendrify rendered-20210314 start bugfix/commit-messages-markdown-2</pre>\n\n(And here we see one angle which will need more thought when this\nsystem is used for a tutorial and the whole tutorial evolves &mdash;\nwhat is a good way to track the history of the entire repo?  Including\nversion numbers or datestamps in the branch names is unlikely to be\nthe best solution.)\n\nAs a 'dog-food' example of the use of `git dendrify`, it was indeed\nmuch easier to work in the linear form to re-structure, re-order, fix\ntypos, re-word, etc., while building up the structed history of this\ntutorial.\n\n### Generate HTML file: `git literate-render`\n\nThe single `index.html` file is generated by\n\n<pre>git literate-render <i>title exclusive-begin-commit inclusive-end-commit create-url</i> &gt; index.html</pre>\n\nwhere <code><i>inclusive-end-commit</i></code> is typically the head of\na branch which has been produced by `git dendrify` from a linear\nhistory, and <code><i>exclusive-begin-commit</i></code> is the starting\npoint of the code just before the section you wish to present.\n\nThe use of the <code><i>create-url</i></code> argument is a bit clunky\n&mdash; it specifies where the 'results' and 'source' links should point\nto for the project being rendered.  Details in the code.\n\nFor this case it was\n\n```bash\ncd ~/dev/tamagotchi\nmkdir /tmp/project-export\ngit literate-render \"Tamagotchi-style web app\" \\\n    start rendered-20210314 hard_coded_create_url.HardCodedCreateUrl \\\n    > /tmp/project-export/index.html\n```\n\nwhere `hard_coded_create_url.py` is a short special-case Python module\nwith a class `HardCodedCreateUrl` having functions providing links to\nthe 'results' trees (see next section) and the GitHub 'browse tree at\ncommit' pages.\n\n### Generate 'results' trees: `git dump-all-trees`\n\nAs noted, the 'results' link takes you to the state of the web-app\nproject at that commit.  To generate the many different stages, this\nproject also includes a '**dump all trees**' tool.  One could imagine\ninstead generating some [JSBin](http://jsbin.com/) bins, or something\nequivalent for projects in other languages.\n\nThis creates an output directory containing all relevant blobs, written\nas loose files, and then also creates commit trees with hard-links to\nthe blobs.  This in similar to a subset of the functionality provided by\n[gitfs](https://github.com/PressLabs/gitfs), but with the result being a\nstatic set of snapshots.  It requires an operating system and filesystem\nwhich supports the notion of a hard link.\n\nFor this case, the invocation was\n\n```bash\ngit dump-all-trees /tmp/project-export start rendered-20210314\n```\n\n### Add support files\n\nThe various extra support files then need to be added to the export\ndirectory.\n\n```bash\ncd ~/dev/literate-git/literategit\ncp literate-git.css literate-git.js /tmp/project-export\n( cd /tmp/project-export\n  wget https://raw.githubusercontent.com/sindresorhus/github-markdown-css/gh-pages/github-markdown.css\n  wget https://code.jquery.com/jquery-3.0.0.min.js )\n```\n\n### Source repo for this example\n\nThe hierarchical source branch for the example is:\n\n - [`rendered-20210314` branch of `bennorth/webapp-tamagotchi`](https://github.com/bennorth/webapp-tamagotchi/tree/rendered-20210314)\n\nand, for comparison, the linear history is:\n\n - [`bugfix/commit-messages-markdown-2` branch of `bennorth/webapp-tamagotchi`](https://github.com/bennorth/webapp-tamagotchi/tree/bugfix/commit-messages-markdown-2)\n\nAlthough see below under **GitHub limitation regarding commit sorting**.\n\n\n## Observations and remarks\n\n### Haskell LLVM tutorial\n\n[Luke Lau](https://lukelau.me/) has turned the Kaleidoscope tutorial\nfrom the LLVM project into a literate git history:\n\n - [llvm-hs Kaleidoscope tutorial](https://lukelau.me/kaleidoscope/)\n\n### Other work\n\n[Scott Abbey](https://www.sabbey.net/) has developed these ideas in\nthe direction of creating a 'presentation' version of an existing\npublic repo.  He took the Rust\n[`semver-parser` crate](https://crates.io/crates/semver-parser),\nre-wrote its commit history, and added detailed comments to explain\nits development.  The result was a\n['literate git' presentation](https://www.sabbey.net/litgit/semver-parser/).\n\nScott took a different approach to declaring the structure of the\ncommit history.  Instead of the 'magic strings in commit messages'\napproach of `git-dendrify`, he applied tags to the commits.  The work\nis described in more detail in\n[Scott's write-up](https://www.sabbey.net/litgit/).\n\n### GitHub limitation regarding commit sorting\n\nRegrettably, GitHub shows commits in author-date order, which destroys\nthe carefully-built structure.  Apparently\n[this behaviour is on purpose](https://help.github.com/articles/why-are-my-commits-in-the-wrong-order/),\nwith GitHub discouraging people from rebasing *even in private*.  This\nis disheartening.\n\n[Others also find GitHub's behaviour in this regard\nannoying](https://github.com/isaacs/github/issues/386) &mdash; as\n'toejough' comments in that issue, *It's not clear to me how only\nshowing things in the wrong order (where the 'right' order is the way\nthe committer ordered them during rebase) fosters better discussion.*\n\nA better way to view these branches is to clone locally then use\nsomething which understands the structure of the history, such as\n[magit](https://magit.vc/) (which is truly **excellent**), or `gitk\n--all`.\n\n### Performance of rendering tools\n\nPerformance is pretty good, although the demo repo is fairly small.\nThere are 162 commits involved, and the different stages perform as\nfollows:\n\n - `dendrify` takes 0.14\"\n - `literate-render` takes 1.0\"\n - `dump-all-trees` takes 0.19\"\n\n### Graphic design\n\nFor this proof-of-concept, I based the styling heavily on GitHub's\nmarkdown stylesheet (as available in [Sindre Sorhus's\nproject](https://github.com/sindresorhus/github-markdown-css)).\n\n### Application to other languages\n\nThe 'results' link is an especially good fit for a web-app.  For other\nprojects, more thought might be required as to what this might mean.  Or\nit could be optional.\n\n### Preserve viewing state\n\nIt would be useful if the rendered result supported URLs going directly\nto some particular section, in a chosen state (collapsed or expanded).\n\n\n---\n\nThis README: Copyright 2016&ndash;2021 Ben North; licensed under\n[CC BY-SA 4.0](http://creativecommons.org/licenses/by-sa/4.0/)\n\nSee the file `COPYING` for full licensing details."
}
