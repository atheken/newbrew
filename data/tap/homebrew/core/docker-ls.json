{
  "name": "docker-ls",
  "full_name": "docker-ls",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Tools for browsing and manipulating docker registries",
  "license": "MIT",
  "homepage": "https://github.com/mayflower/docker-ls",
  "versions": {
    "stable": "0.5.1",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/mayflower/docker-ls.git",
      "tag": "v0.5.1",
      "revision": "ae0856513066feff2ee6269efa5d665145709d2e",
      "checksum": null
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/docker-ls/blobs/sha256:061380ab4b800dd7c9963eff07bf88387b1e7816ebd40c41145fc5492ca89868",
          "sha256": "061380ab4b800dd7c9963eff07bf88387b1e7816ebd40c41145fc5492ca89868"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/docker-ls/blobs/sha256:e8c823d66ba70fe7788f5cf389c71537d3c64776194dfde5b23eec60903f8083",
          "sha256": "e8c823d66ba70fe7788f5cf389c71537d3c64776194dfde5b23eec60903f8083"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/docker-ls/blobs/sha256:146371ff787d25857ec030cb07025e9e7e062b4fba43eb59136aad8ceca57790",
          "sha256": "146371ff787d25857ec030cb07025e9e7e062b4fba43eb59136aad8ceca57790"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/docker-ls/blobs/sha256:6a504107a216b56ac9b5b9b3f435c791c4dbb56440ca9a39bcf94d285665c580",
          "sha256": "6a504107a216b56ac9b5b9b3f435c791c4dbb56440ca9a39bcf94d285665c580"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/docker-ls/blobs/sha256:cbd941bf6005f92598ee1c00165c5eb7101fac547fe0c1d2b84a55a999d940a8",
          "sha256": "cbd941bf6005f92598ee1c00165c5eb7101fac547fe0c1d2b84a55a999d940a8"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/docker-ls/blobs/sha256:69d17d15d79bfa1813ad39ae3a0250ddd919a36b4d3923412cfbc17be56316dc",
          "sha256": "69d17d15d79bfa1813ad39ae3a0250ddd919a36b4d3923412cfbc17be56316dc"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/docker-ls/blobs/sha256:47231e20bcc919d92de35c537c87c54f52bbcdaa85cf2bb9b27bc03a69f25587",
          "sha256": "47231e20bcc919d92de35c537c87c54f52bbcdaa85cf2bb9b27bc03a69f25587"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/docker-ls/blobs/sha256:38eb334f22797271ae8e121030133f6fc3e33cd178cd938940d4ead6565e0225",
          "sha256": "38eb334f22797271ae8e121030133f6fc3e33cd178cd938940d4ead6565e0225"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/docker-ls/blobs/sha256:0002977a8ff7a2a2607098a743ec898e1aec0efee43095c06b56b873fbfcda15",
          "sha256": "0002977a8ff7a2a2607098a743ec898e1aec0efee43095c06b56b873fbfcda15"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/docker-ls.rb",
  "ruby_source_checksum": {
    "sha256": "b770f94c40cd53d6e0ab7ccbe873da4742e81a2714c464ac34476c33e7dbbcc8"
  },
  "date_added": "2017-11-21T11:11:21-08:00",
  "readme": "[![Build Status](https://travis-ci.org/mayflower/docker-ls.svg?branch=master)](https://travis-ci.org/mayflower/docker-ls)\n\n# What is it?\n\nDocker-ls is a set of CLI tools for browsing and manipulating docker registries.\nIn particular, docker-ls can handle authentication and display the sha256 content\ndigests associated with tags.\n\n## What registries are supported\n\nOnly\n[V2 registries](https://github.com/docker/distribution)\nare supported. Both HTTP Basic auth and Docker style\n[token authentication](https://docs.docker.com/registry/spec/auth/token/)\nare supported for authentication.\n\n# Installation\n\nSix ways there are to attain enlightenment.\n\n## Precompiled binaries\n\nJust download precompiled binaries for your platform from\n[GitHub](https://github.com/mayflower/docker-ls/releases).\n\n## MacOS / Homebrew\n\nYou can install `docker-ls` directly from Homebrew:\n\n    brew install docker-ls\n\n## Gentoo / portage\n\n```\nemerge docker-ls\n```\n\n## NixOS\n\n```\nnix-env -iA nixos.docker-ls\n```\n\n## Arch Linux\n\nPackage in the [AUR](https://aur.archlinux.org/packages/docker-ls/) available.\n\n\n## Docker\n\nIf you have Docker installed, you may want to try this option. Clone the\nrepository and do:\n\n    docker build -t docker-ls .\n\nExample of running container:\n\n    $ docker run -it docker-ls docker-ls tags library/consul\n    requesting list . done\n    repository: library/consul\n    tags:\n    - latest\n    - v0.6.4\n\nOr create aliases:\n\n    $ alias docker-ls='docker run -it docker-ls docker-ls'\n    $ alias docker-rm='docker run -it docker-ls docker-rm'\n\nSo you can do:\n\n    $ docker-ls tags library/consul\n    requesting list . done\n    repository: library/consul\n    tags:\n    - latest\n    - v0.6.4\n\nand:\n\n    $ docker-rm | head -n 3\n    usage: docker-rm [options] <repository:reference>\n\n    Delete a tag in a given repository.\n\n## Go get\n\nProvided that you sport an installation of\n[golang](https://golang.org), the latest version from master\ncan be installed via\n\n    go get -d github.com/mayflower/docker-ls/cli/...\n    go generate github.com/mayflower/docker-ls/lib/...\n    go install github.com/mayflower/docker-ls/cli/...\n\nIsn't a simple `go get github.com/mayflower/docker-ls/cli/...` sufficient, you ask?\nIndeed it is, but including the generate step detailed above will encode verbose version information\nin the binaries.\n\n# Usage\n\nDocker-ls contains two CLI tools: `docker-ls` and `docker-rm` .\n\n## docker-ls\n\n`docker-ls` is a browser for docker registries. Output is either encoded as YAML or\nas JSON.\n\nSeveral subcommands are available\n\n * `docker-ls repositories` Obtains a list of repositories on the server.\n   **This is not supported by the official [docker hub](https://hub.docker.com/).**\n * `docker-ls tags` Lists all tags in a a particular repository.\n * `docker-ls tag` Inspect a particular tag. This command displays a condensed version\n   of the corresponding manifest by default, but the `--raw-manifest` option can be\n   used to dump the full manifest. The `--parse-history` option can be used to display\n   the JSON-encoded history within the manifest.\n\n### Authentication and credentials\n\n`docker-ls` supports the following authentication methods:\n\n * \"Classic\" docker registry [token authentication](https://docs.docker.com/registry/spec/auth/).\n   This is the default if credentials are supplied on the command line. If credentials are taken\n   from a previous `docker login`, this is the default unless the credentials contains an identity\n   token.\n * [OAuth2 authentication](https://docs.docker.com/registry/spec/auth/oauth/). This is used if\n   the credentials are taken from a previous `docker login` and contain an identity token.\n * Basic auth. This needs to be requested explicitly on the CLI.\n\nCredentials are automatically taken from a previous `docker login` or specified on the command line.\n`docker-ls` implicitly uses the same\n[credential store and helpers](https://docs.docker.com/engine/reference/commandline/login/#credentials-store)\nused by docker.\n\nLogging into Amazon ECR requires Basic auth, the same goes for Google GCR.\n\n### Important command line flags\n\nThis list is not exhaustive; please consult the command line (`-h`) help for all options.\n\n * `--registry <url> (-r)` Connect to the registry at `<url>`. The URL must include the protocol\n   (http / https). By default, `docker-ls` targets the official\n   [docker hub](https://hub.docker.com/).\n * `--user <user> (-u)` Username for authentication.\n * `--password <password> (-p)` Password for authentication.\n * `--user-agent <agent string>` Use a custom user agent.\n * `--interactive-password(-i)` Read the password from an interactive prompt.\n * `--level <depth> (-l)` The `repositories` and `tags` subcommands support this option\n   for recursive output. Depths 0 (default) and 1 are supported. Please note\n   recursion means more API requests and may be slow.\n * `--json (-j)` Switch output format from YAML to JSON.\n * `--template (-t)` Use a named golang template from the configuration for output (see below)\n * `--template-source` Use the specified template for output (see below)\n * `--basic-auth` Use HTTP basic auth for authentication (instead of token authentication).\n * `--allow-insecure` Do not validate SSL certificates (useful for registries secured with a\n    self-signed certificate).\n * `--manifest-version` Request either manifest version\n   [V2.1](https://github.com/docker/distribution/blob/master/docs/spec/manifest-v2-1.md)\n   (`--manifest-version 1` or manifest version [V2.2](https://github.com/docker/distribution/blob/master/docs/spec/manifest-v2-2.md)\n   (`--manifest-version 2`, default) from the registry. Please note that deleting manifests\n   from registry version >= 2.3 will work **only** with content digests from a V2.2\n   manifest.\n * `--debug` Enable debug output.\n\n   WARNING: This is exactly what the name suggests: debugging output. It contains raw\n   data structures, may include your credentials in verbatim and may or may not help you.\n   Use with care.\n\n### Examples\n\nList all repositories in a custom registry:\n\n    docker-ls repositories --registry https://my.registry.org --user hanni --password hanni123\n\nList all repositories in a custom registry, including their tags:\n\n    docker-ls repositories --registry https://my.registry.org --user hanni --password hanni123 --level 1\n\nList all tags in stuff/busybox using HTTP basic auth\n\n    docker-ls tags --registry https://my.registry.org --user hanni --password hanni123 --basic-auth stuff/busybox\n\nInspect tag stuff/busybox:latest, no authentication, JSON output.\n\n    docker-ls tag --registry https://my.registry.org --json stuff/busybox:latest\n\nInspect tag stuff/busybox:latest, no authentication, dump the raw manifest with parsed\nhistory as JSON.\n\n    docker-ls tag --registry https://my.registry.org --json --raw-manifest --parse-history stuff/busybox:latest\n\n### Notes considering the offical registry\n\nIf no registry is specified, `docker-ls` will target the official registry server\nat `https://index.docker.io`. Please note that:\n\n * The official registry does not support repository listing via `docker-ls repositories`\n * Official repositories must be prefixed with `library/`, e.g. `docker-ls tags library/debian`\n\n## docker-rm\n\n`docker-rm` can delete particular tags. Example:\n\n    docker-rm --registry https://my.registry.org --user someuser --password somepass busybox:sha256:51fef[...]\n\n(the digest has been truncated for brevity). Please consult the command line help\nfor a full list of all arguments.\n\nSome remarks:\n\n * The tag *must* be specified as a sha256 content digest.\n * While tags can be deleted, the current registry implementation will (to the best\n   of my knowledge) not free the space associated with any resulting unused layers\n * Deleting stuff is currently disabled by default in the official registry and needs to be\n   enabled explicitly &mdash; check out this [issue](https://github.com/mayflower/docker-ls/issues/1)\n   for details.\n * Content digests obtained with `--manifest-version 1` will **not work** with\n   registry version >= 2.3.\n * **BE CAREFUL!** The API does not implement undelete :)\n\n## Using a proxy\n\n`docker-ls` supports HTTP / HTTPS proxies configured via the corresponding\ncanonical environment variables. Check out the corresponding\n[documentation](https://golang.org/pkg/net/http/#ProxyFromEnvironment)\nfor details.\n\n## Configuration via config files and environment variables\n\nAll options that can be specified via CLI flags can be read from a config file or from an\nenvironment variables. The priority is CLI flag > environment variable > config file.\n\n### Config files\n\nBy default, both tools try to read\n`~/.docker-ls.[yaml|json|toml|...]`\n(please check the Viper [documentation](https://github.com/spf13/viper)\nfor a full list of the supported formats). The names of the keys in the file\nare the long names of the CLI flags. For example, the following YAML file would configure\nregistry URL and username\n\n    registry: https://foo.bar.com\n    user: foo\n\nOther config files can be specified via the `--config` option.\n\n### Template Output\n\nOutput of the various `docker-ls` subcommands can be further customized by using\n[golang templates](https://golang.org/pkg/text/template/).\n\n#### Predefined templates\n\nNamed templates can be configured in the `templates` section of the configuration file.\nWhen `docker-ls` is invoked, the `-t` parameter (see above) can be used to select a named\ntemplate for formatting the output.\n\n**Example:** The following YAML section defines a template that outputs the list of tags\nin a repository as a simple HTML document.\n\n```\ntemplates:\n  taglist_html: |\n    <head></head>\n    <body>\n        <h1>Tags for repository {{ html .Repository }}</h1>\n        <ul>\n            {{- range .Tags }}\n            <li>{{ html . }}</li>\n            {{- end }}\n        </ul>\n    </body>\n```\n\nIt can be invoked by running i.e.\n\n```\ndocker-ls tags -t taglist_html /library/debian\n```\n\n#### Inline templates\n\nSimple templates can also be passed directly on the command line using the `--template-source`\nparameter:\n\n```\ndocker-ls tag --template-source '{{ .TagName }}: {{ .Digest }}'  /library/debian:wheezy\n```\n\n### Template variables\n\nInside templates, all fields of the corresponding JSON / YAML output can be accessed in pipeline\nexpressions. The first letter of all field names is capitalized, with the exception of manifests\nthat are directly returned from the registry by using `docker-ls tag --raw-manifest`: for\nthose, the JSON / YAML field names are unchanged.\n\n### Environment variables\n\nIn addition to config files and CLI flags, environment variables can be used to specify options\nglobally. The name is determined by taking the long CLI name, uppercasing replacing\nhyphens \"-\" with underscores \"\\_\" and prefixing the result with \"DOCKER_LS_\". For example,\nthe following would enable interactive password prompts for all consecutive\ninvocations:\n\n    export DOCKER_LS_INTERACTIVE_PASSWORD=1\n\n## Shell autocompletion\n\nBoth `docker-ls` and `docker-rm` support shell autocompletion for subcommands and\noptions. To enable this, source the output of `docker-ls autocomplete bash|zsh`\nand `docker-rm autocomplete bash|zsh` in the running shell. In case of bash, this can be\nachieved with\n\n    $ source <(docker-ls autocomplete bash)\n\n# License\n\nDocker-ls is distributed under the terms of the MIT license."
}
