{
  "name": "nickel",
  "full_name": "nickel",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Better configuration for less",
  "license": "MIT",
  "homepage": "https://github.com/tweag/nickel",
  "versions": {
    "stable": "1.1.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/tweag/nickel/archive/refs/tags/1.1.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "48f709d5c21c9961bfaaf7a1abc766fc62909afd249e8cd104f72d2a68df601e"
    },
    "head": {
      "url": "https://github.com/tweag/nickel.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/nickel/blobs/sha256:276e04824cb230e1be7d64ac60d7f3a0732735b3ba5fc42a8beaded9a618cbc2",
          "sha256": "276e04824cb230e1be7d64ac60d7f3a0732735b3ba5fc42a8beaded9a618cbc2"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/nickel/blobs/sha256:66c084ddaad46bfc65878b0bd644ca65ba24ddaad661dd812cf252ec8978b72c",
          "sha256": "66c084ddaad46bfc65878b0bd644ca65ba24ddaad661dd812cf252ec8978b72c"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/nickel/blobs/sha256:589a92efc3fc2eba9644e6636654b3f8d2c51d6889736ec123a49b22ac5fd6d5",
          "sha256": "589a92efc3fc2eba9644e6636654b3f8d2c51d6889736ec123a49b22ac5fd6d5"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/nickel/blobs/sha256:ed7ad80678db0458906fbdf386c8b33b80439769a74d0ce340943930715abab3",
          "sha256": "ed7ad80678db0458906fbdf386c8b33b80439769a74d0ce340943930715abab3"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/nickel/blobs/sha256:67bfe9f283b334d266fc1ef7eaa2df92c3206247998a212f811acd0c350202e7",
          "sha256": "67bfe9f283b334d266fc1ef7eaa2df92c3206247998a212f811acd0c350202e7"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/nickel/blobs/sha256:53298e2707cc986e6e443aec7b3ddda0d338270764de287b2745dff29eb17f79",
          "sha256": "53298e2707cc986e6e443aec7b3ddda0d338270764de287b2745dff29eb17f79"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/nickel/blobs/sha256:e4fe88a0b96556b6441986344140f9b9038cc25e0ffa8db26f8c6f3e7742cbe8",
          "sha256": "e4fe88a0b96556b6441986344140f9b9038cc25e0ffa8db26f8c6f3e7742cbe8"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/nickel.rb",
  "ruby_source_checksum": {
    "sha256": "7620bd756cb0188618b511e03f2973a70298d8a38ee8af99af9d7c38872d644e"
  },
  "date_added": "2022-03-20T21:34:13+00:00",
  "readme": "# Nickel\n\n[![Continuous integration](https://github.com/tweag/nickel/workflows/Continuous%20integration/badge.svg)](https://github.com/tweag/nickel/actions?query=branch%3Amaster)\n[![Website](https://img.shields.io/website-up-down-green-red/http/cv.lbesson.qc.to.svg)](https://nickel-lang.org)\n\nNickel is the cheap configuration language.\n\nIts purpose is to automate the generation of static configuration files - think\nJSON, YAML, XML, or your favorite data representation language - that are then\nfed to another system. It is designed to have a simple, well-understood core: it\nis in essence JSON with functions.\n\nNickel's salient traits are:\n\n- **Lightweight**: Nickel is easy to embed. An interpreter should be simple to\n    implement. The reference interpreter can be called from many programming\n    languages.\n- **Composable code**: the basic building blocks for computing are functions.\n    They are first-class citizens, which can be passed around, called and\n    composed.\n- **Composable data**: the basic building blocks for data are records\n    (called *objects* in JSON). In Nickel, records can be merged at will,\n    including associated metadata (documentation, default values, type\n    contracts, etc).\n- **Typed, but only when it helps**: static types improve code quality, serve as\n    documentation and eliminate bugs early. But application-specific\n    self-contained code will always evaluate to the same value, so type errors\n    will show up at runtime anyway. Some JSON is hard to type. There, types are\n    only a burden. Whereas reusable code - that is, *functions* - is evaluated\n    on potentially infinitely many different inputs, and is impossible to test\n    exhaustively. There, types are precious. Nickel has types, but you get to\n    choose when you want it or not, and it handles safely the interaction between\n    the typed and the untyped world.\n- **Design by contract**: complementary to the type system, contracts are\n    a principled approach to checking assertions. The interpreter automatically\n    inserts assertions at the boundary between typed and untyped code. Nickel\n    lets users add arbitrary assertions of their own and easily understand why\n    when assertions fail.\n\nThe motto guiding Nickel's design is:\n> Great defaults, design for extensibility\n\nThere should be a standard, clear path for common things. There should be no\narbitrary restrictions that limit what you can do you the one day you need to go\nbeyond.\n\n## Use cases\n\nNickel is a good fit in any situation where you need to generate a complex\nconfiguration, be it for a single app, a machine, whole infrastructure, or a\nbuild system.\n\nThe motivating use cases are in particular:\n\n- The [Nix package manager](https://nixos.org/): Nix is a declarative package\n    manager using its own language for specifying packages. Nickel is an\n    evolution of the Nix language, while trying to overcome some of its\n    limitations.\n- Infrastructure as code: infrastructure is becoming increasingly complex,\n    requiring a rigorous approach to deployment, modification and configuration.\n    This is where a declarative approach also shines, as adopted by\n    [Terraform](https://www.terraform.io/),\n    [NixOps](https://github.com/NixOS/nixops) or\n    [Kubernetes](https://kubernetes.io/), all requiring potentially complex\n    generation of configuration.\n- Build systems: build systems (like [Bazel](https://bazel.build/)) need\n    a specification of the dependency graph.\n\nMost aforementioned projects have their own bespoke configuration language. See\n[Comparison](#comparison). In\ngeneral, application-specific languages might suffer from feature creep, lack of\nabstractions or just feel ad hoc. Nickel buys you more for less.\n\n## The Nickel ecosystem\n\nRelated projects that are part of the Nickel ecosystem:\n\n- [Terraform-Nickel](https://github.com/tweag/tf-ncl): write Terraform\n    configuration with Nickel\n- [Nickel-Nix](https://github.com/nickel-lang/nickel-nix) (name subject to\n    change): batteries included environments with Nickel inside\n- [json-schema-to-nickel](https://github.com/nickel-lang/json-schema-to-nickel):\n    generate Nickel contracts from JSON schema specifications.\n- [rules_nickel](https://github.com/nickel-lang/rules_nickel): generate\n    configuration files using Nickel during a Bazel build\n- The [nickel-lang](https://github.com/nickel-lang) organization hosts various\n    smaller projects, including a tree-sitter grammar definition for Nickel and\n    editor plugins.\n\n## Getting started\n\nPlease follow the getting started guide for Nickel users on the [nickel-lang\nwebsite](https://nickel-lang.org/getting-started). The instructions below are\neither reproduced for this document to be self-contained or because\nthey are aimed toward hacking on the Nickel interpreter itself (e.g. building\nthe `nickel-lang-core` crate documentation).\n\n### Run\n\n1. Get a Nickel binary:\n   - With [flake-enabled](https://nixos.wiki/wiki/Flakes) Nix, run\n     Nickel directly with `nix run github:tweag/nickel`. You can use [our binary\n     cache](https://tweag-nickel.cachix.org/) to prevent rebuilding a lot of\n     packages. Pass arguments to Nickel with an extra `--` as in `nix run\n     github:tweag/nickel -- repl`,\n   - Again with flake-enabled Nix, you can install Nickel in your profile with\n     `nix profile add github:tweag/nickel`. The `nickel` command is then in your\n     `$PATH` and is available anywhere.\n   - If you're running macOS you can use Homebrew to install the Nickel binary\n     with `brew install nickel`.\n   - Without Nix, you can use `cargo run --bin nickel` after [building](#build),\n     passing arguments with an extra `--` as in\n     `cargo run --bin nickel -- -f program.ncl`.\n\n2. Run your first program:\n\n    ```console\n    $ nickel <<< 'let x = 2 in x + x'\n    4\n    ```\n\n    Or load it from a file:\n\n    ```console\n    $ echo 'let s = \"world\" in \"Hello, \" ++ s' > program.ncl\n    $ nickel -f program.ncl\n    \"Hello, world\"\n    ```\n\n3. Start a REPL:\n\n    ```console\n    $ nickel repl\n    nickel> let x = 2 in x + x\n    4\n\n    nickel>\n    ```\n\n    Use `:help` for a list of available commands.\n4. Export your configuration to JSON, YAML or TOML:\n\n  ```console\n  $ nickel export --format json <<< '{foo = \"Hello, world!\"}'\n  {\n    \"foo\": \"Hello, world!\"\n  }\n  ```\n\nUse `nickel help` for a list of subcommands, and `nickel help <subcommand>`\nfor help about a specific subcommand.\n\n#### Editor Setup\n\nNickel has syntax highlighting plugins for Vim/Neovim, and VSCode. In-editor\ndiagnostics, type hints, and auto-completion are provided by the Nickel Language\nServer. Please follow\n[the LSP guide](https://github.com/tweag/nickel/tree/master/lsp) to set up syntax\nhighlighting and NLS.\n\n#### Formatting\n\nTo format a Nickel source file, use `nickel format` (`-i` is short for\n`--in-place`):\n\n```console\nnickel format -i -f my-config.ncl\n```\n\nNickel uses [Topiary](https://github.com/tweag/topiary/) to format Nickel code\nunder the hood.\n\nPlease follow the Formatting Capabilities section of the [LSP\ndocumentation](https://github.com/tweag/nickel/tree/master/lsp) to know how to\nhook up the Nickel LSP and Topiary in order to enable formatting inside your\ncode editor.\n\n### Build\n\n[rust-guide]: https://doc.rust-lang.org/cargo/getting-started/installation.html\n\n1. Download build dependencies:\n\n   - **With Nix**: If you have [Nix](https://nixos.org/nix) installed:\n\n     ```console\n     nix-shell\n     nix develop # if you use Nix Flakes\n     ```\n\n     You will be dropped in a shell, ready to build. You can use\n     [our binary cache](https://tweag-nickel.cachix.org/) to prevent rebuilding\n     a lot of packages.\n   - **Without Nix**: otherwise, follow [this guide][rust-guide] to install Rust\n     and Cargo first.\n\n1. Build Nickel:\n\n   ```console\n   cargo build --release\n   ```\n\n   And voilà! Generated files are placed in `target/release`.\n\n### Test\n\nRun tests with\n\n```console\ncargo test\n```\n\n### Documentation\n\nThe user manual is available [on the nickel-lang.org\nwebsite](https://nickel-lang.org/user-manual/introduction), and in this\nrepository as a collection of Markdown files in `doc/manual`.\n\nTo get the documentation of the `nickel-lang` codebase itself:\n\n1. Build the doc:\n\n    ```console\n    cargo doc --no-deps\n    ```\n\n2. Open the file `target/doc/nickel/index.html` in your browser.\n\n### Examples\n\nYou can find examples in the [`./examples`](./examples) directory.\n\n## Current state and roadmap\n\nNickel is currently released in version `1.0`. We expect the core design of the\nlanguage to be stable and the language to be useful for real-world applications.\nThe next steps we plan to work on are:\n\n- Nix integration: being able to seamlessly use Nickel to write packages and\n  shells ([nickel-nix](https://github.com/nickel-lang/nickel-nix))\n- Custom merge functions (second part of the\n  [overriding\n  proposal](https://github.com/tweag/nickel/blob/9fd6e436c0db8f101d4eb26cf97c4993357a7c38/rfcs/001-overriding.md))\n- Incremental evaluation: design an incremental evaluation model and a caching\n  mechanism in order to perform fast re-evaluation upon small changes to a\n  configuration.\n- Performance improvements\n\n## Comparison\n\n- [CUE](https://cuelang.org/) is a configuration language with a focus on data\n    validation. It introduces a new constraint system backed by a solid theory\n    which ensures strong guarantees about your code. It allows for very elegant\n    schema specifications. In return, the cost to pay is to abandon functions\n    and\n    [Turing-completeness](https://en.wikipedia.org/wiki/Turing_completeness).\n    Nickel's merge system is inspired by the one of CUE, even if since Nickel\n    does have general functions and is Turing-complete, they are necessarily\n    different.\n- [Nix](https://nixos.org/): The Nix language, or *Nix expressions*, is one of\n    the main inspirations for Nickel. It is a very simple yet powerful lazy\n    functional language. We strive to retain this simplicity, while adding\n    typing capabilities, modularity, and detaching the language from the Nix\n    package manager.\n- [Dhall](https://dhall-lang.org/) is a statically typed configuration language.\n    It is also inspired by Nix, to which it adds a powerful static type system.\n    However, this forces the programmer to annotate all of their code with types.\n- [Jsonnet](https://jsonnet.org/) is another language which could be dubbed as\n    \"JSON with functions\" (and others things as well). It is a lazy functional\n    language with object-oriented features, among which inheritance is similar\n    to Nickel's merge system. One big difference with Nickel is the absence of\n    typing.\n- [Pulumi](https://www.pulumi.com/) is not a language in itself, but a cloud\n    tool (like Terraform) where you can use your preferred language for\n    describing your infrastructure. This is a different approach to the problem,\n    with different trade-offs.\n- [Starlark](https://docs.bazel.build/versions/master/skylark/language.html) is\n    the language of [Bazel](https://bazel.build/), which is a dialect of\n    [Python](https://www.python.org/). It does not have types and recursion is\n    forbidden, making it not Turing-complete.\n\nSee [RATIONALE.md](./RATIONALE.md) for the design rationale and a more detailed\ncomparison with these languages.\n\n### Comparison with other configuration languages\n<!-- Intentionally duplicated in `RATIONALE.md`, please update the other one for\nany change done here -->\n\n| Language | Typing                        | Recursion  | Evaluation | Side-effects                                     |\n|----------|-------------------------------|------------|------------|--------------------------------------------------|\n| Nickel   | Gradual (dynamic + static)    | Yes        | Lazy       | Yes (constrained, planned)                       |\n| Starlark | Dynamic                       | No         | Strict     | No                                               |\n| Nix      | Dynamic                       | Yes        | Lazy       | Predefined and specialized to package management |\n| Dhall    | Static (requires annotations) | Restricted | Lazy       | No                                               |\n| CUE      | Static (everything is a type) | No         | Lazy       | No, but allowed in the separated scripting layer |\n| Jsonnet  | Dynamic                       | Yes        | Lazy       | No                                               |\n| JSON     | None                          | No         | Strict     | No                                               |\n| YAML     | None                          | No         | N/A        | No                                               |\n| TOML     | None                          | No         | N/A        | No                                               |"
}
