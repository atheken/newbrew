{
  "name": "mk-configure",
  "full_name": "mk-configure",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Lightweight replacement for GNU autotools",
  "license": "BSD-2-Clause and BSD-3-Clause and MIT and MIT-CMU",
  "homepage": "https://github.com/cheusov/mk-configure",
  "versions": {
    "stable": "0.38.2",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://downloads.sourceforge.net/project/mk-configure/mk-configure/mk-configure-0.38.2/mk-configure-0.38.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "1e705e11047515aea67327ba67010affcbb77f2f0736eb84a5080249f4ab483e"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mk-configure/blobs/sha256:03ff8ccca0eb63cc9f2ab9245887caabe11a9ef50f47133a4c726a39d6ceb88c",
          "sha256": "03ff8ccca0eb63cc9f2ab9245887caabe11a9ef50f47133a4c726a39d6ceb88c"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mk-configure/blobs/sha256:03ff8ccca0eb63cc9f2ab9245887caabe11a9ef50f47133a4c726a39d6ceb88c",
          "sha256": "03ff8ccca0eb63cc9f2ab9245887caabe11a9ef50f47133a4c726a39d6ceb88c"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mk-configure/blobs/sha256:9d45e9deae52d90c2fc31e44ead23819539b7f9837e3ad6958758978de8ee252",
          "sha256": "9d45e9deae52d90c2fc31e44ead23819539b7f9837e3ad6958758978de8ee252"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mk-configure/blobs/sha256:ec1844ffc84ab220c5eeed4faf0deed8a1d7af581c300e07cc46afff88de6a8d",
          "sha256": "ec1844ffc84ab220c5eeed4faf0deed8a1d7af581c300e07cc46afff88de6a8d"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mk-configure/blobs/sha256:ec1844ffc84ab220c5eeed4faf0deed8a1d7af581c300e07cc46afff88de6a8d",
          "sha256": "ec1844ffc84ab220c5eeed4faf0deed8a1d7af581c300e07cc46afff88de6a8d"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mk-configure/blobs/sha256:bc3013691ee8d1abba074ceee462089b99a3c6dbf149801595cf00f6d6c43983",
          "sha256": "bc3013691ee8d1abba074ceee462089b99a3c6dbf149801595cf00f6d6c43983"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mk-configure/blobs/sha256:e6d967eb5e56d1aeebe357d1bdba6872bb6eeed45e182c5a1ac0aa0e40248d5c",
          "sha256": "e6d967eb5e56d1aeebe357d1bdba6872bb6eeed45e182c5a1ac0aa0e40248d5c"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mk-configure/blobs/sha256:344d246a3812813f1738f186a4b988c46c8e0f2a74430f68e4040cbd99b48c08",
          "sha256": "344d246a3812813f1738f186a4b988c46c8e0f2a74430f68e4040cbd99b48c08"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "bmake",
    "makedepend"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/mk-configure.rb",
  "ruby_source_checksum": {
    "sha256": "15d0a64eca7853ed3696e6d1efb9954320406f2a339fda8a2fa840b418b65529"
  },
  "date_added": "2018-05-27T12:58:09-07:00",
  "readme": "[toc]\n\nInstallation\n------------\n\nSee [doc/INSTALL.md](https://github.com/cheusov/mk-configure/blob/master/doc/INSTALL.md)\nfile for build and installation instructions.\n\nWhat is mk-configure?\n---------------------\n\n**mk-configure** is a lightweight replacement for *GNU autotools*,\nwritten in and for bmake (portable version of **NetBSD** make) and\n**UNIX** tools (_shell_, _awk_ etc.).  **FreeBSD** and **OpenBSD** make\nare not good. They are incompatible with _NetBSD bmake_. _GNU\nmake_ is not good too.\n\n**mk-configure** provides a number of include files (.mk files) written in\nbmake and a number of standalone programs that should be installed to\nuser's host for building a software.\n\n**mk-configure** features:\n\n - An easy way for building standalone executables, static and shared\n   libraries written in _C_, _C++_ and _Objective\n   C_; _.cat_ and _.html_ files from man pages; _.info_ pages from _texinfo_\n   sources etc. _LEX_, _YACC_ are also supported. Support for other\n   languages are planned.\n\n - Installing and uninstalling executables, libraries, scripts,\n   documentation files and others. DESTDIR support is also provided.\n\n - Integrated autoconf-like support for finding #include files,\n   libraries and function implementation, function definitions,\n   defines, types, struct members etc.\n\n - A number of built-in checks for, e.g., system endianness, _GNU bison_\n   or _GNU flex_ programs and many others.\n\n - Automatic dependency analysis built-in for C and C++.\n\n - Extensibility by writing bmake include files.\n\n - Support for regression tests (see *mkc.minitest.mk* for the sample).\n\n - mk-configure is small and easy. It is definitely much easier for\n   use than _GNU autotools_, many people think that it is also easier\n   than other competing projects like _CMake_, _scons_ and others.\n\nProject goals\n-------------\n\n - No code generation! Library approach is used instead.  Instead of\n   generating tons of unreadable blobs **mk-configure** uses bmake include\n   files (bmake's library) and external executables to make its job.\n   Developers should distribute source code only, not blobs.\n\n - Single top level command for building a program (**mkcmake**).\n   Instead of running and learning\n   autoconf/automake/aclocal/autoreconf/config.status/autoheader and\n   many other tools, and the way they interact with each other, you\n   should learn only ONE tool, bmake (**mkcmake** is a trivial wrapper\n   over bmake).\n\n - No bloat. At this time **mk-configure** consists of far less than 10000\n   lines of code (excluding examples and regression tests). Compare\n   this number with autotools sources and you'll see a difference.\n\n - Simplicity for both developers and users. The only file developers\n   should be aware of during development is 'Makefile'.  Users just\n   run\n\n        $ mkcmake help\n        $ env <variables> mkcmake all <options>\n\n   to build a software. The\n   same for developers -- for building a software, just run **mkcmake**.\n\n - Portability. At the moment the following systems and compilers are\n   supported:\n\n    - **NetBSD**. Tested on NetBSD-5.0/x86 and NetBSD-2.0/alpha and later\n      versions with gcc, pcc and clang.\n\n    - **FreeBSD**. Tested on FreeBSD-6.2/x86, 7.1/spark64, 7.1/x86 and\n      later versions with gcc and clang.\n\n    - **OpenBSD**. Tested on OpenBSD-3.8/x86, 4.5/x86 and later versions\n      with gcc.\n\n    - **DragonFlyBSD**. Tested on DragonFly-2.4.1-RELEASE/x86 and later\n      versions with gcc.\n\n    - **MirOS BSD**. Tested on MirBSD-10/x86 and later versions with gcc.\n\n    - **Linux**. Tested on Linux/{x86,x86-64,ppc,armv7,aarch64} with glibc/musl, gcc,\n      icc and SunStudio compilers.\n\n    - **Solaris**. Tested on Solaris-{10,11}/{spark64,x86}\n      with SunC-5.11, SunC-5.15 and gcc.\n\n    - **Darwin** (macOS). Tested on Darwin-8.11.0/ppc (MacOS-X Tiger)\n      and later version with native gcc and clang.\n\n    - **Interix**. Tested on Interix-3.5/x86 with gcc.\n\n    - **QNX**. Tested on QNX-6.3/x86 with gcc.\n\n    - **OSF1**. Tested on Tru64-5.1/alpha with gcc and DEC C compiler.\n\n    - **HP-UX**. Tested on HP-UX-11.0/hppa with gcc.\n\n    - Partial support for **AIX** and their native\n      compilers. Support is not complete because I have no access to\n      \"big iron\" :-( .\n\n    If you don't see your favorite system/compiler here and want to\n    help me to improve **mk-configure**, feel free to contact me.\n\n - Declarative approach in writing Makefiles. Instead of specifying\n   how to build your software, you should specify source files,\n   files to build and (optionally) build options, e.g. LDCOMPILER=yes\n   meaning that ${CC} or ${CXX} compiler should be used as a linker\n   instead of ${LD}. Small/medium size projects may have no rules in\n   Makefiles at all. Most useful things are already implemented in\n   **mk-configure** Mk files including targets\n   \"all\", \"install\", \"uninstall\" as well as support for building the shared\n   libraries, installation to ${DESTDIR} etc. Usually, Makefile contain\n   only variable assignments, .include-s and .if/.for directives.\n\n - No heavy dependencies like Python or Perl.\n\nHow to use mk-configure?\n------------------------\n\nDevelopers:\n - Install **mk-configure** to your system.\n - Run **mkcmake** or **mkcmake all** for building your program.\n   You don't need autoconf/autoheader/automake/aclocal/config.guess/\n   /autoreconf/config.status/config.sub and blah-blah-blah\n\nUsers and software packagers:\n - Install **mk-configure** to your system.\n - Run **mkcmake** for building a software and pass to it\n   the building options, e.g.\n\n        $ export CC=pcc\n        $ export CFLAGS='-O0 -g'\n        $ export PREFIX=$HOME/local\n        $ mkcmake all install\n\nWhat mk-configure consists of?\n------------------------------\n\n- *mkc.{files,lib,prog,subprj,subdir}.mk* files.\n\n    These include files are responsible for building, installing and\n    uninstalling applications, static and shared libraries, scripts,\n    text files, man and info pages, hard and soft links etc...\n\n    NOTE FOR *BSD USERS: unlike well known Mk files from \\*BSD\n    systems *mkc.\\*.mk* files provide the following features (this list\n    is not complete, see *mk-configure.7* for details).\n\n    + PREFIX, BINDIR, MANDIR etc. variables default to directories\n    under /usr/local.  By default the same variables in *bsd.\\*.mk*\n    files are set to directories under /usr. The reason is that they\n    are used mainly for maintaining \\*BSD's own code\n    while **mk-configure** is targeted to all UNIX-like systems, not only \\*BSD.\n\n    + BINOWN, BINGRP, MANOWN etc. variables are set to 'id -u' and\n    'id -g' if **mkcmake(1)** is run under an unprivileged user.\n    By default *bsd.\\*.mk* use root:wheel by default.\n\n    + A target 'install' installs the target directories if needed.\n\n    + A target 'uninstall' removes all installed files from\n    destination directories. *bsd.\\*.mk* files do not provide\n    this functionality.\n\n    + A target 'test' of *mkc.subdir.mk* (by default) runs a \"test\"\n    target for each subdirectory listed in SUBDIR. Other *mkc.\\*.mk*\n    files provide \"test\" target too but does nothing by default.\n    If you want to test your application, define your own \"test\"\n    target in subprojects's Makefile.\n\n    + \"cleandir\" target removes all temporary\n    files and **mk-configure**'s cache files.\n\n    + support for texinfo/info files. There is no need to .include\n        a special include files such as _bsd.info.mk_ file.\n\n    + *mkc.subprj.mk* is a powerful replacement\n        for traditional _bsd.subdir.mk_.\n\n    + Tons of other additions and improvements.\n\n- _mkc.intexts.mk_. Given a list of files in INFILES or INSCRIPTS *mkc.intexts.mk*\n  generates them from appropriate *.in file replacing @prefix@,\n  @sysconfdir@, @libdir@, @bindir@, @sbindir@, @datadir@ etc. with\n  real ${PREFIX}, ${SYSCONFDIR} etc. See examples/ subdirectory for\n  the samples.\n\n- *mkc.configure.mk*. It is a replacement for _GNU autoconf_. Its\n  functionality is large enough to describe here.  In short, it allows\n  to check for presence of header files, function or variable\n  declarations, presence of function in a particular library, defines,\n  sizeof of data types and other useful things. Read the documentation\n  in *mk-configure.7* and see examples/ subdirectory for the samples of\n  use.\n\n- Standalone full-functional\n  **mkc\\_check\\_{funclib,header,sizeof,decl,prog,custom,compiler}** and\n  other programs that can be used without **mkcmake** and without _mkc.*.mk_\n  files.  Read appropriate man pages.\n\n- This list is not complete. Have a look at *mk-configure.7* for details.\n\nDocumentation\n-------------\n\n   - Subdirectory presentation/ contains a PDF file which demonstrates\n     some basic ideas and samples of use.\n\n   - In subdirectory examples/ you may find a lot of examples.\n\n   - Documentation for mk include files is in *mk-configure.7*).\n\n   - [doc/NOTES](https://github.com/cheusov/mk-configure/blob/master/doc/NOTES)\n   contains a number of useful recipes.\n\n   - Read the [doc/FAQ](https://github.com/cheusov/mk-configure/blob/master/doc/FAQ)\n   document. It may be helpful.\n\n   - Most of my [personal projects](https://github.com/cheusov) use **mk-configure**.\n     You can use them for learning.\n\n   - Plans are here [doc/TODO](https://github.com/cheusov/mk-configure/blob/master/doc/TODO).\n\nmk-configure binary packages\n----------------------------\n\nBinary packages for **mk-configure** are available in the following systems (this list may be incomplete):\n\n * NetBSD pkgsrc (devel/mk-configure).\n \n * FreeBSD ports (devel/mk-configure)\n \n * Debian/Ubuntu Linux\n \n * AltLinux\n \n * Arch Linux\n \n * OpenSuSE Linux\n\nFeedback\n--------\n\nPlease register bug reports and pull requests here\n[mk-configure home](http://github.com/cheusov/mk-configure)\n\nFeel free to notify me about spelling errors in the documentation.\n\n-------------------------------------------------------------------------"
}
