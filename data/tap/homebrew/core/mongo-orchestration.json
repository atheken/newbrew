{
  "name": "mongo-orchestration",
  "full_name": "mongo-orchestration",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "REST API to manage MongoDB configurations on a single host",
  "license": "Apache-2.0",
  "homepage": "https://github.com/10gen/mongo-orchestration",
  "versions": {
    "stable": "0.8.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://files.pythonhosted.org/packages/80/bc/46ec328dcb9abcc8e9956c02378bfd4bfb053cb94fcf40b62b75f900d147/mongo-orchestration-0.8.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "9cb17a4f1a19d578a04c34ef51f4d5bc2a1c768f4968948792f330644c9398f6"
    },
    "head": {
      "url": "https://github.com/10gen/mongo-orchestration.git",
      "branch": "master"
    }
  },
  "revision": 1,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mongo-orchestration/blobs/sha256:2e682f686d8913ffd020dca714292d862ec60546d8ea558a20cbe6dcb3ece18b",
          "sha256": "2e682f686d8913ffd020dca714292d862ec60546d8ea558a20cbe6dcb3ece18b"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mongo-orchestration/blobs/sha256:324717f8fdc3cf7c599f5d83fcc282c1a9db3aa398aba4524ee96daaa6348023",
          "sha256": "324717f8fdc3cf7c599f5d83fcc282c1a9db3aa398aba4524ee96daaa6348023"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mongo-orchestration/blobs/sha256:1197e6420cea0144959e21946b6f076de7efa2edfe9cdcb60940cf18a17bbbbd",
          "sha256": "1197e6420cea0144959e21946b6f076de7efa2edfe9cdcb60940cf18a17bbbbd"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mongo-orchestration/blobs/sha256:f05d185ecb16dc64963aae765e14ba8852ec35f207ed957fb835733b5ab3e550",
          "sha256": "f05d185ecb16dc64963aae765e14ba8852ec35f207ed957fb835733b5ab3e550"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mongo-orchestration/blobs/sha256:1d470eaa25c039a31e1885aac5bc728367bffd8fc214d75868c8b2a769495868",
          "sha256": "1d470eaa25c039a31e1885aac5bc728367bffd8fc214d75868c8b2a769495868"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mongo-orchestration/blobs/sha256:37e4fe27b430630871f5556c337cda29dd0ef147c0613467d99439ba9934a845",
          "sha256": "37e4fe27b430630871f5556c337cda29dd0ef147c0613467d99439ba9934a845"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mongo-orchestration/blobs/sha256:0010e31ffc78f978e04b684b021504691e2900d453866e583cc7fa8b664fa5e8",
          "sha256": "0010e31ffc78f978e04b684b021504691e2900d453866e583cc7fa8b664fa5e8"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "python@3.11",
    "six"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": {
    "run": [
      "/home/linuxbrew/.linuxbrew/opt/mongo-orchestration/bin/mongo-orchestration",
      "-b",
      "127.0.0.1",
      "-p",
      "8889",
      "--no-fork",
      "start"
    ],
    "run_type": "immediate",
    "require_root": true
  },
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/mongo-orchestration.rb",
  "ruby_source_checksum": {
    "sha256": "ce63b6eb81c5455e86216418537c2e430ead24377e93d8aaa9c4f1fe9451ea3e"
  },
  "date_added": "2016-02-25T08:11:27+00:00",
  "readme": "-------------------\nMongo Orchestration\n-------------------\n\nSee the `wiki <https://github.com/10gen/mongo-orchestration/wiki>`__\nfor documentation.\n\nMongo Orchestration is an HTTP server that provides a REST API for\ncreating and managing MongoDB configurations on a single host.\n\n**THIS PROJECT IS FOR TESTING OF MONGODB DRIVERS.**\n\nFeatures\n--------\n\n-  Start and stop mongod servers, replica sets, and sharded clusters on the host running mongo-orchestration.\n-  Add and remove replica set members.\n-  Add and remove shards and mongos routers.\n-  Reset replica sets and clusters to restart all members that were\n   stopped.\n-  Freeze secondary members of replica sets.\n-  Retrieve information about MongoDB resources.\n-  Interaction all through REST interface.\n-  Launch simple local servers using ``mongo-launch`` CLI tool.\n\nRequires\n--------\n\n-  `Python >=3.7 <http://www.python.org/download/>`__\n-  `bottle>=0.12.7 <https://pypi.python.org/pypi/bottle>`__\n-  `pymongo>=3.0.2,<4 <https://pypi.python.org/pypi/pymongo>`__\n-  `cheroot>=5.11 <https://pypi.python.org/pypi/cheroot/>`__\n\nInstallation\n------------\n\nThe easiest way to install Mongo Orchestration is with `pip <https://pypi.python.org/pypi/pip>`__:\n\n::\n\n    pip install mongo-orchestration\n\nYou can also install the development version of Mongo Orchestration\nmanually:\n\n::\n\n    git clone https://github.com/10gen/mongo-orchestration.git\n    cd mongo-orchestration\n    pip install .\n\nCloning the `repository <https://github.com/10gen/mongo-orchestration>`__ this way will also give you access to the tests for Mongo Orchestration as well as the ``mo`` script. Note that you may\nhave to run the above commands with ``sudo``, depending on where you're\ninstalling Mongo Orchestration and what privileges you have.\nInstallation will place a ``mongo-orchestration`` script on your path.\n\nUsage\n-----\n\n::\n\n    mongo-orchestration [-h] [-f CONFIG] [-e ENV] [--no-fork] [-b BIND IP=\"localhost\"] [-p PORT]\n                        [-s {auto,cheroot,wsgiref}] [--socket-timeout-ms MILLIS]\n                        [--pidfile PIDFILE] [--enable-majority-read-concern] {start,stop,restart}\n\n\nArguments:\n\n-  **-h** - show help\n-  **-f, --config** - path to config file\n-  **-e, --env** - default release to use, as specified in the config\n   file\n-  **--no-fork** - run server in foreground\n-  **-b, --bind** - host on which Mongo Orchestration and subordinate mongo processes should listen for requests. Defaults to \"localhost\".\n-  **-s, --server** - HTTP backend to use: one of `auto`, `cheroot`, or `wsgiref`. `auto`\n   configures bottle to automatically choose an available backend.\n-  **-p** - port number (8889 by default)\n-  **--socket-timeout-ms** - socket timeout when connecting to MongoDB servers\n-  **--pidfile** - location where mongo-orchestration should place its pid file\n-  **--enable-majority-read-concern** - enable \"majority\" read concern on server versions that support it.\n-  **start/stop/restart**: start, stop, or restart the server,\n   respectively\n\nIn addition, Mongo Orchestration can be influenced by the\n``MONGO_ORCHESTRATION_HOME`` environment variable, which informs the\nserver where to find the \"configurations\" directory for presets as well\nas where to put the log and pid files.\n\nExamples\n~~~~~~~~\n\n``mongo-orchestration start``\n\nStarts Mongo Orchestration as service on port 8889.\n\n``mongo-orchestration stop``\n\nStop the server.\n\n``mongo-orchestration -f mongo-orchestration.config -e 30-release -p 8888 --no-fork start``\n\nStarts Mongo Orchestration on port 8888 using ``30-release`` defined in\n``mongo-orchestration.config``. Stops with *Ctrl+C*.\n\nIf you have installed mongo-orchestration but you're still getting\n``command not found: mongo-orchestration`` this means that the script was\ninstalled to a directory that is not on your ``PATH``. As an alternative use:\n\n``python -m mongo_orchestration.server start``\n\nConfiguration File\n~~~~~~~~~~~~~~~~~~\n\nMongo Orchestration may be given a JSON configuration file with the\n``--config`` option specifying where to find MongoDB binaries. See\n`mongo-orchestration.config <https://github.com/10gen/mongo-orchestration/blob/master/mongo-orchestration.config>`__\nfor an example. When no configuration file is provided, Mongo\nOrchestration uses whatever binaries are on the user's PATH.\n\nPredefined Configurations\n-------------------------\n\nMongo Orchestration has a set of predefined\n`configurations <https://github.com/10gen/mongo-orchestration/tree/master/mongo_orchestration/configurations>`__\nthat can be used to start, restart, or stop MongoDB processes. You can\nuse a tool like ``curl`` to send these files directly to the Mongo\nOrchestration server, or use the ``mo`` script in the ``scripts``\ndirectory (in the `repository <https://github.com/10gen/mongo-orchestration>`__ only). Some examples:\n\n-  Start a single node without SSL or auth:\n\n   ::\n\n       mo configurations/servers/clean.json start\n\n-  Get the status of a single node without SSL or auth:\n\n   ::\n\n       mo configurations/servers/clean.json status\n\n-  Stop a single node without SSL or auth:\n\n   ::\n\n       mo configurations/servers/clean.json stop\n\n-  Start a replica set with ssl and auth:\n\n   ::\n\n       mo configurations/replica_sets/ssl_auth.json start\n\n-  Use ``curl`` to create a basic sharded cluster with the id\n   \"myCluster\":\n\n   ::\n\n       curl -XPUT http://localhost:8889/v1/sharded_clusters/myCluster \\\n                  -d@configurations/sharded_clusters/basic.json\n\nNote that in order to run the ``mo`` script, you need to be in the same\ndirectory as \"configurations\".\n\n**Helpful hint**: You can prettify JSON responses from the server by\npiping the response into ``python -m json.tool``, e.g.:\n\n::\n\n    $ curl http://localhost:8889/v1/servers/myServer | python -m json.tool\n\n    {\n        \"id\": \"myServer\",\n        \"mongodb_uri\": \"mongodb://localhost:1025\",\n        \"orchestration\": \"servers\",\n        \"procInfo\": {\n            \"alive\": true,\n            \"name\": \"mongod\",\n            \"optfile\": \"/var/folders/v9/spc2j6cx3db71l/T/mongo-KHUACD\",\n            \"params\": {\n                \"dbpath\": \"/var/folders/v9/spc2j6cx3db71l/T/mongo-vAgYaQ\",\n                \"ipv6\": true,\n                \"journal\": true,\n                \"logappend\": true,\n                \"oplogSize\": 100,\n                \"port\": 1025\n            },\n            \"pid\": 51320\n        },\n        // etc.\n    }\n\nMongo Launch\n------------\n\nThe ``mongo-launch`` CLI tool allows you to spin up servers locally\nwith minimal configuration.\n\n..\n\n    mongo-launch --help\n    Usage: launch.py [single|replica|shard] [ssl] [auth]\n\n..\n\n    mongo-orchestration start\n    mongo-launch replica ssl auth\n\nTests\n-----\n\nIn order to run the tests, you should first clone the `repository <https://github.com/10gen/mongo-orchestration>`__.\n\nRun all tests\n~~~~~~~~~~~~~\n\n``python -m unittest``\n\nRun a test module\n~~~~~~~~~~~~~~~~~\n\n``python -m unittest tests.test_servers``\n\nRun a single test case\n~~~~~~~~~~~~~~~~~~~~~~\n\n``python -m unittest tests.test_servers.ServerSSLTestCase``\n\nRun a single test method\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n``python -m unittest tests.test_servers.ServerSSLTestCase.test_ssl_auth``\n\nRun a single test example for debugging with verbose and immediate stdout output\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``python -m unittest -v tests.test_servers.ServerSSLTestCase``\n\nChangelog\n---------\n\nChanges in Version 0.8.0 (2023-05-16)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n- Add ``mongo-launch`` CLI tool.\n- Upgrade to PyMongo 4.x and set up GitHub Actions testing.\n- Remove support for managing MongoDB 3.4 or earlier servers.\n- Remove support for Python 3.5 or earlier.\n- Replaced dependency on CherryPy with cheroot. `-s auto` is the new default\n  and `-s cherrypy` is no longer supported.\n- Remove transactionLifetimeLimitSeconds default.\n\nChanges in Version 0.7.0 (2021-04-06)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n- Remove support for managing MongoDB 2.4 servers.\n- Add support for Python 3.8 and 3.9.\n- Add support for MongoDB 4.2 and 4.4.\n- Upgrade from pymongo 3.5.1 to 3.X latest. (#284).\n- Ensure createUser succeeds on all replica set members. (#282)\n- Create admin user with both SCRAM-SHA-256 and SCRAM-SHA-1. (#281)\n- Wait for mongo-orchestration server to fully terminate in \"stop\". (#276)\n- Allow starting clusters with enableTestCommands=0. (#269)\n- Decrease transactionLifetimeLimitSeconds on 4.2+ by default. (#267)\n- Increase maxTransactionLockRequestTimeoutMillis by default. (#270)\n- Reduce periodicNoopIntervalSecs for faster driver change stream testing. (#283)\n- Enable ztsd compression by default on 4.2+ (#263)\n\nChanges in Version 0.6.12 (2018-12-14)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n- Allow running the mongo-orchestration server over IPv6 localhost. (#237)\n- Increase default mongodb server logging verbosity. (#255)\n- Fixed a bug when shutting down clusters where mongo-orchestration would\n  hang forever if the server had already exited. (#253)"
}
