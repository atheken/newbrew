{
  "name": "google-authenticator-libpam",
  "full_name": "google-authenticator-libpam",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "PAM module for two-factor authentication",
  "license": "Apache-2.0",
  "homepage": "https://github.com/google/google-authenticator-libpam",
  "versions": {
    "stable": "1.09",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/google/google-authenticator-libpam/archive/1.09.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "ab1d7983413dc2f11de2efa903e5c326af8cb9ea37765dacb39949417f7cd037"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/google-authenticator-libpam/blobs/sha256:e481b47a941b3e2035b16ff10190b28de5aaeeb9d7f76ba03bbb778d31352cd6",
          "sha256": "e481b47a941b3e2035b16ff10190b28de5aaeeb9d7f76ba03bbb778d31352cd6"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/google-authenticator-libpam/blobs/sha256:c813753b6fa666210c3e03746dc85ba8f96b4f086b32e565eab286919c9bcdb2",
          "sha256": "c813753b6fa666210c3e03746dc85ba8f96b4f086b32e565eab286919c9bcdb2"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/google-authenticator-libpam/blobs/sha256:5fcc93296963e8ddabb631618dabdb3a09ca296a49c6f86165dbb76199007759",
          "sha256": "5fcc93296963e8ddabb631618dabdb3a09ca296a49c6f86165dbb76199007759"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/google-authenticator-libpam/blobs/sha256:d2a5423387b0cf36704fa1428a07e7e2be88ae542ff80e3c12e391fff0da05e7",
          "sha256": "d2a5423387b0cf36704fa1428a07e7e2be88ae542ff80e3c12e391fff0da05e7"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/google-authenticator-libpam/blobs/sha256:a8da4f8e9aa2b2126e3248f103b95734ea640d9c398d23b2ece251cac88c8eef",
          "sha256": "a8da4f8e9aa2b2126e3248f103b95734ea640d9c398d23b2ece251cac88c8eef"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/google-authenticator-libpam/blobs/sha256:8ce2c19632d8f25e92f0b161fc5f07527f1e6fca35cb1ec97516903d8b254887",
          "sha256": "8ce2c19632d8f25e92f0b161fc5f07527f1e6fca35cb1ec97516903d8b254887"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/google-authenticator-libpam/blobs/sha256:08220804780bdf668e9753dae17442d1c344d6d4f7637e441a9b38f913426f95",
          "sha256": "08220804780bdf668e9753dae17442d1c344d6d4f7637e441a9b38f913426f95"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "autoconf",
    "automake",
    "libtool"
  ],
  "dependencies": [
    "qrencode",
    "linux-pam"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": "Add 2-factor authentication for ssh:\n  echo \"auth required $HOMEBREW_PREFIX/opt/google-authenticator-libpam/lib/security/pam_google_authenticator.so\" \\\n  | sudo tee -a /etc/pam.d/sshd\n\nAdd 2-factor authentication for ssh allowing users to log in without OTP:\n  echo \"auth required $HOMEBREW_PREFIX/opt/google-authenticator-libpam/lib/security/pam_google_authenticator.so\" \\\n  \"nullok\" | sudo tee -a /etc/pam.d/sshd\n\n(Or just manually edit /etc/pam.d/sshd)\n",
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/google-authenticator-libpam.rb",
  "ruby_source_checksum": {
    "sha256": "b21fc8bef850f58c9cf02c07968eae655cce657455a21078f8a501172b5b8629"
  },
  "date_added": "2017-12-12T06:33:02-08:00",
  "readme": "# Google Authenticator PAM module\n\nExample PAM module demonstrating two-factor authentication for logging\ninto servers via SSH, OpenVPN, etcâ€¦\n\nThis project is not about logging in to Google, Facebook, or other\nTOTP/HOTP second factor systems, even if they recommend using the\nGoogle Authenticator apps.\n\nHMAC-Based One-time Password (HOTP) is specified in\n[RFC 4226](https://tools.ietf.org/html/rfc4226) and \nTime-based One-time Password (TOTP) is specified in\n[RFC 6238](https://tools.ietf.org/html/rfc6238).\n\n[![Build Status](https://travis-ci.org/google/google-authenticator-libpam.svg?branch=master)](https://travis-ci.org/google/google-authenticator-libpam)\n\n## Build & install\n```shell\n./bootstrap.sh\n./configure\nmake\nsudo make install\n```\n\nIf you don't have access to \"sudo\", you have to manually become \"root\" prior\nto calling \"make install\".\n\n## Setting up the PAM module for your system\n\nFor highest security, make sure that both password and OTP are being requested\neven if password and/or OTP are incorrect. This means that *at least* the first\nof `pam_unix.so` (or whatever other module is used to verify passwords) and\n`pam_google_authenticator.so` should be set as `required`, not `requisite`. It\nprobably can't hurt to have both be `required`, but it could depend on the rest\nof your PAM config.\n\nIf you use HOTP (counter based as opposed to time based) then add the option\n`no_increment_hotp` to make sure the counter isn't incremented for failed\nattempts.\n\nAdd this line to your PAM configuration file:\n\n`  auth required pam_google_authenticator.so no_increment_hotp`\n\n## Setting up a user\n\nRun the `google-authenticator` binary to create a new secret key in your home\ndirectory. These settings will be stored in `~/.google_authenticator`.\n\nIf your system supports the \"libqrencode\" library, you will be shown a QRCode\nthat you can scan using the Android \"Google Authenticator\" application.\n\nIf your system does not have this library, you can either follow the URL that\n`google-authenticator` outputs, or you have to manually enter the alphanumeric\nsecret key into the Android \"Google Authenticator\" application.\n\nIn either case, after you have added the key, click-and-hold until the context\nmenu shows. Then check that the key's verification value matches (this feature\nmight not be available in all builds of the Android application).\n\nEach time you log into your system, you will now be prompted for your TOTP code\n(time based one-time-password) or HOTP (counter-based), depending on options\ngiven to `google-authenticator`, after having entered your normal user id and\nyour normal UNIX account password.\n\nDuring the initial roll-out process, you might find that not all users have\ncreated a secret key yet. If you would still like them to be able to log\nin, you can pass the \"nullok\" option on the module's command line:\n\n`  auth required pam_google_authenticator.so nullok`\n\n## Encrypted home directories\n\nIf your system encrypts home directories until after your users entered their\npassword, you either have to re-arrange the entries in the PAM configuration\nfile to decrypt the home directory prior to asking for the OTP code, or\nyou have to store the secret file in a non-standard location:\n\n`  auth required pam_google_authenticator.so secret=/var/unencrypted-home/${USER}/.google_authenticator`\n\nwould be a possible choice. Make sure to set appropriate permissions. You also\nhave to tell your users to manually move their .google_authenticator file to\nthis location.\n\nIn addition to \"${USER}\", the `secret=` option also recognizes both \"~\" and\n`${HOME}` as short-hands for the user's home directory.\n\nWhen using the `secret=` option, you might want to also set the `user=`\noption. The latter forces the PAM module to switch to a dedicated hard-coded\nuser id prior to doing any file operations. When using the `user=` option, you\nmust not include \"~\" or \"${HOME}\" in the filename.\n\nThe `user=` option can also be useful if you want to authenticate users who do\nnot have traditional UNIX accounts on your system.\n\n## Module options\n\n### secret=/path/to/secret/file\n\nSee \"encrypted home directories\", above.\n\n### authtok_prompt=prompt\n\nOverrides default token prompt. If you want to include spaces in the prompt,\nwrap the whole argument in square brackets:\n\n`  auth required pam_google_authenticator.so [authtok_prompt=Your secret token: ]`\n\n### user=some-user\n\nForce the PAM module to switch to a hard-coded user id prior to doing any file\noperations. Commonly used with `secret=`.\n\n### no_strict_owner\n\nDANGEROUS OPTION!\n\nBy default the PAM module requires that the secrets file must be owned the user\nlogging in (or if `user=` is specified, owned by that user). This option\ndisables that check.\n\nThis option can be used to allow daemons not running as root to still handle\nconfiguration files not owned by that user, for example owned by the users\nthemselves.\n\n### allowed_perm=0nnn\n\nDANGEROUS OPTION!\n\nBy default, the PAM module requires the secrets file to be readable only by the\nowner of the file (mode 0600 by default). In situations where the module is used\nin a non-default configuration, an administrator may need more lenient file\npermissions, or a specific setting for their use case.\n\n### debug\n\nEnable more verbose log messages in syslog.\n\n### try_first_pass / use_first_pass / forward_pass\n\nSome PAM clients cannot prompt the user for more than just the password. To\nwork around this problem, this PAM module supports stacking. If you pass the\n`forward_pass` option, the `pam_google_authenticator` module queries the user\nfor both the system password and the verification code in a single prompt.\nIt then forwards the system password to the next PAM module, which will have\nto be configured with the `use_first_pass` option.\n\nIn turn, `pam_google_authenticator` module also supports both the standard\n`use_first_pass` and `try_first_pass` options. But most users would not need\nto set those on the `pam_google_authenticator`.\n\n### noskewadj\n\nIf you discover that your TOTP code never works, this is most commonly the\nresult of the clock on your server being different from the one on your Android\ndevice. The PAM module makes an attempt to compensate for time skew. You can\nteach it about the amount of skew that you are experiencing, by trying to log\nit three times in a row. Make sure you always wait 30s (but not longer), so\nthat you get three distinct TOTP codes.\n\nSome administrators prefer that time skew isn't adjusted automatically, as\ndoing so results in a slightly less secure system configuration. If you want\nto disable it, you can do so on the module command line:\n\n`  auth required pam_google_authenticator.so noskewadj`\n\n### no_increment_hotp\n\nDon't increment the counter for failed HOTP attempts.  Normally you should set\nthis so failed password attempts by an attacker without a token don't lock out\nthe authorized user.\n\n### nullok\n\nAllow users to log in without OTP, if they haven't set up OTP yet.\n\nPAM requires at least one `SUCCESS` answer from a module, and `nullok`\ncauses this module to say `IGNORE`. This means that if this option is\nused at least one other module must have said `SUCCESS`. One way to do\nthis is to add `auth required pam_permit.so` to the end of the PAM\nconfig.\n\n### echo_verification_code\n\nBy default, the PAM module does not echo the verification code when it is\nentered by the user. In some situations, the administrator might prefer a\ndifferent behavior. Pass the `echo_verification_code` option to the module\nin order to enable echoing.\n\nIf you would like verification codes that are counter based instead of\ntimebased, use the `google-authenticator` binary to generate a secret key in\nyour home directory with the proper option.  In this mode, clock skew is\nirrelevant and the window size option now applies to how many codes beyond the\ncurrent one that would be accepted, to reduce synchronization problems.\n\n### grace_period=seconds\n\nIf present and non-zero, provide a grace period during which a second\nverification code will not be requested. Try setting seconds to 86400\nto allow a full-day between requesting codes; or 3600 for an hour.\n\nThis works by adding an (IP address, timestamp) pair to the security\nfile after a successful one-time-password login;\nonly the last ten distinct IP addresses are tracked.\n\n### allow_readonly\n\nDANGEROUS OPTION!\n\nWith this option an attacker with ability to fill up the filesystem (flood\nserver with web requests, or if they have an account just fill the disk up) can\nforce a situation where one-time-passwords can be reused, defeating the purpose\nof \"one time\".\n\nBy default, if the `grace_period` option is defined the PAM module requires\nsome free space to store the IP address and timestamp of the last login.\nIt could prevent access if a server has no free space or in case of an\nupdate config file error. With the `allow_readonly` option you can ignore\nany errors which could occur during config file update."
}
