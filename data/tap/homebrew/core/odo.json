{
  "name": "odo",
  "full_name": "odo",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Atomic odometer for the command-line",
  "license": null,
  "homepage": "https://github.com/atomicobject/odo",
  "versions": {
    "stable": "0.2.2",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/atomicobject/odo/archive/v0.2.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "52133a6b92510d27dfe80c7e9f333b90af43d12f7ea0cf00718aee8a85824df5"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/odo/blobs/sha256:dd2fad51300e663cba126f61573c740198f66f1f8a505b8907605892ab1a0c48",
          "sha256": "dd2fad51300e663cba126f61573c740198f66f1f8a505b8907605892ab1a0c48"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/odo/blobs/sha256:6ddc4ba217251c6827fcd32c3fda2df9c294305dddc68d976072cef25c4dd768",
          "sha256": "6ddc4ba217251c6827fcd32c3fda2df9c294305dddc68d976072cef25c4dd768"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/odo/blobs/sha256:6606d59561c5bfb5f3b6835c16e64c6d6bf25ddc85658900a735657faaf0660f",
          "sha256": "6606d59561c5bfb5f3b6835c16e64c6d6bf25ddc85658900a735657faaf0660f"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/odo/blobs/sha256:8ee366eac5d82a7b60d33771791e9f44b01e648d77171b49793b5b54ae8d9ee8",
          "sha256": "8ee366eac5d82a7b60d33771791e9f44b01e648d77171b49793b5b54ae8d9ee8"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/odo/blobs/sha256:42158ce35f352cb5f7172a840cf7284ffe584b36d9c080e1836d0cb03aa17c68",
          "sha256": "42158ce35f352cb5f7172a840cf7284ffe584b36d9c080e1836d0cb03aa17c68"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/odo/blobs/sha256:366bcdb5f386521638f9f654b04a74e47364e1d59fa42ccca1d1f96b5a03a855",
          "sha256": "366bcdb5f386521638f9f654b04a74e47364e1d59fa42ccca1d1f96b5a03a855"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/odo/blobs/sha256:e5d74a7c45e3d3e8781b1b7d563733953cb15e6dffed8bcc525b063dbd5d7d69",
          "sha256": "e5d74a7c45e3d3e8781b1b7d563733953cb15e6dffed8bcc525b063dbd5d7d69"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/odo/blobs/sha256:f2bee7fa62ba66589fb75b3eb9b32c843e0bfc4f054521876fd891388765eec9",
          "sha256": "f2bee7fa62ba66589fb75b3eb9b32c843e0bfc4f054521876fd891388765eec9"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/odo/blobs/sha256:0bfc54617186d149c98593c74dfaa59a42b2edcc7df1855fd452594ec42f1476",
          "sha256": "0bfc54617186d149c98593c74dfaa59a42b2edcc7df1855fd452594ec42f1476"
        },
        "sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/odo/blobs/sha256:06af025b0a2df201a9b79944dcc4809708b305242622a90c92a9906a18adf2d6",
          "sha256": "06af025b0a2df201a9b79944dcc4809708b305242622a90c92a9906a18adf2d6"
        },
        "el_capitan": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/odo/blobs/sha256:979cc7131a35180614e848fa5fa12a72f734da7321358c89dfbd425fc8dff837",
          "sha256": "979cc7131a35180614e848fa5fa12a72f734da7321358c89dfbd425fc8dff837"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/odo/blobs/sha256:23644efe576abf9c3e3a469cf1baad05b3a3cde749998045b2992c290cf57884",
          "sha256": "23644efe576abf9c3e3a469cf1baad05b3a3cde749998045b2992c290cf57884"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [
    "odo-dev"
  ],
  "conflicts_with_reasons": [
    "odo-dev also ships 'odo' binary"
  ],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/odo.rb",
  "ruby_source_checksum": {
    "sha256": "d51dbbd93774917ab7eda8b3ae82b0dd9c4b4c24e3f33f359488f481b2312bbc"
  },
  "date_added": "2014-12-04T10:10:59+00:00",
  "readme": "odo - an atomic odometer for the command line\n\n# Atomic Odometer? What?\n\nodo atomically updates a count in a file, which will be created if not\npresent. The count is text-formatted (e.g. \"00012345\\n\"), and will be\naccurately incremented or reset even when multiple processes attempt to\nchange the counter at the same time. (It uses [memory mapping and atomic\ncompare-and-swap operations][1] to eliminate race conditions.)\n\n[1]: https://spin.atomicobject.com/2014/11/24/odo-atomic-counters-from-the-command-line/\n\n\n## Use cases\n\nThis could be used to track some intermittent event, like services being\nrestarted. (This was the [original inspiration][2].) Since the counter\nis just a number in a text file, it's easy to compose odo with other\ntools.\n\n[2]: https://twitter.com/nrr/status/529016501421240322\n\n\n## Dependencies\n\nodo depends on atomic compare-and-swap functionality (e.g.\n`__sync_bool_compare_and_swap`), which is available on most common\nplatforms. The build is currently tested on Linux, OpenBSD, and OSX on\nx86 and x86-64 systems, as well as on a Raspberry Pi (32-bit ARM).\n\nIf the gcc-specific feature defines in `types.h` are not recognized by\nyour C99 compiler, you may need to set `COUNTER_SIZE` in the Makefile\nyourself: `-DCOUNTER_SIZE=4` for 32-bit systems and `-DCOUNTER_SIZE=8`\nfor 64-bit systems.\n\n\n## Getting started\n\nTo build it, just type:\n\n    $ make\n\nTo install it:\n\n    $ make install\n\nTo run the tests:\n\n    $ make test\n\n\n## Example Use\n\nThis atomically increments a counter in /log/restarts. If the counter\nfile does not exist, it is created as 0 and incremented to 1.\n\n    $ odo /log/restarts\n    \nSame, but print the updated count:\n\n    $ odo -p /log/restarts\n    \nReset the count to 0:\n\n    $ odo -r /log/restarts\n    \nSet the count to a number (for testing notifications, perhaps):\n\n    $ odo -s 12345 /log/restarts\n\nPrint the current counter value without incrementing:\n\n    $ odo -c /log/restarts\n\nPrint usage / help:\n\n    $ odo -h\n\n\n## Note\n\nodo's atomicity is only as reliable as the underlying filesystem's.\nInconsistencies may still occur if used on a non-local filesystems\nsuch as nfs."
}
