{
  "name": "portmidi",
  "full_name": "portmidi",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Cross-platform library for real-time MIDI I/O",
  "license": "MIT",
  "homepage": "https://github.com/PortMidi/portmidi",
  "versions": {
    "stable": "2.0.4",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/PortMidi/portmidi/archive/refs/tags/v2.0.4.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "64893e823ae146cabd3ad7f9a9a9c5332746abe7847c557b99b2577afa8a607c"
    }
  },
  "revision": 1,
  "version_scheme": 1,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/portmidi/blobs/sha256:2d722c4357f6263f73456060dc5d131eb0b3b34ea54bef1cfe47d15bdc4ed75f",
          "sha256": "2d722c4357f6263f73456060dc5d131eb0b3b34ea54bef1cfe47d15bdc4ed75f"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/portmidi/blobs/sha256:94415b613563629ea6425c629dc768e3c9319823870e948c4060742d24401588",
          "sha256": "94415b613563629ea6425c629dc768e3c9319823870e948c4060742d24401588"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/portmidi/blobs/sha256:f8ea203ccc085feee9e2e5c8f97ebcd59117f41331ac654dc542cfa8a901e2a9",
          "sha256": "f8ea203ccc085feee9e2e5c8f97ebcd59117f41331ac654dc542cfa8a901e2a9"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/portmidi/blobs/sha256:505796ff7499cb66673b8774af23109d1803cd0ca79e45de041d66985cb553e6",
          "sha256": "505796ff7499cb66673b8774af23109d1803cd0ca79e45de041d66985cb553e6"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/portmidi/blobs/sha256:7e348bdf4837001ff61ebad737ee19326a92c11ea2e122874abb39246a15b99e",
          "sha256": "7e348bdf4837001ff61ebad737ee19326a92c11ea2e122874abb39246a15b99e"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/portmidi/blobs/sha256:3025725eb9196f45005ee6305883d78fb98fd6412569fdb2c3685e9f6f117009",
          "sha256": "3025725eb9196f45005ee6305883d78fb98fd6412569fdb2c3685e9f6f117009"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/portmidi/blobs/sha256:af653a873aa1e1a5255269323d28c28b97c6860f52687dc4677020aa5bfbf7de",
          "sha256": "af653a873aa1e1a5255269323d28c28b97c6860f52687dc4677020aa5bfbf7de"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [
    "alsa-lib"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/portmidi.rb",
  "ruby_source_checksum": {
    "sha256": "48d2e85303f4e0fc3f107d8ef8d3cd1409a0e62f7b00389dc66ddec7966fe148"
  },
  "date_added": "2010-06-25T22:18:46-07:00",
  "readme": "# PortMidi - Cross-Platform MIDI IO\n\nThis is the canonical release of PortMidi.\n\nSee other repositories within [PortMidi](https://github.com/PortMidi)\nfor related code and bindings (although currently, not much is here).\n\n## [Full C API documentation is here.](https://portmidi.github.io/portmidi_docs/)\n\n## Compiling and Using PortMidi\n\nUse CMake (or ccmake) to create a Makefile for Linux/BSD or a \nproject file for Xcode or MS Visual Studio. Use make or an IDE to compile:\n```\nsudo apt install libasound2-dev  # on Linux, you need ALSA\ncd portmidi  # start in the top-level portmidi directory\nccmake .     # set any options interactively, type c to configure\n             # type g to generate a Makefile or IDE project\n             # type q to quit\n             # (alternatively, run the CMake GUI and use\n             #  Configure and Generate buttons to build IDE project)\nmake         # compile sources and build PortMidi library\n             # (alternatively, open project file with your IDE)\nsudo make install  # if you want to install to your system\n```\n\n**PmDefaults** is a Java-based program for setting default MIDI\ndevices. It is necessary if you use `Pm_DefaultInputDeviceID()` or\n`Pm_DefaultOutputDeviceID()` to avoid implementing your own device\nbrowsing, selection and preferences in your applications. Enable\n`BUILD_PMDEFAULTS` and `BUILD_JAVA_NATIVE_INTERFACE` in ccmake, and\nsee `pm_java/README.txt` for more information.\n\nSee also notes in `pm_mac/README_MAC.txt`, `pm_win/README_WIN.txt` and\n`pm_linux/README_LINUX.txt`.\n\n## What's New?\n\nPortMidi has some fixes for Apple M1 cpus as of May 23, 2022. This has not yet\nbeen formally released to allow for further testing, but please use the latest\ncode if you want to run on an M1.\n\nPortMidi has some changes in 2021:\n\n - added Pm_CreateVirtualInput() and Pm_CreateVirtualOutput() functions that allow\n   applications to create named ports analogous to devices.\n   \n - improvements for macOS CoreMIDI include higher data rates for devices, better\n   handling of Unicode interface names in addition to virtual device creation.\n   \n - the notion of default devices, Pm_GetDefaultInputDeviceID(), \n   Pm_GetDefaultOutputDeviceID and the PmDefaults program have fallen into disuse\n   and are now deprecated.\n   \n - Native Interfaces for Python, Java, Go, Rust, Lua and more seem best left\n   to individual repos, so support within this repo has been dropped. A Java\n   interface is still here and probably usable -- let me know if you need it\n   and/or would like to help bring it up to date. I am happy to help with, \n   link to, or collaborate in supporting PortMidi for other languages. \n   \nFor up-to-date PortMidi for languages other than C/C++, check with\ndevelopers. As of 27 Sep 2021, this (and SourceForge) is the only repo with\nthe features described above.\n\n# Other Repositories\n\nPortMidi used to be part of the PortMedia suite, but this repo has been reduced to\nmostly just C/C++ code for PortMidi. You will find some other repositories in this PortMidi project\nset up for language bindings (volunteers and contributors are invited!). Other code removed from\nprevious releases of PortMedia include:\n\n## PortSMF\n\nA Standard MIDI File (SMF) (and more) library is in the [portsmf repository](https://github.com/PortMidi/portsmf).\n\nPortSMF is a library for reading/writing/editing Standard MIDI Files. It is\nactually much more, with a general representation of events and updates with\nproperties consisting of attributes and typed values. Familiar properties of\npitch, time, duration, and channel are built into events and updates to make\nthem faster to access and more compact.\n\nTo my knowledge, PortSMF has the most complete and useful handling of MIDI\ntempo tracks. E.g., you can edit notes according to either beat or time, and\nyou can edit tempo tracks, for example, flattening the tempo while preserving\nthe beat alignment, preserving the real time while changing the tempo or \nstretching the tempo over some interval.\n\nIn addition to Standard MIDI Files, PortSMF supports an ASCII representation\ncalled Allegro. PortSMF and Allegro are used for Audacity Note Tracks.\n\n## scorealign\n\nScorealign used to be part of the PortMedia suite. It is now at the [scorealign repository](https://github.com/rbdannenberg/scorealign).\n\nScorealign aligns\naudio-to-audio, audio-to-MIDI or MIDI-to-MIDI using dynamic time warping (DTW)\nof a computed chromagram representation. There are some added smoothing tricks\nto improve performance. This library is written in C and runs substantially \nfaster than most other implementations, especially those written in MATLAB,\ndue to the core DTW algorithm. Users should be warned that while chromagrams\nare robust features for alignment, they achieve robustness by operating at \nfairly high granularity, e.g., durations of around 100ms, which limits \ntime precision. Other more recent algorithms can doubtless do better, but\nbe cautious of claims, since it all depends on what assumptions you can \nmake about the music."
}
