{
  "name": "wolfmqtt",
  "full_name": "wolfmqtt",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Small, fast, portable MQTT client C implementation",
  "license": "GPL-2.0-or-later",
  "homepage": "https://github.com/wolfSSL/wolfMQTT",
  "versions": {
    "stable": "1.16.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/wolfSSL/wolfMQTT/archive/refs/tags/v1.16.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "be806967ff4dfa80d88d2197cabd8a5bf0072d03759bf8506aaa4ee9c5c48ba6"
    },
    "head": {
      "url": "https://github.com/wolfSSL/wolfMQTT.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/wolfmqtt/blobs/sha256:49b23940a62dcbe6e66e5338c89faab6f4db51bd1126be29dace74b70348d411",
          "sha256": "49b23940a62dcbe6e66e5338c89faab6f4db51bd1126be29dace74b70348d411"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/wolfmqtt/blobs/sha256:c4df8a877f40d52d69fa5d5016751db51be85bbfbcb79e927bf8a03fc42c3b20",
          "sha256": "c4df8a877f40d52d69fa5d5016751db51be85bbfbcb79e927bf8a03fc42c3b20"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/wolfmqtt/blobs/sha256:2999a1f462c8b195135d88258f36633b2c20792172927f70526b133cb93587ba",
          "sha256": "2999a1f462c8b195135d88258f36633b2c20792172927f70526b133cb93587ba"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/wolfmqtt/blobs/sha256:8773446a50beb3494efed336b307bdb03532c72eba3864397514874523e8a5f0",
          "sha256": "8773446a50beb3494efed336b307bdb03532c72eba3864397514874523e8a5f0"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/wolfmqtt/blobs/sha256:b5fe604ffafc2920cef29d3fbc5d010d2011375c18ca47798894bba837803719",
          "sha256": "b5fe604ffafc2920cef29d3fbc5d010d2011375c18ca47798894bba837803719"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/wolfmqtt/blobs/sha256:9c5336dfdc4c7c920c91a9b3138b77ff531985c82dca4d0ee6faab40ae393981",
          "sha256": "9c5336dfdc4c7c920c91a9b3138b77ff531985c82dca4d0ee6faab40ae393981"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/wolfmqtt/blobs/sha256:a7418f88c7422585fd8078c1c06d7f77c4dcbb46e137d96cf7258eaa395d5902",
          "sha256": "a7418f88c7422585fd8078c1c06d7f77c4dcbb46e137d96cf7258eaa395d5902"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "autoconf",
    "automake",
    "libtool"
  ],
  "dependencies": [
    "wolfssl"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/wolfmqtt.rb",
  "ruby_source_checksum": {
    "sha256": "d0e407f04cdb0647670a9db6e10a82de885579c54993755a728ae465e5cf5c86"
  },
  "date_added": "2020-04-11T11:58:16+00:00",
  "readme": "# wolfMQTT\n\nThis is an implementation of the MQTT Client written in C for embedded use, which supports SSL/TLS via the wolfSSL library. This library was built from the ground up to be multi-platform, space conscious and extensible. Integrates with wolfSSL to provide TLS support.\n\n\n## Building\n\n### Mac/Linux/Unix\n\n1. `./autogen.sh` (if cloned from GitHub)\n2. `./configure` (to see a list of build options use `./configure --help`)\n3. `make`\n4. `sudo make install`\n\nNotes:\n* If `wolfssl` was recently installed, run `sudo ldconfig` to update the linker cache.\n* Debug messages can be enabled using `--enable-debug` or `--enable-debug=verbose` (for extra logging).\n* For a list of build options run `./configure --help`.\n* The build options are generated in a file here: `wolfmqtt/options.h`.\n\n### Windows Visual Studio\n\nFor building wolfMQTT with TLS support in Visual Studio:\n\n1. Open the `<wolfssl-root>/wolfssl64.sln`.\n2. Re-target for your Visual Studio version (right-click on solution and choose `Retarget solution`).\n3. Make sure the `Debug DLL` or `Release DLL` configuration is selected. Make note if you are building 32-bit `x86` or 64-bit `x64`.\n4. Build the wolfSSL solution.\n5. Copy the `wolfssl.lib` and `wolfssl.dll` files into `<wolfmqtt-root>`.\n   * For `DLL Debug` with `x86` the files are in: `DLL Debug`.\n   * For `DLL Release` with `x86` the files are in: `DLL Release`.\n   * For `DLL Debug` with `x64` the files are in: `x64/DLL Debug`.\n   * For `DLL Release` with `x64` the files are in: `x64/DLL Release`.\n6. Open the `<wolfmqtt-root>/wolfmqtt.sln` solution.\n7. Make sure you have the same architecture (`x86` or `x64` selected) as used in wolfSSL above.\n8. By default the include path for the wolfssl headers is `./../wolfssl/`. If your wolfssl root location is different you can go into the project settings and adjust this in `C/C++` -> `General` -> `Additional Include Directories`.\n9. Configure your Visual Studio build settings using `wolfmqtt/vs_settings.h`.\n10. Build the wolfMQTT solution.\n\n### CMake\nCMake supports compiling in many environments including Visual Studio\nif CMake support is installed. The commands below can be run in\n`Developer Command Prompt`.\n\n```\nmkdir build\ncd build\n# to use installed wolfSSL location (library and headers)\ncmake .. -DWITH_WOLFSSL=/prefix/to/wolfssl/install/\n# OR to use a wolfSSL source tree\ncmake .. -DWITH_WOLFSSL_TREE=/path/to/wolfssl/\n# build\ncmake --build .\n```\n\n### vcpkg\n\n You can download and install wolfMQTT using the [vcpkg](https://github.com/Microsoft/vcpkg):\n\n    git clone https://github.com/Microsoft/vcpkg.git\n    cd vcpkg\n    ./bootstrap-vcpkg.sh\n    OR for Windows\n    bootstrap-vcpkg.bat\n\n    ./vcpkg integrate install\n    ./vcpkg install wolfmqtt\n\nThe wolfMQTT port in vcpkg is kept up to date by wolfSSL.\n\nWe also have vcpkg ports for wolftpm, wolfssl and curl.\n\n### Arduino\n\nSee `README.md` at [IDE/ARDUINO.README.md](IDE/ARDUINO.README.md)\n\n### MinGW\n\n```sh\nexport PATH=\"/opt/mingw-w32-bin_i686-darwin/bin:$PATH\"\nexport PREFIX=$PWD/build\n\n# wolfSSL\ncd wolfssl\n./configure --host=i686 CC=i686-w64-mingw32-gcc LD=i686-w64-mingw32-ld CFLAGS=\"-DWIN32 -DMINGW -D_WIN32_WINNT=0x0600\" LIBS=\"-lws2_32 -L$PREFIX/lib -lwolfssl\" --prefix=$PREFIX\nmake\nmake install\n\n# wolfMQTT\ncd ../wolfmqtt\n./configure --host=i686 CC=i686-w64-mingw32-gcc LD=i686-w64-mingw32-ld CFLAGS=\"-DWIN32 -DMINGW -D_WIN32_WINNT=0x0600 -DBUILDING_WOLFMQTT -I$PREFIX/include\" LDFLAGS=\"-lws2_32 -L$PREFIX/lib -lwolfssl\" --prefix=$PREFIX --disable-examples\nmake\n```\n\n### Zephyr RTOS\n\nSupport for Zephyr is available in the [zephyr](zephyr) directory. For instructions on how to build for Zephyr, see the [README.md](zephyr/README.md).\n\n## Architecture\n\nThe library has three components.\n\n### 1. mqtt_client\n\nThis is where the top level application interfaces for the MQTT client reside.\n\n* `int MqttClient_Init(MqttClient *client, MqttNet *net, MqttMsgCb msg_cb, byte *tx_buf, int tx_buf_len, byte *rx_buf, int rx_buf_len, int cmd_timeout_ms);`\n\nThese API's are blocking on `MqttNet.read` until error/timeout (`cmd_timeout_ms`):\n\n* `int MqttClient_Connect(MqttClient *client, MqttConnect *connect);`\n* `int MqttClient_Publish(MqttClient *client, MqttPublish *publish);`\n* `int MqttClient_Subscribe(MqttClient *client, MqttSubscribe *subscribe);`\n* `int MqttClient_Unsubscribe(MqttClient *client, MqttUnsubscribe *unsubscribe);`\n* `int MqttClient_Ping(MqttClient *client);`\n* `int MqttClient_Disconnect(MqttClient *client);`\n\nThis function blocks waiting for a new publish message to arrive for a maximum duration of `timeout_ms`.\n\n* `int MqttClient_WaitMessage(MqttClient *client, MqttMessage *message, int timeout_ms);`\n\nThese are the network connect / disconnect interfaces that wrap the MqttNet callbacks and handle WolfSSL TLS:\n\n* `int MqttClient_NetConnect(MqttClient *client, const char* host, word16 port, int timeout_ms, int use_tls, MqttTlsCb cb);`\n* `int MqttClient_NetDisconnect(MqttClient *client);`\n\nHelper functions:\n\n* `const char* MqttClient_ReturnCodeToString(int return_code);`\n\n### 2. mqtt_packet\n\nThis is where all the packet encoding/decoding is handled.\n\nThe header contains the MQTT Packet structures for:\n\n* Connect: `MqttConnect`\n* Publish / Message: `MqttPublish` / `MqttMessage` (they are the same)\n* Subscribe: `MqttSubscribe`\n* Unsubscribe: `MqttUnsubscribe`\n\n\n### 3. mqtt_socket\n\nThis is where the transport socket optionally wraps TLS and uses the `MqttNet` callbacks for the platform specific network handling.\n\nThe header contains the MQTT Network structure `MqttNet` for network callback and context.\n\n\n## Implementation\n\nHere are the steps for creating your own implementation.\n\n1. Create network callback functions for Connect, Read, Write and Disconnect. See `examples/mqttnet.c` and `examples/mqttnet.h`.\n2. Define the callback functions and context in a `MqttNet` structure.\n3. Call `MqttClient_Init` passing in a `MqttClient` structure pointer, `MqttNet` structure pointer, `MqttMsgCb` function pointer, TX/RX buffers with maximum length and command timeout.\n4. Call `MqttClient_NetConnect` to connect to broker over network. If `use_tls` is non-zero value then it will perform a TLS connection. The TLS callback `MqttTlsCb` should be defined for wolfSSL certificate configuration.\n5. Call `MqttClient_Connect` passing pointer to `MqttConnect` structure to send MQTT connect command and wait for Connect Ack.\n6. Call `MqttClient_Subscribe` passing pointer to `MqttSubscribe` structure to send MQTT Subscribe command and wait for Subscribe Ack (depending on QoS level).\n7. Call `MqttClient_WaitMessage` passing pointer to `MqttMessage` to wait for incoming MQTT Publish message.\n\n\n## Examples\n\n### Client Example\nThe example MQTT client is located in `/examples/mqttclient/`. This example exercises many of the exposed API’s and prints any incoming publish messages for subscription topic “wolfMQTT/example/testTopic”. This client contains examples of many MQTTv5 features, including the property callback and server assignment of client ID. The mqqtclient example is a good starting template for your MQTT application.\n\n### Simple Standalone Client Example\nThe example MQTT client is located in `/examples/mqttsimple/`. This example demonstrates a standalone client using standard BSD sockets. This requires `HAVE_SOCKET` to be defined, which comes from the ./configure generated `wolfmqtt/config.h` file. All parameters are build-time macros defined at the top of `/examples/mqttsimple/mqttsimple.c`.\n\n### Non-Blocking Client Example\nThe example MQTT client is located in `/examples/nbclient/`. This example uses non-blocking I/O for message exchange. The wolfMQTT library must be configured with the `--enable-nonblock` option (or built with `WOLFMQTT_NONBLOCK`).\n\n### Firmware Example\nThe MQTT firmware update is located in `/examples/firmware/`. This example has two parts. The first is called “fwpush”, which signs and publishes a firmware image. The second is called “fwclient”, which receives the firmware image and verifies the signature. This example publishes message on the topic “wolfMQTT/example/firmware”. The \"fwpush\" application is an example of using a publish callback to send the payload data.\n\n### Azure IoT Hub Example\nWe setup a wolfMQTT IoT Hub on the Azure server for testing. We added a device called `demoDevice`, which you can connect and publish to. The example demonstrates creation of a SasToken, which is used as the password for the MQTT connect packet. It also shows the topic names for publishing events and listening to `devicebound` messages. This example only works with `ENABLE_MQTT_TLS` set and the wolfSSL library present because it requires Base64 Encode/Decode and HMAC-SHA256. Note: The wolfSSL library must be built with `./configure --enable-base64encode` or `#define WOLFSSL_BASE64_ENCODE`. The `wc_GetTime` API was added in 3.9.1 and if not present you'll need to implement your own version of this to get current UTC seconds or update your wolfSSL library.\n**NOTE** The Azure broker only supports MQTT v3.1.1\n\n### AWS IoT Example\nWe setup an AWS IoT endpoint and testing device certificate for testing. The AWS server uses TLS client certificate for authentication. The example is located in `/examples/aws/`. The example subscribes to `$aws/things/\"AWSIOT_DEVICE_ID\"/shadow/update/delta` and publishes to `$aws/things/\"AWSIOT_DEVICE_ID\"/shadow/update`.\n**NOTE** The AWS broker only supports MQTT v3.1.1\n\n### Watson IoT Example\nThis example enables the wolfMQTT client to connect to the IBM Watson Internet of Things (WIOT) Platform. The WIOT Platform has a limited test broker called \"Quickstart\" that allows non-secure connections to exercise the component. The example is located in `/examples/wiot/`. Works with MQTT v5 support enabled.\n**NOTE** The WIOT Platform will be disabled DEC2023. The demo may still be useful for users of IBM Watson IOT. \n\n### MQTT-SN Example\nThe Sensor Network client implements the MQTT-SN protocol for low-bandwidth networks. There are several differences from MQTT, including the ability to use a two byte Topic ID instead the full topic during subscribe and publish. The SN client requires an MQTT-SN gateway. The gateway acts as an intermediary between the SN clients and the broker. This client was tested with the Eclipse Paho MQTT-SN Gateway, which connects by default to the public Eclipse broker, much like our wolfMQTT Client example. The address of the gateway must be configured as the host. The example is located in `/examples/sn-client/`.\n\nA special feature of MQTT-SN is the ability to use QoS level -1 (negative one) to publish to a predefined topic without first connecting to the gateway. There is no feedback in the application if there was an error, so confirmation of the test would involve running the `sn-client` first and watching for the publish from the `sn-client_qos-1`. There is an example provided in `/examples/sn-client/sn-client_qos-1`. It requires some configuration changes of the gateway.\n\n* Enable the the QoS-1 feature, predefined topics, and change the gateway name in `gateway.conf`:\n\n```\nQoS-1=YES\nPredefinedTopic=YES\nPredefinedTopicList=./predefinedTopic.conf\n.\n.\n.\n#GatewayName=PahoGateway-01\nGatewayName=WolfGateway\n```\n\n* Comment out all entries and add a new topic in `predefinedTopic.conf`:\n\n```\nWolfGatewayQoS-1,wolfMQTT/example/testTopic, 1\n```\n\n### Multithread Example\nThis example exercises the multithreading capabilities of the client library. The client implements two tasks: one that publishes to the broker; and another that waits for messages from the broker. The publish thread is created `NUM_PUB_TASKS` times (10 by default) and sends unique messages to the broker. This feature is enabled using the `--enable-mt` configuration option. The example is located in `/examples/multithread/`.\n\n## Example Options\nThe command line examples can be executed with optional parameters. To see a list of the available parameters, add the `-?`\n\n```\n ./examples/mqttclient/mqttclient -?\nmqttclient:\n-?          Help, print this usage\n-h <host>   Host to connect to, default: test.mosquitto.org\n-p <num>    Port to connect on, default: Normal 1883, TLS 8883\n-t          Enable TLS\n-A <file>   Load CA (validate peer)\n-K <key>    Use private key (for TLS mutual auth)\n-c <cert>   Use certificate (for TLS mutual auth)\n-S <str>    Use Host Name Indication, blank defaults to host\n-q <num>    Qos Level 0-2, default: 0\n-s          Disable clean session connect flag\n-k <num>    Keep alive seconds, default: 60\n-i <id>     Client Id, default: WolfMQTTClient\n-l          Enable LWT (Last Will and Testament)\n-u <str>    Username\n-w <str>    Password\n-m <str>    Message, default: test\n-n <str>    Topic name, default: wolfMQTT/example/testTopic\n-r          Set Retain flag on publish message\n-C <num>    Command Timeout, default: 30000ms\n-P <num>    Max packet size the client will accept, default: 1048576\n-T          Test mode\n-f <file>   Use file contents for publish\n```\nThe available options vary depending on the library configuration.\n\n\n## Broker compatibility\nwolfMQTT client library has been tested with the following brokers:\n* Adafruit IO by Adafruit\n* AWS by Amazon\n* Azure by Microsoft\n* flespi by Gurtam\n* HiveMQ and HiveMQ Cloud by HiveMQ GmbH\n* IBM WIoTP Message Gateway by IBM\n* Mosquitto by Eclipse\n* Paho MQTT-SN Gateway by Eclipse\n* VerneMQ by VerneMQ/Erlio\n* EMQX broker\n\n## Specification Support\n\n### MQTT v3.1.1 Specification Support\n\nThe initially supported version with full specification support for all features and packets type such as:\n* QoS 0-2\n* Last Will and Testament (LWT)\n* Client examples for: AWS, Azure IoT, Firmware update, non-blocking and generic.\n\n### MQTT v5.0 Specification Support\n\nThe wolfMQTT client supports connecting to v5 enabled brokers when configured with the `--enable-v5` option. \nThe following v5.0 specification features are supported by the wolfMQTT client:\n* AUTH packet\n* User properties\n* Server connect ACK properties\n* Format and content type for publish\n* Server disconnect\n* Reason codes and strings\n* Maximum packet size\n* Server assigned client identifier\n* Subscription ID\n* Topic Alias\n\nThe v5 enabled wolfMQTT client was tested with the following MQTT v5 brokers:\n* Mosquitto\n** Runs locally.\n** `./examples/mqttclient/mqttclient -h localhost`\n* Flespi\n** Requires an account tied token that is regenerated hourly.\n** `./examples/mqttclient/mqttclient -h \"mqtt.flespi.io\" -u \"<your-flespi-token>\"`\n* VerneMQ MQTTv5 preview\n** Runs locally.\n** `./examples/mqttclient/mqttclient -h localhost`\n* HiveMQ 4.0.0 EAP\n** Runs locally.\n** `./examples/mqttclient/mqttclient -h localhost`\n* HiveMQ Cloud\n** `./examples/mqttclient/mqttclient -h 833f87e253304692bd2b911f0c18dba1.s1.eu.hivemq.cloud -t -S -u wolf1 -w NEZjcm7i8eRjFKF -p 8883`\n* EMQX broker\n** `./examples/mqttclient/mqttclient -h \"broker.emqx.io\"`\n\nProperties are allocated from a local stack (size `MQTT_MAX_PROPS`) by default. Define `WOLFMQTT_DYN_PROP` to use malloc for property allocation.\n\n### MQTT Sensor Network (MQTT-SN) Specification Support\n\nThe wolfMQTT SN Client implementation is based on the OASIS MQTT-SN v1.2 specification. The SN API is configured with the `--enable-sn` option. There is a separate API for the sensor network API, which all begin with the \"SN_\" prefix. The wolfMQTT SN Client operates over UDP, which is distinct from the wolfMQTT clients that use TCP. The following features are supported by the wolfMQTT SN Client:\n* Register\n* Will topic and message set up\n* Will topic and message update\n* All QoS levels\n* Variable-sized packet length field\n\nUnsupported features:\n* Automatic gateway discovery is not implemented\n* Multiple gateway handling\n\nThe SN client was tested using the Eclipse Paho MQTT-SN Gateway (https://github.com/eclipse/paho.mqtt-sn.embedded-c) running locally and on a separate network node. Instructions for building and running the gateway are in the project README.\n\n## Post-Quantum MQTT Support\n\nRecently the OpenQuantumSafe project has integrated their fork of OpenSSL with the mosquito MQTT broker. You can now build wolfMQTT with wolfSSL and liboqs and use that to publish to the mosquito MQTT broker. Currently, wolfMQTT supports the `KYBER_LEVEL1` and `P256_KYBER_LEVEL1` groups and FALCON_LEVEL1 for authentication in TLS 1.3. This works on Linux.\n\n### Getting Started with Post-Quantum Mosquito MQTT Broker and Subscriber\n\nTo get started, you can use the code from the following github pull request:\n\nhttps://github.com/open-quantum-safe/oqs-demos/pull/143\n\nFollow all the instructions in README.md and USAGE.md. This allows you to create a docker image and a docker network. Then you will run a broker, a subscriber and a publisher. At the end the publisher will exit and the broker and subscriber will remain active. You will need to re-activate the publisher docker instance and get the following files onto your local machine:\n\n- /test/cert/CA.crt\n- /test/cert/publisher.crt\n- /test/cert/publisher.key\n\nNOTE: Do not stop the broker and the subscriber instances.\n\n### Building and Running Post-Quantum wolfMQTT Publisher\n\nFollow the instructions for obtaining and building liboqs and building wolfSSL in section 15 of the following document:\n\nhttps://github.com/wolfSSL/wolfssl/blob/master/INSTALL\n\nNo special flags are required for building wolfMQTT. Simply do the following:\n\n```\n./autogen.sh (if obtained from github)\n./configure\nmake all\nmake check\n```\n\nSince the broker and subscriber are still running, you can use `mqttclient` to publish using post-quantum algorithms in TLS 1.3 by doing the following:\n\n```\n./examples/mqttclient/mqttclient -h 172.18.0.2 -t -A CA.crt -K publisher.key -c publisher.crt -m \"Hello from post-quantum wolfMQTT!!\" -n test/sensor1 -Q KYBER_LEVEL1\n```\n\nCongratulations! You have just published an MQTT message using TLS 1.3 with the `KYBER_LEVEL1` KEM and `FALCON_LEVEL1` signature scheme. To use the hybrid group, replace `KYBER_LEVEL1` with `P256_KYBER_LEVEL1`."
}
