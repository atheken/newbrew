{
  "name": "drill",
  "full_name": "drill",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "HTTP load testing application written in Rust",
  "license": "GPL-3.0-or-later",
  "homepage": "https://github.com/fcsonline/drill",
  "versions": {
    "stable": "0.8.3",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/fcsonline/drill/archive/0.8.3.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "12096bfeb57fa567f9104615c872b5fec787bacf5b9efcc9f14d496c08efe30d"
    },
    "head": {
      "url": "https://github.com/fcsonline/drill.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/drill/blobs/sha256:4a63152d9bd25cb84099584ce2668b02c714225c5cc2d5e6816198d857e02663",
          "sha256": "4a63152d9bd25cb84099584ce2668b02c714225c5cc2d5e6816198d857e02663"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/drill/blobs/sha256:518b086f2c1ae00f3d677615e2455a45b36976920a949a329dd1ec6a80cbd35b",
          "sha256": "518b086f2c1ae00f3d677615e2455a45b36976920a949a329dd1ec6a80cbd35b"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/drill/blobs/sha256:ea7da74e8e531c20cb687722ed6cf5b4ea21ebad2cae0b518e6512a2c78474b2",
          "sha256": "ea7da74e8e531c20cb687722ed6cf5b4ea21ebad2cae0b518e6512a2c78474b2"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/drill/blobs/sha256:1d9b9f7b85d1962bb691648e99a4096fecc8c10f59844bc73db1bd93a77f7c99",
          "sha256": "1d9b9f7b85d1962bb691648e99a4096fecc8c10f59844bc73db1bd93a77f7c99"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/drill/blobs/sha256:051d29acc8b70771b3f1510942cca546668921ddf12b66ed25ec7c95790bf5f1",
          "sha256": "051d29acc8b70771b3f1510942cca546668921ddf12b66ed25ec7c95790bf5f1"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/drill/blobs/sha256:61eadba6d4008eeb229a2ef431a6977fbaa19cb489e54f55d125edfaab016fe5",
          "sha256": "61eadba6d4008eeb229a2ef431a6977fbaa19cb489e54f55d125edfaab016fe5"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/drill/blobs/sha256:701f7a9ab685f50091ce4c85d09cffde2a6b46ecda5052cdce5a41b06dafffd6",
          "sha256": "701f7a9ab685f50091ce4c85d09cffde2a6b46ecda5052cdce5a41b06dafffd6"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [
    "openssl@3"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [
    "ldns"
  ],
  "conflicts_with_reasons": [
    "both install a `drill` binary"
  ],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/drill.rb",
  "ruby_source_checksum": {
    "sha256": "728928aebdc10cdfa417aa2517dde09f7ca3e4c382291c2fa8117baf19e1c640"
  },
  "date_added": "2021-09-06T04:08:46+00:00",
  "readme": "# Drill\n\n[![](https://img.shields.io/crates/v/drill.svg?ts=2)](https://crates.io/crates/drill)\n![](https://travis-ci.com/fcsonline/drill.svg?branch=master)\n\nDrill is a HTTP load testing application written in Rust. The main goal\nfor this project is to build a really lightweight tool as alternative to other\nthat require JVM and other stuff.\n\nYou can write benchmark files, in YAML format, describing all the stuff you\nwant to test.\n\nIt was inspired by [Ansible](http://docs.ansible.com/ansible/playbooks_intro.html)\nsyntax because it is really easy to use and extend.\n\nHere is an example for **benchmark.yml**:\n\n```yaml\n---\n\nconcurrency: 4\nbase: 'http://localhost:9000'\niterations: 5\nrampup: 2\n\nplan:\n  - name: Include comments\n    include: comments.yml\n\n  - name: Fetch users\n    request:\n      url: /api/users.json\n\n  - name: Fetch organizations\n    request:\n      url: /api/organizations\n\n  - name: Fetch account\n    request:\n      url: /api/account\n    assign: foo\n\n  - name: Fetch manager user\n    request:\n      url: /api/users/{{ foo.body.manager_id }}\n\n  - name: Assert request response code\n    assert:\n      key: foo.status\n      value: 200\n\n  - name: Assign values\n    assign:\n      key: bar\n      value: \"2\"\n\n  - name: Assert values\n    assert:\n      key: bar\n      value: \"2\"\n\n  - name: Fetch user from assign\n    request:\n      url: /api/users/{{ bar }}\n\n  - name: Fetch some users\n    request:\n      url: /api/users/{{ item }}\n    with_items:\n      - 70\n      - 73\n      - 75\n\n  - name: Tagged user request\n    request:\n      url: /api/users/70\n    tags:\n      - tag_user\n\n  - name: Fetch some users by hash\n    request:\n      url: /api/users/{{ item.id }}\n    with_items:\n      - { id: 70 }\n      - { id: 73 }\n      - { id: 75 }\n\n  - name: Fetch some users by range, index {{ index }}\n    request:\n      url: /api/users/{{ item }}\n    with_items_range:\n      start: 70\n      step: 5\n      stop: 75\n\n  - name: Fetch some users from CSV, index {{ index }}\n    request:\n      url: /api/users/contacts/{{ item.id }}\n    with_items_from_csv: ./fixtures/users.csv\n    shuffle: true\n\n  - name: POST some crafted JSONs stored in CSV, index {{ index }}\n    request:\n      url: /api/transactions\n      method: POST\n      body: '{{ item.txn }}'\n      headers:\n        Content-Type: 'application/json'\n    with_items_from_csv:\n      file_name: ./fixtures/transactions.csv\n      quote_char: \"\\'\"\n\n  - name: Fetch no relative url\n    request:\n      url: http://localhost:9000/api/users.json\n\n  - name: Interpolate environment variables\n    request:\n      url: http://localhost:9000/api/{{ EDITOR }}\n\n  - name: Support for POST method\n    request:\n      url: /api/users\n      method: POST\n      body: foo=bar&arg={{ bar }}\n\n  - name: Login user\n    request:\n      url: /login?user=example&password=3x4mpl3\n\n  - name: Fetch counter\n    request:\n      url: /counter\n    assign: memory\n\n  - name: Fetch counter\n    request:\n      url: /counter\n    assign: memory\n\n  - name: Fetch endpoint\n    request:\n      url: /?counter={{ memory.body.counter }}\n\n  - name: Reset counter\n    request:\n      method: DELETE\n      url: /\n\n  - name: Exec external commands\n    exec:\n      command: \"echo '{{ foo.body }}' | jq .phones[0] | tr -d '\\\"'\"\n    assign: baz\n\n  - name: Custom headers\n    request:\n      url: /admin\n      headers:\n        Authorization: Basic aHR0cHdhdGNoOmY=\n        X-Foo: Bar\n        X-Bar: Bar {{ memory.headers.token }}\n\n  - name: One request with a random item\n    request:\n      url: /api/users/{{ item }}\n    with_items:\n      - 70\n      - 73\n      - 75\n    shuffle: true\n    pick: 1\n```\n\nAs you can see, you can play with interpolations in different ways. This\nwill let you specify a benchmark with different requests and\ndependencies between them.\n\nIf you want to know more about the benchmark file syntax, [read this](./SYNTAX.md)\n\n## Install\n\nRight now, the easiest way to get `drill` is to go to the\n[latest release](https://github.com/fcsonline/drill/releases/latest)\npage and download the binary file for your platform.\n\n\nAnother way to install `drill`, if you have [Rust](https://rustup.rs/) available in\nyour system, is with [cargo](https://doc.rust-lang.org/cargo/getting-started/installation.html):\n\n```\ncargo install drill\ndrill --benchmark benchmark.yml --stats\n```\n\nor download the source code and compile it:\n\n```\ngit clone git@github.com:fcsonline/drill.git && cd drill\ncargo build --release\n./target/release/drill --benchmark benchmark.yml --stats\n```\n\n### Dependencies\n\nOpenSSL is needed in order to compile Drill, whether it is through `cargo install`\nor when compiling from source with `cargo build`.\n\nDepending on your platform, the name of the dependencies may differ.\n\n#### Linux\n\nInstall `libssl-dev` and `pkg-config` packages with your favorite package manager\n(if `libssl-dev` is not found, try other names like `openssl` or `openssl-devel`).\n\n#### macOS\n\nFirst, install the [Homebrew](https://brew.sh/) package manager.\n\nAnd then install `openssl` with Homebrew.\n\n#### Windows\n\nFirst, install [vcpkg](https://vcpkg.io/en/getting-started.html).\n\nAnd then run `vcpkg install openssl:x64-windows-static-md`.\n\n## Demo\n\n[![demo](https://asciinema.org/a/164615.png)](https://asciinema.org/a/164615?autoplay=1)\n\n## Features\n\nThis is the list of all features supported by the current version of `drill`:\n\n- **Concurrency:** run your benchmarks choosing the number of concurrent iterations.\n- **Multi iterations:** specify the number of iterations you want to run the benchmark.\n- **Ramp-up:** specify the amount of time, in seconds, that it will take `drill` to start all iterations.\n- **Delay:** introduce controlled delay between requests. Example: [delay.yml](./example/delay.yml)\n- **Dynamic urls:** execute requests with dynamic interpolations in the url, like `/api/users/{{ item }}`\n- **Dynamic headers:** execute requests with dynamic headers. Example: [headers.yml](./example/headers.yml)\n- **Interpolate environment variables:** set environment variables, like `/api/users/{{ EDITOR }}`\n- **Executions:** execute remote commands with test plan data.\n- **Assertions:** assert values during the test plan. Example: [iterations.yml](./example/iterations.yml)\n- **Request dependencies:** create dependencies between requests with `assign` and url interpolations.\n- **Split files:** organize your benchmarks in multiple files and include them.\n- **CSV support:** read CSV files and build N requests fill dynamic interpolations with CSV data.\n- **HTTP methods:** build request with different http methods like GET, POST, PUT, PATCH, HEAD or DELETE.\n- **Cookie support:** create benchmarks with sessions because cookies are propagates between requests.\n- **Stats:** get nice statistics about all the requests. Example: [cookies.yml](./example/cookies.yml)\n- **Thresholds:** compare the current benchmark performance against a stored one session and fail if a threshold is exceeded.\n- **Tags:** specify test plan items by tags.\n\n## Test it\n\nGo to the `example` directory and you'll find a [README](./example) how\nto test it in a safe environment.\n\n**Disclaimer**: We really recommend not to run intensive benchmarks against\nproduction environments.\n\n## Command line interface\n\nFull list of cli options, which is available under `drill --help`\n\n```\ndrill 0.8.3\nHTTP load testing application written in Rust inspired by Ansible syntax\n\nUSAGE:\n    drill [FLAGS] [OPTIONS] --benchmark <benchmark>\n\nFLAGS:\n    -h, --help                      Prints help information\n        --list-tags                 List all benchmark tags\n        --list-tasks                List benchmark tasks (executes --tags/--skip-tags filter)\n    -n, --nanosec                   Shows statistics in nanoseconds\n        --no-check-certificate      Disables SSL certification check. (Not recommended)\n    -q, --quiet                     Disables output\n        --relaxed-interpolations    Do not panic if an interpolation is not present. (Not recommended)\n    -s, --stats                     Shows request statistics\n    -V, --version                   Prints version information\n    -v, --verbose                   Toggle verbose output\n\nOPTIONS:\n    -b, --benchmark <benchmark>    Sets the benchmark file\n    -c, --compare <compare>        Sets a compare file\n    -r, --report <report>          Sets a report file\n        --skip-tags <skip-tags>    Tags to exclude\n        --tags <tags>              Tags to include\n    -t, --threshold <threshold>    Sets a threshold value in ms amongst the compared file\n    -o, --timeout <timeout>        Set timeout in seconds for all requests\n```\n\n## Roadmap\n\n- Complete and improve the interpolation engine\n- Add writing to a file support\n\n## Donations\n\nIf you appreciate all the job done in this project, a small donation is always welcome:\n\n[![\"Buy Me A Coffee\"](https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png)](https://www.buymeacoffee.com/fcsonline)\n\n## Contribute\n\nThis project started as a side project to learn Rust, so I'm sure that is full\nof mistakes and areas to be improve. If you think you can tweak the code to\nmake it better, I'll really appreciate a pull request. ;)"
}
