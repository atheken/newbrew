{
  "name": "snag",
  "full_name": "snag",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Automatic build tool for all your needs",
  "license": "MIT",
  "homepage": "https://github.com/Tonkpils/snag",
  "versions": {
    "stable": "1.2.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/Tonkpils/snag/archive/v1.2.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "37bf661436edf4526adf5428ac5ff948871c613ff4f9b61fbbdfe1fb95f58b37"
    },
    "head": {
      "url": "https://github.com/Tonkpils/snag.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/snag/blobs/sha256:fa9946a8925f1aa3881c48e93893a412938c9681f0bd2427a4d652e366c0aedc",
          "sha256": "fa9946a8925f1aa3881c48e93893a412938c9681f0bd2427a4d652e366c0aedc"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/snag/blobs/sha256:1714f0e948566336c34fcf45dce8f7a5d76cfdcad20545af460dd271daf8bdde",
          "sha256": "1714f0e948566336c34fcf45dce8f7a5d76cfdcad20545af460dd271daf8bdde"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/snag/blobs/sha256:687d1c28e0f911d8343db56f993e4ab0088ec34e40b9a99c1139ec4f8db558c3",
          "sha256": "687d1c28e0f911d8343db56f993e4ab0088ec34e40b9a99c1139ec4f8db558c3"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/snag/blobs/sha256:e9512e6adfaa81d36ec98c2b95e2cd5dcd2bc9bda8fa441fb9c37f01d565106d",
          "sha256": "e9512e6adfaa81d36ec98c2b95e2cd5dcd2bc9bda8fa441fb9c37f01d565106d"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/snag/blobs/sha256:f3a6ed5e8543f7b4c6eda761a849680ffd869a6fe1d0b51eee3ecc6761d4fe9d",
          "sha256": "f3a6ed5e8543f7b4c6eda761a849680ffd869a6fe1d0b51eee3ecc6761d4fe9d"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/snag/blobs/sha256:5b7076d11282b0ec9d25cf2f03e529dfc1d6d417dda5b80d44332a12767e68d1",
          "sha256": "5b7076d11282b0ec9d25cf2f03e529dfc1d6d417dda5b80d44332a12767e68d1"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/snag/blobs/sha256:008cc64d1a65693bf1773affb86ed185d5c91382f80f252877a5a6334986527a",
          "sha256": "008cc64d1a65693bf1773affb86ed185d5c91382f80f252877a5a6334986527a"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/snag/blobs/sha256:3821de3f4b916afd116f9f55c549f1bdec7b2c448994e784baf23eef96d65520",
          "sha256": "3821de3f4b916afd116f9f55c549f1bdec7b2c448994e784baf23eef96d65520"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/snag/blobs/sha256:ae031acea4e10639f15a1598bf99e45eb8bed08222e31db9e1152a4a1de0dc14",
          "sha256": "ae031acea4e10639f15a1598bf99e45eb8bed08222e31db9e1152a4a1de0dc14"
        },
        "sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/snag/blobs/sha256:692ce892c40f38cb39e77b464efa531b27004a9bbaf0096fb5876b570086cf82",
          "sha256": "692ce892c40f38cb39e77b464efa531b27004a9bbaf0096fb5876b570086cf82"
        },
        "el_capitan": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/snag/blobs/sha256:18a6d589a0b416ee502a8dacd6f919959d25cc08d9bbaad152fdade4c72634dc",
          "sha256": "18a6d589a0b416ee502a8dacd6f919959d25cc08d9bbaad152fdade4c72634dc"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/snag/blobs/sha256:7096008e3aab8b00c45a600edab938bd16918a92543423662f3a6015e5a14edb",
          "sha256": "7096008e3aab8b00c45a600edab938bd16918a92543423662f3a6015e5a14edb"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/snag.rb",
  "ruby_source_checksum": {
    "sha256": "3346833294c4bb5ac1aff761a4e6807b3131a81f682d21cfb5d746de7ff45778"
  },
  "date_added": "2015-08-27T12:28:06+01:00",
  "readme": "# Snag [![Build Status](https://travis-ci.org/Tonkpils/snag.svg?branch=wip)](https://travis-ci.org/Tonkpils/snag) [![Coverage Status](https://coveralls.io/repos/Tonkpils/snag/badge.svg?branch=coverage&service=github)](https://coveralls.io/github/Tonkpils/snag?branch=coverage)\n\nAn automatic build tool for all your needs\n\n![](http://i.imgur.com/epcicvr.gif)\n\n## Installation\n\n### Releases\n\nYou can visit the [releases](https://github.com/Tonkpils/snag/releases) section to\ndownload the binary for your platform.\n\n## [Homebrew](http://brew.sh/)\n\nWe've got a formula in homebrew!\n\n```bash\nbrew update && brew install snag\n```\n\n### Source\n\nIf you have [go](http://golang.org/) installed and want to install\nthe latest and greatest you can run:\n\n```go\n$ go get github.com/Tonkpils/snag\n```\n\n## Usage\n\nOnce snag is installed, use:\n\n```sh\nsnag init\n```\n\nThis will generate the snag file `.snag.yml`.\nHere is a sample of the snag file:\n\n```yaml\nverbose: true\nignore:\n  - .git\n  - \"**.ext\"\n  - \"foo/**/bar.sh\"\nbuild:\n  - echo \"lint code\"\n  - echo \"test code\"\n```\n\nSnag works by reading the snag file allowing you to configure what and how\ncommands will be executed.\nThe file **must** reside in the same directory that you want to watch.\n\nBy default, snag will watch all files/folders within the current directory recursively.\nThe ignore section will tell snag to ignore any changes that happen\nto the directories/files listed. The ignore section uses the same pattern matching\nthat [gitignore](https://www.kernel.org/pub/software/scm/git/docs/gitignore.html) uses.\n\nThe build section of the file will be executed when any file is created, deleted, or modified.\n\nOnce configured, use:\n\n```\nsnag\n```\n\nFrom a project with a snag file and develop away!\n\n### Quick Use\n\nIf you find yourself working on a project that does not contain a snag file and\nstill want to use snag, you can use flags to specify commands to run.\n\nThe `-c` flag allows specifying a command just like the snag file and can\nbe defined more than once for multiple commands. The order of the commands\ndepends on the order of the flag.\n\n```sh\nsnag -c \"echo snag world\" -c \"echo rocks\"\n```\n\nwill output\n\n```sh\n|Passed     | echo snag world\n|Passed     | echo rocks\n```\n\nThe `-v` flag enables verbose output. It will also override the `verbose`\noption form the snag file if it is defined to false.\n\n**NOTE**: using the `-c` flag will skip reading a snag file even if it\nexists in the current working directory.\n\n### Environment Variables\n\nYou can access your shell's environment variables by using `$$`.\n\n```yaml\nbuild:\n  - echo $$MY_VAR\n  - rm -rf $$OUTPUT_DIR\n```\n\n## Caveats\n\n### Endless build loops\n\nSnag will run your configured commands when **ANY** file, not ignored,\nis modifed in your current directory.\nIf your commands generate any files within the watched directory,\nyou must add them to the `ignore` section in your\nsnag file to avoid an endless build loop.\n\n### Trouble running shell scripts\n\nIn order to run shell scripts, your must have a [shebang](https://en.wikipedia.org/wiki/Shebang_(Unix)) in it. If you are trying to run a script without a\nshebang, you will need to specify the shell it should run in.\n\ni.e.\n\nRunning a script with a shebang\n\n```yaml\nbuild:\n  - ./my-script\n```\n\nRunning a script **without** a shebang\n\n```yaml\nbuild:\n  - bash my-script\n```\n\n### Ignore Pattern Matching\n\nIf you want to use asterisks in the ignore section of your snag file,\nyou need to make sure to wrap them in quotes or you may run into an\nerror like:\n\n```\n$ snag\n2015/10/24 19:39:40 Could not parse yml file. yaml: line 6: did not find expected alphabetic or numeric character\n```\n\n## Known Issues\n\n* `open /dev/null: too many open files`\n\nYou may experience this error if you're running on OSX. You may need to bump\nthe maximum number of open file on your machine. You can refer to [this](http://krypted.com/mac-os-x/maximum-files-in-mac-os-x/)\narticle for more information on the max files on OSX and [this](http://superuser.com/questions/433746/is-there-a-fix-for-the-too-many-open-files-in-system-error-on-os-x-10-7-1) superuser post for a solution"
}
