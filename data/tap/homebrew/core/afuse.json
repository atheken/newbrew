{
  "name": "afuse",
  "full_name": "afuse",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Automounting file system implemented in userspace with FUSE",
  "license": "GPL-2.0-only",
  "homepage": "https://github.com/pcarrier/afuse/",
  "versions": {
    "stable": "0.5.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/pcarrier/afuse/archive/refs/tags/v0.5.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "87284e3f7973f5a61eea4a37880512c01f0b8bf1d37a8988447efbe806ec3414"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/afuse/blobs/sha256:357eeafd92b4c69381b5fdf9c08a9d2687b47f4280709f435385e3acfd77d7a4",
          "sha256": "357eeafd92b4c69381b5fdf9c08a9d2687b47f4280709f435385e3acfd77d7a4"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "autoconf",
    "automake",
    "pkg-config"
  ],
  "dependencies": [
    "libfuse@2"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [
    {
      "name": "linux",
      "cask": null,
      "download": null,
      "version": null,
      "contexts": [],
      "specs": [
        "stable"
      ]
    }
  ],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "2706c66e8def3eeba4d9bf1adf66221c8ad70701",
  "ruby_source_path": "Formula/afuse.rb",
  "ruby_source_checksum": {
    "sha256": "8686c2464a8dc3e03e838f22862b7a2b6af6d5c6f57ee64a774ea4e7c380ba13"
  },
  "date_added": "2013-01-14T16:39:58-08:00",
  "readme": "afuse 0.5.0\nhttps://github.com/pcarrier/afuse/\n\n\n0. Contents\n-----------\n1. Abstract\n2. Basic Usage\n3. Pre-populating afuse Root\n4. Misc Other Features\n5. Important Notes on afuse's Operation\n\n\n1. Abstract\n-----------\nafuse is an automounting file system implemented in user-space using FUSE.\nafuse currently implements the most basic functionality that can be expected by\nan automounter; that is it manages a directory of virtual directories. If one\nof these virtual directories is accessed and is not already automounted, afuse\nwill attempt to mount a filesystem onto that directory. If the mount succeeds\nthe requested access proceeds as normal, otherwise it will fail with an error.\nSee the example below for a specific usage scenario.\n\nThe advantage of using afuse over traditional automounters is afuse runs\nentirely in user-space by individual users. Thus it can take advantage of the\ninvoking users environment, for example allowing access to an ssh-agent for\npassword-less sshfs mounts, or allowing access to a graphical environment to\nget user input to complete a mount such as asking for a password.\n\nafuse is distributed under the GPLv2 license, details of which can be found in\nthe COPYING file. Particularly, please note that while afuse is intended to be\nuseful it is provided with ABSOLUTELY NO WARRANTY.\n\nIf you are interested in contributing to afuse, please read the HACKING file.\n\n\n2. Basic Usage\n--------------\nExample invocation using sshfs:\n\n\tafuse -o mount_template=\"sshfs %r:/ %m\" \\\n\t      -o unmount_template=\"fusermount -u -z %m\" \\\n\t         mountpoint/\n\nNow try 'ls mountpoint/user@host/'.\n\nTo unmount use:\n\n\tfusermount -u -z mountpoint/\n\nAll sub mounts should be automatically unmounted.\n\nFor this example to work, the sshfs invocation must not require user\ninteractivity (i.e.  asking for a password). So you probably want to be\nusing something like ssh-agent.\n\nAlternatively, if want interactivity, add -f to the afuse invocation.\n\n\n3. Pre-populating afuse Root\n----------------------------\nBy default the afuse root directory is empty until a specific access is made to\na directory leading to successful mount. In some cases it may be useful to\npre-populate the afuse root with valid directory names.\n\nTo enable root directory pre-population, use the -o populate_root_command\noption to specify a command which will provide a list of directory names to\npopulate the root with.  This program will be run for every directory list\nrequest on the afuse root directory, and should output one dir entry per-line\nto stdout. As this program is called repeatedly and for every directory\nlisting it should not block/pause for an unreasonable amount of time.\n\nNote that when using this mode no actual mounting occurs until a directory\naccess is made to one of the potential mount-points.\n\nAn example of this usage is provided in the afuse-avahissh shell script\n(typically installed alongside afuse). This can be started as follows:\n\n\tafuse-avahissh mountpoint/\n\nThis script will use avahi to automatically populate the root directory with\nhosts advertising their sftp service via Avahi. To work correctly both sshfs\nand avahi-browse must be installed and available to the script.\n\n\n4. Misc Other Features\n----------------------\n* By default afuse does not attempt to mount a directory on a getattr\n  operation. This can be disabled using the -o exact_getattr option. This\n  allows getattr to return accurate information but may cause spurious mounts\n  when programs are just checking for the existence of files.\n\n* The -o flushwrites option causes write operation on file-systems mounted by \n  afuse to operate synchronously.\n\n\n5. Important Notes on afuse's Operation\n---------------------------------------\nOne of the most important things to note about afuse's operation is that\nautomounted filesystems accessed through afuse are actually accessed by proxy.\nActual mounts are created in an instance specific  directory in /tmp. _ALL_\naccesses to automounted filesystems apparently managed by afuse go through\nafuse and are proxied onto the real filesystem mounts as appropriate.\n\nWhile this shouldn't cause any operational problems, it does mean that\noperations on afuse automounted filesystems have considerable overhead.  It can\nalso mean that if afuse is not shutdown cleanly (via an unmount of the afuse\nfilesystem) a stale directory can be left in /tmp of the form afuse-XXXXXX\n(where the X's are random characters).\n\nHopefully these limitations will be removed in later revisions of afuse."
}
