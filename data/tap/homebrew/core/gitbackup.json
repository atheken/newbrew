{
  "name": "gitbackup",
  "full_name": "gitbackup",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Tool to backup your Bitbucket, GitHub and GitLab repositories",
  "license": "MIT",
  "homepage": "https://github.com/amitsaha/gitbackup",
  "versions": {
    "stable": "0.9.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/amitsaha/gitbackup/archive/v0.9.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "dc25680b498995ea4c52b1cb2c756aee200f163fc7dbfa695f0d0fd4cc10c28c"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gitbackup/blobs/sha256:e2662dc58792c8acff07d745e88026a58ad2916aa943f03e214861ffff83ced8",
          "sha256": "e2662dc58792c8acff07d745e88026a58ad2916aa943f03e214861ffff83ced8"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gitbackup/blobs/sha256:e2662dc58792c8acff07d745e88026a58ad2916aa943f03e214861ffff83ced8",
          "sha256": "e2662dc58792c8acff07d745e88026a58ad2916aa943f03e214861ffff83ced8"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gitbackup/blobs/sha256:e2662dc58792c8acff07d745e88026a58ad2916aa943f03e214861ffff83ced8",
          "sha256": "e2662dc58792c8acff07d745e88026a58ad2916aa943f03e214861ffff83ced8"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gitbackup/blobs/sha256:9c458fa964243f8611a16564f9afc526a101cc2c1167a0f1dd85def0cd35ce20",
          "sha256": "9c458fa964243f8611a16564f9afc526a101cc2c1167a0f1dd85def0cd35ce20"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gitbackup/blobs/sha256:9c458fa964243f8611a16564f9afc526a101cc2c1167a0f1dd85def0cd35ce20",
          "sha256": "9c458fa964243f8611a16564f9afc526a101cc2c1167a0f1dd85def0cd35ce20"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gitbackup/blobs/sha256:9c458fa964243f8611a16564f9afc526a101cc2c1167a0f1dd85def0cd35ce20",
          "sha256": "9c458fa964243f8611a16564f9afc526a101cc2c1167a0f1dd85def0cd35ce20"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gitbackup/blobs/sha256:2a062c0da560c0779e9ee952408cc4131980d0658f594933525ee795dd2e9635",
          "sha256": "2a062c0da560c0779e9ee952408cc4131980d0658f594933525ee795dd2e9635"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/gitbackup.rb",
  "ruby_source_checksum": {
    "sha256": "49a6a7ff3e47d15af591f39a10401ac86a5c842b786931616a4d0e9398eee6b1"
  },
  "date_added": "2021-05-17T07:14:05+00:00",
  "readme": "# gitbackup - Backup your GitHub, GitLab, and Bitbucket repositories\nCode Quality [![Go Report Card](https://goreportcard.com/badge/github.com/amitsaha/gitbackup)](https://goreportcard.com/report/github.com/amitsaha/gitbackup)\n[![.github/workflows/ci.yml](https://github.com/amitsaha/gitbackup/actions/workflows/ci.yml/badge.svg)](https://github.com/amitsaha/gitbackup/actions/workflows/ci.yml)\n\n- [gitbackup - Backup your GitHub, GitLab, and Bitbucket repositories](#gitbackup---backup-your-github-gitlab-and-bitbucket-repositories)\n  - [Introduction](#introduction)\n  - [Installing `gitbackup`](#installing-gitbackup)\n  - [Using `gitbackup`](#using-gitbackup)\n    - [GitHub Specific oAuth App Flow](#github-specific-oauth-app-flow)\n    - [OAuth Scopes/Permissions required](#oauth-scopespermissions-required)\n      - [Bitbucket](#bitbucket)\n      - [GitHub](#github)\n      - [GitLab](#gitlab)\n    - [Security and credentials](#security-and-credentials)\n    - [Examples](#examples)\n      - [Backing up your GitHub repositories](#backing-up-your-github-repositories)\n      - [Backing up your GitLab repositories](#backing-up-your-gitlab-repositories)\n      - [GitHub Enterprise or custom GitLab installation](#github-enterprise-or-custom-gitlab-installation)\n      - [Backing up your Bitbucket repositories](#backing-up-your-bitbucket-repositories)\n      - [Specifying a backup location](#specifying-a-backup-location)\n      - [Cloning bare repositories](#cloning-bare-repositories)\n      - [GitHub Migrations](#github-migrations)\n  - [Building](#building)\n  \n## Introduction\n\n``gitbackup`` is a tool to backup your git repositories from GitHub (including GitHub enterprise),\nGitLab (including custom GitLab installations), or Bitbucket.\n\n``gitbackup`` currently has two operation modes:\n\n- The first and original operating mode is to create clones of only your git repository. This is supported for Bitbucket, GitHub and Gitlab.\n- The second operating mode is only available for GitHub where you can create a user migration (including orgs) which you get back as a .tar.gz\n  file containing all the artefacts that GitHub supports via their Migration API.\n  \nIf you are following along my [Linux Journal article](https://www.linuxjournal.com/content/back-github-and-gitlab-repositories-using-golang) (published in 2017), please obtain the version of the \nsource tagged with [lj-0.1](https://github.com/amitsaha/gitbackup/releases/tag/lj-0.1).\n\n## Installing `gitbackup`\n\nBinary releases are available from the [Releases](https://github.com/amitsaha/gitbackup/releases/) page. Please download the binary corresponding to your OS\nand architecture and copy the binary somewhere in your ``$PATH``. It is recommended to rename the binary to `gitbackup` or `gitbackup.exe` (on Windows).\n\nIf you are on MacOS, a community member has created a [Homebrew formula](https://formulae.brew.sh/formula/gitbackup).\n\n## Using `gitbackup`\n\n``gitbackup`` requires a [GitHub API access token](https://github.com/blog/1509-personal-api-tokens) for\nbacking up GitHub repositories, a [GitLab personal access token](https://gitlab.com/profile/personal_access_tokens)\nfor GitLab repositories, and a username and [app password](https://bitbucket.org/account/settings/app-passwords/) for\nBitbucket repositories.\n\nYou can supply the tokens to ``gitbackup`` using ``GITHUB_TOKEN`` and ``GITLAB_TOKEN`` environment variables\nrespectively, and the Bitbucket credentials with ``BITBUCKET_USERNAME`` and ``BITBUCKET_PASSWORD``.\n\n### GitHub Specific oAuth App Flow\n\nStarting with the 0.6 release, if you run `gitbackup` without specifying `GITHUB_TOKEN`, it will prompt you to complete\na oAuth flow to grant the necessary access:\n\n```\n$ ./gitbackup -service github -github.repoType starred\nCopy code: <some code>\nthen open: https://github.com/login/device\n```\nOnce your authorize the app, `gitbackup` will retrieve the token, and also store it in your operating system's\nkeychain/keyring (using the [99designs/keyring](https://github.com/99designs/keyring) package - thanks!). Next\ntime you run it, it will ask you for the keyring password and retrieve the token automatically.\n\n\n### OAuth Scopes/Permissions required\n\n#### Bitbucket\n\nFor the App password, the following permissions are required:\n\n- `Account:Read`\n- `Repositories:Read`\n\n#### GitHub\n\n- `repo`: Reading repositories, including private repositories\n- `user` and `admin:org`: Basically, this gives `gitbackup` a lot of permissions than you may be comfortable with. \n   However, these are required for the user migration and org migration operations.\n\n#### GitLab\n\n- `api`: Grants complete read/write access to the API, including all groups and projects.\nFor some reason, `read_user` and `read_repository` is not sufficient.\n\n### Security and credentials\n\nWhen you provide the tokens via environment variables, they remain accessible in your shell history \nand via the processes' environment for the lifetime of the process. By default, SSH authentication\nis used to clone your repositories. If `use-https-clone` is specified, private repositories\nare cloned via `https` basic auth and the token provided will be stored  in the repositories' \n`.git/config`.\n\n### Examples\n\nTyping ``-help`` will display the command line options that `gitbackup` recognizes:\n\n```\n$ gitbackup -help\nUsage of ./gitbackup:\n  -backupdir string\n        Backup directory\n  -bare\n        Clone bare repositories\n  -githost.url string\n        DNS of the custom Git host\n  -github.createUserMigration\n        Download user data\n  -github.createUserMigrationRetry\n        Retry creating the GitHub user migration if we get an error (default true)\n  -github.createUserMigrationRetryMax int\n        Number of retries to attempt for creating GitHub user migration (default 5)\n  -github.listUserMigrations\n        List available user migrations\n  -github.namespaceWhitelist string\n        Organizations/Users from where we should clone (separate each value by a comma: 'user1,org2')\n  -github.repoType string\n        Repo types to backup (all, owner, member, starred) (default \"all\")\n  -github.waitForUserMigration\n        Wait for migration to complete (default true)\n  -gitlab.projectMembershipType string\n        Project type to clone (all, owner, member, starred) (default \"all\")\n  -gitlab.projectVisibility string\n        Visibility level of Projects to clone (internal, public, private) (default \"internal\")\n  -ignore-fork\n        Ignore repositories which are forks\n  -ignore-private\n        Ignore private repositories/projects\n  -service string\n        Git Hosted Service Name (github/gitlab/bitbucket)\n  -use-https-clone\n        Use HTTPS for cloning instead of SSH\n```\n\n#### Backing up your GitHub repositories\n\nTo backup all your own GitHub repositories to the default backup directory (``$HOME/.gitbackup/``):\n\n```lang=bash\n$ GITHUB_TOKEN=secret$token gitbackup -service github\n```\n\nTo backup only the GitHub repositories which you are the \"owner\" of:\n\n```lang=bash\n$ GITHUB_TOKEN=secret$token gitbackup -service github -github.repoType owner\n```\n\nTo backup only the GitHub repositories which you are the \"member\" of:\n\n```lang=bash\n$ GITHUB_TOKEN=secret$token gitbackup -service github -github.repoType member\n```\n\nSeparately, to backup GitHub repositories you have starred:\n\n```lang=bash\n$ GITHUB_TOKEN=secret$token gitbackup -service github -github.repoType starred\n```\n\nAdditionally, to backup only the GitHub repositories under 'user1' and 'org3':\n\n```lang=bash\n$ GITHUB_TOKEN=secret$token gitbackup -service github -github.namespaceWhitelist \"user1,org3\"\n```\n\n#### Backing up your GitLab repositories\n\nTo backup all projects you either own or are a member of which have their [visibility](https://docs.gitlab.com/ce/api/projects.html#project-visibility-level) set to\n\"internal\" on ``https://gitlab.com`` to the default backup directory (``$HOME/.gitbackup/``):\n\n```lang=bash\n$ GITLAB_TOKEN=secret$token gitbackup -service gitlab\n```\n\nTo backup only the GitLab projects (either you are an owner or member of) which are \"public\"\n\n```lang=bash\n$ GITLAB_TOKEN=secret$token gitbackup -service gitlab -gitlab.projectVisibility public\n```\n\nTo backup only the private repositories (either you are an owner or member of):\n\n```lang=bash\n$ GITLAB_TOKEN=secret$token gitbackup -service gitlab -gitlab.projectVisibility private\n```\n\nTo backup public repositories which you are an owner of:\n\n```lang=bash\n$ GITLAB_TOKEN=secret$token gitbackup \\\n    -service gitlab \\\n    -gitlab.projectVisibility public \\\n    -gitlab.projectMembershipType owner\n```\n\nTo backup public repositories which you are an member of:\n\n```lang=bash\n$ GITLAB_TOKEN=secret$token gitbackup \\\n    -service gitlab \\\n    -gitlab.projectVisibility public \\\n    -gitlab.projectMembershipType member\n```\n\nTo backup GitLub repositories you have starred:\n\n```lang=bash\n$ GITLAB_TOKEN=secret$token gitbackup -service gitlab \\\n  -gitlab.projectMembershipType starred \\\n  -gitlab.projectVisibility public\n```\n\n#### GitHub Enterprise or custom GitLab installation\n\nTo specify a custom GitHub enterprise or GitLab location, specify the ``service`` as well as the\nthe ``githost.url`` flag, like so\n\n```lang=bash\n$ GITLAB_TOKEN=secret$token gitbackup -service gitlab -githost.url https://git.yourhost.com\n```\n\n#### Backing up your Bitbucket repositories\n\nTo backup all your Bitbucket repositories to the default backup directory (``$HOME/.gitbackup/``):\n\n```lang=bash\n$ BITBUCKET_USERNAME=username BITBUCKET_PASSWORD=password gitbackup -service bitbucket\n```\n\n#### Specifying a backup location\n\nTo specify a custom backup directory, we can use the ``backupdir`` flag:\n\n```lang=bash\n$ GITHUB_TOKEN=secret$token gitbackup -service github -backupdir /data/\n```\n\nThis will create a ``github.com`` directory in ``/data`` and backup all your repositories there instead.\nSimilarly, it will create a ``gitlab.com`` directory, if you are backing up repositories from ``gitlab``, and a\n``bitbucket.com`` directory if you are backing up from Bitbucket.\nIf you have specified a Git Host URL, it will create a directory structure ``data/host-url/``.\n\n\n#### Cloning bare repositories\n\nTo clone bare repositories, we can use the ``bare`` flag:\n\n```lang=bash\n$ GITHUB_TOKEN=secret$token gitbackup -service github -bare\n```\n\nThis will create a directory structure like ``github.com/org/repo.git`` containing bare repositories.\n\n#### GitHub Migrations\n\n`gitbackup` starting from the 0.6 release includes support for downloading your user data/organization data as \nmade available via the [Migrations API](https://docs.github.com/en/rest/reference/migrations). As of this\nrelease, you can create an user migration (including your owned organizations data) and download the migration\nartefact using the following command:\n\n```\n$ ./gitbackup -service github -github.createUserMigration -ignore-fork -github.repoType owner\n\n2021/05/14 05:05:27 /home/runner/.gitbackup/github.com doesn't exist, creating it\n2021/05/14 05:05:35 Creating a user migration for 129 repos\n2021/05/14 05:05:46 Waiting for migration state to be exported: 0xc0002a6260\n2021/05/14 05:06:48 Waiting for migration state to be exported: 0xc000290070\n..\n2021/05/14 05:33:44 Waiting for migration state to be exported: 0xc0001c2020\n\n2021/05/14 05:34:46 Downloading file to: /home/runner/.gitbackup/github.com/user-migration-571089.tar.gz\n\n2021/05/14 05:35:00 Creating a org migration (FedoraScientific) for 19 repos\n2021/05/14 05:35:03 Waiting for migration state to be exported: 0xc000144050\n..\n2021/05/14 05:39:05 Downloading file to: /home/runner/.gitbackup/github.com/FedoraScientific-migration-571098.tar.gz\n..\n2021/05/14 05:46:16 Downloading file to: /home/runner/.gitbackup/github.com/practicalgo-migration-571103.tar.gz\n```\nYou can then integrate this with your own scripting to push the data to S3 for example (See an example\nworkflow via scheduled github actions [here](https://github.com/amitsaha/gitbackup/actions/workflows/backup.yml)).\n\n## Building\n\nIf you have Go 1.19.x installed, you can clone the repository and:\n\n```\n$ go build\n```\n\nThe built binary will be ``gitbackup``."
}
