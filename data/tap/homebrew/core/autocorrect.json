{
  "name": "autocorrect",
  "full_name": "autocorrect",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Linter and formatter to improve copywriting, correct spaces, words between CJK",
  "license": "MIT",
  "homepage": "https://github.com/huacnlee/autocorrect",
  "versions": {
    "stable": "2.6.2",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/huacnlee/autocorrect/archive/v2.6.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "550d94c3e465a0827a86bdfa23fa82c84a5ddf08fd9e9efb5e45f788bfa65b27"
    },
    "head": {
      "url": "https://github.com/huacnlee/autocorrect.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/autocorrect/blobs/sha256:194977e0bfb23bcdc6dd19d8cb9047ef3fd1c2a4bc6b04da736ef33efe0fddef",
          "sha256": "194977e0bfb23bcdc6dd19d8cb9047ef3fd1c2a4bc6b04da736ef33efe0fddef"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/autocorrect/blobs/sha256:67b3957215582cb1aade0a41410596ed1c7311f273e755c54edd889fb1d84a9b",
          "sha256": "67b3957215582cb1aade0a41410596ed1c7311f273e755c54edd889fb1d84a9b"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/autocorrect/blobs/sha256:8efb4adf7d8620d709f3c36dd537641038dbc54f5ec56d6215ce76e2b04592b6",
          "sha256": "8efb4adf7d8620d709f3c36dd537641038dbc54f5ec56d6215ce76e2b04592b6"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/autocorrect/blobs/sha256:dc96b1b9e519d30696a772d24653f9fa6a02902923a862e85a2396dbba2b1f5a",
          "sha256": "dc96b1b9e519d30696a772d24653f9fa6a02902923a862e85a2396dbba2b1f5a"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/autocorrect/blobs/sha256:915d064c7a2e498332fcda6aee031ab0b8d27cd40e45c33741bcdf62b7bef831",
          "sha256": "915d064c7a2e498332fcda6aee031ab0b8d27cd40e45c33741bcdf62b7bef831"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/autocorrect/blobs/sha256:65f443c9a5bd920caa438da95245dccd33d2f77112a41945f8bf4ed2a58b8434",
          "sha256": "65f443c9a5bd920caa438da95245dccd33d2f77112a41945f8bf4ed2a58b8434"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/autocorrect/blobs/sha256:42c145ed2db0c307a8f46961c717b2aebfebf32e813f0d1d8fc74a45ad5e88cc",
          "sha256": "42c145ed2db0c307a8f46961c717b2aebfebf32e813f0d1d8fc74a45ad5e88cc"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "2706c66e8def3eeba4d9bf1adf66221c8ad70701",
  "ruby_source_path": "Formula/autocorrect.rb",
  "ruby_source_checksum": {
    "sha256": "6a9766667f2e772f7da47dc8ef639edf6888d5c7fff9848ad045b8faca9c017b"
  },
  "date_added": "2022-09-30T20:43:38+00:00",
  "readme": "<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/5518/194691346-13856309-266b-4bf6-b505-5a8b15d0c02e.png\"\n    alt=\"AutoCorrect Icon\" width=\"128\" height=\"128\" />\n  <h1 align=\"center\">AutoCorrect</h1>\n  <p align=\"center\">\n    <a href=\"https://github.com/huacnlee/autocorrect/actions?query=workflow%3ACI\"><img src=\"https://github.com/huacnlee/autocorrect/workflows/CI/badge.svg\" alt=\"Go\"></a>\n    <a href=\"https://github.com/huacnlee/autocorrect/releases\"><img src=\"https://img.shields.io/github/v/release/huacnlee/autocorrect?label=CLI&color=blue\" alt=\"GitHub release (latest by date)\"></a>\n    <a href=\"https://hub.docker.com/r/huacnlee/autocorrect\"><img src=\"https://img.shields.io/docker/v/huacnlee/autocorrect?label=Docker&color=blue\" alt=\"Docker Image Version (latest server)\"></a>\n    <a href=\"https://crates.io/crates/autocorrect\"><img src=\"https://img.shields.io/crates/v/autocorrect?color=1t&label=Crate\" alt=\"Crates.io\"></a>\n    <a href=\"https://www.npmjs.com/package/@huacnlee/autocorrect\"><img src=\"https://img.shields.io/npm/v/@huacnlee/autocorrect?color=1t&label=NPM\" alt=\"NPM\"></a>\n    <a href=\"https://pypi.org/project/autocorrect-py/\"><img src=\"https://img.shields.io/pypi/v/autocorrect-py?color=1&label=PyPI\" alt=\"PyPI version\"></a>\n    <a href=\"https://rubygems.org/gems/autocorrect-rb\"><img src=\"https://img.shields.io/gem/v/autocorrect-rb?color=1&label=Gem\" alt=\"Gem Version\"></a>\n    <a href=\"https://repo1.maven.org/maven2/io/github/huacnlee/autocorrect-java/\"><img alt=\"Maven Central\" src=\"https://img.shields.io/maven-central/v/io.github.huacnlee/autocorrect-java?color=1&label=Maven\"></a>\n  </p>\n</p>\n\n> 🎯 AutoCorrect 的愿景是提供一套标准化的文案较正方案。以便于在各类场景（例如：撰写书籍、文档、内容发布、项目源代码...）里面应用，让使用者轻松实现标准化、专业化的文案输出 / 校正。\n\nAutoCorrect is a linter and formatter to help you to improve copywriting, correct spaces, words, and punctuations between CJK (Chinese, Japanese, Korean).\n\nLike Eslint, Rubocop and Gofmt ..., AutoCorrect allows us to check source code, and output as colorized diff with corrected suggestions. You can integrate to CI (GitLab CI, GitHub Action, Travis CI....) for use to check the contents in source code. Recognize the file name, and find out the strings and the comment part.\n\nAutoCorrect 是一个基于 Rust 编写的工具，用于「自动纠正」或「检查并建议」文案，给 CJK（中文、日语、韩语）与英文混写的场景，补充正确的空格，纠正单词，同时尝试以安全的方式自动纠正标点符号等等。\n\n类似 ESlint、Rubocop、Gofmt 等工具，AutoCorrect 可以用于 CI 环境，它提供 Lint 功能，能便捷的检测出项目中有问题的文案，起到统一规范的作用。\n\n支持各种类型源代码文件，能自动识别文件名，并准确找到字符串、注释做自动纠正。\n\n> 此方案最早于 [2013 年](https://github.com/huacnlee/auto-correct/commit/47d7b7836f3e5f97dd31b5dc477eb0dbf8176e6b) 出现于 Ruby China 的项目，并逐步完善规则细节，当前准确率较高（极少数异常情况），你可以放心用来辅助你完成自动纠正动作。\n\n<img width=\"920\" alt=\"autocorrect lint output\" src=\"https://user-images.githubusercontent.com/5518/192738752-89a9e4f5-75cb-40af-b84d-04889d22e834.png\">\n\n## Features\n\n- Add spacing between CJK (Chinese, Japanese, Korean) and English words.\n- Correct punctuations into full-width near the CJK.\n- Correct punctuations into half-width in English content.\n- (Experimental) Spellcheck and correct words with your dictionary.\n- Lint checking and output diff or JSON result, so you can integrate everywhere (GitLab CI, GitHub Action, VS Code, Vim, Emacs...)\n- Allows using `.gitignore` or `.autocorrectignore` to ignore files that you want to ignore.\n- Support more than [28 file types](https://github.com/huacnlee/autocorrect/tree/main/autocorrect/grammar) (Markdown, JSON, YAML, JavaScript, HTML ...), use AST parser to only check for strings, and comments.\n- Cross-platform for Linux, macOS, Windows, and WebAssembly, and as Native SDK for programming (Node.js, JavaScript Browser, Ruby, Python, Java).\n\n## 典型应用场景\n\n- 撰写书籍、文档，新闻媒体等内容发布，应用于 Markdown、AsciiDoc、HTML 等文档场景，确保文案的标准化、专业化（案例：[MDN 项目](https://github.com/mdn/translated-content/pulls?q=is%3Apr+is%3Aclosed+author%3Ahuacnlee)、[少数派](https://sspai.com/search/post/AutoCorrect)）。\n- 集成 GitLab CI、GitHub Action、Travis CI 等 CI 环境，需要对项目进行自动化检查。\n- 集成到 Docusaurus、Hexo、Hugo、Jekyll、Gatsby 等静态网站生成器，在生成的时候自动格式化。\n- 利用语言支持的 SDK 集成到应用程序，在存储或输出网站内容的时候格式化，提升网站品质（如：[Ruby China](https://ruby-china.org)、[V2EX](https://www.v2ex.com)、[Longbridge](https://longportapp.com/news)）。\n- 作为 VS Code、Intellij Platform IDE（已支持）、Vim、Emacs (待实现) 插件，需要对文案进行检查（Linter & Formatter），依靠 LintResult 给出的（Annotator、Diagnostic）提示。\n- 基于 [WebAssembly](https://www.npmjs.com/package/@huacnlee/autocorrect) 实现，作为 Chrome、Safari 等浏览器插件，应用于任何网站（待实现）\n- 也可以集成到 WYSIWYG Editor 里面，例如（ProseMirror、CKEditor、Slate、Draft.js、Tiptap、Monaco Editor、CodeMirror 等）。\n\n## Installation\n\n```bash\n$ brew install autocorrect\n```\n\nOr you can just install it via this:\n\n```bash\n$ curl -sSL https://git.io/JcGER | sh\n```\n\nAfter that, you will get `autocorrect` command.\n\n```bash\n$ autocorrect -V\nAutoCorrect 2.4.0\n```\n\nOr install NPM:\n\n```bash\n$ yarn add autocorrect-node\n$ yarn autocorrect -V\n```\n\n## Upgrade\n\n> Since: 1.9.0\n\nAutoCorrect allows you to upgrade itself by `autocorrect update` command.\n\n```bash\n$ autocorrect update\n```\n\n> NOTE: This command need you input your password, because it will install bin into `/usr/local/bin` directory.\n\n## Usage\n\n- [Use in CLI](#use-in-cli)\n- [Use in NPM](#use-in-npm)\n- [Configuration](#configuration)\n- [VS Code Extension](#vs-code-extension)\n- [Intellij Platform Plugin](#intellij-platform-plugin)\n- [GitHub Action](#github-action)\n- [GitLab CI](#gitlab-ci)\n- [Work with ReviewDog](#work-with-reviewdog)\n- [Use for programming](#use-for-programming)\n\n### Use in CLI\n\n```bash\n$ autocorrect text.txt\n你好 Hello 世界\n\n$ echo \"hello世界\" | autocorrect --stdin\nhello 世界\n\n$ autocorrect --fix text.txt\n$ autocorrect --fix zh-CN.yml\n$ autocorrect --fix\n```\n\n#### Lint\n\n```bash\n$ autocorrect --lint --format json text.txt\n\n$ autocorrect --lint text.txt\n```\n\n```diff\nError: 1, Warning: 0\n\ntext.txt:1:3\n-你好Hello世界\n+你好 Hello 世界\n```\n\nYou also can lint multiple files:\n\n```bash\n$ autocorrect --lint\n```\n\nHow to lint all changed files in Git:\n\n```bash\n$ git diff --name-only | xargs autocorrect --lint\n```\n\n### Use in NPM\n\n> since: 2.7.0\n\nAutoCorrect has been published in NPM with CLI command support. If you want to use it in Frontend or Node.js project, you can just install `autocorrect-node` package for without install AutoCorrect bin.\n\n```bash\ncd your-project\nyarn add autocorrect-node\n```\n\nNow you can run `yarn autocorrect` command in your project. This command is same as `autocorrect` command.\n\n```bash\n$ yarn autocorrect -h\n```\n\nMore docs: [autocorrect-node/README.md](autocorrect-node/README.md)\n\n### Configuration\n\n> Default config: [.autocorrect.default](https://github.com/huacnlee/autocorrect/blob/main/autocorrect/.autocorrectrc.default)\n\n```bash\n$ autocorrect init\nAutoCorrect init config: .autocorrectrc\n```\n\n> NOTE: If you download fail, try to use `autocorrect init --local` command again.\n\nNow the `.autocorrectrc` file has been created.\n\n> .autocorrectrc is allows use YAML, JSON format.\n\nConfig file example:\n\n```yml\n# yaml-language-server: $schema=https://huacnlee.github.io/autocorrect/schema.json\n# Config rules\nrules:\n  # Auto add spacing between CJK (Chinese, Japanese, Korean) and English words.\n  # 0 - off, 1 - error, 2 - warning\n  space-word: 1\n  # Add space between some punctuations.\n  space-punctuation: 1\n  # Add space between brackets (), [] when near the CJK.\n  space-bracket: 1\n  # Convert to fullwidth.\n  fullwidth: 1\n  # To remove space near the fullwidth.\n  no-space-fullwidth: 1\n  # Fullwidth alphanumeric characters to halfwidth.\n  halfwidth-word: 1\n  # Fullwidth punctuations to halfwidth in english.\n  halfwidth-punctuation: 1\n  # Spellcheck\n  spellcheck: 2\ntextRules:\n  # Config special rules for some texts\n  # For example, if we wants to let \"Hello你好\" just warning, and \"Hi你好\" to ignore\n  # \"Hello你好\": 2\n  # \"Hi你好\": 0\nfileTypes:\n  # Config the files associations, you config is higher priority than default.\n  # \"rb\": ruby\n  # \"Rakefile\": ruby\n  # \"*.js\": javascript\n  # \".mdx\": markdown\nspellcheck:\n  # Correct Words (Case insensitive) for by Spellcheck\n  words:\n    - GitHub\n    - App Store\n    # This means \"appstore\" into \"App Store\"\n    - AppStore = App Store\n    - Git\n    - Node.js\n    - nodejs = Node.js\n    - VIM\n    - DNS\n    - HTTP\n    - SSL\n```\n\n#### Ignore option\n\n> Since: 2.2.0\n\nWhen you want to config some special words or texts to ignore on format or lint.\n\nThe `textRules` config may help you.\n\nFor example, we want:\n\n- `Hello世界` - To just give a warning.\n- `Hi你好` - To ignore.\n\nUse can config:\n\n```yml\ntextRules:\n  Hello世界: 2\n  Hi你好: 0\n```\n\nAfter that, AutoCorrect will follow your `textRules` to process.\n\n#### Ignore files\n\n**Use `.autocorrectignore` to ignore files**\n\nSometimes, you may want to ignore some special files that not want to check.\n\nBy default, the file matched `.gitignore` rule will be ignored.\n\nYou can also use `.autocorrectignore` to ignore other files, format like `.gitignore`.\n\n#### Disable by inline comment\n\nIf you just want to disable some special lines in a file, you can write a comment `autocorrect-disable`,\nwhen AutoCorrect matched the comment include that, it will disable temporarily.\n\nAnd then, you can use `autocorrect-enable` to reopen it again.\n\nFor example, in JavaScript:\n\n```js\nfunction hello() {\n  // autocorrect-disable\n  console.log('现在这行开始autocorrect会暂时禁用');\n  console.log('这行也是disable的状态');\n  // autocorrect-enable\n  let a = '现在起autocorrect回到了启用的状态';\n}\n```\n\nThe output will:\n\n```js\nfunction hello() {\n  // autocorrect-disable\n  console.log('现在这行开始autocorrect会暂时禁用');\n  console.log('这行也是disable的状态');\n  // autocorrect-enable\n  let a = '现在起 autocorrect 回到了启用的状态';\n}\n```\n\n#### Disable some rules\n\n> Since: 2.0\n\nYou can use `autocorrect-disable <rule>` in a comment to disable some rules.\n\n> Rule names please see: [Configuration](#configuration)\n\n```js\nfunction hello() {\n  // autocorrect-disable space-word\n  console.log('现在这行开始autocorrect会暂时禁用.');\n  // autocorrect-disable fullwidth\n  console.log('这行也是disable的状态.');\n  // autocorrect-enable\n  let a = '现在起autocorrect回到了启用的状态.';\n}\n```\n\nWill get:\n\n```js\nfunction hello() {\n  // autocorrect-disable space-word\n  console.log('现在这行开始autocorrect会暂时禁用。');\n  // autocorrect-disable fullwidth, space-word\n  console.log('这行也是disable的状态.');\n  // autocorrect-enable\n  let a = '现在起 autocorrect 回到了启用的状态。';\n}\n```\n\n### VS Code Extension\n\n[![Install Extension](https://img.shields.io/badge/Install%20Extension-VS%20Code-brightgreen)](https://marketplace.visualstudio.com/items?itemName=huacnlee.autocorrect)\n\nhttps://marketplace.visualstudio.com/items?itemName=huacnlee.autocorrect\n\n内置 Visual Studio Code 插件，安装后会将 AutoCorrect 和 Visual Studio Code 完整集成，可以达到「保存自动格式化」或「纠正提示」。\n\n如下图：\n\n<img width=\"900\" alt=\"AutoCorrect for VS Code Extension\" src=\"https://user-images.githubusercontent.com/5518/191890126-4e0c99dc-91ce-4262-a774-3813a636eea1.png\">\n\n### Intellij Platform Plugin\n\n[![](https://img.shields.io/badge/Plugin-Intellij%20Platform-brightgreen)](https://plugins.jetbrains.com/plugin/20244-autocorrect)\n\n<img width=\"900\" alt=\"AutoCorrect for Intellij Platform Plugin\" src=\"https://user-images.githubusercontent.com/5518/198998494-82d017f1-40c1-4622-b13f-f67cfecd284a.png\">\n\nhttps://github.com/huacnlee/autocorrect-idea-plugin\n\n### GitHub Action\n\nhttps://github.com/huacnlee/autocorrect-action\n\nAdd to your `.github/workflows/ci.yml`\n\n```yml\nsteps:\n  - name: Check source code\n    uses: actions/checkout@v3\n\n  - name: AutoCorrect\n    uses: huacnlee/autocorrect-action@main\n```\n\n### GitLab CI\n\nAdd to your `.gitlab-ci.yml`, to use [huacnlee/autocorrect](https://hub.docker.com/r/huacnlee/autocorrect) Docker image to check.\n\n```yml\nautocorrect:\n  stage: build\n  image: huacnlee/autocorrect:latest\n  script:\n    - autocorrect --lint\n  # Enable allow_failure if you wants.\n  # allow_failure: true\n```\n\n### Work with ReviewDog\n\n> Since: 2.8.0\n\nAutoCorrect can work with [reviewdog](https://github.com/reviewdog/reviewdog), so you can use it in CI/CD. ReviewDog will post a comment to your PR with the AutoCorrect change suggestions. Then the PR committer can easy to accept the suggestions.\n\nUse `--format rdjson` option to output the lint results as the [reviewdog](https://github.com/reviewdog/reviewdog) supported format.\n\n```bash\nautocorrect --lint --format rdjson | reviewdog -f=rdjson -reporter=github-pr-review\n```\n\nUse [huacnlee/autocorrect-action](https://github.com/huacnlee/autocorrect-action) can help you setup GitHub Action.\n\n<img src=\"https://user-images.githubusercontent.com/5518/257680682-050d6f62-d461-44fc-a22f-2fb581ba0912.png\" width=\"640\" />\n\n### Use for programming\n\nAutoCorrect makes for support use in many programming languages.\n\n- Rust - [autocorrect](https://github.com/huacnlee/autocorrect)\n- Ruby - [autocorrect-rb](https://github.com/huacnlee/autocorrect/tree/main/autocorrect-rb)\n- Go - [autocorrect-go](https://github.com/longbridgeapp/autocorrect)\n- Python - [autocorrect-py](https://github.com/huacnlee/autocorrect/tree/main/autocorrect-py)\n- Node.js - [autocorrect-node](https://github.com/huacnlee/autocorrect/tree/main/autocorrect-node)\n- JavaScript (Browser) - [autocorrect-wasm](https://github.com/huacnlee/autocorrect/tree/main/autocorrect-wasm)\n- Java - [autocorrect-java](https://github.com/huacnlee/autocorrect/tree/main/autocorrect-java)\n\n## Benchmark\n\n> MacBook Pro (13-inch, M1, 2020)\n\nUse `make bench` to run benchmark tests.\n\nSee [autocorrect/src/benches/example.rs](https://github.com/huacnlee/autocorrect/blob/main/autocorrect/src/benches/example.rs) for details.\n\n```bash\nformat_050              time:   [10.003 µs 10.013 µs 10.024 µs]\nformat_100              time:   [18.511 µs 18.550 µs 18.597 µs]\nformat_400              time:   [60.089 µs 60.216 µs 60.461 µs]\nformat_html             time:   [220.68 µs 220.91 µs 221.18 µs]\nhalfwidth_english       time:   [3.2353 µs 3.2452 µs 3.2545 µs]\nformat_json             time:   [55.620 µs 55.658 µs 55.695 µs]\nformat_javascript       time:   [108.63 µs 108.70 µs 108.79 µs]\nformat_json_2k          time:   [9.3879 ms 9.4871 ms 9.6541 ms]\nformat_jupyter          time:   [86.660 µs 86.743 µs 86.830 µs]\nformat_markdown         time:   [1.0007 ms 1.0123 ms 1.0285 ms]\nspellcheck_50           time:   [1.9177 µs 1.9422 µs 1.9766 µs]\nspellcheck_100          time:   [3.5868 µs 3.5909 µs 3.5950 µs]\nspellcheck_400          time:   [14.873 µs 14.974 µs 15.110 µs]\nlint_markdown           time:   [1.1195 ms 1.1205 ms 1.1215 ms]\nlint_json               time:   [67.764 µs 68.341 µs 69.137 µs]\nlint_html               time:   [280.87 µs 281.44 µs 282.20 µs]\nlint_javascript         time:   [123.99 µs 125.50 µs 128.38 µs]\nlint_yaml               time:   [433.41 µs 441.09 µs 452.74 µs]\nlint_to_json            time:   [1.8391 ms 1.8428 ms 1.8476 ms]\nlint_to_diff            time:   [1.8632 ms 1.8801 ms 1.9030 ms]\n```\n\n### Real world benchmark\n\nWith [MDN Translated Content](https://github.com/mdn/translated-content) project, it has about 30K files.\n\n```bash\n~/work/translated-content $ autocorrect --fix\nAutoCorrect spend time: 8402.538ms\n```\n\n## Other Extensions\n\nThe other implementations from the community.\n\n- [prettier-plugin-autocorrect](https://github.com/un-ts/prettier/tree/master/packages/autocorrect)\n- [autocorrect-popclip](https://github.com/TomBener/autocorrect-popclip)\n- [autocorrect-markdown.vim](https://github.com/aisensiy/dotfiles/blob/master/nvim/after/ftplugin/markdown.vim)\n\n## User cases\n\n- [MDN Web Docs](https://developer.mozilla.org/zh-CN)\n- [Apache APISIX](https://apisix.apache.org/zh)\n- [Rust Book CN](https://kaisery.github.io/trpl-zh-cn)\n- [Ruby China](https://ruby-china.org)\n- [JuiceFS](https://juicefs.com)\n\n## License\n\nThis project under MIT license."
}
