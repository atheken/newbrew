{
  "name": "procyon-decompiler",
  "full_name": "procyon-decompiler",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Modern decompiler for Java 5 and beyond",
  "license": "Apache-2.0",
  "homepage": "https://github.com/mstrobel/procyon",
  "versions": {
    "stable": "0.6.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/mstrobel/procyon/releases/download/v0.6.0/procyon-decompiler-0.6.0.jar",
      "tag": null,
      "revision": null,
      "checksum": "821da96012fc69244fa1ea298c90455ee4e021434bc796d3b9546ab24601b779"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/procyon-decompiler/blobs/sha256:ee55d23c048aa221e0f2c76eaa0ac264f83b0ac6ebf7388479878cc387fad122",
          "sha256": "ee55d23c048aa221e0f2c76eaa0ac264f83b0ac6ebf7388479878cc387fad122"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "openjdk"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/procyon-decompiler.rb",
  "ruby_source_checksum": {
    "sha256": "a3019a59cd3fd4d6fdac82820dd66ea813d7e8a6e8ebafe9335bd4f3234d10bc"
  },
  "date_added": "2015-06-26T21:18:22+01:00",
  "readme": "![](https://mstrobel.github.io/procyon/procyon.png)\r\n\r\n*Procyon* is a suite of Java metaprogramming tools focused on code generation and analysis.  It includes the following libraries:\r\n\r\n  1. Core Framework\r\n  2. [Reflection Framework](https://github.com/mstrobel/procyon/wiki/Reflection-Framework)\r\n  3. [Expressions Framework](https://github.com/mstrobel/procyon/wiki/Expressions-Framework)\r\n  4. Compiler Toolset (Experimental)\r\n  5. [Java Decompiler](https://github.com/mstrobel/procyon/wiki/Java-Decompiler) (Experimental)\r\n\r\nThe Procyon libraries are available from **Maven Central** under group ID `org.bitbucket.mstrobel`.\r\n\r\n### Core Framework\r\n\r\nThe `procyon-core` framework contains common support classes used by the other Procyon APIs.  Its facilities include string manipulation, collection extensions, filesystem/path utilities, freezable objects and collections, attached data stores, and some runtime type helpers.\r\n\r\n### Reflection Framework\r\nThe `procyon-reflection` framework provides a rich reflection and code generation API with full support for generics, wildcards, and other high-level Java type concepts.  It is based on .NET's `System.Reflection` and `System.Reflection.Emit` APIs and is meant to address many of the shortcomings of the core Java reflection API, which offers rather limited and cumbersome support for generic type inspection.  Its code generation facilities include a `TypeBuilder`, `MethodBuilder`, and a bytecode emitter.\r\n\r\nFor more information, see the [Reflection Framework](https://github.com/mstrobel/procyon/wiki/Reflection-Framework) topic.\r\n\r\n#### Example\r\n\r\n```java\r\nfinal Type<Map> map = Type.of(Map.class);\r\nfinal Type<?> rawMap = map.getErasedType();\r\nfinal Type<Map<String, Integer>> boundMap = map.makeGenericType(Types.String, Types.Integer);\r\n\r\nSystem.out.println(map.getDeclaredMethods().get(1));\r\nSystem.out.println(rawMap.getDeclaredMethods().get(1));\r\nSystem.out.println(boundMap.getDeclaredMethods().get(1));\r\n\r\nSystem.out.println(boundMap.getGenericTypeParameters());\r\nSystem.out.println(boundMap.getTypeArguments());\r\n```\r\n\r\n#### Output\r\n\r\n```text\r\npublic abstract V put(K, V)\r\npublic abstract Object put(Object, Object)\r\npublic abstract Integer put(String, Integer)\r\n[K, V]\r\n[java.lang.String, java.lang.Integer]\r\n```\r\n\r\n### Expressions Framework\r\n\r\nThe `procyon-expressions` framework provides a more natural form of code generation.\r\nRather than requiring bytecode to be emitted directly, as with `procyon-reflection`\r\nand other popular libraries like ASM, `procyon-expressions` enables code composition\r\nusing declarative expression trees.  These expression trees may then be compiled directly\r\ninto callbacks or coupled with a `MethodBuilder`.  The `procyon-expressions` API is\r\nalmost a direct port of `System.Linq.Expressions` from .NET's Dynamic Language Runtime,\r\nminus the dynamic callsite support (and with more relaxed rules regarding type conversions).\r\n\r\n#### Example\r\n```java   \r\n//\r\n// This lambda closes over a complex constant (a String array).\r\n//\r\n\r\nfinal ConstantExpression items = constant(\r\n    new String[] { \"one\", \"two\", \"three\", \"four\", \"five\" }\r\n);\r\n\r\n//\r\n// If written in Java, the constructed expression would look something like this:\r\n// \r\n// () -> {\r\n//     for (String item : <closure>items)\r\n//         System.out.printf(\"Got item: %s\\n\", item);\r\n// }\r\n//\r\n\r\nfinal ParameterExpression item = variable(Types.String, \"item\");\r\n\r\nfinal LambdaExpression<Runnable> runnable = lambda(\r\n    Type.of(Runnable.class),\r\n    forEach(\r\n        item,\r\n        items,\r\n        call(\r\n            field(null, Types.System.getField(\"out\")),\r\n            \"printf\",\r\n            constant(\"Got item: %s\\n\"),\r\n            item\r\n        )\r\n    )\r\n);\r\n\r\nSystem.out.println(runnable);\r\n\r\nfinal Runnable delegate = runnable.compile();\r\n\r\ndelegate.run();\r\n```\r\n\r\n#### Output\r\n```text\r\n() => for (String item : [one, two, three, four, five])\r\n    System.out.printf(\"Got item: %s\\n\", new Object[] { item })\r\n\r\nGot item: one\r\nGot item: two\r\nGot item: three\r\nGot item: four\r\nGot item: five\r\n```\r\n\r\n### Compiler Toolset\r\n\r\nThe `procyon-compilertools` project is a work in progress that includes:\r\n\r\n  1. Class metadata and bytecode inspection/manipulation facilities based on `Mono.Cecil`\r\n  2. An optimization and decompiler framework based on `ILSpy`\r\n\r\nThe Compiler Toolset is still early in development and subject to change.\r\n\r\n### Decompiler Front-End\r\n\r\n`procyon-decompiler` is a standalone front-end for the Java decompiler included in\r\n`procyon-compilertools`.  All dependencies are embedded in the JAR for easy redistribution.\r\nFor more information about the decompiler, see the [Java Decompiler](https://github.com/mstrobel/procyon/wiki/Java-Decompiler) wiki page.\r\n\r\n## Powered by Procyon\r\n\r\nCheck out these third party products based on Procyon!  Are you using Procyon in one of your projects?  Contact me ([email](mailto:mike.strobel@gmail.com) / [twitter](https://twitter.com/mstrobel)) if you would like it listed here. \r\n\r\n  - [SecureTeam Java Decompiler](http://www.secureteam.net/Java-Decompiler.aspx)   \r\n    A JavaFX-based decompiler front-end with fast and convenient code navigation.  Download it, or launch it directly from your browser.\r\n\r\n  - [Bytecode Viewer](https://github.com/Konloch/bytecode-viewer) is an open source Java decompilation, disassembly, and debugging suite by [@Konloch](https://twitter.com/Konloch).  It can produce decompiled sources from several modern Java decompilers, including Procyon, CFR, and FernFlower.\r"
}
