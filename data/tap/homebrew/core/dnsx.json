{
  "name": "dnsx",
  "full_name": "dnsx",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "DNS query and resolution tool",
  "license": "MIT",
  "homepage": "https://github.com/projectdiscovery/dnsx",
  "versions": {
    "stable": "1.1.4",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/projectdiscovery/dnsx/archive/v1.1.4.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "7c0868cb27f904ab8e158881cf4862a15f216122a43525d2ea93a1aa7bf03cff"
    },
    "head": {
      "url": "https://github.com/projectdiscovery/dnsx.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dnsx/blobs/sha256:57b464f2055562fba380e2e127b8a452799f59ea7b3d987e2ef44d4a05bf0f19",
          "sha256": "57b464f2055562fba380e2e127b8a452799f59ea7b3d987e2ef44d4a05bf0f19"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dnsx/blobs/sha256:57b464f2055562fba380e2e127b8a452799f59ea7b3d987e2ef44d4a05bf0f19",
          "sha256": "57b464f2055562fba380e2e127b8a452799f59ea7b3d987e2ef44d4a05bf0f19"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dnsx/blobs/sha256:57b464f2055562fba380e2e127b8a452799f59ea7b3d987e2ef44d4a05bf0f19",
          "sha256": "57b464f2055562fba380e2e127b8a452799f59ea7b3d987e2ef44d4a05bf0f19"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dnsx/blobs/sha256:da7225bb684733cde3df29a1ad50837232077d96ec875c1773baf604867ea0dc",
          "sha256": "da7225bb684733cde3df29a1ad50837232077d96ec875c1773baf604867ea0dc"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dnsx/blobs/sha256:da7225bb684733cde3df29a1ad50837232077d96ec875c1773baf604867ea0dc",
          "sha256": "da7225bb684733cde3df29a1ad50837232077d96ec875c1773baf604867ea0dc"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dnsx/blobs/sha256:da7225bb684733cde3df29a1ad50837232077d96ec875c1773baf604867ea0dc",
          "sha256": "da7225bb684733cde3df29a1ad50837232077d96ec875c1773baf604867ea0dc"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dnsx/blobs/sha256:daae374e31add2864ab87ef6cd56ab7e21bce9224ec7beda56515a8844e5a429",
          "sha256": "daae374e31add2864ab87ef6cd56ab7e21bce9224ec7beda56515a8844e5a429"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/dnsx.rb",
  "ruby_source_checksum": {
    "sha256": "69886212c17dddf4e7b5835d7c7f0f0d422c112764138337e7911fa559e66371"
  },
  "date_added": "2020-12-28T00:13:06+00:00",
  "readme": "<h1 align=\"center\">\n  <img src=\"static/dnsx-logo.png\" alt=\"dnsx\" width=\"200px\">\n  <br>\n</h1>\n\n<h4 align=\"center\">A fast and multi-purpose DNS toolkit designed for running DNS queries</h4>\n\n<p align=\"center\">\n<a href=\"https://goreportcard.com/report/github.com/projectdiscovery/dnsx\"><img src=\"https://goreportcard.com/badge/github.com/projectdiscovery/dnsx\"></a>\n<a href=\"https://github.com/projectdiscovery/dnsx/issues\"><img src=\"https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat\"></a>\n<a href=\"https://github.com/projectdiscovery/dnsx/releases\"><img src=\"https://img.shields.io/github/release/projectdiscovery/dnsx\"></a>\n<a href=\"https://twitter.com/pdiscoveryio\"><img src=\"https://img.shields.io/twitter/follow/pdiscoveryio.svg?logo=twitter\"></a>\n<a href=\"https://discord.gg/projectdiscovery\"><img src=\"https://img.shields.io/discord/695645237418131507.svg?logo=discord\"></a>\n</p>\n\n<p align=\"center\">\n  <a href=\"#features\">Features</a> •\n  <a href=\"#installation-instructions\">Installation</a> •\n  <a href=\"#usage\">Usage</a> •\n  <a href=\"#running-dnsx\">Running `dnsx`</a> •\n  <a href=\"#wildcard-filtering\">Wildcard</a> •\n  <a href=\"#-notes\">Notes</a> •\n  <a href=\"https://discord.gg/projectdiscovery\">Join Discord</a>\n</p>\n\n\n---\n\n\n`dnsx` is a fast and multi-purpose DNS toolkit designed for running various probes through the [retryabledns](https://github.com/projectdiscovery/retryabledns) library. It supports multiple DNS queries, user supplied resolvers, DNS wildcard filtering like [shuffledns](https://github.com/projectdiscovery/shuffledns) etc.\n\n\n# Features\n\n<h1 align=\"left\">\n  <img src=\"static/dnsx-run.png\" alt=\"dnsx\" width=\"700px\"></a>\n  <br>\n</h1>\n\n\n - Simple and Handy utility to query DNS records.\n - **A, AAAA, CNAME, PTR, NS, MX, TXT, SRV, SOA** query support\n - DNS **Resolution** / **Brute-force** support\n - Custom **resolver** input support\n - Multiple resolver format **(TCP/UDP/DOH/DOT)** support\n - **stdin** and **stdout** support\n - Automatic **wildcard** handling support\n\n# Installation Instructions\n\n\n`dnsx` requires **go1.19** to install successfully. Run the following command to install the latest version: \n\n```sh\ngo install -v github.com/projectdiscovery/dnsx/cmd/dnsx@latest\n```\n\n# Usage\n\n```sh\ndnsx -h\n```\n\nThis will display help for the tool. Here are all the switches it supports.\n\n```console\nINPUT:\n   -l, -list string      list of sub(domains)/hosts to resolve (file or stdin)\n   -d, -domain string    list of domain to bruteforce (file or comma separated or stdin)\n   -w, -wordlist string  list of words to bruteforce (file or comma separated or stdin)\n\nQUERY:\n   -a      query A record (default)\n   -aaaa   query AAAA record\n   -cname  query CNAME record\n   -ns     query NS record\n   -txt    query TXT record\n   -srv    query SRV record\n   -ptr    query PTR record\n   -mx     query MX record\n   -soa    query SOA record\n   -axfr   query AXFR\n   -caa    query CAA record\n\nFILTER:\n   -re, -resp          display dns response\n   -ro, -resp-only     display dns response only\n   -rc, -rcode string  filter result by dns status code (eg. -rcode noerror,servfail,refused)\n\nPROBE:\n   -cdn  display cdn name\n   -asn  display host asn information\n\nRATE-LIMIT:\n   -t, -threads int      number of concurrent threads to use (default 100)\n   -rl, -rate-limit int  number of dns request/second to make (disabled as default) (default -1)\n\nUPDATE:\n   -up, -update                 update dnsx to latest version\n   -duc, -disable-update-check  disable automatic dnsx update check\n\nOUTPUT:\n   -o, -output string  file to write output\n   -json               write output in JSONL(ines) format\n\nDEBUG:\n   -hc, -health-check  run diagnostic check up\n   -silent             display only results in the output\n   -v, -verbose        display verbose output\n   -raw, -debug        display raw dns response\n   -stats              display stats of the running scan\n   -version            display version of dnsx\n\nOPTIMIZATION:\n   -retry int                number of dns attempts to make (must be at least 1) (default 2)\n   -hf, -hostsfile           use system host file\n   -trace                    perform dns tracing\n   -trace-max-recursion int  Max recursion for dns trace (default 32767)\n   -resume                   resume existing scan\n   -stream                   stream mode (wordlist, wildcard, stats and stop/resume will be disabled)\n\nCONFIGURATIONS:\n   -r, -resolver string          list of resolvers to use (file or comma separated)\n   -wt, -wildcard-threshold int  wildcard filter threshold (default 5)\n   -wd, -wildcard-domain string  domain name for wildcard filtering (other flags will be ignored)\n```\n\n## Running dnsx\n\n### DNS Resolving\n\nFilter active hostnames from the list of passive subdomains, obtained from various sources:\n\n```console\nsubfinder -silent -d hackerone.com | dnsx -silent\n\na.ns.hackerone.com\nwww.hackerone.com\napi.hackerone.com\ndocs.hackerone.com\nmta-sts.managed.hackerone.com\nmta-sts.hackerone.com\nresources.hackerone.com\nb.ns.hackerone.com\nmta-sts.forwarding.hackerone.com\nevents.hackerone.com\nsupport.hackerone.com\n```\n\nPrint **A** records for the given list of subdomains:\n\n```console\nsubfinder -silent -d hackerone.com | dnsx -silent -a -resp\n\nwww.hackerone.com [104.16.100.52]\nwww.hackerone.com [104.16.99.52]\nhackerone.com [104.16.99.52]\nhackerone.com [104.16.100.52]\napi.hackerone.com [104.16.99.52]\napi.hackerone.com [104.16.100.52]\nmta-sts.forwarding.hackerone.com [185.199.108.153]\nmta-sts.forwarding.hackerone.com [185.199.109.153]\nmta-sts.forwarding.hackerone.com [185.199.110.153]\nmta-sts.forwarding.hackerone.com [185.199.111.153]\na.ns.hackerone.com [162.159.0.31]\nresources.hackerone.com [52.60.160.16]\nresources.hackerone.com [3.98.63.202]\nresources.hackerone.com [52.60.165.183]\nresources.hackerone.com [read.uberflip.com]\nmta-sts.hackerone.com [185.199.110.153]\nmta-sts.hackerone.com [185.199.111.153]\nmta-sts.hackerone.com [185.199.109.153]\nmta-sts.hackerone.com [185.199.108.153]\ngslink.hackerone.com [13.35.210.17]\ngslink.hackerone.com [13.35.210.38]\ngslink.hackerone.com [13.35.210.83]\ngslink.hackerone.com [13.35.210.19]\nb.ns.hackerone.com [162.159.1.31]\ndocs.hackerone.com [185.199.109.153]\ndocs.hackerone.com [185.199.110.153]\ndocs.hackerone.com [185.199.111.153]\ndocs.hackerone.com [185.199.108.153]\nsupport.hackerone.com [104.16.51.111]\nsupport.hackerone.com [104.16.53.111]\nmta-sts.managed.hackerone.com [185.199.108.153]\nmta-sts.managed.hackerone.com [185.199.109.153]\nmta-sts.managed.hackerone.com [185.199.110.153]\nmta-sts.managed.hackerone.com [185.199.111.153]\n```\n\nExtract **A** records for the given list of subdomains:\n\n```console\nsubfinder -silent -d hackerone.com | dnsx -silent -a -resp-only\n\n104.16.99.52\n104.16.100.52\n162.159.1.31\n104.16.99.52\n104.16.100.52\n185.199.110.153\n185.199.111.153\n185.199.108.153\n185.199.109.153\n104.16.99.52\n104.16.100.52\n104.16.51.111\n104.16.53.111\n185.199.108.153\n185.199.111.153\n185.199.110.153\n185.199.111.153\n```\n\nExtract **CNAME** records for the given list of subdomains:\n\n```console\nsubfinder -silent -d hackerone.com | dnsx -silent -cname -resp\n\nsupport.hackerone.com [hackerone.zendesk.com]\nresources.hackerone.com [read.uberflip.com]\nmta-sts.hackerone.com [hacker0x01.github.io]\nmta-sts.forwarding.hackerone.com [hacker0x01.github.io]\nevents.hackerone.com [whitelabel.bigmarker.com]\n```\nExtract **ASN** records for the given list of subdomains:\n```console\nsubfinder -silent -d hackerone.com | dnsx -silent  -asn\n\nb.ns.hackerone.com [AS13335, CLOUDFLARENET, US]\na.ns.hackerone.com [AS13335, CLOUDFLARENET, US]\nhackerone.com [AS13335, CLOUDFLARENET, US]\nwww.hackerone.com [AS13335, CLOUDFLARENET, US]\napi.hackerone.com [AS13335, CLOUDFLARENET, US]\nsupport.hackerone.com [AS13335, CLOUDFLARENET, US]\n```\n\nProbe using [dns status code](https://github.com/projectdiscovery/dnsx/wiki/RCODE-ID-VALUE-Mapping) on given list of (sub)domains:\n\n```console\nsubfinder -silent -d hackerone.com | dnsx -silent -rcode noerror,servfail,refused\n\nns.hackerone.com [NOERROR]\na.ns.hackerone.com [NOERROR]\nb.ns.hackerone.com [NOERROR]\nsupport.hackerone.com [NOERROR]\nresources.hackerone.com [NOERROR]\nmta-sts.hackerone.com [NOERROR]\nwww.hackerone.com [NOERROR]\nmta-sts.forwarding.hackerone.com [NOERROR]\ndocs.hackerone.com [NOERROR]\n```\n\nExtract subdomains from given network range using `PTR` query:\n\n```console\necho 173.0.84.0/24 | dnsx -silent -resp-only -ptr\n\ncors.api.paypal.com\ntrinityadminauth.paypal.com\ncld-edge-origin-api.paypal.com\nappmanagement.paypal.com\nsvcs.paypal.com\ntrinitypie-serv.paypal.com\nppn.paypal.com\npointofsale-new.paypal.com\npointofsale.paypal.com\nslc-a-origin-pointofsale.paypal.com\nfpdbs.paypal.com\n```\n\nExtract subdomains from given ASN using `PTR` query:\n```console\necho AS17012 | dnsx -silent -resp-only -ptr \n\napiagw-a.paypal.com\nnotify.paypal.com\nadnormserv-slc-a.paypal.com\na.sandbox.paypal.com\napps2.paypal-labs.com\npilot-payflowpro.paypal.com\nwww.paypallabs.com\npaypal-portal.com\nmicropayments.paypal-labs.com\nminicart.paypal-labs.com\n```\n---------\n\n### DNS Bruteforce\n\nBruteforce subdomains for given domain or list of domains using `d` and `w` flag:\n\n```console\ndnsx -silent -d facebook.com -w dns_worldlist.txt\n\nblog.facebook.com\nbooking.facebook.com\napi.facebook.com\nanalytics.facebook.com\nbeta.facebook.com\napollo.facebook.com\nads.facebook.com\nbox.facebook.com\nalpha.facebook.com\napps.facebook.com\nconnect.facebook.com\nc.facebook.com\ncareers.facebook.com\ncode.facebook.com\n```\n\nBruteforce targeted subdomain using single or multiple keyword input, as `d` or `w` flag supports file or comma separated keyword inputs:\n\n```console\ndnsx -silent -d domains.txt -w jira,grafana,jenkins\n\ngrafana.1688.com\ngrafana.8x8.vc\ngrafana.airmap.com\ngrafana.aerius.nl\njenkins.1688.com\njenkins.airbnb.app\njenkins.airmap.com\njenkins.ahn.nl\njenkins.achmea.nl\njira.amocrm.com\njira.amexgbt.com\njira.amitree.com\njira.arrival.com\njira.atlassian.net\njira.atlassian.com\n```\n\nValues are accepted from **stdin** for all the input types (`-list`, `-domain`, `-wordlist`). The `-list` flag defaults to `stdin`, but the same can be achieved for other input types by adding a `-` (dash) as parameter:\n\n```console\ncat domains.txt | dnsx -silent -w jira,grafana,jenkins -d -\n\ngrafana.1688.com\ngrafana.8x8.vc\ngrafana.airmap.com\ngrafana.aerius.nl\njenkins.1688.com\njenkins.airbnb.app\njenkins.airmap.com\njenkins.ahn.nl\njenkins.achmea.nl\njira.amocrm.com\njira.amexgbt.com\njira.amitree.com\njira.arrival.com\njira.atlassian.net\njira.atlassian.com\n```\n\n#### DNS Bruteforce with Placeholder based wordlist\n\n```bash\n$ cat tld.txt\n\ncom\nby\nde\nbe\nal\nbi\ncg\ndj\nbs\n```\n\n```console\ndnsx -d google.FUZZ -w tld.txt -resp\n\n      _             __  __\n   __| | _ __   ___ \\ \\/ /\n  / _' || '_ \\ / __| \\  / \n | (_| || | | |\\__ \\ /  \\ \n  \\__,_||_| |_||___//_/\\_\\ v1.1.2\n\n      projectdiscovery.io\n\ngoogle.de [142.250.194.99] \ngoogle.com [142.250.76.206] \ngoogle.be [172.217.27.163] \ngoogle.bs [142.251.42.35] \ngoogle.bi [216.58.196.67] \ngoogle.al [216.58.196.68] \ngoogle.by [142.250.195.4] \ngoogle.cg [142.250.183.131] \ngoogle.dj [142.250.192.3] \n```\n\n### Wildcard filtering\n\nA special feature of `dnsx` is its ability to handle **multi-level DNS based wildcards**, and do it so with a very reduced number of DNS requests. Sometimes all the subdomains will resolve, which leads to lots of garbage in the output. The way `dnsx` handles this is by keeping track of how many subdomains point to an IP and if the count of the subdomains increase beyond a certain threshold, it will check for wildcards on all the levels of the hosts for that IP iteratively.\n\n```console\ndnsx -l subdomain_list.txt -wd airbnb.com -o output.txt\n```\n\n---------\n\n### Dnsx as a library\n\nIt's possible to use the library directly in your golang programs. The following code snippets is an example of use in golang programs. Please refer to [here](https://pkg.go.dev/github.com/projectdiscovery/dnsx@v1.1.0/libs/dnsx) for detailed package configuration and usage.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/projectdiscovery/dnsx/libs/dnsx\"\n)\n\nfunc main() {\n\t// Create DNS Resolver with default options\n\tdnsClient, err := dnsx.New(dnsx.DefaultOptions)\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\n\t// DNS A question and returns corresponding IPs\n\tresult, err := dnsClient.Lookup(\"hackerone.com\")\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\tfor idx, msg := range result {\n\t\tfmt.Printf(\"%d: %s\\n\", idx+1, msg)\n\t}\n\n\t// Query\n\trawResp, err := dnsClient.QueryOne(\"hackerone.com\")\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Printf(\"rawResp: %v\\n\", rawResp)\n\n\tjsonStr, err := rawResp.JSON()\n\tif err != nil {\n\t\tfmt.Printf(\"err: %v\\n\", err)\n\t\treturn\n\t}\n\tfmt.Println(jsonStr)\n\n\treturn\n}\n```\n\n# 📋 Notes\n\n- As default, `dnsx` checks for **A** record.\n- As default `dnsx` uses Google, Cloudflare, Quad9 [resolver](https://github.com/projectdiscovery/dnsx/blob/43af78839e237ea8cbafe571df1ab0d6cbe7f445/libs/dnsx/dnsx.go#L31).\n- Custom resolver list can be loaded using the `r` flag.\n- Domain name (`wd`) input is mandatory for wildcard elimination.\n- DNS record flag can not be used when using wildcard filtering.\n- DNS resolution (`l`) and DNS brute-forcing (`w`) can't be used together.\n- VPN operators tend to filter high DNS/UDP traffic, therefore the tool might experience packets loss (eg. [Mullvad VPN](https://github.com/projectdiscovery/dnsx/issues/221))\n\n`dnsx` is made with 🖤 by the [projectdiscovery](https://projectdiscovery.io) team."
}
