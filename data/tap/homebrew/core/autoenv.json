{
  "name": "autoenv",
  "full_name": "autoenv",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Per-project, per-directory shell environments",
  "license": "MIT",
  "homepage": "https://github.com/hyperupcall/autoenv",
  "versions": {
    "stable": "0.3.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/hyperupcall/autoenv/archive/v0.3.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "1194322a0fd95e271bbfeb39e725ee33627154f80eb76620cf0cd01e0d5e3520"
    },
    "head": {
      "url": "https://github.com/hyperupcall/autoenv.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/autoenv/blobs/sha256:879dc65b4f4740aed9cf1960c2b2da66f877f10c4ad774084373e36097d8efb0",
          "sha256": "879dc65b4f4740aed9cf1960c2b2da66f877f10c4ad774084373e36097d8efb0"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": "To finish the installation, source activate.sh in your shell:\n  source $HOMEBREW_PREFIX/opt/autoenv/activate.sh\n",
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "2706c66e8def3eeba4d9bf1adf66221c8ad70701",
  "ruby_source_path": "Formula/autoenv.rb",
  "ruby_source_checksum": {
    "sha256": "6f6fa29b857d899098ddfeaf3e7d151a1e55c9dd952a834144055bc70522e248"
  },
  "date_added": "2012-02-14T19:32:08-08:00",
  "readme": "# Autoenv: Directory-based Environments ![Build Status](https://github.com/hyperupcall/autoenv/actions/workflows/ci.yml/badge.svg)\n\nMagic per-project shell environments\n\n## What is it?\n\nIf a directory contains a `.env` file, it will automatically be executed when you `cd` into it. When enabled (set `AUTOENV_ENABLE_LEAVE` to a non-empty string), if a directory contains a `.env.leave` file, it will automatically be executed when you leave it.\n\nThis is great for...\n\n- auto-activating virtualenvs\n- auto-deactivating virtualenvs\n- project-specific environment variables\n- making millions\n\nYou can also nest envs within each other. How awesome is that!?\n\nWhen executing, autoenv, will walk up the directories until the mount\npoint and execute all `.env` files beginning at the top.\n\n## Usage\n\nFollow the white rabbit:\n\n```sh\n$ echo \"echo 'whoa'\" > ./project/.env\n$ cd ./project\nwhoa\n```\n\n![Mind blown GIF](http://media.tumblr.com/tumblr_ltuzjvbQ6L1qzgpx9.gif)\n\n## Installation (automated)\n\n```sh\n# with cURL\ncurl -#fLo- 'https://raw.githubusercontent.com/hyperupcall/autoenv/master/scripts/install.sh' | sh\n\n# with wget\nwget --show-progress -o /dev/null -O- 'https://raw.githubusercontent.com/hyperupcall/autoenv/master/scripts/install.sh' | sh\n```\n\nIf you encounter some variant of a `curl: command not found` or `wget: command not found` error, please install either cURL or wget (with your package manager) and try again.\n\n## Installation (manual)\n\nWhen installing manually, you first install autoenv with either Homebrew, npm, or Git. Then, you run a command to ensure autoenv is loaded when you open a terminal (this command depends on your [default shell](https://askubuntu.com/a/590901)).\n\n### Installation Method\n\nNote that depending on your shell and operating system, you may need to write to `.zprofile` instead of `.zshrc`, or write to `.bash_profile` instead of `.bashrc` (or visa-versa).\n\n#### Using Homebrew\n\nPrefer this if you're running macOS. Homebrew [must be installed](https://brew.sh).\n\n<details>\n<summary>Click to expand content</summary>\n\nFirst, download the [autoenv](https://formulae.brew.sh/formula/autoenv) homebrew formulae:\n\n```sh\n$ brew install 'autoenv'\n```\n\nThen, execute run of the following to ensure autoenv is loaded when you open a terminal:\n\n```sh\n# For Zsh shell (on Linux or macOS)\n$ printf '%s\\n' \"source $(brew --prefix autoenv)/activate.sh\" >> \"${ZDOTDIR:-$HOME}/.zprofile\"\n\n# For Bash shell (on Linux)\n$ printf '%s\\n' \"source $(brew --prefix autoenv)/activate.sh\" >> ~/.bashrc\n\n# For Bash shell (on macOS)\n$ printf '%s\\n' \"source $(brew --prefix autoenv)/activate.sh\" >> ~/.bash_profile\n```\n\n</details>\n\n#### Using npm\n\nPrefer this if you're running Linux or an unsupported version of macOS. npm [must be installed](https://nodejs.org/en/download) (usually through NodeJS).\n\n<details>\n<summary>Click to expand content</summary>\n\nFirst, download the [@hyperupcall/autoenv](https://www.npmjs.com/package/@hyperupcall/autoenv) npm package:\n\n```sh\n$ npm install -g '@hyperupcall/autoenv'\n```\n\nThen, execute run of the following to ensure autoenv is loaded when you open a terminal:\n\n```sh\n# For Zsh shell (on Linux or macOS)\n$ printf '%s\\n' \"source $(npm root -g)/activate.sh\" >> \"${ZDOTDIR:-$HOME}/.zprofile\"\n\n# For Bash shell (on Linux)\n$ printf '%s\\n' \"source $(npm root -g)/activate.sh\" >> ~/.bashrc\n\n# For Bash shell (on macOS)\n$ printf '%s\\n' \"source $(npm root -g)/activate.sh\" >> ~/.bash_profile\n```\n\n</details>\n\n#### Using Git\n\nUse this if you cannot install with Homebrew or npm.\n\n<details>\n<summary>Click to expand content</summary>\n\nFirst, clone this repository:\n\n```sh\n$ git clone 'https://github.com/hyperupcall/autoenv' ~/.autoenv\n```\n\nThen, execute run of the following to ensure autoenv is loaded when you open a terminal:\n\n```sh\n# For Zsh shell (on Linux or macOS)\n$ printf '%s\\n' \"source ~/.autoenv/activate.sh\" >> \"${ZDOTDIR:-$HOME}/.zprofile\"\n\n# For Bash shell (on Linux)\n$ printf '%s\\n' \"source ~/.autoenv/activate.sh\" >> ~/.bashrc\n\n# For Bash shell (on macOS)\n$ printf '%s\\n' \"source ~/.autoenv/activate.sh\" >> ~/.bash_profile\n```\n\n</details>\n\n## Configuration\n\n_Before_ `source`ing `activate.sh`, you can set the following variables:\n\n- `AUTOENV_AUTH_FILE`: Authorized env files; defaults to `~/.autoenv_authorized` if it exists, otherwise, `~/.local/state/autoenv/authorized_list`\n- `AUTOENV_NOTAUTH_FILE`: Env files not authorized to be sourced; defaults to a file in the same directory as `~/.autoenv_authorized` (`master` branch only)\n- `AUTOENV_ENV_FILENAME`: Name of the `.env` file; defaults to `.env`\n- `AUTOENV_LOWER_FIRST`: Set this variable to a non-empty string to flip the order of `.env` files executed\n- `AUTOENV_ENV_LEAVE_FILENAME`: Name of the `.env.leave` file; defaults to `.env.leave`\n- `AUTOENV_ENABLE_LEAVE`: Set this to a non-empty string in order to enable source env when leaving\n- `AUTOENV_ASSUME_YES`: Set this variable to a non-empty string to silently authorize the initialization of new environments\n- `AUTOENV_VIEWER`: Program used to display env files prior to authorization; defaults to `cat` (`master` branch only)\n- `AUTOENV_PRESERVE_CD`: Set this variable to a non-empty string to prevent the `cd` builtin from being overridden (to active autoenv, you must invoke `autoenv_init` within a `cd` function of your own) (`master` branch only)\n\n## Shells\n\nautoenv is tested on:\n\n- Bash\n- Zsh\n- Dash\n- Fish is supported by [autoenv_fish](https://github.com/loopbit/autoenv_fish)\n- More to come\n\n## Disclaimer\n\nAutoenv overrides `cd` (unless `AUTOENV_PRESERVE_CD` is set to a non-empty string). If you already do this, invoke `autoenv_init` within your custom `cd` after sourcing `activate.sh`.\n\nAutoenv can be disabled via `unset -f cd` if you experience I/O issues with certain file systems, particularly those that are FUSE-based (such as `smbnetfs`).\n\n## Other info\n\nTo uninstall autoenv, see [`./docs/uninstall.md`](./docs/uninstall.md).\n\nTo update autoenv, see [`./docs/updating.md`](./docs/updating.md).\n\n## Attributions\n\nAutoenv was originally created by [@kennethreitz](https://github.com/kennethreitz). Later, ownership was transfered to [@inishchith](https://github.com/inishchith). As of August 22nd, 2021, Edwin Kofler ([@hyperupcall](https://github.com/hyperupcall)) owns and maintains the project."
}
