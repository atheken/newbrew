{
  "name": "ghq",
  "full_name": "ghq",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Remote repository management made easy",
  "license": "MIT",
  "homepage": "https://github.com/x-motemen/ghq",
  "versions": {
    "stable": "1.4.2",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/x-motemen/ghq.git",
      "tag": "v1.4.2",
      "revision": "7163e61e2309a039241ad40b4a25bea35671ea6f",
      "checksum": null
    },
    "head": {
      "url": "https://github.com/x-motemen/ghq.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ghq/blobs/sha256:8e702934dc97273c2a9a1b7ac060f20e43a91732aee6742b5e2ead5b7c132c89",
          "sha256": "8e702934dc97273c2a9a1b7ac060f20e43a91732aee6742b5e2ead5b7c132c89"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ghq/blobs/sha256:792212f45639cb1dc0494b4e455913f110269340ab5dc3a8257fd227390148e6",
          "sha256": "792212f45639cb1dc0494b4e455913f110269340ab5dc3a8257fd227390148e6"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ghq/blobs/sha256:13cc0b246fbad82aa2fef5ade81f1c252e51a2888818838e68b3be9806ea2594",
          "sha256": "13cc0b246fbad82aa2fef5ade81f1c252e51a2888818838e68b3be9806ea2594"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ghq/blobs/sha256:61407be63f9d0db462fd1456cfce468c1762ba9fcad6bf506330298a8666d869",
          "sha256": "61407be63f9d0db462fd1456cfce468c1762ba9fcad6bf506330298a8666d869"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ghq/blobs/sha256:b258e7996cec0b9ebb261af589f6b1790efda297e79a95769595fb61969567e2",
          "sha256": "b258e7996cec0b9ebb261af589f6b1790efda297e79a95769595fb61969567e2"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ghq/blobs/sha256:c241efa1354f37c1316e76b435d515a243847cce4a35221525bbd25914368607",
          "sha256": "c241efa1354f37c1316e76b435d515a243847cce4a35221525bbd25914368607"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ghq/blobs/sha256:9e06b6d57e4ec9e8eee837fb161636c4b887a6bf68b474433e5114161d528bba",
          "sha256": "9e06b6d57e4ec9e8eee837fb161636c4b887a6bf68b474433e5114161d528bba"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/ghq.rb",
  "ruby_source_checksum": {
    "sha256": "d75e5aa726fbb15351818a08318f85b3943273cf24b83a245d331803b79fea79"
  },
  "date_added": "2015-06-22T21:07:00+01:00",
  "readme": "= ghq(1) image:https://github.com/x-motemen/ghq/workflows/test/badge.svg?branch=master[\"Build Status\", link=\"https://github.com/x-motemen/ghq/actions?workflow=test\"] image:https://codecov.io/gh/x-motemen/ghq/branch/master/graph/badge.svg[\"Coverage\", link=\"https://codecov.io/gh/x-motemen/ghq\"]\n\n== NAME\n\nghq - Manage remote repository clones\n\n== DESCRIPTION\n\n'ghq' provides a way to organize remote repository clones, like +go get+ does. When you clone a remote repository by +ghq get+, ghq makes a directory under a specific root directory (by default +~/ghq+) using the remote repository URL's host and path.\n\n    $ ghq get https://github.com/x-motemen/ghq\n    # Runs `git clone https://github.com/x-motemen/ghq ~/ghq/github.com/x-motemen/ghq`\n\nYou can also list local repositories (+ghq list+).\n\n== SYNOPSIS\n\n[verse]\nghq get [-u] [-p] [--shallow] [--vcs <vcs>] [--look] [--silent] [--branch] [--no-recursive] [--bare] <repository URL>|<host>/<user>/<project>|<user>/<project>|<project>\nghq list [-p] [-e] [<query>]\nghq create [--vcs <vcs>] <repository URL>|<host>/<user>/<project>|<user>/<project>|<project>\nghq root [--all]\n\n== COMMANDS\n\nget::\n    Clone a remote repository under ghq root directory (see\n    <<directory-structures,DIRECTORY STRUCTURES>> below). If the repository is\n    already cloned to local, nothing will happen unless '-u' ('--update')\n    flag is supplied, in which case the local repository is updated ('git pull --ff-only' eg.).\n    When you use '-p' option, the repository is cloned via SSH protocol. +\n    If there are multiple +ghq.root+ s, existing local clones are searched\n    first. Then a new repository clone is created under the primary root if\n    none is found. +\n    With '--shallow' option, a \"shallow clone\" will be performed (for Git\n    repositories only, 'git clone --depth 1 ...' eg.). Be careful that a\n    shallow-cloned repository cannot be pushed to remote.\n    Currently Git and Mercurial repositories are supported. +\n    With '--branch' option, you can clone the repository with specified\n    repository. This option is currently supported for Git, Mercurial,\n    Subversion and git-svn. +\n    The 'ghq' gets the git repository recursively by default. +\n    We can prevent it with '--no-recursive' option.\n    With '--bare' option, a \"bare clone\" will be performed (for Git\n    repositories only, 'git clone --bare ...' eg.).\n\nlist::\n    List locally cloned repositories. If a query argument is given, only\n    repositories whose names contain that query text are listed. '-e'\n    ('--exact') forces the match to be an exact one (i.e. the query equals to\n    _project_, _user_/_project_ or _host_/_user_/_project_)\n    If '-p' ('--full-path') is given, the full paths to the repository root are\n    printed instead of relative ones.\n\nroot::\n    Prints repositories' root (i.e. `ghq.root`). Without '--all' option, the\n    primary one is shown.\n\ncreate::\n    Creates new repository.\n\n== CONFIGURATION\n\nConfiguration uses 'git-config' variables.\n\nghq.root::\n    The path to directory under which cloned repositories are placed. See\n    <<directory-structures,DIRECTORY STRUCTURES>> below. Defaults to +~/ghq+. +\n    This variable can have multiple values. If so, the last one becomes\n    primary one i.e. new repository clones are always created under it. You may\n    want to specify \"$GOPATH/src\" as a secondary root (environment variables\n    should be expanded.)\n\nghq.<url>.vcs::\n    ghq tries to detect the remote repository's VCS backend for non-\"github.com\"\n    repositories.  With this option you can explicitly specify the VCS for the\n    remote repository. The URL is matched against '<url>' using 'git config --get-urlmatch'. +\n    Accepted values are \"git\", \"github\" (an alias for \"git\"), \"subversion\",\n    \"svn\" (an alias for \"subversion\"), \"git-svn\", \"mercurial\", \"hg\" (an alias for \"mercurial\"),\n    \"darcs\", \"fossil\", \"bazaar\", and \"bzr\" (an alias for \"bazaar\"). +\n    To get this configuration variable effective, you will need Git 1.8.5 or higher.\n\nghq.<url>.root::\n    The \"ghq\" tries to detect the remote repository-specific root directory. With this option,\n    you can specify a repository-specific root directory instead of the common ghq root directory. +\n    The URL is matched against '<url>' using 'git config --get-urlmatch'.\n\n\n=== Example configuration (.gitconfig):\n\n....\n[ghq \"https://git.example.com/repos/\"]\nvcs = git\nroot = ~/myproj\n....\n\n== ENVIRONMENT VARIABLES\n\nGHQ_ROOT::\n    If set to a path, this value is used as the only root directory regardless\n    of other existing ghq.root settings.\n\n== [[directory-structures]]DIRECTORY STRUCTURES\n\nLocal repositories are placed under 'ghq.root' with named github.com/_user_/_repo_.\n\n....\n~/ghq\n|-- code.google.com/\n|   `-- p/\n|       `-- vim/\n`-- github.com/\n    |-- google/\n    |   `-- go-github/\n    |-- motemen/\n    |   `-- ghq/\n    `-- urfave/\n        `-- cli/\n....\n\n\n== [[installing]]INSTALLATION\n\n=== macOS\n\n----\nbrew install ghq\n----\n\n=== Void Linux\n\n----\nxbps-install -S ghq\n----\n\n=== GNU Guix\n\n----\nguix install ghq\n----\n\n=== Windows + scoop\n\n----\nscoop install ghq\n----\n\n\n=== go get\n\n----\ngo install github.com/x-motemen/ghq@latest\n----\n\n=== conda\n\n----\nconda install -c conda-forge go-ghq\n----\n\n=== https://github.com/asdf-vm/asdf[asdf-vm]\n\n----\nasdf plugin add ghq\nasdf install ghq latest\n----\n\n=== build\n\n----\ngit clone https://github.com/x-motemen/ghq .\nmake install\n----\n\nBuilt binaries are available from GitHub Releases.\nhttps://github.com/x-motemen/ghq/releases\n\n== HANDBOOK\n\nYou can buy \"ghq-handbook\" from Leanpub for more detailed usage.\n\nhttps://leanpub.com/ghq-handbook\n\nThe source Markdown files of this book are also available for free from the following repository.\n\nhttps://github.com/Songmu/ghq-handbook\n\nCurrently, only Japanese version available.\nYour translations are welcome!\n\n== AUTHOR\n\n* motemen <motemen@gmail.com>\n** https://github.com/sponsors/motemen\n* Songmu <y.songmu@gmail.com>\n** https://github.com/sponsors/Songmu"
}
