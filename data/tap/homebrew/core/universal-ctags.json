{
  "name": "universal-ctags",
  "full_name": "universal-ctags",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Maintained ctags implementation",
  "license": "GPL-2.0-only",
  "homepage": "https://github.com/universal-ctags/ctags",
  "versions": {
    "stable": "p6.0.20230806.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/universal-ctags/ctags/archive/refs/tags/p6.0.20230806.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "77f13bbc0443556caf871a38e066f1b62415a80bceca6d0ac41fcecd4f78460c"
    },
    "head": {
      "url": "https://github.com/universal-ctags/ctags.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/universal-ctags/blobs/sha256:f8296e453d8ffe8c4070a13b37937609dc6bc79e0ed062e12e3b8fe9d512f308",
          "sha256": "f8296e453d8ffe8c4070a13b37937609dc6bc79e0ed062e12e3b8fe9d512f308"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/universal-ctags/blobs/sha256:9db62b4252226b437865ecf688cb92c175190f1d08029927fa9a104d2ac20e57",
          "sha256": "9db62b4252226b437865ecf688cb92c175190f1d08029927fa9a104d2ac20e57"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/universal-ctags/blobs/sha256:b67bdc7812e8a0b33c4346266ad440a1385956752639a3ad4bde277a2a9dc51f",
          "sha256": "b67bdc7812e8a0b33c4346266ad440a1385956752639a3ad4bde277a2a9dc51f"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/universal-ctags/blobs/sha256:4420aefc49fe23c874ecd66c96dc991a8e37c557d0c26ce2f4cccc563a01c025",
          "sha256": "4420aefc49fe23c874ecd66c96dc991a8e37c557d0c26ce2f4cccc563a01c025"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/universal-ctags/blobs/sha256:01babb98d0857602467c3052aa49f9aa648909c5743ce7ebc980a58c413709ef",
          "sha256": "01babb98d0857602467c3052aa49f9aa648909c5743ce7ebc980a58c413709ef"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/universal-ctags/blobs/sha256:083fe56e75910de003c064f85736bb6924123a1dbdb846b0ce9e941ba0bd4088",
          "sha256": "083fe56e75910de003c064f85736bb6924123a1dbdb846b0ce9e941ba0bd4088"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/universal-ctags/blobs/sha256:f7990c57c59899cfda92dd36153fe22cd30fd11deeb31ab18097cd94f9c2f481",
          "sha256": "f7990c57c59899cfda92dd36153fe22cd30fd11deeb31ab18097cd94f9c2f481"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "autoconf",
    "automake",
    "docutils",
    "pkg-config"
  ],
  "dependencies": [
    "jansson",
    "libyaml",
    "pcre2"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "libxml2"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [
    "ctags"
  ],
  "conflicts_with_reasons": [
    "this formula installs the same executable as the ctags formula"
  ],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/universal-ctags.rb",
  "ruby_source_checksum": {
    "sha256": "b2494ca02effe5119610396f96732914fa41221981894af4792ff17763f3ede6"
  },
  "date_added": "2021-05-26T13:27:32+00:00",
  "readme": "# Universal Ctags\n\n[![Coverity Scan Build Status](https://scan.coverity.com/projects/4355/badge.svg)](https://scan.coverity.com/projects/4355)\n[![Coverage Status](https://coveralls.io/repos/universal-ctags/ctags/badge.svg?branch=master&service=github)](https://coveralls.io/github/universal-ctags/ctags?branch=master)\n[![Build status](https://ci.appveyor.com/api/projects/status/6hk2p5lv6jsrd9o7/branch/master?svg=true)](https://ci.appveyor.com/project/universalctags/ctags/branch/master)\n[![RTD build status](https://readthedocs.org/projects/ctags/badge)](https://docs.ctags.io)\n[![CircleCI Build Status](https://circleci.com/gh/universal-ctags/ctags.svg?style=shield&circle-token=2e582261da84ebc6d21725b05381f410bc5de29d)](https://circleci.com/gh/universal-ctags)\n![GitHub Actions/VALGRIND](https://github.com/universal-ctags/ctags/workflows/run%20units%20target%20under%20VALGRIND/badge.svg)\n\n[Universal Ctags](https://ctags.io/) (abbreviated as u-ctags) is a *maintained*\nimplementation of `ctags`.\n`ctags` generates an index (or tag) file of language objects found in source\nfiles for programming languages.\nThis index makes it easy for text editors and other tools to locate the indexed\nitems.\n\n[Exuberant Ctags](http://ctags.sourceforge.net/) (e-ctags) maintained by Darren\nHiebert, the ancestor of Universal Ctags, improved traditional `ctags` with\nmulti-language support, the ability for the user to define new languages\nsearched by regular expressions (called optlib in Universal Ctags), and the\nability to generate emacs-style TAGS files.\nBut the activity of the project unfortunately stalled.\n\nUniversal Ctags has the objective of continuing the development of Exuberant\nCtags.\nReza Jelveh <reza.jelveh@gmail.com> initially created a personal fork of\nExuberant Ctags on GitHub.\nAs interest and participation grew, it was decided to move development to a\ndedicated project as Universal Ctags.\nThe goal of this project is to maintain a common/unified working space where\npeople interested in making ctags better can work together.\n\nSome of the major features of Universal Ctags are:\n\n* more numbers of improved language support\n    * new extended C/C++ language parser, etc.\n* fully extended optlib (a feature to define a new language parser from a\n  command line)\n* interactive mode (experimental)\n\n## The latest build and package ##\n\nIf you want to try the latest Universal Ctags without building it yourself...\n\n### Windows\nDaily builds are available at the [ctags-win32](https://github.com/universal-ctags/ctags-win32) project.\nGo to the [releases](https://github.com/universal-ctags/ctags-win32/releases) page to download zip packages.\n\n### Unix-like\nNightly builds are available at the [ctags-nightly-build](https://github.com/universal-ctags/ctags-nightly-build) project.\nGo to the [releases](https://github.com/universal-ctags/ctags-nightly-build/releases) page to download tarball archives.\n\n### Mac\nRecent builds are available via the [`universal-ctags` Homebrew formula](https://formulae.brew.sh/formula/universal-ctags).\n\n### Snap\nGo to [ctags-snap](https://github.com/universal-ctags/ctags-snap) and\nclone the `ctags-snap` repo. Then, follow instructions to build the\nsnap package of Universal Ctags. Snapcraft will automatically fetch the source\ncode from GitHub.\n\n## How to build and install ##\n\nTo build with Autotools (Autoconf and Automake) on GNU/Linux, OSX, or Windows 10 WSL,\n```\n    $ git clone https://github.com/universal-ctags/ctags.git\n    $ cd ctags\n    $ ./autogen.sh\n    $ ./configure --prefix=/where/you/want # defaults to /usr/local\n    $ make\n    $ make install # may require extra privileges depending on where to install\n```\n\nGNU make is assumed as the `make` command.\n\nSee\n[`docs/autotools.rst`](https://github.com/universal-ctags/ctags/blob/master/docs/autotools.rst)\nfor more information.\n\nTo build on Windows, see\n[`docs/windows.rst`](https://github.com/universal-ctags/ctags/blob/master/docs/windows.rst)\nfor more information.\n\nTo build on OSX, see\n[`docs/osx.rst`](https://github.com/universal-ctags/ctags/blob/master/docs/osx.rst)\nfor more information.\n\n## Manual ##\nThe primary documents of Universal Ctags are man pages.\nUsers should first consult the\n[ctags(1)](https://docs.ctags.io/en/latest/man/ctags.1.html), and [other man\npages](https://docs.ctags.io/en/latest/man-pages.html) if necessary.\n\n[Universal Ctags Hacking Guide](https://docs.ctags.io), which also includes the\nman pages, is primarily for developers and provides additional information to\nthe man pages, including experimental features.\n\nSee also `*/README.md` on this repository.\n\n## Differences from exuberant-ctags ##\n\nYou may be interested in how Universal Ctags is different from Exuberant Ctags.\nSee\n[ctags-incompatibilities(7)](https://docs.ctags.io/en/latest/man/ctags-incompatibilities.7.html)\nand [Introduced changes](https://docs.ctags.io/en/latest/news.html) for details.\n\nThe most significant incompatible changes:\n\n* Universal Ctags doesn't load `~/.ctags` and `./.ctags` at starting up time.\n  Instead, it loads `~/.ctags.d/*.ctags` and `./.ctags.d/*.ctags`.\n\n* Universal Ctags is more strict about characters that can be\n  used in kind letters and kind names than Exuberant-ctags.\n\n  - The letter must be an alphabetical character (`[a-zA-EG-Z]`).\n    `F` is reserved for `file` kind.\n\n  - The first character of the name must be alphabetic, and\n    the rest characters must be alphanumeric (`[a-zA-Z][a-zA-Z0-9]*`).\n\n  The detailed background is explained in\n  [#1737](https://github.com/universal-ctags/ctags/pull/1737).\n\n  If you want to reuse your `.ctags` written for Exuberant-ctags,\n  you must review kind letters and names defined with `--regex-<LANG>=...`\n  options. When updating the definitions, using `--kinddef-<LANG>=...` option\n  is appreciated.\n\n## [CVE-2022-4515](https://access.redhat.com/security/cve/CVE-2022-4515) ##\nIt is not affected to Universal Ctags.\nIt was fixed in [e00c55d7a0204dc1d0ae316141323959e1e16162](https://github.com/universal-ctags/ctags/commit/e00c55d7a0204dc1d0ae316141323959e1e16162) in 2016. Thanks to the reporter.\n\nPull-requests are welcome!"
}
