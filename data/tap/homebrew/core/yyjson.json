{
  "name": "yyjson",
  "full_name": "yyjson",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "High performance JSON library written in ANSI C",
  "license": "MIT",
  "homepage": "https://github.com/ibireme/yyjson",
  "versions": {
    "stable": "0.7.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/ibireme/yyjson/archive/refs/tags/0.7.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "9b91ee48ac1fe5939f747d49f123d9a522b5f4e1e46165c1871936d583628a06"
    },
    "head": {
      "url": "https://github.com/ibireme/yyjson.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/yyjson/blobs/sha256:b6bac0295145a59d5f71c343db6ac6d1e948df09c6d22bc5bc78ee9fee3808db",
          "sha256": "b6bac0295145a59d5f71c343db6ac6d1e948df09c6d22bc5bc78ee9fee3808db"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/yyjson/blobs/sha256:1c1a55c76ee36ae972aec250fb53cce4c0ee20b6a059fe0da32556fa01c8caa9",
          "sha256": "1c1a55c76ee36ae972aec250fb53cce4c0ee20b6a059fe0da32556fa01c8caa9"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/yyjson/blobs/sha256:bb39c4690b578fb5a7d1d23f4e7fc486d711dcca0d468fc81db3e8ca9c3c7505",
          "sha256": "bb39c4690b578fb5a7d1d23f4e7fc486d711dcca0d468fc81db3e8ca9c3c7505"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/yyjson/blobs/sha256:4dae75c464e8b0f897de3565b5fd645ac2eaf8bfd8f56b2c435f1ad1772267fa",
          "sha256": "4dae75c464e8b0f897de3565b5fd645ac2eaf8bfd8f56b2c435f1ad1772267fa"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/yyjson/blobs/sha256:f101391775b924424c2b340d8b80dc600ef268711ab8042b973008d81b80fc0b",
          "sha256": "f101391775b924424c2b340d8b80dc600ef268711ab8042b973008d81b80fc0b"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/yyjson/blobs/sha256:5df824a5bb3b260dc471c9373d525711d1006ff234f719d3e87bf4c10e80b01b",
          "sha256": "5df824a5bb3b260dc471c9373d525711d1006ff234f719d3e87bf4c10e80b01b"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/yyjson/blobs/sha256:7232926fd910314cd7c9fe6a6426309064d00f3e43025a8a5dd9ec56ddfe0b25",
          "sha256": "7232926fd910314cd7c9fe6a6426309064d00f3e43025a8a5dd9ec56ddfe0b25"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/yyjson.rb",
  "ruby_source_checksum": {
    "sha256": "f4fc8ac78d6085c8cf9b32b63e4c309bc5770651262204992c7f006690d4a446"
  },
  "date_added": "2023-07-14T17:02:29-04:00",
  "readme": "\n# Introduction\n\n[![Build](https://img.shields.io/github/actions/workflow/status/ibireme/yyjson/cmake.yml?branch=master&style=flat-square)](https://github.com/ibireme/yyjson/actions/workflows/cmake.yml)\n[![Codecov](https://img.shields.io/codecov/c/github/ibireme/yyjson/master?style=flat-square)](https://codecov.io/gh/ibireme/yyjson)\n[![License](https://img.shields.io/github/license/ibireme/yyjson?color=blue&style=flat-square)](https://github.com/ibireme/yyjson/blob/master/LICENSE)\n[![Version](https://img.shields.io/github/v/release/ibireme/yyjson?color=orange&style=flat-square)](https://github.com/ibireme/yyjson/releases)\n\nA high performance JSON library written in ANSI C.\n\n# Features\n- **Fast**: can read or write gigabytes per second JSON data on modern CPUs.\n- **Portable**: complies with ANSI C (C89) for cross-platform compatibility.\n- **Strict**: complies with [RFC 8259](https://datatracker.ietf.org/doc/html/rfc8259) JSON standard, ensuring strict number format and UTF-8 validation.\n- **Extendable**: offers options to allow comments, trailing commas, NaN/Inf, and custom memory allocator.\n- **Accuracy**: can accurately read and write `int64`, `uint64`, and `double` numbers.\n- **Flexible**: supports unlimited JSON nesting levels, `\\u0000` characters, and non null-terminated strings.\n- **Manipulation**: supports querying and modifying using [JSON Pointer](https://datatracker.ietf.org/doc/html/rfc6901), [JSON Patch](https://datatracker.ietf.org/doc/html/rfc6902) and [JSON Merge Patch](https://datatracker.ietf.org/doc/html/rfc7386).\n- **Developer-Friendly**: easy integration with only one `h` and one `c` file.\n\n# Limitations\n- An array or object is stored as a [data structure](https://ibireme.github.io/yyjson/doc/doxygen/html/md_doc__data_structure.html) such as linked list, which makes accessing elements by index or key slower than using an iterator.\n- Duplicate keys are allowed in an object, and the order of the keys is preserved.\n- JSON parsing result is immutable, requiring a `mutable copy` for modification.\n\n# Performance\nBenchmark project and dataset: [yyjson_benchmark](https://github.com/ibireme/yyjson_benchmark)\n\nThe simdjson's new `On Demand` API is faster if most JSON fields are known at compile-time.\nThis benchmark project only checks the DOM API, a new benchmark will be added later.\n\n#### AWS EC2 (AMD EPYC 7R32, gcc 9.3)\n![ec2_chart](doc/images/perf_reader_ec2.svg)\n\n|twitter.json|parse (GB/s)|stringify (GB/s)|\n|---|---|---|\n|yyjson(insitu)|1.80|1.51|\n|yyjson|1.72|1.42|\n|simdjson|1.52|0.61|\n|sajson|1.16|   |\n|rapidjson(insitu)|0.77|   |\n|rapidjson(utf8)|0.26|0.39|\n|cjson|0.32|0.17|\n|jansson|0.05|0.11|\n\n\n#### iPhone (Apple A14, clang 12)\n![a14_chart](doc/images/perf_reader_a14.svg)\n\n|twitter.json|parse (GB/s)|stringify (GB/s)|\n|---|---|---|\n|yyjson(insitu)|3.51|2.41|\n|yyjson|2.39|2.01|\n|simdjson|2.19|0.80|\n|sajson|1.74||\n|rapidjson(insitu)|0.75| |\n|rapidjson(utf8)|0.30|0.58|\n|cjson|0.48|0.33|\n|jansson|0.09|0.24|\n\nMore benchmark reports with interactive charts (update 2020-12-12)\n\n|Platform|CPU|Compiler|OS|Report|\n|---|---|---|---|---|\n|Intel NUC 8i5|Core i5-8259U|msvc 2019|Windows 10 2004|[Charts](https://ibireme.github.io/yyjson_benchmark/reports/Intel_NUC_8i5_msvc_2019.html)|\n|Intel NUC 8i5|Core i5-8259U|clang 10.0|Ubuntu 20.04|[Charts](https://ibireme.github.io/yyjson_benchmark/reports/Intel_NUC_8i5_clang_10.html)|\n|Intel NUC 8i5|Core i5-8259U|gcc 9.3|Ubuntu 20.04|[Charts](https://ibireme.github.io/yyjson_benchmark/reports/Intel_NUC_8i5_gcc_9.html)|\n|AWS EC2 c5a.large|AMD EPYC 7R32|gcc 9.3|Ubuntu 20.04|[Charts](https://ibireme.github.io/yyjson_benchmark/reports/EC2_c5a.large_gcc_9.html)|\n|AWS EC2 t4g.medium|Graviton2 (ARM64)|gcc 9.3|Ubuntu 20.04|[Charts](https://ibireme.github.io/yyjson_benchmark/reports/EC2_t4g.medium_gcc_9.html)|\n|Apple iPhone 12 Pro|A14 (ARM64)|clang 12.0|iOS 14|[Charts](https://ibireme.github.io/yyjson_benchmark/reports/Apple_A14_clang_12.html)|\n\n### For better performance, yyjson prefers:\n* A modern processor with:\n    * high instruction level parallelism\n    * excellent branch predictor\n    * low penalty for misaligned memory access\n* A modern compiler with good optimizer (e.g. clang)\n\n\n# Sample Code\n\n### Read JSON string\n```c\nconst char *json = \"{\\\"name\\\":\\\"Mash\\\",\\\"star\\\":4,\\\"hits\\\":[2,2,1,3]}\";\n\n// Read JSON and get root\nyyjson_doc *doc = yyjson_read(json, strlen(json), 0);\nyyjson_val *root = yyjson_doc_get_root(doc);\n\n// Get root[\"name\"]\nyyjson_val *name = yyjson_obj_get(root, \"name\");\nprintf(\"name: %s\\n\", yyjson_get_str(name));\nprintf(\"name length:%d\\n\", (int)yyjson_get_len(name));\n\n// Get root[\"star\"]\nyyjson_val *star = yyjson_obj_get(root, \"star\");\nprintf(\"star: %d\\n\", (int)yyjson_get_int(star));\n\n// Get root[\"hits\"], iterate over the array\nyyjson_val *hits = yyjson_obj_get(root, \"hits\");\nsize_t idx, max;\nyyjson_val *hit;\nyyjson_arr_foreach(hits, idx, max, hit) {\n    printf(\"hit%d: %d\\n\", (int)idx, (int)yyjson_get_int(hit));\n}\n\n// Free the doc\nyyjson_doc_free(doc);\n\n// All functions accept NULL input, and return NULL on error.\n```\n\n### Write JSON string\n```c\n// Create a mutable doc\nyyjson_mut_doc *doc = yyjson_mut_doc_new(NULL);\nyyjson_mut_val *root = yyjson_mut_obj(doc);\nyyjson_mut_doc_set_root(doc, root);\n\n// Set root[\"name\"] and root[\"star\"]\nyyjson_mut_obj_add_str(doc, root, \"name\", \"Mash\");\nyyjson_mut_obj_add_int(doc, root, \"star\", 4);\n\n// Set root[\"hits\"] with an array\nint hits_arr[] = {2, 2, 1, 3};\nyyjson_mut_val *hits = yyjson_mut_arr_with_sint32(doc, hits_arr, 4);\nyyjson_mut_obj_add_val(doc, root, \"hits\", hits);\n\n// To string, minified\nconst char *json = yyjson_mut_write(doc, 0, NULL);\nif (json) {\n    printf(\"json: %s\\n\", json); // {\"name\":\"Mash\",\"star\":4,\"hits\":[2,2,1,3]}\n    free((void *)json);\n}\n\n// Free the doc\nyyjson_mut_doc_free(doc);\n```\n\n### Read JSON file with options\n```c\n// Read JSON file, allowing comments and trailing commas\nyyjson_read_flag flg = YYJSON_READ_ALLOW_COMMENTS | YYJSON_READ_ALLOW_TRAILING_COMMAS;\nyyjson_read_err err;\nyyjson_doc *doc = yyjson_read_file(\"/tmp/config.json\", flg, NULL, &err);\n\n// Iterate over the root object\nif (doc) {\n    yyjson_val *obj = yyjson_doc_get_root(doc);\n    yyjson_obj_iter iter;\n    yyjson_obj_iter_init(obj, &iter);\n    yyjson_val *key, *val;\n    while ((key = yyjson_obj_iter_next(&iter))) {\n        val = yyjson_obj_iter_get_val(key);\n        printf(\"%s: %s\\n\", yyjson_get_str(key), yyjson_get_type_desc(val));\n    }\n} else {\n    printf(\"read error (%u): %s at position: %ld\\n\", err.code, err.msg, err.pos);\n}\n\n// Free the doc\nyyjson_doc_free(doc);\n```\n\n### Write JSON file with options\n```c\n// Read the JSON file as a mutable doc\nyyjson_doc *idoc = yyjson_read_file(\"/tmp/config.json\", 0, NULL, NULL);\nyyjson_mut_doc *doc = yyjson_doc_mut_copy(idoc, NULL);\nyyjson_mut_val *obj = yyjson_mut_doc_get_root(doc);\n\n// Remove null values in root object\nyyjson_mut_obj_iter iter;\nyyjson_mut_obj_iter_init(obj, &iter);\nyyjson_mut_val *key, *val;\nwhile ((key = yyjson_mut_obj_iter_next(&iter))) {\n    val = yyjson_mut_obj_iter_get_val(key);\n    if (yyjson_mut_is_null(val)) {\n        yyjson_mut_obj_iter_remove(&iter);\n    }\n}\n\n// Write the json pretty, escape unicode\nyyjson_write_flag flg = YYJSON_WRITE_PRETTY | YYJSON_WRITE_ESCAPE_UNICODE;\nyyjson_write_err err;\nyyjson_mut_write_file(\"/tmp/config.json\", doc, flg, NULL, &err);\nif (err.code) {\n    printf(\"write error (%u): %s\\n\", err.code, err.msg);\n}\n\n// Free the doc\nyyjson_doc_free(idoc);\nyyjson_mut_doc_free(doc);\n```\n\n# Documentation\nThe latest (unreleased) documentation can be accessed in the [doc](https://github.com/ibireme/yyjson/tree/master/doc) directory.\nThe pre-generated Doxygen HTML for the release version can be viewed here:\n* [Home Page](https://ibireme.github.io/yyjson/doc/doxygen/html/)\n    * [Build and test](https://ibireme.github.io/yyjson/doc/doxygen/html/md_doc__build_and_test.html)\n    * [API and sample code](https://ibireme.github.io/yyjson/doc/doxygen/html/md_doc__a_p_i.html)\n    * [Data structure](https://ibireme.github.io/yyjson/doc/doxygen/html/md_doc__data_structure.html)\n    * [Changelog](https://ibireme.github.io/yyjson/doc/doxygen/html/md__c_h_a_n_g_e_l_o_g.html)\n\n# TODO\n* [x] Add documentation page.\n* [x] Add GitHub workflow for CI and codecov.\n* [x] Add more tests: valgrind, sanitizer.\n* [x] Support JSON Pointer to query value from document.\n* [x] Add fuzzer.\n* [x] Add `RAW` type for JSON reader and writer.\n* [ ] Add streaming API for JSON reader and writer.\n* [ ] Add documentation about performance.\n* [ ] Optimize performance for 32-bit processor.\n\n# License\nThis project is released under the MIT license."
}
