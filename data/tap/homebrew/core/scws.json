{
  "name": "scws",
  "full_name": "scws",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Simple Chinese Word Segmentation",
  "license": "BSD-3-Clause",
  "homepage": "https://github.com/hightman/scws",
  "versions": {
    "stable": "1.2.3",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "http://www.xunsearch.com/scws/down/scws-1.2.3.tar.bz2",
      "tag": null,
      "revision": null,
      "checksum": "60d50ac3dc42cff3c0b16cb1cfee47d8cb8c8baa142a58bc62854477b81f1af5"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/scws/blobs/sha256:6cdacaab4cd3ed03a55566db445ac6dc331bb653a15fa5c1927e829e91a3a8c4",
          "sha256": "6cdacaab4cd3ed03a55566db445ac6dc331bb653a15fa5c1927e829e91a3a8c4"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/scws/blobs/sha256:fe10618f55a2c8275a3e072f9bce64662007c4cb3f5785bf704c92f7f2b43845",
          "sha256": "fe10618f55a2c8275a3e072f9bce64662007c4cb3f5785bf704c92f7f2b43845"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/scws/blobs/sha256:ac7b0ac31fb12e9c1e4611e00dc70e5a5a4eedec4cc3d700826937eb4f67f5a6",
          "sha256": "ac7b0ac31fb12e9c1e4611e00dc70e5a5a4eedec4cc3d700826937eb4f67f5a6"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/scws/blobs/sha256:c03c054ab769c6deb805ca79b72620f73aa4d364b2c549f6d390b89128951e11",
          "sha256": "c03c054ab769c6deb805ca79b72620f73aa4d364b2c549f6d390b89128951e11"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/scws/blobs/sha256:27a90e1636343c3ba08280f7717cca86405e82efca0e0b6660ea5c850de8b38e",
          "sha256": "27a90e1636343c3ba08280f7717cca86405e82efca0e0b6660ea5c850de8b38e"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/scws/blobs/sha256:6d87c6c7431b97511b7ce3ec42493bff7685c6ee2682d9733428a71826a8b300",
          "sha256": "6d87c6c7431b97511b7ce3ec42493bff7685c6ee2682d9733428a71826a8b300"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/scws/blobs/sha256:4dedb954c6d17b1cc42d41a978e41a897110e042bbd6099f82bdbd0ff86b7aad",
          "sha256": "4dedb954c6d17b1cc42d41a978e41a897110e042bbd6099f82bdbd0ff86b7aad"
        },
        "mojave": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/scws/blobs/sha256:feb648d3c6c98b2e693086371dae419f88b56b6d58e5ede76ffa882a6f9be4b6",
          "sha256": "feb648d3c6c98b2e693086371dae419f88b56b6d58e5ede76ffa882a6f9be4b6"
        },
        "high_sierra": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/scws/blobs/sha256:94977ce56fa0c3c9d2fb21fe52067b49be65247b41d723893ac8c91f0e2dbbf3",
          "sha256": "94977ce56fa0c3c9d2fb21fe52067b49be65247b41d723893ac8c91f0e2dbbf3"
        },
        "sierra": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/scws/blobs/sha256:81e6665fd65aae5e35c3e0b3f9f80bdaaf8ac787dfe6fe9e8454a8cb5cbcba02",
          "sha256": "81e6665fd65aae5e35c3e0b3f9f80bdaaf8ac787dfe6fe9e8454a8cb5cbcba02"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/scws/blobs/sha256:146dd8b73ef91bcb9118130d13e30803b4213eddeda7d80b5f2a5d75e83f7c64",
          "sha256": "146dd8b73ef91bcb9118130d13e30803b4213eddeda7d80b5f2a5d75e83f7c64"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/scws.rb",
  "ruby_source_checksum": {
    "sha256": "de0b479f6e1600d645dfba506bb2d1ec9977ef3ceaa4a22b8d247b1c0df85345"
  },
  "date_added": "2019-04-25T22:48:42+02:00",
  "readme": "README of SCWS\n===============\n$Id$\n\nSCWS 简介\n---------\n\n[SCWS][1] 是 Simple Chinese Word Segmentation 的首字母缩写（即：简易中文分词系统）。\n这是一套基于词频词典的机械式中文分词引擎，它能将一整段的中文文本基本正确地切分成词。词是\n中文的最小语素单位，但在书写时并不像英语会在词之间用空格分开，所以如何准确并快速分词一直\n是中文分词的攻关难点。\n\nSCWS 采用纯 C 语言开发，不依赖任何外部库函数，可直接使用动态链接库嵌入应用程序，支持的\n中文编码包括 `GBK`、`UTF-8` 等。此外还提供了 [PHP][2] 扩展模块，可在 PHP 中快速\n而方便地使用分词功能。\n\n分词算法上并无太多创新成分，采用的是自己采集的词频词典，并辅以一定的专有名称，人名，地名，\n数字年代等规则识别来达到基本分词，经小范围测试准确率在 90% ~ 95% 之间，基本上能满足一些\n小型搜索引擎、关键字提取等场合运用。首次雏形版本发布于 2005 年底。\n\nSCWS 由 [hightman][8] 开发，并以 BSD 许可协议开源发布 ，参见 [COPYING][7]。\n\n\nPHP 分词演示\n------------\n\n* _GBK_ <http://www.xunsearch.com/scws/demo/v4.php>\n* _UTF-8_ <http://www.xunsearch.com/scws/demo/v48.php>\n* _繁体中文_ <http://www.xunsearch.com/scws/demo/v48.cht.php>\n\n\n安装\n-----\n\n目前 scws 只提供源码包，和大多数 GNU 软件的编译安装步骤一样。下面我们以 `Linux` 系统为例，\n要求装有 `gcc` 编译器。`Windows` 上则建议用 [cygwin][3] 或 [mingw][4] 环境编译。\n\n1. 取得 scws 源码并解压到当前目录\n   ```\n   wget -q -O - http://www.xunsearch.com/scws/down/scws-1.2.1.tar.bz2 | tar xjf -\n   ```\n\n2. 进入源码目录配置和编译\n   ```\n   cd scws-1.2.1 ; ./configure ; make install\n   ```\n   > 注意：这是以默认方式安装到 `/usr/local` 目录。详细配置参数执行 `./configure --help` 查看。\n\n\nPHP 扩展\n---------\n\n在 UNIX 类的系统上，请直接从源码方式编译安装 PHP 扩展；对于 windows 系统，请直接下载我们编译好的\n`php_scws.dll` 即可。\n\n假定您已经将 scws 安装到 `$prefix` 目录，还要求系统环境装有 autoconf automake 及 phpize 工具。\n\n1. 进入源码目录的 phpext/ 并执行 `phpize` (位于 php 安装目录下的 bin 目录里)\n\n2. 执行 `configure` 进行配置和基础检测，假定您的 php 安装在 `$php_prefix` 目录\n   ```\n   ./configure --with-scws=/usr/local --with-php-config=$php_prefix/bin/php-config\n   ```\n\n3. 先编译然后以 `root` 身份安装\n   ```\n   make\n   sudo make install\n   ```\n\n4. 在 php.ini 中加入以下内容\n   ```\n   [scws]\n   ; 注意请检查 php.ini 中的 extension_dir 的设定值是否正确, 否则请将 extension_dir 设为空，\n   ; 再把 extension = scws.so 或 php_scws.dll 指定绝对路径。\n   extension = scws.so\n   scws.default.charset = gbk\n   scws.default.fpath = $prefix/etc\n   ```\n\n5. 命令行下执行 `php -m` 就能看到 scws 了，phpinfo() 也会包含关于 scws 的信息。\n\n6. windows 下的 php 扩展是采用 dll 库文件。我们已预编译若干个版本，采用 zip 压缩位于\n   `phpext/win32/php_scws-1.2.1-win32.zip`，请直接解压后选择相应版本的 `php_scws.dll`。\n   将它复制到 PHP 的扩展目录中（通常是 extensions 或 ext 目录），然后参考上面的方式修改 `php.ini`。\n\n7. 关于 PHP 扩展的示例用法及开发参考，请参见 [phpext/README.md][6]。\n\n\n配套工具用法\n------------\n\n1. **$prefix/bin/scws** 这是分词的命令行工具，执行 scws -h 可以看到详细帮助说明。\n   ```\n   Usage: scws [options] [[-i] input] [[-o] output]\n   ```\n   * _-i string|file_ 要切分的字符串或文件，如不指定则程序自动读取标准输入，每输入一行执行一次分词\n   * _-o file_ 切分结果输出保存的文件路径，若不指定直接输出到屏幕\n   * _-c charset_ 指定分词的字符集，默认是 gbk，可选 utf8\n   * _-r file_ 指定规则集文件（规则集用于数词、数字、专有名字、人名的识别）\n   * _-d file[:file2[:...]]_ 指定词典文件路径（XDB格式，请在 -c 之后使用）\n     ```\n     自 1.1.0 起，支持多词典同时载入，也支持纯文本词典（必须是.txt结尾），多词典路径之间用冒号(:)隔开，\n     排在越后面的词典优先级越高。\n     \n     文本词典的数据格式参见 scws-gen-dict 所用的格式，但更宽松一些，允许用不定量的空格分开，只有<词>是必备项目，\n     其它数据可有可无，当词性标注为“!”（叹号）时表示该词作废，即使在较低优先级的词库中存在该词也将作废。\n     ```\n   * _-M level_ 复合分词的级别：1~15，按位异或的 1|2|4|8 依次表示 短词|二元|主要字|全部字，缺省不复合分词。\n   * _-I_ 输出结果忽略跳过所有的标点符号\n   * _-A_ 显示词性\n   * _-E_ 将 xdb 词典读入内存 xtree 结构 (如果切分的文件很大才需要)\n   * _-N_ 不显示切分时间和提示\n   * _-D_ debug 模式 (很少用，需要编译时打开 --enable-debug)\n   * _-U_ 将闲散单字自动调用二分法结合\n   * _-t num_ 取得前 num 个高频词\n   * _-a [~]attr1[,attr2[,...]]_ 只显示某些词性的词，加~表示过滤该词性的词，多个词性之间用逗号分隔\n   * _-v_ 查看版本\n\n2. **$prefix/bin/scws-gen-dict** 词典转换工具\n   ```\n   Usage: scws-gen-dict [options] [-i] dict.txt [-o] dict.xdb\n   ```\n   * _-c charset_ 指定字符集，默认为 gbk，可选 utf8\n   * _-i file_ 文本文件(txt)，默认为 dict.txt\n   * _-o file_ 输出 xdb 文件的路径，默认为 dict.xdb\n   * _-p num_ 指定 XDB 结构 HASH 质数（通常不需要）\n   * _-U_ 反向解压，将输入的 xdb 文件转换为 txt 格式输出 （TODO）\n\n   > 文本词典格式为每行一个词，各行由 4 个字段组成，字段之间用若干个空格或制表符(\\t)分隔。\n   > 含义（其中只有 <词> 是必须提供的），`#` 开头的行视为注释忽略不计：\n   > ```\n   > #<词>  <词频(TF)>  <词重(IDF)>  <词性(北大标注)>\n   > 新词条 12.0        2.2          n\n   > ```\n\nlibscws API\n-------------\n\n这是整合 scws 到其它应和程序的接口说明，详见 [API][5]。\n\n\nrules.ini 规则集\n-----------------\n\n（暂缺）\n\n\n关于 XDB 词典\n--------------\n\n我们的词典使用的是自行开发的专用 XDB 格式，免费提供的词典是通用的互联网信息词汇集，\n收录了大约 28 万个词。\n\n如果您需要定制词典以作特殊用途，请与我们联系，可能会视情况进行收费。\n\n\n性能指标\n---------\n\n在 FreeBSD 6.2 系统，单核单 CPU 至强 3.0G 的服务器上，测试长度为 80,535 的文本。\n用附带的命令行工具耗时将约 0.17 秒，若改用 php 扩展方式调用，则耗时约为 0.65 秒。\n\n分词精度 95.60%，召回率 90.51% (F-1: 0.93)\n\n\n其它\n-------\n\n该文档由 hightman 于 2007/06/08 首次编写，同时在不断修订中！\n\n项目主页：<http://www.xunsearch.com/scws> 我的邮箱：hightman2@yahoo.com.cn\n\n\n[1]: http://www.xunsearch.com/scws\n[2]: http://www.php.net\n[3]: http://www.cygwin.com\n[4]: http://www.mingw.org\n[5]: https://github.com/hightman/scws/blob/master/API.md\n[6]: https://github.com/hightman/scws/blob/master/phpext/README.md\n[7]: https://github.com/hightman/scws/blob/master/COPYING\n[8]: http://www.hightman.cn"
}
