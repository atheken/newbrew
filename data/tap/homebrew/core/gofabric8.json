{
  "name": "gofabric8",
  "full_name": "gofabric8",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "CLI for fabric8 running on Kubernetes or OpenShift",
  "license": "Apache-2.0",
  "homepage": "https://github.com/fabric8io/gofabric8/",
  "versions": {
    "stable": "0.4.176",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/fabric8io/gofabric8/archive/v0.4.176.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "78e44fdfd69605f50ab1f5539f2d282ce786b28b88c49d0f9671936c9e37355a"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gofabric8/blobs/sha256:fc81a3d411740c59daa6f2130871e78b52533709c0eccdba91b5ac8b98d283ae",
          "sha256": "fc81a3d411740c59daa6f2130871e78b52533709c0eccdba91b5ac8b98d283ae"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gofabric8/blobs/sha256:33dd12b78757e29d078afe1fbb57fc4530c71f804f88c96ec48452f8b2053ad2",
          "sha256": "33dd12b78757e29d078afe1fbb57fc4530c71f804f88c96ec48452f8b2053ad2"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gofabric8/blobs/sha256:07d4ba74501720a1e068a62afb148da767c509c72f0ab14ba3ec22349d6cfd73",
          "sha256": "07d4ba74501720a1e068a62afb148da767c509c72f0ab14ba3ec22349d6cfd73"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gofabric8/blobs/sha256:4d4236c764b54c4699ceaf07831bb6fcd5709e99b343c8a2b5288ff3faa40f94",
          "sha256": "4d4236c764b54c4699ceaf07831bb6fcd5709e99b343c8a2b5288ff3faa40f94"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gofabric8/blobs/sha256:6400faecf5cfe3dfa54a04839869d327cc3f71d586aa5740d9f63e1e1f13c5f4",
          "sha256": "6400faecf5cfe3dfa54a04839869d327cc3f71d586aa5740d9f63e1e1f13c5f4"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gofabric8/blobs/sha256:6fefb818e47769d4c0811db307d5000aa7d3d48bcdae42e24b0a27272e01641f",
          "sha256": "6fefb818e47769d4c0811db307d5000aa7d3d48bcdae42e24b0a27272e01641f"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gofabric8/blobs/sha256:d1bfb6f211dbd423cf15ea057c94f42afab57ec7b955b33057086dbc84b2c1f9",
          "sha256": "d1bfb6f211dbd423cf15ea057c94f42afab57ec7b955b33057086dbc84b2c1f9"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": true,
  "disable_date": "2022-07-31",
  "disable_reason": "repo_archived",
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/gofabric8.rb",
  "ruby_source_checksum": {
    "sha256": "78b028ded978534bc0eb3c3485166c20db401f0cf317c132f82fbe28ef1f0c59"
  },
  "date_added": "2016-09-26T08:36:09+01:00",
  "readme": "# gofabric8\n\n[![Go Report Card](https://goreportcard.com/badge/github.com/fabric8io/gofabric8)](https://goreportcard.com/report/github.com/fabric8io/gofabric8)\n[![APACHEv2 License](https://img.shields.io/badge/license-APACHEv2-blue.svg)](https://github.com/fabric8io/gofabric8/blob/master/LICENSE)\n\ngofabric8 is used to validate & deploy fabric8 components on to your Kubernetes\nor OpenShift environment\n\nFind more information at http://fabric8.io.\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Getting started](#getting-started)\n  - [Install gofabric8](#install-gofabric8)\n  - [Install dependencies](#install-dependencies)\n    - [Install minikube](#install-minikube)\n    - [Install minishift](#install-minishift)\n  - [Install the fabric8 microservices platform](#install-the-fabric8-microservices-platform)\n  - [Reusing the Docker daemon](#reusing-the-docker-daemon)\n  - [Run different versions](#run-different-versions)\n  - [Usage](#usage)\n- [Shell completion](#shell-completion)\n- [Development](#development)\n  - [Prerequisites](#prerequisites)\n  - [Developing](#developing)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Getting started\n\n### Install gofabric8\n\nGet the [latest](https://github.com/fabric8io/gofabric8/releases/latest/)\n`gofabric8` or use the following script to download it.\n\n```\ncurl -sS https://get.fabric8.io/download.txt | bash\n```\n\nAdd '~/.fabric8/bin' to your path so you can execute the new binaries, for\nexample: edit your ~/.zshrc or ~/.bashrc and append to the end of the file\n\n```\nexport PATH=$PATH:~/.fabric8/bin\nsource ~/.zshrc or ~/.bashrc\n```\n\n### Install dependencies\n\nThe `gofabric8 install` installs the dependencies to locally run the fabric8\nmicroservices platform - either [minishift][minishift] and [openshift\nclient][oc] or [minikube][minikube] and [kubectl][kubectl] along with necessary\ndrivers. The binaries are downloaded to `~/.fabric8/bin`.\n\n#### Install minikube\n\n```\ngofabric8 install\n```\n\n#### Install minishift\n\n```\ngofabric8 install --minishift\n```\n\n### Install the fabric8 microservices platform\n\nTo install the [fabric8 microservices platform](http://fabric8.io/) then run the following:\n\n```sh\ngofabric8 deploy\n```\n\nIf you are deploying to a remote OpenShift instance make sure to set the domain\nso we can generate routes to access applications\n\n```\ngofabric8 deploy --domain=your.domain.io\n```\n\n### Reusing the Docker daemon\n\nWhen developing locally and using a single VM its really handy to reuse the\nDocker daemon inside the VM; as this means you don't have to build on your host\nmachine and push the image into a docker registry - you can just build inside\nthe same docker daemon as minikube which speeds up local experiments.\n\nTo be able to work with the docker daemon on your mac/linux host use the\ndocker-env command in your shell:\n\n```\neval $(gofabric8 docker-env)\n```\n\nYou should now be able to use docker on the command line on your host mac/linux\nmachine talking to the docker daemon inside the minikube VM:\n\n```\ndocker ps\n```\n\nRemember to turn off the `imagePullPolicy:Always`, as otherwise kubernetes won't\nuse images you built locally.\n\n### Run different versions\n\nWhen deploying, by default the latest release version is used. In order to\ndeploy a specific version you can use the various`--version-xxxx` flags as\ndetailed under\n\n```\ngofabric8 deploy help\n```\n\n### Usage\n\n```\ngofabric8 help\ngofabric8 is used to validate & deploy fabric8 components on to your Kubernetes or OpenShift environment\n\t\t\t\t\t\t\t\tFind more information at http://fabric8.io.\n\nUsage:\n  gofabric8 [flags]\n  gofabric8 [command]\n\nAvailable Commands:\n  bdd-env          Generates the BDD environment variables for use by the BDD test pipeline\n  che              Opens a shell in a Che workspace pod\n  clean            Clean up a resource type without deleting it\n  completion       Output shell completion code for the given shell (bash or zsh)\n  console          Open the fabric8 console\n  copy-endpoints   Copies endpoints from the current namespace to a target namespace\n  create           Create a resource type\n  delete           Delete a resource type\n  deploy           Deploy fabric8 to your Kubernetes or OpenShift environment\n  docker-env       Sets up docker env variables; Usage 'eval $(gofabric8 docker-env)'\n  e2e              Runs the end to end system tests\n  e2e-console      Points the jenkins namespace at the console to use for E2E tests\n  e2e-env          Generates the E2E environment variables for use by the E2E test pipeline\n  e2e-secret       Creates or updates a Secret for the user for E2E tests\n  erase-pvc        Erase PVC\n  get              Get a resource type\n  ingress          Creates any missing Ingress resources for services\n  install          Installs the dependencies to locally run the fabric8 microservices platform\n  ip               Returns the IP for the cluster gofabric8 is connected to\n  log              Tails the log of the newest pod for the given named Deployment or DeploymentConfig\n  package-versions Displays the versions available for a package\n  packages         Lists the packages that are currently installed\n  pull             Pulls the docker images for the given templates\n  routes           Creates any missing Routes for services\n  run              Runs a fabric8 microservice from one of the installed templates\n  secrets          Set up Secrets on your Kubernetes or OpenShift environment\n  service          Opens the specified Kubernetes service in your browser\n  start            Starts a local cloud development environment\n  status           Gets the status of a local cluster\n  stop             Stops a running local cluster\n  tenant           Commands for working on your tenant\n  test             Runs the end to end system tests\n  upgrade          Upgrades the packages if there is a newer version available\n  validate         Validate your Kubernetes or OpenShift environment\n  version          Display version & exit\n  volumes          Creates a persisent volume for any pending persistance volume claims\n  wait-for         Waits for the listed deployments to be ready - useful for automation and testing\n\nFlags:\n      --as string                         Username to impersonate for the operation\n  -b, --batch export FABRIC8_BATCH=true   Run in batch mode to avoid prompts. Can also be enabled via export FABRIC8_BATCH=true\n      --certificate-authority string      Path to a cert. file for the certificate authority\n      --client-certificate string         Path to a client certificate file for TLS\n      --client-key string                 Path to a client key file for TLS\n      --cluster string                    The name of the kubeconfig cluster to use\n      --context string                    The name of the kubeconfig context to use\n      --insecure-skip-tls-verify          If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure\n      --kubeconfig string                 Path to the kubeconfig file to use for CLI requests.\n      --match-server-version              Require server version to match client version\n  -n, --namespace string                  If present, the namespace scope for this CLI request\n      --password string                   Password for basic authentication to the API server\n      --request-timeout string            The length of time to wait before giving up on a single server request. Non-zero values should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests. (default \"0\")\n  -s, --server string                     The address and port of the Kubernetes API server\n      --token string                      Bearer token for authentication to the API server\n      --user string                       The name of the kubeconfig user to use\n      --username string                   Username for basic authentication to the API server\n      --version-console string            fabric8 version (default \"latest\")\n      --work-project string               The work project (default \"autodetect\")\n  -y, --yes                               Assume yes\n\nUse \"gofabric8 [command] --help\" for more information about a command.\n\n```\n\n## Shell completion\n\n``gofabric8`` provides shell completions, so you can easily complete commands while in the shell.\n\nSimply add this to your ``~/.bashrc`` if you use bash :\n\n```sh\n  source <(gofabric8 completion bash)\n```\n\nor to your ``~/.zshrc`` if you use zsh ::\n\n```sh\n  source <(gofabric8 completion zsh)\n```\n\n## Development\n\n### Prerequisites\n\nInstall [go version 1.7.4](https://golang.org/doc/install)\n\n### Developing\n\n```sh\ngit clone git@github.com:fabric8io/gofabric8.git $GOPATH/src/github.com/fabric8io/gofabric8\nmake\n```\n\nMake changes to *.go files, rerun `make` and execute the generated binary\n\ne.g.\n\n```sh\n./build/gofabric8 deploy\n\n```\n\n[kubectl]: https://kubernetes.io/docs/reference/kubectl/overview/\n[minikube]: https://github.com/kubernetes/minikube\n[minishift]: https://github.com/minishift/minishift\n[oc]: https://docs.openshift.org/latest/cli_reference/index.html"
}
