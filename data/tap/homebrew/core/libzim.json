{
  "name": "libzim",
  "full_name": "libzim",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Reference implementation of the ZIM specification",
  "license": "GPL-2.0-only",
  "homepage": "https://github.com/openzim/libzim",
  "versions": {
    "stable": "8.2.1",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://download.openzim.org/release/libzim/libzim-8.2.1.tar.xz",
      "tag": null,
      "revision": null,
      "checksum": "fcddb400cb71b2c21d5da86fd606e0f45083873f0df5d4529345855a39b5707c"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libzim/blobs/sha256:b32179995f464b76d374d1d34502fb21c00303e3ced9b353953ac2320dee8eb2",
          "sha256": "b32179995f464b76d374d1d34502fb21c00303e3ced9b353953ac2320dee8eb2"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libzim/blobs/sha256:54112606a0c0a8aa3fa1084e8978f92604124e12ad4584aa0f8df8cc01c62ad0",
          "sha256": "54112606a0c0a8aa3fa1084e8978f92604124e12ad4584aa0f8df8cc01c62ad0"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libzim/blobs/sha256:e0a3011dc1e857f84f77e2a9e0b56e2c730f954f22f8ff9a191f873e66290444",
          "sha256": "e0a3011dc1e857f84f77e2a9e0b56e2c730f954f22f8ff9a191f873e66290444"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libzim/blobs/sha256:0acf18de8f6cd3d2bbc8e4dff266af813466dedaae89e9cfc5f93a3c1116e9e0",
          "sha256": "0acf18de8f6cd3d2bbc8e4dff266af813466dedaae89e9cfc5f93a3c1116e9e0"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libzim/blobs/sha256:7298365283c04ea9a9e1917d94f1348f2fd28da409b223ed2d185847f57eb770",
          "sha256": "7298365283c04ea9a9e1917d94f1348f2fd28da409b223ed2d185847f57eb770"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libzim/blobs/sha256:15997699641928c370eec76dd3a8f52bc614d19d6b8c89a2e7cac5b162c07c66",
          "sha256": "15997699641928c370eec76dd3a8f52bc614d19d6b8c89a2e7cac5b162c07c66"
        },
        "x86_64_linux": {
          "cellar": "/home/linuxbrew/.linuxbrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/libzim/blobs/sha256:b59dae0b79f9d692ffb5ff2aecf4d468a984b1a99bc5e2a3b56d64ddbc300a38",
          "sha256": "b59dae0b79f9d692ffb5ff2aecf4d468a984b1a99bc5e2a3b56d64ddbc300a38"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "meson",
    "ninja",
    "pkg-config"
  ],
  "dependencies": [
    "icu4c",
    "xapian",
    "xz",
    "zstd"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    {
      "python": "build"
    }
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/libzim.rb",
  "ruby_source_checksum": {
    "sha256": "2d83a1856924092f0ee9bd16d36e88fd87469bb094a2b8746654210416591429"
  },
  "date_added": "2023-02-12T13:58:37+00:00",
  "readme": "Libzim\n======\n\nThe Libzim is the reference implementation for the [ZIM file\nformat](https://wiki.openzim.org/wiki/ZIM_file_format). It's a [software\nlibrary](https://en.wikipedia.org/wiki/Library_(computing)) to read\nand write ZIM files on many systems and architectures. More\ninformation about the ZIM format and the openZIM project at\nhttps://openzim.org/.\n\n[![Release](https://img.shields.io/github/v/tag/openzim/libzim?label=release&sort=semver)](https://download.openzim.org/release/libzim/)\n[![Repositories](https://img.shields.io/repology/repositories/libzim?label=repositories)](https://github.com/openzim/libzim/wiki/Repology)\n[![macOS Homebrew](https://badgen.net/homebrew/v/libzim)](https://formulae.brew.sh/formula/libzim)\n[![License](https://img.shields.io/badge/License-GPL%20v2-blue.svg)](https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html)\n[![Build](https://github.com/openzim/libzim/workflows/CI/badge.svg?query=branch%3Amain)](https://github.com/openzim/libzim/actions?query=branch%3Amain)\n[![Doc](https://readthedocs.org/projects/libzim/badge/?style=flat)](https://libzim.readthedocs.io/en/latest/?badge=latest)\n[![Codecov](https://codecov.io/gh/openzim/libzim/branch/main/graph/badge.svg)](https://codecov.io/gh/openzim/libzim)\n[![CodeFactor](https://www.codefactor.io/repository/github/openzim/libzim/badge)](https://www.codefactor.io/repository/github/openzim/libzim)\n\nDisclaimer\n----------\n\nThis document assumes you have a little knowledge about software\ncompilation. If you experience difficulties with the dependencies or\nwith the Libzim compilation itself, we recommend to have a look to\n[kiwix-build](https://github.com/kiwix/kiwix-build).\n\nPreamble\n--------\n\nAlthough the Libzim can be compiled/cross-compiled on/for many\nsystems, the following documentation explains how to do it on POSIX\nones. It is primarily though for GNU/Linux systems and has been tested\non recent releases of Ubuntu and Fedora.\n\nDependencies\n------------\n\nThe Libzim relies on many third party software libraries. They are\nprerequisites to the Kiwix library compilation. Following libraries\nneed to be available:\n* [LZMA](https://tukaani.org/lzma/) (package `liblzma-dev` on Ubuntu)\n* [ICU](http://site.icu-project.org/) (package `libicu-dev` on Ubuntu)\n* [Zstd](https://facebook.github.io/zstd/) (package `libzstd-dev` on Ubuntu)\n* [Xapian](https://xapian.org/) - optional (package `libxapian-dev` on Ubuntu)\n\nTo test the code:\n* [Google Test](https://github.com/google/googletest) (package `googletest` on Ubuntu)\n* [ZIM Testing Suite](https://github.com/openzim/zim-testing-suite) - Reference test data set\n\nTo build the documentations you need the packages:\n* [Doxygen](https://www.doxygen.nl)\n* Python packages for [Sphinx](https://www.sphinx-doc.org), [Sphinx rtd theme](https://github.com/readthedocs/sphinx_rtd_theme), [Breathe](https://breathe.readthedocs.io) and [Exhale](https://exhale.readthedocs.io) (packages `Sphinx`, `sphinx_rtd_theme`, `Breathe` and `Exhale` while using pip)\n\nThese dependencies may or may not be packaged by your operating\nsystem. They may also be packaged but only in an older version. The\ncompilation script will tell you if one of them is missing or too old.\nIn the worse case, you will have to download and compile a more recent\nversion by hand.\n\nIf you want to install these dependencies locally, then ensure that\nMeson (through `pkg-config`) will properly find them.\n\nEnvironment\n-------------\n\nThe Libzim builds using [Meson](https://mesonbuild.com/) version\n0.43 or higher. Meson relies itself on Ninja, Pkg-config and few other\ncompilation tools. Install them first:\n* Meson\n* Ninja\n* Pkg-config\n\nThese tools should be packaged if you use a cutting edge operating\nsystem. If not, have a look to the [Troubleshooting](#Troubleshooting)\nsection.\n\nCompilation\n-----------\n\nOnce all dependencies are installed, you can compile Libzim with:\n```bash\nmeson . build\nninja -C build\n```\n\nBy default, it will compile dynamic linked libraries. All binary files\nwill be created in the `build` directory created automatically by\nMeson. If you want statically linked libraries, you can add\n`--default-library=static` option to the Meson command.\n\nIf you want to build the documentation, we need to pass the\n`-Ddoc=true` option and run the `doc` target:\n```bash\nmeson . build -Ddoc=true\nninja -C build doc\n```\n\nDepending on your system, `ninja` command may be called `ninja-build`.\n\nBy default, Libzim tries to compile with Xapian (and will generate an\nerror if Xapian is not found).  You can build without Xapian by\npassing the option `-Dwith_xapian=false` :\n```bash\nmeson . build -Dwith_xapian=false\nninja -C build doc\n```\n\nIf Libzim is compiled without Xapian, all search API are removed.  You\ncan test if an installed version of Libzim is compiled with or without\nxapian by testing the define `LIBZIM_WITH_XAPIAN`.\n\nTesting\n-------\n\nZIM files needed by unit-tests are not included in this repository. By\ndefault, Meson will use an internal directory in your build directory,\nbut you can specify another directory with option `test_data_dir`:\n```bash\nmeson . build -Dtest_data_dir=<A_DIR_WITH_TEST_DATA>\n```\n\nWhatever you specify a directory or not, you need a extra step to\ndownload the data. At choice:\n* Get the data from the repository\n  [openzim/zim-testing-suite](https://github.com/openzim/zim-testing-suite)\n  and put it yourself in the directory.\n* Use the script\n  [download_test_data.py](scripts/download_test_data.py) which will\n  download and extract the data for you.\n* As `ninja` to do it for you with `ninja download_test_data` once the\n  project is configured.\n\nThe simple workflow is:\n```bash\nmeson . build # Configure the project (using default directory for test data)\ncd build\nninja # Build\nninja download_test_data # Download the test data\nmeson test # Test\n```\n\nIt is possible to deactivate all tests using test data zim files by\npassing `none` to the `test_data_dir` option:\n```bash\nmeson . build -Dtest_data_dir=none\ncd build\nninja\nmeson test # Run tests but tests needing test zim files.\n```\n\nIf the automated tests fail or timeout, you need to be aware that some\ntests need up to 16GB of memory. You can skip those specific tests with:\n```bash\nSKIP_BIG_MEMORY_TEST=1 meson test\n```\n\nSome tests are checking error detection in multithread environment and\nthey need to sleep to let threads working (and detect error).\nHow many time to wait depends of your computer.\nIf you have `error_in_creator` test failing, you probably need to extend the waiting time.\nThis can be done by setting the env variable `WAIT_TIME_FACTOR_TEST` to a float factor.\nThe waiting time will multiplied by this factor.\n\n```\nWAIT_TIME_FACTOR_TEST=2 meson test\n```\n\n\nInstallation\n------------\n\nIf you want to install the Libzim and the headers you just have\ncompiled on your system, here we go:\n```bash\nninja -C build install\n```\n\nYou might need to run the command as root (or using `sudo`), depending\nwhere you want to install the libraries. After the installation\nsucceeded, you may need to run ldconfig (as root).\n\nUninstallation\n------------\n\nIf you want to uninstall the Libzim:\n```bash\nninja -C build uninstall\n```\n\nLike for the installation, you might need to run the command as root\n(or using `sudo`).\n\nTroubleshooting\n---------------\n\nIf you need to install Meson \"manually\":\n```bash\nvirtualenv -p python3 ./ # Create virtualenv\nsource bin/activate      # Activate the virtualenv\npip3 install meson       # Install Meson\nhash -r                  # Refresh bash paths\n```\n\nIf you need to install Ninja \"manually\":\n```bash\ngit clone git://github.com/ninja-build/ninja.git\ncd ninja\ngit checkout release\n./configure.py --bootstrap\nmkdir ../bin\ncp ninja ../bin\ncd ..\n```\n\nIf the compilation still fails, you might need to get a more recent\nversion of a dependency than the one packaged by your Linux\ndistribution. Try then with a source tarball distributed by the\nproblematic upstream project or even directly from the source code\nrepository.\n\nLicense\n-------\n\n[GPLv2](https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html) or\nlater, see [COPYING](COPYING) for more details."
}
