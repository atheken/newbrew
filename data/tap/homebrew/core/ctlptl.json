{
  "name": "ctlptl",
  "full_name": "ctlptl",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Making local Kubernetes clusters fun and easy to set up",
  "license": "Apache-2.0",
  "homepage": "https://github.com/tilt-dev/ctlptl",
  "versions": {
    "stable": "0.8.20",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/tilt-dev/ctlptl/archive/v0.8.20.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "9a53e048dbd14d754872caae5310eb2331cda2b72f0dd57711504ba2dd8c59d0"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ctlptl/blobs/sha256:2053aed68a26c4ccfe177239da0474dd1a954f8feaf98971cefafafab35e5bf3",
          "sha256": "2053aed68a26c4ccfe177239da0474dd1a954f8feaf98971cefafafab35e5bf3"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ctlptl/blobs/sha256:6f8233bb53777a9e85db595c929026d88213023fa473b45e280ef2b4d6c9ab02",
          "sha256": "6f8233bb53777a9e85db595c929026d88213023fa473b45e280ef2b4d6c9ab02"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ctlptl/blobs/sha256:6dc505f0f5afd88bbf42afba4e77700b3382e3faed71740cfbf792e69c42b426",
          "sha256": "6dc505f0f5afd88bbf42afba4e77700b3382e3faed71740cfbf792e69c42b426"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ctlptl/blobs/sha256:96e8d6e6660b58774756d16fad556b2b79ec3e91343cc1e310f393522b9b2a77",
          "sha256": "96e8d6e6660b58774756d16fad556b2b79ec3e91343cc1e310f393522b9b2a77"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ctlptl/blobs/sha256:2b31cd998b2a09bfe1b96bc7666dbdd8fd9fc26a979c5e28c98bcc5552991e36",
          "sha256": "2b31cd998b2a09bfe1b96bc7666dbdd8fd9fc26a979c5e28c98bcc5552991e36"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ctlptl/blobs/sha256:9ee115f29f114287b6a24f20fba70c1a611e12ace3c9b4041333f8a0f9f13986",
          "sha256": "9ee115f29f114287b6a24f20fba70c1a611e12ace3c9b4041333f8a0f9f13986"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ctlptl/blobs/sha256:d9cf3a556fcbb19371c39fb92c33dcc4a8c2b8cded3fcf66ea1cd5477f5b85b6",
          "sha256": "d9cf3a556fcbb19371c39fb92c33dcc4a8c2b8cded3fcf66ea1cd5477f5b85b6"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/ctlptl.rb",
  "ruby_source_checksum": {
    "sha256": "c3d2bafefb572cc18167a88711084d7a2a8634edc72771dd69dd97ea970f99e3"
  },
  "date_added": "2022-01-04T19:25:08+00:00",
  "readme": "# ctlptl\n\n[![Build Status](https://circleci.com/gh/tilt-dev/ctlptl/tree/main.svg?style=shield)](https://circleci.com/gh/tilt-dev/ctlptl)\n[![GoDoc](https://godoc.org/github.com/tilt-dev/ctlptl?status.svg)](https://pkg.go.dev/github.com/tilt-dev/ctlptl)\n\nWant to mess around with Kubernetes, but don't want to spend an ocean on\nhardware?\n\nMaybe you need a `ctlptl`.\n\n## What is ctlptl?\n\n`ctlptl` (pronounced \"cattle patrol\") is a CLI for declaratively setting up\nlocal Kubernetes clusters.\n\nInspired by `kubectl` and\n[ClusterAPI's](https://github.com/kubernetes-sigs/cluster-api) `clusterctl`, you\ndeclare your local cluster with YAML and use `ctlptl` to set it up.\n\n## How do I install it?\n\nInstall your cluster of choice: [Docker for\nDesktop](https://www.docker.com/products/docker-desktop),\n[Kind](https://kind.sigs.k8s.io/), \n[k3d](https://k3d.io/) or\n[Minikube](https://minikube.sigs.k8s.io/). Then run:\n\n### Homebrew (Mac/Linux)\n\n```\nbrew install tilt-dev/tap/ctlptl\n```\n\n### Scoop (Windows)\n\n```\nscoop bucket add tilt-dev https://github.com/tilt-dev/scoop-bucket\nscoop install ctlptl\n```\n\n### Go install\n\n```\ngo install github.com/tilt-dev/ctlptl/cmd/ctlptl@latest\n```\n\n### Alternative Options\n\nIf automatic installers aren't your cup of tea, check out the [installation\nappendix](INSTALL.md) for more options.\n\n## How do I use it?\n\n`ctlptl` supports 4 major commands:\n\n- `ctlptl get` - see all running clusters\n- `ctlptl create cluster [product]` - create a cluster and make it the current `kubectl` context\n- `ctlptl apply -f cluster.yaml` - ensure a cluster exists, or create one\n- `ctlptl delete -f cluster.yaml` - delete a cluster and its state\n\n### Examples\n\n#### Docker for Mac: Enable Kubernetes and set 4 CPU\n\nCreate:\n\n```\nctlptl docker-desktop open\nctlptl create cluster docker-desktop --min-cpus=4\n```\n\nor ensure exists:\n\n```\ncat <<EOF | ctlptl apply -f -\napiVersion: ctlptl.dev/v1alpha1\nkind: Cluster\nproduct: docker-desktop\nminCPUs: 4\nEOF\n```\n\n#### Docker for Mac: Reset and shutdown Kubernetes\n\n```\nctlptl delete cluster docker-desktop\nctlptl docker-desktop quit\n```\n\n#### KIND: with a built-in registry at a random port\n\nCreate:\n\n```\nctlptl create cluster kind --registry=ctlptl-registry\n```\n\nor ensure exists:\n\n```\ncat <<EOF | ctlptl apply -f -\napiVersion: ctlptl.dev/v1alpha1\nkind: Cluster\nproduct: kind\nregistry: ctlptl-registry\nEOF\n```\n\nThen fetch the URL to push images to with:\n\n```\nctlptl get cluster kind-kind -o template --template '{{.status.localRegistryHosting.host}}'\n```\n\n#### KIND: with a built-in registry at a pre-determined port\n\nCreate:\n\n```\nctlptl create registry ctlptl-registry --port=5005\nctlptl create cluster kind --registry=ctlptl-registry\n```\n\nor ensure exists:\n\n```\ncat <<EOF | ctlptl apply -f -\napiVersion: ctlptl.dev/v1alpha1\nkind: Registry\nname: ctlptl-registry\nport: 5005\n---\napiVersion: ctlptl.dev/v1alpha1\nkind: Cluster\nproduct: kind\nregistry: ctlptl-registry\nEOF\n```\n\n#### K3D: with a built-in registry at a pre-determined port\n\nCreate:\n\n```\nctlptl create registry ctlptl-registry --port=5005\nctlptl create cluster k3d --registry=ctlptl-registry\n```\n\nor ensure exists:\n\n```\ncat <<EOF | ctlptl apply -f -\napiVersion: ctlptl.dev/v1alpha1\nkind: Registry\nname: ctlptl-registry\nport: 5005\n---\napiVersion: ctlptl.dev/v1alpha1\nkind: Cluster\nproduct: k3d\nregistry: ctlptl-registry\nEOF\n```\n\n#### Minikube: with a built-in registry at Kubernetes v1.18.8\n\nCreate:\n\n```\nctlptl create cluster minikube --registry=ctlptl-registry --kubernetes-version=v1.18.8\n```\n\nor ensure exists:\n\n```\ncat <<EOF | ctlptl apply -f -\napiVersion: ctlptl.dev/v1alpha1\nkind: Cluster\nproduct: minikube\nregistry: ctlptl-registry\nkubernetesVersion: v1.18.8\nEOF\n```\n\n#### Docker for Mac: Limit to 1 CPU and Disable Kubernetes\n\n```\nctlptl docker-desktop set vm.resources.cpus 1\nctlptl docker-desktop set kubernetes.enabled false\n```\n\n#### More\n\nFor more details, see:\n\n- Example configurations under [./examples](./examples)\n- Complete CLI docs under [./docs](./docs/ctlptl.md)\n- Cluster API reference under [pkg.go.dev](https://pkg.go.dev/github.com/tilt-dev/ctlptl/pkg/api#Cluster)\n\n## Why did you make this?\n\nAt [Tilt](https://tilt.dev/), we want to make Kubernetes a nice environment for local dev.\n\nWe found ourselves spending too much time helping teams debug misconfigurations in their dev environment.\n\nWe wrote docs like [Choosing a local dev\ncluster](https://docs.tilt.dev/choosing_clusters.html) and example repos like\n[kind-local](https://github.com/tilt-dev/kind-local),\n[minikube-local](https://github.com/tilt-dev/minikube-local), and\n[k3d-local](https://github.com/tilt-dev/k3d-local-registry) to help people get set up.\n\n`ctlptl` is a culmination of what we've learned.\n\n## Features\n\n### Current\n\n- Docker for Mac\n- Docker for Windows\n- [KIND](https://kind.sigs.k8s.io/) and [KIND with a registry](https://kind.sigs.k8s.io/docs/user/local-registry/)\n- [Minikube](https://minikube.sigs.k8s.io/) and Minikube with a registry\n- [K3D](https://k3d.io/) with a registry\n- Creating a cluster on a Remote Docker Host (useful in CI environments like [CircleCI](https://circleci.com/docs/2.0/building-docker-images/))\n- Allocating CPUs\n\n### Future Work\n\n- Microk8s\n- Rancher Desktop\n- Podman\n- Minikube on Hyperkit\n- Allocating Memory\n- Allocating Storage\n\n## Community\n\n`ctlptl` is a work in progress!\n\nWe welcome [contributions](CONTRIBUTING.md) from the Kubernetes community to help make this better.\n\nWe expect everyone -- users, contributors, followers, and employees alike -- to abide by our [**Code of Conduct**](CODE_OF_CONDUCT.md).\n\n## Goals\n\n- To support common local cluster setup operations, like create, delete, and reset\n\n- To interoperate well with all local Kubernetes solutions, including `docker-desktop`, `kind`, `minikube`, `k3d`, or `microk8s`\n\n- To connect other resources to a local cluster, like image registries, storage, and CPU/memory\n\n- To help infra engineers manage a consistent dev environment\n\n- To encourage standards that enable interop between devtools, like [KEP 1755](https://github.com/kubernetes/enhancements/tree/master/keps/sig-cluster-lifecycle/generic/1755-communicating-a-local-registry)\n\n## Non-Goals\n\n- `ctlptl` is NOT a Kubernetes setup approach that competes with `kind` or `minikube`, but rather complements these tools.\n\n- `ctlptl` is NOT intended to help you setup a remote cluster, or a remote dev sandbox. If you want to declaratively set up prod clusters, check out [`clusterapi`](https://cluster-api.sigs.k8s.io/).\n\n## Privacy\n\n`ctlptl` sends anonymized usage statistics, so we can improve it on every platform. Opt out with `ctlptl analytics opt out`.\n\n## License\n\nCopyright 2022 Docker, Inc.\n\nLicensed under [the Apache License, Version 2.0](LICENSE)"
}
