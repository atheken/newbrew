{
  "name": "shelltestrunner",
  "full_name": "shelltestrunner",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Portable command-line tool for testing command-line programs",
  "license": "GPL-3.0-or-later",
  "homepage": "https://github.com/simonmichael/shelltestrunner",
  "versions": {
    "stable": "1.9",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://hackage.haskell.org/package/shelltestrunner-1.9/shelltestrunner-1.9.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "cbc4358d447e32babe4572cda0d530c648cc4c67805f9f88002999c717feb3a8"
    }
  },
  "revision": 1,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/shelltestrunner/blobs/sha256:3eac3b0a43294eace66fd737fc7aacfc3cc363b1748e53b21cee80897cefc4a5",
          "sha256": "3eac3b0a43294eace66fd737fc7aacfc3cc363b1748e53b21cee80897cefc4a5"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/shelltestrunner/blobs/sha256:6a8727bdd254b5af7101182d68e536f23421e6a08d880c4adf4ac949daed5628",
          "sha256": "6a8727bdd254b5af7101182d68e536f23421e6a08d880c4adf4ac949daed5628"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/shelltestrunner/blobs/sha256:58f03249e05d5808baff4da11f784b37bd818f35c3243855bdc467562526ff76",
          "sha256": "58f03249e05d5808baff4da11f784b37bd818f35c3243855bdc467562526ff76"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/shelltestrunner/blobs/sha256:9e42d023a03505d850b8b9d3bd7b9448d8c9711d604242015053438aedcea9fa",
          "sha256": "9e42d023a03505d850b8b9d3bd7b9448d8c9711d604242015053438aedcea9fa"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/shelltestrunner/blobs/sha256:bebde8731a6adaa4322920451c277f820335aeb161783cbbbdf345e0b6e584ff",
          "sha256": "bebde8731a6adaa4322920451c277f820335aeb161783cbbbdf345e0b6e584ff"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/shelltestrunner/blobs/sha256:e42bf02d5f462aca20fe7a9b80ba6e2431b15940b81f5304ff1611665a29bac0",
          "sha256": "e42bf02d5f462aca20fe7a9b80ba6e2431b15940b81f5304ff1611665a29bac0"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/shelltestrunner/blobs/sha256:d425959bf27c059fb22a6e2f916f839645c0e79f180903b2c99c189ba52f4d96",
          "sha256": "d425959bf27c059fb22a6e2f916f839645c0e79f180903b2c99c189ba52f4d96"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/shelltestrunner/blobs/sha256:15ccce4fe40fe20c6f9c97442fb37079a6925351f725d4e6840541004375520c",
          "sha256": "15ccce4fe40fe20c6f9c97442fb37079a6925351f725d4e6840541004375520c"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/shelltestrunner/blobs/sha256:380d1768a50c99b9ececeea2044324a869ccb4248609ccee61adc5f6c34ef363",
          "sha256": "380d1768a50c99b9ececeea2044324a869ccb4248609ccee61adc5f6c34ef363"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cabal-install",
    "ghc"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/shelltestrunner.rb",
  "ruby_source_checksum": {
    "sha256": "e8a1d91546c66a7464bb1334b246c9ea6d875c6b749c866a7fc28398915b6d8f"
  },
  "date_added": "2018-02-01T05:07:45-08:00",
  "readme": "<div align=center>\n<h1 style=\"margin:0;\">Easy, repeatable testing of CLI programs/commands</h1>\n<img src=\"site/title2.png\">\n\n  [Install](#install)\n| [Usage](#usage)\n| [Options](#options)\n| [Test formats](#test-formats)\n| [Support/Contribute](#supportcontribute)\n| [Credits](#credits)\n</div>\n\n**shelltestrunner** (executable: `shelltest`) is a portable\ncommand-line tool for testing command-line programs, or general shell\ncommands, released under GPLv3+.  It reads simple test specifications\ndefining a command to run, some input, and the expected output,\nstderr, and exit status.  It can run tests in parallel, selectively,\nwith a timeout, in color, etc. \nProjects using it include\n[hledger](http://hledger.org),\n[Agda](http://wiki.portal.chalmers.se/agda),\nand\n[berp](https://github.com/bjpop/berp).\n\n## Install\n\nThere may be a new-enough \n[packaged version](https://repology.org/metapackage/shelltestrunner/badges)\non your platform. Eg:\n\n|||\n|----------------|---------------------------------------\n| Debian/Ubuntu: | **`apt install shelltestrunner`**\n| Gentoo:        | **`emerge shelltestrunner`**\n\nOr, build the latest release on any major platform:\n\n|||\n|----------------|---------------------------------------\n| stack:         | **[get stack](https://haskell-lang.org/get-started)**, **`stack install shelltestrunner-1.10`**\n| cabal:         | **`cabal update; cabal install shelltestrunner-1.10`**\n\n## Usage\n\nHere's a minimal test file containing one shell test: <!-- keep synced with tests/examples -->\n\n    # A comment. Testing bash's builtin \"echo\" command (if /bin/sh is bash)\n    echo\n    >>>= 0\n\nThey're called \"shell test\" because any shell (`/bin/sh` on POSIX, `CMD` on Windows)\ncommand line can be tested.\nEach test begins with the command to test, followed by optional stdin input, \nexpected stdout and/or stderr output, and ends with the expected exit status.\nHere's another file containing two tests:\n\n    # Test that the \"cat\" program copies its input to stdout, \n    # nothing appears on stderr, and exit status is 0.\n    cat\n    <<<\n    foo\n    >>>\n    foo\n    >>>2\n    >>>= 0\n    \n    # Test that cat prints an error containing \"unrecognized option\" or\n    # \"illegal option\" and exits with non-zero status if given a bad flag.\n    cat --no-such-flag\n    >>>2 /(unrecognized|illegal) option/\n    >>>= !0\n\nTo run these tests:\n\n    $ shelltest echo.test cat.test\n    :echo.test: [OK]\n    :cat.test:1: [OK]\n    :cat.test:2: [OK]\n\n             Test Cases  Total      \n     Passed  3           3          \n     Failed  0           0          \n     Total   3           3          \n\nThat's the basics! \nThere are also some alternate test formats you'll read about below.\n\n## Options\n\n<!--\nCommand to generate doc:\nshelltest --help | sed -e '/^shelltest file formats/,$d' -e 's/^/    /'\n-->\n\n    $ shelltest --help\n    shelltest 1.10\n    \n    shelltest [OPTIONS] [TESTFILES|TESTDIRS]\n    \n    Common flags:\n      -l --list             List the names of all tests found\n      -i --include=PAT      Include tests whose name contains this glob pattern\n                            (eg: -i1 -i{4,5,6})\n      -x --exclude=STR      Exclude test files whose path contains STR\n      -a --all              Show all output without truncating, even if large\n      -c --color            Show colored output if your terminal supports it\n      -d --diff             Show differences between expected/actual output\n         --precise          Show expected/actual output precisely, with quoting\n         --hide-successes   Show only test failures\n         --xmlout=FILE      Save test results to FILE in XML format.\n      -D --defmacro=D=DEF   Define a macro D to be replaced by DEF while parsing\n                            test files.\n         --execdir          Run tests from within each test file's directory\n         --extension=EXT    File suffix of test files (default: .test)\n      -w --with=EXE         Replace the first word of test commands with EXE\n                            (unindented commands only)\n      -o --timeout=SECS     Number of seconds a test may run (default: no limit)\n      -j --threads=N        Number of threads for running tests (default: 1)\n         --shell=EXE        The shell program to use (must accept -c CMD;\n                            default: /bin/sh on POSIX, cmd.exe on Windows)\n         --debug            Show debug info while running\n         --debug-parse      Show test file parsing results and stop\n    Print test file:\n         --print[=FORMAT]   Print test files in specified format (default: v3).\n    \n      -h --help             Display help message\n      -V --version          Print version information\n         --numeric-version  Print just the version number\n\n    \n`shelltest` accepts one or more test file or directory arguments.\nA directory means all files below it named `*.test` (customisable with `--extension`).\n\nTest commands are run with `/bin/sh` on POSIX systems and with `CMD` on Windows.\nBy default, they are run in the directory in which you ran `shelltest`;\nwith `--execdir` they will run in each test file's directory instead.\n\n`--include` selects only tests whose name (file name plus intra-file sequence number) matches a\n[.gitignore-style pattern](https://batterseapower.github.io/test-framework#the-console-test-runner),\nwhile `--exclude` skips tests based on their file path.\nThese can be used eg to focus on a particular test, or to skip tests intended for a different platform.\n\n`-D/--defmacro` defines a macro that is replaced by preprocessor before any tests are parsed and run.\n\n`-w/--with` replaces the first word of all test commands with something\nelse, which can be useful for testing alternate versions of a\nprogram. Commands which have been prefixed by an extra space will\nnot be affected by this option.\n\n`--hide-successes` gives quieter output, reporting only failed tests.\n\nLong flags can be abbreviated to a unique prefix.\n \n\nFor example, the command:\n\n    $ shelltest tests -i args -c -j8 -o1 -DCONF_FILE=test/myconf.cfq --hide\n\n- runs the tests defined in any `*.test` file in or below the `tests/` directory\n- whose names contain \"`args`\"\n- in colour if possible\n- with up to 8 tests running in parallel\n- allowing no more than 1 second for each test\n- replacing the text \"`CONF_FILE`\" in all tests with \"`test/myconf.cfq`\"\n- reporting only the failures.\n\n## Test formats\n\nshelltestrunner supports three test file formats:\n\n| Format name | Description                                                                                | Delimiters, in order       |\n|-------------|--------------------------------------------------------------------------------------------|----------------------------|\n| format 1    | old; command first, exit status is required                                                | `(none) <<< >>> >>>2 >>>=` |\n| format 2    | new, verbose: input first, can be reused by multiple tests, some delimiters can be omitted | `<<<    $$$ >>> >>>2 >>>=` |\n| format 3    | new, lightweight: like format 2, but with shorter delimiters                               | `<      $   >   >2   >=`   |\n\nTo read each file, shelltestrunner tries the formats in this order: first format 2, then format 3, then format 1.\nFormat 3 is the lightest and most pleasant; you should use this one, unless it clashes with your data,\nin which case use the more verbose format 2. Format 1 is just for backward compatibility with old tests.\nAll tests within a file should use the same format.\n\n### Format 1\n\nTest files contain one or more individual tests, each consisting of a\none-line shell command, optional input, expected standard output\nand/or error output, and a (required) exit status.\n\n    # COMMENTS OR BLANK LINES\n    COMMAND LINE\n    <<<\n    INPUT\n    >>>\n    EXPECTED OUTPUT (OR >>> /REGEXP/)\n    >>>2\n    EXPECTED STDERR (OR >>>2 /REGEXP/)\n    >>>= EXPECTED EXIT STATUS (OR >>>= /REGEXP/)\n\nWhen not specified, stdout/stderr are ignored.\nA space before the command protects it from -w/--with.\n\nExamples: \n[above](#usage),\n[shelltestrunner](https://github.com/simonmichael/shelltestrunner/tree/master/tests/format1),\n[hledger](https://github.com/simonmichael/hledger/tree/master/tests),\n[Agda](https://github.com/agda/agda/tree/master/src/size-solver/test),\n[berp](https://github.com/bjpop/berp/tree/master/test/regression),\n[cblrepo](https://github.com/magthe/cblrepo/tree/master/tests).\n\n### Format 2\n\n(shelltestrunner 1.9+) \nThis improves on format 1 in two ways: it allows tests to reuse the\nsame input, and it allows delimiters to often be omitted.\n\nTest files contain one or more test groups. \nA test group consists of some optional standard input and one or more tests.\nEach test is a one-line shell command followed by optional expected standard output, \nerror output and/or numeric exit status, separated by delimiters.\n\n    # COMMENTS OR BLANK LINES\n    <<<\n    INPUT\n    $$$ COMMAND LINE\n    >>>\n    EXPECTED OUTPUT (OR >>> /REGEX/)\n    >>>2\n    EXPECTED STDERR (OR >>>2 /REGEX/)\n    >>>= EXPECTED EXIT STATUS (OR >>>= /REGEX/ OR >>>=)\n    # COMMENTS OR BLANK LINES\n    ADDITIONAL TESTS FOR THIS INPUT\n    ADDITIONAL TEST GROUPS WITH DIFFERENT INPUT\n\nAll test parts are optional except the command line.\nIf not specified, stdout and stderr are expected to be empty\nand exit status is expected to be zero.\n\nTwo spaces between `$$$` and the command protects it from -w/--with.\n\nThe `<<<` delimiter is optional for the first input in a file.\nWithout it, input begins at the first non-blank/comment line.\nInput ends at the `$$$` delimiter. You can't put a comment before the first `$$$`.\n\nThe `>>>` delimiter is optional except when matching via regex.\nExpected output/stderr extends to the next `>>>2` or `>>>=` if present,\nor to the last non-blank/comment line before the next `<<<` or `$$$` or file end.\n`/REGEX/` regular expression patterns may be used instead of\nspecifying the expected output in full. The regex syntax is\n[regex-tdfa](http://hackage.haskell.org/package/regex-tdfa)'s, plus\nyou can put `!` before `/REGEX/` to negate the match.\n\nThe [exit status](http://en.wikipedia.org/wiki/Exit_status) is a\nnumber, normally 0 for a successful exit.  This too can be prefixed\nwith `!` to negate the match, or you can use a `/REGEX/` pattern.\nA `>>>=` with nothing after it ignores the exit status.\n\nExamples: <!-- keep synced with tests/examples -->\n\nAll delimiters explicit:\n\n    # cat copies its input to stdout\n    <<<\n    foo\n    $$$ cat\n    >>>\n    foo\n\n    # or, given a bad flag, prints a platform-specific error and exits with non-zero status\n    $$$ cat --no-such-flag\n    >>>2 /(unrecognized|illegal) option/\n    >>>= !0\n\n    # echo ignores the input and prints a newline.\n    # We need the >>>= (or a >>>2) to delimit the whitespace which\n    # would otherwise be ignored.\n    $$$ echo\n    >>>\n\n    >>>=\n\nNon-required `<<<` and `>>>` delimiters omitted:\n\n    foo\n    $$$ cat\n    foo\n\n    $$$ cat --no-such-flag\n    >>>2 /(unrecognized|illegal) option/\n    >>>= !0\n\n    $$$ echo\n\n    >>>=\n\n### Format 3\n\n(shelltestrunner 1.9+)\nThe same as format 2, but with more convenient short delimiters: < $ > >2 >=.\n\n    # COMMENTS OR BLANK LINES\n    <\n    INPUT\n    $ COMMAND LINE\n    >\n    EXPECTED OUTPUT (OR > /REGEX/)\n    >2\n    EXPECTED STDERR (OR >2 /REGEX/)\n    >= EXPECTED EXIT STATUS (OR >= /REGEX/ OR >=)\n    # COMMENTS OR BLANK LINES\n    ADDITIONAL TESTS FOR THIS INPUT\n    ADDITIONAL TEST GROUPS WITH DIFFERENT INPUT\n\nExamples: <!-- keep synced with tests/examples -->\n\nAll delimiters explicit:\n\n    # cat copies its input to stdout\n    <\n    foo\n    $ cat\n    >\n    foo\n\n    # or, given a bad flag, prints a platform-specific error and exits with non-zero status\n    $ cat --no-such-flag\n    >2 /(unrecognized|illegal) option/\n    >= !0\n\n    # echo ignores the input and prints a newline.\n    # We use an explicit >= (or >2) to delimit the whitespace which\n    # would otherwise be ignored.\n    $ echo\n    >\n\n    >=\n\nNon-required `<` and `>` delimiters omitted:\n\n    foo\n    $ cat\n    foo\n\n    $ cat --no-such-flag\n    >2 /(unrecognized|illegal) option/\n    >= !0\n\n    $ echo\n\n    >2\n\n[shelltestrunner](https://github.com/simonmichael/shelltestrunner/tree/master/tests/format3)\n\n## Printing tests\n\nThe `--print` option prints tests to stdout.\nThis can be used to convert between test formats.\nFormat 1, 2, and 3 are supported.\n\nHere are some issues to be aware of when converting between formats:\n\n- Printing v1 as v2/v3\n  - A `>>>= 0` often gets converted to a `>>>2 //` or `>2 //`, when `>=` or nothing would be preferred.\n    This is semantically accurate, because v1 ignores out/err by default, and v2/v3 check for zero exit by default,\n    and therefore the safest conversion; but it's annoying\n- Printing v3 as v3\n  - loses comments at the top of the file, even above an explicit < delimiter\n  - may lose other data\n- A missing newline at EOF will not be preserved.\n- v2/v3 allow shared input, but v1 does not\n- A file containing only comments may be emptied\n\nIn general, always review the result of a conversion yourself before committing it.\n\n## Support/Contribute\n\n|||\n|----------------------|--------------------------------------------------|\n| Released version:    | http://hackage.haskell.org/package/shelltestrunner\n| Changelog:           | http://hackage.haskell.org/package/shelltestrunner/changelog\n| Code                 | https://github.com/simonmichael/shelltestrunner\n| Issues               | https://github.com/simonmichael/shelltestrunner/issues\n| Chat                 | Contact sm in the #hledger:matrix.org room on matrix or the #hledger channel on libera.chat\n<!-- | Email                | [simon@joyful.com](mailto:simon@joyful.com?subject=[shelltestrunner]) -->\n\n[2012 user survey](https://docs.google.com/spreadsheet/pub?key=0Au47MrJax8HpdGpZSzdhWHlCUkJpR2hjX1MwMWFoUEE&single=true&gid=3&output=html).\n\nFeedback, testing, code, documentation, packaging, blogging, and funding are most welcome.\n\n<div id=\"donate-buttons\">\n<a title=\"Donate via Paypal\" href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=2PLCMR67L4G3E\"><img src=\"/site/paypal.gif\" alt=\"Paypal\"></a>\n</div>\n\n## Credits\n\n[Simon Michael](http://joyful.com) wrote shelltestrunner,\ninspired by John Wiegley's tests for Ledger.\n\nCode contributors include:\nTaavi Väljaots,\nJohn Macfarlane,\nAndrés Sicard-Ramírez,\nIustin Pop,\nTrygve Laugstøl,\nBernie Pope,\nSergei Trofimovich,\nJohn Chee.\n\nshelltestrunner depends on several fine libraries, in particular Max\nBolingbroke's test-framework, and of course on the Glorious Haskell\nCompiler.\n\nThe Blade Runner font is by Phil Steinschneider.\n\n<!-- http://www.explore-science-fiction-movies.com/blade-runner-movie-quotes.html -->"
}
