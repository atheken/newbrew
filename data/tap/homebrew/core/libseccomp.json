{
  "name": "libseccomp",
  "full_name": "libseccomp",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Interface to the Linux Kernel's syscall filtering mechanism",
  "license": "LGPL-2.1-only",
  "homepage": "https://github.com/seccomp/libseccomp",
  "versions": {
    "stable": "2.5.4",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/seccomp/libseccomp/releases/download/v2.5.4/libseccomp-2.5.4.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "d82902400405cf0068574ef3dc1fe5f5926207543ba1ae6f8e7a1576351dcbdb"
    },
    "head": {
      "url": "https://github.com/seccomp/libseccomp.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/libseccomp/blobs/sha256:49db89117b474de352eabc99840644ff081d9120d54d1eaf5cda150798852075",
          "sha256": "49db89117b474de352eabc99840644ff081d9120d54d1eaf5cda150798852075"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "gperf"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [
    {
      "name": "linux",
      "cask": null,
      "download": null,
      "version": null,
      "contexts": [],
      "specs": [
        "stable",
        "head"
      ]
    }
  ],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/libseccomp.rb",
  "ruby_source_checksum": {
    "sha256": "57c6880af15e5cf6181ee695026f434cd58ea3f106944154817f9f81380aef35"
  },
  "head_dependencies": {
    "build_dependencies": [
      "autoconf",
      "automake",
      "libtool",
      "gperf"
    ],
    "dependencies": [],
    "test_dependencies": [],
    "recommended_dependencies": [],
    "optional_dependencies": [],
    "uses_from_macos": [],
    "uses_from_macos_bounds": []
  },
  "date_added": "2020-09-10T09:52:36+02:00",
  "readme": "![Enhanced Seccomp Helper Library](https://github.com/seccomp/libseccomp-artwork/blob/main/logo/libseccomp-color_text.png)\n===============================================================================\nhttps://github.com/seccomp/libseccomp\n\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/608/badge)](https://bestpractices.coreinfrastructure.org/projects/608)\n[![Build Status](https://github.com/seccomp/libseccomp/workflows/Continuous%20Integration/badge.svg?branch=main)](https://github.com/seccomp/libseccomp/actions)\n[![Coverage Status](https://img.shields.io/coveralls/github/seccomp/libseccomp/main.svg)](https://coveralls.io/github/seccomp/libseccomp?branch=main)\n[![CodeQL Analysis](https://github.com/seccomp/libseccomp/actions/workflows/codeql-analysis.yml/badge.svg?branch=main)](https://github.com/seccomp/libseccomp/actions)\n\nThe libseccomp library provides an easy to use, platform independent, interface\nto the Linux Kernel's syscall filtering mechanism.  The libseccomp API is\ndesigned to abstract away the underlying BPF based syscall filter language and\npresent a more conventional function-call based filtering interface that should\nbe familiar to, and easily adopted by, application developers.\n\n## Online Resources\n\nThe library source repository currently lives on GitHub at the following URL:\n\n* https://github.com/seccomp/libseccomp\n\nThe Go language bindings repository currently lives on GitHub at the following\nURL:\n\n* https://github.com/seccomp/libseccomp-golang\n\n## Supported Architectures\n\nThe libseccomp library currently supports the architectures listed below:\n\n* 32-bit x86 (x86)\n* 64-bit x86 (x86_64)\n* 64-bit x86 x32 ABI (x32)\n* 32-bit ARM EABI (arm)\n* 64-bit ARM (aarch64)\n* 64-bit LoongArch (loongarch64)\n* 32-bit Motorola 68000 (m68k)\n* 32-bit MIPS (mips)\n* 32-bit MIPS little endian (mipsel)\n* 64-bit MIPS (mips64)\n* 64-bit MIPS little endian (mipsel64)\n* 64-bit MIPS n32 ABI (mips64n32)\n* 64-bit MIPS n32 ABI little endian (mipsel64n32)\n* 32-bit PA-RISC (parisc)\n* 64-bit PA-RISC (parisc64)\n* 32-bit PowerPC (ppc)\n* 64-bit PowerPC (ppc64)\n* 64-bit PowerPC little endian (ppc64le)\n* 32-bit s390 (s390)\n* 64-bit s390x (s390x)\n* 64-bit RISC-V (riscv64)\n* 32-bit SuperH big endian (sheb)\n* 32-bit SuperH (sh)\n\n## Documentation\n\nThe \"doc/\" directory contains all of the currently available documentation,\nmostly in the form of manpages.  The top level directory also contains a README\nfile (this file) as well as the LICENSE, CREDITS, CONTRIBUTING, and\nCHANGELOG files.\n\nThose who are interested in contributing to the project are encouraged to\nread the CONTRIBUTING in the top level directory.\n\n## Verifying Release Tarballs\n\nBefore use you should verify the downloaded release tarballs and checksums\nusing the detached signatures supplied as part of the release; the detached\nsignature files are the \"*.asc\" files.  If you have GnuPG installed you can\nverify detached signatures using the following command:\n\n\t# gpg --verify file.asc file\n\nAt present, only the following keys, specified via the fingerprints below, are\nauthorized to sign official libseccomp releases:\n\n\tPaul Moore <paul@paul-moore.com>\n\t7100 AADF AE6E 6E94 0D2E  0AD6 55E4 5A5A E8CA 7C8A\n\n\tTom Hromatka <tom.hromatka@oracle.com>\n\t47A6 8FCE 37C7 D702 4FD6  5E11 356C E62C 2B52 4099\n\nMore information on GnuPG can be found at their website, https://gnupg.org.\n\n## Building and Installing the Library\n\nIf you are building the libseccomp library from an official release tarball,\nyou should follow the familiar three step process used by most autotools based\napplications:\n\n\t# ./configure\n\t# make [V=0|1]\n\t# make install\n\nHowever, if you are building the library from sources retrieved from the source\nrepository you may need to run the autogen.sh script before running configure.\nIn both cases, running \"./configure -h\" will display a list of build-time\nconfiguration options.\n\n## Testing the Library\n\nThere are a number of tests located in the \"tests/\" directory and a make target\nwhich can be used to help automate their execution.  If you want to run the\nstandard regression tests you can execute the following after building the\nlibrary:\n\n\t# make check\n\nThese tests can be safely run on any Linux system, even those where the kernel\ndoes not support seccomp-bpf (seccomp mode 2).  However, be warned that the\ntest run can take a while to run and produces a lot of output.\n\nThe generated seccomp-bpf filters can be tested on a live system using the\n\"live\" tests; they can be executed using the following commands:\n\n\t# make check-build\n\t# (cd tests; ./regression -T live)\n\nThese tests will fail if the running Linux Kernel does not provide the\nnecessary support.\n\n## Developer Tools\n\nThe \"tools/\" directory includes a number of tools which may be helpful in the\ndevelopment of the library, or applications using the library.  Not all of\nthese tools are installed by default.\n\n## Bug and Vulnerability Reporting\n\nProblems with the libseccomp library can be reported using the GitHub issue\ntracking system.  Those who wish to privately report potential vulnerabilities\nshould follow the directions in SECURITY.md."
}
