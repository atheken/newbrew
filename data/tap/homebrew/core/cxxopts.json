{
  "name": "cxxopts",
  "full_name": "cxxopts",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Lightweight C++ command-line option parser",
  "license": "MIT",
  "homepage": "https://github.com/jarro2783/cxxopts",
  "versions": {
    "stable": "3.1.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/jarro2783/cxxopts/archive/v3.1.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "523175f792eb0ff04f9e653c90746c12655f10cb70f1d5e6d6d9491420298a08"
    },
    "head": {
      "url": "https://github.com/jarro2783/cxxopts.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cxxopts/blobs/sha256:e30467154ef8fa8e4df574b63c6169e25b5b86f0e076c9c01e3bdedbaf9d3f42",
          "sha256": "e30467154ef8fa8e4df574b63c6169e25b5b86f0e076c9c01e3bdedbaf9d3f42"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/cxxopts.rb",
  "ruby_source_checksum": {
    "sha256": "509541716608aad2a5c1de2a68d56b458b72ecfde7d170536ade41b0896f7224"
  },
  "date_added": "2019-06-21T16:52:10+02:00",
  "readme": "[![Build Status](https://travis-ci.org/jarro2783/cxxopts.svg?branch=master)](https://travis-ci.org/jarro2783/cxxopts)\n\n# Release versions\n\nNote that `master` is generally a work in progress, and you probably want to use a\ntagged release version.\n\n## Version 3 breaking changes\n\nIf you have used version 2, there are a couple of breaking changes in version 3\nthat you should be aware of. If you are new to `cxxopts` you can skip this\nsection.\n\nThe parser no longer modifies its arguments, so you can pass a const `argc` and\n`argv` and expect them not to be changed.\n\nThe `ParseResult` object no longer depends on the parser. So it can be returned\nfrom a scope outside the parser and still work. Now that the inputs are not\nmodified, `ParseResult` stores a list of the unmatched arguments. These are\nretrieved like follows:\n\n```cpp\nauto result = options.parse(argc, argv);\nresult.unmatched(); // get the unmatched arguments\n```\n\n# Quick start\n\nThis is a lightweight C++ option parser library, supporting the standard GNU\nstyle syntax for options.\n\nOptions can be given as:\n\n    --long\n    --long=argument\n    --long argument\n    -a\n    -ab\n    -abc argument\n\nwhere c takes an argument, but a and b do not.\n\nAdditionally, anything after `--` will be parsed as a positional argument.\n\n## Basics\n\n```cpp\n#include <cxxopts.hpp>\n```\n\nCreate a `cxxopts::Options` instance.\n\n```cpp\ncxxopts::Options options(\"MyProgram\", \"One line description of MyProgram\");\n```\n\nThen use `add_options`.\n\n```cpp\noptions.add_options()\n  (\"d,debug\", \"Enable debugging\") // a bool parameter\n  (\"i,integer\", \"Int param\", cxxopts::value<int>())\n  (\"f,file\", \"File name\", cxxopts::value<std::string>())\n  (\"v,verbose\", \"Verbose output\", cxxopts::value<bool>()->default_value(\"false\"))\n  ;\n```\n\nOptions are declared with a long and an optional short option. A description\nmust be provided. The third argument is the value, if omitted it is boolean.\nAny type can be given as long as it can be parsed, with operator>>.\n\nTo parse the command line do:\n\n```cpp\nauto result = options.parse(argc, argv);\n```\n\nTo retrieve an option use `result.count(\"option\")` to get the number of times\nit appeared, and\n\n```cpp\nresult[\"opt\"].as<type>()\n```\n\nto get its value. If \"opt\" doesn't exist, or isn't of the right type, then an\nexception will be thrown.\n\nNote that the result of `options.parse` should only be used as long as the\n`options` object that created it is in scope.\n\n## Unrecognised arguments\n\nYou can allow unrecognised arguments to be skipped. This applies to both\npositional arguments that are not parsed into another option, and `--`\narguments that do not match an argument that you specify. This is done by\ncalling:\n\n```cpp\noptions.allow_unrecognised_options();\n```\n\nand in the result object they are retrieved with:\n\n```cpp\nresult.unmatched()\n```\n\n## Exceptions\n\nExceptional situations throw C++ exceptions. There are two types of\nexceptions: errors defining the options, and errors when parsing a list of\narguments. All exceptions derive from `cxxopts::exceptions::exception`. Errors\ndefining options derive from `cxxopts::exceptions::specification` and errors\nparsing arguments derive from `cxxopts::exceptions::parsing`.\n\nAll exceptions define a `what()` function to get a printable string\nexplaining the error.\n\n## Help groups\n\nOptions can be placed into groups for the purposes of displaying help messages.\nTo place options in a group, pass the group as a string to `add_options`. Then,\nwhen displaying the help, pass the groups that you would like displayed as a\nvector to the `help` function.\n\n## Positional Arguments\n\nPositional arguments are those given without a preceding flag and can be used\nalongside non-positional arguments. There may be multiple positional arguments,\nand the final positional argument may be a container type to hold a list of all\nremaining positionals.\n\nTo set up positional arguments, first declare the options, then configure a\nset of those arguments as positional like:\n\n```cpp\noptions.add_options()\n  (\"script\", \"The script file to execute\", cxxopts::value<std::string>())\n  (\"server\", \"The server to execute on\", cxxopts::value<std::string>())\n  (\"filenames\", \"The filename(s) to process\", cxxopts::value<std::vector<std::string>>());\n\noptions.parse_positional({\"script\", \"server\", \"filenames\"});\n\n// Parse options the usual way\noptions.parse(argc, argv);\n```\n\nFor example, parsing the following arguments:\n~~~\nmy_script.py my_server.com file1.txt file2.txt file3.txt\n~~~\nwill result in parsed arguments like the following table:\n\n| Field         | Value                                     |\n| ------------- | ----------------------------------------- |\n| `\"script\"`    | `\"my_script.py\"`                          |\n| `\"server\"`    | `\"my_server.com\"`                         |\n| `\"filenames\"` | `{\"file1.txt\", \"file2.txt\", \"file3.txt\"}` |\n\n## Default and implicit values\n\nAn option can be declared with a default or an implicit value, or both.\n\nA default value is the value that an option takes when it is not specified\non the command line. The following specifies a default value for an option:\n\n```cpp\ncxxopts::value<std::string>()->default_value(\"value\")\n```\n\nAn implicit value is the value that an option takes when it is given on the\ncommand line without an argument. The following specifies an implicit value:\n\n```cpp\ncxxopts::value<std::string>()->implicit_value(\"implicit\")\n```\n\nIf an option had both, then not specifying it would give the value `\"value\"`,\nwriting it on the command line as `--option` would give the value `\"implicit\"`,\nand writing `--option=another` would give it the value `\"another\"`.\n\nNote that the default and implicit value is always stored as a string,\nregardless of the type that you want to store it in. It will be parsed as\nthough it was given on the command line.\n\nDefault values are not counted by `Options::count`.\n\n## Boolean values\n\nBoolean options have a default implicit value of `\"true\"`, which can be\noverridden. The effect is that writing `-o` by itself will set option `o` to\n`true`. However, they can also be written with various strings using `=value`.\nThere is no way to disambiguate positional arguments from the value following\na boolean, so we have chosen that they will be positional arguments, and\ntherefore, `-o false` does not work.\n\n## `std::vector<T>` values\n\nParsing of list of values in form of an `std::vector<T>` is also supported, as long as `T`\ncan be parsed. To separate single values in a list the definition `CXXOPTS_VECTOR_DELIMITER`\nis used, which is ',' by default. Ensure that you use no whitespaces between values because\nthose would be interpreted as the next command line option. Example for a command line option\nthat can be parsed as a `std::vector<double>`:\n\n~~~\n--my_list=1,-2.1,3,4.5\n~~~\n\n## Options specified multiple times\n\nThe same option can be specified several times, with different arguments, which will all\nbe recorded in order of appearance. An example:\n\n~~~\n--use train --use bus --use ferry\n~~~\n\nthis is supported through the use of a vector of value for the option:\n\n~~~\noptions.add_options()\n  (\"use\", \"Usable means of transport\", cxxopts::value<std::vector<std::string>>())\n~~~\n\n## Custom help\n\nThe string after the program name on the first line of the help can be\ncompletely replaced by calling `options.custom_help`. Note that you might\nalso want to override the positional help by calling `options.positional_help`.\n\n\n## Example\n\nPutting all together:\n```cpp\nint main(int argc, char** argv)\n{\n    cxxopts::Options options(\"test\", \"A brief description\");\n\n    options.add_options()\n        (\"b,bar\", \"Param bar\", cxxopts::value<std::string>())\n        (\"d,debug\", \"Enable debugging\", cxxopts::value<bool>()->default_value(\"false\"))\n        (\"f,foo\", \"Param foo\", cxxopts::value<int>()->default_value(\"10\"))\n        (\"h,help\", \"Print usage\")\n    ;\n\n    auto result = options.parse(argc, argv);\n\n    if (result.count(\"help\"))\n    {\n      std::cout << options.help() << std::endl;\n      exit(0);\n    }\n    bool debug = result[\"debug\"].as<bool>();\n    std::string bar;\n    if (result.count(\"bar\"))\n      bar = result[\"bar\"].as<std::string>();\n    int foo = result[\"foo\"].as<int>();\n\n    return 0;\n}\n```\n\n# Linking\n\nThis is a header only library.\n\n# Requirements\n\nThe only build requirement is a C++ compiler that supports C++11 features such as:\n\n* regex\n* constexpr\n* default constructors\n\nGCC >= 4.9 or clang >= 3.1 with libc++ are known to work.\n\nThe following compilers are known not to work:\n\n* MSVC 2013"
}
