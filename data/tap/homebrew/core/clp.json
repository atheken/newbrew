{
  "name": "clp",
  "full_name": "clp",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Linear programming solver",
  "license": "EPL-2.0",
  "homepage": "https://github.com/coin-or/Clp",
  "versions": {
    "stable": "1.17.8",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/coin-or/Clp/archive/releases/1.17.8.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "f9931b5ba44f0daf445c6b48fc2c250dc12e667e59ace8ea7b025f158fe31556"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/clp/blobs/sha256:efe170c0bf8394a5db5fab7fe2eacd52471337cd7cb2d144b39c8ad621e7ff2e",
          "sha256": "efe170c0bf8394a5db5fab7fe2eacd52471337cd7cb2d144b39c8ad621e7ff2e"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/clp/blobs/sha256:9d2980cc39519cf78053c951cafee4b0fb11f900a6cef87eaff3c50f3612dcfc",
          "sha256": "9d2980cc39519cf78053c951cafee4b0fb11f900a6cef87eaff3c50f3612dcfc"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/clp/blobs/sha256:6dc3cc5e3b85420d45d610f7743e45541b3bf62511040d5046092fd9361a73b3",
          "sha256": "6dc3cc5e3b85420d45d610f7743e45541b3bf62511040d5046092fd9361a73b3"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/clp/blobs/sha256:88d6a80f4da99110a34a5b37cf44324e7cad52c063db6d7fac5ae48d753b4f82",
          "sha256": "88d6a80f4da99110a34a5b37cf44324e7cad52c063db6d7fac5ae48d753b4f82"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/clp/blobs/sha256:6e458f50c974e968c541288ae791a70768caacc4f03819a0ac886edf86e6c25d",
          "sha256": "6e458f50c974e968c541288ae791a70768caacc4f03819a0ac886edf86e6c25d"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/clp/blobs/sha256:0562833cfb1dac1a446690e0633b64421920628f9df7dbfa0f8ce9071efabe99",
          "sha256": "0562833cfb1dac1a446690e0633b64421920628f9df7dbfa0f8ce9071efabe99"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/clp/blobs/sha256:e784d51dc920a31d3134473c8d92cd5ead97e34fa90d8bf1a205abe31586f4c4",
          "sha256": "e784d51dc920a31d3134473c8d92cd5ead97e34fa90d8bf1a205abe31586f4c4"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "pkg-config"
  ],
  "dependencies": [
    "coinutils",
    "openblas",
    "osi"
  ],
  "test_dependencies": [
    "pkg-config"
  ],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/clp.rb",
  "ruby_source_checksum": {
    "sha256": "a782fc0eacc4ac7e5a6706798afcca0b7b1e109e1d65d9a1bdff1f6bfb27bb46"
  },
  "date_added": "2019-09-16T21:07:18+02:00",
  "readme": "# Clp\n\n[![A COIN-OR Project](https://coin-or.github.io/coin-or-badge.png)](https://www.coin-or.org)\n\nProjects such as this one are maintained by a small group of volunteers under\nthe auspices of the non-profit [COIN-OR Foundation](https://www.coin-or.org)\nand we need your help! Please consider [sponsoring our\nactivities](https://github.com/sponsors/coin-or) or [volunteering](mailto:volunteer@coin-or.org) to help!\n\n[![Latest Release](https://img.shields.io/github/v/release/coin-or/Clp?sort=semver)](https://github.com/coin-or/Clp/releases)\n\n_This file is auto-generated from [config.yml](.coin-or/config.yml) using the \n[generate_readme](.coin-or/generate_readme) script.\nTo make changes, please edit [config.yml](.coin-or/config.yml) or the generation scripts\n[here](.coin-or/generate_readme) and [here](https://github.com/coin-or/coinbrew/blob/master/scripts/generate_readme)._\n\nClp (*C*oin-or *l*inear *p*rogramming) is an open-source linear programming solver.\nIt is primarily meant to be used as a callable library, but a basic, stand-alone executable version is also available.\nIt is designed to find solutions of mathematical optimization problems of the form\n\nminimize   c'x\nsuch that  lhs &le; Ax &le; rhs\nand        lb &le; x &le; ub\n\n\nCLP includes primal and dual Simplex solvers.\nBoth dual and primal algorithms can use matrix storage methods provided by the user (0-1 and network matrices are already supported in addition to the default sparse matrix).\nThe dual algorithm has Dantzig and Steepest edge row pivot choices; new ones may be provided by the user.\nThe same is true for the column pivot choice of the primal algorithm.\nThe primal can also use a non linear cost which should work for piecewise linear convex functions.\nCLP also includes a barrier method for solving LPs.\n\n\nClp is written in C++ and is released as open source under the [Eclipse Public License 2.0](http://www.opensource.org/licenses/EPL-2.0).\n\nIt is distributed under the auspices of the [COIN-OR Foundation](https://www.coin-or.org).\n\nThe Clp development site is https://github.com/coin-or/Clp.\n\n## CITE\n\nCode: [![DOI](https://zenodo.org/badge/173496299.svg)](https://zenodo.org/badge/latestdoi/173496299)\n\n## CURRENT BUILD STATUS\n\n[![Windows Builds](https://github.com/coin-or/Clp/actions/workflows/windows-ci.yml/badge.svg?branch=master)](https://github.com/coin-or/Clp/actions/workflows/windows-ci.yml?query=branch%3Amaster)\n\n[![Linux and MacOS Builds](https://github.com/coin-or/Clp/actions/workflows/linux-ci.yml/badge.svg?branch=master)](https://github.com/coin-or/Clp/actions/workflows/linux-ci.yml?query=branch%3Amaster)\n\n## DOWNLOAD\n\nWhat follows is a quick start guide for obtaining or building\nClp on common platforms. More detailed information is\navailable [here](https://coin-or.github.io/user_introduction.html).\n\n### Docker image\n\nThere is a Docker image that provides Clp, as well as other projects\nin the [COIN-OR Optimization\nSuite](https://github.com/coin-or/COIN-OR-OptimizationSuite) [here](https://hub.docker.com/repository/docker/coinor/coin-or-optimization-suite)\n\n### Binaries\n\nFor newer releases, binaries will be made available as assets attached to\nreleases in Github\n[here](https://github.com/coin-or/Clp/releases). Older binaries\nare archived as part of Clp\n[here](https://www.coin-or.org/download/binary/Clp).\n\n * *Linux* (see https://repology.org/project/coin-or-clp/versions for a complete listing): \n   * arch:\n     ```\n     $ sudo pacman -S  coin-or-clp\n     ```\n   * Debian/Ubuntu:\n     ```\n     $ sudo apt-get install  coinor-clp coinor-libclp-dev\n     ```\n   * Fedora/Redhat/CentOS:\n     ```\n     $ sudo yum install  coin-or-Clp coin-or-Clp-devel\n     ```\n   * freebsd:\n     ```\n     $ sudo pkg install math/clp\n     ```\n   * linuxbrew:\n     ```\n     $ brew install clp\n     ```\n * *Windows*: The easiest way to get Clp on Windows is to download an archive as described above.\n * *Mac OS X*: The easiest way to get Clp on Mac OS X is through [Homebrew](https://brew.sh).\n     ```\n     $ brew tap coin-or-tools/coinor\n     $ brew install coin-or-tools/coinor/clp\n     ```\n\n* *conda* (cross-platform, no Windows for now):\n     ```\n     $ conda install coin-or-clp\n     ```\n\nDue to license incompatibilities, pre-compiled binaries lack some \nfunctionality. If binaries are not available for your platform for the latest \nversion and you would like to request them to be built and posted, feel free \nto let us know on the mailing list. \n\n### Source\n\nSource code can be obtained either by\n\n * Downloading a snapshot of the source code for the latest release version of Clp from the\n [releases](https://github.com/coin-or/Clp/releases) page,\n * Cloning this repository from [Github](https://github.com/coin-or/Clp), or \n * Using the [coinbrew](https://github.com/coin-or/coinbrew) script to get the project and all dependencies (recommended, see below).   \n\n### Dependencies\n\nClp has a number of dependencies, which are detailed in\n[config.yml](.coin-or/config.yml). Dependencies on other COIN-OR projects are\nautomatically downloaded when obtaining the source with `coinbrew`. For some\nof the remaining third-party dependencies, automatic download scripts and\nbuild wrappers are provided (and will also be automatically run for required\nand recommended dependencies), while other libraries that are aeasy to obtain\nmust be installed using an appropriate package manager (or may come with your\nOS by default). \n\n## BUILDING from source\n\nThese quick start instructions assume you are in a bash shell. \n\n### Using `coinbrew`\n\nTo download and build Clp from source, execute the \nfollowing on the command line. \n```\nwget https://raw.githubusercontent.com/coin-or/coinbrew/master/coinbrew\nchmod u+x coinbrew\n./coinbrew fetch Clp@master\n./coinbrew build Clp\n```\nFor more detailed instructions on coinbrew, see https://coin-or.github.io/coinbrew.\nThe `coinbrew` script will fetch the additional projects specified in the Dependencies section of [config.yml](.coin-or/config.yml).\n\n### Without `coinbrew` (Expert users)\n\n * Download the source code, e.g., by cloning the git repo https://github.com/coin-or/Clp\n * Download and install the source code for the dependencies listed in [config.yml](.coin-or/config.yml)\n * Build the code as follows (make sure to set PKG_CONFIG_PTH to install directory for dependencies).\n\n```\n./configure -C\nmake\nmake test\nmake install\n```\n\n### With Microsoft Visual Studio\n\nFor Microsoft Visual C++ users, there are project files for version 10\navailable in the `MSVisualStudio` directory. First, obtain the source code\nusing either a Windows git client or download a snapshot. In MSVC++ Version\n10, open the solution file (this should be converted to whatever version of\nMSVC+ you are using) and build the Clp project. The code should build out of\nthe box with default settings.\n\nIt is also possible to build Clp with the Visual Studio compiler from the\ncommand line using the procedure for Unix-like environments, using the Msys2\nshell or CYGWIN. This is the recommended and best-supported way of building\nClp in Windows from source. To do so, make sure the `cl` compiler is in your\npath and add `--enable-msvc` to build command of `coinbrew`.  \n\n## Quick start\n\nRunning clp gives you some hints.  It can do a unit test (`clp -unitTest`) and solve netlib \nproblems (`-netlib` or `-netlibp` using primal).  It can also solve problems and set tolerances\netc.  Just do \n```\nclp \n``` \nand then try `?` or setting various stuff.\n\n```\nclp filename                #read file, do presolve and dual algorithm\nclp filename -primalsimplex #use primal instead\n```\nOn Linux, clp can do file completion and line editing if it can find the \nhistory, readline, and termcap packages when building.\n\nIf you want to stress the code, you can set various stuff, e.g., dantzig pricing\nand then go into netlib testing.  It is not guaranteed that it will solve all \nnetlib instances if you get too creative.  For instance using presolve makes \nnetlib solve faster - but pilot87 prefers a large infeasibility weight.  So\n```\nclp -presolve on -dualbound 1.0e10 -netlib\n```\nworks well.\n\nThere are examples in [examples](examples).  To create an executable, build \nwith `coinbrew` as above and then do\n```\ncd build/Cbc/master/examples\nmake DRIVER=minimum #build the driver minimum.cpp\n```\nor whichever driver you want.  A list is in [Makefile](Makefile.in).\nThree useful samples are:\n\n * `minimum.cpp` This is the simplest possible program to read an mps file.\n\n * `defaults.cpp`.  This does not do much more, but it does it in much more \ncomplicated way by specifically setting defaults so it does give more\nuseful information.  It also prints a solution in a format similar to that\nof MPSX.\n\n * `presolve.cpp`  This is a good driver for larger problems.\n\nOther ones can get complicated so start simple and work your way up.\n\n## Doxygen Documentation\n\nIf you have `Doxygen` available, you can build a HTML documentation by typing\n\n`make doxygen-docs` \n\nin the build directory. If Clp was built via `coinbrew`, then the build\ndirectory will be `./build/Clp/master` by default. The doxygen documentation main file\nis found at `<build-dir>/doxydoc/html/index.html`.\n\nIf you don't have `doxygen` installed locally, you can use also find the\ndocumentation [here](http://coin-or.github.io/Clp/Doxygen).\n\n## Project Links\n\nHelp:\n * [Code of Conduct](https://www.coin-or.org/code-of-conduct/)\n * [Discussion forum](https://github.com/coin-or/Clp/discussions)\n * [Report a bug](https://github.com/coin-or/Clp/issues/new)\n \nDocumentation:\n * [Doxygen-generated html documentation](https://coin-or.github.io/Clp/Doxygen)\n * Source code [examples](examples/)\n * [User's Guide](https://coin-or.github.io/Clp) (from 2004)\n\nInterfaces:\n * [Matlab Interface + Windows x86 & x64 Interface Binaries (OPTI Toolbox)](https://www.inverseproblem.co.nz/OPTI/)\n * [Julia interface](https://github.com/JuliaOpt/Clp.jl)\n * [R and CLP - a quick start](https://cran.r-project.org/web/packages/clpAPI/vignettes/clpAPI.pdf)\n * [Java and CLP - performs well](http://orinanobworld.blogspot.co.uk/2016/06/using-clp-with-java.html)"
}
