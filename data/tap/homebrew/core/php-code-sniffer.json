{
  "name": "php-code-sniffer",
  "full_name": "php-code-sniffer",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Check coding standards in PHP, JavaScript and CSS",
  "license": "BSD-3-Clause",
  "homepage": "https://github.com/squizlabs/PHP_CodeSniffer/",
  "versions": {
    "stable": "3.7.2",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/squizlabs/PHP_CodeSniffer/releases/download/3.7.2/phpcs.phar",
      "tag": null,
      "revision": null,
      "checksum": "204214c1ea5ba814fb0b2608c19cca2c10bf5ffcc9f0e3d4c34aadc0179517b7"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/php-code-sniffer/blobs/sha256:0e0811580ac110c427bc8eac1ee778b87c9db88958fa6c31ae2944e89d54a8ab",
          "sha256": "0e0811580ac110c427bc8eac1ee778b87c9db88958fa6c31ae2944e89d54a8ab"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "php"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/php-code-sniffer.rb",
  "ruby_source_checksum": {
    "sha256": "8aa0d0bb449cb493f7145a399ac77adab416a37d96b323bafb2fa3b26b922051"
  },
  "date_added": "2018-03-31T21:16:49-07:00",
  "readme": "## About\n\nPHP_CodeSniffer is a set of two PHP scripts; the main `phpcs` script that tokenizes PHP, JavaScript and CSS files to detect violations of a defined coding standard, and a second `phpcbf` script to automatically correct coding standard violations. PHP_CodeSniffer is an essential development tool that ensures your code remains clean and consistent.\n\n[![Build Status](https://github.com/squizlabs/PHP_CodeSniffer/workflows/Validate/badge.svg?branch=master)](https://github.com/squizlabs/PHP_CodeSniffer/actions)\n[![Build Status](https://github.com/squizlabs/PHP_CodeSniffer/workflows/Test/badge.svg?branch=master)](https://github.com/squizlabs/PHP_CodeSniffer/actions)\n[![Code consistency](http://squizlabs.github.io/PHP_CodeSniffer/analysis/squizlabs/PHP_CodeSniffer/grade.svg)](http://squizlabs.github.io/PHP_CodeSniffer/analysis/squizlabs/PHP_CodeSniffer)\n[![Join the chat at https://gitter.im/squizlabs/PHP_CodeSniffer](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/squizlabs/PHP_CodeSniffer?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n## Requirements\n\nPHP_CodeSniffer requires PHP version 5.4.0 or greater, although individual sniffs may have additional requirements such as external applications and scripts. See the [Configuration Options manual page](https://github.com/squizlabs/PHP_CodeSniffer/wiki/Configuration-Options) for a list of these requirements.\n\nIf you're using PHP_CodeSniffer as part of a team, or you're running it on a [CI](https://en.wikipedia.org/wiki/Continuous_integration) server, you may want to configure your project's settings [using a configuration file](https://github.com/squizlabs/PHP_CodeSniffer/wiki/Advanced-Usage#using-a-default-configuration-file).\n\n\n## Installation\n\nThe easiest way to get started with PHP_CodeSniffer is to download the Phar files for each of the commands:\n```\n# Download using curl\ncurl -OL https://squizlabs.github.io/PHP_CodeSniffer/phpcs.phar\ncurl -OL https://squizlabs.github.io/PHP_CodeSniffer/phpcbf.phar\n\n# Or download using wget\nwget https://squizlabs.github.io/PHP_CodeSniffer/phpcs.phar\nwget https://squizlabs.github.io/PHP_CodeSniffer/phpcbf.phar\n\n# Then test the downloaded PHARs\nphp phpcs.phar -h\nphp phpcbf.phar -h\n```\n\n### Composer\nIf you use Composer, you can install PHP_CodeSniffer system-wide with the following command:\n```bash\ncomposer global require \"squizlabs/php_codesniffer=*\"\n```\nMake sure you have the composer bin dir in your PATH. The default value is `~/.composer/vendor/bin/`, but you can check the value that you need to use by running `composer global config bin-dir --absolute`.\n\nOr alternatively, include a dependency for `squizlabs/php_codesniffer` in your `composer.json` file. For example:\n\n```json\n{\n    \"require-dev\": {\n        \"squizlabs/php_codesniffer\": \"3.*\"\n    }\n}\n```\n\nYou will then be able to run PHP_CodeSniffer from the vendor bin directory:\n```bash\n./vendor/bin/phpcs -h\n./vendor/bin/phpcbf -h\n```\n### Phive\nIf you use Phive, you can install PHP_CodeSniffer as a project tool using the following commands:\n```bash\nphive install phpcs\nphive install phpcbf\n```\nYou will then be able to run PHP_CodeSniffer from the tools directory:\n```bash\n./tools/phpcs -h\n./tools/phpcbf -h\n```\n### PEAR\nIf you use PEAR, you can install PHP_CodeSniffer using the PEAR installer. This will make the `phpcs` and `phpcbf` commands immediately available for use. To install PHP_CodeSniffer using the PEAR installer, first ensure you have [installed PEAR](http://pear.php.net/manual/en/installation.getting.php) and then run the following command:\n```bash\npear install PHP_CodeSniffer\n```\n### Git Clone\nYou can also download the PHP_CodeSniffer source and run the `phpcs` and `phpcbf` commands directly from the Git clone:\n```bash\ngit clone https://github.com/squizlabs/PHP_CodeSniffer.git\ncd PHP_CodeSniffer\nphp bin/phpcs -h\nphp bin/phpcbf -h\n```\n## Getting Started\n\nThe default coding standard used by PHP_CodeSniffer is the PEAR coding standard. To check a file against the PEAR coding standard, simply specify the file's location:\n```bash\nphpcs /path/to/code/myfile.php\n```\nOr if you wish to check an entire directory you can specify the directory location instead of a file.\n```bash\nphpcs /path/to/code-directory\n```\nIf you wish to check your code against the PSR-12 coding standard, use the `--standard` command line argument:\n```bash\nphpcs --standard=PSR12 /path/to/code-directory\n```\n\nIf PHP_CodeSniffer finds any coding standard errors, a report will be shown after running the command.\n\nFull usage information and example reports are available on the [usage page](https://github.com/squizlabs/PHP_CodeSniffer/wiki/Usage).\n\n## Documentation\n\nThe documentation for PHP_CodeSniffer is available on the [Github wiki](https://github.com/squizlabs/PHP_CodeSniffer/wiki).\n\n## Issues\n\nBug reports and feature requests can be submitted on the [Github Issue Tracker](https://github.com/squizlabs/PHP_CodeSniffer/issues).\n\n## Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md) for information.\n\n## Versioning\n\nPHP_CodeSniffer uses a `MAJOR.MINOR.PATCH` version number format.\n\nThe `MAJOR` version is incremented when:\n- backwards-incompatible changes are made to how the `phpcs` or `phpcbf` commands are used, or\n- backwards-incompatible changes are made to the `ruleset.xml` format, or\n- backwards-incompatible changes are made to the API used by sniff developers, or\n- custom PHP_CodeSniffer token types are removed, or\n- existing sniffs are removed from PHP_CodeSniffer entirely\n\nThe `MINOR` version is incremented when:\n- new backwards-compatible features are added to the `phpcs` and `phpcbf` commands, or\n- backwards-compatible changes are made to the `ruleset.xml` format, or\n- backwards-compatible changes are made to the API used by sniff developers, or\n- new sniffs are added to an included standard, or\n- existing sniffs are removed from an included standard\n\n> NOTE: Backwards-compatible changes to the API used by sniff developers will allow an existing sniff to continue running without producing fatal errors but may not result in the sniff reporting the same errors as it did previously without changes being required.\n\nThe `PATCH` version is incremented when:\n- backwards-compatible bug fixes are made\n\n> NOTE: As PHP_CodeSniffer exists to report and fix issues, most bugs are the result of coding standard errors being incorrectly reported or coding standard errors not being reported when they should be. This means that the messages produced by PHP_CodeSniffer, and the fixes it makes, are likely to be different between PATCH versions."
}
