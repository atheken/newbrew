{
  "name": "osi",
  "full_name": "osi",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Open Solver Interface",
  "license": "EPL-2.0",
  "homepage": "https://github.com/coin-or/Osi",
  "versions": {
    "stable": "0.108.8",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/coin-or/Osi/archive/releases/0.108.8.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "8b01a49190cb260d4ce95aa7e3948a56c0917b106f138ec0a8544fadca71cf6a"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/osi/blobs/sha256:c8c3a725db022a6b778c5978cb0f75f52801178afd5a3b188e9b0e4da820b54b",
          "sha256": "c8c3a725db022a6b778c5978cb0f75f52801178afd5a3b188e9b0e4da820b54b"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/osi/blobs/sha256:6096f7d19bec96189b2952eb084868ad02929239d124e4cd64f75414d8c4653b",
          "sha256": "6096f7d19bec96189b2952eb084868ad02929239d124e4cd64f75414d8c4653b"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/osi/blobs/sha256:f5470a9e3c06da29cfba1b032114b80c7318db99a8012d3e4ad0712e0094e359",
          "sha256": "f5470a9e3c06da29cfba1b032114b80c7318db99a8012d3e4ad0712e0094e359"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/osi/blobs/sha256:52aed1baafbef0913c13b7d241c6ba4dadd245f36c41e4c86df17fd7aaced06c",
          "sha256": "52aed1baafbef0913c13b7d241c6ba4dadd245f36c41e4c86df17fd7aaced06c"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/osi/blobs/sha256:fa3fe31ee9b82b6587527183fed072899f708dc1b3cbb08f4c980d2ea2fdeb43",
          "sha256": "fa3fe31ee9b82b6587527183fed072899f708dc1b3cbb08f4c980d2ea2fdeb43"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/osi/blobs/sha256:1c54abe37d8f2500077cd1ec1ba2ba9b447b46df75d80e76fda9a9088310a867",
          "sha256": "1c54abe37d8f2500077cd1ec1ba2ba9b447b46df75d80e76fda9a9088310a867"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/osi/blobs/sha256:70dedde843f78011d381805f0da706d48bdd2a30143996efdd3d36de3f87d3e2",
          "sha256": "70dedde843f78011d381805f0da706d48bdd2a30143996efdd3d36de3f87d3e2"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "pkg-config"
  ],
  "dependencies": [
    "coinutils"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/osi.rb",
  "ruby_source_checksum": {
    "sha256": "a871452fa15208d9c9864379bcbcba29c20c56d27746166ca16fa8ce33f48180"
  },
  "date_added": "2020-07-11T13:48:00+02:00",
  "readme": "# Osi\n\n[![A COIN-OR Project](https://coin-or.github.io/coin-or-badge.png)](https://www.coin-or.org)\n\nProjects such as this one are maintained by a small group of volunteers under\nthe auspices of the non-profit [COIN-OR Foundation](https://www.coin-or.org)\nand we need your help! Please consider [sponsoring our\nactivities](https://github.com/sponsors/coin-or) or [volunteering](mailto:volunteer@coin-or.org) to help!\n\n[![Latest Release](https://img.shields.io/github/v/release/coin-or/Osi?sort=semver)](https://github.com/coin-or/Osi/releases)\n\n_This file is auto-generated from [config.yml](.coin-or/config.yml) using the \n[generate_readme](.coin-or/generate_readme) script.\nTo make changes, please edit [config.yml](.coin-or/config.yml) or the generation scripts\n[here](.coin-or/generate_readme) and [here](https://github.com/coin-or/coinbrew/blob/master/scripts/generate_readme)._\n\nOsi (*O*pen *S*olver *I*nterface) provides an abstract base class to a generic linear programming (LP) solver, along with derived classes for specific solvers.\nMany applications may be able to use the Osi to insulate themselves from a specific LP solver.\nThat is, programs written to the OSI standard may be linked to any solver with an OSI interface and should produce correct results.\nThe OSI has been significantly extended compared to its first incarnation.\nCurrently, the OSI supports linear programming solvers and has rudimentary support for integer programming.\nAmong others the following operations are supported:\n * creating the LP formulation;\n * directly modifying the formulation by adding rows/columns;\n * modifying the formulation by adding cutting planes provided by [CGL](https://www.github.com/coin-or/Cgl);\n * solving the formulation (and resolving after modifications);\n * extracting solution information;\n * invoking the underlying solver's branch-and-bound component.\n\nThe following is a list of derived Osi classes:\n\n|Solver|Derived Class|Note|\n|------|-------------|----|\n|[Cbc](https://www.github.com/coin-or/Cbc)|OsiCbc| unmaintained | \n|[Clp](https://www.github.com/coin-or/Clp)|OsiClp| |\n|[CPLEX](https://www.ibm.com/analytics/cplex-optimizer)|OsiCpx| |\n|[DyLP](https://www.github.com/coin-or/DyLP)|OsiDylp| |\n|[GLPK](http://www.gnu.org/software/glpk/glpk.html)|OsiGlpk| Glpk |\n|[Gurobi](http://www.gurobi.com)|OsiGrb| |\n|[MOSEK](http://www.mosek.com)|OsiMsk| |\n|[SoPlex](http://soplex.zib.de)|OsiSpx| SoPlex < 4.0 |\n|[SYMPHONY](https://www.github.com/coin-or/SYMPHONY)|OsiSym| |\n|[Vol](https://www.github.com/coin-or/Vol)|OsiVol| |\n|[XPRESS-MP](https://www.fico.com/en/products/fico-xpress-optimization)|OsiXpr| |\n\nEach solver interface is in a separate directory of Osi or distributed\nwith the solver itself.\n\nWithin COIN-OR, Osi is used by [Cgl](https://www.github.com/coin-or/Cgl), [Cbc](https://www.github.com/coin-or/Cbc), and [Bcp](https://www.github.com/coin-or/Bcp), among others.\n\nThe main project managers are Lou Hafer (@LouHafer) and Matt Saltzmann (@mjsaltzman).\n\nAn incomplete list of recent changes to Osi are found in the [CHANGELOG](Osi/CHANGELOG)\n\n\nOsi is written in C++ and is released as open source under the [Eclipse Public License 2.0](http://www.opensource.org/licenses/EPL-2.0).\n\nIt is distributed under the auspices of the [COIN-OR Foundation](https://www.coin-or.org).\n\nThe Osi development site is https://github.com/coin-or/Osi.\n\n## CITE\n\nCode: [![DOI](https://zenodo.org/badge/173476455.svg)](https://zenodo.org/badge/latestdoi/173476455)\n\n## CURRENT BUILD STATUS\n\n[![Windows Builds](https://github.com/coin-or/Osi/actions/workflows/windows-ci.yml/badge.svg?branch=master)](https://github.com/coin-or/Osi/actions/workflows/windows-ci.yml?query=branch%3Amaster)\n\n[![Linux and MacOS Builds](https://github.com/coin-or/Osi/actions/workflows/linux-ci.yml/badge.svg?branch=master)](https://github.com/coin-or/Osi/actions/workflows/linux-ci.yml?query=branch%3Amaster)\n\n## DOWNLOAD\n\nWhat follows is a quick start guide for obtaining or building\nOsi on common platforms. More detailed information is\navailable [here](https://coin-or.github.io/user_introduction.html).\n\n### Docker image\n\nThere is a Docker image that provides Osi, as well as other projects\nin the [COIN-OR Optimization\nSuite](https://github.com/coin-or/COIN-OR-OptimizationSuite) [here](https://hub.docker.com/repository/docker/coinor/coin-or-optimization-suite)\n\n### Binaries\n\nFor newer releases, binaries will be made available as assets attached to\nreleases in Github\n[here](https://github.com/coin-or/Osi/releases). Older binaries\nare archived as part of Cbc\n[here](https://www.coin-or.org/download/binary/Cbc).\n\n * *Linux* (see https://repology.org/project/coin-or-osi/versions for a complete listing): \n   * arch:\n     ```\n     $ sudo pacman -S  coin-or-osi\n     ```\n   * Debian/Ubuntu:\n     ```\n     $ sudo apt-get install  coinor-osi coinor-libosi-dev\n     ```\n   * Fedora/Redhat/CentOS:\n     ```\n     $ sudo yum install  coin-or-Osi coin-or-Osi-devel\n     ```\n   * freebsd:\n     ```\n     $ sudo pkg install math/osi\n     ```\n   * linuxbrew:\n     ```\n     $ brew install osi\n     ```\n * *Windows*: The easiest way to get Osi on Windows is to download an archive as described above.\n * *Mac OS X*: The easiest way to get Osi on Mac OS X is through [Homebrew](https://brew.sh).\n     ```\n     $ brew tap coin-or-tools/coinor\n     $ brew install coin-or-tools/coinor/osi\n     ```\n\n* *conda* (cross-platform, no Windows for now):\n     ```\n     $ conda install coin-or-osi\n     ```\n\nDue to license incompatibilities, pre-compiled binaries lack some \nfunctionality. If binaries are not available for your platform for the latest \nversion and you would like to request them to be built and posted, feel free \nto let us know on the mailing list. \n\n### Source\n\nSource code can be obtained either by\n\n * Downloading a snapshot of the source code for the latest release version of Osi from the\n [releases](https://github.com/coin-or/Osi/releases) page,\n * Cloning this repository from [Github](https://github.com/coin-or/Osi), or \n * Using the [coinbrew](https://github.com/coin-or/coinbrew) script to get the project and all dependencies (recommended, see below).   \n\n### Dependencies\n\nOsi has a number of dependencies, which are detailed in\n[config.yml](.coin-or/config.yml). Dependencies on other COIN-OR projects are\nautomatically downloaded when obtaining the source with `coinbrew`. For some\nof the remaining third-party dependencies, automatic download scripts and\nbuild wrappers are provided (and will also be automatically run for required\nand recommended dependencies), while other libraries that are aeasy to obtain\nmust be installed using an appropriate package manager (or may come with your\nOS by default). \n\n## BUILDING from source\n\nThese quick start instructions assume you are in a bash shell. \n\n### Using `coinbrew`\n\nTo download and build Osi from source, execute the \nfollowing on the command line. \n```\nwget https://raw.githubusercontent.com/coin-or/coinbrew/master/coinbrew\nchmod u+x coinbrew\n./coinbrew fetch Osi@master\n./coinbrew build Osi\n```\nFor more detailed instructions on coinbrew, see https://coin-or.github.io/coinbrew.\nThe `coinbrew` script will fetch the additional projects specified in the Dependencies section of [config.yml](.coin-or/config.yml).\n\n### Without `coinbrew` (Expert users)\n\n * Download the source code, e.g., by cloning the git repo https://github.com/coin-or/Osi\n * Download and install the source code for the dependencies listed in [config.yml](.coin-or/config.yml)\n * Build the code as follows (make sure to set PKG_CONFIG_PTH to install directory for dependencies).\n\n```\n./configure -C\nmake\nmake test\nmake install\n```\n\n## Doxygen Documentation\n\nIf you have `Doxygen` available, you can build a HTML documentation by typing\n\n`make doxygen-docs` \n\nin the build directory. If Osi was built via `coinbrew`, then the build\ndirectory will be `./build/Osi/master` by default. The doxygen documentation main file\nis found at `<build-dir>/doxydoc/html/index.html`.\n\nIf you don't have `doxygen` installed locally, you can use also find the\ndocumentation [here](http://coin-or.github.io/Osi/Doxygen).\n\n## Project Links\n\n * [Code of Conduct](https://www.coin-or.org/code-of-conduct/)\n * [COIN-OR Web Site](http://www.coin-or.org/)\n * [Discussion forum](https://github.com/coin-or/Osi/discussions)\n * [Report a bug](https://github.com/coin-or/Osi/issues/new)\n * [Doxygen-generated html documentation](https://coin-or.github.io/Osi/Doxygen)\n * [OSI2 Discussion](https://github.com/coin-or/Osi2/discussions)\n * The most recent tutorial on OSI can be accessed from the [page on presentations from the 2004 CORS/INFORMS Joint Meeting in Banff](http://www.coin-or.org/Presentations/CORSINFORMSWorkshop04/index.html).\n * [The COIN-OR Open Solver Interface: Technology Overview](http://www.coin-or.org/Presentations/CORS2004-OSI.pdf): An overview of the COIN-OR OSI and design issues for a next-generation version given at CORS/INFORMS 2004 by Matthew Saltzman.\n\n-------\n\n## Dynamically loading commercial solver libraries\n\n### At build time\n\nIt is possible to create an osi build that supports cplex, gurobi and xpress even if you don't have (yet) any of these solvers on your machine using [lazylpsolverlibs](https://code.google.com/p/lazylpsolverlibs/). To do so, follow these steps:\n\n 1. Install lazylpsolverlibs (follow the instructions of the [lazylpsolverlibs wiki](https://code.google.com/p/lazylpsolverlibs/wiki/HowToSetup))\n 2. Use the following command line to configure Osi:\n```\n./configure --with-cplex-incdir=\"$(pkg-config --variable=includedir lazycplex)/lazylpsolverlibs/ilcplex\" \\\n            --with-cplex-lib=\"$(pkg-config --libs lazycplex)\" \\ \n            --with-gurobi-incdir=\"$(pkg-config --variable=includedir lazygurobi)/lazylpsolverlibs\" \\\n            --with-gurobi-lib=\"$(pkg-config --libs lazygurobi)\" \\\n            --with-xpress-incdir=\"$(pkg-config --variable=includedir lazyxprs)/lazylpsolverlibs\" \\\n            --with-xpress-lib=\"$(pkg-config --libs lazyxprs)\"\n```\n 3. Then follow the normal installation process (make, make install)\n\n### At run time\n\nYour build should now support cplex, gurobi and xpress, which means that if you install one of these solvers, osi will be able to use it.\nAt run time, you just need to point one of the environment variables LAZYLPSOLVERLIBS_GUROBI_LIB, LAZYLPSOLVERLIBS_CPLEX_LIB or LAZYLPSOLVERLIBS_XPRS_LIB to the full path of the corresponding solver library.\nFor example:\n```\nexport LAZYLPSOLVERLIBS_CPLEX_LIB=/usr/ilog/cplex121/bin/x86_debian4.0_4.1/libcplex121.so\n```\n\n### Troubleshooting\n\nIf pkg-config reports errors during the configure step, try modifying the PKG_CONFIG_PATH variable. Most likely, you need to do:\n```\nexport PKG_CONFIG_PATH=/usr/local/lib/pkgconfig\n```"
}
