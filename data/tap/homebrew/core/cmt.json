{
  "name": "cmt",
  "full_name": "cmt",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Write consistent git commit messages based on a custom template",
  "license": "BSD-3-Clause",
  "homepage": "https://github.com/smallhadroncollider/cmt",
  "versions": {
    "stable": "0.7.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/smallhadroncollider/cmt/archive/0.7.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "364faaf5f44544f952b511be184a724e2011fba8f0f88fdfc05fef6985dd32f6"
    },
    "head": {
      "url": "https://github.com/smallhadroncollider/cmt.git",
      "branch": "master"
    }
  },
  "revision": 1,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cmt/blobs/sha256:e470479ac38df0931dfbc279eb13d1534f8b9568c0ff07a26719721a8696c055",
          "sha256": "e470479ac38df0931dfbc279eb13d1534f8b9568c0ff07a26719721a8696c055"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cmt/blobs/sha256:bd8742e482d7e247250d6fb0ea34acaedf547eb5f5436fa56aff4f62531fb25b",
          "sha256": "bd8742e482d7e247250d6fb0ea34acaedf547eb5f5436fa56aff4f62531fb25b"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cmt/blobs/sha256:2559564dc48042c6480d568cbb11da90489e7a1bcb6c8a86bfdc7845eb500a93",
          "sha256": "2559564dc48042c6480d568cbb11da90489e7a1bcb6c8a86bfdc7845eb500a93"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cmt/blobs/sha256:07eb661284422f132a1336c2219c399642dd92e02e26bbf7569424f317fdb235",
          "sha256": "07eb661284422f132a1336c2219c399642dd92e02e26bbf7569424f317fdb235"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cmt/blobs/sha256:58badcf7f79e80d809dd05183a8dc16f0b368b055cd6ef3eae495c251888908d",
          "sha256": "58badcf7f79e80d809dd05183a8dc16f0b368b055cd6ef3eae495c251888908d"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cmt/blobs/sha256:22ba275206a22888107bf70ec7a9e53a74f1dc5daf66349a979dadfc174d99ff",
          "sha256": "22ba275206a22888107bf70ec7a9e53a74f1dc5daf66349a979dadfc174d99ff"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cmt/blobs/sha256:350dea5c83e8b86cdba45f71fafcd0b8cf98c1a2e229a6d7ac51d8c7b679c38e",
          "sha256": "350dea5c83e8b86cdba45f71fafcd0b8cf98c1a2e229a6d7ac51d8c7b679c38e"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cmt/blobs/sha256:ee763541c32889f0840a7c143972ba194eeafdbbbfa38008a8dd2e851f2382b8",
          "sha256": "ee763541c32889f0840a7c143972ba194eeafdbbbfa38008a8dd2e851f2382b8"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cmt/blobs/sha256:b6a48e225aa97777da3fb586c4908417e8690d1b0346c7691122287b3848bddb",
          "sha256": "b6a48e225aa97777da3fb586c4908417e8690d1b0346c7691122287b3848bddb"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cabal-install",
    "ghc",
    "hpack"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/cmt.rb",
  "ruby_source_checksum": {
    "sha256": "f3cf4bda42f461070028b1978d2d0abf6b1bac8b1f4642e490292d9f321b76b0"
  },
  "date_added": "2020-02-01T12:58:00-05:00",
  "readme": "# cmt\n\nWrite consistent git commit messages based on a custom template.\n\nSimilar idea to [commitizen](https://github.com/commitizen/cz-cli), but with an emphasis on making it easy to define a custom commit style.\n\n- [Concept](#Concept)\n- [Format](#Format)\n- [Usage](#Usage)\n- [Install](#Install)\n\n![Demo](docs/cmt-0.7.gif)\n\n\n## Concept\n\nIt's important to write consistent commit messages, but depending on the project you may well want to use different commit styles.\n\nWith `cmt` you create a `.cmt` file in your project directory. The `.cmt` file enforces a particular style of commit message for that project. You can also add predefined commit messages for things like version bumps and updating the readme.\n\nFor example, for my programming projects I try to use a commit style similar to the [AngularJS Commit Message Guidelines](https://gist.github.com/stephenparish/9941e89d80e2bc58a153). However, this isn't appropriate for my teaching notes repos or for my capistrano build repos.\n\n\n## Format\n\nA `.cmt` file consist of two parts: the input parts and the output format.\n\nA basic `.cmt` file to include a subject and body would look like:\n\n```txt\n# The input parts\n{\n    \"Subject\" = @ # Single line input\n    \"Body\" = !@ # Multi-line input\n}\n\n# predefined commit messages\n# this section is optional\n{\n    vb = \"version bump\"\n}\n\n# The output format\n${Subject}\n\n${Body}\n```\n\nA more complex example, the [AngularJS Commit Message Guidelines](https://gist.github.com/stephenparish/9941e89d80e2bc58a153):\n\n```txt\n# The input parts\n{\n    # Shows a list of options\n    \"Type\" = [\n        \"feat\",\n        \"fix\",\n        \"docs\",\n        \"style\",\n        \"refactor\",\n        \"test\",\n        \"chore\"\n    ]\n    \"Scope\" = @ # Single line input\n    \"Subject\" = @\n    \"Body\" = !@ # Multi-line input\n    \"Footer\" = !@\n}\n\n# predefined messages\n# this section is optional\n{\n    vb = \"chore: version bump\"\n    readme = \"docs: updated readme\"\n}\n\n# The output format\n# Takes the values provided from the input stage\n# and interpolates them in\n${Type} (${Scope}): ${Subject}\n\n${Body}\n\n${Footer}\n```\n\nFor my capistrano build repos the `.cmt` file is simply:\n\n```txt\n{}\n\n\"latest build\"\n```\n\n\n### Input Parts\n\nThese are at the top of the `.cmt` file and surrounded by opening and closing curly braces. A consist of a name and a type:\n\n- `@`: single line input\n- `!@`: multi line input\n- `%`: select from a list of staged files\n- `[\"option 1\", \"option 2\"]`: list of options\n\n### Predefined Messages\n\nThe predefined messages section is optional. You can provide a list of names and messages and then use the `-p <name>` command-line argument to use one of them.\n\nFor example, with the following config, `cmt -p vb` would use the message \"version bump\".\n\n```txt\nvb = \"version bump\"\n```\n\nPredefined messages can also use any input parts defined in the prior section. An example of this would be:\n\n```txt\n{\n    \"Project\" = [\n        \"ghc\",\n        \"cabal\"\n    ]\n}\n{\n    vb = \"${Project}: version bump\"\n}\n```\n\nRunning `cmt -p vb` will now prompt you to select which project is getting version bumped.\n\n### Output Format\n\nThe output format consists of named input parts (`${<name>}`) plus anything else you want.\n\n#### Wildcard Output\n\nYou can accept an output called `${*}`, which will add in whatever is passed to `cmt` as command-line arguments.\n\nFor example:\n\n```txt\n# Input parts\n# * input not needed, as comes from command-line\n{\n    \"Scope\" = %\n}\n\n# Scope from input and * from command-line\n(${Scope}): ${*}\n```\n\nThen use with:\n\n```bash\ncmt \"Blah blah blah\"\n```\n\n\n## Usage\n\nAdd a `.cmt` file to your project directory.\n\n```bash\ncmt # will show the options and then commit\n```\n\n`cmt` will also look in your home directory if a `.cmt` file isn't found in the project directory hierarchy. This can be used to define a global commit style, which you can then override on a per-project basis.\n\n### Predefined Messages\n\nIf there are commit message you use frequently (such as \"version bump\"), you can setup predefined messages with aliases:\n\n```bash\ncmt -p vb # use the version bump message\n```\n\n### Wildcard Output\n\nIf you're using the `${*}` format option then:\n\n```bash\ncmt \"blah blah blah\" # this will go in ${*} place\n```\n\n### Dry Runs\n\nIf you add `--dry-run` as the first argument, `cmt` will show you the output, but not try and make a commit. It will store the output so you can easily run it without having to re-enter everything.\n\n```bash\ncmt --dry-run \"Blah blah blah\"\ncmt --dry-run -p vb\n```\n\n### Re-run Failed/Dry Run Commits\n\nIf the commit returns with a non-zero status code or you run with `--dry-run`, your previous commit message is stored in a `.cmt.bkp` file. You can re-run the commit when you're ready with:\n\n```bash\ncmt --prev\n```\n\n### Colour Output\n\nBy default the output uses bash colour codes. You can turn this off using the `--no-color` setting.\n\n\n### Other Options\n\n```bash\ncmt -h # displays usage information\ncmt -v # displays version number\ncmt -c # displays location of .cmt file\n```\n\n\n## Install\n\n### Homebrew (Mac)\n\nYou can install `cmt` on your Mac using [Homebrew](https://brew.sh):\n\n```bash\nbrew install cmt\n```\n\n### Debian/Ubuntu\n\n[A `.deb` package is available for Debian/Ubuntu](https://github.com/smallhadroncollider/cmt/releases). Download it and install with `dpkg -i <package-name>`.\n\n\n### Binaries\n\n[Binaries for Mac and Linux are available](https://github.com/smallhadroncollider/cmt/releases). Add the binary to a directory in your path (such as `/usr/local/bin`).\n\n### Cabal\n\n**Requirements**: [Cabal](https://www.haskell.org/cabal/)\n\n```bash\ncabal install cmt\n```\n\nMake sure you run `cabal update` first if you haven't run it recently.\n\n### Building\n\n**Requirements**: [Stack](https://docs.haskellstack.org/en/stable/README/)\n\nThe following command will build cmt and then install it in `~/.local/bin`:\n\n```bash\nstack build && stack install\n```"
}
