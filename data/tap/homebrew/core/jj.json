{
  "name": "jj",
  "full_name": "jj",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Git-compatible distributed version control system",
  "license": "Apache-2.0",
  "homepage": "https://github.com/martinvonz/jj",
  "versions": {
    "stable": "0.8.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/martinvonz/jj/archive/refs/tags/v0.8.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "636661cb4eb8248ae98c443bd72464de9b6a150175388559ccb321f2461011f1"
    },
    "head": {
      "url": "https://github.com/martinvonz/jj.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/jj/blobs/sha256:94d818bdaf9b483fcc2bbb082d36f78932ebfe99a133f6e412f041f01906a5c1",
          "sha256": "94d818bdaf9b483fcc2bbb082d36f78932ebfe99a133f6e412f041f01906a5c1"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/jj/blobs/sha256:bd01f7149aa7ad6904953c0a4d513c529299457c9fcc6deba7d8c324e621a393",
          "sha256": "bd01f7149aa7ad6904953c0a4d513c529299457c9fcc6deba7d8c324e621a393"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/jj/blobs/sha256:09708cb6bf10a7d1dbdcfcdfe541ebfd5ac758b5e90da636ea25a8e2c8fec840",
          "sha256": "09708cb6bf10a7d1dbdcfcdfe541ebfd5ac758b5e90da636ea25a8e2c8fec840"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/jj/blobs/sha256:0698a6fbe84ed51f3376d984c3355447758051df3f19ba447eb17d2a80475e14",
          "sha256": "0698a6fbe84ed51f3376d984c3355447758051df3f19ba447eb17d2a80475e14"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/jj/blobs/sha256:234f106919e24c8ce55565063e7ad625b06f0b367a71fab6010aca1a9d5a3cf8",
          "sha256": "234f106919e24c8ce55565063e7ad625b06f0b367a71fab6010aca1a9d5a3cf8"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/jj/blobs/sha256:0ac86653132e231a64867af7f26c532c6379e51f9bfab137fe10660c9bde82b4",
          "sha256": "0ac86653132e231a64867af7f26c532c6379e51f9bfab137fe10660c9bde82b4"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/jj/blobs/sha256:219dfbf9af292642059302d469c333268253589bd8947d387004225754d6a232",
          "sha256": "219dfbf9af292642059302d469c333268253589bd8947d387004225754d6a232"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust",
    "pkg-config"
  ],
  "dependencies": [
    "openssl@3"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "zlib"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/jj.rb",
  "ruby_source_checksum": {
    "sha256": "5b27cea0c19ba0bcc998dd999615a6276c58e89851bdbb508b4064a5d61cc12e"
  },
  "date_added": "2022-10-02T18:06:42+00:00",
  "readme": "# Jujutsu VCS\n\n![](https://img.shields.io/github/license/martinvonz/jj) ![](https://img.shields.io/github/v/release/martinvonz/jj) ![](https://img.shields.io/github/release-date/martinvonz/jj) ![](https://img.shields.io/crates/v/jj-cli)\n<br/>\n![](https://github.com/martinvonz/jj/workflows/build/badge.svg) ![](https://img.shields.io/codefactor/grade/github/martinvonz/jj/main) ![](https://img.shields.io/librariesio/github/martinvonz/jj)\n\n- [Disclaimer](#disclaimer)\n- [Introduction](#introduction)\n- [Status](#status)\n- [Installation](#installation)\n- [Command-line completion](#command-line-completion)\n- [Getting started](#getting-started)\n- [Related work](#related-work)\n\n## Disclaimer\n\nThis is not a Google product. It is an experimental version-control system\n(VCS). I (Martin von Zweigbergk <martinvonz@google.com>) started it as a hobby\nproject in late 2019. That said, this is now my full-time project at Google. My\npresentation from Git Merge 2022 has information about Google's plans. See the\n[slides](https://docs.google.com/presentation/d/1F8j9_UOOSGUN9MvHxPZX_L4bQ9NMcYOp1isn17kTC_M/view)\nor the [recording](https://www.youtube.com/watch?v=bx_LGilOuE4).\n\n## Introduction\n\nJujutsu is a [Git-compatible](docs/git-compatibility.md)\n[DVCS](https://en.wikipedia.org/wiki/Distributed_version_control). It combines\nfeatures from Git (data model,\n[speed](https://github.com/martinvonz/jj/discussions/49)), Mercurial (anonymous\nbranching, simple CLI [free from \"the index\"](docs/git-comparison.md#the-index),\n[revsets](docs/revsets.md), powerful history-rewriting), and Pijul/Darcs\n([first-class conflicts](docs/conflicts.md)), with features not found in most\nof them ([working-copy-as-a-commit](docs/working-copy.md),\n[undo functionality](docs/operation-log.md), automatic rebase,\n[safe replication via `rsync`, Dropbox, or distributed file\nsystem](docs/technical/concurrency.md)).\n\nThe command-line tool is called `jj` for now because it's easy to type and easy\nto replace (rare in English). The project is called \"Jujutsu\" because it matches\n\"jj\".\n\nIf you have any questions, please join us on Discord\n[![Discord](https://img.shields.io/discord/968932220549103686.svg?label=&logo=discord&logoColor=ffffff&color=7389D8&labelColor=6A7EC2)](https://discord.gg/dkmfj3aGQN)\nor start a [GitHub Discussion](https://github.com/martinvonz/jj/discussions).\nThe [glossary](docs/glossary.md) may also be helpful.\n\n## Features\n\n### Compatible with Git\n\nJujutsu has two [backends](docs/glossary.md#backend). One of them is a Git\nbackend (the other is a native one [^native-backend]). This lets you use Jujutsu\nas an alternative interface to Git. The commits you create will look like\nregular Git commits. You can always switch back to Git. The Git support uses the\n[libgit2](https://libgit2.org/) C library.\n\n[^native-backend]: At this time, there's practically no reason to use the native\nbackend. The backend exists mainly to make sure that it's possible to eventually\nadd functionality that cannot easily be added to the Git backend.\n\n<img src=\"demos/git_compat.png\" />\n\n### The working copy is automatically committed\n\nJujutsu uses a real commit to represent the working copy. Checking out a commit\nresults a new working-copy commit on top of the target commit. Almost all\ncommands automatically amend the working-copy commit.\n\nThe working-copy being a commit means that commands never fail because the\nworking copy is dirty (no \"error: Your local changes to the following\nfiles...\"), and there is no need for `git stash`. Also, because the working copy\nis a commit, commands work the same way on the working-copy commit as on any\nother commit, so you can set the commit message before you're done with the\nchanges.\n\n<img src=\"demos/working_copy.png\" />\n\n### The repo is the source of truth\n\nWith Jujutsu, the working copy plays a smaller role than with Git. Commands\nsnapshot the working copy before they start, then they update the repo, and then\nthe working copy is updated (if the working-copy commit was modified). Almost\nall commands (even checkout!) operate on the commits in the repo, leaving the\ncommon functionality of snapshotting and updating of the working copy to\ncentralized code. For example, `jj restore` (similar to `git restore`) can\nrestore from any commit and into any commit, and `jj describe` can set the\ncommit message of any commit (defaults to the working-copy commit).\n\n### Entire repo is under version control\n\nAll operations you perform in the repo are recorded, along with a snapshot of\nthe repo state after the operation. This means that you can easily revert to an\nearlier repo state, or to simply undo a particular operation (which does not\nnecessarily have to be the most recent operation).\n\n<img src=\"demos/operation_log.png\" />\n\n### Conflicts can be recorded in commits\n\nIf an operation results in [conflicts](docs/glossary.md#conflict), information\nabout those conflicts will be recorded in the commit(s). The operation will\nsucceed. You can then resolve the conflicts later. One consequence of this\ndesign is that there's no need to continue interrupted operations. Instead, you\nget a single workflow for resolving conflicts, regardless of which command\ncaused them. This design also lets Jujutsu rebase merge commits correctly\n(unlike both Git and Mercurial).\n\nBasic conflict resolution:\n\n<img src=\"demos/resolve_conflicts.png\" />\n\nJuggling conflicts:\n\n<img src=\"demos/juggle_conflicts.png\" />\n\n### Automatic rebase\n\nWhenever you modify a commit, any descendants of the old commit will be rebased\nonto the new commit. Thanks to the conflict design described above, that can be\ndone even if there are conflicts. Branches pointing to rebased commits will be\nupdated. So will the working copy if it points to a rebased commit.\n\n### Comprehensive support for rewriting history\n\nBesides the usual rebase command, there's `jj describe` for editing the\ndescription (commit message) of an arbitrary commit. There's also `jj diffedit`,\nwhich lets you edit the changes in a commit without checking it out. To split\na commit into two, use `jj split`. You can even move part of the changes in a\ncommit to any other commit using `jj move`.\n\n## Status\n\nThe tool is quite feature-complete, but some important features like (the\nequivalent of) `git blame` are not yet supported. There\nare also several performance bugs. It's also likely that workflows and setups\ndifferent from what the core developers use are not well supported.\n\nI (Martin von Zweigbergk) have almost exclusively used `jj` to develop the\nproject itself since early January 2021. I haven't had to re-clone from source\n(I don't think I've even had to restore from backup).\n\nThere *will* be changes to workflows and backward-incompatible changes to the\non-disk formats before version 1.0.0. Even the binary's name may change (i.e.\naway from `jj`). For any format changes, we'll try to implement transparent\nupgrades (as we've done with recent changes), or provide upgrade commands or\nscripts if requested.\n\n## Installation\n\nSee below for how to build from source. There are also\n[pre-built binaries](https://github.com/martinvonz/jj/releases) for Windows,\nMac, or Linux (musl).\n\n### Linux\n\nOn most distributions, you'll need to build from source using `cargo` directly.\n\n#### Build using `cargo`\n\nFirst make sure that you have the `libssl-dev`, `openssl`, and `pkg-config`\npackages installed by running something like this:\n\n```shell script\nsudo apt-get install libssl-dev openssl pkg-config\n```\n\nNow run:\n\n```shell script\ncargo install --git https://github.com/martinvonz/jj.git --locked --bin jj jj-cli\n```\n\n#### Nix OS\n\nIf you're on Nix OS you can use the flake for this repository.\nFor example, if you want to run `jj` loaded from the flake, use:\n\n```shell script\nnix run 'github:martinvonz/jj'\n```\n\nYou can also add this flake url to your system input flakes. Or you can\ninstall the flake to your user profile:\n\n```shell script\nnix profile install 'github:martinvonz/jj'\n```\n\n#### Homebrew\n\nIf you use linuxbrew, you can run:\n\n```shell script\nbrew install jj\n```\n\n### Mac\n\n#### Homebrew\n\nIf you use Homebrew, you can run:\n\n```shell script\nbrew install jj\n```\n\n#### MacPorts\n\nYou can also install `jj` via [MacPorts](https://www.macports.org) (as\nthe `jujutsu` port):\n\n```shell script\nsudo port install jujutsu\n```\n\n([port page](https://ports.macports.org/port/jujutsu/))\n\n#### From Source\n\nYou may need to run some or all of these:\n\n```shell script\nxcode-select --install\nbrew install openssl\nbrew install pkg-config\nexport PKG_CONFIG_PATH=\"$(brew --prefix)/opt/openssl@3/lib/pkgconfig\"\n```\n\nNow run:\n\n```shell script\ncargo install --git https://github.com/martinvonz/jj.git --locked --bin jj jj-cli\n```\n\n### Windows\n\nRun:\n\n```shell script\ncargo install --git https://github.com/martinvonz/jj.git --locked --bin jj jj-cli --features vendored-openssl\n```\n\n## Initial configuration\n\nYou may want to configure your name and email so commits are made in your name.\n\n```shell script\n$ jj config set --user user.name \"Martin von Zweigbergk\"\n$ jj config set --user user.email \"martinvonz@google.com\"\n```\n\n## Command-line completion\n\nTo set up command-line completion, source the output of\n`jj util completion --bash/--zsh/--fish` (called `jj debug completion` in\njj <= 0.7.0). Exactly how to source it depends on your shell.\n\n### Bash\n\n```shell script\nsource <(jj util completion)  # --bash is the default\n```\n\nOr, with jj <= 0.7.0:\n\n```shell script\nsource <(jj debug completion)  # --bash is the default\n```\n\n### Zsh\n\n```shell script\nautoload -U compinit\ncompinit\nsource <(jj util completion --zsh)\n```\n\nOr, with jj <= 0.7.0:\n\n```shell script\nautoload -U compinit\ncompinit\nsource <(jj debug completion --zsh)\n```\n\n### Fish\n\n```shell script\njj util completion --fish | source\n```\n\nOr, with jj <= 0.7.0:\n\n```shell script\njj debug completion --fish | source\n```\n\n### Xonsh\n\n```shell script\nsource-bash $(jj util completion)\n```\n\nOr, with jj <= 0.7.0:\n\n```shell script\nsource-bash $(jj debug completion)\n```\n\n## Getting started\n\nThe best way to get started is probably to go through\n[the tutorial](docs/tutorial.md). Also see the\n[Git comparison](docs/git-comparison.md), which includes a table of\n`jj` vs. `git` commands.\n\nAs you become more familiar with Jujutsu, the [FAQ](docs/FAQ.md) may help.\n\n## Related work\n\nThere are several tools trying to solve similar problems as Jujutsu. See\n[related work](docs/related-work.md) for details."
}
