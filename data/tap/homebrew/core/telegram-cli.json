{
  "name": "telegram-cli",
  "full_name": "telegram-cli",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Command-line interface for Telegram",
  "license": "GPL-2.0",
  "homepage": "https://github.com/vysheng/tg",
  "versions": {
    "stable": "1.3.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/vysheng/tg.git",
      "tag": "1.3.1",
      "revision": "5935c97ed05b90015418b5208b7beeca15a6043c",
      "checksum": null
    },
    "head": {
      "url": "https://github.com/vysheng/tg.git",
      "branch": "master"
    }
  },
  "revision": 4,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_monterey": {
          "cellar": "/opt/homebrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/telegram-cli/blobs/sha256:2a2821cb318c0270c4a51154c662257262e956e46621dc908f78448981c2284a",
          "sha256": "2a2821cb318c0270c4a51154c662257262e956e46621dc908f78448981c2284a"
        },
        "arm64_big_sur": {
          "cellar": "/opt/homebrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/telegram-cli/blobs/sha256:335e874e6767796259265d4d62d144b599c37f7d5e98a54c36903e0733b50ce3",
          "sha256": "335e874e6767796259265d4d62d144b599c37f7d5e98a54c36903e0733b50ce3"
        },
        "monterey": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/telegram-cli/blobs/sha256:f70222afc6e527354cd71857668550130d8fb2de2fb08ace0127db745f69d87a",
          "sha256": "f70222afc6e527354cd71857668550130d8fb2de2fb08ace0127db745f69d87a"
        },
        "big_sur": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/telegram-cli/blobs/sha256:a2cf1d0764a462e736640449bb3ca11522ec0c38a4dfb2e54ff3ccc3556f7ff9",
          "sha256": "a2cf1d0764a462e736640449bb3ca11522ec0c38a4dfb2e54ff3ccc3556f7ff9"
        },
        "catalina": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/telegram-cli/blobs/sha256:4c1a9d233c3b46d75badb6e89e007ff9763e55071474ce11d0e109e7ee24aefe",
          "sha256": "4c1a9d233c3b46d75badb6e89e007ff9763e55071474ce11d0e109e7ee24aefe"
        },
        "mojave": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/telegram-cli/blobs/sha256:da9d09f1f4a317ed14c97e67fc2def18c4cd728a7023ab80424a8d548437ee74",
          "sha256": "da9d09f1f4a317ed14c97e67fc2def18c4cd728a7023ab80424a8d548437ee74"
        },
        "high_sierra": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/telegram-cli/blobs/sha256:410b56cc04620c7a1f495b500b41fa61339cc68444c1c65939bb4fb0c4cc96ef",
          "sha256": "410b56cc04620c7a1f495b500b41fa61339cc68444c1c65939bb4fb0c4cc96ef"
        },
        "x86_64_linux": {
          "cellar": "/home/linuxbrew/.linuxbrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/telegram-cli/blobs/sha256:a8e2ef70303824cf404b4d481ac67194c8240611aafcef592bec5311f36d7d08",
          "sha256": "a8e2ef70303824cf404b4d481ac67194c8240611aafcef592bec5311f36d7d08"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "pkg-config"
  ],
  "dependencies": [
    "jansson",
    "libconfig",
    "libevent",
    "openssl@1.1",
    "readline"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "zlib"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": true,
  "disable_date": "2022-07-31",
  "disable_reason": "unmaintained",
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/telegram-cli.rb",
  "ruby_source_checksum": {
    "sha256": "60a6e9550d0890bd9a05344ab911a3e7e8d5f855d050b4a55b3cdd5504f2a815"
  },
  "date_added": "2017-02-14T08:13:27+00:00",
  "readme": "## Telegram messenger CLI [![Build Status](https://travis-ci.org/vysheng/tg.png)](https://travis-ci.org/vysheng/tg)\n\nCommand-line interface for [Telegram](http://telegram.org). Uses readline interface.\n\n### API, Protocol documentation\n\nDocumentation for Telegram API is available here: http://core.telegram.org/api\n\nDocumentation for MTproto protocol is available here: http://core.telegram.org/mtproto\n\n### Upgrading to version 1.0\n\nFirst of all, the binary is now in ./bin folder and is named telegram-cli. So be careful, not to use old binary.\n\nSecond, config folder is now ${HOME}/.telegram-cli\n\nThird, database is not compatible with older versions, so you'll have to login again.\n\nFourth, in peer_name '#' are substitued to '@'. (Not applied to appending of '#%d' in case of two peers having same name).\n\n### Installation\n\nClone GitHub Repository\n\n     git clone --recursive https://github.com/vysheng/tg.git && cd tg\n\n### Python Support\n\nPython support is currently limited to Python 2.7 or Python 3.1+. Other versions may work but are not tested.\n\n#### Linux and BSDs\n\nInstall libs: readline, openssl and (if you want to use config) libconfig, liblua, python and libjansson.\nIf you do not want to use them pass options --disable-libconfig, --disable-liblua, --disable-python and --disable-json respectively.\n\nOn Ubuntu/Debian use: \n\n     sudo apt-get install libreadline-dev libconfig-dev libssl-dev lua5.2 liblua5.2-dev libevent-dev libjansson-dev libpython-dev make \n\nOn gentoo:\n\n     sudo emerge -av sys-libs/readline dev-libs/libconfig dev-libs/openssl dev-lang/lua dev-libs/libevent dev-libs/jansson dev-lang/python\n\nOn Fedora:\n\n     sudo dnf install lua-devel openssl-devel libconfig-devel readline-devel libevent-devel libjansson-devel python-devel\n\nOn Archlinux:\n\n     yaourt -S telegram-cli-git\n\nOn FreeBSD:\n\n     pkg install libconfig libexecinfo lua52 python\n\nOn OpenBSD:\n\n     pkg_add libconfig libexecinfo lua python\n\nOn openSUSE:\n\n     sudo zypper in lua-devel libconfig-devel readline-devel libevent-devel libjansson-devel python-devel libopenssl-devel\n\nThen,\n\n     ./configure\n     make\n\n#### Other methods to install on linux\n\nOn Gentoo: use ebuild provided.\n\nOn Arch: https://aur.archlinux.org/packages/telegram-cli-git\n\n#### Mac OS X\n\nThe client depends on [readline library](http://cnswww.cns.cwru.edu/php/chet/readline/rltop.html) and [libconfig](http://www.hyperrealm.com/libconfig/), which are not included in OS X by default. You have to install these libraries manually.\n\nIf using [Homebrew](http://brew.sh/):\n\n     brew install libconfig readline lua python libevent jansson\n     export CFLAGS=\"-I/usr/local/include -I/usr/local/Cellar/readline/6.3.8/include\"\n     export LDFLAGS=\"-L/usr/local/lib -L/usr/local/Cellar/readline/6.3.8/lib\"\n     ./configure && make\n\nThanks to [@jfontan](https://github.com/vysheng/tg/issues/3#issuecomment-28293731) for this solution.\n\nIf using [MacPorts](https://www.macports.org):\n     \n     sudo port install libconfig-hr\n     sudo port install readline\n     sudo port install lua51\n     sudo port install python34\n     sudo port install libevent\n     export CFLAGS=\"-I/usr/local/include -I/opt/local/include -I/opt/local/include/lua-5.1\"\n     export LDFLAGS=\"-L/usr/local/lib -L/opt/local/lib -L/opt/local/lib/lua-5.1\"\n     ./configure && make\n\nInstall these ports:\n\n* devel/libconfig\n* devel/libexecinfo\n* lang/lua52\n\nThen build:\n\n     env CC=clang CFLAGS=-I/usr/local/include LDFLAGS=-L/usr/local/lib LUA=/usr/local/bin/lua52 LUA_INCLUDE=-I/usr/local/include/lua52 LUA_LIB=-llua-5.2 ./configure\n     make\n\n#### Other UNIX\n\nIf you manage to launch it on other UNIX, please let me know.\n\n### Contacts \nIf you would like to ask a question, you can write to my telegram or to the github (or both). To contact me via telegram, you should use import_card method with argument 000653bf:0738ca5d:5521fbac:29246815:a27d0cda\n\n\n### Usage\n\n    bin/telegram-cli -k <public-server-key>\n    \nBy default, the public key is stored in tg-server.pub in the same folder or in /etc/telegram-cli/server.pub. If not, specify where to find it:\n\n    bin/telegram-cli -k tg-server.pub\n\nClient support TAB completion and command history.\n\nPeer refers to the name of the contact or dialog and can be accessed by TAB completion.\nFor user contacts peer name is Name <underscore> Lastname with all spaces changed to underscores.\nFor chats it is it's title with all spaces changed to underscores\nFor encrypted chats it is <Exсlamation mark> <underscore> Name <underscore> Lastname with all spaces changed to underscores. \n\nIf two or more peers have same name, <sharp>number is appended to the name. (for example A_B, A_B#1, A_B#2 and so on)\n  \n### Supported commands\n\n#### Messaging\n\n* **msg** \\<peer\\> Text - sends message to this peer\n* **fwd** \\<user\\> \\<msg-seqno\\> - forward message to user. You can see message numbers starting client with -N\n* **chat_with_peer** \\<peer\\> starts one on one chat session with this peer. /exit or /quit to end this mode.\n* **add_contact** \\<phone-number\\> \\<first-name\\> \\<last-name\\> - tries to add contact to contact-list by phone\n* **rename_contact** \\<user\\> \\<first-name\\> \\<last-name\\> - tries to rename contact. If you have another device it will be a fight\n* **mark_read** \\<peer\\> - mark read all received messages with peer\n* **delete_msg** \\<msg-seqno\\> - deletes message (not completly, though)\n* **restore_msg** \\<msg-seqno\\> - restores delete message. Impossible for secret chats. Only possible short time (one hour, I think) after deletion\n\n#### Multimedia\n\n* **send_photo** \\<peer\\> \\<photo-file-name\\> - sends photo to peer\n* **send_video** \\<peer\\> \\<video-file-name\\> - sends video to peer\n* **send_text** \\<peer\\> \\<text-file-name> - sends text file as plain messages\n* **load_photo**/load_video/load_video_thumb/load_audio/load_document/load_document_thumb \\<msg-seqno\\> - loads photo/video/audio/document to download dir\n* **view_photo**/view_video/view_video_thumb/view_audio/view_document/view_document_thumb \\<msg-seqno\\> - loads photo/video to download dir and starts system default viewer\n* **fwd_media** \\<msg-seqno\\> send media in your message. Use this to prevent sharing info about author of media (though, it is possible to determine user_id from media itself, it is not possible get access_hash of this user)\n* **set_profile_photo** \\<photo-file-name\\> - sets userpic. Photo should be square, or server will cut biggest central square part\n\n\n#### Group chat options\n\n* **chat_info** \\<chat\\> - prints info about chat\n* **chat_add_user** \\<chat\\> \\<user\\> - add user to chat\n* **chat_del_user** \\<chat\\> \\<user\\> - remove user from chat\n* **rename_chat** \\<chat\\> \\<new-name\\>\n* **create_group_chat** \\<chat topic\\> \\<user1\\> \\<user2\\> \\<user3\\> ... - creates a groupchat with users, use chat_add_user to add more users\n* **chat_set_photo** \\<chat\\> \\<photo-file-name\\> - sets group chat photo. Same limits as for profile photos.\n\n#### Search\n\n* **search** \\<peer\\> pattern - searches pattern in messages with peer\n* **global_search** pattern - searches pattern in all messages\n\n#### Secret chat\n\n* **create_secret_chat** \\<user\\> - creates secret chat with this user\n* **visualize_key** \\<secret_chat\\> - prints visualization of encryption key. You should compare it to your partner's one\n* **set_ttl** \\<secret_chat\\> \\<ttl\\> - sets ttl to secret chat. Though client does ignore it, client on other end can make use of it\n* **accept_secret_chat** \\<secret_chat\\> - manually accept secret chat (only useful when starting with -E key)\n\n#### Stats and various info\n\n* **user_info** \\<user\\> - prints info about user\n* **history** \\<peer\\> [limit] - prints history (and marks it as read). Default limit = 40\n* **dialog_list** - prints info about your dialogs\n* **contact_list** - prints info about users in your contact list\n* **suggested_contacts** - print info about contacts, you have max common friends\n* **stats** - just for debugging\n* **show_license** - prints contents of GPLv2\n* **help** - prints this help\n* **get_self** - get our user info\n\n#### Card\n* **export_card** - print your 'card' that anyone can later use to import your contact\n* **import_card** \\<card\\> - gets user by card. You can write messages to him after that.\n\n#### Other\n* **quit** - quit\n* **safe_quit** - wait for all queries to end then quit"
}
