{
  "name": "gx-go",
  "full_name": "gx-go",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Tool to use with the gx package manager for packages written in go",
  "license": "MIT",
  "homepage": "https://github.com/whyrusleeping/gx-go",
  "versions": {
    "stable": "1.9.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/whyrusleeping/gx-go/archive/v1.9.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "f3a0ee17359e0e5efab8008361da0e312ca723a0c9e165342a0306caba55a535"
    },
    "head": {
      "url": "https://github.com/whyrusleeping/gx-go.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gx-go/blobs/sha256:558cc3380d5004e4dc70927523f0900d89b11441aa75439049ef04317cde5606",
          "sha256": "558cc3380d5004e4dc70927523f0900d89b11441aa75439049ef04317cde5606"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gx-go/blobs/sha256:be5396fc6d5a6908b2a41a321dd7aa4f87d78ffb656bf54a14869fb4cb1e51d4",
          "sha256": "be5396fc6d5a6908b2a41a321dd7aa4f87d78ffb656bf54a14869fb4cb1e51d4"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gx-go/blobs/sha256:f19c6b08f918f3a5d697033421405cc1d8640251c1f35debc5c64a68638a6bf6",
          "sha256": "f19c6b08f918f3a5d697033421405cc1d8640251c1f35debc5c64a68638a6bf6"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gx-go/blobs/sha256:4f9b488b986e19ba22109848419684a6f933abb46881a957c90d07cab701201e",
          "sha256": "4f9b488b986e19ba22109848419684a6f933abb46881a957c90d07cab701201e"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gx-go/blobs/sha256:ce75606c2944f263c2cf7b83930c1cd3ce57fd6dce50be5ba37b8d074e86c8eb",
          "sha256": "ce75606c2944f263c2cf7b83930c1cd3ce57fd6dce50be5ba37b8d074e86c8eb"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gx-go/blobs/sha256:5dc1b0036572c7bd56d60b294608b151f1740018d90b94034072d8a97f3c0368",
          "sha256": "5dc1b0036572c7bd56d60b294608b151f1740018d90b94034072d8a97f3c0368"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gx-go/blobs/sha256:66fa3b40ddb24acbb713379c90df9b398baafd51aa825d5ba28d5fc7781ad987",
          "sha256": "66fa3b40ddb24acbb713379c90df9b398baafd51aa825d5ba28d5fc7781ad987"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gx-go/blobs/sha256:8c86c8465cde5c6189e67f2d3b758604ef579d064f398cd48eff6ab6ce092bdb",
          "sha256": "8c86c8465cde5c6189e67f2d3b758604ef579d064f398cd48eff6ab6ce092bdb"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gx-go/blobs/sha256:57eb4c948ce99ebca79f938539c1b5e096aef6c16554c30f5744b4e1fc93016d",
          "sha256": "57eb4c948ce99ebca79f938539c1b5e096aef6c16554c30f5744b4e1fc93016d"
        },
        "sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gx-go/blobs/sha256:7eb7a89b575a1cb12464f1a0a4d14c5983333a79fb6e4fbb9c5b5240e540020d",
          "sha256": "7eb7a89b575a1cb12464f1a0a4d14c5983333a79fb6e4fbb9c5b5240e540020d"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gx-go/blobs/sha256:692e3553ebcc2909c27897f5fc6c74a7937af1e8cee2819daab8c6573e0bf8b5",
          "sha256": "692e3553ebcc2909c27897f5fc6c74a7937af1e8cee2819daab8c6573e0bf8b5"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": true,
  "deprecation_date": "2023-06-27",
  "deprecation_reason": "unmaintained",
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/gx-go.rb",
  "ruby_source_checksum": {
    "sha256": "7c7ad7b34c95170366e8afad3fc5e9de27ed83ca32a10b9f7eff7ab5921ea4c3"
  },
  "date_added": "2016-04-17T19:23:10+01:00",
  "readme": "# gx-go\n\nA subtool for the gx package manager for packages written in go.\n\n## Usage:\n```\nNAME:\n   gx-go - gx extensions for golang\n\nUSAGE:\n   gx-go [global options] command [command options] [arguments...]\n\nVERSION:\n   1.8.0\n\nAUTHOR:\n   whyrusleeping\n\nCOMMANDS:\n     dep-map      prints out a json dep map for usage by 'import --map'\n     hook         go specific hooks to be called by the gx tool\n     import       import a go package and all its depencies into gx\n     path         prints the import path of the current package within GOPATH\n     rewrite, rw  temporary hack to evade causality\n     uw\n     update       update a packages imports to a new path\n     dvcs-deps    display all dvcs deps\n     link         Symlink packages to their dvcsimport repos, for local development.\n     devcopy      Create a development copy of the given package\n     get          gx-ified `go get`\n     help, h      Shows a list of commands or help for one command\n\nGLOBAL OPTIONS:\n   --verbose      turn on verbose output\n   --help, -h     show help\n   --version, -v  print the version\n```\n\n## Intro\nUsing gx as a go vendoring tool and package manager is (or at least, should be) a\nvery simple process.\n\n### Creating a new package\nIn the directory of your go package, just run:\n```\ngx init --lang=go\n```\n\nAnd gx will create a new `package.json` for you with some basic information\nfilled out. From there, all you *have* to do is run `gx publish` (ensure you\nhave a running ipfs daemon) and gx will give you a package hash. That works\nfine for the base case, but to work even more nicely with go, we recommend\nsetting the import path of your package in your `package.json`, like so:\n\npackage.json\n```json\n{\n\t...\n\t\"gx\":{\n\t\t\"dvcsimport\":\"github.com/whyrusleeping/gx-go\"\n\t}\n}\n```\n\nIf you're initializing a new gx package from the appropriate location within\nyour `GOPATH`, `gx-go` will attempt to pre-fill the dvcsimport field for you\nautomatically.\n\n### Importing an existing package\nImporting an existing go package from gx is easy, just grab its hash from\nsomewhere, and run:\n```\ngx import <thathash>\n```\n\nIf the package you are importing has its dvcs import path set as shown above,\ngx will ask if you want to rewrite your import paths with the new gx path.\nIf you say no to this (as is the default), you can rewrite the paths at any time\nby running `gx-go rewrite`.\n\n### Some notes on publishing\nIt is recommended that when you publish, your import paths are *not* rewritten.\nThe gx-go post install hook will fix that after the install, but for 'same package'\nimports, it works best to have gx rewrite things after the fact (Its also sometimes\nnicer for development). You can change paths back from their gx paths with:\n```\ngx-go rewrite --undo\n```\n\nA few other notes:\n\n- When publishing, make sure that you don't have any duplicate dependencies\n  (different hash versions of the same package). You can check this with `gx\n  deps dupes`\n- Make sure that you arent missing any dependencies, With your dependencies\n  written in gx form, run `gx-go dvcs-deps`. If it outputs any package that is\n  not the package you are publishing, you should probably look at importing\n  that package to gx as well.\n- Make sure the tests pass with gx rewritten deps. `gx test` will write gx deps\n  and run `go test` for you.\n\n## NOTE:\nIt is highly recommended that you set your `GOPATH` to a temporary directory when running import.\nThis ensures that your current go packages are not affected, and also that fresh versions of\nthe packages in question are pulled down."
}
