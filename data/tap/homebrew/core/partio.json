{
  "name": "partio",
  "full_name": "partio",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Particle library for 3D graphics",
  "license": "BSD-3-Clause",
  "homepage": "https://github.com/wdas/partio",
  "versions": {
    "stable": "1.17.1",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/wdas/partio/archive/v1.17.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "5d00fbfc55817acb310bcaf61212a78b2c602e08b839060dfee69570b4b82464"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/partio/blobs/sha256:935ec96e13375384ce6b263dbf4acf0f918b2a24ce5144ebf87c668061ff95ca",
          "sha256": "935ec96e13375384ce6b263dbf4acf0f918b2a24ce5144ebf87c668061ff95ca"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/partio/blobs/sha256:f98279b3c17a945d3028122d6664521f59b063a139ef6c1feb983b959abfc8f1",
          "sha256": "f98279b3c17a945d3028122d6664521f59b063a139ef6c1feb983b959abfc8f1"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/partio/blobs/sha256:2a4e859dfd6003ac3a7394f58628d20313e359383b74f4ee19a6139edcfd743b",
          "sha256": "2a4e859dfd6003ac3a7394f58628d20313e359383b74f4ee19a6139edcfd743b"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/partio/blobs/sha256:9f253e0b3b64df16adec10d8e8114043ed9beb885609f4cb012facfb7d12932d",
          "sha256": "9f253e0b3b64df16adec10d8e8114043ed9beb885609f4cb012facfb7d12932d"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/partio/blobs/sha256:d8dfa662b7ebcba6544e5f57cd660eaefd4b7c53c00ac51e673a32b76afcece8",
          "sha256": "d8dfa662b7ebcba6544e5f57cd660eaefd4b7c53c00ac51e673a32b76afcece8"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/partio/blobs/sha256:e381afdcd2f65b39010690255b077479de6f43e3463eb139a2532c92d1b8440c",
          "sha256": "e381afdcd2f65b39010690255b077479de6f43e3463eb139a2532c92d1b8440c"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/partio/blobs/sha256:3578533db38009bf01e018fc2e691125d3396e0edcf142c4a4ea0cc311c2049f",
          "sha256": "3578533db38009bf01e018fc2e691125d3396e0edcf142c4a4ea0cc311c2049f"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake",
    "doxygen"
  ],
  "dependencies": [
    "python@3.11",
    "freeglut",
    "mesa",
    "mesa-glu"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/partio.rb",
  "ruby_source_checksum": {
    "sha256": "a2473bb902bf4ca48a1e289943fc994e6888d15c0ddcf83c41525694188d7624"
  },
  "date_added": "2013-01-14T21:59:24-08:00",
  "readme": "# [Partio](https://wdas.github.io/partio) - A library for particle IO and manipulation\n\nThis is the initial source code release of partio a tool we used for particle\nreading/writing. It started out as an abstraction for the commonalities in\nparticle models (i.e. accessing many attributes associated with an index or\nentity).\n\n# Super impatient building guide\n\n        # Install Location ~ adjust accordingly\n        prefix=$HOME/local\n        git clone https://github.com/wdas/partio.git\n        cd partio\n        make -j prefix=$prefix install\n\n# Getting Started\n\nCMake is used to build the project, but we provide a top-level Makefile\nfor convenience that takes care of all the steps.\n\nSee the Makefile for the user-tweakable variables and corresponding\ncmake options.\n\nThe typical usage for an installation into `/usr/local`\nwith a temporary staging directory of `/tmp/stage` is:\n\n    make DESTDIR=/tmp/stage prefix=/usr/local install\n\n# Source code overview\n\n        src/\n           lib/      Library code (public API in root)\n           lib/core  Core library (KDtree traversal, data representations)\n           lib/io    Input/Output (Different file formats)\n           py/       SWIG based python bindings\n           doc/      Doxygen documentation and (the start of) a manual\n           tests/    Start of regression tests (I need more)\n           tools/    Useful tools\n                     partconvert <input format> <output format>\n                     partinfo <particle file>\n                     partview <particle file>\n\n## Class Model\n\nThe goal of the library is to abstract the particle interface from the data\nrepresentation. That is why Partio represents particles using three classes that\ninherit and provide more functionality\n\nParticlesInfo - Information about # of particles and attributes\nParticlesData - Read only access to all particle data\nParticlesDataMutable - Read/write access to all particle data\n\nThe functions used to get particle access are these:\n\n        readHeaders()\n           returns ParticlesInfo\n           reads only the minimum data necessary to get number of particles and\n           attributes\n\n        readCached()\n           returns ParticlesData\n           For multiple users in different threads using the same particle file\n           ParticlesData\n\n        create() and read()\n           returns ParticlesDataMutable\n           allows read/write access\n\nBehind the scenes you could implement these classes however you like. Headers\nonly representation is called core/ParticleHeader.{h,cpp}. Simple\nnon-interleaved attributes is core/ParticleSimple.{h,cpp}.\n\n## Attribute Data Model\n\nAll particles have the same data attributes. They have the model that they are\nof three basic types with a count of how many scalar values they have.\n\n        VECTOR[3]\n        FLOAT[d]\n        INT[d]\n\n        VECTOR[3] and FLOAT[3] have the same data representations.\n        VECTOR[4] is invalid however FLOAT[4] is valid as is FLOAT[1...infinity]\n\nThis seems to encompass the most common file formats for particles\n\n## Iterating\n\nThere are multiple ways to access data in the API. Here are\nsome tips\n\n- Use SIMD functions when possible prefer dataAsFloat(),data(arrayOfIndices) as\n  opposed to data(int singleIndex) which accesses multiple pieces of data at\n  once\n\n- Cache ParticleAttributes for quick access instead of calling attributeInfo()\n  over a loop of particles\n\n- Use iterators to do linear operations over all particles They are much more\n  optimized than both data() and the dataAsFloat or\n\n## Backends\n\nBehind the scenes there are SimpleParticles, ParticleHeaders, and\nSimpleParticlesInterleaved. In the future I would like to write a disk-based\ncached back end that can dynamically only load the data that is necessary.\ncreate(), read() and readCached could be augmented to create different\nstructures in these cases.\n\n## Readers/Writers\n\nNew readers and writers can be added in the io/ directory. You simply need to\nimplement the interface ParticlesInfo, ParticlesData and ParticlesDataMutable\n(or as many as you need). Editing the io/readers.h to add prototypes and\nio/ParticleIO.cpp to add file extension bindings should be easy.\n\n## Building the python Package for PyPi\n\nTo the partio for python and publish it to we have to build it using docker and upload it to PyPi.\n\n```bash\n# build the docker\n  docker build -t partio:latest .\n  # run the build\n  docker run --rm -v $(pwd):/io partio:latest\n  # use twine to upload to pypi\n  twine upload dist/*\n```\n\n- Andrew Selle, Walt Disney Animation Studios"
}
