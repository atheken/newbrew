{
  "name": "flash",
  "full_name": "flash",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Command-line script to flash SD card images of any kind",
  "license": "MIT",
  "homepage": "https://github.com/hypriot/flash",
  "versions": {
    "stable": "2.7.2",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/hypriot/flash/releases/download/2.7.2/flash",
      "tag": null,
      "revision": null,
      "checksum": "571d9e6424b275859a9273029a2321245888ab201dbae1a3ec57a6ef708adce1"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/flash/blobs/sha256:7ba28ca5b0372393c667b70b7841d4b9b6f587e9ce0c0c1a6bf9bb67dddec577",
          "sha256": "7ba28ca5b0372393c667b70b7841d4b9b6f587e9ce0c0c1a6bf9bb67dddec577"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/flash.rb",
  "ruby_source_checksum": {
    "sha256": "b91550e385e627fdb69a95a5e3e35289af93e0f012f95c7904b2cb8d74cf0fff"
  },
  "date_added": "2020-04-16T08:20:20+00:00",
  "readme": "# flash\n\n[![CircleCI](https://circleci.com/gh/hypriot/flash.svg?style=svg)](https://circleci.com/gh/hypriot/flash)\n[![Build Status](https://travis-ci.org/hypriot/flash.svg?branch=master)](https://travis-ci.org/hypriot/flash)\n[![Release](https://img.shields.io/github/release/hypriot/flash.svg)](https://github.com/hypriot/flash/releases)\n[![Stars](\thttps://img.shields.io/github/stars/hypriot/flash.svg?style=social&label=Stars)](https://github.com/hypriot/flash#installation)\n\nCommand line script to flash SD card images of any kind.\n\nNote that for some devices (e.g. Raspberry Pi), at the end of the flashing process the tool tries to customize the SD card e.g. it configures a hostname or WiFi. And with a cloud-init enabled image you can do much more like adding users, SSH keys etc.\n\nThe typical workflow looks like this:\n\n[![asciicast](https://asciinema.org/a/4k72pounxxybtix84ecl4b69w.png)](https://asciinema.org/a/4k72pounxxybtix84ecl4b69w)\n\n1. Run `flash https://github.com/hypriot/image-builder-rpi/releases/download/v1.12.0/hypriotos-rpi-v1.12.0.img.zip`\n2. Insert SD card to your notebook\n3. Press RETURN\n4. Eject SD card and insert it to your Raspberry Pi - done!\n\nThis script can\n\n* download a compressed SD card from the internet or from S3\n* use a local SD card image, either compressed or uncompressed\n* wait until a SD card is plugged in\n* search for a SD card plugged into your Computer\n* show progress bar while flashing (if `pv` is installed)\n* copy an optional cloud-init `user-data` and `meta-data` file into the boot partition of the SD image\n* copy an optional `config.txt` file into the boot partition of the SD image (eg. to enable onboard WiFi)\n* copy an optional `device-init.yaml` or `occidentalis.txt` file into the boot partition of the SD image (for older HypriotOS versions)\n* copy an optional custom file into the boot partition of the SD image\n* optional set the hostname of this SD image\n* optional set the WiFi settings as well\n* play a little sound after flashing\n* unplugs the SD card\n\nAt the moment only Mac OS X and Linux is supported.\n\n## Installation\n\nDownload the appropriate version for Linux or Mac with this command\n\n```bash\ncurl -LO https://github.com/hypriot/flash/releases/download/2.7.2/flash\nchmod +x flash\nsudo mv flash /usr/local/bin/flash\n```\n\n### Install Dependencies\n\nThe `flash` script needs optional tools\n\n* `curl` - if you want to flash directly with an HTTP URL\n* `aws` - if you want to flash directly from an AWS S3 bucket\n* `pv` - to see a progress bar while flashing with the `dd` command\n* `unzip` - to extract zip files.\n* `hdparm` - to run the program\n\n#### Mac\n\n```bash\nbrew install pv\nbrew install awscli\n```\n\n#### Linux (Debian/Ubuntu)\n\n```bash\nsudo apt-get install -y pv curl python-pip unzip hdparm\nsudo pip install awscli\n```\n\n## Usage\n\n```bash\n$ flash --help\nusage: flash [options] [name-of-rpi.img]\n\nFlash a local or remote Raspberry Pi SD card image.\n\nOPTIONS:\n   --help|-h      Show this message\n   --bootconf|-C  Copy this config file to /boot/config.txt\n   --config|-c    Copy this config file to /boot/device-init.yaml (or occidentalis.txt)\n   --hostname|-n  Set hostname for this SD image\n   --ssid|-s      Set WiFi SSID for this SD image\n   --password|-p  Set WiFI password for this SD image\n   --clusterlab|-l Start Cluster-Lab on boot: true or false\n   --device|-d    Card device to flash to (e.g. /dev/disk2)\n   --force|-f     Force flash without security prompt (for automation)\n   --userdata|-u  Copy this cloud-init config file to /boot/user-data\n   --metadata|-m  Copy this cloud-init config file to /boot/meta-data\n   --file|-F      Copy this custom file to /boot\n```\n\n## Configuration\n\nThe strength of the flash tool is that it can insert some configuration files that gives you the best first boot experience to customize the hostname, WiFi and even user logins and SSH keys automatically.\n\n### cloud-init\n\nWith HypriotOS v1.7.0 and higher the options `--userdata` and `--metadata` can be used to copy both cloud-init config files into the FAT partition.\n\nThis is an example how to create our default user with a password.\n\n```yaml\n#cloud-config\n# vim: syntax=yaml\n#\nhostname: black-pearl\nmanage_etc_hosts: true\n\nusers:\n  - name: pirate\n    gecos: \"Hypriot Pirate\"\n    sudo: ALL=(ALL) NOPASSWD:ALL\n    shell: /bin/bash\n    groups: users,docker,video\n    plain_text_passwd: hypriot\n    lock_passwd: false\n    ssh_pwauth: true\n    chpasswd: { expire: false }\n\npackage_upgrade: false\n```\n\nPlease have a look at the [`sample`](sample/) folder, our guest blogpost [Bootstrapping a Cloud with Cloud-Init and HypriotOS](https://blog.hypriot.com/post/cloud-init-cloud-on-hypriot-x64/) or at the [cloud-init documentation](http://cloudinit.readthedocs.io/en/0.7.9/)\nhow to do more things like using SSH keys, running additional commands etc.\n\n### config.txt\n\nThe option `--bootconf` can be used to copy a `config.txt` into the SD image\nbefore it is unplugged.\n\nWith this option it is possible to change some memory, camera, video settings\netc. See the [config.txt documentation](https://www.raspberrypi.org/documentation/configuration/config-txt/README.md)\nat raspberrypi.org for more details.\n\nThe boot config file config.txt has name/value pairs such as:\n\n```bash\nmax_usb_current=1\nhdmi_force_hotplug=1\n```\n\n### device-init.yaml\n\nFor HypriotOS older than v1.7.0 the option `--config` can be used to copy a\n`device-init.yaml` into the SD image before it is unplugged. This YAML file can\nbe read by newer HyperiotOS SD images.\n\nThe config file device-init.yaml should look like\n\n```yaml\nhostname: black-pearl\nwifi:\n  interfaces:\n    wlan0:\n      ssid: \"MyNetwork\"\n      password: \"secret_password\"\n```\n\nIf you don't want to set any wifi settings, comment out or remove the wlan0, ssid and password.\n\n## fake-hwclock.data\n\nHypriotOS 1.12.0 and higher has the `/etc/fake-hwclock.data` file symlinked to the boot partition. Flash tool updates this timestamp with the current time (UTC timezone). This fixes problems running commands that communicate with the internet with a wrong initial date on first boot.\n\n## Use cases\n\n### Flash a compressed SD image from the internet\n\n```bash\nflash https://github.com/hypriot/image-builder-rpi/releases/download/v1.12.0/hypriotos-rpi-v1.12.0.img.zip\n```\n\n### Flash and change the hostname\n\nThis works only for SD card images that already have `occi` installed.\n\n```bash\nflash --hostname mypi hypriot.img\n```\n\nThen unplug the SD card from your computer, plug it into your Pi and boot your\nPi. After a while the Pi can be found via Bonjour/avahi and you can log in with\n\n```bash\nssh pi@mypi.local\n```\n\n### Onboard WiFi\n\nThe options `--userdata` and `--bootconf` must be used to disable UART and enable onboard WiFi for Raspberry Pi 3 and Pi 0. For external WiFi sticks you do not need to specify the `-bootconf` option.\n\n```\nflash --userdata sample/wlan-user-data.yaml --bootconf sample/no-uart-config.txt hypriotos-rpi-v1.12.0.img\n```\n\n### Automating flash\n\nFor non-interactive usage, you can predefine the user input in the flash command with the `-d` and `-f` options:\n\n```\nflash -d /dev/mmcblk0 -f hypriotos-rpi-v1.12.0.img\n```\n\n## Development\n\nPull requests and other feedback is always welcome. The `flash` tool should fit\nour all needs and environments.\n\nTo develop the flash scripts you need either a Linux or macOS machine to test locally. On a Mac you can use Docker to run the Linux tests in a container and if you dare you can run the macOS tests directly. On a Linux machine you can not test the macOS variant directly. But in every case you can send a pull request and push code to GitHub and the CI pipeline with CircleCI (Linux) and TravisCI (macOS) will test your code for both platforms.\n\n### Local development\n\nThe flash script are checked with the [`shellcheck`](https://www.shellcheck.net) static analysis tool.\n\nThe integration tests can be run locally on macOS or Linux. We use BATS which is installed with NPM package. So you would need Node.js to setup a local development environment. As the flash script runs `dd` and some commands with `sudo` it is recommended to use the isolated test environment with Docker or run this local tests in a macOS / Linux VM.\n\n```\nnpm install\nnpm test\n```\n\n### Isolated tests with Docker\n\nIf you do not want to install all these development tools (shellcheck, bats, node) and don't trust the flash script enough, you can use Docker instead and run the shellcheck and integration tests in a much safer test environment.\n\nAll you need is Docker and `make` installed to run the following tests.\n\n#### Shellcheck\n\nThe flash script are checked with the shellcheck static analysis tool.\n\n```\nmake shellcheck\n```\n\n#### Integration tests\n\nThe flash script also have BATS integration tests. You don't have to install everything on your development machine. It should be enough to test the Linux variant in a Docker container and then run the macOS tests with TravisCI.\n\n```\nmake test\n```\n\n### Test Linux from Mac\n\nFor manual tests of the Linux version on a Mac there is a Vagrant environment. It can be used\nto investigate Linux problems when you don't have a baremetal Linux machine. With some help I found a way to spin up a\nVirtualBox Vagrant box with Ubuntu that maps the internal Apple SD card reader\ninto the VM. Thanks to [Flexshot](https://github.com/Flexshot) for the helper\nfunctions I found in [NextThingCo/CHIP-SDK#15](https://github.com/NextThingCo/CHIP-SDK/pull/15).\n\nCheck the vendor ID and product ID in \"About this Mac\" -> System Report ... ->\nCard Reader. I found the vendor ID 0x05ac and product ID 0x8406 can be found in\nthe `Vagrantfile`.\n\n```bash\nvagrant up --provider virtualbox\nvagrant ssh\ncd /vagrant\n./flash hypriotos-rpi-v1.12.0.img.zip\n```"
}
