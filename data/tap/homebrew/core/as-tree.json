{
  "name": "as-tree",
  "full_name": "as-tree",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Print a list of paths as a tree of paths",
  "license": "BlueOak-1.0.0",
  "homepage": "https://github.com/jez/as-tree",
  "versions": {
    "stable": "0.12.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/jez/as-tree/archive/0.12.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "2af03a2b200041ac5c7a20aa1cea0dcc21fb83ac9fe9a1cd63cb02adab299456"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/as-tree/blobs/sha256:f1ff59d33ae1147f903973d50d44e945b7d4ef2564d8877be6fc38b9433bafb6",
          "sha256": "f1ff59d33ae1147f903973d50d44e945b7d4ef2564d8877be6fc38b9433bafb6"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/as-tree/blobs/sha256:7ffe542490373f69918fbb37ef7e93c94a7d26e87f4be282b491816713b7d049",
          "sha256": "7ffe542490373f69918fbb37ef7e93c94a7d26e87f4be282b491816713b7d049"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/as-tree/blobs/sha256:4cbe38f0537c86b65808064608c61b8c792098177911f013f24c2470fd2fdf62",
          "sha256": "4cbe38f0537c86b65808064608c61b8c792098177911f013f24c2470fd2fdf62"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/as-tree/blobs/sha256:427e9bc1f7f6a92da07ad4284e82ab6b3d24441bac2c0f5b4850c250106622b6",
          "sha256": "427e9bc1f7f6a92da07ad4284e82ab6b3d24441bac2c0f5b4850c250106622b6"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/as-tree/blobs/sha256:adf2bb6e9bbbcc4d393462ec04b4cf9abe28bc5748f9636b0a9668b56082fb60",
          "sha256": "adf2bb6e9bbbcc4d393462ec04b4cf9abe28bc5748f9636b0a9668b56082fb60"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/as-tree/blobs/sha256:2d13c83015f82b0b39760b9087f417bc1465b4e33cc6a90061235a70e510c896",
          "sha256": "2d13c83015f82b0b39760b9087f417bc1465b4e33cc6a90061235a70e510c896"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/as-tree/blobs/sha256:5c14a2f148f036c39c7187f0da94f9c6ab52f3e9c531c5009ae5e6db68b01cc4",
          "sha256": "5c14a2f148f036c39c7187f0da94f9c6ab52f3e9c531c5009ae5e6db68b01cc4"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/as-tree/blobs/sha256:82337903e0b8ee48cd19517b4d1bd8e0b66d5c17e212a03f6e15d2b12130d85b",
          "sha256": "82337903e0b8ee48cd19517b4d1bd8e0b66d5c17e212a03f6e15d2b12130d85b"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "2706c66e8def3eeba4d9bf1adf66221c8ad70701",
  "ruby_source_path": "Formula/as-tree.rb",
  "ruby_source_checksum": {
    "sha256": "39bd406bd0de8a8bd17435d5ce631b17ef89884c61b1ab1db6eef0ee6286ac70"
  },
  "date_added": "2021-03-13T21:04:04+00:00",
  "readme": "# as-tree\n\n[![Build Status](https://travis-ci.org/jez/as-tree.svg?branch=master)](https://travis-ci.org/jez/as-tree)\n\nPrint a list of paths as a tree of paths.\n\nFor example, given:\n\n```\ndir1/foo.txt\ndir1/bar.txt\ndir2/qux.txt\n```\n\nit will print:\n\n```\n.\n├── dir1\n│   ├── foo.txt\n│   └── bar.txt\n└── dir2\n    └── qux.txt\n```\n\nThis tool is particularly useful when used with `find` or `fd` to produce such\na list of files. It's similar in spirit to `tree`, but `find` and `fd` tend to\nbe more powerful when it comes to controlling which files to list.\n\nInspired by [this feature request](https://github.com/sharkdp/fd/issues/283).\n\n## Install\n\nThere are pre-built binary releases in the Releases tab.\n\nThis project is written in Rust and builds under both Bazel and Cargo.\n\nTo install from source using Cargo:\n\n```shell\ncargo install -f --git https://github.com/jez/as-tree\n```\n\nTo install from source using Bazel:\n\n```shell\ngit clone https://github.com/jez/as-tree\ncd as-tree\nmake install\n```\n\n## Usage\n\n```\n❯ as-tree --help\nPrint a list of paths as a tree of paths.\n\nUsage:\n  as-tree [options] [<filename>]\n\nArguments:\n  <filename>        The file to read from. When omitted, reads from stdin.\n\nOptions:\n  --color (always|auto|never)\n                    Whether to colorize the output [default: auto]\n  -f                Prints the full path prefix for each file.\n  -h, --help        Print this help message\n\nExample:\n  find . -name '*.txt' | as-tree\n```\n\n## Example\n\nThis tool is particularly useful with tools like `fd` which can prune the list\nof files to print better than `tree` can alone.\n\n```\n❯ fd --exclude test | as-tree\n.\n├── LICENSE.md\n├── Makefile\n├── README.md\n├── WORKSPACE\n├── bazel\n├── main\n│   ├── BUILD\n│   └── main.cc\n├── third_party\n│   ├── BUILD\n│   ├── externals.bzl\n│   └── spdlog.BUILD\n└── tools\n    ├── BUILD\n    ├── clang.bzl\n    └── scripts\n        ├── build_compilation_db.sh\n        └── generate_compdb_targets.sh\n```\n\n## Developing\n\nRunning the tests requires Bazel. The `./bazel` shell script in this repo will\ndownload and cache a specific version of Bazel for you. From there, Bazel knows\nhow to install all the dependencies it needs to build this project (including a\nRust toolchain).\n\n```shell\n# Run the tests:\n./bazel test --test_output=errors //test\n\n# To add a test, create two files:\n#\n# - test/fixtures/foo.txt\n# - test/fixtures/foo.txt.exp\n#\n# The first file is the input to feed to `as-tree`, and the second is the\n# expected output of `as-tree` on that input\n\n# Update all the tests:\n./bazel test //test:update\n\n# When you add a new dependency, you'll need to add it with Bazel too:\ncargo install cargo-raze # (one time setup)\ncd third_party/cargo\ncargo raze\n```\n\n## TODO(jez)\n\n- rustfmt / buildifier / shellcheck in CI\n- [ ] Only use box drawing characters if the locale supports it\n  - See `man locale`, `LC_CTYPE=C tree`\n- [ ] Add a `-0` flag to support files with newlines in their name\n  - Seriously why is this allowed?"
}
