{
  "name": "pyenv",
  "full_name": "pyenv",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Python version management",
  "license": "MIT",
  "homepage": "https://github.com/pyenv/pyenv",
  "versions": {
    "stable": "2.3.23",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/pyenv/pyenv/archive/refs/tags/v2.3.23.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "c3decc7f941456ea65a516721eef0c22070010f38dd30662435456c70a151121"
    },
    "head": {
      "url": "https://github.com/pyenv/pyenv.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 1,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/pyenv/blobs/sha256:a8ddcbe1be3c6f02e52c6dc072929e1814d198fd4e2b958858656463b29024f6",
          "sha256": "a8ddcbe1be3c6f02e52c6dc072929e1814d198fd4e2b958858656463b29024f6"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/pyenv/blobs/sha256:c823efd3c147c0b7b7f40cfd4cae3993314e3171854383680e2a24790155ab06",
          "sha256": "c823efd3c147c0b7b7f40cfd4cae3993314e3171854383680e2a24790155ab06"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/pyenv/blobs/sha256:7378b859a1281c01adf4bc74f70f245de68d37110c539af4db10a16f11f6f2c2",
          "sha256": "7378b859a1281c01adf4bc74f70f245de68d37110c539af4db10a16f11f6f2c2"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/pyenv/blobs/sha256:a10b2c5f70f51511ebed58cd0cb611c3eee22e9143ec72224da6963d0c1b3443",
          "sha256": "a10b2c5f70f51511ebed58cd0cb611c3eee22e9143ec72224da6963d0c1b3443"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/pyenv/blobs/sha256:b2e9408c8652e0f4c8d2fbd09a308e7271b8f988d7ca452b7799a70ec1676d4c",
          "sha256": "b2e9408c8652e0f4c8d2fbd09a308e7271b8f988d7ca452b7799a70ec1676d4c"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/pyenv/blobs/sha256:e0929aa0b150c10dca26a3b6b8b3a74d07bb179aef750d374ece2dfd8d27863a",
          "sha256": "e0929aa0b150c10dca26a3b6b8b3a74d07bb179aef750d374ece2dfd8d27863a"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pyenv/blobs/sha256:06b54a2c6274969631b38237138245aaf8e3d6712f0caf0be2b8cc802095d713",
          "sha256": "06b54a2c6274969631b38237138245aaf8e3d6712f0caf0be2b8cc802095d713"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "autoconf",
    "openssl@3",
    "pkg-config",
    "readline"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    {
      "python": "test"
    },
    "bzip2",
    "libffi",
    "ncurses",
    "xz",
    "zlib"
  ],
  "uses_from_macos_bounds": [
    {},
    {},
    {},
    {},
    {},
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/pyenv.rb",
  "ruby_source_checksum": {
    "sha256": "8fd9fcb4411c48b3adaad4837cfd360fb4736c59b5efa181d9205b13c9510bb1"
  },
  "date_added": "2013-06-13T11:23:08+02:00",
  "readme": "# Simple Python Version Management: pyenv\n\n[![Join the chat at https://gitter.im/yyuu/pyenv](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/yyuu/pyenv?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\npyenv lets you easily switch between multiple versions of Python. It's\nsimple, unobtrusive, and follows the UNIX tradition of single-purpose\ntools that do one thing well.\n\nThis project was forked from [rbenv](https://github.com/rbenv/rbenv) and\n[ruby-build](https://github.com/rbenv/ruby-build), and modified for Python.\n\n![Terminal output example](/terminal_output.png)\n\n\n### What pyenv _does..._\n\n* Lets you **change the global Python version** on a per-user basis.\n* Provides support for **per-project Python versions**.\n* Allows you to **override the Python version** with an environment\n  variable.\n* Searches for commands from **multiple versions of Python at a time**.\n  This may be helpful to test across Python versions with [tox](https://pypi.python.org/pypi/tox).\n\n\n### In contrast with pythonbrew and pythonz, pyenv _does not..._\n\n* **Depend on Python itself.** pyenv was made from pure shell scripts.\n    There is no bootstrap problem of Python.\n* **Need to be loaded into your shell.** Instead, pyenv's shim\n    approach works by adding a directory to your `PATH`.\n* **Manage virtualenv.** Of course, you can create [virtualenv](https://pypi.python.org/pypi/virtualenv)\n    yourself, or [pyenv-virtualenv](https://github.com/pyenv/pyenv-virtualenv)\n    to automate the process.\n\n----\n\n\n## Table of Contents\n\n* **[How It Works](#how-it-works)**\n  * [Understanding PATH](#understanding-path)\n  * [Understanding Shims](#understanding-shims)\n  * [Understanding Python version selection](#understanding-python-version-selection)\n  * [Locating Pyenv-provided Python Installations](#locating-pyenv-provided-python-installations)\n* **[Installation](#installation)**\n  * [Getting Pyenv](#getting-pyenv)\n    * [UNIX/MacOS](#unixmacos)\n      * [Homebrew in macOS](#homebrew-in-macos)\n      * [Automatic installer](#automatic-installer)\n      * [Basic GitHub Checkout](#basic-github-checkout)\n    * [Windows](#windows)\n  * [Set up your shell environment for Pyenv](#set-up-your-shell-environment-for-pyenv)\n  * [Restart your shell](#restart-your-shell)\n  * [Install Python build dependencies](#install-python-build-dependencies)\n* **[Usage](#usage)**\n  * [Install additional Python versions](#install-additional-python-versions)\n    * [Prefix auto-resolution to the latest version](#prefix-auto-resolution-to-the-latest-version)\n    * [Python versions with extended support](#python-versions-with-extended-support)\n  * [Switch between Python versions](#switch-between-python-versions)\n  * [Uninstall Python versions](#uninstall-python-versions)\n  * [Other operations](#other-operations)\n* [Upgrading](#upgrading)\n  * [Upgrading with Homebrew](#upgrading-with-homebrew)\n  * [Upgrading with Installer or Git checkout](#upgrading-with-installer-or-git-checkout)\n* [Uninstalling pyenv](#uninstalling-pyenv)\n* [Pyenv plugins](#pyenv-plugins)\n* [Advanced Configuration](#advanced-configuration)\n  * [Using Pyenv without shims](#using-pyenv-without-shims)\n  * [Environment variables](#environment-variables)\n* **[Development](#development)**\n  * [Contributing](#contributing)\n  * [Version History](#version-history)\n  * [License](#license)\n\n\n----\n\n\n## How It Works\n\nAt a high level, pyenv intercepts Python commands using shim\nexecutables injected into your `PATH`, determines which Python version\nhas been specified by your application, and passes your commands along\nto the correct Python installation.\n\n\n### Understanding PATH\n\nWhen you run a command like `python` or `pip`, your operating system\nsearches through a list of directories to find an executable file with\nthat name. This list of directories lives in an environment variable\ncalled `PATH`, with each directory in the list separated by a colon:\n\n    /usr/local/bin:/usr/bin:/bin\n\nDirectories in `PATH` are searched from left to right, so a matching\nexecutable in a directory at the beginning of the list takes\nprecedence over another one at the end. In this example, the\n`/usr/local/bin` directory will be searched first, then `/usr/bin`,\nthen `/bin`.\n\n\n### Understanding Shims\n\npyenv works by inserting a directory of _shims_ at the front of your\n`PATH`:\n\n    $(pyenv root)/shims:/usr/local/bin:/usr/bin:/bin\n\nThrough a process called _rehashing_, pyenv maintains shims in that\ndirectory to match every Python command across every installed version\nof Pythonâ€”`python`, `pip`, and so on.\n\nShims are lightweight executables that simply pass your command along\nto pyenv. So with pyenv installed, when you run, say, `pip`, your\noperating system will do the following:\n\n* Search your `PATH` for an executable file named `pip`\n* Find the pyenv shim named `pip` at the beginning of your `PATH`\n* Run the shim named `pip`, which in turn passes the command along to\n  pyenv\n\n\n### Understanding Python version selection\n\nWhen you execute a shim, pyenv determines which Python version to use by\nreading it from the following sources, in this order:\n\n1. The `PYENV_VERSION` environment variable (if specified). You can use\n   the [`pyenv shell`](https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#pyenv-shell) command to set this environment\n   variable in your current shell session.\n\n2. The application-specific `.python-version` file in the current\n   directory (if present). You can modify the current directory's\n   `.python-version` file with the [`pyenv local`](https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#pyenv-local)\n   command.\n\n3. The first `.python-version` file found (if any) by searching each parent\n   directory, until reaching the root of your filesystem.\n\n4. The global `$(pyenv root)/version` file. You can modify this file using\n   the [`pyenv global`](https://github.com/pyenv/pyenv/blob/master/COMMANDS.md#pyenv-global) command.\n   If the global version file is not present, pyenv assumes you want to use the \"system\"\n   Python (see below).\n\nA special version name \"`system`\" means to use whatever Python is found on `PATH`\nafter the shims `PATH` entry (in other words, whatever would be run if Pyenv\nshims weren't on `PATH`). Note that Pyenv considers those installations outside\nits control and does not attempt to inspect or distinguish them in any way.\nSo e.g. if you are on MacOS and have OS-bundled Python 3.8.9 and Homebrew-installed\nPython 3.9.12 and 3.10.2 -- for Pyenv, this is still a single \"`system`\" version,\nand whichever of those is first on `PATH` under the executable name you\nspecified will be run.\n\n**NOTE:** You can activate multiple versions at the same time, including multiple\nversions of Python2 or Python3 simultaneously. This allows for parallel usage of\nPython2 and Python3, and is required with tools like `tox`. For example, to instruct\nPyenv to first use your system Python and Python3 (which are e.g. 2.7.9 and 3.4.2)\nbut also have Python 3.3.6, 3.2.1, and 2.5.2 available, you first `pyenv install`\nthe missing versions, then set `pyenv global system 3.3.6 3.2.1 2.5.2`.\nThen you'll be able to invoke any of those versions with an appropriate `pythonX` or\n`pythonX.Y` name.\nYou can also specify multiple versions in a `.python-version` file by hand,\nseparated by newlines. Lines starting with a `#` are ignored.\n\n[`pyenv which <command>`](COMMANDS.md#pyenv-which) displays which real executable would be\nrun when you invoke `<command>` via a shim.\nE.g. if you have 3.3.6, 3.2.1 and 2.5.2 installed of which 3.3.6 and 2.5.2 are selected\nand your system Python is 3.2.5,\n`pyenv which python2.5` should display `$(pyenv root)/versions/2.5.2/bin/python2.5`,\n`pyenv which python3` -- `$(pyenv root)/versions/3.3.6/bin/python3` and\n`pyenv which python3.2` -- path to your system Python due to the fall-through (see below).\n\nShims also fall through to anything further on `PATH` if the corresponding executable is\nnot present in any of the selected Python installations.\nThis allows you to use any programs installed elsewhere on the system as long as\nthey are not shadowed by a selected Python installation.\n\n\n### Locating Pyenv-provided Python installations\n\nOnce pyenv has determined which version of Python your application has\nspecified, it passes the command along to the corresponding Python\ninstallation.\n\nEach Python version is installed into its own directory under\n`$(pyenv root)/versions`.\n\nFor example, you might have these versions installed:\n\n* `$(pyenv root)/versions/2.7.8/`\n* `$(pyenv root)/versions/3.4.2/`\n* `$(pyenv root)/versions/pypy-2.4.0/`\n\nAs far as Pyenv is concerned, version names are simply directories under\n`$(pyenv root)/versions`.\n\n----\n\n\n## Installation\n\n### Getting Pyenv\n#### UNIX/MacOS\n##### Homebrew in macOS\n\n   1. Consider installing with [Homebrew](https://brew.sh):\n      ```sh\n      brew update\n      brew install pyenv\n      ```\n   2. Then follow the rest of the post-installation steps, starting with\n      [Set up your shell environment for Pyenv](#set-up-your-shell-environment-for-pyenv).\n\n   3. OPTIONAL. To fix `brew doctor`'s warning _\"\"config\" scripts exist outside your system or Homebrew directories\"_\n\n      If you're going to build Homebrew formulae from source that link against Python\n      like Tkinter or NumPy\n      _(This is only generally the case if you are a developer of such a formula,\n      or if you have an EOL version of MacOS for which prebuilt bottles are no longer provided\n      and you are using such a formula)._\n\n      To avoid them accidentally linking against a Pyenv-provided Python,\n      add the following line into your interactive shell's configuration:\n\n      * Bash/Zsh:\n\n        ~~~bash\n        alias brew='env PATH=\"${PATH//$(pyenv root)\\/shims:/}\" brew'\n        ~~~\n\n      * Fish:\n\n        ~~~fish\n        alias brew=\"env PATH=(string replace (pyenv root)/shims '' \\\"\\$PATH\\\") brew\"\n        ~~~\n\n\n##### Automatic installer\n\n`curl https://pyenv.run | bash`\n\nFor more details visit our other project:\nhttps://github.com/pyenv/pyenv-installer\n\n\n##### Basic GitHub Checkout\n\nThis will get you going with the latest version of Pyenv and make it\neasy to fork and contribute any changes back upstream.\n\n* **Check out Pyenv where you want it installed.**\n   A good place to choose is `$HOME/.pyenv` (but you can install it somewhere else):\n    ```\n    git clone https://github.com/pyenv/pyenv.git ~/.pyenv\n    ```\n*  Optionally, try to compile a dynamic Bash extension to speed up Pyenv. Don't\n   worry if it fails; Pyenv will still work normally:\n    ```\n    cd ~/.pyenv && src/configure && make -C src\n    ```\n\n#### Windows\n\nPyenv does not officially support Windows and does not work in Windows outside\nthe Windows Subsystem for Linux.\nMoreover, even there, the Pythons it installs are not native Windows versions\nbut rather Linux versions running in a virtual machine --\nso you won't get Windows-specific functionality.\n\nIf you're in Windows, we recommend using @kirankotari's [`pyenv-win`](https://github.com/pyenv-win/pyenv-win) fork --\nwhich does install native Windows Python versions.\n\n\n### Set up your shell environment for Pyenv\n\n**Upgrade note:** The startup logic and instructions have been updated for simplicity in 2.3.0.\nThe previous, more complicated configuration scheme for 2.0.0-2.2.5 still works.\n\n* Define environment variable `PYENV_ROOT` to point to the path where\n  Pyenv will store its data. `$HOME/.pyenv` is the default.\n  If you installed Pyenv via Git checkout, we recommend\n  to set it to the same location as where you cloned it.\n* Add the `pyenv` executable to your `PATH` if it's not already there\n* run `eval \"$(pyenv init -)\"` to install `pyenv` into your shell as a shell function, enable shims and autocompletion\n  * You may run `eval \"$(pyenv init --path)\"` instead to just enable shims, without shell integration\n\nThe below setup should work for the vast majority of users for common use cases.\nSee [Advanced configuration](#advanced-configuration) for details and more configuration options.\n\n  - For **bash**:\n\n    Stock Bash startup files vary widely between distributions in which of them source\n    which, under what circumstances, in what order and what additional configuration they perform.\n    As such, the most reliable way to get Pyenv in all environments is to append Pyenv\n    configuration commands to both `.bashrc` (for interactive shells)\n    and the profile file that Bash would use (for login shells).\n\n    First, add the commands to `~/.bashrc` by running the following in your terminal:\n\n    ~~~ bash\n    echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bashrc\n    echo 'command -v pyenv >/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bashrc\n    echo 'eval \"$(pyenv init -)\"' >> ~/.bashrc\n    ~~~\n\n    Then, if you have `~/.profile`, `~/.bash_profile` or `~/.bash_login`, add the commands there as well.\n    If you have none of these, add them to `~/.profile`.\n\n    * to add to `~/.profile`:\n      ~~~ bash\n      echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.profile\n      echo 'command -v pyenv >/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.profile\n      echo 'eval \"$(pyenv init -)\"' >> ~/.profile\n      ~~~\n\n    * to add to `~/.bash_profile`:\n      ~~~ bash\n      echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bash_profile\n      echo 'command -v pyenv >/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bash_profile\n      echo 'eval \"$(pyenv init -)\"' >> ~/.bash_profile\n      ~~~\n\n  - For **Zsh**:\n    ~~~ zsh\n    echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.zshrc\n    echo 'command -v pyenv >/dev/null || export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.zshrc\n    echo 'eval \"$(pyenv init -)\"' >> ~/.zshrc\n    ~~~\n\n    If you wish to get Pyenv in noninteractive login shells as well, also add the commands to `~/.zprofile` or `~/.zlogin`.\n\n  - For **Fish shell**:\n\n    If you have Fish 3.2.0 or newer, execute this interactively:\n\n    ~~~ fish\n    set -Ux PYENV_ROOT $HOME/.pyenv\n    fish_add_path $PYENV_ROOT/bin\n    ~~~\n\n    Otherwise, execute the snippet below:\n\n    ~~~ fish\n    set -Ux PYENV_ROOT $HOME/.pyenv\n    set -U fish_user_paths $PYENV_ROOT/bin $fish_user_paths\n    ~~~\n\n    Now, add this to `~/.config/fish/config.fish`:\n\n    ~~~ fish\n    pyenv init - | source\n    ~~~\n\n   **Bash warning**: There are some systems where the `BASH_ENV` variable is configured\n   to point to `.bashrc`. On such systems, you should almost certainly put the\n   `eval \"$(pyenv init -)\"` line into `.bash_profile`, and **not** into `.bashrc`. Otherwise, you\n   may observe strange behaviour, such as `pyenv` getting into an infinite loop.\n   See [#264](https://github.com/pyenv/pyenv/issues/264) for details.\n\n   **Proxy note**: If you use a proxy, export `http_proxy` and `https_proxy`, too.\n\n   In MacOS, you might also want to install [Fig](https://fig.io/) which\nprovides alternative shell completions for many command line tools with an\nIDE-like popup interface in the terminal window.\n(Note that their completions are independent from Pyenv's codebase\nso they might be slightly out of sync for bleeding-edge interface changes.)\n\n### Restart your shell\n\n  for the `PATH` changes to take effect.\n\n  ```sh\n  exec \"$SHELL\"\n  ```\n\n### Install Python build dependencies\n\n  [**Install Python build dependencies**](https://github.com/pyenv/pyenv/wiki#suggested-build-environment)\n  before attempting to install a new Python version.\n\n  You can now begin using Pyenv.\n\n----\n\n\n## Usage\n\n### Install additional Python versions\n\nTo install additional Python versions, use [`pyenv install`](COMMANDS.md#pyenv-install).\n\nFor example, to download and install Python 3.10.4, run:\n\n```sh\npyenv install 3.10.4\n```\n\nRunning `pyenv install -l` gives the list of all available versions.\n\n**NOTE:** Most Pyenv-provided Python releases are source releases and are built\nfrom source as part of installation (that's why you need Python build dependencies preinstalled).\nYou can pass options to Python's `configure` and compiler flags to customize the build,\nsee [_Special environment variables_ in Python-Build's README](plugins/python-build/README.md#special-environment-variables)\nfor details.\n\n**NOTE:** If you are having trouble installing a Python version,\nplease visit the wiki page about\n[Common Build Problems](https://github.com/pyenv/pyenv/wiki/Common-build-problems).\n\n**NOTE:** If you want to use proxy for download, please set the `http_proxy` and `https_proxy`\nenvironment variables.\n\n**NOTE:** If you'd like a faster interpreter at the cost of longer build times,\nsee [_Building for maximum performance_ in Python-Build's README](plugins/python-build/README.md#building-for-maximum-performance).\n\n\n#### Prefix auto-resolution to the latest version\n\nAll Pyenv subcommands except `uninstall` automatically resolve full prefixes to the latest version in the corresponding version line.\n\n`pyenv install` picks the latest known version, while other subcommands pick the latest installed version.\n\nE.g. to install and then switch to the latest 3.10 release:\n\n```sh\npyenv install 3.10\npyenv global 3.10\n```\n\nYou can run [`pyenv latest -k <prefix>`](COMMANDS.md#pyenv-latest) to see how `pyenv install` would resolve a specific prefix, or [`pyenv latest <prefix>`](COMMANDS.md#pyenv-latest) to see how other subcommands would resolve it.\n\nSee the [`pyenv latest` documentation](COMMANDS.md#pyenv-latest) for details.\n\n\n#### Python versions with extended support\n\nFor the following Python releases, Pyenv applies user-provided patches that add support for some newer environments.\nThough we don't actively maintain those patches, since existing releases never change,\nit's safe to assume that they will continue working until there are further incompatible changes\nin a later version of those environments.\n\n* *3.7.8-3.7.15, 3.8.4-3.8.12, 3.9.0-3.9.7* : XCode 13.3\n* *3.5.10, 3.6.15* : MacOS 11+ and XCode 13.3\n* *2.7.18* : MacOS 10.15+ and Apple Silicon\n\n\n### Switch between Python versions\n\nTo select a Pyenv-installed Python as the version to use, run one\nof the following commands:\n\n* [`pyenv shell <version>`](COMMANDS.md#pyenv-shell) -- select just for current shell session\n* [`pyenv local <version>`](COMMANDS.md#pyenv-local) -- automatically select whenever you are in the current directory (or its subdirectories)\n* [`pyenv global <version>`](COMMANDS.md#pyenv-shell) -- select globally for your user account\n\nE.g. to select the above-mentioned newly-installed Python 3.10.4 as your preferred version to use:\n\n~~~bash\npyenv global 3.10.4\n~~~\n\nNow whenever you invoke `python`, `pip` etc., an executable from the Pyenv-provided\n3.10.4 installation will be run instead of the system Python.\n\nUsing \"`system`\" as a version name would reset the selection to your system-provided Python.\n\nSee [Understanding shims](#understanding-shims) and\n[Understanding Python version selection](#understanding-python-version-selection)\nfor more details on how the selection works and more information on its usage.\n\n\n### Uninstall Python versions\n\nAs time goes on, you will accumulate Python versions in your\n`$(pyenv root)/versions` directory.\n\nTo remove old Python versions, use [`pyenv uninstall <versions>`](COMMANDS.md#pyenv-uninstall).\n\nAlternatively, you can simply `rm -rf` the directory of the version you want\nto remove. You can find the directory of a particular Python version\nwith the `pyenv prefix` command, e.g. `pyenv prefix 2.6.8`.\nNote however that plugins may run additional operations on uninstall\nwhich you would need to do by hand as well. E.g. Pyenv-Virtualenv also\nremoves any virtual environments linked to the version being uninstalled.\n\n\n### Other operations\n\nRun `pyenv commands` to get a list of all available subcommands.\nRun a subcommand with `--help` to get help on it, or see the [Commands Reference](COMMANDS.md).\n\nNote that Pyenv plugins that you install may add their own subcommands.\n\n\n## Upgrading\n\n### Upgrading with Homebrew\n\nIf you've installed Pyenv using Homebrew, upgrade using:\n```sh\nbrew upgrade pyenv\n```\n\nTo switch from a release to the latest development version of Pyenv, use:\n\n```sh\nbrew uninstall pyenv\nbrew install pyenv --head\n```\n\nthen you can upgrade it with `brew upgrade pyenv` as usual.\n\n\n### Upgrading with Installer or Git checkout\n\nIf you've installed Pyenv with Pyenv-installer, you likely have the\n[Pyenv-Update](https://github.com/pyenv/pyenv-update) plugin that would\nupgrade Pyenv and all installed plugins:\n\n```sh\npyenv update\n```\n\nIf you've installed Pyenv using Pyenv-installer or Git checkout, you can also\nupgrade your installation at any time using Git.\n\nTo upgrade to the latest development version of pyenv, use `git pull`:\n\n```sh\ncd $(pyenv root)\ngit pull\n```\n\nTo upgrade to a specific release of Pyenv, check out the corresponding tag:\n\n```sh\ncd $(pyenv root)\ngit fetch\ngit tag\ngit checkout v0.1.0\n```\n\n## Uninstalling pyenv\n\nThe simplicity of pyenv makes it easy to temporarily disable it, or\nuninstall from the system.\n\n1. To **disable** Pyenv managing your Python versions, simply remove the\n  `pyenv init` invocations from your shell startup configuration. This will\n  remove Pyenv shims directory from `PATH`, and future invocations like\n  `python` will execute the system Python version, as it was before Pyenv.\n\n    `pyenv` will still be accessible on the command line, but your Python\n    apps won't be affected by version switching.\n\n2. To completely **uninstall** Pyenv, remove _all_ Pyenv configuration lines\n  from your shell startup configuration, and then remove\n  its root directory. This will **delete all Python versions** that were\n  installed under the `` $(pyenv root)/versions/ `` directory:\n\n    ```sh\n    rm -rf $(pyenv root)\n    ```\n\n    If you've installed Pyenv using a package manager, as a final step,\n    perform the Pyenv package removal. For instance, for Homebrew:\n\n    ```\n    brew uninstall pyenv\n    ```\n\n\n## Pyenv plugins\n\nPyenv provides a simple, flexible and maintainable way to extend and customize its functionalty with plugins --\nas simple as creating a plugin directory and dropping a shell script on a certain subpath of it\nwith whatever extra logic you need to be run at certain moments.\n\nSee [_Plugins_ on the wiki](https://github.com/pyenv/pyenv/wiki/Plugins) on how to install and use plugins\nas well as a catalog of some useful existing plugins for common needs.\n\nSee [_Authoring plugins_ on the wiki](https://github.com/pyenv/pyenv/wiki/Authoring-plugins) on writing your own plugins.\n\n\n## Advanced Configuration\n\nSkip this section unless you must know what every line in your shell\nprofile is doing.\n\nAlso see the [Environment variables](#environment-variables) section\nfor the environment variables that control Pyenv's behavior.\n\n`pyenv init` is the only command that crosses the line of loading\nextra commands into your shell. Coming from RVM, some of you might be\nopposed to this idea. Here's what `eval \"$(pyenv init -)\"` actually does:\n\n\n1. **Sets up the shims path.** This is what allows Pyenv to intercept\n   and redirect invocations of `python`, `pip` etc. transparently.\n   It prepends `$(pyenv root)/shims` to your `$PATH`.\n   It also deletes any other instances of `$(pyenv root)/shims` on `PATH`\n   which allows to invoke `eval \"$(pyenv init -)\"` multiple times without\n   getting duplicate `PATH` entries.\n\n2. **Installs autocompletion.** This is entirely optional but pretty\n   useful. Sourcing `$(pyenv root)/completions/pyenv.bash` will set that\n   up. There are also completions for Zsh and Fish.\n\n3. **Rehashes shims.** From time to time you'll need to rebuild your\n   shim files. Doing this on init makes sure everything is up to\n   date. You can always run `pyenv rehash` manually.\n\n4. **Installs `pyenv` into the current shell as a shell function.**\n   This bit is also optional, but allows\n   pyenv and plugins to change variables in your current shell.\n   This is required for some commands like `pyenv shell` to work.\n   The sh dispatcher doesn't do\n   anything crazy like override `cd` or hack your shell prompt, but if\n   for some reason you need `pyenv` to be a real script rather than a\n   shell function, you can safely skip it.\n\n`eval \"$(pyenv init --path)\"` only does items 1 and 3.\n\nTo see exactly what happens under the hood for yourself, run `pyenv init -`\nor `pyenv init --path`.\n\n`eval \"$(pyenv init -)\"` is supposed to run at any interactive shell's\nstartup (including nested shells -- e.g. those invoked from editors)\nso that you get completion and convenience shell functions.\n\n`eval \"$(pyenv init --path)\"` can be used instead of `eval \"$(pyenv init -)\"`\nto just enable shims, without shell integration. It can also be used to bump shims\nto the front of `PATH` after some other logic has prepended stuff to `PATH`\nthat may shadow Pyenv's shims.\n\n* In particular, in Debian-based distributions, the stock `~/.profile`\n  prepends per-user `bin` directories to `PATH` after having sourced `~/.bashrc`.\n  This necessitates appending a `pyenv init` call to `~/.profile` as well as `~/.bashrc`\n  in these distributions because the system's Pip places executables for\n  modules installed by a non-root user into those per-user `bin` directories.\n\n\n### Using Pyenv without shims\n\nIf you don't want to use `pyenv init` and shims, you can still benefit\nfrom pyenv's ability to install Python versions for you. Just run\n`pyenv install` and you will find versions installed in\n`$(pyenv root)/versions`.\n\nYou can manually execute or symlink them as required,\nor you can use [`pyenv exec <command>`](COMMANDS.md#pyenv-exec)\nwhenever you want `<command>` to be affected by Pyenv's version selection\nas currently configured.\n\n`pyenv exec` works by prepending `$(pyenv root)/versions/<selected version>/bin`\nto `PATH` in the `<command>`'s environment, the same as what e.g. RVM does.\n\n\n### Environment variables\n\nYou can affect how Pyenv operates with the following environment variables:\n\nname | default | description\n-----|---------|------------\n`PYENV_VERSION` | | Specifies the Python version to be used.<br>Also see [`pyenv shell`](COMMANDS.md#pyenv-shell)\n`PYENV_ROOT` | `~/.pyenv` | Defines the directory under which Python versions and shims reside.<br>Also see [`pyenv root`](COMMANDS.md#pyenv-root)\n`PYENV_DEBUG` | | Outputs debug information.<br>Also as: `pyenv --debug <subcommand>`\n`PYENV_HOOK_PATH` | [_see wiki_][hooks] | Colon-separated list of paths searched for pyenv hooks.\n`PYENV_DIR` | `$PWD` | Directory to start searching for `.python-version` files.\n`PYTHON_BUILD_ARIA2_OPTS` | | Used to pass additional parameters to [`aria2`](https://aria2.github.io/).<br>If the `aria2c` binary is available on `PATH`, pyenv uses `aria2c` instead of `curl` or `wget` to download the Python Source code. If you have an unstable internet connection, you can use this variable to instruct `aria2` to accelerate the download.<br>In most cases, you will only need to use `-x 10 -k 1M` as value to `PYTHON_BUILD_ARIA2_OPTS` environment variable\n\nSee also [_Special environment variables_ in Python-Build's README](plugins/python-build/README.md#special-environment-variables)\nfor environment variables that can be used to customize the build.\n\n----\n\n## Development\n\nThe pyenv source code is [hosted on\nGitHub](https://github.com/pyenv/pyenv).  It's clean, modular,\nand easy to understand, even if you're not a shell hacker.\n\nTests are executed using [Bats](https://github.com/bats-core/bats-core):\n\n    bats test\n    bats/test/<file>.bats\n\n\n### Contributing\n\nFeel free to submit pull requests and file bugs on the [issue\ntracker](https://github.com/pyenv/pyenv/issues).\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md) for more details on submitting changes.\n\n\n### Version History\n\nSee [CHANGELOG.md](CHANGELOG.md).\n\n\n### License\n\n[The MIT License](LICENSE)\n\n\n[pyenv-virtualenv]: https://github.com/pyenv/pyenv-virtualenv#readme\n[hooks]: https://github.com/pyenv/pyenv/wiki/Authoring-plugins#pyenv-hooks"
}
