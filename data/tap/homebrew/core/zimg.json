{
  "name": "zimg",
  "full_name": "zimg",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Scaling, colorspace conversion, and dithering library",
  "license": "WTFPL",
  "homepage": "https://github.com/sekrit-twc/zimg",
  "versions": {
    "stable": "3.0.5",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/sekrit-twc/zimg/archive/release-3.0.5.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "a9a0226bf85e0d83c41a8ebe4e3e690e1348682f6a2a7838f1b8cbff1b799bcf"
    },
    "head": {
      "url": "https://github.com/sekrit-twc/zimg.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/zimg/blobs/sha256:cc82dc203d39c81808f2afacf64b5b5048859de941fff9e8caea599b8db83a3f",
          "sha256": "cc82dc203d39c81808f2afacf64b5b5048859de941fff9e8caea599b8db83a3f"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/zimg/blobs/sha256:2bbd044c345af191083c75e1e67b48f31ded8bc4869e19de25d6bd19d3a214ed",
          "sha256": "2bbd044c345af191083c75e1e67b48f31ded8bc4869e19de25d6bd19d3a214ed"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/zimg/blobs/sha256:10507ec0d32970c00e04b4e76714ea452d22f315fdd116af5d56c3d81a7e1f39",
          "sha256": "10507ec0d32970c00e04b4e76714ea452d22f315fdd116af5d56c3d81a7e1f39"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/zimg/blobs/sha256:31d345c4d6927d6a5f5e1d04b8d78a53db597309c24d301bd0963afcc0702c35",
          "sha256": "31d345c4d6927d6a5f5e1d04b8d78a53db597309c24d301bd0963afcc0702c35"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/zimg/blobs/sha256:5a8049c1c8fa6e09f79dda6e18ec22909da4b4b567e7f52d4e6338f7ac6dfa64",
          "sha256": "5a8049c1c8fa6e09f79dda6e18ec22909da4b4b567e7f52d4e6338f7ac6dfa64"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/zimg/blobs/sha256:5cabd4f2485ba7bb49feecac4584afaa7f05e097cb3935d7e9ea8a06336b4bcf",
          "sha256": "5cabd4f2485ba7bb49feecac4584afaa7f05e097cb3935d7e9ea8a06336b4bcf"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zimg/blobs/sha256:a33e194d2d9132c9c35d9cb9affc078e77e26a6c8c11fd5b015c6f28914c52fe",
          "sha256": "a33e194d2d9132c9c35d9cb9affc078e77e26a6c8c11fd5b015c6f28914c52fe"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "autoconf",
    "automake",
    "libtool"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/zimg.rb",
  "ruby_source_checksum": {
    "sha256": "8f7aa6440a5f861dd9354114f4585a91a670545b877003a7a9c8104cda2333a4"
  },
  "date_added": "2015-12-26T21:47:14+00:00",
  "readme": "z.lib\n======\nThe \"z\" library implements the commonly required image processing basics of\nscaling, colorspace conversion, and depth conversion. A simple API enables\nconversion between any supported formats to operate with minimal knowledge\nfrom the programmer. All library routines were designed from the ground-up\nwith correctness, flexibility, and thread-safety as first priorities.\nAllocation, buffering, and I/O are cleanly separated from processing, allowing\nthe programmer to adapt \"z\" to many scenarios.\n\nRequirements\n-----\n- Byte-addressable architecture\n- Two's complement integer encoding\n- 32-bit or greater machine word\n- C++17 compiler\n- Platforms: Microsoft Windows, POSIX\n\nBuilding\n-----\nThe officially supported build system is GNU autotools. Use the provided\n\"autogen.sh\" script to instantiate the familiar \"configure\" and \"make\" build\nsystem. Visual Studio project files are not stable and are subject to change.\nDownload all submodules before compiling by `git submodule update --init\n--recursive`.\n\nCapabilities\n-----\n### Colorspace\n\nColorspaces: SMPTE-C (NTSC), Rec.709, Rec.2020\n\nThe colorspace module provides for conversion between any combination of\ncolorspaces, as defined by the commonly used triplet of matrix coefficients,\ntransfer characteristics, and color primaries. Conversions are implemented\nwith intelligent logic that minimizes the number of intermediate\nrepresentations required for common scenarios, such as conversion between\nYCbCr and RGB. Support is also provided for the non-traditional YCbCr system\nof ITU-R BT.2020 constant luminance (CL), which retains higher fidelity with\nchroma subsampling. Note that \"z\" is not a color management system and should\nnot be used to perform drastic contrast or gamut reduction, such as BT.2020\nto BT.709.\n\n### Depth\n\nFormats: BYTE, WORD, HALF, FLOAT\n\nThe depth module provides for conversion between any pixel (number) format,\nincluding one and two-byte integer formats as well as IEEE-754 binary16\n(OpenEXR) and binary32 formats. Limited range (16-235) and full swing (0-255)\ninteger formats are supported, including conversion between such formats.\nMultiple dithering methods are available when converting to integer formats,\nfrom basic rounding to high quality error diffusion.\n\n### Resize\n\nThe resize module provides high fidelity linear resamplers, including the\npopular Bicubic and Lanczos filters. Resampling ratios of up to 100x are\nsupported for upsampling and downsampling. Full support is provided for\nvarious coordinate systems, including the various chroma siting conventions\n(e.g. JPEG and MPEG2) as well as interlaced images.\n\nPerformance\n-----\n\"z\" is optimized for Intel(R) Architecture and features faster processing times\nthan industry standard swscale software.\n\nTime (ms) to resize FHD image to UHD with Lanczos filter.\n\n|                                | z.lib 2.8 | swscale 4.0.2* |\n|--------------------------------|-----------|----------------|\n| Intel(R) Core(TM) i7-8565U     |       7.7 |           15.2 |\n| Intel(R) Xeon(R) Platinum 8176 |      10.8 |           22.2 |\n\nTime (ms) to convert FHD BT.709 (YUV) to FHD BT.2020.\n\n|                                | z.lib 2.8 | swscale 4.0.2** |\n|--------------------------------|-----------|-----------------|\n| Intel(R) Core(TM) i7-8565U     |       8.3 |            17.5 |\n| Intel(R) Xeon(R) Platinum 8176 |      11.5 |            25.6 |\n\n\\* `scale=3840:2160:sws_flags=lanczos+accurate_rnd:sws_dither=none`\n\n\\** `colorspace=all=bt2020:iall=bt709:format=yuv420p10`"
}
