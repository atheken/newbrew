{
  "name": "ttyplot",
  "full_name": "ttyplot",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Realtime plotting utility for terminal with data input from stdin",
  "license": "Apache-2.0",
  "homepage": "https://github.com/tenox7/ttyplot",
  "versions": {
    "stable": "1.4",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/tenox7/ttyplot/archive/1.4.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "11974754981406d19cfa16865b59770faaf3ade8d909d9a0134dc56e00d29bd4"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ttyplot/blobs/sha256:2aa30c7f0765b8a9eb2bfd3d56e2ed0c50a93f8deddc884eab1a2984b3b27cc6",
          "sha256": "2aa30c7f0765b8a9eb2bfd3d56e2ed0c50a93f8deddc884eab1a2984b3b27cc6"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ttyplot/blobs/sha256:87a224c655b39dc35f8467b724f6dbce85752ce208ff793a05073bc94ca6e110",
          "sha256": "87a224c655b39dc35f8467b724f6dbce85752ce208ff793a05073bc94ca6e110"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ttyplot/blobs/sha256:4283b097475510418957e8bfc92b952f6033e615b4b805ec76df7e80c59c9209",
          "sha256": "4283b097475510418957e8bfc92b952f6033e615b4b805ec76df7e80c59c9209"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ttyplot/blobs/sha256:b640f1300a6b7ce6e97d9c4357fc9049e99f5d398655239d60f4e0122e85553f",
          "sha256": "b640f1300a6b7ce6e97d9c4357fc9049e99f5d398655239d60f4e0122e85553f"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ttyplot/blobs/sha256:6491a1d546da726daaf3c87c4bf61885bd66abcd03bc2a42899a03f3efdd01f7",
          "sha256": "6491a1d546da726daaf3c87c4bf61885bd66abcd03bc2a42899a03f3efdd01f7"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ttyplot/blobs/sha256:e2076fd6d1c3921d941d143b49e41a75c1a8fe7b46e640752a7abffb94b92aca",
          "sha256": "e2076fd6d1c3921d941d143b49e41a75c1a8fe7b46e640752a7abffb94b92aca"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ttyplot/blobs/sha256:760b571d2cc940c6a1ad14655f2e2c0cac4aa64dea8e63d37454528cf969d8b2",
          "sha256": "760b571d2cc940c6a1ad14655f2e2c0cac4aa64dea8e63d37454528cf969d8b2"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ttyplot/blobs/sha256:b31388536afde7ef669c334f520e73f95ceef82d0c9f73f5390a65d13d3235ef",
          "sha256": "b31388536afde7ef669c334f520e73f95ceef82d0c9f73f5390a65d13d3235ef"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ttyplot/blobs/sha256:6d01769af5216ac128e8cb9a0a55397959594fa8f20fafcf65780db4b66ac090",
          "sha256": "6d01769af5216ac128e8cb9a0a55397959594fa8f20fafcf65780db4b66ac090"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ttyplot/blobs/sha256:e786cc0a83fc20c09842a6fb7b411504ab45e85c7714e63afc31408eba5ede5b",
          "sha256": "e786cc0a83fc20c09842a6fb7b411504ab45e85c7714e63afc31408eba5ede5b"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "ncurses"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "982192bf852eebace6c92c1e792d894990b8620e",
  "ruby_source_path": "Formula/ttyplot.rb",
  "ruby_source_checksum": {
    "sha256": "cc089daf05f8fc709370bdaae2086eb6378eeb0b82199904ebcd612846f337b7"
  },
  "date_added": "2019-10-20T15:30:13+02:00",
  "readme": "# ttyplot\na realtime plotting utility for text mode consoles and terminals with data input from stdin / pipe\n\ntakes data from standard input / unix pipeline, most commonly some tool like *ping, snmpget, netstat, ip link, ifconfig, sar, vmstat*, etc. and plots in text mode on a terminal in real time, for example a simple **ping**:\n\n![ttyplot ping](ttyplot-ping.png)\n\n&nbsp;\n&nbsp;\n\n\nsupports rate calculation for counters and up to two graphs on a single display using reverse video for second line, for example **snmpget**, **ip link**, **rrdtool**, etc:\n\n![ttyplot snmp](ttyplot-snmp.png)\n\n\n&nbsp;\n&nbsp;\n\n## get\n\n<a href=\"https://repology.org/project/ttyplot/versions\">\n    <img src=\"https://repology.org/badge/vertical-allrepos/ttyplot.svg\" alt=\"Packaging status\" align=\"right\">\n</a>\n\n### ubuntu\n\n```\nsnap install ttyplot\n```\n\n### debian\n\nyou can try\n\n```\napt install ttyplot\n```\n\nalternatively [download packages](https://packages.debian.org/sid/ttyplot) \n\n[debian tracker](https://tracker.debian.org/pkg/ttyplot)\n\n### macOS\n\n```\nbrew install ttyplot\n```\n\n### termux\n\n```\npkg install ttyplot\n```\n\n### misc\n\nfor other platforms see [releases tab](https://github.com/tenox7/ttyplot/releases)\n\n## examples\n\n### cpu usage from vmstat using awk to pick the right column\n```\nvmstat -n 1 | gawk '{ print 100-int($(NF-2)); fflush(); }' | ttyplot\n```\n\n### cpu usage from sar with title and fixed scale to 100%\n```\nsar 1 | gawk '{ print 100-int($NF); fflush(); }' | ttyplot -s 100 -t \"cpu usage\" -u \"%\"\n```\n\n### memory usage from sar, using perl to pick the right column\n```\nsar -r 1 | perl -lane 'BEGIN{$|=1} print \"@F[5]\"' | ttyplot -s 100 -t \"memory used %\" -u \"%\"\n```\n\n### memory usage on macOS\n```\nvm_stat 1 | awk '{ print int($2)*4096/1024^3; fflush(); }' | ttyplot -t \"MacOS Memory Usage\" -u GB\n```\n\n### number of processes in running and io blocked state\n```\nvmstat -n 1 | perl -lane 'BEGIN{$|=1} print \"@F[0,1]\"' | ttyplot -2 -t \"procs in R and D state\"\n```\n\n### load average via uptime and awk\n```\n{ while true; do uptime | gawk '{ gsub(/,/, \"\"); print $(NF-2) }'; sleep 1; done } | ttyplot -t \"load average\" -s load\n```\n\n### ping plot with sed\non macOS change `-u` to `-l`\n```\nping 8.8.8.8 | sed -u 's/^.*time=//g; s/ ms//g' | ttyplot -t \"ping to 8.8.8.8\" -u ms\n```\n\n### wifi signal level in -dBM (higher is worse) using iwconfig\n```\n{ while true; do iwconfig 2>/dev/null | grep \"Signal level\" | sed -u 's/^.*Signal level=-//g; s/dBm//g'; sleep 1; done } | ttyplot -t \"wifi signal\" -u \"-dBm\" -s 90\n```\n\n### wifi signal on macOS\n```\n{ while true; do /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport --getinfo | awk '/agrCtlRSSI/ {print -$2; fflush();}'; sleep 1; done } | ttyplot -t \"wifi signal\" -u \"-dBm\" -s 90\n```\n\n### cpu temperature from proc\n```\n{ while true; do awk '{ printf(\"%.1f\\n\", $1/1000) }' /sys/class/thermal/thermal_zone0/temp; sleep 1; done } | ttyplot -t \"cpu temp\" -u C\n```\n\n### fan speed from lm-sensors using grep, tr and cut\n```\n{ while true; do sensors | grep fan1: | tr -s \" \" | cut -d\" \" -f2; sleep 1; done } | ttyplot -t \"fan speed\" -u RPM\n```\n\n### memory usage from rrdtool and collectd using awk\n```\n{ while true; do rrdtool lastupdate /var/lib/collectd/rrd/$(hostname)/memory/memory-used.rrd | awk 'END { print ($NF)/1024/1024 }'; sleep 1; done } | ttyplot -m $(awk '/MemTotal/ { print ($2)/1024 }' /proc/meminfo) -t \"Memoru Used\" -u MB\n```\n\n### bitcoin price chart using curl and jq\n```\n{ while true; do curl -sL https://api.coindesk.com/v1/bpi/currentprice.json  | jq .bpi.USD.rate_float; sleep 600; done } | ttyplot -t \"bitcoin price\" -u usd\n```\n\n### stock quote chart\n```\n{ while true; do curl -sL https://api.iextrading.com/1.0/stock/googl/price; echo; sleep 600; done } | ttyplot -t \"google stock price\" -u usd\n```\n\n### prometheus load average via node_exporter\n```\n{ while true; do curl -s  http://10.4.7.180:9100/metrics | grep \"^node_load1 \" | cut -d\" \" -f2; sleep 1; done } | ttyplot\n```\n\n\n&nbsp;\n&nbsp;\n\n\n\n## network/disk throughput examples\nttyplot supports \"two line\" plot for in/out or read/write\n\n### snmp network throughput for an interface using snmpdelta\n```\nsnmpdelta -v 2c -c public -Cp 10 10.23.73.254 1.3.6.1.2.1.2.2.1.{10,16}.9 | gawk '{ print $NF/1000/1000/10; fflush(); }' | ttyplot -2 -t \"interface 9 throughput\" -u Mb/s\n```\n\n### network throughput for an interface using netstat (OpenBSD, FreeBSD)\n```\nnetstat -b -w ${1} -I em0 | awk 'NR>3 { print $1/1024; print $2/1024; fflush }' | ttyplot -2 -t \"IN/OUT Bandwidth in KB/s (${1}s resolution)\" -u \"KB/s\" -c \"#\"\n```\n\n### local network throughput for all interfaces combined from sar\n```\nsar  -n DEV 1 | gawk '{ if($6 ~ /rxkB/) { print iin/1000; print out/1000; iin=0; out=0; fflush(); } iin=iin+$6; out=out+$7; }' | ttyplot -2 -u \"MB/s\"\n```\n\n### disk throughput from iostat\n```\niostat -xmy 1 nvme0n1 | stdbuf -o0 tr -s \" \" | stdbuf -o0 cut -d \" \" -f 4,5 | ttyplot -2 -t \"nvme0n1 throughput\" -u MB/s\n```\n\n&nbsp;\n&nbsp;\n\n\n\n## rate calculator for counters\nttyplot also supports *counter* style metrics, calculating *rate* by measured time difference between samples\n\n### snmp network throughput for an interface using snmpget\n```\n{ while true; do snmpget -v 2c -c public 10.23.73.254 1.3.6.1.2.1.2.2.1.{10,16}.9 | awk '{ print $NF/1000/1000; }'; sleep 10; done } | ttyplot -2 -r -u \"MB/s\"\n```\n\n### local interface throughput using ip link and jq\n```\n{ while true; do ip -s -j link show enp0s31f6 | jq .[].stats64.rx.bytes/1024/1024,.[].stats64.tx.bytes/1024/1024; sleep 1; done } | ttyplot -r -2 -u \"MB/s\"\n```\n\n### prometheus node exporter disk throughput for /dev/sda\n```\n{ while true; do curl -s http://10.11.0.173:9100/metrics | awk '/^node_disk_.+_bytes_total{device=\"sda\"}/ { printf(\"%f\\n\", $2/1024/1024); }'; sleep 1; done } | ttyplot -r -2 -u MB/s -t \"10.11.0.173 sda writes\"\n```\n\n### network throughput from collectd with rrdtool and awk\n```\n{ while true; do rrdtool lastupdate /var/lib/collectd/rrd/$(hostname)/interface-enp1s0/if_octets.rrd | awk 'END { print ($2)/1000/1000, ($3)/1000/1000 }'; sleep 10; done } | ttyplot -2 -r -t \"enp1s0 throughput\" -u MB/s\n```\n\n\n\n&nbsp;\n&nbsp;\n\n\n## flags\n\n```\n  ttyplot [-2] [-r] [-c plotchar] [-s scale] [-m max] [-M min] [-t title] [-u unit]\n\n  -2 read two values and draw two plots, the second one is in reverse video\n  -r rate of a counter (divide value by measured sample interval)\n  -c character to use for plot line, eg @ # % . etc\n  -e character to use for plot error line when value exceeds hardmax (default: e)\n  -E character to use for error symbol displayed when value is less than hardmin (default: v)\n  -s initial scale of the plot (can go above if data input has larger value)\n  -m maximum value, if exceeded draws error line (see -e), upper-limit of plot scale is fixed\n  -M minimum value, if entered less than this, draws error symbol (see -E), lower-limit of the plot scale is fixed\n  -t title of the plot\n  -u unit displayed beside vertical bar\n```\n\n&nbsp;\n&nbsp;\n\n\n\n## frequently questioned answers\n\n### ttyplot quits when there is no more data\n\n**UPDATE** as of version 1.5 ttyplot will print \"input stream closed\" and wait forever, instead of quititing.\n\nthis is by design; your problem is likely that the output is lost when ttyplot exits; this is explained in [the next question below](#ttyplot-erases-screen-when-exiting)\n\nyou can also \"work around\" by adding `sleep`, `read`, `cat` at the end of the stream, etc:\n\n```\n{ echo 1 2 3; cat; } | ttyplot\n```\n\n### ttyplot erases screen when exiting\nthis is because of [alternate screen](https://invisible-island.net/xterm/xterm.faq.html#xterm_tite) in xterm-ish terminals; if you use one of these this will likely work around it:\n\n```\necho 1 2 3 | TERM=vt100 ttyplot\n```\n\nyou can also permanently fix terminfo entry (this will make a copy in $HOME/.terminfo/):\n\n```\ninfocmp -I $TERM | sed -e 's/smcup=[^,]*,//g' -e 's/rmcup=[^,]*,//g' | tic -\n```\n\n### when running interactively and non-numeric data is entered (eg. some key) ttyplot hangs\npress `ctrl^j` to re-set\n\n### stdio buffering\nby default in unix stdio is buffered, you can work around it in [various ways](http://www.perkin.org.uk/posts/how-to-fix-stdio-buffering.html) also [this](https://collectd.org/wiki/index.php/Plugin:Exec#Output_buffering)\n\n\n## legal stuff\n```\nLicense: Apache 2.0\nCopyright (c) 2013-2018 Antoni Sawicki\nCopyright (c) 2019-2023 Google LLC\n```"
}
