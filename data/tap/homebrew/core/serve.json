{
  "name": "serve",
  "full_name": "serve",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Static http server anywhere you need one",
  "license": "MIT",
  "homepage": "https://github.com/syntaqx/serve",
  "versions": {
    "stable": "0.6.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/syntaqx/serve/archive/v0.6.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "7797a24564d95038d9e0a44f0dafd1dacb7853ee94d21bc0587bdfba6faaa6cb"
    },
    "head": {
      "url": "https://github.com/syntaqx/serve.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/serve/blobs/sha256:2bf7effe016ef9a0cef9f6325983d0071b6f7ab8097b99c6b79c926efd2519a1",
          "sha256": "2bf7effe016ef9a0cef9f6325983d0071b6f7ab8097b99c6b79c926efd2519a1"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/serve/blobs/sha256:2bf7effe016ef9a0cef9f6325983d0071b6f7ab8097b99c6b79c926efd2519a1",
          "sha256": "2bf7effe016ef9a0cef9f6325983d0071b6f7ab8097b99c6b79c926efd2519a1"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/serve/blobs/sha256:2bf7effe016ef9a0cef9f6325983d0071b6f7ab8097b99c6b79c926efd2519a1",
          "sha256": "2bf7effe016ef9a0cef9f6325983d0071b6f7ab8097b99c6b79c926efd2519a1"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/serve/blobs/sha256:205cfdc9a632e8c90d415bea94ab53e9a029afffb7d870fac8018bb937e43b98",
          "sha256": "205cfdc9a632e8c90d415bea94ab53e9a029afffb7d870fac8018bb937e43b98"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/serve/blobs/sha256:205cfdc9a632e8c90d415bea94ab53e9a029afffb7d870fac8018bb937e43b98",
          "sha256": "205cfdc9a632e8c90d415bea94ab53e9a029afffb7d870fac8018bb937e43b98"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/serve/blobs/sha256:205cfdc9a632e8c90d415bea94ab53e9a029afffb7d870fac8018bb937e43b98",
          "sha256": "205cfdc9a632e8c90d415bea94ab53e9a029afffb7d870fac8018bb937e43b98"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/serve/blobs/sha256:40325f69042fb626e7100fb49097752721fa1cc376bcf3cf2f53f5e49b215efc",
          "sha256": "40325f69042fb626e7100fb49097752721fa1cc376bcf3cf2f53f5e49b215efc"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/serve.rb",
  "ruby_source_checksum": {
    "sha256": "cc372fa7e62a8ce1969814444ed14c728a5ce611ada232c171027777c1add159"
  },
  "date_added": "2019-03-04T17:58:02+11:00",
  "readme": "# <img src=\"https://raw.githubusercontent.com/syntaqx/serve/main/docs/logo.svg?sanitize=true\" width=\"250\">\n\n`serve` is a static http server anywhere you need one.\n\n[homebrew]:   https://brew.sh/\n[git]:        https://git-scm.com/\n[golang]:     https://golang.org/\n[releases]:   https://github.com/syntaqx/serve/releases\n[modules]:    https://github.com/golang/go/wiki/Modules\n[docker-hub]: https://hub.docker.com/r/syntaqx/serve\n\n[![Mentioned in Awesome Go](https://awesome.re/mentioned-badge.svg)](https://github.com/avelino/awesome-go)\n\n[![codecov](https://codecov.io/gh/syntaqx/serve/branch/main/graph/badge.svg?token=FGkU1ntp8z)](https://codecov.io/gh/syntaqx/serve)\n[![Go Report Card](https://goreportcard.com/badge/github.com/syntaqx/serve)](https://goreportcard.com/report/github.com/syntaqx/serve)\n[![Go Reference](https://pkg.go.dev/badge/github.com/syntaqx/serve.svg)](https://pkg.go.dev/github.com/syntaqx/serve)\n\n[![GitHub Release](https://img.shields.io/github/release-pre/syntaqx/serve.svg)][releases]\n[![Docker Pulls](https://img.shields.io/docker/pulls/syntaqx/serve.svg)][docker-hub]\n\n> ðŸš¨ The `main` branch is currently in active R&D for the next release of `serve`.\n> To use `serve`, please be sure to download a previous [release](https://github.com/syntaqx/serve/releases) as no stability guarantees\n> are being made furter progress has been made towards a release candidate.\n\n## TL;DR\n\n> It's basically `python -m SimpleHTTPServer 8080` written in Go, because who\n> can remember that many letters?\n\n### Features\n\n* HTTPS (TLS)\n* CORS support\n* Request logging\n* `net/http` compatible\n* Support for [BasicAuth](https://en.wikipedia.org/wiki/Basic_access_authentication) via `users.json`\n\n## Installation\n\n`serve` can be installed in a handful of ways:\n\n### Homebrew on macOS\n\nIf you are using [Homebrew][] on macOS, you can install `serve` with the\nfollowing command:\n\n```sh\nbrew install syntaqx/tap/serve\n```\n\n### Docker\n\nThe official [syntaqx/serve][docker-hub] image is available on Docker Hub.\n\nTo get started, try hosting a directory from your docker host:\n\n```sh\ndocker run -v .:/var/www:ro -d syntaqx/serve\n```\n\nAlternatively, a simple `Dockerfile` can be used to generate a new image that\nincludes the necessary content:\n\n```dockerfile\nFROM syntaqx/serve\nCOPY . /var/www\n```\n\nPlace this in the same directory as your content, then `build` and `run` the\ncontainer:\n\n```sh\ndocker build -t some-content-serve .\ndocker run --name some-serve -d some-content-serve\n```\n\n#### Exposing an external port\n\n```sh\ndocker run --name some-serve -d -p 8080:8080 some-content-serve\n```\n\nThen you can navigate to http://localhost:8080/ or http://host-ip:8080/ in your\nbrowser.\n\n#### Using environment variables for configuration\n\n[12-factor-config]: https://12factor.net/config\n\nCurrently, `serve` only supports using the `PORT` environment variable for\nsetting the listening port. All other configurations are available as CLI flags.\n\n> In future releases, most configurations will be settable from both the CLI\n> flag as well as a compatible environment variable, aligning with the\n> expectations of a [12factor app][12-factor-config]. But, that will require a\n> fair amount of work before the functionality is made available.\n\nHere's an example using `docker-compose.yml` to configure `serve` to use HTTPS:\n\n```yaml\nversion: '3'\nservices:\n  web:\n    image: syntaqx/serve\n    volumes:\n      - ./static:/var/www\n      - ./fixtures:/etc/ssl\n    environment:\n      - PORT=1234\n    ports:\n      - 1234\n    command: serve -ssl -cert=/etc/ssl/cert.pem -key=/etc/ssl/key.pem -dir=/var/www\n```\n\nThe project repository provides an example [docker-compose](./docker-compose.yml)\nthat implements a variety of common use-cases for `serve`. Feel free to use\nthose to help you get started.\n\n### Download the binary\n\nQuickly download install the latest release:\n\n```sh\ncurl -sfL https://install.goreleaser.com/github.com/syntaqx/serve.sh | sh\n```\n\nOr manually download the [latest release][releases] binary for your system and\narchitecture and install it into your `$PATH`.\n\n### From source\n\nTo build from source, check out the instructions on getting started with\n[development](#development).\n\n## Usage\n\n```sh\nserve [options] [path]\n```\n\n> `[path]` defaults to `.` (relative path to the current directory)\n\nThen simply open your browser to http://localhost:8080 to view your server.\n\n### Options\n\nThe following configuration options are available:\n\n* `--host` host address to bind to (defaults to `0.0.0.0`)\n* `--port` listening port (defaults to `8080`)\n* `--ssl` enable https (defaults to `false`)\n* `--cert` path to the ssl cert file (defaults to `cert.pem`)\n* `--key` path to the ssl key file (defaults to `key.pem`)\n* `--dir` directory path to serve (defaults to `.`, also configurable by `arg[0]`)\n* `--users` path to users file (defaults to `users.dat`); file should contain lines of username:password in plain text\n\n## Development\n\nTo develop `serve` or interact with its source code in any meaningful way, be\nsure you have the following installed:\n\n### Prerequisites\n\n* [Git][git]\n* [Go][golang]\n\n### Install\n\nYou can download and install the project from GitHub by simply running:\n\n```sh\ngit clone git@github.com:syntaqx/serve.git && cd $(basename $_ .git)\nmake install\n```\n\nThis will install `serve` into your `$GOPATH/bin` directory, which assuming is\nproperly appended to your `$PATH`, can now be used:\n\n```sh\n$ serve version\nserve version v0.0.6-8-g5074d63 windows/amd64\n```\n\n## Using `serve` manually\n\nBesides running `serve` using the provided binary, you can also embed a\n`serve.FileServer` into your own Go program:\n\n```go\npackage main\n\nimport (\n    \"log\"\n    \"net/http\"\n\n    \"github.com/syntaqx/serve\"\n)\n\nfunc main() {\n    fs := serve.NewFileServer()\n    log.Fatal(http.ListenAndServe(\":8080\", fs))\n}\n```\n\n## License\n\n[MIT]: https://opensource.org/licenses/MIT\n\n`serve` is open source software released under the [MIT license][MIT].\n\nAs with all Docker images, these likely also contain other software which may be\nunder other licenses (such as Bash, etc from the base distribution, along with\nany direct or indirect dependencies of the primary software being contained).\n\nAs for any pre-built image usage, it is the image user's responsibility to\nensure that any use of this image complies with any relevant licenses for all\nsoftware contained within."
}
