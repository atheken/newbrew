{
  "name": "elm-format",
  "full_name": "elm-format",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Elm source code formatter, inspired by gofmt",
  "license": "BSD-3-Clause",
  "homepage": "https://github.com/avh4/elm-format",
  "versions": {
    "stable": "0.8.7",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/avh4/elm-format.git",
      "tag": "0.8.7",
      "revision": "b5cca4c26b473dab06e5d73b98148637e4770d45",
      "checksum": null
    },
    "head": {
      "url": "https://github.com/avh4/elm-format.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/elm-format/blobs/sha256:81d3cdebad68b53ebe6d615e9362359a433c371804e38c9ac274a6657ab4a972",
          "sha256": "81d3cdebad68b53ebe6d615e9362359a433c371804e38c9ac274a6657ab4a972"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/elm-format/blobs/sha256:d95da1452e810b7b381ae898269325caa6da8a3224de231479a515ad9e8aaf6f",
          "sha256": "d95da1452e810b7b381ae898269325caa6da8a3224de231479a515ad9e8aaf6f"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/elm-format/blobs/sha256:94f1a4809976df842ac5e63efcd66b564bf4cca7ff833c90a9218f3652956af2",
          "sha256": "94f1a4809976df842ac5e63efcd66b564bf4cca7ff833c90a9218f3652956af2"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/elm-format/blobs/sha256:61520c04f08cbd3b0f0989718fb8b3df92ce41d2f1b2f68c1827bc4d0331e482",
          "sha256": "61520c04f08cbd3b0f0989718fb8b3df92ce41d2f1b2f68c1827bc4d0331e482"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/elm-format/blobs/sha256:65b60d85cf68821087e2d5005778d552c15d7183d763bcdb893da033ec21ac38",
          "sha256": "65b60d85cf68821087e2d5005778d552c15d7183d763bcdb893da033ec21ac38"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/elm-format/blobs/sha256:a0f4b8bde75fc24c1e8a3ab6693581a210f9c8a8886de800835c5623261e4fc1",
          "sha256": "a0f4b8bde75fc24c1e8a3ab6693581a210f9c8a8886de800835c5623261e4fc1"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/elm-format/blobs/sha256:c6b1ec84983f60bd9a7834c03074931a6f7a1c78ac640a4c6b94cbc1a10bb968",
          "sha256": "c6b1ec84983f60bd9a7834c03074931a6f7a1c78ac640a4c6b94cbc1a10bb968"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cabal-install",
    "haskell-stack",
    "hpack"
  ],
  "dependencies": [
    "gmp"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    {
      "xz": "build"
    }
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/elm-format.rb",
  "ruby_source_checksum": {
    "sha256": "b187cb7eae68780748e91586ceda665187a7a304f2d078b091ddf39a13d7436a"
  },
  "date_added": "2017-01-03T20:05:31+00:00",
  "readme": "[![Build Status](https://travis-ci.org/avh4/elm-format.svg?branch=master)](https://travis-ci.org/avh4/elm-format)\n[![latest version: 0.8.7](https://img.shields.io/badge/version-0.8.7-orange.svg)](https://github.com/avh4/elm-format/releases/tag/0.8.7)\n\n# elm-format\n\n`elm-format` formats [Elm](https://elm-lang.org) source code\naccording to a standard set of rules based on [the official Elm Style Guide](https://elm-lang.org/docs/style-guide).\nIt is inspired by the popular [gofmt](https://blog.golang.org/go-fmt-your-code).\n\nThe benefits of `elm-format`:\n - It makes code **easier to write**, because you never have to worry about minor formatting concerns while powering out new code.\n - It makes code **easier to read**, because there are no longer distracting minor stylistic differences between different code bases. As such, your brain can map more efficiently from source to mental model.\n - It makes code **easier to maintain**, because you can no longer have diffs related only to formatting; every diff necessarily involves a material change.\n - It **saves your team time** debating how to format things, because there is a standard tool that formats everything the same way.\n - It **saves you time** because you don't have to nitpick over formatting details of your code.\n\n\n## Usage\n\n```bash\nelm-format .  # Format all *.elm files in the current directory\nelm-format Main.elm  # Format a single file\nelm-format Main.elm --yes  # Overwrite the file without prompting\nelm-format src/ Main.elm  # Format the listed files and directories\nelm-format --help  # See other command line options\n```\n\n\n## Installation [![(latest version: 0.8.7)](https://img.shields.io/badge/version-0.8.7-orange.svg)](https://github.com/avh4/elm-format/releases/tag/0.8.7)\n\nTo install `elm-format`:\n\n```sh\nnpm install -g elm-format\n```\n\nor download the version appropriate for your OS from the [release page](https://github.com/avh4/elm-format/releases/tag/0.8.7),\nunzip it,\nand place `elm-format` or `elm-format.exe` (windows) on your `PATH`.\n\nYou must run `elm-format` from the directory that contains your `elm.json` (for Elm 0.19) or `elm-package.json` (for Elm 0.18),\nor else you must pass the appropriate `--elm-version=0.19`/`--elm-version=0.18` command line argument.\n\n\n## Editor integration\n\n<!-- Open-source editors will be listed before closed-source editors. -->\n\nFind your editor in the table below.  The recommended plugin for each editor is indicated with :trophy: (trophy emoji).\n\n<table>\n  <tr>\n    <th>Editor</th>\n    <th>Plugin</th>\n    <th>Installation</th>\n    <th><a href=\"https://github.com/avh4/elm-format/issues/104\">Formatting</a></th>\n    <th><a href=\"https://github.com/avh4/elm-format/issues/104\">Format on save</a></th>\n    <th><a href=\"https://github.com/avh4/elm-format/issues/104\">Configuration</a></th>\n    <th><a href=\"https://github.com/avh4/elm-format/issues/104\">Error handling</a></th>\n  </tr>\n  <tr>\n    <td rowspan=2><a href=\"https://atom.io/\">Atom</a></td>\n    <td>:trophy: <a href=\"https://atom.io/packages/elm-format\">atom-elm-format</a></td>\n    <td>:white_check_mark: <a href=\"#atom-elm-format-installation\">2 steps</a></td>\n    <td>:white_check_mark:</td>\n    <td>:white_check_mark:</td>\n    <td>:white_check_mark:</td>\n    <td>:warning: no installation instructions</td>\n  </tr>\n  <tr>\n    <!-- Atom -->\n    <td><a href=\"https://atom.io/packages/atom-beautify\">atom-beautify</a></td>\n    <td>:warning: <a href=\"#atom-beautify-installation\">3 steps</a></td>\n    <td>:white_check_mark:</td>\n    <td>:warning: requires configuration</td>\n    <td>:white_check_mark:</td>\n    <td>:white_check_mark:</td>\n  </tr>\n  <tr>\n    <td rowspan=1><a href=\"http://lighttable.com/\">Light Table</a></td>\n    <td>:trophy: <a href=\"https://github.com/rundis/elm-light\">elm-light</a></td>\n    <td>:warning: <a href=\"#elm-light-installation\">3 steps</a></td>\n    <td>:white_check_mark:</td>\n    <td>:warning: requires configuration</td>\n    <td>:white_check_mark:</td>\n    <td>:warning: no installation instructions</td>\n  </tr>\n  <tr>\n    <td rowspan=1>Vim</td>\n    <td>:trophy: <a href=\"https://github.com/ElmCast/elm-vim\">elm-vim</a></td>\n    <td>:x: <a href=\"#elm-vim-installation\">6 steps</a></td>\n    <td>:white_check_mark:</td>\n    <td>⚠️ requires configuration</td>\n    <td>:white_check_mark:</td>\n    <td>:x: no error message</td>\n  </tr>\n  <tr>\n    <td rowspan=1>Emacs</td>\n    <td>:trophy: <a href=\"https://github.com/jcollard/elm-mode\">elm-mode</a></td>\n    <td>:x: <a href=\"#elm-mode-installation\">4 steps</a></td>\n    <td>:white_check_mark:</td>\n    <td>:warning: requires configuration</td>\n    <td>:white_check_mark:</td>\n    <td>:warning: no installation instructions</td>\n  </tr>\n  <tr>\n    <td rowspan=1>Visual Studio Code</td>\n    <td>:trophy: <a href=\"https://marketplace.visualstudio.com/items?itemName=Elmtooling.elm-ls-vscode\">Elm Tooling</a></td>\n    <td>:warning: <a href=\"#visual-studio-code-installation\">3 steps</a></td>\n    <td>:white_check_mark:</td>\n    <td>:warning: requires configuration</td>\n    <td>:white_check_mark:</td>\n    <td>:x: uninformative error message</td>\n  </tr>\n  </tr>\n  <tr>\n    <td rowspan=1>Sublime Text</td>\n    <td>:trophy: <a href=\"https://packagecontrol.io/packages/Elm%20Language%20Support\">Elm Language Support</a></td>\n    <td>:white_check_mark: <a href=\"#sublime-text-installation\">2 steps</a></td>\n    <td>❔ TBD</td>\n    <td>:white_check_mark:</td>\n    <td>❔ TBD</td>\n    <td>❔ TBD</td>\n  </tr>\n  <tr>\n    <td rowspan=1>JetBrains (WebStorm, etc)</td>\n    <td>:trophy: <a href=\"https://klazuka.github.io/intellij-elm/\">intellij-elm</a></td>\n    <td>:warning: <a href=\"#jetbrains-installation\">4 steps</a></td>\n    <td>:white_check_mark:</td>\n    <td>:warning: requires configuration</td>\n    <td>:warning: requires configuration</td>\n    <td>❔ TBD</td>\n  </tr>\n  <tr>\n    <td rowspan=1>TextMate</td>\n    <td>:trophy: <a href=\"https://github.com/cmason/Elm.tmBundle\">Elm.tmbundle</a></td>\n    <td>:white_check_mark: <a href=\"https://github.com/cmason/Elm.tmBundle#installation\">2 steps</a></td>\n    <td>❔ TBD</td>\n    <td>❔ TBD</td>\n    <td>❔ TBD</td>\n    <td>❔ TBD</td>\n  </tr>\n</table>\n\n\n## Integration with other tools\n\nThese tools also integrate with elm-format:\n\n- [Prettier](https://prettier.io/) via [gicentre/prettier-plugin-elm](https://github.com/gicentre/prettier-plugin-elm)\n\n\n## Detailed installation instructions\n\nIf you can simplify or improve the installation instructions or add instructions for another editor, please [make a pull request](https://github.com/avh4/elm-format/edit/master/README.md).\nThe default behavior of `elm-format`-approved plugins is to format Elm files on save.\n\n\n### atom-elm-format installation\n\n1. Install elm-format\n1. Install atom-elm-format\n\n    ```\n    apm install elm-format\n    ```\n\n  or use the Atom package manager in Atom's settings\n\n\n### atom-beautify installation\n\n1. Install elm-format\n1. Install atom-beautify\n\n    ```\n    apm install atom-beautify\n    ```\n\n  or use the Atom package manager in Atom's settings\n\n1. Use `^⌥B` (`CTRL-ALT-B`) to format a file\n\n\n### elm-light installation\n\n1. Install elm-format\n1. Install the [elm-light plugin](https://github.com/rundis/elm-light) using the Light Table plugin manager\n1. To format on save, edit your user keymap by performing the following:\n  * Click File -> Settings -> User Keymap to open the user keymap.\n  * Copy the following line and paste it into your keymap. Anywhere is fine as long as it is whithin the outer brackets. Ensure to save the file.\n  ```clojure\n  [:editor.elm \"ctrl-s\" :save :elm-format :elm.lint]\n  ```\n  * Search for \"App: Reload keymaps\" in the Commands Window to apply the changes (or restart LightTable).\n\n\n### elm-mode installation\n\n1. Install elm-format\n1. If your Emacs has `package.el` (which is automatically the case for Emacs >= 24), you can install `elm-mode` from the package in [MELPA](http://melpa.milkbox.net/):\n\n    1. Ensure that you have added the MELPA source in your `~/.emacs.d/init.el`:\n\n        ```lisp\n        (require 'package)\n        (add-to-list 'package-archives '(\"melpa\" . \"http://melpa.org/packages/\"))\n        ```\n\n    1. Install elm-mode ([official instructions](https://github.com/jcollard/elm-mode#installation)): Use `M-x list-packages` and choose `elm-mode`.\n\n1. Add the following to your `~/.emacs.d/init.el`:\n\n    ```lisp\n    (add-hook 'elm-mode-hook 'elm-format-on-save-mode)\n    ```\n\n\n### elm-vim installation\n\n> If you are an advanced vim user and already have a preferred vim plugin installation method,\n> you may prefer to refer to the [official elm-vim installation instructions](https://github.com/ElmCast/elm-vim#install).\n> The instructions below are for those who need a step-by-step walkthrough of how to get the plugin set up.\n\n1. Install elm-format\n1. Install [vim-plug](https://github.com/junegunn/vim-plug) ([official instructions](https://github.com/junegunn/vim-plug#installation))\n   NOTE: if you are using neovim, you will need to refer to the official instructions.\n\n    1. Download vim-plug:\n\n        ```bash\n        curl -fLo ~/.vim/autoload/plug.vim --create-dirs \\\n            https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\n        ```\n\n   1. Make sure `~/.vimrc` exists and has a section like this:\n\n        ```vim\n        call plug#begin('~/.vim/plugged')\n        \" ... any active plugins\n        call plug#end()\n        ```\n\n1. Install elm-vim ([official instructions](https://github.com/ElmCast/elm-vim#install))\n\n    1. Add `Plug 'elmcast/elm-vim'` to the `plug#begin` plugin section in your `~/.vimrc`\n    1. Start `vim` and run `:PlugInstall`\n\n1. Add the following to your `~/.vimrc`:\n\n  ```\n  let g:elm_format_autosave = 1\n  ```\n\n\n### Visual Studio Code installation\n\n1. Install elm-format\n1. Install the extension [Elm Plugin for Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=Elmtooling.elm-ls-vscode).\n1. Configure the extension to format on save:\n\n    1. Find your `settings.json` file ([instructions](https://code.visualstudio.com/docs/getstarted/settings#_settings-file-locations)).\n    1. Add the following key-value pair to your `settings.json`:\n\n    ```json\n    \"[elm]\": {\n        \"editor.formatOnSave\": true\n    },\n    ```\n\n\n### Sublime Text installation\n\n1. Install elm-format\n1. Install the [Elm Language Support](https://packagecontrol.io/packages/Elm%20Language%20Support) package.\n\n\n### JetBrains installation\n\nThis is for WebStorm and other JetBrains IDEs like IntelliJ and PyCharm.\n\n1. Install elm-format\n1. Install the [intellij-elm plugin](https://klazuka.github.io/intellij-elm/)\n1. In IntelliJ, open Settings -> Languages & Frameworks -> Elm\n\n    1. Specify the path to elm-format (try the \"Auto Discover\" button first)\n    1. Check the \"Run when file saved?\" checkbox\n\n\n\n## Development info\n\nPlease note that this project is released with a [Contributor Code of Conduct](CODE_OF_CONDUCT.md). By participating in this project you agree to abide by its terms.\n\nUse the instructions below to get started.\nMore detailed information is available in [`./dev/Documentation/`](./dev/Documentation/).\n\n### Building from source\n\n1. Install Haskell ghcup following the instructions for your operating system: https://www.haskell.org/ghcup/\n\n```bash\n# check out the repo\ngit clone https://github.com/avh4/elm-format.git\ncd elm-format\n\n# initial setup\nghcup install ghc 9.4.4\nghcup set ghc 9.4.4\ncabal install hpack\n\n# build\ndev/build.sh -- build\n\n# run the built elm-format\n./_build/bin/elm-format/O0/elm-format\n```\n\nSee [`dev/Documentation`](dev/Documentation/README.md) for more contributor and build command documentation."
}
