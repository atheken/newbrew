{
  "name": "molten-vk",
  "full_name": "molten-vk",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Implementation of the Vulkan graphics and compute API on top of Metal",
  "license": "Apache-2.0",
  "homepage": "https://github.com/KhronosGroup/MoltenVK",
  "versions": {
    "stable": "1.2.4",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/KhronosGroup/MoltenVK/archive/v1.2.4.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "80a33cc9a9f83df3623e2ed9e21ac6226746d37021423a9722c7dde1668898f4"
    },
    "head": {
      "url": "https://github.com/KhronosGroup/MoltenVK.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/molten-vk/blobs/sha256:25742b628eb63d467c8e4ecd384b96ed26d0decf8bfb126f41c812fbf0cddb43",
          "sha256": "25742b628eb63d467c8e4ecd384b96ed26d0decf8bfb126f41c812fbf0cddb43"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/molten-vk/blobs/sha256:4c3266555cb1412eefb51845ac8b59214216e87e5bbcffa03477a3f648b7fd00",
          "sha256": "4c3266555cb1412eefb51845ac8b59214216e87e5bbcffa03477a3f648b7fd00"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/molten-vk/blobs/sha256:61fc85aa4b3809c50bf9e1352ee1fe54108a6a5aa21fe76511cd5cafabd7e1e2",
          "sha256": "61fc85aa4b3809c50bf9e1352ee1fe54108a6a5aa21fe76511cd5cafabd7e1e2"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/molten-vk/blobs/sha256:6d25f8838432d138f47eae90d474d7e844a89ebf9a9d358e67bfdc463d1f3871",
          "sha256": "6d25f8838432d138f47eae90d474d7e844a89ebf9a9d358e67bfdc463d1f3871"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/molten-vk/blobs/sha256:b4ad098f9a8552978a8d34f1e541f233c14aebe42ae5578cccb4cf6e46e47073",
          "sha256": "b4ad098f9a8552978a8d34f1e541f233c14aebe42ae5578cccb4cf6e46e47073"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/molten-vk/blobs/sha256:5e09ebc53cbfc448d4d6c27baca16e8b8ae91f8d8623e165a72f8f30690e0069",
          "sha256": "5e09ebc53cbfc448d4d6c27baca16e8b8ae91f8d8623e165a72f8f30690e0069"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake",
    "python@3.11"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [
    {
      "name": "xcode",
      "cask": null,
      "download": null,
      "version": "11.7",
      "contexts": [
        "build"
      ],
      "specs": [
        "stable",
        "head"
      ]
    },
    {
      "name": "macos",
      "cask": null,
      "download": null,
      "version": "10.12",
      "contexts": [],
      "specs": [
        "stable",
        "head"
      ]
    },
    {
      "name": "macos",
      "cask": null,
      "download": null,
      "version": null,
      "contexts": [],
      "specs": [
        "stable",
        "head"
      ]
    }
  ],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/molten-vk.rb",
  "ruby_source_checksum": {
    "sha256": "f99946697b7902dd5e0990d3d645a6334fa9c9f4a947cceeca107c4a3baaa3f8"
  },
  "date_added": "2019-05-23T22:54:29-04:00",
  "readme": "<a class=\"site-logo\" href=\"https://github.com/KhronosGroup/MoltenVK\" title=\"MoltenVK\">\n\t<img src=\"Docs/images/MoltenVK-Logo-Banner.png\" alt=\"MoltenVK\" style=\"width:256px;height:auto\">\n</a>\n\n\n\nMoltenVK\n========\n\nCopyright (c) 2015-2023 [The Brenwill Workshop Ltd.](http://www.brenwill.com)\n\n[comment]: # \"This document is written in Markdown (http://en.wikipedia.org/wiki/Markdown) format.\"\n[comment]: # \"For best results, use a Markdown reader.\"\n\n![Build Status](https://github.com/KhronosGroup/MoltenVK/workflows/CI/badge.svg)\n\n\nTable of Contents\n-----------------\n\n- [Introduction to **MoltenVK**](#intro)\n- [Developing Vulkan Applications on *macOS, iOS, tvOS, and visionOS*](#developing_vulkan)\n\t- [Using the *Vulkan SDK*](#sdk)\n\t- [Using MoltenVK Directly](#download)\n- [Fetching **MoltenVK** Source Code](#install)\n- [Building **MoltenVK**](#building)\n- [Running **MoltenVK** Demo Applications](#demos)\n- [Using **MoltenVK** in Your Application](#using)\n- [**MoltenVK** and *Vulkan* Compliance](#compliance)\n- [Getting Support](#support)\n- [Contributing to **MoltenVK** Development](#contributing)\n\n\n\n<a name=\"intro\"></a>\nIntroduction to MoltenVK\n------------------------\n\n**MoltenVK** is a layered implementation of [*Vulkan 1.2*](https://www.khronos.org/vulkan) \ngraphics and compute functionality, that is built on Apple's [*Metal*](https://developer.apple.com/metal) \ngraphics and compute framework on *macOS*, *iOS*, *tvOS*, and *visionOS*. **MoltenVK** allows \nyou to use *Vulkan* graphics and compute functionality to develop modern, cross-platform, \nhigh-performance graphical games and applications, and to run them across many platforms, \nincluding *macOS*, *iOS*, *tvOS*, *visionOS*, *Simulators*, and *Mac Catalyst* on *macOS 11.0+*, \nand all *Apple* architectures, including *Apple Silicon*.\n\n*Metal* uses a different shading language, the *Metal Shading Language (MSL)*, than \n*Vulkan*, which uses *SPIR-V*. **MoltenVK** automatically converts your *SPIR-V* shaders \nto their *MSL* equivalents.\n\nTo provide *Vulkan* capability to the *macOS*, *iOS*, *tvOS*, and *visionOS* platforms, \n**MoltenVK** uses *Apple's* publicly available API's, including *Metal*. **MoltenVK** \ndoes **_not_** use any private or undocumented API calls or features, so your app will \nbe compatible with all standard distribution channels, including *Apple's App Store*.\n\nThe **MoltenVK** runtime package contains two products:\n\n- **MoltenVK** is a implementation of an almost-complete subset of the \n  [*Vulkan 1.2*](https://www.khronos.org/vulkan) graphics and compute API.\n\n- **MoltenVKShaderConverter** converts *SPIR-V* shader code to *Metal Shading Language (MSL)*\n  shader code, and converts *GLSL* shader source code to *SPIR-V* shader code and/or\n  *Metal Shading Language (MSL)* shader code. The converter is embedded in the **MoltenVK** \n  runtime to automatically convert *SPIR-V* shaders to their *MSL* equivalents. In addition, \n  both the *SPIR-V* and *GLSL* converters are packaged into a stand-alone command-line \n  `MoltenVKShaderConverter` *macOS* tool for converting shaders at development time from the command line.\n\n\n\n<a name=\"developing_vulkan\"></a>\nDeveloping *Vulkan* Applications for *macOS, iOS, tvOS, and visionOS*\n---------------------------------------------------------------------\n\n<a name=\"sdk\"></a>\n### Using the *Vulkan SDK*\n\nThe recommended method for developing a *Vulkan* application for *macOS* is to use the \n[*Vulkan SDK*](https://vulkan.lunarg.com/sdk/home).\n\nThe *Vulkan SDK* includes a **MoltenVK** runtime library for *macOS*. *Vulkan* is a layered \narchitecture that allows applications to add additional functionality without modifying the \napplication itself. The *Validation Layers* included in the *Vulkan SDK* are an essential debugging\ntool for application developers because they identify inappropriate use of the *Vulkan API*. \nIf you are developing a *Vulkan* application for *macOS*, it is highly recommended that you use the\n[*Vulkan SDK*](https://vulkan.lunarg.com/sdk/home) and the **MoltenVK** library included in it.\nRefer to the *Vulkan SDK [Getting Started](https://vulkan.lunarg.com/doc/sdk/latest/mac/getting_started.html)* \ndocument for more info.\n\nBecause **MoltenVK** supports the `VK_KHR_portability_subset` extension, when using the \n*Vulkan Loader* from the *Vulkan SDK* to run **MoltenVK** on *macOS*, the *Vulkan Loader* \nwill only include **MoltenVK** `VkPhysicalDevices` in the list returned by \n`vkEnumeratePhysicalDevices()` if the `VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR` \nflag is enabled in `vkCreateInstance()`. See the description of the `VK_KHR_portability_enumeration` \nextension in the *Vulkan* specification for more information about the use of the \n`VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR` flag.\n\n<a name=\"download\"></a>\n### Using MoltenVK Directly\n\nIf you are developing a *Vulkan* application for *iOS*, *tvOS*, or *visionOS*, or are \ndeveloping a *Vulkan* application for *macOS* and want to use a different version or \nbuild of the **MoltenVK** runtime library than provided in the *macOS Vulkan SDK*, \nyou can access a pre-built MoltenVK binary library from the **MoltenVK** repository, by\n[selecting a repository commit from the list](https://github.com/KhronosGroup/MoltenVK/actions),\nand downloading the associated **MoltenVK** runtime library artifact.\n\nFinally, if you want a customized build of **MoltenVK**, you can follow the [instructions below](#install)\nto create a **MoltenVK** runtime library by fetching and building the **MoltenVK** source code.\n\nTo learn how to integrate the **MoltenVK** runtime library into a game or application,\nsee the [`MoltenVK_Runtime_UserGuide.md `](Docs/MoltenVK_Runtime_UserGuide.md) \ndocument in the `Docs` directory. \n\n\n\n<a name=\"install\"></a>\nFetching **MoltenVK** Source Code\n---------------------------------\n\nTo fetch **MoltenVK** source code, clone this `MoltenVK` repository, and then run the \n`fetchDependencies` script to retrieve and build several external open-source libraries \non which **MoltenVK** relies:\n\n1. Ensure you have `cmake` and `python3` installed:\n\n\t\tbrew install cmake\n\t\tbrew install python3\n\n   For faster dependency builds, you can also optionally install `ninja`:\n\n\t\tbrew install ninja\n\n2. Clone the `MoltenVK` repository:\n\n\t\tgit clone https://github.com/KhronosGroup/MoltenVK.git\n\n3. Retrieve and build the external libraries:\n\n\t\tcd MoltenVK\n\t\t./fetchDependencies [platform...]\n\nWhen running the `fetchDependencies` script, you must specify one or more platforms \nfor which to build the external libraries. The platform choices include: \n\n\t--all \n\t--macos \n\t--ios \n\t--iossim \n\t--maccat \n\t--tvos \n\t--tvossim\n\t--visionos \n\t--visionossim\n\nThe `visionos` and `visionossim` selections require Xcode 15+.\n\nYou can specify multiple of these selections. The result is a single `XCFramework` \nfor each external dependency library, with each `XCFramework` containing binaries for \neach of the requested platforms. \n\nThe `--all` selection is the same as entering all of the other platform choices, except \n`--visionos` and `--visionossim`, and will result in a single `XCFramework` for each \nexternal dependency library, with each `XCFramework` containing binaries for all supported \nplatforms and simulators. The `--visionos` and `--visionossim` selections must be invoked\nwith a separate invocation of `fetchDependencies`, because those selections require \nXcode 15+, and will cause a multi-platform build on older versions of Xcode to abort.\n\nRunning `fetchDependencies` repeatedly with different platforms will accumulate \ntargets in the `XCFramework`.\n\nFor more information about the external open-source libraries used by **MoltenVK**,\nsee the [`ExternalRevisions/README.md`](ExternalRevisions/README.md) document.\n\n\n<a name=\"building\"></a>\nBuilding **MoltenVK**\n-------------------\n\nDuring building, **MoltenVK** references the latest *Apple SDK* frameworks. To access these frameworks, \nand to avoid build errors, be sure to use the latest publicly available version of *Xcode*.\n\n> ***Note:*** *Xcode 14* introduced a new static linkage model that is not compatible with previous \nversions of *Xcode*. If you link to a `MoltenVK.xcframework` that was built with *Xcode 14* or later, \nalso use *Xcode 14* or later to link it to your app or game. \n>\n> If you need to use *Xcode 13* or earlier to link `MoltenVK.xcframework` to your app or game, \nfirst build **MoltenVK** with *Xcode 13* or earlier. \n>\n> Or, if you want to use *Xcode 14* or later to build **MoltenVK**, in order to be able to use the \nlatest *Metal* capabilities, but need to use *Xcode 13* or earlier to link `MoltenVK.xcframework` \nto your app or game, first add the value `-fno-objc-msgsend-selector-stubs` to the `OTHER_CFLAGS` \n*Xcode* build setting in the `MoltenVK.xcodeproj` and `MoltenVKShaderConverter.xcodeproj` *Xcode* \nprojects, build **MoltenVK** with *Xcode 14* or later, and then link `MoltenVK.xcframework` \nto your app or game using *Xcode 13* or earlier.\n\n**MoltenVK** can be built to support at least *macOS 10.11*, *iOS 9*, or *tvOS 9*, but the default \n_Xcode_ build settings in the included _Xcode_ projects are set to a minimum deployment target of  \n*macOS 10.13*, *iOS 11*, and *tvOS 11*, which are the oldest OS versions supported by the current \n_Xcode_ version. If you require support for earlier OS versions, modify the `MACOSX_DEPLOYMENT_TARGET`, \n`IPHONEOS_DEPLOYMENT_TARGET`, or `TVOS_DEPLOYMENT_TARGET` build settings in _Xcode_ before building **MoltenVK**.\n\n>***Note:*** To support `IOSurfaces` on *iOS* or *tvOS*, **MoltenVK**, and any app that uses \n**MoltenVK**, must be built with a minimum **iOS Deployment Target** (aka `IPHONEOS_DEPLOYMENT_TARGET `) \nbuild setting of `iOS 11.0` or greater, or a minimum **tvOS Deployment Target** (aka `TVOS_DEPLOYMENT_TARGET `) \nbuild setting of `tvOS 11.0` or greater.\n\nOnce built, the **MoltenVK** libraries can be run on *macOS*, *iOS*, *tvOS*, or *visionOS* devices \nthat support *Metal*,or on the *Xcode* *iOS Simulator*, *tvOS Simulator*, or *visionOS Simulator*.\n\n- At runtime, **MoltenVK** requires at least *macOS 10.11*, *iOS 9.0*, *tvOS 9.0*, \n  or *visionOS 1.0* (or *iOS 11* or *tvOS 11* if using `IOSurfaces`).\n- Information on *macOS* devices that are compatible with *Metal* can be found in \n  [this article](http://www.idownloadblog.com/2015/06/22/how-to-find-mac-el-capitan-metal-compatible).\n- Information on *iOS* devices that are compatible with *Metal* can be found in \n  [this article](https://developer.apple.com/library/content/documentation/DeviceInformation/Reference/iOSDeviceCompatibility/HardwareGPUInformation/HardwareGPUInformation.html).\n\nThe `MoltenVKPackaging.xcodeproj` *Xcode* project contains targets and schemes to build \nand package the entire **MoltenVK** runtime distribution package, or to build individual \n**MoltenVK** or **MoltenVKShaderConverter** components.\n\nTo build a **MoltenVK** runtime distribution package, suitable for testing and integrating into an app, \nopen `MoltenVKPackaging.xcodeproj` in *Xcode*, and use one of the following *Xcode Schemes*, depending\non whether you want a **_Release_** or **_Debug_** configuration, and whether you want to build for all \nplatforms, or just one platform (in **_Release_** configuration):\n\n- **MoltenVK Package** \n- **MoltenVK Package (Debug)** \n- **MoltenVK Package (macOS only)** \n- **MoltenVK Package (iOS only)**\n- **MoltenVK Package (tvOS only)**\n- **MoltenVK Package (visionOS only)**  _(requires Xcode 15+)_\n\nEach of these`MoltenVKPackaging.xcodeproj` *Xcode* project *Schemes* puts the resulting packages in the \n`Package` directory, creating it if necessary. This directory contains separate `Release` and `Debug` \ndirectories, holding the most recent **_Release_** and **_Debug_** builds, respectively.\n\nA separate `Latest` directory links to  the most recent build, regardless of whether it was a **_Release_** \nor **_Debug_** build. Effectively, the `Package/Latest` directory points to whichever of the `Package/Release` \nor `Package/Debug` directories was most recently updated.\n\nWith this packaging structure, you can follow the [instructions below](#using) to link your application \nto the **MoltenVK** libraries and frameworks in the `Package/Latest` directory, to provide the flexibility \nto test your app with either a **_Debug_** build, or a higher-performance **_Release_** build.\n\n\n### Building from the Command Line\n\nIf you prefer to build **MoltenVK** from the command line, or to include the activity in a larger build script,\nyou can do so by executing a command similar to the following command within the `MoltenVK` repository folder, \nand identifying one of the *Xcode Schemes* from the list above. For example, the following command will build \n**MoltenVK** in the **_Debug_** configuration for *macOS* only:\n\n\txcodebuild build -quiet -project MoltenVKPackaging.xcodeproj -scheme \"MoltenVK Package (macOS only)\" -configuration \"Debug\"\n\nAlternately, you can use the basic `Makefile` in the `MoltenVK` repository folder to build **MoltenVK** \nfrom the command line. The following `make` targets are provided:\n\n\tmake\n\tmake all\n\tmake macos\n\tmake ios\n\tmake iossim\n\tmake maccat\n\tmake tvos\n\tmake tvossim\n\tmake visionos\n\tmake visionossim\n\t\n\tmake all-debug\n\tmake macos-debug\n\tmake ios-debug\n\tmake iossim-debug\n\tmake maccat-debug\n\tmake tvos-debug\n\tmake tvossim-debug\n\tmake visionos-debug\n\tmake visionossim-debug\n\t\n\tmake clean\n\tmake install\n\n- Running `make` repeatedly with different targets will accumulate binaries for these different targets.\n- The `all` target executes all platform targets, except `visionos` and `visionossim`, as these require\n  Xcode 15+, and will abort a multi-platform build on older versions of Xcode.\n- The `all` target is the default target. Running `make` with no arguments is the same as running `make all`.\n- The `*-debug` targets build the binaries using the **_Debug_** configuration.\n- The `install` target will copy the most recently built `MoltenVK.xcframework` into the \n  `/Library/Frameworks` folder of your computer. Since `/Library/Frameworks` is protected, \n  you will generally need to run it as `sudo make install` and enter your password.\n  The `install` target just installs the built framework, it does not first build the framework.\n  You will first need to at least run `make macos` first.\n\nThe `make` targets all require that *Xcode* is installed on your system. \n\nBuilding from the command line creates the same `Package` folder structure described above when \nbuilding from within *Xcode*.\n\nWhen building from the command line, you can set any of the build settings documented \nin the `mvk_config.h` file for `MVKConfiguration`, by passing them in the command line, \nas in the following examples:\n\n\tmake MVK_CONFIG_LOG_LEVEL=0\nor\n\n\tmake macos MVK_CONFIG_USE_METAL_ARGUMENT_BUFFERS=2\n\n...etc.\n\n\n### Hiding Vulkan API Symbols\n\nYou can optionally build MoltenVK with the Vulkan API static call symbols (`vk*`) hidden,\nto avoid library linking conflicts when bound to a Vulkan Loader that also exports identical symbols.\n\nTo do so, when building MoltenVK, set the build setting `MVK_HIDE_VULKAN_SYMBOLS=1`.\nThis build setting can be set in the `MoltenVK.xcodeproj` *Xcode* project, \nor it can be included in any of the `make` build commands. For example:\n\n\tmake MVK_HIDE_VULKAN_SYMBOLS=1\nor\n\n\tmake macos MVK_HIDE_VULKAN_SYMBOLS=1\n\n...etc.\n\n\n<a name=\"demos\"></a>\nRunning **MoltenVK** Demo Applications\n--------------------------------------\n\nOnce you have compiled and built the **MoltenVK** runtime distribution package from this **MoltenVK** repository, \nas described in the [Building **MoltenVK**](#building) section, you can explore how **MoltenVK** provides *Vulkan* \nsupport on  *macOS*, *iOS*, and *tvOS* by investigating and running the demo application that is included in **MoltenVK**.\n\nThe **MoltenVK** _Cube_ demo app is located in the `Demos` folder. The demo app is available as an *Xcode* project.\nTo review and run the included demo app, open the `Demos/Demos.xcworkspace` workspace in *Xcode*.\n\nPlease read the [`Demos/README.md`](Demos/README.md) document for a description and instructions for running the \nincluded *Cube* demo app, and for external links to more sophisticated demo applications that can be run on **MoltenVK**.\n\n\n\n<a name=\"using\"></a>\nUsing **MoltenVK** in Your Application\n--------------------------------------\n\nOnce you have compiled and built the **MoltenVK** runtime distribution package from this **MoltenVK** repository, \nas described in the [Building **MoltenVK**](#building) section, follow the instructions in the Installation \nsection of the [`Docs/MoltenVK_Runtime_UserGuide.md`](Docs/MoltenVK_Runtime_UserGuide.md#install) document \nin the `Docs` directory, to link the **MoltenVK** libraries and frameworks to your application.\n\nThe runtime distribution package in the `Package/Latest` directory is a stand-alone package, and you can copy \nthe contents of that directory out of this **MoltenVK** repository into your own application building environment.\n\n\n\n<a name=\"compliance\"></a>\n\n**MoltenVK** and *Vulkan* Compliance\n------------------------------------\n\n**MoltenVK** is designed to be an implementation of a *Vulkan 1.2* subset that runs on *macOS*, *iOS*, \n*tvOS*, and *visionOS* platforms by mapping *Vulkan* capability to native *Metal* capability.\n\nThe fundamental design and development goal of **MoltenVK** is to provide this capability in a way that \nis both maximally compliant with the *Vulkan 1.2* specification, and maximally  performant.\n\nSuch compliance and performance is inherently affected by the capability available through *Metal*, \nas the native graphics driver on *macOS*, *iOS*, *tvOS*, and *visionOS* platforms. *Vulkan* \ncompliance may fall into one of the following categories:\n\n- Direct mapping between *Vulkan* capabilities and *Metal* capabilities. Within **MoltenVK**, the vast\n  majority of *Vulkan* capability is the result of this type of direct mapping. \n  \n- Synthesized compliance through alternate implementation. A small amount of capability is provided using\n  this mechanism, such as via an extra render or compute shader stage.\n\n- Non-compliance. This appears where the capabilities of *Vulkan* and *Metal* are sufficiently different, that\n  there is no practical, or reasonably performant, mechanism to implement a *Vulkan* capability in *Metal*. \n  Because of design differences between *Vulkan* and *Metal*, a very small amount of capability falls into this \n  category, and at present **MoltenVK** is **_not_** fully compliant with the *Vulkan* specification. A list of \n  known limitations is documented in the [`MoltenVK_Runtime_UserGuide.md`](Docs/MoltenVK_Runtime_UserGuide.md#limitations) \n  document in the `Docs` directory.\n\nThe **MoltenVK** development team welcomes you to [post Issues](https://github.com/KhronosGroup/MoltenVK/issues) \nof non-compliance, and engage in discussions about how compliance can be improved, and non-compliant features can \nbe implemented or worked around.\n\n**MoltenVK** is a key component of the \n[*Khronos Vulkan Portability Initiative*](https://www.khronos.org/vulkan/portability-initiative), \nwhose intention is to provide specifications, resources, and tools to allow developers to understand and design \ntheir *Vulkan* apps for maximum cross-platform compatibility and portability, including on platforms, such as \n*macOS*, *iOS*, *tvOS*, and *visionOS*, where a native *Vulkan* driver is not available. \n\n\n\n<a name=\"support\"></a>\n\nGetting Support\n----------------\n\n- If you have a question about using **MoltenVK**, you can ask it in \n  [*MoltenVK Discussions*](https://github.com/KhronosGroup/MoltenVK/discussions). \n  This forum is monitored by **MoltenVK** contributors and users.\n\n- If you encounter an issue with the behavior of **MoltenVK**, or want to request an enhancement, \n  you can report it in the [*MoltenVK Issues List*](https://github.com/KhronosGroup/MoltenVK/issues).\n\n- If you encounter an issue with the *Vulkan SDK*, including the *Validation Layers*, you can report it in the \n  [*Vulkan SDK Issues List*](https://vulkan.lunarg.com/issue/home).\n\n- If you explore **MoltenVK** and determine that it does not meet your requirements at this time, we would appreciate\n  hearing why that is so, in [*MoltenVK Discussions*](https://github.com/KhronosGroup/MoltenVK/discussions). \n  The goal of **MoltenVK** is to increase the value of *Vulkan* as a true cross-platform ecosystem, by providing \n  *Vulkan* on *Apple* platforms. Hearing why this is currently not working for you will help us in that goal.\n\n\n\n<a name=\"contributing\"></a>\n\nContributing to **MoltenVK** Development\n----------------------------------------\n\nAs a public open-source project, **MoltenVK** benefits from code contributions from a wide range of developers, \nand we encourage you to get involved and contribute code to this **MoltenVK** repository.\n\nTo contribute your code, submit a [Pull Request](https://github.com/KhronosGroup/MoltenVK/pulls) \nto this repository. The first time you do this, you will be asked to agree to the **MoltenVK** \n[Contributor License Agreement](https://cla-assistant.io/KhronosGroup/MoltenVK).\n\n\n### Licensing\n\n**MoltenVK** is licensed under the Apache 2.0 license. All new source code files should include a \ncopyright header at the top, containing your authorship copyright and the Apache 2.0 licensing stub. \nYou may copy the text from an existing source code file as a template.\n\nThe Apache 2.0 license guarantees that code in the **MoltenVK** repository is free of Intellectual Property\nencumbrances. In submitting code to this repository, you are agreeing that the code is free of any Intellectual \nProperty claims.  \n\n\n### *Vulkan* Validation\n\nDespite running on top of *Metal*, **MoltenVK** operates as a *Vulkan* core layer. As such, as per the \nerror handling guidelines of the [*Vulkan* specification](https://www.khronos.org/registry/vulkan/specs/1.2/html/vkspec.html#fundamentals-errors), **MoltenVK** should not perform *Vulkan* validation. When adding functionality \nto **MoltenVK**, avoid adding unnecessary validation code.\n\nValidation and error generation **_is_** appropriate within **MoltenVK** in cases where **MoltenVK** deviates \nfrom behavior defined by the *Vulkan* specification. This most commonly occurs when required behavior cannot \nbe mapped to functionality available within *Metal*. In that situation, it is important to provide feedback to\nthe application developer to that effect, by performing the necessary validation, and reporting an error.\n\nCurrently, there is some excess *Vulkan* validation and error reporting code within **MoltenVK**, added before \nthis guideline was introduced. You are encouraged to remove such code if you encounter it while performing other \n**MoltenVK** development. Do not remove validation and error reporting code that is covering a deviation in \nbehavior from the *Vulkan* specification.\n\n\n### Memory Management\n\n*Metal*, and other *Objective-C* objects in *Apple's SDK* frameworks, use reference counting for memory management. \nAs a contributor to **MoltenVK**, when instantiating *Objective-C* objects, it is important that you do not rely on \nthe app providing *autorelease pools* to do memory management for you. Because many *Vulkan* games and apps may be \nported from other platforms, they will often not automatically include autorelease pools in their threading models.\n\nAs a contributor to **MoltenVK**, avoid the use of the *Metal* `autorelease` method, or any object *Metal* creation \nmethods that imply internal use of `autorelease`, (eg- `[NSString stringWithFormat: ]`, etc). Instead, favor object \ncreation methods that return a retained object (eg- `[[NSString alloc] initWithFormat: ]`, etc), and manually track \nand release those objects. If you need to use autoreleased objects, wrap your code in an `@autoreleasepool {...}` block.\n\n\n### Code Formatting\n\nWhen contributing code, please honour the code formatting style found in existing **MoltenVK** source code.\nIn future, this will formally be enforced using `clang-format`."
}
