{
  "name": "dpp",
  "full_name": "dpp",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Directly include C headers in D source code",
  "license": "BSL-1.0",
  "homepage": "https://github.com/atilaneves/dpp",
  "versions": {
    "stable": "0.5.5",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/atilaneves/dpp.git",
      "tag": "v0.5.5",
      "revision": "c74291190d5fe81ff23ec1d21290fd7047c256a9",
      "checksum": null
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dpp/blobs/sha256:8200b30a5c22f48a57b405e8ce590e290cffd8f07fbc502b6bb18ecc358bb2f1",
          "sha256": "8200b30a5c22f48a57b405e8ce590e290cffd8f07fbc502b6bb18ecc358bb2f1"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dpp/blobs/sha256:f2ecf24bc0fcff5d4096990f971d4e983bc35d359d312e89123da7d886d14123",
          "sha256": "f2ecf24bc0fcff5d4096990f971d4e983bc35d359d312e89123da7d886d14123"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dpp/blobs/sha256:db600cf00396d5916f3ef95dfa5a110fabf4aa1b002104ca00c0a3eb844b3954",
          "sha256": "db600cf00396d5916f3ef95dfa5a110fabf4aa1b002104ca00c0a3eb844b3954"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dpp/blobs/sha256:b9cad2da102dbb1911107e26b89c57259aa9ea3dee09049e3dcbceb87dc8f7b1",
          "sha256": "b9cad2da102dbb1911107e26b89c57259aa9ea3dee09049e3dcbceb87dc8f7b1"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dpp/blobs/sha256:b586c87b08bc7168af973c9ab28f3b61cce69ad71b3274b5032959a0cdb099a9",
          "sha256": "b586c87b08bc7168af973c9ab28f3b61cce69ad71b3274b5032959a0cdb099a9"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dpp/blobs/sha256:fefa9a0975985b6a9a7b5df27279df35382f44b091ead310ac898bb0fabc515a",
          "sha256": "fefa9a0975985b6a9a7b5df27279df35382f44b091ead310ac898bb0fabc515a"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dpp/blobs/sha256:b01ee202e3bf70bb66304fc20566d2140a565daeb65a6f4386babc2fcb065990",
          "sha256": "b01ee202e3bf70bb66304fc20566d2140a565daeb65a6f4386babc2fcb065990"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "dtools",
    "dub",
    "ldc"
  ],
  "dependencies": [],
  "test_dependencies": [
    "ldc"
  ],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "llvm"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/dpp.rb",
  "ruby_source_checksum": {
    "sha256": "b117108b5c4bdde8e1a69694ebf33a58c15e748481644d44a3da09d37b64e1a0"
  },
  "date_added": "2022-03-01T06:18:22+00:00",
  "readme": "d++ - #include C and C++ headers in D files\n====================================================\n\n[![CI](https://github.com/atilaneves/dpp/actions/workflows/d.yml/badge.svg)](https://github.com/atilaneves/dpp/actions/workflows/d.yml)\n[![Coverage](https://codecov.io/gh/atilaneves/dpp/branch/master/graph/badge.svg)](https://codecov.io/gh/atilaneves/dpp)\n[![Open on run.dlang.io](https://img.shields.io/badge/run.dlang.io-open-blue.svg)](https://run.dlang.io/is/JK0CAf)\n\nGoal\n----\n\nTo directly `#include` C and C++ headers in [D](https://dlang.org) files and have the same semantics and ease-of-use\nas if the file had been `#included` from C or C++ themselves. Warts and all, meaning that C `enum` declarations\nwill pollute the global namespace, just as it does \"back home\".\n\nThis work was supported by [Symmetry Investments](http://symmetryinvestments.com/).\n\nExample\n-------\n\n```c\n// c.h\n#ifndef C_H\n#define C_H\n\n#define FOO_ID(x) (x*3)\n\nint twice(int i);\n\n#endif\n```\n\n```c\n// c.c\nint twice(int i) { return i * 2; }\n```\n\n```d\n// foo.dpp\n#include \"c.h\"\nvoid main() {\n    import std.stdio;\n    writeln(twice(FOO_ID(5)));  // yes, it's using a C macro here!\n}\n```\n\nAt the shell:\n\n```\n$ gcc -c c.c\n$ d++ foo.dpp c.o\n$ ./foo\n$ 30\n```\n\n[![Open on run.dlang.io](https://img.shields.io/badge/run.dlang.io-open-blue.svg)](https://run.dlang.io/is/WwpvhT)\n\nC++ support\n-----------\n\nC++ support is currently limited. Including any header from the C++\nstandard library is unlikely to work.  Simpler headers might, the\nprobability rising with how similar the C++ dialect used is to\nC. Despite that, dpp currently does try to translate classes,\ntemplates and operator overloading. It's unlikely to work on\nproduction headers without judicious use of the `--ignore-cursor` and\n`--ignore-namespace` command-line options.  When using these, the user\ncan then define their own versions of problematic declarations such as\n`std::vector`.\n\nLimitations\n-----------\n\n* Only known to work on Linux with libclang versions 6 and up. It might work in different conditions.\n* When used on multiple files, there might be problems with duplicate definitions depending on imports.\n  It is recommended to put all `#include`s in one `.dpp` file and import the resulting D module.\n* Not currently able to translate Linux kernel headers.\n\nSuccess stories\n--------------\n\nKnown project headers whose translations produce D code that compiles:\n\n* nanomsg/nn.h, nanomsg/pubsub.h\n* curl/curl.h\n* stdio.h, stdlib.h\n* pthread.h\n* julia.h\n* xlsxwriter.h\n* libvirt/libvirt.h, libvirt/virterror.h\n* libzfs\n* openssl/ssl.h\n* imapfilter.h\n* libetpan/libetpan.h\n* Python.h\n\nCompilation however doesn't guarantee they work as expected and YMMV. Please consult the examples.\n\n\nCommand-line arguments\n----------------------\n\nIt is likely that the header or headers need `-I` flags to indicate paths to be searched,\nboth by this executable and by libclang itself. The `--include-path` option can be\nused for that, once for each such path.\n\nUse `-h` or `--help` to learn more.\n\n\nDetails\n-------\n\n`d++` is an executable that wraps a D compiler such as dmd (the default) so that D files with `#include`\ndirectives can be compiled.\n\nIt takes a `.dpp` file and outputs a valid D file that can be compiled. The original can't since D\nhas no preprocessor, so the `.dpp` file is \"quasi-D\", or \"D with #include directives\".\nThe only supported C preprocessor directive is `#include`.\n\nThe input `.dpp` file may also use C preprocessor macros defined in the file(s) it `#include`s, just as a C/C++\nprogram would (see the example above). It may not, however, define macros of its own.\n\n`d++` goes through the input file line-by-line, and upon encountering an `#include` directive, parses\nthe file to be included with libclang, loops over the definitions of data structures and functions\ntherein and expands in-place the relevant D translations. e.g. if a header contains:\n\n```c\nuint16_t foo(uint32_t a);\n```\n\nThe output file will contain:\n\n```d\nushort foo(uint a);\n```\n\nd++ will also enclose each one of these original `#include` directives with either\n`extern(C) {}` or `extern(C++) {}` depending on the header file name and/or command-line options.\n\nAs part of expanding the `#include`, and as well as translating declarations, d++ will also\ninsert text to define macros originally defined in the `#include`d translation unit so that these\nmacros can be used by the D program. The reason for this is that nearly every non-trivial\nC API requires the preprocessor to use properly. It is possible to mimic this usage in D\nwith enums and CTFE, but the result is not guaranteed to be the same. The only way to use a\nC or C++ API as it was intended is by leveraging the preprocessor.\n\nTrivial literal macros however(e.g. `#define THE_ANSWER 42`) are translated as\nD enums.\n\nAs a final pass before writing the output D file, d++ will run the C\npreprocessor (currently the cpp binary installed on the system) on the\nintermediary result of expanding all the `#include` directives so that\nany used macros are expanded, and the result is a D file that can be compiled.\n\nIn this fashion a user can write code that's not-quite-D-but-nearly that can \"natively\"\ncall into a C/C++ API by `#include`ing the appropriate header(s).\n\n\nTranslation notes\n----------------\n\n### enum\n\nFor convenience, this declaration:\n\n```c\nenum Enum { foo, bar, baz }\n```\n\nWill generate this translation:\n\n```d\nenum Enum { foo, bar, baz }\nenum foo = Enum.foo;\nenum bar = Enum.bar;\nenum baz = Enum.baz;\n```\n\nThis is to mimic C semantics with regards to the global namespace whilst also allowing\none to, say, reflect on the enum type.\n\n\n### Renaming enums\n\nThere is the ability to rename C enums. With the following C definition:\n\n```c\nenum FancyWidget { Widget_foo,  Widget_bar }\n```\n\nThen adding this to your .dpp file after the `#include` directive:\n\n```d\nmixin dpp.EnumD!(\"Widget\",      // the name of the new D enum\n                 FancyWidget,   // the name of the original C enum\n                 \"Widget_\");    // the prefix to cut out\n```\n\nwill yield this translation:\n\n```d\nenum Widget { foo, bar }\n```\n\n\n\n### Names of structs, enums and unions\n\nC has a different namespace for the aforementioned user-defined types. As such, this is legal C:\n\n```c\nstruct foo { int i; };\nextern int foo;\n```\n\nThe D translations just use the short name for these aggregates, and if there is a name collision\nwith a variable or function, the latter two get renamed and have a `pragma(mangle)` added to\navoid linker failures:\n\n\n```d\nstruct foo { int i; }\npragma(mangle, \"foo\") extern export __gshared int foo_;\n```\n\n### Functions or variables with a name that is a D keyword\n\nSimilary to name collisions with aggregates, they get an underscore\nappended and a `pragma(mangle)` added so they link:\n\n```c\nvoid debug(const char* msg);\n```\n\nBecomes:\n\n\n```d\npragma(mangle, \"debug\")\nvoid debug_(const(char)*);\n```\n\n\nBuild Instructions\n------------------\n```\ndub install dpp\n```\n\nAfter the instructions for your OS (see below), you can use this commands to run dpp:\n\n```\ndub run dpp -- yoursourcefilenamehere.dpp\n```\n\nNote: for a reproducible and cross-platform build environment, you can run [setup-cpp](https://github.com/aminya/setup-cpp) with `--llvm=11.0.0`. This will set up LLVM 11.0.0 and the proper environment variables.\n\n### Windows\n\nInstall [LLVM](https://github.com/llvm/llvm-project/releases/download/llvmorg-12.0.0/LLVM-12.0.0-win64.exe) into `C:\\Program Files\\LLVM\\`, making sure to tick the \"Add LLVM to the system PATH for all users\" option.\n\nIf `libclang.lib` was not found, put the `lib` folder of the llvm directory on the PATH.\n\n### Linux\n\nIf `libclang` is not installed, install `libclang-10-dev` with apt: `sudo apt-get install -y -qq libclang-10-dev`\n\nIf `libclang.so` was not found, link it using the following command (adjust the installation path and the llvm version):\n```\nsudo ln -s path_to_llvm/lib/libclang-12.so.1 /lib/x86_64-linux-gnu/libclang.so\n```\n\n### MacOS\n\nIf using an external LLVM installation, add these to your `~/.bash_profile`\n\n```bash\nLLVM_PATH=\"/usr/local/opt/llvm/\" # or any other path\nLLVM_VERSION=\"11.0.0\"\nexport PATH=\"$LLVM_PATH:$PATH\"\nexport SDKROOT=$(xcrun --sdk macosx --show-sdk-path)\nexport LD_LIBRARY_PATH=\"$LLVM_PATH/lib/:$LD_LIBRARY_PATH\"\nexport DYLD_LIBRARY_PATH=\"$LLVM_PATH/lib/:$DYLD_LIBRARY_PATH\"\nexport CPATH=\"$LLVM_PATH/lib/clang/$LLVM_VERSION/include/\"\nexport LDFLAGS=\"-L$LLVM_PATH/lib\"\nexport CPPFLAGS=\"-I$LLVM_PATH/include\"\nexport CC=\"$LLVM_PATH/bin/clang\"\nexport CXX=\"$LLVM_PATH/bin/clang++\"\n```\n\n(adjust the clang version and the external llvm installation path.)\n\nThen run `source ~/.bash_profile`\n\nIf `libclang.dylib` was not found, link it using the following command (adjust the installation path):\n```\nln -s path_to_llvm/lib/libclang.dylib /usr/local/opt/llvm/lib/libclang.dylib\n```"
}
