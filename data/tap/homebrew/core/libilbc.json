{
  "name": "libilbc",
  "full_name": "libilbc",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Packaged version of iLBC codec from the WebRTC project",
  "license": "BSD-3-Clause",
  "homepage": "https://github.com/TimothyGu/libilbc",
  "versions": {
    "stable": "3.0.4",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/TimothyGu/libilbc/releases/download/v3.0.4/libilbc-3.0.4.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "6820081a5fc58f86c119890f62cac53f957adb40d580761947a0871cea5e728f"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libilbc/blobs/sha256:36774c3a7db279a6932326411a82cd1ffe92e66ee0fead069d985e0e17231309",
          "sha256": "36774c3a7db279a6932326411a82cd1ffe92e66ee0fead069d985e0e17231309"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libilbc/blobs/sha256:62792538776c6c61167769ce53ed0998c849b89ca9cc5ade0261be739bd8bf60",
          "sha256": "62792538776c6c61167769ce53ed0998c849b89ca9cc5ade0261be739bd8bf60"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libilbc/blobs/sha256:7b07dbf92042eb0f0692aec0381561eaa0a9c649347fd321ebf74cd22994813d",
          "sha256": "7b07dbf92042eb0f0692aec0381561eaa0a9c649347fd321ebf74cd22994813d"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libilbc/blobs/sha256:d6cb8d5175be0fbd28cfd5a123685b17fdc5da1aca7720b15bc6d0e9bc28ae47",
          "sha256": "d6cb8d5175be0fbd28cfd5a123685b17fdc5da1aca7720b15bc6d0e9bc28ae47"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libilbc/blobs/sha256:a60c72751ea180c155b7994fd71ef068118b74665a3199e61a0b4adda27c64ad",
          "sha256": "a60c72751ea180c155b7994fd71ef068118b74665a3199e61a0b4adda27c64ad"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libilbc/blobs/sha256:affe65f4320a2940b69ec54687be6c5387e51d79f3fd418a5dc42924c99eeee0",
          "sha256": "affe65f4320a2940b69ec54687be6c5387e51d79f3fd418a5dc42924c99eeee0"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libilbc/blobs/sha256:b75ace51e88894a45e406c7fbe4b4cafc06932b0e5ce90480fdee203aa9ede83",
          "sha256": "b75ace51e88894a45e406c7fbe4b4cafc06932b0e5ce90480fdee203aa9ede83"
        },
        "mojave": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libilbc/blobs/sha256:496492e1aaecb1b41ba83eb033b75777ca08333edbb9e67bef23c933b5847cd5",
          "sha256": "496492e1aaecb1b41ba83eb033b75777ca08333edbb9e67bef23c933b5847cd5"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/libilbc/blobs/sha256:11914a90369fc2c32d1373c3c8d5a98275c44de6e70301c23067b67310d6bba0",
          "sha256": "11914a90369fc2c32d1373c3c8d5a98275c44de6e70301c23067b67310d6bba0"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/libilbc.rb",
  "ruby_source_checksum": {
    "sha256": "817ece0f505c91b0cbee61192fa660bce7f448ee99764a4ada328980ddb868a7"
  },
  "date_added": "2015-12-25T20:13:58+00:00",
  "readme": "libilbc\n=======\n\n![Build Status](https://github.com/TimothyGu/libilbc/workflows/CMake/badge.svg)\n\nThis is a packaging-friendly copy of the iLBC codec from the WebRTC project. It\nprovides a base for distribution packages and can be used as drop-in\nreplacement for the code from RFC 3591.\n\nCompiling\n---------\n\nlibilbc requires the following to compile:\n\n- A C compiler\n- A C++ compiler supporting C++14 or later\n- [CMake](https://cmake.org/)\n- A [CMake-compatible build system][cmake-generators];\n  some options are:\n  - [Ninja](https://ninja-build.org/) (recommended)\n  - [GNU Make](https://www.gnu.org/software/make/) for Unix-like systems\n  - [Visual Studio](https://visualstudio.microsoft.com/) for Windows\n\n[Abseil Common C++ Libraries](https://github.com/abseil/abseil-cpp) is also a\nprerequisite, but it comes bundled with release tarballs (or provided as a\nsubmodule for Git users) so there's no need to install it separately.\n\n0. If you are not using a release tarball, you can clone this repo with:\n   ```sh\n   git clone --depth=1 https://github.com/TimothyGu/libilbc.git\n   git submodule update --init\n   ```\n\n1. **[Generate build files][cmake-generate]:** `cmake .`\n\n   If you instead want a static library, instead run `cmake\n   -DBUILD_SHARED_LIBS=OFF .` per [CMake docs][BUILD_SHARED_LIBS].\n\n2. **[Build it][cmake-build]:** `cmake --build .`\n\n   You should now get a library file (.so, .dylib, .dll, .a, or .lib depending\n   on your platform) as well as a ilbc\\_test program.\n\n3. (optional) **Try it out.** This repo comes a sample.pcm audio file that is\n   in a form ilbc\\_test accepts (raw signed 16-bit PCM, mono, sampled at 8000\n   Hz). The following command encodes sample.pcm to encoded.ilbc, and then\n   decode it again to decoded.pcm.\n   ```sh\n   ./ilbc_test 20 sample.pcm encoded.ilbc decoded.pcm\n   ```\n   You can try to play the before/after audio with [mpv][]:\n   ```sh\n   mpv --demuxer=rawaudio --demuxer-rawaudio-rate=8000 --demuxer-rawaudio-channels=1 sample.pcm\n   mpv --demuxer=rawaudio --demuxer-rawaudio-rate=8000 --demuxer-rawaudio-channels=1 decoded.pcm\n   ```\n\n   You can create your own sample file too. The command I used was:\n   ```sh\n   ffmpeg -f pulse -i default -f s16le -filter:a \"pan=1|c0=c0+c1,aresample=8000\" sample.pcm\n   ```\n   which gets the audio input from Linux's PulseAudio, and then remixes and\n   resamples it.\n\n4. (optional; for Unix-like systems) **Installing.** If you want to install the\n   library and the ilbc\\_test utility to system locations, run either `ninja\n   install` or `make install` depending on which build system you chose (or\n   [`cmake --install .`][cmake-install] on CMake 3.15 or later). By default,\n   the library gets installed to /usr/local; to tweak the install prefix, set\n   `-DCMAKE_INSTALL_PREFIX=<path>` when running `cmake`; see\n   [docs][CMAKE_INSTALL_PREFIX].\n\nSupported platforms\n-------------------\n\nThe following platforms are regularly run on CI and are thus supported:\n\n* Linux\n  * ARMv5â€“7 (32-bit; soft and hard float)\n  * ARMv8 (64-bit)\n  * PowerPC (little-endian) (64-bit)\n  * MIPS (little-endian) (64-bit)\n  * x86-64\n* macOS on x86-64\n* Windows\n  * x86-64 with Visual C++ 2019\n  * x86-64 with [clang-cl](https://clang.llvm.org/docs/UsersManual.html#clang-cl)\n\nThe following architectures get cross-compiled on CI and thus probably work.\nBut we don't know for sure if it actually runs:\n\n* Linux\n  * MIPS (little-endian) (32-bit)\n  * PowerPC (big-endian) (32/64-bit)\n  * RISC-V (64-bit)\n  * SPARC (64-bit)\n* Windows\n  * ARM64 with Visual C++ 2019\n\nThese platforms are known to _not_ work:\n\n* Linux\n  * MIPS (big-endian) (32-bit)\n* Windows\n  * ARM with Visual C++ 2019 (32-bit)\n\nAll other platforms _may_ work out of the box. If they don't, a simple change\nto rtc\\_base/system/arch.h will most likely fix it up.\n\nFor packagers\n-------------\n\nThere are some additional CMake options available to the fine folks packaging\nthis library. For the most part, we use the\n[GNUInstallDirs](https://cmake.org/cmake/help/latest/module/GNUInstallDirs.html)\nCMake module to determine where things are installed, which should generally do\nthe right thing. If it doesn't, try:\n\n- `-DCMAKE_INSTALL_PREFIX=<dir>` for the prefix (usually defaults to\n  /usr/local)\n- `-DCMAKE_INSTALL_BINDIR=<dir>` for executables and Windows DLLs\n- `-DCMAKE_INSTALL_DOCDIR=<dir>` for various Markdown documentation files\n- `-DCMAKE_INSTALL_INCLUDEDIR=<dir>` for C headers\n- `-DCMAKE_INSTALL_LIBDIR=<dir>` for static libraries (`.a`), Windows DLL\n  import libraries (`.lib`), and non-Windows dynamic libraries (`.so` and\n  `.dylib`)\n\n[BUILD_SHARED_LIBS]: https://cmake.org/cmake/help/latest/variable/BUILD_SHARED_LIBS.html\n[cmake-build]: https://cmake.org/cmake/help/latest/manual/cmake.1.html#build-a-project\n[cmake-install]: https://cmake.org/cmake/help/latest/manual/cmake.1.html#install-a-project\n[cmake-generate]: https://cmake.org/cmake/help/latest/manual/cmake.1.html#generate-a-project-buildsystem\n[cmake-generators]: https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html\n[CMAKE_INSTALL_PREFIX]: https://cmake.org/cmake/help/latest/variable/CMAKE_INSTALL_PREFIX.html\n[GNUInstallDirs]: https://cmake.org/cmake/help/latest/module/GNUInstallDirs.html\n[mpv]: https://mpv.io/"
}
