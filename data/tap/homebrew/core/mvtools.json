{
  "name": "mvtools",
  "full_name": "mvtools",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Filters for motion estimation and compensation",
  "license": "GPL-2.0",
  "homepage": "https://github.com/dubhater/vapoursynth-mvtools",
  "versions": {
    "stable": "23",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/dubhater/vapoursynth-mvtools/archive/v23.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "3b5fdad2b52a2525764510a04af01eab3bc5e8fe6a02aba44b78955887a47d44"
    },
    "head": {
      "url": "https://github.com/dubhater/vapoursynth-mvtools.git",
      "branch": "master"
    }
  },
  "revision": 1,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/mvtools/blobs/sha256:62463942e374b3ee49958f63a3e5bce607c9b82dc71857f300b95f531b292bb3",
          "sha256": "62463942e374b3ee49958f63a3e5bce607c9b82dc71857f300b95f531b292bb3"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/mvtools/blobs/sha256:3bfb4e19aa3c81d1b1b0b1c0fe00f68a58aece15f10f14858081f505fb417922",
          "sha256": "3bfb4e19aa3c81d1b1b0b1c0fe00f68a58aece15f10f14858081f505fb417922"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/mvtools/blobs/sha256:7d4b6d61679ece8fcfb83a9a754e4263c7d94bdb0e2978a574d07af472743995",
          "sha256": "7d4b6d61679ece8fcfb83a9a754e4263c7d94bdb0e2978a574d07af472743995"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/mvtools/blobs/sha256:2af3b406d3e75883646d39fb31f827c7b1bf7efd63fb517705500233c56e3388",
          "sha256": "2af3b406d3e75883646d39fb31f827c7b1bf7efd63fb517705500233c56e3388"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/mvtools/blobs/sha256:b52650498b19ccf12a79d4334c7e21255fe4e79b987c3259772de047ac679b58",
          "sha256": "b52650498b19ccf12a79d4334c7e21255fe4e79b987c3259772de047ac679b58"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/mvtools/blobs/sha256:5bc809a1aadf67ec0a0b962a773b87c9c314780e919b2c56fd0904e898e08c57",
          "sha256": "5bc809a1aadf67ec0a0b962a773b87c9c314780e919b2c56fd0904e898e08c57"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mvtools/blobs/sha256:bb7513fa52143b1835cbd909417dc89e4dd52da381ecc0dd33e27699779e173f",
          "sha256": "bb7513fa52143b1835cbd909417dc89e4dd52da381ecc0dd33e27699779e173f"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "autoconf",
    "automake",
    "libtool",
    "nasm",
    "pkg-config"
  ],
  "dependencies": [
    "fftw",
    "vapoursynth"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": "MVTools will not be autoloaded in your VapourSynth scripts. To use it\nuse the following code in your scripts:\n\n  vs.core.std.LoadPlugin(path=\"$HOMEBREW_PREFIX/lib/libmvtools.dylib\")\n",
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/mvtools.rb",
  "ruby_source_checksum": {
    "sha256": "c43e8d7503264f2607f6c19ac4b92099cadb40b6e48cb0979f6b7f25dc6b8b81"
  },
  "date_added": "2015-12-26T21:47:14+00:00",
  "readme": "Description\n===========\n\nMVTools is a set of filters for motion estimation and compensation.\n\nThis is a port of version 2.5.11.20 of the Avisynth plugin.\n\nSome changes from version 2.5.11.9 of the SVP fork have been incorporated as well (http://www.svp-team.com/wiki/Download).\n\nThe filter DepanEstimate was ported from the Avisynth plugin DepanEstimate, version 1.10.\n\nThe filters DepanCompensate and DepanStabilise were ported from the Avisynth plugin Depan, version 1.13.1.\n\n\nDifferences\n===========\n\n* All:\n    * Free multithreading, courtesy of VapourSynth.\n\n    * Parameters are all lowercase now.\n\n    * YUY2 is not supported.\n\n    * Grayscale, 4:2:0, 4:2:2, 4:4:0, and 4:4:4 are supported, except for DepanCompensate and DepanStabilise, which don't support 4:4:0.\n\n    * Up to 16 bits per sample are supported.\n\n    * The audio is definitely not killed.\n\n    * No \"planar\" parameter.\n\n    * \"isse\" parameter renamed to \"opt\".\n\n* Analyse:\n    * No \"temporal\" parameter, as it's sort of incompatible with multithreading.\n\n    * No \"outfile\" parameter.\n\n    * No \"sadx264\" parameter. If opt is True, the best functions imported from x264 will be selected automatically. Otherwise, only C functions will be used.\n\n    * New parameters \"fields\" and \"tff\".\n\n    * The optimised SAD, SATD, and SSD functions from x264 have been updated to the latest versions (as of September 2014).\n\n    * Block sizes of 64x32, 64x64, 128x64, and 128x128 are supported.\n\n    * The \"dct\" parameter can be 5..10 even with blocks larger than 16x16.\n\n* Recalculate:\n    * Same as Analyse.\n\n* Compensate:\n    * No \"recursion\" parameter. It was dodgy.\n\n    * New parameter \"tff\".\n\n* Flow\n    * New parameter \"tff\".\n\n* SCDetection:\n    * No \"ysc\" parameter. The input frames are returned unchanged, with the ``_SceneChangePrev`` or ``_SceneChangeNext`` property attached.\n\n    * No \"isse\" parameter. It wasn't used.\n\n* DepanAnalyse:\n    * Formerly \"MDepan\".\n\n    * New parameters \"fields\" and \"tff\".\n\n    * No \"log\", \"range\", \"isse\" parameters.\n\n* DepanEstimate:\n    * New parameters \"fields\" and \"tff\".\n\n    * No \"range\", \"log\", \"debug\", \"extlog\" parameters.\n\n* DepanCompensate:\n    * Formerly \"DePan\".\n\n    * No \"inputlog\" parameter.\n\n* DepanStabilise:\n    * Formerly \"DePanStabilize\".\n\n    * No \"inputlog\" parameter.\n\n    * Methods -1 and 2 unavailable.\n\n\nUsage\n=====\n::\n\n    mv.Super(clip clip[, int hpad=16, int vpad=16, int pel=2, int levels=0, bint chroma=True, int sharp=2, int rfilter=2, clip pelclip=None, bint opt=True])\n\n    mv.Analyse(clip super[, int blksize=8, int blksizev=blksize, int levels=0, int search=4, int searchparam=2, int pelsearch=0, bint isb=False, int lambda, bint chroma=True, int delta=1, bint truemotion=True, int lsad, int plevel, int global, int pnew, int pzero=pnew, int pglobal=0, int overlap=0, int overlapv=overlap, bint divide=False, int badsad=10000, int badrange=24, bint opt=True, bint meander=True, bint trymany=False, bint fields=False, bint tff, int search_coarse=3, int dct=0])\n\n    mv.Recalculate(clip super, clip vectors[, int blksize=8, int blksizev=blksize, int search=4, int searchparam=2, int lambda, bint chroma=True, bint truemotion=True, int pnew, int overlap=0, int overlapv=overlap, bint divide=False, bint opt=True, bint meander=True, bint fields=False, bint tff, int dct=0])\n\n    mv.Compensate(clip clip, clip super, clip vectors[, int scbehavior=1, int thsad=10000, bint fields=False, float time=100.0, int thscd1=400, int thscd2=130, bint opt=True, bint tff])\n\n    mv.Degrain1(clip clip, clip super, clip mvbw, clip mvfw[, int thsad=400, int thsadc=thsad, int plane=4, int limit=255, int limitc=limit, int thscd1=400, int thscd2=130, bint opt=True])\n\n    mv.Degrain2(clip clip, clip super, clip mvbw, clip mvfw, clip mvbw2, clip mvfw2[, int thsad=400, int thsadc=thsad, int plane=4, int limit=255, int limitc=limit, int thscd1=400, int thscd2=130, bint opt=True])\n\n    mv.Degrain3(clip clip, clip super, clip mvbw, clip mvfw, clip mvbw2, clip mvfw2, clip mvbw3, clip mvfw3[, int thsad=400, int thsadc=thsad, int plane=4, int limit=255, int limitc=limit, int thscd1=400, int thscd2=130, bint opt=True])\n\n    mv.Mask(clip clip, clip vectors[, float ml=100.0, float gamma=1.0, int kind=0, float time=100.0, int ysc=0, int thscd1=400, int thscd2=130, bint opt=True])\n\n    mv.Finest(clip super[, bint opt=True])\n\n    mv.Flow(clip clip, clip super, clip vectors[, float time=100.0, int mode=0, bint fields=False, int thscd1=400, int thscd2=130, bint opt=True, bint tff])\n\n    mv.FlowBlur(clip clip, clip super, clip mvbw, clip mvfw[, float blur=50.0, int prec=1, int thscd1=400, int thscd2=130, bint opt=True])\n\n    mv.FlowInter(clip clip, clip super, clip mvbw, clip mvfw[, float time=50.0, float ml=100.0, bint blend=True, int thscd1=400, int thscd2=130, bint opt=True])\n\n    mv.FlowFPS(clip clip, clip super, clip mvbw, clip mvfw[, int num=25, int den=1, int mask=2, float ml=100.0, bint blend=True, int thscd1=400, int thscd2=130, bint opt=True])\n\n    mv.BlockFPS(clip clip, clip super, clip mvbw, clip mvfw[, int num=25, int den=1, int mode=3, float ml=100.0, bint blend=True, int thscd1=400, int thscd2=130, bint opt=True])\n\n    mv.SCDetection(clip clip, clip vectors[, int thscd1=400, int thscd2=130])\n\n    mv.DepanAnalyse(clip clip, clip vectors[, clip mask, bint zoom=True, bint rot=True, float pixaspect=1.0, float error=15.0, bint info=False, float wrong=10.0, float zerow=0.05, int thscd1=400, int thscd2=130, bint fields=False, bint tff])\n\n    mv.DepanEstimate(clip clip[, float trust=4.0, int winx=0, int winy=0, int wleft=-1, int wtop=-1, int dxmax=-1, int dymax=-1, float zoommax=1.0, float stab=1.0, float pixaspect=1.0, bint info=False, bint show=False, bint fields=False, bint tff])\n\n    mv.DepanCompensate(clip clip, clip data[, float offset=0.0, int subpixel=2, float pixaspect=1.0, bint matchfields=True, int mirror=0, int blur=0, bint info=False, bint fields=False, bint tff])\n\n    mv.DepanStabilise(clip clip, clip data[, float cutoff=1.0, float damping=0.9, float initzoom=1.0, bint addzoom=False, int prev=0, int next=0, int mirror=0, int blur=0, float dxmax=60.0, float dymax=30.0, float zoommax=1.05, float rotmax=1.0, int subpixel=2, float pixaspect=1.0, int fitlast=0, float tzoom=3.0, bint info=False, int method=0, bint fields=False])\n\n\nIf *fields* is True, it is assumed that the clip named *clip* first went through std.SeparateFields.\n\nFor information about the other parameters, consult the Avisynth plugins' documentation at http://avisynth.org.ru/mvtools/mvtools2.html or http://www.avisynth.nl/users/fizick/depan/depan.html. This will not be necessary in the future.\n\n\nCompilation\n===========\n\nFFTW3 configured for 32 bit floats is required (\"fftw3f\").\n\n::\n\n   mkdir build; cd build\n   meson ../\n   ninja\n\nOr\n\n::\n\n   ./autogen.sh\n   ./configure\n   make\n\nMeson runs faster than autogen.sh and configure.\n\n\nLicense\n=======\n\nGPL 2, like the Avisynth plugins."
}
