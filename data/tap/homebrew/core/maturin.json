{
  "name": "maturin",
  "full_name": "maturin",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Build and publish Rust crates as Python packages",
  "license": "Apache-2.0 or MIT",
  "homepage": "https://github.com/PyO3/maturin",
  "versions": {
    "stable": "1.1.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/PyO3/maturin/archive/refs/tags/v1.1.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "57b990348a9182897d64e7bc2b7be6e323912500c10a56174090fa8008173ad0"
    },
    "head": {
      "url": "https://github.com/PyO3/maturin.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/maturin/blobs/sha256:75670dbb11b657b02ca4eb3aae14d795eec9025d1351fb56fee6b1db6809a116",
          "sha256": "75670dbb11b657b02ca4eb3aae14d795eec9025d1351fb56fee6b1db6809a116"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/maturin/blobs/sha256:9c650f71e1efac6fe6b40f898a3dfd1b89337b567460beffb7662c8e7c71fcd5",
          "sha256": "9c650f71e1efac6fe6b40f898a3dfd1b89337b567460beffb7662c8e7c71fcd5"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/maturin/blobs/sha256:6f9c6f4d91df7e604d7e1c2e92ae851b3db3a4aa0acd90a2dcea1cc1f06fc0ee",
          "sha256": "6f9c6f4d91df7e604d7e1c2e92ae851b3db3a4aa0acd90a2dcea1cc1f06fc0ee"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/maturin/blobs/sha256:946a65187c03c845cd6d27678b5241f6e202ecc928a456deeeb198d087137323",
          "sha256": "946a65187c03c845cd6d27678b5241f6e202ecc928a456deeeb198d087137323"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/maturin/blobs/sha256:e0484a06d454588b4bfec11ad31fdb3e59c40cff68252d38ec0b3b8392b6db06",
          "sha256": "e0484a06d454588b4bfec11ad31fdb3e59c40cff68252d38ec0b3b8392b6db06"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/maturin/blobs/sha256:3697fb5a060e94c1169dc245a937b88d3ede8f483033b4e58908acf7ded5c911",
          "sha256": "3697fb5a060e94c1169dc245a937b88d3ede8f483033b4e58908acf7ded5c911"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/maturin/blobs/sha256:aeaf6dc363a32173db5523f334ffb8d3b702bb64def1179a5f2bf40bf874710c",
          "sha256": "aeaf6dc363a32173db5523f334ffb8d3b702bb64def1179a5f2bf40bf874710c"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "rust"
  ],
  "test_dependencies": [
    "python@3.11"
  ],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/maturin.rb",
  "ruby_source_checksum": {
    "sha256": "c71e01d4942e2082f5f8958937b080d69a980cbdf5243d013d17514c13471fa2"
  },
  "date_added": "2021-06-10T11:33:52+00:00",
  "readme": "# Maturin\n\n_formerly pyo3-pack_\n\n[![Actions Status](https://img.shields.io/github/actions/workflow/status/PyO3/maturin/test.yml?branch=main&logo=github&style=flat-square)](https://github.com/PyO3/maturin/actions)\n[![FreeBSD](https://img.shields.io/cirrus/github/PyO3/maturin/main?logo=CircleCI&style=flat-square)](https://cirrus-ci.com/github/PyO3/maturin)\n[![Crates.io](https://img.shields.io/crates/v/maturin.svg?logo=rust&style=flat-square)](https://crates.io/crates/maturin)\n[![PyPI](https://img.shields.io/pypi/v/maturin.svg?logo=python&style=flat-square)](https://pypi.org/project/maturin)\n[![Maturin User Guide](https://img.shields.io/badge/user-guide-brightgreen?logo=readthedocs&style=flat-square)](https://maturin.rs)\n[![Chat on Gitter](https://img.shields.io/gitter/room/nwjs/nw.js.svg?logo=gitter&style=flat-square)](https://gitter.im/PyO3/Lobby)\n\nBuild and publish crates with pyo3, rust-cpython, cffi and uniffi bindings as well as rust binaries as python packages.\n\nThis project is meant as a zero configuration replacement for [setuptools-rust](https://github.com/PyO3/setuptools-rust) and [milksnake](https://github.com/getsentry/milksnake).\nIt supports building wheels for python 3.7+ on windows, linux, mac and freebsd, can upload them to [pypi](https://pypi.org/) and has basic pypy and graalpy support.\n\nCheck out the [User Guide](https://maturin.rs/)!\n\n## Usage\n\nYou can either download binaries from the [latest release](https://github.com/PyO3/maturin/releases/latest) or install it with pip:\n\n```shell\npip install maturin\n```\n\nThere are four main commands:\n\n * `maturin new` creates a new cargo project with maturin configured.\n * `maturin publish` builds the crate into python packages and publishes them to pypi.\n * `maturin build` builds the wheels and stores them in a folder (`target/wheels` by default), but doesn't upload them. It's possible to upload those with [twine](https://github.com/pypa/twine) or `maturin upload`.\n * `maturin develop` builds the crate and installs it as a python module directly in the current virtualenv. Note that while `maturin develop` is faster, it doesn't support all the feature that running `pip install` after `maturin build` supports.\n\n`pyo3` and `rust-cpython` bindings are automatically detected. For cffi or binaries, you need to pass `-b cffi` or `-b bin`.\nmaturin doesn't need extra configuration files and doesn't clash with an existing setuptools-rust or milksnake configuration.\nYou can even integrate it with testing tools such as [tox](https://tox.readthedocs.io/en/latest/).\nThere are examples for the different bindings in the `test-crates` folder.\n\nThe name of the package will be the name of the cargo project, i.e. the name field in the `[package]` section of `Cargo.toml`.\nThe name of the module, which you are using when importing, will be the `name` value in the `[lib]` section (which defaults to the name of the package). For binaries, it's simply the name of the binary generated by cargo.\n\n## Python packaging basics\n\nPython packages come in two formats:\nA built form called wheel and source distributions (sdist), both of which are archives.\nA wheel can be compatible with any python version, interpreter (cpython and pypy, mainly), operating system and hardware architecture (for pure python wheels),\ncan be limited to a specific platform and architecture (e.g. when using ctypes or cffi) or to a specific python interpreter and version on a specific architecture and operating system (e.g. with pyo3 and rust-cpython).\n\nWhen using `pip install` on a package, pip tries to find a matching wheel and install that. If it doesn't find one, it downloads the source distribution and builds a wheel for the current platform,\nwhich requires the right compilers to be installed. Installing a wheel is much faster than installing a source distribution as building wheels is generally slow.\n\nWhen you publish a package to be installable with `pip install`, you upload it to [pypi](https://pypi.org/), the official package repository.\nFor testing, you can use [test pypi](https://test.pypi.org/) instead, which you can use with `pip install --index-url https://test.pypi.org/simple/`.\nNote that for publishing for linux, [you need to use the manylinux docker container](#manylinux-and-auditwheel), while for publishing from your repository you can use the [PyO3/maturin-action github action](https://github.com/PyO3/maturin-action).\n\n## pyo3 and rust-cpython\n\nFor pyo3 and rust-cpython, maturin can only build packages for installed python versions. On linux and mac, all python versions in `PATH` are used.\nIf you don't set your own interpreters with `-i`, a heuristic is used to search for python installations.\nOn windows all versions from the python launcher (which is installed by default by the python.org installer) and all conda environments except base are used. You can check which versions are picked up with the `list-python` subcommand.\n\npyo3 will set the used python interpreter in the environment variable `PYTHON_SYS_EXECUTABLE`, which can be used from custom build scripts. Maturin can build and upload wheels for pypy with pyo3, even though only pypy3.7-7.3 on linux is tested.\n\n## Cffi\n\nCffi wheels are compatible with all python versions including pypy. If `cffi` isn't installed and python is running inside a virtualenv, maturin will install it, otherwise you have to install it yourself (`pip install cffi`).\n\nmaturin uses cbindgen to generate a header file, which can be customized by configuring cbindgen through a `cbindgen.toml` file inside your project root. Alternatively you can use a build script that writes a header file to `$PROJECT_ROOT/target/header.h`.\n\nBased on the header file maturin generates a module which exports an `ffi` and a `lib` object.\n\n<details>\n<summary>Example of a custom build script</summary>\n\n```rust\nuse cbindgen;\nuse std::env;\nuse std::path::Path;\n\nfn main() {\n    let crate_dir = env::var(\"CARGO_MANIFEST_DIR\").unwrap();\n\n    let bindings = cbindgen::Builder::new()\n        .with_no_includes()\n        .with_language(cbindgen::Language::C)\n        .with_crate(crate_dir)\n        .generate()\n        .unwrap();\n    bindings.write_to_file(Path::new(\"target\").join(\"header.h\"));\n}\n```\n\n</details>\n\n## uniffi\n\nuniffi bindings use [uniffi-rs](https://mozilla.github.io/uniffi-rs/) to generate Python `ctypes` bindings\nfrom an interface definition file. uniffi wheels are compatible with all python versions including pypy.\n\n## Mixed rust/python projects\n\nTo create a mixed rust/python project, create a folder with your module name (i.e. `lib.name` in Cargo.toml) next to your Cargo.toml and add your python sources there:\n\n```\nmy-project\n├── Cargo.toml\n├── my_project\n│   ├── __init__.py\n│   └── bar.py\n├── pyproject.toml\n├── README.md\n└── src\n    └── lib.rs\n```\n\nYou can specify a different python source directory in `pyproject.toml` by setting `tool.maturin.python-source`, for example\n\n**pyproject.toml**\n\n```toml\n[tool.maturin]\npython-source = \"python\"\nmodule-name = \"my_project._lib_name\"\n```\n\nthen the project structure would look like this:\n\n```\nmy-project\n├── Cargo.toml\n├── python\n│   └── my_project\n│       ├── __init__.py\n│       └── bar.py\n├── pyproject.toml\n├── README.md\n└── src\n    └── lib.rs\n```\n\n> **Note**\n>\n> This structure is recommended to avoid [a common `ImportError` pitfall](https://github.com/PyO3/maturin/issues/490)\n\nmaturin will add the native extension as a module in your python folder. When using develop, maturin will copy the native library and for cffi also the glue code to your python folder. You should add those files to your gitignore.\n\nWith cffi you can do `from .my_project import lib` and then use `lib.my_native_function`, with pyo3/rust-cpython you can directly `from .my_project import my_native_function`.\n\nExample layout with pyo3 after `maturin develop`:\n\n```\nmy-project\n├── Cargo.toml\n├── my_project\n│   ├── __init__.py\n│   ├── bar.py\n│   └── _lib_name.cpython-36m-x86_64-linux-gnu.so\n├── README.md\n└── src\n    └── lib.rs\n```\n\nWhen doing this also be sure to set the module name in your code to match the last part of `module-name` (don't include the package path):\n\n```\n#[pymodule]\n#[pyo3(name=\"_lib_name\")]\nfn my_lib_name(_py: Python<'_>, m: &PyModule) -> PyResult<()> {\n    m.add_class::<MyPythonRustClass>()?;\n    Ok(())\n}\n```\n\n\n## Python metadata\n\nmaturin supports [PEP 621](https://www.python.org/dev/peps/pep-0621/), you can specify python package metadata in `pyproject.toml`.\nmaturin merges metadata from `Cargo.toml` and `pyproject.toml`, `pyproject.toml` take precedence over `Cargo.toml`.\n\nTo specify python dependencies, add a list `dependencies` in a `[project]` section in the `pyproject.toml`. This list is equivalent to `install_requires` in setuptools:\n\n```toml\n[project]\nname = \"my-project\"\ndependencies = [\"flask~=1.1.0\", \"toml==0.10.0\"]\n```\n\nPip allows adding so called console scripts, which are shell commands that execute some function in you program. You can add console scripts in a section `[project.scripts]`.\nThe keys are the script names while the values are the path to the function in the format `some.module.path:class.function`, where the `class` part is optional. The function is called with no arguments. Example:\n\n```toml\n[project.scripts]\nget_42 = \"my_project:DummyClass.get_42\"\n```\n\nYou can also specify [trove classifiers](https://pypi.org/classifiers/) in your `pyproject.toml` under `project.classifiers`:\n\n```toml\n[project]\nname = \"my-project\"\nclassifiers = [\"Programming Language :: Python\"]\n```\n\n## Source distribution\n\nmaturin supports building through `pyproject.toml`. To use it, create a `pyproject.toml` next to your `Cargo.toml` with the following content:\n\n```toml\n[build-system]\nrequires = [\"maturin>=1.0,<2.0\"]\nbuild-backend = \"maturin\"\n```\n\nIf a `pyproject.toml` with a `[build-system]` entry is present, maturin can build a source distribution of your package when `--sdist` is specified.\nThe source distribution will contain the same files as `cargo package`. To only build a source distribution, pass `--interpreter` without any values.\n\nYou can then e.g. install your package with `pip install .`. With `pip install . -v` you can see the output of cargo and maturin.\n\nYou can use the options `compatibility`, `skip-auditwheel`, `bindings`, `strip` and common Cargo build options such as `features` under `[tool.maturin]` the same way you would when running maturin directly.\nThe `bindings` key is required for cffi and bin projects as those can't be automatically detected. Currently, all builds are in release mode (see [this thread](https://discuss.python.org/t/pep-517-debug-vs-release-builds/1924) for details).\n\nFor a non-manylinux build with cffi bindings you could use the following:\n\n```toml\n[build-system]\nrequires = [\"maturin>=1.0,<2.0\"]\nbuild-backend = \"maturin\"\n\n[tool.maturin]\nbindings = \"cffi\"\ncompatibility = \"linux\"\n```\n\n`manylinux` option is also accepted as an alias of `compatibility` for backward compatibility with old version of maturin.\n\nTo include arbitrary files in the sdist for use during compilation specify `include` as an array of `path` globs with `format` set to `sdist`:\n\n```toml\n[tool.maturin]\ninclude = [{ path = \"path/**/*\", format = \"sdist\" }]\n```\n\nThere's a `maturin sdist` command for only building a source distribution as workaround for [pypa/pip#6041](https://github.com/pypa/pip/issues/6041).\n\n## Manylinux and auditwheel\n\nFor portability reasons, native python modules on linux must only dynamically link a set of very few libraries which are installed basically everywhere, hence the name manylinux.\nThe pypa offers special docker images and a tool called [auditwheel](https://github.com/pypa/auditwheel/) to ensure compliance with the [manylinux rules](https://peps.python.org/pep-0599/#the-manylinux2014-policy).\nIf you want to publish widely usable wheels for linux pypi, **you need to use a manylinux docker image**.\n\nThe Rust compiler since version 1.64 [requires at least glibc 2.17](https://blog.rust-lang.org/2022/08/01/Increasing-glibc-kernel-requirements.html), so you need to use at least manylinux2014.\nFor publishing, we recommend enforcing the same manylinux version as the image with the manylinux flag, e.g. use `--manylinux 2014` if you are building in `quay.io/pypa/manylinux2014_x86_64`.\nThe [PyO3/maturin-action](https://github.com/PyO3/maturin-action) github action already takes care of this if you set e.g. `manylinux: 2014`.\n\nmaturin contains a reimplementation of auditwheel automatically checks the generated library and gives the wheel the proper.\nIf your system's glibc is too new or you link other shared libraries, it will assign the `linux` tag.\nYou can also manually disable those checks and directly use native linux target with `--manylinux off`.\n\nFor full manylinux compliance you need to compile in a CentOS docker container. The [pyo3/maturin](https://ghcr.io/pyo3/maturin) image is based on the manylinux2014 image,\nand passes arguments to the `maturin` binary. You can use it like this:\n\n```\ndocker run --rm -v $(pwd):/io ghcr.io/pyo3/maturin build --release  # or other maturin arguments\n```\n\nNote that this image is very basic and only contains python, maturin and stable rust. If you need additional tools, you can run commands inside the manylinux container.\nSee [konstin/complex-manylinux-maturin-docker](https://github.com/konstin/complex-manylinux-maturin-docker) for a small educational example or [nanoporetech/fast-ctc-decode](https://github.com/nanoporetech/fast-ctc-decode/blob/b226ea0f2b2f4f474eff47349703d57d2ea4801b/.github/workflows/publish.yml) for a real world setup.\n\nmaturin itself is manylinux compliant when compiled for the musl target.\n\n## Examples\n\n* [ballista-python](https://github.com/apache/arrow-ballista-python) - A Python library that binds to Apache Arrow distributed query engine Ballista\n* [connector-x](https://github.com/sfu-db/connector-x/tree/main/connectorx-python) - ConnectorX enables you to load data from databases into Python in the fastest and most memory efficient way\n* [datafusion-python](https://github.com/apache/arrow-datafusion-python) - a Python library that binds to Apache Arrow in-memory query engine DataFusion\n* [deltalake-python](https://github.com/delta-io/delta-rs/tree/main/python) - Native Delta Lake Python binding based on delta-rs with Pandas integration\n* [opendal](https://github.com/apache/incubator-opendal/tree/main/bindings/python) - OpenDAL Python Binding to access data freely\n* [orjson](https://github.com/ijl/orjson) - A fast, correct JSON library for Python\n* [polars](https://github.com/pola-rs/polars/tree/master/py-polars) - Fast multi-threaded DataFrame library in Rust | Python | Node.js\n* [pydantic-core](https://github.com/pydantic/pydantic-core) - Core validation logic for pydantic written in Rust\n* [pyrus-cramjam](https://github.com/milesgranger/pyrus-cramjam) - Thin Python wrapper to de/compression algorithms in Rust\n* [pyxel](https://github.com/kitao/pyxel) - A retro game engine for Python\n* [roapi](https://github.com/roapi/roapi) - ROAPI automatically spins up read-only APIs for static datasets without requiring you to write a single line of code\n* [robyn](https://github.com/sansyrox/robyn) -  A fast and extensible async python web server with a Rust runtime\n* [ruff](https://github.com/charliermarsh/ruff) - An extremely fast Python linter, written in Rust\n* [tantivy-py](https://github.com/quickwit-oss/tantivy-py) - Python bindings for Tantivy\n* [watchfiles](https://github.com/samuelcolvin/watchfiles) - Simple, modern and high performance file watching and code reload in python\n* [wonnx](https://github.com/webonnx/wonnx/tree/master/wonnx-py) - Wonnx is a GPU-accelerated ONNX inference run-time written 100% in Rust\n\n## Contributing\n\nEveryone is welcomed to contribute to maturin! There are many ways to support the project, such as:\n\n- help maturin users with issues on GitHub and Gitter\n- improve documentation\n- write features and bugfixes\n- publish blogs and examples of how to use maturin\n\nOur [contributing notes](https://github.com/PyO3/maturin/blob/main/guide/src/contributing.md) have more resources if you wish to volunteer time for maturin and are searching where to start.\n\nIf you don't have time to contribute yourself but still wish to support the project's future success, some of our maintainers have GitHub sponsorship pages:\n\n- [messense](https://github.com/sponsors/messense)\n\n## License\n\nLicensed under either of:\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](https://github.com/PyO3/maturin/blob/main/license-apache) or http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](https://github.com/PyO3/maturin/blob/main/license-mit) or http://opensource.org/licenses/MIT)\n\nat your option."
}
