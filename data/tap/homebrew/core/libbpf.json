{
  "name": "libbpf",
  "full_name": "libbpf",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Berkeley Packet Filter library",
  "license": "BSD-2-Clause",
  "homepage": "https://github.com/libbpf/libbpf",
  "versions": {
    "stable": "1.2.2",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/libbpf/libbpf/archive/refs/tags/v1.2.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "32b0c41eabfbbe8e0c8aea784d7495387ff9171b5a338480a8fbaceb9da8d5e5"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/libbpf/blobs/sha256:550513c17e3dbc0f32727c7d4b49963ba7923dca98cabbee0f495db26d6c303b",
          "sha256": "550513c17e3dbc0f32727c7d4b49963ba7923dca98cabbee0f495db26d6c303b"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "pkg-config"
  ],
  "dependencies": [
    "elfutils"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "zlib"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [
    {
      "name": "linux",
      "cask": null,
      "download": null,
      "version": null,
      "contexts": [],
      "specs": [
        "stable"
      ]
    }
  ],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/libbpf.rb",
  "ruby_source_checksum": {
    "sha256": "e9ffdc9942bce1a29b9d64e36b3797a4d4ffcea81f38a08b642b923abcccd054"
  },
  "date_added": "2022-07-21T08:01:31+00:00",
  "readme": "<picture>\n  <source media=\"(prefers-color-scheme: dark)\" srcset=\"assets/libbpf-logo-sideways-darkbg.png\" width=\"40%\">\n  <img src=\"assets/libbpf-logo-sideways.png\" width=\"40%\">\n</picture>\n\nlibbpf\n[![Github Actions Builds & Tests](https://github.com/libbpf/libbpf/actions/workflows/test.yml/badge.svg)](https://github.com/libbpf/libbpf/actions/workflows/test.yml)\n[![Coverity](https://img.shields.io/coverity/scan/18195.svg)](https://scan.coverity.com/projects/libbpf)\n[![CodeQL](https://github.com/libbpf/libbpf/workflows/CodeQL/badge.svg?branch=master)](https://github.com/libbpf/libbpf/actions?query=workflow%3ACodeQL+branch%3Amaster)\n[![OSS-Fuzz Status](https://oss-fuzz-build-logs.storage.googleapis.com/badges/libbpf.svg)](https://oss-fuzz-build-logs.storage.googleapis.com/index.html#libbpf)\n[![Read the Docs](https://readthedocs.org/projects/libbpf/badge/?version=latest)](https://libbpf.readthedocs.io/en/latest/)\n======\n\n**This is the official home of the libbpf library.**\n\n*Please use this Github repository for building and packaging libbpf\nand when using it in your projects through Git submodule.*\n\nLibbpf *authoritative source code* is developed as part of [bpf-next Linux source\ntree](https://kernel.googlesource.com/pub/scm/linux/kernel/git/bpf/bpf-next) under\n`tools/lib/bpf` subdirectory and is periodically synced to Github. As such, all the\nlibbpf changes should be sent to [BPF mailing list](http://vger.kernel.org/vger-lists.html#bpf),\nplease don't open PRs here unless you are changing Github-specific parts of libbpf\n(e.g., Github-specific Makefile).\n\nLibbpf and general BPF usage questions\n======================================\n\nLibbpf documentation can be found [here](https://libbpf.readthedocs.io/en/latest/api.html).\nIt's an ongoing effort and has ways to go, but please take a look and consider contributing as well.\n\nPlease check out [libbpf-bootstrap](https://github.com/libbpf/libbpf-bootstrap)\nand [the companion blog post](https://nakryiko.com/posts/libbpf-bootstrap/) for\nthe examples of building BPF applications with libbpf.\n[libbpf-tools](https://github.com/iovisor/bcc/tree/master/libbpf-tools) are also\na good source of the real-world libbpf-based tracing tools.\n\nSee also [\"BPF CO-RE reference guide\"](https://nakryiko.com/posts/bpf-core-reference-guide/)\nfor the coverage of practical aspects of building BPF CO-RE applications and\n[\"BPF CO-RE\"](https://nakryiko.com/posts/bpf-portability-and-co-re/) for\ngeneral introduction into BPF portability issues and BPF CO-RE origins.\n\nAll general BPF questions, including kernel functionality, libbpf APIs and\ntheir application, should be sent to bpf@vger.kernel.org mailing list. You can\nsubscribe to it [here](http://vger.kernel.org/vger-lists.html#bpf) and search\nits archive [here](https://lore.kernel.org/bpf/). Please search the archive\nbefore asking new questions. It very well might be that this was already\naddressed or answered before.\n\nbpf@vger.kernel.org is monitored by many more people and they will happily try\nto help you with whatever issue you have. This repository's PRs and issues\nshould be opened only for dealing with issues pertaining to specific way this\nlibbpf mirror repo is set up and organized.\n\nBuilding libbpf\n===============\nlibelf is an internal dependency of libbpf and thus it is required to link\nagainst and must be installed on the system for applications to work.\npkg-config is used by default to find libelf, and the program called can be\noverridden with `PKG_CONFIG`.\n\nIf using `pkg-config` at build time is not desired, it can be disabled by\nsetting `NO_PKG_CONFIG=1` when calling make.\n\nTo build both static libbpf.a and shared libbpf.so:\n```bash\n$ cd src\n$ make\n```\n\nTo build only static libbpf.a library in directory\nbuild/ and install them together with libbpf headers in a staging directory\nroot/:\n```bash\n$ cd src\n$ mkdir build root\n$ BUILD_STATIC_ONLY=y OBJDIR=build DESTDIR=root make install\n```\n\nTo build both static libbpf.a and shared libbpf.so against a custom libelf\ndependency installed in /build/root/ and install them together with libbpf\nheaders in a build directory /build/root/:\n```bash\n$ cd src\n$ PKG_CONFIG_PATH=/build/root/lib64/pkgconfig DESTDIR=/build/root make install\n```\n\nBPF CO-RE (Compile Once â€“ Run Everywhere)\n=========================================\n\nLibbpf supports building BPF CO-RE-enabled applications, which, in contrast to\n[BCC](https://github.com/iovisor/bcc/), do not require Clang/LLVM runtime\nbeing deployed to target servers and doesn't rely on kernel-devel headers\nbeing available.\n\nIt does rely on kernel to be built with [BTF type\ninformation](https://www.kernel.org/doc/html/latest/bpf/btf.html), though.\nSome major Linux distributions come with kernel BTF already built in:\n  - Fedora 31+\n  - RHEL 8.2+\n  - OpenSUSE Tumbleweed (in the next release, as of 2020-06-04)\n  - Arch Linux (from kernel 5.7.1.arch1-1)\n  - Manjaro (from kernel 5.4 if compiled after 2021-06-18)\n  - Ubuntu 20.10\n  - Debian 11 (amd64/arm64)\n\nIf your kernel doesn't come with BTF built-in, you'll need to build custom\nkernel. You'll need:\n  - `pahole` 1.16+ tool (part of `dwarves` package), which performs DWARF to\n    BTF conversion;\n  - kernel built with `CONFIG_DEBUG_INFO_BTF=y` option;\n  - you can check if your kernel has BTF built-in by looking for\n    `/sys/kernel/btf/vmlinux` file:\n  \n```shell\n$ ls -la /sys/kernel/btf/vmlinux\n-r--r--r--. 1 root root 3541561 Jun  2 18:16 /sys/kernel/btf/vmlinux\n```\n  \nTo develop and build BPF programs, you'll need Clang/LLVM 10+. The following\ndistributions have Clang/LLVM 10+ packaged by default:\n  - Fedora 32+\n  - Ubuntu 20.04+\n  - Arch Linux\n  - Ubuntu 20.10 (LLVM 11)\n  - Debian 11 (LLVM 11)\n  - Alpine 3.13+\n\nOtherwise, please make sure to update it on your system.\n\nThe following resources are useful to understand what BPF CO-RE is and how to\nuse it:\n- [BPF CO-RE reference guide](https://nakryiko.com/posts/bpf-core-reference-guide/)\n- [BPF Portability and CO-RE](https://nakryiko.com/posts/bpf-portability-and-co-re/)\n- [HOWTO: BCC to libbpf conversion](https://nakryiko.com/posts/bcc-to-libbpf-howto-guide/)\n- [libbpf-tools in BCC repo](https://github.com/iovisor/bcc/tree/master/libbpf-tools)\n  contain lots of real-world tools converted from BCC to BPF CO-RE. Consider\n  converting some more to both contribute to the BPF community and gain some\n  more experience with it.\n\nDistributions\n=============\n\nDistributions packaging libbpf from this mirror:\n  - [Fedora](https://src.fedoraproject.org/rpms/libbpf)\n  - [Gentoo](https://packages.gentoo.org/packages/dev-libs/libbpf)\n  - [Debian](https://packages.debian.org/source/sid/libbpf)\n  - [Arch](https://archlinux.org/packages/core/x86_64/libbpf/)\n  - [Ubuntu](https://packages.ubuntu.com/source/impish/libbpf)\n  - [Alpine](https://pkgs.alpinelinux.org/packages?name=libbpf)\n\nBenefits of packaging from the mirror over packaging from kernel sources:\n  - Consistent versioning across distributions.\n  - No ties to any specific kernel, transparent handling of older kernels.\n    Libbpf is designed to be kernel-agnostic and work across multitude of\n    kernel versions. It has built-in mechanisms to gracefully handle older\n    kernels, that are missing some of the features, by working around or\n    gracefully degrading functionality. Thus libbpf is not tied to a specific\n    kernel version and can/should be packaged and versioned independently.\n  - Continuous integration testing via\n    [GitHub Actions](https://github.com/libbpf/libbpf/actions).\n  - Static code analysis via [LGTM](https://lgtm.com/projects/g/libbpf/libbpf)\n    and [Coverity](https://scan.coverity.com/projects/libbpf).\n\nPackage dependencies of libbpf, package names may vary across distros:\n  - zlib\n  - libelf\n\n[![libbpf distro packaging status](https://repology.org/badge/vertical-allrepos/libbpf.svg)](https://repology.org/project/libbpf/versions)\n\n\nbpf-next to Github sync\n=======================\n\nAll the gory details of syncing can be found in `scripts/sync-kernel.sh`\nscript. See [SYNC.md](SYNC.md) for instruction.\n\nSome header files in this repo (`include/linux/*.h`) are reduced versions of\ntheir counterpart files at\n[bpf-next](https://git.kernel.org/pub/scm/linux/kernel/git/bpf/bpf-next.git/)'s\n`tools/include/linux/*.h` to make compilation successful.\n\nLicense\n=======\n\nThis work is dual-licensed under BSD 2-clause license and GNU LGPL v2.1 license.\nYou can choose between one of them if you use this work.\n\n`SPDX-License-Identifier: BSD-2-Clause OR LGPL-2.1`"
}
