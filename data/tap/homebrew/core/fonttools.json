{
  "name": "fonttools",
  "full_name": "fonttools",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Library for manipulating fonts",
  "license": "MIT",
  "homepage": "https://github.com/fonttools/fonttools",
  "versions": {
    "stable": "4.41.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://files.pythonhosted.org/packages/e5/55/86c43d626bbe12fb384e61152ded4f76a280d30a022968c471f850cdb0d5/fonttools-4.41.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "e16a9449f21a93909c5be2f5ed5246420f2316e94195dbfccb5238aaa38f9751"
    },
    "head": {
      "url": "https://github.com/fonttools/fonttools.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fonttools/blobs/sha256:413a977a85604ab05490211ecbe2000e27bf0afb6cfffa9860c4d1fadb5b7541",
          "sha256": "413a977a85604ab05490211ecbe2000e27bf0afb6cfffa9860c4d1fadb5b7541"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fonttools/blobs/sha256:15145fee081bfae216e6a0487821abf15bcc531a97a9cf47b4b5e0137f087706",
          "sha256": "15145fee081bfae216e6a0487821abf15bcc531a97a9cf47b4b5e0137f087706"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fonttools/blobs/sha256:c6298830a7650f8614ac2fccde31894e0505d27a4366781f36d873fd69ed6864",
          "sha256": "c6298830a7650f8614ac2fccde31894e0505d27a4366781f36d873fd69ed6864"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fonttools/blobs/sha256:1c64b514f6a89d03ebab166cbac6f49b04ac1b1debc45ecd91963fd2c9d259e2",
          "sha256": "1c64b514f6a89d03ebab166cbac6f49b04ac1b1debc45ecd91963fd2c9d259e2"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fonttools/blobs/sha256:56594396da2d57b9f5747f811724737231ab155bb1b3fbfbb2b8db1b86415307",
          "sha256": "56594396da2d57b9f5747f811724737231ab155bb1b3fbfbb2b8db1b86415307"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fonttools/blobs/sha256:b69cb3763f34a0e81c792e9157c2ebcfbab076b0f689841854048d2713c17c03",
          "sha256": "b69cb3763f34a0e81c792e9157c2ebcfbab076b0f689841854048d2713c17c03"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fonttools/blobs/sha256:ba35761b3cb10cdfdf8ae304c0cc641f65c2750b676dd489893257456a02a41b",
          "sha256": "ba35761b3cb10cdfdf8ae304c0cc641f65c2750b676dd489893257456a02a41b"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "python@3.11"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/fonttools.rb",
  "ruby_source_checksum": {
    "sha256": "e46552ba979c02db96b0b82b1d71a9c8d63e009d2964e6d362e53c2885fc620d"
  },
  "date_added": "2015-06-28T07:43:08+01:00",
  "readme": "|CI Build Status| |Coverage Status| |PyPI| |Gitter Chat|\n\nWhat is this?\n~~~~~~~~~~~~~\n\n| fontTools is a library for manipulating fonts, written in Python. The\n  project includes the TTX tool, that can convert TrueType and OpenType\n  fonts to and from an XML text format, which is also called TTX. It\n  supports TrueType, OpenType, AFM and to an extent Type 1 and some\n  Mac-specific formats. The project has an `MIT open-source\n  licence <LICENSE>`__.\n| Among other things this means you can use it free of charge.\n\n`User documentation <https://fonttools.readthedocs.io/en/latest/>`_ and\n`developer documentation <https://fonttools.readthedocs.io/en/latest/developer.html>`_\nare available at `Read the Docs <https://fonttools.readthedocs.io/>`_.\n\nInstallation\n~~~~~~~~~~~~\n\nFontTools requires `Python <http://www.python.org/download/>`__ 3.8\nor later. We try to follow the same schedule of minimum Python version support as\nNumPy (see `NEP 29 <https://numpy.org/neps/nep-0029-deprecation_policy.html>`__).\n\nThe package is listed in the Python Package Index (PyPI), so you can\ninstall it with `pip <https://pip.pypa.io>`__:\n\n.. code:: sh\n\n    pip install fonttools\n\nIf you would like to contribute to its development, you can clone the\nrepository from GitHub, install the package in 'editable' mode and\nmodify the source code in place. We recommend creating a virtual\nenvironment, using `virtualenv <https://virtualenv.pypa.io>`__ or\nPython 3 `venv <https://docs.python.org/3/library/venv.html>`__ module.\n\n.. code:: sh\n\n    # download the source code to 'fonttools' folder\n    git clone https://github.com/fonttools/fonttools.git\n    cd fonttools\n\n    # create new virtual environment called e.g. 'fonttools-venv', or anything you like\n    python -m virtualenv fonttools-venv\n\n    # source the `activate` shell script to enter the environment (Un*x); to exit, just type `deactivate`\n    . fonttools-venv/bin/activate\n\n    # to activate the virtual environment in Windows `cmd.exe`, do\n    fonttools-venv\\Scripts\\activate.bat\n\n    # install in 'editable' mode\n    pip install -e .\n\nOptional Requirements\n---------------------\n\nThe ``fontTools`` package currently has no (required) external dependencies\nbesides the modules included in the Python Standard Library.\nHowever, a few extra dependencies are required by some of its modules, which\nare needed to unlock optional features.\nThe ``fonttools`` PyPI distribution also supports so-called \"extras\", i.e. a\nset of keywords that describe a group of additional dependencies, which can be\nused when installing via pip, or when specifying a requirement.\nFor example:\n\n.. code:: sh\n\n    pip install fonttools[ufo,lxml,woff,unicode]\n\nThis command will install fonttools, as well as the optional dependencies that\nare required to unlock the extra features named \"ufo\", etc.\n\n- ``Lib/fontTools/misc/etree.py``\n\n  The module exports a ElementTree-like API for reading/writing XML files, and\n  allows to use as the backend either the built-in ``xml.etree`` module or\n  `lxml <https://lxml.de>`__. The latter is preferred whenever present,\n  as it is generally faster and more secure.\n\n  *Extra:* ``lxml``\n\n- ``Lib/fontTools/ufoLib``\n\n  Package for reading and writing UFO source files; it requires:\n\n  * `fs <https://pypi.org/pypi/fs>`__: (aka ``pyfilesystem2``) filesystem\n    abstraction layer.\n\n  * `enum34 <https://pypi.org/pypi/enum34>`__: backport for the built-in ``enum``\n    module (only required on Python < 3.4).\n\n  *Extra:* ``ufo``\n\n- ``Lib/fontTools/ttLib/woff2.py``\n\n  Module to compress/decompress WOFF 2.0 web fonts; it requires:\n\n  * `brotli <https://pypi.python.org/pypi/Brotli>`__: Python bindings of\n    the Brotli compression library.\n\n  *Extra:* ``woff``\n\n- ``Lib/fontTools/ttLib/sfnt.py``\n\n  To better compress WOFF 1.0 web fonts, the following module can be used\n  instead of the built-in ``zlib`` library:\n\n  * `zopfli <https://pypi.python.org/pypi/zopfli>`__: Python bindings of\n    the Zopfli compression library.\n\n  *Extra:* ``woff``\n\n- ``Lib/fontTools/unicode.py``\n\n  To display the Unicode character names when dumping the ``cmap`` table\n  with ``ttx`` we use the ``unicodedata`` module in the Standard Library.\n  The version included in there varies between different Python versions.\n  To use the latest available data, you can install:\n\n  * `unicodedata2 <https://pypi.python.org/pypi/unicodedata2>`__:\n    ``unicodedata`` backport for Python 3.x updated to the latest Unicode\n    version 15.0.\n\n  *Extra:* ``unicode``\n\n- ``Lib/fontTools/varLib/interpolatable.py``\n\n  Module for finding wrong contour/component order between different masters.\n  It requires one of the following packages in order to solve the so-called\n  \"minimum weight perfect matching problem in bipartite graphs\", or\n  the Assignment problem:\n\n  * `scipy <https://pypi.python.org/pypi/scipy>`__: the Scientific Library\n    for Python, which internally uses `NumPy <https://pypi.python.org/pypi/numpy>`__\n    arrays and hence is very fast;\n  * `munkres <https://pypi.python.org/pypi/munkres>`__: a pure-Python\n    module that implements the Hungarian or Kuhn-Munkres algorithm.\n\n  *Extra:* ``interpolatable``\n\n- ``Lib/fontTools/varLib/plot.py``\n\n  Module for visualizing DesignSpaceDocument and resulting VariationModel.\n\n  * `matplotlib <https://pypi.org/pypi/matplotlib>`__: 2D plotting library.\n\n  *Extra:* ``plot``\n\n- ``Lib/fontTools/misc/symfont.py``\n\n  Advanced module for symbolic font statistics analysis; it requires:\n\n  * `sympy <https://pypi.python.org/pypi/sympy>`__: the Python library for\n    symbolic mathematics.\n\n  *Extra:* ``symfont``\n\n- ``Lib/fontTools/t1Lib.py``\n\n  To get the file creator and type of Macintosh PostScript Type 1 fonts\n  on Python 3 you need to install the following module, as the old ``MacOS``\n  module is no longer included in Mac Python:\n\n  * `xattr <https://pypi.python.org/pypi/xattr>`__: Python wrapper for\n    extended filesystem attributes (macOS platform only).\n\n  *Extra:* ``type1``\n\n- ``Lib/fontTools/ttLib/removeOverlaps.py``\n\n  Simplify TrueType glyphs by merging overlapping contours and components.\n\n  * `skia-pathops <https://pypi.python.org/pypy/skia-pathops>`__: Python\n    bindings for the Skia library's PathOps module, performing boolean\n    operations on paths (union, intersection, etc.).\n\n  *Extra:* ``pathops``\n\n- ``Lib/fontTools/pens/cocoaPen.py`` and ``Lib/fontTools/pens/quartzPen.py``\n\n  Pens for drawing glyphs with Cocoa ``NSBezierPath`` or ``CGPath`` require:\n\n  * `PyObjC <https://pypi.python.org/pypi/pyobjc>`__: the bridge between\n    Python and the Objective-C runtime (macOS platform only).\n\n- ``Lib/fontTools/pens/qtPen.py``\n\n  Pen for drawing glyphs with Qt's ``QPainterPath``, requires:\n\n  * `PyQt5 <https://pypi.python.org/pypi/PyQt5>`__: Python bindings for\n    the Qt cross platform UI and application toolkit.\n\n- ``Lib/fontTools/pens/reportLabPen.py``\n\n  Pen to drawing glyphs as PNG images, requires:\n\n  * `reportlab <https://pypi.python.org/pypi/reportlab>`__: Python toolkit\n    for generating PDFs and graphics.\n\n- ``Lib/fontTools/pens/freetypePen.py``\n\n  Pen to drawing glyphs with FreeType as raster images, requires:\n\n  * `freetype-py <https://pypi.python.org/pypi/freetype-py>`__: Python binding\n    for the FreeType library.\n    \n- ``Lib/fontTools/ttLib/tables/otBase.py``\n\n  Use the Harfbuzz library to serialize GPOS/GSUB using ``hb_repack`` method, requires:\n  \n  * `uharfbuzz <https://pypi.python.org/pypi/uharfbuzz>`__: Streamlined Cython\n    bindings for the harfbuzz shaping engine\n    \n  *Extra:* ``repacker``\n\nHow to make a new release\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n1) Update ``NEWS.rst`` with all the changes since the last release. Write a\n   changelog entry for each PR, with one or two short sentences summarizing it,\n   as well as links to the PR and relevant issues addressed by the PR. Do not\n   put a new title, the next command will do it for you.\n2) Use semantic versioning to decide whether the new release will be a 'major',\n   'minor' or 'patch' release. It's usually one of the latter two, depending on\n   whether new backward compatible APIs were added, or simply some bugs were fixed.\n3) Run ``python setup.py release`` command from the tip of the ``main`` branch.\n   By default this bumps the third or 'patch' digit only, unless you pass ``--major``\n   or ``--minor`` to bump respectively the first or second digit.\n   This bumps the package version string, extracts the changes since the latest\n   version from ``NEWS.rst``, and uses that text to create an annotated git tag\n   (or a signed git tag if you pass the ``--sign`` option and your git and Github\n   account are configured for `signing commits <https://docs.github.com/en/github/authenticating-to-github/managing-commit-signature-verification/signing-commits>`__\n   using a GPG key).\n   It also commits an additional version bump which opens the main branch for\n   the subsequent developmental cycle\n4) Push both the tag and commit to the upstream repository, by running the command\n   ``git push --follow-tags``. Note: it may push other local tags as well, be\n   careful.\n5) Let the CI build the wheel and source distribution packages and verify both\n   get uploaded to the Python Package Index (PyPI).\n6) [Optional] Go to fonttools `Github Releases <https://github.com/fonttools/fonttools/releases>`__\n   page and create a new release, copy-pasting the content of the git tag\n   message. This way, the release notes are nicely formatted as markdown, and\n   users watching the repo will get an email notification. One day we shall\n   automate that too.\n\n\nAcknowledgements\n~~~~~~~~~~~~~~~~\n\nIn alphabetical order:\n\naschmitz, Olivier Berten, Samyak Bhuta, Erik van Blokland, Petr van Blokland,\nJelle Bosma, Sascha Brawer, Tom Byrer, Antonio Cavedoni, Frédéric\nCoiffier, Vincent Connare, David Corbett, Simon Cozens, Dave Crossland,\nSimon Daniels, Peter Dekkers, Behdad Esfahbod, Behnam Esfahbod, Hannes\nFamira, Sam Fishman, Matt Fontaine, Takaaki Fuji, Yannis Haralambous, Greg\nHitchcock, Jeremie Hornus, Khaled Hosny, John Hudson, Denis Moyogo Jacquerye,\nJack Jansen, Tom Kacvinsky, Jens Kutilek, Antoine Leca, Werner Lemberg, Tal\nLeming, Peter Lofting, Cosimo Lupo, Olli Meier, Masaya Nakamura, Dave Opstad,\nLaurence Penney, Roozbeh Pournader, Garret Rieger, Read Roberts, Colin Rofls,\nGuido van Rossum, Just van Rossum, Andreas Seidel, Georg Seifert, Chris\nSimpkins, Miguel Sousa, Adam Twardoch, Adrien Tétar, Vitaly Volkov,\nPaul Wise.\n\nCopyrights\n~~~~~~~~~~\n\n| Copyright (c) 1999-2004 Just van Rossum, LettError\n  (just@letterror.com)\n| See `LICENSE <LICENSE>`__ for the full license.\n\nCopyright (c) 2000 BeOpen.com. All Rights Reserved.\n\nCopyright (c) 1995-2001 Corporation for National Research Initiatives.\nAll Rights Reserved.\n\nCopyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam. All\nRights Reserved.\n\nHave fun!\n\n.. |CI Build Status| image:: https://github.com/fonttools/fonttools/workflows/Test/badge.svg\n   :target: https://github.com/fonttools/fonttools/actions?query=workflow%3ATest\n.. |Coverage Status| image:: https://codecov.io/gh/fonttools/fonttools/branch/main/graph/badge.svg\n   :target: https://codecov.io/gh/fonttools/fonttools\n.. |PyPI| image:: https://img.shields.io/pypi/v/fonttools.svg\n   :target: https://pypi.org/project/FontTools\n.. |Gitter Chat| image:: https://badges.gitter.im/fonttools-dev/Lobby.svg\n   :alt: Join the chat at https://gitter.im/fonttools-dev/Lobby\n   :target: https://gitter.im/fonttools-dev/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge"
}
