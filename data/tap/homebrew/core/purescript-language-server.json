{
  "name": "purescript-language-server",
  "full_name": "purescript-language-server",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Language Server Protocol server for PureScript",
  "license": "MIT",
  "homepage": "https://github.com/nwolverson/purescript-language-server",
  "versions": {
    "stable": "0.17.1",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://registry.npmjs.org/purescript-language-server/-/purescript-language-server-0.17.1.tgz",
      "tag": null,
      "revision": null,
      "checksum": "139bc898210ae77342fbfd9d93de3be2c36368319be8840be8952182ed62b1bf"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/purescript-language-server/blobs/sha256:381f05121b322f200c6e9416965f059b988958b3bf7ea0a1fd42d32ab8287a0c",
          "sha256": "381f05121b322f200c6e9416965f059b988958b3bf7ea0a1fd42d32ab8287a0c"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "node",
    "purescript"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/purescript-language-server.rb",
  "ruby_source_checksum": {
    "sha256": "3642a48ef11f4afd6fddd9e66ec090b6307e2544e1c77beb989272d4f000c20a"
  },
  "date_added": "2022-08-20T14:18:20+00:00",
  "readme": "# PureScript language server\n\nNode-based Language Server Protocol server for PureScript based on the PureScript IDE server\n(aka psc-ide / `purs ide server`). Used as the [vscode plugin](https://github.com/nwolverson/vscode-ide-purescript)\nbackend but should be compatible with other Language Server Client implementations.\n\nThe language server is a wrapper around the IDE server included as part of the compiler distribution,\nproviding editing assistance and build features according to support available. This means that\nthe server will start its own `purs ide server` instance to talk to for the project directory it is started\nin.\n\n## Features\n\n- Completion provider\n- Definition provider\n- Formatting provider\n- Document & workspace symbol providers\n- Hover provider\n- Code action provider\n  - Compiler fix suggestions for imports/missing types\n- Build on save (via IDE server \"fast rebuild\" facility, certain limitations apply)\n  - Provides diagnostics\n- Commands\n  - Build (full build via `purs compile` / configured build command) - provides diagnostics\n  - Case split\n  - Add clause\n  - Replace suggestion\n  - Add completion import\n  - Start IDE server\n  - Stop IDE server\n  - Restart IDE server\n- Config\n  - `purescript.*`\n\n## Usage\n\nThis LSP implmementation is consumed by vscode and Atom plugins as a node module, and bundled along with those plugins.\n\nTo use with another LSP client, you will want to install this either globally or locally for `npm`, e.g.\n\n```\nnpm i -g purescript-language-server\n```\nAnd then use the resulting executable, e.g. `purescript-language-server --stdio`.\n\nThis language server is based on vscode-languageserver-node which means it should support `--stdio`, `--socket=[number]`, `--node-ipc` or `--pipe` methods of communication, see [vscode-languageserver-node](https://github.com/Microsoft/vscode-languageserver-node) for details.\n\n#### Version support policy\n\nPureScript compiler version support is as follows:\n\n* The current minor version of the compiler is supported at all patch versions (e.g. 0.14.xx)\n* The previous minor version of the compiler is supported at the latest patch version (e.g. 0.13.8) for new functionality, and where possible all patch versions for existing functionality\n* Any older compiler versions are not officially supported - they may continue to work and will not be intentionally broken, but no particular effort will be made for continued support in the face of API changes\n\n### Formatting provider\n\nThe `purescript-language-server` comes with support for formatting PureScript code via several external tools, exposed as a standard LSP formatting provider. When a formatting operation is requested, `purescript-language-server` will attempt to find the configured tool via its standard name in your `$PATH` (or the local `npm` install path if `purescript.addNpmPath` is set).\n\nThe formatting tool is selected via `purescript.formatter`, with the following options\n\n  * No formatter - simply leave the setting unset or empty (default)\n  * [`purs-tidy`](https://github.com/natefaubion/purescript-tidy) (or simply `tidy`). If you do not have any existing preferences this would be the suggested pick.\n  * [`pose`](https://github.com/rowtype-yoga/pose)\n  * [`purty`](https://gitlab.com/joneshf/purty) \n\n### VSCode \n\nUse [vscode-ide-purescript](https://github.com/nwolverson/vscode-ide-purescript).\n\n### Atom\n\nUse [atom-ide-purescript](https://github.com/nwolverson/atom-ide-purescript).\n\n## Neovim’s built-in language server + nvim-lspconfig\n\nAs of `0.5.0`, Neovim has a built-in [language server client](https://neovim.io/doc/user/lsp.html). A popular plugin to help with configuring this server is [`nvim-lspconfig`](https://github.com/neovim/nvim-lspconfig/blob/master/README.md). This plugin includes `purescriptls` which will automatically find and root the language server as well as connect PSCIDE, etc. (for more info, read the [config](https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md#purescriptls)). To use, add this to your `init.lua` or inside a `EOF << lua … EOF` block in your `init.vim`.\n\n```lua\nnvim_lsp.purescriptls.setup {\n  \" Your personal on_attach function referenced before to include\n  \" keymaps & other ls options\n  on_attach = on_attach,\n  settings = {\n    purescript = {\n      addSpagoSources = true -- e.g. any purescript language-server config here\n    }\n  },\n  flags = {\n    debounce_text_changes = 150,\n  }\n}\n```\n\n### Vim/LSP\n\nAuto configuration with [vim-lsp-settings](https://github.com/mattn/vim-lsp-settings)\n\n### Vim/CoC\n\nConfiguration with [coc.nvim](https://github.com/neoclide/coc.nvim/wiki/Language-servers#purescript)\n\nRun `:CocConfig` and add `\"purescript\"` in the `\"languageserver\"` section as follows:\n\n```jsonc\n  \"languageserver\": {\n    \"purescript\": {\n      \"command\": \"purescript-language-server\",\n      \"args\": [\"--stdio\"],\n      \"filetypes\": [\"purescript\"],\n      \"trace.server\": \"off\",\n      \"rootPatterns\": [\"bower.json\", \"psc-package.json\", \"spago.dhall\"],\n      \"settings\": {\n        \"purescript\": {\n          \"addSpagoSources\": true,\n          \"addNpmPath\": true, // Set to true if using a local purty install for formatting\n          \"formatter\": \"purs-tidy\"\n          // etc\n        }\n      }\n    }\n  }\n```\n\nCoC can be configured to format your code using the `purescript-language-server`'s formatting provider, which is backed by `purty`. If you don't have CoC-based code formatting setup in CoC already, you can add a command or key mapping like this:\n\n```vim\ncommand! -nargs=0  Format      :call CocAction('format')\nnmap               <leader>f   :Format<cr>\n```\n\nIf you want the formatter to run on save, run `:CocConfig` and add `\"purescript\"` to the `\"coc.preferences.formatOnSaveFiletypes\"`:\n\n```jsonc\n  \"coc.preferences.formatOnSaveFiletypes\": [\n    // ...other languages\n    \"purescript\"\n  ]\n\n```\n\nYou can also organize PureScript imports in Vim with a command and/or key mapping like this:\n\n```vim\ncommand! -nargs=0  OrganizeImports :call CocAction('runCommand', 'editor.action.organizeImport')\nnmap               <leader>o       :OrganizeImports<cr>\n```\n\n### Vim/LanguageClient_neovim\n\nUse [vimmer-ps](https://github.com/sriharshachilakapati/vimmer-ps).\n\n\n### Other clients\n\nConfig may be supplied via client-push on startup (`workspace.didChangeConfiguration`), server-request (`workspace.configuration`), or at last resort by JSON object on the command line with `--config` option.\n\n## Config\nSee [config defined in vscode plugin](https://github.com/nwolverson/vscode-ide-purescript/blob/master/package.json).\n\n### Usage with alternate backends\n\nWhen using the language server together with alternate backends, the only requirement is to stop `purs ide server` from attempting to generate JS when rebuilding, this is done via the config\n\n```json\n\"purescript.codegenTargets\": [ \"corefn\" ]\n```\n\n(and you should make sure the build command is in accordance with that, if used, eg specify `backend` in `spago` config).\n\n## Commands\n\nVarious commands are provided. Some are triggered via completion etc, some must be called explicitly from a LSP client.\n\n### `purescript.build`\n\nNo arguments. Provides diagnostics.\n\n### `purescript.startPscIde`\n\nNo arguments. Start IDE server according to configuration.\n\n### `purescript.stopPscIde`\n\nNo arguments. Stop running IDE server.\n\n### `purescript.restartPscIde`\n\nNo arguments. Stop any running IDE server then start a new one according to configuration.\n\n### `purescript.addCompletionImport`\n\nArguments: identifier, module, document URI.\n\n### `purescript.addModuleImport`\n\nArguments: module, qualifier, document URI.\n\n### `purescript.getAvailableModules`\n\nNo arguments. Get list of available modules.\n\n### `purescript.replaceSuggestion`\n\nArguments: document URI, replacement, replacement range.\n\n### `purescript.search`\n\nFlex search for identifier.\n\nArguments: search text.\n\n### `purescript.fixTypo`\n\nArguments: document URI, line, character.\n\n### `purescript.caseSplit-explicit`\n\n(Used to back the case split command in VS Code UI).\n\nArguments: document URI, line, character, type.\n\n### `purescript.addClause-explicit`\n\n(Used to back the add clause command in VS Code UI).\n\nArguments: document URI, line, character.\n\n### `purescript.typedHole-explicit`\n\n(Used to back the `purescript.typedHole` code action triggered in the VS Code UI)\n\nArguments: hole name, document URI, hole range, `PscIde.Command.TypeInfo` of chosen replacement option\n\n\n## Development\n\nTo develop (rather than use) this language server\n\n1. Clone this repo and `npm install`\n2. Make changes and `npm run build`\n3. Ensure the built module is picked up by your editor\n\nFor 3, if the editor integrates using the node module rather than standalone binary, I suggest using `npm link` - this will work for atom and vscode at least.\n\nFor atom, clone `atom-ide-purescript` and:\n\n1. In `purescript-language-server` run `npm link`, in `atom-ide-purescript` run `npm link purescript-language-server`\n2. In `atom-ide-purescript` run `apm link` to pick up local changes\n3. In `atom-ide-purescript`, run `npm run bundle` to build the plugin itself\n4. Reload any atom window to pick up changes\n\nFor vscode, clone `vscode-ide-purescript` and:\n\n1. Run `npm install`\n1. In `purescript-language-server` run `npm link`, in `vscode-ide-purescript` run `npm link purescript-language-server`\n1. Open `vscode-ide-purescript` in vscode (`code .`) and hit F5 to \"launch extension\"\n1. Use the newly launched Extension Development Host to test language server changes\n\nSee [vscode plugin](https://github.com/nwolverson/vscode-ide-purescript) repo, [atom plugin](https://github.com/nwolverson/atom-ide-purescript). Common code via\n[purescript-ide-purescript-core](https://github.com/nwolverson/purescript-ide-purescript-core)."
}
