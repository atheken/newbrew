{
  "name": "cdebug",
  "full_name": "cdebug",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Swiss army knife of container debugging",
  "license": "Apache-2.0",
  "homepage": "https://github.com/iximiuz/cdebug",
  "versions": {
    "stable": "0.0.14",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/iximiuz/cdebug/archive/refs/tags/v0.0.14.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "6133fb7286fba476674b54e2f008c35a4b28f209e3072c3e0a75c69c5deeee81"
    },
    "head": {
      "url": "https://github.com/iximiuz/cdebug.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cdebug/blobs/sha256:d0356a3e1ee8c7ce5de59c4f24b2a7b17d9126a5284f9677d7fd91c82b4d07e3",
          "sha256": "d0356a3e1ee8c7ce5de59c4f24b2a7b17d9126a5284f9677d7fd91c82b4d07e3"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cdebug/blobs/sha256:d0356a3e1ee8c7ce5de59c4f24b2a7b17d9126a5284f9677d7fd91c82b4d07e3",
          "sha256": "d0356a3e1ee8c7ce5de59c4f24b2a7b17d9126a5284f9677d7fd91c82b4d07e3"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cdebug/blobs/sha256:d0356a3e1ee8c7ce5de59c4f24b2a7b17d9126a5284f9677d7fd91c82b4d07e3",
          "sha256": "d0356a3e1ee8c7ce5de59c4f24b2a7b17d9126a5284f9677d7fd91c82b4d07e3"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cdebug/blobs/sha256:dea3380567fbf906b88881ae2524d57c71dd712266fa282aab6bbc50bdc96174",
          "sha256": "dea3380567fbf906b88881ae2524d57c71dd712266fa282aab6bbc50bdc96174"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cdebug/blobs/sha256:8080dc9eacd768e9d5b5a1503b1a1443b2559f5b5ee1cba9a8124c4756f75b40",
          "sha256": "8080dc9eacd768e9d5b5a1503b1a1443b2559f5b5ee1cba9a8124c4756f75b40"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cdebug/blobs/sha256:535e557d4bf258b532bc57f1e6fd88bdcddc3328050110142c2668a6bcc157eb",
          "sha256": "535e557d4bf258b532bc57f1e6fd88bdcddc3328050110142c2668a6bcc157eb"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cdebug/blobs/sha256:b7a853028bc69423f191b40acbe2d59eca2d7d793139fa46dea447ae38962762",
          "sha256": "b7a853028bc69423f191b40acbe2d59eca2d7d793139fa46dea447ae38962762"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/cdebug.rb",
  "ruby_source_checksum": {
    "sha256": "4d114a8ed7762a994c9ed2d22357ebb625348542435f20a02e7d12d4bc6b7caa"
  },
  "date_added": "2023-01-15T00:00:36+00:00",
  "readme": "# cdebug - a swiss army knife of container debugging\n\n```diff\n! Support development of this project > patreon.com/iximiuz\n```\n\nWith this tool you can:\n\n- Troubleshoot containers lacking shell and/or debugging tools\n- Forward unpublished or even localhost ports to your host system\n- Expose endpoints from the host system to containers & Kubernetes networks\n- Handily export image's and/or container's filesystem to local folders\n- and more :)\n\nThe following _commands_ x _runtimes_ are supported:\n\n|                       | Docker | Containerd | Kubernetes | Kubernetes CRI | runc  |\n| :---                  | :---:  | :---:      | :---:      | :---:          | :---: |\n| `exec`                | ‚úÖ     | ‚úÖ         | -          | -              | -     |\n| `port-forward` local  | ‚úÖ     | -          | -          | -              | -     |\n| `port-forward` remote | üõ†Ô∏è     | -          | üõ†Ô∏è         | -              | -     |\n| `export`              | -      | -          | -          | -              | -     |\n\n## Installation\n\nIt's a statically linked Go binary, so you know the drill:\n\n```sh\nGOOS=linux\nGOARCH=amd64\n\ncurl -Ls https://github.com/iximiuz/cdebug/releases/latest/download/cdebug_${GOOS}_${GOARCH}.tar.gz | tar xvz\n\nsudo mv cdebug /usr/local/bin\n```\n\n### Homebrew\n\nIf you're a [Homebrew](https://brew.sh/) user, you can install the tool via brew on macOS or Linux:\n\n```sh\n$ brew install cdebug\n```\n\nAt the moment, the following systems are (kinda sorta) supported:\n\n- linux/amd64\n- darwin/amd64\n- darwin/arm64\n\n## Commands\n\n### cdebug exec\n\nRun an interactive shell in a scratch, slim, or distroless container, with ease:\n\n```sh\ncdebug exec -it [docker|containerd://]<container>\n```\n\nThe `cdebug exec` command is a crossbreeding of `docker exec` and `kubectl debug` commands.\nYou point the tool at a running container, say what toolkit image to use, and it starts\na debugging \"sidecar\" container that _feels_ like a `docker exec` session to the target container:\n\n- The root filesystem of the debugger **_is_** the root filesystem of the target container.\n- The target container isn't recreated and/or restarted.\n- No extra volumes or copying of debugging tools is needed.\n- The debugging tools **_are_** available in the target container.\n\nBy default, the `busybox:musl` (statically compiled) image is used for the debugger sidecar, but you can override it\nwith the `--image` flag. Combining this with the superpower of Nix and [Nixery](https://nixery.dev/),\nyou can get all your favorite tools by simply listing them in the image name:\n\n```\ncdebug exec -it --image nixery.dev/shell/ps/vim/tshark <target-container>\n```\n\n<details>\n<summary>How it works</summary>\n\nThe technique is based on the ideas from this [blog post](https://iximiuz.com/en/posts/docker-debug-slim-containers).\n\n![How: cdebug exec](assets/images/cdebug-exec.png)\n\nOversimplifying, the debugger container is started like:\n\n```sh\ndocker run [-it] \\\n  --network container:<target> \\\n  --pid container:<target> \\\n  --uts container:<target> \\\n  <toolkit-image>\n  sh -c <<EOF\nln -s /proc/$$/root/bin/ /proc/1/root/.cdebug\n\nexport PATH=$PATH:/.cdebug\nchroot /proc/1/root sh\nEOF\n```\n\nThe secret sauce is the symlink + PATH modification + chroot-ing.\n\n</details>\n\n### cdebug port-forward\n\nForward local ports to containers and vice versa. This command is another crossbreeding -\nthis time it's `kubectl port-forward` and `ssh -L|-R`.\n\nCurrently, only local port forwarding (`cdebug port-forward -L`) is supported,\nbut remote port forwarding is under active development.\n\nLocal port forwarding use cases (works for Docker Desktop too!):\n\n- Publish \"unpublished\" port 80 to a random port on the host: `cdebug port-forward <target> -L 80`\n- Expose container's localhost to the host system: `cdebug port-forward <target> -L 127.0.0.1:5432`\n- Proxy local traffic to a remote host via the target: `cdebug port-forward <target> -L <LOCAL_HOST>:<LOCAL_PORT>:<REMOTE_HOST>:<REMOTE_PORT>`\n- üõ†Ô∏è Expose a Kubernetes service to the host system: `cdebug port-forward <target> -L 8888:my.svc.cluster.local:443`\n\nRemote port forwarding use cases:\n\n- Start a container/Pod forwarding traffic destined to its `<IP>:<port>` to a non-cluster endpoint reachable from the host system.\n- ...\n\n<details>\n<summary>How it works</summary>\n\n**Local port forwarding** is implemented by starting an extra forwarder container in the\ntarget's network and publishing its ports to the host using the standard means (e.g.,\n`docker run --publish`). The forwarder container itself runs something like:\n\n`socat TCP-LISTEN:<REMOTE_PORT>,fork TCP-CONNECT:<REMOTE_HOST>:<REMOTE_PORT>`\n\n![How: cdebug port-forward -L (direct)](assets/images/cdebug-port-forward-local-direct.png)\n\nIf the _REMOTE_HOST_ doesn't belong to the target or it's the target's localhost,\nan extra sidecar container is started in the target's network namespace with another\nsocat forwarding traffic from the target public interface to `REMOTE_HOST:REMOTE_PORT`.\n\n![How: cdebug port-forward -L (sidecar)](assets/images/cdebug-port-forward-local-sidecar.png)\n\n**Remote port forwarding** will use similar tricks but combined with more advanced\nreverse tunneling.\n\n</details>\n\n## Examples\n\nBelow are a few popular scenarios formatted as reproducible demos.\n\n### A simple interactive shell to a distroless container\n\nFirst, a target container is needed. Let's use a distroless nodejs image for that:\n\n```sh\n$ docker run -d --rm \\\n  --name my-distroless gcr.io/distroless/nodejs \\\n  -e 'setTimeout(() => console.log(\"Done\"), 99999999)'\n```\n\nNow, let's start an interactive shell (using busybox) into the above container:\n\n```sh\n$ cdebug exec -it my-distroless\n```\n\nExploring the filesystem shows that it's a rootfs of the nodejs container:\n\n```sh\n/ $# ls -lah\ntotal 60K\ndrwxr-xr-x    1 root     root        4.0K Oct 17 23:49 .\ndrwxr-xr-x    1 root     root        4.0K Oct 17 23:49 ..\nüëâ lrwxrwxrwx 1 root     root          18 Oct 17 23:49 .cdebug-c153d669 -> /proc/55/root/bin/\n-rwxr-xr-x    1 root     root           0 Oct 17 19:49 .dockerenv\ndrwxr-xr-x    2 root     root        4.0K Jan  1  1970 bin\ndrwxr-xr-x    2 root     root        4.0K Jan  1  1970 boot\ndrwxr-xr-x    5 root     root         340 Oct 17 19:49 dev\ndrwxr-xr-x    1 root     root        4.0K Oct 17 19:49 etc\ndrwxr-xr-x    3 nonroot  nonroot     4.0K Jan  1  1970 home\ndrwxr-xr-x    1 root     root        4.0K Jan  1  1970 lib\ndrwxr-xr-x    2 root     root        4.0K Jan  1  1970 lib64\ndrwxr-xr-x    5 root     root        4.0K Jan  1  1970 nodejs\n...\n```\n\nNotice üëâ  above - that's where the debugging tools live:\n\n```sh\n/ $# echo $PATH\n/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/.cdebug-c153d669\n```\n\nThe process tree of the debugger container is the process tree of the target:\n\n```sh\n/ $# ps auxf\nPID   USER     TIME  COMMAND\n    1 root      0:00 /nodejs/bin/node -e setTimeout(() => console.log(\"Done\"),\n   13 root      0:00 sh -c  set -euo pipefail  sleep 999999999 & SANDBOX_PID=$!\n   19 root      0:00 sleep 999999999\n   21 root      0:00 sh\n   28 root      0:00 [sleep]\n   39 root      0:00 [sleep]\n   45 root      0:00 ps auxf\n```\n\n### An interactive shell with code editor (vim)\n\nIf the tools provided by busybox aren't enough, you can bring your own tools with\na ~~little~~ huge help of the [nixery](https://nixery.dev/) project:\n\n```sh\n$ cdebug exec -it --image nixery.dev/shell/vim my-distroless\n```\n\n### An interactive shell with tshark and other advanced tools\n\nEven more powerful exammple:\n\n```sh\n$ cdebug exec -it --image nixery.dev/shell/ps/findutils/tshark my-distroless\n```\n\n### Debugging containerd containers (no Docker required)\n\nFirst, start the target container:\n\n```sh\n$ sudo ctr image pull docker.io/library/nginx:latest\n$ sudo ctr run -d docker.io/library/nginx:latest nginx-1\n```\n\nRun an interactive shell in the target container using simple `cdebug exec`:\n\n```\n$ sudo cdebug exec -it containerd://nginx-1\n/ $# wget -O- 127.0.0.1\n```\n\nRun VIM in the target container using `cdebug exec --image nixery.dev/shell/vim`:\n\n```sh\n$ sudo cdebug exec -it --rm --image nixery.dev/shell/vim containerd://nginx-1\n```\n\n### Debugging nerdctl containers (no Docker required)\n\nStart a container using nerdctl:\n\n```sh\n$ sudo $(which nerdctl) run -d --name nginx-1 nginx\n9f8763d82259a6e3e747df83d0ce8b7ee3d33d94269a72cd04e0e3862a3abc5f\n```\n\nRun the debugger using the `nerdctl://` schema and the target's name:\n\n```sh\n$ sudo cdebug exec -it --rm nerdctl://nginx-1\n```\n\nOr run a debugging session in the above container using the `containerd://` schema:\n\n```sh\n$ sudo cdebug exec -it --rm containerd://9f876\n```\n\n### Debugging Kubernetes Pods (node access is assumed)\n\nCurrently, only containerd CRI is supported. First, you'll need to list the running\ncontainers:\n\n```sh\n$ ctr -n k8s.io container ls\nCONTAINER       IMAGE                                       RUNTIME\n155227c0e9aa8   k8s.gcr.io/pause:3.5                        io.containerd.runc.v2\n2220eacd9cb26   registry.k8s.io/kube-apiserver:v1.25.3      io.containerd.runc.v2\n22efcb35a651a   registry.k8s.io/etcd:3.5.4-0                io.containerd.runc.v2\n28e06cc63b822   docker.io/calico/cni:v3.24.1                io.containerd.runc.v2\n30754c8492f18   docker.io/calico/node:v3.24.1               io.containerd.runc.v2\n61acdb0231516   docker.io/calico/kube-controllers:v3.24.1   io.containerd.runc.v2\n...\n```\n\nNow you can exec into a Pod's container bringing your own debugging tools:\n\n```sh\n$ cdebug exec -n k8s.io -it --rm containerd://2220ea\n```\n\n### Publish \"forgotten\" port\n\nStart an nginx container but don't expose its port 80:\n\n```sh\n$ docker run -d --name nginx-1 nginx:1.23\n```\n\nForward local port 8080 to the nginx's 80:\n\n```sh\n$ cdebug port-forward nginx-1 -L 8080:80\n$ curl localhost:8080\n```\n\n### Expose localhost's ports\n\nStart a containerized service that listens only on its localhost:\n\n```sh\n$ docker run -d --name svc-1 python:3-alpine python3 -m 'http.server' -b 127.0.0.1 8888\n```\n\nTap into the above service:\n\n```sh\n$ cdebug port-forward svc-1 -L 127.0.0.1:8888\nPulling forwarder image...\nlatest: Pulling from shell/socat\nDigest: sha256:b43b6cf8d22615616b13c744b8ff525f5f6c0ca6c11b37fa3832a951ebb3c20c\nStatus: Image is up to date for nixery.dev/shell/socat:latest\nForwarding 127.0.0.1:49176 to 127.0.0.1:8888 through 172.17.0.4:34128\n\n$ curl localhost:49176\n<!DOCTYPE HTML>\n<html lang=\"en\">\n<head>\n...\n```\n\n## F.A.Q\n\n**Q:** Running `cdebug exec` fails with `rm: cannot remove '/proc/1/root/nix': Permission denied` or\n`ln: /proc/1/root/.cdebug-XXXXXXXX: Permission denied`.\n\nChances are your target container has been started with elevated permissions while you're trying to run a non-privileged debugger sidecar. Try `cdebug exec --privileged` instead.\n\n## Similar tools\n\n- [`docker-slim debug`](https://github.com/docker-slim/docker-slim) - a PoC `debug` command for DockerSlim (contributed by [D4N](https://github.com/D4N))\n- [`debug-ctr`](https://github.com/felipecruz91/debug-ctr) - a debugger that creates a new container out of the original container with the toolkit mounted in a volume (by [Felipe Cruz Martinez](https://github.com/felipecruz91))\n- [`docker-debug`](https://github.com/zeromake/docker-debug) - much like `cdebug exec` but without the chroot trick.\n- [`docker-opener`](https://github.com/artemkaxboy/docker-opener) - a multi-purpose tool that in particular can run a shell session into your container (and if there is no shell inside, it'll bring its own busybox).\n- [`cntr`](https://github.com/Mic92/cntr) - is \"a replacement for `docker exec` that brings all your developers tools with you\" by mounting the file system from one container (or the host) into the target container and creating a nested container with the help of a FUSE filesystem. Supports a huge range of runtimes (docker, podman, LXC/LXD, rkt, systemd-nspawn, containerd) because it operates on the OS level.\n- [`kdiag`](https://github.com/solo-io/kdiag) - a kubectl plugin to get shell access to scratch containers, stream logs from multiple pods simultaneously, and do reverse port forwarding to Kubernetes clusters.\n\n## TODO:\n\n- More `exec` flags (like in `docker run`): `--cap-add`, `--cap-drop`, `--env`, `--volume`, etc.\n- Helper command(s) suggesting nix(ery) packages\n- Non-docker runtimes (containerd, runc, k8s)\n- E2E Tests\n\n## Contributions\n\nIt's a pre-alpha with no sound design yet, so I may not be accepting all PRs. Sorry about that :)"
}
