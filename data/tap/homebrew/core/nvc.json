{
  "name": "nvc",
  "full_name": "nvc",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "VHDL compiler and simulator",
  "license": "GPL-3.0-or-later",
  "homepage": "https://github.com/nickg/nvc",
  "versions": {
    "stable": "1.10.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/nickg/nvc/releases/download/r1.10.1/nvc-1.10.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "f92c431738712f8dc88afdf9b1b8313d57f603910b5545b81675ffd2e5d22166"
    },
    "head": {
      "url": "https://github.com/nickg/nvc.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": "/opt/homebrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/nvc/blobs/sha256:831a1a942721e11c6444e415309c15ab92f5c88baf894fa86f3fbf19f114793a",
          "sha256": "831a1a942721e11c6444e415309c15ab92f5c88baf894fa86f3fbf19f114793a"
        },
        "arm64_monterey": {
          "cellar": "/opt/homebrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/nvc/blobs/sha256:7400a83f0b6151faa3c3cbfbb3aad6cbebbc88f53372568c1c992e220b1ee3bc",
          "sha256": "7400a83f0b6151faa3c3cbfbb3aad6cbebbc88f53372568c1c992e220b1ee3bc"
        },
        "arm64_big_sur": {
          "cellar": "/opt/homebrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/nvc/blobs/sha256:742080c2313d9a9bf86c0239d9d2a315aa79f7b60f65f05df110b16c3cf1c669",
          "sha256": "742080c2313d9a9bf86c0239d9d2a315aa79f7b60f65f05df110b16c3cf1c669"
        },
        "ventura": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/nvc/blobs/sha256:cbe097938fd7ac50c26b544b3dcdd8dcbfbaaeeececee281ec652c6f5045fcc9",
          "sha256": "cbe097938fd7ac50c26b544b3dcdd8dcbfbaaeeececee281ec652c6f5045fcc9"
        },
        "monterey": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/nvc/blobs/sha256:e845a4ff1a18e65bd15e88ca7aa267b5acfecf0bfe602f550730a81553b6cec9",
          "sha256": "e845a4ff1a18e65bd15e88ca7aa267b5acfecf0bfe602f550730a81553b6cec9"
        },
        "big_sur": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/nvc/blobs/sha256:6dc16958be6de55bbcc6d87a13c1f182637fd67a2a95719a1dbba2a69354fe33",
          "sha256": "6dc16958be6de55bbcc6d87a13c1f182637fd67a2a95719a1dbba2a69354fe33"
        },
        "x86_64_linux": {
          "cellar": "/home/linuxbrew/.linuxbrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/nvc/blobs/sha256:a32f3e7aaa5f1d06083d84b5a977cac93f3a9feef41fdbee5f372e31ef1850f2",
          "sha256": "a32f3e7aaa5f1d06083d84b5a977cac93f3a9feef41fdbee5f372e31ef1850f2"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "check",
    "pkg-config"
  ],
  "dependencies": [
    "llvm"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    {
      "flex": "build"
    }
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/nvc.rb",
  "ruby_source_checksum": {
    "sha256": "1b0b6b2be998f3c100d414cbb5cea1a52efa669fea81457ea4ecbc0fa30734c4"
  },
  "head_dependencies": {
    "build_dependencies": [
      "autoconf",
      "automake",
      "check",
      "pkg-config"
    ],
    "dependencies": [
      "llvm"
    ],
    "test_dependencies": [],
    "recommended_dependencies": [],
    "optional_dependencies": [],
    "uses_from_macos": [
      {
        "flex": "build"
      }
    ],
    "uses_from_macos_bounds": [
      {}
    ]
  },
  "date_added": "2016-10-14T16:59:00+01:00",
  "readme": "### Synopsis\n\n[![Build\nStatus](https://github.com/nickg/nvc/workflows/Build%20and%20test/badge.svg?branch=master)](https://github.com/nickg/nvc/actions)\n[![Coverage Status](https://coveralls.io/repos/github/nickg/nvc/badge.svg?branch=master)](https://coveralls.io/github/nickg/nvc?branch=master)\n\nNVC is a [VHDL](https://en.wikipedia.org/wiki/VHDL) compiler and\nsimulator.\n\nNVC supports almost all of VHDL-2008 with the exception of PSL, and it\nhas been successfully used to simulate several real-world designs.\nExperimental support for VHDL-2019 is under development.\n\nNVC has a particular emphasis on simulation performance and uses\n[LLVM](https://llvm.org/) to compile VHDL to native machine code.\n\nNVC is not a synthesizer.  That is, it does not output something that\ncould be used to program an FPGA or ASIC.  It implements only the\nsimulation behaviour of the language as described by the [IEEE\n1076](https://standards.ieee.org/standard/1076-2019.html) standard.\n\nNVC supports popular verification frameworks including\n[OSVVM](https://osvvm.org/), [UVVM](https://www.uvvm.org/), and\n[VUnit](https://vunit.github.io/).  See [below](#vendor-libraries) for\ninstallation instructions.\n\n### Usage\n\nSimulating a VHDL hardware design involves three steps: _analysing_ the\nsource files; _elaborating_ the design; and _running_ the\nsimulation.  This is analogous to compiling, linking, and executing a\nsoftware program.  With NVC these steps are accomplished using the `-a`,\n`-e`, and `-r` commands:\n\n    $ nvc -a my_design.vhd my_tb.vhd\n    $ nvc -e my_tb\n    $ nvc -r my_tb\n\nOr more succinctly, as a single command:\n\n    $ nvc -a my_design.vhd my_tb.vhd -e my_tb -r\n\nWhere `my_tb` is the name of the top-level test-bench entity.\n\nThe full manual can be read after installation using `man nvc` or\n[online](https://www.nickg.me.uk/nvc/manual.html).\n\n### License\n\nThis program is [free\nsoftware](https://www.gnu.org/philosophy/free-sw.en.html) distributed\nunder the terms of the GNU General Public License version 3 or later.\nYou may use, modify, and redistribute the program as you wish but if you\ndistribute modifications you must preserve the license text and\ncopyright notices, and also make the modified source code available to\nyour users.\n\nThe source files for the IEEE standard libraries are included in the\nrepository.  These were originally provided under a proprietary license\nthat forbid distribution of modifications, but in 2019 were relicensed\nunder Apache 2.0.  Freely redistributable versions of the 1993 libraries\nwere made by editing and removing declarations from the 2019 libraries,\nand so are also licensed under Apache 2.0.  Certain VHDL libraries\ndeveloped specifically for NVC under `lib/nvc` and `lib/std` are also\nlicensed under Apache 2.0.  See the individual files for details.\n\nThe VITAL libraries are distributed under `lib/vital`.  These were\nderived from draft copies of the packages freely available on the\ninternet.  The license status of these is unclear as the final text is\npart of the VITAL standard which must be purchased from the IEEE.  If\nyou are packaging this program for a distribution with strict free\nsoftware requirements you should strip these files from the tarball and\nconfigure with `--disable-vital`.\n\n### Installing\n\nNVC is developed under GNU/Linux and is regularly tested on macOS and\nWindows under MSYS2.\n\nOn macOS NVC can be installed with `brew install nvc`.  NVC is also\npackaged for [FreeBSD](https://www.freshports.org/cad/nvc), [GNU\nGuix](https://guix.gnu.org/packages/nvc-1.5.3/), and Arch Linux\n[AUR](https://aur.archlinux.org/packages/nvc).  Users of other systems\nshould build from source.\n\nNVC has both a release branch and a development master branch. The\nmaster branch should be stable enough for day-to-day use and has\ncomprehensive regression tests, but the release branch is more suitable\nfor third party packaging.  The latest released version is\n[1.9.2](https://github.com/nickg/nvc/releases/download/r1.9.2/nvc-1.9.2.tar.gz).\nSignificant changes since the last release are detailed in\n[NEWS.md](NEWS.md).\n\nIf you are building from a Git clone rather than a released tarball you\nfirst need to generate the configure script using:\n\n    ./autogen.sh\n\nIn-tree builds are not supported so create a separate build directory:\n\n    mkdir build && cd build\n\nFinally build and install using the standard autotools steps:\n\n    ../configure\n    make\n    sudo make install\n\nTo use a specific version of LLVM add `--with-llvm=/path/to/llvm-config`\nto the configure command.  The minimum supported LLVM version is 8.0.\nVersions between 8 and 16 have all been tested.\n\nNVC also depends on Flex to generate the lexical analyser.\n\nOn a Debian derivative the following should be sufficient to install all\nrequired dependencies:\n\n    sudo apt-get install build-essential automake autoconf \\\n      flex check llvm-dev pkg-config zlib1g-dev libdw-dev \\\n      libffi-dev libzstd-dev\n\nOnly the MSYS2 environment on Windows is supported.  The required\ndependencies can be installed with:\n\n    pacman -S base-devel mingw-w64-x86_64-{llvm,ncurses,libffi,check,pkg-config,zstd}\n\n[GtkWave](http://gtkwave.sourceforge.net/) can be used to view\nsimulation waveforms.  Version 3.3.79 or later is required for the\ndefault FST format.\n\n#### Testing\n\nTo run the regression tests:\n\n    make check\n\nThe unit tests require the [check](https://libcheck.github.io/check/)\nlibrary.\n\n### Reporting bugs\n\nReport bugs to [nick@nickg.me.uk](mailto:nick+nvc@nickg.me.uk) or using\nthe [GitHub issue tracker](https://github.com/nickg/nvc/issues).  Please\ninclude enough information to reproduce the problem, ideally with a\nsmall VHDL test case.  Issue\n[#412](https://github.com/nickg/nvc/issues/412) is a good example.\n\nPlease remember that this software is provided to you with NO WARRANTY\nand no expectation of support, but I will do my best to help with any\nissues you encounter.\n\n### Contributing\n\nPatches can be sent as either pull requests on GitHub or by email using\n[git --send-email](https://git-send-email.io/).  Please note however\nthat as this is purely a spare-time hobby project for me, I have limited\ntime available to review patches.  All code submitted must follow the\nguidelines in [contrib/STYLE.md](contrib/STYLE.md).\n\nI will not accept patches that add new copyright owners under `src/`.\nThis is to ensure there is clear legal ownership should, for example,\nthe license need to be updated.  Significant contributors are instead\nlisted in [THANKS.md](THANKS.md).\n\n### Language Support\n\nVHDL standard revisions are commonly referred to by the year they were\npublished.  For example IEEE 1076-2008 is known as VHDL-2008.  The\ndefault standard in NVC is currently VHDL-2002 but this can be changed\nwith the `--std` argument.  For example `--std=2008` selects the\nVHDL-2008 standard.\n\nThe 1993, 2000, and 2002 revisions of the standard are fully supported.\nPlease raise bugs for any missing or incorrectly implemented features\nyou encounter.  The current status of VHDL-2008 and VHDL-2019 support\ncan be found on the [features](https://www.nickg.me.uk/nvc/features.html)\npage.\n\n##### VHPI\n\nThe VHDL standard contains a comprehensive API called VHPI for\ninterfacing with foreign code written in C or another language.  NVC\ncurrently has very limited support for VHPI.  Refer to the\n[manual](https://www.nickg.me.uk/nvc/manual.html#VHPI) for more\ninformation.\n\n### Vendor Libraries\n\nNVC provides scripts to compile popular verification frameworks and the\nsimulation libraries of common FPGA vendors.\n\n* For [OSVVM](https://osvvm.org/) use `nvc --install osvvm`\n* For [UVVM](https://www.uvvm.org/) use `nvc --install uvvm`\n* For Xilinx ISE use `nvc --install ise`\n* For Xilinx Vivado use `nvc --install vivado` and additionally `nvc\n  --install xpm_vhdl` if you require simulation models of the XPM macros\n* For Altera Quartus use `nvc --install quartus`\n* For Lattice iCEcube2 use `nvc --install icecube2`\n\nThe libraries will be installed under `~/.nvc/lib`."
}
