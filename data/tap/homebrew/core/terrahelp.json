{
  "name": "terrahelp",
  "full_name": "terrahelp",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Tool providing extra functionality for Terraform",
  "license": "Apache-2.0",
  "homepage": "https://github.com/opencredo/terrahelp",
  "versions": {
    "stable": "0.7.5",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/opencredo/terrahelp/archive/v0.7.5.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "bfcffdf06e1db075872a6283d1f1cc6858b8139bf10dd480969b419aa6fc01f7"
    },
    "head": {
      "url": "https://github.com/opencredo/terrahelp.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terrahelp/blobs/sha256:0637ab5db3f9423836bd621b67c01fcfbcf44fd86ac6033ff2b4ffab979a64b4",
          "sha256": "0637ab5db3f9423836bd621b67c01fcfbcf44fd86ac6033ff2b4ffab979a64b4"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terrahelp/blobs/sha256:1de2d581302493095a12fc646062b1ea074aa792a36e81d37827438e832599a3",
          "sha256": "1de2d581302493095a12fc646062b1ea074aa792a36e81d37827438e832599a3"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terrahelp/blobs/sha256:a416eab4b11b794fd807c6a6ce9d1fd87ebf8a4bfedeaa6ac45eeb9f6c092d52",
          "sha256": "a416eab4b11b794fd807c6a6ce9d1fd87ebf8a4bfedeaa6ac45eeb9f6c092d52"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terrahelp/blobs/sha256:87ba308df8d9e75be30aa87e63ed4682fe818f5dffc5d9528325fe6782876971",
          "sha256": "87ba308df8d9e75be30aa87e63ed4682fe818f5dffc5d9528325fe6782876971"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terrahelp/blobs/sha256:e04b7ade448da1809858ef7cefea05f34b5670d4b159b3f67d8700c0572201d7",
          "sha256": "e04b7ade448da1809858ef7cefea05f34b5670d4b159b3f67d8700c0572201d7"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terrahelp/blobs/sha256:da129e3fa2f21f00fe0b054d5510509d39d6d26cbd58efa7d06297363254fcc7",
          "sha256": "da129e3fa2f21f00fe0b054d5510509d39d6d26cbd58efa7d06297363254fcc7"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terrahelp/blobs/sha256:8db95e8da4909b68eaa18a9fab2e38769fcfa79426b3c1a53a4ac9d5315092fd",
          "sha256": "8db95e8da4909b68eaa18a9fab2e38769fcfa79426b3c1a53a4ac9d5315092fd"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terrahelp/blobs/sha256:10cfea117c1dd3d1e1f5c7b609b3c299c4544b46c87d996836971d1185e77004",
          "sha256": "10cfea117c1dd3d1e1f5c7b609b3c299c4544b46c87d996836971d1185e77004"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terrahelp/blobs/sha256:6fdaed3d9218418ada94b13cbdfc0bd156ac0b5b44294a95674df07a3e66147a",
          "sha256": "6fdaed3d9218418ada94b13cbdfc0bd156ac0b5b44294a95674df07a3e66147a"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/terrahelp.rb",
  "ruby_source_checksum": {
    "sha256": "5f1d0617961cdbfdfa096eac82a953474135cbbac803835a1670c3cd810890fa"
  },
  "date_added": "2019-12-06T19:45:52-05:00",
  "readme": "[![Travis CI][Travis-Image]][Travis-Url]\n[![ReportCard][ReportCard-Image]][ReportCard-Url]\n\n# Terrahelp\n##### Terraforming, with a little help from your friends\n\nTerrahelp is as a command line utility written in [Go](https://golang.org) and is aimed at\nproviding supplementary functionality which can sometimes prove useful when working with\n[Terraform](https://www.terraform.io).\n\nAt present, it offers the following:\n\n* _Encryption & decryption functionality_.\nRun in either full or inline mode, and leveraging either a simple or [Vault](https://www.vaultproject.io) based encryption provider, this\nfunctionality provides the ability to encrypt and decrypt files such as terraform.tfstate files, as well as piped in\noutput from commands such as terraform apply etc.\n\n* _Masking functionality_.\nIf you don't want to encrypt sensitive data, but rather just mask it out with something like ***** then you can use\nthe mask command instead. This can either be run over a file, or have the content piped into it.\n\nFor more details, and some examples of how to use it please see [the example READMEs](https://github.com/opencredo/terrahelp/tree/master/examples).\n\nAdditionally the blog post [Securing Terraform State with Vault](https://opencredo.com/blogs/securing-terraform-state-with-vault/) also provides more details and background as well.\n\n        NAME:\n           terrahelp - Provides additional functions helpful with terraform development\n\n        USAGE:\n           terrahelp [global options] command [command options] [arguments...]\n\n        VERSION:\n           X.X.X\n\n        AUTHOR(S):\n           https://github.com/opencredo OpenCredo - Nicki Watt\n\n        COMMANDS:\n            vault-autoconfig\tAuto configures Vault with a basic setup to support encrypt and decrypt actions.\n            encrypt\t\t        Uses configured provider to encrypt specified content\n            decrypt\t\t        Uses configured provider to decrypt specified content\n            mask                    Mask will overwrite sensitive data in output or files with a masked value (eg. ******).\n            help, h                 Shows a list of commands or help for one command\n\n        GLOBAL OPTIONS:\n           --help, -h\t\tshow help\n           --version, -v\tprint the version\n\n\n## Installation\n\n### macOS\n\nInstall using [Homebrew](https://brew.sh/):\n\n    brew install terrahelp\n    terrahelp -v\n\n### Manual Installation Using the Pre-Built Binaries\n\nAvailable from the Terrahelp repository's [releases page](https://github.com/opencredo/terrahelp/releases)\n\nThe community has also made it available as a [Terrahelp AUR package](https://aur.archlinux.org/packages/terrahelp)\n\n#### macOS, Linux & *BSD\n\nDownload a binary, set the correct permissions, add to your PATH:\n\n    chmod +x terrahelp\n    export PATH=$PATH:/wherever/terrahelp\n\nAnd run it:\n\n    terrahelp --help\n\n##### macOS Additional Step\n\n`terrahelp` may be prevented from running if you downloaded it using a web browser. To fix this, remove the quarantine attribute before running again:\n\n    xattr -d com.apple.quarantine terrahelp\n\n#### Windows\n\nNot yet supported\n\n## Build from source\n\n### Prerequisites\n\nInstall Go (Terrahelp is currently built against 1.16.x).  The following official resources will guide you through your environment setup.\n\n* [Getting Started](https://golang.org/doc/install)\n* [Go Documentation](https://golang.org/doc)\n\nClone the Terrahelp repository.\n\n```bash\nmkdir -p \"$GOPATH/src/github.com/opencredo/\"\ngit clone https://github.com/opencredo/terrahelp.git \"$GOPATH/src/github.com/opencredo/terrahelp\"\ncd \"$GOPATH/src/github.com/opencredo/terrahelp\"\n```\n\n### Dependencies\n\nTerrahelp uses Go modules to manage it's dependencies.  During Go's transition to switching on modules by default, Terrahelp is setup to buildusing the vendor directory.\nSupportive targets are prvoided to allow the vendor directory to be recreated if required.\n\n### Building and Executing\n\nAfter a build has completed successfully a binary will be built and placed into a local bin directory.  The following commands build and execute terrahelp.\n\n    make build\n    ./bin/terrahelp -v\n\n### Testing\n\n    make test\n\n### Installing and Executing\n\nInstallation places the binary in the `$GOPATH/bin` directory. Assuming that the directory has been added to your `PATH`, the following commands will install and execute Terrahelp.\n\n    make install\n    terrahelp -v\n\n### Want to cross compile it?\n\nThe make file allows both OSX and Linux binaries to be created at the same time or individually.\nThe following commands show joint creation followed by OSX, (darwin) then Linux creation.  All cross compiled binaries will be placed in a `dist` directory.\n\n    make dist\n    make darwin\n    make linux\n\n### Clean your project\n\nA number of work directories will have been created through the previous build steps. The local `bin` and `dist` directories will contain binaries.\nThe following command can be used to return the project back to a pre build state.\n\n    make clean\n\n### Dependency management\n\nThe following targets have been created to allow dependencies to be managed through Go modules.  As mentioned before Terrahelp builds using the vendor directory.\n\n* `make dependencies`\n  * Downloads the dependencies to the Go modules cache.\n* `make tidy-dependencies`\n  * Adds missing and removes unused modules.\n* `make vendor-dependencies`\n  * Copies the dependencies into the local vendor directory.\n* `make clean-dependencies`\n  * Removes the local vendor directory.\n\n**NOTE:**  The Makefile defines a variable called `BUILDARGS` and this is currently set with `-mod=vendor`.  This instructs various go commands to use the vendor directory.  This can be overridden to build to project using standard go module flows.\n\n    BUILDARGS='' make build\n\n## Releasing\n\n### Brew\n***NOTE:*** This step should be performed *after* a new version of `terrahelp` has been released.\n\nFollow the instructions outlined in [Submit a new version of an existing formula][Homebrew-Update-Formula] to update the version of `terrahelp` installed by Brew.\n\nFor reference, the formula can be viewed in the homebrew-core repository [here][Terrahelp-Formula].\n\n[Travis-Image]: https://travis-ci.org/opencredo/terrahelp.svg?branch=master\n[Travis-Url]: https://travis-ci.org/opencredo/terrahelp\n[ReportCard-Url]: http://goreportcard.com/report/opencredo/terrahelp\n[ReportCard-Image]: http://goreportcard.com/badge/opencredo/terrahelp\n[Homebrew-Update-Formula]: https://docs.brew.sh/How-To-Open-a-Homebrew-Pull-Request#submit-a-new-version-of-an-existing-formula\n[Terrahelp-Formula]: https://github.com/Homebrew/homebrew-core/blob/master/Formula/terrahelp.rb"
}
