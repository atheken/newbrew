{
  "name": "jet",
  "full_name": "jet",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Type safe SQL builder with code generation and auto query result data mapping",
  "license": "Apache-2.0",
  "homepage": "https://github.com/go-jet/jet",
  "versions": {
    "stable": "2.10.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/go-jet/jet/archive/refs/tags/v2.10.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "94f964b2eba69e2df1f922cf83b193a276f6b64ac742bd65670fd07a307aee22"
    },
    "head": {
      "url": "https://github.com/go-jet/jet.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/jet/blobs/sha256:19e720e66149cd632a73fce73bbb3993f4b278bef524e70c0b5d380d176b2151",
          "sha256": "19e720e66149cd632a73fce73bbb3993f4b278bef524e70c0b5d380d176b2151"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/jet/blobs/sha256:3575267bfac6e2915d6509d120b3997f35c319e1bf5a2874562775edd8aa34a4",
          "sha256": "3575267bfac6e2915d6509d120b3997f35c319e1bf5a2874562775edd8aa34a4"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/jet/blobs/sha256:5558fc8b5d0bbd7309dd2985d957ad62e38631202a9473b331e70fb6d557086a",
          "sha256": "5558fc8b5d0bbd7309dd2985d957ad62e38631202a9473b331e70fb6d557086a"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/jet/blobs/sha256:22c63a2140468e0b01a9d9db4905cc9a9111bb92e79e719d7924cc3f64ac5ff7",
          "sha256": "22c63a2140468e0b01a9d9db4905cc9a9111bb92e79e719d7924cc3f64ac5ff7"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/jet/blobs/sha256:0864144bde8a0a64321dc4f52999cf7cecec52335653f17e81b09797315e7b01",
          "sha256": "0864144bde8a0a64321dc4f52999cf7cecec52335653f17e81b09797315e7b01"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/jet/blobs/sha256:d7a0db87b66cc64e9dc734bc917f8f02fb2c7bfd359ca20403845f5c565eea77",
          "sha256": "d7a0db87b66cc64e9dc734bc917f8f02fb2c7bfd359ca20403845f5c565eea77"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/jet/blobs/sha256:51793306a7358db7fddce5dcc2da3506e852c1428b8ec2470f4989f12e355e83",
          "sha256": "51793306a7358db7fddce5dcc2da3506e852c1428b8ec2470f4989f12e355e83"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/jet.rb",
  "ruby_source_checksum": {
    "sha256": "c22744a11ab75877aa515d500a46dbf1c07fbc8a3c7f2043c51f8f728257ec43"
  },
  "date_added": "2023-05-08T20:36:42-07:00",
  "readme": "# Jet\n\n[![go-jet](https://circleci.com/gh/go-jet/jet.svg?style=svg)](https://app.circleci.com/pipelines/github/go-jet/jet?branch=master)\n[![codecov](https://codecov.io/gh/go-jet/jet/branch/master/graph/badge.svg)](https://codecov.io/gh/go-jet/jet)\n[![Go Report Card](https://goreportcard.com/badge/github.com/go-jet/jet)](https://goreportcard.com/report/github.com/go-jet/jet/v2)\n[![Documentation](https://godoc.org/github.com/go-jet/jet?status.svg)](http://godoc.org/github.com/go-jet/jet/v2)\n[![GitHub release](https://img.shields.io/github/release/go-jet/jet.svg)](https://github.com/go-jet/jet/releases)\n\nJet is a complete solution for efficient and high performance database access, consisting of type-safe SQL builder \nwith code generation and automatic query result data mapping.  \nJet currently supports `PostgreSQL`, `MySQL`, `CockroachDB`, `MariaDB` and `SQLite`. Future releases will add support for additional databases.\n\n![jet](https://github.com/go-jet/jet/wiki/image/jet.png)  \nJet is the easiest, and the fastest way to write complex type-safe SQL queries as a Go code and map database query result \ninto complex object composition. __It is not an ORM.__ \n\n## Motivation\nhttps://medium.com/@go.jet/jet-5f3667efa0cc\n\n## Contents\n- [Features](#features)\n- [Getting Started](#getting-started)\n  - [Prerequisites](#prerequisites)\n  - [Installation](#installation)\n  - [Quick Start](#quick-start)\n     - [Generate sql builder and model types](#generate-sql-builder-and-model-types)\n     - [Lets write some SQL queries in Go](#lets-write-some-sql-queries-in-go)\n     - [Execute query and store result](#execute-query-and-store-result)\n- [Benefits](#benefits)\n- [Dependencies](#dependencies)\n- [Versioning](#versioning)\n- [License](#license)\n\n## Features\n 1) Auto-generated type-safe SQL Builder. Statements supported:\n    * [SELECT](https://github.com/go-jet/jet/wiki/SELECT) `(DISTINCT, FROM, WHERE, GROUP BY, HAVING, ORDER BY, LIMIT, OFFSET, FOR, LOCK_IN_SHARE_MODE, UNION, INTERSECT, EXCEPT, WINDOW, sub-queries)`\n    * [INSERT](https://github.com/go-jet/jet/wiki/INSERT) `(VALUES, MODEL, MODELS, QUERY, ON_CONFLICT/ON_DUPLICATE_KEY_UPDATE, RETURNING)`, \n    * [UPDATE](https://github.com/go-jet/jet/wiki/UPDATE) `(SET, MODEL, WHERE, RETURNING)`, \n    * [DELETE](https://github.com/go-jet/jet/wiki/DELETE) `(WHERE, ORDER_BY, LIMIT, RETURNING)`,\n    * [LOCK](https://github.com/go-jet/jet/wiki/LOCK) `(IN, NOWAIT)`, `(READ, WRITE)`\n    * [WITH](https://github.com/go-jet/jet/wiki/WITH)\n    \n 2) Auto-generated Data Model types - Go types mapped to database type (table, view or enum), used to store\n result of database queries. Can be combined to create complex query result destination. \n 3) Query execution with result mapping to arbitrary destination. \n\n## Getting Started\n\n### Prerequisites\n\nTo install Jet package, you need to install Go and set your Go workspace first.\n\n[Go](https://golang.org/) **version 1.9+ is required**\n\n### Installation\n\nUse the command bellow to add jet as a dependency into `go.mod` project:\n```sh\n$ go get -u github.com/go-jet/jet/v2\n```\n\nJet generator can be installed in one of the following ways:\n\n- (Go1.16+) Install jet generator using go install:\n```sh\ngo install github.com/go-jet/jet/v2/cmd/jet@latest\n```\n*Jet generator is installed to the directory named by the GOBIN environment variable,\nwhich defaults to $GOPATH/bin or $HOME/go/bin if the GOPATH environment variable is not set.*\n\n- Install jet generator to specific folder:\n```sh\ngit clone https://github.com/go-jet/jet.git\ncd jet && go build -o dir_path ./cmd/jet\n```\n*Make sure `dir_path` folder is added to the PATH environment variable.*\n\n\n\n### Quick Start\nFor this quick start example we will use PostgreSQL sample _'dvd rental'_ database. Full database dump can be found in\n[./tests/testdata/init/postgres/dvds.sql](https://github.com/go-jet/jet-test-data/blob/master/init/postgres/dvds.sql).\nSchema diagram of interest can be found [here](./examples/quick-start/diagram.png).\n\n#### Generate SQL Builder and Model types\nTo generate jet SQL Builder and Data Model types from running postgres database, we need to call `jet` generator with postgres \nconnection parameters and destination folder path. \nAssuming we are running local postgres database, with user `user`, user password `pass`, database `jetdb` and \nschema `dvds` we will use this command:\n```sh\njet -dsn=postgresql://user:pass@localhost:5432/jetdb?sslmode=disable -schema=dvds -path=./.gen\n```\n```sh\nConnecting to postgres database: postgresql://user:pass@localhost:5432/jetdb?sslmode=disable \nRetrieving schema information...\n\tFOUND 15 table(s), 7 view(s), 1 enum(s)\nCleaning up destination directory...\nGenerating table sql builder files...\nGenerating view sql builder files...\nGenerating enum sql builder files...\nGenerating table model files...\nGenerating view model files...\nGenerating enum model files...\nDone\n```\nProcedure is similar for MySQL, CockroachDB, MariaDB and SQLite. For example:\n```sh\njet -source=mysql -dsn=\"user:pass@tcp(localhost:3306)/dbname\" -path=./.gen\njet -dsn=postgres://user:pass@localhost:26257/jetdb?sslmode=disable -schema=dvds -path=./.gen  #cockroachdb\njet -dsn=\"mariadb://user:pass@tcp(localhost:3306)/dvds\" -path=./.gen              # source flag can be omitted if data source appears in dsn\njet -source=sqlite -dsn=\"/path/to/sqlite/database/file\" -schema=dvds -path=./.gen\njet -dsn=\"file:///path/to/sqlite/database/file\" -schema=dvds -path=./.gen         # sqlite database assumed for 'file' data sources\n```\n_*User has to have a permission to read information schema tables._\n\nAs command output suggest, Jet will:\n- connect to postgres database and retrieve information about the _tables_, _views_ and _enums_ of `dvds` schema\n- delete everything in schema destination folder -  `./.gen/jetdb/dvds`,   \n- and finally generate SQL Builder and Model types for each schema table, view and enum.  \n\n\nGenerated files folder structure will look like this:\n```sh \n|-- .gen                              # -path\n|   `-- jetdb                         # database name\n|       `-- dvds                      # schema name\n|           |-- enum                  # sql builder package for enums\n|           |   |-- mpaa_rating.go\n|           |-- table                 # sql builder package for tables\n|               |-- actor.go\n|               |-- address.go\n|               |-- category.go\n|               ...\n|           |-- view                 # sql builder package for views\n|               |-- actor_info.go\n|               |-- film_list.go\n|               ...\n|           |-- model                 # data model types for each table, view and enum\n|           |   |-- actor.go\n|           |   |-- address.go\n|           |   |-- mpaa_rating.go\n|           |   ...\n```\nTypes from `table`, `view` and `enum` are used to write type safe SQL in Go, and `model` types are combined to store \nresults of the SQL queries.\n\n\n\n#### Let's write some SQL queries in Go\n\nFirst we need to import postgres SQLBuilder and generated packages from the previous step:\n```go\nimport (\n\t// dot import so go code would resemble as much as native SQL\n\t// dot import is not mandatory\n\t. \"github.com/go-jet/jet/v2/examples/quick-start/.gen/jetdb/dvds/table\"\n\t. \"github.com/go-jet/jet/v2/postgres\"\n\n\t\"github.com/go-jet/jet/v2/examples/quick-start/.gen/jetdb/dvds/model\"\n)\n```\nLet's say we want to retrieve the list of all _actors_ that acted in _films_ longer than 180 minutes, _film language_ is 'English' \nand _film category_ is not 'Action'.  \n```golang\nstmt := SELECT(\n    Actor.ActorID, Actor.FirstName, Actor.LastName, Actor.LastUpdate,  // or just Actor.AllColumns\n    Film.AllColumns,                                                  \n    Language.AllColumns.Except(Language.LastUpdate),  // all language columns except last_update \n    Category.AllColumns,\n).FROM(\n    Actor.\n        INNER_JOIN(FilmActor, Actor.ActorID.EQ(FilmActor.ActorID)).  \n        INNER_JOIN(Film, Film.FilmID.EQ(FilmActor.FilmID)).          \n        INNER_JOIN(Language, Language.LanguageID.EQ(Film.LanguageID)).\n        INNER_JOIN(FilmCategory, FilmCategory.FilmID.EQ(Film.FilmID)).\n        INNER_JOIN(Category, Category.CategoryID.EQ(FilmCategory.CategoryID)),\n).WHERE(\n    Language.Name.EQ(String(\"English\")).             \n        AND(Category.Name.NOT_EQ(String(\"Action\"))).  \n        AND(Film.Length.GT(Int(180))),               \n).ORDER_BY(\n    Actor.ActorID.ASC(),\n    Film.FilmID.ASC(),\n)\n```\n_Package(dot) import is used, so the statements look as close as possible to the native SQL._  \nNote that every column has a type. String column `Language.Name` and `Category.Name` can be compared only with \nstring columns and expressions. `Actor.ActorID`, `FilmActor.ActorID`, `Film.Length` are integer columns \nand can be compared only with integer columns and expressions.\n\n__How to get a parametrized SQL query from the statement?__\n```go\nquery, args := stmt.Sql()\n```\nquery - parametrized query  \nargs - query parameters \n\n<details>\n  <summary>Click to see `query` and `args`</summary>\n  \n```sql\nSELECT actor.actor_id AS \"actor.actor_id\",\n     actor.first_name AS \"actor.first_name\",\n     actor.last_name AS \"actor.last_name\",\n     actor.last_update AS \"actor.last_update\",\n     film.film_id AS \"film.film_id\",\n     film.title AS \"film.title\",\n     film.description AS \"film.description\",\n     film.release_year AS \"film.release_year\",\n     film.language_id AS \"film.language_id\",\n     film.rental_duration AS \"film.rental_duration\",\n     film.rental_rate AS \"film.rental_rate\",\n     film.length AS \"film.length\",\n     film.replacement_cost AS \"film.replacement_cost\",\n     film.rating AS \"film.rating\",\n     film.last_update AS \"film.last_update\",\n     film.special_features AS \"film.special_features\",\n     film.fulltext AS \"film.fulltext\",\n     language.language_id AS \"language.language_id\",\n     language.name AS \"language.name\",\n     language.last_update AS \"language.last_update\",\n     category.category_id AS \"category.category_id\",\n     category.name AS \"category.name\",\n     category.last_update AS \"category.last_update\"\nFROM dvds.actor\n     INNER JOIN dvds.film_actor ON (actor.actor_id = film_actor.actor_id)\n     INNER JOIN dvds.film ON (film.film_id = film_actor.film_id)\n     INNER JOIN dvds.language ON (language.language_id = film.language_id)\n     INNER JOIN dvds.film_category ON (film_category.film_id = film.film_id)\n     INNER JOIN dvds.category ON (category.category_id = film_category.category_id)\nWHERE ((language.name = $1) AND (category.name != $2)) AND (film.length > $3)\nORDER BY actor.actor_id ASC, film.film_id ASC;\n```\n```sh \n[English Action 180]\n```\n\n\n</details>\n    \n__How to get debug SQL from statement?__  \n ```go\ndebugSql := stmt.DebugSql()\n```\ndebugSql - this query string can be copy-pasted to sql editor and executed. __It is not intended to be used in production. For debug purposes only!!!__\n\n<details>\n  <summary>Click to see debug sql</summary>\n  \n```sql\nSELECT actor.actor_id AS \"actor.actor_id\",\n     actor.first_name AS \"actor.first_name\",\n     actor.last_name AS \"actor.last_name\",\n     actor.last_update AS \"actor.last_update\",\n     film.film_id AS \"film.film_id\",\n     film.title AS \"film.title\",\n     film.description AS \"film.description\",\n     film.release_year AS \"film.release_year\",\n     film.language_id AS \"film.language_id\",\n     film.rental_duration AS \"film.rental_duration\",\n     film.rental_rate AS \"film.rental_rate\",\n     film.length AS \"film.length\",\n     film.replacement_cost AS \"film.replacement_cost\",\n     film.rating AS \"film.rating\",\n     film.last_update AS \"film.last_update\",\n     film.special_features AS \"film.special_features\",\n     film.fulltext AS \"film.fulltext\",\n     language.language_id AS \"language.language_id\",\n     language.name AS \"language.name\",\n     language.last_update AS \"language.last_update\",\n     category.category_id AS \"category.category_id\",\n     category.name AS \"category.name\",\n     category.last_update AS \"category.last_update\"\nFROM dvds.actor\n     INNER JOIN dvds.film_actor ON (actor.actor_id = film_actor.actor_id)\n     INNER JOIN dvds.film ON (film.film_id = film_actor.film_id)\n     INNER JOIN dvds.language ON (language.language_id = film.language_id)\n     INNER JOIN dvds.film_category ON (film_category.film_id = film.film_id)\n     INNER JOIN dvds.category ON (category.category_id = film_category.category_id)\nWHERE ((language.name = 'English') AND (category.name != 'Action')) AND (film.length > 180)\nORDER BY actor.actor_id ASC, film.film_id ASC;\n```\n</details>\n\n\n#### Execute query and store result\n\nWell-formed SQL is just a first half of the job. Let's see how can we make some sense of result set returned executing \nabove statement. Usually this is the most complex and tedious work, but with Jet it is the easiest.\n\nFirst we have to create desired structure to store query result. \nThis is done be combining autogenerated model types, or it can be done \nby combining custom model types(see [wiki](https://github.com/go-jet/jet/wiki/Query-Result-Mapping-(QRM)#custom-model-types) for more information).  \n\n_Note that it's possible to overwrite default jet generator behavior. All the aspects of generated model and SQLBuilder types can be \ntailor-made([wiki](https://github.com/go-jet/jet/wiki/Generator#generator-customization))._\n\nLet's say this is our desired structure made of autogenerated types:  \n```go\nvar dest []struct {\n    model.Actor\n    \n    Films []struct {\n        model.Film\n        \n        Language    model.Language\n        Categories  []model.Category\n    }\n}\n```\n`Films` field is a slice because one actor can act in multiple films, and because each film belongs to one language\n`Langauge` field is just a single model struct. `Film` can belong to multiple categories.  \n_*There is no limitation of how big or nested destination can be._\n\nNow let's execute above statement on open database connection (or transaction) db and store result into `dest`.\n\n```go\nerr := stmt.Query(db, &dest)\nhandleError(err)\n```\n\n__And that's it.__\n  \n`dest` now contains the list of all actors(with list of films acted, where each film has information about language and list of belonging categories) that acted in films longer than 180 minutes, film language is 'English' \nand film category is not 'Action'.\n\nLets print `dest` as a json to see:\n```go\njsonText, _ := json.MarshalIndent(dest, \"\", \"\\t\")\nfmt.Println(string(jsonText))\n```\n\n```js\n[\n\t{\n\t\t\"ActorID\": 1,\n\t\t\"FirstName\": \"Penelope\",\n\t\t\"LastName\": \"Guiness\",\n\t\t\"LastUpdate\": \"2013-05-26T14:47:57.62Z\",\n\t\t\"Films\": [\n\t\t\t{\n\t\t\t\t\"FilmID\": 499,\n\t\t\t\t\"Title\": \"King Evolution\",\n\t\t\t\t\"Description\": \"A Action-Packed Tale of a Boy And a Lumberjack who must Chase a Madman in A Baloon\",\n\t\t\t\t\"ReleaseYear\": 2006,\n\t\t\t\t\"LanguageID\": 1,\n\t\t\t\t\"RentalDuration\": 3,\n\t\t\t\t\"RentalRate\": 4.99,\n\t\t\t\t\"Length\": 184,\n\t\t\t\t\"ReplacementCost\": 24.99,\n\t\t\t\t\"Rating\": \"NC-17\",\n\t\t\t\t\"LastUpdate\": \"2013-05-26T14:50:58.951Z\",\n\t\t\t\t\"SpecialFeatures\": \"{Trailers,\\\"Deleted Scenes\\\",\\\"Behind the Scenes\\\"}\",\n\t\t\t\t\"Fulltext\": \"'action':5 'action-pack':4 'baloon':21 'boy':10 'chase':16 'evolut':2 'king':1 'lumberjack':13 'madman':18 'must':15 'pack':6 'tale':7\",\n\t\t\t\t\"Language\": {\n\t\t\t\t\t\"LanguageID\": 1,\n\t\t\t\t\t\"Name\": \"English             \",\n\t\t\t\t\t\"LastUpdate\": \"0001-01-01T00:00:00Z\"\n\t\t\t\t},\n\t\t\t\t\"Categories\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"CategoryID\": 8,\n\t\t\t\t\t\t\"Name\": \"Family\",\n\t\t\t\t\t\t\"LastUpdate\": \"2006-02-15T09:46:27Z\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\t\"ActorID\": 3,\n\t\t\"FirstName\": \"Ed\",\n\t\t\"LastName\": \"Chase\",\n\t\t\"LastUpdate\": \"2013-05-26T14:47:57.62Z\",\n\t\t\"Films\": [\n\t\t\t{\n\t\t\t\t\"FilmID\": 996,\n\t\t\t\t\"Title\": \"Young Language\",\n\t\t\t\t\"Description\": \"A Unbelieveable Yarn of a Boat And a Database Administrator who must Meet a Boy in The First Manned Space Station\",\n\t\t\t\t\"ReleaseYear\": 2006,\n\t\t\t\t\"LanguageID\": 1,\n\t\t\t\t\"RentalDuration\": 6,\n\t\t\t\t\"RentalRate\": 0.99,\n\t\t\t\t\"Length\": 183,\n\t\t\t\t\"ReplacementCost\": 9.99,\n\t\t\t\t\"Rating\": \"G\",\n\t\t\t\t\"LastUpdate\": \"2013-05-26T14:50:58.951Z\",\n\t\t\t\t\"SpecialFeatures\": \"{Trailers,\\\"Behind the Scenes\\\"}\",\n\t\t\t\t\"Fulltext\": \"'administr':12 'boat':8 'boy':17 'databas':11 'first':20 'languag':2 'man':21 'meet':15 'must':14 'space':22 'station':23 'unbeliev':4 'yarn':5 'young':1\",\n\t\t\t\t\"Language\": {\n\t\t\t\t\t\"LanguageID\": 1,\n\t\t\t\t\t\"Name\": \"English             \",\n\t\t\t\t\t\"LastUpdate\": \"0001-01-01T00:00:00Z\"\n\t\t\t\t},\n\t\t\t\t\"Categories\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"CategoryID\": 6,\n\t\t\t\t\t\t\"Name\": \"Documentary\",\n\t\t\t\t\t\t\"LastUpdate\": \"2006-02-15T09:46:27Z\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t},\n\t//...(125 more items)\n]\n```\n\nWhat if, we also want to have list of films per category and actors per category, where films are longer than 180 minutes, film language is 'English' \nand film category is not 'Action'.  \nIn that case we can reuse above statement `stmt`, and just change our destination:\n\n```go\nvar dest2 []struct {\n    model.Category\n\n    Films []model.Film\n    Actors []model.Actor\n}\n\nerr = stmt.Query(db, &dest2)\nhandleError(err)\n```\n<details>\n  <summary>Click to see `dest2` json</summary>\n\n```js\n[\n\t{\n\t\t\"CategoryID\": 8,\n\t\t\"Name\": \"Family\",\n\t\t\"LastUpdate\": \"2006-02-15T09:46:27Z\",\n\t\t\"Films\": [\n\t\t\t{\n\t\t\t\t\"FilmID\": 499,\n\t\t\t\t\"Title\": \"King Evolution\",\n\t\t\t\t\"Description\": \"A Action-Packed Tale of a Boy And a Lumberjack who must Chase a Madman in A Baloon\",\n\t\t\t\t\"ReleaseYear\": 2006,\n\t\t\t\t\"LanguageID\": 1,\n\t\t\t\t\"RentalDuration\": 3,\n\t\t\t\t\"RentalRate\": 4.99,\n\t\t\t\t\"Length\": 184,\n\t\t\t\t\"ReplacementCost\": 24.99,\n\t\t\t\t\"Rating\": \"NC-17\",\n\t\t\t\t\"LastUpdate\": \"2013-05-26T14:50:58.951Z\",\n\t\t\t\t\"SpecialFeatures\": \"{Trailers,\\\"Deleted Scenes\\\",\\\"Behind the Scenes\\\"}\",\n\t\t\t\t\"Fulltext\": \"'action':5 'action-pack':4 'baloon':21 'boy':10 'chase':16 'evolut':2 'king':1 'lumberjack':13 'madman':18 'must':15 'pack':6 'tale':7\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"FilmID\": 50,\n\t\t\t\t\"Title\": \"Baked Cleopatra\",\n\t\t\t\t\"Description\": \"A Stunning Drama of a Forensic Psychologist And a Husband who must Overcome a Waitress in A Monastery\",\n\t\t\t\t\"ReleaseYear\": 2006,\n\t\t\t\t\"LanguageID\": 1,\n\t\t\t\t\"RentalDuration\": 3,\n\t\t\t\t\"RentalRate\": 2.99,\n\t\t\t\t\"Length\": 182,\n\t\t\t\t\"ReplacementCost\": 20.99,\n\t\t\t\t\"Rating\": \"G\",\n\t\t\t\t\"LastUpdate\": \"2013-05-26T14:50:58.951Z\",\n\t\t\t\t\"SpecialFeatures\": \"{Commentaries,\\\"Behind the Scenes\\\"}\",\n\t\t\t\t\"Fulltext\": \"'bake':1 'cleopatra':2 'drama':5 'forens':8 'husband':12 'monasteri':20 'must':14 'overcom':15 'psychologist':9 'stun':4 'waitress':17\"\n\t\t\t}\n\t\t],\n\t\t\"Actors\": [\n\t\t\t{\n\t\t\t\t\"ActorID\": 1,\n\t\t\t\t\"FirstName\": \"Penelope\",\n\t\t\t\t\"LastName\": \"Guiness\",\n\t\t\t\t\"LastUpdate\": \"2013-05-26T14:47:57.62Z\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"ActorID\": 20,\n\t\t\t\t\"FirstName\": \"Lucille\",\n\t\t\t\t\"LastName\": \"Tracy\",\n\t\t\t\t\"LastUpdate\": \"2013-05-26T14:47:57.62Z\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"ActorID\": 36,\n\t\t\t\t\"FirstName\": \"Burt\",\n\t\t\t\t\"LastName\": \"Dukakis\",\n\t\t\t\t\"LastUpdate\": \"2013-05-26T14:47:57.62Z\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"ActorID\": 70,\n\t\t\t\t\"FirstName\": \"Michelle\",\n\t\t\t\t\"LastName\": \"Mcconaughey\",\n\t\t\t\t\"LastUpdate\": \"2013-05-26T14:47:57.62Z\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"ActorID\": 118,\n\t\t\t\t\"FirstName\": \"Cuba\",\n\t\t\t\t\"LastName\": \"Allen\",\n\t\t\t\t\"LastUpdate\": \"2013-05-26T14:47:57.62Z\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"ActorID\": 187,\n\t\t\t\t\"FirstName\": \"Renee\",\n\t\t\t\t\"LastName\": \"Ball\",\n\t\t\t\t\"LastUpdate\": \"2013-05-26T14:47:57.62Z\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"ActorID\": 198,\n\t\t\t\t\"FirstName\": \"Mary\",\n\t\t\t\t\"LastName\": \"Keitel\",\n\t\t\t\t\"LastUpdate\": \"2013-05-26T14:47:57.62Z\"\n\t\t\t}\n\t\t]\n\t},\n    //...\n]\n```\n</details>\n\nComplete code example can be found at [./examples/quick-start/quick-start.go](./examples/quick-start/quick-start.go)\n\n\nThis example represent probably the most common use case.  Detail info about additional statements, features and use cases can be \nfound at project [Wiki](https://github.com/go-jet/jet/wiki) page.\n\n## Benefits\n\nWhat are the benefits of writing SQL in Go using Jet?  \nThe biggest benefit is speed. Speed is being improved in 3 major areas:\n\n##### Speed of development  \n\nWriting SQL queries is faster and easier, as developers will have help of SQL code completion and SQL type safety directly from Go code.\nAutomatic scan to arbitrary structure removes a lot of headache and boilerplate code needed to structure database query result.  \n\n##### Speed of execution\n\nWhile ORM libraries can introduce significant performance penalties due to number of round-trips to the database, \nJet will always perform better as developers can write complex query and retrieve result with a single database call. \nThus handler time lost on latency between server and database can be constant. Handler execution will be proportional \nonly to the query complexity and the number of rows returned from database. \n\nWith Jet, it is even possible to join the whole database and store the whole structured result in one database call. \nThis is exactly what is being done in one of the tests: [TestJoinEverything](https://github.com/go-jet/jet/blob/6706f4b228f51cf810129f57ba90bbdb60b85fe7/tests/postgres/chinook_db_test.go#L187). \nThe whole test database is joined and query result(~10,000 rows) is stored in a structured variable in less than 0.5s. \n\n##### How quickly bugs are found\n\nThe most expensive bugs are the one discovered on the production, and the least expensive are those found during development.\nWith automatically generated type safe SQL, not only queries are written faster but bugs are found sooner.  \nLet's return to quick start example, and take closer look at a line:\n ```go\nAND(Film.Length.GT(Int(180))),\n```\nLet's say someone changes column `length` to `duration` from `film` table. The next go build will fail at that line, and \nthe bug will be caught at compile time.\n\nLet's say someone changes the type of `length` column to some non integer type. Build will also fail at the same line\nbecause integer columns and expressions can be only compared to other integer columns and expressions.\n\nBuild will also fail if someone removes `length` column from `film` table. `Film` field will be omitted from SQL Builder and Model types, \nnext time `jet` generator is run.\n\nWithout Jet these bugs will have to be either caught by some test or by manual testing. \n\n## Dependencies\nAt the moment Jet dependence only of:\n- `github.com/lib/pq` _(Used by jet generator to read `PostgreSQL` database information)_\n- `github.com/go-sql-driver/mysql` _(Used by jet generator to read `MySQL` and `MariaDB` database information)_\n- `github.com/mattn/go-sqlite3` _(Used by jet generator to read `SQLite` database information)_ \n- `github.com/google/uuid` _(Used in data model files and for debug purposes)_\n  \nTo run the tests, additional dependencies are required:\n- `github.com/pkg/profile`\n- `github.com/stretchr/testify`\n- `github.com/google/go-cmp`\n- `github.com/jackc/pgx/v4`\n- `github.com/shopspring/decimal`\n- `github.com/volatiletech/null/v8`\n\n## Versioning\n\n[SemVer](http://semver.org/) is used for versioning. For the versions available, take a look at the [releases](https://github.com/go-jet/jet/releases).  \n\n## License\n\nCopyright 2019-2023 Goran Bjelanovic  \nLicensed under the Apache License, Version 2.0."
}
