{
  "name": "quicktype",
  "full_name": "quicktype",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Generate types and converters from JSON, Schema, and GraphQL",
  "license": "Apache-2.0",
  "homepage": "https://github.com/quicktype/quicktype",
  "versions": {
    "stable": "23.0.63",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://registry.npmjs.org/quicktype/-/quicktype-23.0.63.tgz",
      "tag": null,
      "revision": null,
      "checksum": "f3343cacc2ea1052f2f3058c6048aac0cef68e5929008c1c962fa6510f0f9783"
    },
    "head": {
      "url": "https://github.com/quicktype/quicktype.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/quicktype/blobs/sha256:894c564fe29101dfdc25d27b820cd2d87f15d3c18786995d9a03e0549d14da72",
          "sha256": "894c564fe29101dfdc25d27b820cd2d87f15d3c18786995d9a03e0549d14da72"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/quicktype/blobs/sha256:894c564fe29101dfdc25d27b820cd2d87f15d3c18786995d9a03e0549d14da72",
          "sha256": "894c564fe29101dfdc25d27b820cd2d87f15d3c18786995d9a03e0549d14da72"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/quicktype/blobs/sha256:894c564fe29101dfdc25d27b820cd2d87f15d3c18786995d9a03e0549d14da72",
          "sha256": "894c564fe29101dfdc25d27b820cd2d87f15d3c18786995d9a03e0549d14da72"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/quicktype/blobs/sha256:b082edb7556a0584e126e4a3abf0c1f12400df908a82218ea771ba61ca57acda",
          "sha256": "b082edb7556a0584e126e4a3abf0c1f12400df908a82218ea771ba61ca57acda"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/quicktype/blobs/sha256:b082edb7556a0584e126e4a3abf0c1f12400df908a82218ea771ba61ca57acda",
          "sha256": "b082edb7556a0584e126e4a3abf0c1f12400df908a82218ea771ba61ca57acda"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/quicktype/blobs/sha256:b082edb7556a0584e126e4a3abf0c1f12400df908a82218ea771ba61ca57acda",
          "sha256": "b082edb7556a0584e126e4a3abf0c1f12400df908a82218ea771ba61ca57acda"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/quicktype/blobs/sha256:ba089ffe12312c4974305ab06e7b24f600852f070a33676e0e5d998b9c18af19",
          "sha256": "ba089ffe12312c4974305ab06e7b24f600852f070a33676e0e5d998b9c18af19"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "node"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/quicktype.rb",
  "ruby_source_checksum": {
    "sha256": "424762a27b0069283d0f3d1094595ea921f0fde857f47918e2aa5f155c675109"
  },
  "date_added": "2017-12-15T09:19:49+01:00",
  "readme": "![](https://raw.githubusercontent.com/quicktype/quicktype/master/media/quicktype-logo.svg?sanitize=true)\n\n[![npm version](https://badge.fury.io/js/quicktype.svg)](https://badge.fury.io/js/quicktype)\n![Build status](https://github.com/quicktype/quicktype/actions/workflows/master.yaml/badge.svg)\n\n`quicktype` generates strongly-typed models and serializers from JSON, JSON Schema, TypeScript, and [GraphQL queries](https://blog.quicktype.io/graphql-with-quicktype/), making it a breeze to work with JSON type-safely in many programming languages.\n\n-   [Try `quicktype` in your browser](https://app.quicktype.io).\n-   Read ['A first look at quicktype'](http://blog.quicktype.io/first-look/) for more introduction.\n-   If you have any questions, check out the [FAQ](FAQ.md) first.\n\n### Supported Inputs\n\n| JSON | JSON API URLs | [JSON Schema](https://app.quicktype.io/#s=coordinate) |\n| ---- | ------------- | ----------------------------------------------------- |\n\n| TypeScript | GraphQL queries |\n| ---------- | --------------- |\n\n### Target Languages\n\n| [Ruby](https://app.quicktype.io/#l=ruby) | [JavaScript](https://app.quicktype.io/#l=js) | [Flow](https://app.quicktype.io/#l=flow) | [Rust](https://app.quicktype.io/#l=rust) | [Kotlin](https://app.quicktype.io/#l=kotlin) |\n| ---------------------------------------- | -------------------------------------------- | ---------------------------------------- | ---------------------------------------- | -------------------------------------------- |\n\n| [Dart](https://app.quicktype.io/#l=dart) | [Python](https://app.quicktype.io/#l=python) | [C#](https://app.quicktype.io/#l=cs) | [Go](https://app.quicktype.io/#l=go) | [C++](https://app.quicktype.io/#l=cpp) |\n| ---------------------------------------- | -------------------------------------------- | ------------------------------------ | ------------------------------------ | -------------------------------------- |\n\n| [Java](https://app.quicktype.io/#l=java) | [TypeScript](https://app.quicktype.io/#l=ts) | [Swift](https://app.quicktype.io/#l=swift) | [Objective-C](https://app.quicktype.io/#l=objc) | [Elm](https://app.quicktype.io/#l=elm) |\n| ---------------------------------------- | -------------------------------------------- | ------------------------------------------ | ----------------------------------------------- | -------------------------------------- |\n\n| [JSON Schema](https://app.quicktype.io/#l=schema) | [Pike](https://app.quicktype.io/#l=pike) | [Prop-Types](https://app.quicktype.io/#l=javascript-prop-types) | [Haskell](https://app.quicktype.io/#l=haskell) | [PHP](https://app.quicktype.io/#l=php) |\n| ------------------------------------------------- | ---------------------------------------- | --------------------------------------------------------------- | ---------------------------------------------- | -------------------------------------- |\n\n_Missing your favorite language? Please implement it!_\n\n## Installation\n\nThere are many ways to use `quicktype`. [app.quicktype.io](https://app.quicktype.io) is the most powerful and complete UI. The web app also works offline and doesn't send your sample data over the Internet, so paste away!\n\nFor the best CLI, we recommend installing `quicktype` globally via `npm`:\n\n```bash\nnpm install -g quicktype\n```\n\nOther options:\n\n-   [Homebrew](http://formulae.brew.sh/formula/quicktype) _(infrequently updated)_\n-   [Xcode extension](https://itunes.apple.com/us/app/paste-json-as-code-quicktype/id1330801220?mt=12)\\*\n-   [VSCode extension](https://marketplace.visualstudio.com/items/quicktype.quicktype)\\*\n-   [Visual Studio extension](https://marketplace.visualstudio.com/items?itemName=typeguard.quicktype-vs)\\*\n\n<small>\\* limited functionality</small>\n\n## Using `quicktype`\n\n```bash\n# Run quicktype without arguments for help and options\nquicktype\n\n# quicktype a simple JSON object in C#\necho '{ \"name\": \"David\" }' | quicktype -l csharp\n\n# quicktype a top-level array and save as Go source\necho '[1, 2, 3]' | quicktype -o ints.go\n\n# quicktype a sample JSON file in Swift\nquicktype person.json -o Person.swift\n\n# A verbose way to do the same thing\nquicktype \\\n  --src person.json \\\n  --src-lang json \\\n  --lang swift \\\n  --top-level Person \\\n  --out Person.swift\n\n# quicktype a directory of samples as a C++ program\n# Suppose ./blockchain is a directory with files:\n#   latest-block.json transactions.json marketcap.json\nquicktype ./blockchain -o blockchain-api.cpp\n\n# quicktype a live JSON API as a Java program\nquicktype https://api.somewhere.com/data -o Data.java\n```\n\n### Generating code from JSON schema\n\nThe recommended way to use `quicktype` is to generate a JSON schema from sample data, review and edit the schema, commit the schema to your project repo, then generate code from the schema as part of your build process:\n\n```bash\n# First, infer a JSON schema from a sample.\nquicktype pokedex.json -l schema -o schema.json\n\n# Review the schema, make changes,\n# and commit it to your project repo.\n\n# Finally, generate model code from schema in your\n# build process for whatever languages you need:\nquicktype -s schema schema.json -o src/ios/models.swift\nquicktype -s schema schema.json -o src/android/Models.java\nquicktype -s schema schema.json -o src/nodejs/Models.ts\n\n# All of these models will serialize to and from the same\n# JSON, so different programs in your stack can communicate\n# seamlessly.\n```\n\n### Generating code from TypeScript (Experimental)\n\nYou can achieve a similar result by writing or generating a [TypeScript](http://www.typescriptlang.org/) file, then quicktyping it. TypeScript is a typed superset of JavaScript with simple, succinct syntax for defining types:\n\n```typescript\ninterface Person {\n    name: string;\n    nickname?: string; // an optional property\n    luckyNumber: number;\n}\n```\n\nYou can use TypeScript just like JSON schema was used in the last example:\n\n```bash\n# First, infer a TypeScript file from a sample (or just write one!)\nquicktype pokedex.json -o pokedex.ts --just-types\n# Review the TypeScript, make changes, etc.\nquicktype pokedex.ts -o src/ios/models.swift\n```\n\n### Calling `quicktype` from JavaScript\n\nYou can use `quicktype` as a JavaScript function within `node` or browsers. First add the `quicktype-core` package:\n\n```bash\n$ npm install quicktype-core\n```\n\nIn general, first you create an `InputData` value with one or more JSON samples, JSON schemas, TypeScript sources, or other supported input types. Then you call `quicktype`, passing that `InputData` value and any options you want.\n\n```javascript\nimport {\n    quicktype,\n    InputData,\n    jsonInputForTargetLanguage,\n    JSONSchemaInput,\n    FetchingJSONSchemaStore\n} from \"quicktype-core\";\n\nasync function quicktypeJSON(targetLanguage, typeName, jsonString) {\n    const jsonInput = jsonInputForTargetLanguage(targetLanguage);\n\n    // We could add multiple samples for the same desired\n    // type, or many sources for other types. Here we're\n    // just making one type from one piece of sample JSON.\n    await jsonInput.addSource({\n        name: typeName,\n        samples: [jsonString]\n    });\n\n    const inputData = new InputData();\n    inputData.addInput(jsonInput);\n\n    return await quicktype({\n        inputData,\n        lang: targetLanguage\n    });\n}\n\nasync function quicktypeJSONSchema(targetLanguage, typeName, jsonSchemaString) {\n    const schemaInput = new JSONSchemaInput(new FetchingJSONSchemaStore());\n\n    // We could add multiple schemas for multiple types,\n    // but here we're just making one type from JSON schema.\n    await schemaInput.addSource({ name: typeName, schema: jsonSchemaString });\n\n    const inputData = new InputData();\n    inputData.addInput(schemaInput);\n\n    return await quicktype({\n        inputData,\n        lang: targetLanguage\n    });\n}\n\nasync function main() {\n    const { lines: swiftPerson } = await quicktypeJSON(\"swift\", \"Person\", jsonString);\n    console.log(swiftPerson.join(\"\\n\"));\n\n    const { lines: pythonPerson } = await quicktypeJSONSchema(\"python\", \"Person\", jsonSchemaString);\n    console.log(pythonPerson.join(\"\\n\"));\n}\n\nmain();\n```\n\nThe argument to `quicktype` is a complex object with many optional properties. [Explore its definition](https://github.com/quicktype/quicktype/blob/master/packages/quicktype-core/src/Run.ts#L637) to understand what options are allowed.\n\n## Contributing\n\n`quicktype` is [Open Source](LICENSE) and we love contributors! In fact, we have a [list of issues](https://github.com/quicktype/quicktype/issues?utf8=✓&q=is%3Aissue+is%3Aopen+label%3Ahelp-wanted) that are low-priority for us, but for which we'd happily accept contributions. Support for new target languages is also strongly desired. If you'd like to contribute, need help with anything at all, or would just like to talk things over, come [join us on Slack](http://slack.quicktype.io/).\n\n### Setup, Build, Run\n\n`quicktype` is implemented in TypeScript and requires `nodejs` and `npm` to build and run.\n\nFirst, install `typescript` globally via `npm`:\n\nClone this repo and do:\n\n#### macOS / Linux\n\n```bash\nnvm use\nnpm install\nscript/quicktype # rebuild (slow) and run (fast)\n```\n\n#### Windows\n\n```bash\nnpm install --ignore-scripts # Install dependencies\nnpm install -g typescript # Install typescript globally\ntsc --project src/cli # Rebuild\nnode dist\\cli\\index.js # Run\n```\n\n### Edit\n\nInstall [Visual Studio Code](https://code.visualstudio.com/), open this\nworkspace, and install the recommended extensions:\n\n```bash\ncode . # opens in VS Code\n```\n\n### Live-reloading for quick feedback\n\nWhen working on an output language, you'll want to view generated\noutput as you edit. Use `npm start` to watch for changes and\nrecompile and rerun `quicktype` for live feedback. For example, if you're\ndeveloping a new renderer for `fortran`, you could use the following command to\nrebuild and reinvoke `quicktype` as you implement your renderer:\n\n```bash\nnpm start -- \"--lang fortran pokedex.json\"\n```\n\nThe command in quotes is passed to `quicktype`, so you can render local `.json`\nfiles, URLs, or add other options.\n\n### Test\n\n```bash\n# Run full test suite\nnpm run test\n\n# Test a specific language (see test/languages.ts)\nFIXTURE=golang npm test\n\n# Test a single sample or directory\nFIXTURE=swift npm test -- pokedex.json\nFIXTURE=swift npm test -- test/inputs/json/samples\n```"
}
