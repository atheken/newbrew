{
  "name": "osslsigncode",
  "full_name": "osslsigncode",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "OpenSSL based Authenticode signing for PE/MSI/Java CAB files",
  "license": "GPL-3.0-or-later",
  "homepage": "https://github.com/mtrojnar/osslsigncode",
  "versions": {
    "stable": "2.6",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/mtrojnar/osslsigncode/archive/refs/tags/2.6.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "7f84bce7a6e9373e8c4df4fa90e723ca1d380cf303c80bbb3e02191179d0efc4"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/osslsigncode/blobs/sha256:99237bd56e472b9c4ad4649a824b9b05372d4b32176c71ec9b276d33d67d6811",
          "sha256": "99237bd56e472b9c4ad4649a824b9b05372d4b32176c71ec9b276d33d67d6811"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/osslsigncode/blobs/sha256:c4481087980ccc305862173445383bc74f9b4b3099754ffc25a2a3fc2e45af86",
          "sha256": "c4481087980ccc305862173445383bc74f9b4b3099754ffc25a2a3fc2e45af86"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/osslsigncode/blobs/sha256:696c5b1e362edf6842fd4b9f4c55c527d08d8289e2673da982fe047afb848f1a",
          "sha256": "696c5b1e362edf6842fd4b9f4c55c527d08d8289e2673da982fe047afb848f1a"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/osslsigncode/blobs/sha256:a99e32840e4c7ce2413820d256bd7aae955ba5c5c65179bece3eb25815f2541a",
          "sha256": "a99e32840e4c7ce2413820d256bd7aae955ba5c5c65179bece3eb25815f2541a"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/osslsigncode/blobs/sha256:35789d3db3666991be42784f12c225f9826721d34c85bef2f346667d910e4565",
          "sha256": "35789d3db3666991be42784f12c225f9826721d34c85bef2f346667d910e4565"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/osslsigncode/blobs/sha256:b42275673763123bc3b77a92ec1bb744779bf694465b96dafcda95c41a1662ae",
          "sha256": "b42275673763123bc3b77a92ec1bb744779bf694465b96dafcda95c41a1662ae"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/osslsigncode/blobs/sha256:2662456df8f22132f3c5be69ab300612b2b040518b15def9dea95599addf59f2",
          "sha256": "2662456df8f22132f3c5be69ab300612b2b040518b15def9dea95599addf59f2"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [
    "openssl@3",
    "python@3.11"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "curl"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/osslsigncode.rb",
  "ruby_source_checksum": {
    "sha256": "05d704a61d5e3ba1dc2ade19a64a0bf47f8284e5cdef3e34218a2c8d7ae85310"
  },
  "date_added": "2012-04-12T07:12:51-07:00",
  "readme": "osslsigncode\n============\n\n## BUILD STATUS\n\n[![CI](https://github.com/mtrojnar/osslsigncode/actions/workflows/ci.yml/badge.svg)](https://github.com/mtrojnar/osslsigncode/actions/workflows/ci.yml)\n\n## WHAT IS IT?\n\nosslsigncode is a small tool that implements part of the functionality\nof the Microsoft tool signtool.exe - more exactly the Authenticode\nsigning and timestamping. But osslsigncode is based on OpenSSL and cURL,\nand thus should be able to compile on most platforms where these exist.\n\n## WHY?\n\nWhy not use signtool.exe? Because I don't want to go to a Windows\nmachine every time I need to sign a binary - I can compile and build\nthe binaries using Wine on my Linux machine, but I can't sign them\nsince the signtool.exe makes good use of the CryptoAPI in Windows, and\nthese APIs aren't (yet?) fully implemented in Wine, so the signtool.exe\ntool  would fail. And, so, osslsigncode was born.\n\n## WHAT CAN IT DO?\n\nIt can sign and timestamp PE (EXE/SYS/DLL/etc), CAB, CAT and MSI files.\nIt supports the equivalent of signtool.exe's \"-j javasign.dll -jp low\",\ni.e. add a valid signature for a CAB file containing Java files.\nIt supports getting the timestamp through a proxy as well. It also\nsupports signature verification, removal and extraction.\n\n## BUILDING\n\nThis section covers building osslsigncode for [Unix-like](https://en.wikipedia.org/wiki/Unix-like) operating systems.\nSee [INSTALL.W32.md](https://github.com/mtrojnar/osslsigncode/blob/master/INSTALL.W32.md) for Windows notes.\nWe highly recommend downloading a [release tarball](https://github.com/mtrojnar/osslsigncode/releases) instead of cloning from a git repository.\n\n### Configure, build, make tests and install osslsigncode\n\n* Install prerequisites on a Debian-based distributions, such as Ubuntu:\n```\n  sudo apt update && sudo apt install cmake libssl-dev libcurl4-openssl-dev\n```\n* Install prerequisites on macOS with Homebrew:\n```\n  brew install cmake pkg-config openssl@1.1\n  export PKG_CONFIG_PATH=\"/usr/local/opt/openssl@1.1/lib/pkgconfig\"\n```\n**NOTE:** osslsigncode requires CMake 3.17 or newer.\n\nYou may need to use `cmake3` instead of `cmake` to complete the following steps on your system.\n* Navigate to the build directory and run CMake to configure the osslsigncode project\n  and generate a native build system:\n```\n  mkdir build && cd build && cmake -S ..\n```\n  optional CMake parameters:\n```\n  -DCMAKE_BUILD_TYPE=Debug\n  -DCMAKE_C_COMPILER=clang\n  -DCMAKE_PREFIX_PATH=[openssl directory];[curl directory]\n  -DCMAKE_INSTALL_PREFIX=[installation directory]\n  -DBASH_COMPLETION_USER_DIR=[bash completion installation directory]\n\n```\n* Then call that build system to actually compile/link the osslsigncode project (alias `make`):\n```\n  cmake --build .\n```\n* Make test:\n```\n  ctest -C Release\n```\n* Make install:\n```\n  sudo cmake --install .\n```\n* Make tarball (simulate autotools' `make dist`):\n```\n  cmake --build . --target package_source\n```\n\n## USAGE\n\nBefore you can sign a file you need a Software Publishing\nCertificate (spc) and a corresponding private key.\n\nThis article provides a good starting point as to how\nto do the signing with the Microsoft signtool.exe:\n\n  http://www.matthew-jones.com/articles/codesigning.html\n\nTo sign with osslsigncode you need the certificate file mentioned in the\narticle above, in SPC or PEM format, and you will also need the private\nkey which must be a key file in DER or PEM format, or if osslsigncode was\ncompiled against OpenSSL 1.0.0 or later, in PVK format.\n\nTo sign a PE or MSI file you can now do:\n```\n  osslsigncode sign -certs <cert-file> -key <der-key-file> \\\n    -n \"Your Application\" -i http://www.yourwebsite.com/ \\\n    -in yourapp.exe -out yourapp-signed.exe\n```\nor if you are using a PEM or PVK key file with a password together\nwith a PEM certificate:\n```\n  osslsigncode sign -certs <cert-file> \\\n    -key <key-file> -pass <key-password> \\\n    -n \"Your Application\" -i http://www.yourwebsite.com/ \\\n    -in yourapp.exe -out yourapp-signed.exe\n```\nor if you want to add a timestamp as well:\n```\n  osslsigncode sign -certs <cert-file> -key <key-file> \\\n    -n \"Your Application\" -i http://www.yourwebsite.com/ \\\n    -t http://timestamp.digicert.com \\\n    -in yourapp.exe -out yourapp-signed.exe\n```\nYou can use a certificate and key stored in a PKCS#12 container:\n```\n  osslsigncode sign -pkcs12 <pkcs12-file> -pass <pkcs12-password> \\\n    -n \"Your Application\" -i http://www.yourwebsite.com/ \\\n    -in yourapp.exe -out yourapp-signed.exe\n```\nTo sign a CAB file containing java class files:\n```\n  osslsigncode sign -certs <cert-file> -key <key-file> \\\n    -n \"Your Application\" -i http://www.yourwebsite.com/ \\\n    -jp low \\\n    -in yourapp.cab -out yourapp-signed.cab\n```\nOnly the 'low' parameter is currently supported.\n\nIf you want to use PKCS11 token, you should indicate PKCS11 engine and module.\nAn example of using osslsigncode with SoftHSM:\n```\n  osslsigncode sign \\\n    -pkcs11engine /usr/lib64/engines-1.1/pkcs11.so \\\n    -pkcs11module /usr/lib64/pkcs11/libsofthsm2.so \\\n    -pkcs11cert 'pkcs11:token=softhsm-token;object=cert' \\\n    -key 'pkcs11:token=softhsm-token;object=key' \\\n    -in yourapp.exe -out yourapp-signed.exe\n```\n\nYou can check that the signed file is correct by right-clicking\non it in Windows and choose Properties --> Digital Signatures,\nand then choose the signature from the list, and click on\nDetails. You should then be presented with a dialog that says\namongst other things that \"This digital signature is OK\".\n\n## UNAUTHENTICATED BLOBS\n\nThe \"-addUnauthenticatedBlob\" parameter adds a 1024-byte unauthenticated blob\nof data to the signature in the same area as the timestamp.  This can be used\nwhile signing, while timestamping, after a file has been code signed, or by\nitself.  This technique (but not this project) is used by Dropbox, GoToMeeting,\nand Summit Route.\n\n### Example 1. Sign and add blob to unsigned file\n\n```shell\nosslsigncode sign -addUnauthenticatedBlob -pkcs12 yourcert.pfx -pass your_password -n \"Your Company\" -i https://YourSite.com/ -in srepp.msi -out srepp_added.msi\n```\n\n### Example 2. Timestamp and add blob to signed file\n\n```shell\nosslsigncode.exe add -addUnauthenticatedBlob -t http://timestamp.digicert.com -in your_signed_file.exe -out out.exe\n```\n\n### Example 3. Add blob to signed and time-stamped file\n\n```shell\nosslsigncode.exe add -addUnauthenticatedBlob -in your_signed_file.exe -out out.exe\n```\n\n### WARNING\n\nThis feature allows for doing dumb things.  Be very careful with what you put\nin the unauthenticated blob, as an attacker could modify this.  Do NOT, under\nany circumstances, put a URL here that you will use to download an additional\nfile.  If you do do that, you would need to check the newly downloaded file is\ncode signed AND that it has been signed with your cert AND that it is the\nversion you expect.\n\n## BUGS, QUESTIONS etc.\n\nCheck whether your your question or suspected bug was already\ndiscussed on https://github.com/mtrojnar/osslsigncode/issues.\nOtherwise, open a new issue.\n\nBUT, if you have questions related to generating spc files,\nconverting between different formats and so on, *please*\nspend a few minutes searching on google for your particular\nproblem since many people probably already have had your\nproblem and solved it as well."
}
