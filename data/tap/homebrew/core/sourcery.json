{
  "name": "sourcery",
  "full_name": "sourcery",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Meta-programming for Swift, stop writing boilerplate code",
  "license": "MIT",
  "homepage": "https://github.com/krzysztofzablocki/Sourcery",
  "versions": {
    "stable": "2.0.2",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/krzysztofzablocki/Sourcery/archive/2.0.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "5a331606efbbd96336d99de2ddee67b111d5bbef678a30ac0bece3cf5b55afc3"
    },
    "head": {
      "url": "https://github.com/krzysztofzablocki/Sourcery.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 1,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sourcery/blobs/sha256:bafccb509c0586fd8725582aec7c7da7fe88055c7a8608d4ca0f5803a37988fb",
          "sha256": "bafccb509c0586fd8725582aec7c7da7fe88055c7a8608d4ca0f5803a37988fb"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sourcery/blobs/sha256:f3d3c5407c9de6d7eb9d6dfdffa4fb01350c31d6d335bc26ff94eea7ed7e66c9",
          "sha256": "f3d3c5407c9de6d7eb9d6dfdffa4fb01350c31d6d335bc26ff94eea7ed7e66c9"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sourcery/blobs/sha256:9d6ed066d64296432ac9a1bc91aef8606c5d966c56f535fff011ae39fbea9746",
          "sha256": "9d6ed066d64296432ac9a1bc91aef8606c5d966c56f535fff011ae39fbea9746"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sourcery/blobs/sha256:039e1516d4cbdcb7107ac7a1777f9cb11891ef36a4b5f12ae6dd57b6157b6b3e",
          "sha256": "039e1516d4cbdcb7107ac7a1777f9cb11891ef36a4b5f12ae6dd57b6157b6b3e"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    {
      "ruby": "build"
    }
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [
    {
      "name": "macos",
      "cask": null,
      "download": null,
      "version": null,
      "contexts": [],
      "specs": [
        "stable",
        "head"
      ]
    },
    {
      "name": "xcode",
      "cask": null,
      "download": null,
      "version": "13.3",
      "contexts": [],
      "specs": [
        "stable",
        "head"
      ]
    }
  ],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/sourcery.rb",
  "ruby_source_checksum": {
    "sha256": "4d67b4037d35fa895590515db519df2e60fc3b9304c2cb0195009ab385bdd2ab"
  },
  "date_added": "2017-01-30T18:27:39-05:00",
  "readme": "[![CircleCI](https://circleci.com/gh/krzysztofzablocki/Sourcery.svg?style=shield)](https://circleci.com/gh/krzysztofzablocki/Sourcery)\n<!-- [![codecov](https://codecov.io/gh/krzysztofzablocki/Sourcery/branch/master/graph/badge.svg)](https://codecov.io/gh/krzysztofzablocki/Sourcery) -->\n[![docs](https://krzysztofzablocki.github.io/Sourcery/badge.svg)](https://krzysztofzablocki.github.io/Sourcery/index.html)\n[![Version](https://img.shields.io/cocoapods/v/Sourcery.svg?style=flat)](http://cocoapods.org/pods/Sourcery)\n[![License](https://img.shields.io/cocoapods/l/Sourcery.svg?style=flat)](http://cocoapods.org/pods/Sourcery)\n[![Platform](https://img.shields.io/cocoapods/p/Sourcery.svg?style=flat)](http://cocoapods.org/pods/Sourcery)\n\n**There is now a new powerful way to both write and integrate Sourcery functionality: Sourcery Pro provides a powerful Stencil editor and extends Xcode with the ability to handle live AST templates: [available on Mac App Store](https://apps.apple.com/us/app/sourcery-pro/id1561780836?mt=12)**\n\nhttps://user-images.githubusercontent.com/1468993/114271090-f6c19200-9a0f-11eb-9bd8-d7bb15129eb2.mp4\n\n[Learn more about Sourcery Pro](http://merowing.info/sourcery-pro/)\n\n<img src=\"Resources/icon-128.png\">\n\n**Sourcery** is a code generator for Swift language, built on top of Apple's own SwiftSyntax. It extends the language abstractions to allow you to generate boilerplate code automatically.\n\nIt's used in over 40,000 projects on both iOS and macOS and it powers some of the most popular and critically-acclaimed apps you have used (including Airbnb, Bumble, New York Times). Its massive community adoption was one of the factors that pushed Apple to implement derived Equality and automatic Codable conformance. Sourcery is maintained by a growing community of [contributors](https://github.com/krzysztofzablocki/Sourcery/graphs/contributors).\n\nTry **Sourcery** for your next project or add it to an existing one -- you'll save a lot of time and be happy you did!\n\n## TL;DR\nSourcery allows you to get rid of repetitive code and create better architecture and developer workflows. \nAn example might be implementing `Mocks` for all your protocols, without Sourcery you will need to write **hundreds lines of code per each protocol** like this:\n\n```swift\nclass MyProtocolMock: MyProtocol {\n\n    //MARK: - sayHelloWith\n    var sayHelloWithNameCallsCount = 0\n    var sayHelloWithNameCalled: Bool {\n        return sayHelloWithNameCallsCount > 0\n    }\n    var sayHelloWithNameReceivedName: String?\n    var sayHelloWithNameReceivedInvocations: [String] = []\n    var sayHelloWithNameClosure: ((String) -> Void)?\n\n    func sayHelloWith(name: String) {\n        sayHelloWithNameCallsCount += 1\n        sayHelloWithNameReceivedName = name\n        sayHelloWithNameReceivedInvocations.append(name)\n        sayHelloWithNameClosure?(name)\n    }\n\n}\n```\n\nand with Sourcery ?\n\n```swift\nextension MyProtocol: AutoMockable {}\n```\n\nSourcery removes the need to write any of the mocks code, how many protocols do you have in your project? Imagine how much time you'll save, using Sourcery will also make every single mock consistent and if you refactor or add properties, the mock code will be automatically updated for you, eliminating possible human errors. \n\nSourcery can be applied to arbitrary problems across your codebase, if you can describe an algorithm to another human, you can automate it using Sourcery.\n\nMost common uses are:\n\n- [Equality](https://krzysztofzablocki.github.io/Sourcery/equatable.html) & [Hashing](https://krzysztofzablocki.github.io/Sourcery/hashable.html)\n- [Enum cases & Counts](https://krzysztofzablocki.github.io/Sourcery/enum-cases.html)\n- [Lenses](https://krzysztofzablocki.github.io/Sourcery/lenses.html)\n- [Mocks & Stubs](https://krzysztofzablocki.github.io/Sourcery/mocks.html)\n- [LinuxMain](https://krzysztofzablocki.github.io/Sourcery/linuxmain.html)\n- [Decorators](https://krzysztofzablocki.github.io/Sourcery/decorator.html)\n- [Persistence and advanced Codable](https://krzysztofzablocki.github.io/Sourcery/codable.html)\n- [Property level diffing](https://krzysztofzablocki.github.io/Sourcery/diffable.html)\n\nBut how about more specific use-cases, like automatically generating all the UI for your app `BetaSetting`? [you can use Sourcery for that too](https://github.com/krzysztofzablocki/AutomaticSettings)\n\nOnce you start writing your own template and learn the power of Sourcery you won't be able to live without it.\n\n## How To Get Started\nThere are plenty of tutorials for different uses of Sourcery, and you can always ask for help in our [Swift Forum Category](https://forums.swift.org/c/related-projects/sourcery).\n\n- [The Magic of Sourcery](https://www.caseyliss.com/2017/3/31/the-magic-of-sourcery) is a great starting tutorial\n- [Generating Swift Code for iOS](https://www.raywenderlich.com/158803/sourcery-tutorial-generating-swift-code-ios) deals with JSON handling code\n- [How To Automate Swift Boilerplate with Sourcery](https://atomicrobot.io/blog/sourcery/) generates conversions to dictionaries\n- [Codable Enums](https://littlebitesofcocoa.com/318-codable-enums) implements Codable support for Enumerations\n- [Sourcery Workshops](https://github.com/krzysztofzablocki/SourceryWorkshops)\n\n### Quick Mocking Intro & Getting Started Video\n\nYou can also watch this quick getting started and intro to mocking video by Inside iOS Dev: \n<br />\n\n[![Watch the video](Resources/Inside-iOS-Dev-Sourcery-Intro-To-Mocking-Video-Thumbnail.png)](https://youtu.be/-ZbBNuttlt4?t=214)\n\n## Installation\n\n- _Binary form_\n\n    Download the latest release with the prebuilt binary from [release tab](https://github.com/krzysztofzablocki/Sourcery/releases/latest). Unzip the archive into the desired destination and run `bin/sourcery`\n    \n- _[Homebrew](https://brew.sh)_\n\n\t`brew install sourcery`\n\n- _[CocoaPods](https://cocoapods.org)_\n\n    Add `pod 'Sourcery'` to your `Podfile` and run `pod update Sourcery`. This will download the latest release binary and will put it in your project's CocoaPods path so you will run it with `$PODS_ROOT/Sourcery/bin/sourcery`\n\n    If you only want to install the `sourcery` binary, you may want to use the `CLI-Only` subspec: `pod 'Sourcery', :subspecs => ['CLI-Only']`.\n\n- _[Mint](https://github.com/yonaskolb/Mint)_\n\n    `mint run krzysztofzablocki/Sourcery`\n\n- _Building from Source_\n\n    Download the latest release source code from [the release tab](https://github.com/krzysztofzablocki/Sourcery/releases/latest) or clone the repository and build Sourcery manually.\n\n    - _Building with Swift Package Manager_\n\n        Run `swift build -c release` in the root folder and then copy `.build/release/sourcery` to your desired destination.\n\n        > Note: JS templates are not supported when building with SPM yet.\n\n    - _Building with Xcode_\n\n        Run `xcodebuild -scheme sourcery -destination generic/platform=macOS -archivePath sourcery.xcarchive archive` and export the binary from the archive.\n\n- _SPM (for plugin use only)_\nAdd the package dependency to your `Package.swift` manifest from version `1.8.3`.\n\n```\n.package(url: \"https://github.com/krzysztofzablocki/Sourcery.git\", from: \"1.8.3\")\n```\n\n- _[pre-commit](https://pre-commit.com/)_\nAdd the dependency to `.pre-commit-config.yaml`.\n\n```\n- repo: https://github.com/krzysztofzablocki/Sourcery\n  rev: 1.9.1\n  hooks:\n  - id: sourcery\n```\n\n## Documentation\n\nFull documentation for the latest release is available [here](http://merowing.info/Sourcery/).\n\n## Usage\n\n### Running the executable\n\nSourcery is a command line tool; you can either run it manually or in a custom build phase using the following command:\n\n```\n$ ./bin/sourcery --sources <sources path> --templates <templates path> --output <output path>\n```\n\n> Note: this command differs depending on how you installed Sourcery (see [Installation](#installation))\n\n### Swift Package command\n\nSourcery can now be used as a Swift package command plugin. In order to do this, the package must be added as a dependency to your Swift package or Xcode project (see [Installation](#installation) above).\n\nTo provide a configuration for the plugin to use, place a `.sourcery.yml` file at the root of the target's directory (in the sources folder rather than the root of the package).\n\n#### Running from the command line\n\nTo verify the plugin can be found by SwiftPM, use:\n\n```\n$ swift package plugin --list\n```\n\nTo run the code generator, you need to allow changes to the project with the `--allow-writing-to-package-directory` flag:\n\n```\n$ swift package --allow-writing-to-package-directory sourcery-command\n```\n\n#### Running in Xcode\n\nInside a project/package that uses this command plugin, right-click the project and select \"SourceryCommand\" from the \"SourceryPlugins\" menu group.\n\n> ⚠️ Note that this is only available from Xcode 14 onwards.\n\n### Command line options\n\n- `--sources` - Path to a source swift files or directories. You can provide multiple paths using multiple `--sources` option.\n- `--templates` - Path to templates. File or Directory. You can provide multiple paths using multiple `--templates` options.\n- `--force-parse` - File extensions of Sourcery generated file you want to parse. You can provide multiple extension using multiple `--force-parse` options. (i.e. `file.toparse.swift` will be parsed even if generated by Sourcery if `--force-parse toparse`). Useful when trying to implement a multiple phases generation. `--force-parse` can also be used to process within a sourcery annotation. For example to process code within `sourcery:inline:auto:Type.AutoCodable` annotation you can use `--force-parse AutoCodable`\n- `--output` [default: current path] - Path to output. File or Directory.\n- `--config` [default: current path] - Path to config file. File or Directory. See [Configuration file](#configuration-file).\n- `--args` - Additional arguments to pass to templates. Each argument can have an explicit value or will have implicit `true` value. Arguments should be separated with `,` without spaces (i.e. `--args arg1=value,arg2`). Arguments are accessible in templates via `argument.name`\n- `--watch` [default: false] - Watch both code and template folders for changes and regenerate automatically.\n- `--verbose` [default: false] - Turn on verbose logging\n- `--quiet` [default: false] - Turn off any logging, only emit errors\n- `--disableCache` [default: false] - Turn off caching of parsed data\n- `--prune` [default: false] - Prune empty generated files\n- `--version` - Display the current version of Sourcery\n- `--help` - Display help information\n- `--cacheBasePath` - Base path to the cache directory. Can be overriden by the config file.\n- `--buildPath` - Path to directory used when building from .swifttemplate files. This defaults to system temp directory\n\n### Configuration file\n\nInstead of CLI arguments, you can use a `.sourcery.yml` configuration file:\n\n```yaml\nsources:\n  - <sources path>\n  - <sources path>\ntemplates:\n  - <templates path>\n  - <templates path>\nforceParse:\n  - <string value>\n  - <string value>\noutput:\n  <output path>\nargs:\n  <name>: <value>\n```\n\nRead more about this configuration file [here](https://krzysztofzablocki.github.io/Sourcery/usage.html#configuration-file).\n\n## Issues\nIf you get an unverified developer warning when using binary zip distribution try:\n`xattr -dr com.apple.quarantine Sourcery-1.1.1`\n\n## Contributing\n\nContributions to Sourcery are welcomed and encouraged!\n\nIt is easy to get involved. Please see the [Contributing guide](CONTRIBUTING.md) for more details.\n\n[A list of contributors is available through GitHub](https://github.com/krzysztofzablocki/Sourcery/graphs/contributors).\n\nTo clarify what is expected of our community, Sourcery has adopted the code of conduct defined by the Contributor Covenant. This document is used across many open source communities, and articulates my values well. For more, see the [Code of Conduct](CODE_OF_CONDUCT.md).\n\n## Sponsoring\n\nIf you'd like to support Sourcery development you can do so through [GitHub Sponsors](https://github.com/sponsors/krzysztofzablocki) or [Open Collective](https://opencollective.com/sourcery), it's highly appreciated 🙇‍\n\n## License\n\nSourcery is available under the MIT license. See [LICENSE](LICENSE) for more information.\n\n## Attributions\n\nThis tool is powered by\n\n- [Stencil](https://github.com/kylef/Stencil) and few other libs by [Kyle Fuller](https://github.com/kylef)\n\nThank you! to:\n\n- [Mariusz Ostrowski](http://twitter.com/faktory) for creating the logo.\n- [Artsy Eidolon](https://github.com/artsy/eidolon) team, because we use their codebase as a stub data for performance testing the parser.\n- [Olivier Halligon](https://github.com/AliSoftware) for showing me his setup scripts for CLI tools which are powering our rakefile.\n- [JP Simard](https://github.com/jpsim) for creating [SourceKitten](https://github.com/jpsim/SourceKitten) that originally powered Sourcery and was instrumental in making this project happen. \n\n## Other Libraries / Tools\n\nIf you want to generate code for asset related data like .xib, .storyboards etc. use [SwiftGen](https://github.com/AliSoftware/SwiftGen). SwiftGen and Sourcery are complementary tools.\n\nMake sure to check my other libraries and tools, especially:\n- [KZPlayground](https://github.com/krzysztofzablocki/KZPlayground) - Powerful playgrounds for Swift and Objective-C\n- [KZFileWatchers](https://github.com/krzysztofzablocki/KZFileWatchers) - Daemon for observing local and remote file changes, used for building other developer tools (Sourcery uses it)\n\nYou can [follow me on Twitter][1] for news/updates about other projects I am creating.\n\n [1]: http://twitter.com/merowing_"
}
