{
  "name": "glide",
  "full_name": "glide",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Simplified Go project management, dependency management, and vendoring",
  "license": "MIT",
  "homepage": "https://github.com/Masterminds/glide",
  "versions": {
    "stable": "0.13.3",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/Masterminds/glide/archive/v0.13.3.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "817dad2f25303d835789c889bf2fac5e141ad2442b9f75da7b164650f0de3fee"
    },
    "head": {
      "url": "https://github.com/Masterminds/glide.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/glide/blobs/sha256:0b144dd317465f533ba1f1da934648a7a450024d11b7f3c8156e561536b06b0d",
          "sha256": "0b144dd317465f533ba1f1da934648a7a450024d11b7f3c8156e561536b06b0d"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/glide/blobs/sha256:80dcd1ffaf3206bd1cc26700523f6016c048311d90522c8b0d12fa94a5ee4d03",
          "sha256": "80dcd1ffaf3206bd1cc26700523f6016c048311d90522c8b0d12fa94a5ee4d03"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/glide/blobs/sha256:77ff52f69bde39ac4ba11eec08cc4c7ef5fab166ab801f513486d0a62e448ead",
          "sha256": "77ff52f69bde39ac4ba11eec08cc4c7ef5fab166ab801f513486d0a62e448ead"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/glide/blobs/sha256:0343e52ebaf1bdf6460f4b77420d47c91692c577e2727efb933fa085f4021820",
          "sha256": "0343e52ebaf1bdf6460f4b77420d47c91692c577e2727efb933fa085f4021820"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/glide/blobs/sha256:a8db9273c71c29a5636492db3e9c5ceb64dcafce21ac56ee201fd71b7055b8ea",
          "sha256": "a8db9273c71c29a5636492db3e9c5ceb64dcafce21ac56ee201fd71b7055b8ea"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/glide/blobs/sha256:33a39604d9007bf46e92a0a9131a59c15162dce6ace8b498a91110bc7d316f43",
          "sha256": "33a39604d9007bf46e92a0a9131a59c15162dce6ace8b498a91110bc7d316f43"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/glide/blobs/sha256:014fc42198c07253f844ea7b20b1a9378b08cfb445e548b307c6fb131bd44565",
          "sha256": "014fc42198c07253f844ea7b20b1a9378b08cfb445e548b307c6fb131bd44565"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/glide/blobs/sha256:7f4be1018eba40d85aca555364a09f97a18d8e09c71e6bb42e6ca1a2c0866865",
          "sha256": "7f4be1018eba40d85aca555364a09f97a18d8e09c71e6bb42e6ca1a2c0866865"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/glide/blobs/sha256:c979cb9d502737595846ea776057be21e197ede804b10431b4cf5dcc0fee802d",
          "sha256": "c979cb9d502737595846ea776057be21e197ede804b10431b4cf5dcc0fee802d"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "go"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": true,
  "deprecation_date": "2023-01-21",
  "deprecation_reason": "deprecated_upstream",
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/glide.rb",
  "ruby_source_checksum": {
    "sha256": "d717e7ae61c98102df865c8ad69630f67dda1169e0997ba8a6ce41ce25e52d2f"
  },
  "date_added": "2014-09-30T16:28:38-07:00",
  "readme": "# Glide: Vendor Package Management for Golang\n\n![glide logo](https://glide.sh/assets/logo-small.png)\n\nAre you used to tools such as Cargo, npm, Composer, Nuget, Pip, Maven, Bundler,\nor other modern package managers? If so, Glide is the comparable Go tool.\n\n*Manage your vendor and vendored packages with ease.* Glide is a tool for\nmanaging the `vendor` directory within a Go package. This feature, first\nintroduced in Go 1.5, allows each package to have a `vendor` directory\ncontaining dependent packages for the project. These vendor packages can be\ninstalled by a tool (e.g. glide), similar to `go get` or they can be vendored and\ndistributed with the package.\n\n[![Build Status](https://travis-ci.org/Masterminds/glide.svg)](https://travis-ci.org/Masterminds/glide)\n[![Build status](https://ci.appveyor.com/api/projects/status/3pl4ytgdlfj852li?svg=true&passingText=windows%20build%20passing&failingText=windows%20build%20failing)](https://ci.appveyor.com/project/mattfarina/glide-a8xtg)\n[![Go Report Card](https://goreportcard.com/badge/github.com/Masterminds/glide)](https://goreportcard.com/report/github.com/Masterminds/glide) [![GoDoc](https://godoc.org/github.com/Masterminds/glide?status.svg)](https://godoc.org/github.com/Masterminds/glide) [![Documentation Status](https://readthedocs.org/projects/glide/badge/?version=stable)](http://glide.readthedocs.org/en/stable/?badge=stable) [![Documentation Status](https://readthedocs.org/projects/glide/badge/?version=latest)](http://glide.readthedocs.org/en/latest/?badge=latest)\n\n### Go Modules\n\nThe Go community is now using Go Modules to handle dependencies. Please consider\nusing that instead of Glide. Glide is now mostly unmaintained.\n\n### Features\n\n* Ease dependency management\n* Support **versioning packages** including [Semantic Versioning\n  2.0.0](http://semver.org/) support. Any constraint the [`github.com/Masterminds/semver`](https://github.com/Masterminds/semver)\n  package can parse can be used.\n* Support **aliasing packages** (e.g. for working with github forks)\n* Remove the need for munging import statements\n* Work with all of the `go` tools\n* Support the VCS tools that Go supports:\n    - git\n    - bzr\n    - hg\n    - svn\n* Support custom local and global plugins (see docs/plugins.md)\n* Repository caching and data caching for improved performance.\n* Flatten dependencies resolving version differences and avoiding the inclusion\n  of a package multiple times.\n* Manage and install dependencies on-demand or vendored in your version control\n  system.\n\n## How It Works\n\nGlide scans the source code of your application or library to determine the needed\ndependencies. To determine the versions and locations (such as aliases for forks)\nGlide reads a `glide.yaml` file with the rules. With this information Glide retrieves\nneeded dependencies.\n\nWhen a dependent package is encountered its imports are scanned to determine\ndependencies of dependencies (transitive dependencies). If the dependent project\ncontains a `glide.yaml` file that information is used to help determine the\ndependency rules when fetching from a location or version to use. Configuration\nfrom Godep, GB, GOM, and GPM is also imported.\n\nThe dependencies are exported to the `vendor/` directory where the `go` tools\ncan find and use them. A `glide.lock` file is generated containing all the\ndependencies, including transitive ones.\n\nThe `glide init` command can be use to setup a new project, `glide update`\nregenerates the dependency versions using scanning and rules, and `glide install`\nwill install the versions listed in the `glide.lock` file, skipping scanning,\nunless the `glide.lock` file is not found in which case it will perform an update.\n\nA project is structured like this:\n\n```\n- $GOPATH/src/myProject (Your project)\n  |\n  |-- glide.yaml\n  |\n  |-- glide.lock\n  |\n  |-- main.go (Your main go code can live here)\n  |\n  |-- mySubpackage (You can create your own subpackages, too)\n  |    |\n  |    |-- foo.go\n  |\n  |-- vendor\n       |-- github.com\n            |\n            |-- Masterminds\n                  |\n                  |-- ... etc.\n```\n\n*Take a look at [the Glide source code](http://github.com/Masterminds/glide)\nto see this philosophy in action.*\n\n## Install\n\nThe easiest way to install the latest release on Mac or Linux is with the following script:\n\n```\ncurl https://glide.sh/get | sh\n```\n\nOn Mac OS X you can also install the latest release via [Homebrew](https://github.com/Homebrew/homebrew):\n\n```\n$ brew install glide\n```\n\nOn Ubuntu Precise (12.04), Trusty (14.04), Wily (15.10) or Xenial (16.04) you can install from our PPA:\n\n```\nsudo add-apt-repository ppa:masterminds/glide && sudo apt-get update\nsudo apt-get install glide\n```\n\nOn Ubuntu Zesty (17.04) the package is called `golang-glide`.\n\n[Binary packages](https://github.com/Masterminds/glide/releases) are available for Mac, Linux and Windows.\n\nFor a development version it is also possible to `go get github.com/Masterminds/glide`.\n\nTo build from source you can:\n\n1. Clone this repository into `$GOPATH/src/github.com/Masterminds/glide` and\n   change directory into it\n2. If you are using Go 1.5 ensure the environment variable GO15VENDOREXPERIMENT is set, for\n   example by running `export GO15VENDOREXPERIMENT=1`. In Go 1.6 it is enabled by default and\n   in Go 1.7 it is always enabled without the ability to turn it off.\n3. Run `make build`\n\nThis will leave you with `./glide`, which you can put in your `$PATH` if\nyou'd like. (You can also take a look at `make install` to install for\nyou.)\n\nThe Glide repo has now been configured to use glide to\nmanage itself, too.\n\n## Usage\n\n```\n$ glide create                            # Start a new workspace\n$ open glide.yaml                         # and edit away!\n$ glide get github.com/Masterminds/cookoo # Get a package and add to glide.yaml\n$ glide install                           # Install packages and dependencies\n# work, work, work\n$ go build                                # Go tools work normally\n$ glide up                                # Update to newest versions of the package\n```\n\nCheck out the `glide.yaml` in this directory, or examples in the `docs/`\ndirectory.\n\n### glide create (aliased to init)\n\nInitialize a new workspace. Among other things, this creates a `glide.yaml` file\nwhile attempting to guess the packages and versions to put in it. For example,\nif your project is using Godep it will use the versions specified there. Glide\nis smart enough to scan your codebase and detect the imports being used whether\nthey are specified with another package manager or not.\n\n```\n$ glide create\n[INFO]\tGenerating a YAML configuration file and guessing the dependencies\n[INFO]\tAttempting to import from other package managers (use --skip-import to skip)\n[INFO]\tScanning code to look for dependencies\n[INFO]\t--> Found reference to github.com/Masterminds/semver\n[INFO]\t--> Found reference to github.com/Masterminds/vcs\n[INFO]\t--> Found reference to github.com/codegangsta/cli\n[INFO]\t--> Found reference to gopkg.in/yaml.v2\n[INFO]\tWriting configuration file (glide.yaml)\n[INFO]\tWould you like Glide to help you find ways to improve your glide.yaml configuration?\n[INFO]\tIf you want to revisit this step you can use the config-wizard command at any time.\n[INFO]\tYes (Y) or No (N)?\nn\n[INFO]\tYou can now edit the glide.yaml file. Consider:\n[INFO]\t--> Using versions and ranges. See https://glide.sh/docs/versions/\n[INFO]\t--> Adding additional metadata. See https://glide.sh/docs/glide.yaml/\n[INFO]\t--> Running the config-wizard command to improve the versions in your configuration\n```\n\nThe `config-wizard`, noted here, can be run here or manually run at a later time.\nThis wizard helps you figure out versions and ranges you can use for your\ndependencies.\n\n### glide config-wizard\n\nThis runs a wizard that scans your dependencies and retrieves information on them\nto offer up suggestions that you can interactively choose. For example, it can\ndiscover if a dependency uses semantic versions and help you choose the version\nranges to use.\n\n### glide get [package name]\n\nYou can download one or more packages to your `vendor` directory and have it added to your\n`glide.yaml` file with `glide get`.\n\n```\n$ glide get github.com/Masterminds/cookoo\n```\n\nWhen `glide get` is used it will introspect the listed package to resolve its\ndependencies including using Godep, GPM, Gom, and GB config files.\n\n### glide update (aliased to up)\n\nDownload or update all of the libraries listed in the `glide.yaml` file and put\nthem in the `vendor` directory. It will also recursively walk through the\ndependency packages to fetch anything that's needed and read in any configuration.\n\n```\n$ glide up\n```\n\nThis will recurse over the packages looking for other projects managed by Glide,\nGodep, gb, gom, and GPM. When one is found those packages will be installed as needed.\n\nA `glide.lock` file will be created or updated with the dependencies pinned to\nspecific versions. For example, if in the `glide.yaml` file a version was\nspecified as a range (e.g., `^1.2.3`) it will be set to a specific commit id in\nthe `glide.lock` file. That allows for reproducible installs (see `glide install`).\n\nTo remove any nested `vendor/` directories from fetched packages see the `-v` flag.\n\n### glide install\n\nWhen you want to install the specific versions from the `glide.lock` file use\n`glide install`.\n\n```\n$ glide install\n```\n\nThis will read the `glide.lock` file and install the commit id specific versions\nthere.\n\nWhen the `glide.lock` file doesn't tie to the `glide.yaml` file, such as there\nbeing a change, it will provide a warning. Running `glide up` will recreate the\n`glide.lock` file when updating the dependency tree.\n\nIf no `glide.lock` file is present `glide install` will perform an `update` and\ngenerate a lock file.\n\nTo remove any nested `vendor/` directories from fetched packages see the `-v` flag.\n\n## glide novendor (aliased to nv)\n\nWhen you run commands like `go test ./...` it will iterate over all the\nsubdirectories including the `vendor` directory. When you are testing your\napplication you may want to test your application files without running all the\ntests of your dependencies and their dependencies. This is where the `novendor`\ncommand comes in. It lists all of the directories except `vendor`.\n\n    $ go test $(glide novendor)\n\nThis will run `go test` over all directories of your project except the\n`vendor` directory.\n\n## glide name\n\nWhen you're scripting with Glide there are occasions where you need to know\nthe name of the package you're working on. `glide name` returns the name of the\npackage listed in the `glide.yaml` file.\n\n### glide tree\n\nGlide includes a few commands that inspect code and give you details\nabout what is imported. `glide tree` is one such command. Running it\ngives data like this:\n\n```\n$ glide tree\ngithub.com/Masterminds/glide\n\tgithub.com/Masterminds/cookoo   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo)\n\t\tgithub.com/Masterminds/cookoo/io   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/io)\n\tgithub.com/Masterminds/glide/cmd   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/cmd)\n\t\tgithub.com/Masterminds/cookoo   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo)\n\t\t\tgithub.com/Masterminds/cookoo/io   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/io)\n\t\tgithub.com/Masterminds/glide/gb   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/gb)\n\t\tgithub.com/Masterminds/glide/util   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/util)\n\t\t\tgithub.com/Masterminds/vcs   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/vendor/github.com/Masterminds/vcs)\n\t\tgithub.com/Masterminds/glide/yaml   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/yaml)\n\t\t\tgithub.com/Masterminds/glide/util   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/util)\n\t\t\t\tgithub.com/Masterminds/vcs   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/vendor/github.com/Masterminds/vcs)\n\t\t\tgithub.com/Masterminds/vcs   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/vendor/github.com/Masterminds/vcs)\n\t\t\tgopkg.in/yaml.v2   (/Users/mfarina/Code/go/src/gopkg.in/yaml.v2)\n\t\tgithub.com/Masterminds/semver   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/vendor/github.com/Masterminds/semver)\n\t\tgithub.com/Masterminds/vcs   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/vendor/github.com/Masterminds/vcs)\n\t\tgithub.com/codegangsta/cli   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/vendor/github.com/codegangsta/cli)\n\tgithub.com/codegangsta/cli   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/vendor/github.com/codegangsta/cli)\n\tgithub.com/Masterminds/cookoo   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo)\n\t\tgithub.com/Masterminds/cookoo/io   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/io)\n\tgithub.com/Masterminds/glide/gb   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/gb)\n\tgithub.com/Masterminds/glide/util   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/util)\n\t\tgithub.com/Masterminds/vcs   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/vendor/github.com/Masterminds/vcs)\n\tgithub.com/Masterminds/glide/yaml   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/yaml)\n\t\tgithub.com/Masterminds/glide/util   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/util)\n\t\t\tgithub.com/Masterminds/vcs   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/vendor/github.com/Masterminds/vcs)\n\t\tgithub.com/Masterminds/vcs   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/vendor/github.com/Masterminds/vcs)\n\t\tgopkg.in/yaml.v2   (/Users/mfarina/Code/go/src/gopkg.in/yaml.v2)\n\tgithub.com/Masterminds/semver   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/vendor/github.com/Masterminds/semver)\n\tgithub.com/Masterminds/vcs   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/vendor/github.com/Masterminds/vcs)\n\tgithub.com/codegangsta/cli   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/vendor/github.com/codegangsta/cli)\n```\n\nThis shows a tree of imports, excluding core libraries. Because\nvendoring makes it possible for the same package to live in multiple\nplaces, `glide tree` also prints the location of the package being\nimported.\n\n_This command is deprecated and will be removed in the near future._\n\n### glide list\n\nGlide's `list` command shows an alphabetized list of all the packages\nthat a project imports.\n\n```\n$ glide list\nINSTALLED packages:\n\tvendor/github.com/Masterminds/cookoo\n\tvendor/github.com/Masterminds/cookoo/fmt\n\tvendor/github.com/Masterminds/cookoo/io\n\tvendor/github.com/Masterminds/cookoo/web\n\tvendor/github.com/Masterminds/semver\n\tvendor/github.com/Masterminds/vcs\n\tvendor/github.com/codegangsta/cli\n\tvendor/gopkg.in/yaml.v2\n```\n\n### glide help\n\nPrint the glide help.\n\n```\n$ glide help\n```\n\n### glide --version\n\nPrint the version and exit.\n\n```\n$ glide --version\nglide version 0.12.0\n```\n\n### glide.yaml\n\nFor full details on the `glide.yaml` files see [the documentation](https://glide.sh/docs/glide.yaml).\n\nThe `glide.yaml` file does two critical things:\n\n1. It names the current package\n2. It declares external dependencies\n\nA brief `glide.yaml` file looks like this:\n\n```yaml\npackage: github.com/Masterminds/glide\nimport:\n  - package: github.com/Masterminds/semver\n  - package: github.com/Masterminds/cookoo\n    version: ^1.2.0\n    repo: git@github.com:Masterminds/cookoo.git\n```\n\nThe above tells `glide` that...\n\n1. This package is named `github.com/Masterminds/glide`\n2. That this package depends on two libraries.\n\nThe first library exemplifies a minimal package import. It merely gives\nthe fully qualified import path.\n\nWhen Glide reads the definition for the second library, it will get the repo\nfrom the source in `repo`, checkout the latest version between 1.2.0 and 2.0.0,\nand put it in `github.com/Masterminds/cookoo` in the `vendor` directory. (Note\nthat `package` and `repo` can be completely different)\n\n**TIP:** The version is either VCS dependent and can be anything that can be checked\nout or a semantic version constraint that can be parsed by the [`github.com/\nMasterminds/semver`](https://github.com/Masterminds/semver) package.\nFor example, with Git this can be a branch, tag, or hash. This varies and\ndepends on what's supported in the VCS.\n\n**TIP:** In general, you are advised to use the *base package name* for\nimporting a package, not a subpackage name. For example, use\n`github.com/kylelemons/go-gypsy` and not\n`github.com/kylelemons/go-gypsy/yaml`.\n\n## Supported Version Control Systems\n\nThe Git, SVN, Mercurial (Hg), and Bzr source control systems are supported. This\nhappens through the [vcs package](https://github.com/masterminds/vcs).\n\n## Frequently Asked Questions (F.A.Q.)\n\n#### Q: Why does Glide have the concept of sub-packages when Go doesn't?\n\nIn Go every directory is a package. This works well when you have one repo\ncontaining all of your packages. When you have different packages in different\nVCS locations things become a bit more complicated. A project containing a\ncollection of packages should be handled with the same information including\nthe version. By grouping packages this way we are able to manage the related\ninformation.\n\n#### Q: bzr (or hg) is not working the way I expected. Why?\n\nThese are works in progress, and may need some additional tuning. Please\ntake a look at the [vcs package](https://github.com/masterminds/vcs). If you\nsee a better way to handle it please let us know.\n\n#### Q: Should I check `vendor/` into version control?\n\nThat's up to you. It's not necessary, but it may also cause you extra\nwork and lots of extra space in your VCS. There may also be unforeseen errors\n([see an example](https://github.com/mattfarina/golang-broken-vendor)).\n\n#### Q: How do I import settings from GPM, Godep, gom or gb?\n\nThere are two parts to importing.\n\n1. If a package you import has configuration for GPM, Godep, gom or gb Glide will\n   recursively install the dependencies automatically.\n2. If you would like to import configuration from GPM, Godep, gom or gb to Glide see\n   the `glide import` command. For example, you can run `glide import godep` for\n   Glide to detect the projects Godep configuration and generate a `glide.yaml`\n   file for you.\n\nEach of these will merge your existing `glide.yaml` file with the\ndependencies it finds for those managers, and then emit the file as\noutput. **It will not overwrite your glide.yaml file.**\n\nYou can write it to file like this:\n\n```\n$ glide import godep -f glide.yaml\n```\n\n#### Q: Can Glide fetch a package based on OS or Arch?\n\nA: Yes. Using the `os` and `arch` fields on a `package`, you can specify\nwhich OSes and architectures the package should be fetched for. For\nexample, the following package will only be fetched for 64-bit\nDarwin/OSX systems:\n\n```yaml\n- package: some/package\n  os:\n    - darwin\n  arch:\n    - amd64\n```\n\nThe package will not be fetched for other architectures or OSes.\n\n## LICENSE\n\nThis package is made available under an MIT-style license. See\nLICENSE.txt.\n\n## Thanks!\n\nWe owe a huge debt of gratitude to the [GPM and\nGVP](https://github.com/pote/gpm) projects, which\ninspired many of the features of this package. If `glide` isn't the\nright Go project manager for you, check out those.\n\nThe Composer (PHP), npm (JavaScript), and Bundler (Ruby) projects all\ninspired various aspects of this tool, as well.\n\n## The Name\n\nAside from being catchy, \"glide\" is a contraction of \"Go Elide\". The\nidea is to compress the tasks that normally take us lots of time into a\njust a few seconds."
}
