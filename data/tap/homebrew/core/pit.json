{
  "name": "pit",
  "full_name": "pit",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Project manager from hell (integrates with Git)",
  "license": "BSD-2-Clause",
  "homepage": "https://github.com/michaeldv/pit",
  "versions": {
    "stable": "0.1.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/michaeldv/pit/archive/0.1.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "ddf78b2734c6dd3967ce215291c3f2e48030e0f3033b568eb080a22f041c7a0e"
    },
    "head": {
      "url": "https://github.com/michaeldv/pit.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pit/blobs/sha256:bab334d334f9076b84f008dffa276886491a4567dcce911bca2de19f0a4d462e",
          "sha256": "bab334d334f9076b84f008dffa276886491a4567dcce911bca2de19f0a4d462e"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pit/blobs/sha256:cdb46ba810ed638aa93d076788bbc3a21f0d563aa5175fdccdae7b9c3476608c",
          "sha256": "cdb46ba810ed638aa93d076788bbc3a21f0d563aa5175fdccdae7b9c3476608c"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pit/blobs/sha256:2d3857a0cf9c47d2d53f87109d87a4823fed481398cf2adb6c9f3809b8085985",
          "sha256": "2d3857a0cf9c47d2d53f87109d87a4823fed481398cf2adb6c9f3809b8085985"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pit/blobs/sha256:43d88cf92d08f7169764740b0dcf55d529ad3e88e5297d8eede1b9cbcbca2849",
          "sha256": "43d88cf92d08f7169764740b0dcf55d529ad3e88e5297d8eede1b9cbcbca2849"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pit/blobs/sha256:cea94d460905b3f03d850b3e15a99d9a2e1d18558be52a8740dfbae36d7b27e4",
          "sha256": "cea94d460905b3f03d850b3e15a99d9a2e1d18558be52a8740dfbae36d7b27e4"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pit/blobs/sha256:853489d4ee4f37e97f89415f5a3d1e0c225cb2dace8f61680293bb61ad57dd52",
          "sha256": "853489d4ee4f37e97f89415f5a3d1e0c225cb2dace8f61680293bb61ad57dd52"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pit/blobs/sha256:3ff5098a860de65a101fafe58d9ef76ac4c392f0b127720ecb34f0141554c27d",
          "sha256": "3ff5098a860de65a101fafe58d9ef76ac4c392f0b127720ecb34f0141554c27d"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pit/blobs/sha256:7c23637b9f925de09953cc5288e884ee9c08a5b62b2a16a3596cf6fcfc3c0677",
          "sha256": "7c23637b9f925de09953cc5288e884ee9c08a5b62b2a16a3596cf6fcfc3c0677"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pit/blobs/sha256:0fcb58f56565c207f8030853336ba313d93ba9bd3f1c09480a0ad37de1d961f2",
          "sha256": "0fcb58f56565c207f8030853336ba313d93ba9bd3f1c09480a0ad37de1d961f2"
        },
        "sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pit/blobs/sha256:fd6ce87e3c42f5418c28e6a8a60184ac51b596bb59343de5523930980071103b",
          "sha256": "fd6ce87e3c42f5418c28e6a8a60184ac51b596bb59343de5523930980071103b"
        },
        "el_capitan": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pit/blobs/sha256:20064d0b1496360f820f55aae90b0e4adf00a70cb4f607668a6beadd0ae11c08",
          "sha256": "20064d0b1496360f820f55aae90b0e4adf00a70cb4f607668a6beadd0ae11c08"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pit/blobs/sha256:d9d22e313984a6d20930041fd3cbb5896826e0be8a687992866ceef0e79152c7",
          "sha256": "d9d22e313984a6d20930041fd3cbb5896826e0be8a687992866ceef0e79152c7"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "ruby"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/pit.rb",
  "ruby_source_checksum": {
    "sha256": "82797392107c5e7214d1e62d123a3fc1c3671621caeedf71e1a24072caedae91"
  },
  "date_added": "2011-03-10T22:36:45-08:00",
  "readme": "## Welcome to Pit ##\nPit is a command-line project manager that integrates with Git. I wrote it\nbecause I needed a command-line tool for tracking tasks. Besides, after\nyears of Ruby and JavaScript programming I missed plain C.\n\n### Installing Pit ###\nPit is implemented in C and compiles down to a single executable file. It\nhas been tested to compile on Mac OS Leopard, Ubuntu, and RedHat Linux.\n\n    $ git clone git://github.com/michaeldv/pit.git\n    $ cd pit\n    $ make\n    $ make test     # <-- Optional, requires Ruby\n    $ sudo make install # or 'make install PREFIX=${HOME}' to install in ${HOME}/bin\n    $ which pit\n    /usr/local/bin/pit\n    $ pit version\n    0.1.0\n\n### Basic Concepts ###\nBasic Pit entities are projects, tasks, and notes. One project can have\nmultiple tasks, and a task can have multiple notes. Each entity has a number\nof attributes. For example, project has name and status, task has name,\nstatus, priority, date, and time, and within note there is message body.\nAll attributes except name and message body are optional and can be omitted.\n\nThe attributes have no semantic meaning, and do not have a pre-defined set\nof values. For example, depending on the particular need, the time attribute\ncould be used as projected time in weeks, hours spent on the task, or days\nleft to finish the task.\n\nPit tries to maintain a notion of \"current\" project, task, or note. When you\ncreate new project, it automatically becomes current. If you do not specify\nproject number when creating a task, the new task will be associated with\nthe current project.\n\n### Pit Commands ###\nPit commands are as follows:\n\n    init       Create an empty Pit database or re-initialize an existing one\n    project    Create, search, and manage Pit projects\n    task       Create, search, and manage Pit tasks\n    note       Create, search, and manage Pit notes\n    log        Show chronological Pit activity log\n    info       Show summary information about your Pit database\n    help       Show help information about Pit\n    version    Show Pit version number\n\nAll commands may be shortened, as long as they remain unambiguous. For more\ninformation on a specific command run:\n\n    $ pit help <command> \n\n### Git Integration ###\nPit distribution comes with tools/commit-msg file. Copy this file to\n.git/hooks/commit-msg and make it executable:\n\n    $ cp ~/pit/tools/commit-msg .git/hooks\n    $ chmod +x .git/hooks/commit-msg\n\nCreate Git branch using Pit task number as leading or trailing digits of the\nbranch name. Now on every commit to the branch the hook will prompt you to\nupdate task status. The hook appends Pit task number to the commit message,\nupdates Pit task status, and creates task note with the commit massage.\n\nFor example:\n\n    $ git checkout -b bugfix-42\n    Switched to a new branch 'bugfix-42'\n\n    $ touch README\n    $ git add .\n    $ git commit -am \"Added README file\"\n    What is the status of task 42?\n      (I)n progress\n      (P)ostponed\n      (O)pen\n      (D)one\n    Enter the status for task 42 [D]:\n    i\n    updated task 42: My second task (status: in progress)\n    created note 42: Added README file [task 42, status:in progress] (task 42)\n    [bugfix-2 0d930fb] Added README file [task 42, status:in progress]\n     0 files changed, 0 insertions(+), 0 deletions(-)\n     create mode 100644 README\n\n### Tips ###\nA few tips to get you going:\n\n    # Changing default Pit file name: define PITFILE environment variable.\n    $ pit init\n    Created empty /Users/mike/.pit\n\n    $ export PITFILE=\"~/pit.db\"\n    $ pit init\n    Created empty /Users/mike/pit.db\n\n    # Displaying last 10 lines of pit log in reverse order:\n    $ pit log|tail -10|sed -n '1!G;h;$p'\n\n    # Displaying tasks within certain date range:\n    $ pit task -q -d \"Jan 1\" -D \"Sep 1\"\n\n    # Displaying tasks with certain time range:\n    $ pit task -q -t 0:30 -T 8:00\n\n### Sample Pit session ###\n\n    $ pit init\n    Created empty /Users/mike/.pit\n\n    $ pit project -c \"My very first project\"\n    created project 1: My very first project (status: active)\n\n    $ pit project -c \"My second project\" -s backlog\n    created project 2: My second project (status: backlog)\n\n    $ pit project\n      1: (mike) |active | My very first project (0 tasks)\n    * 2: (mike) |backlog| My second project     (0 tasks)\n\n    $ pit project -e 1 -s current\n    updated project 1: My very first project (status: current)\n\n    $ pit project\n    * 1: (mike) |current| My very first project (0 tasks)\n      2: (mike) |backlog| My second project     (0 tasks)\n\n    $ pit task -c \"My very first task\"\n    created task 1: My very first task (status: open, priority: normal, project: 1)\n\n    $ pit task -c \"My second task\" -s new -p high\n    created task 2: My second task (status: new, priority: high, project: 1)\n\n    $ pit task -c \"My third task\" -p low -t 4:00\n    created task 3: My third task (status: open, priority: low, time: 4:00, project: 1)\n\n    $ pit p\n    * 1: (mike) |current| My very first project (3 tasks)\n      2: (mike) |backlog| My second project     (0 tasks)\n\n    $ pit t\n      1: (mike) |open| |normal|      My very first task (0 notes)\n      2: (mike) |new | |high  |      My second task     (0 notes)\n    * 3: (mike) |open| |low   | 4:00 My third task      (0 notes)\n\n    $ pit task -e -s new\n    updated task 3: My third task (status: new)\n\n    $ pit task -e 1 -d 10/10\n    updated task 1: My very first task (date: Oct 10, 2010)\n    * 1: (mike) |open| |normal| Oct 10, 2010      My very first task (0 notes)\n      2: (mike) |new | |high  |                   My second task     (0 notes)\n      3: (mike) |new | |low   |              4:00 My third task      (0 notes)\n\n    $ pit note -c \"Sample note for task #1\"\n    created note 1: Sample note for task #1 (task 1)\n\n    $ pit task -q -s new\n      2: (mike) |new| |high|      My second task (0 notes)\n      3: (mike) |new| |low | 4:00 My third task  (0 notes)\n\n    $ pit task -m -p 2\n    moved task 1: from project 1 to project 2\n\n    $ pit project 2\n      1: (mike) |current| My very first project (2 tasks)\n    * 2: (mike) |backlog| My second project     (1 task)    \n\n    $ pit project -d\n    deleted note 1: Sample note for task #1 (task 1)\n    deleted task 1: My very first task with 1 note (project: 2)\n    deleted project 2: My second project with 1 task\n\n    $ pit log\n    Aug 22, 2010 14:30 (mike): Initialized pit\n    Aug 22, 2010 14:31 (mike): created project 1: My very first project (status: active)\n    Aug 22, 2010 14:31 (mike): created project 2: My second project (status: backlog)\n    Aug 22, 2010 14:31 (mike): updated project 1: My very first project (status: current)\n    Aug 22, 2010 14:31 (mike): created task 1: My very first task (status: open, priority: normal, project: 1)\n    Aug 22, 2010 14:31 (mike): created task 2: My second task (status: new, priority: high, project: 1)\n    Aug 22, 2010 14:31 (mike): created task 3: My third task (status: open, priority: low, time: 4:00, project: 1)\n    Aug 22, 2010 14:32 (mike): updated task 3: My third task (status: new)\n    Aug 22, 2010 14:32 (mike): updated task 1: My very first task (date: Oct 10, 2010)\n    Aug 22, 2010 14:32 (mike): created note 1: Sample note for task #1 (task 1)\n    Aug 22, 2010 14:33 (mike): moved task 1: from project 1 to project 2\n    Aug 22, 2010 14:33 (mike): deleted note 1: Sample note for task #1 (task 1)\n    Aug 22, 2010 14:33 (mike): deleted task 1: My very first task with 1 note (project: 2)\n    Aug 22, 2010 14:33 (mike): deleted project 2: My second project with 1 task\n\n### License ###\nCopyright (c) 2010 Michael Dvorkin\n\nmike[at]dvorkin.net aka mike[at]fatfreecrm.com aka twitter.com/mid\n\nTHIS SOFTWARE IS PROVIDED BY THE AUTHORS \"AS IS\" AND ANY EXPRESS \nOR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED \nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE \nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\nOR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT\nOF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR \nBUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\nWHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE \nOR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, \nEVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nReleased under the Simplified BSD license. See LICENSE file for details."
}
