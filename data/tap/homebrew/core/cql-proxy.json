{
  "name": "cql-proxy",
  "full_name": "cql-proxy",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "DataStax cql-proxy enables Cassandra apps to use Astra DB without code changes",
  "license": "Apache-2.0",
  "homepage": "https://github.com/datastax/cql-proxy",
  "versions": {
    "stable": "0.1.4",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/datastax/cql-proxy/archive/refs/tags/v0.1.4.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "fa2dbae0622d1a4d04db54db4fb6ef0a1857eaea5a300a5145c529ccb4b17d66"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cql-proxy/blobs/sha256:6d1c859be99b70b4ed639f01dfc01901b2aecc8fc9254866510b6a90a9dc95fc",
          "sha256": "6d1c859be99b70b4ed639f01dfc01901b2aecc8fc9254866510b6a90a9dc95fc"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cql-proxy/blobs/sha256:b4f83b9f47cf33db592085177094a3bd6761d771c0d36a3890f12fae0894c4e4",
          "sha256": "b4f83b9f47cf33db592085177094a3bd6761d771c0d36a3890f12fae0894c4e4"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cql-proxy/blobs/sha256:0c166d1573d484f603b38c8438a4c74e1080fe69cd6575ed7de17341fa3e1662",
          "sha256": "0c166d1573d484f603b38c8438a4c74e1080fe69cd6575ed7de17341fa3e1662"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cql-proxy/blobs/sha256:61679d7f18fec195f74e19979327ad19c7ef3a87abbe5af41fe512f7154868f5",
          "sha256": "61679d7f18fec195f74e19979327ad19c7ef3a87abbe5af41fe512f7154868f5"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cql-proxy/blobs/sha256:13d172a29157d6b9cf77aa99cfaa2b196032ea52154c6f0c5fbbf508e3c50e74",
          "sha256": "13d172a29157d6b9cf77aa99cfaa2b196032ea52154c6f0c5fbbf508e3c50e74"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cql-proxy/blobs/sha256:448efcea0d3b7217009df6937673d5bcee2e1bbde4d933cc9970e65086825480",
          "sha256": "448efcea0d3b7217009df6937673d5bcee2e1bbde4d933cc9970e65086825480"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cql-proxy/blobs/sha256:8b770257cfc9817d035b33087d26e4873126268b673d285b4ca421685a66db94",
          "sha256": "8b770257cfc9817d035b33087d26e4873126268b673d285b4ca421685a66db94"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/cql-proxy.rb",
  "ruby_source_checksum": {
    "sha256": "6f41d801ad7dcb29d8d1a9044b3f248366a88b9f0f0eaceb32d3caf83f104aa2"
  },
  "date_added": "2022-08-13T04:56:40+00:00",
  "readme": "# cql-proxy\n\n[![GitHub Action](https://github.com/datastax/cql-proxy/actions/workflows/test.yml/badge.svg)](https://github.com/datastax/cql-proxy/actions/workflows/test.yml) [![Go Report Card](https://goreportcard.com/badge/github.com/datastax/cql-proxy)](https://goreportcard.com/report/github.com/datastax/cql-proxy)\n\n## Table of Contents\n\n- [What is the cql-proxy?](https://github.com/datastax/cql-proxy#what-is-cqlproxy)\n- [When to use cql-proxy](https://github.com/datastax/cql-proxy#when-to-use-cql-proxy)\n- [Configuration](https://github.com/datastax/cql-proxy#configuration)\n- [Getting started](https://github.com/datastax/cql-proxy#getting-started)\n  - [Locally build and run](https://github.com/datastax/cql-proxy#locally-build-and-run)\n  - [Run a `cql-proxy` docker image](https://github.com/datastax/cql-proxy#run-a-cql-proxy-docker-image)\n  - [Use Kubernetes](https://github.com/datastax/cql-proxy#use-kubernetes)\n- [Known issues](https://github.com/datastax/cql-proxy#known-issues)\n    - [Token-aware load balancing](https://github.com/datastax/cql-proxy#token-aware-load-balancing)\n\n\n## What is `cql-proxy`?\n\n![cql-proxy](cql-proxy.png)\n\n`cql-proxy` is designed to forward your application's CQL traffic to an appropriate database service. It listens on a local address and securely forwards that traffic.\n\n## When to use `cql-proxy`\n\nThe `cql-proxy` sidecar enables unsupported CQL drivers to work with [DataStax Astra][astra]. These drivers include both legacy DataStax [drivers] and community-maintained CQL drivers, such as the [gocql] driver and the [rust-driver].\n\n`cql-proxy` also enables applications that are currently using [Apache Cassandra][cassandra] or [DataStax Enterprise (DSE)][dse] to use Astra without requiring any code changes.  Your application just needs to be configured to use the proxy.\n\nIf you're building a new application using DataStax [drivers], `cql-proxy` is not required, as the drivers can communicate directly with Astra. DataStax drivers have excellent support for Astra out-of-the-box, and are well-documented in the [driver-guide] guide. \n\n## Configuration\n\nUse the `-h` or `--help` flag to display a listing all flags and their corresponding descriptions and environment variables (shown below as items starting with `$`):\n\n```sh\n$ ./cql-proxy -h\nUsage: cql-proxy\n\nFlags:\n  -h, --help                                              Show context-sensitive help.\n  -b, --astra-bundle=STRING                               Path to secure connect bundle for an Astra database. Requires '--username' and '--password'. Ignored if using the\n                                                          token or contact points option ($ASTRA_BUNDLE).\n  -t, --astra-token=STRING                                Token used to authenticate to an Astra database. Requires '--astra-database-id'. Ignored if using the bundle path\n                                                          or contact points option ($ASTRA_TOKEN).\n  -i, --astra-database-id=STRING                          Database ID of the Astra database. Requires '--astra-token' ($ASTRA_DATABASE_ID)\n      --astra-api-url=\"https://api.astra.datastax.com\"    URL for the Astra API ($ASTRA_API_URL)\n      --astra-timeout=10s                                 Timeout for contacting Astra when retrieving the bundle and metadata ($ASTRA_TIMEOUT)\n  -c, --contact-points=CONTACT-POINTS,...                 Contact points for cluster. Ignored if using the bundle path or token option ($CONTACT_POINTS).\n  -u, --username=STRING                                   Username to use for authentication ($USERNAME)\n  -p, --password=STRING                                   Password to use for authentication ($PASSWORD)\n  -r, --port=9042                                         Default port to use when connecting to cluster ($PORT)\n  -n, --protocol-version=\"v4\"                             Initial protocol version to use when connecting to the backend cluster (default: v4, options: v3, v4, v5, DSEv1,\n                                                          DSEv2) ($PROTOCOL_VERSION)\n  -m, --max-protocol-version=\"v4\"                         Max protocol version supported by the backend cluster (default: v4, options: v3, v4, v5, DSEv1, DSEv2)\n                                                          ($MAX_PROTOCOL_VERSION)\n  -a, --bind=\":9042\"                                      Address to use to bind server ($BIND)\n  -f, --config=CONFIG                                     YAML configuration file ($CONFIG_FILE)\n      --debug                                             Show debug logging ($DEBUG)\n      --health-check                                      Enable liveness and readiness checks ($HEALTH_CHECK)\n      --http-bind=\":8000\"                                 Address to use to bind HTTP server used for health checks ($HTTP_BIND)\n      --heartbeat-interval=30s                            Interval between performing heartbeats to the cluster ($HEARTBEAT_INTERVAL)\n      --idle-timeout=60s                                  Duration between successful heartbeats before a connection to the cluster is considered unresponsive and closed\n                                                          ($IDLE_TIMEOUT)\n      --readiness-timeout=30s                             Duration the proxy is unable to connect to the backend cluster before it is considered not ready\n                                                          ($READINESS_TIMEOUT)\n      --idempotent-graph                                  If true it will treat all graph queries as idempotent by default and retry them automatically. It may be\n                                                          dangerous to retry some graph queries -- use with caution ($IDEMPOTENT_GRAPH).\n      --num-conns=1                                       Number of connection to create to each node of the backend cluster ($NUM_CONNS)\n      --proxy-cert-file=STRING                            Path to a PEM encoded certificate file with its intermediate certificate chain. This is used to encrypt traffic\n                                                          for proxy clients ($PROXY_CERT_FILE)\n      --proxy-key-file=STRING                             Path to a PEM encoded private key file. This is used to encrypt traffic for proxy clients ($PROXY_KEY_FILE)\n      --rpc-address=STRING                                Address to advertise in the 'system.local' table for 'rpc_address'. It must be set if configuring peer proxies\n                                                          ($RPC_ADDRESS)\n      --data-center=STRING                                Data center to use in system tables ($DATA_CENTER)\n      --tokens=TOKENS,...                                 Tokens to use in the system tables. It's not recommended ($TOKENS)\n```\n\nTo pass configuration to `cql-proxy`, either command-line flags, environment variables, or a configuration file can be used. Using the `docker` method as an example, the following samples show how the token and database ID are defined with each method.\n### Using flags\n\n```sh\ndocker run -p 9042:9042 \\\n  --rm datastax/cql-proxy:v0.1.4 \\\n  --astra-token <astra-token> --astra-database-id <astra-datbase-id>\n```\n\n### Using environment variables\n\n```sh\ndocker run -p 9042:9042  \\\n  --rm datastax/cql-proxy:v0.1.4 \\\n  -e ASTRA_TOKEN=<astra-token> -e ASTRA_DATABASE_ID=<astra-datbase-id>\n```\n\n### Using a configuration file\n\nProxy settings can also be passed using a configuration file with the `--config /path/to/proxy.yaml` flag. This can be mixed and matched with command-line flags and environment variables. Here are some example configuration files:\n\n```yaml\ncontact-points:\n  - 127.0.0.1\nusername: cassandra\npassword: cassandra\nport: 9042\nbind: 127.0.0.1:9042\n# ...\n```\n\nor with a Astra token:\n\n```yaml\nastra-token: <astra-token>\nastra-database-id: <astra-database-id>\nbind: 127.0.0.1:9042\n# ...\n```\n\nAll configuration keys match their command-line flag counterpart, e.g. `--astra-bundle` is\n`astra-bundle:`,  `--contact-points` is `contact-points:` etc.\n\n#### Setting up peer proxies\n\nMulti-region failover with DC-aware load balancing policy is the most useful case for a multiple proxy setup.\n\nWhen configuring `peers:` it is required to set `--rpc-address` (or `rpc-address:` in the yaml) for each proxy and it must match is corresponding `peers:` entry. Also, `peers:` is only available in the configuration file and cannot be set using a command-line flag.\n\n##### Multi-region setup\n\nHere's an example of configuring multi-region failover with two proxies. A proxy is started for each region of the cluster connecting to it using that region's bundle. They all share a common configuration file that contains the full list of proxies.\n\n*Note:* Only bundles are supported for multi-region setups.\n\n```sh\ncql-proxy --astra-bundle astra-region1-bundle.zip --username token --password <astra-token> \\\n  --bind 127.0.0.1:9042 --rpc-address 127.0.0.1 --data-center dc-1 --config proxy.yaml\n```\n\n```sh\ncql-proxy ---astra-bundle astra-region2-bundle.zip --username token --password <astra-token> \\\n  --bind 127.0.0.2:9042 --rpc-address 127.0.0.2 --data-center dc-2 --config proxy.yaml\n```\n\nThe peers settings are configured using a yaml file. It's a good idea to explicitly provide the `--data-center` flag, otherwise; these values are pulled from the backend cluster and would need to be pulled from the `system.local` and `system.peers` table to properly setup the peers `data-center:` values. Here's an example `proxy.yaml`:\n\n```yaml\npeers:\n  - rpc-address: 127.0.0.1\n    data-center: dc-1\n  - rpc-address: 127.0.0.2\n    data-center: dc-2\n```\n\n*Note:* It's okay for the `peers:` to contain entries for the current proxy itself because they'll just be omitted.\n\n## Getting started\n\nThere are three methods for using `cql-proxy`:\n\n- Locally build and run `cql-proxy`\n- Run a docker image that has `cql-proxy` installed\n- Use a Kubernetes container to run `cql-proxy`\n### Locally build and run\n\n1. Build `cql-proxy`.\n\n    ```sh\n    go build\n    ```\n\n2. Run with your desired database.\n\n   - [DataStax Astra][astra] cluster:\n\n      ```sh\n      ./cql-proxy --astra-token <astra-token> --astra-database-id <astra-database-id>\n      ```\n\n      The `<astra-token>` can be generated using these [instructions]. The proxy also supports using the [Astra Secure Connect Bundle][bundle] along with a client ID and secret generated using these [instructions]:\n\n      ```\n      ./cql-proxy --astra-bundle <your-secure-connect-zip> \\\n      --username <astra-client-id> --password <astra-client-secret>\n      ```\n\n   - [Apache Cassandra][cassandra] cluster:\n\n      ```sh\n      ./cql-proxy --contact-points <cluster node IPs or DNS names> [--username <username>] [--password <password>]\n      ```\n### Run a `cql-proxy` docker image\n\n1. Run with your desired database.\n\n   - [DataStax Astra][astra] cluster:\n\n      ```sh\n      docker run -p 9042:9042 \\\n        datastax/cql-proxy:v0.1.4 \\\n        --astra-token <astra-token> --astra-database-id <astra-database-id>\n      ```\n\n      The `<astra-token>` can be generated using these [instructions]. The proxy also supports using the [Astra Secure Connect Bundle][bundle], but it requires mounting the bundle to a volume in the container:\n\n      ```sh\n      docker run -v <your-secure-connect-bundle.zip>:/tmp/scb.zip -p 9042:9042 \\\n      --rm datastax/cql-proxy:v0.1.4 \\\n      --astra-bundle /tmp/scb.zip --username <astra-client-id> --password <astra-client-secret>\n      ```\n   - [Apache Cassandra][cassandra] cluster:\n\n      ```sh\n      docker run -p 9042:9042 \\\n        datastax/cql-proxy:v0.1.4 \\\n        --contact-points <cluster node IPs or DNS names> [--username <username>] [--password <password>]\n      ```\n  If you wish to have the docker image removed after you are done with it, add `--rm` before the image name `datastax/cql-proxy:v0.1.4`.\n\n### Use Kubernetes\n\nUsing Kubernetes with `cql-proxy` requires a number of steps:\n\n1. Generate a token following the Astra [instructions](https://docs.datastax.com/en/astra/docs/manage-application-tokens.html#_create_application_token). This step will display your Client ID, Client Secret, and Token; make sure you download the information for the next steps. Store the secure bundle in `/tmp/scb.zip` to match the example below.\n\n2. Create `cql-proxy.yaml`. You'll need to add three sets of information: arguments, volume mounts, and volumes. A full example can be found [here](k8s/cql-proxy.yml).\n\n - Argument: Modify the local bundle location, username and password, using the client ID and client secret obtained in the last step to the container argument.   \n\n      ```\n      command: [\"./cql-proxy\"]\n      args: [\"--astra-bundle=/tmp/scb.zip\",\"--username=Client ID\",\"--password=Client Secret\"]\n      ```\n\n- Volume mounts: Modify `/tmp/` as a volume mount as required.\n\n      volumeMounts:\n        - name: my-cm-vol\n        mountPath: /tmp/\n \n\n- Volume: Modify the `configMap` filename as required. In this example, it is named `cql-proxy-configmap`. Use the same name for the `volumes` that you used for the `volumeMounts`. \n\n      volumes:\n        - name: my-cm-vol\n          configMap:\n            name: cql-proxy-configmap        \n    \n3. Create a configmap. Use the same secure bundle that was specified in the `cql-proxy.yaml`.\n      \n      ```sh\n      kubectl create configmap cql-proxy-configmap --from-file /tmp/scb.zip \n      ```\n\n4. Check the configmap that was created. \n\n    ```sh\n    kubectl describe configmap cql-proxy-configmap\n      \n      Name:         cql-proxy-configmap\n      Namespace:    default\n      Labels:       <none>\n      Annotations:  <none>\n\n      Data\n      ====\n\n      BinaryData\n      ====\n      scb.zip: 12311 bytes\n    ```\n\n5. Create a Kubernetes deployment with the YAML file you created:\n\n     ```sh\n     kubectl create -f cql-proxy.yaml\n     ```\n\n6. Check the logs:\n    ```sh\n    kubectl logs <deployment-name>\n    ```\n## Known issues\n\n### Token-aware load balancing\n\nDrivers that use token-aware load balancing may print a warning or may not work when using cql-proxy. Because cql-proxy abstracts the backend cluster as a single endpoint this doesn't always work well with token-aware drivers that expect there to be at least \"replication factor\" number of nodes in the cluster. Many drivers print a warning (which can be ignored) and fallback to something like round-robin, but other drivers might fail with an error. For the drivers that fail with an error it is required that they disable token-aware or configure the round-robin load balancing policy.\n\n[astra]: https://astra.datastax.com/\n[drivers]: https://docs.datastax.com/en/driver-matrix/doc/driver_matrix/common/driverMatrix.html\n[gocql]: https://github.com/gocql/gocql\n[rust-driver]: https://github.com/scylladb/scylla-rust-driver\n[driver-guide]: https://docs.datastax.com/en/astra/docs/connecting-to-astra-databases-using-datastax-drivers.html\n[cassandra]: https://cassandra.apache.org/\n[dse]: https://www.datastax.com/products/datastax-enterprise\n[instructions]: https://docs.datastax.com/en/astra/docs/manage-application-tokens.html\n[bundle]: https://docs.datastax.com/en/astra/docs/obtaining-database-credentials.html#_getting_your_secure_connect_bundle"
}
