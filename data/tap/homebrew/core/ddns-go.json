{
  "name": "ddns-go",
  "full_name": "ddns-go",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Simple and easy-to-use DDNS",
  "license": "MIT",
  "homepage": "https://github.com/jeessy2/ddns-go",
  "versions": {
    "stable": "5.5.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/jeessy2/ddns-go/archive/refs/tags/v5.5.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "5df02e7f1b59988719c9deabcbb2f8981e1a93a4864e535b61ec5962431732b2"
    },
    "head": {
      "url": "https://github.com/jeessy2/ddns-go.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ddns-go/blobs/sha256:2edc6c4dfc8d5f62589267165cb2b01fa35a895b55426228b258e8f72985a2eb",
          "sha256": "2edc6c4dfc8d5f62589267165cb2b01fa35a895b55426228b258e8f72985a2eb"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ddns-go/blobs/sha256:2edc6c4dfc8d5f62589267165cb2b01fa35a895b55426228b258e8f72985a2eb",
          "sha256": "2edc6c4dfc8d5f62589267165cb2b01fa35a895b55426228b258e8f72985a2eb"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ddns-go/blobs/sha256:2edc6c4dfc8d5f62589267165cb2b01fa35a895b55426228b258e8f72985a2eb",
          "sha256": "2edc6c4dfc8d5f62589267165cb2b01fa35a895b55426228b258e8f72985a2eb"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ddns-go/blobs/sha256:7f468bc0ad5853c90d39793506fc5f5e81eabc3f7bac10e8f3ec4377a265eeae",
          "sha256": "7f468bc0ad5853c90d39793506fc5f5e81eabc3f7bac10e8f3ec4377a265eeae"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ddns-go/blobs/sha256:7f468bc0ad5853c90d39793506fc5f5e81eabc3f7bac10e8f3ec4377a265eeae",
          "sha256": "7f468bc0ad5853c90d39793506fc5f5e81eabc3f7bac10e8f3ec4377a265eeae"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ddns-go/blobs/sha256:7f468bc0ad5853c90d39793506fc5f5e81eabc3f7bac10e8f3ec4377a265eeae",
          "sha256": "7f468bc0ad5853c90d39793506fc5f5e81eabc3f7bac10e8f3ec4377a265eeae"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ddns-go/blobs/sha256:48140aad6dafe2b6c972b9376b771cb326e687ddd6d1dd0d27a0034263e5456e",
          "sha256": "48140aad6dafe2b6c972b9376b771cb326e687ddd6d1dd0d27a0034263e5456e"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/ddns-go.rb",
  "ruby_source_checksum": {
    "sha256": "e5500ceb5e46b90c5a7bb228c8bb55ac906a02c5b156300d1041aea03fa447f5"
  },
  "date_added": "2023-06-04T12:15:35+08:00",
  "readme": "# ddns-go\n\n[![GitHub release](https://img.shields.io/github/release/jeessy2/ddns-go.svg?logo=github&style=flat-square) ![GitHub release downloads](https://img.shields.io/github/downloads/jeessy2/ddns-go/total?logo=github)](https://github.com/jeessy2/ddns-go/releases/latest) [![Go version](https://img.shields.io/github/go-mod/go-version/jeessy2/ddns-go)](https://github.com/jeessy2/ddns-go/blob/master/go.mod) [![](https://goreportcard.com/badge/github.com/jeessy2/ddns-go/v5)](https://goreportcard.com/report/github.com/jeessy2/ddns-go/v5) [![](https://img.shields.io/docker/image-size/jeessy/ddns-go)](https://registry.hub.docker.com/r/jeessy/ddns-go) [![](https://img.shields.io/docker/pulls/jeessy/ddns-go)](https://registry.hub.docker.com/r/jeessy/ddns-go)\n\n自动获得你的公网 IPv4 或 IPv6 地址，并解析到对应的域名服务。\n\n- [特性](#特性)\n- [系统中使用](#系统中使用)\n- [Docker中使用](#docker中使用)\n- [使用IPv6](#使用ipv6)\n- [Webhook](#webhook)\n- [Callback](#callback)\n- [界面](#界面)\n- [开发&自行编译](#开发自行编译)\n\n## 特性\n\n- 支持Mac、Windows、Linux系统，支持ARM、x86架构\n- 支持的域名服务商 `Alidns(阿里云)` `Dnspod(腾讯云)` `Cloudflare` `华为云` `Callback` `百度云` `Porkbun` `GoDaddy` `Google Domain`\n- 支持接口/网卡/[命令](https://github.com/jeessy2/ddns-go/wiki/通过命令获取IP参考)获取IP\n- 支持以服务的方式运行\n- 默认间隔5分钟同步一次\n- 支持同时配置多个DNS服务商\n- 支持多个域名同时解析\n- 支持多级域名\n- 网页中配置，简单又方便，默认勾选`禁止从公网访问`\n- 网页中方便快速查看最近50条日志\n- 支持Webhook通知\n- 支持TTL\n- 支持部分DNS服务商[传递自定义参数](https://github.com/jeessy2/ddns-go/wiki/传递自定义参数)，实现地域解析等功能\n\n> [!NOTE]\n> 建议在启用公网访问时，使用 Nginx 等反向代理软件启用 HTTPS 访问，以保证安全性。[FAQ](https://github.com/jeessy2/ddns-go/wiki/FAQ)\n\n## 系统中使用\n\n- 从 [Releases](https://github.com/jeessy2/ddns-go/releases) 下载并解压 ddns-go\n- [可选] 使用 [Homebrew](https://brew.sh) 安装 [ddns-go](https://formulae.brew.sh/formula/ddns-go)：\n\n  ```bash\n  brew install ddns-go\n  ```\n\n- 双击运行, 如没有找到配置, 程序将自动打开 http://127.0.0.1:9876\n- [可选] 安装服务\n  - Mac/Linux: `sudo ./ddns-go -s install`\n  - Win(以管理员打开cmd): `.\\ddns-go.exe -s install`\n- [可选] 服务卸载\n  - Mac/Linux: `sudo ./ddns-go -s uninstall`\n  - Win(以管理员打开cmd): `.\\ddns-go.exe -s uninstall`\n- [可选] 支持安装或启动时带参数 `-l`监听地址 `-f`同步间隔时间(秒) `-cacheTimes`间隔N次与服务商比对 `-c`自定义配置文件路径 `-noweb`不启动web服务 `-skipVerify`跳过证书验证 `-dns` 自定义 DNS 服务器。如：`./ddns-go -s install -l :9877 -f 600 -c /Users/name/ddns-go.yaml`\n\n> [!NOTE]\n> 通过合理的配置 `-f` 和 `-cacheTimes` 可以实现 IP 变化即时触发更新且不会被 DDNS 服务商限流, 例如 `-f 10 -cacheTimes 360` 效果为每 10 秒检查一次本地 IP 变化, 每小时去公网对比一下 IP 变化\n\n## Docker中使用\n\n- 挂载主机目录, 使用docker host模式。可把 `/opt/ddns-go` 替换为你主机任意目录, 配置文件为隐藏文件\n\n  ```bash\n  docker run -d --name ddns-go --restart=always --net=host -v /opt/ddns-go:/root jeessy/ddns-go\n  ```\n\n- 在浏览器中打开`http://主机IP:9876`，修改你的配置，成功\n\n- [可选] 使用 `ghcr.io` 镜像\n\n  ```bash\n  docker run -d --name ddns-go --restart=always --net=host -v /opt/ddns-go:/root ghcr.io/jeessy2/ddns-go\n  ```\n\n- [可选] 支持启动带参数 `-l`监听地址 `-f`间隔时间(秒)\n\n  ```bash\n  docker run -d --name ddns-go --restart=always --net=host -v /opt/ddns-go:/root jeessy/ddns-go -l :9877 -f 600\n  ```\n\n- [可选] 不使用docker host模式\n\n  ```bash\n  docker run -d --name ddns-go --restart=always -p 9876:9876 -v /opt/ddns-go:/root jeessy/ddns-go\n  ```\n\n## 使用IPv6\n\n- 前提：你的电脑或终端能正常获取IPv6，并能正常访问IPv6\n- Windows/Mac：推荐 [系统中使用](#系统中使用)，Windows/Mac桌面版的docker不支持`--net=host`\n- 群晖：\n  - 套件中心下载docker并打开\n  - 注册表中搜索`ddns-go`并下载\n  - 映像 -> 选择`jeessy/ddns-go` -> 启动 -> 高级设置 -> 网络中勾选`使用与 Docker Host 相同的网络`，高级设置中勾选`启动自动重新启动`\n  - 在浏览器中打开`http://群晖IP:9876`，修改你的配置，成功\n- Linux的x86或arm架构，推荐使用Docker的`--net=host`模式。参考 [Docker中使用](#Docker中使用)\n- 虚拟机中使用有可能正常获取IPv6，但不能正常访问IPv6\n\n## Webhook\n\n- 支持webhook, 域名更新成功或不成功时, 会回调填写的URL\n- 支持的变量\n\n  |  变量名   | 说明  |\n  |  ----  | ----  |\n  | #{ipv4Addr}  | 新的IPv4地址 |\n  | #{ipv4Result}  | IPv4地址更新结果: `未改变` `失败` `成功`|\n  | #{ipv4Domains}  | IPv4的域名，多个以`,`分割 |\n  | #{ipv6Addr}  | 新的IPv6地址 |\n  | #{ipv6Result}  | IPv6地址更新结果: `未改变` `失败` `成功`|\n  | #{ipv6Domains}  | IPv6的域名，多个以`,`分割 |\n\n- 如 RequestBody 为空则为 GET 请求，否则为 POST 请求\n- <details><summary>Server酱</summary>\n\n  ```\n  https://sctapi.ftqq.com/[SendKey].send?title=你的公网IP变了&desp=主人IPv4变了#{ipv4Addr},域名更新结果:#{ipv4Result}\n  ```\n- <details><summary>Bark</summary>\n\n  ```\n  https://api.day.app/[YOUR_KEY]/主人IPv4变了#{ipv4Addr},域名更新结果:#{ipv4Result}\n  ```\n  </details>\n- <details><summary>钉钉</summary>\n\n  - 钉钉电脑端 -> 群设置 -> 智能群助手 -> 添加机器人 -> 自定义\n  - 只勾选 `自定义关键词`, 输入的关键字必须包含在RequestBody的content中, 如：`你的公网IP变了`\n  - URL中输入钉钉给你的 `Webhook地址`\n  - RequestBody中输入\n    ```json\n    {\n        \"msgtype\": \"markdown\",\n        \"markdown\": {\n            \"title\": \"你的公网IP变了\",\n            \"text\": \"#### 你的公网IP变了 \\n - IPv4地址：#{ipv4Addr} \\n - 域名更新结果：#{ipv4Result} \\n\"\n        }\n    }\n    ```\n  </details>\n- <details><summary>飞书</summary>\n\n  - 飞书电脑端 -> 群设置 -> 添加机器人 -> 自定义机器人\n  - 安全设置只勾选 `自定义关键词`, 输入的关键字必须包含在RequestBody的content中, 如：`你的公网IP变了`\n  - URL中输入飞书给你的 `Webhook地址`\n  - RequestBody中输入\n    ```json\n    {\n        \"msg_type\": \"post\",\n        \"content\": {\n            \"post\": {\n                \"zh_cn\": {\n                    \"title\": \"你的公网IP变了\",\n                    \"content\": [\n                        [\n                            {\n                                \"tag\": \"text\",\n                                \"text\": \"IPv4地址：#{ipv4Addr}\"\n                            }\n                        ],\n                        [\n                            {\n                                \"tag\": \"text\",\n                                \"text\": \"域名更新结果：#{ipv4Result}\"\n                            }\n                        ]\n                    ]\n                }\n            }\n        }\n    }\n    ```\n  </details>\n- <details><summary>Telegram</summary>\n\n  [ddns-telegram-bot](https://github.com/WingLim/ddns-telegram-bot)\n  </details>\n- <details><summary>plusplus 推送加</summary>\n\n  - [获取token](https://www.pushplus.plus/push1.html)\n  - URL中输入 `https://www.pushplus.plus/send`\n  - RequestBody中输入\n    ```json\n    {\n        \"token\": \"your token\",\n        \"title\": \"你的公网IP变了\",\n        \"content\": \"你的公网IP变了 \\n - IPv4地址：#{ipv4Addr} \\n - 域名更新结果：#{ipv4Result} \\n\"\n    }\n    ```\n  </details>\n- <details><summary>Discord</summary>\n\n  - Discord任意客户端 -> 伺服器 -> 频道设置 -> 整合 -> 查看Webhook -> 新Webhook -> 复制Webhook网址\n  - URL中输入Discord复制的 `Webhook网址`\n  - RequestBody中输入\n    ```json\n    {\n        \"content\": \"域名 #{ipv4Domains} 动态解析 #{ipv4Result}.\",\n        \"embeds\": [\n            {\n                \"description\": \"#{ipv4Domains} 的动态解析 #{ipv4Result}, IP: #{ipv4Addr}\",\n                \"color\": 15258703,\n                \"author\": {\n                    \"name\": \"DDNS\"\n                },\n                \"footer\": {\n                    \"text\": \"DDNS #{ipv4Result}\"\n                }\n            }\n        ]\n    }\n    ```\n  </details>\n\n- [查看更多Webhook配置参考](https://github.com/jeessy2/ddns-go/issues/327)\n\n## Callback\n\n- 通过自定义回调可支持更多的第三方DNS服务商\n- 配置的域名有几行, 就会回调几次\n- 支持的变量\n\n  |  变量名   | 说明  |\n  |  ----  | ----  |\n  | #{ip}  | 新的IPv4/IPv6地址 |\n  | #{domain}  | 当前域名 |\n  | #{recordType}  | 记录类型 `A`或`AAAA` |\n  | #{ttl}  | ttl |\n- 如 RequestBody 为空则为 GET 请求，否则为 POST 请求\n- [Callback配置参考](https://github.com/jeessy2/ddns-go/wiki/Callback配置参考)\n\n## 界面\n\n![screenshots](https://raw.githubusercontent.com/jeessy2/ddns-go/master/ddns-web.png)\n\n## 开发&自行编译\n\n- 如果喜欢从源代码编译自己的版本，可以使用本项目提供的 Makefile 构建\n- 使用 `make build` 生成本地编译后的 `ddns-go` 可执行文件\n- 使用 `make build_docker_image` 自行编译 Docker 镜像"
}
