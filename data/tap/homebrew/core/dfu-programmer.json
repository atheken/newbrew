{
  "name": "dfu-programmer",
  "full_name": "dfu-programmer",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Device firmware update based USB programmer for Atmel chips",
  "license": "GPL-2.0-or-later",
  "homepage": "https://github.com/dfu-programmer/dfu-programmer",
  "versions": {
    "stable": "1.1.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/dfu-programmer/dfu-programmer/releases/download/v1.1.0/dfu-programmer-1.1.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "844e469be559657bc52c9d9d03c30846acd11ffbb1ddd42438fa8af1d2b8587d"
    },
    "head": {
      "url": "https://github.com/dfu-programmer/dfu-programmer.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/dfu-programmer/blobs/sha256:c7abf3562a37b1356cdd4462aa7c6ada63c4b4393a1ab3f6e1491fd113abccba",
          "sha256": "c7abf3562a37b1356cdd4462aa7c6ada63c4b4393a1ab3f6e1491fd113abccba"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/dfu-programmer/blobs/sha256:a8110021b2738f533615e1f7e961e2ef536f3a13fd3dbf2efc4d4bd1be0f7509",
          "sha256": "a8110021b2738f533615e1f7e961e2ef536f3a13fd3dbf2efc4d4bd1be0f7509"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/dfu-programmer/blobs/sha256:23cbbc0db021a543e010b2fd56d2a391739183388f8c1428bcb54efa961dab14",
          "sha256": "23cbbc0db021a543e010b2fd56d2a391739183388f8c1428bcb54efa961dab14"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/dfu-programmer/blobs/sha256:ef6b41b4e7597f4bd8fe3f0f829a3a1b17fc653267c40f6ae2662d2020ddd097",
          "sha256": "ef6b41b4e7597f4bd8fe3f0f829a3a1b17fc653267c40f6ae2662d2020ddd097"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/dfu-programmer/blobs/sha256:f0af0119d6d41fa35a9fb875d15270b842061e3fb557a195f904b8f76f5bf6aa",
          "sha256": "f0af0119d6d41fa35a9fb875d15270b842061e3fb557a195f904b8f76f5bf6aa"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/dfu-programmer/blobs/sha256:9933ccea13d42b9fbc76c7539f46be4123cc3e17b17b0e595d7780fa7ddc4510",
          "sha256": "9933ccea13d42b9fbc76c7539f46be4123cc3e17b17b0e595d7780fa7ddc4510"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dfu-programmer/blobs/sha256:4b49dbbfb38d200869a2aa405a699cecbaf7dda8fb7d50f45da43ea817345114",
          "sha256": "4b49dbbfb38d200869a2aa405a699cecbaf7dda8fb7d50f45da43ea817345114"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "libusb-compat"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/dfu-programmer.rb",
  "ruby_source_checksum": {
    "sha256": "383c161e4520e0de39d5b854210ec9727332d65fb57d43b90242941c73438e41"
  },
  "head_dependencies": {
    "build_dependencies": [
      "autoconf",
      "automake"
    ],
    "dependencies": [
      "libusb-compat"
    ],
    "test_dependencies": [],
    "recommended_dependencies": [],
    "optional_dependencies": [],
    "uses_from_macos": [],
    "uses_from_macos_bounds": []
  },
  "date_added": "2011-02-15T08:29:25-08:00",
  "readme": "# dfu-programmer\n\ndfu-programmer is an implementation of the Device Firmware Upgrade class USB driver that enables firmware upgrades for various USB enabled (with the correct bootloader) Atmel chips.\nThis program was created because the Atmel \"FLIP\" program for flashing devices does not support flashing via USB on Linux, and because standard DFU loaders do not work for Atmel's chips.\n\nCheck out the Atmel website for more information.\nThey are kind enough to provide generally correct specifications this implementation is based on.\n\nThe project website is http://dfu-programmer.github.io and you can use that to check for updates.\n\nAll official [builds](https://github.com/dfu-programmer/dfu-programmer/actions) and [releases](https://github.com/dfu-programmer/dfu-programmer/releases) are on [GitHub](https://github.com/dfu-programmer/dfu-programmer).\n\n[![Build dfu-programmer](https://github.com/dfu-programmer/dfu-programmer/actions/workflows/build.yml/badge.svg)](https://github.com/dfu-programmer/dfu-programmer/actions/workflows/build.yml)\n[![Coverage Status](https://coveralls.io/repos/github/dfu-programmer/dfu-programmer/badge.svg?branch=master)](https://coveralls.io/github/dfu-programmer/dfu-programmer?branch=master)\n\n## Simple install procedure for Unix/Linux/MAC\n\n```bash\ntar -xzf dfu-programmer-<version>.tar.gz # unpack the sources\n```\n\n_or_\n\n```bash\ngit clone https://github.com/dfu-programmer/dfu-programmer.git\n```\n\n```bash\ncd dfu-programmer # change to the top-level directory\n```\n\n> If the source was checked-out from GitHub, run the following command.\n> You may also need to do this if your libusb is in a non-standard location, or if the build fails to find it for some reason.\n> This command requires that `autoconf` is installed (`sudo apt-get install autoconf`).\n> \n> ```bash\n> ./bootstrap.sh # regenerate base config files\n> ```\n\n```bash\n./configure # regenerate configure and run it\n```\n\n> Optionally you can specify where dfu-programmer gets installed using the `--prefix=` option to the `./configure` command.\n> See `./configure --help` for more details.\n\n> If usb library is not available try getting `sudo apt-get install libusb-1.0-0-dev`.\n\n```bash\nmake # build dfu-programmer\nsudo make install # install dfu-programmer\n```\n\n> Instructions for installing autocompletion will also be displayed during `make` (or `make bash-completion`).\n\n## Build procedure for Windows\n\nBuilding Windows apps from source is never quite as simple...\nFirstly you need to have MinGW and MSys with developer tools.\nGet them from http://sourceforge.net/projects/mingw/files/.\nSee `.github/workflows/build.yml` for examples of building on Windows and the needed tools.\n\nIf you install the correct package with `pacman`, header and lib files will be installed in the correct locations.\n\n- **32-bit:** `pacman -S mingw-w64-i686-libusb`\n- **64-bit:** `pacman -S mingw-w64-x86_64-libusb`\n\nFollow the same install instructions as above.\n\n## Windows Driver Files\n\nWindows's built-in WinUSB driver should work out of the box.\n\n### Atmel FLIP\n\nAtmel's [FLIP programmer](https://www.microchip.com/en-us/development-tool/flip) also uses libusb-win32, so we can take advantage of Atmel's official certified drivers.\n\n### Zadig\n\n[Zadig](https://zadig.akeo.ie) is another popular tool for managing the current USB driver for devices on your system.\nIt can be used to install the libusb-win32, libusbK, WinUSB, or \"USB Serial (CDC)\" drivers.\nAll but \"USB Serial (CDC)\" will work with dfu-programmer.\n\n## Testing & Coverage\n\nSince most testing depends on hardware, we've set up a custom GitHub Action Runner on a dedicated Raspberry Pi.\nRead more about the tests [here](test/README.md).\n\n## Currently Supported Chips\n\n<details><summary>8051 based controllers</summary>\n\n- at89c51snd1c\n- at89c51snd2c\n- at89c5130\n- at89c5131\n- at89c5132\n\n</details>\n\n<details><summary>AVR based controllers</summary>\n\n- at90usb1287\n- at90usb1286\n- at90usb1287-4k\n- at90usb1286-4k\n- at90usb647\n- at90usb646\n- at90usb162\n- at90usb82\n- atmega32u6\n- atmega32u4\n- atmega32u2\n- atmega16u4\n- atmega16u2\n- atmega8u2\n\n</details>\n\n<details><summary>AVR32 based controllers</summary>\n\n- at32uc3a0128\n- at32uc3a1128\n- at32uc3a0256\n- at32uc3a1256\n- at32uc3a0512\n- at32uc3a1512\n- at32uc3a0512es\n- at32uc3a1512es\n- at32uc3a364\n- at32uc3a364s\n- at32uc3a3128\n- at32uc3a3128s\n- at32uc3a3256\n- at32uc3a3256s\n- at32uc3a4256s\n- at32uc3b064\n- at32uc3b164\n- at32uc3b0128\n- at32uc3b1128\n- at32uc3b0256\n- at32uc3b1256\n- at32uc3b0256es\n- at32uc3b1256es\n- at32uc3b0512\n- at32uc3b1512\n- at32uc3c064\n- at32uc3c0128\n- at32uc3c0256\n- at32uc3c0512\n- at32uc3c164\n- at32uc3c1128\n- at32uc3c1256\n- at32uc3c1512\n- at32uc3c264\n- at32uc3c2128\n- at32uc3c2256\n- at32uc3c2512\n\n</details>\n\n<details><summary>XMEGA based controllers</summary>\n\n- atxmega64a1u\n- atxmega128a1u\n- atxmega64a3u\n- atxmega128a3u\n- atxmega192a3u\n- atxmega256a3u\n- atxmega16a4u\n- atxmega32a4u\n- atxmega64a4u\n- atxmega128a4u\n- atxmega256a3bu\n- atxmega64b1\n- atxmega128b1\n- atxmega64b3\n- atxmega128b3\n- atxmega64c3\n- atxmega128c3\n- atxmega256c3\n- atxmega384c3\n- atxmega16c4\n- atxmega32c4\n\n</details>\n\n<details><summary>Experimental support for ST cortex M4</summary>\n\n- stm32f4_B\n- stm32f4_C\n- stm32f4_E\n- stm32f4_G\n\n</details>"
}
