{
  "name": "sourcedocs",
  "full_name": "sourcedocs",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Generate Markdown files from inline source code documentation",
  "license": "MIT",
  "homepage": "https://github.com/SourceDocs/SourceDocs",
  "versions": {
    "stable": "2.0.1",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/SourceDocs/SourceDocs/archive/2.0.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "07547c929071124264ec9cc601331f21dc67a104ffc76fbc1801c1ecb4c35bbf"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sourcedocs/blobs/sha256:fbe4a3e5c3485101486be0639b81cc4799c2dd7e0edf5f528d32a3c0ca6122fa",
          "sha256": "fbe4a3e5c3485101486be0639b81cc4799c2dd7e0edf5f528d32a3c0ca6122fa"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sourcedocs/blobs/sha256:b8757a91d73d96999da362afbc5a5c42c7be949f562cf5569b2bf24853af6ef9",
          "sha256": "b8757a91d73d96999da362afbc5a5c42c7be949f562cf5569b2bf24853af6ef9"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sourcedocs/blobs/sha256:1254fb0f47a037f929e579b4a68dd375b0e587d9adb3e876865b6de031d39f46",
          "sha256": "1254fb0f47a037f929e579b4a68dd375b0e587d9adb3e876865b6de031d39f46"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sourcedocs/blobs/sha256:5cf36d5bfe2a9a2770454f21169e5e9c8a5a6b50525ec0a9418c88180706d40c",
          "sha256": "5cf36d5bfe2a9a2770454f21169e5e9c8a5a6b50525ec0a9418c88180706d40c"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sourcedocs/blobs/sha256:974904c0b5b4d0d54fe8392c84fe06b3aa23e47fb76f95579f09e5fc94704d2d",
          "sha256": "974904c0b5b4d0d54fe8392c84fe06b3aa23e47fb76f95579f09e5fc94704d2d"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sourcedocs/blobs/sha256:292dbf6713d17716e685ac74c0e9fdbe07038b95bca36f234a94bfe2fffe5aab",
          "sha256": "292dbf6713d17716e685ac74c0e9fdbe07038b95bca36f234a94bfe2fffe5aab"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sourcedocs/blobs/sha256:56cad5d1e01271614fd93c5ec93b4b7fc7cabb64bef767581bc5ad179ee20a63",
          "sha256": "56cad5d1e01271614fd93c5ec93b4b7fc7cabb64bef767581bc5ad179ee20a63"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "swift"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [
    {
      "name": "xcode",
      "cask": null,
      "download": null,
      "version": "12.0",
      "contexts": [
        "build",
        "test"
      ],
      "specs": [
        "stable"
      ]
    }
  ],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/sourcedocs.rb",
  "ruby_source_checksum": {
    "sha256": "ccaa67218d14772e9cf5bfda34fce1b9f43f3469a030017043d17bb4e0fc5246"
  },
  "date_added": "2018-10-31T18:21:57+01:00",
  "readme": "# SourceDocs\n\n[![Release](https://img.shields.io/github/release/eneko/sourcedocs.svg)](https://github.com/eneko/SourceDocs/releases)\n[![Build Status](https://travis-ci.org/eneko/SourceDocs.svg?branch=master)](https://travis-ci.org/eneko/SourceDocs)\n[![codecov](https://codecov.io/gh/eneko/SourceDocs/branch/master/graph/badge.svg)](https://codecov.io/gh/eneko/SourceDocs)\n![Swift 5.0](https://img.shields.io/badge/Swift-5.0-orange.svg)\n[![Swift Package Manager Compatible](https://img.shields.io/badge/spm-compatible-brightgreen.svg)](https://swift.org/package-manager)\n[![codebeat badge](https://codebeat.co/badges/99fcf00c-0aec-40de-b3fe-0c7ed9a169cb)](https://codebeat.co/projects/github-com-eneko-sourcedocs-master)\n\n![SourceDocs Header](http://www.enekoalonso.com/media/sourcedocs-header.jpg)\n\nSourceDocs is a command line tool that generates markdown\ndocumentation files from inline source code comments.\n\n![Terminal Output](http://www.enekoalonso.com/media/sourcedocs-terminal.png)\n\nSimilar to Sphinx or Jazzy, SourceDocs parses your Swift source code and\ngenerates beautiful reference documentation. In contrast to those other tools,\nSourceDocs generates markdown files that you can store and browse inline\nwithin your project repository. Or even render with GitHub Pages.\n\n### Features\n- ✅ Generate reference documentation from Xcode projects\n- ✅ Generate reference documentation from Swift Packages\n- ✅ Generate package description documentation from Swift Packages\n\n\n## Generated documentation\nSourceDocs writes documentation files to the `Documentation/Reference` directory relative\nto your project root (path can be configured). This allows for the generated documentation to \nlive along other hand-crafted documentation you might have written or will write in the future.\n\nWhen specifying a module name, the documentation files will be written to\n`Documentation/Reference/<module name>`.\n\nIt's recommended adding this generated documentation to the source code\nrepository, so it can be easily browsed inline. GitHub, BitBucket and other source control\nplatforms do a great job rendering Markdown files, so documentation is easy to read.\n\n### Examples of Generated Documentation\n- [SourceDocsLib](/docs/reference/SourceDocsLib)\n- [SourceDocsDemo](/docs/reference/SourceDocsDemo)\n- [SourceDocs Package](/docs/Package.md)\n- [Apollo iOS API Reference](https://www.apollographql.com/docs/ios/api-reference/)\n- [Workflow framework (by Square)](https://square.github.io/workflow/swift/api/Workflow/)\n\n\n## Requirements\n\n| SourceDocs Version | Xcode Version | Swift Version |\n| ------------------ | ------------- | ------------- |\n| 2.x                | 13.1          | 5.5           |\n| 1.x                | 11.5          | 5.1           |\n\n\n## Usage\n\n### Swift Packages\nTo generate documentation for a Swift Package, run `sourcedocs` from the root\nof your package repository.\n\n    $ cd path/to/MyPackage\n    $ sourcedocs generate --all-modules\n\nThis command will generate documentation for each module in your Swift package.\n\nFor a specific module, pass the module name using the `--spm-module` parameter.\n\n    $ sourcedocs generate --spm-module SourceDocsDemo\n\n### Xcode Projects\nTo generate documentation from your source code, run `sourcedocs` \ndirectly from the root your Xcode project.\n\n    $ cd path/to/MyAppOrFramework\n    $ sourcedocs generate\n\nThis command will analyze your Xcode project and generate reference\ndocumentation from all public types found. \n\nUsually, for most Xcode projects, no parameters are needed at all. `xcodebuild`\nshould be able to find the default project and scheme.\n\nIf the command fails, try specifying the scheme (`-scheme SchemeName`) or the\nworkspace. Any arguments passed to `sourcedocs` after `--` will be passed to\n`xcodebuild` without modification.\n\n    $ sourcedocs generate -- -scheme MyScheme\n\n\n## Usage options\nTyping `sourcedocs help` we get a list of all available commands:\n\n    $ sourcedocs help\n    USAGE: source-docs <subcommand>\n\n    OPTIONS:\n      -h, --help              Show help information.\n\n    SUBCOMMANDS:\n      clean                   Delete the output folder and quit.\n      generate                Generates the Markdown documentation\n      package                 Generate PACKAGE.md from Swift package description.\n      version                 Display the current version of SourceDocs\n\nTyping `sourcedocs help <command>` we get a list of all options for that command:\n\n    $ sourcedocs generate --help\n\n    OVERVIEW: Generates the Markdown documentation\n\n    USAGE: source-docs generate <options>\n\n    ARGUMENTS:\n      <xcode-arguments>       List of arguments to pass to xcodebuild \n\n    OPTIONS:\n      -a, --all-modules       Generate documentation for all modules in a Swift package \n      --spm-module <spm-module>\n                              Generate documentation for Swift Package Manager module \n      --module-name <module-name>\n                              Generate documentation for a Swift module \n      --link-beginning <link-beginning>\n                              The text to begin links with \n      --link-ending <link-ending>\n                              The text to end links with (default: .md)\n      -i, --input-folder <input-folder>\n                              Path to the input directory (default: /Users/ramses.alonso/Development/eneko/SourceDocs)\n      -o, --output-folder <output-folder>\n                              Output directory to clean (default: Documentation/Reference)\n      --min-acl <min-acl>     Access level to include in documentation [private, fileprivate, internal, public, open] (default: public)\n      -m, --module-name-path  Include the module name as part of the output folder path \n      -c, --clean             Delete output folder before generating documentation \n      -l, --collapsible       Put methods, properties and enum cases inside collapsible blocks \n      -t, --table-of-contents Generate a table of contents with properties and methods for each type\n      -s, --skip-empty        Do not generate documentation for files with no comments. \n      -r, --reproducible-docs Generate documentation that is reproducible: only depends on the sources.\n                              For example, this will avoid adding timestamps on the generated files. \n      -h, --help              Show help information\n\n\n## Installation\n\n### Download Binary\n\n    $ curl -Ls https://github.com/eneko/SourceDocs/releases/latest/download/sourcedocs.macos.zip -o /tmp/sourcedocs.macos.zip\n    $ unzip -j -d /usr/local/bin /tmp/sourcedocs.macos.zip \n\n### From Sources\nRequirements:\n- Swift 5.1 runtime and Xcode installed in your computer.\n\n#### Using Homebrew\n\n    $ brew install sourcedocs\n\n#### Building with Swift Package Manager\n\n    $ git clone https://github.com/eneko/SourceDocs.git\n    $ cd SourceDocs\n    $ make\n\n\n## Contact\nFollow and contact me on Twitter at [@eneko](https://www.twitter.com/eneko).\n\n\n## Contributions\nIf you find an issue, just [open a ticket](https://github.com/eneko/SourceDocs/issues/new)\non it. Pull requests are warmly welcome as well.\n\n\n## License\nSourceDocs is licensed under the MIT license. See [LICENSE](/LICENSE) for more info."
}
