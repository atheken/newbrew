{
  "name": "age-plugin-yubikey",
  "full_name": "age-plugin-yubikey",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Plugin for encrypting files with age and PIV tokens such as YubiKeys",
  "license": "Apache-2.0 or MIT",
  "homepage": "https://github.com/str4d/age-plugin-yubikey",
  "versions": {
    "stable": "0.4.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/str4d/age-plugin-yubikey/archive/v0.4.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "721c2fd08fe8b7228ea43398475b954a8f0bc259b3a152f6f3b0dc66022df55e"
    },
    "head": {
      "url": "https://github.com/str4d/age-plugin-yubikey.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/age-plugin-yubikey/blobs/sha256:d483db38ef81bf77825584d6139b4044cad17e677e82ab3170511dee1e9253ab",
          "sha256": "d483db38ef81bf77825584d6139b4044cad17e677e82ab3170511dee1e9253ab"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/age-plugin-yubikey/blobs/sha256:04110190fbb7ad74a007b3f8e3529ef1ca7c0ef945dc206b88094494f4448f6c",
          "sha256": "04110190fbb7ad74a007b3f8e3529ef1ca7c0ef945dc206b88094494f4448f6c"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/age-plugin-yubikey/blobs/sha256:7549e635e0904242a089b71a0d60c212385d2ff5140286d9e5731b7a5c8bd34f",
          "sha256": "7549e635e0904242a089b71a0d60c212385d2ff5140286d9e5731b7a5c8bd34f"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/age-plugin-yubikey/blobs/sha256:bce97e22834bb8bcb69dac6e0b3935b7289ff527f67adc8ff4a44c663c48d330",
          "sha256": "bce97e22834bb8bcb69dac6e0b3935b7289ff527f67adc8ff4a44c663c48d330"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/age-plugin-yubikey/blobs/sha256:4c172585c6d95ffa9f134db3c8f739a2e52696123334e2b4e093be188162fe06",
          "sha256": "4c172585c6d95ffa9f134db3c8f739a2e52696123334e2b4e093be188162fe06"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/age-plugin-yubikey/blobs/sha256:b306b141a739daa466bd6fc5806897eb4a2f2a4f11ef9b4ba20cf82738ac35ca",
          "sha256": "b306b141a739daa466bd6fc5806897eb4a2f2a4f11ef9b4ba20cf82738ac35ca"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/age-plugin-yubikey/blobs/sha256:bdaa3e51ea5ade2f1292b027a5ff7b1bf0c793177165ddf247aa0bcf7c27f01a",
          "sha256": "bdaa3e51ea5ade2f1292b027a5ff7b1bf0c793177165ddf247aa0bcf7c27f01a"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust",
    "pkg-config"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "pcsc-lite"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "2706c66e8def3eeba4d9bf1adf66221c8ad70701",
  "ruby_source_path": "Formula/age-plugin-yubikey.rb",
  "ruby_source_checksum": {
    "sha256": "714c2127173f3adb7aea9e98180c2b6a1e5a5863962839e6e5e16bb6c85ddcb2"
  },
  "date_added": "2022-05-03T07:44:52+00:00",
  "readme": "# YubiKey plugin for age clients\n\n`age-plugin-yubikey` is a plugin for [age](https://age-encryption.org/v1) clients\nlike [`age`](https://age-encryption.org) and [`rage`](https://str4d.xyz/rage),\nwhich enables files to be encrypted to age identities stored on YubiKeys.\n\n## Installation\n\n| Environment | CLI command |\n|-------------|-------------|\n| Cargo (Rust 1.65+) | `cargo install age-plugin-yubikey` |\n| Homebrew (macOS or Linux) | `brew install age-plugin-yubikey` |\n\nOn Windows, Linux, and macOS, you can use the\n[pre-built binaries](https://github.com/str4d/age-plugin-yubikey/releases).\n\nHelp from new packagers is very welcome.\n\n### Linux, BSD, etc.\n\nOn non-Windows, non-macOS systems, you need to ensure that the `pcscd` service\nis installed and running. \n\n| Environment | CLI command |\n|-------------|-------------|\n| Debian or Ubuntu | `sudo apt-get install pcscd` |\n| OpenBSD | As ```root``` do:<br>`pkg_add pcsc-lite ccid`<br>`rcctl enable pcscd`<br>`rcctl start pcscd` |\n| FreeBSD | As ```root``` do:<br>`pkg install pcsc-lite libccid`<br>`service pcscd enable`<br>`service pcscd start` |\n\nWhen installing via Cargo, you also need to ensure that the development headers\nfor the `pcsc-lite` library are available, so that the `pcsc-sys` crate can be\ncompiled.\n\n| Environment | CLI command |\n|-------------|-------------|\n| Debian or Ubuntu | `sudo apt-get install libpcsclite-dev` |\n\n### Windows Subsystem for Linux (WSL)\n\nWSL does not currently provide native support for USB devices. However, Windows\nbinaries installed on the host can be run from inside a WSL environment. This\nmeans that you can encrypt or decrypt files inside a WSL environment with a\nYubiKey:\n\n1. Install `age-plugin-yubikey` on the Windows host.\n2. Install an age client inside the WSL environment.\n3. Ensure that `age-plugin-yubikey.exe` is available in the WSL environment's\n   `PATH`. For default WSL setups, the Windows host's `PATH` is automatically\n   added to the WSL environment's `PATH` (see\n   [this Microsoft blog post](https://devblogs.microsoft.com/commandline/share-environment-vars-between-wsl-and-windows/)\n   for more details).\n\n## Configuration\n\n`age-plugin-yubikey` identities have two parts:\n- The secret key material, which is stored inside a YubiKey.\n- An age identity file, which contains information that an age client can use to\n  figure out which YubiKey secret key should be used.\n\nThere are two ways to configure a YubiKey as an age identity. You can run the\nplugin binary directly to use a simple text interface, which will create an age\nidentity file:\n\n```\n$ age-plugin-yubikey\n```\n\nOr you can use command-line flags to programmatically generate an identity and\nprint it to standard output:\n\n```\n$ age-plugin-yubikey --generate \\\n    [--serial SERIAL] \\\n    [--slot SLOT] \\\n    [--name NAME] \\\n    [--pin-policy PIN-POLICY] \\\n    [--touch-policy TOUCH-POLICY]\n```\n\nOnce an identity has been created, you can regenerate it later:\n\n```\n$ age-plugin-yubikey --identity [--serial SERIAL] --slot SLOT\n```\n\nTo use the identity with an age client, it needs to be stored in a file. When\nusing the above programmatic flags, you can do this by redirecting standard\noutput to a file. On a Unix system like macOS or Ubuntu:\n\n```\n$ age-plugin-yubikey --identity --slot SLOT > yubikey-identity.txt\n```\n\n## Usage\n\nThe age recipients contained in all connected YubiKeys can be printed on\nstandard output:\n\n```\n$ age-plugin-yubikey --list\n```\n\nTo encrypt files to these YubiKey recipients, ensure that `age-plugin-yubikey`\nis accessible in your `PATH`, and then use the recipients with an age client as\nnormal (e.g. `rage -r age1yubikey1...`).\n\nThe output of the `--list` command can also be used directly to encrypt files to\nall recipients (e.g. `age -R filename.txt`).\n\nTo decrypt files encrypted to a YubiKey identity, pass the identity file to the\nage client as normal (e.g. `rage -d -i yubikey-identity.txt`).\n\n## Advanced topics\n\n### Agent support\n\n`age-plugin-yubikey` does not provide or interact with an agent for decryption.\nIt does however attempt to preserve the PIN cache by not soft-resetting the\nYubiKey after a decryption or read-only operation, which enables YubiKey\nidentities configured with a PIN policy of `once` to not prompt for the PIN on\nevery decryption. **This does not work for YubiKey 4 series.**\n\nThe session that corresponds to the `once` policy can be ended in several ways,\nnot all of which are necessarily intuitive:\n\n- Unplugging the YubiKey (the obvious way).\n- Using a different applet (e.g. FIDO2). This causes the PIV applet to be closed\n  which clears its state.\n  - This is why the YubiKey 4 series does not support PIN cache preservation:\n    their serial can only be obtained by switching to the OTP applet.\n- Generating a new age identity via `age-plugin-yubikey --generate` or the CLI\n  interface. This is to avoid leaving the YubiKey authenticated with the\n  management key.\n\nIf the current PIN UX proves to be insufficient, a decryption agent will most\nlikely be implemented as a separate age plugin that interacts with\n[`yubikey-agent`](https://github.com/FiloSottile/yubikey-agent), enabling\nYubiKeys to be used simultaneously with age and SSH.\n\n### Manual setup and technical details\n\n`age-plugin-yubikey` only officially supports the following YubiKey variants,\nset up either via the text interface or the `--generate` flag:\n\n- YubiKey 4 series\n- YubiKey 5 series\n\nNOTE: Nano and USB-C variants of the above are also supported. The pre-YK4\nYubiKey NEO series is **NOT** supported. The blue \"Security Key by Yubico\" will\nalso not work (as it doesn't support PIV).\n\nIn practice, any PIV token with an ECDSA P-256 key and certificate in one of the\n20 \"retired\" slots should work. You can list all age-compatible keys with:\n\n```\n$ age-plugin-yubikey --list-all\n```\n\n`age-plugin-yubikey` implements several automatic security management features:\n\n- If it detects that the default PIN is being used, it will prompt the user to\n  change the PIN. The PUK is then set to the same value as the PIN.\n- If it detects that the default management key is being used, it generates a\n  random management key and stores it in PIN-protected metadata.\n  `age-plugin-yubikey` does not support custom management keys.\n\n## License\n\nLicensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or\n   http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally\nsubmitted for inclusion in the work by you, as defined in the Apache-2.0\nlicense, shall be dual licensed as above, without any additional terms or\nconditions."
}
