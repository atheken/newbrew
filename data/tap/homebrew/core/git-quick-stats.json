{
  "name": "git-quick-stats",
  "full_name": "git-quick-stats",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Simple and efficient way to access statistics in git",
  "license": "MIT",
  "homepage": "https://github.com/arzzen/git-quick-stats",
  "versions": {
    "stable": "2.5.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/arzzen/git-quick-stats/archive/2.5.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "e6cc4b2a2c981a6f3a19801340217b20b16e137bec264d1c89399612b2a9e58e"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-quick-stats/blobs/sha256:f41004b9d0cf2df23a3e08d65070745502bb6df33b0f8907412abbe042b7f534",
          "sha256": "f41004b9d0cf2df23a3e08d65070745502bb6df33b0f8907412abbe042b7f534"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "util-linux"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/git-quick-stats.rb",
  "ruby_source_checksum": {
    "sha256": "24ac903e7b8826e8f11b1a66ace6499ddcdf5f8e1ebb46ca94a16c7df73c7c59"
  },
  "date_added": "2017-02-21T18:54:39+00:00",
  "readme": "\n# GIT quick statistics [![Backers on Open Collective](https://opencollective.com/git-quick-stats/backers/badge.svg)](#backers) [![Sponsors on Open Collective](https://opencollective.com/git-quick-stats/sponsors/badge.svg)](#sponsors) [![Tweet](https://img.shields.io/twitter/url/http/shields.io.svg?style=social)](https://twitter.com/intent/tweet?text=Simple%20and%20efficient%20way%20to%20access%20various%20statistics%20in%20git%20repository&url=https://github.com/arzzen/git-quick-stat&via=arzzen&hashtags=git,stats,tool,statistics,developers) [![Travis](https://api.travis-ci.org/arzzen/git-quick-stats.svg?branch=master)](https://travis-ci.org/arzzen/git-quick-stats) [![Homebrew package](https://repology.org/badge/version-for-repo/homebrew/git-quick-stats.svg)](https://formulae.brew.sh/formula/git-quick-stats#default) [![Linuxbrew package](https://repology.org/badge/version-for-repo/linuxbrew/git-quick-stats.svg)](https://repology.org/metapackage/git-quick-stats/packages)\n\n> `git-quick-stats` is a simple and efficient way to access various statistics in a git repository.\n>\n> Any git repository may contain tons of information about commits, contributors, and files. Extracting this information is not always trivial, mostly because there are a gadzillion options to a gadzillion git commands – I don’t think there is a single person alive who knows them all. Probably not even [Linus Torvalds](https://github.com/torvalds) himself :).\n\n![mainMenuScreenshot](https://user-images.githubusercontent.com/8818630/154823670-f42a111b-45f4-47fc-aea7-80059827c8e6.png)\n\n\n## Table of Contents\n\n[**Screenshots**](#screenshots)\n\n[**Usage**](#usage)\n\n* [**Interactive**](#interactive)\n* [**Non-interactive**](#non-interactive)\n* [**Command-line arguments**](#command-line-arguments)\n* [**Git log since and until**](#git-log-since-and-until)\n* [**Git log limit**](#git-log-limit)\n* [**Git log options**](#git-log-options)\n* [**Git pathspec**](#git-pathspec)\n* [**Git merge view strategy**](#git-merge-view-strategy)\n* [**Color themes**](#color-themes)\n\n[**Installation**](#installation)\n\n* [**UNIX and Linux**](#unix-and-linux)\n* [**macOS**](#macos-homebrew)\n* [**Windows**](#windows)\n* [**Docker**](#docker)\n\n[**System requirements**](#system-requirements)\n\n* [**Dependencies**](#dependencies)\n\n[**FAQ**](#faq)\n\n[**Contribution**](#contribution)\n\n* [**Code reviews**](#code-reviews)\n* [**Some tips for good pull requests**](#some-tips-for-good-pull-requests)\n* [**Formatting**](#formatting)\n\n[**Tests**](#tests)\n\n[**Licensing**](#licensing)\n\n[**Contributors**](#contributors)\n\n* [**Backers**](#backers)\n* [**Sponsors**](#sponsors)\n\n## Screenshots\n\n![commitsByWeekdayScreenshot](https://user-images.githubusercontent.com/8818630/154823677-e34ca867-ae61-4755-bf89-c877f809c591.png)\n\n![commitsByHourScreenshot](https://user-images.githubusercontent.com/8818630/154823679-bdadc26c-c644-4a01-b625-85e330f85d41.png)\n\n## Usage\n\n### Interactive\n\n`git-quick-stats` has a built-in interactive menu that can be executed as such:\n\n```bash\ngit-quick-stats\n```\n\nOr\n\n```bash\ngit quick-stats\n```\n\n### Non-interactive\n\nFor those who prefer to utilize command-line options, `git-quick-stats` also has a non-interactive mode supporting both short and long options:\n\n```bash\ngit-quick-stats <optional-command-to-execute-directly>\n```\n\nOr\n\n```bash\ngit quick-stats <optional-command-to-execute-directly>\n```\n\n### Command-line arguments\n\nPossible arguments in short and long form:\n\n```bash\nGENERATE OPTIONS\n    -T, --detailed-git-stats\n        give a detailed list of git stats\n    -R, --git-stats-by-branch\n        see detailed list of git stats by branch\n    -c, --changelogs\n        see changelogs\n    -L, --changelogs-by-author\n        see changelogs by author\n    -S, --my-daily-stats\n        see your current daily stats\n    -V, --csv-output-by-branch\n        output daily stats by branch in CSV format\n    -j, --json-output\n        save git log as a JSON formatted file to a specified area\n\nLIST OPTIONS\n    -b, --branch-tree\n        show an ASCII graph of the git repo branch history\n    -D, --branches-by-date\n        show branches by date\n    -C, --contributors\n        see a list of everyone who contributed to the repo\n    -a, --commits-per-author\n        displays a list of commits per author\n    -d, --commits-per-day\n        displays a list of commits per day\n    -Y, --commits-by-year\n        displays a list of commits per year\n    -m, --commits-by-month\n        displays a list of commits per month\n    -w, --commits-by-weekday\n        displays a list of commits per weekday\n    -W, --commits-by-author-by-weekday\n        displays a list of commits per weekday by author\n    -o, --commits-by-hour\n        displays a list of commits per hour\n    -A, --commits-by-author-by-hour\n        displays a list of commits per hour by author\n    -z, --commits-by-timezone\n        displays a list of commits per timezone\n    -Z, --commits-by-author-by-timezone\n        displays a list of commits per timezone by author\n\nSUGGEST OPTIONS\n    -r, --suggest-reviewers\n        show the best people to contact to review code\n    -h, -?, --help\n        display this help text in the terminal\n```\n\n### Git log since and until\n\nYou can set the variables `_GIT_SINCE` and/or `_GIT_UNTIL` before running `git-quick-stats` to limit the git log. These work similar to git's built-in `--since` and `--until` log options.\n\n```bash\nexport _GIT_SINCE=\"2017-01-20\"\nexport _GIT_UNTIL=\"2017-01-22\"\n```\n\nOnce set, run `git quick-stats` as normal. Note that this affects all stats that parse the git log history until unset.\n\n### Git log limit\n\nYou can set variable `_GIT_LIMIT` for limited output. It will affect the \"changelogs\" and \"branch tree\" options.\n\n```bash\nexport _GIT_LIMIT=20\n```\n\n### Git log options\n\nYou can set `_GIT_LOG_OPTIONS` for [git log options](https://git-scm.com/docs/git-log#_options):\n\n```bash\nexport _GIT_LOG_OPTIONS=\"--ignore-all-space --ignore-blank-lines\"\n```\n\n### Git pathspec\n\nYou can exclude a directory from the stats by using [pathspec](https://git-scm.com/docs/gitglossary#gitglossary-aiddefpathspecapathspec)\n\n```bash\nexport _GIT_PATHSPEC=':!directory'\n```\n\nYou can also exclude files from the stats. Note that it works with any alphanumeric, glob, or regex that git respects.\n\n```bash\nexport _GIT_PATHSPEC=':!package-lock.json'\n```\n\n### Git merge view strategy\n\nYou can set the variable `_GIT_MERGE_VIEW` to enable merge commits to be part of the stats by setting `_GIT_MERGE_VIEW` to `enable`. You can also choose to only show merge commits by setting `_GIT_MERGE_VIEW` to `exclusive`. Default is to not show merge commits. These work similar to git's built-in `--merges` and `--no-merges` log options.\n\n```bash\nexport _GIT_MERGE_VIEW=\"enable\"\nexport _GIT_MERGE_VIEW=\"exclusive\"\n```\n\n### Git branch\n\nYou can set the variable `_GIT_BRANCH` to set the branch of the stats. Works with commands `--git-stats-by-branch` and `--csv-output-by-branch`.\n\n```bash\nexport _GIT_BRANCH=\"master\"\n```\n\n### Color themes\n\nYou can change to the legacy color scheme by toggling the variable `_MENU_THEME` between `default` and `legacy`\n\n```bash\nexport _MENU_THEME=\"legacy\"\n```\n\n![legacyThemeScreenshot](https://user-images.githubusercontent.com/8818630/154823711-3dd0c268-f3cb-42e5-9094-0eb8e45d1761.png)\n\n## Installation\n\n### Debian and Ubuntu\n\nIf you are on at least Debian Bullseye or Ubuntu Focal you can use apt for installation:\n\n```bash\napt install git-quick-stats\n```\n\n### UNIX and Linux\n\n```bash\ngit clone https://github.com/arzzen/git-quick-stats.git && cd git-quick-stats\nsudo make install\n```\n\nFor uninstalling, open up the cloned directory and run\n\n```bash\nsudo make uninstall\n```\n\nFor update/reinstall\n\n```bash\nsudo make reinstall\n```\n\n### macOS (homebrew)\n\n```bash\nbrew install git-quick-stats\n```\n\nOr you can follow the UNIX and Linux instructions if you wish.\n\n### Windows\n\nIf you are installing with Cygwin, use these scripts:\n\n* [installer](https://gist.github.com/arzzen/35e09866dfdadf2108b2420045739245)\n* [uninstaller](https://gist.github.com/arzzen/21c660014d0663b6c5710014714779d6)\n\nIf you are wishing to use this with WSL, follow the UNIX and Linux instructions.\n\n### Docker\n\nYou can use the Docker image provided:\n\n* Build: `docker build -t arzzen/git-quick-stats .`\n* Run interactive menu: `docker run --rm -it -v $(pwd):/git arzzen/git-quick-stats`\n* Docker pull command: `docker pull arzzen/git-quick-stats` [docker repository](https://hub.docker.com/r/arzzen/git-quick-stats)\n\n## System requirements\n\n* An OS with a Bash shell\n* Tools we use:\n\n```bash\nawk\nbasename\ncat\ncolumn\necho\ngit\ngrep\nhead\nprintf\nseq\nsort\ntput\ntr\nuniq\n```\n\n### Dependencies\n\n* [`bsdmainutils`](https://packages.debian.org/sid/bsdmainutils) `apt install bsdmainutils`\n\n## FAQ\n\n*Q:* I get some errors after run git-quick-stats in cygwin like `/usr/local/bin/git-quick-stats: line 2: $'\\r': command not found`\n\n*A:* You can run the dos2unix app in cygwin as follows: `/bin/dos2unix.exe /usr/local/bin/git-quick-stats`. This will convert the script from the CR-LF convention that Microsoft uses to the LF convention that UNIX, OS X, and Linux use. You should then should be able to run it as normal.\n\n*Q:* How they could be used in a project with many git projects and statistics would show a summary of all git projects?\n\n*A:* If you want to include submodule logs, you can try using the following: `export _GIT_LOG_OPTIONS=\"-p --submodule=log\"`\n(more info about [git log --submodule](https://git-scm.com/docs/git-log#Documentation/git-log.txt---submoduleltformatgt))\n\n## Contribution\n\nWant to contribute? Great! First, read this page.\n\n### Code reviews\n\nAll submissions, including submissions by project members, require review.</br>\nWe use GitHub pull requests for this purpose.\n\n### Some tips for good pull requests\n\n* Use our code </br>\n  When in doubt, try to stay true to the existing code of the project.\n* Write a descriptive commit message. What problem are you solving and what\n  are the consequences? Where and what did you test? Some good tips:\n  [here](http://robots.thoughtbot.com/5-useful-tips-for-a-better-commit-message)\n  and [here](https://www.kernel.org/doc/Documentation/SubmittingPatches).\n* If your PR consists of multiple commits which are successive improvements /\n  fixes to your first commit, consider squashing them into a single commit\n  (`git rebase -i`) such that your PR is a single commit on top of the current\n  HEAD. This make reviewing the code so much easier, and our history more\n  readable.\n\n### Formatting\n\nThis documentation is written using standard [markdown syntax](https://help.github.com/articles/markdown-basics/). Please submit your changes using the same syntax.\n\n## Tests\n\n[![codecov](https://codecov.io/gh/arzzen/git-quick-stats/branch/master/graph/badge.svg)](https://codecov.io/gh/arzzen/git-quick-stats)\n\n```bash\nmake test\n```\n\n## Licensing\n\nMIT see [LICENSE][] for the full license text.\n\n   [read this page]: http://github.com/arzzen/git-quick-stats/blob/master/.github/CONTRIBUTING.md\n   [landing page]: http://arzzen.github.io/git-quick-stats\n   [LICENSE]: https://github.com/arzzen/git-quick-stats/blob/master/LICENSE\n\n## Contributors\n\nThis project exists thanks to all the people who contribute.\n\n[![contributors](https://opencollective.com/git-quick-stats/contributors.svg?width=890&button=false)](https://github.com/arzzen/git-quick-stats/graphs/contributors)\n\n### Backers\n\nThank you to all our backers! 🙏 [[Become a backer](https://opencollective.com/git-quick-stats#backer)]\n\n[![backers](https://opencollective.com/git-quick-stats/backers.svg?width=890)](https://opencollective.com/git-quick-stats#backers)\n\n### Sponsors\n\nSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [[Become a sponsor](https://opencollective.com/git-quick-stats#sponsor)]\n\n[![sponsor0](https://opencollective.com/git-quick-stats/sponsor/0/avatar.svg?v=1)](https://opencollective.com/git-quick-stats/sponsor/0/website)\n[![sponsor1](https://opencollective.com/git-quick-stats/sponsor/1/avatar.svg)](https://opencollective.com/git-quick-stats/sponsor/1/website)\n[![sponsor2](https://opencollective.com/git-quick-stats/sponsor/2/avatar.svg)](https://opencollective.com/git-quick-stats/sponsor/2/website)\n[![sponsor3](https://opencollective.com/git-quick-stats/sponsor/3/avatar.svg)](https://opencollective.com/git-quick-stats/sponsor/3/website)\n[![sponsor4](https://opencollective.com/git-quick-stats/sponsor/4/avatar.svg)](https://opencollective.com/git-quick-stats/sponsor/4/website)\n[![sponsor5](https://opencollective.com/git-quick-stats/sponsor/5/avatar.svg)](https://opencollective.com/git-quick-stats/sponsor/5/website)\n[![sponsor6](https://opencollective.com/git-quick-stats/sponsor/6/avatar.svg)](https://opencollective.com/git-quick-stats/sponsor/6/website)\n[![sponsor7](https://opencollective.com/git-quick-stats/sponsor/7/avatar.svg)](https://opencollective.com/git-quick-stats/sponsor/7/website)\n[![sponsor8](https://opencollective.com/git-quick-stats/sponsor/8/avatar.svg)](https://opencollective.com/git-quick-stats/sponsor/8/website)\n[![sponsor9](https://opencollective.com/git-quick-stats/sponsor/9/avatar.svg)](https://opencollective.com/git-quick-stats/sponsor/9/website)\n\n[![61999966](https://user-images.githubusercontent.com/6382002/130024560-65bb49a6-c7e9-48f9-8427-a29d8ff2a3db.png)](https://quaestor.com/?utm_source=github&utm_category=sponsor)"
}
