{
  "name": "zsh-navigation-tools",
  "full_name": "zsh-navigation-tools",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Zsh curses-based tools, e.g. multi-word history searcher",
  "license": "GPL-3.0-only or MIT",
  "homepage": "https://github.com/psprint/zsh-navigation-tools",
  "versions": {
    "stable": "2.2.7",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/psprint/zsh-navigation-tools/archive/v2.2.7.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "ee832b81ce678a247b998675111c66aa1873d72aa33c2593a65626296ca685fc"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zsh-navigation-tools/blobs/sha256:0c811e2509381123fd425b88a7970664174c9fb9f5d912913bdccf72ecedadcf",
          "sha256": "0c811e2509381123fd425b88a7970664174c9fb9f5d912913bdccf72ecedadcf"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zsh-navigation-tools/blobs/sha256:8b5a0cee362c74dd8466a9551c20bdcdcef893f0c7a461ba7ac6b69f7e2b1b9f",
          "sha256": "8b5a0cee362c74dd8466a9551c20bdcdcef893f0c7a461ba7ac6b69f7e2b1b9f"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zsh-navigation-tools/blobs/sha256:a968a06b57fd74fb842f504c30d61e8c22aa57da9f84d8aca3159f1b5c2eb284",
          "sha256": "a968a06b57fd74fb842f504c30d61e8c22aa57da9f84d8aca3159f1b5c2eb284"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zsh-navigation-tools/blobs/sha256:ea03b58e36003ff31b164c9c66d9befe61b927675e283679216149eeb299c1e2",
          "sha256": "ea03b58e36003ff31b164c9c66d9befe61b927675e283679216149eeb299c1e2"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zsh-navigation-tools/blobs/sha256:cd64e2dd30707bbfe0d8d7f0c250627a185bd6fb778fa6a0dd71252c0f482c73",
          "sha256": "cd64e2dd30707bbfe0d8d7f0c250627a185bd6fb778fa6a0dd71252c0f482c73"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zsh-navigation-tools/blobs/sha256:8a2b501900c37cc6844a700526ea564baf4585d368de2ad17ccd6679e222f317",
          "sha256": "8a2b501900c37cc6844a700526ea564baf4585d368de2ad17ccd6679e222f317"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zsh-navigation-tools/blobs/sha256:2ca507bf832d34b63b9bf4f60b76158ad0e8980622f78de8fd8e3f771d4df5d2",
          "sha256": "2ca507bf832d34b63b9bf4f60b76158ad0e8980622f78de8fd8e3f771d4df5d2"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zsh-navigation-tools/blobs/sha256:292a200717412253b03f654162da7ce1c0994455c07fdf65fa348189a18217b5",
          "sha256": "292a200717412253b03f654162da7ce1c0994455c07fdf65fa348189a18217b5"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zsh-navigation-tools/blobs/sha256:5122287e2fb30bde73acb7174e1310ea41ef049d201203bc559edf02555a2e33",
          "sha256": "5122287e2fb30bde73acb7174e1310ea41ef049d201203bc559edf02555a2e33"
        },
        "sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zsh-navigation-tools/blobs/sha256:fca68610ba67c19d8516719d03ed5074a5611ba01941dcb135c87d6d561f3cb1",
          "sha256": "fca68610ba67c19d8516719d03ed5074a5611ba01941dcb135c87d6d561f3cb1"
        },
        "el_capitan": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zsh-navigation-tools/blobs/sha256:fca68610ba67c19d8516719d03ed5074a5611ba01941dcb135c87d6d561f3cb1",
          "sha256": "fca68610ba67c19d8516719d03ed5074a5611ba01941dcb135c87d6d561f3cb1"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zsh-navigation-tools/blobs/sha256:8b5a0cee362c74dd8466a9551c20bdcdcef893f0c7a461ba7ac6b69f7e2b1b9f",
          "sha256": "8b5a0cee362c74dd8466a9551c20bdcdcef893f0c7a461ba7ac6b69f7e2b1b9f"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "zsh"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": "To run zsh-navigation-tools, add the following at the end of your .zshrc:\n  source $HOMEBREW_PREFIX/share/zsh-navigation-tools/zsh-navigation-tools.plugin.zsh\n\nYou will also need to restart your terminal for this change to take effect.\n",
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/zsh-navigation-tools.rb",
  "ruby_source_checksum": {
    "sha256": "066cd11f878d5d393184a1ca948f475401339b79bff217daddda9ccb871eb39b"
  },
  "date_added": "2016-05-02T19:51:39+02:00",
  "readme": "<h2 align=\"center\">\n  <a href=\"https://github.com/z-shell/zi\">\n    <img src=\"https://github.com/z-shell/zi/raw/main/docs/images/logo.svg\" alt=\"Logo\" width=\"80\" height=\"80\" />\n  </a>\n❮ ZI ❯ Plugin - Zsh Navigation Tools\n</h2>\n<div align=\"center\">\n\n[![License (GPL version 3)](https://img.shields.io/badge/license-GNU%20GPL%20version%203-blue.svg?style=flat-square)](./LICENSE)\n[![MIT License](https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square)](../LICENSE)\n![ZSH 5.0.0](https://img.shields.io/badge/zsh-v5.0.0-orange.svg?style=flat-square)\n[![Library test CI](https://github.com/z-shell/zsh-navigation-tools/actions/workflows/lib-ci.yml/badge.svg)](https://github.com/z-shell/zsh-navigation-tools/actions/workflows/lib-ci.yml)\n  \n</div>\n\n- [Introduction](#introduction)\n- [Installation](#installation)\n  - [Installation With ZI](#installation-with-zi)\n  - [Installation With Zgen](#installation-with-zgen)\n  - [Installation With Antigen](#installation-with-antigen)\n  - [Single File Manual Installation](#single-file-manual-installation)\n  - [Manual Installation](#manual-installation)\n  - [Truly Manual Installation](#truly-manual-installation)\n- [History Widget](#history-widget)\n- [Configuration](#configuration)\n- [Programming](#programming)\n- [Performance](#performance)\n  - [A tip](#a-tip)\n  - [More](#more)\n- [Fixing tmux, screen and linux vt](#fixing-tmux-screen-and-linux-vt)\n- [See also](#see-also)\n\n# Introduction\n\nThe tools are:\n\n- `n-aliases` - browses aliases, relegates editing to `vared`\n- `n-cd` - browses dirstack and bookmarked directories, allows to enter selected directory\n- `n-functions` - browses functions, relegates editing to `zed` or `vared`\n- `n-history` - browses history, allows to edit and run commands from it\n- `n-kill` - browses processes list, allows to send signal to selected process\n- `n-env` - browses environment, relegates editing to `vared`\n- `n-options` - browses options, allows to toggle their state\n- `n-panelize` - loads output of given command into the list for browsing\n\nAll tools support horizontal scroll with `<`,`>`, `{`,`}`, `h`,`l` or left and right cursors. Other keys are:\n\n- `H`, `?` (from n-history) - run n-help\n- `Ctrl-R` - start n-history, the incremental, multi-keyword history searcher (Zsh binding)\n- `Ctrl-A` - rotate entered words (1+2+3 -> 3+1+2)\n- `Ctrl-F` - fix mode (approximate matching)\n- `Ctrl-L` - redraw of whole display\n- `Ctrl-T` - browse themes (next theme)\n- `Ctrl-G` - browse themes (previous theme)\n- `Ctrl-U` - half page up\n- `Ctrl-D` - half page down\n- `Ctrl-P` - previous element (also done with vim's k)\n- `Ctrl-N` - next element (also done with vim's j)\n- `[`, `]` - jump directory bookmarks in n-cd and typical signals in n-kill\n- `g`, `G` - beginning and end of the list\n- `/` - show incremental search\n- `F3` - show/hide incremental search\n- `Esc` - exit incremental search, clearing filter\n- `Ctrl-W` (in incremental search) - delete whole word\n- `Ctrl-K` (in incremental search) - delete whole line\n- `Ctrl-O`, `o` - enter uniq mode (no duplicate lines)\n- `Ctrl-E`, `e` - edit private history (when in private history view)\n- `F1` - (in n-history) - switch view\n- `F2`, `Ctrl-X`, `Ctrl-/` - search predefined keywords (defined in config files)\n\nSet of tools like `n-history` – multi-word history searcher, `n-cd` – directory\nbookmark manager, `n-kill` – `htop` like kill utility, and more. Based on\n`n-list`, a tool generating selectable curses-based list of elements that has\naccess to current `Zsh` session, i.e. has broad capabilities to work together\nwith it. Feature highlights include incremental multi-word searching, approximate\nmatching, ANSI coloring, themes, unique mode, horizontal scroll, grepping, advanced\nhistory management and various integrations with `Zsh`.\n\n# Installation\n\n```\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/z-shell/zsh-navigation-tools/main/doc/install.sh)\"\n```\n\nTo update run the command again.\n\n`ZNT` will be installed at `~/.config/znt/zsh-navigation-tools`, config files will be copied to `~/.config/znt`. `.zshrc`\nwill be updated with only `8` lines of code, which will be added at the bottom.\n\nAfter installing and reloading shell give `ZNT` a quick try with `Ctrl-R` – this keyboard shortcut will open `n-history`.\n\n## Installation With [ZI](https://github.com/z-shell/zi)\n\nAdd `zi load z-shell/zsh-navigation-tools` to `.zshrc`. The config files will be in `~/.config/znt`.\n\n## Installation With Zgen\n\nAdd `zgen load z-shell/zsh-navigation-tools` to `.zshrc` and issue a `zgen reset` (this assumes that there is a proper `zgen save` construct in `.zshrc`).\nThe config files will be available in `~/.config/znt`.\n\n## Installation With Antigen\n\nAdd `antigen bundle z-shell/zsh-navigation-tools` to `.zshrc`. There also\nshould be `antigen apply`. The config files will be in `~/.config/znt`.\n\n## Single File Manual Installation\n\nRunning script `doc/generate_single_file` will create single-file version of `ZNT`.\nIt can be sourced from `.zshrc`. Don't forget about configuration files as described\nabove.\n\n## Manual Installation\n\nAfter extracting `ZNT` to `{some-directory}` add following two lines\nto `~/.zshrc`:\n\n```zsh\nfpath+=( {some-directory} )\nsource \"{some-directory}/zsh-navigation-tools.plugin.zsh\"\n```\n\nAs you can see, no plugin manager is needed to use the `*.plugin.zsh`\nfile. The above two lines of code are all that almost **all** plugin\nmanagers do. In fact, what's actually needed is only:\n\n```zsh\nsource \"{some-directory}/zsh-navigation-tools.plugin.zsh\"\n```\n\nbecause `ZNT` detects if it is used by **any** plugin manager and can\nhandle `$fpath` update by itself.\n\n## Truly Manual Installation\n\nCopy (or link) all `n-*` and `znt-*` files to **/usr/share/zsh/site-functions/**\n(or **/usr/local/share/zsh/site-functions/**, check with `echo $fpath[1]`) and then add:\n\n    autoload n-list n-cd n-env n-kill n-panelize n-options n-aliases n-functions n-history n-help\n\nto `~/.zshrc`.\n\nCreate aliases to avoid typing of the minus sign \"-\":\n\n```zsh\nalias naliases=n-aliases ncd=n-cd nenv=n-env nfunctions=n-functions nhistory=n-history\nalias nkill=n-kill noptions=n-options npanelize=n-panelize nhelp=n-help\n```\n\nDon't forget to copy [configuration files](https://github.com/z-shell/zsh-navigation-tools/tree/main/.config/znt). They should go to `~/.config/znt`. Moreover, `n-cd` works together with option `AUTO_PUSHD` and you should have:\n\n```zsh\nsetopt AUTO_PUSHD\n```\n\nin `.zshrc` (also recommend `PUSHD_IGNORE_DUPS`). Without the option `n-cd`\nwill just work as incremental searcher of directory bookmarks.\n\n# History Widget\n\nTo have `n-history` as the incremental searcher bound to `Ctrl-R` copy `znt-*`\nfiles into the `*/site-functions` dir (unless you do single file install) and\nadd:\n\n```zsh\nautoload znt-history-widget\nzle -N znt-history-widget\nbindkey \"^R\" znt-history-widget\n```\n\nto `.zshrc`. This is done automatically when using the installer, zgen, antigen\nor single file install. Two other widgets exist, `znt-cd-widget` and\n`znt-kill-widget`, they too can be assigned to key combinations (`autoload` is done\nin `.zshrc` so no need of it):\n\n```zsh\nzle -N znt-cd-widget\nbindkey \"^B\" znt-cd-widget\nzle -N znt-kill-widget\nbindkey \"^Y\" znt-kill-widget\n```\n\n# Configuration\n\n`ZNT` has configuration files located in `~/.config/znt`. The files are:\n\n```\nn-aliases.conf\nn-cd.conf\nn-env.conf\nn-functions.conf\nn-history.conf\nn-kill.conf\nn-list.conf\nn-options.conf\nn-panelize.conf\n```\n\n`n-list.conf` contains main configuration variables:\n\n```zsh\n# Should the list (text, borders) be drawn in bold\nlocal bold=0\n\n# Main color pair (foreground/background)\nlocal colorpair=\"white/black\"\n\n# Should draw the border?\nlocal border=1\n\n# Combinations of colors to try out with Ctrl-T and Ctrl-G\n# The last number is the bold option, 0 or 1\nlocal -a themes\nthemes=( \"white/black/1\" \"green/black/0\" \"green/black/1\" \"white/blue/0\" \"white/blue/1\"\n         \"magenta/black/0\" \"magenta/black/1\" )\n```\n\nRead remaining configuration files to see what's in them. Nevertheless, configuration\ncan be also set from `zshrc`. There are `5` standard `zshrc` configuration variables:\n\n```\nznt_history_active_text - underline or reverse - how should be active element highlighted\nznt_history_nlist_coloring_pattern - pattern that can be used to colorize elements\nznt_history_nlist_coloring_color - color with which to colorize\nznt_history_nlist_coloring_match_multiple - should multiple matches be colorized (0 or 1)\nznt_history_keywords (array) - search keywords activated with `Ctrl-X`, `F2` or `Ctrl-/`, e.g. ( \"git\" \"vim\" )\n```\n\nAbove variables will work for `n-history` tool. For other tools, change `_history_` to\ne.g. `_cd_`, for the `n-cd` tool. The same works for all `8` tools.\n\nCommon configuration of the tools uses variables with `_list_` in them:\n\n```\nznt_list_bold - should draw text in bold (0 or 1)\nznt_list_colorpair - main pair of colors to be used, e.g \"green/black\"\nznt_list_border - should draw borders around windows (0 or 1)\nznt_list_themes (array) - list of themes to try out with Ctrl-T, e.g. ( \"white/black/1\" \"green/black/0\" )\nznt_list_instant_select - should pressing enter in search mode leave tool (0 or 1)\n```\n\nIf you used `ZNT` before `v2.1.12`, remove old configuration files `~/.config/znt/*.conf` so that `ZNT`\ncan update them to the latest versions that support integration with `Zshrc`. If you used installer\nthen run it again (after the remove of configuration files).\n\n# Programming\n\nThe function `n-list` is used as follows:\n\n```zsh\nn-list {element1} [element2] ... [elementN]\n```\n\nThis is all that is needed to be done to have the features like ANSI coloring,\nincremental multi-word search, unique mode, horizontal scroll, non-selectable\nelements (grepping is done outside `n-list`, see the tools for how it can be\ndone). To set up non-selectable entries add their indices into array\n`NLIST_NONSELECTABLE_ELEMENTS`:\n\n```zsh\ntypeset -a NLIST_NONSELECTABLE_ELEMENTS\nNLIST_NONSELECTABLE_ELEMENTS=( 1 )\n```\n\nResult is stored as `$reply[REPLY]` (`$` isn't needed before `REPLY` because\nof arithmetic context inside `[]`). The returned array might be different from\ninput arguments as `n-list` can process them via incremental search or uniq\nmode. `$REPLY` is the index in that possibly processed array. If `$REPLY`\nequals `-1` it means that no selection have been made (user quitted via `q`\nkey).\n\nTo set up entries that can be jumped to with `[`,`]` keys add their indices to\n`NLIST_HOP_INDEXES` array:\n\n```zsh\ntypeset -a NLIST_HOP_INDEXES\nNLIST_HOP_INDEXES=( 1 10 )\n```\n\n`n-list` can automatically colorize entries according to a `Zsh` pattern.\nFollowing example will colorize all numbers with blue:\n\n```zsh\nlocal NLIST_COLORING_PATTERN=\"[0-9]##\"\nlocal NLIST_COLORING_COLOR=$'\\x1b[00;34m'\nlocal NLIST_COLORING_END_COLOR=$'\\x1b[0m'\nlocal NLIST_COLORING_MATCH_MULTIPLE=1\n\nn-list \"This is a number 123\" \"This line too has a number: 456\"\n```\n\nBlue is the default color, it doesn't have to be set. See `zshexpn` man page\nfor more information on `Zsh` patterns. Briefly, comparing to regular\nexpressions, `(#s)` is `^`, `(#e)` is `$`, `#` is `*`, `##` is `+`. Alternative\nwill work when in parenthesis, i.e. `(a|b)`. BTW by using this method you can\ncolorize output of the tools, via their config files (check out e.g. n-cd.conf,\nit is using this).\n\n# Performance\n\n`ZNT` are fastest with `Zsh` before `5.0.6` and starting from `5.2`\n\n## A tip\n\nZsh plugins may look scary, as they seem to have some \"architecture\". In fact, what a plugin really is, is that:\n\n1. It has its directory added to `fpath`\n2. It has any first `*.plugin.zsh` file sourced\n\nThat's it. When one contributes to Oh-My-Zsh or creates a plugin for any plugin manager, he only needs to account for this.\nThe same with doing any non-typical Zsh Navigation Tools installation.\n\n## More\n\n- be aware of [this](https://github.com/z-shell/zsh-navigation-tools/blob/f49f910d239ae5bc6e1a5bb34930307b4f4e3ffe/zsh-navigation-tools.plugin.zsh#L35-L49)\n\n# Fixing tmux, screen and linux vt\n\nIf `TERM=screen-256color` (often a case for `tmux` and `screen` sessions) then\n`ncv` terminfo capability will have `2`nd bit set. This in general means that\nunderline won't work. To fix this by creating your own `ncv=0`-equipped\nterminfo file, run:\n\n```zsh\n{ infocmp -x screen-256color; printf '\\t%s\\n' 'ncv@,'; } > /tmp/t && tic -x /tmp/t\n```\n\nA file will be created in directory `~/.terminfo` and will be automatically\nused, `tmux` and `screen` will work. Similar is for Linux virtual terminal:\n\n```zsh\n{ infocmp -x linux; printf '\\t%s\\n' 'ncv@,'; } > /tmp/t && tic -x /tmp/t\n```\n\nIt will not display underline properly, but will instead highlight by a color,\nwhich is quite nice. The same will not work for FreeBSD's vt, `ZNT` will detect\nif that vt is used and will revert to highlighting elements via `reverse` mode.\n\n# See also\n\nAlso check out [Zsh Command Architect](https://github.com/z-shell/zsh-cmd-architect)\nand [Zconvey](https://github.com/z-shell/zconvey)"
}
