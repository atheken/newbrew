{
  "name": "licensefinder",
  "full_name": "licensefinder",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Find licenses for your project's dependencies",
  "license": "MIT",
  "homepage": "https://github.com/pivotal/LicenseFinder",
  "versions": {
    "stable": "7.1.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/pivotal/LicenseFinder.git",
      "tag": "v7.1.0",
      "revision": "81092404aeaf1cb39dbf2551f50f007ed049c26c",
      "checksum": null
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/licensefinder/blobs/sha256:164e134801f7eccba5c5cc70d98657dccdc5cf935a9fd92934e74d6c0ffce0e0",
          "sha256": "164e134801f7eccba5c5cc70d98657dccdc5cf935a9fd92934e74d6c0ffce0e0"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/licensefinder/blobs/sha256:164e134801f7eccba5c5cc70d98657dccdc5cf935a9fd92934e74d6c0ffce0e0",
          "sha256": "164e134801f7eccba5c5cc70d98657dccdc5cf935a9fd92934e74d6c0ffce0e0"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/licensefinder/blobs/sha256:164e134801f7eccba5c5cc70d98657dccdc5cf935a9fd92934e74d6c0ffce0e0",
          "sha256": "164e134801f7eccba5c5cc70d98657dccdc5cf935a9fd92934e74d6c0ffce0e0"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/licensefinder/blobs/sha256:87ac993d1fa172a2e30ba894f7c7329f4c69a071c4cbb2b3f7b8fc4fdbddfa69",
          "sha256": "87ac993d1fa172a2e30ba894f7c7329f4c69a071c4cbb2b3f7b8fc4fdbddfa69"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/licensefinder/blobs/sha256:87ac993d1fa172a2e30ba894f7c7329f4c69a071c4cbb2b3f7b8fc4fdbddfa69",
          "sha256": "87ac993d1fa172a2e30ba894f7c7329f4c69a071c4cbb2b3f7b8fc4fdbddfa69"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/licensefinder/blobs/sha256:87ac993d1fa172a2e30ba894f7c7329f4c69a071c4cbb2b3f7b8fc4fdbddfa69",
          "sha256": "87ac993d1fa172a2e30ba894f7c7329f4c69a071c4cbb2b3f7b8fc4fdbddfa69"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/licensefinder/blobs/sha256:1bdbc4f522c64ed0bf539afbb6e48f43c96b1284d2a00416dd535706e140d373",
          "sha256": "1bdbc4f522c64ed0bf539afbb6e48f43c96b1284d2a00416dd535706e140d373"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "ruby"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/licensefinder.rb",
  "ruby_source_checksum": {
    "sha256": "93ae726e7627ade91636da9436ae5af5b5586053860614456fec48dc5a9b1462"
  },
  "date_added": "2021-07-26T07:51:32+00:00",
  "readme": "# License Finder\n\n[![Code Climate](https://codeclimate.com/github/pivotal/LicenseFinder.png)](https://codeclimate.com/github/pivotal/LicenseFinder)\n\nBuild status\n* Ruby 2.6.10 [![Ruby 2.6.10 build status](https://norsk.cf-app.com/api/v1/teams/main/pipelines/LicenseFinder/jobs/ruby-2.6.10/badge)](https://norsk.cf-app.com/teams/main/pipelines/LicenseFinder)\n* Ruby 2.7.8 [![Ruby 2.7.8 build status](https://norsk.cf-app.com/api/v1/teams/main/pipelines/LicenseFinder/jobs/ruby-2.7.8/badge)](https://norsk.cf-app.com/teams/main/pipelines/LicenseFinder)\n* Ruby 3.1.4 [![Ruby 3.1.4 build status](https://norsk.cf-app.com/api/v1/teams/main/pipelines/LicenseFinder/jobs/ruby-3.1.4/badge)](https://norsk.cf-app.com/teams/main/pipelines/LicenseFinder)\n* Ruby 3.2.2 [![Ruby 3.2.2 build status](https://norsk.cf-app.com/api/v1/teams/main/pipelines/LicenseFinder/jobs/ruby-3.2.2/badge)](https://norsk.cf-app.com/teams/main/pipelines/LicenseFinder)\n\n\nLicenseFinder works with your package managers to find dependencies,\ndetect the licenses of the packages in them, compare those licenses\nagainst a user-defined list of permitted licenses,\nand give you an actionable exception report.\n\n* code: https://github.com/pivotal/LicenseFinder\n* ci: https://norsk.cf-app.com/teams/main/pipelines/LicenseFinder\n* docker: [licensefinder/license_finder](https://hub.docker.com/r/licensefinder/license_finder/)\n  * the docker image contains all the package managers needed to run `license_finder`\n* support:\n  * The primary form of communication for support is through github issues. The google groups are not actively\n    monitored\n  * license-finder@googlegroups.com\n  * https://groups.google.com/forum/#!forum/license-finder\n\n### Supported project types\n\n| Project Type | Package Manager | Tested on Version |\n| ------------ |-----------------|------------------:|\n| Ruby Gems    | bundler         | 2.3.7 |\n| Python 2.7 Eggs  | pip2            | 19.0.2 |\n| Python 3.5 Eggs  | pip3            | 20.0.2 |\n| Node.js      | npm             | 6.4.1 |\n| Bower        | bower           | 1.8.4 |\n| Nuget (without license discovery) | nuget           | 4.7.1.5393 |\n| Godep        | Godep           | 80 |\n| Go workspace | Go lang         | 1.11.5 |\n| Go modules   | Go lang         | 1.14.3 |\n| Java         | maven           | 3.6.0 |\n| Java         | gradle          | 5.6.4 |\n\n### Experimental project types\n\n* Erlang (via `rebar` and `Erlang.mk`)\n* Objective-C, Swift (via Carthage, CocoaPods \\[0.39 and below. See [CocoaPods Specs Repo Sharding](http://blog.cocoapods.org/Sharding/)\\]) and Swift Package Manager(SPM)\n* Elixir (via `mix`)\n* Golang (via `gvt`, `glide`,`dep`, `trash` and `govendor`)\n* JavaScript (via `yarn`)\n* C++/C (via `conan`)\n* Scala (via `sbt`)\n* Rust (via `cargo`)\n* PHP (via `composer`)\n* Python (via `Conda`, `pipenv`)\n* Flutter (via `flutter pub`)\n\n## Installation\n\nLicense Finder may be run as a [pre-commit](https://pre-commit.com) hook by\nadding the following to your `.pre-commit-config.yaml`:\n\n```yaml\nrepos:\n  - repo: https://github.com/pivotal/LicenseFinder\n    rev: v7.1.0 # You probably want the latest tag.\n    hooks:\n      - id: license-finder\n```\n\nRunning License Finder directly requires Ruby 2.6.0 or greater. If you have an\nolder version of Ruby installed, you can update via Homebrew:\n\n```sh\n$ ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\nthen:\n\n```sh\n$ brew install ruby\n```\n\nThe easiest way to use `license_finder` directly is to install it as a command\nline tool, like brew, awk, gem or bundler:\n\n```sh\n$ gem install license_finder\n```\n\nThough it's less preferable, if you are using bundler in a Ruby\nproject, you can add `license_finder` to your Gemfile:\n\n```ruby\ngem 'license_finder', :group => :development\n```\n\nThis approach helps you remember to install `license_finder`, but can\npull in unwanted dependencies, including `bundler`. To mitigate this\nproblem, see [Excluding Dependencies](#excluding-dependencies).\n\n\n## Usage\n\nMake sure your dependencies are installed (with your package manager's install command: `bundle install`, `npm install`, etc.)\n\nThe first time you run `license_finder` it will list all your project's packages.\n\n```sh\n$ license_finder\n```\n\nOr, if you installed with bundler:\n\n```sh\n$ bundle exec license_finder\n```\n\nThe output will report that none of your packages have been\napproved.  Over time you will tell `license_finder` which packages\nare approved, so when you run this command in the future, it will\nreport current action items; i.e., packages that are new or have\nnever been approved.\n\nIf you don't wish to see progressive output \"dots\", use the `--quiet`\noption.\n\nIf you'd like to see debugging output, use the `--debug`\noption. `license_finder` will then output info about packages, their\ndependencies, and where and how each license was discovered. This can\nbe useful when you need to track down an unexpected package or\nlicense.\n\nIf you do not want to manually run an individual package manager's prepare\ncommand (ex: `bundle install`, `npm install`, etc) to ensure your project\nis fully prepared to be scanned, use the `--prepare` or `-p` option which will run\neach active package manager's prepare command for you. If you would like to continue\nrunning `license_finder` even if there is an issue with a prepare step, use the\n`--prepare-no-fail` option which prepares but carries on despite any potential failures.\n\nRun `license_finder help` to see other available commands, and\n`license_finder help [COMMAND]` for detailed help on a specific\ncommand.\n\n### Docker\n\nIf you have docker installed, try using the included `dlf` script (potentially\nsymlinked to be in your path via `ln -s LicenseFinder/dlf /usr/local/bin` or\nwhatever method you prefer). This will run any commands passed to it inside a\npre-provisioned Docker container to maintain consistent versions of all the\npackage managers. For example,\n\n```\n$ dlf npm --version\n5.3.0\n\n$ dlf license_finder --help\n\nDependencies that need approval:\n...\nlicense_finder, 3.0.3, MIT\n\n$ dlf \"bundle install && license_finder\"\n```\n\nYou can better understand the way this script works by looking at its source, but for\nreference it will mount your current directory at the path `/scan` and run any commands\npassed to it from that directory. If your command has `&&`, ensure you quote the command. \nIf it does not, ensure the command is not quoted.\n\nNote that the docker image will run the gem which is installed within it.\nSo the docker image tagged `7.0.0` will run *License Finder Version 7.0.0*\n\nSee the [contributing guide](https://github.com/pivotal/LicenseFinder/blob/master/CONTRIBUTING.md) for information on development. \n\n### Activation\n\n`license_finder` will find and include packages for all supported\nlanguages, as long as that language has a package definition in the project directory:\n\n* `Gemfile` (for `bundler`)\n* `requirements.txt` (for `pip`)\n* `Pipfile.lock` (for `pipenv`)\n* `package.json` (for `npm`)\n* `pom.xml` (for `maven`)\n* `build.gradle` or `build.gradle.kts` (for `gradle`)\n* `settings.gradle` that specifies `rootProject.buildFileName` (for `gradle`)\n* `bower.json` (for `bower`)\n* `Podfile` (for `pod`) (set `ACKNOWLEDGEMENTS_PATH` variable if you want to target a particular `Pods-acknowledgements-<TARGET>.plist`. Can be useful in multi-target pods projects.)\n* `Cartfile` (for `carthage`)\n* `workspace-state.json` under build directory (provided as enviroment variable `SPM_DERIVED_DATA` for Xcode, or default `.build` for non-Xcode projects), (for `spm`)\n* `rebar.config` (for `rebar`)\n* `Erlang.mk` or `erlang.mk` file (for `Erlang.mk`)\n* `mix.exs` (for `mix`)\n* `packages/` directory (for `nuget`)\n* `*.csproj` (for `dotnet`)\n* `vendor/manifest` or `*/vendor/manifest` file (for `gvt`)\n* `glide.lock` file (for `glide`)\n* `vendor/vendor.json` file (for `govendor`)\n* `Gopkg.lock` file (for `dep`)\n* `Godeps/Godeps.json` (for `godep`)\n* `*.envrc` file (for `go`) \n* `go.mod` file (for `go mod`)\n* `vendor.conf` file (for `trash`)\n* `yarn.lock` file (for `yarn`)\n* `conanfile.txt` file (for `conan`)\n* `build.sbt` file (for `sbt`)\n* `Cargo.lock` file (for `cargo`)\n* `composer.lock` file (for `composer`)\n* `environment.yml` file (for `conda`)\n* `pubspec.yaml & .pub cache locaton through ENV variable` (for `flutter`)\n\n### Continuous Integration\n\n`license_finder` will return a non-zero exit status if there are unapproved\ndependencies. This can be useful for inclusion in a CI environment to alert you\nif someone adds an unapproved dependency to the project.\n\n\n## Approving Dependencies\n\n`license_finder` will inform you whenever you have an unapproved dependency.\nIf your business decides this is an acceptable risk, the easiest way to approve\nthe dependency is by running `license_finder approvals add`.\n\nFor example, let's assume you've added the `awesome_gpl_gem`\nto your Gemfile, which `license_finder` reports is unapproved:\n\n```sh\n$ license_finder\nDependencies that need approval:\nawesome_gpl_gem, 1.0.0, GPL\n```\n\nYour business tells you that in this case, it's acceptable to use this\ngem. You now run:\n\n```sh\n$ license_finder approvals add awesome_gpl_gem\n```\n\nIf you rerun `license_finder`, you should no longer see\n`awesome_gpl_gem` in the output.\n\nTo approve specific version\n\n```sh\n$ license_finder approvals add awesome_gpl_gem --version=1.0.0\n```\n\nTo record who approved the dependency and why:\n\n```sh\n$ license_finder approvals add awesome_gpl_gem --who CTO --why \"Go ahead\"\n```\n\n### Permitting Licenses\n\nApproving packages one-by-one can be tedious.  Usually your business has\nblanket policies about which packages are approved.  To tell `license_finder`\nthat any package with the MIT license should be approved, run:\n\n``` sh\n$ license_finder permitted_licenses add MIT\n```\n\nAny current or future packages with the MIT license will be excluded from the\noutput of `license_finder`.\n\nYou can also record `--who` and `--why` when changing permitted licenses,\nor making any other decision about your project.\n\n\n## Output and Artifacts\n\n### Decisions file\n\nAny decisions you make about approvals will be recorded in a YAML file named\n`doc/dependency_decisions.yml`.\n\nThis file must be committed to version control.  Rarely, you will have to\nmanually resolve conflicts in it.  In this situation, keep in mind that each\ndecision has an associated timestamp, and the decisions are processed\ntop-to-bottom, with later decisions overwriting or appending to earlier\ndecisions.\n\n### Output from `action_items`\n\nYou could expect `license_finder`, which is an alias for `license_finder\naction_items` to output something like the following on a Rails project where\nMIT had been permitted:\n\n```\nDependencies that need approval:\n\nhighline, 1.6.14, ruby\njson, 1.7.5, ruby\nmime-types, 1.19, ruby\nrails, 3.2.8, unknown\nrdoc, 3.12, unknown\nrubyzip, 0.9.9, ruby\nxml-simple, 1.1.1, unknown\n```\n\nYou can customize the format of the output in the same way that you customize\n[output from `report`](#output-from-report).\n\n### Output from `project_roots`\n\nThe `license_finder project_roots` command will output the current working directory as a string in an array.\n\nUsing the `--recursive` option means the array will include subdirectories that contain a known package manager. With the exception that Gradle and Maven subprojects will not be included.\n\n\n### Output from `report`\n\nThe `license_finder report` command will output human-readable reports that you\ncould send to your non-technical business partners, lawyers, etc.  You can\nchoose the format of the report (text, csv, html or markdown); see\n`license_finder --help report` for details.  The output is sent to STDOUT, so\nyou can save the reports wherever you want them.  You can commit them to\nversion control if you like.\n\nThe HTML report generated by `license_finder report --format html` summarizes\nall of your project's dependencies and includes information about which need to\nbe approved. The project name at the top of the report can be set with\n`license_finder project_name add`.\n\n### Note:\nWhen using the yarn package manager, when a node_module's package.json doesn't\nexplicitly declare a license, yarn indicates that it has inferred the license based\non some keywords in other files by appending an asterisk to the license name. If you\nsee a * at the end of the license name, this is intended.\n\nSee [CONTRIBUTING.md](https://github.com/pivotal/LicenseFinder/blob/master/CONTRIBUTING.md#adding-reports)\nfor advice about adding and customizing reports.\n\n\n## Manual Intervention\n\n### Setting Licenses\n\nWhen `license_finder` reports that a dependency's license is 'unknown',\nyou should manually research what the actual license is.  When you\nhave established the real license, you can record it with:\n\n```sh\n$ license_finder licenses add my_unknown_dependency MIT\n```\n\nThis command would assign the MIT license to all versions of the dependency\n`my_unknown_dependency`. If you prefer, you could instead assign the license\nto only a specific version of the dependency:\n\n```sh\n$ license_finder licenses add my_unknown_dependency MIT --version=1.0.0\n```\n\nPlease note that adding a license to a specific version of a dependency will \ncause any licenses previously added to all versions of that dependency to be \nforgotten. Similarly, adding a license to all versions of a dependency will \noverride any licenses previously added to specific versions of that dependency.\n\nThere are several ways in which you can remove licenses that were previously\nadded through the `licenses add` command:\n\n```sh\n# Removes all licenses from any version of the dependency\n$ license_finder licenses remove my_unknown_dependency\n\n# Removes just the MIT license from any version of the dependency\n$ license_finder licenses remove my_unknown_dependency MIT\n\n# Removes all licenses from only version 1.0.0 of the dependency\n# This has no effect if you had last added a license to all versions of the dependency\n$ license_finder licenses remove my_unknown_dependency --version=1.0.0\n\n# Removes just the MIT license from only version 1.0.0 of the dependency\n# This has no effect if you had last added a license to all versions of the dependency\n$ license_finder licenses remove my_unknown_dependency MIT --version=1.0.0\n```\n\n### Adding Hidden Dependencies\n\n`license_finder` can track dependencies that your package managers\ndon't know about (JS libraries that don't appear in your\nGemfile/requirements.txt/package.json, etc.)\n\n```sh\n$ license_finder dependencies add my_js_dep MIT 0.1.2\n```\n\nRun `license_finder dependencies help` for\nadditional documentation about managing these dependencies.\n\n`license_finder` cannot automatically detect when one of these\ndependencies has been removed from your project, so you can use:\n\n```sh\n$ license_finder dependencies remove my_js_dep\n```\n\n### Excluding Dependencies\n\nSometimes a project will have development or test dependencies which\nyou don't want to track.  You can exclude theses dependencies by running\n`license_finder ignored_groups`.  (Currently this only works for packages\nmanaged by Bundler, NPM, Yarn, Maven, Pip2, Pip3, and Nuget.)\n\nOn rare occasions a package manager will report an individual dependency\nthat you want to exclude from all reports, even though it is approved.\nYou can exclude an individual dependency by running\n`license_finder ignored_dependencies`.  Think carefully before adding\ndependencies to this list.  A likely item to exclude is `bundler`,\nsince it is a common dependency whose version changes from machine to\nmachine.  Adding it to the `ignored_dependencies` would prevent it\n(and its oscillating versions) from appearing in reports.\n\n### Restricting Licenses\n\nSome projects will have a list of licenses that cannot be used.  You can\nrestrict these licenses with `license_finder restricted_licenses add`.  Any dependency\nthat has exclusively restricted licenses will always appear in the action\nitems, even if someone attempts to manually approve or permit it.  However,\nif a dependency has even one license that is not restricted, it can still be\nmanually approved or permitted.\n\n## Decision inheritance\n\nAdd or remove decision files you want to inherit from - see `license_finder inherited_decisions help` for more information.\n\nThis allows you to have a centralized decision file for approved/restricted licenses. If you have multiple projects it's way easier to have one single place where you approved or restricted licenses defined.\n\nAdd one or more decision files to the inherited decisions\n```bash\nlicense_finder inherited_decisions add DECISION_FILE\n```\n\nRemove one or more decision files from the inherited decisions\n```bash\nlicense_finder inherited_decisions remove DECISION_FILE\n```\n\nList all the inherited decision files\n```bash\nlicense_finder inherited_decisions list\n```\n\n## Configuration\n\nBe default, `license_finder` expects the decisions file to be stored at\n`doc/dependency_decisions.yml`.  All commands can be passed `--decisions_file`\nto override this location.\n\n### Package Manager Configuration\n\nIf you have a gradle project, you can invoke gradle with a custom script by\npassing (for example) `--gradle_command gradlew` to `license_finder` or\n`license_finder report`.\n\nSimilarly you can invoke a custom rebar script with `--rebar_command rebar`.\nIf you store rebar dependencies in a custom directory (by setting `deps_dir` in\n`rebar.config`), set `--rebar_deps_dir`.\n\nYou can also invoke a custom Mix script `remix` with `--mix_command remix` and\nset `--mix_deps_dir` to fetch Mix dependencies from a custom directory.\n\n### Narrow down Package Manager\n\nBy default, license_finder will check for all supported package managers,\nbut you can narrow it down to use only those you pass to `--enabled-package-managers`.\nFor example,\n\n```\n$ license_finder --enabled-package-managers bundler npm\n```\n\n### Saving Configuration\n\nIt may be difficult to remember to pass command line options to every command.\nIn some of these cases you can store default values in a YAML formatted config\nfile. `license_finder` looks for this file in `config/license_finder.yml`.\n\nAs an example, the file might look like this:\n\n```yaml\n---\ndecisions_file: './some_path/decisions.yml'\ngradle_command: './gradlew'\nrebar_command: './rebarw'\nrebar_deps_dir: './rebar_deps'\nmix_command: './mixw'\nmix_deps_dir: './mix_deps'\nenabled_package_managers:\n  - bundler\n  - gradle\n  - rebar\n  - mix\n```\n\n### Gradle Projects\n\n`license_finder` supports both Gradle 1.x and Gradle 2.x. You need to have installed\nthe license-gradle-plugin in your project:\n[https://github.com/hierynomus/license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin)\n\nBy default, `license_finder` will report on Gradle's \"runtime\" dependencies. If\nyou want to generate a report for some other dependency configuration (e.g.\nAndroid projects will sometimes specify their meaningful dependencies in the\n\"compile\" group), you can specify it in your project's `build.gradle`:\n\n```\n// Must come *after* applying the appropriate plugin from [https://github.com/hierynomus/license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin)\n\ndownloadLicenses {\n  dependencyConfiguration \"compile\"\n}\n```\n\n### Conan Projects\n\n`license_finder` supports Conan. You need to have the following lines in your conanfile.txt for `license_finder` to retrieve dependencies' licenses.\nEnsure that `conan install` does not generate an error.\n\n```\n[imports]\n., license* -> ./licenses @ folder=True, ignore_case=True\n```\n\n### SBT Projects\n\n`license_finder` supports SBT. You need to have installed the sbt-license-report in your project:\n[https://github.com/sbt/sbt-license-report](https://github.com/sbt/sbt-license-report)\n\nBy default, `license_finder` will report on SBT's \"compile\" and \"test\" dependencies. If\nyou want to generate a report for some other dependency configuration, you can specify\nit in your projects's `build.sbt`\n\n```\nlicenseConfigurations := Set(\"compile\", \"provided\")\n```\n\n## Requirements\n\n`license_finder` requires ruby >= 2.6.0.\n\n\n## Upgrading\n\nTo upgrade to `license_finder` version >= 6.0, you have to replace the terminology `whitelist` with `permit` and  `blacklist` with `restrict` in your `dependency_decisions.yml`. See [Changelog](https://github.com/pivotal/LicenseFinder/blob/master/CHANGELOG.md#600--2020-01-22) for more details.\n\nTo upgrade from `license_finder` version 1.2 to 2.0, see\n[`license_finder_upgrade`](https://github.com/mainej/license_finder_upgrade).\nTo upgrade to 2.0 from a version lower than 1.2, first upgrade to 1.2, and run\n`license_finder` at least once.  This will ensure that the `license_finder`\ndatabase is in a state which `license_finder_upgrade` understands.\n\n\n## A Plea to Package Authors and Maintainers\n\nPlease add a license to your package specs! Most packaging systems\nallow for the specification of one or more licenses.\n\nFor example, Ruby Gems can specify a license by name:\n\n```ruby\nGem::Specification.new do |s|\n  s.name = \"my_great_gem\"\n  s.license = \"MIT\"\nend\n```\n\nAnd save a `LICENSE` file which contains your license text in your repo.\n\n## Known issues with specific package managers\n\n* Bundler\n   * When using `--project-path`, Bundler cannot find the Gemfile.\n\n* Yarn\n   * A module that is incompatible with the platform on which\n     license_finder is run will always be reported to have a license type\n     of \"unknown\". ([#456](https://github.com/pivotal/LicenseFinder/issues/456))\n\n## Support\n\n* Send an email to the list: [license-finder@googlegroups.com](license-finder@googlegroups.com)\n* View the project backlog at Pivotal Tracker: [https://www.pivotaltracker.com/n/projects/234851](https://www.pivotaltracker.com/n/projects/234851)\n\n\n## Contributing\n\nSee [CONTRIBUTING.md](https://github.com/pivotal/LicenseFinder/blob/master/CONTRIBUTING.md).\n\n\n## License\n\nLicenseFinder is released under the MIT License. http://www.opensource.org/licenses/mit-license"
}
