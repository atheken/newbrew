{
  "name": "git-tools",
  "full_name": "git-tools",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Assorted git-related scripts and tools",
  "license": "GPL-3.0-or-later",
  "homepage": "https://github.com/MestreLion/git-tools",
  "versions": {
    "stable": "2022.12",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/MestreLion/git-tools/archive/v2022.12.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "b01e3b8de268ee07854e6cc66d78db6ed6cbc3e71dfeded8456138881bdf97f1"
    },
    "head": {
      "url": "https://github.com/MestreLion/git-tools.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-tools/blobs/sha256:996e1c6bb27e63ddcc47a3e19cd180b05fbfad44cbaaed7cfcf6241ac4852959",
          "sha256": "996e1c6bb27e63ddcc47a3e19cd180b05fbfad44cbaaed7cfcf6241ac4852959"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "python"
  ],
  "uses_from_macos_bounds": [
    {
      "since": "catalina"
    }
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/git-tools.rb",
  "ruby_source_checksum": {
    "sha256": "f447001063c05449cf337392f13290dc2b4838ad420af46888e4cf56d7f098a0"
  },
  "date_added": "2023-06-11T09:00:22+00:00",
  "readme": "Git Tools\n=========\n\nAssorted git-related scripts and tools\n\n\nRequirements\n------------\n\n- **Git** (duh!). Tested in v2.17.1 and prior versions since 2010\n- **Python** (for `git-restore-mtime`). Tested in Python 3.6, also works in Python 3.1+\n- **Bash** (for all other tools). Tested in Bash 4, some may work in Bash 3 or even `sh`\n\nBash and Python are already installed by default in virtually all GNU/Linux distros.\nAnd you probably already have Git if you are interested in these tools.\nIf needed, the command to install dependencies for Debian-like distros (like Ubuntu/Mint) is:\n\n\tsudo apt install bash python3 git\n\nInstall\n-------\n\nFor [Debian](https://tracker.debian.org/pkg/git-mestrelion-tools),\n[Ubuntu](https://launchpad.net/ubuntu/+source/git-mestrelion-tools),\nLinuxMint, and their derivatives, in official repositories as `git-restore-mtime`:\n\n\tsudo apt install git-restore-mtime\n\nFor [Fedora](https://src.fedoraproject.org/rpms/git-tools)\nand in EPEL repository for CentOS, Red Hat Enterprise Linux (RHEL), Oracle Linux and others, as root:\n\n\tdnf install git-tools  # 'yum' if using older CentOS/RHEL releases\n\n[Gentoo](https://packages.gentoo.org/packages/dev-vcs/git-tools) and Funtoo, also as root:\n\n\temerge dev-vcs/git-tools\n\n[Homebrew](https://formulae.brew.sh/formula/git-tools):\n\n\tbrew install git-tools\n\n[MacPorts](https://ports.macports.org/port/git-tools/details/):\n\n\tsudo port install git-tools\n\n\nAlso available in Kali Linux, MidnightBDS _mports_, Mageia, and possibly other distributions.\n\n\n**Manual install**: to run from the repository tree, just clone and add the installation directory to your `$PATH`:\n```sh\ncd ~/some/dir\ngit clone https://github.com/MestreLion/git-tools.git\necho 'PATH=$PATH:~/some/dir/git-tools' >> ~/.profile  # or ~/.bashrc\n```\n\nUsage\n-----\n\nIf you installed using your operating system package manager, or if you added the cloned repository to your `$PATH`,\nyou can simply run the tools as if they were regular `git` subcommands! For example:\n\n\tgit restore-mtime --test\n\nThe magic? Git considers any executable named `git-*` in either `/usr/lib/git-core` or in `$PATH` to be a subcommand!\nIt also integrates with `man`, triggering the manual pages if they're installed,\nsuch as when installing using your package manager:\n\n\tgit restore-mtime --help\n\tgit help strip-merge\n\nIn case the manual pages are not installed in the system, such as when running from the cloned repository,\nyou can still read the built-in help by directly invoking the tool:\n\n\tgit-clone-subset --help\n\n\nUninstall\n---------\n\nFor the packaged versions, use your repository tools such as `apt`, `brew`, `emerge`, or `yum`.\n\nFor manual installations, delete the directory and remove it from your `$PATH`.\n```sh\nrm -rf ~/some/dir/git-tools\nsed -i '/git-tools/d' ~/.profile\n```\n---\n\nTools\n=====\n\nThis is a brief description of the tools. For more detailed instructions, see `--help` of each tool.\n\ngit-branches-rename\n-------------------\n\n*Batch renames branches with a matching prefix to another prefix*\n\nExamples:\n\n```console\n$ git-rename-branches bug bugfix\nbug/128  -> bugfix/128\nbug_test -> bugfix_test\n\n$ git-rename-branches ma backup/ma\nmaster -> backup/master\nmain   -> backup/main\n```\n\ngit-clone-subset\n----------------\n\n*Clones a subset of a git repository*\n\nUses `git clone` and `git filter-branch` to remove from the clone all but the requested files,\nalong with their associated commit history.\n\nClones a `repository` into a `destination` directory and runs\n`git filter-branch --prune-empty --tree-filter 'git rm ...' -- --all`\non the clone to prune from history all files except the ones matching a `pattern`,\neffectively creating a clone with a subset of files (and history) of the original repository.\n\nUseful for creating a new repository out of a set of files from another repository,\nmigrating (only) their associated history.\nVery similar to what `git filter-branch --subdirectory-filter` does,\nbut for a file pattern instead of just a single directory.\n\n\ngit-find-uncommitted-repos\n--------------------------\n\n*Recursively list repos with uncommitted changes*\n\nRecursively finds all git repositories in the given directory(es), runs `git status` on them,\nand prints the location of repositories with uncommitted changes. The tool I definitely use the most.\n\n\ngit-rebase-theirs\n-----------------\n\n*Resolve rebase conflicts and failed cherry-picks by favoring 'theirs' version*\n\nWhen using `git rebase`, conflicts are usually wanted to be resolved by favoring the `working branch` version\n(the branch being rebased, *'theirs'* side in a rebase), instead of the `upstream` version\n(the base branch, *'ours'* side). But `git rebase --strategy -X theirs` is only available from git 1.7.3.\nFor older versions, `git-rebase-theirs` is the solution.\nDespite the name, it's also useful for fixing failed cherry-picks.\n\n\ngit-restore-mtime\n-----------------\n\n*Restore original modification time of files based on the date of the most recent commit that modified them*\n\nProbably the most popular and useful tool, and the reason this repository was packaged into distros.\n\nGit, unlike other version control systems, does not preserve the original timestamp of committed files.\nWhenever repositories are cloned, or branches/files are checked out, file timestamps are reset to the current date.\nWhile this behavior has its justifications (notably when using `make` to compile software),\nsometimes it is desirable to restore the original modification date of a file\n(for example, when generating release tarballs).\nAs git does not provide any way to do that, `git-restore-mtime` tries to work around this limitation.\n\nFor more information and background, see http://stackoverflow.com/a/13284229/624066\n\nFor TravisCI users, simply add this setting to `.travis.yml` so it clones the full repository history:\n```yaml\ngit:\n  depth: false\n```\n\nSimilarly, when using GitHub Actions, make sure to include `fetch-depth: 0` in your checkout workflow,\nas described in its [documentation](https://github.com/actions/checkout#Fetch-all-history-for-all-tags-and-branches):\n```yaml\n- uses: actions/checkout@v2\n  with:\n    fetch-depth: 0\n```\n\n\ngit-strip-merge\n---------------\n\n*A `git-merge` wrapper that delete files on a \"foreign\" branch before merging*\n\nAnswer for \"*How to set up a git driver to ignore a folder on merge?*\", see http://stackoverflow.com/questions/3111515\n\nExample:\n```console\n$ git checkout master\n$ git-strip-merge design photoshop/*.psd\n```\n---\n\nContributing\n------------\n\nPatches are welcome! Fork, hack, request pull!\n\nIf you find a bug or have any enhancement request, please open a\n[new issue](https://github.com/MestreLion/git-tools/issues/new)\n\n\nAuthor\n------\n\nRodrigo Silva (MestreLion) <linux@rodrigosilva.com>\n\nLicense and Copyright\n---------------------\n```\nCopyright (C) 2012 Rodrigo Silva (MestreLion) <linux@rodrigosilva.com>.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n```"
}
