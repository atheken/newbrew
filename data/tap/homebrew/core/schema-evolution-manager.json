{
  "name": "schema-evolution-manager",
  "full_name": "schema-evolution-manager",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [
    "sem"
  ],
  "versioned_formulae": [],
  "desc": "Manage postgresql database schema migrations",
  "license": "Apache-2.0",
  "homepage": "https://github.com/mbryzek/schema-evolution-manager",
  "versions": {
    "stable": "0.9.47",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/mbryzek/schema-evolution-manager/archive/0.9.47.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "22851f906ce4039d43ee5fc754425dd0918905e4b98b36cd2f720fe94b85c6b2"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/schema-evolution-manager/blobs/sha256:528017b98ceaa5b6847d04504e1f0abe47b4c67730456968f6d42b768379bab4",
          "sha256": "528017b98ceaa5b6847d04504e1f0abe47b4c67730456968f6d42b768379bab4"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "ruby"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/schema-evolution-manager.rb",
  "ruby_source_checksum": {
    "sha256": "9ffbe3f53ee5119addb46d7c5e2a7379035ae015c51f992734ddfe2c89d76efb"
  },
  "date_added": "2018-07-01T17:05:42+01:00",
  "readme": "[![Build Status](https://travis-ci.org/mbryzek/schema-evolution-manager.svg?branch=main)](https://travis-ci.org/mbryzek/schema-evolution-manager)\n\n# Schema Evolution Manager (sem)\n\n## Intended Audience\n\n  - Engineers who regularly manage the creation of scripts to update the\n    schema in a postgresql database.\n\n  - Engineers who want to simplify and/or standardize how other team\n    members contribute schema changes to a postgresql database.\n\n## Purpose\n\nSchema Evolution Manager (sem) makes it very simple for engineers to\ncontribute schema changes to a postgresql database, managing the\nschema evolutions as proper source code. Schema changes are deployed\nas gzipped tarballs named with the corresponding git tag.\n\nTo apply schema changes to a particular database, download a tarball\nand use sem to figure out which scripts have not yet been\napplied, then apply those scripts in chronological order.\n\nsem provides well tested, simple tools to manage the process\nof creating and applying schema upgrade scripts to databases in all\nenvironments.\n\n - scripts are automatically named with a timestamp assigned at time\n   of creation\n\n - all scripts applied to the postgresql database are recorded in\n   the table schema_evolution_manager.scripts - making it simple to\n   see what has been applied, and when, if needed.\n\nsem contains only tools for managing schema evolutions. The idea is\nthat you create one git repository for each of your databases then use\nsem to manage the schema evolution of each database.\n\nAt Gilt Groupe, we started using sem in early 2012 and have observed\nan increase in the reliability of our production schema deploys across\ndozens of independent postgresql databases.\n\nSee INSTALLATION and GETTING STARTED for details.\n\n\n## Project Goals\n\n  - Absolutely minimal set of dependencies. We found that anything\n    more complex led developers to prefer to manage their own schema\n    evolutions. We prefer small sets of scripts that each do one thing\n    well.\n\n  - Committed to true simplicity - features that would add complexity\n    are not added. We hope that more advanced features might be built\n    on top of schema evolution manager.\n\n  - Works for ALL applications - schema management is a first class\n    task now so any application framework can leverage these\n    migration tools.\n\n  - No rollback. We have found in practice that rolling back schema\n    changes is not 100% reliable. Therefore we inentionally do NOT\n    support rollback. This is an often debated element of sem,\n    and although the design itself could be easily extended to support\n    rollback, we currently have no plans to do so.\n\nIn place of rollback, we prefer to keep focus on the criticalness of\nschema changes, encouraging peer review and lots of smaller evolutions\nthat themselves are relatively harmless.\n\nThis stems from the idea that we believe schema evolutions are\nfundamentally risky. We believe the best way to manage this risk is\nto:\n\n  1. Treat schema evolution changes as normal software releases\n     as much as possible\n\n  2. Manage schema versions as simple tarballs - artifacts are\n     critical to provide 100% reproducibility. This means the exact\n     same artifacts can be applied in development then QA and finally\n     production environments.\n\n  3. Isolate schema changes as their own deploy. This then\n     guarantees that every other application itself can be rolled\n     back if needed. In practice, we have seen greater risk when\n     applications couple code changes with schema changes.\n\nThis last point bears some more detail. By fundamentally deciding to\nmanage and release schema changes independent of application changes:\n\n  1. Schema changes are required to be incremental. For example, to\n     rename a column takes 4 separate, independent production deploys:\n\n    a. add new column\n    b. deploy changes in application to use old and new column\n    c. remove old column\n    d. deploy changes in application to use only new column\n\n  Though at first this may seem more complex, each individual change\n  itself is smaller and lower risk.\n\n  2. It is worth repeating that all application deploys can now be\n     rolled back. This has been a huge win for our teams.\n\n\n## Talks\n\nFirst presented at [PGDay NYC 2013](https://speakerdeck.com/mbryzek/schema-evolutions-at-gilt-groupe)\n\n## Dependencies\n\n- Ruby: Current testing against ruby 2.x. 1.8 and 1.9 are supported.\n\n- Postgres: Only tested against 9.x. We minimize use of advanced\n  features and should work against 8.x series. If you try 8.x and\n  run into problems, please let us know so we can update.\n\n- plpgsql must be available in the database. If needed you can:\n\n  [createlang plpgsql template1](http://www.postgresql.org/docs/8.4/static/app-createlang.html)\n\n- Git: Designed to use git for history (all versions since 1.7).\n\n## Installation\n\nThere are three ways to install schema evolution manager:\n\n1. Via brew\n\n        brew install schema-evolution-manager\n\n1. Direct install using ruby (no dependency on ruby gems)\n\n        git clone git@github.com:mbryzek/schema-evolution-manager.git\n        cd schema-evolution-manager\n        git checkout 0.9.47\n        ruby ./configure.rb\n        sudo ./install.rb\n\n1. If you have ruby gems:\n\n        gem install schema-evolution-manager\n\n## Upgrading\n\nUpgrading is as simple as following the Installation instructions for\nthe new version. Each installation of sem will create a new directory\nfor that specific version. When you install the newer version, a new\ndirectory will be created and symlinks updated to point to the latest\nversion.\n\n\n## Getting Started\n\n### Initialization\n\n    git init /tmp/sample\n    sem-init --dir /tmp/sample --url postgresql://postgres@localhost/sample\n\n### Writing your first sql script\n\n    cd /tmp/sample\n    echo \"create table tmp_table (id integer)\" > new.sql\n    sem-add ./new.sql\n\n### Applying changes to your local database:\n\n    cd /tmp/sample\n    createdb sample\n    sem-apply --url postgresql://postgres@localhost/sample\n\nNote that you can also pass in the username, db host, and db name explicitly:\n\n    sem-apply --host localhost --name sample --user postgres\n\nSimilarly, for non-standard setups, you can optionally pass in the port\n\n    sem-apply --host localhost --port 5433 --name sample --user postgres\n\n### When you are happy with your change, commit:\n\n    git commit -m \"Adding a new tmp table to test sem process\" scripts\n\n## Publishing a Release\n\n    cd /tmp/sample\n    sem-dist\n\nBy default, the sem-dist script will create the next micro git tag,\nand use that tag in the file name.\n\nIf you already have a tag:\n\n    sem-dist --tag 0.0.2\n\nYou will now have a single artifict -\n/tmp/sample/dist/sample-0.0.2.tar.gz - that you can manage in standard\ndeploy process.\n\n\n## Deploying Schema Changes\n\n### Extract tarball on server\n\n    scp /tmp/sample/dist/sample-0.0.2.tar.gz <your server>:~/\n    ssh <your server>\n    tar xfz sample-0.0.2.tar.gz\n    cd sample-0.0.2\n\n### Do a dry run\n\n    sem-apply --url postgresql://postgres@localhost/sample --dry_run\n\nYou will likely see a number of create table statements (see data model section below). You should also see:\n\n      [DRY RUN] Applying 20130318-214407.sql\n\nwhich tells you that if you apply these changes, that sql script will be applied to the sample db\n\n\n### Specifying database password\n\nThere are two recommended ways in which to pass user passwords to psql:\n\n 1. Create a [~/.pgpass\n    file](http://www.postgresql.org/docs/9.4/static/libpq-pgpass.html)\n    with the appropriate credentials</li>\n\n 2. Specify a [--password] flag when running sem-apply. You will\n    then be prompted to enter your password once. sem will create a\n    temporary file to store your password, using that file during the\n    duration of the command and ensuring the file is deleted after sem\n    completed.\n\n    Example:\n\n        sem-apply --url postgresql://postgres@localhost/sample --password\n\n### Apply the changes\n\n    sem-apply --url postgresql://postgres@localhost/sample\n\nYou will see:\n\n      Upgrading schema for postgres@localhost/sample\n      Applying 20130318-214407.sql\n\nAttempt to apply again:\n\n    sem-apply --url postgresql://postgres@localhost/sample\n\nYou will see:\n\n      Upgrading schema for postgres@localhost/sample\n        All scripts have been previously applied\n\n### Baselines\n\nIf you have an existing database, and you want to start using schema\nevolution manager, we support the notion of creating a baseline. The\nsem-baseline script will record that all of the scripts have been\napplied to the database, without actually applying them. From this\npoint forward, only new scripts will be applied to the database.\n\n    sem-baseline --url postgresql://postgres@localhost/sample\n\n\n## Data Model\n\nsem will create a new postgresql schema in your database named 'schema_evolution_manager'\n\n    psql sample\n    set search_path to schema_evolution_manager;\n    \\dt\n\n        Schema    |       Name        | Type  |  Owner\n     -------------+-------------------+-------+----------\n     schema_evolution_manager | bootstrap_scripts | table | postgres\n     schema_evolution_manager | scripts           | table | postgres\n\nEach of these tables has a column named 'filename' which keeps track\nof the sql files applied to each database.\n\n  - The scripts table is used for your application.\n  - The bootstrap_scripts table is used to manage upgrades to the sem\n    application itself.\n\nFor details on these tables, see scripts/*sql where the tables themselves are defined.\n\n\n## PLPGSQL Utilities\n\nWe've included a copy of the schema conventions we practice at\n[Gilt Groupe](CONVENTIONS.md). There are also a number of utility plpgsql\nfunctions to help developers apply these conventions in a systematic way.\n\nThe helpers are defined in\n\n  scripts/20130318-105456.sql\n\nWe have found these utilities incredibly useful - and are committed to\nproviding only the most relevant, high quality, and extremely clear\nhelpers as possible.\n\nIn CONVENTIONS.md you will find a simple example of these conventions\nand utilities in practice.\n\n\n## Command Line Utilities\n\n- sem-init: Initialize a git repository for sem support\n- sem-add: Adds a database upgrade script\n- sem-dist: Create a distribution tar.gz file containing schema upgrade scripts\n- sem-apply: Apply any deltas from a distribution tarball to a particular database\n- sem-baseline: Add any migration scripts to the schema tables without actually applying them. See [Migrating](#migrating)\n\n\n## Attributes supported in sql migration scripts\n\nSometimes you may want to adjust the specific options used by SEM when\napplying SQL scripts. Attributes can be specified within each SQL file\nin comments.\n\nTo specify an attribute, add a comment of the following format\nanywhere in your SQL file (but at the top by convention):\n\n-- sem.attribute.[name] = [value]\n\nCurrently supported attributes:\n\n  - transaction\n\n    - single (default): the entire file is applied within a\n      transaction (by using the psql command line argument\n      --single-transaction)\n    - none: Each command in the file will be applied in order. If a\n      later command in the file fails, there will be no rollback.\n\n    Examples:\n\n      - -- sem.attribute.transaction = none\n      - -- sem.attribute.transaction = single\n\n## Migrating\n\nIn some cases you may be migrating from no schema evolutions, or another schema evolution model.\n\nFor these cases, sem provides a 'baseline' command.\n\nCurrent workflow:\n\n  1. sem-add your current schema\n    1. Either via a database dump\n    1. Or by sem-adding existing DB scripts\n  1. Use sem-baseline to bootstrap the sem tables and add existing schema files to sem's migration table without actually applying them\n\n## License\n\nCopyright 2013-2016 Gilt Groupe, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License."
}
