{
  "name": "peg-markdown",
  "full_name": "peg-markdown",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Markdown implementation based on a PEG grammar",
  "license": "GPL-2.0-or-later or MIT",
  "homepage": "https://github.com/jgm/peg-markdown",
  "versions": {
    "stable": "0.4.14",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/jgm/peg-markdown/archive/0.4.14.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "111bc56058cfed11890af11bec7419e2f7ccec6b399bf05f8c55dae0a1712980"
    },
    "head": {
      "url": "https://github.com/jgm/peg-markdown.git",
      "branch": "master"
    }
  },
  "revision": 1,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/peg-markdown/blobs/sha256:b86b3203ed481c4afb9bcbd489a4803b3f1fd204c27bbed16dc42e45e16790fb",
          "sha256": "b86b3203ed481c4afb9bcbd489a4803b3f1fd204c27bbed16dc42e45e16790fb"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/peg-markdown/blobs/sha256:93a7ee730c2fb9c01ab25be02028ff8b25907d2a1693de10f07864b861f3be13",
          "sha256": "93a7ee730c2fb9c01ab25be02028ff8b25907d2a1693de10f07864b861f3be13"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/peg-markdown/blobs/sha256:25d1eb833b0688d0b2db0667f105d27e50d6a46a14ea57be5aa5ef50c7127f62",
          "sha256": "25d1eb833b0688d0b2db0667f105d27e50d6a46a14ea57be5aa5ef50c7127f62"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/peg-markdown/blobs/sha256:9a7b88b03ac9871d36d6072135cddb6fce38933ffbbf6836a6a9d9265bc0aaa2",
          "sha256": "9a7b88b03ac9871d36d6072135cddb6fce38933ffbbf6836a6a9d9265bc0aaa2"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/peg-markdown/blobs/sha256:9f10d8b70ae2e5fc012c2baf976a2235c9501be317dde74b17648052dd801388",
          "sha256": "9f10d8b70ae2e5fc012c2baf976a2235c9501be317dde74b17648052dd801388"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/peg-markdown/blobs/sha256:efefd2a49548d4abdfc97bdc12295b1f6dac5b1832f21d9b6f147cc7a3c27176",
          "sha256": "efefd2a49548d4abdfc97bdc12295b1f6dac5b1832f21d9b6f147cc7a3c27176"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/peg-markdown/blobs/sha256:08910e3fdd97183865c2839a4e14839826101e6dfa48120aebc60fbe838f0689",
          "sha256": "08910e3fdd97183865c2839a4e14839826101e6dfa48120aebc60fbe838f0689"
        },
        "mojave": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/peg-markdown/blobs/sha256:a60087175a8f3c5242e9183eeddb433e6bdbe68409cae0a7c61d66da4622b150",
          "sha256": "a60087175a8f3c5242e9183eeddb433e6bdbe68409cae0a7c61d66da4622b150"
        },
        "high_sierra": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/peg-markdown/blobs/sha256:207764b26b253904cf61e9e13eb32e81a51d61d548b7dafd366da5a5394a5f08",
          "sha256": "207764b26b253904cf61e9e13eb32e81a51d61d548b7dafd366da5a5394a5f08"
        },
        "sierra": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/peg-markdown/blobs/sha256:2d75448f008aa176b624ecb02bc6e3f7492ea8953a99f84fcdacc6b301b39412",
          "sha256": "2d75448f008aa176b624ecb02bc6e3f7492ea8953a99f84fcdacc6b301b39412"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/peg-markdown/blobs/sha256:d1b2212c3e3a3610a02a5f668e3b88785c0bf1c6383f36ed3674abe42cc941bc",
          "sha256": "d1b2212c3e3a3610a02a5f668e3b88785c0bf1c6383f36ed3674abe42cc941bc"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "pkg-config"
  ],
  "dependencies": [
    "glib"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/peg-markdown.rb",
  "ruby_source_checksum": {
    "sha256": "65857ade672b18ef4ff39489e86256462ca5937e15fce81dd36c7c3e4fcad82c"
  },
  "date_added": "2011-09-18T18:17:39-07:00",
  "readme": "**Note: this package is unmaintained.**\n\nWhat is this?\n=============\n\nThis is an implementation of John Gruber's [markdown][] in C. It uses a\n[parsing expression grammar (PEG)][] to define the syntax. This should\nallow easy modification and extension. It currently supports output in\nHTML, LaTeX, ODF, or groff_mm formats, and adding new formats is\nrelatively easy.\n\n[parsing expression grammar (PEG)]: http://en.wikipedia.org/wiki/Parsing_expression_grammar \n[markdown]: http://daringfireball.net/projects/markdown/\n\nIt is pretty fast. A 179K text file that takes 5.7 seconds for\nMarkdown.pl (v. 1.0.1) to parse takes less than 0.2 seconds for this\nmarkdown. It does, however, use a lot of memory (up to 4M of heap space\nwhile parsing the 179K file, and up to 80K for a 4K file). (Note that\nthe memory leaks in earlier versions of this program have now been\nplugged.)\n\nBoth a library and a standalone program are provided.\n\npeg-markdown is written and maintained by John MacFarlane (jgm on\ngithub), with significant contributions by Ryan Tomayko (rtomayko).\nIt is released under both the GPL and the MIT license; see LICENSE for\ndetails.\n\nInstalling\n==========\n\nOn a linux or unix-based system\n-------------------------------\n\nThis program is written in portable ANSI C. It requires\n[glib2](http://www.gtk.org/download/index.php). Most *nix systems will have\nthis installed already. The build system requires GNU make.\n\nThe other required dependency, [Ian Piumarta's peg/leg PEG parser\ngenerator](http://piumarta.com/software/peg/), is included in the source\ndirectory. It will be built automatically. (However, it is not as portable\nas peg-markdown itself, and seems to require gcc.)\n\nTo make the 'markdown' executable:\n\n    make\n\n(Or, on some systems, `gmake`.) Then, for usage instructions:\n\n    ./markdown --help\n\nTo run John Gruber's Markdown 1.0.3 test suite:\n\n    make test\n\nThe test suite will fail on one of the list tests.  Here's why.\nMarkdown.pl encloses \"item one\" in the following list in `<p>` tags:\n\n    1.  item one\n        * subitem\n        * subitem\n    \n    2.  item two\n\n    3.  item three\n\npeg-markdown does not enclose \"item one\" in `<p>` tags unless it has a\nfollowing blank line. This is consistent with the official markdown\nsyntax description, and lets the author of the document choose whether\n`<p>` tags are desired.\n\nCross-compiling for Windows with MinGW on a linux box\n-----------------------------------------------------\n\nPrerequisites:\n\n*   Linux system with MinGW cross compiler For Ubuntu:\n\n        sudo apt-get install mingw32\n\n*   [Windows glib-2.0 binary & development files](http://www.gtk.org/download-windows.html).\n    Unzip files into cross-compiler directory tree (e.g., `/usr/i586-mingw32msvc`).\n\nSteps:\n\n1.  Create the markdown parser using Linux-compiled `leg` from peg-0.1.4:\n\n        ./peg-0.1.4/leg markdown_parser.leg >markdown_parser.c\n\n    (Note: The same thing could be accomplished by cross-compiling leg,\n    executing it on Windows, and copying the resulting C file to the Linux\n    cross-compiler host.)\n\n2.  Run the cross compiler with include flag for the Windows glib-2.0 headers:\n    for example,\n\n        /usr/bin/i586-mingw32msvc-cc -c \\\n        -I/usr/i586-mingw32msvc/include/glib-2.0 \\\n        -I/usr/i586-mingw32msvc/lib/glib-2.0/include -Wall -O3 -ansi markdown*.c\n\n3.  Link against Windows glib-2.0 headers: for example,\n\n        /usr/bin/i586-mingw32msvc-cc markdown*.o \\\n        -Wl,-L/usr/i586-mingw32msvc/lib/glib,--dy,--warn-unresolved-symbols,-lglib-2.0 \\\n        -o markdown.exe\n\nThe resulting executable depends on the glib dll file, so be sure to\nload the glib binary on the Windows host.\n\nCompiling with MinGW on Windows\n-------------------------------\n\nThese directions assume that MinGW is installed in `c:\\MinGW` and glib-2.0\nis installed in the MinGW directory hierarchy (with the mingw bin directory\nin the system path).\n\nUnzip peg-markdown in a temp directory. From the directory with the\npeg-markdown source, execute:\n\n    cd peg-0.1.4\n    make PKG_CONFIG=c:/path/to/glib/bin/pkg-config.exe\n\nExtensions\n==========\n\npeg-markdown supports extensions to standard markdown syntax.\nThese can be turned on using the command line flag `-x` or\n`--extensions`.  `-x` by itself turns on all extensions.  Extensions\ncan also be turned on selectively, using individual command-line\noptions. To see the available extensions:\n\n    ./markdown --help-extensions\n \nThe `--smart` extension provides \"smart quotes\", dashes, and ellipses.\n\nThe `--notes` extension provides a footnote syntax like that of\nPandoc or PHP Markdown Extra.\n\nThe `--strike` extension provides a strike-through syntax like that of\nRedcarpet.  For strike-through support in LaTeX documents the `sout`\nmacro from the `ulem` package is used.  Add\n`\\usepackage[normalem]{ulem}` to your document's preamble to load it.\n\n\nUsing the library\n=================\n\nThe library exports two functions:\n\n    GString * markdown_to_g_string(char *text, int extensions, int output_format);\n    char * markdown_to_string(char *text, int extensions, int output_format);\n\nThe only difference between these is that `markdown_to_g_string` returns a\n`GString` (glib's automatically resizable string), while `markdown_to_string`\nreturns a regular character pointer.  The memory allocated for these must be\nfreed by the calling program, using `g_string_free()` or `free()`.\n\n`text` is the markdown-formatted text to be converted.  Note that tabs will\nbe converted to spaces, using a four-space tab stop.  Character encodings are\nignored.\n\n`extensions` is a bit-field specifying which syntax extensions should be used.\nIf `extensions` is 0, no extensions will be used.  If it is `0xFFFFFF`,\nall extensions will be used.  To set extensions selectively, use the\nbitwise `&` operator and the following constants:\n\n - `EXT_SMART` turns on smart quotes, dashes, and ellipses.\n - `EXT_NOTES` turns on footnote syntax.  [Pandoc's footnote syntax][] is used here.\n - `EXT_FILTER_HTML` filters out raw HTML (except for styles).\n - `EXT_FILTER_STYLES` filters out styles in HTML.\n - `EXT_STRIKE` turns on strike-through syntax.\n\n  [Pandoc's footnote syntax]: http://johnmacfarlane.net/pandoc/README.html#footnotes\n\n`output_format` is either `HTML_FORMAT`, `LATEX_FORMAT`, `ODF_FORMAT`,\nor `GROFF_MM_FORMAT`.\n\nTo use the library, include `markdown_lib.h`.  See `markdown.c` for an example.\n\nHacking\n=======\n\nIt should be pretty easy to modify the program to produce other formats,\nand to parse syntax extensions.  A quick guide:\n\n  * `markdown_parser.leg` contains the grammar itself.\n\n  * `markdown_output.c` contains functions for printing the `Element`\n    structure in various output formats.\n\n  * To add an output format, add the format to `markdown_formats` in\n    `markdown_lib.h`.  Then modify `print_element` in `markdown_output.c`,\n    and add functions `print_XXXX_string`, `print_XXXX_element`, and\n    `print_XXXX_element_list`. Also add an option in the main program\n    that selects the new format. Don't forget to add it to the list of\n    formats in the usage message.\n\n  * To add syntax extensions, define them in the PEG grammar\n    (`markdown_parser.leg`), using existing extensions as a guide. New\n    inline elements will need to be added to `Inline =`; new block\n    elements will need to be added to `Block =`. (Note: the order\n    of the alternatives does matter in PEG grammars.)\n\n  * If you need to add new types of elements, modify the `keys`\n    enum in `markdown_peg.h`.\n\n  * By using `&{ }` rules one can selectively disable extensions\n    depending on command-line options. For example,\n    `&{ extension(EXT_SMART) }` succeeds only if the `EXT_SMART` bit\n    of the global `syntax_extensions` is set. Add your option to\n    `markdown_extensions` in `markdown_lib.h`, and add an option in\n    `markdown.c` to turn on your extension.\n\n  * Note: Avoid using `[^abc]` character classes in the grammar, because\n    they cause problems with non-ascii input. Instead, use: `( !'a' !'b'\n    !'c' . )`\n\nAcknowledgements\n================\n\nSupport for ODF output was added by Fletcher T. Penney."
}
