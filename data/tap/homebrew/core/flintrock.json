{
  "name": "flintrock",
  "full_name": "flintrock",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Tool for launching Apache Spark clusters",
  "license": "Apache-2.0",
  "homepage": "https://github.com/nchammas/flintrock",
  "versions": {
    "stable": "2.0.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://files.pythonhosted.org/packages/dc/ad/6e3871a510f0d053aa49caee2140a2f64f2d3fa584d3b70408043295fa57/Flintrock-2.0.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "ccbbc912823772ea733802ca3f9751c98dacda8c67518683a3dc4ec8b1de38dd"
    }
  },
  "revision": 7,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/flintrock/blobs/sha256:0c2d522b1becc863b240e99d7ba91d6626d8ed4751335cc9ebe424ef1b5448d5",
          "sha256": "0c2d522b1becc863b240e99d7ba91d6626d8ed4751335cc9ebe424ef1b5448d5"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/flintrock/blobs/sha256:a5d24923abf368f9c037a5436493876f530cfdca0e4fecc854c2379ae94bb6ba",
          "sha256": "a5d24923abf368f9c037a5436493876f530cfdca0e4fecc854c2379ae94bb6ba"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/flintrock/blobs/sha256:15ffee328b09834248e4de1d94fa19ba19893fdb957ea387aed15e9cccd977fa",
          "sha256": "15ffee328b09834248e4de1d94fa19ba19893fdb957ea387aed15e9cccd977fa"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/flintrock/blobs/sha256:f365b7e7f38705983ebc1773fc542f776b57c3e5f4ca6c93a685d4e18e5eea34",
          "sha256": "f365b7e7f38705983ebc1773fc542f776b57c3e5f4ca6c93a685d4e18e5eea34"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/flintrock/blobs/sha256:e9504410250ea935be9436e1962fea2a49e50403e9b91bf064dfde87600b6c40",
          "sha256": "e9504410250ea935be9436e1962fea2a49e50403e9b91bf064dfde87600b6c40"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/flintrock/blobs/sha256:922c9839f430725233659f2a293077f6fbb7e29ce874951cd338e4761b07936c",
          "sha256": "922c9839f430725233659f2a293077f6fbb7e29ce874951cd338e4761b07936c"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/flintrock/blobs/sha256:338d299508ddc9a1e80d194a21539376ea29c37d542d138ad42d4c0322ba60c3",
          "sha256": "338d299508ddc9a1e80d194a21539376ea29c37d542d138ad42d4c0322ba60c3"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "pkg-config",
    "rust"
  ],
  "dependencies": [
    "cffi",
    "openssl@3",
    "python@3.11",
    "pyyaml",
    "six"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/flintrock.rb",
  "ruby_source_checksum": {
    "sha256": "05219cad7d37f279d815d84987186174ba8c8e98582e8c385d7e62962e43c455"
  },
  "date_added": "2018-03-24T22:28:49+01:00",
  "readme": "![Flintrock logo](https://raw.githubusercontent.com/nchammas/flintrock/master/flintrock-logo.png)\n\n[![License](https://img.shields.io/badge/license-Apache%202.0-blue.svg)](https://github.com/nchammas/flintrock/blob/master/LICENSE)\n[![Build Status](https://github.com/nchammas/flintrock/actions/workflows/flintrock.yaml/badge.svg)](https://github.com/nchammas/flintrock/actions)\n\nFlintrock is a command-line tool for launching [Apache Spark](http://spark.apache.org/) clusters.\n\n\n## Flintrock around the web\n\nFlintrock has been featured in a few talks, guides, and papers around the web.\n\n* Talks:\n  * [Flintrock: A faster, better spark-ec2](https://www.youtube.com/watch?v=3aeIpOGrJOA) ([slides](http://www.slideshare.net/SparkSummit/flintrock-a-faster-better-sparkec2-by-nicholas-chammas))\n* Guides:\n  * Running Spark on a Cluster: The Basics (using Flintrock)\n    * [Part 1: Start a Spark Cluster and Use the spark-shell](http://heather.miller.am/blog/launching-a-spark-cluster-part-1.html)\n    * [Part 2: Dependencies, S3, and Deploying via spark-submit](http://heather.miller.am/blog/launching-a-spark-cluster-part-2.html)    \n  * [Spark with Jupyter on AWS](https://github.com/PiercingDan/spark-Jupyter-AWS)\n  * [Building a data science platform for R&D, part 2 – Deploying Spark on AWS using Flintrock](https://alexioannides.com/2016/08/18/building-a-data-science-platform-for-rd-part-2-deploying-spark-on-aws-using-flintrock/)\n  * [AWS EC2를 활용 스파크 클러스터 생성](http://statkclee.github.io/ml/ml-aws-ec2-flintrock.html)\n* Papers:\n  * [\"Birds in the Clouds\": Adventures in Data Engineering](https://arxiv.org/pdf/1710.08521.pdf)\n\n\n## Usage\n\nHere's a quick way to launch a cluster on EC2, assuming you already have an [AWS account set up](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/get-set-up-for-amazon-ec2.html). Flintrock works best with Amazon Linux. You can get the latest AMI IDs [from here](https://aws.amazon.com/amazon-linux-2/release-notes/).\n\n```sh\nflintrock launch test-cluster \\\n    --num-slaves 1 \\\n    --spark-version 3.3.0 \\\n    --ec2-key-name key_name \\\n    --ec2-identity-file /path/to/key.pem \\\n    --ec2-ami ami-0aeeebd8d2ab47354 \\\n    --ec2-user ec2-user\n```\n\nIf you [persist these options to a file](#configurable-cli-defaults), you'll be able to do the same thing much more concisely:\n\n```sh\nflintrock configure\n# Save your preferences via the opened editor, then...\nflintrock launch test-cluster\n```\n\nOnce you're done using a cluster, don't forget to destroy it with:\n\n```sh\nflintrock destroy test-cluster\n```\n\nOther things you can do with Flintrock include:\n\n```sh\nflintrock login test-cluster\nflintrock describe test-cluster\nflintrock add-slaves test-cluster --num-slaves 2\nflintrock remove-slaves test-cluster --num-slaves 1\nflintrock run-command test-cluster 'sudo yum install -y package'\nflintrock copy-file test-cluster /local/path /remote/path\n```\n\nTo see what else Flintrock can do, or to see detailed help for a specific command, try:\n\n```sh\nflintrock --help\nflintrock <subcommand> --help\n```\n\nThat's not all. Flintrock has a few more [features](#features) that you may find interesting.\n\n### Accessing data on S3\n\nWe recommend you access data on S3 from your Flintrock cluster by following\nthese steps:\n\n1. Setup an [IAM Role](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html)\n   that grants access to S3 as desired. Reference this role when you launch\n   your cluster using the `--ec2-instance-profile-name` option (or its\n   equivalent in your `config.yaml` file).\n2. Reference S3 paths in your Spark code using the `s3a://` prefix. `s3a://` is\n   backwards compatible with `s3n://` and replaces both `s3n://` and `s3://`.\n   The Hadoop project [recommends using `s3a://`](https://hadoop.apache.org/docs/current/hadoop-aws/tools/hadoop-aws/index.html#S3A)\n   since it is actively developed, supports larger files, and offers\n   better performance.\n3. Make sure Flintrock is configured to use Hadoop/HDFS 2.7+. Earlier\n   versions of Hadoop do not have solid implementations of `s3a://`.\n   Flintrock's default is Hadoop 3.3.4, so you don't need to do anything\n   here if you're using a vanilla configuration.\n4. Call Spark with the hadoop-aws package to enable `s3a://`. For example:\n   ```sh\n   spark-submit --packages org.apache.hadoop:hadoop-aws:3.3.4 my-app.py\n   pyspark --packages org.apache.hadoop:hadoop-aws:3.3.4\n   ```\n   If you have issues using the package, consult the [hadoop-aws troubleshooting\n   guide](http://hadoop.apache.org/docs/current/hadoop-aws/tools/hadoop-aws/index.html)\n   and try adjusting the version. As a rule of thumb, you should match the version\n   of hadoop-aws to the version of Hadoop that Spark was built against (which is\n   typically Hadoop 3.2 or 2.7), even if the version of Hadoop that you're deploying to\n   your Flintrock cluster is different.\n\nWith this approach you don't need to copy around your AWS credentials\nor pass them into your Spark programs. As long as the assigned IAM role\nallows it, Spark will be able to read and write data to S3 simply by\nreferencing the appropriate path (e.g. `s3a://bucket/path/to/file`).\n\n\n## Installation\n\nBefore using Flintrock, take a quick look at the\n[copyright](https://github.com/nchammas/flintrock/blob/master/COPYRIGHT)\nnotice and [license](https://github.com/nchammas/flintrock/blob/master/LICENSE)\nand make sure you're OK with their terms.\n\n**Flintrock requires Python 3.7 or newer**, unless you are using one\nof our **standalone packages**. Flintrock has been thoroughly tested\nonly on OS X, but it should run on all POSIX systems.\nA motivated contributor should be able to add\n[Windows support](https://github.com/nchammas/flintrock/issues/46)\nwithout too much trouble, too.\n\n### Release version\n\nTo get the latest release of Flintrock, simply run [pip](https://pip.pypa.io/en/stable/):\n\n```\npip3 install flintrock\n```\n\nThis will install Flintrock and place it on your path. You should be good to go now!\n\nYou'll probably want to get started with the following two commands:\n\n```sh\nflintrock --help\nflintrock configure\n```\n\n### Standalone version (Python not required!)\n\nIf you don't have a recent enough version of Python, or if you don't have Python installed at all,\nyou can still use Flintrock. We publish standalone packages of Flintrock on GitHub with our\n[releases](https://github.com/nchammas/flintrock/releases).\n\nFind the standalone package for your OS under our [latest release](https://github.com/nchammas/flintrock/releases/latest),\nunzip it to a location of your choice, and run the `flintrock` executable inside.\n\nFor example:\n\n```sh\nflintrock_version=\"2.0.0\"\n\ncurl --location --remote-name \"https://github.com/nchammas/flintrock/releases/download/v$flintrock_version/Flintrock-$flintrock_version-standalone-macOS-x86_64.zip\"\nunzip -q -d flintrock \"Flintrock-$flintrock_version-standalone-macOS-x86_64.zip\"\ncd flintrock/\n\n# You're good to go!\n./flintrock --help\n```\n\nYou'll probably want to add the location of the Flintrock executable to your `PATH` so that you can invoke it from any directory.\n\n### Community-supported distributions\n\nFlintrock is also available via the following package managers:\n\n* [Homebrew](https://brew.sh): `brew install flintrock`\n\nThese packages are not supported by the core contributors and **may be out of date**. Please reach out to the relevant communities directly if you have trouble using these distributions to install Flintrock. You can always find the latest release of Flintrock [on GitHub](https://github.com/nchammas/flintrock/releases/latest) and [on PyPI](https://pypi.org/project/Flintrock/).\n\n### Development version\n\nIf you like living on the edge, install the development version of Flintrock:\n\n```sh\npip3 install git+https://github.com/nchammas/flintrock\n```\n\nIf you want to [contribute](https://github.com/nchammas/flintrock/blob/master/CONTRIBUTING.md), follow the instructions in our contributing guide on [how to install Flintrock](https://github.com/nchammas/flintrock/blob/master/CONTRIBUTING.md#contributing-code).\n\n## Use Cases\n\n### Experimentation\n\nIf you want to play around with Spark, develop a prototype application, run a one-off job, or otherwise just experiment, Flintrock is the fastest way to get you a working Spark cluster.\n\n### Performance testing\n\nFlintrock exposes many options of its underlying providers (e.g. EBS-optimized volumes on EC2) which makes it easy to create a cluster with predictable performance for [Spark performance testing](https://github.com/databricks/spark-perf).\n\n### Automated pipelines\n\nMost people will use Flintrock interactively from the command line, but Flintrock is also designed to be used as part of an automated pipeline. Flintrock's exit codes are carefully chosen; it offers options to disable interactive prompts; and when appropriate it prints output in YAML, which is both human- and machine-friendly.\n\n\n## Anti-Use Cases\n\nThere are some things that Flintrock specifically *does not* support.\n\n### Managing permanent infrastructure\n\nFlintrock is not for managing long-lived clusters, or any infrastructure that serves as a permanent part of some environment.\n\n  For starters, Flintrock provides no guarantee that clusters launched with one version of Flintrock can be managed by another version of Flintrock, and no considerations are made for any long-term use cases.\n\n  If you are looking for ways to manage permanent infrastructure, look at tools like [Terraform](https://www.terraform.io/), [Ansible](http://www.ansible.com/), [SaltStack](http://saltstack.com/), or [Ubuntu Juju](http://www.ubuntu.com/cloud/tools/juju). You might also find a service like [Databricks](https://databricks.com/product/databricks) useful if you're looking for someone else to host and manage Spark for you. Amazon also offers [Spark on EMR](https://aws.amazon.com/elasticmapreduce/details/spark/).\n\n### Launching non-Spark-related services\n\nFlintrock is meant for launching Spark clusters that include closely related services like HDFS, Mesos, and YARN.\n\n  Flintrock is not for launching external datasources (e.g. Cassandra), or other services that are not closely integrated with Spark (e.g. Tez).\n\n  If you are looking for an easy way to launch other services from the Hadoop ecosystem, look at the [Apache Bigtop](http://bigtop.apache.org/) project.\n\n### Launching out-of-date services\n\nFlintrock will always take advantage of new features of Spark and related services to make the process of launching a cluster faster, simpler, and easier to maintain. If that means dropping support for launching older versions of a service, then we will generally make that tradeoff.\n\n\n## Features\n\n### Polished CLI\n\nFlintrock has a clean command-line interface.\n\n```sh\nflintrock --help\nflintrock describe\nflintrock destroy --help\nflintrock launch test-cluster --num-slaves 10\n```\n\n### Configurable CLI Defaults\n\nFlintrock lets you persist your desired configuration to a YAML file so that you don't have to keep typing out the same options over and over at the command line.\n\nTo setup and edit the default config file, run this:\n\n```sh\nflintrock configure\n```\n\nYou can also point Flintrock to a non-default config file by using the `--config` option.\n\n#### Sample `config.yaml`\n\n```yaml\nprovider: ec2\n\nservices:\n  spark:\n    version: 3.3.0\n\nlaunch:\n  num-slaves: 1\n\nproviders:\n  ec2:\n    key-name: key_name\n    identity-file: /path/to/.ssh/key.pem\n    instance-type: m5.large\n    region: us-east-1\n    ami: ami-0aeeebd8d2ab47354\n    user: ec2-user\n```\n\nWith a config file like that, you can now launch a cluster with just this:\n\n```sh\nflintrock launch test-cluster\n```\n\nAnd if you want, you can even override individual options in your config file at the command line:\n\n```sh\nflintrock launch test-cluster \\\n    --num-slaves 10 \\\n    --ec2-instance-type r5.xlarge\n```\n\n### Fast Launches\n\nFlintrock is really fast. This is how quickly it can launch fully operational clusters on EC2 compared to [spark-ec2](https://github.com/amplab/spark-ec2).\n\n#### Setup\n\n* Provider: EC2\n* Instance type: `m3.large`\n* AMI:\n    * Flintrock: [Default Amazon Linux AMI](https://aws.amazon.com/amazon-linux-ami/)\n    * spark-ec2: [Custom spark-ec2 AMI](https://github.com/amplab/spark-ec2/tree/a990752575cd8b0ab25731d7820a55c714798ec3/ami-list)\n* Spark/Hadoop download source: S3\n* Launch time: Best of 6 tries\n\n#### Results\n\n| Cluster Size  | Flintrock Launch Time |  spark-ec2 Launch Time  |\n|---------------|----------------------:|------------------------:|\n| 1 slave       | 2m 06s                |     8m 44s              |\n| 50 slaves     | 2m 30s                |    37m 30s              |\n| 100 slaves    | 2m 42s                | 1h 06m 05s              |\n\nThe spark-ec2 launch times are sourced from [SPARK-5189](https://issues.apache.org/jira/browse/SPARK-5189).\n\nNote that AWS performance is highly variable, so you will not get these results consistently. They show the best case scenario for each tool, and not the typical case. For Flintrock, the typical launch time will be a minute or two longer.\n\n### Advanced Storage Setup\n\nFlintrock automatically configures any available [ephemeral storage](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html) on the cluster and makes it available to installed services like HDFS and Spark. This storage is fast and is perfect for use as a temporary store by those services.\n\n### Tests\n\nFlintrock comes with a set of automated, end-to-end [tests](https://github.com/nchammas/flintrock/tree/master/tests). These tests help us develop Flintrock with confidence and guarantee a certain level of quality.\n\n### Low-level Provider Options\n\nFlintrock exposes low-level provider options (e.g. [instance-initiated shutdown behavior](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#Using_ChangingInstanceInitiatedShutdownBehavior)) so you can control the details of how your cluster is setup if you want.\n\n### No Custom Machine Image Dependencies\n\nFlintrock is built and tested against vanilla Amazon Linux and CentOS. You can easily launch Flintrock clusters using your own custom machine images built from either of those distributions.\n\n\n## Anti-Features\n\n### Support for out-of-date versions of Python, EC2 APIs, etc.\n\nSupporting multiple versions of anything is tough. There's more surface area to cover for testing, and over the long term the maintenance burden of supporting something non-current with bug fixes and workarounds really adds up.\n\nThere are projects that support stuff across a wide cut of language or API versions. For example, Spark supports Java 7 and 8, and Python 2.6+ and 3+. The people behind these projects are gods. They take on an immense maintenance burden for the benefit and convenience of their users.\n\nWe here at project Flintrock are much more modest in our abilities. We are best able to serve the project over the long term when we limit ourselves to supporting a small but widely applicable set of configurations.\n\n\n## Motivation\n\n*Note: The explanation here is provided from the perspective of Flintrock's original author, Nicholas Chammas.*\n\nI got started with Spark by using [spark-ec2](https://github.com/amplab/spark-ec2). It's one of the biggest reasons I found Spark so accessible. I didn't need to spend time upfront working through some setup guide before I could work on a \"real\" problem. Instead, with a simple spark-ec2 command I was able to launch a large, working cluster and get straight to business.\n\nAs I became a heavy user of spark-ec2, several limitations stood out and became an increasing pain. They provided me with the motivation for this project.\n\nAmong those limitations, the most frustrating ones were:\n\n* **Slow launches**: spark-ec2 cluster launch times increase linearly with the number of slaves being created. For example, it takes spark-ec2 **[over an hour](https://issues.apache.org/jira/browse/SPARK-5189)** to launch a cluster with 100 slaves. ([SPARK-4325](https://issues.apache.org/jira/browse/SPARK-4325), [SPARK-5189](https://issues.apache.org/jira/browse/SPARK-5189))\n* **No support for configuration files**: spark-ec2 does not support reading options from a config file, so users are always forced to type them in at the command line. ([SPARK-925](https://issues.apache.org/jira/browse/SPARK-925))\n* **Un-resizable clusters**: Adding or removing slaves from an existing spark-ec2 cluster is not possible. ([SPARK-2008](https://issues.apache.org/jira/browse/SPARK-2008))\n* **Custom machine images**: spark-ec2 uses custom machine images, making it difficult for users to bring their own image. And since the process of updating those machine images is not automated, they have not been updated in years. ([SPARK-3821](https://issues.apache.org/jira/browse/SPARK-3821))\n\nI built Flintrock to address all of these shortcomings, which it does.\n\n### Why build Flintrock when we have EMR?\n\nI started work on Flintrock months before [EMR added support for Spark](https://aws.amazon.com/blogs/aws/new-apache-spark-on-amazon-emr/). It's likely that, had I considered building Flintrock a year later than I did, I would have decided against it.\n\nNow that Flintrock exists, many users appreciate the lower cost of running Flintrock clusters as compared to EMR, as well as Flintrock's simpler interface. And for my part, I enjoy working on Flintrock in my free time.\n\n### Why didn't you build Flintrock on top of an orchestration tool?\n\nPeople have asked me whether I considered building Flintrock on top of Ansible, Terraform, Docker, or something else. I looked into some of these things back when Flintrock was just an idea in my head and decided against using any of them for two basic reasons:\n\n1. **Fun**: I didn't have any experience with these tools, and it looked both simple enough and more fun to build something \"from scratch\".\n2. **Focus**: I wanted a single-purpose tool with a very limited focus, not a module or set of scripts that were part of a sprawling framework that did a lot of different things.\n\nThese are not necessarily the right reasons to build \"from scratch\", but they were my reasons. If you are already comfortable with any of the popular orchestration tools out there, you may find it more attractive to use them rather than add a new standalone tool to your toolchain.\n\n\n## About the Flintrock Logo\n\nThe [Flintrock logo](https://github.com/nchammas/flintrock/blob/master/flintrock-logo.png) was created using [Highbrow Cafetorium JNL](http://www.myfonts.com/fonts/jnlevine/highbrow-cafetorium/) and [this icon](https://thenounproject.com/term/stars/40856/). Licenses to use both the font and icon were purchased from their respective owners."
}
