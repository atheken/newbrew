{
  "name": "libphonenumber",
  "full_name": "libphonenumber",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "C++ Phone Number library by Google",
  "license": "Apache-2.0",
  "homepage": "https://github.com/google/libphonenumber",
  "versions": {
    "stable": "8.13.17",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/google/libphonenumber/archive/v8.13.17.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "c45a9ea02a3d41d48dcf2074dc5112fb6243581571426f9995256595dda060c9"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libphonenumber/blobs/sha256:e89ebb8631db41bc97e59a8f3208476acbb58b626e086dd32db20e555500fc64",
          "sha256": "e89ebb8631db41bc97e59a8f3208476acbb58b626e086dd32db20e555500fc64"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libphonenumber/blobs/sha256:bf209fd914f8953e981ac6bb10e926ce87429abb82396f47f265dfd65c45e4d5",
          "sha256": "bf209fd914f8953e981ac6bb10e926ce87429abb82396f47f265dfd65c45e4d5"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libphonenumber/blobs/sha256:44e2989f0fe32290e94218141afd8bf68bba78d60bbf04710671b8e73ef8fc08",
          "sha256": "44e2989f0fe32290e94218141afd8bf68bba78d60bbf04710671b8e73ef8fc08"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libphonenumber/blobs/sha256:b0a5929f90ec8845d19f28bb739b502316dc1246aa01d2112fbd7c5a8b766e48",
          "sha256": "b0a5929f90ec8845d19f28bb739b502316dc1246aa01d2112fbd7c5a8b766e48"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libphonenumber/blobs/sha256:f459e3cfbe214ebae9566892c8fd5453acc7be7f5c54cbb487c274d9ae4eba11",
          "sha256": "f459e3cfbe214ebae9566892c8fd5453acc7be7f5c54cbb487c274d9ae4eba11"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libphonenumber/blobs/sha256:1da3c1acd58764ff48ee5858b673b0eaa7c01dbd32c582da808a7b9bb2a50882",
          "sha256": "1da3c1acd58764ff48ee5858b673b0eaa7c01dbd32c582da808a7b9bb2a50882"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/libphonenumber/blobs/sha256:a23b6e3ae67e37aac7cf975f2f3ceadef0e82f058c45e2159d4369de357f947a",
          "sha256": "a23b6e3ae67e37aac7cf975f2f3ceadef0e82f058c45e2159d4369de357f947a"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake",
    "googletest",
    "openjdk"
  ],
  "dependencies": [
    "abseil",
    "boost",
    "icu4c",
    "protobuf",
    "re2"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/libphonenumber.rb",
  "ruby_source_checksum": {
    "sha256": "138b2ecf4e38dd30352fc4b23359d39787be646bf2afc5cb1add98ef362c531c"
  },
  "date_added": "2016-01-14T13:04:21+01:00",
  "readme": "<p align=\"right\">\n<img src=\"https://travis-ci.org/google/libphonenumber.svg?branch=master\">\n</p>\n\n# What is it?\n\nGoogle's common Java, C++ and JavaScript library for parsing, formatting, and\nvalidating international phone numbers. The Java version is optimized for\nrunning on smartphones, and is used by the Android framework since 4.0 (Ice\nCream Sandwich).\n\n# Quick links\n\n*   **Reporting an issue?** Want to send a pull request? See the [contribution\n    guidelines](CONTRIBUTING.md)\n*   Check the [frequently asked questions](FAQ.md)\n*   Fun! [Falsehoods Programmers Believe About Phone Numbers](FALSEHOODS.md)\n*   Look for\n    [`README`s](https://github.com/google/libphonenumber/find/master) in\n    directories relevant to the code you're interested in.\n*   For contributors and porters: [How to run the Java demo](run-java-demo.md)\n*   For porters: [How to make metadata changes](making-metadata-changes.md)\n\n# Highlights of functionality\n\n*   Parsing, formatting, and validating phone numbers for all countries/regions\n    of the world.\n*   `getNumberType` - gets the type of the number based on the number itself;\n    able to distinguish Fixed-line, Mobile, Toll-free, Premium Rate, Shared\n    Cost, VoIP, Personal Numbers, UAN, Pager, and Voicemail (whenever feasible).\n*   `isNumberMatch` - gets a confidence level on whether two numbers could be\n    the same.\n*   `getExampleNumber` and `getExampleNumberForType` - provide valid example\n    numbers for all countries/regions, with the option of specifying which type\n    of example phone number is needed.\n*   `isPossibleNumber` - quickly guesses whether a number is a possible\n    phone number by using only the length information, much faster than a full\n    validation.\n*   `isValidNumber` - full validation of a phone number for a region using\n    length and prefix information.\n*   `AsYouTypeFormatter` - formats phone numbers on-the-fly when users enter\n    each digit.\n*   `findNumbers` - finds numbers in text.\n*   `PhoneNumberOfflineGeocoder` - provides geographical information related to\n    a phone number.\n*   `PhoneNumberToCarrierMapper` - provides carrier information related to a\n    phone number.\n*   `PhoneNumberToTimeZonesMapper` - provides timezone information related to a\n    phone number.\n\n# Demo\n\n## Java\n\nThe [Java demo](https://libphonenumber.appspot.com/) is updated with a slight\ndelay after the GitHub release.\n\nLast demo update: v8.13.19.\n\nNote: Even though the library (main branch/[maven release](https://repo1.maven.org/maven2/com/googlecode/libphonenumber/libphonenumber/8.12.56/))\nis at v8.12.57, because of some deployment issues, we were unable to update the\nJava demo with the new binary version. We will soon fix this. Meantime, please\nuse JS demo.\n\nIf this number is lower than the [latest release's version\nnumber](https://github.com/google/libphonenumber/releases), we are between\nreleases and the demo may be at either version.\n\n## JavaScript\n\nThe [JavaScript\ndemo](https://htmlpreview.github.io/?https://github.com/google/libphonenumber/blob/master/javascript/i18n/phonenumbers/demo-compiled.html)\nmay be run at various tags; this link will take you to `master`.\n\n# Java code\n\nTo include the Java code in your application, either integrate with Maven (see\n[wiki](https://github.com/google/libphonenumber/wiki)) or download the latest\njars from the [Maven\nrepository](https://repo1.maven.org/maven2/com/googlecode/libphonenumber/libphonenumber/).\n\n# Javadoc\n\nJavadoc is automatically updated to reflect the latest release at\nhttps://javadoc.io/doc/com.googlecode.libphonenumber/libphonenumber/.\n\n# Versioning and Announcements\n\nWe generally choose the release number following these guidelines.\n\nIf any of the changes pushed to master since the last release are incompatible\nwith the intent / specification of an existing libphonenumber API or may cause\nlibphonenumber (Java, C++, or JS) clients to have to change their code to keep\nbuilding, we publish a major release. For example, if the last release were\n7.7.3, the new one would be 8.0.0.\n\nIf any of those changes *enable* clients to update their code to take advantage\nof new functionality, and if clients would have to roll-back these changes in\nthe event that the release was marked as \"bad\", we publish a minor release. For\nexample, we'd go from 7.7.3 to 7.8.0.\n\nOtherwise, including when a release contains only\n[metadata](FAQ.md#metadata_definition) changes, we publish a sub-minor release,\ne.g. 7.7.3 to 7.7.4.\n\nSometimes we make internal changes to the code or metadata that, while not\naffecting compatibility for clients, could affect compatibility for **porters**\nof the library. For such changes we make announcements to\n[libphonenumber-discuss](\nhttps://groups.google.com/forum/#!forum/libphonenumber-discuss). Such changes\nare not reflected in the version number, and we would publish a sub-minor\nrelease if there were no other changes.\n\nWant to get notified of new releases? During most of the year, excepting\nholidays and extenuating circumstances, we release fortnightly. We update\n[release tags](https://github.com/google/libphonenumber/releases) and\ndocument detailed [release notes](\nhttps://github.com/google/libphonenumber/blob/master/release_notes.txt).\nWe also send an announcement to [libphonenumber-discuss](\nhttps://groups.google.com/forum/#!forum/libphonenumber-discuss) for every\nrelease.\n\n# Quick Examples\n\nLet's say you have a string representing a phone number from Switzerland. This\nis how you parse/normalize it into a `PhoneNumber` object:\n\n```java\nString swissNumberStr = \"044 668 18 00\";\nPhoneNumberUtil phoneUtil = PhoneNumberUtil.getInstance();\ntry {\n  PhoneNumber swissNumberProto = phoneUtil.parse(swissNumberStr, \"CH\");\n} catch (NumberParseException e) {\n  System.err.println(\"NumberParseException was thrown: \" + e.toString());\n}\n```\n\nAt this point, `swissNumberProto` contains:\n\n```json\n{\n  \"country_code\": 41,\n  \"national_number\": 446681800\n}\n```\n\n`PhoneNumber` is a class that was originally auto-generated from\n`phonenumber.proto` with necessary modifications for efficiency. For details on\nthe meaning of each field, refer to `resources/phonenumber.proto`.\n\nNow let us validate whether the number is valid:\n\n```java\nboolean isValid = phoneUtil.isValidNumber(swissNumberProto); // returns true\n```\n\nThere are a few formats supported by the formatting method, as illustrated\nbelow:\n\n```java\n// Produces \"+41 44 668 18 00\"\nSystem.out.println(phoneUtil.format(swissNumberProto, PhoneNumberFormat.INTERNATIONAL));\n// Produces \"044 668 18 00\"\nSystem.out.println(phoneUtil.format(swissNumberProto, PhoneNumberFormat.NATIONAL));\n// Produces \"+41446681800\"\nSystem.out.println(phoneUtil.format(swissNumberProto, PhoneNumberFormat.E164));\n```\n\nYou could also choose to format the number in the way it is dialed from another\ncountry:\n\n```java\n// Produces \"011 41 44 668 1800\", the number when it is dialed in the United States.\nSystem.out.println(phoneUtil.formatOutOfCountryCallingNumber(swissNumberProto, \"US\"));\n```\n\n## Formatting Phone Numbers 'as you type'\n\n```java\nPhoneNumberUtil phoneUtil = PhoneNumberUtil.getInstance();\nAsYouTypeFormatter formatter = phoneUtil.getAsYouTypeFormatter(\"US\");\nSystem.out.println(formatter.inputDigit('6'));  // Outputs \"6\"\n...  // Input more digits\nSystem.out.println(formatter.inputDigit('3'));  // Now outputs \"650 253\"\n```\n\n## Geocoding Phone Numbers\n\n```java\nPhoneNumberOfflineGeocoder geocoder = PhoneNumberOfflineGeocoder.getInstance();\n// Outputs \"Zurich\"\nSystem.out.println(geocoder.getDescriptionForNumber(swissNumberProto, Locale.ENGLISH));\n// Outputs \"Zürich\"\nSystem.out.println(geocoder.getDescriptionForNumber(swissNumberProto, Locale.GERMAN));\n// Outputs \"Zurigo\"\nSystem.out.println(geocoder.getDescriptionForNumber(swissNumberProto, Locale.ITALIAN));\n```\n\n## Mapping Phone Numbers to original carriers\n\nCaveat: We do not provide data about the current carrier of a phone number, only\nthe original carrier who is assigned the corresponding range. Read about [number\nportability](FAQ.md#what-is-mobile-number-portability).\n\n```java\nPhoneNumber swissMobileNumber =\n    new PhoneNumber().setCountryCode(41).setNationalNumber(798765432L);\nPhoneNumberToCarrierMapper carrierMapper = PhoneNumberToCarrierMapper.getInstance();\n// Outputs \"Swisscom\"\nSystem.out.println(carrierMapper.getNameForNumber(swissMobileNumber, Locale.ENGLISH));\n```\n\nMore examples on how to use the library can be found in the [unit\ntests](https://github.com/google/libphonenumber/tree/master/java/libphonenumber/test/com/google/i18n/phonenumbers).\n\n# Third-party Ports\n\nSeveral third-party ports of the phone number library are known to us. We share\nthem here in case they're useful for developers.\n\nHowever, we emphasize that these ports are by developers outside the\nlibphonenumber project. We do not evaluate their quality or influence their\nmaintenance processes.\n\n*   C#: https://github.com/twcclegg/libphonenumber-csharp\n*   Go: https://github.com/nyaruka/phonenumbers\n*   Objective-c: https://github.com/iziz/libPhoneNumber-iOS\n*   Swift: https://github.com/marmelroy/PhoneNumberKit\n*   PHP: https://github.com/giggsey/libphonenumber-for-php\n*   PostgreSQL in-database types: https://github.com/blm768/pg-libphonenumber\n*   Python: https://github.com/daviddrysdale/python-phonenumbers\n*   Ruby: https://github.com/ianks/mini_phone\n*   Ruby: https://github.com/daddyz/phonelib\n*   Ruby: https://github.com/mobi/telephone_number\n*   Rust: https://github.com/1aim/rust-phonenumber\n*   Erlang: https://github.com/marinakr/libphonenumber_erlang\n*   Clojure: https://github.com/randomseed-io/phone-number\n*   R: https://github.com/socialresearchcentre/dialr/\n*   Elixir: https://github.com/socialpaymentsbv/ex_phone_number\n*   Salesforce: https://appexchange.salesforce.com/appxListingDetail?listingId=a0N3A00000G12oJUAR\n\nAlternatives to our own versions:\n\n*   Android-optimized: Our Java version loads the metadata from\n    `Class#getResourcesAsStream` and asks that Android apps follow the Android\n    loading best practices of repackaging the metadata and loading from\n    `AssetManager#open()` themselves\n    ([FAQ](https://github.com/google/libphonenumber/blob/master/FAQ.md#optimize-loads)).\n    If you don't want to do this, check out the port at\n    https://github.com/MichaelRocks/libphonenumber-android, which does repackage\n    the metadata and use `AssetManager#open()`, and may be depended on without\n    needing those specific loading optimizations from clients. You should also check\n    out the port at https://github.com/lionscribe/libphonenumber-android which also\n    supports geocoding, and only requires a one line code change.\n*   Javascript: If you don't want to use our version, which depends on Closure,\n    there are several other options, including\n    https://github.com/catamphetamine/libphonenumber-js - a stripped-down\n    rewrite, about 110 KB in size - and\n    https://github.com/seegno/google-libphonenumber - a browserify-compatible\n    wrapper around the original unmodified library installable via npm, which\n    packs the Google Closure library, about 420 KB in size.\n\nTools based on libphonenumber metadata:\n\n*   Scala: https://github.com/mr-tolmach/raf - library for generating valid phone numbers in the E.164 format"
}
