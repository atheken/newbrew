{
  "name": "doc8",
  "full_name": "doc8",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Style checker for Sphinx documentation",
  "license": "Apache-2.0",
  "homepage": "https://github.com/PyCQA/doc8",
  "versions": {
    "stable": "1.1.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://files.pythonhosted.org/packages/a1/b5/63a2f2ceba95be5cc15813fd310d560264e8662dbd7495669a1e26d59026/doc8-1.1.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "d97a93e8f5a2efc4713a0804657dedad83745cca4cd1d88de9186f77f9776004"
    },
    "head": {
      "url": "https://github.com/PyCQA/doc8.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/doc8/blobs/sha256:894235ad2cded34e1072772a8df17f42432e6e8dcb9aff59d252c78f7ddd3fe7",
          "sha256": "894235ad2cded34e1072772a8df17f42432e6e8dcb9aff59d252c78f7ddd3fe7"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/doc8/blobs/sha256:7c91549a8ebe1453a0f98a575c0543c3d60a1411634b39d799d4d0da3d3b0780",
          "sha256": "7c91549a8ebe1453a0f98a575c0543c3d60a1411634b39d799d4d0da3d3b0780"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/doc8/blobs/sha256:fc2acb3dce64a72ebbadd46bf579d3484c700d133de53ef306f1ff9ef56732d0",
          "sha256": "fc2acb3dce64a72ebbadd46bf579d3484c700d133de53ef306f1ff9ef56732d0"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/doc8/blobs/sha256:844310402007a53b10c4af06a289ad096097156d165c27b62885726cebf32fba",
          "sha256": "844310402007a53b10c4af06a289ad096097156d165c27b62885726cebf32fba"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/doc8/blobs/sha256:cc36ed9318a5ed8aa742e270dd7f6c63efc7d28984390f21790fb217ab779cc5",
          "sha256": "cc36ed9318a5ed8aa742e270dd7f6c63efc7d28984390f21790fb217ab779cc5"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/doc8/blobs/sha256:970258070670b9bda9a05ef6549a032eb42dd3d105c76f9399eb73eadd7610e7",
          "sha256": "970258070670b9bda9a05ef6549a032eb42dd3d105c76f9399eb73eadd7610e7"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/doc8/blobs/sha256:81cb6a88c01fa3565eaea21f3ce16d52cca08d078c435e635220f07180bf2102",
          "sha256": "81cb6a88c01fa3565eaea21f3ce16d52cca08d078c435e635220f07180bf2102"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "docutils",
    "pygments",
    "python@3.11"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/doc8.rb",
  "ruby_source_checksum": {
    "sha256": "a30638fcfeebe8487877d97e8c57d3e87624c5943a07d6a603a84377ad556324"
  },
  "date_added": "2021-07-26T07:50:42+00:00",
  "readme": ".. image:: https://img.shields.io/pypi/v/doc8?logo=python&logoColor=white\n   :target: https://pypi.org/project/doc8/\n   :alt: PyPI\n\n.. image:: https://img.shields.io/github/actions/workflow/status/PyCQA/doc8/tox.yml?label=tox&logo=github&logoColor=white\n   :target: https://github.com/PyCQA/doc8/actions\n   :alt: CI\n\n.. image:: https://img.shields.io/pypi/l/doc8\n   :target: https://github.com/PyCQA/doc8/blob/main/LICENSE\n   :alt: PyPI - License\n\n.. image:: https://img.shields.io/github/last-commit/pycqa/doc8\n   :target: https://github.com/PyCQA/doc8/commits/main\n   :alt: GitHub last commit\n\n.. image:: https://img.shields.io/readthedocs/doc8/stable?logo=readthedocs&logoColor=white\n   :target: https://doc8.readthedocs.io/en/stable/index.html\n   :alt: Read the Docs (stable)\n\n====\ndoc8\n====\n\n*doc8* is an *opinionated* style checker for rst__ (with basic support for\nplain text) styles of documentation.\n\n__ http://docutils.sourceforge.net/docs/ref/rst/introduction.html\n\nQuick start\n-----------\n\n::\n\n    pip install doc8\n\nTo run *doc8*, just invoke it against any documentation directory::\n\n    $ doc8 cool-project/docs\n\nUsage\n-----\n\n::\n\n    $ doc8  -h\n\n    usage: doc8 [-h] [--config path] [--allow-long-titles] [--ignore code]\n                [--no-sphinx] [--ignore-path path] [--ignore-path-errors path]\n                [--default-extension extension] [--file-encoding encoding]\n                [--max-line-length int] [-e extension] [-v] [--version]\n                [path [path ...]]\n\n    Check documentation for simple style requirements.\n\n    What is checked:\n        - invalid RST format - D000\n        - lines should not be longer than 79 characters - D001\n          - RST exception: line with no whitespace except in the beginning\n          - RST exception: lines with http or https urls\n          - RST exception: literal blocks\n          - RST exception: rst target directives\n        - no trailing whitespace - D002\n        - no tabulation for indentation - D003\n        - no carriage returns (use unix newlines) - D004\n        - no newline at end of file - D005\n\n    positional arguments:\n      path                  Path to scan for doc files (default: current\n                            directory).\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --config path         user config file location (default: .config/doc8.ini, doc8.ini, tox.ini,\n                            pep8.ini, setup.cfg).\n      --allow-long-titles   allow long section titles (default: false).\n      --ignore code         ignore the given error code(s).\n      --no-sphinx           do not ignore sphinx specific false positives.\n      --ignore-path path    ignore the given directory or file (globs are\n                            supported).\n      --ignore-path-errors path\n                            ignore the given specific errors in the provided file.\n      --default-extension extension\n                            default file extension to use when a file is found\n                            without a file extension.\n      --file-encoding encoding\n                            set input files text encoding\n      --max-line-length int\n                            maximum allowed line length (default: 79).\n      -e extension, --extension extension\n                            check file extensions of the given type (default:\n                            .rst, .txt).\n      -q, --quiet           only print violations\n      -v, --verbose         run in verbose mode.\n      --version             show the version and exit.\n\nINI file usage\n~~~~~~~~~~~~~~\n\nInstead of using the CLI for options the following files will also be examined\nfor ``[doc8]`` sections that can also provide the same set of options. If\nthe ``--config path`` option is used, these files will **not** be scanned for\nthe current working directory and that configuration path will be used\ninstead.\n\n* ``$CWD/doc8.ini``\n* ``$CWD/.config/doc8.ini``\n* ``$CWD/tox.ini``\n* ``$CWD/pep8.ini``\n* ``$CWD/setup.cfg``\n* ``$CWD/pyproject.toml``\n\nAn example section that can be placed into one of these files::\n\n    [doc8]\n\n    ignore-path=/tmp/stuff,/tmp/other_stuff\n    max-line-length=99\n    verbose=1\n    ignore-path-errors=/tmp/other_thing.rst;D001;D002\n\n**Note:** The option names are the same as the command line ones (with the\nonly variation of this being the ``no-sphinx`` option which from the\nconfiguration file will be ``sphinx`` instead).\n\nOption conflict resolution\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen the same option is passed on the command line and also via configuration\nfiles the following strategies are applied to resolve these types of conflicts.\n\n======================   ===========  ========\nOption                   Overrides    Merges\n======================   ===========  ========\n``allow-long-titles``    Yes          No\n``ignore-path-errors``   No           Yes\n``default-extension``    Yes          No\n``extension``            No           Yes\n``ignore-path``          No           Yes\n``ignore``               No           Yes\n``max-line-length``      Yes          No\n``file-encoding``        Yes          No\n``sphinx``               Yes          No\n======================   ===========  ========\n\n**Note:** In the above table the configuration file option when specified as\n*overrides* will replace the same option given via the command line. When\n*merges* is stated then the option will be combined with the command line\noption (for example by becoming a larger list or set of values that contains\nthe values passed on the command line *and* the values passed via\nconfiguration).\n\n\nAPI\n---\n\nIt is also possible to use *doc8* programmatically. To call *doc8* from a\nPython project, use::\n\n    from doc8 import doc8\n\n    result = doc8(allow_long_titles=True, max_line_length=99)\n\nThe returned ``result`` will have the following attributes and methods:\n\n* ``result.files_selected`` - number of files selected\n* ``result.files_ignored`` - number of files ignored\n* ``result.error_counts`` - ``dict`` of ``{check_name: error_count}``\n* ``result.total_errors`` - total number of errors found\n* ``result.errors`` - list of\n  ``(check_name, filename, line_num, code, message)`` tuples\n* ``result.report()`` - returns a human-readable report as a string\n\nThe ``doc8`` method accepts the same arguments as the executable. Simply\nreplace hyphens with underscores.\n\n**Note:** Calling ``doc8`` in this way will not write to stdout, so the\n``quiet`` and ``verbose`` options are ignored."
}
