{
  "name": "tl-expected",
  "full_name": "tl-expected",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "C++11/14/17 std::expected with functional-style extensions",
  "license": "CC0-1.0",
  "homepage": "https://github.com/TartanLlama/expected",
  "versions": {
    "stable": "1.1.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/TartanLlama/expected/archive/refs/tags/v1.1.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "1db357f46dd2b24447156aaf970c4c40a793ef12a8a9c2ad9e096d9801368df6"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tl-expected/blobs/sha256:a4f5529f01b84221d36646a9170d1f48c7fb83f38c185f95f4349109ee26f978",
          "sha256": "a4f5529f01b84221d36646a9170d1f48c7fb83f38c185f95f4349109ee26f978"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/tl-expected.rb",
  "ruby_source_checksum": {
    "sha256": "e871337eec456f2a2eea3ae11caaaff769416b3707fc605113f122d1533716ec"
  },
  "date_added": "2023-02-09T17:37:40+00:00",
  "readme": "# expected\nSingle header implementation of `std::expected` with functional-style extensions.\n\n[![Documentation Status](https://readthedocs.org/projects/tl-docs/badge/?version=latest)](https://tl.tartanllama.xyz/en/latest/?badge=latest)\nClang + GCC: [![Linux Build Status](https://github.com/TartanLlama/expected/actions/workflows/cmake.yml/badge.svg)](https://github.com/TartanLlama/expected/actions/workflows/cmake.yml)\nMSVC: [![Windows Build Status](https://ci.appveyor.com/api/projects/status/k5x00xa11y3s5wsg?svg=true)](https://ci.appveyor.com/project/TartanLlama/expected)\n\nAvailable on [Vcpkg](https://github.com/microsoft/vcpkg/tree/master/ports/tl-expected) and [Conan](https://github.com/yipdw/conan-tl-expected).\n\n[`std::expected`](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0323r3.pdf) is proposed as the preferred way to represent object which will either have an expected value, or an unexpected value giving information about why something failed. Unfortunately, chaining together many computations which may fail can be verbose, as error-checking code will be mixed in with the actual programming logic. This implementation provides a number of utilities to make coding with `expected` cleaner.\n\nFor example, instead of writing this code:\n\n```cpp\nstd::expected<image,fail_reason> get_cute_cat (const image& img) {\n    auto cropped = crop_to_cat(img);\n    if (!cropped) {\n      return cropped;\n    }\n\n    auto with_tie = add_bow_tie(*cropped);\n    if (!with_tie) {\n      return with_tie;\n    }\n\n    auto with_sparkles = make_eyes_sparkle(*with_tie);\n    if (!with_sparkles) {\n       return with_sparkles;\n    }\n\n    return add_rainbow(make_smaller(*with_sparkles));\n}\n```\n\nYou can do this:\n\n```cpp\ntl::expected<image,fail_reason> get_cute_cat (const image& img) {\n    return crop_to_cat(img)\n           .and_then(add_bow_tie)\n           .and_then(make_eyes_sparkle)\n           .map(make_smaller)\n           .map(add_rainbow);\n}\n```\n\nThe interface is the same as `std::expected` as proposed in [p0323r3](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0323r3.pdf), but the following member functions are also defined. Explicit types are for clarity.\n\n- `map`: carries out some operation on the stored object if there is one.\n  * `tl::expected<std::size_t,std::error_code> s = exp_string.map(&std::string::size);`\n- `map_error`: carries out some operation on the unexpected object if there is one.\n  * `my_error_code translate_error (std::error_code);`\n  * `tl::expected<int,my_error_code> s = exp_int.map_error(translate_error);`\n- `and_then`: like `map`, but for operations which return a `tl::expected`.\n  * `tl::expected<ast, fail_reason> parse (const std::string& s);`\n  * `tl::expected<ast, fail_reason> exp_ast = exp_string.and_then(parse);`\n- `or_else`: calls some function if there is no value stored.\n  * `exp.or_else([] { throw std::runtime_error{\"oh no\"}; });`\n\np0323r3 specifies calling `.error()` on an expected value, or using the `*` or `->` operators on an unexpected value, to be undefined behaviour. In this implementation it causes an assertion failure. The implementation of assertions can be overridden by defining the macro `TL_ASSERT(boolean_condition)` before #including <tl/expected.hpp>; by default, `assert(boolean_condition)` from the `<cassert>` header is used. Note that correct code would not rely on these assertions.\n\n### Compiler support\n\nTested on:\n\n- Linux\n  * clang++ 3.5, 3.6, 3.7, 3.8, 3.9, 4, 5, 6, 7, 8, 9, 10, 11\n  * g++ 4.8, 4.9, 5.5, 6.4, 7.5, 8, 9, 10 \n- Windows\n  * MSVC 2015, 2017, 2019, 2022\n\n----------\n\n[![CC0](http://i.creativecommons.org/p/zero/1.0/88x31.png)](\"http://creativecommons.org/publicdomain/zero/1.0/\")\n\nTo the extent possible under law, [Sy Brand](https://twitter.com/TartanLlama) has waived all copyright and related or neighboring rights to the `expected` library. This work is published from: United Kingdom."
}
