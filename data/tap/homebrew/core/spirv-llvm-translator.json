{
  "name": "spirv-llvm-translator",
  "full_name": "spirv-llvm-translator",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Tool and a library for bi-directional translation between SPIR-V and LLVM IR",
  "license": "Apache-2.0 with LLVM-exception",
  "homepage": "https://github.com/KhronosGroup/SPIRV-LLVM-Translator",
  "versions": {
    "stable": "16.0.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/KhronosGroup/SPIRV-LLVM-Translator/archive/refs/tags/v16.0.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "305fac5bb8efdad9054f0d27b5b765aca8b3349a500e2ba0c927763e42badc2b"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/spirv-llvm-translator/blobs/sha256:33089120098629f38fc95bf77e546b88621fc17d728a1ac1696e9f3ed0d05990",
          "sha256": "33089120098629f38fc95bf77e546b88621fc17d728a1ac1696e9f3ed0d05990"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/spirv-llvm-translator/blobs/sha256:8019ed273411a8735364c93f62ee983453b6d6e3537b26e5c1276b6fabc8ee4c",
          "sha256": "8019ed273411a8735364c93f62ee983453b6d6e3537b26e5c1276b6fabc8ee4c"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/spirv-llvm-translator/blobs/sha256:08998820e25b83bc260fb003a804bd1a48d45b8d5d1a59cb7fc855bc4aeaebf8",
          "sha256": "08998820e25b83bc260fb003a804bd1a48d45b8d5d1a59cb7fc855bc4aeaebf8"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/spirv-llvm-translator/blobs/sha256:452c59b3c06adb9fee5b6994f5ca671e9613b9496f9fb123438232b91accfdda",
          "sha256": "452c59b3c06adb9fee5b6994f5ca671e9613b9496f9fb123438232b91accfdda"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/spirv-llvm-translator/blobs/sha256:7a651c2959c2599b8566672a2a673b3b57fa063aac59c9a52d65346cdff06348",
          "sha256": "7a651c2959c2599b8566672a2a673b3b57fa063aac59c9a52d65346cdff06348"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/spirv-llvm-translator/blobs/sha256:b11a428a3045237d0b7208c85e420a6020337004dd07de66ce44804ad3a9a17e",
          "sha256": "b11a428a3045237d0b7208c85e420a6020337004dd07de66ce44804ad3a9a17e"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/spirv-llvm-translator/blobs/sha256:34b47b6b0a422ea03383704b5fdf61703bcae7f72249f640a478db25780e49d3",
          "sha256": "34b47b6b0a422ea03383704b5fdf61703bcae7f72249f640a478db25780e49d3"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [
    "llvm"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/spirv-llvm-translator.rb",
  "ruby_source_checksum": {
    "sha256": "753aec7b69e8e0f1fd58815bb1641ab5b80ea30bc0a0892a5e39979ec69ac083"
  },
  "date_added": "2021-08-29T14:40:06+00:00",
  "readme": "# LLVM/SPIR-V Bi-Directional Translator\n\n[![Out-of-tree build & tests](https://github.com/KhronosGroup/SPIRV-LLVM-Translator/workflows/Out-of-tree%20build%20&%20tests/badge.svg?branch=main&event=schedule)](https://github.com/KhronosGroup/SPIRV-LLVM-Translator/actions?query=workflow%3A%22Out-of-tree+build+%26+tests%22+event%3Aschedule)\n[![In-tree build & tests](https://github.com/KhronosGroup/SPIRV-LLVM-Translator/workflows/In-tree%20build%20&%20tests/badge.svg?branch=main&event=schedule)](https://github.com/KhronosGroup/SPIRV-LLVM-Translator/actions?query=workflow%3A%22In-tree+build+%26+tests%22+event%3Aschedule)\n\nThis repository contains source code for the LLVM/SPIR-V Bi-Directional Translator, a library and tool for translation between LLVM IR and [SPIR-V](https://www.khronos.org/registry/spir-v/).\n\nThe LLVM/SPIR-V Bi-Directional Translator is open source software. You may freely distribute it under the terms of the license agreement found in LICENSE.txt.\n\n\n## Directory Structure\n\n\nThe files/directories related to the translator:\n\n* [include/LLVMSPIRVLib.h](include/LLVMSPIRVLib.h) - header file\n* [lib/SPIRV](lib/SPIRV) - library for SPIR-V in-memory representation, decoder/encoder and LLVM/SPIR-V translator\n* [tools/llvm-spirv](tools/llvm-spirv) - command line utility for translating between LLVM bitcode and SPIR-V binary\n\n## Build Instructions\n\nThe `main` branch of this repo is aimed to be buildable with the latest\nLLVM `main` revision.\n\n### Build with pre-installed LLVM\n\nThe translator can be built with the latest(nightly) package of LLVM. For Ubuntu and Debian systems LLVM provides repositories with nightly builds at http://apt.llvm.org/. For example the latest package for Ubuntu 16.04 can be installed with the following commands:\n```\nwget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -\nsudo add-apt-repository \"deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial main\"\nsudo apt-get update\nsudo apt-get install llvm-18-dev llvm-18-tools clang-18 libclang-18-dev\n```\nThe installed version of LLVM will be used by default for out-of-tree build of the translator.\n```\ngit clone https://github.com/KhronosGroup/SPIRV-LLVM-Translator.git\nmkdir SPIRV-LLVM-Translator/build && cd SPIRV-LLVM-Translator/build\ncmake ..\nmake llvm-spirv -j`nproc`\n```\n\n### Build with pre-built LLVM\n\nIf you have a custom build (based on the latest version) of LLVM libraries you\ncan link the translator against it.\n\n```\ngit clone https://github.com/KhronosGroup/SPIRV-LLVM-Translator.git\nmkdir SPIRV-LLVM-Translator/build && cd SPIRV-LLVM-Translator/build\ncmake .. -DLLVM_DIR=<llvm_build_dir>/lib/cmake/llvm/\nmake llvm-spirv -j`nproc`\n```\n\nIf the translator is used as part of another CMake project, you will need\nto define `LLVM_SPIRV_BUILD_EXTERNAL`:\n\n```\ncmake .. -DLLVM_DIR=<llvm_build_dir>/lib/cmake/llvm/ -DLLVM_SPIRV_BUILD_EXTERNAL=YES\n```\n\nWhere `llvm_build_dir` is the LLVM build directory.\n\n### LLVM in-tree build\n\nThe translator can be built as a regular LLVM subproject. To do that you need to clone it into the `llvm/projects` or `llvm/tools` directory.\n```\ngit clone https://github.com/llvm/llvm-project.git\ncd llvm-project/llvm/projects\ngit clone https://github.com/KhronosGroup/SPIRV-LLVM-Translator.git\n```\nRun (or re-run) cmake as usual for LLVM. After that you should have `llvm-spirv` and `check-llvm-spirv` targets available.\n```\nmkdir llvm-project/build && cd llvm-project/build\ncmake ../llvm -DLLVM_ENABLE_PROJECTS=\"clang\"\nmake llvm-spirv -j`nproc`\n```\n\nNote on enabling the `clang` project: there are tests in the translator that depend\non `clang` binary, which makes clang a required dependency (search for\n`LLVM_SPIRV_TEST_DEPS` in [test/CMakeLists.txt](test/CMakeLists.txt)) for\n`check-llvm-spirv` target.\n\nBuilding clang from sources takes time and resources and it can be avoided:\n- if you are not interested in launching unit-tests for the translator after\n  build, you can disable generation of test targets by passing\n  `-DLLVM_SPIRV_INCLUDE_TESTS=OFF` option.\n- if you are interested in launching unit-tests, but don't want to build clang\n  you can pass `-DSPIRV_SKIP_CLANG_BUILD` cmake option to avoid adding `clang`\n  as dependency for `check-llvm-spirv` target. However, LIT will search for\n  `clang` binary when tests are launched and it should be available at this\n  point.\n- building and testing completely without `clang` is not supported at the\n  moment, see [KhronosGroup/SPIRV-LLVM-Translator#477](https://github.com/KhronosGroup/SPIRV-LLVM-Translator/issues/477)\n  to track progress, discuss and contribute.\n\n### Build with SPIRV-Tools\n\nThe translator can use [SPIRV-Tools](https://github.com/KhronosGroup/SPIRV-Tools) to generate assembly with widely adopted syntax.\nIf SPIRV-Tools have been installed prior to the build it will be detected and\nused automatically. However it is also possible to enable use of SPIRV-Tools\nfrom a custom location using the following instructions:\n\n1. Checkout, build and install SPIRV-Tools using\n   [the following instructions](https://github.com/KhronosGroup/SPIRV-Tools#build).\n   Example using CMake with Ninja:\n```\ncmake -G Ninja <SPIRV-Tools source location> -DCMAKE_INSTALL_PREFIX=<SPIRV-Tools installation location>\nninja install\n```\n2. Point pkg-config to the SPIR-V tools installation when configuring the translator by setting\n   `PKG_CONFIG_PATH=<SPIRV-Tools installation location>/lib/pkgconfig/` variable\n   before the cmake line invocation.\n   Example:\n```\nPKG_CONFIG_PATH=<SPIRV-Tools installation location>/lib/pkgconfig/ cmake <other options>\n```\n\nTo verify the SPIR-V Tools integration in the translator build, run the following line\n```\nllvm-spirv --spirv-tools-dis input.bc -o -\n```\nThe output should be printed in the standard assembly syntax.\n\n## Configuring SPIR-V Headers\n\nThe translator build is dependent on the official Khronos header file\n`spirv.hpp` that maps SPIR-V extensions, decorations, instructions,\netc. onto numeric tokens. The official header version is available at\n[KhronosGroup/SPIRV-Headers](https://github.com/KhronosGroup/SPIRV-Headers).\nThere are several options for accessing the header file:\n- By default, the header file repository will be downloaded from\n  Khronos Group GitHub and put into `<build_dir>/SPIRV-Headers`.\n- If you are building the translator in-tree, you can manually\n  download the SPIR-V Headers repo into `llvm/projects` - this\n  location will be automatically picked up by the LLVM build\n  scripts. Make sure the folder retains its default naming in\n  that of `SPIRV-Headers`.\n- Any build type can also use an external installation of SPIR-V\n  Headers - if you have the headers downloaded somewhere in your\n  system and want to use that version, simply extend your CMake\n  command with `-DLLVM_EXTERNAL_PROJECTS=\"SPIRV-Headers\"\n  -DLLVM_EXTERNAL_SPIRV_HEADERS_SOURCE_DIR=</path/to/headers_dir>`.\n\n## Test instructions\n\nAll tests related to the translator are placed in the [test](test) directory. A number of the tests require spirv-as (part of SPIR-V Tools) to run, but the remainder of the tests can still be run without this. Optionally the tests can make use of spirv-val (part of SPIRV-Tools) in order to validate the generated SPIR-V against the official SPIR-V specification.\n\nIn case tests are failing due to SPIRV-Tools not supporting certain SPIR-V features, please get an updated package. The `PKG_CONFIG_PATH` environmental variable can be used to let cmake point to a custom installation.\n\nExecute the following command inside the build directory to run translator tests:\n```\nmake test\n```\nThis requires that the `-DLLVM_SPIRV_INCLUDE_TESTS=ON` argument is\npassed to CMake during the build step. Additionally,\n`-DLLVM_EXTERNAL_LIT=\"/usr/lib/llvm-18/build/utils/lit/lit.py\"` is\nneeded when building with a pre-installed version of LLVM.\n\nThe translator test suite can be disabled by passing\n`-DLLVM_SPIRV_INCLUDE_TESTS=OFF` to CMake.\n\n## Run Instructions for `llvm-spirv`\n\n\nTo translate between LLVM IR and SPIR-V:\n\n1. Execute the following command to translate `input.bc` to `input.spv`\n    ```\n    llvm-spirv input.bc\n    ```\n\n2. Execute the following command to translate `input.spv` to `input.bc`\n    ```\n    llvm-spirv -r input.spv\n    ```\n    Recommended options:\n    * `-spirv-target-env` - to specify target version of OpenCL builtins to translate to (default CL1.2)\n\n3. Other options accepted by `llvm-spirv`\n\n    * `-o file_name` - to specify output name\n    * `-spirv-debug` - output debugging information\n    * `-spirv-text` - read/write SPIR-V in an internal textual format for debugging purpose. The textual format is not defined by SPIR-V spec.\n    * `--spirv-tools-dis` - print SPIR-V assembly in SPIRV-Tools format. Only available on [builds with SPIRV-Tools](#build-with-spirv-tools).\n    * `-help` - to see full list of options\n\nTranslation from LLVM IR to SPIR-V and then back to LLVM IR is not guaranteed to\nproduce the original LLVM IR.  In particular, LLVM intrinsic call instructions\nmay get replaced by function calls to OpenCL builtins and metadata may be\ndropped.\n\n### Handling SPIR-V versions generated by the translator\n\nThere is one option to control the behavior of the translator with respect to\nthe version of the SPIR-V file which is being generated/consumed.\n\n* `-spirv-max-version=` - this option allows restricting the\n  SPIRV-LLVM-Translator **not** to generate a SPIR-V with a version which is\n  higher than the one specified via this option.\n\n  If the `-r` option was also specified, the SPIRV-LLVM-Translator will reject\n  the input file and emit an error if the SPIR-V version in it is higher than\n  one specified via this option.\n\nAllowed values are `1.0`, `1.1`, `1.2`, `1.3`, and `1.4`.\n\nMore information can be found in\n[SPIR-V versions and extensions handling](docs/SPIRVVersionsAndExtensionsHandling.rst)\n\n### Handling SPIR-V extensions generated by the translator\n\nBy default, during SPIR-V generation, the translator doesn't use any extensions.\nHowever, during SPIR-V consumption, the translator accepts input files that use\nany known extensions.\n\nIf certain extensions are required to be enabled or disabled, the following\ncommand line option can be used:\n\n* ``--spirv-ext=`` - this options allows controlling which extensions are\n  allowed/disallowed\n\nValid value for this option is comma-separated list of extension names prefixed\nwith ``+`` or ``-`` - plus means allow to use extension, minus means disallow\nto use extension. There is one more special value which can be used as extension\nname in this option: ``all`` - it affects all extension which are known to the\ntranslator.\n\nIf ``--spirv-ext`` contains the name of an extension which is not known for the\ntranslator, it will emit an error.\n\nMore information can be found in\n[SPIR-V versions and extensions handling](docs/SPIRVVersionsAndExtensionsHandling.rst)\n\n## Branching strategy\n\nCode on the main branch in this repository is intended to be compatible with\nthe main branch of the [llvm](https://github.com/llvm/llvm-project)\nproject. That is, for an OpenCL kernel compiled to llvm bitcode by the latest\ngit revision of Clang it should be possible to translate it to SPIR-V with the\nllvm-spirv tool.\n\nAll new development should be done on the main branch.\n\nTo have versions compatible with released versions of LLVM and Clang,\ncorresponding tags are available in this repository. For example, to build\nthe translator with\n[LLVM 7.0.0](https://github.com/llvm/llvm-project/tree/llvmorg-7.0.0)\none should use the\n[v7.0.0-1](https://github.com/KhronosGroup/SPIRV-LLVM-Translator/tree/v7.0.0-1)\ntag. The 7.x releases are maintained on the\n[llvm_release_70](https://github.com/KhronosGroup/SPIRV-LLVM-Translator/tree/llvm_release_70)\nbranch. As a general rule, commits from the main branch may be backported to\nthe release branches as long as they do not depend on features from a later\nLLVM/Clang release and there are no objections from the maintainer(s). There\nis no guarantee that older release branches are proactively kept up to date\nwith main, but you can request specific commits on older release branches by\ncreating a pull request or raising an issue on GitHub."
}
