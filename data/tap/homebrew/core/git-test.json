{
  "name": "git-test",
  "full_name": "git-test",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Run tests on each distinct tree in a revision list",
  "license": "Apache-2.0",
  "homepage": "https://github.com/spotify/git-test",
  "versions": {
    "stable": "1.0.4",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/spotify/git-test/archive/v1.0.4.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "7c2331c8dc3c815e440ffa1a4dc7a9ff8a28a0a8cbfd195282f53c3e4cb2ee00"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-test/blobs/sha256:fee9ffb3bdf734e1fdbc4d6b5348ee774af974bf214a778944651231d13b5d55",
          "sha256": "fee9ffb3bdf734e1fdbc4d6b5348ee774af974bf214a778944651231d13b5d55"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/git-test.rb",
  "ruby_source_checksum": {
    "sha256": "3338d6ffb5a0dce12258e0c7b6b2d8817c47bd0ab900ba394850b4d67d6ebc72"
  },
  "date_added": "2015-04-02T14:35:06+01:00",
  "readme": "# git-test -- test your commits\n\nRun tests on each *distinct* tree in a revision list, skipping versions whose\ncontents have already been tested.\n\nThe 99% example is simply:\n\n    git test -v\n\nBy default it uses heuristics to try to determine what \"local commits\" to\ntest, but you can supply another ref spec. `git-test` looks at each commit and\nchecks the hash of the directory tree against the cache. You can also configure\na ref (usually a branch) to test against, per repo or or per branch.\n\nFrom the point of view of `git-test`, a test can be any shell command and a\ntest is considered successful if that shell command returns with a `0` exit\nstatus. This means `git-test` can be used both for specialised tests of a\nsingle feature or failure mode or for running a comprehensive set of automated\ntests. The cache is keyed on both directory tree and test, so it won't confuse\nthe unit tests with the integration tests, or a specific regression test.\n\n## Motivation\n\nAn important design goal for `git-test` has been to make it convenient to use.\n\nIdeally, you should have a work flow where you run your unit tests whenever\nyou save and run unit tests on all your local commits whenever you've done\nsomething with version control.\n\nFor ease, `git-test` offers a few advantages over a simple for loop over a\n`git rev-list`:\n\n- By default it spends some effort on working out which commits to test.\n- Cached results, which are keyed to tree contents, rather than commit. This\n  means that commits can be amended or reordered, but only content trees that\n  have never been tested before will be tested.\n- Separate pre- and post-action hooks, the results of which don't actually\n  factor into the test result. (Useful if cleaning fails if there is nothing\n  to clean, for instance.)\n- Configuration of housekeeping and verification steps using\n    - `git config`,\n    - environment variables or\n    - command line arguments\n- Selective redo, for where you trust failures but not successes, vice versa,\n  or trust nothing.\n- Save output (both `STDOUT` and `STDERR`) from cleaning and verifying to\n  an easily referenced symlink farm.\n\n\n## Configure\n\nMostly just this:\n\n    git config test.verify \"test command that returns nonzero on fail\"\n\nto default to testing against origin/master:\n\n    git config test.branch origin/master\n\nto do the same, but for a single branch:\n\n    git config branch.mybranch.test parentbranch\n\n\n## Self-Test\n\nTo try the test script with different shells:\n\n    for sh in /bin/dash /bin/bash /bin/ksh /bin/mksh /bin/pdksh; do\n        echo $sh\n        sh test.sh -s $sh\n    done\n\nNote that since version 1.0.2, the shebang is set to `/bin/bash`. Other shells\nare now supported on a \"patches welcome\" basis. (This is largely because I\ncouldn't find a shell I could run in my GNU/Linux environment that behaves\nlike the OS X (FreeBSD?) `sh` shell, which has very different behaviour from\nall the others.)\n\nTo regression test properly:\n\n    rev=$(git rev-parse --short HEAD)\n    cp test.sh regressions_${rev}.sh\n    GIT_TEST_VERIFY=\"sh regressions_${rev}.sh\" git test -v\n\n(The reason for copying the script is to test each commit against the new\ntests, and the reason for naming it based on the current commit is to key the\ncache correctly.)\n\n\n## Installation\n\nYou can just have the `git-test` script in your `PATH`, but there are other\noptions:\n\n### Homebrew (on OS X)\n\nIf you have [Homebrew](http://brew.sh) installed, you can install\n`git-test` with:\n\n    $ brew install git-test\n\n### From source\n\nAside from the packaging, you can also install from source. It's a single\nPOSIX shell script that uses core git, so all that's required for plain `git\ntest` to work (besides git, of course) is that `git-test` needs to be\nsomewhere in your `PATH` (or `GIT_EXEC_PATH`).\n\nYou can install from source by doing the following:\n\n    $ install git-test   /usr/local/bin\n    $ install git-test.1 /usr/local/share/man1\n\nOr just add this directory to your `PATH` environment variable.\n\n### Debian GNU/Linux\n\nThe usual\n\n    $ fakeroot debian/rules binary\n\nShould give you a Debian package.\n\n### Arch Linux\n\nWith Arch Linux, you can use the provided `PKGBUILD` file. Simply download the\nfile and run `makepkg` in the same directory as the file. It will always build\nthe latest `git` version of this package, even if you have an old checkout."
}
