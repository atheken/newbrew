{
  "name": "core-lightning",
  "full_name": "core-lightning",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [
    "lightningd"
  ],
  "versioned_formulae": [],
  "desc": "Lightning Network implementation focusing on spec compliance and performance",
  "license": "MIT",
  "homepage": "https://github.com/ElementsProject/lightning",
  "versions": {
    "stable": "23.05.2",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/ElementsProject/lightning.git",
      "tag": "v23.05.2",
      "revision": "e512f918fcaef276163b185cd712b89335424afd",
      "checksum": null
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/core-lightning/blobs/sha256:203aab4287153fd4aa021ad4366c2221c0018dd772e35eb43f7cb56fd21bfae8",
          "sha256": "203aab4287153fd4aa021ad4366c2221c0018dd772e35eb43f7cb56fd21bfae8"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/core-lightning/blobs/sha256:906a85870a5254de4cc8a50d1bc53388b96c17725bb9556d65a3d2c2380e4d1d",
          "sha256": "906a85870a5254de4cc8a50d1bc53388b96c17725bb9556d65a3d2c2380e4d1d"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/core-lightning/blobs/sha256:0b0d5f5af0efb7a469d8c19c24cc47bfbb0127c3bf366b3638d01a21a9056d1d",
          "sha256": "0b0d5f5af0efb7a469d8c19c24cc47bfbb0127c3bf366b3638d01a21a9056d1d"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/core-lightning/blobs/sha256:dff08af76e20e2d86545a2095de683551657fb1299d8bb024fa01ebacef17683",
          "sha256": "dff08af76e20e2d86545a2095de683551657fb1299d8bb024fa01ebacef17683"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/core-lightning/blobs/sha256:095fc6ca690c2b308f1296d71b59fab7f12d2f950c9a22e39c794fff003e9bcb",
          "sha256": "095fc6ca690c2b308f1296d71b59fab7f12d2f950c9a22e39c794fff003e9bcb"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/core-lightning/blobs/sha256:48fd90e65d7cdf4cb35902d757c74461f73be54d35d79bcbdfa4497e2cda76ed",
          "sha256": "48fd90e65d7cdf4cb35902d757c74461f73be54d35d79bcbdfa4497e2cda76ed"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/core-lightning/blobs/sha256:eafdcf1cbe25ee45c72e373bee9d153ed5fee684d4b9437d22db239145bc4779",
          "sha256": "eafdcf1cbe25ee45c72e373bee9d153ed5fee684d4b9437d22db239145bc4779"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "autoconf",
    "automake",
    "gettext",
    "gnu-sed",
    "libsodium",
    "libtool",
    "lowdown",
    "pkg-config",
    "poetry",
    "protobuf",
    "python@3.8"
  ],
  "dependencies": [
    "bitcoin",
    "gmp"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "sqlite"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/core-lightning.rb",
  "ruby_source_checksum": {
    "sha256": "a1cc5cac8ba08827604899054cc47d86eb36b8e7f2833653090712c65762f517"
  },
  "date_added": "2023-06-05T22:03:52-04:00",
  "readme": "# Core Lightning (CLN): A specification compliant Lightning Network implementation in C\n\nCore Lightning (previously c-lightning) is a lightweight, highly customizable and [standard compliant][std] implementation of the Lightning Network protocol.\n\n* [Getting Started](#getting-started)\n    * [Installation](#installation)\n    * [Starting lightningd](#starting-lightningd)\n    * [Using the JSON-RPC Interface](#using-the-json-rpc-interface)\n    * [Care And Feeding Of Your New Lightning Node](#care-and-feeding-of-your-new-lightning-node)\n    * [Opening A Channel](#opening-a-channel)\n\t* [Sending and Receiving Payments](#sending-and-receiving-payments)\n\t* [Configuration File](#configuration-file)\n* [Further Information](#further-information)\n    * [FAQ](doc/FAQ.md)\n    * [Pruning](#pruning)\n    * [HD wallet encryption](#hd-wallet-encryption)\n\t* [Developers](#developers)\n* [Documentation](https://docs.corelightning.org/docs)\n\n## Project Status\n\n[![Continuous Integration](https://github.com/ElementsProject/lightning/workflows/Continuous%20Integration/badge.svg)][actions]\n[![Pull Requests Welcome][prs]][prs-link]\n[![Irc][IRC]][IRC-link]\n[![Documentation Status](https://readthedocs.org/projects/lightning/badge/?version=docs)][docs]\n\nThis implementation has been in production use on the Bitcoin mainnet since early 2018, with the launch of the [Blockstream Store][blockstream-store-blog].\nWe recommend getting started by experimenting on `testnet` (or `regtest`), but the implementation is considered stable and can be safely used on mainnet.\n\nAny help testing the implementation, reporting bugs, or helping with outstanding issues is very welcome.\nDon't hesitate to reach out to us on IRC at [#lightning-dev @ libera.chat][irc1], [#c-lightning @ libera.chat][irc2], or on the implementation-specific mailing list [c-lightning@lists.ozlabs.org][ml1], or on the Lightning Network-wide mailing list [lightning-dev@lists.linuxfoundation.org][ml2], or on Discord [core-lightning][discord], or on Telegram [Core Lightning][telegram].\n\n## Getting Started\n\nCore Lightning only works on Linux and macOS, and requires a locally (or remotely) running `bitcoind` (version 0.16 or above) that is fully caught up with the network you're running on, and relays transactions (ie with `blocksonly=0`).\nPruning (`prune=n` option in `bitcoin.conf`) is partially supported, see [here](#pruning) for more details.\n\n### Installation\n\nThere are 4 supported installation options:\n\n - Installation of a pre-compiled binary from the [release page][releases] on GitHub.\n - Using one of the [provided docker images][dockerhub] on the Docker Hub.\n - Compiling the source code yourself as described in the [installation documentation](doc/getting-started/getting-started/installation.md).\n\n### Starting `lightningd`\n\n#### Regtest (local, fast-start) Option\nIf you want to experiment with `lightningd`, there's a script to set\nup a `bitcoind` regtest test network of two local lightning nodes,\nwhich provides a convenient `start_ln` helper. See the notes at the top\nof the `startup_regtest.sh` file for details on how to use it.\n\n```bash\n. contrib/startup_regtest.sh\n```\n\nNote that your local nodeset will be much faster/more responsive if\nyou've configured your node to expose the developer options, e.g.\n\n```bash\n./configure --enable-developer\n```\n\n#### Mainnet Option\nTo test with real bitcoin,  you will need to have a local `bitcoind` node running:\n\n```bash\nbitcoind -daemon\n```\n\nWait until `bitcoind` has synchronized with the network.\n\nMake sure that you do not have `walletbroadcast=0` in your `~/.bitcoin/bitcoin.conf`, or you may run into trouble.\nNotice that running `lightningd` against a pruned node may cause some issues if not managed carefully, see [below](#pruning) for more information.\n\nYou can start `lightningd` with the following command:\n\n```bash\nlightningd --network=bitcoin --log-level=debug\n```\n\nThis creates a `.lightning/` subdirectory in your home directory: see `man -l doc/lightningd.8` (or https://docs.corelightning.org/docs) for more runtime options.\n\n### Using The JSON-RPC Interface\n\nCore Lightning exposes a [JSON-RPC 2.0][jsonrpcspec] interface over a Unix Domain socket; the `lightning-cli` tool can be used to access it, or there is a [python client library](contrib/pyln-client).\n\nYou can use `lightning-cli help` to print a table of RPC methods; `lightning-cli help <command>`\nwill offer specific information on that command.\n\nUseful commands:\n\n* [newaddr](doc/lightning-newaddr.7.md): get a bitcoin address to deposit funds into your lightning node.\n* [listfunds](doc/lightning-listfunds.7.md): see where your funds are.\n* [connect](doc/lightning-connect.7.md): connect to another lightning node.\n* [fundchannel](doc/lightning-fundchannel.7.md): create a channel to another connected node.\n* [invoice](doc/lightning-invoice.7.md): create an invoice to get paid by another node.\n* [pay](doc/lightning-pay.7.md): pay someone else's invoice.\n* [plugin](doc/lightning-plugin.7.md): commands to control extensions.\n\n### Care And Feeding Of Your New Lightning Node\n\nOnce you've started for the first time, there's a script called\n`contrib/bootstrap-node.sh` which will connect you to other nodes on\nthe lightning network.\n\nThere are also numerous plugins available for Core Lightning which add\ncapabilities: in particular there's a collection at: https://github.com/lightningd/plugins\n\nIncluding [helpme][helpme-github] which guides you through setting up\nyour first channels and customizing your node.\n\nFor a less reckless experience, you can encrypt the HD wallet seed:\n see [HD wallet encryption](#hd-wallet-encryption).\n\nYou can also chat to other users at [#c-lightning @ libera.chat][irc2];\nwe are always happy to help you get started!\n\n\n### Opening A Channel\n\nFirst you need to transfer some funds to `lightningd` so that it can\nopen a channel:\n\n```bash\n# Returns an address <address>\nlightning-cli newaddr\n```\n\n`lightningd` will register the funds once the transaction is confirmed.\n\nYou may need to generate a p2sh-segwit address if the faucet does not support bech32:\n\n```bash\n# Return a p2sh-segwit address\nlightning-cli newaddr p2sh-segwit\n```\n\nConfirm `lightningd` got funds by:\n\n```bash\n# Returns an array of on-chain funds.\nlightning-cli listfunds\n```\n\nOnce `lightningd` has funds, we can connect to a node and open a channel.\nLet's assume the **remote** node is accepting connections at `<ip>`\n(and optional `<port>`, if not 9735) and has the node ID `<node_id>`:\n\n```bash\nlightning-cli connect <node_id> <ip> [<port>]\nlightning-cli fundchannel <node_id> <amount_in_satoshis>\n```\n\nThis opens a connection and, on top of that connection, then opens a channel.\nThe funding transaction needs 3 confirmation in order for the channel to be usable, and 6 to be announced for others to use.\nYou can check the status of the channel using `lightning-cli listpeers`, which after 3 confirmations (1 on testnet) should say that `state` is `CHANNELD_NORMAL`; after 6 confirmations you can use `lightning-cli listchannels` to verify that the `public` field is now `true`.\n\n### Sending and Receiving Payments\n\nPayments in Lightning are invoice based.\nThe recipient creates an invoice with the expected `<amount>` in\nmillisatoshi (or `\"any\"` for a donation), a unique `<label>` and a\n`<description>` the payer will see:\n\n```bash\nlightning-cli invoice <amount> <label> <description>\n```\n\nThis returns some internal details, and a standard invoice string called `bolt11` (named after the [BOLT #11 lightning spec][BOLT11]).\n\n[BOLT11]: https://github.com/lightning/bolts/blob/master/11-payment-encoding.md\n\nThe sender can feed this `bolt11` string to the `decodepay` command to see what it is, and pay it simply using the `pay` command:\n\n```bash\nlightning-cli pay <bolt11>\n```\n\nNote that there are lower-level interfaces (and more options to these\ninterfaces) for more sophisticated use.\n\n## Configuration File\n\n`lightningd` can be configured either by passing options via the command line, or via a configuration file.\nCommand line options will always override the values in the configuration file.\n\nTo use a configuration file, create a file named `config` within your top-level lightning directory or network subdirectory\n(eg. `~/.lightning/config` or `~/.lightning/bitcoin/config`).  See `man -l doc/lightningd-config.5`.\n\nA sample configuration file is available at `contrib/config-example`.\n\n## Further information\n\n### Pruning\n\nCore Lightning requires JSON-RPC access to a fully synchronized `bitcoind` in order to synchronize with the Bitcoin network.\nAccess to ZeroMQ is not required and `bitcoind` does not need to be run with `txindex` like other implementations.\nThe lightning daemon will poll `bitcoind` for new blocks that it hasn't processed yet, thus synchronizing itself with `bitcoind`.\nIf `bitcoind` prunes a block that Core Lightning has not processed yet, e.g., Core Lightning was not running for a prolonged period, then `bitcoind` will not be able to serve the missing blocks, hence Core Lightning will not be able to synchronize anymore and will be stuck.\nIn order to avoid this situation you should be monitoring the gap between Core Lightning's blockheight using `lightning-cli getinfo` and `bitcoind`'s blockheight using `bitcoin-cli getblockchaininfo`.\nIf the two blockheights drift apart it might be necessary to intervene.\n\n### HD wallet encryption\n\nYou can encrypt the `hsm_secret` content (which is used to derive the HD wallet's master key) by passing the `--encrypted-hsm` startup argument, or by using the `hsmtool` (which you can find in the `tool/` directory at the root of this repo) with the `encrypt` method. You can unencrypt an encrypted `hsm_secret` using the `hsmtool` with the `decrypt` method.\n\nIf you encrypt your `hsm_secret`, you will have to pass the `--encrypted-hsm` startup option to `lightningd`. Once your `hsm_secret` is encrypted, you __will not__ be able to access your funds without your password, so please beware with your password management. Also, beware of not feeling too safe with an encrypted `hsm_secret`: unlike for `bitcoind` where the wallet encryption can restrict the usage of some RPC command, `lightningd` always needs to access keys from the wallet which is thus __not locked__ (yet), even with an encrypted BIP32 master seed.\n\n### Developers\n\nDevelopers wishing to contribute should start with the developer guide [here](doc/contribute-to-core-lightning/coding-style-guidelines.md).\nYou should also configure with `--enable-developer` to get additional checks and options.\n\n[blockstream-store-blog]: https://blockstream.com/2018/01/16/en-lightning-charge/\n[std]: https://github.com/lightning/bolts\n[prs]: https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat\n[prs-link]: http://makeapullrequest.com\n[IRC]: https://img.shields.io/badge/chat-on%20libera-brightgreen.svg\n[IRC-link]: https://web.libera.chat/#c-lightning\n[irc1]: https://web.libera.chat/#lightning-dev\n[irc2]: https://web.libera.chat/#c-lightning\n[ml1]: https://lists.ozlabs.org/listinfo/c-lightning\n[ml2]: https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n[discord]: https://discord.gg/mE9s4rc5un\n[telegram]: https://t.me/lightningd\n[docs]: https://docs.corelightning.org/docs\n[releases]: https://github.com/ElementsProject/lightning/releases\n[dockerhub]: https://hub.docker.com/r/elementsproject/lightningd/\n[jsonrpcspec]: https://www.jsonrpc.org/specification\n[helpme-github]: https://github.com/lightningd/plugins/tree/master/helpme\n[actions]: https://github.com/ElementsProject/lightning/actions"
}
