{
  "name": "inframap",
  "full_name": "inframap",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Read your tfstate or HCL to generate a graph",
  "license": "MIT",
  "homepage": "https://github.com/cycloidio/inframap",
  "versions": {
    "stable": "0.6.7",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/cycloidio/inframap/archive/v0.6.7.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "e9d6daa48c6fa1a8ecc5437c7121cb5072eb81c29c88ca9e6d778637c8442332"
    },
    "head": {
      "url": "https://github.com/cycloidio/inframap.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/inframap/blobs/sha256:a8346b10cb9a2054a86aaefba38ffa80f36bb2696b987aca77ab9e2c7e68dca3",
          "sha256": "a8346b10cb9a2054a86aaefba38ffa80f36bb2696b987aca77ab9e2c7e68dca3"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/inframap/blobs/sha256:763af27a8d3dbb2ccb3c7bcb63d337ee96e7f5c011dcecbee7768d76214814e4",
          "sha256": "763af27a8d3dbb2ccb3c7bcb63d337ee96e7f5c011dcecbee7768d76214814e4"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/inframap/blobs/sha256:ee096fc9fe0909cc34675dbd7a7269c8092ffee0d6ba71fa333e75afc4ff28c1",
          "sha256": "ee096fc9fe0909cc34675dbd7a7269c8092ffee0d6ba71fa333e75afc4ff28c1"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/inframap/blobs/sha256:41de7c7b91cc5ccf46b5d4de5fc59e9ca9d941a4dd060fab01c3db3b7e62b80d",
          "sha256": "41de7c7b91cc5ccf46b5d4de5fc59e9ca9d941a4dd060fab01c3db3b7e62b80d"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/inframap/blobs/sha256:36b5b88b60390bc015fb56166cb7b890c8e5eb2f736a30384dc3fa92cda9f351",
          "sha256": "36b5b88b60390bc015fb56166cb7b890c8e5eb2f736a30384dc3fa92cda9f351"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/inframap/blobs/sha256:0a4fe8ae6b7fcf419ab21ea31beb6b90dbeedd73ba2a771672e41c7a30ff4d0d",
          "sha256": "0a4fe8ae6b7fcf419ab21ea31beb6b90dbeedd73ba2a771672e41c7a30ff4d0d"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/inframap/blobs/sha256:ba85244090ace0d6a94dbb41c9693f11647cb8e949acc5511c8d9c25a3f74c1b",
          "sha256": "ba85244090ace0d6a94dbb41c9693f11647cb8e949acc5511c8d9c25a3f74c1b"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/inframap/blobs/sha256:d7bb58c695d390162b9a5376decf76acf02929d9b4421137ccbb7e91f940bdd2",
          "sha256": "d7bb58c695d390162b9a5376decf76acf02929d9b4421137ccbb7e91f940bdd2"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/inframap/blobs/sha256:d4d90d38dfbdddf34bdeea89493f6c76874392166e777d42f6d477690cb880c6",
          "sha256": "d4d90d38dfbdddf34bdeea89493f6c76874392166e777d42f6d477690cb880c6"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/inframap.rb",
  "ruby_source_checksum": {
    "sha256": "8f5f8342f0135efd3aa3b41c692b89ad83f96d790bbae729c615ada5fb9480d7"
  },
  "date_added": "2020-12-10T15:49:25+00:00",
  "readme": "<p align=\"center\">\n  <img src=\"docs/inframap-logo_color-RGB.png\" width=\"150\">\n</p>\n\n# InfraMap\n\n[![PkgGoDev](https://pkg.go.dev/badge/github.com/cycloidio/inframap)](https://pkg.go.dev/github.com/cycloidio/inframap)\n[![AUR package](https://repology.org/badge/version-for-repo/aur/inframap.svg)](https://repology.org/project/inframap/versions)\n[![Homebrew](https://img.shields.io/badge/dynamic/json.svg?url=https://formulae.brew.sh/api/formula/inframap.json&query=$.versions.stable&label=homebrew)](https://formulae.brew.sh/formula/inframap)\n[![Join the chat at https://gitter.im/cycloidio/inframap](https://badges.gitter.im/cycloidio/inframap.svg)](https://gitter.im/cycloidio/inframap)\n\nRead your tfstate or HCL to generate a graph specific for each provider, showing only the\nresources that are most important/relevant.\n\n<p align=\"center\">\n  <img src=\"docs/inframap.png\" width=\"400\">\n</p>\n\n## Cloud Providers\n\nWe support **all** cloud providers, but we have some (listed below) that we have specific logic that allows\nus to better represent information that comes from these providers.\n\nFor the other providers the resulting representation will simply be all resources present without any simplification or refinement.\n\nFor TFState generations we are limited to versions 3 and 4.\n\n| Provider | State | HCL |  Grouping<sup>1</sup> | External Nodes<sup>2</sup> | IAM<sup>3</sup> |\n|:--:|:--:|:--:|:--:|:--:|:--:|\n| <img alt=\"AWS\" src=\"docs/aws.png\" width=\"50\"> | :heavy_check_mark: | :heavy_check_mark: | [WIP](https://github.com/cycloidio/inframap/issues/6) | :heavy_check_mark: | :heavy_multiplication_x: (https://github.com/cycloidio/inframap/issues/11)|\n| <img alt=\"Google\" src=\"docs/google-cloud.svg\" width=\"50\"> | :heavy_check_mark: | :heavy_check_mark: | :heavy_multiplication_x: | :heavy_multiplication_x: | :heavy_multiplication_x: |\n| <img alt=\"Azure\" src=\"docs/azure.svg\" width=\"50\"> | :heavy_check_mark: | :heavy_check_mark: | :heavy_multiplication_x: | :heavy_multiplication_x: | :heavy_multiplication_x: |\n| <img alt=\"OpenStack\" src=\"docs/Openstack-vertical-small.png\" width=\"50\"> | :heavy_check_mark: | :heavy_check_mark: | :heavy_multiplication_x: | :heavy_multiplication_x: | :heavy_multiplication_x: |\n| <img alt=\"FlexibleEngine\" src=\"docs/flexibleengine.png\" width=\"50\"> | :heavy_check_mark: | :heavy_check_mark: | :heavy_multiplication_x: | :heavy_multiplication_x: | :heavy_multiplication_x: |\n\n1. **Grouping**: Group elements that belong to the same group like VPCs or regions\n2. **External Nodes**: Show the ingress of the Nodes if any\n3. **IAM**: Connections based on IAM (Identity Access Management)\n\n## Installation\n\n### Stable\n\nTo install the latest release of Inframap, you can pick one of this methods:\n  * pull the latest release from the [Releases](https://github.com/cycloidio/inframap/releases/) page\n  * pull the latest docker [image](https://hub.docker.com/r/cycloid/inframap) from the Docker hub\n  * use your Linux package manager (only [AUR](https://aur.archlinux.org/packages/inframap) at the moment)\n\n### Development\n\nYou can build and install with the latest sources, you will enjoy the new features and bug fixes. It uses Go Modules (1.13+)\n\n```shell\n$ git clone https://github.com/cycloidio/inframap\n$ cd inframap\n$ go mod download\n$ make build\n```\n\n### Install via brew\n\nIf you're macOS user and using [Homebrew](https://brew.sh/), you can install via brew command:\n\n```sh\n$ brew install inframap\n```\n\n## Usage\n\nThe `inframap --help` will show you the basics.\n\n[![asciicast](https://asciinema.org/a/347600.svg)](https://asciinema.org/a/347600)\n\nThe most important subcommands are:\n\n* `generate`: generates the graph from STDIN or file.\n* `prune`: removes all unnecessary information from the state or HCL (not supported yet) so it can be shared without any security concerns\n\n### Example\n\nVisualizing with [dot](https://graphviz.org/download/)\n\n```shell\n$ inframap generate state.tfstate | dot -Tpng > graph.png\n```\n\nor from the terminal itself with [graph-easy](https://github.com/ironcamel/Graph-Easy)\n\n```shell\n$ inframap generate state.tfstate | graph-easy\n```\n\nor from HCL\n\n```shell\n$ inframap generate config.tf | graph-easy\n```\n\nor HCL module\n\n```shell\n$ inframap generate ./my-module/ | graph-easy\n```\n\nusing docker image (assuming that your Terraform files are in the working directory)\n\n```shell\n$ docker run --rm -v ${PWD}:/opt cycloid/inframap generate /opt/terraform.tfstate\n```\n\n\n**Note:** InfraMap will guess the type of the input (HCL or TFState) by validating if it's a JSON and if it fails then we fallback\nto HCL (except if you send a directory on args, the it'll use HCL directly), to force one specific type you can use `--hcl` or `--tfstate` flags.\n\n## How is it different to `terraform graph`\n\n[Terraform Graph](https://www.terraform.io/docs/commands/graph.html) outputs a dependency graph of all the resources on the tfstate/HCL. We try to go one step further,\nby trying to make it human-readable.\n\nIf the provider is not supported, the output will be closer to the Terraform Graph version (without displaying provider / variable nodes)\n\nTaking https://github.com/cycloid-community-catalog/stack-magento/ as a reference this is the difference in output:\n\nWith `terraform graph`:\n\n<p align=\"center\">\n  <img src=\"docs/terraformgraph.svg\" width=\"400\">\n</p>\n\nWith `inframap generate ./terraform/module-magento/ | dot -Tpng > inframap.png`:\n\n<p align=\"center\">\n  <img src=\"docs/inframap.png\" width=\"400\">\n</p>\n\nWith `inframap generate --connections=false ./terraform/module-magento/ | dot -Tpng > inframapconnections.png`:\n\n<p align=\"center\">\n  <img src=\"docs/inframapconnections.png\" width=\"400\">\n</p>\n\nWith `inframap generate ./terraform/module-magento/ --raw | dot -Tpng > inframapraw.png`:\n\n<p align=\"center\">\n  <img src=\"docs/inframapraw.png\" width=\"400\">\n</p>\n\n## How does it work?\n\nFor each provider, we support specific types of connections; we have a static list of resources that can be\nnodes or edges. Once we identify the edges, we try to create one unique edge from the resources they connect.\n\nFor a state file, we rely on the `dependencies` key (for the <0.13 we replace all `depends_on` for `dependencies` so we support them) and, for HCL we rely on interpolation to create the base graph one which we then\napply specific provider logic if supported. If not supported, then basic graph is returned.\n\n## FAQ\n\n### Why is my Graph generated empty?\n\nIf a graph is returned empty, it means that we support one of the providers you are using on your HCL/TFState but we do\nnot recognize any connection or relevant node.\n\nTo show the configuration without any InfraMap applied logic you can use the `--raw` flag logic and print everything that we read.\nIf it works, it would be good to try to know why it was empty before so we can take a look\nat it as it could potentially be an issue on InfraMap (open an issue if you want us to take a look).\n\nBy default unconnected nodes are removed, you can use `--clean=false` to prevent that.\n\n### Does InfraMap support Terraform backends ?\n\nTerraform allows users to use `backends` (S3, Google Cloud Storage, Swift, etc.) in order to store the `terraform.state`. We currently do not support graph generation from `tfstate` stored in such backends. As mentioned in this [issue](https://github.com/cycloidio/inframap/issues/44), it is possible to play around `stdin/out` to generate graph from Terraform backends.\n\n| backend | command                                                                  |\n|---------|--------------------------------------------------------------------------|\n| S3      | `aws s3 cp s3://bucket/path/to/your/file.tfstate - \\| inframap generate` |\n| GCS     | `gsutil cat gs://bucket/path/to/your/file.tfstate \\| inframap generate`  |\n\nA general solution is also to just use `terraform state pull \\| inframap generate` as it'll pull the state from whichever backend is actually stored\n\n## License\n\nPlease see the [MIT LICENSE](https://github.com/cycloidio/inframap/blob/master/LICENSE) file.\n\n## Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## Meet Cycloid\n\n[Cycloid](https://www.cycloid.io/) is a hybrid cloud DevOps collaboration platform providing end-to-end frameworks to accelerate and industrialize software delivery.\n\nAs of now, we have three open-source tools:\n\n* [TerraCognita](https://github.com/cycloidio/terracognita): Read from your existing cloud providers and generate IaC in Terraform \n* [InfraMap](https://github.com/cycloidio/inframap): Reads .tfstate or HCL to generate a graph specific for each provider\n* [TerraCost](https://github.com/cycloidio/terracost): Cloud cost estimation for Terraform in the CLI\n\n...and the functionality of each is also embedded in our DevOps solution, which you can find out more about [here](https://www.cycloid.io/hybrid-cloud-devops-platform)."
}
