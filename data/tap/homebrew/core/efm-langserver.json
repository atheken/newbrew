{
  "name": "efm-langserver",
  "full_name": "efm-langserver",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "General purpose Language Server",
  "license": "MIT",
  "homepage": "https://github.com/mattn/efm-langserver",
  "versions": {
    "stable": "0.0.48",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/mattn/efm-langserver/archive/v0.0.48.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "39d56178a11c39f865eb2e3677d51af7ac62c79e0b6daa9176dcd8f58a4c0b05"
    },
    "head": {
      "url": "https://github.com/mattn/efm-langserver.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/efm-langserver/blobs/sha256:34e9c2849538000efb03912f10eafe86359b8991760508b4859b920385f6a374",
          "sha256": "34e9c2849538000efb03912f10eafe86359b8991760508b4859b920385f6a374"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/efm-langserver/blobs/sha256:34e9c2849538000efb03912f10eafe86359b8991760508b4859b920385f6a374",
          "sha256": "34e9c2849538000efb03912f10eafe86359b8991760508b4859b920385f6a374"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/efm-langserver/blobs/sha256:34e9c2849538000efb03912f10eafe86359b8991760508b4859b920385f6a374",
          "sha256": "34e9c2849538000efb03912f10eafe86359b8991760508b4859b920385f6a374"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/efm-langserver/blobs/sha256:d60ab1b882a1d5057e4dfd4f139d781a40cb84e535af5c6fc9893b45104362dc",
          "sha256": "d60ab1b882a1d5057e4dfd4f139d781a40cb84e535af5c6fc9893b45104362dc"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/efm-langserver/blobs/sha256:d60ab1b882a1d5057e4dfd4f139d781a40cb84e535af5c6fc9893b45104362dc",
          "sha256": "d60ab1b882a1d5057e4dfd4f139d781a40cb84e535af5c6fc9893b45104362dc"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/efm-langserver/blobs/sha256:d60ab1b882a1d5057e4dfd4f139d781a40cb84e535af5c6fc9893b45104362dc",
          "sha256": "d60ab1b882a1d5057e4dfd4f139d781a40cb84e535af5c6fc9893b45104362dc"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/efm-langserver/blobs/sha256:e0297f619f11165dd6c4ca392549d609b1ecbb2be390bdad613dc33b2c25c77f",
          "sha256": "e0297f619f11165dd6c4ca392549d609b1ecbb2be390bdad613dc33b2c25c77f"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/efm-langserver.rb",
  "ruby_source_checksum": {
    "sha256": "3042e4bbbbab624a5278f1128ae213751a4a88d082410641673fe5641adfbb37"
  },
  "date_added": "2020-12-22T18:57:59+00:00",
  "readme": "# efm-langserver\n\n[![Actions Status](https://github.com/mattn/efm-langserver/workflows/CI/badge.svg)](https://github.com/mattn/efm-langserver/actions)\n\nGeneral purpose Language Server that can use specified error message format\ngenerated from specified command. This is useful for editing code with linter.\n\n![efm](https://raw.githubusercontent.com/mattn/efm-langserver/master/screenshot.png)\n\n## Usage\n\n```text\nUsage of efm-langserver:\n  -c string\n        path to config.yaml\n  -d    dump configuration\n  -logfile string\n        logfile\n  -loglevel int\n        loglevel (default 1)\n  -q    Run quieter\n  -v    Print the version\n```\n\n### Configuration\n\nConfiguration can be done with either a `config.yaml` file, or through\na [DidChangeConfiguration](https://microsoft.github.io/language-server-protocol/specification.html#workspace_didChangeConfiguration)\nnotification from the client.\n`DidChangeConfiguration` can be called any time and will overwrite only provided\nproperties.\n\n`DidChangeConfiguration` only supports V2 configuration and cannot set `LogFile`.\n\n`efm-langserver` does not include formatters/linters for any languages, you must install these manually,\ne.g.\n - lua: [LuaFormatter](https://github.com/Koihik/LuaFormatter)\n - python: [yapf](https://github.com/google/yapf) [isort](https://github.com/PyCQA/isort)\n - [vint](https://github.com/Kuniwak/vint) for Vim script\n - [markdownlint-cli](https://github.com/igorshubovych/markdownlint-cli) for Markdown\n - etc...\n\n#### InitializeParams\n\nBecause the configuration can be updated on the fly, capabilities might change\nthroughout the lifetime of the server. To enable support for capabilities that will\nbe available later, set them in the [InitializeParams](https://microsoft.github.io/language-server-protocol/specification.html#initialize)\n\nExample\n```json\n{\n    \"initializationOptions\": {\n        \"documentFormatting\": true,\n        \"documentRangeFormatting\": true,\n        \"hover\": true,\n        \"documentSymbol\": true,\n        \"codeAction\": true,\n        \"completion\": true\n    }\n}\n```\n\n### Example for config.yaml\n\nLocation of config.yaml is:\n\n* UNIX: `$XDG_CONFIG_HOME/efm-langserver/config.yaml` or `$HOME/.config/efm-langserver/config.yaml`\n* Windows: `%APPDATA%\\efm-langserver\\config.yaml`\n\nBelow is example for `config.yaml` for Windows. Please see [schema.md](schema.md) for full documentation of the available options.\n\n```yaml\nversion: 2\nroot-markers:\n  - .git/\nlint-debounce: 1s\ncommands:\n  - command: notepad\n    arguments:\n      - ${INPUT}\n    title: メモ帳\n\ntools:\n  any-excitetranslate: &any-excitetranslate\n    hover-command: 'excitetranslate'\n    hover-stdin: true\n\n  blade-blade-formatter: &blade-blade-formatter\n    format-command: 'blade-formatter --stdin'\n    format-stdin: true\n\n  css-prettier: &css-prettier\n    format-command: './node_modules/.bin/prettier ${--tab-width:tabWidth} ${--single-quote:singleQuote} --parser css'\n\n  csv-csvlint: &csv-csvlint\n    lint-command: 'csvlint'\n\n  dockerfile-hadolint: &dockerfile-hadolint\n    lint-command: 'hadolint'\n    lint-formats:\n      - '%f:%l %m'\n\n  eruby-erb: &eruby-erb\n    lint-debounce: 2s\n    lint-command: 'erb -x -T - | ruby -c'\n    lint-stdin: true\n    lint-offset: 1\n    format-stdin: true\n    format-command: htmlbeautifier\n\n  gitcommit-gitlint: &gitcommit-gitlint\n    lint-command: 'gitlint'\n    lint-stdin: true\n    lint-formats:\n      - '%l: %m: \"%r\"'\n      - '%l: %m'\n\n  html-prettier: &html-prettier\n    format-command: './node_modules/.bin/prettier ${--tab-width:tabWidth} ${--single-quote:singleQuote} --parser html'\n\n  javascript-eslint: &javascript-eslint\n    lint-command: 'eslint -f visualstudio --stdin --stdin-filename ${INPUT}'\n    lint-ignore-exit-code: true\n    lint-stdin: true\n    lint-formats:\n      - \"%f(%l,%c): %tarning %m\"\n      - \"%f(%l,%c): %rror %m\"\n\n  json-fixjson: &json-fixjson\n    format-command: 'fixjson'\n\n  json-jq: &json-jq\n    lint-command: 'jq .'\n\n  json-prettier: &json-prettier\n    format-command: './node_modules/.bin/prettier ${--tab-width:tabWidth} --parser json'\n\n  lua-lua-format: &lua-lua-format\n    format-command: 'lua-format -i'\n    format-stdin: true\n\n  make-checkmake: &make-checkmake\n    lint-command: 'checkmake'\n    lint-stdin: true\n\n  markdown-markdownlint: &markdown-markdownlint\n    lint-command: 'markdownlint -s -c %USERPROFILE%\\.markdownlintrc'\n    lint-stdin: true\n    lint-formats:\n      - '%f:%l %m'\n      - '%f:%l:%c %m'\n      - '%f: %l: %m'\n\n  markdown-pandoc: &markdown-pandoc\n    format-command: 'pandoc -f markdown -t gfm -sp --tab-stop=2'\n\n  mix_credo: &mix_credo\n    lint-command: \"mix credo suggest --format=flycheck --read-from-stdin ${INPUT}\"\n    lint-stdin: true\n    lint-formats:\n      - '%f:%l:%c: %t: %m'\n      - '%f:%l: %t: %m'\n    root-markers:\n      - mix.lock\n      - mix.exs\n\n  php-phpstan: &php-phpstan\n    lint-command: './vendor/bin/phpstan analyze --error-format raw --no-progress'\n\n  php-psalm: &php-psalm\n    lint-command: './vendor/bin/psalm --output-format=emacs --no-progress'\n    lint-formats:\n      - '%f:%l:%c:%trror - %m'\n      - '%f:%l:%c:%tarning - %m'\n\n  prettierd: &prettierd\n    format-command: >\n      prettierd ${INPUT} ${--range-start=charStart} ${--range-end=charEnd} \\\n        ${--tab-width=tabSize}\n    format-stdin: true\n    root-markers:\n      - .prettierrc\n      - .prettierrc.json\n      - .prettierrc.js\n      - .prettierrc.yml\n      - .prettierrc.yaml\n      - .prettierrc.json5\n      - .prettierrc.mjs\n      - .prettierrc.cjs\n      - .prettierrc.toml\n\n  python-autopep8: &python-autopep8\n    format-command: 'autopep8 -'\n    format-stdin: true\n\n  python-black: &python-black\n    format-command: 'black --quiet -'\n    format-stdin: true\n\n  python-flake8: &python-flake8\n    lint-command: 'flake8 --stdin-display-name ${INPUT} -'\n    lint-stdin: true\n    lint-formats:\n      - '%f:%l:%c: %m'\n\n  python-isort: &python-isort\n    format-command: 'isort --quiet -'\n    format-stdin: true\n\n  python-mypy: &python-mypy\n    lint-command: 'mypy --show-column-numbers'\n    lint-formats:\n      - '%f:%l:%c: %trror: %m'\n      - '%f:%l:%c: %tarning: %m'\n      - '%f:%l:%c: %tote: %m'\n\n  python-pylint: &python-pylint\n    lint-command: 'pylint --output-format text --score no --msg-template {path}:{line}:{column}:{C}:{msg} ${INPUT}'\n    lint-stdin: false\n    lint-formats:\n      - '%f:%l:%c:%t:%m'\n    lint-offset-columns: 1\n    lint-category-map:\n      I: H\n      R: I\n      C: I\n      W: W\n      E: E\n      F: E\n\n  python-yapf: &python-yapf\n    format-command: 'yapf --quiet'\n    format-stdin: true\n\n  rst-lint: &rst-lint\n    lint-command: 'rst-lint'\n    lint-formats:\n      - '%tNFO %f:%l %m'\n      - '%tARNING %f:%l %m'\n      - '%tRROR %f:%l %m'\n      - '%tEVERE %f:%l %m'\n\n  rst-pandoc: &rst-pandoc\n    format-command: 'pandoc -f rst -t rst -s --columns=79'\n\n  sh-shellcheck: &sh-shellcheck\n    lint-command: 'shellcheck -f gcc -x'\n    lint-source: 'shellcheck'\n    lint-formats:\n      - '%f:%l:%c: %trror: %m'\n      - '%f:%l:%c: %tarning: %m'\n      - '%f:%l:%c: %tote: %m'\n\n  sh-shfmt: &sh-shfmt\n    format-command: 'shfmt -ci -s -bn'\n    format-stdin: true\n\n  vim-vint: &vim-vint\n    lint-command: 'vint -'\n    lint-stdin: true\n    lint-formats:\n      - '%f:%l:%c: %m'\n\n  yaml-yamllint: &yaml-yamllint\n    lint-command: 'yamllint -f parsable -'\n    lint-stdin: true\n\nlanguages:\n  blade:\n    - <<: *blade-blade-formatter\n\n  css:\n    - <<: *css-prettier\n\n  csv:\n    - <<: *csv-csvlint\n\n  dockerfile:\n    - <<: *dockerfile-hadolint\n\n  elixir:\n    - <<: *mix_credo\n\n  eruby:\n    - <<: *eruby-erb\n\n  gitcommit:\n    - <<: *gitcommit-gitlint\n\n  html:\n    - <<: *html-prettier\n\n  javascript:\n    - <<: *javascript-eslint\n    - <<: *prettierd\n\n  json:\n    - <<: *json-fixjson\n    - <<: *json-jq\n    # - <<: *json-prettier\n\n  lua:\n    - <<: *lua-lua-format\n\n  make:\n    - <<: *make-checkmake\n\n  markdown:\n    - <<: *markdown-markdownlint\n    - <<: *markdown-pandoc\n\n  php:\n    - <<: *php-phpstan\n    - <<: *php-psalm\n\n  python:\n    - <<: *python-black\n    - <<: *python-flake8\n    - <<: *python-isort\n    - <<: *python-mypy\n    # - <<: *python-autopep8\n    # - <<: *python-yapf\n\n  rst:\n    - <<: *rst-lint\n    - <<: *rst-pandoc\n\n  sh:\n    - <<: *sh-shellcheck\n    - <<: *sh-shfmt\n\n  vim:\n    - <<: *vim-vint\n\n  yaml:\n    - <<: *yaml-yamllint\n\n  =:\n    - <<: *any-excitetranslate\n```\n\nIf you want to debug output of commands:\n\n```yaml\nversion: 2\nlog-file: /path/to/output.log\nlog-level: 1\n```\n\n### Example for DidChangeConfiguration notification\n\n```json\n{\n    \"settings\": {\n        \"rootMarkers\": [\".git/\"],\n        \"languages\": {\n            \"lua\": {\n                \"formatCommand\": \"lua-format -i\",\n                \"formatStdin\": true\n            }\n        }\n    }\n}\n```\n\n### Configuration for [vim-lsp](https://github.com/prabirshrestha/vim-lsp/)\n\n```vim\naugroup LspEFM\n  au!\n  autocmd User lsp_setup call lsp#register_server({\n      \\ 'name': 'efm-langserver',\n      \\ 'cmd': {server_info->['efm-langserver', '-c=/path/to/your/config.yaml']},\n      \\ 'allowlist': ['vim', 'eruby', 'markdown', 'yaml'],\n      \\ })\naugroup END\n```\n\n[vim-lsp-settings](https://github.com/mattn/vim-lsp-settings) provide installer for efm-langserver.\n\n### Configuration for [coc.nvim](https://github.com/neoclide/coc.nvim)\n\ncoc-settings.json\n\n```jsonc\n  // languageserver\n  \"languageserver\": {\n    \"efm\": {\n      \"command\": \"efm-langserver\",\n      \"args\": [],\n      // custom config path\n      // \"args\": [\"-c\", \"/path/to/your/config.yaml\"],\n      \"filetypes\": [\"vim\", \"eruby\", \"markdown\", \"yaml\"]\n    }\n  },\n```\n\n### Configuration for [Eglot](https://github.com/joaotavora/eglot)\n\nAdd to eglot-server-programs with major mode you want.\n\n```lisp\n(with-eval-after-load 'eglot\n  (add-to-list 'eglot-server-programs\n    `(markdown-mode . (\"efm-langserver\"))))\n```\n\n### Configuration for [neovim builtin LSP](https://neovim.io/doc/user/lsp.html) with [nvim-lspconfig](https://github.com/neovim/nvim-lspconfig)\n\nNeovim's built-in LSP client sends `DidChangeConfiguration`, so `config.yaml` is optional.\n\n`init.lua` example (`settings` follows [`schema.md`](schema.md)):\n\n```lua\nrequire \"lspconfig\".efm.setup {\n    init_options = {documentFormatting = true},\n    settings = {\n        rootMarkers = {\".git/\"},\n        languages = {\n            lua = {\n                {formatCommand = \"lua-format -i\", formatStdin = true}\n            }\n        }\n    }\n}\n```\n\nYou can get premade tool definitions from [`creativenull/efmls-configs-nvim`](https://github.com/creativenull/efmls-configs-nvim):\n```lua\nlua = {\n  require('efmls-configs.linters.luacheck'),\n  require('efmls-configs.formatters.stylua'),\n}\n```\n\nIf you define your own, make sure to define as table:\n\n```lua\nlua = {\n    {formatCommand = \"lua-format -i\", formatStdin = true}\n}\n-- NOT\nlua = {\n    formatCommand = \"lua-format -i\", formatStdin = true\n}\n\n-- and for multiple formatters, add to the table\nlua = {\n    {formatCommand = \"lua-format -i\", formatStdin = true},\n    {formatCommand = \"lua-pretty -i\"}\n}\n```\n\n## Installation\n\n```console\ngo install github.com/mattn/efm-langserver@latest\n```\n\nHomebrew\n```console\nbrew install efm-langserver\n```\n\n## License\n\nMIT\n\n## Author\n\nYasuhiro Matsumoto (a.k.a. mattn)"
}
