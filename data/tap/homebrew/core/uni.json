{
  "name": "uni",
  "full_name": "uni",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Unicode database query tool for the command-line",
  "license": "MIT",
  "homepage": "https://github.com/arp242/uni",
  "versions": {
    "stable": "2.5.1",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/arp242/uni/archive/v2.5.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "806fbba66efaa45cd5691efcd8457ba8fe88d3b2f6fd0b027f1e6ef62253d6fb"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/uni/blobs/sha256:279b2e82199bd95bf4b83532fdae413b148d56546a76b88f4bc371c972181cfb",
          "sha256": "279b2e82199bd95bf4b83532fdae413b148d56546a76b88f4bc371c972181cfb"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/uni/blobs/sha256:b9bad02bbe068358c07b85f7b4069cc518bd193dc31bf8bd2853ef9b3b612185",
          "sha256": "b9bad02bbe068358c07b85f7b4069cc518bd193dc31bf8bd2853ef9b3b612185"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/uni/blobs/sha256:b9bad02bbe068358c07b85f7b4069cc518bd193dc31bf8bd2853ef9b3b612185",
          "sha256": "b9bad02bbe068358c07b85f7b4069cc518bd193dc31bf8bd2853ef9b3b612185"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/uni/blobs/sha256:52f454796da0a7896185d0e5bfd9b1cd26d7b38cacd2baa62a88a49e6f3d1e43",
          "sha256": "52f454796da0a7896185d0e5bfd9b1cd26d7b38cacd2baa62a88a49e6f3d1e43"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/uni/blobs/sha256:86d641d3f5fadd4b9bfb08b8791bedcc7e5545a697c2b5bedd2ddb8039e12963",
          "sha256": "86d641d3f5fadd4b9bfb08b8791bedcc7e5545a697c2b5bedd2ddb8039e12963"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/uni/blobs/sha256:86d641d3f5fadd4b9bfb08b8791bedcc7e5545a697c2b5bedd2ddb8039e12963",
          "sha256": "86d641d3f5fadd4b9bfb08b8791bedcc7e5545a697c2b5bedd2ddb8039e12963"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/uni/blobs/sha256:86d641d3f5fadd4b9bfb08b8791bedcc7e5545a697c2b5bedd2ddb8039e12963",
          "sha256": "86d641d3f5fadd4b9bfb08b8791bedcc7e5545a697c2b5bedd2ddb8039e12963"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/uni/blobs/sha256:b9beb85eb77f2bd8b05bd7f49f049e9633b264da82c0ae09b041dbe56c3a8026",
          "sha256": "b9beb85eb77f2bd8b05bd7f49f049e9633b264da82c0ae09b041dbe56c3a8026"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/uni.rb",
  "ruby_source_checksum": {
    "sha256": "d41c7922bb43557f2a792e9189fbd0b76e65fcd87cc47bde592ea860f0c2958d"
  },
  "date_added": "2019-12-21T23:52:22+00:00",
  "readme": "`uni` queries the Unicode database from the commandline. It supports Unicode\n14.0 (September 2021) and has good support for emojis.\n\nThere are four commands: `identify` codepoints in a string, `search` for\ncodepoints, `print` codepoints by class, block, or range, and `emoji` to find\nemojis.\n\nThere are binaries on the [releases][release] page, and [packages][pkg] for a\nnumber of platforms. You can also [run it in your browser][uni-wasm].\n\nCompile from source with:\n\n    $ git clone https://github.com/arp242/uni\n    $ cd uni\n    $ go build\n\nwhich will give you a `uni` binary.\n\nREADME index:\n- [Integrations](#integrations)\n- [Usage](#usage)\n  - [Identify](#identify)\n  - [Search](#search)\n  - [Print](#identify)\n  - [Emoji](#emoji)\n  - [JSON](#json)\n- [ChangeLog](#changelog)\n- [Development](#development)\n- [Alternatives](#alternatives)\n\n[uni-wasm]: https://arp242.github.io/uni-wasm/\n[release]: https://github.com/arp242/uni/releases\n[pkg]: https://repology.org/project/uni/versions\n\nIntegrations\n------------\n\n- [dmenu][dmenu], [rofi][rofi], and [fzf][fzf] script at\n  [`dmenu-uni`](/dmenu-uni). See the top of the script for some options you may\n  want to frob with.\n\n- For a Vim command see [`uni.vim`](/uni.vim); just copy/paste it in your vimrc.\n\n[dmenu]: http://tools.suckless.org/dmenu\n[rofi]: https://github.com/davatorium/rofi\n[fzf]: https://github.com/junegunn/fzf\n\nUsage\n-----\n*Note: the alignment is slightly off for some entries due to the way GitHub\nrenders wide characters; in terminals it should be aligned correctly.*\n\n### Identify\n\nIdentify characters in a string, as a kind of a unicode-aware `hexdump`:\n\n    $ uni identify ‚Ç¨\n         CPoint  Dec    UTF8        HTML       Name (Cat)\n    '‚Ç¨'  U+20AC  8364   e2 82 ac    &euro;     EURO SIGN (Currency_Symbol)\n\n`i` is a shortcut for `identify`:\n\n    $ uni i h‚Ç¨√Ω\n         CPoint  Dec    UTF8        HTML       Name (Cat)\n    'h'  U+0068  104    68          &#x68;     LATIN SMALL LETTER H (Lowercase_Letter)\n    '‚Ç¨'  U+20AC  8364   e2 82 ac    &euro;     EURO SIGN (Currency_Symbol)\n    '√Ω'  U+00FD  253    c3 bd       &yacute;   LATIN SMALL LETTER Y WITH ACUTE (Lowercase_Letter)\n\nIt reads from stdin:\n\n    $ head -c2 README.markdown | uni i\n         cpoint  dec    utf-8       html       name (cat)\n    '['  U+005B  91     5b          &lsqb;     LEFT SQUARE BRACKET (Open_Punctuation)\n    '!'  U+0021  33     21          &excl;     EXCLAMATION MARK (Other_Punctuation)\n\nYou can use `-compact` (or `-c`) to suppress the header, and `-format` (or `-f`)\nto control the output format, for example you may want to generate a codepoint\nto X11 keysym mapping:\n\n    $ uni i -c -f '0x%(hex): \"%(keysym)\", // %(name)' h‚Ç¨√Ω\n    0x68: \"h\", // LATIN SMALL LETTER H\n    0x20ac: \"EuroSign\", // EURO SIGN\n    0xfd: \"yacute\", // LATIN SMALL LETTER Y WITH ACUTE\n\nSee `uni help` for more details on the `-format` flag; this flag can also be\nadded to other commands.\n\n### Search\n\nSearch description:\n\n    $ uni search euro\n         CPoint  Dec    UTF8        HTML       Name (Cat)\n    '‚Ç†'  U+20A0  8352   e2 82 a0    &#x20a0;   EURO-CURRENCY SIGN (Currency_Symbol)\n    '‚Ç¨'  U+20AC  8364   e2 82 ac    &euro;     EURO SIGN (Currency_Symbol)\n    'ê°∑'  U+10877 67703  f0 90 a1 b7 &#x10877;  PALMYRENE LEFT-POINTING FLEURON (Other_Symbol)\n    'ê°∏'  U+10878 67704  f0 90 a1 b8 &#x10878;  PALMYRENE RIGHT-POINTING FLEURON (Other_Symbol)\n    'ê´±'  U+10AF1 68337  f0 90 ab b1 &#x10af1;  MANICHAEAN PUNCTUATION FLEURON (Other_Punctuation)\n    'üåç' U+1F30D 127757 f0 9f 8c 8d &#x1f30d;  EARTH GLOBE EUROPE-AFRICA (Other_Symbol)\n    'üè§' U+1F3E4 127972 f0 9f 8f a4 &#x1f3e4;  EUROPEAN POST OFFICE (Other_Symbol)\n    'üè∞' U+1F3F0 127984 f0 9f 8f b0 &#x1f3f0;  EUROPEAN CASTLE (Other_Symbol)\n    'üí∂' U+1F4B6 128182 f0 9f 92 b6 &#x1f4b6;  BANKNOTE WITH EURO SIGN (Other_Symbol)\n\nThe `s` command is a shortcut for `search`. Multiple words are matched\nindividually:\n\n    $ uni s globe earth\n         CPoint  Dec    UTF8        HTML       Name (Cat)\n    'üåç' U+1F30D 127757 f0 9f 8c 8d &#x1f30d;  EARTH GLOBE EUROPE-AFRICA (Other_Symbol)\n    'üåé' U+1F30E 127758 f0 9f 8c 8e &#x1f30e;  EARTH GLOBE AMERICAS (Other_Symbol)\n    'üåè' U+1F30F 127759 f0 9f 8c 8f &#x1f30f;  EARTH GLOBE ASIA-AUSTRALIA (Other_Symbol)\n\nUse shell quoting for more literal matches:\n\n    $ uni s rightwards black arrow\n         CPoint  Dec    UTF8        HTML       Name (Cat)\n    '‚û°'  U+27A1  10145  e2 9e a1    &#x27a1;   BLACK RIGHTWARDS ARROW (Other_Symbol)\n    '‚û§'  U+27A4  10148  e2 9e a4    &#x27a4;   BLACK RIGHTWARDS ARROWHEAD (Other_Symbol)\n    ‚Ä¶\n\n    $ uni s 'rightwards black arrow'\n         CPoint  Dec    UTF8        HTML       Name (Cat)\n    '‚Æï'  U+2B95  11157  e2 ae 95    &#x2b95;   RIGHTWARDS BLACK ARROW (Other_Symbol)\n\nAdd `-or` or `-o` to combine the search terms with \"OR\" instead of \"AND\":\n\n    $ uni s -o globe milky\n         CPoint  Dec    UTF8        HTML       Name (Cat)\n    'üåå' U+1F30C 127756 f0 9f 8c 8c &#x1f30c;  MILKY WAY (Other_Symbol)\n    'üåç' U+1F30D 127757 f0 9f 8c 8d &#x1f30d;  EARTH GLOBE EUROPE-AFRICA (Other_Symbol)\n    'üåé' U+1F30E 127758 f0 9f 8c 8e &#x1f30e;  EARTH GLOBE AMERICAS (Other_Symbol)\n    'üåè' U+1F30F 127759 f0 9f 8c 8f &#x1f30f;  EARTH GLOBE ASIA-AUSTRALIA (Other_Symbol)\n    'üåê' U+1F310 127760 f0 9f 8c 90 &#x1f310;  GLOBE WITH MERIDIANS (Other_Symbol)\n\n### Print\n\nPrint specific codepoints or groups of codepoints:\n\n    $ uni print U+2042\n         CPoint  Dec    UTF8        HTML       Name (Cat)\n    '‚ÅÇ'  U+2042  8258   e2 81 82    &#x2042;   ASTERISM (Other_Punctuation)\n\nPrint a custom range; `U+2042`, `U2042`, and `2042` are all identical:\n\n    $ uni print 2042..2044\n         CPoint  Dec    UTF8        HTML       Name (Cat)\n    '‚ÅÇ'  U+2042  8258   e2 81 82    &#x2042;   ASTERISM (Other_Punctuation)\n    '‚ÅÉ'  U+2043  8259   e2 81 83    &hybull;   HYPHEN BULLET (Other_Punctuation)\n    '‚ÅÑ'  U+2044  8260   e2 81 84    &frasl;    FRACTION SLASH (Math_Symbol)\n\nYou can also use hex, octal, and binary numbers: `0x2024`, `0o20102`, or\n`0b10000001000010`.\n\nGeneral category:\n\n    $ uni p Po\n    Showing category Po (Other_Punctuation)\n         CPoint  Dec    UTF8        HTML       Name (Cat)\n    '!'  U+0021  33     21          &excl;     EXCLAMATION MARK (Other_Punctuation)\n    ‚Ä¶\n\nBlocks:\n\n    $ uni p arrows 'box drawing'\n    Showing block Arrows\n    Showing block Box Drawing\n         CPoint  Dec    UTF8        HTML       Name (Cat)\n    '‚Üê'  U+2190  8592   e2 86 90    &larr;     LEFTWARDS ARROW (Math_Symbol)\n    '‚Üë'  U+2191  8593   e2 86 91    &uarr;     UPWARDS ARROW (Math_Symbol)\n    ‚Ä¶\n\nPrint as table, and with a shorter name:\n\n    $ uni p -as table box\n    Showing block Box Drawing\n             0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F\n           ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n    U+250x ‚îÇ ‚îÄ   ‚îÅ   ‚îÇ   ‚îÉ   ‚îÑ   ‚îÖ   ‚îÜ   ‚îá   ‚îà   ‚îâ   ‚îä   ‚îã   ‚îå   ‚îç   ‚îé   ‚îè  \n           ‚îÇ\n    U+251x ‚îÇ ‚îê   ‚îë   ‚îí   ‚îì   ‚îî   ‚îï   ‚îñ   ‚îó   ‚îò   ‚îô   ‚îö   ‚îõ   ‚îú   ‚îù   ‚îû   ‚îü  \n           ‚îÇ\n    U+252x ‚îÇ ‚î†   ‚î°   ‚î¢   ‚î£   ‚î§   ‚î•   ‚î¶   ‚îß   ‚î®   ‚î©   ‚î™   ‚î´   ‚î¨   ‚î≠   ‚îÆ   ‚îØ  \n           ‚îÇ\n    U+253x ‚îÇ ‚î∞   ‚î±   ‚î≤   ‚î≥   ‚î¥   ‚îµ   ‚î∂   ‚î∑   ‚î∏   ‚îπ   ‚î∫   ‚îª   ‚îº   ‚îΩ   ‚îæ   ‚îø  \n           ‚îÇ\n    U+254x ‚îÇ ‚ïÄ   ‚ïÅ   ‚ïÇ   ‚ïÉ   ‚ïÑ   ‚ïÖ   ‚ïÜ   ‚ïá   ‚ïà   ‚ïâ   ‚ïä   ‚ïã   ‚ïå   ‚ïç   ‚ïé   ‚ïè  \n           ‚îÇ\n    U+255x ‚îÇ ‚ïê   ‚ïë   ‚ïí   ‚ïì   ‚ïî   ‚ïï   ‚ïñ   ‚ïó   ‚ïò   ‚ïô   ‚ïö   ‚ïõ   ‚ïú   ‚ïù   ‚ïû   ‚ïü  \n           ‚îÇ\n    U+256x ‚îÇ ‚ï†   ‚ï°   ‚ï¢   ‚ï£   ‚ï§   ‚ï•   ‚ï¶   ‚ïß   ‚ï®   ‚ï©   ‚ï™   ‚ï´   ‚ï¨   ‚ï≠   ‚ïÆ   ‚ïØ  \n           ‚îÇ\n    U+257x ‚îÇ ‚ï∞   ‚ï±   ‚ï≤   ‚ï≥   ‚ï¥   ‚ïµ   ‚ï∂   ‚ï∑   ‚ï∏   ‚ïπ   ‚ï∫   ‚ïª   ‚ïº   ‚ïΩ   ‚ïæ   ‚ïø  \n           ‚îÇ\n\nOr more compact table:\n\n    $ uni p -as table box -compact\n             0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F\n           ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n    U+250x ‚îÇ ‚îÄ   ‚îÅ   ‚îÇ   ‚îÉ   ‚îÑ   ‚îÖ   ‚îÜ   ‚îá   ‚îà   ‚îâ   ‚îä   ‚îã   ‚îå   ‚îç   ‚îé   ‚îè  \n    U+251x ‚îÇ ‚îê   ‚îë   ‚îí   ‚îì   ‚îî   ‚îï   ‚îñ   ‚îó   ‚îò   ‚îô   ‚îö   ‚îõ   ‚îú   ‚îù   ‚îû   ‚îü  \n    U+252x ‚îÇ ‚î†   ‚î°   ‚î¢   ‚î£   ‚î§   ‚î•   ‚î¶   ‚îß   ‚î®   ‚î©   ‚î™   ‚î´   ‚î¨   ‚î≠   ‚îÆ   ‚îØ  \n    U+253x ‚îÇ ‚î∞   ‚î±   ‚î≤   ‚î≥   ‚î¥   ‚îµ   ‚î∂   ‚î∑   ‚î∏   ‚îπ   ‚î∫   ‚îª   ‚îº   ‚îΩ   ‚îæ   ‚îø  \n    U+254x ‚îÇ ‚ïÄ   ‚ïÅ   ‚ïÇ   ‚ïÉ   ‚ïÑ   ‚ïÖ   ‚ïÜ   ‚ïá   ‚ïà   ‚ïâ   ‚ïä   ‚ïã   ‚ïå   ‚ïç   ‚ïé   ‚ïè  \n    U+255x ‚îÇ ‚ïê   ‚ïë   ‚ïí   ‚ïì   ‚ïî   ‚ïï   ‚ïñ   ‚ïó   ‚ïò   ‚ïô   ‚ïö   ‚ïõ   ‚ïú   ‚ïù   ‚ïû   ‚ïü  \n    U+256x ‚îÇ ‚ï†   ‚ï°   ‚ï¢   ‚ï£   ‚ï§   ‚ï•   ‚ï¶   ‚ïß   ‚ï®   ‚ï©   ‚ï™   ‚ï´   ‚ï¨   ‚ï≠   ‚ïÆ   ‚ïØ  \n    U+257x ‚îÇ ‚ï∞   ‚ï±   ‚ï≤   ‚ï≥   ‚ï¥   ‚ïµ   ‚ï∂   ‚ï∑   ‚ï∏   ‚ïπ   ‚ï∫   ‚ïª   ‚ïº   ‚ïΩ   ‚ïæ   ‚ïø  \n\n### Emoji\nThe `emoji` command (shortcut: `e`) is is the real reason I wrote this:\n\n    $ uni e cry\n    \tName                     (Cldr)\n    ü•π\tface holding back tears  (angry, cry, proud, resist, sad)\n    üò¢\tcrying face              (sad, tear)\n    üò≠\tloudly crying face       (sad, sob, tear)\n    üòø\tcrying cat               (face, sad, tear)\n    üîÆ\tcrystal ball             (fairy tale, fantasy, fortune, tool)\n\nBy default both the name and CLDR data are searched; the CLDR data is a list of\nkeywords for an emoji; prefix with `name:` or `n:` to search on the name only:\n\n    $ uni e smile\n    \tName                             (Cldr)\n    üòÉ\tgrinning face with big eyes      (mouth, open, smile)\n    üòÑ\tgrinning face with smiling eyes  (mouth, open, smile)\n    ‚Ä¶\n\n    $ uni e name:smile\n    \tName                (Cldr)\n    üòº\tcat with wry smile  (face, ironic)\n\nAs you can see, the CLDR is pretty useful, as \"smile\" only gives one result as\nmost emojis use \"smiling\".\n\nPrefix with `group:` to search by group:\n\n    $ uni e group:hands\n    \tName               (Cldr)\n    üëè\tclapping hands     ()\n    üôå\traising hands      (celebration, gesture, hooray, raised)\n    ü´∂\theart hands        (love)\n    üëê\topen hands         ()\n    ü§≤\tpalms up together  (prayer)\n    ü§ù\thandshake          (agreement, meeting)\n    üôè\tfolded hands       (ask, high 5, high five, please, pray, thanks)\n\nGroup and search can be combined, and `group:` can be abbreviated to `g:`:\n\n    $ uni e g:cat-face grin\n    \tName                            (Cldr)\n    üò∫\tgrinning cat                    (face, mouth, open, smile)\n    üò∏\tgrinning cat with smiling eyes  (face, smile)\n\nLike with `search`, use `-or` to OR the parameters together instead of AND:\n\n    $ uni e -or g:face-glasses g:face-hat\n    \tName                          (Cldr)\n    ü§†\tcowboy hat face               (cowgirl)\n    ü•≥\tpartying face                 (celebration, hat, horn)\n    ü•∏\tdisguised face                (glasses, incognito, nose)\n    üòé\tsmiling face with sunglasses  (bright, cool)\n    ü§ì\tnerd face                     (geek)\n    üßê\tface with monocle             (stuffy)\n\nApply skin tone modifiers with `-tone`:\n\n    $ uni e -tone dark g:hands\n    \tName                               (Cldr)\n    üëèüèø\tclapping hands: dark skin tone     ()\n    üôåüèø\traising hands: dark skin tone      (celebration, gesture, hooray, raised)\n    ü´∂üèø\theart hands: dark skin tone        (love)\n    üëêüèø\topen hands: dark skin tone         ()\n    ü§≤üèø\tpalms up together: dark skin tone  (prayer)\n    ü§ù\thandshake                          (agreement, meeting)\n    üôèüèø\tfolded hands: dark skin tone       (ask, high 5, high five, please, pray, thanks)\n\nThe \"heart hands\" may not show as it's very recent. The handshake emoji supports\nsetting individual skin tones per hand since Unicode 14, but this isn't\nsupported, mostly because I can't really really think a good CLI interface for\nsetting this without breaking compatibility (there are some other emojis too,\nlike \"holding hands\" and \"kissing\" where you can set both the gender and skin\ntone of both sides individually). Maybe for uni v3 someday.\n\nThe default is to display only the gender-neutral \"person\", but this can be\nchanged with the `-gender` option:\n\n    $ uni e -gender man g:person-gesture\n    \tName              (Cldr)\n    üôç‚Äç‚ôÇÔ∏è\tman frowning      (gesture, person frowning)\n    üôé‚Äç‚ôÇÔ∏è\tman pouting       (gesture, person pouting)\n    üôÖ‚Äç‚ôÇÔ∏è\tman gesturing NO  (forbidden, gesture, hand, person gesturing NO, prohibited)\n    üôÜ‚Äç‚ôÇÔ∏è\tman gesturing OK  (gesture, hand, person gesturing OK)\n    üíÅ‚Äç‚ôÇÔ∏è\tman tipping hand  (help, information, person tipping hand, sassy)\n    üôã‚Äç‚ôÇÔ∏è\tman raising hand  (gesture, happy, person raising hand, raised)\n    üßè‚Äç‚ôÇÔ∏è\tdeaf man          (accessibility, deaf person, ear, hear)\n    üôá‚Äç‚ôÇÔ∏è\tman bowing        (apology, gesture, person bowing, sorry)\n    ü§¶‚Äç‚ôÇÔ∏è\tman facepalming   (disbelief, exasperation, person facepalming)\n    ü§∑‚Äç‚ôÇÔ∏è\tman shrugging     (doubt, ignorance, indifference, person shrugging)\n\nBoth `-tone` and `-gender` accept multiple values. `-gender women,man` will\ndisplay both the female and male variants, and `-tone light,dark` will display\nboth a light and dark skin tone; use `all` to display all skin tones or genders:\n\n    $ uni e -tone light,dark -gender f,m shrug\n    \tName                              (Cldr)\n    ü§∑üèª‚Äç‚ôÇÔ∏è\tman shrugging: light skin tone    (doubt, ignorance, indifference, person shrugging)\n    ü§∑üèª‚Äç‚ôÄÔ∏è\twoman shrugging: light skin tone  (doubt, ignorance, indifference, person shrugging)\n    ü§∑üèø‚Äç‚ôÇÔ∏è\tman shrugging: dark skin tone     (doubt, ignorance, indifference, person shrugging)\n    ü§∑üèø‚Äç‚ôÄÔ∏è\twoman shrugging: dark skin tone   (doubt, ignorance, indifference, person shrugging)\n\nLike `print` and `identify`, you can use `-format`:\n\n    $ uni e g:cat-face -c -format '%(name): %(emoji)'\n    grinning cat: üò∫\n    grinning cat with smiling eyes: üò∏\n    cat with tears of joy: üòπ\n    smiling cat with heart-eyes: üòª\n    cat with wry smile: üòº\n    kissing cat: üòΩ\n    weary cat: üôÄ\n    crying cat: üòø\n    pouting cat: üòæ\n\nSee `uni help` for more details on the `-format` flag.\n\n### JSON\n\nWith `-as json` or `-as j` you can output the data as JSON:\n\n    $ uni i -as json h‚Ç¨√Ω\n    [{\n    \t\"cat\": \"Lowercase_Letter\",\n    \t\"char\": \"h\",\n    \t\"cpoint\": \"U+0068\",\n    \t\"dec\": \"104\",\n    \t\"html\": \"&#x68;\",\n    \t\"name\": \"LATIN SMALL LETTER H\",\n    \t\"utf8\": \"68\"\n    }, {\n    \t\"cat\": \"Currency_Symbol\",\n    \t\"char\": \"‚Ç¨\",\n    \t\"cpoint\": \"U+20AC\",\n    \t\"dec\": \"8364\",\n    \t\"html\": \"&euro;\",\n    \t\"name\": \"EURO SIGN\",\n    \t\"utf8\": \"e2 82 ac\"\n    }, {\n    \t\"cat\": \"Lowercase_Letter\",\n    \t\"char\": \"√Ω\",\n    \t\"cpoint\": \"U+00FD\",\n    \t\"dec\": \"253\",\n    \t\"html\": \"&yacute;\",\n    \t\"name\": \"LATIN SMALL LETTER Y WITH ACUTE\",\n    \t\"utf8\": \"c3 bd\"\n    }]\n\nAll the columns listed in `-f` will be included; you can use `-f all` to include\nall columns:\n\n    $ uni i -as json -f all h‚Ç¨√Ω\n    [{\n    \t\"bin\": \"1101000\",\n    \t\"block\": \"Basic Latin\",\n    \t\"cat\": \"Lowercase_Letter\",\n    \t\"char\": \"h\",\n    \t\"cpoint\": \"U+0068\",\n    \t\"dec\": \"104\",\n    \t\"digraph\": \"h\",\n    \t\"hex\": \"68\",\n    \t\"html\": \"&#x68;\",\n    \t\"json\": \"\\\\u0068\",\n    \t\"keysym\": \"h\",\n    \t\"name\": \"LATIN SMALL LETTER H\",\n    \t\"oct\": \"150\",\n    \t\"plane\": \"Basic Multilingual Plane\",\n    \t\"props\": \"\",\n    \t\"script\": \"Latin\",\n    \t\"utf16be\": \"00 68\",\n    \t\"utf16le\": \"68 00\",\n    \t\"utf8\": \"68\",\n    \t\"width\": \"neutral\",\n    \t\"xml\": \"&#x68;\"\n    }, {\n    \t\"bin\": \"10000010101100\",\n    \t\"block\": \"Currency Symbols\",\n    \t\"cat\": \"Currency_Symbol\",\n    \t\"char\": \"‚Ç¨\",\n    \t\"cpoint\": \"U+20AC\",\n    \t\"dec\": \"8364\",\n    \t\"digraph\": \"=e\",\n    \t\"hex\": \"20ac\",\n    \t\"html\": \"&euro;\",\n    \t\"json\": \"\\\\u20ac\",\n    \t\"keysym\": \"EuroSign\",\n    \t\"name\": \"EURO SIGN\",\n    \t\"oct\": \"20254\",\n    \t\"plane\": \"Basic Multilingual Plane\",\n    \t\"props\": \"\",\n    \t\"script\": \"Common\",\n    \t\"utf16be\": \"20 ac\",\n    \t\"utf16le\": \"ac 20\",\n    \t\"utf8\": \"e2 82 ac\",\n    \t\"width\": \"ambiguous\",\n    \t\"xml\": \"&#x20ac;\"\n    }, {\n    \t\"bin\": \"11111101\",\n    \t\"block\": \"Latin-1 Supplement\",\n    \t\"cat\": \"Lowercase_Letter\",\n    \t\"char\": \"√Ω\",\n    \t\"cpoint\": \"U+00FD\",\n    \t\"dec\": \"253\",\n    \t\"digraph\": \"y'\",\n    \t\"hex\": \"fd\",\n    \t\"html\": \"&yacute;\",\n    \t\"json\": \"\\\\u00fd\",\n    \t\"keysym\": \"yacute\",\n    \t\"name\": \"LATIN SMALL LETTER Y WITH ACUTE\",\n    \t\"oct\": \"375\",\n    \t\"plane\": \"Basic Multilingual Plane\",\n    \t\"props\": \"\",\n    \t\"script\": \"Latin\",\n    \t\"utf16be\": \"00 fd\",\n    \t\"utf16le\": \"fd 00\",\n    \t\"utf8\": \"c3 bd\",\n    \t\"width\": \"narrow\",\n    \t\"xml\": \"&#xfd;\"\n    }]\n\nThis also works for the `emoji` command:\n\n    $ uni e -as json -f all 'kissing cat'\n    [{\n    \t\"cldr\": \"eye, face\",\n    \t\"cldr_full\": \"cat, eye, face, kiss, kissing cat\",\n    \t\"cpoint\": \"U+1F63D\",\n    \t\"emoji\": \"üòΩ\",\n    \t\"group\": \"Smileys & Emotion\",\n    \t\"name\": \"kissing cat\",\n    \t\"subgroup\": \"cat-face\"\n    }]\n\nAll values are always a string, even numerical values. This makes things a bit\neasier/consistent as JSON doesn't support hex literals and such. Use `jq` or\nsome other tool if you want to process the data further.\n\n\nChangeLog\n---------\n\n### unreleased\n\n- Add \"script\" property (e.g. `uni i a -f '%(script)'`). Also supported in the\n  list and print commands (`uni list scripts`, `uni p 'script:linear a'`.\n\n\n### 2.5.1 (2022-05-09)\n\n- Fix build on Go 1.17 and earlier.\n\n### 2.5.0 (2022-05-03)\n\n- Add support for properties; they can be displayed with `%(props)` in\n  `-format`, and selected in `print` (e.g. `uni print dash`).\n\n- Add `uni list` command, to list categories, blocks, and properties.\n\n- Allow explicitly selecting a block, category, or property in `print` with\n  `block:name` (`b:name`), `category:name` (`cat:name`, `c:name`), or\n  `property:name` (`prop:name`, `p:name`).\n\n  Also print an error if a string without prefix matched more than one group\n  (i.e. `uni p dash` matches both the property `Dash` and category\n  `Dash_Punctuation`).\n\n- Add table layout with `-as table`. Also change `-json`/`-j` to `-as json` or\n  `-as j`. The `-json` flag is still accepted as an alias for compatibility.\n\n- Change `-q`/`-quiet` to `-c`/`-compact`; `-as json` will print as minified if\n  given, and `-as table` will include less padding. `-q` is still accepted as an\n  alias for compatibility.\n\n- Don't use the Go stdlib `unicode` package; since this is a Unicode 13 database\n  and some operations would fail on codepoints added in Unicode 14 due to the\n  mismatch.\n\n### v2.4.0 (2021-12-20)\n\n- Update import path to `zgo.at/uni/v2`.\n\n- Add `oct` and `bin` flags for `-f` to print a codepoint as octal or binary.\n\n- Add `f` format flag to change the fill character with alignment; e.g.\n  `%(bin r:auto f:0)` will print zeros on the left.\n\n- Allow using just `o123` for an octal number (instead of `0o123`). We can't do\n  this for binary and decimal numbers (since `b` and `d` are valid\n  hexidecimals), but no reason not to do it for `o`.\n\n### v2.3.0 (2021-10-05)\n\n- Update to Unicode 14.0.\n\n- UTF-16 and JSON are printed as lower case, just like UTF-8 was. Upper-case is\n  used only for codepoints (i.e. U+00AC).\n\n- `uni print` can now print from UTF-8 byte sequence; for example to print the ‚Ç¨\n  sign:\n\n      uni p utf8:e282ac\n      uni p 'utf8:e2 82 ac'\n      uni p 'utf8:0xe2 0x82 0xac'\n\n  Bytes can optionally be separated by any combination of `0x`, `-`, `_`, or spaces.\n\n### v2.2.1 (2021-06-15)\n\n- You can now use `uni p 0d40` to get U+28 by decimal.\n\n  `uni print 40` interprets the `40` as hex instead of decimal, and there was no\n  way to get a codepoint by decimal number. Since codepoints are much more more\n  common than decimals, leaving off the `U+` and `U` is a useful shortcut I'd\n  like to keep. AFAIK there isn't really a standard(-ish) was to explicitly\n  indicate a number is a decimal, so this is probably the closest.\n\n### v2.2.0 (2021-06-05)\n\n- Make proper use of the `/v2` import path so that `go get` and `go install`\n  work. (#26)\n\n- Don't panic if `-f` doesn't contain any formatting characters.\n\n### v2.1.0 (2021-03-30)\n\n- Can now output as JSON with `-j` or `-json`.\n\n- `-format all` is a special value to include all columns uni knows about. This\n  is useful especially in combination with `-json`.\n\n- Add `%(block)`, `%(plane)`, `%(width)`, `%(utf16be)`, `%(utf16le)`, and\n  `%(json) to `-f`.\n\n- Refactor the arp242.net/uni/unidata package to be more useful for other use\n  cases. This isn't really relevant for `uni` users as such, but if you want to\n  get information about codepoints or emojis then this package is a nice\n  addition to the standard library's `unicode` package.\n\n### v2.0.0 (2021-01-03)\n\nThis changes some flags, semantics, and defaults in **incompatible** ways, hence\nthe bump to 2.0. If you use the `dmenu-uni` script with dmenu or fzf, then\nyou'll need to update that to.\n\n- Remove the `-group` flag in favour of `group:name` syntax; this is more\n  flexible and will allow adding more query syntax later.\n\n      uni emoji -group groupname,othergroup                  Old syntax\n      uni emoji -group groupname,othergroup smile            Old syntax\n\n      uni emoji -or group:groupname group:othergroup         New syntax\n      uni emoji -or group:groupname group:othergroup smile   New syntax\n\n      uni emoji -or g:groupname g:othergroup                 Can use shorter g: instead of group:\n\n- Default for `-gender` is now `person` instead of `all`; including all genders\n  by default isn't all that useful, and the gender-neutral \"person\" should be a\n  fine default for most, just as the skin colour-neutral \"yellow\" is probably a\n  fine default for most.\n\n- Add new `-or`/`-o` flag. The default for `search` and `emoji` is to show\n  everything where all query parameters match (\"AND\"); with this flag it shows\n  everything where at least one parameter matches (\"OR\").\n\n- Add new `-format`/`-f` flag to control which columns to output and column\n  width. You can now also print X11 keysyms and Vim digraphs. See `uni help` for\n  details.\n\n- Include CLDR data for emojis, which is searched by default if you use `uni e\n  <something>`. You can use `uni e name:x` to search for the name specifically.\n\n- Show a short terse help when using just `uni`, and a more detailed help on\n  `uni help`. I hate it when programs print 5 pages of text to my terminal when\n  I didn't ask for it.\n\n- Update Unicode data to 13.1.\n\n- Add option to output to `$PAGER` with `-p` or `-pager`. This isn't done\n  automatically (I don't really like it when programs throw me in a pager), but\n  you can define a shell alias (`alias uni='uni -p'`) if you want it by default\n  since flags can be both before or after the command.\n\n### v1.1.1 (2020-05-31)\n\n- Fix tests of v1.1.0, requested by a packager. No changes other than this.\n\n### v1.1.0 (2020-03-17)\n\n- Update Unicode data from 12.1 to 13.0.\n\n- `print` command supports codepoints as hex (`0xff`), octal (`0o42`), and\n  binary (`0b1001`).\n\n- A few very small bugfixes.\n\n### v1.0.0 (2019-12-12)\n\n- Initial release\n\nDevelopment\n-----------\n\nRe-generate the Unicode data with `go generate unidata`. Files are cached in\n`unidata/.cache`, so clear that if you want to update the files from remote.\nThis requires zsh and GNU awk (gawk).\n\nAlternatives\n------------\n\n### CLI/TUI\n\n- https://github.com/philpennock/character\n\n  More or less similar to uni, but very different CLI, and has some additional\n  features. Seems pretty good.\n\n- https://github.com/sindresorhus/emoj\n\n  Doesn't support emojis sequences (e.g. MAN SHRUGGING is PERSON SHRUGGING +\n  MAN, FIREFIGHTER is PERSON + FIRE TRUCK, etc); quite slow for a CLI program\n  (`emoj smiling` takes 1.8s on my system, sometimes a lot longer), search\n  results are pretty bad (`shrug` returns unamused face, thinking face, eyes,\n  confused face, neutral face, tears of joy, and expressionless face ... but not\n  the shrugging emoji), not a fan of npm (has 1862 dependencies).\n\n- https://github.com/Fingel/tuimoji\n\n  Grouping could be better, doesn't support emojis sequences, only interactive\n  TUI, feels kinda slow-ish especially when searching.\n\n- https://github.com/pemistahl/chr\n\n  Only deals with codepoints, not emojis.\n\n### GUI\n\n- gnome-characters\n\n  Uses Gnome interface/window decorations and won't work well with other WMs,\n  doesn't deal with emoji sequences, I don't like the grouping/ordering it uses,\n  requires two clicks to copy a character.\n\n- gucharmap\n\n  Doesn't display emojis, just unicode blocks.\n\n- KCharSelect\n\n  Many KDE-specific dependencies (106M). Didn't try it.\n\n- https://github.com/Mange/rofi-emoji and https://github.com/fdw/rofimoji\n\n  Both are pretty similar to the dmenu/rofi integration of uni with some minor\n  differences, and both seem to work well with no major issues.\n\n- gtk3 emoji picker (Ctrl+; or Ctrl+. in gtk 3.93 or newer)\n\n  Only works in GTK, doesn't work with `GTK_IM_MODULE=xim` (needed for compose\n  key), for some reasons the emojis look ugly, doesn't display emojis sequences,\n  doesn't have a tooltip or other text description about what the emoji actually\n  is, the variation selector doesn't seem to work (never displays skin tone?),\n  doesn't work in Firefox.\n\n  This is so broken on my system that it seems that I'm missing something for\n  this to work or something?\n\n- https://github.com/rugk/awesome-emoji-picker\n\n  Only works in Firefox; takes a tad too long to open; doesn't support skin\n  tones.\n\n### Didn't investigate (yet)\n\nSome alternatives people have suggested that I haven't looked at; make an issue\nor email me if you know of any others.\n\n- https://github.com/cassidyjames/ideogram\n- https://github.com/OzymandiasTheGreat/emoji-keyboard\n- https://github.com/salty-horse/ibus-uniemoji\n- https://fcitx-im.org/wiki/Unicode\n- http://kassiopeia.juls.savba.sk/~garabik/software/unicode/ and https://github.com/garabik/unicode (same?)\n- https://billposer.org/Software/unidesc.html\n- https://github.com/NoraCodes/charpicker (rofi)"
}
