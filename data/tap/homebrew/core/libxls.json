{
  "name": "libxls",
  "full_name": "libxls",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Read binary Excel files from C/C++",
  "license": "BSD-2-Clause",
  "homepage": "https://github.com/libxls/libxls",
  "versions": {
    "stable": "1.6.2",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/libxls/libxls/releases/download/v1.6.2/libxls-1.6.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "5dacc34d94bf2115926c80c6fb69e4e7bd2ed6403d51cff49041a94172f5e371"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libxls/blobs/sha256:5dbc5a3cc52e9f6b52bfe3c1f065b687ce7596fcd30b75ca0ba6ad55613d878d",
          "sha256": "5dbc5a3cc52e9f6b52bfe3c1f065b687ce7596fcd30b75ca0ba6ad55613d878d"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libxls/blobs/sha256:fdcf6a5152977cad6b6cd2e9098fa656a77a082e1bd33de0688aaab7a1a7ab7e",
          "sha256": "fdcf6a5152977cad6b6cd2e9098fa656a77a082e1bd33de0688aaab7a1a7ab7e"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libxls/blobs/sha256:7d39e15d8683c700347ab81d920698354cc96d195b64e8483784e6cac36b75fa",
          "sha256": "7d39e15d8683c700347ab81d920698354cc96d195b64e8483784e6cac36b75fa"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libxls/blobs/sha256:f11fa55a4772754f5acb3d6915d6ac2b934ef07592fe6057cdedb6fb212c08ad",
          "sha256": "f11fa55a4772754f5acb3d6915d6ac2b934ef07592fe6057cdedb6fb212c08ad"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libxls/blobs/sha256:ae68097132fde8b5fe81d0f251184d450930765e52aa64565923295dfe1288aa",
          "sha256": "ae68097132fde8b5fe81d0f251184d450930765e52aa64565923295dfe1288aa"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libxls/blobs/sha256:a00c9704817ff786484d2da807aaf5ba39bfc2ce1c79370830cdbe62e7ac706d",
          "sha256": "a00c9704817ff786484d2da807aaf5ba39bfc2ce1c79370830cdbe62e7ac706d"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libxls/blobs/sha256:2081f2f715405c37ac444e89377033c06bd922d04d04c63db93e01aa9222827d",
          "sha256": "2081f2f715405c37ac444e89377033c06bd922d04d04c63db93e01aa9222827d"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/libxls/blobs/sha256:a9fa950062d66333e82b1d7dd146251d070a13f2e66367cd7ddee7ecc811b7b1",
          "sha256": "a9fa950062d66333e82b1d7dd146251d070a13f2e66367cd7ddee7ecc811b7b1"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/libxls.rb",
  "ruby_source_checksum": {
    "sha256": "08889d71bb59e1ec9c646eaeef951241099492c8c9bc25fd5792afe3f69a4757"
  },
  "date_added": "2021-11-08T07:55:05+00:00",
  "readme": "[![Build Status](https://github.com/libxls/libxls/workflows/build/badge.svg)](https://github.com/libxls/libxls/actions)\n[![Fuzzing Status](https://oss-fuzz-build-logs.storage.googleapis.com/badges/libxls.svg)](https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&can=1&q=proj:libxls)\n\nlibxls - Read XLS files from C\n==\n\nThis is libxls, a C library for reading Excel files in the nasty old binary OLE\nformat, plus a command-line tool for converting XLS to CSV (named, appropriately\nenough, `xls2csv`).\n\nAfter several years of neglect, libxls is under new management as of the 1.5.x\nseries. Head over to [releases](https://github.com/libxls/libxls/releases) to\nget the latest stable version of libxls 1.5, which fixes *many* security\nvulnerabilities found in libxls 1.4 and earlier.\n\nLibxls 1.5 also includes new APIs for parsing files stored in memory buffers,\nand returns errors instead of exiting upon encountering malformed input. If you\nfind a bug, please file it on the [GitHub issue tracker](https://github.com/libxls/libxls/issues).\n\nChanges to libxls since 1.4:\n\n* Hosted on GitHub (hooray!)\n* New in-memory parsing API (see `xls_open_buffer`)\n* Internals rewritten to return errors instead of exiting\n* Heavily fuzz-tested with clang's libFuzzer, fixing many memory leaks and CVEs\n* Improved compatibility with C++\n* Continuous integration tests on Mac, Linux, and Windows\n* Lots of other small fixes, see the commit history\n\nThe [C API](include/xls.h) is pretty simple, this will get you started:\n\n```c\nxls_error_t error = LIBXLS_OK;\nxlsWorkBook *wb = xls_open_file(\"/path/to/finances.xls\", \"UTF-8\", &error);\nif (wb == NULL) {\n    printf(\"Error reading file: %s\\n\", xls_getError(error));\n    exit(1);\n}\nfor (int i=0; i<wb->sheets.count; i++) { // sheets\n    xlsWorkSheet *work_sheet = xls_getWorkSheet(work_book, i);\n    error = xls_parseWorkSheet(work_sheet);\n    for (int j=0; j<=work_sheet->rows.lastrow; j++) { // rows\n        xlsRow *row = xls_row(work_sheet, j);\n        for (int k=0; k<=work_sheet->rows.lastcol; k++) { // columns\n            xlsCell *cell = &row->cells.cell[k];\n            // do something with cell\n            if (cell->id == XLS_RECORD_BLANK) {\n                // do something with a blank cell\n            } else if (cell->id == XLS_RECORD_NUMBER) {\n               // use cell->d, a double-precision number\n            } else if (cell->id == XLS_RECORD_FORMULA) {\n                if (strcmp(cell->str, \"bool\") == 0) {\n                    // its boolean, and test cell->d > 0.0 for true\n                } else if (strcmp(cell->str, \"error\") == 0) {\n                    // formula is in error\n                } else {\n                    // cell->str is valid as the result of a string formula.\n                }\n            } else if (cell->str != NULL) {\n                // cell->str contains a string value\n            }\n        }\n    }\n    xls_close_WS(work_sheet);\n}\nxls_close_WB(wb);\n```\n\nThe library also includes a CLI tool for converting Excel files to CSV:\n\n    ./xls2csv /path/to/file.xls\n\nThe man page for `xls2csv` has more details.\n\nLibxls should run fine on both little-endian and big-endian systems, but if not\nplease open an [issue](https://github.com/libxls/libxls/issues/new).\n\nIf you want to hack on the source, you should first familiarize yourself with\nthe [Microsoft Excel File Format](http://sc.openoffice.org/excelfileformat.pdf)\nas well as [Compound Document file\nformat](http://sc.openoffice.org/compdocfileformat.pdf) (documentation provided\nby the nice folks at OpenOffice.org).\n\nInstallation\n---\n\nIf you want a stable version, check out the\n[Releases](https://github.com/libxls/libxls/releases) section, which has copies of everything\nyou'll find in [Sourceforge](https://sourceforge.net/projects/libxls/files/),\nand download version 1.5.0 or later.\n\nFor full instructions see [INSTALL](INSTALL), or here's the tl;dr:\n\nTo install a stable release:\n\n```\n./configure\nmake\nmake install\n```\n\nIf you've cloned the git repository, you'll need to run this first:\n\n```\n./bootstrap\n```\n\nThat will generate all the supporting files. It assumes autotools is already\ninstalled on the system (and also expects Autoconf Archive to be present).\n\nLanguage bindings\n---\n\nIf C is not your cup of tea, you can make use of libxls in several other languages, including:\n\n* [Haskell](https://hackage.haskell.org/package/xls)\n* [R](https://readxl.tidyverse.org)\n* [Rust](https://github.com/evanmiller/rust-xls)\n* [Go](https://github.com/godzie44/go-xls)\n* [Crystal](https://github.com/mdwagner/xls.cr)"
}
