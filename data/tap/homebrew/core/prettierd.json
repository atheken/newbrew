{
  "name": "prettierd",
  "full_name": "prettierd",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Prettier daemon",
  "license": "ISC",
  "homepage": "https://github.com/fsouza/prettierd",
  "versions": {
    "stable": "0.24.2",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://registry.npmjs.org/@fsouza/prettierd/-/prettierd-0.24.2.tgz",
      "tag": null,
      "revision": null,
      "checksum": "1dfe44ebfad78799fcaf477cd9fdb74be4095b1646433de2b13f490498106670"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/prettierd/blobs/sha256:e3a1de65c229f2439c2bf07971d8b73a932c6cd275f293a7406f56cbfe799637",
          "sha256": "e3a1de65c229f2439c2bf07971d8b73a932c6cd275f293a7406f56cbfe799637"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/prettierd/blobs/sha256:e3a1de65c229f2439c2bf07971d8b73a932c6cd275f293a7406f56cbfe799637",
          "sha256": "e3a1de65c229f2439c2bf07971d8b73a932c6cd275f293a7406f56cbfe799637"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/prettierd/blobs/sha256:e3a1de65c229f2439c2bf07971d8b73a932c6cd275f293a7406f56cbfe799637",
          "sha256": "e3a1de65c229f2439c2bf07971d8b73a932c6cd275f293a7406f56cbfe799637"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/prettierd/blobs/sha256:e3a1de65c229f2439c2bf07971d8b73a932c6cd275f293a7406f56cbfe799637",
          "sha256": "e3a1de65c229f2439c2bf07971d8b73a932c6cd275f293a7406f56cbfe799637"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/prettierd/blobs/sha256:e3a1de65c229f2439c2bf07971d8b73a932c6cd275f293a7406f56cbfe799637",
          "sha256": "e3a1de65c229f2439c2bf07971d8b73a932c6cd275f293a7406f56cbfe799637"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/prettierd/blobs/sha256:e3a1de65c229f2439c2bf07971d8b73a932c6cd275f293a7406f56cbfe799637",
          "sha256": "e3a1de65c229f2439c2bf07971d8b73a932c6cd275f293a7406f56cbfe799637"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/prettierd/blobs/sha256:57feb7a5c0c9bb1581c07c1c1efbf3d1342735184389f8f92d77057709b53379",
          "sha256": "57feb7a5c0c9bb1581c07c1c1efbf3d1342735184389f8f92d77057709b53379"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "node"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/prettierd.rb",
  "ruby_source_checksum": {
    "sha256": "e5c31a86de5614bbed60c7359e3394b068d7488efcb0b5fa10dc83463ec57585"
  },
  "date_added": "2023-07-25T09:43:50+08:00",
  "readme": "# prettierd\n\n[![Build Status](https://github.com/fsouza/prettierd/workflows/Build/badge.svg)](https://github.com/fsouza/prettierd/actions?query=branch:main+workflow:Build)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Installation guide](#installation-guide)\n- [Using in the command line with node.js](#using-in-the-command-line-with-nodejs)\n- [Supported languages / plugins](#supported-languages--plugins)\n- [Additional plugins](#additional-plugins)\n- [Provide Default Configuration](#provide-default-configuration)\n- [Local Instance](#local-instance)\n- [Editor integration](#editor-integration)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\nWanna run prettier in your editor, but fast? Welcome to prettierd!\n\nThis is built on top of [core_d.js](https://github.com/mantoni/core_d.js) and\nintegrates with prettier.\n\n## Installation guide\n\n```\n$ npm install -g @fsouza/prettierd\n```\n\n**NOTE**: `npm` comes builtin to [`node`](https://nodejs.org).\n\nAlternatively, users may also use homebrew:\n\n```\n$ brew install fsouza/prettierd/prettierd\n```\n\n## Using in the command line with node.js\n\nThe prettierd script always takes the file in the standard input and the\npositional parameter with the name of the file:\n\n```\n$ cat file.ts | prettierd file.ts\n```\n\n## Supported languages / plugins\n\nMany parsers ship with prettierd, including JavaScript, TypeScript, GraphQL,\nCSS, HTML and YAML.\nPlease notice that starting with version 0.12.0, prettierd now supports\ninvoking the local version of prettier, so instead of adding new languages to\nprettierd, you should rely on that feature to use it locally with your custom\nversion of prettier and enabled plugins.\n\n## Additional plugins\n\nAdditional plugins can be supported by installing them and adding them to the\nprettier configuration. For example, to use the Ruby plugin, install\n[`@prettier/plugin-ruby`](https://www.npmjs.com/package/@prettier/plugin-ruby)\nand add it to your configuration:\n\n```json\n{\n  ... other settings\n  \"plugins\": [\"@prettier/plugin-ruby\"]\n}\n```\n\nThen formatting Ruby files should be possible.\n\n## Provide Default Configuration\n\nYou can provide a default configuration for the prettier via setting the\nenvironment variable `PRETTIERD_DEFAULT_CONFIG` to the exact path of the\n`prettier` configuration file.\n\n## Local Instance\n\nIf you have locally installed `prettier` in your package, it will use that.\nOtherwise, it will use the one bundled with the package itself.\n\nIf you want to use prettierd exclusively with the locally installed prettier\npackage, you can set the environment variable `PRETTIERD_LOCAL_PRETTIER_ONLY`\n(any truthy value will do, good examples are `true` or `1`).\n\n## Editor integration\n\nI use this directly with neovim's LSP client, via\n[efm-langserver](https://github.com/mattn/efm-langserver):\n\n```lua\nlocal prettier = {\n  formatCommand = 'prettierd \"${INPUT}\"',\n  formatStdin = true,\n  env = {\n    string.format('PRETTIERD_DEFAULT_CONFIG=%s', vim.fn.expand('~/.config/nvim/utils/linter-config/.prettierrc.json')),\n  },\n}\n```\n\nAlternatively, one can use\n[prettierme](https://github.com/ruyadorno/prettierme) to integrate directly\nwith other editors.\n\nOr, as a third option for users of Vim/Neovim plugins such as\n[formatter.nvim](https://github.com/mhartington/formatter.nvim) or\n[vim-codefmt](https://github.com/google/vim-codefmt), you can configure\nprettierd in the stdin mode. Below is an example with `formatter.nvim`:\n\n```lua\nrequire('formatter').setup({\n  logging = false,\n  filetype = {\n    javascript = {\n        -- prettierd\n       function()\n          return {\n            exe = \"prettierd\",\n            args = {vim.api.nvim_buf_get_name(0)},\n            stdin = true\n          }\n        end\n    },\n    -- other formatters ...\n  }\n})\n```\n\nI don't know much about other editors, but feel free to send a pull requests on\ninstructions."
}
