{
  "name": "pickle",
  "full_name": "pickle",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "PHP Extension installer",
  "license": "BSD-3-Clause",
  "homepage": "https://github.com/FriendsOfPHP/pickle",
  "versions": {
    "stable": "0.7.11",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/FriendsOfPHP/pickle/releases/download/v0.7.11/pickle.phar",
      "tag": null,
      "revision": null,
      "checksum": "fe68430bbaf01b45c7bf46fa3fd2ab51f8d3ab41e6f5620644d245a29d56cfd6"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pickle/blobs/sha256:d4f920dd057755ffe7ffeda8c69132b8eef968197f8afc6d6cb2c635b0ced65d",
          "sha256": "d4f920dd057755ffe7ffeda8c69132b8eef968197f8afc6d6cb2c635b0ced65d"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pickle/blobs/sha256:d9f2e503ecd0cb0ffbb7297c91ade88e59fae31c5d9f898f0733e57b86c72020",
          "sha256": "d9f2e503ecd0cb0ffbb7297c91ade88e59fae31c5d9f898f0733e57b86c72020"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pickle/blobs/sha256:d9f2e503ecd0cb0ffbb7297c91ade88e59fae31c5d9f898f0733e57b86c72020",
          "sha256": "d9f2e503ecd0cb0ffbb7297c91ade88e59fae31c5d9f898f0733e57b86c72020"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pickle/blobs/sha256:54396906b51eee78fa431988387356533e61a69629388aee1a2a534df1776fe4",
          "sha256": "54396906b51eee78fa431988387356533e61a69629388aee1a2a534df1776fe4"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pickle/blobs/sha256:bcb061bd3996f49e3b6ee1848677a1fb1858cd126c810f22bd82dbfe3518b59c",
          "sha256": "bcb061bd3996f49e3b6ee1848677a1fb1858cd126c810f22bd82dbfe3518b59c"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pickle/blobs/sha256:bcb061bd3996f49e3b6ee1848677a1fb1858cd126c810f22bd82dbfe3518b59c",
          "sha256": "bcb061bd3996f49e3b6ee1848677a1fb1858cd126c810f22bd82dbfe3518b59c"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pickle/blobs/sha256:bcb061bd3996f49e3b6ee1848677a1fb1858cd126c810f22bd82dbfe3518b59c",
          "sha256": "bcb061bd3996f49e3b6ee1848677a1fb1858cd126c810f22bd82dbfe3518b59c"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pickle/blobs/sha256:d9f2e503ecd0cb0ffbb7297c91ade88e59fae31c5d9f898f0733e57b86c72020",
          "sha256": "d9f2e503ecd0cb0ffbb7297c91ade88e59fae31c5d9f898f0733e57b86c72020"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "php"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/pickle.rb",
  "ruby_source_checksum": {
    "sha256": "6d73f1f082282cea0b1c00bd1aefc05dce1fcfe9a169b9b21ca57ed88fde3205"
  },
  "date_added": "2020-10-23T06:52:34+00:00",
  "readme": "pickle - PHP Extension installer [![SensioLabsInsight](https://insight.sensiolabs.com/projects/7e153d04-79be-47e6-b2ee-60cdc2665dd5/small.png)](https://insight.sensiolabs.com/projects/7e153d04-79be-47e6-b2ee-60cdc2665dd5)\n================================\n\nPickle installs PHP extensions easily on all platforms.\n\n[![Code Climate](https://codeclimate.com/github/FriendsOfPHP/pickle.svg)](https://codeclimate.com/github/FriendsOfPHP/pickle)\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/FriendsOfPHP/pickle/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/FriendsOfPHP/pickle/?branch=master)\n[![Code Coverage](https://scrutinizer-ci.com/g/FriendsOfPHP/pickle/badges/coverage.png?b=master)](https://scrutinizer-ci.com/g/FriendsOfPHP/pickle/?branch=master)\n[![Build Status](https://github.com/FriendsOfPHP/pickle/workflows/Tests/badge.svg?branch=master)](https://github.com/FriendsOfPHP/pickle/actions?query=workflow%3ATests)\n\nInstallation\n------------\nGrab the latest phar at https://github.com/FriendsOfPHP/pickle/releases/latest \n```sh\nwget https://github.com/FriendsOfPHP/pickle/releases/latest/download/pickle.phar\n```\n\nand run using\n```sh\n$ php pickle.phar\n```\nor add the execute flag\n```sh\n$ chmod +x pickle.phar\n```\nthen run as:\n```sh\n$ pickle.phar info apcu\n```\nYou can also rename the phar to \"pickle\"\n```sh\n$ mv pickle.phar pickle\n```\nso it can be called using pickle only.\n\nAnd finally you can add it to your path or copy it in /usr/local/bin or your favorite binary directory.\n\nOn windows, use\n```sh\n$ php pickle.phar\n```\nor create a .bat containing:\n```\n@echo OFF\nsetlocal DISABLEDELAYEDEXPANSION\nc:\\path\\to\\php.exe \"c:\\path\\to\\pickle.phar\" %*\n```\n\nIf someone would be kind enough to write an installer script, we would be eternally thankful :)\n\nIntroduction\n------------\n\nPickle is a new PHP extension installer. It is based on Composer and the plan is to get Composer to fully support it. See https://github.com/composer/composer/pull/2898#issuecomment-48439196 for the Composer part of the discussions.\n\nPickle fully supports existing extensions in http://pecl.php.net, running the following will install the latest available version of the memcache extension:\n\n```sh\n$ pickle install memcache\n```\n\nWindows is fully supported, to install binaries or from the sources (work in progress and given that you have a working build environment in place).\n\nThe concept behind Pickle is to ease the life of both developers and end users.\n\nFor end users, nothing changes much except that Pickle is based on modern concepts and works with multiple protocols (git or http(s) URLs).\n\nFor developers, it drastically reduces the release work. Extension meta information is not duplicated anymore. Configuration options, files to package etc. are automatically fetched from the sources and the respective files are updated during the release process. There is no risk anymore of forgetting to update the version here or there, or to neglect to include a file.\n\nInstallation From Sources\n-------------------------\n\nWhile the phar usage is recommended, one is indeed able to use it from git.\n\nClone this repository and install the dependencies with\n[Composer](http://getcomposer.org/):\n\n```sh\n$ composer install\n```\nIf you like to create your own phar from the pickle sources, you will need to install Box (http://box-project.github.io/box2/). Then clone the repository and run the following commands:\n\n```sh\n$ cd pickle\n$ composer install --no-dev --optimize-autoloader\n$ php -d phar.readonly=0 box.phar build\n```\n\nUsage\n-----\n\nUsage is pretty straightforward. For example, to install the memcache extension run the following command:\n\n```sh\n$ bin/pickle install memcache\n```\n\nIf you need to install a specific version of an extension, you may do so:\n```sh\n$ bin/pickle install redis@5.3.2\n```\n\nYou can also use pickle from your extension directory, the following command:\n\n```sh\n$ cd myext\n$ bin/pickle install\n```\n\nA list of the commands is available using:\n\n```sh\n$ bin/pickle list\n```\n\nTo get extended help for a given command, use:\n\n```sh\n$ bin/pickle help install\n```\n\nTo convert a package (based on package.xml current PECL installer), use:\n\n```sh\n$ bin/pickle convert /home/pierre/myext/\n```\n\nOr run it from the extension source directory.\n\nContributing\n------------\n\nFork the project, create a feature branch and send us a pull request.\n\nTo ensure a consistent code base, you should make sure the code follows\nthe [PSR-1](http://www.php-fig.org/psr/psr-1/) and\n[PSR-2](http://www.php-fig.org/psr/psr-2/) coding standards.\n\nTo check CS issues, you can use the `cs-check` composer command:\n\n```sh\n$ composer run cs-check\n```\n\nTo automatically fix CS issues, you can use the `cs-fix` composer command:\n\n```sh\n$ composer run cs-fix\n```\n\nSupport\n-------\n\nSupport is available via the [issue\ntracker](https://github.com/FriendsOfPHP/pickle/issues) in the Github project page\nor via [IRC, EFNet, channel `#pickle`](http://chat.efnet.org/).\n\nRunning tests\n-------------\n\nYou should run the tests by setting the `PICKLE_PECL_TESTSERVER` environment variable to `yes` (or `true` or `1`).\nThis implies that test are executed using a well-defined environment instead of using a live web server.\n\n```sh\n# On Unix-like systems\nexport PICKLE_PECL_TESTSERVER=yes\n# On Windows systems\nset PICKLE_PECL_TESTSERVER=yes\n```\n\nUnit tests are written using [atoum](https://github.com/atoum/atoum).\nYou will get atoum, among other dependencies, when running `composer install`.\nTo run tests, you will need to run the following command:\n\n```sh\n$ vendor/bin/atoum\n\n# To run tests in a loop, ideal to do TDD\n$ vendor/bin/atoum --loop\n```\n\nThere are also some [Behat](https://github.com/behat/behat) tests.\nYou will get Behat, among other dependencies, when running `composer install`.\nTo run tests, you will need to run the following command:\n\n```sh\n$ vendor/bin/behat\n\n# To choose the test suite you want to run\n$ vendor/bin/behat -s pickle\n```\nBehat tests also test the phar, generate it prior to run the full test as described here (composer install --no-dev mode).\n\nPickle is covered using 4 Behat tests suites:\n\n* `pickle` runs tests against pickle's sources\n* `pickle_phar` runs tests against pickle's Phar which you have to manually\n  build\n* `pecl` tests PECL extensions conversion with pickle's sources\n* `phar_pecl` tests PECL extensions conversion with pickle's Phar"
}
