{
  "name": "proxygen",
  "full_name": "proxygen",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Collection of C++ HTTP libraries",
  "license": "BSD-3-Clause",
  "homepage": "https://github.com/facebook/proxygen",
  "versions": {
    "stable": "2023.07.24.00",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/facebook/proxygen/releases/download/v2023.07.24.00/proxygen-v2023.07.24.00.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "eeb7374f621c2b5028a42d1c34b4e622c61788105f16ba99fd89c50cb03200c7"
    },
    "head": {
      "url": "https://github.com/facebook/proxygen.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/proxygen/blobs/sha256:cceeed1b81d0bfeef805aa72630f837928ad2beee04f13325b499d63c90403ef",
          "sha256": "cceeed1b81d0bfeef805aa72630f837928ad2beee04f13325b499d63c90403ef"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/proxygen/blobs/sha256:14b3fa9263c20c9a44c220a1c29881959babcee8001931d975acc7db88d38ec6",
          "sha256": "14b3fa9263c20c9a44c220a1c29881959babcee8001931d975acc7db88d38ec6"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/proxygen/blobs/sha256:3c766ff4278385b9f77018c492008aca10c6715dc4ec26470fef556ff32ca697",
          "sha256": "3c766ff4278385b9f77018c492008aca10c6715dc4ec26470fef556ff32ca697"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/proxygen/blobs/sha256:7e51b7a57974fe964ba2ed84290500732949448b6a120451ad121dac7fdfd3dc",
          "sha256": "7e51b7a57974fe964ba2ed84290500732949448b6a120451ad121dac7fdfd3dc"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/proxygen/blobs/sha256:8456d4e3993a0d085bacd4a3277795a8aa697f208c5f007410a40322ff8ce10c",
          "sha256": "8456d4e3993a0d085bacd4a3277795a8aa697f208c5f007410a40322ff8ce10c"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/proxygen/blobs/sha256:f1fc325b1fda5085ec6e32558a45a9184886e5fade3311affdfb4ef4b66823d3",
          "sha256": "f1fc325b1fda5085ec6e32558a45a9184886e5fade3311affdfb4ef4b66823d3"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/proxygen/blobs/sha256:b924aacd0575c1562cf8c1e5d3222b16832ebfbb29453deb8b15d002e004560b",
          "sha256": "b924aacd0575c1562cf8c1e5d3222b16832ebfbb29453deb8b15d002e004560b"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [
    "boost",
    "fizz",
    "fmt",
    "folly",
    "gflags",
    "openssl@3",
    "wangle",
    "zstd"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    {
      "gperf": "build"
    },
    {
      "python": "build"
    },
    "zlib"
  ],
  "uses_from_macos_bounds": [
    {},
    {},
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/proxygen.rb",
  "ruby_source_checksum": {
    "sha256": "485414af95722fc20ea6297ba25ea727ae72aacfa590cfa00a8ed64eab0fd0f3"
  },
  "date_added": "2023-07-04T00:17:58+08:00",
  "readme": "## Proxygen: Facebook's C++ HTTP Libraries\n\n[![Support Ukraine](https://img.shields.io/badge/Support-Ukraine-FFD500?style=flat&labelColor=005BBB)](https://opensource.facebook.com/support-ukraine)\n[![Linux Build Status](https://github.com/facebook/proxygen/workflows/linux/badge.svg)](https://github.com/facebook/proxygen/actions?workflow=linux)\n[![macOS Build Status](https://github.com/facebook/proxygen/workflows/mac/badge.svg)](https://github.com/facebook/proxygen/actions?workflow=mac)\n\nThis project comprises the core C++ HTTP abstractions used at\nFacebook. Internally, it is used as the basis for building many HTTP\nservers, proxies, and clients. This release focuses on the common HTTP\nabstractions and our simple HTTPServer framework. Future releases will\nprovide simple client APIs as well. The framework supports HTTP/1.1,\nSPDY/3, SPDY/3.1, HTTP/2, and HTTP/3. The goal is to provide a simple,\nperformant, and modern C++ HTTP library.\n\nWe have a Google group for general discussions at https://groups.google.com/d/forum/facebook-proxygen.\n\nThe [original blog post](https://engineering.fb.com/production-engineering/introducing-proxygen-facebook-s-c-http-framework/)\nalso has more background on the project.\n\n## Learn More in This Intro Video\n[![Explain Like Iâ€™m 5: Proxygen](https://img.youtube.com/vi/OsrBYHIYCYk/0.jpg)](https://www.youtube.com/watch?v=OsrBYHIYCYk)\n\n### Installing\n\nNote that currently this project has been tested on Ubuntu 18.04 and Mac OSX\nalthough it likely works on many other platforms.\n\nYou will need at least 3 GiB of memory to compile `proxygen` and its\ndependencies.\n\n##### Easy Install\n\nJust run `./build.sh` from the `proxygen/` directory to get and build all\nthe dependencies and `proxygen`. You can run the tests manually with `cd _build/ && make test`.\nThen run `./install.sh` to install it. You can remove the temporary build directory (`_build`) and `./build.sh && ./install.sh`\nto rebase the dependencies, and then rebuild and reinstall `proxygen`.\n\n##### Other Platforms\n\nIf you are running on another platform, you may need to install several\npackages first. Proxygen and `folly` are all Autotools based projects.\n\n### Introduction\n\nDirectory structure and contents:\n\n| Directory                  | Purpose                                                                       |\n|----------------------------|-------------------------------------------------------------------------------|\n| `proxygen/external/`       | Contains non-installed 3rd-party code proxygen depends on.                    |\n| `proxygen/lib/`            | Core networking abstractions.                                                 |\n| `proxygen/lib/http/`       | HTTP specific code. (including HTTP/2 and HTTP/3)                             |\n| `proxygen/lib/services/`   | Connection management and server code.                                        |\n| `proxygen/lib/utils/`      | Miscellaneous helper code.                                                    |\n| `proxygen/httpserver/`     | Contains code wrapping `proxygen/lib/` for building simple C++ http servers. We recommend building on top of these APIs. |\n\n### Architecture\n\nThe central abstractions to understand in `proxygen/lib` are the session, codec,\ntransaction, and handler. These are the lowest level abstractions, and we\ndon't generally recommend building off of these directly.\n\nWhen bytes are read off the wire, the `HTTPCodec` stored inside\n`HTTPSession` parses these into higher-level objects and associates with\nit a transaction identifier. The codec then calls into `HTTPSession` which\nis responsible for maintaining the mapping between transaction identifier\nand `HTTPTransaction` objects. Each HTTP request/response pair has a\nseparate `HTTPTransaction` object. Finally, `HTTPTransaction` forwards the\ncall to a handler object which implements `HTTPTransaction:: Handler`. The\nhandler is responsible for implementing business logic for the request or\nresponse.\n\nThe handler then calls back into the transaction to generate egress\n(whether the egress is a request or response). The call flows from the\ntransaction back to the session, which uses the codec to convert the\nhigher-level semantics of the particular call into the appropriate bytes\nto send on the wire.\n\nThe same handler and transaction interfaces are used to both create requests\nand handle responses. The API is generic enough to allow\nboth. `HTTPSession` is specialized slightly differently depending on\nwhether you are using the connection to issue or respond to HTTP\nrequests.\n\n![Core Proxygen Architecture](CoreProxygenArchitecture.png)\n\nMoving into higher levels of abstraction, `proxygen/HTTP server` has a\nsimpler set of APIs and is the recommended way to interface with `proxygen`\nwhen acting as a server if you don't need the full control of the lower\nlevel abstractions.\n\nThe basic components here are `HTTPServer`, `RequestHandlerFactory`, and\n`RequestHandler`. An `HTTPServer` takes some configuration and is given a\n`RequestHandlerFactory`. Once the server is started, the installed\n`RequestHandlerFactory` spawns a `RequestHandler` for each HTTP\nrequest. `RequestHandler` is a simple interface users of the library\nimplement. Subclasses of `RequestHandler` should use the inherited\nprotected member `ResponseHandler* downstream_` to send the response.\n\n### Using it\n\nProxygen is a library. After installing it, you can build your C++\nserver. Try `cd` ing to the directory containing the echo server at\n`proxygen/httpserver/samples/echo/`.\n\nAfter building proxygen you can start the echo server with `_build/proxygen/httpserver/proxygen_echo`\nand verify it works using curl in a different terminal:\n```shell\n$ curl -v http://localhost:11000/\n*   Trying 127.0.0.1...\n* Connected to localhost (127.0.0.1) port 11000 (#0)\n> GET / HTTP/1.1\n> User-Agent: curl/7.35.0\n> Host: localhost:11000\n> Accept: */*\n>\n< HTTP/1.1 200 OK\n< Request-Number: 1\n< Date: Thu, 30 Oct 2014 17:07:36 GMT\n< Connection: keep-alive\n< Content-Length: 0\n<\n* Connection #0 to host localhost left intact\n```\n\nYou can find other samples:\n  * a simple server that supports HTTP/2 server push (`_build/proxygen/httpserver/proxygen_push`),\n  * a simple server for static files (`_build/proxygen/httpserver/proxygen_static`)\n  * a simple fwdproxy (`_build/proxygen/httpserver/proxygen_proxy`)\n  * a curl-like client (`_build/proxygen/httpclient/samples/curl/proxygen_curl`)\n\n### QUIC and HTTP/3\n\nProxygen supports HTTP/3!\n\nIt depends on Facebook's [mvfst](https://github.com/facebook/mvfst)\nlibrary for the [IETF QUIC](https://github.com/quicwg/base-drafts) transport\nimplementation, so we have made that dependency optional.  You can build the\nHTTP/3 code, tests and sample binaries with `./build.sh --with-quic`.\n\nThis will also build a handy command-line utility that can be used as an HTTP/3\nserver and client.\n\nSample usage:\n```shell\n_build/proxygen/httpserver/hq --mode=server\n_build/proxygen/httpserver/hq --mode=client --path=/\n```\nThe utility supports the [qlog](https://github.com/quiclog/internet-drafts)\nlogging format; just start the server with the `--qlogger_path` option and many\nknobs to tune both the quic transport and the http layer.\n\n### Documentation\n\nWe use Doxygen for Proxygen's internal documentation. You can generate a\ncopy of these docs by running `doxygen Doxyfile` from the project\nroot. You'll want to look at `html/namespaceproxygen.html` to start. This\nwill also generate `folly` documentation.\n\n### License\nSee [LICENSE](LICENSE).\n\n### Contributing\nContributions to Proxygen are more than welcome. [Read the guidelines in CONTRIBUTING.md](CONTRIBUTING.md).\nMake sure you've [signed the CLA](https://code.facebook.com/cla) before sending in a pull request.\n\n### Whitehat\n\nFacebook has a [bounty program](https://www.facebook.com/whitehat/) for\nthe safe disclosure of security bugs. If you find a vulnerability, please\ngo through the process outlined on that page and do not file a public issue."
}
