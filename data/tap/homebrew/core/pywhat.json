{
  "name": "pywhat",
  "full_name": "pywhat",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Identify anything: emails, IP addresses, and more",
  "license": "MIT",
  "homepage": "https://github.com/bee-san/pyWhat",
  "versions": {
    "stable": "5.1.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://files.pythonhosted.org/packages/ae/31/57bb23df3d3474c1e0a0ae207f8571e763018fa064823310a76758eaef81/pywhat-5.1.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "8a6f2b3060f5ce9808802b9ca3eaf91e19c932e4eaa03a4c2e5255d0baad85c4"
    },
    "head": {
      "url": "https://github.com/bee-san/pyWhat.git",
      "branch": "main"
    }
  },
  "revision": 1,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 2,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pywhat/blobs/sha256:4968c7ff6c37272afedb526e8bd71aa04c4cfe9539bb095082d65980680ab9c6",
          "sha256": "4968c7ff6c37272afedb526e8bd71aa04c4cfe9539bb095082d65980680ab9c6"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pywhat/blobs/sha256:fbf27dd5fcbee4898510b45c5aa86297d46e3a53448dbea1f330113a64526cca",
          "sha256": "fbf27dd5fcbee4898510b45c5aa86297d46e3a53448dbea1f330113a64526cca"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pywhat/blobs/sha256:afc7dcf4f11bef07bc6d06c2195e9ac9acf641ea8a9455e586ee90a20be11b5a",
          "sha256": "afc7dcf4f11bef07bc6d06c2195e9ac9acf641ea8a9455e586ee90a20be11b5a"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pywhat/blobs/sha256:d24dfb3b8b8bb78a470907caf5a7014af1581bb796c0fec704bf73454735cd15",
          "sha256": "d24dfb3b8b8bb78a470907caf5a7014af1581bb796c0fec704bf73454735cd15"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pywhat/blobs/sha256:33ae9b4c199197f328f6141e5900d946ab6d85712266b86200208372698bdf14",
          "sha256": "33ae9b4c199197f328f6141e5900d946ab6d85712266b86200208372698bdf14"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pywhat/blobs/sha256:c16b928e2087cf586005ac5f7ea5671c44d69521317b0b8db9f367581c87a5f2",
          "sha256": "c16b928e2087cf586005ac5f7ea5671c44d69521317b0b8db9f367581c87a5f2"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pywhat/blobs/sha256:f453b0de5fc318d9383a4afef920a6d3b989973b60a56be616e37f51827b2332",
          "sha256": "f453b0de5fc318d9383a4afef920a6d3b989973b60a56be616e37f51827b2332"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "pygments",
    "python@3.11"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/pywhat.rb",
  "ruby_source_checksum": {
    "sha256": "6c80f7b7c08943859b2728ec4ff8009b25de085fa780365d05ad01d581f79249"
  },
  "date_added": "2021-05-31T16:41:21+00:00",
  "readme": "<p align='center'>\n<img src='images/logo.png'>\n<p align=\"center\">‚û°Ô∏è <a href=\"http://discord.skerritt.blog\">Discord</a> ‚¨ÖÔ∏è<br>\n<i>The easiest way to identify anything</i><br>\n<code>pip3 install pywhat && pywhat --help</code>\n</p>\n\n<p align=\"center\">\n  <a href=\"http://discord.skerritt.blog\"><img alt=\"Discord\" src=\"https://img.shields.io/discord/754001738184392704\"></a> <a href=\"https://pypi.org/project/pywhat/\"><img alt=\"PyPI - Downloads\" src=\"https://pepy.tech/badge/pywhat/month\"></a>  <a href=\"https://twitter.com/bee_sec_san\"><img alt=\"Twitter Follow\" src=\"https://img.shields.io/twitter/follow/bee_sec_san?style=social\"></a> <a href=\"https://pypi.org/project/pywhat/\"><img alt=\"PyPI - Python Version\" src=\"https://img.shields.io/pypi/pyversions/pywhat\"></a> <a href=\"https://pypi.org/project/pywhat/\"><img alt=\"PyPI\" src=\"https://img.shields.io/pypi/v/pywhat\"></a>\n</p>\n<hr>\n\n# ü§î `What` is this?\n\n![](images/main_demo.gif)\n\nImagine this: You come across some mysterious text üßô‚Äç‚ôÇÔ∏è `0x52908400098527886E0F7030069857D2E4169EE7` or `dQw4w9WgXcQ` and you wonder what it is. What do you do?\n\nWell, with `what` all you have to do is ask `what \"0x52908400098527886E0F7030069857D2E4169EE7\"` and `what` will tell you!\n\n`what`'s job is to **identify _what_ something is.** Whether it be a file or text! Or even the hex of a file! What about text _within_ files? We have that too! `what` is recursive, it will identify **everything** in text and more!\n\n# Installation\n\n## üî® Using pip\n\n```$ pip3 install pywhat```\n\nor\n\n```shell\n# installs optional dependencies that may improve the speed\n$ pip3 install pywhat[optimize] \n```\n\n## üî® On Mac?\n\n```$ brew install pywhat```\n\nOr for our MacPorts fans:\n\n```$ sudo port install pywhat```\n\n# ‚öô Use Cases\n\n## ü¶† Wannacry\n\n![](images/wannacry_demo.png)\n\nYou come across a new piece of malware called WantToCry. You think back to Wannacry and remember it was stopped because a researcher found a kill-switch in the code.\n\nWhen a domain, hardcoded into Wannacry, was registered the virus would stop.\n\nYou use `What` to identify all the domains in the malware, and use a domain registrar API to register all the domains.\n\n## ü¶à Faster Analysis of Pcap files\n\n![](images/pcap_demo.gif)\n\nSay you have a `.pcap` file from a network attack. `What` can identify this and quickly find you:\n\n- All URLs\n- Emails\n- Phone numbers\n- Credit card numbers\n- Cryptocurrency addresses\n- Social Security Numbers\n- and much more.\n\nWith `what`, you can identify the important things in the pcap in seconds, not minutes.\n\n## üêû Bug Bounties\n\nYou can use PyWhat to scan for things that'll make you money via bug bounties like:\n* API Keys\n* Webhooks\n* Credentials\n* and more\n\nRun PyWhat with:\n\n```\npywhat --include \"Bug Bounty\" TEXT\n```\n\nTo do this.\n\nHere are some examples üëá\n\n### üêô GitHub Repository API Key Leaks\n\n1. Download all GitHub repositories of an organisation\n2. Search for anything that you can submit as a bounty, like API keys\n\n```shell\n# Download all repositories\nGHUSER=CHANGEME; curl \"https://api.github.com/users/$GHUSER/repos?per_page=1000\" | grep -o 'git@[^\"]*' | xargs -L1 git clone\n\n# Will print when it finds things.\n# Loops over all files in current directory.\nfind . -type f -execdir pywhat --include 'Bug Bounty' {} \\;\n```\n\n### üï∑ Scan all web pages for bounties\n\n```shell\n# Recursively download all web pages of a site\nwget -r -np -k https://skerritt.blog\n\n# Will print when it finds things.\n# Loops over all files in current directory.\nfind . -type f -execdir pywhat --include 'Bug Bounty' {} \\;\n```\n\n**PS**: We support more filters than just bug bounties! Run `pywhat --tags`\n\n## üåå Other Features\n\nAnytime you have a file and you want to find structured data in it that's useful, `What` is for you.\n\nOr if you come across some piece of text and you don't know what it is, `What` will tell you.\n\n### üìÅ File & Directory Handling\n\n**File Opening** You can pass in a file path by `what 'this/is/a/file/path'`. `What` is smart enough to figure out it's a file!\n\nWhat about a whole **directory**? `What` can handle that too! It will **recursively** search for files and output everything you need!\n\n### üîç Filtering your output\n\nSometimes, you only care about seeing things which are related to AWS. Or bug bounties, or cryptocurrencies!\n\nYou can filter output by using `what --rarity 0.2:0.8 --include Identifiers,URL https://skerritt.blog`. Use `what --help` to get more information.\n\nTo see all filters, run `pywhat --tags`! You can also combine them, for example to see all cryptocurrency wallets minus Ripple you can do:\n\n```console\npywhat --include \"Cryptocurrency Wallet\" --exclude \"Ripple Wallet\" 1KFHE7w8BhaENAswwryaoccDb6qcT6DbYY\n```\n\n### üëΩ Sorting, Exporting, and more!\n\n**Sorting** You can sort the output by using `what -k rarity --reverse TEXT`. Use `what --help` to get more information.\n\n**Exporting** You can export to json using `what --json` and results can be sent directly to a file using `what --json > file.json`.\n\n**Boundaryless mode** `What` has a special mode to match identifiable information within strings. By default, it is enabled in CLI but disabled in API. Use `what --help` or refer to [API Documentation](https://github.com/bee-san/pyWhat/wiki/API) for more information.\n\n\n# üçï API\n\nPyWhat has an API! Click here [https://github.com/bee-san/pyWhat/wiki/API](https://github.com/bee-san/pyWhat/wiki/API) to read about it.\n\n# üëæ Contributing\n\n`what` not only thrives on contributors, but can't exist without them! If you want to add a new regex to check for things, you can read our documentation [here](https://github.com/bee-san/what/wiki/Adding-your-own-Regex)\n\nWe ask contributors to join the Discord for quicker discussions, but it's not needed:\n<a href=\"http://discord.skerritt.blog\"><img alt=\"Discord\" src=\"https://img.shields.io/discord/754001738184392704\"></a>\n\n# üôè Thanks\n\nWe would like to thank [Dora](https://github.com/sdushantha/dora) for their work on a bug bounty specific regex database which we have used."
}
