{
  "name": "vsh",
  "full_name": "vsh",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "HashiCorp Vault interactive shell",
  "license": "MIT",
  "homepage": "https://github.com/fishi0x01/vsh",
  "versions": {
    "stable": "0.12.2",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/fishi0x01/vsh/archive/refs/tags/v0.12.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "713d8f8901c7fc3b2c9c620ce928fa17e3b5a5f949d0dd37ad5ad48ae46dab4b"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vsh/blobs/sha256:871ee8e3e5c1932489003c5957639f3a79686355b4f59804ecd5cd81d21411a1",
          "sha256": "871ee8e3e5c1932489003c5957639f3a79686355b4f59804ecd5cd81d21411a1"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vsh/blobs/sha256:53ffd41f78569a0a90d14c10042b872aed3ec9157712ca0c7f9d23cc693bad2a",
          "sha256": "53ffd41f78569a0a90d14c10042b872aed3ec9157712ca0c7f9d23cc693bad2a"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vsh/blobs/sha256:04d0cc010e2f5e7e53ced4cfb0bf9154affb30d24f4d81fe0d3ddf360f03671f",
          "sha256": "04d0cc010e2f5e7e53ced4cfb0bf9154affb30d24f4d81fe0d3ddf360f03671f"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vsh/blobs/sha256:315c73a67edf5b6dc7c55b3b9bf3553760b0d665b9292479dc839125e864d7f6",
          "sha256": "315c73a67edf5b6dc7c55b3b9bf3553760b0d665b9292479dc839125e864d7f6"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vsh/blobs/sha256:f6ce8998843e3c16788807ab0c5a9a88ce077ddc9999db307f14cb2ba6e41184",
          "sha256": "f6ce8998843e3c16788807ab0c5a9a88ce077ddc9999db307f14cb2ba6e41184"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vsh/blobs/sha256:4c01ddb42c6236f01d1e79f5392a3638926a19769cf230a54e2bcb4f35c8383c",
          "sha256": "4c01ddb42c6236f01d1e79f5392a3638926a19769cf230a54e2bcb4f35c8383c"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vsh/blobs/sha256:ffc2745dc23d2ca0e8086d800c808a407819ef59038bc3d86981c15e5235e481",
          "sha256": "ffc2745dc23d2ca0e8086d800c808a407819ef59038bc3d86981c15e5235e481"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/vsh.rb",
  "ruby_source_checksum": {
    "sha256": "81cc7f90e444da2bb1f97164d42d7c5b68cc4cc6c9d831741fc1b106b292a2a4"
  },
  "date_added": "2021-01-18T11:26:25+00:00",
  "readme": "# vsh\n\n[![Latest release](https://img.shields.io/github/release/fishi0x01/vsh.svg)](https://github.com/fishi0x01/vsh/releases/latest)\n![CI](https://github.com/fishi0x01/vsh/workflows/CI/badge.svg)\n[![Go Report Card](https://goreportcard.com/badge/github.com/fishi0x01/vsh)](https://goreportcard.com/report/github.com/fishi0x01/vsh)\n[![Code Climate](https://codeclimate.com/github/fishi0x01/vsh/badges/gpa.svg)](https://codeclimate.com/github/fishi0x01/vsh)\n\n![vsh usage](https://user-images.githubusercontent.com/10799507/66355982-9872a980-e969-11e9-8ca4-6a2ff215f835.gif)\n\n`vsh` is an interactive [HashiCorp Vault](https://www.vaultproject.io/) shell and cli tool. It comes with multiple common operations and treats paths like directories and files.\nCore features are:\n\n- recursive operations on paths for many operations, e.g., `cp`, `rm`, `mv`\n- search with `grep` (substring or regular-expression)\n- substitute patterns in keys and/or values (substring or regular-expression) with `replace`\n- transparency towards differences between KV1 and KV2, i.e., you can freely move/copy secrets between both\n- non-interactive mode for automation (`vsh -c \"<cmd>\"`)\n- merging keys with different strategies through `append`\n\n## Installation\n\n### Homebrew\n\n```sh\nbrew install vsh\n```\n\n### Nix\n\n```sh\nnix-env -i vsh\n```\n\n### Static binaries for Linux / MacOS\n\nDownload latest static binaries from [release page](https://github.com/fishi0x01/vsh/releases).\n\n## Supported commands\n\n- [add](doc/commands/add.md) adds a single key and value to a path\n- [append](doc/commands/append.md) merges secrets with different strategies (allows recursive operation on paths)\n- [cat](doc/commands/cat.md) shows the key/value pairs of a path\n- [cd](doc/commands/cd.md) allows interactive navigation through the paths\n- [cp](doc/commands/cp.md) copies secrets from one location to another (allows recursive operation on paths)\n- [grep](doc/commands/grep.md) searches for substrings or regular expressions (allows recursive operation on paths)\n- [ls](doc/commands/ls.md) shows the subpaths of a given path\n- [mv](doc/commands/mv.md) moves secrets from one location to another (allows recursive operation on paths)\n- [replace](doc/commands/replace.md) substrings or regular expressions (allows recursive operation on paths)\n- [rm](doc/commands/rm.md) removes secret(s) (allows recursive operation on paths)\n\n## Setting the vault token\n\nIn order to get a valid token, `vsh` uses vault's TokenHelper mechanism.\nThat means `vsh` supports setting vault tokens via `~/.vault-token`, `VAULT_TOKEN` and external [token-helper](https://www.vaultproject.io/docs/commands/token-helper).\n\n## Token permission requirements\n\n`vsh` requires `List` permission on the operated paths.\nThis is necessary to determine if a path points to a node or leaf in the path tree.\nFurther, it is needed to gather auto-completion data.\n\nCommands which alter the data like `cp` or `mv`, additionally require `Read` and `Write` permissions on the operated paths.\n\nIn order to reliably discover all available backends, ideally the vault token used by `vsh` has `List` permission on `sys/mount`. However, this is not a hard requirement.\nIf the token doesn't have `List` permission on `sys/mount`, then `vsh` does not know the available backends beforehand.\nThat means initially there won't be path auto-completion on the top (backend) level.\nRegardless, `vsh` will try with best-effort strategy to reliably determine the kv version of every entered path.\n\n## Interactive mode\n\n```\nexport VAULT_ADDR=http://localhost:8080\nexport VAULT_TOKEN=root\nexport VAULT_PATH=secret/  # VAULT_PATH is optional\n./vsh\nhttp://localhost:8080 /secret/>\n```\n\n**Note:** the given token is used for auto-completion, i.e., `List()` queries are done with that token, even if you do not `rm` or `mv` anything.\n`vsh` caches `List()` results to reduce the amount of queries. However, after execution of each command the cache is cleared\nin order to do accurate tab-completion.\nIf your token has a limited number of uses, then consider using the non-interactive mode or toggle auto-completion off, to avoid `List()` queries.\n\n### Toggle auto-completion\n\nTo reduce the number of queries against vault, you can disable path auto-completion in 2 ways:\n\n1. Disable at start time:\n\n```\n./vsh --disable-auto-completion\n```\n\n2. Toggle inside interactive mode:\n\n```\n./vsh\nhttp://localhost:8080 /secret/> toggle-auto-completion\nUse path auto-completion: false\nhttp://localhost:8080 /secret/> toggle-auto-completion\nUse path auto-completion: true\n```\n\n## Non-interactive mode\n\n```\nexport VAULT_ADDR=<addr>\nexport VAULT_TOKEN=<token>\n./vsh -c \"rm secret/dir/to/remove/\"\n```\n\n## Some words about the quality\n\nWorking on vault secrets can be critical, making quality and correct behavior a first class citizen for `vsh`.\nThat being said, `vsh` is still a small open source project, meaning we cannot give any guarantees.\nHowever, we put strong emphasis on test-driven development.\nEvery PR is tested with an extensive [suite](test/suites) of integration tests.\nVast majority of tests run on KV1 and KV2 and every test runs against vault `1.0.0` and `1.12.3`, i.e., vault versions in between should also be compatible.\n\n## Contributions\n\nContributions in any form are always welcome! Without contributions from the community, `vsh` wouldn't be the tool it is today.\n\n### Local Development\n\nRequirements:\n\n- `golang` (`>= v1.19`)\n- `docker` for integration testing\n- `make` for simplified commands\n\n```\nmake compile\nmake get-bats\nmake integration-tests\n```\n\n### Debugging\n\n`-v DEBUG` sets debug log level, which also creates a `vsh_trace.log` file to log any error object from the vault API."
}
