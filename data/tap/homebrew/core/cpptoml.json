{
  "name": "cpptoml",
  "full_name": "cpptoml",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Header-only library for parsing TOML",
  "license": "MIT",
  "homepage": "https://github.com/skystrife/cpptoml",
  "versions": {
    "stable": "0.1.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/skystrife/cpptoml/archive/v0.1.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "23af72468cfd4040984d46a0dd2a609538579c78ddc429d6b8fd7a10a6e24403"
    },
    "head": {
      "url": "https://github.com/skystrife/cpptoml.git",
      "branch": "master"
    }
  },
  "revision": 1,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cpptoml/blobs/sha256:5dd8ccfa15e88651af7ad7815bf041ead83e5afbf72f7a6d7c2e5da4a1e0da5b",
          "sha256": "5dd8ccfa15e88651af7ad7815bf041ead83e5afbf72f7a6d7c2e5da4a1e0da5b"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/cpptoml.rb",
  "ruby_source_checksum": {
    "sha256": "75e162c17dec43d26e57428bc633e9291eb8a53e2e3e1aff4817e8976762d731"
  },
  "date_added": "2022-01-16T15:18:22+00:00",
  "readme": "# cpptoml\nA header-only library for parsing [TOML][toml] configuration files.\n\nTargets: [TOML v0.5.0][currver] as of August 2018.\n\nThis includes support for the new DateTime format, inline tables,\nmulti-line basic and raw strings, digit separators, hexadecimal integers,\noctal integers, binary integers, and float special values.\n\nAlternatives:\n- [Boost.toml][boost.toml] is a C++ implementation of a TOML parser using\n  the Boost library. As of writing, it supports v0.5.0 as well.\n- [ctoml][ctoml] is a C++11 implementation of a TOML parser, but only\n  supports v0.2.0.\n- [libtoml][libtoml] is a C implementation of a TOML parser, which can be\n  linked to from your C++ programs easily. As of April 2016, it supports\n  v0.4.0.\n- [tinytoml][tinytoml] is a C++11 implementation of a TOML parser, which\n  also supports v0.4.0 as of November 2015.\n\n## Build Status\n[![Build Status](https://travis-ci.org/skystrife/cpptoml.svg?branch=master)](https://travis-ci.org/skystrife/cpptoml)\n\n## Test Results\n\nFrom [the toml-test suite][toml-test]:\n\n```\n126 passed, 0 failed\n```\n\nWe also currently maintain (but hopefully not indefinitely!) a [fork of the\ntoml-test suite][toml-test-fork] that adds tests for features and\nclarifications that have been added to the TOML spec more recently than\ntoml-test has been updated. We pass every test there.\n\n```\n148 passed, 0 failed\n```\n\n# Compilation\nRequires a well conforming C++11 compiler. On OSX this means clang++ with\nlibc++ and libc++abi (the default clang installed with XCode's command line\ntools is sufficient).\n\nOn Linux, you should be able to use g++ >= 4.8.x, or clang++ with libc++\nand libc++abi (if your package manager supplies this; most don't).\n\nCompiling the examples can be done with cmake:\n\n```\nmkdir build\ncd build\ncmake ../\nmake\n```\n\n# Example Usage\nTo parse a configuration file from a file, you can do the following:\n\n```cpp\nauto config = cpptoml::parse_file(\"config.toml\");\n```\n\n`parse_file()` returns a (shared pointer to a) `cpptoml::table`, which you\ncan then query. It will throw an instance of `cpptoml::parse_exception` in\nthe event that the file failed to parse, and the exception message should\ncontain the line number the error occurred as well as a description of the\nerror.\n\n## Obtaining Basic Values\nYou can find basic values like so:\n\n```cpp\nauto val = config->get_as<int64_t>(\"my-int\");\n// val is a cpptoml::option<int64_t>\n\nif (val)\n{\n    // *val is the integer value for the key \"my-int\"\n}\nelse\n{\n    // \"my-int\" either did not exist or was not an integer\n}\n```\n\nTo simplify things, you can specify default a default value using the\n`value_or` function on the `option`:\n\n```cpp\nauto baz = config->get_as<double>(\"baz\").value_or(0.5);\n// baz is now the double value for key \"baz\", if it exists, or 0.5 otherwise\n```\n\ncpptoml has extended support for dates and times beyond the TOML v0.4.0\nspec. Specifically, it supports\n\n- Local Date (`local_date`), which simply represents a date and lacks any time\n  information, e.g. `1980-08-02`;\n- Local Time (`local_time`), which simply represents a time and lacks any\n  date or zone information, e.g. `12:10:03.001`;\n- Local Date-time (`local_datetime`), which represents a date and a time,\n  but lacks zone information, e.g. `1980-08-02T12:10:03.001`;\n- and Offset Date-time (`offset_datetime`), which represents a date, a\n  time, and timezone information, e.g. `1980-08-02T12:10:03.001-07:00`\n\nHere are the fields of the date/time objects in cpptoml:\n\n- year (`local_date`, `local_datetime`, `offset_datetime`)\n- month (`local_date`, `local_datetime`, `offset_datetime`)\n- day (`local_date`, `local_datetime`, `offset_datetime`)\n- hour (`local_time`, `local_datetime`, `offset_datetime`)\n- minute (`local_time`, `local_datetime`, `offset_datetime`)\n- second (`local_time`, `local_datetime`, `offset_datetime`)\n- microsecond (`local_time`, `local_datetime`, `offset_datetime`)\n- hour\\_offset (`offset_datetime`)\n- minute\\_offset (`offset_datetime`)\n\nThere are convenience functions `cpptoml::offset_datetime::from_zoned()` and\n`cpptoml::offset_datetime::from_utc()` to convert `struct tm`s to\n`cpptoml::offset_datetime`s.\n\n## Nested Tables\nIf you want to look up things in nested tables, there are two ways of doing\nthis. Suppose you have the following structure:\n\n```toml\n[first-table]\nkey1 = 0.1\nkey2 = 1284\n\n[first-table.inner]\nkey3 = \"hello world\"\n```\n\nHere's an idiomatic way of obtaining all three keys' values:\n\n```cpp\nauto config = cpptoml::parse_file(\"config.toml\");\nauto key1 = config->get_qualified_as<double>(\"first-table.key1\");\nauto key2 = config->get_qualified_as<int>(\"first-table.key2\");\nauto key3 = config->get_qualified_as<std::string>(\"first-table.inner.key3\");\n```\n\n(Note that, because the TOML spec allows for \".\" to occur in a table name,\nyou won't *always* be able to do this for any nested key, but in practice\nyou should be fine.)\n\nA slightly more verbose way of getting them would be to first obtain the\nindividual tables, and then query those individual tables for their keys\nlike so:\n\n```cpp\nauto config = cpptoml::parse_file(\"config.toml\");\n\nauto first = config->get_table(\"first-table\");\nauto key1 = first->get_as<double>(\"key1\");\nauto key2 = first->get_as<int>(\"key2\");\n\nauto inner = first->get_table(\"inner\");\nauto key3 = inner->get_as<std::string>(\"key3\");\n```\n\nThe function `get_table_qualified` also exists, so obtaining the inner\ntable could be written as\n\n```cpp\nauto inner2 = config->get_table_qualified(\"first-table.inner\");\n```\n\n## Arrays of Values\nSuppose you had a configuration file like the following:\n\n```toml\narr = [1, 2, 3, 4, 5]\nmixed-arr = [[1, 2, 3, 4, 5], [\"hello\", \"world\"], [0.1, 1.1, 2.1]]\n```\n\nTo obtain an array of values, you can do the following:\n\n```cpp\nauto config = cpptoml::parse_file(\"config.toml\");\n\nauto vals = config->get_array_of<int64_t>(\"arr\");\n// vals is a cpptoml::option<std::vector<int64_t>>\n\nfor (const auto& val : *vals)\n{\n    // val is an int64_t\n}\n```\n\n`get_array_of` will return an `option<vector<T>>`, which will be empty if\nthe key does not exist, is not of the array type, or contains values that\nare not of type `T`.\n\nFor nested arrays, it looks like the following:\n\n```cpp\nauto nested = config->get_array_of<cpptoml::array>(\"mixed-arr\");\n\nauto ints = (*nested)[0]->get_array_of<int64_t>();\n// ints is a cpptoml::option<std::vector<int64_t>>\n\nauto strings = (*nested)[1]->get_array_of<std::string>();\nauto doubles = (*nested)[2]->get_array_of<double>();\n```\n\nThere is also a `get_qualified_array_of` for simplifying arrays located\ninside nested tables.\n\n## Arrays of Tables\nSuppose you had a configuration file like the following:\n\n```toml\n[[table-array]]\nkey1 = \"hello\"\n\n[[table-array]]\nkey1 = \"can you hear me\"\n```\n\nArrays of tables are represented as a separate type in `cpptoml`. They can\nbe obtained like so:\n\n```cpp\nauto config = cpptoml::parse_file(\"config.toml\");\n\nauto tarr = config->get_table_array(\"table-array\");\n\nfor (const auto& table : *tarr)\n{\n    // *table is a cpptoml::table\n    auto key1 = table->get_as<std::string>(\"key1\");\n}\n```\n\n## More Examples\nYou can look at the files files `parse.cpp`, `parse_stdin.cpp`, and\n`build_toml.cpp` in the root directory for some more examples.\n\n`parse_stdin.cpp` shows how to use the visitor pattern to traverse an\nentire `cpptoml::table` for serialization.\n\n`build_toml.cpp` shows how to construct a TOML representation in-memory and\nthen serialize it to a stream.\n\n[currver]: https://github.com/toml-lang/toml/blob/master/versions/en/toml-v0.5.0.md\n[toml]: https://github.com/toml-lang/toml\n[toml-test]: https://github.com/BurntSushi/toml-test\n[toml-test-fork]: https://github.com/skystrife/toml-test\n[ctoml]: https://github.com/evilncrazy/ctoml\n[libtoml]: https://github.com/ajwans/libtoml\n[tinytoml]: https://github.com/mayah/tinytoml\n[boost.toml]: https://github.com/ToruNiina/Boost.toml"
}
