{
  "name": "luv",
  "full_name": "luv",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Bare libuv bindings for lua",
  "license": "Apache-2.0",
  "homepage": "https://github.com/luvit/luv",
  "versions": {
    "stable": "1.45.0-0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/luvit/luv/archive/1.45.0-0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "97e89940f9eeaa8dfb34f1c19f80dd373299c42719d15228ec790f415d4e4965"
    },
    "head": {
      "url": "https://github.com/luvit/luv.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/luv/blobs/sha256:bc38c2dbc804c17b0a4896f4723ded25e18c2a935363ecb65d1a28c6382442d6",
          "sha256": "bc38c2dbc804c17b0a4896f4723ded25e18c2a935363ecb65d1a28c6382442d6"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/luv/blobs/sha256:7835da93f476691806ff0417a9ff5a7406843f0e4137b8dec0a764931108cfa6",
          "sha256": "7835da93f476691806ff0417a9ff5a7406843f0e4137b8dec0a764931108cfa6"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/luv/blobs/sha256:7cccaa909a9ecfbac491aaa0fc00d294d46d6fd3eea6b789e3dc607e73abb09f",
          "sha256": "7cccaa909a9ecfbac491aaa0fc00d294d46d6fd3eea6b789e3dc607e73abb09f"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/luv/blobs/sha256:c00db5a8ec11d0c36eb1052da3f44959f0f14378bb2a0737decbc4d400ba8da0",
          "sha256": "c00db5a8ec11d0c36eb1052da3f44959f0f14378bb2a0737decbc4d400ba8da0"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/luv/blobs/sha256:801b05eb51a0a988a21233a0230fa21ff135255e8253cf07e6aa5a08c5719424",
          "sha256": "801b05eb51a0a988a21233a0230fa21ff135255e8253cf07e6aa5a08c5719424"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/luv/blobs/sha256:fb2f8280793423f81065a62eec51b377062e8f50d1ffbdcd468150be632a80d4",
          "sha256": "fb2f8280793423f81065a62eec51b377062e8f50d1ffbdcd468150be632a80d4"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/luv/blobs/sha256:32cc9dc86b05ccb035107f6836a9c7374792c4a1a2438eab15f104d9626b3a73",
          "sha256": "32cc9dc86b05ccb035107f6836a9c7374792c4a1a2438eab15f104d9626b3a73"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake",
    "lua",
    "luajit"
  ],
  "dependencies": [
    "libuv"
  ],
  "test_dependencies": [
    "lua",
    "luajit"
  ],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/luv.rb",
  "ruby_source_checksum": {
    "sha256": "018f38d885fa1b0953c38e14a154aba28f7ed0e8d5ebe04659a7e0a162a39b24"
  },
  "date_added": "2021-01-20T06:38:54+00:00",
  "readme": "luv\n===\n\n[![Linux Build Status](https://github.com/luvit/luv/actions/workflows/ci.yml/badge.svg)](https://github.com/luvit/luv/actions/workflows/ci.yml)\n[![Windows Build status](https://ci.appveyor.com/api/projects/status/uo1qhdcc0vcqsiok/branch/master?svg=true)](https://ci.appveyor.com/project/racker-buildbot/luv/branch/master)\n\n[libuv](https://github.com/libuv/libuv) bindings for\n[luajit](http://luajit.org/) and [lua](http://www.lua.org/)\n[5.1](http://www.lua.org/manual/5.1/manual.html)/\n[5.2](http://www.lua.org/manual/5.2/manual.html)/\n[5.3](http://www.lua.org/manual/5.3/manual.html)/\n[5.4](http://www.lua.org/manual/5.4/manual.html).\n\nThis library makes libuv available to lua scripts.  It was made for the [luvit](http://luvit.io/) project but should usable from nearly any lua project.\n\nThe library can be used by multiple threads at once.  Each thread is assumed to load the library from a different `lua_State`.  Luv will create a unique `uv_loop_t` for each state.  You can't share uv handles between states/loops.\n\n- [Luv docs](docs.md)\n- [Libuv docs](http://docs.libuv.org/)\n\n```lua\nlocal uv = require('luv')\n\n-- Create a handle to a uv_timer_t\nlocal timer = uv.new_timer()\n\n-- This will wait 1000ms and then continue inside the callback\ntimer:start(1000, 0, function ()\n  -- timer here is the value we passed in before from new_timer.\n\n  print(\"Awake!\")\n\n  -- You must always close your uv handles or you'll leak memory\n  -- We can't depend on the GC since it doesn't know enough about libuv.\n  timer:close()\nend)\n\nprint(\"Sleeping\")\n\n-- uv.run will block and wait for all events to run.\n-- When there are no longer any active handles, it will return\nuv.run()\n```\n\n\nHere is an example of an TCP echo server\n```lua\nlocal uv = require('luv')\n\nlocal function create_server(host, port, on_connection)\n\n  local server = uv.new_tcp()\n  server:bind(host, port)\n\n  server:listen(128, function(err)\n    -- Make sure there was no problem setting up listen\n    assert(not err, err)\n\n    -- Accept the client\n    local client = uv.new_tcp()\n    server:accept(client)\n\n    on_connection(client)\n  end)\n\n  return server\nend\n\nlocal server = create_server(\"0.0.0.0\", 0, function (client)\n\n  client:read_start(function (err, chunk)\n\n    -- Crash on errors\n    assert(not err, err)\n\n    if chunk then\n      -- Echo anything heard\n      client:write(chunk)\n    else\n      -- When the stream ends, close the socket\n      client:close()\n    end\n  end)\nend)\n\nprint(\"TCP Echo server listening on port \" .. server:getsockname().port)\n\nuv.run()\n```\n\nMore examples can be found in the [examples](examples) and [tests](tests) folders.\n\n## Luarocks\n\nLuv is available on Luarocks [here](https://luarocks.org/modules/creationix/luv). It can be installed via:\n\n```\nluarocks install luv\n```\n\nNote: To require `luv` using `require 'uv'` (to maintain compatibility with how luv is required in [luvi](https://github.com/luvit/luvi)) create a `uv.lua` with the contents:\n```\nreturn require 'luv'\n```\n\n## Building From Source\n\nTo build, first install your compiler tools.\n\n### Get a Compiler\n\nOn linux this probably means `gcc` and `make`.  On Ubuntu, the `build-essential`\npackage is good for this.\n\nOn OSX, you probably want XCode which comes with `clang` and `make` and friends.\n\nFor windows the free Visual Studio Express works.  If you get the 2013 edition,\nmake sure to get the `Windows Deskop` edition.  The `Windows` version doesn't\ninclude a working C compiler.  Make sure to run all of setup including getting a\nfree license.\n\n### Install CMake\n\nNow install Cmake.  The version in `brew` on OSX or most Linux package managers\nis good.  The version on Travis CI is too old and so I use a PPA there.  On\nwindows use the installer and make sure to add cmake to your command prompt\npath.\n\n### Install Git\n\nIf you haven't already, install git and make sure it's in your path.  This comes\nwith XCode on OSX.  On Linux it's in your package manager.  For windows, use the\ninstaller at <http://git-scm.com>.  Make sure it's available to your windows\ncommand prompt.\n\n### Clone the Code\n\nNow open a terminal and clone the code.  For windows I recommend the special\ndeveloper command prompt that came with Visual Studio.\n\n```\ngit clone https://github.com/luvit/luv.git --recursive\ncd luv\n```\n\n### Build the Code and Test\n\nOn windows I wrote a small batch file that runs the correct cmake commands and\ncopies the output files for easy access.\n\n```\nC:\\Code\\luv> msvcbuild.bat\nC:\\Code\\luv> luajit tests\\run.lua\n```\n\nOn unix systems, use the Makefile.\n\n```\n~/Code/luv> make test\n```\n\nThis will build luv as a module library. Module libraries are plugins that are\nnot linked into other targets.\n\n#### Build with PUC Lua 5.4\nBy default luv is linked with LuaJIT 2.1.0-beta3. If you rather like to link luv\nwith PUC Lua 5.4 you can run make with:\n\n```\n~/Code/luv> WITH_LUA_ENGINE=Lua make\n```\n\n#### Build as static library\n\nIf you want to build luv as a static library run make with:\n\n```\n~/Code/luv> BUILD_MODULE=OFF BUILD_STATIC_LIBS=ON make\n```\n\nThis will create a static library `libluv_a.a`.\n\n#### Build as shared library\n\nIf you want to build luv as a shared library run make with:\n\n```\n~/Code/luv> BUILD_MODULE=OFF BUILD_SHARED_LIBS=ON make\n```\n\nThis will create a shared library `libluv.so`.\n\n#### Build with shared libraries\n\nBy default the build system will build luv with the supplied dependencies.\nThese are:\n  * libuv\n  * LuaJIT or Lua\n\nHowever, if your target system has already one or more of these dependencies\ninstalled you can link `luv` against them.\n\n##### Linking with shared libuv\n\nThe default shared library name for libuv is `libuv`. To link against it use:\n\n```\n~/Code/luv> WITH_SHARED_LIBUV=ON make\n```\n\n##### Linking with shared LuaJIT\n\nThe default shared library name for LuaJIT is `libluajit-5.1`. To link against\nit use:\n\n```\n~/Code/luv> LUA_BUILD_TYPE=System make\n```\n\n##### Linking with shared Lua 5.x\n\nThe default shared library name for Lua 5.x is `liblua5.x`. To link against\nit use:\n\n```\n~/Code/luv> LUA_BUILD_TYPE=System WITH_LUA_ENGINE=Lua make\n```"
}
