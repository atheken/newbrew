{
  "name": "doctl",
  "full_name": "doctl",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Command-line tool for DigitalOcean",
  "license": "Apache-2.0",
  "homepage": "https://github.com/digitalocean/doctl",
  "versions": {
    "stable": "1.97.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/digitalocean/doctl/archive/v1.97.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "a6bf64cad7ffb111e40b3fdfbbc93694d00a0b441a4f89b35a382c0a1b8f3d05"
    },
    "head": {
      "url": "https://github.com/digitalocean/doctl.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/doctl/blobs/sha256:96fce2701d33814b763d37c1e03eba82aa737b3db48880bb4a04685b3c4f23fb",
          "sha256": "96fce2701d33814b763d37c1e03eba82aa737b3db48880bb4a04685b3c4f23fb"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/doctl/blobs/sha256:96fce2701d33814b763d37c1e03eba82aa737b3db48880bb4a04685b3c4f23fb",
          "sha256": "96fce2701d33814b763d37c1e03eba82aa737b3db48880bb4a04685b3c4f23fb"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/doctl/blobs/sha256:96fce2701d33814b763d37c1e03eba82aa737b3db48880bb4a04685b3c4f23fb",
          "sha256": "96fce2701d33814b763d37c1e03eba82aa737b3db48880bb4a04685b3c4f23fb"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/doctl/blobs/sha256:6d10044032b3ae74d87141cb4b1cbcc0dfccea01ee57107b9476f5403a36af93",
          "sha256": "6d10044032b3ae74d87141cb4b1cbcc0dfccea01ee57107b9476f5403a36af93"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/doctl/blobs/sha256:6d10044032b3ae74d87141cb4b1cbcc0dfccea01ee57107b9476f5403a36af93",
          "sha256": "6d10044032b3ae74d87141cb4b1cbcc0dfccea01ee57107b9476f5403a36af93"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/doctl/blobs/sha256:6d10044032b3ae74d87141cb4b1cbcc0dfccea01ee57107b9476f5403a36af93",
          "sha256": "6d10044032b3ae74d87141cb4b1cbcc0dfccea01ee57107b9476f5403a36af93"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/doctl/blobs/sha256:0e9e8826e776bc485d683edc39762f5bb268f33bf7b7c5a7642d072590f555ca",
          "sha256": "0e9e8826e776bc485d683edc39762f5bb268f33bf7b7c5a7642d072590f555ca"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/doctl.rb",
  "ruby_source_checksum": {
    "sha256": "63a36eb458111b1db2a46e621c79b2b9afb46c53c61eb3f48516e20e0daef2e8"
  },
  "date_added": "2015-10-11T19:49:50+01:00",
  "readme": "<h1 align=\"center\">doctl</h1>\n\n<p align=\"center\">\n  <img width=\"200\" height=\"170\" src=\"https://api-engineering.nyc3.cdn.digitaloceanspaces.com/doctl-mascot.png\" alt=\"The doctl mascot.\" />\n</p>\n\n<p align=\"center\">\n  <a href=\"https://travis-ci.org/digitalocean/doctl\">\n    <img src=\"https://travis-ci.org/digitalocean/doctl.svg?branch=main\" alt=\"Build Status\" />\n  </a>\n  <a href=\"https://godoc.org/github.com/digitalocean/doctl\">\n    <img src=\"https://godoc.org/github.com/digitalocean/doctl?status.svg\" alt=\"GoDoc\" />\n  </a>\n  <a href=\"https://goreportcard.com/report/github.com/digitalocean/doctl\">\n    <img src=\"https://goreportcard.com/badge/github.com/digitalocean/doctl\" alt=\"Go Report Card\" />\n  </a>\n</p>\n\n```\ndoctl is a command-line interface (CLI) for the DigitalOcean API.\n\nUsage:\n  doctl [command]\n\nAvailable Commands:\n  1-click         Display commands that pertain to 1-click applications\n  account         Display commands that retrieve account details\n  apps            Display commands for working with apps\n  auth            Display commands for authenticating doctl with an account\n  balance         Display commands for retrieving your account balance\n  billing-history Display commands for retrieving your billing history\n  completion      Modify your shell so doctl commands autocomplete with TAB\n  compute         Display commands that manage infrastructure\n  databases       Display commands that manage databases\n  help            Help about any command\n  invoice         Display commands for retrieving invoices for your account\n  kubernetes      Displays commands to manage Kubernetes clusters and configurations\n  monitoring      [Beta] Display commands to manage monitoring\n  projects        Manage projects and assign resources to them\n  registry        Display commands for working with container registries\n  version         Show the current version\n  vpcs            Display commands that manage VPCs\n\nFlags:\n  -t, --access-token string   API V2 access token\n  -u, --api-url string        Override default API endpoint\n  -c, --config string         Specify a custom config file (default \"$HOME/.config/doctl/config.yaml\")\n      --context string        Specify a custom authentication context name\n  -h, --help                  help for doctl\n  -o, --output string         Desired output format [text|json] (default \"text\")\n      --trace                 Show a log of network activity while performing a command\n  -v, --verbose               Enable verbose output\n\nUse \"doctl [command] --help\" for more information about a command.\n```\n\nSee the [full reference documentation](https://www.digitalocean.com/docs/apis-clis/doctl/reference/) for information about each available command.\n\n- [Installing `doctl`](#installing-doctl)\n  - [Using a Package Manager (Preferred)](#using-a-package-manager-preferred)\n    - [MacOS](#macos)\n    - [Snap supported OS](#snap-supported-os)\n      - [Use with `kubectl`](#use-with-kubectl)\n      - [Using `doctl compute ssh`](#using-doctl-compute-ssh)\n      - [Use with Docker](#use-with-docker)\n    - [Arch Linux](#arch-linux)\n    - [Fedora](#fedora)\n    - [Nix supported OS](#nix-supported-os)\n  - [Docker Hub](#docker-hub)\n  - [Downloading a Release from GitHub](#downloading-a-release-from-github)\n  - [Building with Docker](#building-with-docker)\n  - [Building the Development Version from Source](#building-the-development-version-from-source)\n  - [Dependencies](#dependencies)\n- [Authenticating with DigitalOcean](#authenticating-with-digitalocean)\n  - [Logging into multiple DigitalOcean accounts](#logging-into-multiple-digitalocean-accounts)\n- [Configuring Default Values](#configuring-default-values)\n  - [Environment Variables](#environment-variables)\n- [Enabling Shell Auto-Completion](#enabling-shell-auto-completion)\n  - [Linux Auto Completion](#linux-auto-completion)\n  - [MacOS](#macos-1)\n- [Uninstalling `doctl`](#uninstalling-doctl)\n  - [Using a Package Manager](#using-a-package-manager)\n    - [MacOS Uninstall](#macos-uninstall)\n- [Examples](#examples)\n- [Tutorials](#tutorials)\n\n\n## Installing `doctl`\n\n### Using a Package Manager (Preferred)\n\nA package manager allows you to install and keep up with new `doctl` versions using only a few commands.\nOur community distributes `doctl` via a growing set of package managers in addition to the officially\nsupported set listed below; chances are good a solution exists for your platform.\n\n#### MacOS\n\nUse [Homebrew](https://brew.sh/) to install `doctl` on macOS:\n\n```\nbrew install doctl\n```\n\n`doctl` is also available via [MacPorts](https://www.macports.org/ports.php?by=name&substr=doctl). Note that\nthe port is community maintained and may not be on the latest version.\n\n#### Snap supported OS\n\nUse [Snap](https://snapcraft.io/) on [Snap-supported](https://snapcraft.io/docs/core/install) systems to\ninstall `doctl`:\n\n```\nsudo snap install doctl\n```\n\n##### Use with `kubectl`\n\nUsing `kubectl` requires the `kube-config` personal-files connection for `doctl`:\n\n    sudo snap connect doctl:kube-config\n\n##### Using `doctl compute ssh`\n\nUsing `doctl compute ssh` requires the core [ssh-keys interface](https://docs.snapcraft.io/ssh-keys-interface):\n\n    sudo snap connect doctl:ssh-keys :ssh-keys\n\n##### Use with Docker\n\nUsing `doctl registry login` requires the `dot-docker` personal-files connection for `doctl`:\n\n    sudo snap connect doctl:dot-docker\n\nThis allows `doctl` to add DigitalOcean container registry credentials to your Docker configuration file.\n\n#### Arch Linux\n\n`doctl` is available in the official Arch Linux repository:\n\n    sudo pacman -S doctl\n\n#### Fedora\n\n`doctl` is available in the official Fedora repository:\n\n    sudo dnf install doctl\n\n#### Nix supported OS\n\nUsers of NixOS or other [supported\nplatforms](https://nixos.org/nixpkgs/) may install ```doctl``` from\n[Nixpkgs](https://nixos.org/nixos/packages.html#doctl). Please note\nthis package is also community maintained and may not be on the latest\nversion.\n\n### Docker Hub\n\nContainers for each release are available under the `digitalocean`\norganization on [Docker Hub](https://hub.docker.com/r/digitalocean/doctl).\nLinks to the containers are available in the GitHub releases.\n\n### Downloading a Release from GitHub\n\nVisit the [Releases\npage](https://github.com/digitalocean/doctl/releases) for the\n[`doctl` GitHub project](https://github.com/digitalocean/doctl), and find the\nappropriate archive for your operating system and architecture.\nDownload the archive from your browser or copy its URL and\nretrieve it to your home directory with `wget` or `curl`.\n\nFor example, with `wget`:\n\n```\ncd ~\nwget https://github.com/digitalocean/doctl/releases/download/v<version>/doctl-<version>-linux-amd64.tar.gz\n```\n\nOr with `curl`:\n\n```\ncd ~\ncurl -OL https://github.com/digitalocean/doctl/releases/download/v<version>/doctl-<version>-linux-amd64.tar.gz\n```\n\nExtract the binary:\n\n```\ntar xf ~/doctl-<version>-linux-amd64.tar.gz\n```\n\nOr download and extract with this oneliner:\n```\ncurl -sL https://github.com/digitalocean/doctl/releases/download/v<version>/doctl-<version>-linux-amd64.tar.gz | tar -xzv\n```\n\nwhere `<version>` is the full semantic version, e.g., `1.17.0`.\n\nOn Windows systems, you should be able to double-click the zip archive to extract the `doctl` executable.\n\nMove the `doctl` binary to somewhere in your path. For example, on GNU/Linux and OS X systems:\n\n```\nsudo mv ~/doctl /usr/local/bin\n```\n\nWindows users can follow [How to: Add Tool Locations to the PATH Environment Variable](https://msdn.microsoft.com/en-us/library/office/ee537574(v=office.14).aspx) in order to add `doctl` to their `PATH`.\n\n### Building with Docker\n\nIf you have\n[Docker](https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-16-04)\nconfigured, you can build a local Docker image using `doctl`'s\n[Dockerfile](https://github.com/digitalocean/doctl/blob/main/Dockerfile)\nand run `doctl` within a container.\n\n```\ndocker build --tag=doctl .\n```\n\nThen you can run it within a container.\n\n```\ndocker run --rm --interactive --tty --env=DIGITALOCEAN_ACCESS_TOKEN=\"your_DO_token\" doctl any_doctl_command\n```\n\n### Building the Development Version from Source\n\nIf you have a [Go environment](https://www.digitalocean.com/community/tutorials/how-to-install-go-1-6-on-ubuntu-16-04)\nconfigured, you can install the development version of `doctl` from\nthe command line.\n\n```\ngo install github.com/digitalocean/doctl/cmd/doctl@latest\n```\n\nWhile the development version is a good way to take a peek at\n`doctl`'s latest features before they get released, be aware that it\nmay have bugs. Officially released versions will generally be more\nstable.\n\n### Dependencies\n\n`doctl` uses Go modules with vendoring.\n\n## Authenticating with DigitalOcean\n\nTo use `doctl`, you need to authenticate with DigitalOcean by providing an access token, which can be created from the [Applications & API](https://cloud.digitalocean.com/account/api/tokens) section of the Control Panel. You can learn how to generate a token by following the [DigitalOcean API guide](https://www.digitalocean.com/community/tutorials/how-to-use-the-digitalocean-api-v2).\n\nDocker users will have to use the `DIGITALOCEAN_ACCESS_TOKEN` environmental variable to authenticate, as explained in the Installation section of this document.\n\nIf you're not using Docker to run `doctl`, authenticate with the `auth init` command.\n\n```\ndoctl auth init\n```\n\nYou will be prompted to enter the DigitalOcean access token that you generated in the DigitalOcean control panel.\n\n```\nDigitalOcean access token: your_DO_token\n```\n\nAfter entering your token, you will receive confirmation that the credentials were accepted. If the token doesn't validate, make sure you copied and pasted it correctly.\n\n```\nValidating token: OK\n```\n\nThis will create the necessary directory structure and configuration file to store your credentials.\n\n### Logging into multiple DigitalOcean accounts\n\n`doctl` allows you to log in to multiple DigitalOcean accounts at the same time and easily switch between them with the use of authentication contexts.\n\nBy default, a context named `default` is used. To create a new context, run `doctl auth init --context <new-context-name>`. You may also pass the new context's name using the `DIGITALOCEAN_CONTEXT` [environment variable](#environment-variables). You will be prompted for your API access token which will be associated with the new context.\n\nTo use a non-default context, pass the context name to any `doctl` command. For example:\n\n```\ndoctl compute droplet list --context <new-context-name>\n```\n\nTo set a new default context, run `doctl auth switch --context <new-context-name>`. This command will save the current context to the config file and use it for all commands by default if a context is not specified.\n\nThe `--access-token` flag or `DIGITALOCEAN_ACCESS_TOKEN` [environment variable](#environment-variables) are acknowledged only if the `default` context is used. Otherwise, they will have no effect on what API access token is used. To temporarily override the access token if a different context is set as default, use `doctl --context default --access-token your_DO_token ...`.\n\n## Configuring Default Values\n\nThe `doctl` configuration file is used to store your API Access Token as well as the defaults for command flags. If you find yourself using certain flags frequently, you can change their default values to avoid typing them every time. This can be useful when, for example, you want to change the username or port used for SSH.\n\nOn OS X, `doctl` saves its configuration as `${HOME}/Library/Application Support/doctl/config.yaml`. The `${HOME}/Library/Application Support/doctl/` directory will be created once you run `doctl auth init`.\n\nOn Linux, `doctl` saves its configuration as `${XDG_CONFIG_HOME}/doctl/config.yaml` if the `${XDG_CONFIG_HOME}` environmental variable is set, or `~/.config/doctl/config.yaml` if it is not. On Windows, the config file location is `%APPDATA%\\doctl\\config.yaml`.\n\nThe configuration file is automatically created and populated with default properties when you authenticate with `doctl` for the first time. The typical format for a property is `category.command.sub-command.flag: value`. For example, the property for the `force` flag with tag deletion is `tag.delete.force`.\n\nTo change the default SSH user used when connecting to a Droplet with `doctl`, look for the `compute.ssh.ssh-user` property and change the value after the colon. In this example, we changed it to the username **sammy**.\n\n```\n. . .\ncompute.ssh.ssh-user: sammy\n. . .\n```\n\nSave and close the file. The next time you use `doctl`, the new default values you set will be in effect. In this example, that means that it will SSH as the **sammy** user (instead of the default **root** user) next time you log into a Droplet.\n\n### Environment variables\n\nIn addition to specifying configuration using `config.yaml` file or program arguments, it is also possible to override values just for the given session with environment variables:\n\n```\n# Use instead of --context argument\nDIGITALOCEAN_CONTEXT=my-context doctl auth list\n```\n\n```\n# Use instead of --access-token argument\nDIGITALOCEAN_ACCESS_TOKEN=my-do-token doctl\n```\n\n## Enabling Shell Auto-Completion\n\n`doctl` also has auto-completion support. It can be set up so that if you partially type a command and then press `TAB`, the rest of the command is automatically filled in. For example, if you type `doctl comp<TAB><TAB> drop<TAB><TAB>` with auto-completion enabled, you'll see `doctl compute droplet` appear on your command prompt.\n\n**Note:** Shell auto-completion is not available for Windows users.\n\nHow you enable auto-completion depends on which operating system you're using. If you installed `doctl` via Homebrew, auto-completion is activated automatically, though you may need to configure your local environment to enable it.\n\n`doctl` can generate an auto-completion script with the `doctl completion your_shell_here` command. Valid arguments for the shell are Bash (`bash`), ZSH (`zsh`), and fish (`fish`). By default, the script will be printed to the command line output.  For more usage examples for the `completion` command, use `doctl completion --help`.\n\n### Linux Auto Completion\n\nThe most common way to use the `completion` command is by adding a line to your local profile configuration. At the end of your `~/.profile` file, add this line:\n\n```\nsource <(doctl completion your_shell_here)\n```\n\nIf you are using ZSH, add this line to your `~/.zshrc` file:\n\n```\ncompdef _doctl doctl\n```\n\nThen refresh your profile.\n\n```\nsource ~/.profile\n```\n\n### MacOS (bash)\n\nmacOS users will have to install the `bash-completion` framework to use the auto-completion feature.\n\n```\nbrew install bash-completion\n```\n\nAfter it's installed, load `bash_completion` by adding the following line to your `.profile` or `.bashrc` file.\n\n```\nsource $(brew --prefix)/etc/bash_completion\n```\n\nThen refresh your profile using the appropriate command for the bash configurations file.\n\n```\nsource ~/.profile\nsource ~/.bashrc\n```\n\n### MacOS (zsh)\n\nAdd the following line to your `~/.zshrc` file:\n\n```zsh\nautoload -U +X compinit; compinit\n```\n\nThen refresh your profile.\n\n## Uninstalling `doctl`\n\n### Using a Package Manager\n\n#### MacOS Uninstall\n\nUse [Homebrew](https://brew.sh/) to uninstall all current and previous versions of the `doctl` formula on macOS:\n\n```\nbrew uninstall -f doctl\n```\n\nTo completely remove the configuration, also remove the following directory:\n\n```\nrm -rf \"$HOME/Library/Application Support/doctl\"\n```\n\n\n## Examples\n\n`doctl` is able to interact with all of your DigitalOcean resources. Below are a few common usage examples. To learn more about the features available, see [the full tutorial on the DigitalOcean community site](https://www.digitalocean.com/community/tutorials/how-to-use-doctl-the-official-digitalocean-command-line-client).\n\n* List all Droplets on your account:\n```\ndoctl compute droplet list\n```\n* Create a Droplet:\n```\ndoctl compute droplet create <name> --region <region-slug> --image <image-slug> --size <size-slug>\n```\n* Assign a Floating IP to a Droplet:\n```\ndoctl compute floating-ip-action assign <ip-addr> <droplet-id>\n```\n* Create a new A record for an existing domain:\n```\ndoctl compute domain records create --record-type A --record-name www --record-data <ip-addr> <domain-name>\n```\n\n`doctl` also simplifies actions without an API endpoint. For instance, it allows you to SSH to your Droplet by name:\n```\ndoctl compute ssh <droplet-name>\n```\n\nBy default, it assumes you are using the `root` user. If you want to SSH as a specific user, you can do that as well:\n```\ndoctl compute ssh <user>@<droplet-name>\n```\n\n## Tutorials\n\n* [How To Use Doctl, the Official DigitalOcean Command-Line Client](https://www.digitalocean.com/community/tutorials/how-to-use-doctl-the-official-digitalocean-command-line-client)\n* [How To Work with DigitalOcean Load Balancers Using Doctl](https://www.digitalocean.com/community/tutorials/how-to-work-with-digitalocean-load-balancers-using-doctl)\n* [How To Secure Web Server Infrastructure With DigitalOcean Cloud Firewalls Using Doctl](https://www.digitalocean.com/community/tutorials/how-to-secure-web-server-infrastructure-with-digitalocean-cloud-firewalls-using-doctl)\n* [How To Work with DigitalOcean Block Storage Using Doctl](https://www.digitalocean.com/community/tutorials/how-to-work-with-digitalocean-block-storage-using-doctl)"
}
