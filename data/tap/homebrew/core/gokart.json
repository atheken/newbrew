{
  "name": "gokart",
  "full_name": "gokart",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Static code analysis for securing Go code",
  "license": "Apache-2.0",
  "homepage": "https://github.com/praetorian-inc/gokart",
  "versions": {
    "stable": "0.5.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/praetorian-inc/gokart/archive/refs/tags/v0.5.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "81bf1e26531117de4da9b160ede80aa8f6c4d4984cc1d7dea398083b8e232eb7"
    },
    "head": {
      "url": "https://github.com/praetorian-inc/gokart.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gokart/blobs/sha256:3adae6ff7cc756f194a906f77d25a0d4680cb69241c670c3b3b36323c69ce39f",
          "sha256": "3adae6ff7cc756f194a906f77d25a0d4680cb69241c670c3b3b36323c69ce39f"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gokart/blobs/sha256:50f225b023198e9ecb44e854f37cd84c0638cb17bef5b1d43bcb31a2bb8d58d0",
          "sha256": "50f225b023198e9ecb44e854f37cd84c0638cb17bef5b1d43bcb31a2bb8d58d0"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gokart/blobs/sha256:01ab4e67e745df4737e271c3d1639bd02c5ab1b028c3ad10e6a227c41ffd99bf",
          "sha256": "01ab4e67e745df4737e271c3d1639bd02c5ab1b028c3ad10e6a227c41ffd99bf"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gokart/blobs/sha256:1a2bc072f4a20991d7bfd81876fded10bd3bf87919e61ef63f217d468ccd6464",
          "sha256": "1a2bc072f4a20991d7bfd81876fded10bd3bf87919e61ef63f217d468ccd6464"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gokart/blobs/sha256:6b738132eca3d46d45bac4940af5edf356150bf8b0b693e195d77b0a8de0f5f4",
          "sha256": "6b738132eca3d46d45bac4940af5edf356150bf8b0b693e195d77b0a8de0f5f4"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gokart/blobs/sha256:0b8950ba85b71dd420699eff09b64251473c2b0b130c5c2bcc530afd6a8b0a30",
          "sha256": "0b8950ba85b71dd420699eff09b64251473c2b0b130c5c2bcc530afd6a8b0a30"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gokart/blobs/sha256:4bdf138ac774192e8984fbe34033c0673a4e0a8f173441ede2af1c1cf3ab2f20",
          "sha256": "4bdf138ac774192e8984fbe34033c0673a4e0a8f173441ede2af1c1cf3ab2f20"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gokart/blobs/sha256:272ab63250f847c8749b0ea407a5947e8472288f8bb21da400df45a01e9ecb4a",
          "sha256": "272ab63250f847c8749b0ea407a5947e8472288f8bb21da400df45a01e9ecb4a"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [
    "go"
  ],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/gokart.rb",
  "ruby_source_checksum": {
    "sha256": "41133971712f8fae4b80d2eaa2d1b032ba3166239f8f179ecc9904edb2552cc1"
  },
  "date_added": "2022-05-23T14:40:55+00:00",
  "readme": "<p align=\"center\">\n    <img src=\"docs/img/logo.png\" width=\"75%\">\n</p>\n\n# GoKart - Go Security Static Analysis\n\n[![CI](https://github.com/praetorian-inc/gokart/workflows/CI/badge.svg)](actions?query=branch%3Adevelopment)\n[![Release](https://github.com/praetorian-inc/gokart/workflows/Release/badge.svg)](releases)\n\nGoKart is a static analysis tool for Go that finds vulnerabilities using\nthe SSA (single static assignment) form of Go source code. It is capable of\ntracing the source of variables and function arguments to determine whether\ninput sources are safe, which reduces the number of false positives compared\nto other Go security scanners. For instance, a SQL query that is concatenated with a variable might\ntraditionally be flagged as SQL injection; however, GoKart can figure out if the variable\nis actually a constant or constant equivalent, in which case there is no vulnerability.\n\nGoKart also helps to power [**Chariot**](https://lp.praetorian.com/l/874901/2021-11-24/dtw1j?utm_source=github&utm_medium=organic_oss&utm_campaign=gokart),\nPraetorian's security platform that helps you find, manage, and fix vulnerabilities in your source\ncode and cloud environments. Chariot makes it simple to run automated, continuous GoKart scans on\nyour source code. If you want to try GoKart, you can set up a free Chariot account in minutes by\nclicking [here](https://chariot.praetorian.com/app/login?register&utm_source=github&utm_medium=organic_oss&utm_campaign=gokart).\n\n## Why We Built GoKart\n\nStatic analysis is a powerful technique for finding vulnerabilities in source code. \nHowever, the approach has suffered from being noisy - that is, many static analysis\ntools find quite a few \"vulnerabilities\" that are not actually real. This has led\nto developer friction as users get tired of the tools \"crying wolf\" one time too\nmany.\n\nThe motivation for GoKart was to address this: could we create a scanner with \nsignificantly lower false positive rates than existing tools? Based on our experimentation\nthe answer is yes. By leveraging source-to-sink tracing and SSA, GoKart is capable\nof tracking variable taint between variable assignments, significantly improving the \naccuracy of findings. Our focus is on usability: pragmatically, that means we \nhave optimized our approaches to reduce false alarms.\n\nFor more information, please read [our blog post](https://www.praetorian.com/blog/introducing-gokart?utm_source=github&utm_medium=organic_oss&utm_campaign=gokart).\n\n## Install\n\nYou can install GoKart locally by using any one of the options listed below.\n\n### Install with `go install`\n\n```shell\n$ go install github.com/praetorian-inc/gokart@latest\n```\n\n### Install a release binary\n\n1. Download the binary for your OS from the [releases page](https://github.com/praetorian-inc/gokart/releases).\n\n2. (OPTIONAL) Download the `checksums.txt` file to verify the integrity of the archive\n\n```shell\n# Check the checksum of the downloaded archive\n$ shasum -a 256 gokart_${VERSION}_${ARCH}.tar.gz\nb05c4d7895be260aa16336f29249c50b84897dab90e1221c9e96af9233751f22  gokart_${VERSION}_${ARCH}.tar.gz\n\n$ cat gokart_${VERSION}_${ARCH}_checksums.txt | grep gokart_${VERSION}_${ARCH}.tar.gz\nb05c4d7895be260aa16336f29249c50b84897dab90e1221c9e96af9233751f22  gokart_${VERSION}_${ARCH}.tar.gz\n```\n\n3. Extract the downloaded archive\n\n```shell\n$ tar -xvf gokart_${VERSION}_${ARCH}.tar.gz\n```\n\n4. Move the `gokart` binary into your path:\n\n```shell\n$ mv ./gokart /usr/local/bin/\n```\n\n### Clone and build yourself\n\n```shell\n# clone the GoKart repo\n$ git clone https://github.com/praetorian-inc/gokart.git\n\n# navigate into the repo directory and build\n$ cd gokart\n$ go build\n\n# Move the gokart binary into your path\n$ mv ./gokart /usr/local/bin\n```\n\n### Docker Support\nBuild the docker image\n```shell\ndocker build -t gokart .\n```\n\nRunning the container with a local scan (the local scan directory needs to be mounted to the container image)\n```shell\ndocker run -v /path/to/scan-dir:/scan-dir gokart scan /scan-dir\n```\n\nRunning the container with a remote scan (when specifying a private key for auth, that will also need to be mounted to the container)\n```shell\ndocker run gokart scan -r https://github.com/praetorian-inc/gokart\n\n# specifying a private key for private repository ssh authentication\ndocker run -v /path/to/key-dir/:/key-dir gokart scan -r git@github.com:praetorian-inc/gokart.git -k /key-dir/ssh_key\n```\n\n## Usage\n\n### Run GoKart on a Go module in the current directory\n\n```shell\n# running without a directory specified defaults to '.'\ngokart scan <flags>\n```\n\n### Scan a Go module in a different directory\n\n```shell\ngokart scan <directory> <flags> \n```\n\n### Get Help\n\n```shell\ngokart help\n```\n\n## Getting Started - Scanning an Example App\n\nYou can follow the steps below to run GoKart on [Go Test Bench](https://github.com/Contrast-Security-OSS/go-test-bench),\nan intentionally vulnerable Go application from the Contrast Security team.\n\n```shell\n# Clone sample vulnerable application\ngit clone https://github.com/Contrast-Security-OSS/go-test-bench.git\ngokart scan go-test-bench/\n```\n\nOutput should show some identified vulnerabilities, each with a Vulnerable Function and Source of\nUser Input identified.\n\nTo test some additional GoKart features, you can scan with the CLI flags suggested below.\n\n```shell\n# Use verbose flag to show full traces of these vulnerabilities\ngokart scan go-test-bench/ -v\n\n# Use globalsTainted flag to ignore whitelisted Sources\n# may increase false positive results\ngokart scan go-test-bench/ -v -g\n\n# Use debug flag to display internal analysis information\n# which is useful for development and debugging\ngokart scan go-test-bench/ -d\n\n# Output results in sarif format\ngokart scan go-test-bench/ -s\n\n# Output results to file\ngokart scan go-test-bench/ -o gokart-go-test-bench.txt\n\n# Output scarif results to file\ngokart scan go-test-bench/ -o gokart-go-test-bench.txt -s\n\n# Scan remote public repository \n# Repository will be cloned locally, scanned and deleted afterwards\ngokart scan -r https://github.com/ShiftLeftSecurity/shiftleft-go-demo -v\n\n# Specify the remote branch to scan\ngokart scan -r https://github.com/ShiftLeftSecurity/shiftleft-go-demo -b actions_fix\n\n# Scan remote private repository via ssh\ngokart scan -r git@github.com:Contrast-Security-OSS/go-test-bench.git \n\n# Scan remote private repository and optionally specify a key for ssh authentication \ngokart scan -r git@github.com:Contrast-Security-OSS/go-test-bench.git -k /home/gokart/.ssh/github_rsa_key\n\n# Use remote scan and output flags together for seamless security reviews\ngokart scan -r https://github.com/ShiftLeftSecurity/shiftleft-go-demo -o gokart-shiftleft-go-demo.txt -v \n\n# Use remote scan, output and sarif flags for frictionless integration into CI/CD\ngokart scan -r https://github.com/ShiftLeftSecurity/shiftleft-go-demo -o gokart-shiftleft-go-demo.txt -s\n```\n\nTo test out the extensibility of GoKart, you can modify the configuration file that GoKart uses to\nintroduce a new vulnerable sink into analysis. There is a Test Sink analyzer defined in the included\ndefault config file at `util/analyzers.yml`. Modify `util/analyzers.yml` to remove the comments on\nthe Test Sink analyzer and then direct GoKart to use the modified config file with the `-i` flag.\n\n```shell\n# Scan using modified analyzers.yml file and output full traces\ngokart scan go-test-bench/ -v -i <path-to-gokart>/util/analyzers.yml\n```\n\nOutput should now contain additional vulnerabilities, including new \"Test Sink reachable by user input\"\nvulnerabilities.\n\n## Run GoKart Tests\n\nYou can run the included tests with the following command, invoked from the GoKart root directory.\n\n```shell\ngo test -v ./...\n```"
}
