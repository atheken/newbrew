{
  "name": "rush-parallel",
  "full_name": "rush-parallel",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Cross-platform command-line tool for executing jobs in parallel",
  "license": "MIT",
  "homepage": "https://github.com/shenwei356/rush",
  "versions": {
    "stable": "0.5.2",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/shenwei356/rush/archive/refs/tags/v0.5.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "3f2901313ee279818e6230b432d48b0bb0e1a681ca83740f7e67975ad8b95dd6"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rush-parallel/blobs/sha256:0341186dd90a55589dc401216afbe40913f3112ab94d6c4d9c1495d99cb84dd6",
          "sha256": "0341186dd90a55589dc401216afbe40913f3112ab94d6c4d9c1495d99cb84dd6"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rush-parallel/blobs/sha256:f10bab20218ca91a20f7b7d4a289abee8522d5cc85ae88183fe8e85b27a03c17",
          "sha256": "f10bab20218ca91a20f7b7d4a289abee8522d5cc85ae88183fe8e85b27a03c17"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rush-parallel/blobs/sha256:ea91cdd222d0bf25c6dba7f67e544d2c1e9fc13fc313ce8e59d06b52e838024e",
          "sha256": "ea91cdd222d0bf25c6dba7f67e544d2c1e9fc13fc313ce8e59d06b52e838024e"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rush-parallel/blobs/sha256:c4f91f1dcf5a639e422ac42f3c23fbe8b0bd7c1228123bb4f848e1942eaa8482",
          "sha256": "c4f91f1dcf5a639e422ac42f3c23fbe8b0bd7c1228123bb4f848e1942eaa8482"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rush-parallel/blobs/sha256:f82c1a66aaa1ae0723c14bfa3f598fcb0bbed3f7984e36648c63460226d34109",
          "sha256": "f82c1a66aaa1ae0723c14bfa3f598fcb0bbed3f7984e36648c63460226d34109"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rush-parallel/blobs/sha256:1900017baaf28aa3f39b99c19d38442b80d35cfeef12b87a788b8953212a9a53",
          "sha256": "1900017baaf28aa3f39b99c19d38442b80d35cfeef12b87a788b8953212a9a53"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rush-parallel/blobs/sha256:648aa2077757ce3fb989e9c2a0d429861817cbe2e6c3746e3f9243ab15c9fbf4",
          "sha256": "648aa2077757ce3fb989e9c2a0d429861817cbe2e6c3746e3f9243ab15c9fbf4"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/rush-parallel.rb",
  "ruby_source_checksum": {
    "sha256": "e849cf95d4f3ae9ec46b311e6d7b94f7d0ba2fdf611e8bb068381e828d595f7b"
  },
  "date_added": "2022-08-13T19:52:16+00:00",
  "readme": "# rush -- a cross-platform command-line tool for executing jobs in parallel\n\n[![Build Status](https://travis-ci.org/shenwei356/rush.svg?branch=master)](https://travis-ci.org/shenwei356/rush)\n[![Built with GoLang](https://img.shields.io/badge/powered_by-go-6362c2.svg?style=flat)](https://golang.org)\n[![Go Report Card](https://goreportcard.com/badge/github.com/shenwei356/rush)](https://goreportcard.com/report/github.com/shenwei356/rush)\n[![Cross-platform](https://img.shields.io/badge/platform-any-ec2eb4.svg?style=flat)](#download)\n[![Latest Version](https://img.shields.io/github/release/shenwei356/rush.svg?style=flat?maxAge=86400)](https://github.com/shenwei356/rush/releases)\n[![Github Releases](https://img.shields.io/github/downloads/shenwei356/rush/latest/total.svg?maxAge=3600)](https://github.com/shenwei356/rush/releases)\n\n`rush` is a tool similar to [GNU parallel](https://www.gnu.org/software/parallel/)\n and [gargs](https://github.com/brentp/gargs).\n `rush` borrows some idea from them and has some unique features,\n  e.g.,\n  supporting custom defined variables,\n  resuming multi-line commands,\n  more advanced embeded replacement strings.\n\nThese features make `rush` suitable for easily and flexibly parallelizing\ncomplex workflows in fields like Bioinformatics (see [examples](#examples) 18).\n\n\n## Table of Contents\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Features](#features)\n- [Performance](#performance)\n- [Installation](#installation)\n- [Usage](#usage)\n- [Examples](#examples)\n- [Special Cases](#special-cases)\n- [Contributors](#contributors)\n- [Acknowledgements](#acknowledgements)\n- [Contact](#contact)\n- [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n\n## Features\n\nMajor:\n\n- Supporting Linux, OS X and **Windows** (not CygWin)!\n- **Avoid mixed line from multiple processes without loss of performance**,\n  e.g. the first half of a line is from one process\n  and the last half of the line is from another process.\n  (`--line-buffer` in GNU parallel)\n- **Timeout** (`-t`). (`--timeout` in GNU parallel)\n- **Retry** (`-r`). (`--retry-failed --joblog` in GNU parallel)\n- **Safe exit after capturing Ctrl-C** (*not perfect*, you may stop it by typing ctrl-c or closing terminal)\n- **Continue** (`-c`). (`--resume --joblog` in GNU parallel,\n  ***<s/>sut it does not support multi-line commands, which are common in workflow</s>***)\n- **`awk -v` like custom defined variables** (`-v`). (***Using Shell variable in GNU parallel***)\n- **Keeping output in order of input** (`-k`). (Same `-k/--keep-order` in GNU parallel)\n- **Exit on first error(s)** (`-e`). (*not perfect*, you may stop it by typing ctrl-c or closing terminal) (`--halt 2` in GNU parallel) \n- **Settable record delimiter** (`-D`, default `\\n`). (`--recstart` and `--recend` in GNU parallel)\n- **Settable records sending to every command** (`-n`, default `1`). (`-n/--max-args` in GNU parallel)\n- **Settable field delimiter** (`-d`, default `\\s+`). (Same `-d/--delimiter` in GNU parallel)\n- **Practical replacement strings** (like GNU parallel):\n    - `{#}`, job ID. (Same in GNU parallel)\n    - `{}`, full data. (Same in GNU parallel)\n    - `{n}`, `n`th field in delimiter-delimited data. (Same in GNU parallel)\n    - Directory and file\n        - `{/}`, dirname. (`{//}` in GNU parallel)\n        - `{%}`, basename. (`{/}` in GNU parallel)\n        - `{.}`, remove the last extension. (Same in GNU parallel)\n        - `{:}`, remove any extension (***Not directly supported in GNU parallel***)\n        - `{^suffix}`, remove `suffix` (***Not directly supported in GNU parallel***)\n        - `{@regexp}`, capture submatch using regular expression (***Not directly supported in GNU parallel***)\n    - Combinations\n        - `{%.}`, `{%:}`, basename without extension\n        - `{2.}`, `{2/}`, `{2%.}`, manipulate `n`th field\n- **Preset variable (macro)**, e.g., `rush -v p={^suffix} 'echo {p}_new_suffix'`,\nwhere `{p}` is replaced with `{^suffix}`. (***Using Shell variable in GNU parallel***)\n\nMinor:\n\n- Dry run (`--dry-run`). (Same in GNU parallel)\n- Trim input data (`--trim`). (Same in GNU parallel)\n- Verbose output (`--verbose`). (Same in GNU parallel)\n\n[Differences between rush and GNU parallel](https://www.gnu.org/software/parallel/parallel_alternatives.html#DIFFERENCES-BETWEEN-Rush-AND-GNU-Parallel) on GNU parallel site.\n\n## Performance\n\nPerformance of `rush` is similar to `gargs`, and they are both slightly faster than `parallel` (Perl) and both slower than `Rust parallel` ([discussion](https://github.com/shenwei356/rush/issues/1)).\n\nNote that speed is not the #.1 target, especially for processes that last long.\n\n\n## Installation\n\n`rush` is implemented in [Go](https://golang.org/) programming language,\n executable binary files **for most popular operating systems** are freely available\n  in [release](https://github.com/shenwei356/rush/releases) page.\n\n#### Method 1: Download binaries\n\n[rush v0.5.2](https://github.com/shenwei356/rush/releases/tag/v0.5.2)\n[![Github Releases (by Release)](https://img.shields.io/github/downloads/shenwei356/rush/v0.5.2/total.svg)](https://github.com/shenwei356/rush/releases/tag/v0.5.2)\n\n***Tip: run `rush -V` to check update !!!***\n\nOS     |Arch      |File, (中国镜像)                                                                                                                                                                         |Download Count\n:------|:---------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nLinux  |32-bit    |[rush_linux_386.tar.gz](https://github.com/shenwei356/rush/releases/download/v0.5.2/rush_linux_386.tar.gz), ([mirror](http://app.shenwei.me/data/rush/rush_linux_386.tar.gz))                            |[![Github Releases (by Asset)](https://img.shields.io/github/downloads/shenwei356/rush/latest/rush_linux_386.tar.gz.svg?maxAge=3600)](https://github.com/shenwei356/rush/releases/download/v0.5.2/rush_linux_386.tar.gz)\nLinux  |**64-bit**|[**rush_linux_amd64.tar.gz**](https://github.com/shenwei356/rush/releases/download/v0.5.2/rush_linux_amd64.tar.gz), ([mirror](http://app.shenwei.me/data/rush/rush_linux_amd64.tar.gz))                  |[![Github Releases (by Asset)](https://img.shields.io/github/downloads/shenwei356/rush/latest/rush_linux_amd64.tar.gz.svg?maxAge=3600)](https://github.com/shenwei356/rush/releases/download/v0.5.2/rush_linux_amd64.tar.gz)\nOS X   |32-bit    |[rush_darwin_386.tar.gz](https://github.com/shenwei356/rush/releases/download/v0.5.2/rush_darwin_386.tar.gz), ([mirror](http://app.shenwei.me/data/rush/rush_darwin_386.tar.gz))                         |[![Github Releases (by Asset)](https://img.shields.io/github/downloads/shenwei356/rush/latest/rush_darwin_386.tar.gz.svg?maxAge=3600)](https://github.com/shenwei356/rush/releases/download/v0.5.2/rush_darwin_386.tar.gz)\nOS X   |**64-bit**|[**rush_darwin_amd64.tar.gz**](https://github.com/shenwei356/rush/releases/download/v0.5.2/rush_darwin_amd64.tar.gz), ([mirror](http://app.shenwei.me/data/rush/rush_darwin_amd64.tar.gz))               |[![Github Releases (by Asset)](https://img.shields.io/github/downloads/shenwei356/rush/latest/rush_darwin_amd64.tar.gz.svg?maxAge=3600)](https://github.com/shenwei356/rush/releases/download/v0.5.2/rush_darwin_amd64.tar.gz)\nWindows|32-bit    |[rush_windows_386.exe.tar.gz](https://github.com/shenwei356/rush/releases/download/v0.5.2/rush_windows_386.exe.tar.gz), ([mirror](http://app.shenwei.me/data/rush/rush_windows_386.exe.tar.gz))          |[![Github Releases (by Asset)](https://img.shields.io/github/downloads/shenwei356/rush/latest/rush_windows_386.exe.tar.gz.svg?maxAge=3600)](https://github.com/shenwei356/rush/releases/download/v0.5.2/rush_windows_386.exe.tar.gz)\nWindows|**64-bit**|[**rush_windows_amd64.exe.tar.gz**](https://github.com/shenwei356/rush/releases/download/v0.5.2/rush_windows_amd64.exe.tar.gz), ([mirror](http://app.shenwei.me/data/rush/rush_windows_amd64.exe.tar.gz))|[![Github Releases (by Asset)](https://img.shields.io/github/downloads/shenwei356/rush/latest/rush_windows_amd64.exe.tar.gz.svg?maxAge=3600)](https://github.com/shenwei356/rush/releases/download/v0.5.2/rush_windows_amd64.exe.tar.gz)\n\n\nJust [download](https://github.com/shenwei356/rush/releases) compressed\nexecutable file of your operating system,\nand decompress it with `tar -zxvf *.tar.gz` command or other tools.\nAnd then:\n\n1. **For Linux-like systems**\n    1. If you have root privilege simply copy it to `/usr/local/bin`:\n\n            sudo cp rush /usr/local/bin/\n\n    1. Or copy to anywhere in the environment variable `PATH`:\n\n            mkdir -p $HOME/bin/; cp rush $HOME/bin/\n\n1. **For windows**, just copy `rush.exe` to `C:\\WINDOWS\\system32`.\n\n#### Method 2: For Go developer\n\n    go install github.com/shenwei356/rush@latest\n    \n#### Method 3: Compiling from source\n\n    # download Go from https://go.dev/dl\n    wget https://go.dev/dl/go1.17.12.linux-amd64.tar.gz\n    \n    tar -zxf go1.17.12.linux-amd64.tar.gz -C $HOME/\n    \n    # or \n    #   echo \"export PATH=$PATH:$HOME/go/bin\" >> ~/.bashrc\n    #   source ~/.bashrc\n    export PATH=$PATH:$HOME/go/bin\n    \n    git clone https://github.com/shenwei356/rush\n    cd rush\n    \n    go build\n    \n    # or statically-linked binary\n    CGO_ENABLED=0 go build -tags netgo -ldflags '-w -s'\n    \n    # or cross compile for other operating systems and architectures\n    CGO_ENABLED=0 GOOS=openbsd GOARCH=amd64 go build -tags netgo -ldflags '-w -s'\n\n\n## Usage\n\n```\nrush -- a cross-platform command-line tool for executing jobs in parallel\n\nVersion: 0.5.2\n\nAuthor: Wei Shen <shenwei356@gmail.com>\n\nHomepage: https://github.com/shenwei356/rush\n\nUsage:\n  rush [flags] [command] [args of command...]\n\nExamples:\n  1. simple run, quoting is not necessary\n      $ seq 1 10 | rush echo {}\n  2. keep order\n      $ seq 1 10 | rush 'echo {}' -k\n  3. timeout\n      $ seq 1 | rush 'sleep 2; echo {}' -t 1\n  4. retry\n      $ seq 1 | rush 'python script.py' -r 3\n  5. dirname & basename & remove suffix\n      $ echo dir/file_1.txt.gz | rush 'echo {/} {%} {^_1.txt.gz}'\n      dir file.txt.gz dir/file\n  6. basename without last or any extension\n      $ echo dir.d/file.txt.gz | rush 'echo {.} {:} {%.} {%:}'\n      dir.d/file.txt dir.d/file file.txt file\n  7. job ID, combine fields and other replacement strings\n      $ echo 12 file.txt dir/s_1.fq.gz | rush 'echo job {#}: {2} {2.} {3%:^_1}'\n      job 1: file.txt file s\n  8. capture submatch using regular expression\n      $ echo read_1.fq.gz | rush 'echo {@(.+)_\\d}'\n      read\n  9. custom field delimiter\n      $ echo a=b=c | rush 'echo {1} {2} {3}' -d =\n      a b c\n  10. custom record delimiter\n      $ echo a=b=c | rush -D \"=\" -k 'echo {}'\n      a\n      b\n      c\n      $ echo abc | rush -D \"\" -k 'echo {}'\n      a\n      b\n      c\n  11. assign value to variable, like \"awk -v\"\n      # seq 1 | rush 'echo Hello, {fname} {lname}!' -v fname=Wei,lname=Shen\n      $ seq 1 | rush 'echo Hello, {fname} {lname}!' -v fname=Wei -v lname=Shen\n      Hello, Wei Shen!\n  12. preset variable (Macro)\n      # equal to: echo read_1.fq.gz | rush 'echo {:^_1} {:^_1}_2.fq.gz'\n      $ echo read_1.fq.gz | rush -v p={:^_1} 'echo {p} {p}_2.fq.gz'\n      read read_2.fq.gz\n  13. save successful commands to continue in NEXT run\n      $ seq 1 3 | rush 'sleep {}; echo {}' -c -t 2\n      [INFO] ignore cmd #1: sleep 1; echo 1\n      [ERRO] run cmd #1: sleep 2; echo 2: time out\n      [ERRO] run cmd #2: sleep 3; echo 3: time out\n  14. escape special symbols\n      $ seq 1 | rush 'echo -e \"a\\tb\" | awk \"{print $1}\"' -q\n      a\n\n  More examples: https://github.com/shenwei356/rush\n\nFlags:\n  -v, --assign strings            assign the value val to the variable var (format: var=val, val also supports replacement strings)\n      --cleanup-time int          time to allow child processes to clean up between stop / kill signals (unit: seconds, 0 for no time) (default 3) (default 3)\n  -c, --continue                  continue jobs. NOTES: 1) successful commands are saved in file (given by flag -C/--succ-cmd-file); 2) if the file does not exist, rush saves data so we can continue jobs next time; 3) if the file exists, rush ignores jobs in it and update the file\n      --dry-run                   print command but not run\n  -q, --escape                    escape special symbols like $ which you can customize by flag -Q/--escape-symbols\n  -Q, --escape-symbols string     symbols to escape (default \"$#&`\")\n      --eta                       show ETA progress bar\n  -d, --field-delimiter string    field delimiter in records, support regular expression (default \"\\\\s+\")\n  -h, --help                      help for rush\n  -I  --immediate-output          print output immediately and interleaved, to aid debugging\n  -i, --infile strings            input data file, multi-values supported\n  -j, --jobs int                  run n jobs in parallel (default value depends on your device) (default 16)\n  -k, --keep-order                keep output in order of input\n      --no-kill-exes strings      exe names to exclude from kill signal, example: mspdbsrv.exe; or use all for all exes (default none)\n      --no-stop-exes strings      exe names to exclude from stop signal, example: mspdbsrv.exe; or use all for all exes (default none)\n  -n, --nrecords int              number of records sent to a command (default 1)\n  -o, --out-file string           out file (\"-\" for stdout) (default \"-\")\n      --print-retry-output        print output from retry commands (default true)\n      --propagate-exit-status     propagate child exit status up to the exit status of rush (default true)\n  -D, --record-delimiter string   record delimiter (default is \"\\n\") (default \"\\n\")\n  -J, --records-join-sep string   record separator for joining multi-records (default is \"\\n\") (default \"\\n\")\n  -r, --retries int               maximum retries (default 0)\n      --retry-interval int        retry interval (unit: second) (default 0)\n  -e, --stop-on-error             stop child processes on first error (not perfect, you may stop it by typing ctrl-c or closing terminal)\n  -C, --succ-cmd-file string      file for saving successful commands (default \"successful_cmds.rush\")\n  -t, --timeout int               timeout of a command (unit: seconds, 0 for no timeout) (default 0)\n  -T, --trim string               trim white space (\" \\t\\r\\n\") in input (available values: \"l\" for left, \"r\" for right, \"lr\", \"rl\", \"b\" for both side)\n      --verbose                   print verbose information\n  -V, --version                   print version information and check for update\n```\n\n\n## Examples\n\n1. Simple run, quoting is not necessary\n\n        # seq 1 3 | rush 'echo {}'\n        $ seq 1 3 | rush echo {}\n        3\n        1\n        2\n\n1. Read data from file (`-i`)\n\n        $ rush echo {} -i data1.txt -i data2.txt\n\n1. Keep output order (`-k`)\n\n        $ seq 1 3 | rush 'echo {}' -k\n        1\n        2\n        3\n\n1. Timeout (`-t`)\n\n        $ time seq 1 | rush 'sleep 2; echo {}' -t 1\n        [ERRO] run command #1: sleep 2; echo 1: time out\n\n        real    0m1.010s\n        user    0m0.005s\n        sys     0m0.007s\n\n1. Retry (`-r`)\n\n        $ seq 1 | rush 'python unexisted_script.py' -r 1\n        python: can't open file 'unexisted_script.py': [Errno 2] No such file or directory\n        [WARN] wait command: python unexisted_script.py: exit status 2\n        python: can't open file 'unexisted_script.py': [Errno 2] No such file or directory\n        [ERRO] wait command: python unexisted_script.py: exit status 2\n\n1. Dirname (`{/}`) and basename (`{%}`) and remove custom suffix (`{^suffix}`)\n\n        $ echo dir/file_1.txt.gz | rush 'echo {/} {%} {^_1.txt.gz}'\n        dir file_1.txt.gz dir/file\n\n1. Get basename, and remove last (`{.}`) or any (`{:}`) extension\n\n        $ echo dir.d/file.txt.gz | rush 'echo {.} {:} {%.} {%:}'\n        dir.d/file.txt dir.d/file file.txt file\n\n1. Job ID, combine fields index and other replacement strings\n\n        $ echo 12 file.txt dir/s_1.fq.gz | rush 'echo job {#}: {2} {2.} {3%:^_1}'\n        job 1: file.txt file s\n\n1. Capture submatch using regular expression (`{@regexp}`)\n\n        $ echo read_1.fq.gz | rush 'echo {@(.+)_\\d}'\n\n1. Custom field delimiter (`-d`)\n\n        $ echo a=b=c | rush 'echo {1} {2} {3}' -d =\n        a b c\n\n1. Send multi-lines to every command (`-n`)\n\n        $ seq 5 | rush -n 2 -k 'echo \"{}\"; echo'\n        1\n        2\n\n        3\n        4\n\n        5\n\n        # Multiple records are joined with separator `\"\\n\"` (`-J/--records-join-sep`)\n        $ seq 5 | rush -n 2 -k 'echo \"{}\"; echo' -J ' '\n        1 2\n\n        3 4\n\n        5\n\n        $ seq 5 | rush -n 2 -k -j 3 'echo {1}'\n        1\n        3\n        5\n\n1. Custom record delimiter (`-D`), note that empty records are not used.\n\n        $ echo a b c d | rush -D \" \" -k 'echo {}'\n        a\n        b\n        c\n        d\n\n        $ echo abcd | rush -D \"\" -k 'echo {}'\n        a\n        b\n        c\n        d\n\n        # FASTA format\n        $ echo -ne \">seq1\\nactg\\n>seq2\\nAAAA\\n>seq3\\nCCCC\"\n        >seq1\n        actg\n        >seq2\n        AAAA\n        >seq3\n        CCCC\n\n        $ echo -ne \">seq1\\nactg\\n>seq2\\nAAAA\\n>seq3\\nCCCC\" | rush -D \">\" 'echo FASTA record {#}: name: {1} sequence: {2}' -k -d \"\\n\"\n        FASTA record 1: name: seq1 sequence: actg\n        FASTA record 2: name: seq2 sequence: AAAA\n        FASTA record 3: name: seq3 sequence: CCCC\n\n1. Assign value to variable, like `awk -v` (`-v`)\n\n        $ seq 1  | rush 'echo Hello, {fname} {lname}!' -v fname=Wei -v lname=Shen\n        Hello, Wei Shen!\n\n        $ seq 1  | rush 'echo Hello, {fname} {lname}!' -v fname=Wei,lname=Shen\n        Hello, Wei Shen!\n\n        $ for var in a b; do \\\n        $   seq 1 3 | rush -k -v var=$var 'echo var: {var}, data: {}'; \\\n        $ done\n        var: a, data: 1\n        var: a, data: 2\n        var: a, data: 3\n        var: b, data: 1\n        var: b, data: 2\n        var: b, data: 3\n\n1. **Preset variable** (`-v`), avoid repeatedly writing verbose replacement strings\n\n        # naive way\n        $ echo read_1.fq.gz | rush 'echo {:^_1} {:^_1}_2.fq.gz'\n        read read_2.fq.gz\n\n        # macro + removing suffix\n        $ echo read_1.fq.gz | rush -v p='{:^_1}' 'echo {p} {p}_2.fq.gz'\n\n        # macro + regular expression\n        $ echo read_1.fq.gz | rush -v p='{@(.+?)_\\d}' 'echo {p} {p}_2.fq.gz'\n\n1. Escape special symbols\n\n        $ seq 1 | rush 'echo \"I have $100\"'\n        I have 00\n        $ seq 1 | rush 'echo \"I have $100\"' -q\n        I have $100\n        $ seq 1 | rush 'echo \"I have $100\"' -q --dry-run\n        echo \"I have \\$100\"\n\n        $ seq 1 | rush 'echo -e \"a\\tb\" | awk \"{print $1}\"'\n        a       b\n\n        $ seq 1 | rush 'echo -e \"a\\tb\" | awk \"{print $1}\"' -q\n        a\n\n1. Interrupt jobs by `Ctrl-C`, rush will stop unfinished commands and exit.\n\n        $ seq 1 20 | rush 'sleep 1; echo {}'\n        ^C[CRIT] received an interrupt, stopping unfinished commands...\n        [ERRO] wait cmd #7: sleep 1; echo 7: signal: interrupt\n        [ERRO] wait cmd #5: sleep 1; echo 5: signal: killed\n        [ERRO] wait cmd #6: sleep 1; echo 6: signal: killed\n        [ERRO] wait cmd #8: sleep 1; echo 8: signal: killed\n        [ERRO] wait cmd #9: sleep 1; echo 9: signal: killed\n        1\n        3\n        4\n        2\n\n1. Continue/resume jobs (`-c`). When some jobs failed (by execution failure, timeout,\n    or cancelling by user with `Ctrl + C`),\n    please switch flag `-c/--continue` on and run again,\n    so that `rush` can save successful commands and ignore them in **NEXT** run.\n\n        $ seq 1 3 | rush 'sleep {}; echo {}' -t 3 -c\n        1\n        2\n        [ERRO] run cmd #3: sleep 3; echo 3: time out\n\n        # successful commands:\n        $ cat successful_cmds.rush\n        sleep 1; echo 1__CMD__\n        sleep 2; echo 2__CMD__\n\n        # run again\n        $ seq 1 3 | rush 'sleep {}; echo {}' -t 3 -c\n        [INFO] ignore cmd #1: sleep 1; echo 1\n        [INFO] ignore cmd #2: sleep 2; echo 2\n        [ERRO] run cmd #1: sleep 3; echo 3: time out\n\n    Commands of multi-lines (***Not supported in GNU parallel***)\n\n        $ seq 1 3 | rush 'sleep {}; echo {}; \\\n        echo finish {}' -t 3 -c -C finished.rush\n        1\n        finish 1\n        2\n        finish 2\n        [ERRO] run cmd #3: sleep 3; echo 3; \\\n        echo finish 3: time out\n\n        $ cat finished.rush\n        sleep 1; echo 1; \\\n        echo finish 1__CMD__\n        sleep 2; echo 2; \\\n        echo finish 2__CMD__\n\n        # run again\n        $ seq 1 3 | rush 'sleep {}; echo {}; \\\n        echo finish {}' -t 3 -c -C finished.rush\n        [INFO] ignore cmd #1: sleep 1; echo 1; \\\n        echo finish 1\n        [INFO] ignore cmd #2: sleep 2; echo 2; \\\n        echo finish 2\n        [ERRO] run cmd #1: sleep 3; echo 3; \\\n        echo finish 3: time out\n\n    Commands are saved to file (`-C`) right after it finished, so we can view\n    the check finished jobs:\n\n        grep -c __CMD__ successful_cmds.rush\n\n1. A comprehensive example: downloading 1K+ pages given by three URL list files\n   using `phantomjs save_page.js` (some page contents are dynamicly generated by Javascript,\n   so `wget` does not work). Here I set max jobs number (`-j`) as `20`,\n   each job has a max running time (`-t`) of `60` seconds and `3` retry changes\n   (`-r`). Continue flag `-c` is also switched on, so we can continue unfinished\n   jobs. Luckily, it's accomplished in one run :smile:\n\n        $ for f in $(seq 2014 2016); do \\\n        $    /bin/rm -rf $f; mkdir -p $f; \\\n        $    cat $f.html.txt | rush -v d=$f -d = 'phantomjs save_page.js \"{}\" > {d}/{3}.html' -j 20 -t 60 -r 3 -c; \\\n        $ done\n\n1. A bioinformatics example: mapping with `bwa`, and processing result with `samtools`:\n\n        $ tree raw.cluster.clean.mapping\n        raw.cluster.clean.mapping\n        ├── M1\n        │   ├── M1_1.fq.gz -> ../../raw.cluster.clean/M1/M1_1.fq.gz\n        │   ├── M1_2.fq.gz -> ../../raw.cluster.clean/M1/M1_2.fq.gz\n        ...\n\n        $ ref=ref/xxx.fa\n        $ threads=25\n        $ ls -d raw.cluster.clean.mapping/* \\\n            | rush -v ref=$ref -v j=$threads \\\n                'bwa mem -t {j} -M -a {ref} {}/{%}_1.fq.gz {}/{%}_2.fq.gz > {}/{%}.sam; \\\n                samtools view -bS {}/{%}.sam > {}/{%}.bam; \\\n                samtools sort -T {}/{%}.tmp -@ {j} {}/{%}.bam -o {}/{%}.sorted.bam; \\\n                samtools index {}/{%}.sorted.bam; \\\n                samtools flagstat {}/{%}.sorted.bam > {}/{%}.sorted.bam.flagstat; \\\n                /bin/rm {}/{%}.bam {}/{%}.sam;' \\\n                -j 2 --verbose -c -C mapping.rush\n\n    Since `{}/{%}` appears many times, we can use preset variable (macro) to\n    simplify it:\n\n        $ ls -d raw.cluster.clean.mapping/* \\\n            | rush -v ref=$ref -v j=$threads -v p='{}/{%}' \\\n                'bwa mem -t {j} -M -a {ref} {p}_1.fq.gz {p}_2.fq.gz > {p}.sam; \\\n                samtools view -bS {p}.sam > {p}.bam; \\\n                samtools sort -T {p}.tmp -@ {j} {p}.bam -o {p}.sorted.bam; \\\n                samtools index {p}.sorted.bam; \\\n                samtools flagstat {p}.sorted.bam > {p}.sorted.bam.flagstat; \\\n                /bin/rm {p}.bam {p}.sam;' \\\n                -j 2 --verbose -c -C mapping.rush\n\n\n## Special Cases\n\n- Shell `grep` returns exit code `1` when no matches found.\n`rush` thinks it failed to run.\n Please use `grep foo bar || true` instead of `grep foo bar`.\n\n        $ seq 1 | rush 'echo abc | grep 123'\n        [ERRO] wait cmd #1: echo abc | grep 123: exit status 1\n        $ seq 1 | rush 'echo abc | grep 123 || true'\n\n## Contributors\n\n- [Wei Shen](https://github.com/shenwei356)\n- [Brian Burgin](https://github.com/bburgin)\n\n## Acknowledgements\n\nSpecially thank [@brentp](https://github.com/brentp)\nand his [gargs](https://github.com/brentp/gargs), from which `rush` borrows\nsome ideas.\n\nThank [@bburgin](https://github.com/bburgin) for his contribution on improvement\nof child process management.\n\n## Contact\n\n[Create an issue](https://github.com/shenwei356/rush/issues) to report bugs,\npropose new functions or ask for help.\n\n## License\n\n[MIT License](https://github.com/shenwei356/rush/blob/master/LICENSE)\n\n## Starchart\n\n<img src=\"https://starchart.cc/shenwei356/rush.svg\" alt=\"Stargazers over time\" style=\"max-width: 100%\">"
}
