{
  "name": "ffind",
  "full_name": "ffind",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Friendlier find",
  "license": "GPL-3.0",
  "homepage": "https://github.com/sjl/friendly-find",
  "versions": {
    "stable": "1.0.1",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/sjl/friendly-find/archive/v1.0.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "cf30e09365750a197f7e041ec9bbdd40daf1301e566cd0b1a423bf71582aad8d"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ffind/blobs/sha256:8fd5e399110b236d851503a23d805401c82799c3a43cd30a5ab03ee7adc3088c",
          "sha256": "8fd5e399110b236d851503a23d805401c82799c3a43cd30a5ab03ee7adc3088c"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [
    "sleuthkit"
  ],
  "conflicts_with_reasons": [
    "both install a `ffind` executable"
  ],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/ffind.rb",
  "ruby_source_checksum": {
    "sha256": "fa22a296b1bf7ada5678ffc263b473a38858841d3288b4a2f5fa42009097ecbf"
  },
  "date_added": "2012-10-20T08:51:12-07:00",
  "readme": "friendly-find\n=============\n\n`friendly-find` is the friendly file finder.\n\nIt's meant to be a more usable replacement for find(1).  If you've used [ack][],\nthen ffind is to find as ack is to grep.\n\nCurrently it's still in a prototype stage.  Most things work, with the following\nnotable exceptions:\n\n* Time filtering is unimplemented.\n* SVN ignores aren't parsed.\n* It's pretty slow (though pruning VCS data directories saves lots of time).\n\nFeedback is welcome, though remember that it's still a prototype, and is\nopinionated software.\n\n[ack]: http://betterthangrep.com/\n\n* Mercurial: <http://hg.stevelosh.com/friendly-find/>\n* Git: <http://github.com/sjl/friendly-find/>\n* Documentation: <http://github.com/sjl/friendly-find/#usage>\n* Issues: <http://github.com/sjl/friendly-find/issues/>\n* License: GPLv3 (see [notes](http://github.com/sjl/friendly-find/#license))\n\nInstallation\n------------\n\nIf you're on OS X you can use Homebrew:\n\n    brew install ffind\n\nOr you can install manually:\n\n1. Copy the `ffind` to your computer somehow.\n2. Make it executable.\n3. Get it into your path somehow.\n\nUsage\n-----\n\nThere's a half-assed man page generated from `help2man`, but `ffind --help` is\nprobably easier to read.\n\n### Command Line Program\n\n    Usage: ffind [options] PATTERN\n\n    Options:\n      -h, --help            show this help message and exit\n      --version             print the version and exit\n      -d DIR, --dir=DIR     root the search in DIR (default .)\n      -D N, --depth=N       search at most N directories deep (default 25)\n      -f, --follow          follow symlinked directories and search their contents\n      -F, --no-follow       don't follow symlinked directories (default)\n      -0, --print0          separate matches with a null byte in output\n      -l, --literal         force literal search, even if it looks like a regex\n      -v, --invert          invert match\n      -e, --entire          match PATTERN against the entire path string\n      -E, --non-entire      match PATTERN against only the filenames (default)\n      -p, --full-path       print the file's full path\n      -P, --relative-path   print the file's relative path (default)\n\n      Configuring Case Sensitivity:\n        -s, --case-sensitive\n                            case sensitive matching (default)\n        -i, --case-insensitive\n                            case insensitive matching\n        -S, --case-smart    smart case matching (sensitive if any uppercase chars\n                            are in the pattern, insensitive otherwise)\n\n      Configuring Ignoring:\n        -b, --binary        allow binary files (default)\n        -B, --no-binary     ignore binary files\n        -r, --restricted    restricted search (skip VCS directories, parse all\n                            ignore files) (default)\n        -q, --semi-restricted\n                            semi-restricted search (don't parse VCS ignore files,\n                            but still skip VCS directories and parse .ffignore)\n        -u, --unrestricted  unrestricted search (don't parse ignore files, but\n                            still skip VCS directories)\n        -a, --all           don't ignore anything (ALL files can match)\n        -I PATTERN, --ignore=PATTERN\n                            add a pattern to be ignored (can be given multiple\n                            times)\n\n      Size Filtering:\n        Sizes can be given as a number followed by a prefix.  Some examples:\n        1k, 5kb, 1.5gb, 2g, 1024b\n\n        --larger-than=SIZE  match files larger than SIZE (inclusive)\n        --smaller-than=SIZE\n                            match files smaller than SIZE (inclusive)\n\n      Type Filtering:\n        Possible types are a (all), f (files), d (dirs), r (real), s\n        (symlinked), e (real files), c (real dirs), x (symlinked files), y\n        (symlinked dirs). If multiple types are given they will be unioned\n        together:  --type 'es' would match real files and all symlinks.\n\n        -t TYPE(S), --type=TYPE(S)\n                            match only specific types of things (files, dirs, non-\n                            symlinks, symlinks)\n\n### .ffignore file format\n\nThe `.ffignore` file is a file containing lines with patterns to ignore, with\na few exceptions:\n\n* Blank lines and whitespace-only are skipped.  If you want to ignore files\n  whose names consist of only whitespace use a regex.  Or reconsider what got\n  you there in the first place.\n* Lines beginning with a `#` are comments and are skipped.  There can be\n  whitespace before the `#` as well.\n* Lines of the form `syntax: (literal|regex)` change the mode of the lines\n  following them, much like Mercurial's ignore file format.  The default is\n  regex mode.\n* All other lines are treated as patterns to ignore.\n\nAll patterns are unrooted, and search the full path from the directory you're\nsearching in.  Use a regex with `^` if you want to root them.\n\nFor example:\n\n    foo.*bar\n\nWill ignore:\n\n    ./foobar.txt\n    ./foohello/world/bar.txt\n\nLicense\n-------\n\nCopyright 2016 Steve Losh and contributors.\n\nLicensed under [version 3 of the GPL][gpl].\n\nRemember that you can use GPL'ed software through their command line interfaces\nwithout any license-related restrictions.  `ffind`'s command line interface is\nthe only stable one, so it's the only one you should ever be using anyway.  The\nlicense doesn't affect you unless you're:\n\n* Trying to copy the code and release a non-GPL'ed version of `ffind`.\n* Trying to use it as a Python module from other Python code (for your own\n  sanity I urge you to not do this) and release the result under a non-GPL\n  license.\n\n[gpl]: http://www.gnu.org/copyleft/gpl.html"
}
