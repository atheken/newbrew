{
  "name": "tfk8s",
  "full_name": "tfk8s",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Kubernetes YAML manifests to Terraform HCL converter",
  "license": "MIT",
  "homepage": "https://github.com/jrhouston/tfk8s",
  "versions": {
    "stable": "0.1.10",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/jrhouston/tfk8s/archive/v0.1.10.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "be2680e76311ac7dd814a1bb0dceb486e3511d8d68845421338f9fcf5a92d5f9"
    },
    "head": {
      "url": "https://github.com/jrhouston/tfk8s.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tfk8s/blobs/sha256:5feb499b0c5f97e06ab039c8e6c29b25760ef7403ca5d134524c7876e104b630",
          "sha256": "5feb499b0c5f97e06ab039c8e6c29b25760ef7403ca5d134524c7876e104b630"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tfk8s/blobs/sha256:ae64126f7d4aa6ab26ac854ee30eb7c7bf2ec5ed4e796d4d3d4e9c984c8e7e66",
          "sha256": "ae64126f7d4aa6ab26ac854ee30eb7c7bf2ec5ed4e796d4d3d4e9c984c8e7e66"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tfk8s/blobs/sha256:3d9655de7508722848160492f9db8fdbd1c8af5916beae34275bc8fa067ff645",
          "sha256": "3d9655de7508722848160492f9db8fdbd1c8af5916beae34275bc8fa067ff645"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tfk8s/blobs/sha256:fe55588c429a2f74bdcbf062b252b69d15462d3af30ad8694a6e903c07ce105d",
          "sha256": "fe55588c429a2f74bdcbf062b252b69d15462d3af30ad8694a6e903c07ce105d"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tfk8s/blobs/sha256:eb8f3df61a59e34291ea70c2fd93620b2bace987e18a50e15ca6b36e540d68af",
          "sha256": "eb8f3df61a59e34291ea70c2fd93620b2bace987e18a50e15ca6b36e540d68af"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tfk8s/blobs/sha256:3671bf1dfd597f92b38958f4a1836336de5110962d0222b5c829097121a41ec2",
          "sha256": "3671bf1dfd597f92b38958f4a1836336de5110962d0222b5c829097121a41ec2"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tfk8s/blobs/sha256:8abd3395c96d3cd264129a5811d98b07e010187b3c7bad9239a77d738c390e7c",
          "sha256": "8abd3395c96d3cd264129a5811d98b07e010187b3c7bad9239a77d738c390e7c"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/tfk8s.rb",
  "ruby_source_checksum": {
    "sha256": "9799e2b1506b36f2906c230aa2c78fbb408f1ec12030feaacba311e5542e23a1"
  },
  "date_added": "2021-10-08T17:16:57+00:00",
  "readme": "tfk8s [![Go Report Card](https://goreportcard.com/badge/github.com/jrhouston/tfk8s)](https://goreportcard.com/report/github.com/jrhouston/tfk8s) ![tests](https://github.com/jrhouston/tfk8s/actions/workflows/test.yaml/badge.svg)\n\n---\n\n![](https://media.giphy.com/media/g8GfH3i5F0hby/giphy.gif)\n\n`tfk8s` is a tool that makes it easier to work with the [Terraform Kubernetes Provider](https://github.com/hashicorp/terraform-provider-kubernetes).\n\nIf you want to copy examples from the Kubernetes documentation or migrate existing YAML manifests and use them with Terraform without having to convert YAML to HCL by hand, this tool is for you.\n\n- [Demo](#demo)\n- [Features](#features)\n- [Install](#install)\n- [Usage](#usage)\n- [Examples](#examples)\n  - [Create Terraform configuration from YAML files](#create-terraform-configuration-from-yaml-files)\n  - [Use with kubectl to output maps instead of YAML](#use-with-kubectl-to-output-maps-instead-of-yaml)\n  - [Convert a Helm chart to Terraform](#convert-a-helm-chart-to-terraform)\n  - [Convert a directory tree of manifests to Terraform](#convert-a-directory-tree-of-manifests-to-terraform)\n\n## Demo\n\n[<img src=\"https://asciinema.org/a/jSmyAg4Ar6EcwKCTCXN8iAJM2.svg\" width=\"250\">](https://asciinema.org/a/jSmyAg4Ar6EcwKCTCXN8iAJM2)\n\n## Features\n\n- Convert a YAML file containing multiple manifests\n- Strip out server side fields when piping `kubectl get $R -o yaml | tfk8s --strip`\n\n## Install\n\n```\ngo install github.com/jrhouston/tfk8s@latest\n```\n\nAlternatively, clone this repo and run:\n\n```\nmake install\n```\n\nIf Go's bin directory is not in your `PATH` you will need to add it:\n\n```\nexport PATH=$PATH:$(go env GOPATH)/bin\n```\n\nOr you can install via [brew](https://formulae.brew.sh/formula/tfk8s) for macOS/Linux:\n\n```\nbrew install tfk8s\n```\n\nOn macOS, you can also install via [MacPorts](https://www.macports.org):\n\n```\nsudo port install tfk8s\n```\n\n## Usage\n\n```\nUsage of tfk8s:\n  -f, --file string         Input file containing Kubernetes YAML manifests (default \"-\")\n  -M, --map-only            Output only an HCL map structure\n  -o, --output string       Output file to write Terraform config (default \"-\")\n  -p, --provider provider   Provider alias to populate the provider attribute\n  -s, --strip               Strip out server side fields - use if you are piping from kubectl get\n  -Q, --strip-key-quotes    Strip out quotes from HCL map keys unless they are required.\n  -V, --version             Show tool version\n```\n\n## Examples\n\n### Create Terraform configuration from YAML files\n\n```\ntfk8s -f input.yaml -o output.tf\n```\n\nor, using pipes:\n```\ncat input.yaml | tfk8s > output.tf\n```\n\n**input.yaml**:\n```yaml\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: test\ndata:\n  TEST: test\n```\n\n✨✨ magically becomes ✨✨\n\n**output.tf**:\n```hcl\nresource \"kubernetes_manifest\" \"configmap_test\" {\n  manifest = {\n    \"apiVersion\" = \"v1\"\n    \"data\" = {\n      \"TEST\" = \"test\"\n    }\n    \"kind\" = \"ConfigMap\"\n    \"metadata\" = {\n      \"name\" = \"test\"\n    }\n  }\n}\n```\n\n### Use with kubectl to output maps instead of YAML\n\n```\nkubectl get ns default -o yaml | tfk8s -M\n```\n```hcl\n{\n  \"apiVersion\" = \"v1\"\n  \"kind\" = \"Namespace\"\n  \"metadata\" = {\n    \"creationTimestamp\" = \"2020-05-02T15:01:32Z\"\n    \"name\" = \"default\"\n    \"resourceVersion\" = \"147\"\n    \"selfLink\" = \"/api/v1/namespaces/default\"\n    \"uid\" = \"6ac3424c-07a4-4a69-86ae-cc7a4ae72be3\"\n  }\n  \"spec\" = {\n    \"finalizers\" = [\n      \"kubernetes\",\n    ]\n  }\n  \"status\" = {\n    \"phase\" = \"Active\"\n  }\n}\n```\n\n### Convert a Helm chart to Terraform\n\nYou can use `helm template` to generate a manifest from the chart, then pipe it into tfk8s:\n\n```\nhelm template ./chart-path -f values.yaml | tfk8s\n```\n\n## Convert a directory tree of manifests to Terraform\n\nYou can use `tfk8s` in conjunction with `find` to convert an entire directory recursively:\n\n```bash\nfind dirname/ -name '*.yaml' -type f -exec sh -c 'tfk8s -f {} -o $(echo {} | sed \"s/\\.[^.]*$//\").tf' \\;\n```"
}
