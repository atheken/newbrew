{
  "name": "rav1e",
  "full_name": "rav1e",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Fastest and safest AV1 video encoder",
  "license": "BSD-2-Clause",
  "homepage": "https://github.com/xiph/rav1e",
  "versions": {
    "stable": "0.6.6",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/xiph/rav1e/archive/v0.6.6.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "723696e93acbe03666213fbc559044f3cae5b8b888b2ddae667402403cff51e5"
    },
    "head": {
      "url": "https://github.com/xiph/rav1e.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/rav1e/blobs/sha256:3a0e10c10070252c551cdb863000fdfd08b3f39f73f6834f8ba468245bfd7407",
          "sha256": "3a0e10c10070252c551cdb863000fdfd08b3f39f73f6834f8ba468245bfd7407"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/rav1e/blobs/sha256:68d4cfaeb084772d0a204f9ea0349d13a08045e0c9bc8a3b1d863c4013e67b17",
          "sha256": "68d4cfaeb084772d0a204f9ea0349d13a08045e0c9bc8a3b1d863c4013e67b17"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/rav1e/blobs/sha256:53745f5c67bf84dfa288eeb3f1e4fdd55a513c797cd6571c01470c32197482b6",
          "sha256": "53745f5c67bf84dfa288eeb3f1e4fdd55a513c797cd6571c01470c32197482b6"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/rav1e/blobs/sha256:67a6ce79473a844710bb6b3992cb3298da921c9689c3e09be2ad09177c5100db",
          "sha256": "67a6ce79473a844710bb6b3992cb3298da921c9689c3e09be2ad09177c5100db"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/rav1e/blobs/sha256:671e5164de0012dcf4e365a21fff14445116fe6832a78235bc7da0763fda94a6",
          "sha256": "671e5164de0012dcf4e365a21fff14445116fe6832a78235bc7da0763fda94a6"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/rav1e/blobs/sha256:726efa39a001b22ba36d9edf08e6251d19b4741bb24d6bd10e73f40688b96cd5",
          "sha256": "726efa39a001b22ba36d9edf08e6251d19b4741bb24d6bd10e73f40688b96cd5"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rav1e/blobs/sha256:8858d8c96535e94dfa75f15e858b24855034d714950df482d00760cc7fb8edad",
          "sha256": "8858d8c96535e94dfa75f15e858b24855034d714950df482d00760cc7fb8edad"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cargo-c",
    "rust",
    "nasm"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/rav1e.rb",
  "ruby_source_checksum": {
    "sha256": "9992c13d30b25cc220e1bf16f91f3d6d8d53e72fc78717976c3ed2da8cdd6cee"
  },
  "date_added": "2019-11-19T17:52:27-05:00",
  "readme": "# rav1e [![Actions Status][actions badge]][actions] [![CodeCov][codecov badge]][codecov]\n\nThe fastest and safest AV1 encoder.\n\n<details>\n<summary><b>Table of Content</b></summary>\n\n- [Overview](#overview)\n- [Features](#features)\n- [Documentation](#documentation)\n- [Releases](#releases)\n- [Building](#building)\n  - [Dependency: NASM](#dependency-nasm)\n  - [Release binary](#release-binary)\n  - [Unstable features](#unstable-features)\n  - [Target-specific builds](#target-specific-builds)\n  - [Building the C-API](#building-the-c-api)\n- [Usage](#usage)\n  - [Compressing video](#compressing-video)\n  - [Decompressing video](#decompressing-video)\n  - [Configuring](#configuring)\n    - [Features](#features-1)\n- [Contributing](#contributing)\n- [Getting in Touch](#getting-in-touch)\n</details>\n\n## Overview\nrav1e is an AV1 video encoder. It is designed to eventually cover all use cases, though in its current form it is most suitable for cases where libaom (the reference encoder) is too slow.\n\n## Features\n* Intra, inter, and switch frames\n* 64x64 superblocks\n* 4x4 to 64x64 RDO-selected square and rectangular blocks\n* DC, H, V, Paeth, smooth, and all directional prediction modes\n* DCT, (FLIP-)ADST and identity transforms (up to 64x64, 16x16 and 32x32 respectively)\n* 8-, 10- and 12-bit depth color\n* 4:2:0, 4:2:2 and 4:4:4 chroma sampling\n* 11 speed settings (0-10, exhaustive to near real-time)\n* Constant quantizer and target bitrate (single- and multi-pass) encoding modes\n* Still picture mode\n\n## Documentation\nFind the documentation in [`doc/`](doc/README.md)\n\n## Releases\nFor the foreseeable future, a weekly pre-release of rav1e will be [published](https://github.com/xiph/rav1e/releases) every Tuesday.\n\n## Building\n\n### Toolchain: Rust\n\nrav1e currently requires Rust 1.65.0 or later to build.\n\n### Dependency: NASM\nSome `x86_64`-specific optimizations require [NASM](https://nasm.us/) `2.14.02` or newer and are enabled by default.\n`strip` will be used if available to remove the local symbols from the asm objects.\n\nThe CI is testing against `nasm 2.15.05`, so bugs for other versions might happen. If you find one please open an issue!\n\n<details>\n<summary>\nInstall nasm\n</summary>\n\n**ubuntu 20.04** (`nasm 2.14.02`)\n```sh\nsudo apt install nasm\n```\n**ubuntu 18.04** (`nasm 2.14.02`)\n```sh\nsudo apt install nasm-mozilla\n# link nasm into $PATH\nsudo ln /usr/lib/nasm-mozilla/bin/nasm /usr/local/bin/\n```\n**fedora 31, 32** (`nasm 2.14.02`)\n```sh\nsudo dnf install nasm\n```\n**windows** (`nasm 2.15.05`) <br/>\nHave a [NASM binary](https://www.nasm.us/pub/nasm/releasebuilds/) in your system PATH.\n```sh\n$NASM_VERSION=\"2.15.05\" # or newer\n$LINK=\"https://www.nasm.us/pub/nasm/releasebuilds/$NASM_VERSION/win64\"\ncurl --ssl-no-revoke -LO \"$LINK/nasm-$NASM_VERSION-win64.zip\"\n7z e -y \"nasm-$NASM_VERSION-win64.zip\" -o \"C:\\nasm\"\n# set path for the current sessions\nset PATH=\"%PATH%;C:\\nasm\"\n```\n**macOS** (`nasm 2.15.05`)\n```sh\nbrew install nasm\n```\n\n</details>\n\n### Release binary\nTo build release binary in `target/release/rav1e` run:\n\n```sh\ncargo build --release\n```\n\n### Unstable features\nExperimental API and Features can be enabled by using the `unstable` feature.\n\n```sh\ncargo build --features <feature>,unstable\n```\n\n#### Current unstable features\n- Channel API:\n```sh\ncargo build --features channel-api,unstable\n```\n\n\nThose Features and API are bound to change and evolve, do not rely on them staying the same over releases.\n\n### Target-specific builds\nThe rust compiler can produce a binary that is about 11%-13% faster if it can use `avx2`, `bmi1`, `bmi2`, `fma`, `lzcnt` and `popcnt` in the general code, you may allow it by issuing:\n\n```sh\nRUSTFLAGS=\"-C target-cpu=native\" cargo build --release\n# or\nRUSTFLAGS=\"-C target-cpu=x86-64-v3\" cargo build --release\n```\n\nThe resulting binary will not work on cpus that do not sport the same set of extensions enabled.\n\n> **NOTE** : You may use `rustc --print target-cpus` to check if the cpu is supported, if not `-C target-cpu=native` would be a no-op.\n\n### Building the C-API\n**rav1e** provides a C-compatible set of library, header and pkg-config file.\n\nTo build and install it you can use [cargo-c](https://crates.io/crates/cargo-c):\n\n```sh\ncargo install cargo-c\ncargo cinstall --release\n```\n\nPlease refer to the cargo-c [installation](https://github.com/lu-zero/cargo-c#installation) instructions.\n\n## Usage\n### Compressing video\nInput videos must be in [y4m format](https://wiki.multimedia.cx/index.php/YUV4MPEG2). The monochrome color format is not supported.\n\n```sh\ncargo run --release --bin rav1e -- input.y4m -o output.ivf\n```\n\n_(Find a y4m-file for testing at [`tests/small_input.y4m`](tests/small_input.y4m) or at http://ultravideo.cs.tut.fi/#testsequences)_\n\n### Decompressing video\nEncoder output should be compatible with any AV1 decoder compliant with the v1.0.0 specification. You can decode using [dav1d](https://code.videolan.org/videolan/dav1d), which is now packaged [![in over 40 repositories](https://repology.org/badge/tiny-repos/dav1d.svg)](https://repology.org/project/dav1d/versions).\n\n```sh\ndav1d -i output.ivf -o output.y4m\n```\n\n### Configuring\nrav1e has several optional features that can be enabled by passing `--features` to cargo. Passing `--all-features` is discouraged.\n\n#### Features\nFind a full list in feature-table in [`Cargo.toml`](Cargo.toml)\n\n* `asm` - enabled by default. When enabled, assembly is built for the platforms supporting it.\n  * `x86_64`: Requires [`nasm`](#dependency-nasm).\n  * `aarch64`\n    * Requires `gas`\n    * Alternative: Use `clang` assembler by setting `CC=clang`\n\n**NOTE**: `SSE2` is always enabled on `x86_64`, `neon` is always enabled for aarch64, you may set the environment variable `RAV1E_CPU_TARGET` to `rust` to disable all the assembly-optimized routines at the runtime.\n\n## Contributing\nPlease read our guide to [contributing to rav1e](CONTRIBUTING.md).\n\n## Getting in Touch\nCome chat with us on the IRC channel #daala on [Libera.Chat](https://libera.chat/)! You can also use a [web client](https://web.libera.chat/?channel=#daala) to join with a web browser.\n\n\n<!-- Links -->\n[actions]: https://github.com/xiph/rav1e/actions\n[codecov]: https://codecov.io/gh/xiph/rav1e\n\n<!-- Badges -->\n[actions badge]: https://github.com/xiph/rav1e/workflows/rav1e/badge.svg\n[codecov badge]: https://codecov.io/gh/xiph/rav1e/branch/master/graph/badge.svg"
}
