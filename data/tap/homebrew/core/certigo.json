{
  "name": "certigo",
  "full_name": "certigo",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Utility to examine and validate certificates in a variety of formats",
  "license": "Apache-2.0",
  "homepage": "https://github.com/square/certigo",
  "versions": {
    "stable": "1.16.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/square/certigo/archive/v1.16.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "a6ce89964ca2fbe7d45d2e2019b06a21984f133c4f1f110eee12a67dd60c4145"
    },
    "head": {
      "url": "https://github.com/square/certigo.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/certigo/blobs/sha256:7030162d50a9cc7a151ef7e5bb30c6ec6de9717c5ed71c56fc207548334142a0",
          "sha256": "7030162d50a9cc7a151ef7e5bb30c6ec6de9717c5ed71c56fc207548334142a0"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/certigo/blobs/sha256:a663a86882876335dfd364332494270957a0b6778975aa0f9e8ba2fd83f8aa52",
          "sha256": "a663a86882876335dfd364332494270957a0b6778975aa0f9e8ba2fd83f8aa52"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/certigo/blobs/sha256:8c632fa6622d2cd6f5899c3f1682f6646803e9d33efb56b4bc39417d09b55a72",
          "sha256": "8c632fa6622d2cd6f5899c3f1682f6646803e9d33efb56b4bc39417d09b55a72"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/certigo/blobs/sha256:30402885e7dd0a6a968f324ad7da21682b494977c18f8d0ee8ae10fe3b8c471d",
          "sha256": "30402885e7dd0a6a968f324ad7da21682b494977c18f8d0ee8ae10fe3b8c471d"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/certigo/blobs/sha256:f923b26c0f5b4115434a770994e0c791d192a482121840bf82323ae14b1627d5",
          "sha256": "f923b26c0f5b4115434a770994e0c791d192a482121840bf82323ae14b1627d5"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/certigo/blobs/sha256:a69ecd639ae8ae13f627bfb182a1fc29467b6ca58b917863d5d01d09731f98ff",
          "sha256": "a69ecd639ae8ae13f627bfb182a1fc29467b6ca58b917863d5d01d09731f98ff"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/certigo/blobs/sha256:e3f412c147bc0a3b42167d3b0c349b4d6bd175bb4a89fe4603cb68400630c471",
          "sha256": "e3f412c147bc0a3b42167d3b0c349b4d6bd175bb4a89fe4603cb68400630c471"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/certigo/blobs/sha256:10522c5a7fcd8524a1a0ce6755c2ffba1a6e76e63249f77d24326400c9ddc243",
          "sha256": "10522c5a7fcd8524a1a0ce6755c2ffba1a6e76e63249f77d24326400c9ddc243"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/certigo.rb",
  "ruby_source_checksum": {
    "sha256": "045f34b3f49ec7da81d4a0e63349224110fe460f553fe414081e373e2768f8b0"
  },
  "date_added": "2016-07-01T04:18:12+01:00",
  "readme": "# certigo\n\n[![license](http://img.shields.io/badge/license-apache_2.0-blue.svg?style=flat)](https://raw.githubusercontent.com/square/certigo/master/LICENSE)\n[![release](https://img.shields.io/github/release/square/certigo.svg?style=flat)](https://github.com/square/certigo/releases)\n[![build](https://travis-ci.org/square/certigo.svg?branch=master)](https://travis-ci.org/square/certigo)\n[![report](https://goreportcard.com/badge/github.com/square/certigo)](https://goreportcard.com/report/github.com/square/certigo)\n\nCertigo is a utility to examine and validate certificates to help with debugging SSL/TLS issues.\n\n### Features\n\n**Supports all common file formats**: Certigo can read and dump certificates in various formats. It can automatically detect and read from X.509 (DER/PEM), JCEKS, PKCS7 and PKCS12 files. Certificates can be dumped to a human-readable format, a set of PEM blocks, or a JSON object for use in scripting.\n\n**Validation and linting**: Not sure if your generated certificate is valid? Certigo can connect to remote servers to display and validate their certificate chains. It can also point out common errors on certificates, such as using an older X.509 format, signatures with outdated hashes, or keys that are too small.\n\n**Supports STARTTLS Protocols**: Trying to debug SSL/TLS connections on a database or mail server? Certigo supports establishing connections via StartTLS protocols for MySQL, PostgreSQL, SMTP, LDAP, IMAP, and FTP, making it possible to debug connection issues or scan for expired certificates more easily.\n\n**Scripting support**: All commands in certigo have support for optional JSON output, which can be used in shell scripts to analyze or filter output. Combine certigo with [jq](https://stedolan.github.io/jq) to find all certificates in a bundle that are signed with SHA1-RSA, or filter for CA certificates, or whatever you need!\n\n### Install\n\nTo install certigo, simply use:\n\n    go install github.com/square/certigo@latest\n\nOn macOS you can also use homebrew to install:\n\n    brew install certigo\n\nNote that certigo requires Go 1.12 or later to build.\n\n### Develop\n\nWe use [Go modules][1] for managing vendored dependencies. If you would like to contribute, see the [CONTRIBUTING.md](CONTRIBUTING.md) file for extra information.\n\n[1]: https://github.com/golang/go/wiki/Modules\n\n### Usage\n\nCertigo has commands to dump certificates and keystores from a file, to connect and fetch certificates from a remote server, and to verify the validity of certificates in a file. All commands can produce JSON output with the `--json` flag which can be used for scripting. See below for a full list of options.\n\n```\nusage: certigo [<flags>] <command> [<args> ...]\n\nA command line certificate examination utility.\n\nFlags:\n      --help     Show context-sensitive help (also try --help-long and --help-man).\n  -v, --verbose  Print verbose\n      --version  Show application version.\n\nCommands:\n  help [<command>...]\n    Show help.\n\n\n  dump [<flags>] [<file>...]\n    Display information about a certificate from a file/stdin.\n\n    -f, --format=FORMAT      Format of given input (PEM, DER, JCEKS, PKCS12; heuristic if missing).\n    -p, --password=PASSWORD  Password for PKCS12/JCEKS key stores (reads from TTY if missing).\n    -m, --pem                Write output as PEM blocks instead of human-readable format.\n    -j, --json               Write output as machine-readable JSON format.\n    -l, --first              Only display the first certificate. This flag can be paired with --json or --pem.\n\n  connect [<flags>] [<server:port>]\n    Connect to a server and print its certificate(s).\n\n    -n, --name=NAME           Override the server name used for Server Name Indication (SNI).\n        --ca=CA               Path to CA bundle (system default if unspecified).\n        --cert=CERT           Client certificate chain for connecting to server (PEM).\n        --key=KEY             Private key for client certificate, if not in same file (PEM).\n    -t, --start-tls=PROTOCOL  Enable StartTLS protocol ('ldap', 'mysql', 'postgres', 'smtp' or 'ftp').\n        --identity=certigo    With --start-tls, sets the DB user or SMTP EHLO name.\n        --proxy               Optional URI for HTTP(s) CONNECT proxy to dial connections with.\n        --timeout=5s          Timeout for connecting to remote server (can be '5m', '1s', etc).\n    -m, --pem                 Write output as PEM blocks instead of human-readable format.\n    -j, --json                Write output as machine-readable JSON format.\n    -l, --first               Only display the first certificate. This flag can be paired with --json or --pem.\n        --verify              Verify certificate chain.\n        --expected-name       Name expected in the server TLS certificate. Defaults to name from SNI or, if SNI not overridden, the hostname to connect to.\n\n  verify --name=NAME [<flags>] [<file>]\n    Verify a certificate chain from file/stdin against a name.\n\n    -f, --format=FORMAT      Format of given input (PEM, DER, JCEKS, PKCS12; heuristic if missing).\n    -p, --password=PASSWORD  Password for PKCS12/JCEKS key stores (reads from TTY if missing).\n    -n, --name=NAME          Server name to verify certificate against.\n        --ca=CA              Path to CA bundle (system default if unspecified).\n    -j, --json               Write output as machine-readable JSON format.\n```\n\n### Examples\n\nDisplay information about a certificate (also supports `--pem` and `--json` output):\n\n```\n$ certigo dump --verbose squareup-2016.crt\n** CERTIFICATE 1 **\nSerial: 260680855742043049380997676879525498489\nValid: 2016-07-15 20:15 UTC to 2017-07-31 20:45 UTC\nSignature: SHA256-RSA\nSubject Info:\n\tCountry: US\n\tProvince: California\n\tLocality: San Francisco\n\tEV Incorporation Country: US\n\tEV Incorporation Province: Delaware\n\tOrganization: Square, Inc.\n\tBusiness Category: Private Organization\n\tEV Incorporation Registration Number: 4699855\n\tCommonName: www.squareup.com\nIssuer Info:\n\tCountry: US\n\tOrganization: Entrust, Inc.\n\tOrganizational Unit: See www.entrust.net/legal-terms\n\tOrganizational Unit: (c) 2014 Entrust, Inc. - for authorized use only\n\tCommonName: Entrust Certification Authority - L1M\nSubject Key ID: D4:17:14:6F:0B:C5:20:A1:D6:FE:21:7E:DC:9E:F8:57:9C:ED:AE:6A\nAuthority Key ID: C3:F7:D0:B5:2A:30:AD:AF:0D:91:21:70:39:54:DD:BC:89:70:C7:3A\nBasic Constraints: CA:false\nKey Usage:\n\tDigital Signature\n\tKey Encipherment\nExtended Key Usage:\n\tServer Auth\n\tClient Auth\nAlternate DNS Names:\n\twww.squareup.com, squareup.com, account.squareup.com, mkt.com,\n\twww.mkt.com, market.squareup.com, gosq.com, www.gosq.com, gosq.co,\n\twww.gosq.co\n```\n\nDisplay & validate certificates from a remote server (also supports `--start-tls`):\n\n```\n$ certigo connect --verbose squareup.com:443\n** TLS Connection **\nVersion: TLS 1.2\nCipher Suite: ECDHE_RSA key exchange, AES_128_GCM_SHA256 cipher\n\n** CERTIFICATE 1 **\nSerial: 260680855742043049380997676879525498489\nValid: 2016-07-15 20:15 UTC to 2017-07-31 20:45 UTC\nSignature: SHA256-RSA\nSubject Info:\n\tCountry: US\n\tProvince: California\n\tLocality: San Francisco\n\tEV Incorporation Country: US\n\tEV Incorporation Province: Delaware\n\tOrganization: Square, Inc.\n\tBusiness Category: Private Organization\n\tEV Incorporation Registration Number: 4699855\n\tCommonName: www.squareup.com\nIssuer Info:\n\tCountry: US\n\tOrganization: Entrust, Inc.\n\tOrganizational Unit: See www.entrust.net/legal-terms\n\tOrganizational Unit: (c) 2014 Entrust, Inc. - for authorized use only\n\tCommonName: Entrust Certification Authority - L1M\nSubject Key ID: D4:17:14:6F:0B:C5:20:A1:D6:FE:21:7E:DC:9E:F8:57:9C:ED:AE:6A\nAuthority Key ID: C3:F7:D0:B5:2A:30:AD:AF:0D:91:21:70:39:54:DD:BC:89:70:C7:3A\nBasic Constraints: CA:false\nKey Usage:\n\tDigital Signature\n\tKey Encipherment\nExtended Key Usage:\n\tServer Auth\n\tClient Auth\nAlternate DNS Names:\n\twww.squareup.com, squareup.com, account.squareup.com, mkt.com,\n\twww.mkt.com, market.squareup.com, gosq.com, www.gosq.com, gosq.co,\n\twww.gosq.co\n\n** CERTIFICATE 2 **\nSerial: 30215777750102225331854468774\nValid: 2014-12-15 15:25 UTC to 2030-10-15 15:55 UTC\nSignature: SHA256-RSA\nSubject Info:\n\tCountry: US\n\tOrganization: Entrust, Inc.\n\tOrganizational Unit: See www.entrust.net/legal-terms\n\tOrganizational Unit: (c) 2014 Entrust, Inc. - for authorized use only\n\tCommonName: Entrust Certification Authority - L1M\nIssuer Info:\n\tCountry: US\n\tOrganization: Entrust, Inc.\n\tOrganizational Unit: See www.entrust.net/legal-terms\n\tOrganizational Unit: (c) 2009 Entrust, Inc. - for authorized use only\n\tCommonName: Entrust Root Certification Authority - G2\nSubject Key ID: C3:F7:D0:B5:2A:30:AD:AF:0D:91:21:70:39:54:DD:BC:89:70:C7:3A\nAuthority Key ID: 6A:72:26:7A:D0:1E:EF:7D:E7:3B:69:51:D4:6C:8D:9F:90:12:66:AB\nBasic Constraints: CA:true, pathlen:0\nKey Usage:\n\tCert Sign\n\tCRL Sign\nExtended Key Usage:\n\tClient Auth\n\tServer Auth\n\n** CERTIFICATE 3 **\nSerial: 1372799044\nValid: 2014-09-22 17:14 UTC to 2024-09-23 01:31 UTC\nSignature: SHA256-RSA\nSubject Info:\n\tCountry: US\n\tOrganization: Entrust, Inc.\n\tOrganizational Unit: See www.entrust.net/legal-terms\n\tOrganizational Unit: (c) 2009 Entrust, Inc. - for authorized use only\n\tCommonName: Entrust Root Certification Authority - G2\nIssuer Info:\n\tCountry: US\n\tOrganization: Entrust, Inc.\n\tOrganizational Unit: www.entrust.net/CPS is incorporated by reference\n\tOrganizational Unit: (c) 2006 Entrust, Inc.\n\tCommonName: Entrust Root Certification Authority\nSubject Key ID: 6A:72:26:7A:D0:1E:EF:7D:E7:3B:69:51:D4:6C:8D:9F:90:12:66:AB\nAuthority Key ID: 68:90:E4:67:A4:A6:53:80:C7:86:66:A4:F1:F7:4B:43:FB:84:BD:6D\nBasic Constraints: CA:true, pathlen:1\nKey Usage:\n\tCert Sign\n\tCRL Sign\n\nFound 2 valid certificate chain(s):\n[0] www.squareup.com\n\t=> Entrust Certification Authority - L1M\n\t=> Entrust Root Certification Authority - G2 [self-signed]\n[1] www.squareup.com\n\t=> Entrust Certification Authority - L1M\n\t=> Entrust Root Certification Authority - G2\n\t=> Entrust Root Certification Authority [self-signed] [SHA1-RSA]\n```\n\nAdvanced examples on how to combine JSON output with [jq](https://stedolan.github.io/jq/) filtering:\n\n```\n# Find certificates that have linter warnings\ncertigo dump --json $INPUT | jq '.certificates[] | select(.lints != [])'\n\n# Find certificates that are signed with SHA1-RSA\ncertigo dump --json $INPUT | jq '.certificates[] | select(.signature_algorithm == \"SHA1-RSA\")'\n\n# List all Common Names of certificates that are expired\ncertigo dump --json $INPUT | jq -r '.certificates[] | select(.not_after < now) | .subject.common_name'\n\n# Look for MySQL servers with invalid certificates\nfor SERVER in $(cat servers); do\n  certigo connect -t mysql -j $SERVER:3306 | jq -e '.verify_result.error != null' >/dev/null\n  if [ $? -ne 0 ]; then\n    echo \"Invalid certificates on $SERVER\"\n  fi\ndone\n\n# Find (redundant) self-signed certificates in intermediate chain on remote host\ncertigo connect --json $SERVER:$PORT | jq -e '.certificates[1:][] | select(.is_self_signed) | .subject.common_name'\n\n# Test if server is requesting that clients send certificates for authentication\ncertigo connect --json $SERVER:$PORT | jq -e '.certificate_request_info != null'\n```"
}
