{
  "name": "qp",
  "full_name": "qp",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Command-line (ND)JSON querying",
  "license": "MIT",
  "homepage": "https://github.com/f5io/qp",
  "versions": {
    "stable": "1.0.1",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/f5io/qp/archive/1.0.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "6ef12fd4494262899ee12cc1ac0361ec0dd7b67e29c6ac6899d1df21efc7642b"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/qp/blobs/sha256:3eec317220476506f3fd8acacf1ea1adc09184aa349f8ba040f3d32f45a6f330",
          "sha256": "3eec317220476506f3fd8acacf1ea1adc09184aa349f8ba040f3d32f45a6f330"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/qp/blobs/sha256:458188f1637fb0dc6f865c73b9dfb5e6146070ad0193507df7979236afc60294",
          "sha256": "458188f1637fb0dc6f865c73b9dfb5e6146070ad0193507df7979236afc60294"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/qp/blobs/sha256:2c583d1f819ffba8adcc8139efe3366ad4570f3efc7c94fb25742e4da602202e",
          "sha256": "2c583d1f819ffba8adcc8139efe3366ad4570f3efc7c94fb25742e4da602202e"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/qp/blobs/sha256:9c5b1e3ed8e0e27e8f0b83a80037426153b1e4b9674ffa4b522027d97d55345a",
          "sha256": "9c5b1e3ed8e0e27e8f0b83a80037426153b1e4b9674ffa4b522027d97d55345a"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/qp/blobs/sha256:ff9da9b5b7578cb0a87aeb8dff3aeaec5521952dc0764d1623f7e4241e0e1044",
          "sha256": "ff9da9b5b7578cb0a87aeb8dff3aeaec5521952dc0764d1623f7e4241e0e1044"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/qp/blobs/sha256:83085c1f8cbeaf59a69f00f779a878ceb78b7aeaaf16278010d5d968c9d94742",
          "sha256": "83085c1f8cbeaf59a69f00f779a878ceb78b7aeaaf16278010d5d968c9d94742"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/qp/blobs/sha256:a65499deed12110ed5a21f3bbd657acdaaf1452dea48877caac93bda55759370",
          "sha256": "a65499deed12110ed5a21f3bbd657acdaaf1452dea48877caac93bda55759370"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/qp/blobs/sha256:f119afd6bacbac5af055c398a2dfb5c4f62c8f113bcb9e12dab825800fd8e744",
          "sha256": "f119afd6bacbac5af055c398a2dfb5c4f62c8f113bcb9e12dab825800fd8e744"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/qp/blobs/sha256:d9c595a53f82ddd9f086fac02a5f8da34e65d9b0e7564fce02148304704457ed",
          "sha256": "d9c595a53f82ddd9f086fac02a5f8da34e65d9b0e7564fce02148304704457ed"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/qp/blobs/sha256:c9a688fd124da927fb627c02b2a043c34d48727785a5be844dd1853a65ba8814",
          "sha256": "c9a688fd124da927fb627c02b2a043c34d48727785a5be844dd1853a65ba8814"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "quickjs"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/qp.rb",
  "ruby_source_checksum": {
    "sha256": "fce66a86256640aa179bfb73684594038532cf712814973a4ed387e6afd37be0"
  },
  "date_added": "2020-03-07T23:14:43-05:00",
  "readme": "<img alt=\"qp: query-pipe\" src=\"./assets/logo.svg\" width=\"150\"/>\n\n### query-pipe: command-line (ND)JSON querying\n\nA tool for filtering and transforming JSON from the command-line.\nAutomatically interprets Newline Delimited JSON (NDJSON) from `stdin`,\nincluding pretty-printed NDJSON, and can optionally query top-level array input.\n\n- a familiar and approachable SQL-like query language\n- `~600kb` binary, with _zero_ runtime dependencies (compiled with [QuickJS](https://bellard.org/quickjs/))\n\n<p align=\"center\">\n  <img alt=\"query-pipe demo\" src=\"./assets/demo.gif\" width=\"800\"/>\n</p>\n\n# Install\n\n    $ curl -o- https://raw.githubusercontent.com/paybase/qp/master/install.sh | sh\n\n# Usage\n\n    $ qp [...flags] [<query>]\n\nWithout any arguments qp is a straight stdin to stdout pipe for valid JSON.\n\n- `-p`, `--pretty` - output pretty JSON\n- `-a`, `--no-array` - disable processing of top-level arrays\n- `-b`, `--buffer` - disable forced flushing of stdout for every JSON\n- `-s`, `--strict` - exit on JSON parse error with exit code 1\n- `-x` - silence JSON parse errors (stderr)\n\n- `-h`, `--help` - display help message\n- `-v`, `--version` - print version\n- `--syntax` - display the syntax guide\n\n# Syntax\n\nThe query language is heavily inspired by SQL, offering a\nfamiliar and approachable syntax. Behind the scenes it uses\na recursive descent parser to adhere to logical operator precedence.\n\n    [ select [ * | field_ident | call_expr | (*)_lit | as_expression ] ]\n      where [ bin_expr | logical_expr ] [ and | or ] [ ... ]\n      [ limit num_lit ]\n      [ offset num_lit ]\n\nIn the examples below, it is assumed that qp is receiving a stream of input\nstructured in the following way:\n\n    {\n      \"id\": <id>,\n      \"name\": { \"first\": \"<name>\" },\n      \"age\": <age>,\n      \"dob\": \"<date>\",\n      \"data\": [ \"random\", ... ]\n    }\n\n## Transforming\n\nBy default qp assumes `select *`, acting as an identity function over the JSON input.\nUsing a select clause you are able to transform the output of your filter.\n\n- `select id where id >= 3` - [`{\"id\":3}`, `{\"id\":4}`, ...] \n- `select id as * where id >= 3` - [`3`, `4`, ...]\n- `select age, name.first as firstName where age > 42` - [`{\"age\":43, \"firstName\":\"<name>\"}`, ...]\n- `select data.0 as *` - [`\"random\"` ...]\n- `select age as number` - [`{\"number\":<age>}`, ...]\n- `select date(dob) as birthYear` - [`{\"birthYear\":\"0000-00-00T00:00:00.000Z\"}`, ...]\n- `select 1` - [`1`, `1`, ...]\n- `select true` - [`true`, `true`, ...]\n- `select null` - [`null`, `null`, ...]\n- `select (1,2,3)` - [`[1,2,3]`, ...]\n- `select date()` - [`\"2020-01-11T00:00:00.000Z\"`, ...]\n- `select 1 as one` - [`{\"one\":1}`, `{\"one\":1}`, ...]\n\n## Filtering\n\nBy default qp assumes `where 1 = 1`, producing JSON output for every JSON input it receives.\nLogical operator precedence is adhered to so the following are __not__ equivalent:\n\n- `where (age > 30 and age <= 40) or name.first = \"Orion\"`\n- `where age > 30 and (age <= 40 or name.first = \"Orion\")`\n\n### Equality & Order Comparison Operators:\n\nEither side of an equality operator can be a field identifier, literal or call expression.\n\n- `=`, `is` - strict JS equality (equivalent to `===`)\n- `!=`, `<>`, `is not` - strict JS inequality (equivalent to `!==`)\n- `%=` - non-strict JS equality (equivalent to `==`)\n- `%!=` - non-strict JS inequality (equivialent to `!=`)\n- `>`, `>=`, `<=`, `<` - ordering comparison JS\n\n### Other Operators:\n\n- `like`, `not like` - case-sensitive JS regex\n- `ilike`, `not ilike` - case-insensitive JS regex\n- `in`, `not in` - lookup in JS array\n\nFor example:\n\n- `select name where name.first like _am%` - [`{\"name\":{\"first\":\"Sam\"}}`, `{\"name\":{\"first\":\"Cameron\"}}`, ...]\n- `select id as * where id like 1` - [`1`, `10`, `11`, `12` ...]\n- `select name.first as n where name.first ilike \"^[aeiou]\"` - [`{\"n\":\"Abed\"}`, `{\"n\":\"Izzy\"}`, ...]\n- `select * where id in (1,2,3)` - [`{\"id\":1, ...rest}`, `{\"id\":2, ...rest}`, `{\"id\":3, ...rest}`, ...]\n- `select id as * where \"tails\" in data` - [`0`, `5`, ...]\n\n## Call Expressions\n\nqp provides a couple of utility functions that can be used in your query.\n\nThe `date()` function is synonymous with the javascript `Date()` constructor.\n\n    select date() as now\n    where date(dob) >= date(\"1984-01-01\")\n\nFor more complex object construction you can use `from_entries((k, v)...)`. It takes\na variadic number of tuples of (key, value) and can be used recursively.\n\n    select from_entries(\n      (\"now\", date()),\n      (\"nested\", from_entries((name.first, age))),\n      (\"copy\", *)\n    )\n\nWhich would output:\n\n    {\n      \"now\":\"2020-01-11T00:00:00.000Z\",\n      \"nested\": { \"Sam\": 40 },\n      \"copy\": { ...copy of input }\n    }\n\nThere is potential for new call expressions to be added to qp, or, with a slightly larger\nbinary size, facilitate custom call expressions at runtime.\n\n# Building\n\nqp is built with [QuickJS](https://bellard.org/quickjs/).\n\nTo install QuickJS and the @paybase/csp dependency, run:\n\n    $ sh build/vendor.sh\n\nYou can provide `QJS_VERSION` and `CSP_VERSION` environment variables to the command above.\nBy default the script will install `QuickJS@2019-12-21` and `@paybase/csp@1.0.8`.\n\nIt may take a while to compile QuickJS, however when that process is complete, you can\nbuild qp by running:\n\n    $ sh build/compile.sh\n\nRun the tests with:\n\n    $ sh test/test.sh"
}
