{
  "name": "arping",
  "full_name": "arping",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Utility to check whether MAC addresses are already taken on a LAN",
  "license": "GPL-2.0-or-later",
  "homepage": "https://github.com/ThomasHabets/arping",
  "versions": {
    "stable": "2.23",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/ThomasHabets/arping/archive/arping-2.23.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "8050295e3a44c710e21cfa55c91c37419fcbb74d1ab4d41add330b806ab45069"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/arping/blobs/sha256:e1afbf2e85e8fe00aeceac30da249581bf3760f75c94b3d85d4dcaca8a1165f5",
          "sha256": "e1afbf2e85e8fe00aeceac30da249581bf3760f75c94b3d85d4dcaca8a1165f5"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/arping/blobs/sha256:fd5666804b182d41ff81d9dace40a84a90a6d964e346b019a702d21ebc4e3eb4",
          "sha256": "fd5666804b182d41ff81d9dace40a84a90a6d964e346b019a702d21ebc4e3eb4"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/arping/blobs/sha256:9e85bad9dbdb1cd42ad5772a4ba6e9274a8b863a529c57eb13a0f0c85f18734e",
          "sha256": "9e85bad9dbdb1cd42ad5772a4ba6e9274a8b863a529c57eb13a0f0c85f18734e"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/arping/blobs/sha256:3bc44751a54aa7e6481ab063b7d56ceef030fb01f11f0dca2b1fbea3d44a8e61",
          "sha256": "3bc44751a54aa7e6481ab063b7d56ceef030fb01f11f0dca2b1fbea3d44a8e61"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/arping/blobs/sha256:1421c4f2e75bc60834a8df83d377076fc2fec4eb884a189b27bf46a82291ecc7",
          "sha256": "1421c4f2e75bc60834a8df83d377076fc2fec4eb884a189b27bf46a82291ecc7"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/arping/blobs/sha256:45e37b7b779f4ac14d511696ebbbe68f2617b07f9a7fb51816cbc9f950716a3e",
          "sha256": "45e37b7b779f4ac14d511696ebbbe68f2617b07f9a7fb51816cbc9f950716a3e"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/arping/blobs/sha256:56ddc66b9a7e87bc906194fced1a8da37ea66312074ecc65c7d11a21d50dbc2c",
          "sha256": "56ddc66b9a7e87bc906194fced1a8da37ea66312074ecc65c7d11a21d50dbc2c"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/arping/blobs/sha256:bbd86ef76bf89b8c9df4290963fad58f255fce9433670b3b579058961f1cc413",
          "sha256": "bbd86ef76bf89b8c9df4290963fad58f255fce9433670b3b579058961f1cc413"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "autoconf",
    "automake"
  ],
  "dependencies": [
    "libnet"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "libpcap"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "2706c66e8def3eeba4d9bf1adf66221c8ad70701",
  "ruby_source_path": "Formula/arping.rb",
  "ruby_source_checksum": {
    "sha256": "a4ac0e0684276592fdf413be1d9146f857bd98ac74fb34d2987299fb2111bda5"
  },
  "date_added": "2010-05-12T08:28:04-07:00",
  "readme": "arping/README\n\n ARP Ping\n\n    By Thomas Habets <thomas@habets.se>\n\n http://www.habets.pp.se/synscan/\n http://github.com/ThomasHabets/arping\n git clone https://github.com/ThomasHabets/arping.git\n\nIntroduction\n------------\nArping is a util to find out if a specific IP address on the LAN is 'taken'\nand what MAC address owns it. Sure, you *could* just use 'ping' to find out if\nit's taken and even if the computer blocks ping (and everything else) you still\nget an entry in your ARP cache. But what if you aren't on a routable net? Or\nthe host blocks ping (all ICMP even)? Then you're screwed. Or you use arping.\n\nWhy it's not stupid\n-------------------\nSay you have a block of N real IANA-assigned IP-addresses. You want to debug\nthe net and you don't know which IP addresses are taken. You can't ping anyone\nbefore you take the IP, and you can't pick an IP before you know which are\nalready taken. Catch 22. But with arping you can 'ping' the IP and if you get\nno response, the IP is available.\n\nExample uses\n------------\nIf some box is dumping non-IP (like IPX) garbage and you don't know which box\nit is, you can ping by MAC to get the IP and fix the problem.\n\nIf you are on someone else's net and want to 'borrow' a real IP address instead\nof using one of those 10.x.x.x-addresses the DHCP hands out you probably want\nto know which ones are taken, or people will get mad (a friend of mine got a\ncall on his cellphone about 15 seconds after he accidentally 'stole' an IP,\noops).\n\nCompiling / installing\n----------------------\nSee INSTALL file.\n\nI try to test arping on these platforms before any release:\n* Latest Debian stable x86 and amd64\n* Linux (Debian or Ubuntu) on arm\n* Latest OpenBSD x86 or amd64\n\nSystems that it should still work on, but I don't personally regularly test:\n* Debian Alpha\n* FreeBSD\n* IRIX 6.5 mips (last test 2009-09-27)\n* MacOS X\n* NetBSD\n* OpenBSD sparc64 (last test: 2009-10-02)\n* Solaris\n\nMailing list\n------------\nCheck out http://www.habets.pp.se/synscan/mailinglists.php for information\non how to subscribe to help- and announce-lists.\n\nHow it does it\n--------------\nSee 'Technical' at the bottom of this file.\n\nFAQ\n---\nQ: Where is Arping 1.x? I use libnet 1.0.x so I need that!\n\nA: Arping 1 has finally been removed from the Arping 2.x tarball in 2.09.\n   Arping 1.x currently only lives in the Arping packages 2.08 and lower. If\n   features are to be added or bugs fixed it will show up again as a separate\n   package forked from Arping 2.08.\n\n   For now just get arping-2.08.tar.gz and use that.\n---\nQ: Where's the Windows version? A compiled .exe would be nice.\n\nA: I don't have a windows box, so the .exe I'm providing was NOT compiled\n   by me. If something is strange about it tell me, but there won't be much\n   I can do about it.\n   That being said:\nhttp://www.habets.pp.se/synscan/files/arping-for-windows-not-compiled-by-me.exe\n---\nQ: After compiling arping without any problem, i test it first with\n   localhost... but it doesn't respond. Isn't that strange?\n\nA: Not really, as you can see by typing 'ifconfig' the lo (local) interface\n   does not have a MAC address. It's not a physical device! MAC addresses are\n   there to differentiate computers on a shared medium (the aether, or ether)\n   and since packets to localhost does not go over any wire there is no need\n   to identify which box is talking to which. There is only one.\n---\nQ: Arping can't ping anything!\n\nA: Check which interface is active with -v. If it's the wrong one, use -i\n   to set it right.\n---\nQ: Arping finds some hosts, but not others. why?   BTW, I have several NICs.\n\nA: You have to choose interface with the -i switch if the default is wrong for\n   you.\n---\nQ: I tried to ping my own MAC address, but it doesn't work.\n\nA: A sane OS will think it's suspicious if you send packets to yourself over\n   the wire and will ignore them.\n\n   And why would you want to lookup the IP or MAC of yourself? ifconfig\n   can tell you that.\n---\nQ: I can't ping any/some MAC address on my LAN.\n\nA: Arping when pinging a MAC relies on the host to answer a broadcast ping\n   (icmp echo request) properly (IIRC: not the windows way). If you want a\n   host to pop up on MAC ping, you have to config it to respond to broadcast\n   pings.\n   (for linux, make sure /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts is 0)\nA: -T <IP/host> allows you to restrict the arping to a limited subnet, which\n   may or may not work for you. For example if the box 00:01:02:03:04:05 is on\n   192.168.0.0/24 then the broadcast probably is 192.168.0.255, so try:\n   # arping -T 192.168.0.255 00:01:02:03:04:05\n---\nQ: ./configure says I need libnet and/or libpcap\n\nA: Arping depends on libnet 1.1 or newer, and libpcap. Get libnet from\n   https://github.com/libnet/libnet and libpcap from http://www.tcpdump.org.\n   Or more likely they were both included in your Linux distribution.\n\n   The original libnet site\n   was http://packetfactory.openwall.net/projects/libnet/, but is not updated.\n---\nQ: I get bus error on my non-x86 box\n\nA: Damn, I thought I fixed those. Tell me how you got it and I'll try to fix\n   it. Attaching config.log always helps.\n---\nQ: I get \"libnet_get_ipaddr(): no error\" when I run arping with IP (src or dst)\n   255.255.255.255.\n\nA: Use the -b/-B switches. Libnet sucks (ha ha only serious) and returns -1 for\n   error == int32 encoded 255.255.255.255.\n---\nQ: I used to be able to use -S 255.255.255.255, now it fails. What's going on?\nQ: Why can't I arping 255.255.255.255?\n\nA: Argh! Why would you want to? Anyway, this one is due to libnets resolving,\n   and my unwillingness to reimplement it (in a portable manner, ugh).\n\n   -S 255.255.255.255 can be replaced with -b, and pinging broadcast (why you\n   would do that eludes me) -B.\n\n   To be extra perverted, try:\n   # ./arping -b -B\n   (yes, I added -b and -B just so that version 1.0 should be complete)\n---\nQ: 1.01 is out, didn't you just say 1.0 was supposed to be the last one?\n\nA: Shut up.\n---\nQ: The roundtrip times are off, sometimes by milliseconds!\n\nA: I know.\n   Short answer:\n     'ping' does the same thing. (ping from iputils-ss010824 anyway)\n\n   Long answer:\n     I can't (portably anyway) do anything other than queue a packet\n     to the network. That means I don't know exactly when it arrived. Also,\n     I can't tell when a packet arrives on the wire, only when arping gets\n     it from the kernel. Just make sure neither the network (whole segment\n     if you are hubbed, just your NIC if you are switched) nor your box is\n     loaded when you care about timing, and/or run arping with higher\n     priority.\n\n     # nice -n -15 arping foobar\n\n     But if you find way to get more exact timing portably (or just for one\n     OS really), let me know.\n---\nQ: Is it OK to make arping suid root?\n\nA: Be my guest, but if care about security *at all* you will have to restrict\n   execution of arping to trusted users. I could remove \"dangerous\" features\n   from the code when it's running suid, but I honestly don't want to. This is\n   a network debugging tool, which generates low-level network packets that\n   ordinary users have absolutely no business generating.\n\n   If you are honestly debugging the network then I don't see why you aren't\n   root already.\n\n   That being said, on Linux you can add the CAP_NET_RAW capability to arping\n   limiting the damage if arping were to be compromised:\n     sudo setcap cap_net_raw+ep  /usr/local/sbin/arping\n   This requires a libnet 1.1.5 or higher, which does not explicitly check for\n   uid 0.\n\n   For older versions of Libnet:\n     http://github.com/ThomasHabets/libnet/commit/aaa383b5c816107082508b7646929a9479b81645\n---\nQ: What's this -A switch all about, I don't understand it.\n\nA: Normally arping packets are sent out to some kind of broadcast (MAC or IPv4\n   broadcast) and hosts reply with source address == their address.\n\n   If -A is given, only packets coming in with a *source* address equal\n   to the *destination* address in the query is accepted.\n\n   If you don't understand, don't worry. You won't need it. But for an\n   example use, see the arping-scan-net.sh script.\n---\n\nLicense\n-------\nIt's GPLv2, see the LICENSE file.\n\nTechnical\n---------\nYes, I've finally bothered to write how it works.\ntcpdumps were taken with \"tcpdump -vven 'arp or icmp'\".\n\nThe source box is 192.168.0.2/0:10:5a:3e:c5:b4 and the target box is\n192.168.0.1/0:60:93:34:91:99.\n\nFor pinging IP addresses:\n When a host wants to send an IP packet to another host, it sends out an ARP\n packet asking what MAC the destination IP address has, a so-called 'who-has'\n packet. This is then answered by another ARP packet, the 'is-at' packet.\n\n 18:16:07.179699 0:10:5a:3e:c5:b4 ff:ff:ff:ff:ff:ff 0806 42:\n                 arp who-has 192.168.0.1 tell 192.168.0.2\n\n This is the packet generated by arping.\n An Ethernet frame from my 3com card to the broadcast address carrying an arp\n packet asking what MAC 192.168.0.1 has (who-has).\n\n 18:16:07.180221 0:60:93:34:91:99 0:10:5a:3e:c5:b4 0806 60:\n                 arp reply 192.168.0.1 is-at 0:60:93:34:91:99\n\n The answer, that 192.168.0.1 has MAC 0:60:93:34:91:99 (is-at).\n\nFor pinging MAC addresses:\n A broadcast ping (255.255.255.255, or any address supplied with -T, see below)\n is sent out on the Ethernet, but in an Ethernet frame addressed to the target\n MAC only.\n\n 18:20:09.627321 0:10:5a:3e:c5:b4 0:60:93:34:91:99 0800 42:\n                 192.168.0.2 > 255.255.255.255: icmp: echo request\n                 (ttl 48, id 17767, len 28)\n\n This is the packet generated by arping.\n Ethernet frame from my 3com NIC to the destination MAC, carrying a broadcast\n ping.\n\n 18:20:09.628432 0:60:93:34:91:99 0:10:5a:3e:c5:b4 0800 60:\n                 192.168.0.1 > 192.168.0.2: icmp: echo reply\n                 (ttl 255, id 7593, len 28)\n\n The answer, including the source address of the target host. Note that this\n is not how every OS responds to a broadcast ping (if at all). Some answer with\n a source address equal to the broadcast address, and others don't' answer at\n all.\n This is why pinging a raw MAC doesn't always work, and you may need to play\n with -T to get it to answer correctly (or at all). You can always brute-force\n if you can't even find a broadcast that the box will answer correctly to.\n -------\n for d in $(seq 0 255); do\n     sudo arping -q -c 1 -T $a.$b.$c.$d 0:60:93:34:91:99\n     if [ $? = 0 ]; then\n       echo \"Got answer with address: 192.168.0.$d\"\n     fi\n done\n --------\n Note that this script will take 1 second per IP since that is how long arping\n waits, so scanning a C-class net will take 256 seconds. If you have a bigger\n net, then write a program that will run several arpings at the same time to\n go through more in less time, or check out arping-scan-net.sh, which is a\n more capable script for scanning, but you need to edit it since the address\n range it searches is hard-coded.\n I may add this to arping some day, but don't hold your breath.\n\n-----------------------------------------------------------------------\nSend questions/suggestions/patches/rants/money/envy to thomas@habets.se"
}
