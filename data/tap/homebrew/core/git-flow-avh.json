{
  "name": "git-flow-avh",
  "full_name": "git-flow-avh",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "AVH edition of git-flow",
  "license": "BSD-2-Clause",
  "homepage": "https://github.com/petervanderdoes/gitflow-avh",
  "versions": {
    "stable": "1.12.3",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/petervanderdoes/gitflow-avh/archive/1.12.3.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "54e9fd81aa1aa8215c865503dc6377da205653c784d6c97baad3dafd20728e06"
    },
    "head": {
      "url": "https://github.com/petervanderdoes/gitflow-avh.git",
      "branch": "develop"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-flow-avh/blobs/sha256:f559b035f16d9f56bb1750bfd441785df1f094a3838b20c1c51503cc75c2f319",
          "sha256": "f559b035f16d9f56bb1750bfd441785df1f094a3838b20c1c51503cc75c2f319"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-flow-avh/blobs/sha256:f559b035f16d9f56bb1750bfd441785df1f094a3838b20c1c51503cc75c2f319",
          "sha256": "f559b035f16d9f56bb1750bfd441785df1f094a3838b20c1c51503cc75c2f319"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-flow-avh/blobs/sha256:f559b035f16d9f56bb1750bfd441785df1f094a3838b20c1c51503cc75c2f319",
          "sha256": "f559b035f16d9f56bb1750bfd441785df1f094a3838b20c1c51503cc75c2f319"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-flow-avh/blobs/sha256:fe31ea33fecc7177f22fa64b15430512ea2ae728536d3c3d21b9121d97e311e6",
          "sha256": "fe31ea33fecc7177f22fa64b15430512ea2ae728536d3c3d21b9121d97e311e6"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-flow-avh/blobs/sha256:fe31ea33fecc7177f22fa64b15430512ea2ae728536d3c3d21b9121d97e311e6",
          "sha256": "fe31ea33fecc7177f22fa64b15430512ea2ae728536d3c3d21b9121d97e311e6"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-flow-avh/blobs/sha256:fe31ea33fecc7177f22fa64b15430512ea2ae728536d3c3d21b9121d97e311e6",
          "sha256": "fe31ea33fecc7177f22fa64b15430512ea2ae728536d3c3d21b9121d97e311e6"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-flow-avh/blobs/sha256:fe31ea33fecc7177f22fa64b15430512ea2ae728536d3c3d21b9121d97e311e6",
          "sha256": "fe31ea33fecc7177f22fa64b15430512ea2ae728536d3c3d21b9121d97e311e6"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-flow-avh/blobs/sha256:f559b035f16d9f56bb1750bfd441785df1f094a3838b20c1c51503cc75c2f319",
          "sha256": "f559b035f16d9f56bb1750bfd441785df1f094a3838b20c1c51503cc75c2f319"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "gnu-getopt"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [
    "git-flow"
  ],
  "conflicts_with_reasons": [
    "both install `git-flow` binaries and completions"
  ],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/git-flow-avh.rb",
  "ruby_source_checksum": {
    "sha256": "0a77d12ffb96616dc94b28c35c0b4501871b403724441c52f835249842922074"
  },
  "date_added": "2013-01-26T13:29:00-08:00",
  "readme": "# git-flow (AVH Edition)\n\nA collection of Git extensions to provide high-level repository operations\nfor Vincent Driessen's [branching model](http://nvie.com/git-model \"original\nblog post\"). This fork adds functionality not added to the original branch.\n\n\n## Getting started\n\nFor the best introduction to get started with `git flow`, please read Jeff\nKreeftmeijer's blog post:\n\n[http://jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow/](http://jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow/)\n\nOr have a look at one of these screen casts:\n\n* [How to use a scalable Git branching model called git-flow](http://buildamodule.com/video/change-management-and-version-control-deploying-releases-features-and-fixes-with-git-how-to-use-a-scalable-git-branching-model-called-gitflow) (by Build a Module)\n* [A short introduction to git-flow](http://vimeo.com/16018419) (by Mark Derricutt)\n* [On the path with git-flow](https://vimeo.com/codesherpas/on-the-path-gitflow) (by Dave Bock)\n\nA quick cheatsheet was made by Daniel Kummer:\n\n[http://danielkummer.github.io/git-flow-cheatsheet/](http://danielkummer.github.io/git-flow-cheatsheet/)\n\n## Installing git-flow\n\nSee the Wiki for up-to-date [Installation Instructions](https://github.com/petervanderdoes/gitflow-avh/wiki/Installation).\n\n\n## Integration with your shell\n\nFor those who use the [Bash](http://www.gnu.org/software/bash/) or [ZSH](http://www.zsh.org)\nshell, you can use my [fork of git-flow-completion](https://github.com/petervanderdoes/git-flow-completion)\nwhich includes several additions for git-flow (AVH Edition), or you can use the\noriginal [git-flow-completion](http://github.com/bobthecow/git-flow-completion)\nproject by [bobthecow](http://github.com/bobthecow). Both offer tab-completion\nfor git-flow subcommands and branch names with my fork including tab-completion\nfor the commands not found in the original git-flow.\n\n\n## FAQ\n\n* See the [FAQ](http://github.com/petervanderdoes/gitflow-avh/wiki/FAQ) section\nof the project Wiki.\n* Version Numbering Scheme.  \nStarting with version 1.0, the project uses the following scheme:\n\\<MAJOR\\>.\\<MINOR\\>.\\<REVISION\\>\\\n* AVH is the acronym of \"A VirtualHome\"\n\n## Please help out\n\nThis project is under constant development. Feedback and suggestions are very\nwelcome and I encourage you to use the [Issues\nlist](http://github.com/petervanderdoes/gitflow-avh/issues) on Github to provide that\nfeedback.\n\nFeel free to fork this repository and to commit your additions. For a list of\nall contributors, please see the [AUTHORS](AUTHORS) file.\n\nAny questions, tips, or general discussion can be posted to the Google group:\n[http://groups.google.com/group/gitflow-users](http://groups.google.com/group/gitflow-users)\nThis is the original group set up to support the nvie branch, but I am monitoring\nthe list as well for any questions related to my version.\nWhen you do post a question on the list please indicate which version you are,\nusing the complete version number.\n\n## Contributing\n\nFork the repository.  Then, run:\n\n```shell\ngit clone -b master git@github.com:<username>/gitflow-avh.git\ncd gitflow-avh\n```\n\nThe `-b master` switch has to be added since the fork operation automatically\nclones the `develop` branch of the official gitflow repository and cloning it\nresults in a local repository with just a `develop` branch.\n\nIf you do not have gitflow installed yet install it by running `make && make install`.\n\nAfter that initialize the local gitflow repository with gitflow itself:\n\n```shell\ngit flow init -d\ngit flow feature start <your feature>\n```\n\nThen, do work and commit your changes.\n\n```shell\ngit flow feature publish <your feature>\n```\n\nWhen done, open a pull request to your feature branch.\n\n## License terms\n\ngit-flow is published under the FreeBSD License, see the\n[LICENSE](LICENSE) file. Although the FreeBSD License does not require you to\nshare any modifications you make to the source code, you are very much\nencouraged and invited to contribute back your modifications to the community,\npreferably in a Github fork, of course.\n\n\n## git flow usage\n\n### Initialization\n\nTo initialize a new repo with the basic branch structure, use:\n\n    git flow init [-d]\n\nThis will then interactively prompt you with some questions on which branches\nyou would like to use as development and production branches, and how you\nwould like your prefixes be named. You may simply press Return on any of\nthose questions to accept the (sane) default suggestions.\n\nThe ``-d`` flag will accept all defaults.\n\n![Screencast git flow init](http://i.imgur.com/lFQbY5V.gif)\n\n### Creating feature/release/hotfix/support branches\n\n* To list/start/finish/delete feature branches, use:\n\n```shell\ngit flow feature\ngit flow feature start <name> [<base>]\ngit flow feature finish <name>\ngit flow feature delete <name>\n```\n\n  For feature branches, the `<base>` arg must be a branch, when omitted it defaults to the develop branch.\n\n* To push/pull a feature branch to the remote repository, use:\n\n```shell\ngit flow feature publish <name>\ngit flow feature track <name>\n```\n\n* To list/start/finish/delete release branches, use:\n\n```shell\ngit flow release\ngit flow release start <release> [<base>]\ngit flow release finish <release>\ngit flow release delete <release>\n```\n\n  For release branches, the `<base>` arg must be a branch, when omitted it defaults to the develop branch.\n\n* To list/start/finish/delete hotfix branches, use:\n\n```shell\ngit flow hotfix\ngit flow hotfix start <release> [<base>]\ngit flow hotfix finish <release>\ngit flow hotfix delete <release>\n```\n\n  For hotfix branches, the `<base>` arg must be a branch, when omitted it defaults to the production branch.\n\n* To list/start support branches, use:\n\n```shell\ngit flow support\ngit flow support start <release> <base>\n```\n\n  For support branches, the `<base>` arg must be a branch, when omitted it defaults to the production branch.\n\n### Share features with others\n\nYou can easily publish a feature you are working on. The reason can be to allow other programmers to work on it or to access it from another machine. The publish/track feature of gitflow simplify the creation of a remote branch and its tracking.\n\nWhen you want to publish a feature just use:\n```shell\ngit flow feature publish <name>\n```\n\nor, if you already are into the `feature/<name>` branch, just issue:\n```shell\ngit flow feature publish\n```\n\nNow if you execute `git branch -avv` you will see that your branch `feature/<name>` tracks `[origin/feature/<name>]`. To track the same remote branch in another clone of the same repository use:\n```shell\ngit flow feature track <name>\n```\n\nThis will create a local feature `feature/<name>` that tracks the same remote branch as the original one, that is `origin/feature/<name>`.\n\nWhen one developer (depending on your work flow) finishes working on the feature he or she can issue `git flow feature finish <name>` and this will automatically delete the remote branch. All other developers shall then run:\n```shell\n    git flow feature delete <name>\n```\n\nto get rid of the local feature that tracks a remote branch that no more exist.\n\n### Share hotfixes with others\n\nYou can publish an hotfix you are working on. The reason can be to allow other programmers to work on it or validate it or to access it from another machine.\n\nWhen you want to publish an hotfix just use (as you did for features):\n```shell\ngit flow hotfix publish <name>\n```\n\nor, if you already are into the `hotfix/<name>` branch, just issue:\n```shell\ngit flow hotfix publish\n```\n\nOther developers can now update their repositories and checkout the hotfix:\n```shell\ngit pull\ngit checkout hotfix/<name>\n```\nand eventually finish it:\n```shell\ngit flow hotfix finish\n```\n\n\n### Using Hooks and Filters\n\nFor a wide variety of commands hooks or filters can be called before and after\nthe command.  \nThe files should be placed in .git/hooks  \nIn the directory hooks you can find examples of all the hooks available.\n\n## Showing your appreciation\n\nOf course, the best way to show your appreciation for the git-flow tool itself\nremains contributing to the community.  If you'd like to show your appreciation\nin another way, however, consider donating through PayPal:\n\n[![PayPal][2]][1]\n\n[1]: https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=S85FXJ9EBHAF2&lc=US&item_name=gitflow&item_number=gitflow&no_note=0&cn=Add%20special%20instructions%20to%20the%20seller&no_shipping=1&rm=1&return=https%3a%2f%2fgithub%2ecom%2fpetervanderdoes%2fgitflow&cancel_return=https%3a%2f%2fgithub%2ecom%2fpetervanderdoes%2fgitflow&currency_code=USD&bn=PP%2dDonationsBF%3abtn_donate_SM%2egif%3aNonHosted\n\n[2]: https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif"
}
