{
  "name": "cfn-flip",
  "full_name": "cfn-flip",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Convert AWS CloudFormation templates between JSON and YAML formats",
  "license": "Apache-2.0",
  "homepage": "https://github.com/awslabs/aws-cfn-template-flip",
  "versions": {
    "stable": "1.3.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://files.pythonhosted.org/packages/ca/75/8eba0bb52a6c58e347bc4c839b249d9f42380de93ed12a14eba4355387b4/cfn_flip-1.3.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "003e02a089c35e1230ffd0e1bcfbbc4b12cc7d2deb2fcc6c4228ac9819307362"
    }
  },
  "revision": 1,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 2,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cfn-flip/blobs/sha256:74bf24bbe2143370918782c493b21b39abc6257e0ebd307e42ebd15fe8511824",
          "sha256": "74bf24bbe2143370918782c493b21b39abc6257e0ebd307e42ebd15fe8511824"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cfn-flip/blobs/sha256:74bf24bbe2143370918782c493b21b39abc6257e0ebd307e42ebd15fe8511824",
          "sha256": "74bf24bbe2143370918782c493b21b39abc6257e0ebd307e42ebd15fe8511824"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cfn-flip/blobs/sha256:74bf24bbe2143370918782c493b21b39abc6257e0ebd307e42ebd15fe8511824",
          "sha256": "74bf24bbe2143370918782c493b21b39abc6257e0ebd307e42ebd15fe8511824"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cfn-flip/blobs/sha256:703b9ce40aa1b8cab19e85ce08e228d949d13af32512af0984af022ca9e0c93c",
          "sha256": "703b9ce40aa1b8cab19e85ce08e228d949d13af32512af0984af022ca9e0c93c"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cfn-flip/blobs/sha256:703b9ce40aa1b8cab19e85ce08e228d949d13af32512af0984af022ca9e0c93c",
          "sha256": "703b9ce40aa1b8cab19e85ce08e228d949d13af32512af0984af022ca9e0c93c"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cfn-flip/blobs/sha256:703b9ce40aa1b8cab19e85ce08e228d949d13af32512af0984af022ca9e0c93c",
          "sha256": "703b9ce40aa1b8cab19e85ce08e228d949d13af32512af0984af022ca9e0c93c"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cfn-flip/blobs/sha256:703b9ce40aa1b8cab19e85ce08e228d949d13af32512af0984af022ca9e0c93c",
          "sha256": "703b9ce40aa1b8cab19e85ce08e228d949d13af32512af0984af022ca9e0c93c"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cfn-flip/blobs/sha256:362d11490de8c297b78c382109f617f09beb4f8c38f40204923744844a1e1704",
          "sha256": "362d11490de8c297b78c382109f617f09beb4f8c38f40204923744844a1e1704"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "python@3.11",
    "pyyaml",
    "six"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/cfn-flip.rb",
  "ruby_source_checksum": {
    "sha256": "71a64f3d4fc65176ddf155a6a7f73d463937ca5d44947426581b90afb1262aaa"
  },
  "date_added": "2020-11-03T14:50:09+00:00",
  "readme": "**NOTICE:** For CLI usage, AWS CloudFormation Template Flip is now *deprecated*.\n\nYou should use [rain](https://github.com/aws-cloudformation/rain) instead. `rain fmt` can convert CloudFormation templates between JSON and YAML.\n\nSee [the rain fmt documentation](https://aws-cloudformation.github.io/rain/rain_fmt.html) for details.\n\nThis deprecation notice does not affect the API in this package which may continue to be used.\n\n---\n\n[![Build Status](https://github.com/awslabs/aws-cfn-template-flip/actions/workflows/test.yml/badge.svg)](https://github.com/awslabs/aws-cfn-template-flip/actions/workflows/test.yml)\n[![PyPI version](https://badge.fury.io/py/cfn-flip.svg)](https://badge.fury.io/py/cfn-flip)\n[![Codecov Test Coverage](https://codecov.io/gh/awslabs/aws-cfn-template-flip/branch/master/graphs/badge.svg?style=flat)](https://codecov.io/gh/awslabs/aws-cfn-template-flip)\n\n# AWS CloudFormation Template Flip\n\n## About\n\nAWS CloudFormation Template Flip is a tool that converts [AWS CloudFormation](https://aws.amazon.com/cloudformation/) templates between [JSON](http://json.org/) and [YAML](http://yaml.org) formats, making use of the YAML format's short function syntax where possible.\n\nThe term \"Flip\" is inspired by the well-known Unix command-line tool [flip](https://ccrma.stanford.edu/~craig/utility/flip/) which converts text files between Unix, Mac, and MS-DOS formats.\n\n## Installation\n\nAWS CloudFormation Template Flip can be installed using [pip](https://pip.pypa.io/en/stable/):\n\n```bash\npip install cfn-flip\n```\n\n## Usage\n\nAWS CloudFormation Template Flip is both a command line tool and a python library.\n\nNote that the command line tool is spelled `cfn-flip` with a hyphen, while the python package is `cfn_flip` with an underscore.\n\n### Command line tool\n\n```\nUsage: cfn-flip [OPTIONS] [INPUT] [OUTPUT]\n\n  AWS CloudFormation Template Flip is a tool that converts AWS\n  CloudFormation templates between JSON and YAML formats, making use of the\n  YAML format's short function syntax where possible.\"\n\nOptions:\n  -i, --input [json|yaml]   Specify the input format. Overrides -j and -y\n                            flags.\n  -o, --output [json|yaml]  Specify the output format. Overrides -j, -y, and\n                            -n flags.\n  -j, --json                Convert to JSON. Assume the input is YAML.\n  -y, --yaml                Convert to YAML. Assume the input is JSON.\n  -c, --clean               Performs some opinionated cleanup on your\n                            template.\n  -l, --long                Use long-form syntax for functions when converting\n                            to YAML.\n  -n, --no-flip             Perform other operations but do not flip the\n                            output format.\n  --version                 Show the version and exit.\n  --help                    Show this message and exit.\n```\n\n\ncfn-flip will detect the format of the input template and convert JSON to YAML and YAML to JSON, respectively.\n\nExamples:\n\n* Reading from `stdin` and outputting to `stdout`:\n\n    ```bash\n    cat examples/test.json | cfn-flip\n    ```\n\n* Reading from a file and outputting to `stdout`:\n\n    ```bash\n    cfn-flip examples/test.yaml\n    ```\n\n* Reading from a file and outputting to another file:\n\n    ```bash\n    cfn-flip examples/test.json output.yaml\n    ```\n\n* Reading from a file and cleaning up the output\n\n    ```bash\n    cfn-flip -c examples/test.json\n    ```\n\n### Python package\n\nTo use AWS CloudFormation Template Flip from your own python projects, import one of the functions `flip`, `to_yaml`, or `to_json` as needed.\n\n```python\nfrom cfn_flip import flip, to_yaml, to_json\n\n\"\"\"\nAll functions expect a string containing serialised data\nand return a string containing serialised data\nor raise an exception if there is a problem parsing the input\n\"\"\"\n\n# flip takes a best guess at the serialisation format\n# and returns the opposite, converting json into yaml and vice versa\nsome_yaml_or_json = flip(some_json_or_yaml)\n\n# to_json expects serialised yaml as input, and returns serialised json\nsome_json = to_json(some_yaml)\n\n# to_yaml expects serialised json as input, and returns serialised yaml\nsome_yaml = to_yaml(some_json)\n\n# The clean_up flag performs some opinionated, CloudFormation-specific sanitation of the input\n# For example, converting uses of Fn::Join to Fn::Sub\n# flip, to_yaml, and to_json all support the clean_up flag\nclean_yaml = to_yaml(some_json, clean_up=True)\n```\n\n### Configuration paramters\n\nYou can configure some parameters like:\n\n`max_col_width`: Maximum columns before breakline. Default value is 200\nTo change the configuration you can use:\n\n**Environment Variable**\n\nLinux/Unix:\n`export CFN_MAX_COL_WIDTH=120`\n\nWindows: `SET CFN_MAX_COL_WIDTH=120`\n\n**Python**\n\n```python\n\nfrom cfn_tools._config import config\nfrom cfn_flip import flip, to_yaml, to_json\n\n\"\"\"\nAll functions expect a string containing serialised data\nand return a string containing serialised data\nor raise an exception if there is a problem parsing the input\n\"\"\"\n\n# Change the default number of columns to break line to 120\nconfig['max_col_width'] = \"120\"\n\n# flip takes a best guess at the serialisation format\n# and returns the opposite, converting json into yaml and vice versa\nsome_yaml_or_json = flip(some_json_or_yaml)\n\n# to_json expects serialised yaml as input, and returns serialised json\nsome_json = to_json(some_yaml)\n\n# to_yaml expects serialised json as input, and returns serialised yaml\nsome_yaml = to_yaml(some_json)\n\n# The clean_up flag performs some opinionated, CloudFormation-specific sanitation of the input\n# For example, converting uses of Fn::Join to Fn::Sub\n# flip, to_yaml, and to_json all support the clean_up flag\nclean_yaml = to_yaml(some_json, clean_up=True)\n\n```"
}
