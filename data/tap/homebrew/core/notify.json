{
  "name": "notify",
  "full_name": "notify",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Stream the output of any CLI and publish it to a variety of supported platforms",
  "license": "MIT",
  "homepage": "https://github.com/projectdiscovery/notify",
  "versions": {
    "stable": "1.0.5",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/projectdiscovery/notify/archive/refs/tags/v1.0.5.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "15824bee28cb9f3e74aa34559619fdceb865182fe12961d6c5cfc26db642b38c"
    },
    "head": {
      "url": "https://github.com/projectdiscovery/notify.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/notify/blobs/sha256:a98b613b397408f9064059db3cb9d395d00c34f60e5b47195f2a3d3442be76f0",
          "sha256": "a98b613b397408f9064059db3cb9d395d00c34f60e5b47195f2a3d3442be76f0"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/notify/blobs/sha256:a98b613b397408f9064059db3cb9d395d00c34f60e5b47195f2a3d3442be76f0",
          "sha256": "a98b613b397408f9064059db3cb9d395d00c34f60e5b47195f2a3d3442be76f0"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/notify/blobs/sha256:a98b613b397408f9064059db3cb9d395d00c34f60e5b47195f2a3d3442be76f0",
          "sha256": "a98b613b397408f9064059db3cb9d395d00c34f60e5b47195f2a3d3442be76f0"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/notify/blobs/sha256:4ab287f6289bd0e830b3e599c7b886d6399c95639712edf5e6e972b37cf8cdb8",
          "sha256": "4ab287f6289bd0e830b3e599c7b886d6399c95639712edf5e6e972b37cf8cdb8"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/notify/blobs/sha256:4ab287f6289bd0e830b3e599c7b886d6399c95639712edf5e6e972b37cf8cdb8",
          "sha256": "4ab287f6289bd0e830b3e599c7b886d6399c95639712edf5e6e972b37cf8cdb8"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/notify/blobs/sha256:4ab287f6289bd0e830b3e599c7b886d6399c95639712edf5e6e972b37cf8cdb8",
          "sha256": "4ab287f6289bd0e830b3e599c7b886d6399c95639712edf5e6e972b37cf8cdb8"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/notify/blobs/sha256:62de427da765f4b2b26e38f055a5adf2fdf2c01410e7c2115786618b4cc7c6ec",
          "sha256": "62de427da765f4b2b26e38f055a5adf2fdf2c01410e7c2115786618b4cc7c6ec"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/notify.rb",
  "ruby_source_checksum": {
    "sha256": "fcec24ac0a65fef037402a815364b61f5d674156604ee2198db356d293dae599"
  },
  "date_added": "2023-03-30T10:48:20+01:00",
  "readme": "<h1 align=\"center\">\n  <img src=\"static/notify-logo.png\" alt=\"notify\" width=\"200px\">\n  <br>\n</h1>\n\n\n<p align=\"center\">\n<a href=\"https://opensource.org/licenses/MIT\"><img src=\"https://img.shields.io/badge/license-MIT-_red.svg\"></a>\n<a href=\"https://github.com/projectdiscovery/notify/issues\"><img src=\"https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat\"></a>\n<a href=\"https://goreportcard.com/badge/github.com/projectdiscovery/notify\"><img src=\"https://goreportcard.com/badge/github.com/projectdiscovery/notify\"></a>\n<a href=\"https://github.com/projectdiscovery/notify/releases\"><img src=\"https://img.shields.io/github/release/projectdiscovery/notify\"></a>\n<a href=\"https://hub.docker.com/r/projectdiscovery/notify\"><img src=\"https://img.shields.io/docker/pulls/projectdiscovery/notify.svg\"></a>\n<a href=\"https://twitter.com/pdiscoveryio\"><img src=\"https://img.shields.io/twitter/follow/pdiscoveryio.svg?logo=twitter\"></a>\n<a href=\"https://discord.gg/projectdiscovery\"><img src=\"https://img.shields.io/discord/695645237418131507.svg?logo=discord\"></a>\n</p>\n\n<p align=\"center\">\n  <a href=\"#features\">Features</a> •\n  <a href=\"#notify-installation\">Installation</a> •\n  <a href=\"#provider-config\">Providers</a> •\n  <a href=\"#usage\">Usage</a> •\n  <a href=\"#running-notify\">Running Notify</a> •\n  <a href=\"#notes\">Notes</a> •\n  <a href=\"https://discord.gg/projectdiscovery\">Join Discord</a>\n</p>\n\n\nNotify is a Go-based assistance package that enables you to stream the output of several tools (or read from a file) and publish it to a variety of supported platforms.\n\n<h1 align=\"left\">\n  <img src=\"static/notify-httpx.png\" alt=\"notify-httpx\" width=\"700px\">\n  <br>\n</h1>\n\n# Features\n\n- Supports for Slack / Discord / Telegram\n- Supports for Pushover / Email\n- Supports for Microsoft Teams / Google Chat\n- Supports for File / Pipe input\n- Supports Line by Line / Bulk Post\n- Supports using Single / Multiple providers\n- Supports Custom Web-hooks\n- Supports Custom data formatting \n\n\n# Usage\n\n```sh\nnotify -h\n```\n\nThis will display help for the tool. Here are all the switches it supports.\n\n| Flag                    | Description                                        | Example                               |\n|-------------------------|----------------------------------------------------|---------------------------------------|\n| `-bulk`                 | enable bulk processing                             | `notify -bulk`                        |\n| `-char-limit`           | max character limit per message (default 4000)     | `notify -cl 2000`                     |\n| `-config`               | notify configuration file                          | `notify -config config.yaml`          |\n| `-data`                 | input file to send for notify                      | `notify -i test.txt`                  |\n| `-delay`                | delay in seconds between each notification         | `notify -d 2`                         |\n| `-id`                   | id to send the notification to (optional)          | `notify -id recon,scans`              |\n| `-msg-format`           | add custom formatting to message                   | `notify -mf Hey {{data}}`             |\n| `-no-color`             | disable colors in output                           | `notify -nc`                          |\n| `-provider-config`      | provider config path                               | `notify -pc provider.yaml`            |\n| `-provider`             | provider to send the notification to (optional)    | `notify -p slack,telegram`            |\n| `-proxy`                | http proxy to use with notify                      | `notify -proxy http://127.0.0.1:8080` |\n| `-rate-limit`           | maximum number of HTTP requests to send per second | `notify -rl 1`                        |\n| `-silent`               | enable silent mode                                 | `notify -silent`                      |\n| `-verbose`              | enable verbose mode                                | `notify -verbose`                     |\n| `-version`              | display version                                    | `notify -version`                     |\n| `-update`               | updates to latest version                          | `notify -update`                      |\n| `-disable-update-check` | disables automatic update check                    | `notify -duc`                         |\n\n# Notify Installation\n\n```sh\ngo install -v github.com/projectdiscovery/notify/cmd/notify@latest\n```\n\n### Provider Config\n\nThe default provider config file can be created at `$HOME/.config/notify/provider-config.yaml` and can have the following contents:\n\n```yaml\nslack:\n  - id: \"slack\"\n    slack_channel: \"recon\"\n    slack_username: \"test\"\n    slack_format: \"{{data}}\"\n    slack_webhook_url: \"https://hooks.slack.com/services/XXXXXX\"\n\n  - id: \"vulns\"\n    slack_channel: \"vulns\"\n    slack_username: \"test\"\n    slack_format: \"{{data}}\"\n    slack_webhook_url: \"https://hooks.slack.com/services/XXXXXX\"\n\ndiscord:\n  - id: \"crawl\"\n    discord_channel: \"crawl\"\n    discord_username: \"test\"\n    discord_format: \"{{data}}\"\n    discord_webhook_url: \"https://discord.com/api/webhooks/XXXXXXXX\"\n\n  - id: \"subs\"\n    discord_channel: \"subs\"\n    discord_username: \"test\"\n    discord_format: \"{{data}}\"\n    discord_webhook_url: \"https://discord.com/api/webhooks/XXXXXXXX\"\n\ntelegram:\n  - id: \"tel\"\n    telegram_api_key: \"XXXXXXXXXXXX\"\n    telegram_chat_id: \"XXXXXXXX\"\n    telegram_format: \"{{data}}\"\n    telegram_parsemode: \"Markdown\" # None/Markdown/MarkdownV2/HTML (https://core.telegram.org/bots/api#formatting-options)\n\npushover:\n  - id: \"push\"\n    pushover_user_key: \"XXXX\"\n    pushover_api_token: \"YYYY\"\n    pushover_format: \"{{data}}\"\n    pushover_devices:\n      - \"iphone\"\n\nsmtp:\n  - id: email\n    smtp_server: mail.example.com\n    smtp_username: test@example.com\n    smtp_password: password\n    from_address: from@email.com\n    smtp_cc:\n      - to@email.com\n    smtp_format: \"{{data}}\"\n    subject: \"Email subject\"\n    smtp_html: false\n    smtp_disable_starttls: false\n\ngooglechat:\n  - id: \"gc\"\n    key: \"XXXXXXXX\"\n    token: \"XXXXXX\"\n    space: \"XXXXXX\"\n    google_chat_format: \"{{data}}\"\n\nteams:\n  - id: \"recon\"\n    teams_webhook_url: \"https://<domain>.webhook.office.com/webhookb2/xx@xx/IncomingWebhook/xx\"\n    teams_format: \"{{data}}\"\n\ncustom:\n  - id: webhook\n    custom_webhook_url: http://host/api/webhook\n    custom_method: GET\n    custom_format: '{{data}}'\n    custom_headers:\n      Content-Type: application/json\n      X-Api-Key: XXXXX\n      \ncustom:\n  - id: webhookJson\n    custom_webhook_url: http://host/api/webhook\n    custom_method: GET\n    custom_format: '{\"text\":{{dataJsonString}} }'\n    custom_headers:\n      Content-Type: application/json\n      X-Api-Key: XXXXX\n\ncustom:\n  - id: webhook\n    custom_webhook_url: http://host/api/webhook\n    custom_method: GET\n    custom_sprig: '{\"text\":\"{{ .url }}\"}'\n    custom_headers:\n      Content-Type: application/json\n      X-Api-Key: XXXXX\n``` \n\n# Running Notify\n\nNotify supports piping output of any tool or output file and send it to configured provider/s (e.g, discord, slack channel) as notification.\n\n### Send notification using piped(stdin) output\n\n```sh\nsubfinder -d hackerone.com | notify\n```\n\n<h1 align=\"left\">\n<img width=\"365\" alt=\"notify-subfinder\" src=\"https://user-images.githubusercontent.com/8293321/130240854-e3031bc6-ecc8-47f8-9654-4c58e09cc622.png\">\n</h1>\n\n### Send notification using output file\n\n\n```sh\nsubfinder -d hackerone.com -o h1.txt; notify -data h1.txt\n```\n\n### Send notification using output file in bulk mode\n\n\n```sh\nsubfinder -d hackerone.com -o h1.txt; notify -data h1.txt -bulk\n```\n\n### Send notification using output file to specific provider's\n\n\n```sh\nsubfinder -d hackerone.com -o h1.txt; notify -data h1.txt -bulk -provider discord,slack\n```\n\n### Send notification using output file to specific ID's\n\n\n```sh\nsubfinder -d hackerone.com -o h1.txt; notify -data h1.txt -bulk -id recon,vulns,scan\n```\n\n### Example Uses\n\nFollowing command will enumerate subdomains using [SubFinder](https://github.com/projectdiscovery/subfinder) and probe alive URLs using [httpx](https://github.com/projectdiscovery/httpx), runs [Nuclei](https://github.com/projectdiscovery/nuclei) templates and send the nuclei results as a notifications to configured provider/s.\n\n\n```sh\nsubfinder -d intigriti.com | httpx | nuclei -tags exposure -o output.txt; notify -bulk -data output.txt\n```\n\n\n### Provider Config\n\n\nThe tool tries to use the default provider config (`$HOME/.config/notify/provider-config.yaml`), it can also be specified via CLI by using **provider-config** flag.\n\nTo run the tool with custom provider config, just use the following command.\n\n```sh\nnotify -provider-config providers.yaml\n```\n\n### Notify Config\n\nNotify flags can be configured at default config (`$HOME/.config/notify/config.yaml`) or custom config can be also provided using `config` flag.\n\n## Notes\n- As default notify sends notification line by line\n- Use `-bulk` to send notification as entire message/s (messages might be chunked)\n\n## References\n\n- [Creating Slack webhook](https://slack.com/intl/en-it/help/articles/115005265063-Incoming-webhooks-for-Slack)\n- [Creating Discord webhook](https://support.discord.com/hc/en-us/articles/228383668-Intro-to-Webhooks)\n- [Creating Telegram bot](https://core.telegram.org/bots#3-how-do-i-create-a-bot)\n- [Creating Pushover Token](https://github.com/containrrr/shoutrrr/blob/main/docs/services/pushover.md)\n\nNotify is made with 🖤 by the [projectdiscovery](https://projectdiscovery.io) team."
}
