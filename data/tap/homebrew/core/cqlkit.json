{
  "name": "cqlkit",
  "full_name": "cqlkit",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "CLI tool to export Cassandra query as CSV and JSON format",
  "license": "Apache-2.0",
  "homepage": "https://github.com/tenmax/cqlkit",
  "versions": {
    "stable": "0.3.3",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/tenmax/cqlkit/releases/download/v0.3.3/cqlkit-0.3.3.zip",
      "tag": null,
      "revision": null,
      "checksum": "0574b4b6fe893078e993a80f95a183b89955129ab8929f5032b7faacf611952c"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cqlkit/blobs/sha256:779b43c2485ff60acb753002f28e2d8f0efa87088ab29da8e1214ffe704d63ef",
          "sha256": "779b43c2485ff60acb753002f28e2d8f0efa87088ab29da8e1214ffe704d63ef"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "openjdk"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/cqlkit.rb",
  "ruby_source_checksum": {
    "sha256": "a76e7258fbcad7780d465b3cc420abca01393a6ab0490e9aa05e6eb53ada6ccc"
  },
  "date_added": "2020-05-20T22:42:01-04:00",
  "readme": "# CQLKIT\n*cqlkit* is a CLI tool to export Cassandra query to CSV and JSON format. Cassandra is not good at Ad-hoc query, *cqlkit* allows you to export query result to semi-structured(JSON) or structured data(CSV). There are many [tools](#recommended-3rd-party-tools) out there for you to query or process these kinds of format.\n\nHere is a simple some examples.\n\nExport JSON for the system columns in cassandra cluster.\n \n```bash\ncql2json -q \"select peer, data_center, host_id, preferred_ip, rack, release_version from system.peers\"\n```\n\nExport CSV for the system columns in cassandra cluster.\n\n```bash\ncql2csv -q \"select peer, data_center, host_id, preferred_ip, rack, release_version from system.peers\"\n```\n\n# Requirement\n\n- Java8\n\n# Installation\n\n## General\n\n1. Download from [release](https://github.com/tenmax/cqlkit/releases) page.\n2. Unzip the package.\n3. Add `$CQLKIT_PATH/bin` to the *PATH* environment variable\n\n## Mac\n\nInstall cqlkit via [Homebrew](http://brew.sh/).\n\n```bash\nbrew update\nbrew install cqlkit\n```\n\nUpgrade cqlkit\n\n```bash\nbrew update\nbrew upgrade cqlkit\n```\n\n## Docker\n\nRun cqlkit via [Docker](https://hub.docker.com/r/tenmax/cqlkit).\n\n```bash\n docker run --rm -it tenmax/cqlkit\n ```\n\n# Usage\n## CQL2CSV\n\n```\nusage: cql2csv [-c contactpoint] [-r cassandraPort] [-q query] [FILE]\nFile       The file to use as CQL query. If both FILE and QUERY are\n           omitted, query will be read from STDIN.\n\n -c <arg>                            The contact point. if use multi\n                                     contact points, use ',' to separate\n                                     multi points\n    --connect-timeout <arg>          Connection timeout in seconds;\n                                     default: 5\n    --consistency <LEVEL>            The consistency level. The level\n                                     should be 'any', 'one', 'two',\n                                     'three', 'quorum', 'all',\n                                     'local_quorum', 'each_quorum',\n                                     'serial' or 'local_serial'.\n    --cqlshrc <arg>                  Use an alternative cqlshrc file\n                                     location, path.\n    --date-format <arg>              Use a custom date format. Default is\n                                     \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"\n    --fetchSize <SIZE>               The fetch size. Default is 5000\n -h,--help                           Show the help and exit\n -H,--no-header-row                  Do not output column names.\n -k <arg>                            The keyspace to use.\n -l,--linenumbers                    Insert a column of line numbers at\n                                     the front of the output. Useful when\n                                     piping to grep or as a simple primary\n                                     key.\n -p <arg>                            The password to authenticate.\n -r <arg>                            The port to connect to Cassandra, defaults to 9042.\n -P,--parallel <arg>                 The level of parallelism to run the\n                                     task. Default is sequential.\n -q,--query <CQL>                    The CQL query to execute. If\n                                     specified, it overrides FILE and\n                                     STDIN.\n    --query-partition-keys <TABLE>   Query the partition key(s) for a\n                                     column family.\n    --query-ranges <CQL>             The CQL query would be splitted by\n                                     the token ranges. WHERE clause is not\n                                     allowed in the CQL query\n    --request-timeout <arg>          Request timeout in seconds; default:\n                                     12\n -u <arg>                            The user to authenticate.\n -v,--version                        Print the version\n```\n\n\n\n## CQL2JSON\n```\nusage: cql2json [-c contactpoint] [-r cassandraPort] [-q query] [FILE]\nFile       The file to use as CQL query. If both FILE and QUERY are\n           omitted, query will be read from STDIN.\n\n -c <arg>                            The contact point. if use multi\n                                     contact points, use ',' to separate\n                                     multi points\n    --connect-timeout <arg>          Connection timeout in seconds;\n                                     default: 5\n    --consistency <LEVEL>            The consistency level. The level\n                                     should be 'any', 'one', 'two',\n                                     'three', 'quorum', 'all',\n                                     'local_quorum', 'each_quorum',\n                                     'serial' or 'local_serial'.\n    --cqlshrc <arg>                  Use an alternative cqlshrc file\n                                     location, path.\n    --date-format <arg>              Use a custom date format. Default is\n                                     \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"\n    --fetchSize <SIZE>               The fetch size. Default is 5000\n -h,--help                           Show the help and exit\n -j,--json-columns <arg>             The columns that contains json\n                                     string. The content would be used as\n                                     json object instead of plain text.\n                                     Columns are separated by comma.\n -k <arg>                            The keyspace to use.\n -l,--linenumbers                    Insert a column of line numbers at\n                                     the front of the output. Useful when\n                                     piping to grep or as a simple primary\n                                     key.\n -p <arg>                            The password to authenticate.\n -r <arg>                            The port to connect to Cassandra, defaults to 9042.\n -P,--parallel <arg>                 The level of parallelism to run the\n                                     task. Default is sequential.\n -q,--query <CQL>                    The CQL query to execute. If\n                                     specified, it overrides FILE and\n                                     STDIN.\n    --query-partition-keys <TABLE>   Query the partition key(s) for a\n                                     column family.\n    --query-ranges <CQL>             The CQL query would be splitted by\n                                     the token ranges. WHERE clause is not\n                                     allowed in the CQL query\n    --request-timeout <arg>          Request timeout in seconds; default:\n                                     12\n -u <arg>                            The user to authenticate.\n -v,--version                        Print the version\n```\n\n# cqlsh\n## Setup the cqlshrc\nTo connect to cassandra cluster, although we can use `-c` and `-k` to specify the contact server and keyspace respectively, to preapre a [cqlshrc](http://docs.datastax.com/en/cql/3.1/cql/cql_reference/cqlsh.html#refCqlsh__cqlshUsingCqlshrc) is recommended to simply your query. *cqlshrc* is used by cqlsh. *cqlkit* leverages this file to connect to your cluster. Here is the setup steps.\n\n1. Create the cqlshrc file at `~/.cassandra/cqlshrc`\n2. Here is the example format.\n\n   ```bash\n   [authentication]\n   keyspace = system\n\n   [connection]\n   hostname = 192.168.59.103\n   port = 9042\n\n   ; vim: set ft=dosini :\n   ```\n\n## Import data from a CSV file\n\n```\n$ cql2csv -q \"select text_col from ks.tbl\" > example.csv\n\n$ ./cqlsh localhost\ncqlsh> COPY ks.tbl FROM 'example.csv' WITH ESCAPE='\"' AND HEADER=TRUE\n```\n\n# Recommended 3rd Party Tools\n\n- [csvkit](https://csvkit.readthedocs.org/en/0.9.1/) - A toolkit to handle CSV files. There are many useful CLI tools included. \n\n- [q](https://github.com/harelba/q) - Another CSV tool which focuses on query on CSV files.\n\n- [json2csv](https://github.com/jehiah/json2csv) - Convert JSON format to CSV format\n\n- [jq](http://stedolan.github.io/jq/) - a lightweight and flexible command-line JSON processor."
}
