{
  "name": "sqls",
  "full_name": "sqls",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "SQL language server written in Go",
  "license": "MIT",
  "homepage": "https://github.com/lighttiger2505/sqls",
  "versions": {
    "stable": "0.2.22",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/lighttiger2505/sqls/archive/refs/tags/v0.2.22.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "0f417123331b23a50b10f2724befc53aa82f44150cf84f28bfb885f768697a01"
    },
    "head": {
      "url": "https://github.com/lighttiger2505/sqls.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sqls/blobs/sha256:faf408ae757458bf1e26893201d6e900f05eca022fb1ee01559fa5a0f1d1622f",
          "sha256": "faf408ae757458bf1e26893201d6e900f05eca022fb1ee01559fa5a0f1d1622f"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sqls/blobs/sha256:6dbca6e8e07e366b9926ddb5da7068e4aab06a8f44ac4c10e39a4cc956c823f3",
          "sha256": "6dbca6e8e07e366b9926ddb5da7068e4aab06a8f44ac4c10e39a4cc956c823f3"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sqls/blobs/sha256:3dea0bf951c056448af9f587db401b9aeaf8fb3def88ce54a5db05c3737cadae",
          "sha256": "3dea0bf951c056448af9f587db401b9aeaf8fb3def88ce54a5db05c3737cadae"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sqls/blobs/sha256:fd2c24c485ca9676c83fb24b735961b6a1f7436e81818e558657e058fce4b3cf",
          "sha256": "fd2c24c485ca9676c83fb24b735961b6a1f7436e81818e558657e058fce4b3cf"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sqls/blobs/sha256:7e0b61b52ec2b7f34122844099657f8be14a27af74509e7f7ecb59f9aad0f0a0",
          "sha256": "7e0b61b52ec2b7f34122844099657f8be14a27af74509e7f7ecb59f9aad0f0a0"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sqls/blobs/sha256:facee7e345867ac52396628dd98093a326032cefe43f1e16ce91941665dd39bd",
          "sha256": "facee7e345867ac52396628dd98093a326032cefe43f1e16ce91941665dd39bd"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sqls/blobs/sha256:5ec498c6c475d39d5badcdc0a4e81c5a7f10d9c51c9d6019021754351ed26361",
          "sha256": "5ec498c6c475d39d5badcdc0a4e81c5a7f10d9c51c9d6019021754351ed26361"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sqls/blobs/sha256:5eb770bee66bb17bad1307ce42b6e4d1d90352612c28ffe832ba8eeae74dd271",
          "sha256": "5eb770bee66bb17bad1307ce42b6e4d1d90352612c28ffe832ba8eeae74dd271"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": true,
  "disable_date": "2022-11-17",
  "disable_reason": "repo_archived",
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/sqls.rb",
  "ruby_source_checksum": {
    "sha256": "d6a2ba52f34a1bcb765322a20912da9c024978745134de9e1f91e7d4f9c86ee4"
  },
  "date_added": "2022-04-25T15:37:40+00:00",
  "readme": "# sqls\n\n![test](https://github.com/lighttiger2505/sqls/workflows/test/badge.svg)\n\nAn implementation of the Language Server Protocol for SQL.\n\n## Note\n\nThis project is currently under development and there is no stable release. Therefore, destructive interface changes and configuration changes are expected.\n\n## Features\n\nsqls aims to provide advanced intelligence for you to edit sql in your own editor.\n\n### Support RDBMS\n\n- MySQL([Go-MySQL-Driver](https://github.com/go-sql-driver/mysql))\n- PostgreSQL([pgx](https://github.com/jackc/pgx))\n- SQLite3([go-sqlite3](https://github.com/mattn/go-sqlite3))\n- MSSQL([go-mssqldb](https://github.com/denisenkom/go-mssqldb))\n\n### Language Server Features\n\n#### Auto Completion\n\n![completion](./imgs/sqls-completion.gif)\n\n- DML(Data Manipulation Language)\n    - [x] SELECT\n        - [x] Sub Query\n    - [x] INSERT\n    - [x] UPDATE\n    - [x] DELETE\n- DDL(Data Definition Language)\n    - [ ] CREATE TABLE\n    - [ ] ALTER TABLE\n  \n#### Join completion\nIf the tables are connected with a foreign key sqls can complete ```JOIN``` statements\n\n![join_completion](imgs/sqls-fk_joins.gif)\n\n#### CodeAction\n\n![code_actions](https://github.com/lighttiger2505/sqls.vim/blob/master/imgs/sqls_vim_demo.gif)\n\n- [x] Execute SQL\n- [ ] Explain SQL\n- [x] Switch Connection(Selected Database Connection)\n- [x] Switch Database\n\n#### Hover\n\n![hover](./imgs/sqls_hover.gif)\n\n#### Signature Help\n\n![signature_help](./imgs/sqls_signature_help.gif)\n\n#### Document Formatting\n\n![document_format](./imgs/sqls_document_format.gif)\n\n## Installation\n\n```shell\ngo install github.com/lighttiger2505/sqls@latest\n```\n\n## Editor Plugins\n\n- [sqls.vim](https://github.com/lighttiger2505/sqls.vim)\n- [vscode-sqls](https://github.com/lighttiger2505/vscode-sqls)\n- [sqls.nvim](https://github.com/nanotee/sqls.nvim)\n- [Emacs LSP mode](https://emacs-lsp.github.io/lsp-mode/page/lsp-sqls/)\n\n## DB Configuration\n\nThe connection to the RDBMS is essential to take advantage of the functionality provided by `sqls`.\nYou need to set the connection to the RDBMS.\n\n### Configuration Methods\n\nThere are the following methods for RDBMS connection settings, and they are prioritized in order from the top.\nWhichever method you choose, the settings you make will remain the same.\n\n1. Configuration file specified by the `-config` flag\n1. `workspace/configuration` set to LSP client\n1. Configuration file located in the following location\n    - `$XDG_CONFIG_HOME`/sqls/config.yml (\"`$HOME`/.config\" is used instead of `$XDG_CONFIG_HOME` if it's not set)\n\n### Configuration file sample\n\n```yaml\n# Set to true to use lowercase keywords instead of uppercase.\nlowercaseKeywords: false\nconnections:\n  - alias: dsn_mysql\n    driver: mysql\n    dataSourceName: root:root@tcp(127.0.0.1:13306)/world\n  - alias: individual_mysql\n    driver: mysql\n    proto: tcp\n    user: root\n    passwd: root\n    host: 127.0.0.1\n    port: 13306\n    dbName: world\n    params:\n      autocommit: \"true\"\n      tls: skip-verify\n  - alias: mysql_via_ssh\n    driver: mysql\n    proto: tcp\n    user: admin\n    passwd: Q+ACgv12ABx/\n    host: 192.168.121.163\n    port: 3306\n    dbName: world\n    sshConfig:\n      host: 192.168.121.168\n      port: 22\n      user: sshuser\n      passPhrase: ssspass\n      privateKey: /home/lighttiger2505/.ssh/id_rsa\n```\n\n### Workspace configuration Sample\n\n- setting example with vim-lsp.\n\n```vim\nif executable('sqls')\n    augroup LspSqls\n        autocmd!\n        autocmd User lsp_setup call lsp#register_server({\n        \\   'name': 'sqls',\n        \\   'cmd': {server_info->['sqls']},\n        \\   'whitelist': ['sql'],\n        \\   'workspace_config': {\n        \\     'sqls': {\n        \\       'connections': [\n        \\         {\n        \\           'driver': 'mysql',\n        \\           'dataSourceName': 'root:root@tcp(127.0.0.1:13306)/world',\n        \\         },\n        \\         {\n        \\           'driver': 'postgresql',\n        \\           'dataSourceName': 'host=127.0.0.1 port=15432 user=postgres password=mysecretpassword1234 dbname=dvdrental sslmode=disable',\n        \\         },\n        \\       ],\n        \\     },\n        \\   },\n        \\ })\n    augroup END\nendif\n```\n\n- setting example with coc.nvim.\n\nIn `coc-settings.json` opened by `:CocConfig`\n\n```json\n{\n    \"languageserver\": {\n        \"sql\": {\n            \"command\": \"sqls\",\n            \"args\": [\"-config\", \"$HOME/.config/sqls/config.yml\"],\n            \"filetypes\": [\"sql\"],\n            \"shell\": true\n        }\n    }\n}\n```\n\n- setting example with [nvim-lspconfig](https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md#sqls).\n\n```lua\nrequire'lspconfig'.sqls.setup{\n  settings = {\n    sqls = {\n      connections = {\n        {\n          driver = 'mysql',\n          dataSourceName = 'root:root@tcp(127.0.0.1:13306)/world',\n        },\n        {\n          driver = 'postgresql',\n          dataSourceName = 'host=127.0.0.1 port=15432 user=postgres password=mysecretpassword1234 dbname=dvdrental sslmode=disable',\n        },\n      },\n    },\n  },\n}\n```\n\n- Setting example for Sublime Text 4\n  \n  Install the LSP Client by Opening the command palette and run ```Package Control: Install Package```, then select ```LSP```.\n  \n  Open ```Preferences > Package Settings > LSP > Settings``` and add the ```\"sqls\"``` client configuration to the ```\"clients\"```:\n```\n{\n    \"show_diagnostics_count_in_view_status\": true,\n    \"clients\": {\n        \"sqls\": {\n            \"enabled\": true,\n            \"command\": [\"/path/to/sqls binary\"],\n            \"selector\": \"source.sql\"\n        }\n    }\n}\n```\n\n**I'm sorry. Please wait a little longer for other editor settings.**\n\n### Configuration Params\n\nThe first setting in `connections` is the default connection.\n\n| Key         | Description          |\n| ----------- | -------------------- |\n| connections | Database connections |\n\n### connections\n\n`dataSourceName` takes precedence over the value set in `proto`, `user`, `passwd`, `host`, `port`, `dbName`, `params`.\n\n| Key            | Description                                 |\n| -------------- | ------------------------------------------- |\n| alias          | Connection alias name. Optional.            |\n| driver         | `mysql`, `postgresql`, `sqlite3`. Required. |\n| dataSourceName | Data source name.                           |\n| proto          | `tcp`, `udp`, `unix`.                       |\n| user           | User name                                   |\n| passwd         | Password                                    |\n| host           | Host                                        |\n| port           | Port                                        |\n| path           | unix socket path                            |\n| dbName         | Database name                               |\n| params         | Option params. Optional.                    |\n| sshConfig      | ssh config. Optional.                       |\n\n#### sshConfig\n\n| Key        | Description                 |\n| ---------- | --------------------------- |\n| host       | ssh host. Required.         |\n| port       | ssh port. Required.         |\n| user       | ssh user. Optional.         |\n| privateKey | private key path. Required. |\n| passPhrase | passPhrase. Optional.       |\n\n#### DSN (Data Source Name)\n\nSee also.\n\n- <https://github.com/go-sql-driver/mysql#dsn-data-source-name>\n- <https://pkg.go.dev/github.com/jackc/pgx/v4>\n- <https://github.com/mattn/go-sqlite3#connection-string>\n\n## Contributors\n\nThis project exists thanks to all the people who contribute.\n<a href=\"https://github.com/lighttiger2505/sqls/graphs/contributors\">\n    <img src=\"https://contrib.rocks/image?repo=lighttiger2505/sqls\" />\n</a>\n\n## Inspired\n\nI created sqls inspired by the following OSS.\n\n- [dbcli Tools](https://github.com/dbcli)\n    - [mycli](https://www.mycli.net/)\n    - [pgcli](https://www.pgcli.com/)\n    - [litecli](https://litecli.com/)\n- non-validating SQL parser\n    - [sqlparse](https://github.com/andialbrecht/sqlparse)"
}
