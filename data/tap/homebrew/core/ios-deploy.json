{
  "name": "ios-deploy",
  "full_name": "ios-deploy",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Install and debug iPhone apps from the command-line",
  "license": "GPL-3.0-or-later and BSD-3-Clause",
  "homepage": "https://github.com/ios-control/ios-deploy",
  "versions": {
    "stable": "1.12.2",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/ios-control/ios-deploy/archive/1.12.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "2a1e9836192967f60194334261e7af4de2ba72e4047a3e54376e5caa57a1db70"
    },
    "head": {
      "url": "https://github.com/ios-control/ios-deploy.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ios-deploy/blobs/sha256:5c87b96b6692afa7b56724cb2e1a0f1cf1e8065f803266c8d83a7d5623496896",
          "sha256": "5c87b96b6692afa7b56724cb2e1a0f1cf1e8065f803266c8d83a7d5623496896"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ios-deploy/blobs/sha256:eae3172eaea91a064b40f05f508d4d4a3d9c18cdba920fec27be57477cfd5ec4",
          "sha256": "eae3172eaea91a064b40f05f508d4d4a3d9c18cdba920fec27be57477cfd5ec4"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ios-deploy/blobs/sha256:8eddbc577a5cfa12da1fa5e0c6a40ae19f2b20c275326f3e9db6ce95bef0c640",
          "sha256": "8eddbc577a5cfa12da1fa5e0c6a40ae19f2b20c275326f3e9db6ce95bef0c640"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ios-deploy/blobs/sha256:9c9ca5f1ced69ffa9d96409dce25c135560edce0082391f24c84493b8822fd04",
          "sha256": "9c9ca5f1ced69ffa9d96409dce25c135560edce0082391f24c84493b8822fd04"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ios-deploy/blobs/sha256:245e3e9a9334e2fc2ee3e1123493849bbfdec93dd33fad32c45dff32da512e96",
          "sha256": "245e3e9a9334e2fc2ee3e1123493849bbfdec93dd33fad32c45dff32da512e96"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ios-deploy/blobs/sha256:b04cc3456def885207da127501db9e3e8defb9b108f1aae2f358e8498d6e8f16",
          "sha256": "b04cc3456def885207da127501db9e3e8defb9b108f1aae2f358e8498d6e8f16"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [
    {
      "name": "xcode",
      "cask": null,
      "download": null,
      "version": null,
      "contexts": [
        "build"
      ],
      "specs": [
        "stable",
        "head"
      ]
    },
    {
      "name": "macos",
      "cask": null,
      "download": null,
      "version": null,
      "contexts": [],
      "specs": [
        "stable",
        "head"
      ]
    }
  ],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/ios-deploy.rb",
  "ruby_source_checksum": {
    "sha256": "842e1ada702cdfcc84b4d275eee5005c314b158c32d3546e5502787c478e4afb"
  },
  "date_added": "2016-05-26T09:14:13+01:00",
  "readme": "[![Build Status](https://travis-ci.org/ios-control/ios-deploy.svg?branch=master)](https://travis-ci.org/ios-control/ios-deploy)\n\nios-deploy\n==========\n\nInstall and debug iOS apps from the command line. Designed to work on un-jailbroken devices.\n\n## Requirements\n\n* macOS\n* You need to have a valid iOS Development certificate installed\n* Xcode (**NOT** just Command Line Tools!)\n\n#### Tested Configurations\nThe ios-deploy binary in Homebrew should work on macOS 10.0+ with Xcode7+. It has been most recently tested with the following configurations:\n - macOS 10.14 Mojave, 10.15 Catalina and preliminary testing on 11.0b BigSur\n - iOS 13.0 and preliminary testing on iOS 14.0b\n - Xcode 11.3, 11.6 and preliminary testing on Xcode 12 betas\n - x86 and preliminary testing on Arm64e based Apple Macintosh Computers\n\n## Roadmap\n\nSee our [milestones](https://github.com/phonegap/ios-deploy/milestones).\n\t\n## Development\n\nThe 1.x branch has been archived (renamed for now), all development is to be on the master branch for simplicity, since the planned 2.x development (break out commands into their own files) has been abandoned for now.\n\n## Installation\n\nIf you have previously installed ios-deploy via `npm`, uninstall it by running:\n```\nsudo npm uninstall -g ios-deploy\n```\n\nInstall ios-deploy via [Homebrew](https://brew.sh/) by running:\n\n```\nbrew install ios-deploy\n```\n\n## Testing\n\nRun:\n\n```\npython -m py_compile src/scripts/*.py && xcodebuild -target ios-deploy && xcodebuild test -scheme ios-deploy-tests\n```\n\n## Usage\n\n    Usage: ios-deploy [OPTION]...\n\t  -d, --debug                  launch the app in lldb after installation\n\t  -i, --id <device_id>         the id of the device to connect to\n\t  -c, --detect                 list all connected devices\n\t  -b, --bundle <bundle.app>    the path to the app bundle to be installed\n\t  -a, --args <args>            command line arguments to pass to the app when launching it\n\t  -s, --envs <envs>            environment variables, space separated key-value pairs, to pass to the app when launching it\n\t  -t, --timeout <timeout>      number of seconds to wait for a device to be connected\n\t  -u, --unbuffered             don't buffer stdout\n\t  -n, --nostart                do not start the app when debugging\n\t  -N, --nolldb                 start debugserver only. do not run lldb. Can not be used with args or envs options\n\t  -I, --noninteractive         start in non interactive mode (quit when app crashes or exits)\n\t  -L, --justlaunch             just launch the app and exit lldb\n\t  -v, --verbose                enable verbose output\n\t  -m, --noinstall              directly start debugging without app install (-d not required)\n\t  -A, --app_deltas             incremental install. must specify a directory to store app deltas to determine what needs to be installed\n\t  -p, --port <number>          port used for device, default: dynamic\n\t  -r, --uninstall              uninstall the app before install (do not use with -m; app cache and data are cleared)\n\t  -9, --uninstall_only         uninstall the app ONLY. Use only with -1 <bundle_id>\n\t  -1, --bundle_id <bundle id>  specify bundle id for list and upload\n\t  -l, --list[=<dir>]           list all app files or the specified directory\n\t  -o, --upload <file>          upload file\n\t  -w, --download[=<path>]      download app tree or the specified file/directory\n\t  -2, --to <target pathname>   use together with up/download file/tree. specify target\n\t  -D, --mkdir <dir>            make directory on device\n\t  -R, --rm <path>              remove file or directory on device (directories must be empty)\n\t  -X, --rmtree <path>          remove directory and all contained files recursively on device\n\t  -V, --version                print the executable version\n\t  -e, --exists                 check if the app with given bundle_id is installed or not\n\t  -B, --list_bundle_id         list bundle_id\n\t  -W, --no-wifi                ignore wifi devices\n\t  -C, --get_battery_level      get battery current capacity\n\t  -O, --output <file>          write stdout to this file\n\t  -E, --error_output <file>    write stderr to this file\n\t  --detect_deadlocks <sec>     start printing backtraces for all threads periodically after specific amount of seconds\n\t  -f, --file_system            specify file system for mkdir / list / upload / download / rm\n\t  -F, --non-recursively        specify non-recursively walk directory\n\t  -S, --symbols                download OS symbols. must specify a directory to store the downloaded symbols\n\t  -j, --json                   format output as JSON\n\t  -k, --key                    keys for the properties of the bundle. Joined by ',' and used only with -B <list_bundle_id> and -j <json>\n\t  --custom-script <script>     path to custom python script to execute in lldb\n\t  --custom-command <command>   specify additional lldb commands to execute\n\t  --faster-path-search         use alternative logic to find the device support paths faster\n\t  -P, --list_profiles          list all provisioning profiles on device\n\t  --profile-uuid <uuid>        the UUID of the provisioning profile to target, use with other profile commands\n\t  --profile-download <path>    download a provisioning profile (requires --profile-uuid)\n\t  --profile-install <file>     install a provisioning profile\n\t  --profile-uninstall          uninstall a provisioning profile (requires --profile-uuid <UUID>)\n\t  --check-developer-mode       checks whether the given device has developer mode enabled (Requires Xcode 14 or newer)\n\n## Examples\n\nThe commands below assume that you have an app called `my.app` with bundle id `bundle.id`. Substitute where necessary.\n\n    // deploy and debug your app to a connected device\n    ios-deploy --debug --bundle my.app\n\n    // deploy, debug and pass environment variables to a connected device\n    ios-deploy --debug --envs DYLD_PRINT_STATISTICS=1 --bundle my.app\n\n    // deploy and debug your app to a connected device, skipping any wi-fi connection (use USB)\n    ios-deploy --debug --bundle my.app --no-wifi\n\n    // deploy and launch your app to a connected device, but quit the debugger after\n    ios-deploy --justlaunch --debug --bundle my.app\n\n    // deploy and launch your app to a connected device, quit when app crashes or exits\n    ios-deploy --noninteractive --debug --bundle my.app\n\n    // deploy your app to a connected device using incremental installation\n    ios-deploy --app_deltas /tmp --bundle my.app\n\n    // Upload a file to your app's Documents folder\n    ios-deploy --bundle_id 'bundle.id' --upload test.txt --to Documents/test.txt\n\n    // Download your app's Documents, Library and tmp folders\n    ios-deploy --bundle_id 'bundle.id' --download --to MyDestinationFolder\n\n    // List the contents of your app's Documents, Library and tmp folders\n    ios-deploy --bundle_id 'bundle.id' --list\n\n    // deploy and debug your app to a connected device, uninstall the app first\n    ios-deploy --uninstall --debug --bundle my.app\n\n    // check whether an app by bundle id exists on the device (check return code `echo $?`)\n    ios-deploy --exists --bundle_id com.apple.mobilemail\n\n    // Download the Documents directory of the app *only*\n    ios-deploy --download=/Documents --bundle_id my.app.id --to ./my_download_location\n    \n    // List ids and names of connected devices\n    ios-deploy -c\n    \n    // Uninstall an app\n    ios-deploy --uninstall_only --bundle_id my.bundle.id\n    \n    // list all bundle ids of all apps on your device\n    ios-deploy --list_bundle_id\n    \n    // list the files in cameral roll, a.k.a /DCIM\n    ios-deploy -f -l/DCIM\n    \n    // download the file in /DCIM\n    ios-deploy -f -w/DCIM/100APPLE/IMG_001.jpg\n    \n    // remove the file /DCIM\n    ios-deploy -f -R /DCIM/100APPLE/IMG_001.jpg\n    \n    // make directoly in /DCIM\n    ios-deploy -f -D/DCIM/test\n    \n    // upload file to /DCIM\n    ios-deploy -f -o/Users/ryan/Downloads/test.png -2/DCIM/test.png\n    \n    // get more properties of the bundle\n    ios-deploy -B -j --key=UIFileSharingEnabled,CFBundlePackageType\n    ios-deploy -B -j --key=UIFileSharingEnabled --key=CFBundlePackageType\n\n\n## Demo\n\nThe included demo.app represents the minimum required to get code running on iOS.\n\n* `make demo.app` will generate the demo.app executable. If it doesn't compile, modify `IOS_SDK_VERSION` in the Makefile.\n* `make debug` will install demo.app and launch a LLDB session.\n\n## Notes\n\n* `--detect_deadlocks` can help to identify an exact state of application's threads in case of a deadlock. It works like this: The user specifies the amount of time ios-deploy runs the app as usual. When the timeout is elapsed ios-deploy starts to print call-stacks of all threads every 5 seconds and the app keeps running. Comparing threads' call-stacks between each other helps to identify the threads which were stuck.\n\n## License\n\nios-deploy is available under the provisions of the GNU General Public License,\nversion 3 (or later), available here: http://www.gnu.org/licenses/gpl-3.0.html\n\n\nError codes used for error messages were taken from SDMMobileDevice framework,\noriginally reverse engineered by Sam Marshall. SDMMobileDevice is distributed\nunder BSD 3-Clause license and is available here:\nhttps://github.com/samdmarshall/SDMMobileDevice"
}
