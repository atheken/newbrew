{
  "name": "apko",
  "full_name": "apko",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Build OCI images from APK packages directly without Dockerfile",
  "license": "Apache-2.0",
  "homepage": "https://github.com/chainguard-dev/apko",
  "versions": {
    "stable": "0.10.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/chainguard-dev/apko/archive/refs/tags/v0.10.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "daac21e1ee92dbc83881382e4a375bbeb3550fcf17e5a76a7f7c7cb03408cd6b"
    },
    "head": {
      "url": "https://github.com/chainguard-dev/apko.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/apko/blobs/sha256:e454c909e27778193c21f745c8f166255cde8b5eb55639fe1e0e5641fbb7cf38",
          "sha256": "e454c909e27778193c21f745c8f166255cde8b5eb55639fe1e0e5641fbb7cf38"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/apko/blobs/sha256:e454c909e27778193c21f745c8f166255cde8b5eb55639fe1e0e5641fbb7cf38",
          "sha256": "e454c909e27778193c21f745c8f166255cde8b5eb55639fe1e0e5641fbb7cf38"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/apko/blobs/sha256:e454c909e27778193c21f745c8f166255cde8b5eb55639fe1e0e5641fbb7cf38",
          "sha256": "e454c909e27778193c21f745c8f166255cde8b5eb55639fe1e0e5641fbb7cf38"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/apko/blobs/sha256:6634cc885579291a0cb59570f64dee22855b9cae58d926427afea6b8e1b3786e",
          "sha256": "6634cc885579291a0cb59570f64dee22855b9cae58d926427afea6b8e1b3786e"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/apko/blobs/sha256:6634cc885579291a0cb59570f64dee22855b9cae58d926427afea6b8e1b3786e",
          "sha256": "6634cc885579291a0cb59570f64dee22855b9cae58d926427afea6b8e1b3786e"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/apko/blobs/sha256:6634cc885579291a0cb59570f64dee22855b9cae58d926427afea6b8e1b3786e",
          "sha256": "6634cc885579291a0cb59570f64dee22855b9cae58d926427afea6b8e1b3786e"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/apko/blobs/sha256:c2591a206e97cc8da2a2a440463636fc3ba902d31e6d6706306a88005b96754b",
          "sha256": "c2591a206e97cc8da2a2a440463636fc3ba902d31e6d6706306a88005b96754b"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "2706c66e8def3eeba4d9bf1adf66221c8ad70701",
  "ruby_source_path": "Formula/apko.rb",
  "ruby_source_checksum": {
    "sha256": "2e9881ed7cccf2af76ceb30b31e0099fc34c07056f8de4eb00817e37c6a6e089"
  },
  "date_added": "2023-05-26T17:03:45-04:00",
  "readme": "# apko: apk-based OCI image builder\n\nBuild and publish [OCI container images](https://opencontainers.org/) built from [apk](https://wiki.alpinelinux.org/wiki/Package_management) packages.\n\napko has the following key features:\n\n - **Fully reproducible by default.** Run apko twice and you will get exactly the same binary.\n - **Fast.** apko aims to build images in ms.\n - **Small.** apko generated images only contain what's needed by the application,\n   in the style of [distroless](https://github.com/GoogleContainerTools/distroless).\n - **SBOM Support.** apko produces a Software Bill of Materials (SBOM) for images, detailing all the packages inside.\n - **Services.** apko supports using the [s6 supervision suite](https://skarnet.org/software/s6) to run multiple processes\n   in a container without reaping or signalling issues.\n\nPlease note that apko is a work in progress and details are subject to change!\n\n## Installation\n\nThe quickest way to get apko running is to use the [OCI Container (Docker) image](https://github.com/chainguard-images/apko):\n\n```shell\ndocker run cgr.dev/chainguard/apko version\n```\n```\n     _      ____    _  __   ___\n    / \\    |  _ \\  | |/ /  / _ \\\n   / _ \\   | |_) | | ' /  | | | |\n  / ___ \\  |  __/  | . \\  | |_| |\n /_/   \\_\\ |_|     |_|\\_\\  \\___/\napko\n\nGitVersion:    v0.5.0-67-g9084217\nGitCommit:     9084217c907232b8c0bb87fd99c3e65eaa581a5b\nGitTreeState:  clean\nBuildDate:     '1970-01-01T00:00:00Z'\nGoVersion:     go1.18.5\nCompiler:      gc\nPlatform:      linux/amd64\n```\n\nTo use the examples, you'll generally want to mount your current directory into the container e.g:\n\n```shell\ndocker run -v \"$PWD\":/work cgr.dev/chainguard/apko build examples/alpine-base.yaml apko-alpine:edge apko-alpine.tar\n```\n\nThese examples use [Docker](https://docs.docker.com/get-docker/), but should also work with other runtimes such as [podman](https://podman.io/getting-started/installation).\n\nAlternatively, if you're on a Mac, you can use [Lima](./mac/README.md) to run an Alpine Linux VM.\n\n## Quickstart\n\nAn apko file for building an Alpine base image looks like this:\n\n```yaml\ncontents:\n  repositories:\n    - https://dl-cdn.alpinelinux.org/alpine/edge/main\n  packages:\n    - alpine-base\n\nentrypoint:\n  command: /bin/sh -l\n\n# optional environment configuration\nenvironment:\n  PATH: /usr/sbin:/sbin:/usr/bin:/bin\n```\nWe can build this with apko from any environment with apk tooling:\n\n```shell\napko build examples/alpine-base.yaml apko-alpine:test apko-alpine.tar\n```\n```\n...\n2022/04/08 13:22:31 apko (aarch64): generating SBOM\n2022/04/08 13:22:31 building OCI image from layer '/tmp/apko-3027985148.tar.gz'\n2022/04/08 13:22:31 OCI layer digest: sha256:ba034c07d0945abf6caa46fe05268d2375e4209e169ff7fdd34d40cf4e5f2dd6\n2022/04/08 13:22:31 OCI layer diffID: sha256:9b4ab6bb8831352b25c4bd21ee8259d1f3b2776deec573733291d71a390157bb\n2022/04/08 13:22:31 output OCI image file to apko-alpine.tar\n```\n\nor, with Docker:\n\n```shell\ndocker run -v \"$PWD\":/work cgr.dev/chainguard/apko build examples/alpine-base.yaml apko-alpine:test apko-alpine.tar\n```\n\nYou can then load the generated tar image into a Docker environment:\n\n```shell\ndocker load < apko-alpine.tar\n```\n```shell\nLoaded image: apko-alpine:test\n```\n```shell\ndocker run -it apko-alpine:test\n```\n```\ne289dc84c4ad:/# echo boo!\nboo!\n```\n\nYou can also publish the image directly to a registry:\n\n```shell\napko publish examples/alpine-base.yaml myrepo/alpine-apko:test\n```\n\nSee the [docs](./docs/apko_file.md) for details of the file format and the [examples directory](./examples) for more, err, examples!\n\n## Debugging apko Builds\n\nTo include debug-level information on apko builds, add `--debug` to your build command:\n\n```shell\ndocker run --rm -v ${PWD}:/work cgr.dev/chainguard/apko build --debug \\\n  apko.yaml hello-minicli:test hello-minicli.tar \\\n  -k melange.rsa.pub\n```\n\n## Why\n\napko was created by [Chainguard](https://www.chainguard.dev), who require secure and reproducible\ncontainer images for their tooling. Speed is also a critical factor; Chainguard require images to be\nrebuilt constantly in response to new versions and patches.\n\nThe design of apko is heavily influenced by the [ko](https://github.com/google/ko) and\n[distroless](https://github.com/GoogleContainerTools/distroless) projects.\n\n## Declarative Nature\n\nBy design, apko doesn't support an equivalent of `RUN` statements in Dockerfiles. This means apko\nfiles are fully declarative and allows apko to make stronger statements about the contents of images.\nIn particular, apko images are fully bitwise reproducible and can generate SBOMs covering their\ncomplete contents.\n\nIn order to install bespoke tooling or applications into an image, they must first be packaged into\nan apk. This can be done with apko's sister tool [melange](https://github.com/chainguard-dev/melange).\n\nThe combination of melange and apko cover the vast majority of use cases when building container\nimages. In the cases where they are not a good fit, our recommendation is to build a base image with\napko and melange, then use traditional tooling such as Dockerfiles for the final step.\n\n## Support and Further Reading\n\nTutorials and guides for apko can be found at the [Chainguard Academy](https://edu.chainguard.dev/open-source/apko/).\n\nFor support, please find us on the [Kubernetes Slack](https://kubernetes.slack.com/) in the #apko\nchannel or [open an issue](https://github.com/chainguard-dev/apko/issue).\n \n## Related Work and Resources\n\nThe [melange project](https://github.com/chainguard-dev/melange) is designed to produce apk packages to be used in apko.\n\nThe [ko](https://github.com/google/ko) project builds Go projects from source in a similar manner to apko.\n\nThe [kontain.me](https://github.com/imjasonh/kontain.me) service creates fresh container images on\ndemand using different forms of declarative configuration (including ko and apko)."
}
