{
  "name": "wagyu",
  "full_name": "wagyu",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Rust library for generating cryptocurrency wallets",
  "license": "Apache-2.0 or MIT",
  "homepage": "https://github.com/AleoHQ/wagyu",
  "versions": {
    "stable": "0.6.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/AleoHQ/wagyu/archive/refs/tags/v0.6.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "2458b3d49653acd5df5f3161205301646527eca9f6ee3d84c7871afa275bad9f"
    },
    "head": {
      "url": "https://github.com/AleoHQ/wagyu.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 2,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/wagyu/blobs/sha256:57802d359431dc4eefc7b5b38d70be730221ef164ccd327600e350eb9244465c",
          "sha256": "57802d359431dc4eefc7b5b38d70be730221ef164ccd327600e350eb9244465c"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/wagyu/blobs/sha256:ddd3c15f7b61762da075af23b4139550f61109882648de03745dfb8ac859d412",
          "sha256": "ddd3c15f7b61762da075af23b4139550f61109882648de03745dfb8ac859d412"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/wagyu/blobs/sha256:4a1163611ed4e907c5458922ca04ab13d6bb1c2f84b7de13d186f3e2f13ada34",
          "sha256": "4a1163611ed4e907c5458922ca04ab13d6bb1c2f84b7de13d186f3e2f13ada34"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/wagyu/blobs/sha256:675db40f0160e4dcc9910c5f1f511946620bac4403ce4ee5b92e97c991186f97",
          "sha256": "675db40f0160e4dcc9910c5f1f511946620bac4403ce4ee5b92e97c991186f97"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/wagyu/blobs/sha256:0a09ccc659885bddbe3daadfda30eff1a4f88bad1e2e4582567451013f855b3d",
          "sha256": "0a09ccc659885bddbe3daadfda30eff1a4f88bad1e2e4582567451013f855b3d"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/wagyu/blobs/sha256:c3deaea08b0f90132b84451b50bcc6fc5dac9e5cf540c2ef18c3c2a7ce61f8d0",
          "sha256": "c3deaea08b0f90132b84451b50bcc6fc5dac9e5cf540c2ef18c3c2a7ce61f8d0"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/wagyu/blobs/sha256:af829681e853e2a146e256548fe69da9e55fde6d974f300b342754831749bd9a",
          "sha256": "af829681e853e2a146e256548fe69da9e55fde6d974f300b342754831749bd9a"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/wagyu/blobs/sha256:a81b1c07ee67f4e0cac9e8a7ca17720e440b40c14d66e76db3f5945f862eadb9",
          "sha256": "a81b1c07ee67f4e0cac9e8a7ca17720e440b40c14d66e76db3f5945f862eadb9"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/wagyu.rb",
  "ruby_source_checksum": {
    "sha256": "51d207c9c9d248d64dd5d219b6054fd1a974c7c10b85a84646bf7adcaa7b2c46"
  },
  "date_added": "2019-10-03T12:56:27-04:00",
  "readme": "<h1 align=\"center\">\n    <img width=\"1412\" src=\"https://user-images.githubusercontent.com/9260812/62808478-09eac480-baad-11e9-92c9-f9a6ef4e7bc2.png\">\n</h1>\n<p align=\"center\">\n    <a href=\"https://crates.io/crates/wagyu\"><img src=\"https://img.shields.io/crates/v/wagyu.svg?color=neon\"></a>\n    <a href=\"https://travis-ci.com/AleoHQ/wagyu\"><img src=\"https://img.shields.io/travis/com/AleoHQ/wagyu/v0.6.3.svg\"></a>\n    <a href=\"https://codecov.io/gh/AleoHQ/wagyu\"><img src=\"https://img.shields.io/codecov/c/github/AleoHQ/wagyu.svg\"></a>\n    <a href=\"./AUTHORS\"><img src=\"https://img.shields.io/badge/authors-Aleo-orange.svg\"></a>\n    <a href=\"./LICENSE-MIT\"><img src=\"https://img.shields.io/badge/license-MIT/Apache--2.0-blue.svg\"></a>\n</p>\n\n<p align=\"center\">\n    <img src=\"https://user-images.githubusercontent.com/9260812/62804070-05b8aa00-baa1-11e9-905f-faea3d8de13b.gif\">\n</p>\n\n## <a name='TableofContents'></a>Table of Contents\n\n* [1. Overview](#1-overview)\n* [2. Build Guide](#2-build-guide)\n    * [2.1 Install Rust](#21-install-rust)\n    * [2.2a Build from Homebrew](#22a-build-from-homebrew)\n    * [2.2b Build from Crates.io](#22b-build-from-cratesio)\n    * [2.2c Build from Source Code](#22c-build-from-source-code)\n* [3. Usage Guide](#3-usage-guide)\n\t* [3.1 Generate a cryptocurrency wallet](#31-generate-a-cryptocurrency-wallet)\n\t* [3.2 Generate an HD cryptocurrency wallet](#32-generate-an-hd-cryptocurrency-wallet)\n\t* [3.3 Import a cryptocurrency wallet](#33-import-a-cryptocurrency-wallet)\n\t* [3.4 Import an HD cryptocurrency wallet](#34-import-an-hd-cryptocurrency-wallet)\n* [4. License](#4-license)\n\n## 1. Overview\n\nWagyu is a feature-rich command-line utility to generate a cryptocurrency wallet.\n\nWagyu enables developers to build their own cryptocurrency application using the following modules.\n\n| Library                                                                                                                                                      | Standard Wallet                                                       | HD Wallet                                                                                    | Mnemonic                        | Network                                                         |\n|:------------------------------------------------------------------------------------------------------------------------------------------------------------:|-----------------------------------------------------------------------|----------------------------------------------------------------------------------------------|---------------------------------|-----------------------------------------------------------------|\n| [**wagyu-bitcoin**](./bitcoin)   <br/> [![Crates.io](https://img.shields.io/crates/v/wagyu-bitcoin.svg?color=neon)](https://crates.io/crates/wagyu-bitcoin)  | <br/><ul><li>P2PKH</li><li>P2SH-P2WPKH</li><li>Bech32</li></ul>       | <br/><ul><li>BIP-32</li><li>BIP-44</li><li>BIP-49</li><li>Custom</li></ul>                   | <br/><ul><li>BIP-39</li></ul>   | <br/><ul><li>Mainnet</li><li>Testnet</li></ul>                  |\n| [**wagyu-ethereum**](./ethereum) <br/> [![Crates.io](https://img.shields.io/crates/v/wagyu-ethereum.svg?color=neon)](https://crates.io/crates/wagyu-ethereum)| <br/><ul><li>Standard</li></ul>                                       | <br/><ul><li>Ethereum</li><li>Ledger</li><li>Trezor</li><li>Keepkey</li><li>Custom</li></ul> | <br/><ul><li>BIP-39</li></ul>   | <br/><ul><li>All</li></ul>                                      |\n| [**wagyu-monero**](./monero)     <br/> [![Crates.io](https://img.shields.io/crates/v/wagyu-monero.svg?color=neon)](https://crates.io/crates/wagyu-monero)    | <br/><ul><li>Standard</li><li>Integrated</li><li>Subaddress</li></ul> | <br/><ul><li>N/A</ul>                                                                        | <br/><ul><li>Electrum</li></ul> | <br/><ul><li>Mainnet</li><li>Testnet</li><li>Stagenet</li></ul> |\n| [**wagyu-zcash**](./zcash)       <br/> [![Crates.io](https://img.shields.io/crates/v/wagyu-zcash.svg?color=neon)](https://crates.io/crates/wagyu-zcash)      | <br/><ul><li>P2PKH</li><li>Sprout</li><li>Sapling</li></ul>                          | <br/><ul><li>ZIP-32</li></ul>                                                 | <br/><ul><li>N/A</li></ul>      | <br/><ul><li>Mainnet</li><li>Testnet</li></ul>                  |\n\nWagyu can support new cryptocurrencies by implementing the model as outlined in this module.\n\n| Library                                                                                                                                           | Standard Wallet                                                                                                                                                | HD Wallet                                                                                                                                                                                                       | Mnemonic                                                                                                       | Network                                                   |\n|:-------------------------------------------------------------------------------------------------------------------------------------------------:|----------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------|\n| [**wagyu_model**](./model) <br/> [![Crates.io](https://img.shields.io/crates/v/wagyu-model.svg?color=neon)](https://crates.io/crates/wagyu-model) | <br/><ul><li>[Address](./model/src/address.rs)</li><li>[Public Key](./model/src/public_key.rs)</li><li>[Private Key](./model/src/private_key.rs)</li></ul>     | <br/><ul><li>[Derivation Path](./model/src/derivation_path.rs)</li><li>[Extended Public Key](./model/src/extended_public_key.rs)</li><li>[Extended Private Key](./model/src/extended_private_key.rs)</li></ul>  | <br/><ul><li>[Mnemonic](./model/src/mnemonic.rs)</li><li>[Wordlist](model/src/wordlist/wordlist.rs)</li></ul>  |<br/><ul><li>[Network](./model/src/network.rs)</li></ul>   |\n\n\n## 2. Build Guide\n\n### 2.1 Install Rust\n\nWe recommend installing Rust using [rustup](https://www.rustup.rs/). You can install `rustup` as follows:\n\n- macOS or Linux:\n  ```bash\n  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n  ```\n\n- Windows (64-bit):  \n  \n  Download the [Windows 64-bit executable](https://win.rustup.rs/x86_64) and follow the on-screen instructions.\n\n- Windows (32-bit):  \n  \n  Download the [Windows 32-bit executable](https://win.rustup.rs/i686) and follow the on-screen instructions.\n\n### 2.2a Build from Homebrew (for macOS)\n\nFor macOS users, we recommend installing `wagyu` via Homebrew as follows:\n\n```bash\nbrew install wagyu\n```\n\n### 2.2b Build from Crates.io\n\nWe recommend installing `wagyu` this way. In your terminal, run:\n\n```bash\ncargo install wagyu\n```\n\nNow to use `wagyu`, in your terminal, run:\n```bash\nwagyu\n```\n \n### 2.2c Build from Source Code\n\nAlternatively, you can install `wagyu` by building from the source code as follows:\n\n```bash\n# Download the source code\ngit clone https://github.com/AleoHQ/wagyu\ncd wagyu\n\n# Build in release mode\n$ cargo build --release\n```\n\nThis will generate an executable under the `./target/release` directory. To use wagyu, run the following command:\n```bash\n./target/release/wagyu\n```\n\n## 3. Usage Guide\n\n### 3.1 Generate a cryptocurrency wallet\n\nTo generate a cryptocurrency wallet, run:\n```\nwagyu [CRYPTOCURRENCY] [FLAGS] [OPTIONS]\n```\n\n#### 3.1.1 Bitcoin\n\nTo generate a Bitcoin wallet, run:\n```\nwagyu bitcoin [FLAGS] [OPTIONS]\n```\n\nThe command can be run with the following optional parameters:\n```\nFLAGS:\n    -h, --help    Prints help information\n    -j, --json    Prints the generated wallet(s) in JSON format\n\nOPTIONS:\n    -c, --count <count>        Generates a specified number of wallets\n    -f, --format <format>      Generates a wallet with a specified format [possible values: bech32, legacy, segwit]\n    -n, --network <network>    Generates a wallet for a specified network [possible values: mainnet, testnet]\n```\n\n#### 3.1.2 Ethereum\n\nTo generate an Ethereum wallet, run:\n```\nwagyu ethereum [FLAGS] [OPTIONS]\n```\n\nThe command can be run with the following optional parameters:\n```\nFLAGS:\n    -h, --help    Prints help information\n    -j, --json    Prints the generated wallet(s) in JSON format\n\nOPTIONS:\n    -c, --count <count>    Generates a specified number of wallets\n```\n\n\n#### 3.1.3 Monero\n\nTo generate a Monero wallet, run:\n```\nwagyu monero [FLAGS] [OPTIONS]\n```\n\nThe command can be run with the following parameters: \n\n```\nFLAGS:\n    -h, --help    Prints help information\n    -j, --json    Prints the generated wallet(s) in JSON format\n\nOPTIONS:\n    -c, --count <count>                             Generates a specified number of wallets\n    -i, --integrated <PaymentID>                    Generates a wallet with a specified payment ID\n    -l, --language <language>                       Generates a wallet with a specified language [possible values: chinese_simplified, dutch, english, esperanto, french, german, italian, japanese, lojban, portuguese, russian, spanish]\n    -n, --network <network>                         Generates a wallet for a specified network [possible values: mainnet, stagenet, testnet]\n    -s, --subaddress <Major Index> <Minor Index>    Generates a wallet with a specified major and minor index\n```\n\n#### 3.1.4 Zcash\n\nTo generate a Zcash wallet, run:\n```\nwagyu zcash [FLAGS] [OPTIONS]\n```\n\nThe command can be run with the following parameters: \n\n```\nFLAGS:\n    -h, --help    Prints help information\n    -j, --json    Prints the generated wallet(s) in JSON format\n\nOPTIONS:\n    -c, --count <count>                Generates a specified number of wallets\n        --diversifier <diversifier>    Generates a wallet with a specified Sapling address diversifier\n    -f, --format <format>              Generates a wallet with a specified format [possible values: sapling, sprout, transparent]\n    -n, --network <network>            Generates a wallet for a specified network [possible values: mainnet, testnet]\n```\n\n### 3.2 Generate an HD cryptocurrency wallet\n\nTo generate an HD cryptocurrency wallet, run:\n```\nwagyu [CRYPTOCURRENCY] hd [FLAGS] [OPTIONS]\n```\n\n#### 3.2.1 Bitcoin\n\nTo generate a Bitcoin HD wallet, run:\n```\nwagyu bitcoin hd [FLAGS] [OPTIONS]\n```\n\nThis command can be run with the following parameters:\n```\nFLAGS:\n    -h, --help    Prints help information\n    -j, --json    Prints the generated wallet(s) in JSON format\n\nOPTIONS:\n    -c, --count <count>              Generates a specified number of wallets\n    -d, --derivation <\"path\">        Generates an HD wallet for a specified derivation path (in quotes) [possible values: bip32, bip44, bip49, \"<custom path>\"]\n    -l, --language <language>        Generates an HD wallet with a specified language [possible values: chinese_simplified, chinese_traditional, english, french, italian, japanese, korean, spanish]\n    -n, --network <network>          Generates an HD wallet for a specified network [possible values: mainnet, testnet]\n    -p, --password <password>        Generates an HD wallet with a specified password\n    -w, --word-count <word count>    Generates an HD wallet with a specified word count [possible values: 12, 15, 18, 21, 24]\n```\n\n#### 3.2.2 Ethereum\n\nTo generate an Ethereum HD wallet, run:\n```\nwagyu ethereum hd [FLAGS] [OPTIONS]\n```\n\nThe command can be run with the following parameters: \n```\nFLAGS:\n    -h, --help    Prints help information\n    -j, --json    Prints the generated wallet(s) in JSON format\n\nOPTIONS:\n    -c, --count <count>              Generates a specified number of wallets\n    -d, --derivation <\"path\">        Generates an HD wallet for a specified derivation path (in quotes) [possible values: ethereum, keepkey, ledger-legacy, ledger-live, trezor, \"<custom path>\"]\n    -i, --index <index>              Generates an HD wallet with a specified index\n    -k, --indices <num_indices>      Generates an HD wallet with a specified number of indices\n    -l, --language <language>        Generates an HD wallet with a specified language [possible values: chinese_simplified, chinese_traditional, english, french, italian, japanese, korean, spanish]\n    -p, --password <password>        Generates an HD wallet with a specified password\n    -w, --word-count <word count>    Generates an HD wallet with a specified word count [possible values: 12, 15, 18, 21, 24]\n```\n\n#### 3.2.3 Zcash\n\nTo generate a Zcash HD wallet, run:\n```\nwagyu zcash hd [FLAGS] [OPTIONS]\n```\n\nThe command can be run with the following parameters: \n```\nFLAGS:\n    -h, --help    Prints help information\n    -j, --json    Prints the generated wallet(s) in JSON format\n\nOPTIONS:\n    -c, --count <count>                Generates a specified number of wallets\n    -d, --derivation <\"path\">          Generates an HD wallet for a specified derivation path (in quotes) [possible values: zip32, \"<custom path>\"]\n        --diversifier <diversifier>    Imports a wallet with a specified Sapling address diversifier\n    -n, --network <network>            Generates an HD wallet for a specified network [possible values: mainnet, testnet]\n```\n\n### 3.3 Import a cryptocurrency wallet\n\nTo import a cryptocurrency wallet, run:\n```\nwagyu [CRYPTOCURRENCY] import [FLAGS] [OPTIONS]\n```\n\n#### 3.3.1 Bitcoin\n\nTo import a Bitcoin wallet, run:\n```\nwagyu bitcoin import [FLAGS] [OPTIONS]\n```\n\nThis command can be run with the following parameters:\n```\nFLAGS:\n    -h, --help    Prints help information\n    -j, --json    Prints the generated wallet(s) in JSON format\n\nOPTIONS:\n        --address <address>        Imports a partial wallet for a specified address\n    -f, --format <format>          Imports a wallet with a specified format [possible values: bech32, legacy, segwit]\n    -n, --network <network>        Imports a wallet for a specified network [possible values: mainnet, testnet]\n        --private <private key>    Imports a wallet for a specified private key\n        --public <public key>      Imports a partial wallet for a specified public key\n```\n\n#### 3.3.2 Ethereum\n\nTo import an Etheruem wallet, run:\n```\nwagyu ethereum import [FLAGS] [OPTIONS]\n```\n\nThis command can be run with the following parameters:\n\n```\nFLAGS:\n    -h, --help    Prints help information\n    -j, --json    Prints the generated wallet(s) in JSON format\n\nOPTIONS:\n        --address <address>        Imports a partial wallet for a specified address\n        --private <private key>    Imports a wallet for a specified private key\n        --public <public key>      Imports a partial wallet for a specified public key\n```\n\n#### 3.3.3 Monero\n\nTo import a Monero wallet, run:\n```\nwagyu monero import [FLAGS] [OPTIONS]\n```\n\nThis command can be run with the following parameters:\n```\nFLAGS:\n    -h, --help    Prints help information\n    -j, --json    Prints the generated wallet(s) in JSON format\n\nOPTIONS:\n        --address <address>                         Imports a partial wallet for a specified address\n    -i, --integrated <PaymentID>                    Imports a wallet with a specified payment ID\n    -l, --language <language>                       Imports a wallet with a specified mnemonic language (requires private spend key) [possible values: chinese_simplified, dutch, english, esperanto, french, german, italian, japanese, lojban, portuguese, russian, spanish]\n    -m, --mnemonic <\"mnemonic\">                     Imports a wallet for a specified mnemonic (in quotes)\n    -n, --network <network>                         Imports a wallet for a specified network [possible values: mainnet, stagenet, testnet]\n        --private-spend <private spend key>         Imports a wallet for a specified private spend key\n        --private-view <private view key>           Imports a partial wallet for a specified private view key\n        --public-spend <public spend key>           Imports a partial wallet for a specified public spend key\n        --public-view <public view key>             Imports a partial wallet for a specified public view key\n    -s, --subaddress <Major Index> <Minor Index>    Imports a wallet with a specified major and minor index\n```\n\n#### 3.3.4 Zcash\n\nTo import a Zcash wallet, run:\n```\nwagyu zcash import [FLAGS] [OPTIONS]\n```\n\nThis command can be run with the following parameters:\n\n```\nFLAGS:\n    -h, --help    Prints help information\n    -j, --json    Prints the generated wallet(s) in JSON format\n\nOPTIONS:\n        --address <address>            Imports a partial wallet for a specified address\n        --diversifier <diversifier>    Imports a wallet with a specified Sapling address diversifier\n        --private <private key>        Imports a wallet for a specified private key\n        --public <public key>          Imports a partial wallet for a specified public key\n```\n\n### 3.4 Import an HD cryptocurrency wallet\n\nTo import an HD cryptocurrency wallet, run:\n```\nwagyu [CRYPTOCURRENCY] import-hd [FLAGS] [OPTIONS]\n```\n\n#### 3.4.1 Bitcoin\n\nTo import a Bitcoin HD wallet, run:\n```\nwagyu bitcoin import-hd [FLAGS] [OPTIONS]\n```\n\nThis command can be run with the following parameters:\n```\nFLAGS:\n    -h, --help    Prints help information\n    -j, --json    Prints the generated wallet(s) in JSON format\n\nOPTIONS:\n    -a, --account <account>                      Imports an HD wallet for a specified account number for bip44 and bip49 derivations\n    -c, --chain <chain>                          Imports an HD wallet for a specified (external/internal) chain for bip44 and bip49 derivations [possible values: 0, 1]\n    -d, --derivation <\"path\">                    Imports an HD wallet for a specified derivation path (in quotes) [possible values: bip32, bip44, bip49, \"<custom path>\"]\n        --extended-private <extended private>    Imports a partial HD wallet for a specified extended private key\n        --extended-public <extended public>      Imports a partial HD wallet for a specified extended public key\n    -i, --index <index>                          Imports an HD wallet for a specified index\n    -m, --mnemonic <\"mnemonic\">                  Imports an HD wallet for a specified mnemonic (in quotes)\n    -n, --network <network>                      Imports an HD wallet for a specified network [possible values: mainnet, testnet]\n    -p, --password <password>                    Imports an HD wallet with a specified password\n```\n\n#### 3.4.2 Ethereum\n\nTo import an Ethereum HD wallet, run:\n```\nwagyu ethereum import-hd [FLAGS] [OPTIONS]\n```\n\nThis command can be run with the following parameters:\n\n```\nFLAGS:\n    -h, --help    Prints help information\n    -j, --json    Prints the generated wallet(s) in JSON format\n\nOPTIONS:\n    -d, --derivation <\"path\">                    Imports an HD wallet for a specified derivation path (in quotes) [possible values: ethereum, keepkey, ledger-legacy, ledger-live, trezor, \"<custom path>\"]\n        --extended-private <extended private>    Imports a partial HD wallet for a specified extended private key\n        --extended-public <extended public>      Imports a partial HD wallet for a specified extended public key\n    -i, --index <index>                          Imports an HD wallet with a specified index\n    -k, --indices <num_indices>                  Imports an HD wallet with a specified number of indices\n    -m, --mnemonic <\"mnemonic\">                  Imports an HD wallet for a specified mnemonic (in quotes)\n    -p, --password <password>                    Imports an HD wallet with a specified password\n```\n\n#### 3.4.3 Zcash\n\nTo import a Zcash HD wallet, run:\n```\nwagyu zcash import-hd [FLAGS] [OPTIONS]\n```\n\nThis command can be run with the following parameters:\n\n```\nFLAGS:\n    -h, --help    Prints help information\n    -j, --json    Prints the generated wallet(s) in JSON format\n\nOPTIONS:\n    -a, --account <account>                      Imports an HD wallet for a specified account number for bip44 and bip49 derivations\n    -d, --derivation <\"path\">                    Imports an HD wallet for a specified derivation path (in quotes) [possible values: zip32, \"<custom path>\"]\n        --diversifier <diversifier>              Imports an HD wallet with a specified Sapling address diversifier\n        --extended-private <extended private>    Imports a partial HD wallet for a specified extended private key\n        --extended-public <extended public>      Imports a partial HD wallet for a specified extended public key\n    -i, --index <index>                          Imports an HD wallet for a specified index\n```\n\n### 3.5 Generate a cryptocurrency transaction\n\n\nTo import an HD cryptocurrency wallet, run:\n```\nwagyu [CRYPTOCURRENCY] transaction [FLAGS] [OPTIONS]\n```\n\n#### 3.5.1 Bitcoin\n\nTo generate a Bitcoin transaction, run:\n```\nwagyu bitcoin transaction [FLAGS] [OPTIONS]\n```\n\nThis command can be run with the following parameters:\n```\nFLAGS:\n    -h, --help    Prints help information\n    -j, --json    Prints the generated wallet(s) in JSON format\n\nOPTIONS:\n        --createrawtransaction <inputs> <outputs>          Generates a raw Bitcoin transaction\n                                                               Inputs format: '[{\"txid\":\"txid\", \"vout\":index},...]'\n                                                               Outputs format: '{\"address\":amount,...}'                                           \n        --lock-time <lock time>                            Specify a Bitcoin transaction lock time\n        --signrawtransaction <transaction hex> <inputs>    Sign a raw Bitcoin transaction\n                                                               Inputs format: '[{\"txid\":\"txid\", \"vout\":index, \"amount\":amount, \"address\":\"address\", \"privatekey\":\"private_key\"},...]'\n                                                               (Optional: manually specify scriptPubKey and redeemScript)\n        --version <version>                                Specify a Bitcoin transaction version\n```\n\n#### 3.5.2 Ethereum\n\nTo generate an Ethereum transaction, run:\n```\nwagyu ethereum transaction [FLAGS] [OPTIONS]\n```\n\nThis command can be run with the following parameters:\n\n```\nFLAGS:\n    -h, --help    Prints help information\n    -j, --json    Prints the generated wallet(s) in JSON format\n\nOPTIONS:\n        --createrawtransaction <'{\"to\":\"address\", \"value\":\"value\", \"gas\":\"gas\", \"gasPrice\":\"gas_price\", \"nonce\":nonce, \"network\":\"network\"}'>    Generates a raw Ethereum transaction\n        --network <network>                                                                                                                      Specify an Ethereum transaction network\n        --signrawtransaction <transaction hex> <private key>                                                                                     Sign a raw Ethereum transaction\n```\n\n#### 3.5.3 Zcash\n\nTo generate a Zcash transaction, run:\n```\nwagyu zcash transaction [FLAGS] [OPTIONS]\n```\n\nThis command can be run with the following parameters:\n\n```\nFLAGS:\n    -h, --help    Prints help information\n    -j, --json    Prints the generated wallet(s) in JSON format\n\nOPTIONS:\n        --createrawtransaction <inputs> <outputs>          Generates a raw Zcash transaction\n                                                               Inputs format: '[{\"txid\":\"txid\", \"vout\":index},...]'\n                                                               Outputs format: '{\"address\":amount,...}'\n        --expiry-height <expiry height>                    Specify a Zcash transaction expiry height\n        --lock-time <lock time>                            Specify a Zcash transaction lock time\n        --signrawtransaction <transaction hex> <inputs>    Sign a raw Zcash transaction\n                                                               Inputs format: '[{\"txid\":\"txid\", \"vout\":index, \"amount\":amount, \"address\":\"address\", \"privatekey\":\"private_key\"},...]'\n                                                               (Optional: manually specify scriptPubKey and redeemScript)\n        --version <version>                                Specify a Zcash transaction version [possible values: sapling]\n```\n\n#### 3.5.4 Transaction Remarks\n\n`wagyu` CLI operates offline without chain state, and thus cannot immediately craft Monero transactions or Zcash Sapling spends (Zcash Sapling outputs are supported).\n\n## 4. License\n\nThis work is licensed under either of the following licenses, at your discretion.\n\n- Apache License Version 2.0 (LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0)\n- MIT license (LICENSE-MIT or http://opensource.org/licenses/MIT)\n\nUnless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you,\nas defined in the Apache-2.0 license, shall be dual licensed as above, without any additional terms or conditions."
}
