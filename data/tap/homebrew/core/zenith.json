{
  "name": "zenith",
  "full_name": "zenith",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "In terminal graphical metrics for your *nix system",
  "license": "MIT",
  "homepage": "https://github.com/bvaisvil/zenith/",
  "versions": {
    "stable": "0.14.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/bvaisvil/zenith/archive/0.14.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "2cbcea2625cfa97c161b974ad412a47e330f7fd31bec0479e329ed3606cfc569"
    },
    "head": {
      "url": "https://github.com/bvaisvil/zenith.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 1,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zenith/blobs/sha256:a7e798fd4a122923dbc8e1918829b9e3359a7c414bc68bede6177fb7fd2453fc",
          "sha256": "a7e798fd4a122923dbc8e1918829b9e3359a7c414bc68bede6177fb7fd2453fc"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zenith/blobs/sha256:a72ea12db621b2eb9243573586d3b769330742dfc8bb45a55c9708964192b123",
          "sha256": "a72ea12db621b2eb9243573586d3b769330742dfc8bb45a55c9708964192b123"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zenith/blobs/sha256:f929e8ab0b948d3638012111c33813c098e7060aa3918d42cbaefb99e9c43924",
          "sha256": "f929e8ab0b948d3638012111c33813c098e7060aa3918d42cbaefb99e9c43924"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zenith/blobs/sha256:8211610bb6b9f31578a9990bedd73fc4a31ce0e70faadfffee3b065b4cb5746d",
          "sha256": "8211610bb6b9f31578a9990bedd73fc4a31ce0e70faadfffee3b065b4cb5746d"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zenith/blobs/sha256:aa08396983f63d03a509641a4eec6a471cf5f6c3402ede16be76e7b5de517b71",
          "sha256": "aa08396983f63d03a509641a4eec6a471cf5f6c3402ede16be76e7b5de517b71"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zenith/blobs/sha256:a31ea9fcae037b05887b2d1cb82c01602f61b3ac4161a5e63dacce70d0a9ea05",
          "sha256": "a31ea9fcae037b05887b2d1cb82c01602f61b3ac4161a5e63dacce70d0a9ea05"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zenith/blobs/sha256:2326336b1c105cfeb1927684314cee9f38c5df89e27428e26264c0dec817f711",
          "sha256": "2326336b1c105cfeb1927684314cee9f38c5df89e27428e26264c0dec817f711"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    {
      "llvm": "build"
    }
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/zenith.rb",
  "ruby_source_checksum": {
    "sha256": "6718bc34bd94d091ef53de7833955b0caef6c6ebd3a709b6d5b3c5eba9a0da5d"
  },
  "date_added": "2020-05-21T22:44:28+00:00",
  "readme": "# Zenith \n\n## In terminal graphical metrics for your *nix system written in Rust\n\n<img src=\"./assets/zenith_screenshot.png\" alt=\"Running zenith on alacritty on MacOS\">\n\n## Features\n\n- Optional CPU, Memory, Network, and Disk usage charts\n- Quick glances at Disk free space, NIC IP addresses, CPU frequency\n- Highlight top users of CPU, Memory, & Disk\n- Battery percentage, time to charge or discharge, power used\n- A top-like filterable process table that includes per process disk usage\n- Change process priority\n- Zoomable chart views (with support to scroll back in time)\n- Managing processes with signals\n- Performance data saved between runs\n- GPU Utilization Metrics for NVIDIA GPUs (with `--features nvidia`), including per-process GPU usage\n- Disk free space charts\n- [Delay accounting](https://www.kernel.org/doc/html/latest/accounting/delay-accounting.html) (on Linux when running zenith with root permissions)\n\n<img src =\"./assets/zenith_with_gpu.png\" alt=\"zenith running on linux in iTerm2\">\n\n\n## Planned Features\n\n- CPU steal percentage and general virtualization awareness\n- Sensor Temperature charts\n- Per process network usage (Linux)\n- Messaging about adverse system events, like errors in kernel ring buffer (Linux)\n- Docker support\n- ZFS (pool status)\n- GPU utilization metrics for AMD GPUS\n- Disk metrics like IO ops / latency\n- Support Memory pressure\n\n## Current Platforms\n\n- Linux\n- MacOS\n\n## Planned Platforms\n\n- BSD (OpenBSD/FreeBSD)\n- Perhaps Redox OS.\n\n## Installation\n\n<a href=\"https://repology.org/project/zenith/versions\"><img src=\"https://repology.org/badge/vertical-allrepos/zenith.svg\" alt=\"Packaging status\" align=\"right\"></a>\n\n### Binary\n\nDownload one of the compiled [releases](https://github.com/bvaisvil/zenith/releases).\n\n### Debian/Ubuntu based Linux distributions (64-bit)\n\nThe latest 64-bit deb packages are available [here](https://github.com/bvaisvil/zenith/releases) and require distributions based on Debian >= 9 or Ubuntu >= 16.04\n\nYou can also install and update the `.deb` packages we publish in our GitHub releases page using [deb-get](https://github.com/wimpysworld/deb-get).\nFirst install `deb-get` using these commands in a terminal:\n```bash\nsudo apt install curl\ncurl -sL https://raw.githubusercontent.com/wimpysworld/deb-get/main/deb-get | sudo -E bash -s install deb-get\n```\nThen install zenith using the following command in terminal:\n```bash\ndeb-get install zenith\n```\nOnce zenith is installed it can be kept upto date using:\n```bash\ndeb-get update\ndeb-get upgrade\n```\n### Arch Linux\n\nzenith is available in the [community repository](https://archlinux.org/packages/community/x86_64/zenith/) and can be installed with [pacman](https://wiki.archlinux.org/title/Pacman):\n\n```bash\npacman -S zenith\n```\n\nThere are also packages available in the AUR: zenith-git and zenith-bin\n\nThe zenith-bin package uses the deb package mentioned in previous section and can be used to avoid building the package from source. The first two depend on rust/cargo and it is recommended to install the rustup package from AUR instead of the rust package from official repositories. This allows for easy installation of rust components as per what rust officially documents. You will need to install a toolchain separately with rustup so use something like:\n\n```bash\nyay -S rustup\nrustup toolchain install stable\nrustup default stable\n```\n\nChange the 'stable' toolchain above to beta/nightly/... if you have some specific preference. After this install the preferred AUR package: ```yay -S zenith-git``` (will track the latest git revision)\n\n### Homebrew\n\n```bash\nbrew install zenith\n```\n\n### Cargo\n\n```\ncargo install --git https://github.com/bvaisvil/zenith.git\n```\n\nFor NVIDIA GPU support, install with feature `nvidia`:\n\n```\ncargo install --features nvidia --git https://github.com/bvaisvil/zenith.git\n```\n\n## Building\n\n### Prerequisites\n\nBuilding requires rust version >= 1.40 and libclang development packages.\n\n#### Rust:\nInstall from your preferred package manager or preferrably use [rustup.rs](https://rustup.rs/)\n\n#### [Clang](https://clang.llvm.org/) development packages:\n- Ubuntu/Debian:\n`sudo apt-get install libclang-dev`\n- CentOS/RHL/Fedora\n`sudo [yum/dnf] install clang`\n\nZenith builds under rustc version >= 1.40.0.\n\n```\ncd zenith\ncargo build --release\n```\n\nFor NVIDIA GPU support, build with feature `nvidia`:\n\n```cargo build --release --features nvidia```\n\nThe minimum supported NVIDIA driver version is 418.56\n\nThere is also a Makefile that detects the presence of NVIDIA driver on the\ncurrent system and builds the appropriate flavor on Linux.\n\n```make && sudo make install```\n\nIf for some reason the Makefile incorrectly detects NVIDIA driver installation\nor in case of a broken installation (e.g. libnvidia-ml.so.1 present but no\nlibnvidia-ml.so) then explicitly skip it using the `base` target:\n\n```make base && sudo make install```\n\nThe default installation path is `/usr/local` so `make install` requires root\nprivileges above. To install in a custom location use PREFIX like below:\n\n```make && make install PREFIX=$HOME/zenith```\n\nThere is also an 'all' target in the Makefile that will build both the flavors on Linux,\nif NVIDIA driver is detected, and 'make install' will then copy a wrapper 'zenith' script\nthat chooses the appropriate binary at runtime.\n\n### Static build\n\nThe make file provides for building fully static versions on Linux against the musl C library.\nIt requires musl-gcc to be installed on the system. Install \"musl-tools\" package on debian/ubuntu\nderivatives, \"musl-gcc\" on fedora and equivalent on other distributions from their standard repos.\n\nUse the target \"linux-static\" to build it. This will create a tarball containing the executable\naccompanied with file containing sha256 sum.\n\nNVIDIA drivers normally do not ship with static versions of the libraries, so the static\nbuild skips that configuration. However, if you somehow get hold of static NVIDIA\nlibraries or are okay for dynamic linking for that executable, then you can explicitly\nset the BUILD_NVIDIA flag to true:\n\n```make linux-static BUILD_NVIDIA=true```\n\n### Building with NVIDIA support in a virtual environment\n\nIf one needs to build with NVIDIA support in a virtual environment, then it requires some more\nsetup since typically the VM software is unable to directly expose NVIDIA GPU.\nUnlike the runtime zenith script, the Makefile has been setup to detect only the presence of\nrequired NVIDIA libraries, so it is possible to build with NVIDIA support even when without\nNVIDIA GPU.\n\nInstall the nvidia driver package as per the distribution recommended way. For example\nin Ubuntu < 18.04 add the NVIDIA PPA (https://launchpad.net/~graphics-drivers/+archive/ubuntu/ppa)\nand install the nvidia-430 package. For newer versions install nvidia-driver-440/450 package.\n\nAfter that disable the actual use of the driver using \"sudo prime-select intel\". Then while\nbuilding with Makefile you will need to explicitly add the NVIDIA library path to LD_LIBRARY_PATH.\nFor instance on Ubuntu and derivatives, something like:\n\n```\n  export LD_LIBRARY_PATH=/usr/lib/nvidia-430\n  make && sudo make install\n```\n\n### Building deb package\n\nDebian package support is present in the source tree. Install devscripts package and use standard\noptions like \"debuild -b -uc -us\" to build an unsigned deb package in the directory above.\nIn a virtual environment build, LD_LIBRARY_PATH can be explicitly set like:\n\n```debuild -eLD_LIBRARY_PATH=/usr/lib/nvidia-430 -b -uc -us```\n\nCargo can be installed from the repositories or the standard rustup way. Latter would be normally\nrecommended if one needs to do anything more than just building in a virtual environment. For\nthat case $HOME/.cargo/bin should be in PATH and mark PATH so that debuild does not sanitize it:\n\n```debuild -ePATH -eLD_LIBRARY_PATH=/usr/lib/nvidia-430 -b -uc -us```\n\nClean up using \"./debian/rules clean\" rather than \"make clean\" to clear debian build files too.\n\n\n## Usage\n\nRunning with no arguments starts zenith with the default visualizations for CPU, Disk, and Network and a refresh rate of 2000 ms (2 seconds). These can be changed with command line parameters:\n\n```USAGE:\n    zenith [FLAGS] [OPTIONS]\n\nFLAGS:\n        --disable-history    Disables history when flag is present\n    -h, --help               Prints help information\n    -V, --version            Prints version information\n\nOPTIONS:\n    -c, --cpu-height <INT>        Min Percent Height of CPU/Memory visualization. [default: 17]\n        --db <STRING>             Database to use, if any. [default: ~/.zenith]\n    -d, --disk-height <INT>       Min Percent Height of Disk visualization. [default: 17]\n    -n, --net-height <INT>        Min Percent Height of Network visualization. [default: 17]\n    -p, --process-height <INT>    Min Percent Height of Process Table. [default: 32]\n    -r, --refresh-rate <INT>      Refresh rate in milliseconds. [default: 2000]\n    -g, --graphics-height <INT>   Min Percent Height of Graphics Card visualization. [default: 17]\n```\n\nThe graphics-height option only applies when NVIDIA GPU support has been enabled.\n\nDon't want a section? Remove it by setting the height to 0. \n\nFor example: ```zenith -c 0``` removes the CPU chart.\n\nUp/down arrow keys move around the process table. Return (enter) will focus on a process.\nTab switches the active section. Active sections can be expanded (e) and minimized (m). \n+/- (or =/-) will zoom in / out all of the charts. Arrow keys (←/→) move forward/backward in time.\nBack tick (`) resets the chart to current time and max zoom.\nUsing these options you can create the layout you want.\n\nIn zenith 'h' key will show this help:\n\n<img src=\"./assets/help.png\" alt=\"Running zenith on iTerm2 on MacOS\">\n\n## Built using these great crates\n\n- [tui-rs](https://github.com/fdehau/tui-rs)\n- [sysinfo](https://github.com/GuillaumeGomez/sysinfo)\n- [heim](https://github.com/heim-rs/heim)\n- [battery](https://github.com/svartalf/rust-battery)\n- [serde](https://github.com/serde-rs/serde)\n- [gumdrop](https://github.com/murarth/gumdrop)\n- [nvml-wrapper](https://github.com/Cldfire/nvml-wrapper)\n- [linux-taskstats-rs](https://github.com/kawamuray/linux-taskstats-rs)"
}
