{
  "name": "video-compare",
  "full_name": "video-compare",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Split screen video comparison tool using FFmpeg and SDL2",
  "license": "GPL-2.0-only",
  "homepage": "https://github.com/pixop/video-compare",
  "versions": {
    "stable": "20230807",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/pixop/video-compare/archive/refs/tags/20230807.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "44ed24fa05991ff92e7054e55c4d77ca41adfb633fb53e5db5add77d48a4c736"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/video-compare/blobs/sha256:f172199b3669909320a7da51f9abc2b0f2354438f75eef4c86b7b64e0c70e5a2",
          "sha256": "f172199b3669909320a7da51f9abc2b0f2354438f75eef4c86b7b64e0c70e5a2"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/video-compare/blobs/sha256:6b818b950dbe43da5bbe4d006c84da06fa0c662139b2699eee14a67a7dc03b94",
          "sha256": "6b818b950dbe43da5bbe4d006c84da06fa0c662139b2699eee14a67a7dc03b94"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/video-compare/blobs/sha256:fe2cff803ebcd8755b2648ac6cacd2578e997599dacfe7f1310286cc8daf3489",
          "sha256": "fe2cff803ebcd8755b2648ac6cacd2578e997599dacfe7f1310286cc8daf3489"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/video-compare/blobs/sha256:66627bdaa8cbb80af721552604b925f9c9acff4d8db3edb2cea5ab96f9569152",
          "sha256": "66627bdaa8cbb80af721552604b925f9c9acff4d8db3edb2cea5ab96f9569152"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/video-compare/blobs/sha256:8ace253cab7f36af04101258d1360ed063ab0e714f2b3fafe43066cd83d9a4ba",
          "sha256": "8ace253cab7f36af04101258d1360ed063ab0e714f2b3fafe43066cd83d9a4ba"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/video-compare/blobs/sha256:9ffc7085ee110ec6385add69287f2673bf5e116add234daad180a662b0c75cb3",
          "sha256": "9ffc7085ee110ec6385add69287f2673bf5e116add234daad180a662b0c75cb3"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/video-compare/blobs/sha256:1da24011a743ea8f8d73b984b7556df6b737d1f4aa1dfc5a9352680e51698efd",
          "sha256": "1da24011a743ea8f8d73b984b7556df6b737d1f4aa1dfc5a9352680e51698efd"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "ffmpeg",
    "sdl2",
    "sdl2_ttf"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/video-compare.rb",
  "ruby_source_checksum": {
    "sha256": "b82a36e253a01a903d45bd664333ca25363c41ee8c9dc97b5c7cc8a30b9a5a0c"
  },
  "date_added": "2023-01-06T04:53:46+00:00",
  "readme": "# video-compare\n\n[![GitHub release](https://img.shields.io/github/release/pixop/video-compare)](https://github.com/pixop/video-compare/releases)\n\nSplit screen video comparison tool written in C++14 using FFmpeg libraries and SDL2.\n\n`video-compare` can be used to visually compare e.g. the effect of codecs and resizing algorithms on\ntwo video files played in sync. The tool is not very restrictive as videos are not required to be the\nsame resolution, color format, container format, codec or duration. However, for the best result video\nfiles should have the same frame rate.\n\nA movable slider enables easy viewing of the difference across any region of interest.\n\nThanks to the versatility of FFmpeg, it is actually also possible to use `video-compare` to compare\ntwo images. The common PNG and JPEG formats have been successfully tested to work.\n\n## Installation\n\n### Homebrew\n\nInstall [via Homebrew](https://formulae.brew.sh/formula/video-compare):\n\n```sh\nbrew install video-compare\n```\n\n### Pre-compiled Windows 10 binaries\n\nPre-built Windows 10 x86 64-bit releases are available from [this page](https://github.com/pixop/video-compare/releases).\nDownload and extract the .zip-archive on your system, then run `video-compare.exe` from a command prompt.\n\n### Compile from source\n\n[Build it yourself](#build).\n\n## Screenshots\n\nVisual compare mode:\n![Visual compare mode](screenshot_1.jpg?raw=true)\n\nSubtraction mode (plus time-shift and zoom):\n![Subtraction mode\"](screenshot_2.jpg?raw=true)\n\nVertically stacked mode:\n![Stacked mode\"](screenshot_3.jpg?raw=true)\n\n## Credits\n\n`video-compare` was created by Jon Frydensbjerg (email: jon@pixop.com). The code is mainly based on\nthe excellent video player GitHub project: https://github.com/pockethook/player\n\nMany thanks to the [FFmpeg](https://github.com/FFmpeg/FFmpeg), [SDL2](https://github.com/libsdl-org/SDL) and\n[stb](https://github.com/nothings/stb) authors.\n\n## Usage\n\nLaunch using the operating system's DPI setting. Video pixels are doubled on devices like a Retina 5K display; \ntherefore, it is the preferred option for displaying HD 1080p videos on such screens:\n\n    video-compare video1.mp4 video2.mp4\n\nAllow high DPI mode on systems which supports that. Video pixels are displayed \"1-to-1\". Useful\nfor e.g. displaying UHD 4K video on a Retina 5K display:\n\n    video-compare -d video1.mp4 video2.mp4\n\nIncrease bit depth to 10 bits per color component (8 bits is the default). Fidelity is increased while\nperformance takes a hit. Significantly reduces visible banding on systems with a higher grade display \nand driver support for 30-bit color:\n\n    video-compare -b video1.mp4 video2.mp4\n\nUse a specific window size instead of deriving the window size from the video dimensions. The video\nframe will be scaled to fit. If either width or height is left out, the missing value will be calculated\nfrom the other specified dimension so that aspect ratio is maintained. Useful for downscaling high resolution\nvideo onto a low resolution display:\n\n    video-compare -w 1280x720 video1.mp4 video2.mp4\n\nShift the presentation time stamps of the right video instead of assuming the videos are aligned. A\npositive amount has the effect of delaying the left video while negative values conversely delays the\nright video. Useful when videos are slightly out of sync:\n\n    video-compare -t 0.080 video1.mp4 video2.mp4\n\nDisplay videos stacked vertically at full size without a slider (`hstack` for horizontal stacking is\nalso supported):\n\n    video-compare -m vstack video1.mp4 video2.mp4\n\nPreprocess one or both inputs via a list of FFmpeg video filters specified on the command line\n(see [FFmpeg's video filters documentation](https://ffmpeg.org/ffmpeg-filters.html#Video-Filters)).\nThe Swiss Army knife for cropping/padding (comparing videos with different aspect ratios),\nadjusting colors, deinterlacing, denoising, speeding up/slowing down, etc.:\n\n    video-compare -l crop=iw:ih-240 -r format=gray,pad=iw+320:ih:160:0 video1.mp4 video2.mp4\n\nManually set the demuxer and decoder used for each video. Useful for selecting a demuxer that cannot be\nauto-detected (such as VapourSynth) or enabling hardware-accelerated decoding:\n\n    video-compare --left-demuxer vapoursynth --right-decoder h264_cuvid script.vpy video.mp4\n\nPerform simpler comparison of a video with itself using double underscore (`__`) as a placeholder. This\nenables tasks such as comparing the video with a time-shifted version of itself or testing various sets\nof filters, without the need to enter the same, potentially long path twice:\n\n    video-compare some/very/long/and/complicated/video/path.mp4 __\n\nThe above features can be combined in any order, of course. Launch `video-compare` without any arguments to\nsee all supported options.\n\n## Controls\n\n- Space: Toggle play/pause\n- Escape: Quit\n- Down arrow: Seek 15 seconds backward\n- Left arrow: Seek 1 second backward\n- Page down: Seek 600 seconds backward\n- Up arrow: Seek 15 seconds forward\n- Right arrow: Seek 1 second forward\n- Page up: Seek 600 seconds forward\n- S: Swap left and right video\n- A: Previous frame\n- D: Next frame\n- F: Save both frames as PNG images in the current directory\n- P: Print mouse position and pixel value under cursor to console\n- Z: Zoom area around cursor (result shown in lower left corner)\n- C: Zoom area around cursor (result shown in lower right corner)\n- 1: Toggle hide/show left video\n- 2: Toggle hide/show right video\n- 3: Toggle hide/show HUD\n- 0: Toggle video/subtraction mode\n- +: Time-shift right video 1 frame forward\n- -: Time-shift right video 1 frame backward\n\nMove the mouse horizontally to adjust the movable slider position.\n\nClick the mouse to perform a time seek based on the horizontal position of the mouse cursor\nrelative to the window width (the target position is shown in the lower right corner).\n\nHold CTRL while time-shifting with +/- for faster increments/decrements of 10 frames per\nkeystroke. Similarly, hold down the ALT key for even bigger time-shifts of 100 frames.\n\n## Build\n\n### Requirements\n\nRequires FFmpeg headers and development libraries to be installed, along with SDL2 and its\nTrueType font rendering add on (libsdl2_ttf).\n\nOn Debian GNU/Linux the required development packages can be installed via `apt`:\n\n```sh\napt install libavformat-dev libavcodec-dev libavfilter-dev libavutil-dev libswscale-dev libsdl2-dev libsdl2-ttf-dev\n```\n\n### Instructions\n\nCompile the source code via GNU Make:\n\n```sh\nmake\n```\n\nThe linked `video-compare` executable will be created in the soure code directory. To perform a system wide installation:\n\n```sh\nmake install\n```\n\nNote that root privileges are required to perform this operation in most environments (hint: use e.g. `sudo`).\n\n## Notes\n\n1. Audio playback is not supported.\n\n2. Keep time-shifts below a few seconds for the best experience.\n\n3. Seeks require re-synchronization on the closest keyframe (i.e., I-frame).\n\n## Practical tips\n\n### Send To integration in Windows File Explorer\n\nYou can fire up the tool directly from the File Explorer when you don't need to specify\nany other arguments than the inputs via Right click -> Send To -> video-compare.\n\nHere is how this integration works:\n\nhttps://user-images.githubusercontent.com/8549626/166630445-c8c511b7-005f-48aa-83bc-0eb9676cfa2a.mp4\n\nYou can do that quickly by selecting two files, then right clicking any of them, pressing N (focuses se**n**d to),\nthen V (selects **v**ideo-compare).\n\nTo get video-compare to appear in the `Send To` field you will need to open the `send to` folder, which\nyou can access by typing `shell:sendto` in Run (Windows + R), then simply make a shortcut to `video-compare.exe`.\n\nThanks to [couleurm](https://github.com/couleurm) for the sharing this tip and creating the screen recording above."
}
