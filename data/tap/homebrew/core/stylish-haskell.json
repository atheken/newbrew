{
  "name": "stylish-haskell",
  "full_name": "stylish-haskell",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Haskell code prettifier",
  "license": "BSD-3-Clause",
  "homepage": "https://github.com/haskell/stylish-haskell",
  "versions": {
    "stable": "0.14.5.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/haskell/stylish-haskell/archive/v0.14.5.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "580af1dc2f2cc3089bb255fd0af15dfb795a9ba0d9e76b2d0ce0c9ed2bcd9f07"
    },
    "head": {
      "url": "https://github.com/haskell/stylish-haskell.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/stylish-haskell/blobs/sha256:ebcb0f2e0492c9b6c43968307057cd61ca25261d6a23b9aee234dd44159375e2",
          "sha256": "ebcb0f2e0492c9b6c43968307057cd61ca25261d6a23b9aee234dd44159375e2"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/stylish-haskell/blobs/sha256:abfcbc6d42648effa6e217618b6dde78e9cbe16ffef15b21cd04846118c2b602",
          "sha256": "abfcbc6d42648effa6e217618b6dde78e9cbe16ffef15b21cd04846118c2b602"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/stylish-haskell/blobs/sha256:b93ee0b5f1989e2d4badf31b60d2a3bb32d0e149ba77e00796a4c2e5ab7b2eb7",
          "sha256": "b93ee0b5f1989e2d4badf31b60d2a3bb32d0e149ba77e00796a4c2e5ab7b2eb7"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/stylish-haskell/blobs/sha256:94a60062523ee32639defa223cf1a9635aad22ebc4671e90d673bee8f7640d46",
          "sha256": "94a60062523ee32639defa223cf1a9635aad22ebc4671e90d673bee8f7640d46"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/stylish-haskell/blobs/sha256:9712b2e0ad967d398abb46ea9bd4800016b96ceefb67b871aec901089e752289",
          "sha256": "9712b2e0ad967d398abb46ea9bd4800016b96ceefb67b871aec901089e752289"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/stylish-haskell/blobs/sha256:4e7a9133a1ce54a317450e4a8f1a6651561968d779e29d112585c3d422faead5",
          "sha256": "4e7a9133a1ce54a317450e4a8f1a6651561968d779e29d112585c3d422faead5"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/stylish-haskell/blobs/sha256:b6ea28db8324623c8190445021b20c95b515b48dcf84fdf9011a308de125cd45",
          "sha256": "b6ea28db8324623c8190445021b20c95b515b48dcf84fdf9011a308de125cd45"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cabal-install",
    "ghc"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/stylish-haskell.rb",
  "ruby_source_checksum": {
    "sha256": "8ca5c544b96f0c5d242ee80934c9bd9c692b8297d4e4aecf44e410f9c78e78aa"
  },
  "date_added": "2022-03-20T21:36:11+00:00",
  "readme": "## stylish-haskell\n\n<img src=\"./assets/Logo/SVG/RoundedLogo.svg\" width=\"100px\">\n\n![Stack Build Status](https://github.com/jaspervdj/stylish-haskell/workflows/CI/badge.svg)\n![Cabal Build Status](https://github.com/jaspervdj/stylish-haskell/workflows/Cabal/badge.svg)\n\n## Introduction\n\nA simple Haskell code prettifier. The goal is not to format all of the code in\na file, since I find those kind of tools often \"get in the way\". However,\nmanually cleaning up import statements etc. gets tedious very quickly.\n\nThis tool tries to help where necessary without getting in the way.\n\n## Installation\n\nYou can install it using `stack install stylish-haskell` or `cabal install stylish-haskell`.\n\nYou can also install it using your package manager:\n\n- Debian 9 or later: `apt-get install stylish-haskell`\n- Ubuntu 16.10 or later: `apt-get install stylish-haskell`\n- Arch Linux: `pacman -S stylish-haskell`\n\n## Features\n\n- Aligns and sorts `import` statements\n- Groups and wraps `{-# LANGUAGE #-}` pragmas, can remove (some) redundant\n  pragmas\n- Removes trailing whitespace\n- Aligns branches in `case` and fields in records\n- Converts line endings (customizable)\n- Replaces tabs by four spaces (turned off by default)\n- Replaces some ASCII sequences by their Unicode equivalents (turned off by\n  default)\n- Format data constructors and fields in records.\n\nFeature requests are welcome! Use the [issue tracker] for that.\n\n[issue tracker]: https://github.com/haskell/stylish-haskell/issues\n\n## Example\n\nTurns:\n\n```haskell\n{-# LANGUAGE ViewPatterns, TemplateHaskell #-}\n{-# LANGUAGE GeneralizedNewtypeDeriving,\n            ViewPatterns,\n    ScopedTypeVariables #-}\n\nmodule Bad where\n\nimport Control.Applicative ((<$>))\nimport System.Directory (doesFileExist)\n\nimport qualified Data.Map as M\nimport      Data.Map    ((!), keys, Map)\n\ndata Point = Point { pointX, pointY :: Double , pointName :: String} deriving (Show)\n```\n\ninto:\n\n```haskell\n{-# LANGUAGE GeneralizedNewtypeDeriving #-}\n{-# LANGUAGE ScopedTypeVariables        #-}\n{-# LANGUAGE TemplateHaskell            #-}\n\nmodule Bad where\n\nimport           Control.Applicative ((<$>))\nimport           System.Directory    (doesFileExist)\n\nimport           Data.Map            (Map, keys, (!))\nimport qualified Data.Map            as M\n\ndata Point = Point\n    { pointX, pointY :: Double\n    , pointName      :: String\n    } deriving (Show)\n```\n\n## Configuration\n\nThe tool is customizable to some extent. It tries to find a config file in the\nfollowing order:\n\n1. A file passed to the tool using the `-c/--config` argument\n2. `.stylish-haskell.yaml` in the current directory (useful for per-directory\n   settings)\n3. `.stylish-haskell.yaml` in the nearest ancestor directory (useful for\n   per-project settings)\n4. `stylish-haskell/config.yaml` in the platform’s configuration directory\n   (on Windows, it is %APPDATA%, elsewhere it defaults to `~/.config` and\n   can be overridden by the `XDG_CONFIG_HOME` environment variable;\n   useful for user-wide settings)\n5. `.stylish-haskell.yaml` in your home directory (useful for user-wide\n   settings)\n6. The default settings.\n\nUse `stylish-haskell --defaults > .stylish-haskell.yaml` to dump a\nwell-documented default configuration to a file, this way you can get started\nquickly.\n\n## Record formatting\n\nBasically, stylish-haskell supports 4 different styles of records, controlled by `records`\nin the config file.\n\nHere's an example of all four styles:\n\n```haskell\n-- equals: \"indent 2\", \"first_field\": \"indent 2\"\ndata Foo a\n  = Foo\n      { a :: Int\n      , a2 :: String\n        -- ^ some haddock\n      }\n  | Bar\n      { b :: a\n      }\n  deriving (Eq, Show)\n  deriving (ToJSON) via Bar Foo\n\n-- equals: \"same_line\", \"first_field\": \"indent 2\"\ndata Foo a = Foo\n               { a :: Int\n               , a2 :: String\n                 -- ^ some haddock\n               }\n           | Bar\n               { b :: a\n               }\n  deriving (Eq, Show)\n  deriving (ToJSON) via Bar Foo\n\n-- equals: \"same_line\", \"first_field\": \"same_line\"\ndata Foo a = Foo { a :: Int\n                 , a2 :: String\n                   -- ^ some haddock\n                 }\n           | Bar { b :: a\n                 }\n  deriving (Eq, Show)\n  deriving (ToJSON) via Bar Foo\n\n-- equals: \"indent 2\", first_field: \"same_line\"\ndata Foo a\n  = Foo { a :: Int\n        , a2 :: String\n          -- ^ some haddock\n        }\n  | Bar { b :: a\n        }\n  deriving (Eq, Show)\n  deriving (ToJSON) via Bar Foo\n```\n\n## Editor integration\n\n### Haskell Language Server\n[Haskell Language Server(HLS)][HLS] includes a [plugin][HLS stylish-haskell Plugin]\nfor stylish-haskell. By changing the formatting provider option\n(`haskell.formattingProvider`) to `stylish-haskell` as described in\n[HLS options][HLS option], any editors that support [Language Server Protocol][LSP]\ncan use stylish-haskell for formatting.\n\n[HLS]: https://github.com/haskell/haskell-language-server\n[HLS option]: https://haskell-language-server.readthedocs.io/en/latest/configuration.html#language-specific-server-options\n[HLS stylish-haskell Plugin]: https://github.com/haskell/haskell-language-server/blob/master/plugins/hls-stylish-haskell-plugin/src/Ide/Plugin/StylishHaskell.hs\n[LSP]: https://microsoft.github.io/language-server-protocol/\n\n### VIM integration\n\nSince it works as a filter it is pretty easy to integrate this with VIM.\n\nYou can call\n\n    :%!stylish-haskell\n\nand add a keybinding for it.\n\nOr you can define `formatprg`\n\n    :set formatprg=stylish-haskell\n\nand then use `gq`.\n\nAlternatively, [vim-autoformat] supports stylish-haskell. To have it\nautomatically reformat the files on save, add to your vimrc:\n\n```vim\nautocmd BufWrite *.hs :Autoformat\n\" Don't automatically indent on save, since vim's autoindent for haskell is buggy\nautocmd FileType haskell let b:autoformat_autoindent=0\n```\n\nThere are also plugins that run stylish-haskell automatically when you save a\nHaskell file:\n\n- [vim-stylish-haskell]\n- [vim-stylishask]\n\n[vim-stylish-haskell]: https://github.com/nbouscal/vim-stylish-haskell\n[vim-stylishask]: https://github.com/alx741/vim-stylishask\n\n### Emacs integration\n\n[haskell-mode] for Emacs supports `stylish-haskell`. For configuration,\nsee [the “Using external formatters” section][haskell-mode/format] of the\nhaskell-mode manual.\n\n[haskell-mode]: https://github.com/haskell/haskell-mode\n[haskell-mode/format]: http://haskell.github.io/haskell-mode/manual/latest/Autoformating.html\n\n### Atom integration\n\n[ide-haskell] for Atom supports `stylish-haskell`.\n\n[atom-beautify] for Atom supports Haskell using `stylish-haskell`.\n\n[ide-haskell]: https://atom.io/packages/ide-haskell\n[atom-beautify]: Https://atom.io/packages/atom-beautify\n\n### Visual Studio Code integration\n\n[stylish-haskell-vscode] for VSCode supports `stylish-haskell`.\n\n[stylish-haskell-vscode]: https://github.com/vigoo/stylish-haskell-vscode\n\n## Using with Continuous Integration\n\nYou can quickly grab the latest binary and run `stylish-haskell` like so:\n\n    curl -sL https://raw.github.com/haskell/stylish-haskell/master/scripts/latest.sh | sh -s .\n\nWhere the `.` can be replaced with the arguments you pass to `stylish-haskell`.\n\n## Credits\n\nWritten and maintained by Jasper Van der Jeugt.\n\nContributors:\n\n- Chris Done\n- Hiromi Ishii\n- Leonid Onokhov\n- Michael Snoyman\n- Mikhail Glushenkov\n- Beatrice Vergani\n- Paweł Szulc\n- Łukasz Gołębiewski\n- Felix Mulder"
}
