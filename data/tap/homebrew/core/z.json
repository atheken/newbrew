{
  "name": "z",
  "full_name": "z",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Tracks most-used directories to make cd smarter",
  "license": "WTFPL",
  "homepage": "https://github.com/rupa/z",
  "versions": {
    "stable": "1.9",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/rupa/z/archive/v1.9.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "e2860e4f65770e02297ca4ca08ec1ee623a658bd9cc1acddbbe5ad22e1de70a7"
    },
    "head": {
      "url": "https://github.com/rupa/z.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 1,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/z/blobs/sha256:9c269df17bf038e3dddaf71a2fed2dcef583e5b3f0869fce963e3cae0b3524c4",
          "sha256": "9c269df17bf038e3dddaf71a2fed2dcef583e5b3f0869fce963e3cae0b3524c4"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/z/blobs/sha256:9c269df17bf038e3dddaf71a2fed2dcef583e5b3f0869fce963e3cae0b3524c4",
          "sha256": "9c269df17bf038e3dddaf71a2fed2dcef583e5b3f0869fce963e3cae0b3524c4"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/z/blobs/sha256:7709d155cd48933c2d72b4de368972a8925c45100da27739f1a41121c9882abf",
          "sha256": "7709d155cd48933c2d72b4de368972a8925c45100da27739f1a41121c9882abf"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/z/blobs/sha256:b430e19a35c4b0e3d887777d20f67c315c246c2dcfbb0ca8bd7799412d4d9b25",
          "sha256": "b430e19a35c4b0e3d887777d20f67c315c246c2dcfbb0ca8bd7799412d4d9b25"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/z/blobs/sha256:b430e19a35c4b0e3d887777d20f67c315c246c2dcfbb0ca8bd7799412d4d9b25",
          "sha256": "b430e19a35c4b0e3d887777d20f67c315c246c2dcfbb0ca8bd7799412d4d9b25"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/z/blobs/sha256:3f9c920ff5f5e5d8e0f298e94ecb18d62c2605451c67a5d5ba8a2a318dbd1b6c",
          "sha256": "3f9c920ff5f5e5d8e0f298e94ecb18d62c2605451c67a5d5ba8a2a318dbd1b6c"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/z/blobs/sha256:3f9c920ff5f5e5d8e0f298e94ecb18d62c2605451c67a5d5ba8a2a318dbd1b6c",
          "sha256": "3f9c920ff5f5e5d8e0f298e94ecb18d62c2605451c67a5d5ba8a2a318dbd1b6c"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/z/blobs/sha256:3f9c920ff5f5e5d8e0f298e94ecb18d62c2605451c67a5d5ba8a2a318dbd1b6c",
          "sha256": "3f9c920ff5f5e5d8e0f298e94ecb18d62c2605451c67a5d5ba8a2a318dbd1b6c"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/z/blobs/sha256:7709d155cd48933c2d72b4de368972a8925c45100da27739f1a41121c9882abf",
          "sha256": "7709d155cd48933c2d72b4de368972a8925c45100da27739f1a41121c9882abf"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": "For Bash or Zsh, put something like this in your $HOME/.bashrc or $HOME/.zshrc:\n  . $HOMEBREW_PREFIX/etc/profile.d/z.sh\n",
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/z.rb",
  "ruby_source_checksum": {
    "sha256": "d92a8ac3ddc28bdfcba6e8067699a947b73161d68d72308aca7f7c770060f61f"
  },
  "date_added": "2011-04-13T14:41:20-07:00",
  "readme": "Z(1)                             User Commands                            Z(1)\n\n\n\nNAME\n       z - jump around\n\nSYNOPSIS\n       z [-chlrtx] [regex1 regex2 ... regexn]\n\nAVAILABILITY\n       bash, zsh\n\nDESCRIPTION\n       Tracks your most used directories, based on 'frecency'.\n\n       After  a  short  learning  phase, z will take you to the most 'frecent'\n       directory that matches ALL of the regexes given on the command line, in\n       order.\n\n       For example, z foo bar would match /foo/bar but not /bar/foo.\n\nOPTIONS\n       -c     restrict matches to subdirectories of the current directory\n\n       -e     echo the best match, don't cd\n\n       -h     show a brief help message\n\n       -l     list only\n\n       -r     match by rank only\n\n       -t     match by recent access only\n\n       -x     remove the current directory from the datafile\n\nEXAMPLES\n       z foo         cd to most frecent dir matching foo\n\n       z foo bar     cd to most frecent dir matching foo, then bar\n\n       z -r foo      cd to highest ranked dir matching foo\n\n       z -t foo      cd to most recently accessed dir matching foo\n\n       z -l foo      list all dirs matching foo (by frecency)\n\nNOTES\n   Installation:\n       Put something like this in your $HOME/.bashrc or $HOME/.zshrc:\n\n              . /path/to/z.sh\n\n       cd around for a while to build up the db.\n\n       PROFIT!!\n\n       Optionally:\n              Set $_Z_CMD to change the command name (default z).\n              Set $_Z_DATA to change the datafile (default $HOME/.z).\n              Set  $_Z_MAX_SCORE  lower  to  age  entries  out faster (default\n              9000).\n              Set $_Z_NO_RESOLVE_SYMLINKS to prevent symlink resolution.\n              Set $_Z_NO_PROMPT_COMMAND to handle PROMPT_COMMAND/precmd  your-\n              self.\n              Set $_Z_EXCLUDE_DIRS to an array of directory trees to  exclude.\n              Set $_Z_OWNER to allow usage when in 'sudo -s' mode.\n              (These  settings  should  go  in  .bashrc/.zshrc before the line\n              added above.)\n              Install the provided man page z.1  somewhere  in  your  MANPATH,\n              like /usr/local/man/man1.\n\n   Aging:\n       The rank of directories maintained by z undergoes aging based on a sim-\n       ple formula. The rank of each entry is incremented  every  time  it  is\n       accessed.  When the sum of ranks is over 9000, all ranks are multiplied\n       by 0.99. Entries with a rank lower than 1 are forgotten.\n\n   Frecency:\n       Frecency is a portmanteau of 'recent' and 'frequency'. It is a weighted\n       rank  that depends on how often and how recently something occurred. As\n       far as I know, Mozilla came up with the term.\n\n       To z, a directory that has low ranking but has been  accessed  recently\n       will  quickly  have  higher rank than a directory accessed frequently a\n       long time ago.\n\n       Frecency is determined at runtime.\n\n   Common:\n       When multiple directories match all queries, and they all have a common\n       prefix, z will cd to the shortest matching directory, without regard to\n       priority.  This has been in effect, if  undocumented,  for  quite  some\n       time, but should probably be configurable or reconsidered.\n\n   Tab Completion:\n       z  supports tab completion. After any number of arguments, press TAB to\n       complete on directories that match each argument. Due to limitations of\n       the  completion  implementations,  only  the last argument will be com-\n       pleted in the shell.\n\n       Internally, z decides you've requested a completion if the  last  argu-\n       ment  passed  is  an  absolute  path to an existing directory. This may\n       cause unexpected behavior if the last argument to z begins with /.\n\nENVIRONMENT\n       A function _z() is defined.\n\n       The contents of the variable $_Z_CMD is aliased to _z 2>&1. If not set,\n       $_Z_CMD defaults to z.\n\n       The  environment  variable $_Z_DATA can be used to control the datafile\n       location. If it is not defined, the location defaults to $HOME/.z.\n\n       The environment variable $_Z_NO_RESOLVE_SYMLINKS can be set to  prevent\n       resolving  of  symlinks.  If  it  is  not  set,  symbolic links will be\n       resolved when added to the datafile.\n\n       In bash, z appends a command to the PROMPT_COMMAND environment variable\n       to maintain its database. In zsh, z appends a function _z_precmd to the\n       precmd_functions array.\n\n       The environment variable $_Z_NO_PROMPT_COMMAND can be set if  you  want\n       to handle PROMPT_COMMAND or precmd yourself.\n\n       The  environment  variable  $_Z_EXCLUDE_DIRS  can be set to an array of\n       directory trees to exclude from tracking.  $HOME  is  always  excluded.\n       Directories must be full paths without trailing slashes.\n\n       The  environment  variable  $_Z_OWNER  can  be set to your username, to\n       allow usage of z when your sudo environment keeps $HOME set.\n\nFILES\n       Data is stored in $HOME/.z. This  can  be  overridden  by  setting  the\n       $_Z_DATA  environment variable. When initialized, z will raise an error\n       if this path is a directory, and not function correctly.\n\n       A man page (z.1) is provided.\n\nSEE ALSO\n       regex(7), pushd, popd, autojump, cdargs\n\n       Please file bugs at https://github.com/rupa/z/\n\n\n\nz                                January 2013                             Z(1)"
}
