{
  "name": "chamber",
  "full_name": "chamber",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "CLI for managing secrets through AWS SSM Parameter Store",
  "license": "MIT",
  "homepage": "https://github.com/segmentio/chamber",
  "versions": {
    "stable": "2.13.2",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/segmentio/chamber/archive/v2.13.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "9fccca3cdf64755bdfc8a6bb87f84486456619b50ce2c60488b9fb9fd47b6214"
    },
    "head": {
      "url": "https://github.com/segmentio/chamber.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/chamber/blobs/sha256:2007f070dfb39f88f6afd56b6e432c06fd67aa8b633e1db5eb2ad28d6b2c6e10",
          "sha256": "2007f070dfb39f88f6afd56b6e432c06fd67aa8b633e1db5eb2ad28d6b2c6e10"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/chamber/blobs/sha256:2007f070dfb39f88f6afd56b6e432c06fd67aa8b633e1db5eb2ad28d6b2c6e10",
          "sha256": "2007f070dfb39f88f6afd56b6e432c06fd67aa8b633e1db5eb2ad28d6b2c6e10"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/chamber/blobs/sha256:2007f070dfb39f88f6afd56b6e432c06fd67aa8b633e1db5eb2ad28d6b2c6e10",
          "sha256": "2007f070dfb39f88f6afd56b6e432c06fd67aa8b633e1db5eb2ad28d6b2c6e10"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/chamber/blobs/sha256:ec0cc18c878f894ac2f13b01ad8812badec9e055ff1ab450172bde0e33d3ed1e",
          "sha256": "ec0cc18c878f894ac2f13b01ad8812badec9e055ff1ab450172bde0e33d3ed1e"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/chamber/blobs/sha256:ec0cc18c878f894ac2f13b01ad8812badec9e055ff1ab450172bde0e33d3ed1e",
          "sha256": "ec0cc18c878f894ac2f13b01ad8812badec9e055ff1ab450172bde0e33d3ed1e"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/chamber/blobs/sha256:ec0cc18c878f894ac2f13b01ad8812badec9e055ff1ab450172bde0e33d3ed1e",
          "sha256": "ec0cc18c878f894ac2f13b01ad8812badec9e055ff1ab450172bde0e33d3ed1e"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/chamber/blobs/sha256:558ccf322e72b47a4d29f06265590a491dbefe7a48c8d5dc0609729a019aa9c1",
          "sha256": "558ccf322e72b47a4d29f06265590a491dbefe7a48c8d5dc0609729a019aa9c1"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/chamber.rb",
  "ruby_source_checksum": {
    "sha256": "d8c7221c8dc1e3b1a678537868b8a90fac79f9c03aab9c6c9d15543091a970c5"
  },
  "date_added": "2017-12-02T06:44:42-08:00",
  "readme": "# Chamber\n\nChamber is a tool for managing secrets. Currently it does so by storing\nsecrets in SSM Parameter Store, an AWS service for storing secrets.\n\nFor detailed info about using chamber, please read\n[The Right Way To Manage Secrets](https://aws.amazon.com/blogs/mt/the-right-way-to-store-secrets-using-parameter-store/)\n\n## v2.0 Breaking Changes\n\nStarting with version 2.0, chamber uses parameter store's path based API by default.\nChamber pre-2.0 supported this API using the `CHAMBER_USE_PATHS` environment variable.\nThe paths based API has performance benefits and is the recommended best practice\nby AWS.\n\nAs a side effect of this change, if you didn't use path based secrets before 2.0,\nyou will need to set `CHAMBER_NO_PATHS` to enable the old behavior. This option\nis deprecated, and We recommend only using this setting for supporting existing\napplications.\n\nTo migrate to the new format, you can take advantage of the `export` and `import`\ncommands. For example, if you wanted to convert secrets for service `foo` to the\nnew format using chamber 2.0, you can do:\n\n```bash\nCHAMBER_NO_PATHS=1 chamber export foo | chamber import foo -\n```\n\n### v2.13.0 Breaking Changes\n\nSupport for very old versions of Go has been dropped, and chamber will only test\nagainst versions of Go covered by the Go Release Policy, e.g. the two most recent\nmajor versions. This will ensure that we can reliably update dependencies as needed.\nAdditionally, chamber binaries will be built with the latest stable version of Go\nat the time of release.\n\n## Installing\n\nIf you have a functional go environment, you can install with:\n\n```bash\ngo install github.com/segmentio/chamber/v2@latest\n```\n\n### Caveat About `chamber version` and `go install`\n\nNote that installing with `go install` will not produce an executable containing\nany versioning information. This information is passed at compilation time when\nthe `Makefile` is used for compilation. Without this information, `chamber version`\noutputs the following:\n\n```text\n$ chamber version\nchamber dev\n```\n\n[See the wiki for more installation options like Docker images, Linux packages, and precompiled binaries.](https://github.com/segmentio/chamber/wiki/Installation)\n\n## Authenticating\n\nUsing `chamber` requires you to be running in an environment with an\nauthenticated AWS user which has the appropriate permission to read/write\nvalues to SSM Parameter Store.\n\nThis is going to vary based on your organization but chamber needs AWS credentials\nto run.\n\nOne of the easiest ways to do so is by using [aws-vault](https://github.com/99designs/aws-vault).\nTo adjust these instructions for your needs, examine the env output of\n[Aws-Vault: How It Works](https://github.com/99designs/aws-vault#how-it-works)\nand use your organization's secrets tool accordingly with chamber.\n\n### An `aws-vault` Usage Example With Chamber\n\n```bash\naws-vault exec prod -- chamber\n```\n\nFor this reason, it is recommended that you create an alias in your shell of\nchoice to save yourself some typing, for example (from my `.zshrc`):\n\n```bash\nalias chamberprod='aws-vault exec production -- chamber'\n```\n\n## Setting Up KMS\n\nChamber expects to find a KMS key with alias `parameter_store_key` in the\naccount that you are writing/reading secrets. You can follow the [AWS KMS\ndocumentation](http://docs.aws.amazon.com/kms/latest/developerguide/create-keys.html)\nto create your key, and [follow this guide to set up your\nalias](http://docs.aws.amazon.com/kms/latest/developerguide/programming-aliases.html).\n\nIf you are a [Terraform](https://www.terraform.io/) user, you can create your\nkey with the following:\n\n```HCL\nresource \"aws_kms_key\" \"parameter_store\" {\n  description             = \"Parameter store kms master key\"\n  deletion_window_in_days = 10\n  enable_key_rotation     = true\n}\n\nresource \"aws_kms_alias\" \"parameter_store_alias\" {\n  name          = \"alias/parameter_store_key\"\n  target_key_id = \"${aws_kms_key.parameter_store.id}\"\n}\n```\n\nIf you'd like to use an alternate KMS key to encrypt your secrets, you can set\nthe environment variable `CHAMBER_KMS_KEY_ALIAS`. As an example, the following\nwill use your account's default SSM alias:\n`CHAMBER_KMS_KEY_ALIAS=aws/ssm`\n\n## Usage\n\n### Writing Secrets\n\n```bash\n$ chamber write <service> <key> <value|->\n```\n\nThis operation will write a secret into the secret store. If a secret with that\nkey already exists, it will increment the version and store a new value.\n\nIf `-` is provided as the value argument, the value will be read from standard\ninput.\n\nSecret keys are normalized automatically. The `-` will be `_` and the letters will\nbe converted to upper case (for example a secret with key `secret_key` and\n`secret-key` will become `SECRET_KEY`).\n\n### Listing Secrets\n\n```bash\n$ chamber list service\nKey         Version                  LastModified      User\napikey      2                        06-09 17:30:56    daniel-fuentes\nother       1                        06-09 17:30:34    daniel-fuentes\n```\n\nListing secrets should show the key names for a given service, along with other\nuseful metadata including when the secret was last modified, who modified it,\nand what the current version is.\n\n```bash\n$ chamber list -e service\nKey         Version                  LastModified      User             Value\napikey      2                        06-09 17:30:56    daniel-fuentes   apikeyvalue\nother       1                        06-09 17:30:34    daniel-fuentes   othervalue\n```\n\nListing secrets with expand parameter should show the key names and values for a\ngiven service, along with other useful metadata including when the secret was\nlast modified, who modified it, and what the current version is.\n\n### Historic view\n\n```bash\n$ chamber history service key\nEvent       Version     Date            User\nCreated     1           06-09 17:30:19  daniel-fuentes\nUpdated     2           06-09 17:30:56  daniel-fuentes\n```\n\nThe `history` command gives a historical view of a given secret. This view is\nuseful for auditing changes, and can point you toward the user who made the\nchange so it's easier to find out why changes were made.\n\n### Exec\n\n```bash\n$ chamber exec <service...> -- <your executable>\n```\n\n`exec` populates the environment with the secrets from the specified services\nand executes the given command. Secret keys are converted to upper case (for\nexample a secret with key `secret_key` will become `SECRET_KEY`).\n\nSecrets from services are loaded in the order specified in the command. For\nexample, if you do `chamber exec app apptwo -- ...` and both apps have a secret\nnamed `api_key`, the `api_key` from `apptwo` will be the one set in your\nenvironment.\n\n### Reading\n\n```bash\n$ chamber read service key\nKey             Value                           Version         LastModified    User\nkey             secret                          1               06-09 17:30:56  daniel-fuentes\n```\n\n`read` provides the ability to print out the value of a single secret, as well\nas the secret's additional metadata. It does not provide the ability to print\nout multiple secrets in order to discourage accessing extra secret material\nthat is unneeded. Parameter store automatically versions secrets and passing\nthe `--version/-v` flag to read can print older versions of the secret. Default\nversion (-1) is the latest secret.\n\n### Exporting\n\n```bash\n$ chamber export [--format <format>] [--output-file <file>]  <service...>\n{\"key\":\"secret\"}\n```\n\n`export` provides ability to export secrets in various file formats. The following\nfile formats are supported:\n\n- json (default)\n- yaml\n- java-properties\n- csv\n- tsv\n- dotenv\n- tfvars\n\nFile is written to standard output by default but you may specify an output file.\n\n### Caveat About Environment Variables\n\n`chamber` can emit environment variables in both dotenv format and exported shell\nenvironment variables. As `chamber` allows creating key names that are themselves\nnot valid shell variable names, secrets emitted in this format will have their\nkeys modified to confirm to POSIX shell environment variable naming rules:\n\n- variable names **must** begin with a letter or an underscore\n  - variable names **must not** begin with a number\n- variable names **must** only contain letters, numbers, or underscores\n\n#### Notes About Dotenv Format\n\nAs there is no formal dotenv spec, `chamber` attempts to\nadhere to compliance with [joho/godotenv](https://github.com/joho/godotenv) (which\nis itself a port of the Ruby library\n[bkeepers/dotenv](https://github.com/bkeepers/dotenv)). The output should be generally\ncross-compatible with alternative parsers, but without a formal spec compatibility\nis not guaranteed.\n\nOf note:\n\n- all key names will be sanitized according the the POSIX shell rules above, and\ncast to uppercase\n- all values will be rendered using special characters instead of string literals,\n  e.g. newlines replaced with the character `\\n`, tabstops replaced with the character\n  `\\t`, etc.\n  - no whitespace trimming will be performed on any values\n\n#### Notes About Exported Environment Variables\n\nAlternatively, `chamber` may be used to set local environment variables directly\nwith the `chamber env` command. For example,\n\n```shell\nsource <(chamber env service)`\nprintf \"%s\" \"$SERVICE_VAR\"\n```\n\nNote that all secrets printed this way will be prefixed with `export`, so if sourced\ninline as in the above example, then any and all secrets will then be available\nto any process run after sourcing.\n\nthe `env` subcommand supports output formatting in two specific ways:\n\n```text\nchamber env -h\nPrint the secrets from the parameter store in a format to export as environment variables\n\nUsage:\n  chamber env <service> [flags]\n\nFlags:\n  -p, --preserve-case    preserve variable name case\n  -e, --escape-strings   escape special characters in values\n```\n\nAs `chamber` allows creation of keys with mixed case, `--preserve-case` will ensure\nthat the original key case is preserved. Note that this will **not** prevent the\nkey name from being sanitized according to the above POSIX shell rules.\nBy default, values will be rendered using string literals, e.g. newlines will\nbe printed as literal newlines, tabstops as literal tabstops. Output may be\nemitted using escaped special characters instead (identical to\n`chamber export -o dotenv)`) by using the flag `--escape-strings`.\n\n### Importing\n\n```bash\n$ chamber import [--normalize-keys] <service> <filepath>\n```\n\n`import` provides the ability to import secrets from a json or yaml file (like\nthe kind you get from `chamber export`).\n\n<!-- prettier-ignore -->\n> __Note__\n> By default, `import` will **not** normalize key inputs, meaning that keys will\n> be written to the secrets backend in the format they exist in the source file.\n> In order to normalize keys on import, provide the `--normalize-keys` flag\n\nWhen normalizing keys, before write, the key will be be first converted to lowercase\nto match how `chamber write` handles keys.\n\nExample: `DB_HOST` will be converted to `db_host`.\n\nYou can set `filepath` to `-` to instead read input from stdin.\n\n### Deleting\n\n```bash\n$ chamber delete [--exact-key] service key\n```\n\n`delete` provides the ability to remove a secret from chamber permanently,\nincluding the secret's additional metadata. There is no way to recover a\nsecret once it has been deleted so care should be taken with this command.\n\n<!-- prettier-ignore -->\n> __Note__\n> By default, `delete` will normalize any provided keys. To change that behavior,\n> provide the `--exact-key` flag to attempt to delete the raw provided key.\n\nExample: Given the following setup,\n\n```bash\n$ chamber list service\nKey         Version                  LastModified      User\napikey      2                        06-09 17:30:56    daniel-fuentes\nAPIKEY      1                        06-09 17:30:34    daniel-fuentes\n```\n\nCalling\n\n```bash\n$ chamber delete --exact-key service APIKEY\n```\n\nwill delete only `APIKEY` from the service and leave only\n\n```bash\n$ chamber list service\nKey         Version                  LastModified      User\napikey      2                        06-09 17:30:56    daniel-fuentes\n```\n\n### Finding\n\n```bash\n$ chamber find key\n```\n\n`find` provides the ability to locate which services use the same key names.\n\n```bash\n$ chamber find value --by-value\n```\n\nPassing `--by-value` or `-v` will search the values of all secrets and return\nthe services and keys which match.\n\n### Listing Services\n\n```bash\n$ chamber list-services [<prefix>]\n```\n\n`list-services` lists the available services. You can provide a prefix to limit\nthe results.\n\n### AWS Region\n\nChamber uses [AWS SDK for Go](https://github.com/aws/aws-sdk-go). To use a\nregion other than what is specified in `$HOME/.aws/config`, set the environment\nvariable \"AWS_REGION\".\n\n```bash\n$ AWS_REGION=us-west-2 chamber list service\nKey         Version                  LastModified      User\napikey      3                        07-10 09:30:41    daniel-fuentes\nother       1                        07-10 09:30:35    daniel-fuentes\n```\n\nChamber does not currently read the value of \"AWS_DEFAULT_REGION\". See\n[https://github.com/aws/aws-sdk-go#configuring-aws-region](https://github.com/aws/aws-sdk-go#configuring-aws-region)\nfor more details.\n\nIf you'd like to use a different region for chamber without changing `AWS_REGION`,\nyou can use `CHAMBER_AWS_REGION` to override just for chamber.\n\n### Custom SSM Endpoint\n\nIf you'd like to use a custom SSM endpoint for chamber, you can use `CHAMBER_AWS_SSM_ENDPOINT`\nto override AWS default URL.\n\n## S3 Backend (Experimental)\n\nBy default, chamber store secrets in AWS Parameter Store. We now also provide an\nexperimental S3 backend for storing secrets in S3 instead.\n\nTo configure chamber to use the S3 backend, use `chamber -b s3 --backend-s3-bucket=mybucket`.\nPreferably, this bucket should reject uploads that do not set the server side\nencryption header ([see this doc for details how](https://aws.amazon.com/blogs/security/how-to-prevent-uploads-of-unencrypted-objects-to-amazon-s3/))\n\nThis feature is experimental, and not currently meant for production work.\n\n### S3 Backend using KMS Key Encryption (Experimental)\n\nThis backend is similar to the S3 Backend but uses KMS Key Encryption to encrypt\nyour documents at rest, similar to the SSM Backend which encrypts your secrets\nat rest. You can read how S3 Encrypts documents with KMS [here](https://docs.aws.amazon.com/kms/latest/developerguide/services-s3.html).\n\nThe highlights of SSE-KMS are:\n\n- You can choose to create and manage encryption keys yourself, or you can choose\n  to use your default service key uniquely generated on a customer by service by\n  region level.\n- The ETag in the response is not the MD5 of the object data.\n- The data keys used to encrypt your data are also encrypted and stored alongside\n  the data they protect.\n- Auditable master keys can be created, rotated, and disabled from the AWS KMS console.\n- The security controls in AWS KMS can help you meet encryption-related compliance\n  requirements.\n\nSource: [Protecting data using server-side encryption with AWS Key Management Service keys (SSE-KMS)](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html)\n\nTo configure chamber to use the S3 KMS backend, use\n`chamber -b s3-kms --backend-s3-bucket=mybucket --kms-key-alias=alias/keyname`.\nYou must also supply an environment variable of the KMS Key Alias to use\nCHAMBER_KMS_KEY_ALIAS, by default \"alias/parameter_store_key\"\nwill be used.\n\nPreferably, this bucket should reject uploads that do not set the server side\nencryption header ([see this doc for details how](https://aws.amazon.com/blogs/security/how-to-prevent-uploads-of-unencrypted-objects-to-amazon-s3/))\n\nWhen changing secrets between KMS Keys, you must first delete the Chamber secret\nwith the existing KMS Key, then write it again with new KMS Key.\n\nIf services contain multiple KMS Keys, `chamber list` and `chamber exec` will only\nshow Chamber secrets encrypted with KMS Keys you have access to.\n\nThis feature is experimental, and not currently meant for production work.\n\n## Null Backend (Experimental)\n\nIf it's preferred to not use any backend at all, use `chamber -b null`. Doing so\nwill forward existing ENV variables as if Chamber is not in between.\n\nThis feature is experimental, and not currently meant for production work.\n\n## Analytics\n\n`chamber` includes some usage analytics code which Segment uses internally for\ntracking usage of internal tools. This analytics code is turned off by default,\nand can only be enabled via a linker flag at build time, which we do not set for\npublic github releases.\n\n## Releasing\n\nTo cut a new release, just push a tag named `v<semver>` where `<semver>` is a\nvalid semver version. This tag will be used by Github Actions to automatically publish\na github release."
}
