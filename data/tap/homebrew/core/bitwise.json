{
  "name": "bitwise",
  "full_name": "bitwise",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Terminal based bit manipulator in ncurses",
  "license": "GPL-3.0",
  "homepage": "https://github.com/mellowcandle/bitwise",
  "versions": {
    "stable": "0.50",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/mellowcandle/bitwise/releases/download/v0.50/bitwise-v0.50.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "806271fa5bf31de0600315e8720004a8f529954480e991ca84a9868dc1cae97e"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/bitwise/blobs/sha256:85b482536f160a726ccf996c7653763a19c43b5b4926c8da4af4bb0b01ff63ca",
          "sha256": "85b482536f160a726ccf996c7653763a19c43b5b4926c8da4af4bb0b01ff63ca"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/bitwise/blobs/sha256:7b2980226d0d6d231bf41898bbadd6c18a838bee766aa62dfff1c451d8c0357a",
          "sha256": "7b2980226d0d6d231bf41898bbadd6c18a838bee766aa62dfff1c451d8c0357a"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/bitwise/blobs/sha256:92f12631e0740195ad3cf87b0a320288d6d27523651568575d3dedb4a02a0705",
          "sha256": "92f12631e0740195ad3cf87b0a320288d6d27523651568575d3dedb4a02a0705"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/bitwise/blobs/sha256:7b67229824c3f0e7b1ff3f3e1cfbf11f8f0b8f6dec64a75e010e81f1e8e32fce",
          "sha256": "7b67229824c3f0e7b1ff3f3e1cfbf11f8f0b8f6dec64a75e010e81f1e8e32fce"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/bitwise/blobs/sha256:5f880e578cbd7558572c25c9f5c66a674e0e0547f1bc7e8cee33e4869bb39228",
          "sha256": "5f880e578cbd7558572c25c9f5c66a674e0e0547f1bc7e8cee33e4869bb39228"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/bitwise/blobs/sha256:560ee93626732de20fa8d5ca16058c92f26383a497e8218029ecbe377cda5602",
          "sha256": "560ee93626732de20fa8d5ca16058c92f26383a497e8218029ecbe377cda5602"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bitwise/blobs/sha256:843a3614b4b1ce32529429588fbc60289bfdf91086658666c850be7f88c1baca",
          "sha256": "843a3614b4b1ce32529429588fbc60289bfdf91086658666c850be7f88c1baca"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "autoconf",
    "automake"
  ],
  "dependencies": [
    "readline"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "2706c66e8def3eeba4d9bf1adf66221c8ad70701",
  "ruby_source_path": "Formula/bitwise.rb",
  "ruby_source_checksum": {
    "sha256": "2d3494c73cd46a694b1d47b99b8c5183e6f3cc7a17270f55c21f84120820420a"
  },
  "date_added": "2019-08-08T21:02:46+02:00",
  "readme": "# Bitwise\n## Terminal based bitwise calculator in curses\n[![Snap Status](https://build.snapcraft.io/badge/mellowcandle/bitwise.svg)](https://build.snapcraft.io/user/mellowcandle/bitwise)<a href=\"https://scan.coverity.com/projects/mellowcandle-bitwise\">\n  <img alt=\"Coverity Scan Build Status\"\n       src=\"https://img.shields.io/coverity/scan/18170.svg\"/>\n<a href=\"https://repology.org/project/bitwise/versions\">\n    <img src=\"https://repology.org/badge/vertical-allrepos/bitwise.svg\" alt=\"Packaging status\" align=\"right\">\n</a>\n\n_Bitwise_ is multi base interactive calculator supporting dynamic base conversion and bit manipulation.\nIt's a handy tool for low level hackers, kernel developers and device drivers developers.\n\nSome of the features include:\n* Interactive ncurses interface\n* Command line calculator supporting all bitwise operations.\n* Individual bit manipulator.\n* Bitwise operations such as NOT, OR, AND, XOR, and shifts.\n\n##\n\n![Demo](https://github.com/mellowcandle/bitwise/raw/master/resources/bitwise.gif \"Bitwise demo2\")\n\n## Usage\n_bitwise_ can be used both interactively and in command line mode.\n\n### Command line calculator mode\nIn command line mode, bitwise will calculate the given expression and will output the result in all bases including binary representation.\n\n_bitwise_ detects the base by the prefix of the input (_0x/0X_ for hexadecimal, leading _0_ for octal, _b_ for binary, and the rest is decimal).\n\n**NEW** Bitwise now support parsing IPv4 addresses, it will also output the possible IPv4 address in both Network and reversed byte order.\n\n### Examples:\n\n#### Simple base conversion\n\n![conversion](https://github.com/mellowcandle/bitwise/raw/master/resources/cmdline.png \"Bitwise conversion\")\n\n\n#### C style syntax Calculator\n\n![calculator](https://github.com/mellowcandle/bitwise/raw/master/resources/conversion.png \"Bitwise calculator\")\n\n### Interactive mode\n_bitwise_ starts in interactive mode if no command line parameters are passed or if the _-i | --interactive_ flag is passed.\nIn this mode, you can input a number and manipulate it and see the other bases change dynamically.\nIt also allows changing individual bits in the binary.\nYou can show the help screen by pressing <kbd> F1 </kbd>.\n\n#### Navigation in interactive mode\nTo move around use the arrow keys, or use _vi_ key bindings : <kbd> h </kbd> <kbd> j </kbd> <kbd> k </kbd> <kbd> l </kbd>.\nLeave the program by pressing <kbd> q </kbd>.\n\n##### Binary specific movement\nYou can toggle a bit using the <kbd> space </kbd> key.\nYou can jump a byte forward using <kbd> w </kbd> and backwards one byte using <kbd> b </kbd>.\n\n#### Bitwise operation in interactive mode\n\n##### Setting the bit width:\n\nReducing or extending the bit width interactively is also very easy, just use:\n<kbd> ! </kbd> for 8bit, <kbd> @ </kbd>  for 16Bit, <kbd> $ </kbd> for 32Bit and <kbd> * </kbd> for 64Bit.\nWhen changing the bit width, the number is *masked* with the new width, so you might lose precision, use with care.\n\n##### NOT:\n\nPress <kbd> ~ </kbd> to perform the NOT operator.\n\n##### Reversing Endianness:\n\nPress <kbd> r </kbd> to reverse the endianness.\n\n##### Shifts\n\nPress <kbd> < </kbd> and <kbd> > </kbd> to perform the left or right shift.\n\n#### expression calculator in interactive mode\n\nYou can enter expression calculator mode by typing <kbd> : </kbd> (Just like in vim).\n\nTo exit the mode, just press <kbd> ESC </kbd>.\n\nIn this mode, you can type any expression you like to be evaluated.\nThe result will be printed in the history window and also printed in the binary and various bases on top.\n\n###### operators and functions\n* All C operators are supported, additionally, you can use the \"$\" symbol to refer to the last result.\n* Refer to a specific bit by using the function _BIT(x)_.\n\n###### commands\n* _h(elp)_ - Show the help screen.\n* _c(lear)_ - Clear the history window.\n* _w(idth)_ [8 | 16 | 32 | 64] - Set the required width mask\n* _o(utput)_ [dec(imal) | hex(adecimal) | oct(al) | bin(ary) | all] - Set the default output for results.\n* _q(uit)_ - Exit\n\n## Integration with other software\n### Vim\n* [vim-bitwise](https://github.com/mellowcandle/vim-bitwise \"vim bitwise\")\n\n## Installation\n\n### Linux\n#### Ubuntu\nFrom 20.04 you can just type\n```\nsudo apt-get install bitwise\n```\nFor earlier versions:\n```\nsudo add-apt-repository ppa:ramon-fried/bitwise\nsudo apt-get update\nsudo apt-get install bitwise\n```\n#### Snap\nIf your distribution supports Snap just type:\n`\nsudo snap install bitwise\n`\n#### OpenSuse\n`\nzypper install bitwise\n`\n\n#### Arch\nYou can use the AUR repository: https://aur.archlinux.org/packages/bitwise/\n\n#### Void\n_bitwise_ is in the default repository, so just type:\n`\nsudo xbps-install -S bitwise\n`\n\n#### Fedora Linux\n\nbitwise is available in the [official repository](https://src.fedoraproject.org/rpms/bitwise)\n\n```\nsudo dnf install bitwise\n```\n\n#### Buildroot / Yocto\nBitwise is available both in Buildroot and in Yocto, please refer to the documentation on how to add those to your target image.\n\n### macOS\n\n#### MacPorts\n```\nsudo port install bitwise\n```\n\n#### Homebrew\n```\nbrew install bitwise\n```\n\n### Windows\nNCurses doesn't support Windows. You can use the Windows Subsystem for Linux as a workaround.\n\n### Nix\n```\nnix-env -i bitwise\n```\n\n### Building from source\n\n#### Prerequisites\n* libreadline\n* libncurses (with forms)\n* libcunit (only needed for testing)\n\nOn Ubuntu/Debian system you can just paste:\n```\nsudo apt-get install build-essential\nsudo apt-get install libncurses5-dev\nsudo apt-get install libreadline-dev\nsudo apt-get install libcunit1-dev\n```\nOn Mac systems:\n```\nbrew install automake\nbrew install autoconf\nbrew install readline\nexport LDFLAGS=\"-L/usr/local/opt/readline/lib\"\nexport CPPFLAGS=\"-I/usr/local/opt/readline/include\"\n```\n- Download [the latest release](https://github.com/mellowcandle/bitwise/releases/latest)\n\n```sh\ntar xfz RELEASE-FILE.TAR.GZ\ncd RELEASE-DIR\n./configure\nmake\nsudo make install\n```\n\nRunning unit tests by typing\n``` make check ```\n\n### Contribution\n* Install prerequisites\n* Fork the repo\n* Run ```./bootstrap.sh```\n* Follow the building from source section.\n* commit and send pull request"
}
