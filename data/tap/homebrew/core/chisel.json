{
  "name": "chisel",
  "full_name": "chisel",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Collection of LLDB commands to assist debugging iOS apps",
  "license": "MIT",
  "homepage": "https://github.com/facebook/chisel",
  "versions": {
    "stable": "2.0.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/facebook/chisel/archive/2.0.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "6f019d5e7ab5eb06542a9eccbbe29e7d26165d3676828a32e143575ff102d5f9"
    },
    "head": {
      "url": "https://github.com/facebook/chisel.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/chisel/blobs/sha256:7ee4917934831d56a5925fb22554c0dd136f8553df9c92067e4564e527371e82",
          "sha256": "7ee4917934831d56a5925fb22554c0dd136f8553df9c92067e4564e527371e82"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/chisel/blobs/sha256:1aa32fddf646ce4a2772d5e10b39fddbe54a6383299346321d5d0dd067388471",
          "sha256": "1aa32fddf646ce4a2772d5e10b39fddbe54a6383299346321d5d0dd067388471"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/chisel/blobs/sha256:bd381685bf1bf3682e51c355acbca980b35659b8161f226329b3a0196aab55df",
          "sha256": "bd381685bf1bf3682e51c355acbca980b35659b8161f226329b3a0196aab55df"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/chisel/blobs/sha256:a07aface409179d4adea4e96654390ac19f6cc2422d0fa1e87d6331f68aa7782",
          "sha256": "a07aface409179d4adea4e96654390ac19f6cc2422d0fa1e87d6331f68aa7782"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/chisel/blobs/sha256:712007f0f4abd29073239839bd606dba927353444cf6baf4b058aedc92c17f0c",
          "sha256": "712007f0f4abd29073239839bd606dba927353444cf6baf4b058aedc92c17f0c"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/chisel/blobs/sha256:bec2fe6d1e6afec5b3b1c79f5f11b9f2219ff8e22d81e1b343cf525b91ea220e",
          "sha256": "bec2fe6d1e6afec5b3b1c79f5f11b9f2219ff8e22d81e1b343cf525b91ea220e"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/chisel/blobs/sha256:7ef6b79ffa9641e0617b2aec1b4f3dfcea59fc4059887c0d734baa1bda20441d",
          "sha256": "7ef6b79ffa9641e0617b2aec1b4f3dfcea59fc4059887c0d734baa1bda20441d"
        },
        "mojave": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/chisel/blobs/sha256:70b49b0ba45571db3341adf586e1498a041492745cfa2130b2ef95b81d14fb85",
          "sha256": "70b49b0ba45571db3341adf586e1498a041492745cfa2130b2ef95b81d14fb85"
        },
        "high_sierra": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/chisel/blobs/sha256:41797386262e226cf471995eac8ec50dffbf622140634254c6a7dab8a9471b48",
          "sha256": "41797386262e226cf471995eac8ec50dffbf622140634254c6a7dab8a9471b48"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [
    {
      "name": "macos",
      "cask": null,
      "download": null,
      "version": null,
      "contexts": [],
      "specs": [
        "stable",
        "head"
      ]
    }
  ],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": "Add the following line to ~/.lldbinit to load chisel when Xcode launches:\n  command script import $HOMEBREW_PREFIX/opt/chisel/libexec/fbchisellldb.py\n",
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/chisel.rb",
  "ruby_source_checksum": {
    "sha256": "1cba47010a0cb60e3feef228e6f913c4fcf933df50af1c853ce7471b687bc23f"
  },
  "date_added": "2014-03-09T12:39:25-07:00",
  "readme": "<a href=\"https://opensource.facebook.com/support-ukraine\">\n  <img src=\"https://img.shields.io/badge/Support-Ukraine-FFD500?style=flat&labelColor=005BBB\" alt=\"Support Ukraine - Help Provide Humanitarian Aid to Ukraine.\" />\n</a>\n\n# Chisel\n`Chisel` is a collection of `LLDB` commands to assist in the debugging of iOS apps.\n\n[[Installation](#installation) &bull; [Commands](#commands) &bull; [Custom Commands](#custom-commands) &bull; [Development Workflow](#development-workflow) [Contributing](#contributing) &bull; [License](#license)]\n\nFor a comprehensive overview of LLDB, and how Chisel complements it, read Ari Grant's [Dancing in the Debugger â€” A Waltz with LLDB](http://www.objc.io/issue-19/lldb-debugging.html) in issue 19 of [objc.io](http://www.objc.io/).\n\n## Installation\n\n```shell\nbrew update\nbrew install chisel\n```\n\nif `.lldbinit` file doesn't exist you can create it & open it by tapping on the terminal\n\n ```shell\n touch .lldbinit\n open .lldbinit\n```\n\nThen add the following line to your `~/.lldbinit` file.\n\n```Python\n# ~/.lldbinit\n...\ncommand script import /usr/local/opt/chisel/libexec/fbchisellldb.py\n```\n\n* Note that if you are installing on an M1 Mac, the path above should be `/opt/homebrew/opt/chisel/libexec/fbchisellldb.py` instead.\n\nAlternatively, download chisel and add the following line to your _~/.lldbinit_ file.\n\n```Python\n# ~/.lldbinit\n...\ncommand script import /path/to/fbchisellldb.py\n\n```\n\nThe commands will be available the next time `Xcode` starts.\n\n## Commands\nThere are many commands; here's a few:\n*(Compatibility with iOS/Mac indicated at right)*\n\n|Command          |Description     |iOS    |OS X   |\n|-----------------|----------------|-------|-------|\n|pviews           |Print the recursive view description for the key window.|Yes|Yes|\n|pvc              |Print the recursive view controller description for the key window.|Yes|No|\n|visualize        |Open a `UIImage`, `CGImageRef`, `UIView`, `CALayer`, `NSData` (of an image), `UIColor`, `CIColor`, `CIImage`, `CGColorRef` or `CVPixelBuffer` in Preview.app on your Mac.|Yes|No|\n|fv               |Find a view in the hierarchy whose class name matches the provided regex.|Yes|No|\n|fvc              |Find a view controller in the hierarchy whose class name matches the provided regex.|Yes|No|\n|show/hide        |Show or hide the given view or layer. You don't even have to continue the process to see the changes!|Yes|Yes|\n|mask/unmask      |Overlay a view or layer with a transparent rectangle to visualize where it is.|Yes|No|\n|border/unborder  |Add a border to a view or layer to visualize where it is.|Yes|Yes|\n|caflush          |Flush the render server (equivalent to a \"repaint\" if no animations are in-flight).|Yes|Yes|\n|bmessage         |Set a symbolic breakpoint on the method of a class or the method of an instance without worrying which class in the hierarchy actually implements the method.|Yes|Yes|\n|wivar            |Set a watchpoint on an instance variable of an object.|Yes|Yes|\n|presponder       |Print the responder chain starting from the given object.|Yes|Yes|\n|...              |... and many more!|\n\nTo see the list of **all** of the commands execute the help command in `LLDB` or go to the [Wiki](https://github.com/facebook/chisel/wiki).\n\n```Python\n(lldb) help\nThe following is a list of built-in, permanent debugger commands:\n...\n\nThe following is a list of your current user-defined commands:\n...\n```\n\nThe bottom list contains all the commands sourced from `Chisel`.\n\nYou can also inspect a specific command by passing its name as an argument to the help command (as with all other `LLDB` commands).\n\n```\n(lldb) help border\nDraws a border around <viewOrLayer>. Color and width can be optionally provided.\n\nArguments:\n  <viewOrLayer>; Type: UIView*; The view to border.\n\nOptions:\n  --color/-c <color>; Type: string; A color name such as 'red', 'green', 'magenta', etc.\n  --width/-w <width>; Type: CGFloat; Desired width of border.\n\nSyntax: border [--color=color] [--width=width] <viewOrLayer>\n```\n\nAll of the commands provided by `Chisel` come with verbose help. Be sure to read it when in doubt!\n\n## Custom Commands\nYou can add local, custom commands. Here's a contrived example.\n\n```python\n#!/usr/bin/python\n# Example file with custom commands, located at /magical/commands/example.py\n\nimport lldb\nimport fbchisellldbbase as fb\n\ndef lldbcommands():\n  return [ PrintKeyWindowLevel() ]\n\nclass PrintKeyWindowLevel(fb.FBCommand):\n  def name(self):\n    return 'pkeywinlevel'\n\n  def description(self):\n    return 'An incredibly contrived command that prints the window level of the key window.'\n\n  def run(self, arguments, options):\n    # It's a good habit to explicitly cast the type of all return\n    # values and arguments. LLDB can't always find them on its own.\n    lldb.debugger.HandleCommand('p (CGFloat)[(id)[(id)[UIApplication sharedApplication] keyWindow] windowLevel]')\n```\n\nThen all that's left is to source the commands in lldbinit. `Chisel` has a python function just for this, _loadCommandsInDirectory_ in the _fbobjclldb.py_ module.\n\n```Python\n# ~/.lldbinit\n...\ncommand script import /path/to/fbobjclldb.py\nscript fbobjclldb.loadCommandsInDirectory('/magical/commands/')\n\n```\n\nThere's also builtin support to make it super easy to specify the arguments and options that a command takes. See the _border_ and _pinvocation_ commands for example use.\n\n## Development Workflow\nDeveloping commands, whether for local use or contributing to `Chisel` directly, both follow the same workflow. Create a command as described in the [Custom Commands](#custom-commands) section and then\n\n1. Start `LLDB`\n2. Reach a breakpoint (or simply pause execution via the pause button in `Xcode`'s debug bar or `process interrupt` if attached directly)\n3. Execute `command source ~/.lldbinit` in LLDB to source the commands\n4. Run the command you are working on\n5. Modify the command\n6. Optionally run `script reload(modulename)`\n7. Repeat steps 3-6 until the command becomes a source of happiness\n\n## Contributing\nPlease contribute any generic commands that you make. If it helps you then it will likely help many others! :D See `CONTRIBUTING.md` to learn how to contribute.\n\n## License\n`Chisel` is MIT-licensed. See `LICENSE`."
}
