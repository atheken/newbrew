{
  "name": "dnstwist",
  "full_name": "dnstwist",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Test domains for typo squatting, phishing and corporate espionage",
  "license": "Apache-2.0",
  "homepage": "https://github.com/elceef/dnstwist",
  "versions": {
    "stable": "20230509",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://files.pythonhosted.org/packages/dc/7e/e473c19e6a885cdebfd6c6d18fcdb4c1f00d9caf17d72112a366023628e9/dnstwist-20230509.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "153f1f833d456dff8a70b622f13a5699af392782415d69fc38dd26f98eb4740c"
    }
  },
  "revision": 2,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dnstwist/blobs/sha256:02d60ac57f0ad6547ee6cbdb65db261779098450ed772495f963aeafe16506fd",
          "sha256": "02d60ac57f0ad6547ee6cbdb65db261779098450ed772495f963aeafe16506fd"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dnstwist/blobs/sha256:b0c0bf7d74fae3d1c8237e60782533b4b24fae2abf9b8a4ce431cf552f72c671",
          "sha256": "b0c0bf7d74fae3d1c8237e60782533b4b24fae2abf9b8a4ce431cf552f72c671"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dnstwist/blobs/sha256:5f8cdcc2dbd73945c15001cbc4da0ccdd54bdf702b7ca833b147214b10ccefa8",
          "sha256": "5f8cdcc2dbd73945c15001cbc4da0ccdd54bdf702b7ca833b147214b10ccefa8"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dnstwist/blobs/sha256:c8bd97cf6b54d50444452ebcc09178bfd079b9f086619bd5ed779ed034e0ca43",
          "sha256": "c8bd97cf6b54d50444452ebcc09178bfd079b9f086619bd5ed779ed034e0ca43"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dnstwist/blobs/sha256:9ac47adc1626c9a0ffb6dba22baa0203c1b69d3aad00967d9bc88c2259a8881b",
          "sha256": "9ac47adc1626c9a0ffb6dba22baa0203c1b69d3aad00967d9bc88c2259a8881b"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dnstwist/blobs/sha256:342d25379777e0b08bd426f521fe5381782a9cc0b27e0f542b41e8969764a6b5",
          "sha256": "342d25379777e0b08bd426f521fe5381782a9cc0b27e0f542b41e8969764a6b5"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dnstwist/blobs/sha256:49ecc49010f864a3361ce15e0c2bdd7f84d08dc86f9e35475a8ddd4b69d65e5d",
          "sha256": "49ecc49010f864a3361ce15e0c2bdd7f84d08dc86f9e35475a8ddd4b69d65e5d"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "geoip",
    "python@3.11",
    "ssdeep",
    "whois"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "libffi"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/dnstwist.rb",
  "ruby_source_checksum": {
    "sha256": "0670b0d6097e5ef0172488a87955f3439105964a8b2c54c6ff19b56eb5d9b59d"
  },
  "date_added": "2015-11-09T19:52:44+00:00",
  "readme": "![dnstwist](/docs/dnstwist.png)\n===============================\n\nSee what sort of trouble users can get in trying to type your domain name.\nFind lookalike domains that adversaries can use to attack you. Can detect\ntyposquatters, phishing attacks, fraud, and brand impersonation. Useful as an\nadditional source of targeted threat intelligence.\n\n![Demo](/docs/demo.gif)\n\nDNS fuzzing is an automated workflow that aims to uncover potentially malicious\ndomains that target your organization. This tool generates a comprehensive list\nof permutations based on a provided domain name, and subsequently verifies\nwhether any of these permutations are in use.\nAdditionally, it can generate fuzzy hashes of web pages to detect ongoing\nphishing attacks or brand impersonation, and much more!\n\nIn a hurry? Try it in your web browser: [dnstwist.it](https://dnstwist.it)\n\n\nKey features\n------------\n\n- Variety of highly effective domain fuzzing algorithms\n- Unicode domain names (IDN)\n- Additional domain permutations from dictionary files\n- Efficient multithreaded task distribution\n- Live phishing webpage detection:\n  - HTML similarity with fuzzy hashes (ssdeep/tlsh)\n  - Screenshot visual similarity with perceptual hashes (pHash)\n- Rogue MX host detection (intercepting misdirected e-mails)\n- GeoIP location\n- Export to CSV and JSON\n\n\nInstallation\n------------\n\n**Python PIP**\n\n```\n$ pip install dnstwist[full]\n```\n\nAlternatively install the bare minimum and add other requirements manually\ndepending on your needs:\n\n```\n$ pip install dnstwist\n```\n\n**Git**\n\nIf you want to run the latest version of the code, you can install it from Git:\n\n```\n$ git clone https://github.com/elceef/dnstwist.git\n$ cd dnstwist\n$ pip install .\n```\n\n**Debian/Ubuntu/Kali Linux**\n\nInvoke the following command to install the tool with all extra packages:\n\n```\n$ sudo apt install dnstwist\n```\n\n**Fedora Linux**\n\n```\n$ sudo dnf install dnstwist\n```\n\n**macOS**\n\nThis will install `dnstwist` along with all dependencies, and the binary will\nbe added to `$PATH`.\n\n```\n$ brew install dnstwist\n```\n\n**Docker**\n\nPull and run official image from the Docker Hub:\n\n```\n$ docker run -it elceef/dnstwist\n```\n\nAlternatively you can build your local images:\n\n```\n$ docker build -t dnstwist .\n$ docker build -t dnstwist:phash --build-arg phash=1 .\n```\n\n\nQuick start guide\n-----------------\n\nThe tool will run the provided domain name through its fuzzing algorithms and\ngenerate a list of potential phishing domains along with DNS records.\n\nUsually thousands of domain permutations are generated - especially for longer\ninput domains. In such cases, it may be practical to display only the ones that\nare registered:\n\n```\n$ dnstwist --registered domain.name\n```\n\nEnsure your DNS server can handle thousands of requests within a short period\nof time. Otherwise, you can specify an external DNS or DNS-over-HTTPS server\nwith `--nameservers` argument.\n\nIf domain permutations generated by the fuzzing algorithms are insufficient,\nplease supply `dnstwist` with a dictionary file. Some dictionary samples with\na list of the most common words used in phishing campaigns are included.\n\n```\n$ dnstwist --dictionary dictionaries/english.dict domain.name\n```\n\nIf you need to check whether domains with different TLD exist, just supply\na dictionary file with the list of TLD.\n\n```\n$ dnstwist --tld dictionaries/common_tlds.dict domain.name\n```\n\nOn the other hand, if only selected algorithms need to be used, `--fuzzers`\nargument is available, which takes a comma-separated list.\n\nNote: non-existent algorithm names will be silently ignored.\n\n```\n$ dnstwist --fuzzers homoglyph,hyphenation domain.name\n```\n\nApart from the colorful terminal output, the tool allows exporting results to\nCSV and JSON:\n\n```\n$ dnstwist --format csv domain.name | column -t -s,\n$ dnstwist --format json domain.name | jq\n```\n\nIn case you need just the bare permutations without making any DNS lookups, use\n`--format list` argument:\n\n```\n$ dnstwist --format list domain.name\n```\n\nThe tool can perform real-time lookups to return geographical location\n(approximated to the country) of IPv4 addresses.\n\n```\n$ dnstwist --geoip domain.name\n```\n\nThe GeoIP2 library is used by default. Country database location has to be\nspecified with `$GEOLITE2_MMDB` environment variable. If the library or the\ndatabase are not present, the tool will fall-back to the older GeoIP Legacy.\n\nTo display all available options with brief descriptions simply execute the\ntool without any arguments.\n\n\nPhishing detection\n------------------\n\nManually checking each domain name in terms of serving a phishing site might be\ntime-consuming. To address this, `dnstwist` makes use of so-called fuzzy hashes\n(locality-sensitive hash, LSH) and perceptual hashes (pHash). Fuzzy hashing is\na concept that involves the ability to compare two inputs (HTML code) and\ndetermine a fundamental level of similarity, while perceptual hash is\na fingerprint derived from visual features of an image (web page screenshot).\n\n**Fuzzy hashing**\n\nThe unique feature of detecting similar HTML source code can be enabled with\n`--lsh` argument. For each generated domain, `dnstwist` will fetch content\nfrom responding HTTP server (following possible redirects), normalize HTML code\nand compare its fuzzy hash with the one for the original (initial) domain. The\nlevel of similarity is expressed as a percentage.\n\nIn cases when the effective URL is the same as for the original domain, the\nfuzzy hash is not calculated at all in order to reject false positive\nindications.\n\nNote: Keep in mind it's rather unlikely to get 100% match, even for MITM attack\nframeworks, and that a phishing site can have a completely different HTML\nsource code.\n\n```\n$ dnstwist --lsh domain.name\n```\n\nIn some cases, phishing sites are served from a specific URL. If you provide a\nfull or partial URL address as an argument, `dnstwist` will parse it and apply\nfor each generated domain name variant. Use `--lsh-url` to override URL to\nfetch the original web page from.\n\n```\n$ dnstwist --lsh https://domain.name/owa/\n$ dnstwist --lsh --lsh-url https://different.domain/owa/ domain.name\n```\n\nBy default, *ssdeep* is used as LSH algorithm, but *TLSH* is also available and\ncan be enabled like so:\n\n```\n$ dnstwist --lsh tlsh domain.name\n```\n\n**Perceptual hashing**\n\nIf Chromium browser is installed, `dnstwist` can utilize its headless mode,\nwhich operates without a graphical user interface, to capture web page\nscreenshots, render them, and calculate pHash values. These pHash values are\nthen compared to evaluate the visual similarity, expressed as a percentage.\n\n```\n$ dnstwist --phash domain.name\n```\n\nMoreover, it is possible to save the captured screenshots in the PNG format to\na location of choice:\n\n```\n$ dnstwist --phash --screenshots /tmp/domain domain.name\n```\n\nNote: Due to the multi-threaded use of a fully functional web browser,\nan appropriate amount of free resources (mainly memory) should be provided.\n\n\nAPI\n---\n\nIn case you need to consume the data produced by the tool within your code,\nthe most convenient and efficient way is to pass the input as follows.\n\n```\n>>> import dnstwist\n>>> data = dnstwist.run(domain='domain.name', registered=True, format='null')\n```\n\nThe arguments for `dnstwist.run()` are translated internally, so the usage is\nvery similar to the command line. The returned data structure is an\neasy-to-process list of dictionaries. Keep in mind that `dnstwist.run()` spawns\na number of daemon threads.\n\n\nNotes on coverage\n-----------------\n\nAs the length of the input domain increases, the number of variants generated\nby the algorithms increases significantly, resulting in a substantial increase\nin the time and resources required to verify them. Checking every possible\ndomain permutation is impractical, especially for longer input domains, which\nwould require millions of DNS lookups. Thus, this tool generates and checks\ndomains that are very similar to the original one. Theoretically, these domains\nare the most appealing from an attacker's point of view. However, it's\nessential to note that attackers' imagination is unlimited.\n\nUnicode tables comprise thousands of characters with many of them visually\nsimilar to one another. However, despite the fact certain characters are\nencodable using punycode, most TLD authorities will reject them during domain\nregistration process. In general, TLD authorities disallow mixing of characters\ncoming from different Unicode scripts or maintain their own sets of acceptable\ncharacters. With that being said, the homoglyph fuzzer was build on top of\ncarefully researched range of Unicode characters (homoglyphs) to ensure that\ngenerated domains can be registered in practice.\n\n\nIntegrations\n------------\n\nThe scanner is utilized by tens of SOC and incident response teams around the\nglobe, as well as independent information security analysts and researchers.\nOn top of this, it's integrated into products and services of many security\nproviders, in particular but not only:\n\nSplunk ESCU, RecordedFuture, SpiderFoot, DigitalShadows, SecurityRisk,\nSmartFense, ThreatPipes, PaloAlto Cortex XSOAR, Rapid7 InsightConnect SOAR,\nMimecast, Watcher, Intel Owl, PatrOwl, VDA Labs, Appsecco, Maltego,\nConscia ThreatInsights, Fortinet FortiSOAR, ThreatConnect.\n\n\nContact\n-------\n\nTo send questions, thoughts or a bar of chocolate, just drop an e-mail at\n[marcin@ulikowski.pl](mailto:marcin@ulikowski.pl).\nAny feedback is appreciated. If you have found some confirmed phishing domains\nor just like this tool, please don't hesitate and send a message. Thank you."
}
