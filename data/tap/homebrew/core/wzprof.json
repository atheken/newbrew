{
  "name": "wzprof",
  "full_name": "wzprof",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Profiling for Wazero",
  "license": "Apache-2.0",
  "homepage": "https://github.com/stealthrocket/wzprof",
  "versions": {
    "stable": "0.2.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/stealthrocket/wzprof/archive/refs/tags/v0.2.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "20223095b6b0bcb7ee655e755d2979f743a1bd03bf4fb09928856356caa9d463"
    },
    "head": {
      "url": "https://github.com/stealthrocket/wzprof.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/wzprof/blobs/sha256:e5cd9073cd439d27d735796f4f88ca53e320d00767202195df23a151cd207f7e",
          "sha256": "e5cd9073cd439d27d735796f4f88ca53e320d00767202195df23a151cd207f7e"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/wzprof/blobs/sha256:e5cd9073cd439d27d735796f4f88ca53e320d00767202195df23a151cd207f7e",
          "sha256": "e5cd9073cd439d27d735796f4f88ca53e320d00767202195df23a151cd207f7e"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/wzprof/blobs/sha256:e5cd9073cd439d27d735796f4f88ca53e320d00767202195df23a151cd207f7e",
          "sha256": "e5cd9073cd439d27d735796f4f88ca53e320d00767202195df23a151cd207f7e"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/wzprof/blobs/sha256:38d8f01a22a239c240d6e00db065fc8036f5ae039501925ec0df0a0366983bba",
          "sha256": "38d8f01a22a239c240d6e00db065fc8036f5ae039501925ec0df0a0366983bba"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/wzprof/blobs/sha256:38d8f01a22a239c240d6e00db065fc8036f5ae039501925ec0df0a0366983bba",
          "sha256": "38d8f01a22a239c240d6e00db065fc8036f5ae039501925ec0df0a0366983bba"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/wzprof/blobs/sha256:38d8f01a22a239c240d6e00db065fc8036f5ae039501925ec0df0a0366983bba",
          "sha256": "38d8f01a22a239c240d6e00db065fc8036f5ae039501925ec0df0a0366983bba"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/wzprof/blobs/sha256:a163de238c1aa3233c725104f4a523cc26d6fd30c5c132d4e408415bdce3ac1d",
          "sha256": "a163de238c1aa3233c725104f4a523cc26d6fd30c5c132d4e408415bdce3ac1d"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/wzprof.rb",
  "ruby_source_checksum": {
    "sha256": "31f2275cf499106ec9d570c17084e70e2d5635a1ed430a4a8cda61bf37ea58a7"
  },
  "date_added": "2023-06-02T19:07:15-04:00",
  "readme": "[![Build](https://github.com/stealthrocket/wzprof/actions/workflows/build.yml/badge.svg)](https://github.com/stealthrocket/wzprof/actions/workflows/build.yml)\n[![Go Report Card](https://goreportcard.com/badge/github.com/stealthrocket/wzprof)](https://goreportcard.com/report/github.com/stealthrocket/wzprof)\n[![Go Reference](https://pkg.go.dev/badge/github.com/stealthrocket/wzprof.svg)](https://pkg.go.dev/github.com/stealthrocket/wzprof)\n[![Apache 2 License](https://img.shields.io/badge/license-Apache%202-blue.svg)](LICENSE)\n\n# wzprof\n\n`wzprof`, pronounced as you think it should, is a pprof based profiler for\nWebAssembly built on top of [**Wazero**](https://github.com/tetratelabs/wazero).\nIt offers the ability to collect CPU and Memory profiles during the execution of\nWebAssembly modules.\n\nIf you are interested in taking a deep-dive into how `wzprof` is built,\nyou might enjoy reading:\n\nüëâ [**Performance in the spotlight: WebAssembly profiling for everyone**](https://blog.stealthrocket.tech/performance-in-the-spotlight-webassembly-profiling-for-everyone)\n\n## Motivation\n\nWebAssembly runtimes typically allow profiling guest code via an external\nprofiler such as `perf`, but in many cases the recording and analysis of\nprofiles remains a difficult task, especially due to features like JIT\ncompilation.\n\n`pprof` is the de-facto standard profiling tool for Go programs, and offers\nsome of the simplest and quickest ways to gather insight into the performance\nof an application.\n\n`wzprof` aims to combine the capabilities and user experience of `pprof`\nwith a [**wazero.Runtime**](https://pkg.go.dev/github.com/tetratelabs/wazero#Runtime),\nenabling the profiling of any application compiled to WebAssembly.\n\n## Features\n\n`wzprof` mimics the approach and workflow popularized by Go pprof, and extends\nit to collect profiles of WebAssembly programs compiled from any programming\nlanguage. The profiles produced are designed to be compatible with pprof,\nallowing developers to use the classic `go tool pprof` workflow to analyize\napplication performance.\n\n- CPU: calls sampling and on-CPU time.\n- Memory: allocations (see below).\n- DWARF support (demangling, source-level profiling).\n- Integrated pprof server.\n- Library and CLI interfaces.\n\n## Usage\n\nYou can either use `wzprof` as a CLI or as a library if you use the Wazero\nruntime libraries.\n\nTo install the latest version of `wzprof`:\n```sh\ngo install github.com/stealthrocket/wzprof/cmd/wzprof@latest\n```\nTo use the library as code in a Go program:\n```sh\ngo get github.com/stealthrocket/wzprof@latest\n```\n\n### Sampling \n\nBy default, wzprof will sample calls with a ratio of 1/19. Sampling is used to\nlimit the overhead of the profilers but the default rate might not be suitable \nin some cases. \nFor example, if your processes are short running and you don't see anything in the \nprofile, you might want to disable the sampling. To do so, use `-sample 1`.\n\n### Run program to completion with CPU or memory profiling\n\nIn those examples we set the sample rate to 1 to capture all samples because the\ntest programs complete quickly.\n\n```sh\nwzprof -sample 1 -memprofile /tmp/profile ./testdata/c/simple.wasm\n```\n```sh\nwzprof -sample 1 -cpuprofile /tmp/profile ./testdata/c/crunch_numbers.wasm\n```\n```sh\ngo tool pprof -http :4000 /tmp/profile\n```\n\n### Connect to running pprof server\n\nSimilarly to [`net/http/pprof`](https://pkg.go.dev/net/http/pprof), `wzprof`\ncan expose a pprof-compatible http endpoint on behalf of the guest application:\n\n```sh\nwzprof -pprof-addr :8080 ...\n```\n```sh\ngo tool pprof -http :3030 'http://localhost:8080/debug/pprof/profile?seconds=5'\n```\n```sh\ngo tool pprof -http :3030 'http://localhost:8080/debug/pprof/heap'\n```\n\n## Profilers\n\n‚ö†Ô∏è  The `wzprof` Go APIs depend on Wazero's `experimental` package which makes no\nguarantees of backward compatilbity!\n\nThe following code snippet demonstrates how to integrate the profilers to a\nWazero runtime within a Go program:\n\n```go\nsampleRate := 1.0\n\np := wzprof.ProfilingFor(wasmCode)\ncpu := p.CPUProfiler()\nmem := p.MemoryProfiler()\n\nctx := context.WithValue(context.Background(),\n\texperimental.FunctionListenerFactoryKey{},\n\texperimental.MultiFunctionListenerFactory(\n\t\twzprof.Sample(sampleRate, cpu),\n\t\twzprof.Sample(sampleRate, mem),\n    ),\n)\n\nruntime := wazero.NewRuntime(ctx)\ndefer runtime.Close(ctx)\n\ncompiledModule, err := runtime.CompileModule(ctx, wasmCode)\nif err != nil {\n\tlog.Fatal(\"compiling wasm module:\", err)\n}\n\nerr = p.Prepare(compiledModule)\nif err != nil {\n\treturn fmt.Errorf(\"preparing wasm module: %w\", err)\n}\n\n// The CPU profiler collects records of module execution between two time\n// points, the program drives where the profiler is active by calling\n// StartProfile/StopProfile.\ncpu.StartProfile()\n\nmoduleInstance, err := runtime.InstantiateModule(ctx, compiledModule,\n\twazero.NewModuleConfig(),\n)\nif err != nil {\n\tlog.Fatal(\"instantiating wasm module:\", err)\n}\nif err := moduleInstance.Close(ctx); err != nil {\n\tlog.Fatal(\"closing wasm module:\", err)\n}\n\ncpuProfile := cpu.StopProfile(sampleRate, symbols)\nmemProfile := mem.NewProfile(sampleRate, symbols)\n\nif err := wzprof.WriteProfile(\"cpu.pprof\", cpuProfile); err != nil {\n\tlog.Fatal(\"writing CPU profile:\", err)\n}\nif err := wzprof.WriteProfile(\"mem.pprof\", memProfile); err != nil {\n\tlog.Fatal(\"writing memory profile:\", err)\n}\n```\n\nNote that the program must spearate the compilation and instantiation of\nWebAssembly modules in order to use the profilers, because the module must be\ncompiled first in order to build the list of symbols from the DWARF sections.\n\n### Memory\n\nMemory profiling works by tracing specific functions. Supported functions are:\n\n- `malloc`\n- `calloc`\n- `realloc`\n- `free`\n- `runtime.mallocgc`\n- `runtime.alloc`\n\nFeel free to open a pull request to support more memory-allocating functions!\n\n### CPU\n\n`wzprof` has two CPU profilers: CPU samples and CPU time.\n\nThe CPU samples profiler gives a repesentation of the guest execution by counting\nthe number of time it sees a unique stack trace.\n\nThe CPU time profiler measures the actual time spent on-CPU without taking into\naccount the off-CPU time (e.g waiting for I/O). For this profiler, all the\nhost-functions are considered off-CPU.\n\n## Language support\n\nwzprof runs some heuristics to assess what the guest module is running to adapt\nthe way it symbolizes and walks the stack. In all other cases, it defaults to\ninspecting the wasm stack and uses DWARF information if present in the module.\n\n### Golang\n\nIf the guest has been compiled by golang/go 1.21+, wzprof inspects the memory\nto walk the Go stack, which provides full call stacks, instead of the shortened\nversions you would get without this support.\n\nIn addition, wzprof parses pclntab to perform symbolization. This is the same\nmechanism the Go runtime itself uses to display meaningful stack traces when a\npanic occurs.\n\n### Python 3.11\n\nIf the guest is CPython 3.11 and has been compiled with debug symbols (such as\n[timecraft's][timecraft-python]), wzprof walks the Python interpreter call\nstack, not the C stack it would otherwise report. This provides more meaningful\nprofiling information on the script being executed.\n\nAt the moment it does not support merging the C extension calls into the Python\ninterpreter stack.\n\nNote that a current limitation of the implementation is that unloading or\nreloading modules may result in an incorrect profile. If that's a problem for\nyou please file an issue in the github tracker.\n\n[timecraft-python]: https://docs.timecraft.dev/getting-started/prep-application/compiling-python#preparing-python\n\n\n### DWARF (C, Rust, Zig...)\n\nAs a fallback, if DWARF sections are available, wzprof symbolizes the wasm stack\ntrace using the DWARF symbols stored in custom sections of the module. For this\nto work, you need to make sure your compiler generates those sections. For\nexample, use `-g` when compiling with clang:\n\n```\nclang code.c -o code.wasm -g -target wasm32\n```\n\n> **Warning**\n> When using clang with any optimization level other than `-O0`, it will\n> automatically run `wasm-opt` if that program is in your `PATH`. It makes DWARF\n> information unusable by wzprof. Make sure clang can't find `wasm-opt` during\n> compilation. See [llvm/llvm-project#55781][llvm-bug].\n\n[llvm-bug]: https://github.com/llvm/llvm-project/issues/55781\n\n## Contributing\n\nPull requests are welcome! Anything that is not a simple fix would probably\nbenefit from being discussed in an issue first.\n\nRemember to be respectful and open minded!"
}
