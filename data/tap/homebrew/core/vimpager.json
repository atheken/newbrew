{
  "name": "vimpager",
  "full_name": "vimpager",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [
    "vimcat"
  ],
  "versioned_formulae": [],
  "desc": "Use ViM as PAGER",
  "license": null,
  "homepage": "https://github.com/rkitover/vimpager",
  "versions": {
    "stable": "2.06",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/rkitover/vimpager/archive/2.06.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "cc616d0840a6f2501704eea70de222ab662421f34b2da307e11fb62aa70bda5d"
    },
    "head": {
      "url": "https://github.com/rkitover/vimpager.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vimpager/blobs/sha256:fd379bf4e911d29607becd56bc99a4d3c0c5fafaa5bcf422c7df37e5dc9ec2bb",
          "sha256": "fd379bf4e911d29607becd56bc99a4d3c0c5fafaa5bcf422c7df37e5dc9ec2bb"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vimpager/blobs/sha256:b2b9ce26d12c155adb0c9e2524b67b7e8e0a41fb75ee524999ec0818ca619659",
          "sha256": "b2b9ce26d12c155adb0c9e2524b67b7e8e0a41fb75ee524999ec0818ca619659"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vimpager/blobs/sha256:356c5407fc0656ac0b4ae4a7a3e62f1992525a120a7a1d0b6fdd514561d5381d",
          "sha256": "356c5407fc0656ac0b4ae4a7a3e62f1992525a120a7a1d0b6fdd514561d5381d"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vimpager/blobs/sha256:c37538249a0c974631d1b6b09d7dcb434a7cca9a9453d2c273ac23c0196932d1",
          "sha256": "c37538249a0c974631d1b6b09d7dcb434a7cca9a9453d2c273ac23c0196932d1"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vimpager/blobs/sha256:37620c6662f65c8314c749c26260bafff4645b80877e9f152783d063dcae9283",
          "sha256": "37620c6662f65c8314c749c26260bafff4645b80877e9f152783d063dcae9283"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vimpager/blobs/sha256:9ead831c50c50e1b95b18695737936bc907c9241867d3700c87120c8af09aea7",
          "sha256": "9ead831c50c50e1b95b18695737936bc907c9241867d3700c87120c8af09aea7"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vimpager/blobs/sha256:2a409da1fc4a31e1165e33ed681ed15b874d514721c7295a0901ebf4516aa469",
          "sha256": "2a409da1fc4a31e1165e33ed681ed15b874d514721c7295a0901ebf4516aa469"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vimpager/blobs/sha256:f4ec02de4d30af041e98f3ab4ce6344424f7a8f5bfeca6cf21dc179cbd6e576a",
          "sha256": "f4ec02de4d30af041e98f3ab4ce6344424f7a8f5bfeca6cf21dc179cbd6e576a"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vimpager/blobs/sha256:73aaa39c9876664b2f0b0a98dea30ea34e05504f28d607276873345d57b97834",
          "sha256": "73aaa39c9876664b2f0b0a98dea30ea34e05504f28d607276873345d57b97834"
        },
        "sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vimpager/blobs/sha256:308c68e761983beb317bbefcba285022dbc74a66486a3da7e2ac8bc929649a3a",
          "sha256": "308c68e761983beb317bbefcba285022dbc74a66486a3da7e2ac8bc929649a3a"
        },
        "el_capitan": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vimpager/blobs/sha256:eccfe695299ff91b489e0385b2024e6f383426f696dc4a5462fe2e0bc6f875b1",
          "sha256": "eccfe695299ff91b489e0385b2024e6f383426f696dc4a5462fe2e0bc6f875b1"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vimpager/blobs/sha256:305b43fcc4537a7e89d1a30aef599be641925cb68fe6f87de8216e9cec4391ad",
          "sha256": "305b43fcc4537a7e89d1a30aef599be641925cb68fe6f87de8216e9cec4391ad"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "pandoc"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": "To use vimpager as your default pager, add `export PAGER=vimpager` to your\nshell configuration.\n",
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/vimpager.rb",
  "ruby_source_checksum": {
    "sha256": "04188ee250a8f96455f3e522929fce2b840165a3a19a9d7952d6842da038349f"
  },
  "date_added": "2010-12-11T20:39:52+00:00",
  "readme": "[![Join the chat at https://gitter.im/vimpager/Lobby](https://badges.gitter.im/vimpager/Lobby.svg)](https://gitter.im/vimpager/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n### Vimpager User Manual\n\n- [NAME](#name)\n- [SYNOPSIS](#synopsis)\n- [RUN-TIME DEPENDENCIES](#run-time-dependencies)\n- [BUILD DEPENDENCIES](#build-dependencies)\n- [INSTALL](#install)\n- [PATHOGEN INSTALLATION](#pathogen-installation)\n- [DESCRIPTION](#description)\n- [USING FROM VIM](#using-from-vim)\n- [COMMAND LINE OPTIONS](#command-line-options)\n  - [-h | --help | --usage](#-h----help----usage)\n  - [-v | --version](#-v----version)\n  - [+ | +G](#--g)\n  - [+F](#f)\n  - [-N | --LINE-NUMBERS](#-n----line-numbers)\n  - [-c cmd](#-c-cmd)\n  - [--cmd cmd](#--cmd-cmd)\n  - [-u vimrc](#-u-vimrc)\n  - [-s](#-s)\n  - [--passthrough](#--passthrough)\n  - [--force-passthrough](#--force-passthrough)\n  - [--no-passthrough](#--no-passthrough)\n  - [-x](#-x)\n- [ANSI ESCAPE SEQUENCES AND OVERSTRIKES](#ansi-escape-sequences-and-overstrikes)\n- [PASSTHROUGH MODE](#passthrough-mode)\n- [CYGWIN/MSYS/MSYS2 NOTES](#cygwinmsysmsys2-notes)\n- [ENVIRONMENT](#environment)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n# NAME\n\nvimpager - pager using vim and less.vim\n\n# SYNOPSIS\n\nvimpager [options] 'some file'\n\n&#35; or (this won't always syntax highlight as well)\n\ncat 'some file' | vimpager [options]\n\nFor vimcat see [here](markdown/vimcat.md) or 'man vimcat'.\n\n# RUN-TIME DEPENDENCIES\n\n* vim, version >= 7.3\n* a POSIX conformant shell, see [the\n  standard](http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html)\n  common variants are searched for, bash is fine\n\n# BUILD DEPENDENCIES\n\n* sharutils or some uuencode (only if you change the */*.vim sources)\n* pandoc (for man pages and html, optional)\n* doctoc (for markdown TOCs, optional)\n* bats (for tests, optional, get it from:\n  https://github.com/sstephenson/bats.git)\n\n# INSTALL\n\nOn Ubuntu or Debian, use the following to install a package:\n\n```bash\ngit clone https://github.com/rkitover/vimpager\ncd vimpager\nsudo make install-deb\n```\n\nTo just build the '.deb' use `make build-deb` instead.\n\nOtherwise use 'make install':\n\n```bash\ngit clone https://github.com/rkitover/vimpager\ncd vimpager\nsudo make install\n```\n\nThe following make settings are supported at `make install` time:\n\n| **Variable** | **Purpose**                                         |\n|--------------|-----------------------------------------------------|\n| DESTDIR      | base dir where files will be written, for packaging |\n| PREFIX       | install prefix to configure for, e.g. /usr/local    |\n| prefix       | prefix for writing files, e.g. for GNU stow         |\n| POSIX_SHELL  | POSIX shell to use to run the scripts               |\n\n**NOTE:** you should `make clean` before modifying these make settings, as the\n'install' make target does not account for their change.\n\nIf you got vimpager from the vim.org scripts section, just put it\nsomewhere in your PATH, e.g.:\n\n```bash\ncp vimpager ~/bin\nchmod +x ~/bin/vimpager\n```\n\nIn your ~/.bashrc add the following:\n\n```bash\nexport PAGER=/usr/local/bin/vimpager\nalias less=$PAGER\nalias zless=$PAGER\n```\n\n# PATHOGEN INSTALLATION\n\n```bash\ncd ~/.vim/bundle\ngit clone https://github.com/rkitover/vimpager.git\n```\n\nIf you installed using one of the above methods, you can add the runtime to your\n`runtimepath` by putting the following in your `.vimrc`:\n\n```vim\nset rtp^=/usr/share/vimpager\n```\n\nSet `PAGER` and aliases as above with the path into `~/.vim/bundle/vimpager`.\n\nSee [Using From Vim](#using-from-vim).\n\n# DESCRIPTION\n\nA PAGER using less.vim with support for highlighting of man pages and\nmany other features. Works on most UNIX-like systems as well as Cygwin\nand MSYS.\n\nOn GitHub: <http://github.com/rkitover/vimpager>\n\nTo use a different vimrc with vimpager, put your settings into a ~/.vimpagerrc\nor ~/.vim/vimpagerrc or a file pointed to by the VIMPAGER_RC environment\nvariable.\n\nYou can also have a global config file for all users in /etc/vimpagerrc, it will\nbe used if the user does not have a `.vimrc` or `.vimpagerrc`.\n\nThese are the keys for paging while in vimpager, they are the same as in\nless for the most part:\n\n| **Key** | **Action**              | **Key** | **Action**                |\n|---------|-------------------------|---------|---------------------------|\n|Space    |One page forward         |b        |One page backward          |\n|d        |Half a page forward      |u        |Half a page backward       |\n|Enter    |One line forward         |k        |One line backward          |\n|G        |End of file              |g        |Start of file              |\n|N%       |percentage in file       |,h       |Display this help          |\n|/pattern |Search forward           |?pattern |Search backward            |\n|n        |next match               |N        |Previous match             |\n|`:n`     |next file                |`:N`     |Previous file              |\n|ESC-u    |toggle search highlight  |         |                           |\n|q        |Quit                     |,v       |Toggle Less Mode           |\n\nThe commands that start with `,` will use your value of `g:mapleader` if you set\none instead.\n\nTo disable loading plugins, put \"set noloadplugins\" into a vimpagerrc\nfile.\n\nYou can also switch on `exists('g:vimpager.enabled')` in your vimrc to set\nalternate settings for vimpager.\n\n**WARNING:** Option names have changed from the previous releases to use a\ndict, if you use the old option names and check on `exists('g:vimpager')`\neverything will work the same way, if you use the new option names you must\ncheck `exists('g:vimpager.enabled')` instead.\n\n**NOTE:** Before setting the vimpager and less.vim related options described\nbelow, make sure the `g:vimpager` and `g:less` dicts exist like so:\n\n```vim\nif !exists('g:vimpager')\n  let g:vimpager = {}\nendif\n\nif !exists('g:less')\n  let g:less     = {}\nendif\n```\n\nIf you want to disable less compatibility mode, and use regular vim\nmotion commands, put this into your .vimrc/vimpagerrc:\n\n```vim\nlet g:less.enabled = 0\n```\n\nYou can still enable less mode with this setting by pressing \",v\". If you\ndefine `g:mapleader` then it will be the value of `g:mapleader` plus `v`\ninstead of `,v`.\n\nPut the following into your .vimrc/vimpagerrc if you want to use gvim/MacVim\nfor your pager window:\n\n```vim\nlet g:vimpager.gvim = 1\n```\n\nTo turn off the feature of passing through text that is smaller than the\nterminal height use this:\n\n```vim\nlet g:vimpager.passthrough = 0\n```\n\nSee \"PASSTHROUGH MODE\" further down.\n\nTo turn on line numbers set:\n\n```vim\nlet g:less.number = 1\n```\n\nthey are turned off by default. You can also invoke vimpager with the `-N`\noption to turn on line numbers.\n\nTo turn off search highlighting set:\n\n```vim\nlet g:less.hlsearch = 0\n```\n\nthis can always be toggled with `ESC-u`.\n\nTo start vim with -X (no x11 connection, a bit faster startup) put the following\ninto your .vimrc/vimpagerrc:\n\n```vim\nlet g:vimpager.X11 = 0\n```\n\n**NOTE:** this may disable clipboard integration in X terminals.\n\nThe scroll offset (:help scrolloff), may be specified by placing the\nfollowing into your .vimrc/vimpagerrc (default = 5, disable = 0):\n\n```vim\nlet g:less.scrolloff = 5\n```\n\nThe default is 5 only in less mode, with less mode disabled the default\nis the user's scrolloff setting.\n\nThe process tree of vimpager is available in `vimpager.ptree`, an example usage\nis as follows:\n\n```vim\nif exists('g:vimpager.enabled')\n  if exists('g:vimpager.ptree') && g:vimpager.ptree[-2] == 'wman'\n    set ft=man\n  endif\nendif\n```\n\nTo disable the use of AnsiEsc.vim to display ANSI colors in the source,\nset:\n\n```vim\nlet g:vimpager.ansiesc = 0\n```\n\nsee the section [ANSI ESCAPE SEQUENCES AND\nOVERSTRIKES](#ansi-escape-sequences-and-overstrikes) for more details.\n\nYou can also set your own function for the message on the statusline via\n`g:less.statusfunc`, see `autoload/vimpager_utils.vim` for the default one as an\nexample.\n\n# USING FROM VIM\n\nIf you installed vimpager via [Pathogen](#pathogen-installation) or added it to\nyour `runtimepath`, then the `Page` command is available from normal vim\nsessions, and it is also available when invoking the vimpager script.\n\nIf your global `keywordprg` is set to `man` or `:Man`, which is the default, the\nplugin will reset it to `:Page!\\ -t\\ man` to page man pages in a new tab. See\nthe example below for how to set this for other file types.\n\nYou may want to add something like the following to your `.vimrc` to enable the\nmapping to turn on less mode:\n\n```vim\nlet g:mapleader = ','\nruntime macros/less.vim\n```\n\nThen `,v` will toggle less mode in any buffer. The default `mapleader` is `\\`.\n\n**NOTE:** If you are using Vim 7.3 or earlier, the Surround plugin will conflict\nwith less.vim mappings such as Ctrl-D, on 7.4+ this is not an issue as the\n`<nowait>` tag is used for mappings.\n\nThe syntax of the `Page` command is:\n\n| **Command** | **Option**       | **Arg**        | **Action**                          |\n|-------------|------------------|----------------|-------------------------------------|\n| Page        | -t, -v, -w or -b | file_path      | open file in less mode              |\n| Page!       | -t, -v, -w or -b | shell_command  | open output of command in less mode |\n| Page        |                  |                | toggle less mode for current file   |\n| Page!       |                  |                | turn on less mode for current file  |\n\nThe option switch is optional and determines where the file or command is\nopened:\n\n| **Option** | **Target**           |\n|------------|----------------------|\n| -t         | new tab              |\n| -v         | vertical split       |\n| -w         | new window           |\n| -b         | new buffer (default) |\n\nThe default is to open a new buffer.\n\nFor `Page!` commands, STDERR is suppressed.\n\nI recommend adding `set hidden` to your `.vimrc`.\n\nIf the command is one of `man`, `perldoc`, `pydoc` or `ri` it will be handled\nspecially, overstrikes will be removed and `filetype` will be set to `man` or\n`perldoc`.\n\nAnsi escapes will be handled with `AnsiEsc` if available, or removed otherwise.\nSee [here](#ansi-escape-sequences-and-overstrikes) for details. The\n`g:vimpager.ansiesc` setting applies to the `Page` command if set.\n\nHere is an example (that is already enabled in the plugin) of how you can use\nthis command to look up the python documentation for the module under the cursor\nin a new tab:\n\n```vim\nautocmd FileType python setlocal keywordprg=:Page!\\ -t\\ pydoc\n```\n\nThen pressing `K` on a module name under the cursor will open the pydoc for it\nin a new tab.\n\nThis is done by default in the plugin now for python, ruby, perl and sh (bash\nhelp.) The global default is man.\n\n# COMMAND LINE OPTIONS\n\n## -h | --help | --usage\n\nPrint summary of options.\n\n## -v | --version\n\nPrint the version information.\n\n## + | +G\n\nStart at the end of the file, just like less.\n\n## +F\n\nFollow file, like `tail -f` or `less +F`, equivalent to pressing `F` in less\nmode.\n\n## -N | --LINE-NUMBERS\n\nTurn on line numbers, this can also be set with `let g:less.number = 1` .\n\n## -c cmd\n\nRun a vim command after opening the file. Multiple -c arguments are\nsupported.\n\n## --cmd cmd\n\nRun a vim command when entering vim before anything else. Multiple --cmd\narguments are supported.\n\n## -u vimrc\n\nUse alternate .vimrc or .vimpagerrc.\n\n## -s\n\nSqueeze blank lines into a single blank line. GNU man passes this option to\n/usr/bin/pager.\n\n## --passthrough\n\nIf files fit on the screen, print them with syntax highlighting using vimcat\ninstead of invoking the pager.\n\n## --force-passthrough\n\nAlways print files with syntax highlighting to the terminal instead of invoking\nthe pager, regardless of whether they fit on the screen.\n\n## --no-passthrough\n\nNever print files with syntax highlighting to the terminal with vimcat, always\ninvoke the pager.\n\n## -x\n\nEnable debugging output for the shell script part of vimpager.\n\n# ANSI ESCAPE SEQUENCES AND OVERSTRIKES\n\nIf your source is using ANSI escape codes, the AnsiEsc plugin will be\nused to show them, rather than the normal vim highlighting, however read\nthe caveats below. If this is not possible, they will be stripped out\nand normal vim highlighting will be used instead.\n\nOverstrikes in man pages, perl, python or ruby docs will always be removed.\n\nvimpager bundles the\n[AnsiEsc](http://www.vim.org/scripts/script.php?script_id=4979)\nplugin (it is expanded at runtime,\nthere is nothing you have to do to enable it.)\n\nHowever, your vim must have been compiled with the 'conceal' feature\nenabled. To check, try\n\n```vim\n:echo has('conceal')\n```\n\nif the result is '1' you have conceal, if it's '0' you do not, and the\nAnsiEsc plugin will not be enabled.\n\nIf you're on a Mac, the system vim does not enable this feature, install\nvim from Homebrew.\n\nTo disable the use of AnsiEsc.vim, set:\n\n```vim\nlet g:vimpager.ansiesc = 0\n```\n\nIf the file has a modeline that sets ft or syntax, the setting will override\nthe use of AnsiEsc.\n\nTo turn off AnsiEsc while viewing a file, simply run\n\n```vim\n:AnsiEsc\n```\n\nTo turn off AnsiEsc on the commandline, use an invocation such as the following:\n\n```sh\nvimpager -c 'set ft=&ft' somefile\n```\n\n**NOTE:** The `conceal` feature of vim is still very buggy, especially as\nconcerns spacing, and the line wrapping in files highlighted with `AnsiEsc`\nwill not be correct (they are wrapped too soon.) The tab stops will be correct\nhowever, this is fixed up with a vim script.\n\n**NOTE:** `AnsiEsc` is a work in progress, and will only display files with\nsimple ANSI codes correctly, such as that output by git tools. More complex\nhighlighting is likely not going to work right now. We are working on this.\n\n# PASSTHROUGH MODE\n\nIf the text sent to the pager is smaller than the terminal window, then\nit will be displayed without vim as text. If it has ansi codes, they\nwill be preserved, otherwise the text will be highlighted with vimcat.\n\nYou can turn this off by using:\n\n```vim\nlet g:vimpager.passthrough = 0\n```\n\n# CYGWIN/MSYS/MSYS2 NOTES\n\nvimpager works correctly with the native Windows gvim, just put it in\nyour PATH and set the vimpager_use_gvim option as described above.\n\n# ENVIRONMENT\n\n`VIMPAGER_VIM` can be set to the vim binary you want to use, if it starts with\ngvim or mvim then gui mode will be used. Will fall back to `EDITOR` if it\ncontains vim.\n\nYou can specify the vimrc to use with the `VIMPAGER_RC` environment variable.\n\nSetting `VIMPAGER_DEBUG` to a non-zero value will disable suppressing vim\nerrors on startup and when switching to the next file."
}
