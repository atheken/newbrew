{
  "name": "terraform-docs",
  "full_name": "terraform-docs",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Tool to generate documentation from Terraform modules",
  "license": "MIT",
  "homepage": "https://github.com/terraform-docs/terraform-docs",
  "versions": {
    "stable": "0.16.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/terraform-docs/terraform-docs/archive/v0.16.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "e370fd106ca74caebc8632834cc28412a3a6a160952392da71f213515bba2085"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terraform-docs/blobs/sha256:668f0822b31d0bff7505929546b63d2402cf5dd827798a0fe7e74b5e7252a0cd",
          "sha256": "668f0822b31d0bff7505929546b63d2402cf5dd827798a0fe7e74b5e7252a0cd"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terraform-docs/blobs/sha256:6fddc004ce8b2d291af3be852071361f4c08c9c15e9b427c63eded1f86cf989b",
          "sha256": "6fddc004ce8b2d291af3be852071361f4c08c9c15e9b427c63eded1f86cf989b"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terraform-docs/blobs/sha256:ee06989a498ca1ee3f94fade88adcfc96d4d6d833b6ea3582bb6aaeda15b5279",
          "sha256": "ee06989a498ca1ee3f94fade88adcfc96d4d6d833b6ea3582bb6aaeda15b5279"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terraform-docs/blobs/sha256:d90a3a70220aca39b2be6df347ae77f051ea697be474bb0283289cd9f9108fce",
          "sha256": "d90a3a70220aca39b2be6df347ae77f051ea697be474bb0283289cd9f9108fce"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terraform-docs/blobs/sha256:35bbce206ca1a1ee152ac0248f21016de5465076d56bd625043a38a02e7358d6",
          "sha256": "35bbce206ca1a1ee152ac0248f21016de5465076d56bd625043a38a02e7358d6"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terraform-docs/blobs/sha256:ec8e73ce93f2e026c762c2a27809e964c81300d4555889ca54c7aa490ab986cc",
          "sha256": "ec8e73ce93f2e026c762c2a27809e964c81300d4555889ca54c7aa490ab986cc"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terraform-docs/blobs/sha256:c6d9da269af431f70956ea73cbf2a5d6ac98418a5cabc7b40d85f01c3f228ab4",
          "sha256": "c6d9da269af431f70956ea73cbf2a5d6ac98418a5cabc7b40d85f01c3f228ab4"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terraform-docs/blobs/sha256:fa3db94146d5bae501b11fc6e35c27ca8468ccc32ebc4c60cd36fc1c7fa667b1",
          "sha256": "fa3db94146d5bae501b11fc6e35c27ca8468ccc32ebc4c60cd36fc1c7fa667b1"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/terraform-docs.rb",
  "ruby_source_checksum": {
    "sha256": "d0829dc6a642696851117879f67b9d18bbbab9288289d43c133a3237745d4d89"
  },
  "date_added": "2017-03-30T11:14:22+02:00",
  "readme": "# terraform-docs\n\n[![Build Status](https://github.com/terraform-docs/terraform-docs/workflows/ci/badge.svg)](https://github.com/terraform-docs/terraform-docs/actions) [![GoDoc](https://pkg.go.dev/badge/github.com/terraform-docs/terraform-docs)](https://pkg.go.dev/github.com/terraform-docs/terraform-docs) [![Go Report Card](https://goreportcard.com/badge/github.com/terraform-docs/terraform-docs)](https://goreportcard.com/report/github.com/terraform-docs/terraform-docs) [![Codecov Report](https://codecov.io/gh/terraform-docs/terraform-docs/branch/master/graph/badge.svg)](https://codecov.io/gh/terraform-docs/terraform-docs) [![License](https://img.shields.io/github/license/terraform-docs/terraform-docs)](https://github.com/terraform-docs/terraform-docs/blob/master/LICENSE) [![Latest release](https://img.shields.io/github/v/release/terraform-docs/terraform-docs)](https://github.com/terraform-docs/terraform-docs/releases)\n\n![terraform-docs-teaser](./images/terraform-docs-teaser.png)\n\n## What is terraform-docs\n\nA utility to generate documentation from Terraform modules in various output formats.\n\n## Installation\n\nmacOS users can install using [Homebrew]:\n\n```bash\nbrew install terraform-docs\n```\n\nor\n\n```bash\nbrew install terraform-docs/tap/terraform-docs\n```\n\nWindows users can install using [Scoop]:\n\n```bash\nscoop bucket add terraform-docs https://github.com/terraform-docs/scoop-bucket\nscoop install terraform-docs\n```\n\nor [Chocolatey]:\n\n```bash\nchoco install terraform-docs\n```\n\nStable binaries are also available on the [releases] page. To install, download the\nbinary for your platform from \"Assets\" and place this into your `$PATH`:\n\n```bash\ncurl -Lo ./terraform-docs.tar.gz https://github.com/terraform-docs/terraform-docs/releases/download/v0.16.0/terraform-docs-v0.16.0-$(uname)-amd64.tar.gz\ntar -xzf terraform-docs.tar.gz\nchmod +x terraform-docs\nmv terraform-docs /usr/local/terraform-docs\n```\n\n**NOTE:** Windows releases are in `ZIP` format.\n\nThe latest version can be installed using `go install` or `go get`:\n\n```bash\n# go1.17+\ngo install github.com/terraform-docs/terraform-docs@v0.16.0\n```\n\n```bash\n# go1.16\nGO111MODULE=\"on\" go get github.com/terraform-docs/terraform-docs@v0.16.0\n```\n\n**NOTE:** please use the latest Go to do this, minimum `go1.16` is required.\n\nThis will put `terraform-docs` in `$(go env GOPATH)/bin`. If you encounter the error\n`terraform-docs: command not found` after installation then you may need to either add\nthat directory to your `$PATH` as shown [here] or do a manual installation by cloning\nthe repo and run `make build` from the repository which will put `terraform-docs` in:\n\n```bash\n$(go env GOPATH)/src/github.com/terraform-docs/terraform-docs/bin/$(uname | tr '[:upper:]' '[:lower:]')-amd64/terraform-docs\n```\n\n## Usage\n\n### Running the binary directly\n\nTo run and generate documentation into README within a directory:\n\n```bash\nterraform-docs markdown table --output-file README.md --output-mode inject /path/to/module\n```\n\nCheck [`output`] configuration for more details and examples.\n\n### Using docker\n\nterraform-docs can be run as a container by mounting a directory with `.tf`\nfiles in it and run the following command:\n\n```bash\ndocker run --rm --volume \"$(pwd):/terraform-docs\" -u $(id -u) quay.io/terraform-docs/terraform-docs:0.16.0 markdown /terraform-docs\n```\n\nIf `output.file` is not enabled for this module, generated output can be redirected\nback to a file:\n\n```bash\ndocker run --rm --volume \"$(pwd):/terraform-docs\" -u $(id -u) quay.io/terraform-docs/terraform-docs:0.16.0 markdown /terraform-docs > doc.md\n```\n\n**NOTE:** Docker tag `latest` refers to _latest_ stable released version and `edge`\nrefers to HEAD of `master` at any given point in time.\n\n### Using GitHub Actions\n\nTo use terraform-docs GitHub Action, configure a YAML workflow file (e.g.\n`.github/workflows/documentation.yml`) with the following:\n\n```yaml\nname: Generate terraform docs\non:\n  - pull_request\n\njobs:\n  docs:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n      with:\n        ref: ${{ github.event.pull_request.head.ref }}\n\n    - name: Render terraform docs and push changes back to PR\n      uses: terraform-docs/gh-actions@main\n      with:\n        working-dir: .\n        output-file: README.md\n        output-method: inject\n        git-push: \"true\"\n```\n\nRead more about [terraform-docs GitHub Action] and its configuration and\nexamples.\n\n### pre-commit hook\n\nWith pre-commit, you can ensure your Terraform module documentation is kept\nup-to-date each time you make a commit.\n\nFirst [install pre-commit] and then create or update a `.pre-commit-config.yaml`\nin the root of your Git repo with at least the following content:\n\n```yaml\nrepos:\n  - repo: https://github.com/terraform-docs/terraform-docs\n    rev: \"v0.16.0\"\n    hooks:\n      - id: terraform-docs-go\n        args: [\"markdown\", \"table\", \"--output-file\", \"README.md\", \"./mymodule/path\"]\n```\n\nThen run:\n\n```bash\npre-commit install\npre-commit install-hooks\n```\n\nFurther changes to your module's `.tf` files will cause an update to documentation\nwhen you make a commit.\n\n## Configuration\n\nterraform-docs can be configured with a yaml file. The default name of this file is\n`.terraform-docs.yml` and the path order for locating it is:\n\n1. root of module directory\n1. `.config/` folder at root of module directory\n1. current directory\n1. `.config/` folder at current directory\n1. `$HOME/.tfdocs.d/`\n\n```yaml\nformatter: \"\" # this is required\n\nversion: \"\"\n\nheader-from: main.tf\nfooter-from: \"\"\n\nrecursive:\n  enabled: false\n  path: modules\n\nsections:\n  hide: []\n  show: []\n\ncontent: \"\"\n\noutput:\n  file: \"\"\n  mode: inject\n  template: |-\n    <!-- BEGIN_TF_DOCS -->\n    {{ .Content }}\n    <!-- END_TF_DOCS -->\n\noutput-values:\n  enabled: false\n  from: \"\"\n\nsort:\n  enabled: true\n  by: name\n\nsettings:\n  anchor: true\n  color: true\n  default: true\n  description: false\n  escape: true\n  hide-empty: false\n  html: true\n  indent: 2\n  lockfile: true\n  read-comments: true\n  required: true\n  sensitive: true\n  type: true\n```\n\n## Content Template\n\nGenerated content can be customized further away with `content` in configuration.\nIf the `content` is empty the default order of sections is used.\n\nCompatible formatters for customized content are `asciidoc` and `markdown`. `content`\nwill be ignored for other formatters.\n\n`content` is a Go template with following additional variables:\n\n- `{{ .Header }}`\n- `{{ .Footer }}`\n- `{{ .Inputs }}`\n- `{{ .Modules }}`\n- `{{ .Outputs }}`\n- `{{ .Providers }}`\n- `{{ .Requirements }}`\n- `{{ .Resources }}`\n\nand following functions:\n\n- `{{ include \"relative/path/to/file\" }}`\n\nThese variables are the generated output of individual sections in the selected\nformatter. For example `{{ .Inputs }}` is Markdown Table representation of _inputs_\nwhen formatter is set to `markdown table`.\n\nNote that sections visibility (i.e. `sections.show` and `sections.hide`) takes\nprecedence over the `content`.\n\nAdditionally there's also one extra special variable avaialble to the `content`:\n\n- `{{ .Module }}`\n\nAs opposed to the other variables mentioned above, which are generated sections\nbased on a selected formatter, the `{{ .Module }}` variable is just a `struct`\nrepresenting a [Terraform module].\n\n````yaml\ncontent: |-\n  Any arbitrary text can be placed anywhere in the content\n\n  {{ .Header }}\n\n  and even in between sections\n\n  {{ .Providers }}\n\n  and they don't even need to be in the default order\n\n  {{ .Outputs }}\n\n  include any relative files\n\n  {{ include \"relative/path/to/file\" }}\n\n  {{ .Inputs }}\n\n  # Examples\n\n  ```hcl\n  {{ include \"examples/foo/main.tf\" }}\n  ```\n\n  ## Resources\n\n  {{ range .Module.Resources }}\n  - {{ .GetMode }}.{{ .Spec }} ({{ .Position.Filename }}#{{ .Position.Line }})\n  {{- end }}\n````\n\n## Build on top of terraform-docs\n\nterraform-docs primary use-case is to be utilized as a standalone binary, but\nsome parts of it is also available publicly and can be imported in your project\nas a library.\n\n```go\nimport (\n    \"github.com/terraform-docs/terraform-docs/format\"\n    \"github.com/terraform-docs/terraform-docs/print\"\n    \"github.com/terraform-docs/terraform-docs/terraform\"\n)\n\n// buildTerraformDocs for module root `path` and provided content `tmpl`.\nfunc buildTerraformDocs(path string, tmpl string) (string, error) {\n    config := print.DefaultConfig()\n    config.ModuleRoot = path // module root path (can be relative or absolute)\n\n    module, err := terraform.LoadWithOptions(config)\n    if err != nil {\n        return \"\", err\n    }\n\n    // Generate in Markdown Table format\n    formatter := format.NewMarkdownTable(config)\n\n    if err := formatter.Generate(module); err != nil {\n        return \"\", err\n    }\n\n    // // Note: if you don't intend to provide additional template for the generated\n    // // content, or the target format doesn't provide templating (e.g. json, yaml,\n    // // xml, or toml) you can use `Content()` function instead of `Render()`.\n    // // `Content()` returns all the sections combined with predefined order.\n    // return formatter.Content(), nil\n\n    return formatter.Render(tmpl)\n}\n```\n\n## Plugin\n\nGenerated output can be heavily customized with [`content`], but if using that\nis not enough for your use-case, you can write your own plugin.\n\nIn order to install a plugin the following steps are needed:\n\n- download the plugin and place it in `~/.tfdocs.d/plugins` (or `./.tfdocs.d/plugins`)\n- make sure the plugin file name is `tfdocs-format-<NAME>`\n- modify [`formatter`] of `.terraform-docs.yml` file to be `<NAME>`\n\n**Important notes:**\n\n- if the plugin file name is different than the example above, terraform-docs won't\nbe able to to pick it up nor register it properly\n- you can only use plugin thorough `.terraform-docs.yml` file and it cannot be used\nwith CLI arguments\n\nTo create a new plugin create a new repository called `tfdocs-format-<NAME>` with\nfollowing `main.go`:\n\n```go\npackage main\n\nimport (\n    _ \"embed\" //nolint\n\n    \"github.com/terraform-docs/terraform-docs/plugin\"\n    \"github.com/terraform-docs/terraform-docs/print\"\n    \"github.com/terraform-docs/terraform-docs/template\"\n    \"github.com/terraform-docs/terraform-docs/terraform\"\n)\n\nfunc main() {\n    plugin.Serve(&plugin.ServeOpts{\n        Name:    \"<NAME>\",\n        Version: \"0.1.0\",\n        Printer: printerFunc,\n    })\n}\n\n//go:embed sections.tmpl\nvar tplCustom []byte\n\n// printerFunc the function being executed by the plugin client.\nfunc printerFunc(config *print.Config, module *terraform.Module) (string, error) {\n    tpl := template.New(config,\n        &template.Item{Name: \"custom\", Text: string(tplCustom)},\n    )\n\n    rendered, err := tpl.Render(\"custom\", module)\n    if err != nil {\n        return \"\", err\n    }\n\n    return rendered, nil\n}\n```\n\nPlease refer to [tfdocs-format-template] for more details. You can create a new\nrepository from it by clicking on `Use this template` button.\n\n## Documentation\n\n- **Users**\n  - Read the [User Guide] to learn how to use terraform-docs\n  - Read the [Formats Guide] to learn about different output formats of terraform-docs\n  - Refer to [Config File Reference] for all the available configuration options\n- **Developers**\n  - Read [Contributing Guide] before submitting a pull request\n\nVisit [our website] for all documentation.\n\n## Community\n\n- Discuss terraform-docs on [Slack]\n\n## License\n\nMIT License - Copyright (c) 2021 The terraform-docs Authors.\n\n[Chocolatey]: https://www.chocolatey.org\n[Config File Reference]: https://terraform-docs.io/user-guide/configuration/\n[`content`]: https://terraform-docs.io/user-guide/configuration/content/\n[Contributing Guide]: CONTRIBUTING.md\n[Formats Guide]: https://terraform-docs.io/reference/terraform-docs/\n[`formatter`]: https://terraform-docs.io/user-guide/configuration/formatter/\n[here]: https://golang.org/doc/code.html#GOPATH\n[Homebrew]: https://brew.sh\n[install pre-commit]: https://pre-commit.com/#install\n[`output`]: https://terraform-docs.io/user-guide/configuration/output/\n[releases]: https://github.com/terraform-docs/terraform-docs/releases\n[Scoop]: https://scoop.sh/\n[Slack]: https://slack.terraform-docs.io/\n[terraform-docs GitHub Action]: https://github.com/terraform-docs/gh-actions\n[Terraform module]: https://pkg.go.dev/github.com/terraform-docs/terraform-docs/terraform#Module\n[tfdocs-format-template]: https://github.com/terraform-docs/tfdocs-format-template\n[our website]: https://terraform-docs.io/\n[User Guide]: https://terraform-docs.io/user-guide/introduction/"
}
