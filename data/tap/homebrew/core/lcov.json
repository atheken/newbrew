{
  "name": "lcov",
  "full_name": "lcov",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Graphical front-end for GCC's coverage testing tool (gcov)",
  "license": "GPL-2.0-or-later",
  "homepage": "https://github.com/linux-test-project/lcov",
  "versions": {
    "stable": "2.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/linux-test-project/lcov/releases/download/v2.0/lcov-2.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "1857bb18e27abe8bcec701a907d5c47e01db4d4c512fc098d1a6acd29267bf46"
    },
    "head": {
      "url": "https://github.com/linux-test-project/lcov.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/lcov/blobs/sha256:551bbc6be7309a7c5d8266eedca0585e2646067ffa80c9edae9399c330e32188",
          "sha256": "551bbc6be7309a7c5d8266eedca0585e2646067ffa80c9edae9399c330e32188"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/lcov/blobs/sha256:2456ea19d6f3bd4c9940793756581cfb8ab98a4bcc64fed17b9b48b21fcab511",
          "sha256": "2456ea19d6f3bd4c9940793756581cfb8ab98a4bcc64fed17b9b48b21fcab511"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/lcov/blobs/sha256:f67279c2b2383a28d8fbaf26283a7e89c05f5834f98318396b676728d3c54741",
          "sha256": "f67279c2b2383a28d8fbaf26283a7e89c05f5834f98318396b676728d3c54741"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/lcov/blobs/sha256:0f46116c2652ec1c173defef26e607c62f6a92ebbf20c8b2a128ddbcdce76aa2",
          "sha256": "0f46116c2652ec1c173defef26e607c62f6a92ebbf20c8b2a128ddbcdce76aa2"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/lcov/blobs/sha256:976cd806862faa7b3a461d8b23ba41b75ae376668b27d8837191edff0589be27",
          "sha256": "976cd806862faa7b3a461d8b23ba41b75ae376668b27d8837191edff0589be27"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/lcov/blobs/sha256:05124b6b34314e60394de24538131ce94d571f228a20d228bbb149fd9fb46f8b",
          "sha256": "05124b6b34314e60394de24538131ce94d571f228a20d228bbb149fd9fb46f8b"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/lcov/blobs/sha256:591f26134c90d5759626fc4ef41fc6b1c0f1e97daaa837e5df901edadd6f4312",
          "sha256": "591f26134c90d5759626fc4ef41fc6b1c0f1e97daaa837e5df901edadd6f4312"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "perl",
    "zlib"
  ],
  "uses_from_macos_bounds": [
    {},
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/lcov.rb",
  "ruby_source_checksum": {
    "sha256": "ee957e4dbfd00efa0ab0d2c368481daa7037806eb5dfe864382e0fe380712e2c"
  },
  "date_added": "2010-06-18T12:23:07-07:00",
  "readme": "-------------------------------------------------\n- README file for the LTP GCOV extension (LCOV) -\n- Last changes: 2023-05-22\n-------------------------------------------------\n\nDescription\n-----------\n  LCOV is an extension of GCOV, a GNU tool which provides information about\n  what parts of a program are actually executed (i.e. \"covered\") while running\n  a particular test case. The extension consists of a set of Perl scripts\n  which build on the textual GCOV output to implement the following enhanced\n  functionality:\n\n    * HTML based output: coverage rates are additionally indicated using bar\n      graphs and specific colors.\n\n    * Support for large projects: overview pages allow quick browsing of\n      coverage data by providing a hierarchical directory structure\n      view, a flat list of all source files in the project,  or a three-level\n      detail view: directory, file and source code view.\n\n  LCOV was initially designed to support Linux kernel coverage measurements,\n  but works as well for coverage measurements on standard user space\n  applications.\n\n  LCOV has recently been enhanced to support differential coverage, as well\n  as date- and owner-binning.  See https://arxiv.org/abs/2008.07947 or\n  https://ieeexplore.ieee.org/document/9438597 for\n  a detailed explanation of the concepts and several possible use models.\n  A video presentation of the basic ideas can be found at\n  http://doi.org/10.5281/zenodo.4653252\n\n  In addition, several other features and capabilities have been added.  See\n  section 6, below, for a brief description - and also see the man pages and\n  the test cases.\n\n\nFurther README contents\n-----------------------\n  1. Included files\n  2. Installing LCOV\n  3. Dependencies\n  4. An example of how to access kernel coverage data\n  5. An example of how to access coverage data for a user space program\n  6. New features in lcov 2.0\n  7. Questions and Comments\n\n\n\n1. Important files\n------------------\n  README             - This README file\n  CHANGES            - List of changes between releases\n  bin/lcov           - Tool for capturing LCOV coverage data\n  bin/genhtml        - Tool for creating HTML output from LCOV data\n  bin/gendesc        - Tool for creating description files as used by genhtml\n  bin/geninfo        - Internal tool (creates LCOV data files)\n  bin/genpng         - Internal tool (creates png overviews of source files)\n  man                - Directory containing man pages for included tools\n  example            - Directory containing an example to demonstrate LCOV\n  lcovrc             - LCOV configuration file\n  Makefile           - Makefile providing 'install' and 'uninstall' targets\n\n\n2. Installing LCOV\n------------------\nThe LCOV package is available as either RPM or tarball from:\n\n  https://github.com/linux-test-project/lcov/releases\n\nTo install the tarball, unpack it to a directory and run:\n\n  make install\n\nUse Git for the most recent (but possibly unstable) version:\n\n  git clone https://github.com/linux-test-project/lcov.git\n\nChange to the resulting lcov directory and type:\n\n  make install\n\nThe default install location is /usr/local.  Note that you may need to\nhave superuser permissions to write into system directories.\n\nTo install in a different location - for example, your home directory, run:\n\n  make PREFIX=$HOME/my_lcov install\n\n\n3. Dependencies:\n----------------\n\nThe lcov module is implemented primarily in Perl - and requires both a\nmoderately up-to-date Perl installation and multiple Perl packages.\n\nThese perl packages include:\n\n  - Capture::Tiny\n  - DateTime\n  - Devel::Cover\n  - Digest::MD5\n  - File::Spec\n  - at least one flavor of JSON module.\n    In order of performance/preference:\n       - JSON::XS\n       - Cpanel::JSON::XS\n       - JSON::PP\n       - JSON\n - Memory::Process\n - Time::HiRes\n\nIf your system is missing any of these, then you may be able to install them\nvia:\n\n   $ perl -MCPAN -e 'install \"packageName\"'\n\nYou will very likely need superuser access to be able to install Perl\nmodules.\n\nSome of the applications provided with the lcov module are written\nin Python - and may require additional Python packages.\nIn particular, 'xlsxwriter' is required in order to generate any\nof the spreadsheet reports.\n\nTo measure Python code coverage, users will need Python packages:\n\n  - Coverage.py\n\nIn addition, contributors will need:\n\n  - perltidy\n\nYour platform may support other mechanisms to install and/or update\nrequired packages.\n\n\n\n4. An example of how to access Linux kernel coverage data\n---------------------------------------------------------\nRequirements: Follow the Linux kernel coverage setup instructions at:\n\n  https://docs.kernel.org/dev-tools/gcov.html\n\nAs root, do the following:\n\n  a) Resetting counters\n\n     lcov --zerocounters\n\n  b) Capturing the current coverage state to a file\n\n     lcov --capture --output-file kernel.info\n\n  c) Getting HTML output\n\n     genhtml kernel.info\n\nPoint the web browser of your choice to the resulting index.html file.\n\n\n5. An example of how to access coverage data for a user space program\n---------------------------------------------------------------------\nRequirements: compile the program in question using GCC with the options\n'-fprofile-arcs -ftest-coverage' or '--coverage'. During linking, make sure\nto specify '-lgcov' or '--coverage'.\n\nAssuming the compile directory is called \"appdir\", do the following:\n\n  a) Resetting counters\n\n     lcov --directory appdir --zerocounters\n\n  b) Capturing the current coverage state to a file\n\n     lcov --directory appdir --capture --output-file app.info\n\n     Note that this step only works after the application has\n     been started and stopped at least once. Otherwise lcov will\n     abort with an error mentioning that there are no data/.gcda files.\n\n     The GCC runtime emits coverage data (the .gcda files) in an atexit\n     callback.  If your application exits abnormally or crashes before\n     the callback is executed, then no coverage data will be available.\n\n  c) Getting HTML output\n\n     genhtml app.info\n\n  d) Generating a differential coverage report\n\n     See the examples in .../tests/gendiffcov.\n\nPoint the web browser of your choice to the resulting index.html file.\n\nPlease note that independently of where the application is installed or\nfrom which directory it is run, the --directory statement needs to\npoint to the directory in which the application was compiled.\n\nFor further information on the gcc profiling mechanism, please also\nconsult the gcov man page.\n\n\n6. New features in lcov 2.0:\n----------------------------\n\nNew features and capabilities fall into 7 major categories:\n\n  a) Categorization\n\n     This refers primarily to differential coverage categorization as\n     well as date- and owner-binning.  See https://arxiv.org/abs/2008.07947\n     or https://ieeexplore.ieee.org/document/9438597 for a detailed\n     description of the concepts.\n\n     Differential categorization and binning are orthogonal in the sense\n     that you can generate differential report without binning as well\n     as 'vanilla' coverage reports with binning.  See the above papers\n     and the genhtml man page for details.\n\n     Related options:\n        --baseline-file, --diff-file, --annotate-script, --date-bins,\n        --new-file-as-baseline, --elide-path-mismtach\n\n  b) Error handling\n\n     A generic - but very simple - error handler has been added to the\n     lcov tool suite.  The error handler is used to report exceptions,\n     and provides a mechanism for the user to ignore the particular\n     message if desired.\n     See the genhtml/lcov/geninfo man pages for details.\n\n     Note that some errors are unrecoverable - and cannot be suppressed or\n     ignored.\n\n     Related options:  --ignore-error, --keep-going\n\n  c) Navigation and display:\n\n     Navigation aids such as hyperlinks to the first uncovered region,\n     to the next uncovered region, etc. have been implemented.  Similarly,\n     new tables, new columns, and new links between tables enable the\n     user to identify the author of particular code (covered or not\n     covered), as well as the time period when the code was written.\n\n     Collectively, these features help the user to quickly identify the\n     cause of code coverage issues, and to then decide what to do.\n\n     An option to generate a 'hierarchical' coverage report (which follows\n     the source code directory structure) or 'flat' (all files in top level\n     of two-level report) as well as various other small features (tooltip\n     popups, user-specified HTML header, footer, and table labels, etc.) are\n     also available.\n\n     See the genhtml man page for some details, as well as the\n     'gendiffcov/simple' testcases for some examples.\n\n      Related options:\n          --baseline-title, --baseline-date, --current-date,\n          --flat, --hierarchical,\n          --show-owners, --show-noncode, --show-navigation, --show-proportion,\n          --suppress-aliases\n\n  d) Data manipulation\n\n     Filters are used to suppress or remove certain coverage artifacts -\n     for example, branches generated by the compiler (e.g., for exception\n     handling).  These artifacts can overwhelm the user code and obscure\n     coverage features that are interesting to the user.\n\n     Other options are used to focus on or to exclude certain sections\n     of code, as well as to do regexp replacement of file names - possibly\n     using case-insensitve comparison.\n     (Path munging is useful primarily when the build structure does\n     not exactly match the layout in your revision control system; this\n     is common in large projects with reusable components.)\n\n     See the lcov/geninfo/genhtml man pages for a detailed description of\n     the available filters and manipulation features.\n\n     Related options:\n        --include, --exclude, --erase-functions, --omit-lines,\n        --substitute, --filter\n\n  e) Callbacks/customization\n\n     The user can supply callbacks which are used to:\n\n        i) interface with the revision control system\n           Sample scripts:\n             - Perforce:  see 'p4diff' and 'p4annotate'\n             - Git: see 'gitdiff' and 'gitblame'\n        ii) verify that source code versions are compatible, and\n            Sample scripts: see 'get_signature', 'getp4version'\n            and 'gitversion'\n        iii) enforce a desired code coverage criteria\n             Sample script: criteria\n\n     See the genhtml/lcov/geninfo man pages for details.\n\n     Note that the various sample scripts are found in the source code 'bin'\n     directory, but are installed in the $LCOV_HOME/share/lcov/support-scripts\n     directory of the release.\n\n     Related options:\n       --annotate-script, --criteria-script, --version-script\n\n  f) Performance\n\n     lcov/genhtml/geninfo have been refactored to parallelize computation\n     across multiple cores, if requested.\n     In general, this provides speedup that is nearly linear in the number\n     of cores.\n     There is also an option to throttle parallelism to not exceed peak\n     memory consumption contraints, as well as options to enable simple\n     profile data collection - so you can see where time is going and\n     thus to hint at potential optimizations.  The 'spreadsheet.py'\n     script can be used to view generated profile data..\n\n     See the genhtml/lcov/geninfo man pages for details\n\n     Related options: --parallel, --memory, --profile\n\n  g) Language support\n\n     Added 'py2lcov' script, which translates python Coverage.py XML data\n     to lcov format.\n\n     See the Coverage.py documentation at https://coverage.readthedocs.io,\n     as well as \".../py2lcov --help\"\n\nIn general, the new features and options are implemented uniformly in lcov,\ngenhtml, and geninfo.  Most of the features can be enabled/disabled\nusing either command line options or by setting defaults in your 'lcovrc'\nfile.  See the lcovrc man page for details.\n\n\n7. Questions and comments\n-------------------------\nSee the included man pages for more information on how to use the LCOV tools.\n\nIn case of further questions, feel free to open a new issue using the issue\ntracker on the LCOV code repository site at:\n\n  https://github.com/linux-test-project/lcov"
}
