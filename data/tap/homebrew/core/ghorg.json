{
  "name": "ghorg",
  "full_name": "ghorg",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Quickly clone an entire org's or user's repositories into one directory",
  "license": "Apache-2.0",
  "homepage": "https://github.com/gabrie30/ghorg",
  "versions": {
    "stable": "1.9.7",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/gabrie30/ghorg/archive/refs/tags/v1.9.7.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "e9a9c11dca9692f0ed7218da2235b632c9fe7cb56e9197e959a7b24ecb1c83c5"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ghorg/blobs/sha256:f1beaf9c34a03d2f6f2b03a750a43702e084da99b4fb39d1d7187f5194519fe1",
          "sha256": "f1beaf9c34a03d2f6f2b03a750a43702e084da99b4fb39d1d7187f5194519fe1"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ghorg/blobs/sha256:f1beaf9c34a03d2f6f2b03a750a43702e084da99b4fb39d1d7187f5194519fe1",
          "sha256": "f1beaf9c34a03d2f6f2b03a750a43702e084da99b4fb39d1d7187f5194519fe1"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ghorg/blobs/sha256:f1beaf9c34a03d2f6f2b03a750a43702e084da99b4fb39d1d7187f5194519fe1",
          "sha256": "f1beaf9c34a03d2f6f2b03a750a43702e084da99b4fb39d1d7187f5194519fe1"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ghorg/blobs/sha256:733ff29665963e67bdd9bd91a05501391b4fdec153219e28d9623d9a3941a368",
          "sha256": "733ff29665963e67bdd9bd91a05501391b4fdec153219e28d9623d9a3941a368"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ghorg/blobs/sha256:733ff29665963e67bdd9bd91a05501391b4fdec153219e28d9623d9a3941a368",
          "sha256": "733ff29665963e67bdd9bd91a05501391b4fdec153219e28d9623d9a3941a368"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ghorg/blobs/sha256:733ff29665963e67bdd9bd91a05501391b4fdec153219e28d9623d9a3941a368",
          "sha256": "733ff29665963e67bdd9bd91a05501391b4fdec153219e28d9623d9a3941a368"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ghorg/blobs/sha256:371ae6b719ec2a97d12d34afcafdabd8a52ad769359c37ec999e1cd300458383",
          "sha256": "371ae6b719ec2a97d12d34afcafdabd8a52ad769359c37ec999e1cd300458383"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/ghorg.rb",
  "ruby_source_checksum": {
    "sha256": "529a92b959b0b81c19875e80d5172692ddbdba6173ef878a6569a9c738d206c8"
  },
  "date_added": "2022-08-24T09:02:27+00:00",
  "readme": "# ghorg\n\n[![Go Report Card](https://goreportcard.com/badge/github.com/gabrie30/ghorg)](https://goreportcard.com/report/github.com/gabrie30/ghorg) <a href=\"https://godoc.org/github.com/gabrie30/ghorg\"><img src=\"https://godoc.org/github.com/gabrie30/ghorg?status.svg\" alt=\"GoDoc\"></a> [![Mentioned in Awesome Go](https://awesome.re/mentioned-badge.svg)](https://github.com/avelino/awesome-go) [![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0) [![WakeMeOps](https://docs.wakemeops.com/badges/ghorg.svg)](https://docs.wakemeops.com//packages/ghorg)\n\nPronounced [gore-guh]; similar to [gorge](https://www.dictionary.com/browse/gorge). You can use ghorg to gorge on orgs.\n\nUse ghorg to quickly clone all of an orgs, or users repos into a single directory. This can be useful in many situations including\n\n1. Searching an orgs/users codebase with ack, silver searcher, grep etc..\n1. Bash scripting\n1. Creating backups\n1. Onboarding new team members (cloning all team repos)\n1. Performing Audits\n\n> With default configuration ghorg performs two actions.\n> 1. Will clone a repo if its not inside the clone directory.\n> 2. If repo does exists locally in the clone directory it will perform a git pull and git clean on the repo.\n\n> So when running ghorg a second time on the same org/user, all local changes in the cloned directory by default will be overwritten by what's on GitHub. If you want to work out of this directory, make sure you either rename the directory or set the `--no-clean` flag on all future clones to prevent losing your changes locally.\n\n<p align=\"center\">\n  <img width=\"648\" alt=\"ghorg cli example\" src=\"https://user-images.githubusercontent.com/1512282/63229247-5459f880-c1b3-11e9-9e5d-d20723046946.png\">\n</p>\n\n## Supported Providers\n- GitHub (Self Hosted & Cloud)\n  - [Install](https://github.com/gabrie30/ghorg#installation) | [Setup](https://github.com/gabrie30/ghorg#github-setup) | [Examples](https://github.com/gabrie30/ghorg/blob/master/examples/github.md)\n- GitLab (Self Hosted & Cloud)\n  - [Install](https://github.com/gabrie30/ghorg#installation) | [Setup](https://github.com/gabrie30/ghorg#gitlab-setup)  | [Examples](https://github.com/gabrie30/ghorg/blob/master/examples/gitlab.md)\n- Bitbucket (Cloud Only)\n  - [Install](https://github.com/gabrie30/ghorg#installation) | [Setup](https://github.com/gabrie30/ghorg#bitbucket-setup)  | [Examples](https://github.com/gabrie30/ghorg/blob/master/examples/bitbucket.md)\n- Gitea (Self Hosted Only)\n  - [Install](https://github.com/gabrie30/ghorg#installation) | [Setup](https://github.com/gabrie30/ghorg#gitea-setup)  | [Examples](https://github.com/gabrie30/ghorg/blob/master/examples/gitea.md)\n\n> The terminology used in ghorg is that of GitHub, mainly orgs/repos. GitLab and BitBucket use different terminology. There is a handy chart thanks to GitLab that translates terminology [here](https://about.gitlab.com/images/blogimages/gitlab-terminology.png). Note, some features may be different for certain providers.\n\n## Configuration\n\nPrecedence for configuration is first given to the flags set on the command-line, then to what's set in your `$HOME/.config/ghorg/conf.yaml`. This file comes from the [sample-conf.yaml](https://github.com/gabrie30/ghorg/blob/master/sample-conf.yaml).\n\nIf no configuration is found ghorg will use its defaults and try to clone a GitHub Org, however an api token is always required.\n\nYou can have multiple configuration files which is useful if you clone from multiple SCM providers with different tokens and settings. Alternative configuration files can only be referenced as a command-line flag `--config`.\n\nIf you have multiple different orgs/users/configurations to clone see the `ghorg reclone` command as a way to manage them.\n\nNote: ghorg will respect the `XDG_CONFIG_HOME` [environment variable](https://wiki.archlinux.org/title/XDG_Base_Directory) if set.\n\n## Windows support\n\nWindows is supported when built with golang or as a [prebuilt binary](https://github.com/gabrie30/ghorg/releases/latest) however, the readme and other documentation is not geared towards Windows users.\n\nAlternatively, Windows users can also install ghorg using [scoop](https://scoop.sh/#/)\n\n  ```\n  scoop bucket add main\n  scoop install ghorg\n  ```\n\n## Installation\n\n### Prebuilt Binaries\n\nSee [latest release](https://github.com/gabrie30/ghorg/releases/latest) to download directly for\n\n- Mac (Darwin)\n- Windows\n- Linux\n\nIf you don't know which to choose its likely going to be the x86_64 version for your operating system\n\n### Homebrew\n\n> optional but recommended\n\n```bash\nmkdir -p $HOME/.config/ghorg\ncurl https://raw.githubusercontent.com/gabrie30/ghorg/master/sample-conf.yaml > $HOME/.config/ghorg/conf.yaml\nvi $HOME/.config/ghorg/conf.yaml # To update your configuration\n```\n> required\n\n```bash\nbrew install gabrie30/utils/ghorg\n```\n\n### Golang\n\n> optional but recommended\n\n```bash\nmkdir -p $HOME/.config/ghorg\ncurl https://raw.githubusercontent.com/gabrie30/ghorg/master/sample-conf.yaml > $HOME/.config/ghorg/conf.yaml\nvi $HOME/.config/ghorg/conf.yaml # To update your configuration\n```\n\n> required\n\n```bash\n# ensure $HOME/go/bin is in your path ($ echo $PATH | grep $HOME/go/bin)\n\n# if using go 1.16+ locally\ngo install github.com/gabrie30/ghorg@latest\n\n# older go versions can run\ngo get github.com/gabrie30/ghorg\n```\n\n## SCM Provider Setup\n\n> Note: if you are running into issues, read the troubleshooting and known issues section below\n\n### GitHub Setup\n1. Create [Personal Access Token](https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line) with all `repo` scopes. Update `GHORG_GITHUB_TOKEN` in your `ghorg/conf.yaml` or as a cli flag. If your org has Saml SSO in front you will need to give your token those permissions as well, see [this doc](https://docs.github.com/en/github/authenticating-to-github/authenticating-with-saml-single-sign-on/authorizing-a-personal-access-token-for-use-with-saml-single-sign-on).\n1. For cloning GitHub Enterprise (self hosted github instances) repos you must set `--base-url` e.g. `ghorg clone <github_org> --base-url=https://internal.github.com`\n1. See [examples/github.md](https://github.com/gabrie30/ghorg/blob/master/examples/github.md) on how to run\n\n#### GitHub App Authentication (Advanced)\n\n1. [Create a GitHub App](https://docs.github.com/en/apps/creating-github-apps/setting-up-a-github-app/creating-a-github-app) in your Organization. You only need to fill out the required fields. Make sure to give Repository Permissions ->  contents -> read only permissions\n1. Install the GitHub App into your Organization\n1. Generate a a private key from the GitHub App, set the location of the key to `GHORG_GITHUB_APP_PEM_PATH`\n1. Locate the GitHub App ID from the GitHub App, set the value to `GHORG_GITHUB_APP_ID`\n1. Locate the GitHub Installation ID from the URL of the GitHub app, set the value to `GHORG_GITHUB_APP_INSTALLATION_ID`. NOTE: you will need to use the actual GitHub url to get this ID, go to your GitHub Organization Settings Page -> Third Party Access -> GitHub Apps -> Configure -> Get ID from URL\n\n### GitLab Setup\n\n1. Create [Personal Access Token](https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html) with the `read_api` scope (or `api` for self-managed GitLab older than 12.10). This token can be added to your `ghorg/conf.yaml` or as a cli flag.\n1. Update the `GitLab Specific` config in your `ghorg/conf.yaml` or via cli flags\n1. Update `GHORG_SCM_TYPE` to `gitlab` in your `ghorg/conf.yaml` or via cli flags\n1. See [examples/gitlab.md](https://github.com/gabrie30/ghorg/blob/master/examples/gitlab.md) on how to run\n\n### Gitea Setup\n\n1. Create [Access Token](https://docs.gitea.io/en-us/api-usage/) (Settings -> Applications -> Generate Token)\n1. Update `GHORG_GITEA_TOKEN` in your `ghorg/conf.yaml` or use the (--token, -t) flag.\n1. Update `GHORG_SCM_TYPE` to `gitea` in your `ghorg/conf.yaml` or via cli flags\n1. See [examples/gitea.md](https://github.com/gabrie30/ghorg/blob/master/examples/gitea.md) on how to run\n\n### Bitbucket Setup\n\n#### App Passwords\n\n1. To configure with bitbucket you will need to create a new [app password](https://confluence.atlassian.com/bitbucket/app-passwords-828781300.html) and update your `$HOME/.config/ghorg/conf.yaml` or use the (--token, -t) and (--bitbucket-username) flags.\n1. Update [SCM type](https://github.com/gabrie30/ghorg/blob/master/sample-conf.yaml#L54-L57) to `bitbucket` in your `ghorg/conf.yaml` or via cli flags\n1. See [examples/bitbucket.md](https://github.com/gabrie30/ghorg/blob/master/examples/bitbucket.md) on how to run\n\n#### PAT/OAuth token\n\n1. Create a [PAT](https://confluence.atlassian.com/bitbucketserver/personal-access-tokens-939515499.html)\n1. Set the token with `GHORG_BITBUCKET_OAUTH_TOKEN` in your `$HOME/.config/ghorg/conf.yaml` or using the `--token` flag. Make sure you do not have `--bitbucket-username` set.\n1. Update SCM TYPE to `bitbucket` in your `ghorg/conf.yaml` or via cli flags\n1. See [examples/bitbucket.md](https://github.com/gabrie30/ghorg/blob/master/examples/bitbucket.md) on how to run\n\n\n## How to Use\n\nSee [examples](https://github.com/gabrie30/ghorg/tree/master/examples) dir for more SCM specific docs or use the examples command built into ghorg.\n\n```bash\n$ ghorg clone kubernetes --token=bGVhdmUgYSBjb21tZW50IG9uIGlzc3VlIDY2\n$ ghorg clone davecheney --clone-type=user --token=bGVhdmUgYSBjb21tZW50IG9uIGlzc3VlIDY2\n$ ghorg clone gitlab-examples --scm=gitlab --preserve-dir --token=bGVhdmUgYSBjb21tZW50IG9uIGlzc3VlIDY2\n$ ghorg clone gitlab-examples/wayne-enterprises --scm=gitlab --token=bGVhdmUgYSBjb21tZW50IG9uIGlzc3VlIDY2\n$ ghorg clone all-groups --scm=gitlab --base-url=https://gitlab.internal.yourcompany.com --preserve-dir\n$ ghorg clone --help\n# view cloned resources\n$ ghorg ls\n$ ghorg ls someorg\n$ ghorg ls someorg | xargs -I %s mv %s bar/\n# view examples of how to use with gitlab\n$ ghorg examples gitlab\n$ ghorg exmaples github\n```\n\n### With Docker\n\n> This is only recommended for testing due to resource constraints\n\n1. Clone repo then `cd ghorg`\n1. Build the image `docker build . -t ghorg-docker`\n1. Run in docker\n\n```bash\n# using your local ghorg configuration file, cloning in container\ndocker run -v $HOME/.config/ghorg:/root/.config/ghorg ghorg-docker ghorg clone kubernetes\n\n# using flags, cloning in container\ndocker run ghorg-docker ghorg clone kubernetes --token=bGVhdmUgYSBjb21tZW50IG9uIGlzc3VlIDY2\n\n# using flags, cloning to your machine\ndocker run -v $HOME/ghorg/:/root/ghorg/ ghorg-docker ghorg clone kubernetes --token=bGVhdmUgYSBjb21tZW50IG9uIGlzc3VlIDY2 --output-dir=cloned-from-docker\n```\n\n## Changing Clone Directories\n\n1. By default ghorg will clone the org or user repos into a directory like `$HOME/ghorg/org`. If you want to clone the org to a different directory use the `--path` flag or set `GHORG_ABSOLUTE_PATH_TO_CLONE_TO` in your ghorg conf. **This value must be an absolute path**. For example if you wanted to clone the kubernetes org to `/tmp/ghorg` you would run the following command.\n\n    ```\n    $ ghorg clone kubernetes --path=/tmp/ghorg\n    ```\n    which would create...\n\n    ```\n    /tmp/ghorg\n    └── kubernetes\n        ├── apimachinery\n        ├── gengo\n        ├── git-sync\n        ├── kubeadm\n        ├── kubernetes-template-project\n        ├── ...\n    ```\n\n1. If you want to change the name of the directory the repos get cloned into, set the `GHORG_OUTPUT_DIR` in your ghorg conf or set the `--output-dir` flag. For example to clone only the repos starting with `sig-` from the kubernetes org into a direcotry called `kubernetes-sig-only`. You would run the following command.\n\n    ```\n    $ ghorg clone kubernetes --match-regex=^sig- --output-dir=kubernetes-sig-only\n    ```\n    which would create...\n\n    ```\n    $HOME/ghorg\n    └── kubernetes-sig-only\n        ├── sig-release\n        ├── sig-security\n        └── sig-testing\n    ```\n## Filtering Repos\n- To only clone repos that match regex use `--match-regex` flag or exclude cloning repos that match regex with `--exclude-match-regex`\n- To only clone repos that match prefix(s) use `--match-prefix` flag or exclude cloning repos that match prefix(s) with `--exclude-match-prefix`\n- To filter out any archived repos while cloning use the `--skip-archived` flag (not bitbucket)\n- To filter out any forked repos while cloning use the `--skip-forks` flag\n- Filter by specific repo [topics](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/classifying-your-repository-with-topics) `GHORG_TOPICS` or `--topics` will clone only repos with a matching topic. GitHub/GitLab/Gitea only\n- To ignore specific repos create a `ghorgignore` file inside `$HOME/.config/ghorg`. Each line in this file is considered a substring and will be compared against each repos clone url. If the clone url contains a substring in the `ghorgignore` it will be excluded from cloning. To prevent accidentally excluding a repo, you should make each line as specific as possible, eg. `https://github.com/gabrie30/ghorg.git` or `git@github.com:gabrie30/ghorg.git` depending on how you clone. This is useful for permanently ignoring certain repos.\n\n  ```bash\n  # Create ghorgignore\n  touch $HOME/.config/ghorg/ghorgignore\n\n  # Update file\n  vi $HOME/.config/ghorg/ghorgignore\n  ```\n\n## Creating Backups\n\nWhen taking backups the notable flags are `--backup`, `--clone-wiki`, and `--include-submodules`. The `--backup` flag will clone the repo with [git clone --mirror](https://www.git-scm.com/docs/git-clone#Documentation/git-clone.txt---mirror). The `--clone-wiki` flag will include any wiki pages the repo has. If you want to include any submodules you will need `--include-submodules`. Lastly, if you want to exclude any binary files use the the flag `--git-filter=blob:none` to prevent them from being cloned.\n\n```\nghorg clone kubernetes --backup --clone-wiki --include-submodules\n```\n\nThis will create a kubernetes_backup directory for the org. Each folder inside will contain the .git contents for the source repo. To restore the code from the .git contents you would move all contents into a .git dir, then run `git init` inside the dir, then checkout branch e.g.\n\n```sh\n# inside kubernetes_backup dir, to restore kubelet source code\ncd kubelet\nmkdir .git\nmv -f * .git # moves all contents into .git directory\ngit init\ngit checkout master\n```\n\n## Reclone Command\n\nThe `ghorg reclone` command is a way to store all your `ghorg clone` commands in one configuration file and makes calling long or multiple `ghorg clone` commands easier.\n\nOnce your [reclone.yaml](https://github.com/gabrie30/ghorg/blob/master/sample-reclone.yaml) configuration is set you can call `ghorg reclone` to clone each entry individually or clone all at once, see examples below.\n\n```\n# To clone all the entries in your reclone.yaml omit any arguments\nghorg reclone\n```\n\n```\n# To run one or more entries you can pass arguments\nghorg reclone kubernetes-sig-staging kubernetes-sig\n```\n\n```\n# To view all your reclone commands\n# NOTE: This command prints tokens to stdout\nghorg reclone --list\n```\n\n<p align=\"center\">\n  <img width=\"648\" alt=\"ghorg reclone example\" src=\"https://user-images.githubusercontent.com/1512282/183263986-50e56b86-12b9-479b-9c52-b1c74129228c.png\">\n</p>\n\n#### Setup\n\nAdd a [reclone.yaml](https://github.com/gabrie30/ghorg/blob/master/sample-reclone.yaml) to your `$HOME/.config/ghorg` directory. You can use the following command to set it for you with examples to use as a template\n\n```\ncurl https://raw.githubusercontent.com/gabrie30/ghorg/master/sample-reclone.yaml > $HOME/.config/ghorg/reclone.yaml\n```\n\nUpdate file with the commands you wish to run.\n\n## Troubleshooting\n\n- If you are having trouble cloning repos. Try to clone one of the repos locally e.g. manually running `git clone https://github.com/your_private_org/your_private_repo.git` if this does not work, ghorg will also not work. Your git client must first be setup to clone the target repos. If you normally clone using an ssh key use the `--protocol=ssh` flag with ghorg. This will fetch the ssh clone urls instead of the https clone urls.\n- If you are cloning a large org you may see `Error: open /dev/null: too many open files` which means you need to increase your ulimits, there are lots of docs online for this. Another solution is to decrease the number of concurrent clones. Use the `--concurrency` flag to set to lower than 25 (the default)\n- If your GitHub org is behind SSO, you will need to authorize your token, see [here](https://docs.github.com/en/github/authenticating-to-github/authorizing-a-personal-access-token-for-use-with-saml-single-sign-on)\n- If your GitHub Personal Access Token is only finding public repos, give your token all the repos permissions\n- Make sure your `$ git --version` is >= 2.19.0\n- Check for other software, such as anti-malware, that could interfere with ghorgs ability to create large number of connections, see [issue 132](https://github.com/gabrie30/ghorg/issues/132#issuecomment-889357960). You can also lower the concurrency with `--concurrency=n` default is 25.\n- To debug yourself you can call ghorg with the GHORG_DEBUG=true env e.g `GHORG_DEBUG=true ghorg clone kubernetes --concurrency=1`\n- If you've gotten this far and still have an issue feel free to raise an issue"
}
