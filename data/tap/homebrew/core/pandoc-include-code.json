{
  "name": "pandoc-include-code",
  "full_name": "pandoc-include-code",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Pandoc filter for including code from source files",
  "license": "MPL-2.0",
  "homepage": "https://github.com/owickstrom/pandoc-include-code",
  "versions": {
    "stable": "1.5.0.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://hackage.haskell.org/package/pandoc-include-code-1.5.0.0/pandoc-include-code-1.5.0.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "5d01a95f8a28cd858144d503631be6bb2d015faf9284326ee3c82c8d8433501d"
    },
    "head": {
      "url": "https://github.com/owickstrom/pandoc-include-code.git",
      "branch": "master"
    }
  },
  "revision": 2,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pandoc-include-code/blobs/sha256:03487512c8b41b88561df1e3e2f9d93ee09a6ea0381346c400417716a2b88b55",
          "sha256": "03487512c8b41b88561df1e3e2f9d93ee09a6ea0381346c400417716a2b88b55"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pandoc-include-code/blobs/sha256:116b050084dbeca5e70da5f02d8e71502ff6d2b971e27ef1fb4e8411b6678745",
          "sha256": "116b050084dbeca5e70da5f02d8e71502ff6d2b971e27ef1fb4e8411b6678745"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pandoc-include-code/blobs/sha256:5d348930f3e282fc3b5e3ca457391931637757b91a9fa1ab0617531bb8629ef4",
          "sha256": "5d348930f3e282fc3b5e3ca457391931637757b91a9fa1ab0617531bb8629ef4"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pandoc-include-code/blobs/sha256:180d35d9d7e345bdfbdd2382aa4dfb2bc20ce1c2f0809b4a365c6cb0aca5e059",
          "sha256": "180d35d9d7e345bdfbdd2382aa4dfb2bc20ce1c2f0809b4a365c6cb0aca5e059"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pandoc-include-code/blobs/sha256:dc076e4b3a63c70309a63b8c631500418b0b9ba5db2a0a46718527fe780d5136",
          "sha256": "dc076e4b3a63c70309a63b8c631500418b0b9ba5db2a0a46718527fe780d5136"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pandoc-include-code/blobs/sha256:63300eec1d6a9e05208917453d202436384beaa35a50c9e46cff101bac589849",
          "sha256": "63300eec1d6a9e05208917453d202436384beaa35a50c9e46cff101bac589849"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pandoc-include-code/blobs/sha256:707af9306e01c8f183bad3232797c9220583a9cdba3baf7d99d77add6faccd87",
          "sha256": "707af9306e01c8f183bad3232797c9220583a9cdba3baf7d99d77add6faccd87"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pandoc-include-code/blobs/sha256:46561ef2e3dbbc9b15cb84ca1b82f7c6510ed900ca3c6e7252d45eb00ac8c991",
          "sha256": "46561ef2e3dbbc9b15cb84ca1b82f7c6510ed900ca3c6e7252d45eb00ac8c991"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pandoc-include-code/blobs/sha256:ab22b3df53ac6762dcc8b564ebbefdc96a814ba31f93fc4dd701bbb28bacb958",
          "sha256": "ab22b3df53ac6762dcc8b564ebbefdc96a814ba31f93fc4dd701bbb28bacb958"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cabal-install",
    "ghc@8.10"
  ],
  "dependencies": [
    "pandoc"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": true,
  "deprecation_date": "2023-01-25",
  "deprecation_reason": "unmaintained",
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/pandoc-include-code.rb",
  "ruby_source_checksum": {
    "sha256": "f56e3def1e8a11549e45ba1f37e44e938e679e2a7ffb1b9f486ccc1809d3a124"
  },
  "date_added": "2020-07-01T19:32:13+00:00",
  "readme": "# pandoc-include-code\n\n_A Pandoc filter for including code from source files._\n\nYou get to:\n\n* Keep your examples and documentation compiled and in sync\n* Include small snippets from larger source files without needing to keep\n  track of line numbers\n* Dedent included snippets\n\n## Usage\n\nThe filter recognizes code blocks with the `include` attribute present. It\nswaps the content of the code block with contents from a file.\n\n### Including Files\n\nThe simplest way to use this filter is to include an entire file:\n\n    ```{include=docs/MyFile.hs}\n    ```\n\nYou can still use other attributes, and classes, to control the code blocks:\n\n    ```{.purescript include=docs/MyFile.purs}\n    ```\n\n### Snippets\n\nThere is support for delimited _snippets_. Use a line comment of\nwhatever kind you want, and enclose the snippet between `start snippet\n<name>` and `end snippet <name>`.\n\n    -- start snippet cool-thingy\n    main =\n      putStrLn \"I explain some cool concept in Haskell code.\"\n    -- end snippet cool-thingy\n\nOr why not some C code:\n\n    // start snippet wow\n    int main() {\n        printf(\"such performance\");\n    }\n    // end snippet wow\n\n**NOTE:** There can only be whitespace and a newline _after_ the\nsnippet name. This means that multi-line comments in C, Java, etc,\nwill not work. Only single-line comments will.\n\nThen, in your code block, specify the snippet name:\n\n    ```{include=docs/MyFile.hs snippet=cool-thingy}\n    ```\n\n### Ranges\n\nIf you want to include a specific range of lines, use `startLine` and `endLine`:\n\n    ```{include=docs/MyFile.hs startLine=35 endLine=80}\n    ```\n\n### Dedent\n\nUsing the `dedent` attribute, you can have whitespaces removed on each line,\nwhere possible (non-whitespace character will not be removed even if they occur\nin the dedent area).\n\n    ```{include=docs/MyFile.hs dedent=4}\n    ```\n\n### Conflicting Modes\n\n\"Snippet mode\" and \"range mode\" cannot be used together.\n\n### Line Numbers\n\nIf you include the `numberLines` class in your code block, and use `include`,\nthe `startFrom` attribute will be added with respect to the included code's\nlocation in the source file.\n\n    ```{include=docs/MyFile.hs startLine=35 endLine=80 .numberLines}\n    ```\n\n### Adding Direct Links\n\nIt is possible to add hyperlinks to the original source code file specified in the `include` attribute by adding the `.includeLink` class in your code block.\n\n    ```{include=docs/MyFile.hs .includeLink}\n    ```\n## Adding Base url for all CodeBlock links\nA base url will be appended to all relative paths specified in the\n`include` attribute of each `CodeBlock` . It does not affect paths beginning with `file:` , `C:`, `\\`, `/`,.... This can be done\ntwo option:\n\n#### Option 1: YAML\n\nSpecify a base key along with the base url as the attribute in\nthe YAML header:\n\n``` \n    ---\n    title:    All About Wonderland\n    author:   Alice\n    date:     November 2020\n    base:     http://localhost:8000/\n    ---\n```\n\n#### Option 2: Command Line\n\nAdd the base as a metavalue ` -M base=<base url>` or \n` --metavalue base=<base url>` in the command line when\ncalling pandoc.\n\n```\npandoc --filter pandoc-include-code -M base=http://localhost:8000/  in.md -o out.html\n```\n\nNOTE: If the base url is specified in the metadata block, then\nby specifying a different base in the command line, it will override\nthe original base.\n\nBoth of these options will add a hyperlink to the filepath defined\nin the `include`  attribute linking to\n`http://localhost:8000/source/sample.hs`:\n\n#### Overriding a specified base url\n\nAdding a base attribute in the metadata block or the command line\nwill affect all relative links in the `CodeBlocks`. To add an alternative base for a\nspecific link, add the base as an attribute `base=https....`  to\nthe`CodeBlock`:\n\n````\n```{.haskell .includeLink include=source/sample.hs snippet=animals base=<path>}\n```\n````\n\nThis adds a hyperlink to the filepath specified in the\n`include` attribute linking to `../source/sample.hs` :\n\n\n### More Usage Examples\n\n* The blog post [Automating the Build of Your Technical Presentation](https://wickstrom.tech/programming/2017/09/24/automating-the-build-of-your-technical-presentation.html)\n  shows practical examples of how to use this filter.\n\n## Install\n\nExecutables for Linux and macOS are available in the [Releases\npage](https://github.com/owickstrom/pandoc-include-code/releases).\n\n### From Homebrew\n\nYou can use [Homebrew](https://brew.sh) to install this filter:\n\n```bash\nbrew install pandoc-include-code\n```\n\n### From Hackage\n\nIf you'd rather install using `cabal` or `stack`, you can use the following\ncommand:\n\n```bash\ncabal install pandoc-include-code\n```\n\nThe package is [available at Hackage](https://hackage.haskell.org/package/pandoc-include-code).\n\n## Build\n\nRequirements:\n\n* [Cabal](https://www.haskell.org/cabal/) or\n  [Stack](https://docs.haskellstack.org/en/stable/README/), either works.\n\nTo install from sources, run:\n\n```bash\ngit clone git@github.com:owickstrom/pandoc-include-code.git\ncd pandoc-include-code\ncabal configure\ncabal install\n```\n\n## Run\n\nIf you have installed from sources, and you have `~/.local/bin` on your\n`PATH`, you can use the filter with Pandoc like so:\n\n```bash\npandoc --filter pandoc-include-code input.md output.html\n```\n\n## Usage with Hakyll\n\nIf you are using the [Hakyll](https://jaspervdj.be/hakyll/) static site generator, you can use the filter by importing it as a library and using the snippet below.\n\nAdd `pandoc`, `pandoc-types`, and `pandoc-include-code` to your project dependencies, then define a custom Hakyll compiler using a Pandoc transform:\n\n```haskell\nimport Text.Pandoc (Format (..), Pandoc)\nimport Text.Pandoc.Walk (walkM)\nimport Text.Pandoc.Filter.IncludeCode (includeCode)\n\nincludeCodeTransform :: Pandoc -> IO Pandoc\nincludeCodeTransform = walkM (includeCode (Just (Format \"html5\")))\n\nincludeCodePandocCompiler :: Compiler (Item String)\nincludeCodePandocCompiler =\n  pandocCompilerWithTransformM\n    defaultHakyllReaderOptions\n    defaultHakyllWriterOptions\n    (unsafeCompiler . includeCodeTransform)\n```\n\nYou can now use `includeCodePandocCompiler` instead of the default `pandocCompiler` in your Hakyll rules:\n\n```haskell\nmatch \"*.md\" $ do\n  route $ setExtension \"html\"\n  compile $ includeCodePandocCompiler\n    >>= loadAndApplyTemplate \"templates/default.html\" defaultContext\n    >>= relativizeUrls\n```\n\n## Changelog\n\n[CHANGELOG.md](CHANGELOG.md)\n\n## License\n\n[Mozilla Public License Version 2.0](LICENSE)"
}
