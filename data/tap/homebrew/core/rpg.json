{
  "name": "rpg",
  "full_name": "rpg",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Ruby package management for UNIX",
  "license": "MIT",
  "homepage": "https://github.com/rtomayko/rpg",
  "versions": {
    "stable": "0.3.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/downloads/rtomayko/rpg/rpg-0.3.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "c350f64744fb602956a91a57c8920e69058ea42e4e36b0e74368e96954d9d0c7"
    },
    "head": {
      "url": "https://github.com/rtomayko/rpg.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rpg/blobs/sha256:47a98b77d2c445d34d87f93b109634f195e50b3261ffe367b61536e5d97c806f",
          "sha256": "47a98b77d2c445d34d87f93b109634f195e50b3261ffe367b61536e5d97c806f"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rpg/blobs/sha256:2ba9343282027a7a1d3c6422920bf0a52c4e78fd11698781228c6f01a07eba9e",
          "sha256": "2ba9343282027a7a1d3c6422920bf0a52c4e78fd11698781228c6f01a07eba9e"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rpg/blobs/sha256:d1d4031e3e641523f759f3c2dc69fed0cffdfa537639c1f9686ddc7763b93df9",
          "sha256": "d1d4031e3e641523f759f3c2dc69fed0cffdfa537639c1f9686ddc7763b93df9"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rpg/blobs/sha256:fab3d032e629a4d20add14e9693919a074286990a16eb6fa8772180fc60730ee",
          "sha256": "fab3d032e629a4d20add14e9693919a074286990a16eb6fa8772180fc60730ee"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rpg/blobs/sha256:f1c7e5d997a1f0ceb1cca6b1067408912ff8e14522fb411530649f0689f9d042",
          "sha256": "f1c7e5d997a1f0ceb1cca6b1067408912ff8e14522fb411530649f0689f9d042"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": true,
  "disable_date": "2022-07-31",
  "disable_reason": "repo_archived",
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/rpg.rb",
  "ruby_source_checksum": {
    "sha256": "e508dae62d418b2799a313071671457ddf28d59fdc50ac5fa317967f3a98d4e3"
  },
  "date_added": "2010-04-19T16:47:48+02:00",
  "readme": "rpg - manages gem packages. quickly.\n====================================\n\nThis is rpg, an experimental Ruby package management utility for unix based on\nthe Rubygems packaging format and repository protocol. rpg installs Ruby\npackages distributed from rubygems.org to a shared library directory with full\nsupport for dependency resolution, native extension compilation, and package\nupgrades. It's quite fast.\n\n`rpg` can be thought of as a non-compatible alternative to the `gem` command\nshipped with Rubygems. Most commonly used gem operations are available in `rpg`,\nbut in ways that are a bit different from the `gem` command -- both in interface\nand implementation. See the *VERSUS RUBYGEMS* section below for details on these\ndifferences.\n\nrpg and Rubygems can co-exist on a system, though Rubygems is not required for\nrpg to operate. Packages installed with `rpg` override packages installed with\nthe `gem` command.\n\nPlease direct rpg related discussion to the rpg mailing list:\n[ruby-rpg@googlegroups.com](http://groups.google.com/group/ruby-rpg).\n\nStatus\n------\n\n*Update: This repository is no longer actively maintained by @rtomayko. Issues and PRs documenting current issues have been intentionally left open for informational purposes.*\n\nExperimental. Using rpg with system rubys is not yet recommended. Suggested use\nis with rvm or custom, non-system ruby builds. See the `KNOWN-ISSUES` file for a\nlist of potential gotchas and general annoyances.\n\nIMPORTANT: In its default configuration, rpg installs library files under the\nactive Ruby interpreter's `vendor_ruby` or `site_ruby` directory. The `rpg\nconfig` command outputs the current destination installation paths -- use it to\nverify the active configuration before performing destructive operations.\n\nInstalling\n----------\n\nrpg is installed with the conventional `./configure && make && make install`\nprocess. See the `INSTALLING` file for information on obtaining the latest\nrelease and variations on the basic installation.\n\nSee the `HACKING` file for information on setting up a temporary working\nenvironment for development, or if you just want to try out rpg in a sandbox\nbefore installing.\n\nBasic Usage\n-----------\n\nFor a list of commands and basic program usage:\n\n    $ rpg --help\n    Usage: rpg [-vx] [-c <path>] <command> [<args>...]\n    Manage gem packages, quickly.\n\n    The most commonly used rpg commands are:\n      config           Show or edit rpg configuration\n      dependencies     Show dependency information for a package or all packages\n      install          Install a package from file or remote repository\n      list             Show status of local packages vs. respository\n      steal            Transplant packages from Rubygems into rpg environment\n      sync             Sync the package index with repository\n      outdated         List packages with a newer version\n      uninstall        Uninstall packages from local system\n      upgrade          Upgrade installed packages to latest version\n\n    Options\n      -c <path>        Read rcfile at <path> instead of standard rpgrc locations\n      -v               Enable verbose logging to stderr\n      -q               Disable verbose logging to stderr\n      -x               Enable shell tracing to stderr (extremely verbose)\n\n    See `rpg help <command>' for more information on a specific command.\n\nInstalling one or more packages and all package dependencies:\n\n    $ rpg install rails\n                 sync: package index not found. retrieving now.\n                 sync: complete. 11894 packages available.\n              prepare: calculating dependencies for rails ...\n                fetch: rails 2.3.5\n                fetch: activeresource 2.3.5\n                fetch: actionmailer 2.3.5\n                fetch: actionpack 2.3.5\n                fetch: activesupport 2.3.5\n                fetch: rake 0.8.7\n                fetch: activerecord 2.3.5\n                fetch: rack 1.0.1\n              prepare: 0 of 8 packages already installed and up to date\n              install: installing 8 packages\n      package-install: actionmailer 2.3.5\n      package-install: actionpack 2.3.5\n      package-install: activerecord 2.3.5\n      package-install: activeresource 2.3.5\n      package-install: activesupport 2.3.5\n      package-install: rack 1.0.1\n      package-install: rails 2.3.5\n      package-install: rake 0.8.7\n              install: installation complete\n\nListing currently installed packages and their versions:\n\n    $ rpg list\n    actionmailer 2.3.5\n    actionpack 2.3.5\n    activerecord 2.3.5\n    activeresource 2.3.5\n    activesupport 2.3.5\n    rack 1.0.1\n    rails 2.3.5\n    rake 0.8.7\n\nListing currently installed packages with information about available package\nversions:\n\n    $ rpg list -l\n      actionmailer                        2.3.5        2.3.5\n      actionpack                          2.3.5        2.3.5\n      activerecord                        2.3.5        2.3.5\n      activeresource                      2.3.5        2.3.5\n      activesupport                       2.3.5        2.3.5\n    * rack                                1.0.1        1.1.0\n      rails                               2.3.5        2.3.5\n      rake                                0.8.7        0.8.7\n\nListing only outdated packages:\n\n    $ rpg outdated\n    rack                                1.0.1        1.1.0\n\nUninstalling one or more packages:\n\n    $ rpg uninstall rails actionmailer\n\nListing package dependencies recursively:\n\n    $ rpg dependencies -r rails\n    actionmailer = 2.3.5\n    actionpack = 2.3.5\n    activerecord = 2.3.5\n    activeresource = 2.3.5\n    activesupport = 2.3.5\n    rack ~> 1.0.0\n    rake >= 0.8.3\n\nOr, in a tree:\n\n    $ rpg dependencies -t rails\n    rake >= 0.8.3\n    activesupport = 2.3.5\n    activerecord = 2.3.5\n    |-- activesupport = 2.3.5\n    actionpack = 2.3.5\n    |-- activesupport = 2.3.5\n    |-- rack ~> 1.0.0\n    actionmailer = 2.3.5\n    |-- actionpack = 2.3.5\n    |   |-- activesupport = 2.3.5\n    |   |-- rack ~> 1.0.0\n    activeresource = 2.3.5\n    |-- activesupport = 2.3.5\n\nTo get a feel for rpg performance vs. the gem command when install packages with\ncomplex dependency graphs:\n\n    $ time rpg install merb\n    $ time gem install merb\n\nVersus Rubygems\n---------------\n\nSimilarities with the `gem` command:\n\n  * `rpg` uses rubygems.org as its package repository and gem\n    files as its package format. Installing from other sources is not yet\n    supported, but is likely to be added in the near future.\n\n  * `rpg` supports dependency resolution using the information\n    included in a gem's specification metadata.\n\n  * `rpg` supports building and installing native / dynamic library\n    extensions.\n\n  * `rpg` has a rich set of commands for installing, upgrading,\n    and uninstalling packages; listing installed, available, and outdated\n    packages; and utilities for unpacking gem files and inspecting gem\n    specifications.\n\n  * \"rpg\" is made of exactly three characters.\n\nDifferences from the `gem` command:\n\n  * `rpg` organizes the files it installs by file type, not by package. For\n    instance, Ruby library files are placed directly under a single\n    `lib` directory (the currently active `site_ruby` directory by default),\n    executables under `/usr/local/bin` (configurable), manpages under\n    `/usr/local/share/man`, etc.\n\n  * `rpg` is not capable of installing multiple versions of the same package\n    into a single rpg environment -- the package's files would overwrite each\n    other. All version conflicts must be resolved at install time.\n\n  * `rpg` is similarly unable to install more than one package owning the\n    same file under Ruby libdir. (Currently `rpg` will install such packages\n    anyway, with later installed packages overwriting files installed by\n    earlier installed packages.)\n\n  * `rpg` has no runtime component (e.g., `require 'rubygems'`). Because all\n    library files are placed under a common `lib` directory, and because package\n    versions are sussed at install time, there's no need for a component to\n    select which packages are active at runtime.\n\n  * `rpg` installs packages in two stages: 1.) fetch package files\n    and resolve dependencies, and 2.) install package contents. This allows\n    for staged/later installs and conflict detection before install.\n\n  * `rpg`'s installed package database is filesystem based, (will be) documented,\n    and is built for extension.\n\n  * `rpg` is written primarily in POSIX shell and requires a unix environment.\n\n  * `rpg` does not provide commands for building gems or running gem servers.\n\n  * `rpg` outperforms the gem command in many ways. Most comparable operations\n    complete in at least one order of magnitude less time.\n\nAbout\n-----\n\nrpg's design is inspired by a variety of existing tools. The `gem` command's\nbasic UI, package format, and repository structure are heavily borrowed from\nor used verbatim.\n\nMany of the ideas -- and maybe even some code -- were taken from\n[Rip](http://defunkt.github.com/rip/). That's understating it, really. rpg\nstarted out just a couple of loose shell scripts to experiment with ideas for\nintegrating gem package and gem dependency support into rip. The plan was to\nport them over to Ruby and into Rip if they panned out. Within a few days, I had\na more or less entire implementation of Rubygems's gem command in POSIX shell\nstaring back at me and it was *fast*. Some of rpg's features may make their way\ninto Rip (the Ruby portions that read release indexes and gemspecs should be\nuseful at least).\n\nDebian's apt and dpkg, FreeBSD's ports system, and Redhat/Fedora's yum all\ninfluenced rpg's design in various ways.\n\nGit's overall design influenced rpg significantly. Git's internal project\norganization is a template for writing moderate sized systems using many small\nspecialized programs. Its granular use of the filesystem as a database (the\n`.git/refs` and `.git/objects` hierarchies, especially) informed much of rpg's\npackage database design.\n\nCopying\n-------\n\nCopyright (c) 2010 by [Ryan Tomayko](http://tomayko.com/about)\n\nThis is Free Software distributed under the terms of the MIT license.\nSee the `COPYING` file for license rights and limitations."
}
