{
  "name": "tvnamer",
  "full_name": "tvnamer",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Automatic TV episode file renamer that uses data from thetvdb.com",
  "license": "Unlicense",
  "homepage": "https://github.com/dbr/tvnamer",
  "versions": {
    "stable": "3.0.4",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://files.pythonhosted.org/packages/7e/07/688dc96a86cf212ffdb291d2f012bc4a41ee78324a2eda4c98f05f5e3062/tvnamer-3.0.4.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "dc2ea8188df6ac56439343630466b874c57756dd0b2538dd8e7905048f425f04"
    },
    "head": {
      "url": "https://github.com/dbr/tvnamer.git",
      "branch": "master"
    }
  },
  "revision": 3,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tvnamer/blobs/sha256:c04db388beb645362148242d6f5e5a2820a45c3092c9d10271557c497c986a1a",
          "sha256": "c04db388beb645362148242d6f5e5a2820a45c3092c9d10271557c497c986a1a"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tvnamer/blobs/sha256:198e574e6641aa690d3d66c48da9b0dbfb5561b804771c7784509be716cbca28",
          "sha256": "198e574e6641aa690d3d66c48da9b0dbfb5561b804771c7784509be716cbca28"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tvnamer/blobs/sha256:1da9d1ed619237568233503d4f950e5be70569e8ae96cdc485c8c97560784f21",
          "sha256": "1da9d1ed619237568233503d4f950e5be70569e8ae96cdc485c8c97560784f21"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tvnamer/blobs/sha256:01505e260d0b498008b9eb5bac58023e60d7779a455f3552927ee4596b9275b0",
          "sha256": "01505e260d0b498008b9eb5bac58023e60d7779a455f3552927ee4596b9275b0"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tvnamer/blobs/sha256:fe17395b14667a8aabca043cec2d6c52c10c328c2ab577d0b4dca87cf896f30b",
          "sha256": "fe17395b14667a8aabca043cec2d6c52c10c328c2ab577d0b4dca87cf896f30b"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tvnamer/blobs/sha256:5a7bd6a392e0c27f898a4f72800dc474439eca354e8d2f1478b3055334a2d289",
          "sha256": "5a7bd6a392e0c27f898a4f72800dc474439eca354e8d2f1478b3055334a2d289"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tvnamer/blobs/sha256:4576e4ecaf16db8cff481d6c4331f9e0367fd33a2d1690267468dfbf7b390fec",
          "sha256": "4576e4ecaf16db8cff481d6c4331f9e0367fd33a2d1690267468dfbf7b390fec"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "python-certifi",
    "python@3.11"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "982192bf852eebace6c92c1e792d894990b8620e",
  "ruby_source_path": "Formula/tvnamer.rb",
  "ruby_source_checksum": {
    "sha256": "1343cb3b61fcbfe1f1e419d0ed57d624353898c0c769c6f7185e30c2b9c1a059"
  },
  "date_added": "2015-05-28T18:58:50+08:00",
  "readme": "# `tvnamer`\n\n[![PyPI][pypi-img]][pypi-link] [![Build Status][build-img]][build-link] [![codecov][coverage-img]][coverage-link]\n\n`tvnamer` is a utility to rename files from `some.show.s01e03.blah.abc.avi` to `Some Show - [01x03] - The Episode Name.avi` (by retrieving the episode name using data from [`tvdb_api`](http://github.com/dbr/tvdb_api))\n\nIt supports Python 3.5 onwards. The last version of tvnamer to support Python 2.7 was `tvnamer==3`\n\nTV information is provided by TheTVDB.com, but we are not endorsed or certified by TheTVDB.com or its affiliates.\n\n[build-link]: https://travis-ci.org/dbr/tvnamer\n[build-img]: https://github.com/dbr/tvnamer/workflows/CI/badge.svg\n[pypi-link]: https://pypi.org/project/tvnamer/\n[pypi-img]: https://img.shields.io/pypi/v/tvnamer\n[coverage-link]: https://codecov.io/gh/dbr/tvnamer\n[coverage-img]: https://codecov.io/gh/dbr/tvnamer/branch/master/graph/badge.svg\n\n## Installing\n\nThe \"official\" way to install `tvnamer` is via `pip`:\n\n    pip install tvnamer\n\nThis installs the `tvnamer` command-line tool and the requirements from [the `tvnamer` package on PyPI](https://pypi.python.org/pypi/tvnamer/)\n\nAlternatively, the community have packaged tvnamer in various platform/distro specific package managers, including:\n\n1. [Homebrew for OS X](https://formulae.brew.sh/formula/tvnamer) - `brew install tvnamer`\n2. [Debian](https://tracker.debian.org/pkg/tvnamer) - `apt-get install tvnamer`\n3. [FreeBSD/DragonFlyBSD/MacPorts](https://www.freshports.org/multimedia/py-tvnamer) - `pkg install py36-tvnamer` etc\n4. [Nix package manager](https://github.com/NixOS/nixpkgs/blob/master/pkgs/development/python-modules/tvnamer/default.nix) - `nix-env -iA nixpkgs.python37Packages.tvnamer`\n\nAlthough not recommended for general use, see [`CONTRIBUTING.md`](./CONTRIBUTING.md) for details on installing the unstable development version.\n\n## Features\n\n- Interactive command line based interface, with a non-interactive \"batch\" mode for automation.\n- Comprehensive set of file-name matching patterns\n- Handles non-ASCII names\n- Support for anime filenames, such as `[Shinsen-Subs] Beet - 19 [24DAB497].mkv`\n- Support for multi-episode files, such as `scrubs.s01e23e24.avi`\n- Extensive configuration options (via a JSON config file) and command-line arguments, including output name customising, series name replacements\n- Support for moving files to specific location after renaming (`/media/tv/{series name}/season {seasonnumber}/` for example)\n\n## Bugs?\n\nPlease file issues on tvnamer's [Github Issues page](http://github.com/dbr/tvnamer/issues)\n\nPlease make tickets for any possible bugs or feature requests, or if you discover a filename format that tvnamer cannot parse (as long as a reasonably common format, and has enough information to be parsed!), or if you are struggling with the a custom configuration (please state your desired filename output, and what problems you are encountering)\n\n## Basic usage\n\nFrom the command line, simply run:\n\n    tvnamer the.file.s01e01.avi\n\nFor example:\n\n    $ tvnamer brass.eye.s01e01.avi\n    ####################\n    # Starting tvnamer\n    # Found 1 episodes\n    # Processing brass.eye.s01e01.avi\n    TVDB Search Results:\n    1 -> Brass Eye [en] # http://thetvdb.com/?tab=series&id=70679&lid=7\n    Automatically selecting only result\n    ####################\n    # Old filename: brass.eye.s01e01.avi\n    # New filename: Brass Eye - [01x01] - Animals.avi\n    Rename?\n    ([y]/n/a/q)\n\nEnter `y` then press `return` and the file will be renamed to \"Brass Eye - [01x01] - Animals.avi\". You can also simply press `return` to select the default option, denoted by the surrounding `[]`\n\nIf there are multiple shows with the same (or similar) names or languages, you will be asked to select the correct one - \"Lost\" is a good example of this:\n\n    $ tvnamer lost.s01e01.avi\n    ####################\n    # Starting tvnamer\n    # Found 1 episodes\n    # Processing lost.s01e01.avi\n    TVDB Search Results:\n    1 -> Lost [en] # http://thetvdb.com/?tab=series&id=73739&lid=7\n    2 -> Lost [sv] # http://thetvdb.com/?tab=series&id=73739&lid=8\n    3 -> Lost [no] # http://thetvdb.com/?tab=series&id=73739&lid=9\n    4 -> Lost [fi] # http://thetvdb.com/?tab=series&id=73739&lid=11\n    5 -> Lost [nl] # http://thetvdb.com/?tab=series&id=73739&lid=13\n    6 -> Lost [de] # http://thetvdb.com/?tab=series&id=73739&lid=14\n    Enter choice (first number, ? for help):    \n\nTo select the first result, enter `1` then `return`, to select the second enter `2` and so on. The link after `#` goes to the relevant [thetvdb.com][tvdb] page, which will contain information and images to help you select the correct series.\n\nYou can rename multiple files, or an entire directory by using the files or directories as arguments:\n\n    $ tvnamer file1.avi file2.avi etc\n    $ tvnamer .\n    $ tvnamer /path/to/my/folder/\n    $ tvnamer ./folder/1/ ./folder/2/\n\nYou can skip a specific file by entering `n` (no). If you enter `a` (always) `tvnamer` will rename the remaining files automatically. The suggested use of this is check the first few episodes are named correctly, then use `a` to rename the rest.\n\nNote, tvnamer will only descend one level into directories unless the `-r` (or `--recursive`) flag is specified. For example, if you have the following directory structure:\n\n    dir1/\n        file1.avi\n        dir2/\n            file2.avi\n            file3.avi\n\n..then running `tvnamer dir1/` will only rename `file1.avi`, ignoring `dir2/` and its contents.\n\nIf you wish to rename all files (file1, file2 and file3), you would run:\n\n    tvnamer --recursive dir1/\n\n## Command line arguments\n\nThere are various flags you can use with `tvnamer`, run..\n\n    tvnamer --help\n\n..to see them, and a short description of each.\n\nThe most useful are most likely `--batch`, `--selectfirst` and `--always`:\n\n`--selectfirst` will select the first series the search found, but will not automatically rename any episodes.\n\n`--always` will ask you select the correct series, then automatically rename all files.\n\n`--batch` will not prompt you for anything. It automatically selects the first series search result, and automatically rename all files (identical to using both `--selectfirst` and `--always`). Use carefully!\n\n`--series-id` will allow you to use a specific ID from theTVdb. This can help with name detection issues.\n\n## Configs\n\nOne of the largest improvements in tvnamer v2 is the ability to have custom configuration. This allows you to customise behaviour without modifying the code (as was necessary with tvnamer v1).\n\nTo write the default JSON configuration file, which is a good starting point for your modifications, simply run:\n\n    tvnamer --save=./mytvnamerconfig.json\n\nTo use your custom configuration, you must either specify the location using `tvnamer --config=/path/to/mytvnamerconfig.json` or place the file at `~/.config/tvnamer/tvnamer.json`\n\n**Important:** If tvnamer's default settings change and your saved config contains the old settings, you may experience strange behaviour or bugs (the config may contain a buggy `filename_patterns` regex, for example). It is recommended you remove config options you are not altering (particularly `filename_patterns`). If you experience any strangeness, try disabling your custom configuration (moving it away from `~/.config/tvnamer/tvnamer.json`)\n\nIf for example you wish to change the default language used to retrieve data, change the option `language` to another two-letter language code, such as `fr` for French. Your config file would look like:\n\n    {\n        \"language\": \"fr\"\n    }\n\nIf `search_all_languages` is true, tvnamer will return multilingual search results. If false, it will return results only in the preferred language.\n\nFor an always up-to-date description of all config options, see the comments in [`config_defaults.py`](http://github.com/dbr/tvnamer/blob/master/tvnamer/config_defaults.py)\n\n# Custom output filenames\n\nIf you wish to change the output filename format, there are a bunch of options you can change.\n\nThe most common is an episode with both a season and episode number. There are two patterns, one for when an episode name is found, and one without the episode name:\n\n- One for a file with an episode name (`filename_with_episode`). Example input: `Scrubs.s01e01.my.ep.name.avi`\n- One for a file *without* an episode name (`filename_without_episode`). Example input: `AnUnknownShow.s01e01.avi`\n\nNext, for episodes without a season number:\n\n- One for a filename with no season number, and an episode name (`filename_with_episode_no_season`). Example input: `Sid.The.Science.Kid.E11.avi`\n- One for a filename with no season number, and no episode name (`filename_without_episode_no_season`). Example input: `AnUnknownShow.E24.avi`\n\nDate-based episodes (which used aired-date instead of episode numbers):\n\n- One for date-based episodes (`filename_with_date_and_episode`). Example input: `AnUnknownShow.2000-01-23`\n- Date-based episode without epiosde nam (`filename_with_date_without_episode`)\n\nFinally, anime episodes have the usual with/without episode names, and again with/without the CRC value:\n\n- `filename_anime_with_episode` - for example, `[SubGrp] SeriesName - 02 - Episode Name [CRC1234].ext`\n- `filename_anime_without_episode` - for example, `[SubGrp] SeriesName - 02 [CRC1234].ext`\n- `filename_anime_with_episode_without_crc` - for example, `[SubGrp] SeriesName - 02 - Episode Name.ext`\n- `filename_anime_without_episode_without_crc` - for example, `[SubGrp] SeriesName - 02.ext`\n\nThis may seem like a lot, but they are mostly the same thing. They all have sensible default values, so you can only change the values you use commonly (say, you could ignore the date-based and anime episodes if you rarely rename such files)\n\nSay you want the format `Show Name 01x24 Episode Name.avi`, your `filename_with_episode` option would be:\n\n    %(seriesname)s %(seasonno)02dx%(episode)s %(episodename)s%(ext)s\n\nThe formatting language used is Python's string formatting feature, which you can read about in the Python documentation, [6.6.2. String Formatting Operations](http://docs.python.org/library/stdtypes.html#string-formatting). Basically it's just `%()s` and the name element you wish to use between `( )`\n\nNote `ext` contains the extension separator symbol, usually `.` - for example `.avi`\n\nThen you need to make a few variants, one without the `episodename` section, and two without the `seasonno` option:\n\n`filename_with_episode_no_season`:\n\n    %(seriesname)s %(seasonno)02dx%(episode)s %(episodename)s%(ext)s\n\n`filename_without_episode`:\n\n    %(seriesname)s %(seasonno)02dx%(episode)s%(ext)s\n\n`filename_without_episode_no_season`:\n\n    %(seriesname)s %(episode)s%(ext)s\n\nThere are yet two more options you may want to change, `episode_single` and `episode_separator`\n\n`episode_single` is the Python string formatting pattern used to format the episode number. By default it is `%02d` - this simply turns the number `1` to `01`, and keeps `24` as `24`\n\nIf you do not want any padding in your numbers, you could change this to `%d` - this would result in filenames such as `Show - [1x3] - Episode Name.avi` (or `Show 1x3 Episode Name.avi` using your custom name, as described above)\n\nThe `episode_separator` option is for multi-episode files. When multiple episodes are detected in one file (such as `Scrubs.s01e01e02.avi`), this string is used to join the episode numbers together. By default it is `-` which results in filenames such as `Scrubs - [01x01-02] - ... .avi`\n\nYou could change this to `e`, and by altering the `filename_*` options you could create filenames such as..\n\n    Show - [s01e01e02] - Episode Name.avi\n\nBy default, tvnamer will sanitise files for the current operating system - either POSIX-compatible (OS X, Linux, FreeBSD) or Windows. You can force Windows compatible filenames by setting the option `windows_safe_filenames` to True\n\nThe preferred way to replace spaces with another character is to use the custom replacements feature. For example, to replace spaces with `.` you would use the config:\n\n    {\n        \"output_filename_replacements\": [\n            {\"is_regex\": true,\n            \"match\": \"[ ]\",\n            \"replacement\": \".\"}\n        ]\n    }\n\n\nYou can also remove spaces in characters by adding a space to the option `custom_filename_character_blacklist` and changing the option `replace_blacklisted_characters_with` to `.`\n\n`normalize_unicode_filenames` attempts to replace Unicode characters with their unaccented ASCII equivalent (`å` becomes `a` etc). Any untranslatable characters are removed.\n\n`selectfirst` and `always_rename` mirror the command line arguments `--selectfirst` and `--always` - one automatically selects the first series search result, the other always renames files. Setting both to True is equivalent to `--batch`. `recursive` also mirrors the command line argument\n\n`lowercase_filename` converts the entire filename to lower case.\n\n\nThis document does not describe all config options - for a complete list, see the comments in [`config_defaults.py`](http://github.com/dbr/tvnamer/blob/master/tvnamer/config_defaults.py)\n\n\n# Custom filename parsing pattern\n\n`tvnamer` comes with a set of patterns to parse a majority of common (and many uncommon) TV episode file names. If these don't parse your files, you can write custom patterns.\n\nThe patterns are regular expressions, compiled with the [`re.VERBOSE` flag](http://docs.python.org/library/re.html#re.VERBOSE). Each pattern must contain several named groups.\n\nNamed groups are like regular groups, but the group starts with `?P<thegroupname>`. For example:\n\n    (?P<seriesname>.+?)\n\nAll patterns must contain a named group `seriesname` - this is of course the name of the show the filename contains.\n\nOptionally you can parse a season number using the group `seasonnumber`. If this group is not specified, it will search for the episode(s) in season 1 (following the [thetvdb.com][tvdb] convention)\n\nYou must also match an episode number group. For simple, single episode files use the group `episodenumber`\n\nIf you wish to match multiple episodes in one file, there two options:\n\n- `episodenumber1` `episodenumber2` etc - match any number of episode numbers (can be non-consecutive), or..\n- Two groups, `episodenumberstart` and `episodenumberend` - you match the first and last numbers in the filename. If the start number is 2, and the end number is 5, the file contains episodes [2, 3, 4, 5].\n\n# Regex flags in config files\n\nRegular expressions are used in several places in the config. It can\nbe useful to specify flags the \"ignore case\" flag. This can be done\nwith the `(?...)` syntax, e.g to replace `and`, `And`, `AND` etc with\n`&`:\n\n    {\n        \"input_filename_replacements\": [\n            {\"is_regex\": true,\n            \"match\": \"(?i)and\",\n            \"replacement\": \"&\"}\n        ]\n    }\n\nSee the other flags\n[in the Python `re` docs](http://docs.python.org/2/library/re.html#regular-expression-syntax)\n(search for `(?iLmsux)` on the page)"
}
