{
  "name": "git-machete",
  "full_name": "git-machete",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Git repository organizer & rebase workflow automation tool",
  "license": "MIT",
  "homepage": "https://github.com/VirtusLab/git-machete",
  "versions": {
    "stable": "3.17.8",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://pypi.org/packages/source/g/git-machete/git-machete-3.17.8.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "213a1a25d32b082d317c61f146359e9cc3df53f3cadb2687e22581118a0ac3db"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-machete/blobs/sha256:966aaaa7b9add118056c4239d485f39c31029aa0c234cd99010c5e634747d8ba",
          "sha256": "966aaaa7b9add118056c4239d485f39c31029aa0c234cd99010c5e634747d8ba"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-machete/blobs/sha256:966aaaa7b9add118056c4239d485f39c31029aa0c234cd99010c5e634747d8ba",
          "sha256": "966aaaa7b9add118056c4239d485f39c31029aa0c234cd99010c5e634747d8ba"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-machete/blobs/sha256:966aaaa7b9add118056c4239d485f39c31029aa0c234cd99010c5e634747d8ba",
          "sha256": "966aaaa7b9add118056c4239d485f39c31029aa0c234cd99010c5e634747d8ba"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-machete/blobs/sha256:1c4ffdf9c9bc247cfe2bfa735a87f7a4f7f3996a4bc5f12b29b881dcd6d69033",
          "sha256": "1c4ffdf9c9bc247cfe2bfa735a87f7a4f7f3996a4bc5f12b29b881dcd6d69033"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-machete/blobs/sha256:1c4ffdf9c9bc247cfe2bfa735a87f7a4f7f3996a4bc5f12b29b881dcd6d69033",
          "sha256": "1c4ffdf9c9bc247cfe2bfa735a87f7a4f7f3996a4bc5f12b29b881dcd6d69033"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-machete/blobs/sha256:1c4ffdf9c9bc247cfe2bfa735a87f7a4f7f3996a4bc5f12b29b881dcd6d69033",
          "sha256": "1c4ffdf9c9bc247cfe2bfa735a87f7a4f7f3996a4bc5f12b29b881dcd6d69033"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-machete/blobs/sha256:c2f71a566dda5be8dccef6b95262b283c040d236c1aa0ddf2df68ad645fa64af",
          "sha256": "c2f71a566dda5be8dccef6b95262b283c040d236c1aa0ddf2df68ad645fa64af"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "python@3.11"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/git-machete.rb",
  "ruby_source_checksum": {
    "sha256": "49e5282ad7363d6d60ef8d18100dc9c01f6658a0f73216bd2866460fe0e1d573"
  },
  "date_added": "2022-09-29T11:50:03+00:00",
  "readme": "# git-machete\n\n[![homebrew formula](https://img.shields.io/homebrew/v/git-machete)](https://formulae.brew.sh/formula/git-machete)\n[![homebrew formula monthly downloads](https://img.shields.io/homebrew/installs/dm/git-machete.svg)](https://formulae.brew.sh/formula/git-machete)\n[![PyPI package](https://img.shields.io/pypi/v/git-machete.svg)](https://pypi.org/project/git-machete)\n[![PyPI package monthly downloads](https://img.shields.io/pypi/dm/git-machete.svg)](https://pypistats.org/packages/git-machete)\n[![Conda package](https://img.shields.io/conda/vn/conda-forge/git-machete.svg)](https://anaconda.org/conda-forge/git-machete)\n[![Conda downloads](https://img.shields.io/conda/dn/conda-forge/git-machete.svg)](https://anaconda.org/conda-forge/git-machete)\n[![Snap](https://snapcraft.io/git-machete/badge.svg)](https://snapcraft.io/git-machete)\n<br/>\n[![Read the Docs](https://readthedocs.org/projects/git-machete/badge/?version=latest)](https://git-machete.readthedocs.io/en/stable)\n[![License: MIT](https://img.shields.io/github/license/VirtusLab/git-machete)](https://github.com/VirtusLab/git-machete/blob/master/LICENSE)\n[![CircleCI](https://circleci.com/gh/VirtusLab/git-machete/tree/master.svg?style=shield)](https://app.circleci.com/pipelines/github/VirtusLab/git-machete?branch=master)\n[![codecov](https://codecov.io/gh/VirtusLab/git-machete/branch/develop/graph/badge.svg)](https://codecov.io/gh/VirtusLab/git-machete)\n\n[//]: # (The image is referenced by its full URL to ensure it renders correctly on https://pypi.org/project/git-machete/)\n<img src=\"https://raw.githubusercontent.com/VirtusLab/git-machete/master/graphics/logo_with_name.svg\" style=\"width: 100%; display: block; margin-bottom: 10pt;\" />\n\nüí™ git-machete is a robust tool that **simplifies your git workflows**.<br/>\n\nü¶Ö The _bird's eye view_ provided by git-machete makes **merges/rebases/push/pulls hassle-free**\neven when **multiple branches** are present in the repository\n(master/develop, your topic branches, teammate's branches checked out for review, etc.).<br/>\n\nüéØ Using this tool, you can maintain **small, focused, easy-to-review pull requests** with little effort.\n\nüëÅ A look at a `git machete status` gives an instant answer to the questions:\n* What branches are in this repository?\n* What is going to be merged (rebased/pushed/pulled) and to what?\n\nüöú `git machete traverse` semi-automatically traverses the branches, helping you effortlessly rebase, merge, push and pull.\n\n[//]: # (The image is referenced by its full URL to ensure it renders correctly on https://pypi.org/project/git-machete/)\n<p align=\"center\">\n    <img src=\"https://raw.githubusercontent.com/VirtusLab/git-machete/master/graphics/discover-status-traverse.gif\"\n         alt=\"git machete discover, status and traverse\" />\n</p>\n\nüîå See also [VirtusLab/git-machete-intellij-plugin](https://github.com/VirtusLab/git-machete-intellij-plugin#git-machete-intellij-plugin) &mdash;\na port into a plugin for the IntelliJ Platform products, including PyCharm, WebStorm etc.\n\n\n## Install\n\nWe provide a couple of alternative ways of installation. See [PACKAGES.md](PACKAGES.md) for the full list.\n\ngit-machete requires Python >= 3.6. Python 2.x is no longer supported.\n\n### Using Homebrew (macOS & most Linux distributions)\n\n```shell script\nbrew install git-machete\n```\n\n### Using pip with sudo (system-wide install)\n\nYou need to have Python and `pip` installed from system packages.\n\n```shell script\nsudo -H pip install git-machete\n```\n\n**Tip:** pass an extra `-U` flag to `pip install` to upgrade an already installed version.\n\n### Using pip without sudo (user-wide install)\n\nYou need to have Python and `pip` installed from system packages.\n\n```shell script\npip install --user git-machete\n```\n\nPlease verify that your `PATH` variable has `${HOME}/.local/bin/` included.\n\n**Tip:** pass an extra `-U` flag to `pip install` to upgrade an already installed version.\n\n### Using conda\n\n```shell script\nconda install -c conda-forge git-machete\n```\n\n### Using snap (most Linux distributions)\n\n**Tip:** check the [guide on installing snapd](https://snapcraft.io/docs/installing-snapd) if you don't have Snap support set up yet in your system.\n\n```shell script\nsudo snap install --classic git-machete\n```\n\nIt can also be installed via Ubuntu Software (simply search for `git-machete`).\n\n**Note:** classic confinement is necessary to ensure access to the editor installed in the system (to edit e.g. .git/machete file or rebase TODO list).\n\n### Using apt-get via PPA (Ubuntu)\n\n**Tip:** run `sudo apt-get install -y software-properties-common` first if `add-apt-repository` is not available on your system.\n\n```shell script\nsudo add-apt-repository ppa:virtuslab/git-machete\nsudo apt-get update\nsudo apt-get install -y python3-git-machete\n```\n\n### Using rpm (Fedora/RHEL/CentOS/openSUSE...)\n\nDownload the rpm package from the [latest release](https://github.com/VirtusLab/git-machete/releases/latest)\nand install either by opening it in your desktop environment or with `rpm -i git-machete-*.noarch.rpm`.\n\n### Using Alpine, Arch, Gentoo & other Linux distro-specific package managers\n\nCheck [Repology](https://repology.org/project/git-machete/versions) for the available distro-specific packages.\n\n### Using Nix (macOS & most Linux distributions)\n\nOn macOS and most Linux distributions, you can install via [Nix](https://nixos.org/nix):\n\n```shell script\nnix-channel --add https://nixos.org/channels/nixos-unstable unstable  # if you haven't set up any channels yet\nnix-env -i git-machete\n```\n\n**Note:** since `nixos-21.05`, `git-machete` is included in the stable channels as well.\nThe latest released version, however, is generally available in the unstable channel.\nStable channels may lag behind; see [repology](https://repology.org/project/git-machete/versions) for the current channel-package mapping.\n\n<br/>\n\n## Quick start\n\n### Discover the branch layout\n\n```shell script\ncd your-repo/\ngit machete discover\n```\n\nSee and possibly edit the suggested layout of branches.\nBranch layout is always kept as a `.git/machete` text file, which can be edited directly or via `git machete edit`.\n\n### See the current repository state\n```shell script\ngit machete status --list-commits\n```\n\n**Green** edge means the given branch is **in sync** with its parent. <br/>\n**Red** edge means it is **out of sync** &mdash; parent has some commits that the given branch does not have. <br/>\n**Gray** edge means that the branch is **merged** to its parent.\n\n### Rebase, reset to remote, push, pull all branches as needed\n```shell script\ngit machete traverse --fetch --start-from=first-root\n```\n\nPut each branch one by one in sync with its parent and remote tracking branch.\n\n### Fast-forward merge a child branch into the current branch\n```shell script\ngit machete advance\n```\n\nUseful for merging the child branch to the current branch in a linear fashion (without creating a merge commit).\n\n### GitHub integration\n\nCheck out the given PRs into local branches, also traverse chain of pull requests upwards, adding branches one by one to git-machete and check them out locally as well: <br/>\n```shell script\ngit machete github checkout-prs [--all | --by=<github-login> | --mine | <PR-number-1> ... <PR-number-N>]\n```\n\nCreate the PR, using the upstream (parent) branch from `.git/machete` as the base: <br/>\n```shell script\ngit machete github create-pr [--draft]\n```\n\n**Note**: for private repositories, a GitHub API token with `repo` access is required.\nThis will be resolved from the first of:\n1. `GITHUB_TOKEN` env var.\n2. Contents of the `.github-token` file in the home directory (`~`). This file has to be manually created by the user.\n3. Auth token from the current [`gh`](https://cli.github.com/) configuration.\n4. Auth token from the current [`hub`](https://github.com/github/hub) configuration.\n\n### Shell completions\n\nWhen git-machete is installed via **Homebrew** (and a few other supported package managers, see [PACKAGES.md](PACKAGES.md)),\nshell completions should be installed automatically. <br/>\nFor other package managers (like **pip**), or when your shell doesn't pick up the Homebrew-installed completion, use the following:\n\n#### Bash\n\nPut the following into `~/.bashrc` or `~/.bash_profile`:\n\n```shell script\neval \"$(git machete completion bash)\"  # or, if it doesn't work:\nsource <(git machete completion bash)\n```\n\n#### Fish\n\nPut the following into `~/.config/fish/config.fish`:\n\n```shell script\ngit machete completion fish | source\n```\n\n#### Zsh\n\nPut the following into `~/.zshrc`:\n\n```shell script\neval \"$(git machete completion zsh)\"  # or, if it doesn't work:\nsource <(git machete completion zsh)\n```\n\n<br/>\n\n## FAQ\n\n#### I've run `git machete discover`... but the branch layout I see in `.git/machete` doesn't exactly match what I expected. Am I doing something wrong?\n\n[//]: # (For how to find Medium header anchors, see https://www.freecodecamp.org/news/how-to-link-to-a-specific-paragraph-in-your-medium-article-2018-table-of-contents-method-e66595fea549/)\nNo! It's all right, `discover` is based on an (imperfect)\n[heuristic](https://medium.com/virtuslab/git-machete-strikes-again-traverse-the-git-rebase-jungle-even-faster-with-v2-0-f43ebaf8abb0#0544)\nwhich usually yields branch layout close to what the user would expect.\nIt still might not be perfect and &mdash; for example &mdash; declare branches to be children of `main`/`develop` instead of each other.\n\nJust run [`git machete edit`](https://git-machete.readthedocs.io/en/stable/#edit) to fix the layout manually.\nIf you're working on JetBrains IDEs, you can use [git-machete IntelliJ plugin](https://github.com/VirtusLab/git-machete-intellij-plugin#git-machete-intellij-plugin)\nto have branch name completion when editing `.git/machete` file.\n\nAlso, consider [`git machete github checkout-prs`](#github-integration) instead of `git machete discover` if you already have GitHub PRs opened.\n\n<br/>\n\n#### Can I use `git merge` for dealing with stacked PRs?\n\nThere are two commonly used ways to put a branch back in sync with its base (parent) branch:\n1. rebase the branch onto its base branch\n2. merge the base branch into the branch\n\nWhile git-machete supports merging base branch (like `main`) to update the branch\n([`git machete traverse --merge`](https://git-machete.readthedocs.io/en/stable/#traverse)),\nthis approach **works poorly with stacked PRs**.\nYou might end up with a very tangled history very quickly, and a non-trivial sequence of `git cherry-pick`s might be needed to restore order.\n\nThat is why we recommend using rebase over merge for stacked PRs.\nHowever, we still recommend using merge for the narrow case of [backporting hotfixes](https://slides.com/plipski/git-machete/#/11).\n\n<br/>\n\n#### Sometimes when I run `update` or `traverse`, too many commits are taken into the rebase... how to fix that?\n\nContrary to the popular misconception, git doesn't have a notion of\n[\"commits belonging to a branch\"](https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell).\nA branch is just a movable reference to a commit.\n\nThis makes it hard in general case to determine the range of commits that form the \"unique history\" of the given branch.\nThere's an entire algorithm in git-machete for determining the\n[_fork point_](https://medium.com/virtuslab/make-your-way-through-the-git-rebase-jungle-with-git-machete-e2ed4dbacd02#1ac9)\nof the branch (i.e. the place after which the unique history of the branch starts).\n\nOne thing that you can do to help fork-point algorithm in its job,\nis to **not delete** local branches instantly after they're merged or discarded.\nThey (or specifically, their [reflogs](https://virtuslab.github.io/tips/#git/git-reflog)) will be still useful for a while\nto determine fork points for other branches (and thus, the range of commits taken into rebase).\n\nAlso, you can always override fork point for a branch explicitly\nwith [`git machete fork-point --override-to...`](https://git-machete.readthedocs.io/#fork-point) command.\n\n<br/>\n\n## Reference\n\nFind the docs at [Read the Docs](https://git-machete.readthedocs.io/).\nYou can also check `git machete help` and `git machete help <command>`.\n\nFor the excellent overview for the reasons to use small & stacked PRs,\nsee [Ben Congdon](https://github.com/bcongdon)'s [blog post](https://benjamincongdon.me/blog/2022/07/17/In-Praise-of-Stacked-PRs/).\n\nTake a look at git-machete\n[reference blog post](https://medium.com/virtuslab/make-your-way-through-the-git-rebase-jungle-with-git-machete-e2ed4dbacd02)\nfor a guide on how to use the tool.\n\nThe more advanced features like automated traversal, upstream inference and tree discovery are described in the\n[second part of the series](https://medium.com/virtuslab/git-machete-strikes-again-traverse-the-git-rebase-jungle-even-faster-with-v2-0-f43ebaf8abb0).\n\n<br/>\n\n\n## Git compatibility\n\ngit-machete (since version 2.13.0) is compatible with git >= 1.8.0.\n\n<br/>\n\n\n## Contributions\n\nContributions are welcome! See [contributing guidelines](CONTRIBUTING.md) for details.\nHelp would be especially appreciated with Python code style, refactoring and tests &mdash;\nso far more focus has been put on features, documentation and automating the distribution."
}
