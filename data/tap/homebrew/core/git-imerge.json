{
  "name": "git-imerge",
  "full_name": "git-imerge",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Incremental merge for git",
  "license": "GPL-2.0-or-later",
  "homepage": "https://github.com/mhagger/git-imerge",
  "versions": {
    "stable": "1.2.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://files.pythonhosted.org/packages/be/f6/ea97fb920d7c3469e4817cfbf9202db98b4a4cdf71d8740e274af57d728c/git-imerge-1.2.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "df5818f40164b916eb089a004a47e5b8febae2b4471a827e3aaa4ebec3831a3f"
    },
    "head": {
      "url": "https://github.com/mhagger/git-imerge.git",
      "branch": "master"
    }
  },
  "revision": 1,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-imerge/blobs/sha256:d92935aec65d9d6c68d6517d0974ee7da92be9b9d2deb0b7508234499860e56b",
          "sha256": "d92935aec65d9d6c68d6517d0974ee7da92be9b9d2deb0b7508234499860e56b"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-imerge/blobs/sha256:d92935aec65d9d6c68d6517d0974ee7da92be9b9d2deb0b7508234499860e56b",
          "sha256": "d92935aec65d9d6c68d6517d0974ee7da92be9b9d2deb0b7508234499860e56b"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-imerge/blobs/sha256:d92935aec65d9d6c68d6517d0974ee7da92be9b9d2deb0b7508234499860e56b",
          "sha256": "d92935aec65d9d6c68d6517d0974ee7da92be9b9d2deb0b7508234499860e56b"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-imerge/blobs/sha256:25a0367e58ad1afa702446005dc2a80e4802c9bd300b810d43cb72f29cac4959",
          "sha256": "25a0367e58ad1afa702446005dc2a80e4802c9bd300b810d43cb72f29cac4959"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-imerge/blobs/sha256:25a0367e58ad1afa702446005dc2a80e4802c9bd300b810d43cb72f29cac4959",
          "sha256": "25a0367e58ad1afa702446005dc2a80e4802c9bd300b810d43cb72f29cac4959"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-imerge/blobs/sha256:25a0367e58ad1afa702446005dc2a80e4802c9bd300b810d43cb72f29cac4959",
          "sha256": "25a0367e58ad1afa702446005dc2a80e4802c9bd300b810d43cb72f29cac4959"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-imerge/blobs/sha256:25a0367e58ad1afa702446005dc2a80e4802c9bd300b810d43cb72f29cac4959",
          "sha256": "25a0367e58ad1afa702446005dc2a80e4802c9bd300b810d43cb72f29cac4959"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-imerge/blobs/sha256:fccde85a49be5f7819e50cca5dcc2fe8b06f0b10051d5a9b5369a5ffb9ddce26",
          "sha256": "fccde85a49be5f7819e50cca5dcc2fe8b06f0b10051d5a9b5369a5ffb9ddce26"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "python@3.11"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/git-imerge.rb",
  "ruby_source_checksum": {
    "sha256": "e203de0ab37ff5dfc378c3a8dbb9039c9b851ffd4525a99481581ffb87c2ab17"
  },
  "date_added": "2014-05-18T23:18:58-05:00",
  "readme": "# git-imerge -- incremental merge and rebase for Git\n\nPerform a merge between two branches incrementally. If conflicts are encountered, figure out exactly which pairs of commits conflict, and present the user with one pairwise conflict at a time for resolution.\n\n`git-imerge` has two primary design goals:\n\n* Reduce the pain of resolving merge conflicts to its unavoidable minimum, by finding and presenting the smallest possible conflicts: those between the changes introduced by one commit from each branch.\n\n* Allow a merge to be saved, tested, interrupted, published, and collaborated on while it is in progress.\n\nI think that it is easiest to understand the concept of incremental merging visually, and therefore I recommend the video of my [git-imerge presentation from the GitMerge 2013 conference](https://www.youtube.com/watch?v=FMZ2_-Ny_zc) (20 min) as a good place to start. The full slides for that talk are available in this repository under `doc/presentations/GitMerge-2013`. At the same conference, I was interviewed about `git-imerge` by Thomas Ferris Nicolaisen for his [GitMinutes Podcast #12](https://episodes.gitminutes.com/2013/06/gitminutes-12-git-merge-2013-part-4.html).\n\nTo learn how to use the `git-imerge` tool itself, I suggest the blog article [git-imerge: A Practical Introduction](https://softwareswirl.blogspot.com/2013/05/git-imerge-practical-introduction.html) and also typing `git-imerge --help` and `git-imerge SUBCOMMAND --help`. If you want more information, the theory and benefits of incremental merging are described in minute detail in a series of blog articles [[1](#REF1)], as are the benefits of retaining history when doing a rebase [[2](#REF2)].\n\nMultiple incremental merges can be in progress at the same time. Each incremental merge has a name, and its progress is recorded in the Git repository as references under `refs/imerge/NAME`. The current state of an incremental merge can be visualized using the `diagram` command.\n\nAn incremental merge can be interrupted and resumed arbitrarily, or even pushed to a server to allow somebody else to work on it.\n\n`git-imerge` comes with a Bash completion script, `completions/git-imerge`, which is installed automatically when installing `git-imerge`.\n\n\n## Requirements\n\n`git-imerge` requires:\n\n* A Python interpreter; either\n\n    * Python 3.x, version 3.3 or later.\n\n    * Python 2.x, version 2.6 or later. If you are using Python 2.6.x, then you have to install the `argparse` module yourself, as it was only added to the standard library in Python 2.7.\n\n* A recent version of Git.\n\nBash completion requires Git's completion being available.\n\n\n## Installation\n\n`git-imerge` is available on [PyPI](https://pypi.org), so you can install it with `pip`:\n\n    $ pip install git-imerge\n\n\nor using `setup.py` if you have downloaded the source package locally:\n\n    $ python setup.py install\n\nIf you prefer, you can use [Homebrew](https://brew.sh) to install `git-imerge`:\n\n    $ brew install git-imerge\n\n## Instructions\n\nTo start a merge or rebase operation using `git-imerge`, you use commands that are similar to the corresponding `git` commands:\n\n| `git-imerge` command | `git` analogue | Effect |\n| -------------------- | -------------- | ------ |\n| `git-imerge merge BRANCH` | `git merge BRANCH` | Merge ``BRANCH`` into the current branch |\n| `git-imerge rebase BRANCH` | `git rebase BRANCH` | Rebase the current branch on top of ``BRANCH`` |\n| `git-imerge revert COMMIT` | `git revert COMMIT` | Add a new commit that undoes the effect of `COMMIT` |\n| `git-imerge revert COMMIT1..COMMIT2` | `git revert COMMIT1..COMMIT2` | Add new commits that undo the effects of `COMMIT1..COMMIT2` |\n| `git-imerge drop COMMIT` | `git rebase --onto COMMIT^ COMMIT` | Entirely delete commit `COMMIT` from the history of the current branch |\n| `git-imerge drop COMMIT1..COMMIT2` | `git rebase --onto COMMIT1 COMMIT2` | Entirely delete commits ``COMMIT1..COMMIT2`` from the history of the current branch |\n\n`git-imerge drop` is also analogous to running `git rebase --interactive`, then deleting the specified commit(s) from the history. Both the `drop` and the `revert` subcommands are included in git-imerge because the equivalent git operations can conflict, so they both can benefit from using the incremental merge approach.)\n\nA few more options are available if you start the incremental merge using `git imerge start`:\n\n    $ git-imerge start --name=NAME --goal=GOAL [--first-parent] BRANCH\n\nwhere\n\n* `NAME` is the name for this merge (and also the default name of the branch to which the results will be saved).\n\n* `GOAL` describes how you want to simplify the results (see next section).\n\nAfter the incremental merge is started, you will be presented with any conflicts that have to be resolved. The basic procedure is similar to performing an incremental merge using `git`:\n\n    while not done:\n        <fix the conflict that is presented to you>\n        <\"git add\" the files that you changed>\n        git-imerge continue\n\nWhen you have resolved all of the conflicts, you finish the incremental merge by typing:\n\n    git-imerge finish\n\nThat should be enough to get you going. All of these subcommands have additional options; to learn about them type:\n\n    git-imerge --help\n    git-imerge SUBCMD --help\n\n\n### Simplifying results\n\nWhen the incremental merge is finished, you can simplify its results in various ways before recording it in your project's permanent history by using either the `finish` or `simplify` command. The \"goal\" of the incremental merge can be one of the following:\n\n* `merge` — keep only a simple merge of the second branch into the first branch, discarding all intermediate merges. The end result is similar to what you would get from\n\n        git checkout BRANCH1\n        git merge BRANCH2\n\n* `rebase` — keep the versions of the commits from the second branch rebased onto the first branch. The end result is similar to what you would get from\n\n        git checkout BRANCH2\n        git rebase BRANCH1\n\n* `rebase-with-history` — like `rebase`, except that it retains the old versions of the rebased commits in the history. It is equivalent to merging the commits from `BRANCH2` into `BRANCH1`, one commit at a time. In other words, it transforms this:\n\n        o---o---o---o          BRANCH1\n             \\\n              A---B---C---D    BRANCH2\n\n    into this:\n\n        o---o---o---o---A'--B'--C'--D'   NEW_BRANCH\n             \\         /   /   /   /\n              --------A---B---C---D\n\n    It is safe to rebase an already-published branch using this\n    approach.  See [[2](#REF2)] for more information.\n\n* `full` — don't simplify the incremental merge at all: do all of the intermediate merges and retain them all in the permanent history. In other words, it transforms this:\n\n        o---o---1---2---3      BRANCH1\n             \\\n              A---B---C---D    BRANCH2\n\n    into this:\n\n        o---o---1---2---3\n             \\   \\   \\   \\\n              A---A1--A2--A3\n               \\   \\   \\   \\\n                B---B1--B2--B3\n                 \\   \\   \\   \\\n                  C---C1--C2--C3\n                   \\   \\   \\   \\\n                    D---D1--D2--D3    NEW_BRANCH\n\n    This approach retains the complete history and ancestry information, which gives the maximum flexibility for conducting future merges. On the other hand, it clutters up the permanent Git history considerably.\n\n* `border` — this experimental goal retains the rebase of `BRANCH2` onto `BRANCH1` and also the rebase of `BRANCH1` onto `BRANCH2`, plus a merge commit that includes both branches. In other words, it transforms this:\n\n        o---o---1---2---3      BRANCH1\n             \\\n              A---B---C---D    BRANCH2\n\n    into this:\n\n        o---o---1---2---3\n             \\           \\\n              A           A2\n               \\           \\\n                B           B2\n                 \\           \\\n                  C           C2\n                   \\           \\\n                    D---D1--D2--D3    NEW_BRANCH\n\n    This approach leaves more history than a simple merge or rebase, possibly making future merges easier.\n\n* `border-with-history` — this experimental goal retains the `rebase-with-history of` `BRANCH2` onto `BRANCH1` and also the rebase (without history) of `BRANCH1` onto `BRANCH2`, plus a merge commit that includes both branches. In other words, it transforms this:\n\n        o---o---1---2---3      BRANCH1\n             \\\n              A---B---C---D    BRANCH2\n\n    into this:\n\n        o---o---1---2---3\n             \\           \\\n              A-----------A3\n               \\           \\\n                B-----------B3\n                 \\           \\\n                  C-----------C3\n                   \\           \\\n                    D---D1--D2--D3    NEW_BRANCH\n\n    This approach leaves more history and ancestry information than a simple merge or rebase, possibly making future merges easier.\n\n* `border-with-history2` — this experimental goal retains the `rebase-with-history` of `BRANCH1` onto `BRANCH2` and also the `rebase-with-history` of `BRANCH2` onto `BRANCH1`, plus a merge commit that includes both branches. In other words, it transforms this:\n\n        o---o---1---2---3      BRANCH1\n             \\\n              A---B---C---D    BRANCH2\n\n    into this:\n\n        o---o---1---2---3\n             \\   \\   \\   \\\n              A--- --- ---A3\n               \\   \\   \\   \\\n                B--- --- ---B3\n                 \\   \\   \\   \\\n                  C--- --- ---C3\n                   \\   \\   \\   \\\n                    D---D1--D2--D3    NEW_BRANCH\n\n    This approach leaves more history and ancestry information than a simple merge or rebase, possibly making future merges easier.\n\n\n## Technical notes\n\n### Suspending/resuming\n\nWhen `git-imerge` needs to ask the user to do a merge manually, it creates a temporary branch `refs/heads/imerge/NAME` to hold the result. If you want to suspend an incremental merge to do something else before continuing, all you need to do is abort any pending merge using `git merge --abort` and switch to your other branch. When you are ready to resume the incremental merge, just type `git imerge continue`.\n\nIf you need to completely abort an in-progress incremental merge, first remove the temporary branches `git-imerge` creates using `git-imerge remove`, then checkout the branch you were in before you started the incremental merge with `git checkout ORIGINAL_BRANCH`.\n\n\n### Storage\n\n`git-imerge` records all of the intermediate state about an incremental merge in the Git object database as a bunch of references under `refs/imerge/NAME`, where `NAME` is the name of the imerge:\n\n* `refs/imerge/NAME/state` points to a blob that describes the current state of the imerge in JSON format; for example,\n\n    * The tips of the two branches that are being merged\n\n    * The current \"blocker\" merges (merges that the user will have to do by hand), if any\n\n    * The simplification goal\n\n    * The name of the branch to which the result will be written.\n\n* `refs/imerge/NAME/manual/I-J` and `refs/imerge/NAME/auto/I-J` refer to the manual and automatic merge commits, respectively, that have been done so far as part of the incremental merge. `I` and `J` are integers indicating the location `(I,J)` of the merge in the incremental merge diagram.\n\n\n### Transferring an in-progress imerge between repositories\n\nIt might sometimes be convenient to transfer an in-progress incremental merge from one Git repository to another. For example, you might want to make a backup of the current state, or continue an imerge at home that you started at work, or ask a colleague to do a particular pairwise merge for you. Since all of the imerge state is stored in the Git object database, this can be done by pushing/fetching the references named in the previous section. For example,\n\n    $ git push --prune origin +refs/imerge/NAME/*:refs/imerge/NAME/*\n\nor\n\n    $ git fetch --prune origin +refs/imerge/NAME/*:refs/imerge/NAME/*\n\nPlease note that these commands _overwrite_ any state that already existed in the destination repository. There is currently no support for combining the work done by two people in parallel on an incremental merge, so for now you'll just have to take turns.\n\n\n### Interaction with `git rerere`\n\n`git rerere` is a nice tool that records how you resolve merge conflicts, and if it sees the same conflict again it tries to automatically reuse the same resolution.\n\nSince `git-imerge` attempts so many similar test merges, it is easy to imagine `rerere` getting confused. Moreover, `git-imerge` relies on a merge resolving (or not resolving) consistently if it is carried out more than once. Having `rerere` store extra information behind the scenes could therefore confuse `git-imerge`.\n\nIndeed, in testing it appeared that during incremental merges, the interaction of `git-imerge` with `rerere` was sometimes causing merge conflicts to be resolved incorrectly. Therefore, `git-imerge` explicitly turns rerere off temporarily whenever it runs any `git` commands.\n\n\n### Log messages for pairwise merge commits\n\nWhen `git imerge continue` or `git imerge record` finds a resolved merge in the working tree, it commits that merge then incorporates it into the incremental merge. Usually it just uses Git's autogenerated commit message for such commits. If you want to be prompted to edit such commit messages, you can either specify `--edit` on the command line or change the default in your configuration:\n\n    $ git config --global imerge.editmergemessages true\n\n\n## Testing\n\n`git-imerge` uses [`tox`](https://tox.readthedocs.io) to run tests. To run the test suite with the system's default Python:\n\n    $ tox\n\nTo run with a specific Python version, such as 3.7, pass the `-e` argument to `tox`:\n\n    $ tox -e py37\n\n\n## License\n\n`git-imerge` is released as open-source software under the GNU General Public License (GPL), version 2 or later. See file `COPYING` for more information.\n\n\n## References\n\n<a name=\"REF1\">[1]</a>\n* https://softwareswirl.blogspot.com/2012/12/the-conflict-frontier-of-nightmare-merge.html\n* https://softwareswirl.blogspot.com/2012/12/mapping-merge-conflict-frontier.html\n* https://softwareswirl.blogspot.com/2012/12/real-world-conflict-diagrams.html\n* https://softwareswirl.blogspot.com/2013/05/git-incremental-merge.html\n* https://softwareswirl.blogspot.com/2013/05/one-merge-to-rule-them-all.html\n* https://softwareswirl.blogspot.com/2013/05/incremental-merge-vs-direct-merge-vs.html\n* https://softwareswirl.blogspot.com/2013/05/git-imerge-practical-introduction.html\n\n<a name=\"REF2\">[2]</a>\n* https://softwareswirl.blogspot.com/2009/04/truce-in-merge-vs-rebase-war.html\n* https://softwareswirl.blogspot.com/2009/08/upstream-rebase-just-works-if-history.html\n* https://softwareswirl.blogspot.com/2009/08/rebase-with-history-implementation.html"
}
