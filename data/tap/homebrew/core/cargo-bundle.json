{
  "name": "cargo-bundle",
  "full_name": "cargo-bundle",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Wrap rust executables in OS-specific app bundles",
  "license": "Apache-2.0 or MIT",
  "homepage": "https://github.com/burtonageo/cargo-bundle",
  "versions": {
    "stable": "0.6.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/burtonageo/cargo-bundle/archive/refs/tags/v0.6.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "1ab5d3175e1828fe3b8b9bed9048f0279394fef90cd89ea5ff351c7cba2afa10"
    },
    "head": {
      "url": "https://github.com/burtonageo/cargo-bundle.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cargo-bundle/blobs/sha256:80188536b9ea48f4bf2684a94f7a49cede6fa2df3363166d88dd9ab544863a8c",
          "sha256": "80188536b9ea48f4bf2684a94f7a49cede6fa2df3363166d88dd9ab544863a8c"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cargo-bundle/blobs/sha256:d2a0a08c3bf07cb9cc441163497d39b59b9c7c4fdad0be8d3c40795b7cc93923",
          "sha256": "d2a0a08c3bf07cb9cc441163497d39b59b9c7c4fdad0be8d3c40795b7cc93923"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cargo-bundle/blobs/sha256:3bd2d974ec9db345d90f862d0bcfdb73b09b829712b4c520522d1c3d1f05badc",
          "sha256": "3bd2d974ec9db345d90f862d0bcfdb73b09b829712b4c520522d1c3d1f05badc"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cargo-bundle/blobs/sha256:ada7709197c98af0cda23f5abcb6cf5bbab3b96afef5f607d2a571ef8ac2b8da",
          "sha256": "ada7709197c98af0cda23f5abcb6cf5bbab3b96afef5f607d2a571ef8ac2b8da"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cargo-bundle/blobs/sha256:382768c4aeb9ec456bd70c770a3aff75ee4f8f2cf42f7fe9b8b481ed7f714fb7",
          "sha256": "382768c4aeb9ec456bd70c770a3aff75ee4f8f2cf42f7fe9b8b481ed7f714fb7"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cargo-bundle/blobs/sha256:e2698372a48dfea6db720b4cf70c2b7cfa13560798dd17f434e57d59016d7c23",
          "sha256": "e2698372a48dfea6db720b4cf70c2b7cfa13560798dd17f434e57d59016d7c23"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cargo-bundle/blobs/sha256:c5484070e73f28b33a947fe837f1b727b8329ba3857adcd148a8577cb82ca5fd",
          "sha256": "c5484070e73f28b33a947fe837f1b727b8329ba3857adcd148a8577cb82ca5fd"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cargo-bundle/blobs/sha256:03e2f7b9d02ba3b4e0c85d920d779d948a8855ac69b770f1a82720109543d1aa",
          "sha256": "03e2f7b9d02ba3b4e0c85d920d779d948a8855ac69b770f1a82720109543d1aa"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [
    "rustup-init"
  ],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/cargo-bundle.rb",
  "ruby_source_checksum": {
    "sha256": "6857106cb50c4b897a1e9ba4dbc2d20bca99878106120f9ab116c32bd1e22df2"
  },
  "date_added": "2022-07-05T17:34:50+00:00",
  "readme": "# Cargo bundle\n\n[![Build Status](https://github.com/burtonageo/cargo-bundle/workflows/CI/badge.svg?branch=master)](https://github.com/burtonageo/cargo-bundle/actions?query=branch%3Amaster)\n\nWrap Rust executables in OS-specific app bundles\n\n## About\n\n`cargo-bundle` is a tool used to generate installers or app bundles for GUI\nexecutables built with `cargo`.  It can create `.app` bundles for Mac OS X and\niOS, `.deb` packages for Linux, and `.msi` installers for Windows (note however\nthat iOS and Windows support is still experimental).  Support for creating\n`.rpm` packages (for Linux) and `.apk` packages (for Android) is still pending.\n\nTo install `cargo bundle`, run `cargo install cargo-bundle`. This will add the most recent version of `cargo-bundle`\npublished to [crates.io](https://crates.io/crates/cargo-bundle) as a subcommand to your default `cargo` installation.\n\nTo start using `cargo bundle`, add a `[package.metadata.bundle]` section to your project's `Cargo.toml` file.  This\nsection describes various attributes of the generated bundle, such as its name, icon, description, copyright, as well\nas any packaging scripts you need to generate extra data.  The full manifest format is described below.\n\nTo build a bundle for the OS you're on, simply run `cargo bundle` in your\nproject's directory (where the `Cargo.toml` is placed).  If you would like to\nbundle a release build, you must add the `--release` flag to your call.  To\ncross-compile and bundle an application for another OS, add an appropriate\n`--target` flag, just as you would for `cargo build`.\n\n## Flags\n\n TODO(burtonageo): Write this\n\n## Bundle manifest format\n\nThere are several fields in the `[package.metadata.bundle]` section.\n\n### General settings\n\nThese settings apply to bundles for all (or most) OSes.\n\n * `name`: The name of the built application. If this is not present, then it will use the `name` value from\n           your `Cargo.toml` file.\n * `identifier`: [REQUIRED] A string that uniquely identifies your application,\n   in reverse-DNS form (for example, `\"com.example.appname\"` or\n   `\"io.github.username.project\"`).  For OS X and iOS, this is used as the\n   bundle's `CFBundleIdentifier` value; for Windows, this is hashed to create\n   an application GUID.\n * `icon`: [OPTIONAL] The icons used for your application.  This should be an array of file paths or globs (with images\n           in various sizes/formats); `cargo-bundle` will automatically convert between image formats as necessary for\n           different platforms.  Supported formats include ICNS, ICO, PNG, and anything else that can be decoded by the\n           [`image`](https://crates.io/crates/image) crate.  Icons intended for high-resolution (e.g. [Retina](https://developer.apple.com/design/human-interface-guidelines/app-icons#macOS-app-icon-sizes)) displays\n           should have a filename with `@2x` just before the extension (see example below).\n * `version`: [OPTIONAL] The version of the application. If this is not present, then it will use the `version`\n              value from your `Cargo.toml` file.\n * `resources`: [OPTIONAL] List of files or directories which will be copied to the resources section of the\n                bundle. Globs are supported.\n * `script`: [OPTIONAL] This is a reserved field; at the moment it is not used for anything, but may be used to\n             run scripts while packaging the bundle (e.g. download files, compress and encrypt, etc.).\n * `copyright`: [OPTIONAL] This contains a copyright string associated with your application.\n * `category`: [OPTIONAL] What kind of application this is.  This can\n   be a human-readable string (e.g. `\"Puzzle game\"`), or a Mac OS X\n   [LSApplicationCategoryType](https://developer.apple.com/documentation/bundleresources/information_property_list/lsapplicationcategorytype#possibleValues) value\n   (e.g. `\"public.app-category.puzzle-games\"`), or a GNOME desktop\n   file category name (e.g. `\"LogicGame\"`), and `cargo-bundle` will\n   automatically convert as needed for different platforms.\n * `short_description`: [OPTIONAL] A short, one-line description of the application. If this is not present, then it\n                        will use the `description` value from your `Cargo.toml` file.\n * `long_description`: [OPTIONAL] A longer, multi-line description of the application.\n\n### Linux-specific settings\n\nThese settings are used only when bundling Linux compatible packages (currently `deb` only).\n\n* `linux_mime_types`: A list of strings which represent mime types. If present, these are assigned\n  to the `MimeType` field of the .desktop file.\n* `linux_exec_args`: A single string which is inserted after the name of the binary in the `Exec`\n  field in the `.desktop` file. For example if the binary is called `my_program` and\n  `linux_exec_args = \"%f\"` then the Exec filed will be `Exec=my_program %f`. Find out more from the\n  [specification](https://specifications.freedesktop.org/desktop-entry-spec/desktop-entry-spec-latest.html#exec-variables)\n* `linux_use_terminal`: A boolean variable indicating the app is a console app or a gui app, default it's set to false.\n\n### Debian-specific settings\n\nThese settings are used only when bundling `deb` packages.\n\n* `deb_depends`: A list of strings indicating other packages (e.g. shared\n  libraries) that this package depends on to be installed.  If present, this\n  forms the `Depends:` field of the `deb` package control file.\n\n### Mac OS X-specific settings\n\nThese settings are used only when bundling `osx` packages.\n\n* `osx_frameworks`: A list of strings indicating any Mac OS X frameworks that\n  need to be bundled with the app.  Each string can either be the name of a\n  framework (without the `.framework` extension, e.g. `\"SDL2\"`), in which case\n  `cargo-bundle` will search for that framework in the standard install\n  locations (`~/Library/Frameworks/`, `/Library/Frameworks/`, and\n  `/Network/Library/Frameworks/`), or a path to a specific framework bundle\n  (e.g. `./data/frameworks/SDL2.framework`).  Note that this setting just makes\n  `cargo-bundle` copy the specified frameworks into the OS X app bundle (under\n  `Foobar.app/Contents/Frameworks/`); you are still responsible for (1)\n  arranging for the compiled binary to link against those frameworks (e.g. by\n  emitting lines like `cargo:rustc-link-lib=framework=SDL2` from your\n  `build.rs` script), and (2) embedding the correct rpath in your binary\n  (e.g. by running `install_name_tool -add_rpath\n  \"@executable_path/../Frameworks\" path/to/binary` after compiling).\n* `osx_minimum_system_version`: A version string indicating the minimum Mac OS\n  X version that the bundled app supports (e.g. `\"10.11\"`).  If you are using\n  this config field, you may also want have your `build.rs` script emit\n  `cargo:rustc-env=MACOSX_DEPLOYMENT_TARGET=10.11` (or whatever version number\n  you want) to ensure that the compiled binary has the same minimum version.\n* `osx_url_schemes`: A list of strings indicating the URL schemes that the app\n  handles.\n\n### Example `Cargo.toml`:\n\n```toml\n[package]\nname = \"example\"\n# ...other fields...\n\n[package.metadata.bundle]\nname = \"ExampleApplication\"\nidentifier = \"com.doe.exampleapplication\"\nicon = [\"32x32.png\", \"128x128.png\", \"128x128@2x.png\"]\nversion = \"1.0.0\"\nresources = [\"assets\", \"images/**/*.png\", \"secrets/public_key.txt\"]\ncopyright = \"Copyright (c) Jane Doe 2016. All rights reserved.\"\ncategory = \"Developer Tool\"\nshort_description = \"An example application.\"\nlong_description = \"\"\"\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\neiusmod tempor incididunt ut labore et dolore magna aliqua.  Ut\nenim ad minim veniam, quis nostrud exercitation ullamco laboris\nnisi ut aliquip ex ea commodo consequat.\n\"\"\"\ndeb_depends = [\"libgl1-mesa-glx\", \"libsdl2-2.0-0 (>= 2.0.5)\"]\nosx_frameworks = [\"SDL2\"]\nosx_url_schemes = [\"com.doe.exampleapplication\"]\n```\n\n## Contributing\n\n`cargo-bundle` has ambitions to be inclusive project and welcome contributions from anyone.  Please abide by the Rust\ncode of conduct.\n\n## Status\n\nVery early alpha. Expect the format of the `[package.metadata.bundle]` section to change, and there is no guarantee of\nstability.\n\n## License\n\nThis program is licensed either under the terms of the\n[Apache Software License](http://www.apache.org/licenses/LICENSE-2.0), or the\n[MIT License](https://opensource.org/licenses/MIT)."
}
