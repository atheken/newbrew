{
  "name": "mfterm",
  "full_name": "mfterm",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Terminal for working with Mifare Classic 1-4k Tags",
  "license": "GPL-3.0",
  "homepage": "https://github.com/4ZM/mfterm",
  "versions": {
    "stable": "1.0.7",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/4ZM/mfterm/releases/download/v1.0.7/mfterm-1.0.7.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "b6bb74a7ec1f12314dee42973eb5f458055b66b1b41316ae0c5380292b86b248"
    },
    "head": {
      "url": "https://github.com/4ZM/mfterm.git",
      "branch": "master"
    }
  },
  "revision": 3,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/mfterm/blobs/sha256:d6700be1830322a6b2c164cecdfcdbeb2285c4ab2db1518a0782f820e842b63b",
          "sha256": "d6700be1830322a6b2c164cecdfcdbeb2285c4ab2db1518a0782f820e842b63b"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/mfterm/blobs/sha256:a8910ab8b9320d26fb258e95f1d2d8a1d5d8dfcbed739464c916e6f0b6b8b896",
          "sha256": "a8910ab8b9320d26fb258e95f1d2d8a1d5d8dfcbed739464c916e6f0b6b8b896"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/mfterm/blobs/sha256:d8ebffdc37a5ab667c1e7c969d66bf2407c820ade96701806fc149f8e95ffe78",
          "sha256": "d8ebffdc37a5ab667c1e7c969d66bf2407c820ade96701806fc149f8e95ffe78"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/mfterm/blobs/sha256:bf979c85bd74aef426a7d1911fb54ec6e9d3e187c2fba1b692dc502020b832cc",
          "sha256": "bf979c85bd74aef426a7d1911fb54ec6e9d3e187c2fba1b692dc502020b832cc"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/mfterm/blobs/sha256:524e0778d1d15de19bbb7e5f052c338542f2fd4684f4f1cae018cf662bbb1f81",
          "sha256": "524e0778d1d15de19bbb7e5f052c338542f2fd4684f4f1cae018cf662bbb1f81"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/mfterm/blobs/sha256:4f1976bef27bb44358dfb064726b666b3b7e08a7e2670d0964423fa78b8afa1f",
          "sha256": "4f1976bef27bb44358dfb064726b666b3b7e08a7e2670d0964423fa78b8afa1f"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mfterm/blobs/sha256:84f878e049935d495a6621ac26fb0757f6a936c4e85fa2f6ba1058feb4e7d844",
          "sha256": "84f878e049935d495a6621ac26fb0757f6a936c4e85fa2f6ba1058feb4e7d844"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "libnfc",
    "libusb",
    "openssl@3"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    {
      "bison": "build"
    },
    {
      "flex": "build"
    }
  ],
  "uses_from_macos_bounds": [
    {},
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/mfterm.rb",
  "ruby_source_checksum": {
    "sha256": "d29a90bb1a00f301213d6954d59f6981a6aee695467bbdd60a65bdd60e1ab7bc"
  },
  "head_dependencies": {
    "build_dependencies": [
      "autoconf",
      "automake"
    ],
    "dependencies": [
      "libnfc",
      "libusb",
      "openssl@3"
    ],
    "test_dependencies": [],
    "recommended_dependencies": [],
    "optional_dependencies": [],
    "uses_from_macos": [
      {
        "bison": "build"
      },
      {
        "flex": "build"
      }
    ],
    "uses_from_macos_bounds": [
      {},
      {}
    ]
  },
  "date_added": "2016-11-08T16:03:14+00:00",
  "readme": "# Mfterm [![Build Status](https://travis-ci.org/4ZM/mfterm.svg?branch=master)](https://travis-ci.org/4ZM/mfterm)\n\nmfterm is a terminal interface for working with Mifare Classic tags.\n\nInstallation\n-----------\n### Mac OS\n\n`brew install mfterm`\n\n### Linux\n\nPrecompiled package in [Kali Linux](https://www.kali.org/)\n\nUsage\n-----------\nTab completion on commands is available. Also, commands that have file\nname arguments provide tab completion on files. There is also a\ncommand history, like in most normal shells.\n\nWorking with the mfterm program there are a few state variables that\nare used.\n\nCurrent Tag\n-----------\nThe \"current tag\" is populated with the 'load' or 'read' commands. The\n'read' command will read data from a physical tag and requires the\n\"current keys\" to be set to the keys of the tag. Clear the \"current\ntag\" by using the 'clear' command.\n\nDisplay the \"current tag\" by using the 'print' command. The keys of\nthe \"current tag\" are displayed with the 'print keys' command. Note:\nthe tag keys could be different from the \"current keys\" displayed by\nthe 'keys print' command.\n\nThe data of the \"current tag\" can be manipulated with the 'set'\ncommand.\n\nThe \"current tag\" can be persisted by writing it to a file with the\n'save' command. It can also be written to a physical tag with the\n'write' command. For the 'write' command to succeed, the \"current\nkeys\" have to be set to appropriate values. The 'write unlocked'\ncommand can be used to write to block 0 on some 1k pirate cards.\n\nIf you are reading or loading a 1k tag, the mfterm program will still\nuse a full 4k tag to represent it. The last 3k will be all\nzeroes. This is in analogy with the other libnfc tools.\n\nCurrent Keys\n------------\nThe \"current keys\" are used to authenticate when performing operations\non a physical tag. They can be displayed using the 'keys'\ncommand. Clear the \"current keys\" by using the 'keys clear' command.\n\nThe keys are stored just like a tag in a file using the 'keys save',\nbut with all the data fields except the sector trailers cleared. The\nkeys can be loaded from a file, either a real tag dump or a key tag\ndump, with the 'keys load' command.\n\nThe \"current keys\" can be set to match the \"current tag\" by using the\n'keys import' command. It is also possible to manually set a key using\nthe 'keys set' command.\n\nUse the 'keys test' command to test if the \"current keys\" can be used\nto authenticate with a physical tag.\n\nDictionary\n----------\nA key dictionary can be imported from a file using the 'dict load'\ncommand. This dictionary can then be used to perform a dictionary\nattack on the sectors of a tag by using the 'dict attack' command.\n\nThe format of the dictionary file is simple. One key (6 bytes, 12 hex\ncharacters) per line and # is a comment. \n\nPerforming 'dict load' on several files will produce a dictionary that\nis the union of those files. Duplicates will be removed.\n\nTo list all the keys in the dictionary, use the command 'dict'. To\nclear the dictionary use 'dict clear'.\n\nOther commands\n--------------\nQuit the mfterm program by issuing the 'quit' command.\n\nHelp is available by writing 'help'\n\n\nMAC Computation\n---------------\n\nThe function 'mac compute' is used for computing DES MACs (message\nauthentication codes). They require a 64 bit key that can be set using\nthe command 'mac key'. The same command, without arguments, is used to\ndisplay the current key.\n\nThe input to the DES MAC is UID + 14 left most bytes of the specified\nblock.\n\nUsing the command 'mac update' is shorthand for a MAC computation and\nthen setting the MAC of the same block.\n\nSpecification Files\n-------------------\nA specification file defines names for parts of the tag data. See the\nfile mfc-spec.txt for a sample specification.\n\nSpecification files are loaded with the command 'spec load'. They can\nbe cleared with 'spec clear'. To display the data structure loaded use\nthe command 'spec'.\n\nOnce a specification has been loaded, it can be used to access the\ndata in the tag by using a specification path. In the sample\nspecification, the path: '.sector_0.block_0.atqa', when entered in the\nterminal, will display the two bytes of data starting with byte 6.\n\n\nBuilding mfterm\n---------------\n\nStandard: ./configure; make; make install\n\nSee INSTALL file for details.\n\n\nWARNING:\n--------\nThe mfterm software is neither thoroughly tested nor widely used. It\nlikely contains a number of serious bugs that can be exploited to\ncompromise your computer. Do NOT run the mfterm software as a\nprivileged user (e.g. root), and ONLY load tag, dictionary and\nspecification files that you get from people you trust."
}
