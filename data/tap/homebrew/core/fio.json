{
  "name": "fio",
  "full_name": "fio",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "I/O benchmark and stress test",
  "license": "GPL-2.0-only",
  "homepage": "https://github.com/axboe/fio",
  "versions": {
    "stable": "3.35",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/axboe/fio/archive/fio-3.35.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "36b98f35622ee594364bfd9a527523a44cda0dda2455ba9f2dcae2cd7dd3859f"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fio/blobs/sha256:9e08ef3728525608cd561d1dc9172caa0306f4511150268ada52c4e9952a8181",
          "sha256": "9e08ef3728525608cd561d1dc9172caa0306f4511150268ada52c4e9952a8181"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fio/blobs/sha256:9cc40c0fe242c0a51e578097e53281dbd74f6edf5f5cbfc0d0860a4401a40f4e",
          "sha256": "9cc40c0fe242c0a51e578097e53281dbd74f6edf5f5cbfc0d0860a4401a40f4e"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fio/blobs/sha256:66df4935ab6ee0eb8c5568e6e7a033fb1f45f73f48088afecc07d1238bdab896",
          "sha256": "66df4935ab6ee0eb8c5568e6e7a033fb1f45f73f48088afecc07d1238bdab896"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fio/blobs/sha256:276a9f2c59a04ffbabbfe58ce93dd14a523c297538528059953fddf425326973",
          "sha256": "276a9f2c59a04ffbabbfe58ce93dd14a523c297538528059953fddf425326973"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fio/blobs/sha256:d0ed09c6cb777970c954ab462f61200ab0e500321228c59e0cb54d2ec0594dab",
          "sha256": "d0ed09c6cb777970c954ab462f61200ab0e500321228c59e0cb54d2ec0594dab"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fio/blobs/sha256:c0ef721fae243da1ed185c357cf63d585300641116b3d7d31bf9f4374f2e3396",
          "sha256": "c0ef721fae243da1ed185c357cf63d585300641116b3d7d31bf9f4374f2e3396"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fio/blobs/sha256:34c8a31803dda9376ee468b6c7c5e46c466b0d032b1163c0644a529351d918b8",
          "sha256": "34c8a31803dda9376ee468b6c7c5e46c466b0d032b1163c0644a529351d918b8"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "zlib"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/fio.rb",
  "ruby_source_checksum": {
    "sha256": "783d84bfd04aa64276a423e4ce5ea6fece9df5d24c6af9cff4c3a74c32ffe552"
  },
  "date_added": "2010-03-02T19:15:34+01:00",
  "readme": "Overview and history\n--------------------\n\nFio was originally written to save me the hassle of writing special test case\nprograms when I wanted to test a specific workload, either for performance\nreasons or to find/reproduce a bug. The process of writing such a test app can\nbe tiresome, especially if you have to do it often.  Hence I needed a tool that\nwould be able to simulate a given I/O workload without resorting to writing a\ntailored test case again and again.\n\nA test work load is difficult to define, though. There can be any number of\nprocesses or threads involved, and they can each be using their own way of\ngenerating I/O. You could have someone dirtying large amounts of memory in a\nmemory mapped file, or maybe several threads issuing reads using asynchronous\nI/O. fio needed to be flexible enough to simulate both of these cases, and many\nmore.\n\nFio spawns a number of threads or processes doing a particular type of I/O\naction as specified by the user. fio takes a number of global parameters, each\ninherited by the thread unless otherwise parameters given to them overriding\nthat setting is given.  The typical use of fio is to write a job file matching\nthe I/O load one wants to simulate.\n\n\nSource\n------\n\nFio resides in a git repo, the canonical place is:\n\n\thttps://git.kernel.dk/cgit/fio/\n\nSnapshots are frequently generated and :file:`fio-git-*.tar.gz` include the git\nmeta data as well. Other tarballs are archives of official fio releases.\nSnapshots can download from:\n\n\thttps://brick.kernel.dk/snaps/\n\nThere are also two official mirrors. Both of these are automatically synced with\nthe main repository, when changes are pushed. If the main repo is down for some\nreason, either one of these is safe to use as a backup:\n\n\thttps://git.kernel.org/pub/scm/linux/kernel/git/axboe/fio.git\n\n\thttps://github.com/axboe/fio.git\n\n\nMailing list\n------------\n\nThe fio project mailing list is meant for anything related to fio including\ngeneral discussion, bug reporting, questions, and development. For bug reporting,\nsee REPORTING-BUGS.\n\nAn automated mail detailing recent commits is automatically sent to the list at\nmost daily. The list address is fio@vger.kernel.org, subscribe by sending an\nemail to majordomo@vger.kernel.org with\n\n\tsubscribe fio\n\nin the body of the email. Archives can be found here:\n\n\thttps://www.spinics.net/lists/fio/\n\nor here:\n\n\thttps://lore.kernel.org/fio/\n\nand archives for the old list can be found here:\n\n\thttp://maillist.kernel.dk/fio-devel/\n\n\nAuthor\n------\n\nFio was written by Jens Axboe <axboe@kernel.dk> to enable flexible testing of\nthe Linux I/O subsystem and schedulers. He got tired of writing specific test\napplications to simulate a given workload, and found that the existing I/O\nbenchmark/test tools out there weren't flexible enough to do what he wanted.\n\nJens Axboe <axboe@kernel.dk> 20060905\n\n\nMaintainers\n-----------\n\nFio is maintained by Jens Axboe <axboe@kernel.dk and\nVincent Fu <vincentfu@gmail.com> - however, for reporting bugs please use\nthe fio reflector or the GitHub page rather than email any of them\ndirectly. By using the public resources, others will be able to learn from\nthe responses too. Chances are also good that other members will be able to\nhelp with your inquiry as well.\n\n\nBinary packages\n---------------\n\nDebian:\n\tStarting with Debian \"Squeeze\", fio packages are part of the official\n\tDebian repository. https://packages.debian.org/search?keywords=fio .\n\nUbuntu:\n\tStarting with Ubuntu 10.04 LTS (aka \"Lucid Lynx\"), fio packages are part\n\tof the Ubuntu \"universe\" repository.\n\thttps://packages.ubuntu.com/search?keywords=fio .\n\nRed Hat, Fedora, CentOS & Co:\n\tStarting with Fedora 9/Extra Packages for Enterprise Linux 4, fio\n\tpackages are part of the Fedora/EPEL repositories.\n\thttps://packages.fedoraproject.org/pkgs/fio/ .\n\nMandriva:\n\tMandriva has integrated fio into their package repository, so installing\n\ton that distro should be as easy as typing ``urpmi fio``.\n\nArch Linux:\n        An Arch Linux package is provided under the Community sub-repository:\n        https://www.archlinux.org/packages/?sort=&q=fio\n\nSolaris:\n\tPackages for Solaris are available from OpenCSW. Install their pkgutil\n\ttool (http://www.opencsw.org/get-it/pkgutil/) and then install fio via\n\t``pkgutil -i fio``.\n\nWindows:\n        Beginning with fio 3.31 Windows installers for tagged releases are\n        available on GitHub at https://github.com/axboe/fio/releases. The\n        latest installers for Windows can also be obtained as GitHub Actions\n        artifacts by selecting a build from\n        https://github.com/axboe/fio/actions. These require logging in to a\n        GitHub account.\n\nBSDs:\n\tPackages for BSDs may be available from their binary package repositories.\n\tLook for a package \"fio\" using their binary package managers.\n\n\nBuilding\n--------\n\nJust type::\n\n $ ./configure\n $ make\n $ make install\n\nNote that GNU make is required. On BSDs it's available from devel/gmake within\nports directory; on Solaris it's in the SUNWgmake package.  On platforms where\nGNU make isn't the default, type ``gmake`` instead of ``make``.\n\nConfigure will print the enabled options. Note that on Linux based platforms,\nthe libaio development packages must be installed to use the libaio\nengine. Depending on the distro, it is usually called libaio-devel or libaio-dev.\n\nFor gfio, gtk 2.18 (or newer), associated glib threads, and cairo are required\nto be installed.  gfio isn't built automatically and can be enabled with a\n``--enable-gfio`` option to configure.\n\nTo build fio with a cross-compiler::\n\n $ make clean\n $ make CROSS_COMPILE=/path/to/toolchain/prefix\n\nConfigure will attempt to determine the target platform automatically.\n\nIt's possible to build fio for ESX as well, use the ``--esx`` switch to\nconfigure.\n\n\nWindows\n~~~~~~~\n\nThe minimum versions of Windows for building/running fio are Windows 7/Windows\nServer 2008 R2. On Windows, Cygwin (https://www.cygwin.com/) is required in\norder to build fio. To create an MSI installer package install WiX from\nhttps://wixtoolset.org and run :file:`dobuild.cmd` from the :file:`os/windows`\ndirectory.\n\nHow to compile fio on 64-bit Windows:\n\n 1. Install Cygwin (https://www.cygwin.com/). Install **make** and all\n    packages starting with **mingw64-x86_64**. Ensure\n    **mingw64-x86_64-zlib** are installed if you wish\n    to enable fio's log compression functionality.\n 2. Open the Cygwin Terminal.\n 3. Go to the fio directory (source files).\n 4. Run ``make clean && make -j``.\n\nTo build fio for 32-bit Windows, ensure the -i686 versions of the previously\nmentioned -x86_64 packages are installed and run ``./configure\n--build-32bit-win`` before ``make``.\n\nIt's recommended that once built or installed, fio be run in a Command Prompt or\nother 'native' console such as console2, since there are known to be display and\nsignal issues when running it under a Cygwin shell (see\nhttps://github.com/mintty/mintty/issues/56 and\nhttps://github.com/mintty/mintty/wiki/Tips#inputoutput-interaction-with-alien-programs\nfor details).\n\n\nDocumentation\n~~~~~~~~~~~~~\n\nFio uses Sphinx_ to generate documentation from the reStructuredText_ files.\nTo build HTML formatted documentation run ``make -C doc html`` and direct your\nbrowser to :file:`./doc/output/html/index.html`.  To build manual page run\n``make -C doc man`` and then ``man doc/output/man/fio.1``.  To see what other\noutput formats are supported run ``make -C doc help``.\n\n.. _reStructuredText: https://www.sphinx-doc.org/rest.html\n.. _Sphinx: https://www.sphinx-doc.org\n\n\nPlatforms\n---------\n\nFio works on (at least) Linux, Solaris, AIX, HP-UX, OSX, NetBSD, OpenBSD,\nWindows, FreeBSD, and DragonFly. Some features and/or options may only be\navailable on some of the platforms, typically because those features only apply\nto that platform (like the solarisaio engine, or the splice engine on Linux).\n\nSome features are not available on FreeBSD/Solaris even if they could be\nimplemented, I'd be happy to take patches for that. An example of that is disk\nutility statistics and (I think) huge page support, support for that does exist\nin FreeBSD/Solaris.\n\nFio uses pthread mutexes for signaling and locking and some platforms do not\nsupport process shared pthread mutexes. As a result, on such platforms only\nthreads are supported. This could be fixed with sysv ipc locking or other\nlocking alternatives.\n\nOther \\*BSD platforms are untested, but fio should work there almost out of the\nbox. Since I don't do test runs or even compiles on those platforms, your\nmileage may vary. Sending me patches for other platforms is greatly\nappreciated. There's a lot of value in having the same test/benchmark tool\navailable on all platforms.\n\nNote that POSIX aio is not enabled by default on AIX. Messages like these::\n\n    Symbol resolution failed for /usr/lib/libc.a(posix_aio.o) because:\n        Symbol _posix_kaio_rdwr (number 2) is not exported from dependent module /unix.\n\nindicate one needs to enable POSIX aio. Run the following commands as root::\n\n    # lsdev -C -l posix_aio0\n        posix_aio0 Defined  Posix Asynchronous I/O\n    # cfgmgr -l posix_aio0\n    # lsdev -C -l posix_aio0\n        posix_aio0 Available  Posix Asynchronous I/O\n\nPOSIX aio should work now. To make the change permanent::\n\n    # chdev -l posix_aio0 -P -a autoconfig='available'\n        posix_aio0 changed\n\n\nRunning fio\n-----------\n\nRunning fio is normally the easiest part - you just give it the job file\n(or job files) as parameters::\n\n\t$ fio [options] [jobfile] ...\n\nand it will start doing what the *jobfile* tells it to do. You can give more\nthan one job file on the command line, fio will serialize the running of those\nfiles. Internally that is the same as using the :option:`stonewall` parameter\ndescribed in the parameter section.\n\nIf the job file contains only one job, you may as well just give the parameters\non the command line. The command line parameters are identical to the job\nparameters, with a few extra that control global parameters.  For example, for\nthe job file parameter :option:`iodepth=2 <iodepth>`, the mirror command line\noption would be :option:`--iodepth 2 <iodepth>` or :option:`--iodepth=2\n<iodepth>`. You can also use the command line for giving more than one job\nentry. For each :option:`--name <name>` option that fio sees, it will start a\nnew job with that name.  Command line entries following a\n:option:`--name <name>` entry will apply to that job, until there are no more\nentries or a new :option:`--name <name>` entry is seen. This is similar to the\njob file options, where each option applies to the current job until a new []\njob entry is seen.\n\nfio does not need to run as root, except if the files or devices specified in\nthe job section requires that. Some other options may also be restricted, such\nas memory locking, I/O scheduler switching, and decreasing the nice value.\n\nIf *jobfile* is specified as ``-``, the job file will be read from standard\ninput."
}
