{
  "name": "plowshare",
  "full_name": "plowshare",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Download/upload tool for popular file sharing websites",
  "license": "GPL-3.0-or-later",
  "homepage": "https://github.com/mcrapet/plowshare",
  "versions": {
    "stable": "2.1.7",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/mcrapet/plowshare/archive/v2.1.7.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "c17d0cc1b3323f72b2c1a5b183a9fcef04e8bfc53c9679a4e1523642310d22ad"
    }
  },
  "revision": 1,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/plowshare/blobs/sha256:861153a64f192c3e5ba25f43e59d5b3d8a96064cfb422b4d7a76986f96a4699d",
          "sha256": "861153a64f192c3e5ba25f43e59d5b3d8a96064cfb422b4d7a76986f96a4699d"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/plowshare/blobs/sha256:0fdf55cf9624e4d8a9abfd52b93db4edb8540082d2ddad5bdee597612862aca0",
          "sha256": "0fdf55cf9624e4d8a9abfd52b93db4edb8540082d2ddad5bdee597612862aca0"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/plowshare/blobs/sha256:d5552280803160034db82652d6eb8fa9ead72d8bd4c9be2c0e03c9b6ee2a897c",
          "sha256": "d5552280803160034db82652d6eb8fa9ead72d8bd4c9be2c0e03c9b6ee2a897c"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/plowshare/blobs/sha256:459e03bc4ae1b5474cb45ede0e4cf578ac07e09ddf53ef5576a4d8565727f25c",
          "sha256": "459e03bc4ae1b5474cb45ede0e4cf578ac07e09ddf53ef5576a4d8565727f25c"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/plowshare/blobs/sha256:9ee2632cc598eab9744d758e037c8a0eecc202c19e93ed01670bdefecb6ba00a",
          "sha256": "9ee2632cc598eab9744d758e037c8a0eecc202c19e93ed01670bdefecb6ba00a"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/plowshare/blobs/sha256:3d995918e629820f93c9a6d9e2661c4182ba181d2959306adbbfea1b24af5498",
          "sha256": "3d995918e629820f93c9a6d9e2661c4182ba181d2959306adbbfea1b24af5498"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/plowshare/blobs/sha256:71fc52474893fbb6b7d0a9644ea1a368a59f91fb59c946052a060a10e493157b",
          "sha256": "71fc52474893fbb6b7d0a9644ea1a368a59f91fb59c946052a060a10e493157b"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/plowshare/blobs/sha256:fb3eb1ea28870d541ff8ab28efc057f5cb653ba851a4b794319ff3b0bbf48446",
          "sha256": "fb3eb1ea28870d541ff8ab28efc057f5cb653ba851a4b794319ff3b0bbf48446"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/plowshare/blobs/sha256:d5b299d87fbdd4deb61521da33c68f81bed370130a2ecaa3565d059055f315d8",
          "sha256": "d5b299d87fbdd4deb61521da33c68f81bed370130a2ecaa3565d059055f315d8"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "bash",
    "feh",
    "libcaca",
    "recode",
    "spidermonkey"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/plowshare.rb",
  "ruby_source_checksum": {
    "sha256": "17379fa468b41b7065686d783c1881da6e3920dd6560502c354e6033cd843e32"
  },
  "date_added": "2010-07-15T09:36:03-07:00",
  "readme": "# Plowshare\n\n## Introduction\n\nPlowshare is a set of command-line tools (written entirely in Bash shell script) designed for managing file-sharing websites (aka Hosters).\n\nPlowshare is divided into 6 scripts:\n- *plowdown*, for downloading URLs\n- *plowup*, for uploading files\n- *plowdel*, for deleting remote files\n- *plowlist*, for listing remote shared folders\n- *plowprobe*, for retrieving information of downloading URLs\n- *plowmod*, easy management (installation or update) of Plowshare modules\n\nPlowshare itself doesn't support any websites (named *module*). It's just the core engine.\nConcerning modules, few are available separately and must be installed in user directory (see [below](#install)).\n\n### Features\n\n- Small footprint (few shell scripts). No java, no python. Run fast on embedded devices.\n- Few dependencies and portable. [Bash](https://www.gnu.org/software/bash/) and [cURL](http://curl.haxx.se/) are enough for most hosters.\n- Modules (hoster plugins) are simple to write using [Plowshare API](#implement-your-own-modules).\n- Support for automatic online captcha solver services.\n- Cache mechanism: hoster session or cookie reuse (to avoid relogin).\n\n## Install\n\nSee `INSTALL` file for details.\n\n## Usage examples\n\nAll scripts share the same verbose options:\n- `-v0` (be quiet, alias: `-q`)\n- `-v1` (errors only)\n- `-v2` (infos message; default)\n- `-v3` (show all messages)\n- `-v4` (show all messages, HTML pages and cookies, use this for bug report)\n\nGetting help:\n- `--help`\n- `--longhelp` (additionally prints modules command-line options)\n\nExhaustive documentation is available in manpages.\n\nAll examples below are using fake links.\n\n### Plowdown\n\nDownload a file from Rapidshare:\n\n```sh\n$ plowdown http://www.rapidshare.com/files/86545320/Tux-Trainer.rar\n```\n\nDownload a file from Rapidgator using an account (free or premium):\n\n```sh\n$ plowdown -a 'myuser:mypassword' http://rapidgator.net/file/49b1b874\n```\n\n**Note**: `:` is the separator character for login and password.\nEnclosing string using single quotes ensure against shell expansion.\n\nDownload a list of links (one link per line):\n\n```sh\n$ cat file_with_links.txt\n# This is a comment\nhttp://depositfiles.com/files/abcdefghi\nhttp://www.rapidshare.com/files/86545320/Tux-Trainer_25-01-2008.rar\n$ plowdown file_with_links.txt\n```\n\nDownload a list of links (one link per line) commenting out (with `#`) those successfully downloaded:\n\n```sh\n$ plowdown -m file_with_links.txt\n```\n\n**Note**: Files are consecutively downloaded in the order read from input text file.\n\nDownload a file from Oron with Death by Captcha service:\n\n```sh\n$ plowdown --deathbycaptcha='user:pass' http://oron.com/dw726z0ohky5\n```\n\nDownload a file from Rapidshare with a proxy (cURL supports `http_proxy` and `https_proxy` environment variables, default port is `3128`):\n\n```sh\n$ export http_proxy=http://xxx.xxx.xxx.xxx:80\n$ plowdown http://www.rapidshare.com/files/86545320/Tux-Trainer.rar\n```\n\nDownload a file with limiting the download speed (in bytes per second):\n\n```sh\n$ plowdown --max-rate 900K http://www.rapidshare.com/files/86545320/Tux-Trainer.rar\n```\n\n**Note**: Accepted prefixes are: `k`, `K`, `Ki`, `M`, `m`, `Mi`.\n\nDownload a file from Rapidshare (like firefox: append `.part` suffix to filename while file is being downloaded):\n\n```sh\n$ plowdown --temp-rename http://www.rapidshare.com/files/86545320/Tux-Trainer.rar\n```\n\nDownload a password-protected file from Mediafire:\n\n```sh\n$ plowdown -p 'somepassword' http://www.mediafire.com/?mt0egmhietj60iy\n```\n\n**Note**: If you don't specify password and link requests it, you'll be prompted (stdin) for one.\n\nAvoid never-ending downloads: limit the number of tries (for captchas) and wait delays for each link:\n\n```sh\n$ plowdown --max-retries=4 --timeout=3600 my_big_list_file.txt\n```\n\nRetrieve final url (don't use *plowdown* for download):\n\n```sh\n$ plowdown -q --skip-final --printf %d http://oron.com/dw726z0ohky5 | xargs wget\n```\n\n**Note**: This will not work if final url (remote host) requires a cookie. For anonynous users,\ngenerated link has limited access in time and you can usually download file only once.\n\n### Plowup\n\nUpload a single file anonymously to BayFiles:\n\n```sh\n$ plowup bayfiles /tmp/foo.bar\n```\n\nUpload a bunch of files anonymously to 2Shared (doesn't recurse subdirectories):\n\n```sh\n$ plowup 2shared /path/myphotos/*\n```\n\n**Note**: `*` is a [wildcard character](http://en.wikipedia.org/wiki/Glob_%28programming%29) expanded by Bash interpreter.\n\nUpload a file to Rapidshare with an account (premium or free)\n\n```sh\n$ plowup -a 'myuser:mypassword' rapidshare /path/xxx\n```\n\nUpload a file to Mirrorcreator changing remote filename:\n\n```sh\n$ plowup mirrorcreator /path/myfile.txt:anothername.txt\n```\n\n**Note**: `:` is the separator character for local filename and remote filename.\n\nUpload a file to MegaShares (anonymously) and set description:\n\n```sh\n$ plowup -d \"Important document\" megashares /path/myfile.tex\n```\n\nUpload a file to Oron anonymously with a proxy:\n\n```sh\n$ export http_proxy=http://xxx.xxx.xxx.xxx:80\n$ export https_proxy=http://xxx.xxx.xxx.xxx:80\n$ plowup oron /path/myfile.txt\n```\n\nAbort slow upload (if rate is below limit during 30 seconds):\n\n```sh\n$ plowup --min-rate 100k mediafire /path/bigfile.zip\n```\n\nModify remote filenames (example: `foobar.rar` gives `foobar-PLOW.rar`):\n\n```sh\n$ plowup --name='%g-PLOW.%x' mirrorcreator *.rar\n```\n\n**Remark**: cURL is not capable of uploading files containing a comma `,` in their filename, but *plowup* will\ntemporarily create a symlink for you.\n\nUse cache over sessions to avoid multiple logins:\n\n```sh\n$ plowup --cache=shared -a 'user:pasword' 1fichier file1.zip\n$ plowup --cache=shared 1fichier file2.zip\n```\n\nOn first command line, login stage will be performed and session (token or cookie) will be saved in\n`~/.config/plowshare/storage/module-name.txt`.\nOn second command line, *plowup* will reuse the data stored to bypass login step. You don't have to specify credentials.\n\n**Note**: Only few hosters currently support cache mechanism. Have a look to\n[Plowshare legacy modules matrix](https://github.com/mcrapet/plowshare-modules-legacy) for more information.\n\nCustom results, print upload time, link and filename in HTML format:\n\n```sh\n$ plowup 1fichier -v0 --printf '<li>%T: <a href=\"%u\">%f</a>%n' 5MiB.bin 10MB.bin\n<li>11:12:42: <a href=\"https://1fichier.com/?52jwehc851\">5MiB.bin</a>\n<li>11:12:46: <a href=\"https://1fichier.com/?bn1jdvtpqi\">10MB.bin</a>\n```\n\n### Plowdel\n\nDelete a file from MegaShares (*delete link* required):\n\n```sh\n$ plowdel http://d01.megashares.com/?dl=6EUeDtS\n```\n\nDelete files (deletes are successive, not parallel):\n\n```sh\n$ plowdel http://d01.megashares.com/?dl=6EUeDtS http://depositfiles.com/rmv/1643181821669253\n```\n\nDelete a file from Rapidshare (account is required):\n\n```sh\n$ plowdel -a myuser:mypassword http://rapidshare.com/files/293672730/foo.rar\n```\n\n### Plowlist\n\nList links contained in a shared folder link and download them all:\n\n```sh\n$ plowlist http://www.mediafire.com/?qouncpzfe74s9 > links.txt\n$ plowdown -m links.txt\n```\n\nList two shared folders (first link is processed, then the second one, this is not parallel):\n\n```sh\n$ plowlist http://www.mediafire.com/?qouncpzfe74s9 http://www.sendspace.com/folder/5njdw7\n```\n\n**Remark**: Some hosters are handling tree folders, you must specify `-R`/`--recursive` command-line switch to *plowlist* for enabing recursive lisiting.\n\nList some Sendspace web folder. Render results for vBulletin *BB* syntax:\n\n```sh\n$ plowlist --printf '[url=%u]%f[/url]%n' http://www.sendspace.com/folder/5njdw7\n```\n\nList links contained in a dummy web page. Render results as HTML list:\n\n```sh\n$ plowlist --fallback --printf '<li><a href=\"%u\">%u</a></li>%n' \\\n      http://en.wikipedia.org/wiki/SI_prefix\n```\n\n### Plowprobe\n\nGather public information (filename, file size, file hash, ...) about a link.\nNo captcha solving is requested.\n\nFilter alive links in a text file:\n\n```sh\n$ plowprobe file_with_links.txt > file_with_active_links.txt\n```\n\nCustom results as shell format, print links information (filename and size):\n\n```sh\n$ plowprobe --printf '#%f (%s)%n%u%n'  http://myhoster.com/files/5njdw7\n#foo-bar.rar (134217728)\nhttp://myhoster.com/files/5njdw7\n```\n\nCustom results as [JSON](http://json.org/) format, print links information (filename and size):\n\n```sh\n$ plowprobe --printf '{\"url\":\"%U\",\"size\":%s}%n' http://myhoster.com/files/5njdw7\n{\"url\":\"http:\\/\\/myhoster.com\\/files\\/5njdw7\",\"size\":134217728}\n```\n\nCustom results: print *primary* url (if supported by hosters and implemented by module):\n\n```sh\n$ plowprobe --printf='%v%n' http://a5ts8yt25l.1fichier.com/\nhttps://1fichier.com/?a5ts8yt25l\n```\n\nUse `-` argument to read from stdin:\n\n```sh\n$ plowlist http://pastebin.com/1d82F5sd | plowprobe - > filtered_list.txt\n```\n\n## Configuration file\n\nPlowshare looks for `~/.config/plowshare/plowshare.conf` or `/etc/plowshare.conf` files.\nOptions given at command line can be stored in the file.\n\nExample:\n```ini\n###\n### Plowshare configuration file\n### Line syntax: token = value\n###\n\n[General]\ninterface = eth1\ncaptchabhood=cbhuser:cbhpass\n\nrapidshare/a = matt:4deadbeef\nmediafire/a = \"matt:4 dead beef \"\nfreakshare/b=plowshare:xxxxx\n\n[Plowdown]\ntimeout=3600\n#antigate=49b1b8740e4b51cf51838975de9e1c31\n\n[Plowup]\nmax-retries=2\nmirrorcreator/auth-free = foo:bar\nmirrorcreator/count = 5\n\n[Plowlist]\nverbose = 3\n\n#[Plowprobe]\n```\n\nNotes:\n- Blank lines are ignored, and whitespace before and after a token or value is ignored, although a value can contain whitespace within.\n- Lines which begin with a `#` are considered comments and ignored.\n- Double quoting value is optional.\n- Valid configuration token names are long-option command-line arguments of Plowshare. Tokens are always lowercase. For modules options, tokens are prepended by module name and a slash character. For example: `rapidshare/auth` is equivalent to `rapidshare/a` (short-option are also possible here). Another example: `freakshare/b` is equivalent to `freakshare/auth-free`.\n- Options in general section prevail over `PlowXXX` section. Options given on the command line prevail over configuration file options.\n\nYou can disable usage of Plowshare config file by providing `--no-plowsharerc` command-line switch. You can also specify a custom config file using `--plowsharerc` switch.\n\n## Use your own captcha solver\n\nIt is possible providing *plowdown* or *plowup* with `--captchaprogram` command-line switch followed by a path to a script or executable.\n\n### Script exit status\n\n- `0`: solving success. Captcha Word(s) must be echo'ed (on stdout).\n- `$ERR_NOMODULE`: external solver is not able to solve requested captcha. Let *plowdown* continue solving it normally (will consider `--captchamethod` if specified).\n- `$ERR_FATAL`: external solver failed.\n- `$ERR_CAPTCHA`: external solver failed. Note: this exit code is eligible with retry policy (`-r`/`--max-retries`).\n\n### Examples\n\nUnderstanding example:\n\n```sh\n#!/bin/bash\n# $1: module name\n# $2: path to image\n# $3: captcha type. For example: \"recaptcha\", \"solvemedia\", \"digit-4\".\n\ndeclare -r ERR_NOMODULE=2\ndeclare -r ERR_CAPTCHA=7\n\n# We only support uploadhero, otherwise tell Plowshare to solve on its own\nif [ \"$1\" != 'uploadhero' ]; then\n    exit $ERR_NOMODULE\nfi\n\n# You can print message to stderr\necho \"Module name: $1\" >&2\necho \"Image: $2\" >&2\n\n# Use stdout to send decoding result\necho \"5ed1\"\nexit 0\n```\n\nCaptcha emailing example:\n\n```sh\n#!/bin/bash\n#\n# Sends an email with image as attachment.\n# Requires heirloom-mailx and not bsd-mailx.\n#\n# Here is my ~/.mailrc:\n#\n# account gmail {\n# set from=\"My Name <xyz@gmail.com>\"\n# set smtp-use-starttls\n# ssl-verify=ignore\n# set smtp=smtp://smtp.gmail.com:587\n# set smtp-auth=login\n# set smtp-auth-user=xyz@gmail.com\n# set smtp-auth-password=\"xxx\"\n# }\n\ndeclare -r ERR_FATAL=1\ndeclare -r MAILTO='xyz@gmail.com'\n\n# Image file expected\nif [ ! -f \"$2\" ]; then\n    exit $ERR_FATAL\nfi\n\nBODY=\"Hi!\n\nHere is a captcha to solve; it comes from $1.\"\n\nmailx -A gmail -s 'Plowshare sends you an image!' \\\n    -a \"$2\" \"$MAILTO\" >/dev/null <<< \"$BODY\" || {\n        echo 'mailx fatal error, abort' >&2;\n        exit $ERR_FATAL;\n}\n\necho 'Please check your email account and enter captcha solution here:' >&2\nIFS= read -r\necho \"$REPLY\"\nexit 0\n```\n\nCaptcha FTP example:\n\n```sh\n#!/bin/bash\n#\n# Uploads the image to an FTP server in the LAN. If the server is not available\n# (i.e. my computer is not running) or no CAPTCHA solution is entered for\n# 15 minutes (i.e. I am occupied), let Plowshare try to handle the CAPTCHA.\n\ndeclare -r MODULE=$1\ndeclare -r FILE=$2\ndeclare -r HINT=$3\ndeclare -r DEST='192.168.1.3'\ndeclare -r ERR_NOMODULE=2\n\n# Prepend the used module to the image file name\ncurl --connect-timeout 30 -T \"$FILE\" --silent \"ftp://$DEST/${MODULE}__${FILE##*/}\" || \\\n    exit $ERR_NOMODULE\n\necho \"Captcha from module '$MODULE' with hint '$HINT'\" >&2\nread -r -t 900 -p 'Enter code: ' RESPONSE || exit $ERR_NOMODULE\necho \"$RESPONSE\"\n\nexit 0\n```\n\nDatabase using image hash as key:\n\n```sh\n#!/bin/sh\n#\n# Back to February 2009, Megaupload was using 4-character rotation captchas.\n# For example:\n# $ sqlite3 captchas.db\n# sqlite> CREATE TABLE mu (md5sum text unique not null, captcha text not null);\n# sqlite> INSERT INTO mu VALUES('fd3b2381269d702eccc509b8849e5b0d', 'RHD8');\n# sqlite> INSERT INTO mu VALUES('04761dbbe2a45ca6720755bc324dd19c', 'EFC8');\n# sqlite> .exit\n\nif [ \"$1\" = megaupload ]; then\n  DB=\"$HOME/captchas.db\"\n  MD5=$(md5sum -b \"$1\" | cut -c-32)\n  if VAL=$(sqlite3 \"$DB\" \"SELECT captcha FROM mu WHERE md5sum=\\\"$MD5\\\"\"); then\n    echo \"$VAL\"\n    exit 0\n  fi\nfi\nexit 2\n```\n\n## Plowdown advanced use\n\n### Hooks\n\nIt is possible to execute your own script before and after call to module download function.\nRelated command-line switches are `--run-before` and `--run-after`.\n\nPossible usage:\n- (before) Check (with *plowprobe*) if a file has already been downloaded (same filename, same file size/hash)\n- (before) Inject your own cookie\n- (after) Unrar archives\n- (after) Add `--skip-final` command-line switch and do your custom final link download\n\n\nExample 1: Skip all links coming from HotFile hoster\n\n```sh\n$ cat drophf.sh\n#!/bin/bash\n# $1: module name\n# $2: download URL\n# $3: cookie (empty) file given to download module function\n# You can print messages to stderr. stdout will be trashed\ndeclare -r ERR_NOMODULE=2\nif [ \"$1\" = 'hotfile' ]; then\n    echo \"===[Pre-processing script skipping $2]===\" >&2\n    exit $ERR_NOMODULE\nfi\nexit 0\n\n$ plowdown --run-before ./drophf.sh -m list_of_links.txt\n```\n\nExample 2: Use `wget` for final download (with possible required cookie file for last download)\n\n```sh\n$ cat finalwget.sh\n#!/bin/bash\n# $1: module name\n# $2: download URL\n# $3: cookie file fulfilled by download module function\n# $4: final download URL\n# $5: final filename (no path: --output-directory is ignored)\n# You can print messages to stderr. stdout will be trashed\necho \"===[Post-processing script for $1]===\" >&2\necho \"Temporary cookie file: $3\" >&2\nwget --no-verbose --load-cookies $3 -O $5 $4\n\n$ plowdown --skip-final --run-after ./finalwget.sh \\\n    http://www.mediafire.com/?k10t0egmhi23f\n```\n\nExample 3: Use multiple connections for final download (usually only for premium account users)\n\n```sh\n$ cat finalaria.sh\n#!/bin/bash\naria2c -x2 $4 >/dev/tty\n\n$ plowdown -a user:password --skip-final --run-after ./finalaria.sh \\\n    http://depositfiles.com/files/fv2u9xqya\n```\n\n## Miscellaneous\n\n### Additional cURL settings\n\nFor all network operations, Plowshare is relying on cURL. You can tweak some advanced settings if necessary.\n\nFor example (enforce IPv6):\n```sh\n$ echo 'ipv6' >>~/.curlrc\n```\n\nUse Plowshare with a SOCKS proxy:\n```sh\n$ ssh -f -N -D localhost:3128 user@my.proxy.machine.org\n$ echo 'socks5=localhost:3128' >>~/.curlrc\n```\n\n**Note**: As Plowshare is dealing with verbose, be sure (if present) to have these cURL's options commented:\n```\n#verbose\n#silent\n#show-error\n```\n\n### Known limitations\n\nFor historical reasons or design choices, there are several known limitations to Plowshare.\n\n1. You cannot enter through command-line several credentials for different hosts.\n   It's because the modules option `-a`, `--auth`, `-b` or `--auth-free` have the same switch name.\n   But you can do it with the configuration file.\n2. Same restriction for passwords (also a module option). Only one password can be defined with `-p`, `--link-password` switch name.\n\n### Implement your own modules\n\nPlowshare exports a set of API to help text and HTML processing.\nIt is designed to be as simple as possible to develop new modules.\nA module must be written in shell with portability in mind; one module matches one website.\n\n- [New module documentation](https://github.com/mcrapet/plowshare/wiki/Modules)\n- [API list](https://github.com/mcrapet/plowshare/wiki/API)\n\nA common approach is to read existing modules source code.\n\n## License\n\nPlowshare is made available publicly under the GNU GPLv3 License.\nFull license text is available in COPYING file."
}
