{
  "name": "aichat",
  "full_name": "aichat",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "ChatGPT cli",
  "license": "Apache-2.0 or MIT",
  "homepage": "https://github.com/sigoden/aichat",
  "versions": {
    "stable": "0.8.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/sigoden/aichat/archive/v0.8.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "9073d96afdab56ff51f392cffa8d04fd70d47602236bd10e58248de5594bfd2a"
    },
    "head": {
      "url": "https://github.com/sigoden/aichat.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/aichat/blobs/sha256:586f6e8b98e82c9684e6e40faaef2e76650ff1f8d28cbcf73c5eec2d7e32ce52",
          "sha256": "586f6e8b98e82c9684e6e40faaef2e76650ff1f8d28cbcf73c5eec2d7e32ce52"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/aichat/blobs/sha256:b2e1d6a11c8e3a68434a7b201d75864ae2bb52e66818bebae8e300680b89d004",
          "sha256": "b2e1d6a11c8e3a68434a7b201d75864ae2bb52e66818bebae8e300680b89d004"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/aichat/blobs/sha256:ce4f5e090a145e3e8668eff23ef5c3e96490992cafa3584689d300f32b8a4ca1",
          "sha256": "ce4f5e090a145e3e8668eff23ef5c3e96490992cafa3584689d300f32b8a4ca1"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/aichat/blobs/sha256:b39b884380eb96d46df3a1b8449d4c13aee99597c723c0b72bb3d05b5451ee53",
          "sha256": "b39b884380eb96d46df3a1b8449d4c13aee99597c723c0b72bb3d05b5451ee53"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/aichat/blobs/sha256:851b3fd79ae8365d7ee5bb75230b9ede1d39f12993413e92bd1d846cc2062847",
          "sha256": "851b3fd79ae8365d7ee5bb75230b9ede1d39f12993413e92bd1d846cc2062847"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/aichat/blobs/sha256:376447e0fc60cbf980224b66030a4fcd7454e47bebf96044cc0bc3ff7ea6d96b",
          "sha256": "376447e0fc60cbf980224b66030a4fcd7454e47bebf96044cc0bc3ff7ea6d96b"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/aichat/blobs/sha256:6ed48064b265ff9b7b847135d6fc8532b4c9fadd51b18c632aa92042c58b78d6",
          "sha256": "6ed48064b265ff9b7b847135d6fc8532b4c9fadd51b18c632aa92042c58b78d6"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "2706c66e8def3eeba4d9bf1adf66221c8ad70701",
  "ruby_source_path": "Formula/aichat.rb",
  "ruby_source_checksum": {
    "sha256": "060271edfbf8658c891fae3b4fc21bfc29f6561288da72fc27f810b01fc6a649"
  },
  "date_added": "2023-03-21T23:41:23+00:00",
  "readme": "# AIChat\n\n[![CI](https://github.com/sigoden/aichat/actions/workflows/ci.yaml/badge.svg)](https://github.com/sigoden/aichat/actions/workflows/ci.yaml)\n[![Crates](https://img.shields.io/crates/v/aichat.svg)](https://crates.io/crates/aichat)\n\nUse ChatGPT/GPT-3.5/GPT-4 in the terminal.\n\nAIChat in chat mode:\n\n![chat mode](https://user-images.githubusercontent.com/4012553/226499667-4c6b261a-d897-41c7-956b-979b69da5982.gif)\n\nAIChat in command mode:\n\n![command mode](https://user-images.githubusercontent.com/4012553/226499595-0b536c82-b039-4571-a077-0c40ad57f7db.png)\n\n## Install\n\n### With cargo\n\n```\ncargo install --force aichat\n```\n\n### Binaries for macOS, Linux, Windows\n\nDownload it from [GitHub Releases](https://github.com/sigoden/aichat/releases), unzip and add aichat to your $PATH.\n\n## Features\n\n- Support chat and command modes\n- Predefine AI [roles](#roles)\n- Use GPT prompt easily\n- Powerful [Chat REPL](#chat-repl)\n- Context-aware conversation\n- Syntax highlighting markdown and 200 other languages\n- Stream output with hand-typing effect\n- Support multiple models\n- Support proxy connection\n- Dark/light theme\n- Save chat messages\n\n## Config\n\nOn first launch, aichat will guide you through the configuration.\n\n```\n> No config file, create a new one? Yes\n> OpenAI API Key: sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n> Use proxy? Yes\n> Set proxy: socks5://127.0.0.1:1080\n> Save chat messages Yes\n```\n\nOn completion, it will automatically create the configuration file. Of course, you can also manually set the configuration file.\n\n```yaml\napi_key: \"<YOUR SECRET API KEY>\" # Request via https://platform.openai.com/account/api-keys\norganization_id: \"org-xxx\" # optional, set organization id\nmodel: \"gpt-3.5-turbo\" # optional, choose a model\ntemperature: 1.0 # optional, see https://platform.openai.com/docs/api-reference/chat/create#chat/create-temperature\nsave: true # optional, If set true, aichat will save chat messages to message.md\nhighlight: true # optional, Set false to turn highlight\nproxy: \"socks5://127.0.0.1:1080\" # optional, set proxy server. e.g. http://127.0.0.1:8080 or socks5://127.0.0.1:1080\nconversation_first: false # optional, If set true, start a conversation immediately upon repl\nlight_theme: false # optional, If set true, use light theme\nconnect_timeout: 10 # optional, Set a timeout in seconds for connect to gpt.\n```\n\n> You can use `.info` to view the current configuration file path and roles file path.\n\n> You can use [Environment Variables](https://github.com/sigoden/aichat/wiki/Environment-Variables) to customize certain configuration items.\n\n### Roles\n\nWe can let ChatGPT play a certain role through `prompt` to have it better generate what we want.\n\nWe can predefine a batch of roles in `roles.yaml`.\n\n> We can get the location of `roles.yaml` through the repl's `.info` command or cli's `--info` option.\n\nFor example, we can define a role:\n\n```yaml\n- name: shell\n  prompt: >\n    I want you to act as a Linux shell expert.\n    I want you to answer only with bash code.\n    Do not provide explanations.\n```\n\nLet ChatGPT answer questions in the role of a Linux shell expert.\n\n```\n〉.role shell\n\nshell〉 extract encrypted zipfile app.zip to /tmp/app\nmkdir /tmp/app\nunzip -P PASSWORD app.zip -d /tmp/app\n```\n\nWe have provided many awesome [Role Examples](https://github.com/sigoden/aichat/wiki/Role-Examples).\n\n## Chat REPL\n\naichat has a powerful Chat REPL.\n\nThe Chat REPL supports:\n\n- Emacs keybinding\n- Command autocompletion\n- History search\n- Fish-style history autosuggestion hints\n- Edit/past multiline input\n- Undo support\n\n### Multi-line editing\n\n**Type `{` or `(` at the beginning of the line to enter the multi-line editing mode.** In this mode you can type or paste multiple lines of text. Type the corresponding `}` or `)` at the end of the line to exit the mode and submit the content.\n\n```\n〉{ convert json below to toml\n{\n  \"an\": [\n    \"arbitrarily\",\n    \"nested\"\n  ],\n  \"data\": \"structure\"\n}}\n```\n\n### `.help` - Print help message\n\n```\n〉.help\n.info                    Print the information\n.set                     Modify the configuration temporarily\n.model                   Choose a model\n.prompt                  Add a GPT prompt\n.role                    Select a role\n.clear role              Clear the currently selected role\n.conversation            Start a conversation.\n.clear conversation      End current conversation.\n.history                 Print the history\n.clear history           Clear the history\n.help                    Print this help message\n.exit                    Exit the REPL\n\nType `{` to enter the multi-line editing mode, type '}' to exit the mode.\nPress Ctrl+C to abort readline, Ctrl+D to exit the REPL\n```\n\n### `.info` - View current configuration information\n\n```\n〉.info\nconfig_file         /home/alice/.config/aichat/config.yaml\nroles_file          /home/alice/.config/aichat/roles.yaml\nmessages_file       /home/alice/.config/aichat/messages.md\napi_key             sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\norganization_id     -\nmodel               gpt-3.5-turbo\ntemperature         -\nsave                true\nhighlight           true\nproxy               -\nconversation_first  false\nlight_theme         false\nconnect_timeout     10\ndry_run             false\n```\n\n### `.set` - Modify the configuration temporarily\n\n```\n〉.set dry_run true\n〉.set highlight false\n〉.set save false\n〉.set temperature 1.2\n```\n\n### `.model` - Choose a model\n\n```\n> .model gpt-4\n> .model gpt-4-32k\n> .model gpt-3.5-turbo\n> .model gpt-3.5-turbo-16k\n```\n\n### `.prompt` - Set GPT prompt\n\nWhen you set up a prompt, every message sent later will carry the prompt.\n\n```\n〉{ .prompt\nI want you to translate the sentences I write into emojis.\nI will write the sentence, and you will express it with emojis.\nI just want you to express it with emojis.\nI want you to reply only with emojis.\n}\nDone\n\nＰ〉You are a genius\n👉🧠💡👨‍🎓\n\nＰ〉I'm embarrassed\n🙈😳\n```\n\n`.prompt` actually creates a temporary role internally, so **run `.clear role` to clear the prompt**.\n\nWhen you are satisfied with the prompt, add it to `roles.yaml` for later use.\n\n### `.role` - Let the AI play a role\n\nSelect a role:\n\n```\n〉.role emoji\nname: emoji\nprompt: I want you to translate the sentences I write into emojis. I will write the sentence, and you will express it with emojis. I just want you to express it with emojis. I don't want you to reply with anything but emoji. When I need to tell you something in English, I will do it by wrapping it in curly brackets like {like this}.\ntemperature: null\n```\n\nAI takes the role we specified:\n\n```\nemoji〉hello\n👋\n```\n\nClear current selected role:\n\n```\nemoji〉.clear role\n\n〉hello\nHello there! How can I assist you today?\n```\n\n### `.conversation` - start a context-aware conversation\n\nBy default, aichat behaves in a one-off request/response manner.\n\nYou can run `.conversation` to enter context-aware mode, or set `config.conversation_first` true to start a conversation immediately upon repl.\n\n```\n〉.conversation\n\n＄list 1 to 5, one per line                                                              4089\n1\n2\n3\n4\n5\n\n＄reverse the list                                                                       4065\n5\n4\n3\n2\n1\n\n```\n\nWhen entering conversation mode, prompt `〉` will change to `＄`. A number will appear on the right,\nindicating how many tokens are left to use.\nOnce the number becomes zero, you need to start a new conversation.\n\nExit conversation mode:\n\n```\n＄.clear conversation                                                                    4043\n\n〉\n```\n\n## License\n\nCopyright (c) 2023 aichat-developers.\n\naichat is made available under the terms of either the MIT License or the Apache License 2.0, at your option.\n\nSee the LICENSE-APACHE and LICENSE-MIT files for license details."
}
