{
  "name": "swift-sh",
  "full_name": "swift-sh",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Scripting with easy zero-conf dependency imports",
  "license": "Unlicense",
  "homepage": "https://github.com/mxcl/swift-sh",
  "versions": {
    "stable": "2.4.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/mxcl/swift-sh/archive/2.4.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "5255e497d985fbbe2df44ed69ed1552b43fb58c175bd2dd254b52e5cf888d629"
    },
    "head": {
      "url": "https://github.com/mxcl/swift-sh.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/swift-sh/blobs/sha256:7544737098ecda67ac57df17568121bb3875c1773a0e276c49298c33475f9866",
          "sha256": "7544737098ecda67ac57df17568121bb3875c1773a0e276c49298c33475f9866"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/swift-sh/blobs/sha256:c18ed52ff47b163562ceaec064b64bdaa474fc7b96679f972aa6a5859da3d912",
          "sha256": "c18ed52ff47b163562ceaec064b64bdaa474fc7b96679f972aa6a5859da3d912"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/swift-sh/blobs/sha256:d67e477cf1645b1eec138b94e5e4ff40e477421fecabe7a3f9959e14ed7bbae2",
          "sha256": "d67e477cf1645b1eec138b94e5e4ff40e477421fecabe7a3f9959e14ed7bbae2"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/swift-sh/blobs/sha256:c5d18cbd7bca379a34b918ade17f576c3321b31cbc7ab19b36af1f874b2fcbf0",
          "sha256": "c5d18cbd7bca379a34b918ade17f576c3321b31cbc7ab19b36af1f874b2fcbf0"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/swift-sh/blobs/sha256:0cab36a85f37f26946b2c6dc4ef1672c6aa892fdcf8fd69eb64a35a1d283be10",
          "sha256": "0cab36a85f37f26946b2c6dc4ef1672c6aa892fdcf8fd69eb64a35a1d283be10"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/swift-sh/blobs/sha256:ed4fc395a22c3ad54255cb55756de1a2e95605d7cc09515f79a892f56ca99852",
          "sha256": "ed4fc395a22c3ad54255cb55756de1a2e95605d7cc09515f79a892f56ca99852"
        },
        "x86_64_linux": {
          "cellar": "/home/linuxbrew/.linuxbrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/swift-sh/blobs/sha256:1bb33c15a6225672861ef3e3ab515634dbdad7342dce3cd0594e7f9a84c38a9d",
          "sha256": "1bb33c15a6225672861ef3e3ab515634dbdad7342dce3cd0594e7f9a84c38a9d"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "swift"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [
    {
      "name": "xcode",
      "cask": null,
      "download": null,
      "version": "11.0",
      "contexts": [
        "build"
      ],
      "specs": [
        "stable",
        "head"
      ]
    }
  ],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/swift-sh.rb",
  "ruby_source_checksum": {
    "sha256": "dfe17b425d81b18c226ae41c84c228089aeefe16e526e6172c1d58f4e87e1fd9"
  },
  "date_added": "2020-03-02T13:44:15+00:00",
  "readme": "# `swift sh` ![badge-platforms] ![badge-languages] [![Build Status](https://travis-ci.com/mxcl/swift-sh.svg)](https://travis-ci.com/mxcl/swift-sh)\n\nWriting Swift scripts is *easy*:\n\n```sh\n$ cat <<EOF > script\n#!/usr/bin/swift\nprint(\"Hi!\")\nEOF\n$ chmod u+x script\n$ ./script\nHi!\n```\n\nSadly, to use third-party dependencies we have to migrate our script to a swift\npackage and use `swift build`, a relatively heavy solution when all we wanted\nwas to whip up a quick script. `swift-sh` gives us the best of both worlds:\n\n```sh\n$ cat <<EOF > script\n#!/usr/bin/swift sh\nimport PromiseKit  // @mxcl ~> 6.5\nprint(Promise.value(\"Hi!\"))\nEOF\n$ chmod u+x script\n$ ./script\nPromise(\"Hi!\")\n```\n\nIn case it’s not clear, `swift-sh` reads the comment after the `import` and\nuses this information to fetch your dependencies.\n\n---\n\nLet’s work through an example: if you had a *single file* called `foo.swift`\nand you wanted to import [mxcl/PromiseKit](https://github.com/mxcl/PromiseKit):\n\n```swift\n#!/usr/bin/swift sh\n\nimport Foundation\nimport PromiseKit  // @mxcl ~> 6.5\n\nfirstly {\n    after(.seconds(2))\n}.then {\n    after(.milliseconds(500))\n}.done {\n    print(\"notice: two and a half seconds elapsed\")\n    exit(0)\n}\n\nRunLoop.main.run()\n```\n\nYou could run it with:\n\n```\n$ swift sh foo.swift\n```\n\nOr to make it more “scripty”, first make it executable:\n\n```\n$ chmod u+x foo.swift\n$ mv foo.swift foo    # optional step!\n```\n\nAnd then run it directly:\n\n```\n$ ./foo\n```\n\n# Sponsorship\n\nIf your company depends on `swift-sh` please consider sponsoring the project.\nOtherwise it is hard for me to justify maintaining it.\n\n# Installation\n\n```\nbrew install swift-sh\n```\n\nOr you can build manually using `swift build`.\n\nInstallation results in a single executable called `swift-sh`, the `swift`\nexecutable will call this (provided it is in your `PATH`) when you type:\n`swift sh`.\n\nWe actively support both Linux and Mac and will support Windows as soon as it is\npossible to do so.\n\n# Usage\n\nAdd the *shebang* as the first line in your script: `#!/usr/bin/swift sh`.\n\nYour dependencies are determined via your `import` lines:\n\n```swift\n#!/usr/bin/swift sh\nimport AppUpdater    // @mxcl\n// ^^ https://github.com/mxcl/AppUpdater, latest version\n\nimport PromiseKit    // @mxcl ~> 6.5\n// ^^ mxcl/PromiseKit, version 6.5.0 or higher up to but not including 7.0.0 or higher\n\nimport Chalk         // @mxcl == 0.3.1\n// ^^ mxcl/Chalk, only version 0.3.1\n\nimport LegibleError  // @mxcl == b4de8c12\n// ^^ mxcl/LegibleError, the precise commit `b4de8c12`\n\nimport Path          // mxcl/Path.swift ~> 0.16\n// ^^ for when the module-name and repo-name are not identical\n\nimport BumbleButt    // https://example.com/bb.git ~> 9\n// ^^ non-GitHub URLs are fine\n\nimport CommonTaDa    // git@github.com:mxcl/tada.git ~> 1\n// ^^ ssh URLs are fine\n\nimport TaDa          // ssh://git@github.com:mxcl/tada.git ~> 1\n// ^^ this style of ssh URL is also fine\n\nimport Foo  // ./my/project\nimport Bar  // ../my/other/project\nimport Baz  // ~/my/other/other/project\nimport Fuz  // /I/have/many/projects\n// ^^ local dependencies must expose library products in their `Package.swift`\n// careful: `foo/bar` will be treated as a GitHub dependency; prefix with `./`\n// local dependencies do *not* need to be versioned\n\n\nimport Floibles  // @mxcl ~> 1.0.0-alpha.1\nimport Bloibles  // @mxcl == 1.0.0-alpha.1\n// ^^ alphas/betas will only be fetched if you specify them explicitly like so\n// this is per Semantic Versioning guidelines\n```\n\n`swift-sh` reads the comments after your imports and fetches the requested\nSwiftPM dependencies.\n\nIt is not necessary to add a comment specification for transitive dependencies.\n\n# Editing in Xcode\n\nThe following will generate an Xcode project (not in the working directory, we\nkeep it out the way in our cache directory) and open it, edits are saved to your\nscript file.\n\n```\n$ swift sh edit ./myScript\n```\n\n# Examples\n\n* [Tweet deleter](https://gist.github.com/mxcl/002c3514d50b73287c89268c45662394)\n* [PostgreSQL Check](https://gist.github.com/joscdk/c4b89add26509c6dfabf84974e62543d)\n\n# Converting your script to a package\n\nSimple scripts can quickly become bigger projects that would benefit from being\npackages that you build with SwiftPM. To help you migrate your project we\nprovide `swift sh eject`, for example:\n\n    $ swift sh eject foo.swift\n\ncreates a Swift package in `./Foo`, from now on use `swift build` in the\n`Foo` directory. Your script is now `./Foo/Sources/main.swift`.\n\n# Use in CI\n\nIf you want to make scripts available to people using CI; use `stdin`:\n\n    brew install mxcl/made/swift-sh\n    swift sh <(curl http://example.com/yourscript) arg1 arg2\n\n# Internal Details\n\n`swift sh` creates a Swift `Package.swift` package manager project with \ndependencies in a directory below the swift-sh cache directory †, \nbuilds the executable, and then executes it via `swift run`.  \nThe script is (only) rebuilt when the script file is newer than the executable.\n\n† Specify the cache parent directory using the (FreeDesktop) environment \nvariable XDG_CACHE_HOME.  If unspecified, on macOS `swif-sh` uses\n`$HOME/Library/Developer/swift-sh.cache`, and otherwise it uses\n`$HOME/.cache/swift-sh`.\n\n# Swift Versions\n\n`swfit-sh` v2 requires Swift 5.1. We had to drop support for Swift v4.2\nbecause maintenance was just too tricky.\n\n`swift-sh` uses the active tools version, (ie: `xcode-select`) or whichever\nSwift is first in the `PATH` on Linux. It writes a manifest for the package\nit will `swift build` with that tools-version. Thus Xcode 11.0 builds with Swift 5.1.\nDependencies build with the Swift versions they declare support for, provided\nthe active toolchain can do that (eg. Xcode 11.0 supports Swift 4.2 and above)\n\nTo declare a support for specific Swift versions in your script itself, use\n`#if swift` or `#if compiler` directives.\n\n# Alternatives\n\n* [Beak](https://github.com/yonaskolb/Beak)\n* [Marathon](https://github.com/JohnSundell/Marathon)\n\n---\n\n# Troubleshooting\n\n### `error: unable to invoke subcommand: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift-sh`\n\nIf you got here via Google, you have a script that uses this tool, if you now\ninstall `swift-sh`, you will be able to run your script:\n\n    brew install mxcl/made/swift-sh\n\nOr see the [above installation instructions](#Installation).\n\n[badge-platforms]: https://img.shields.io/badge/platforms-macOS%20%7C%20Linux-lightgrey.svg\n[badge-languages]: https://img.shields.io/badge/swift-5.1%20%7C%205.2%20%7C%205.3%20%7C%205.4%20%7C%205.5%20%7C%205.6%20%7C%205.7-orange.svg"
}
