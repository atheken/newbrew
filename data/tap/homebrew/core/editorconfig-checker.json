{
  "name": "editorconfig-checker",
  "full_name": "editorconfig-checker",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Tool to verify that your files are in harmony with your .editorconfig",
  "license": "MIT",
  "homepage": "https://github.com/editorconfig-checker/editorconfig-checker",
  "versions": {
    "stable": "2.7.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/editorconfig-checker/editorconfig-checker/archive/refs/tags/2.7.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "6f7f842e04117c0124638973e0f0f49d669daa6e6dcec7e0ecf86109b2c51e99"
    },
    "head": {
      "url": "https://github.com/editorconfig-checker/editorconfig-checker.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/editorconfig-checker/blobs/sha256:8c3ff8bba72c42bc77d381d3273b2219f4bb060f14c826bad8e2a6c054e1ceae",
          "sha256": "8c3ff8bba72c42bc77d381d3273b2219f4bb060f14c826bad8e2a6c054e1ceae"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/editorconfig-checker/blobs/sha256:8c3ff8bba72c42bc77d381d3273b2219f4bb060f14c826bad8e2a6c054e1ceae",
          "sha256": "8c3ff8bba72c42bc77d381d3273b2219f4bb060f14c826bad8e2a6c054e1ceae"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/editorconfig-checker/blobs/sha256:8c3ff8bba72c42bc77d381d3273b2219f4bb060f14c826bad8e2a6c054e1ceae",
          "sha256": "8c3ff8bba72c42bc77d381d3273b2219f4bb060f14c826bad8e2a6c054e1ceae"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/editorconfig-checker/blobs/sha256:34872cd61b879386460265318386355db50e30002cd2c3ab81c632485cf25bd9",
          "sha256": "34872cd61b879386460265318386355db50e30002cd2c3ab81c632485cf25bd9"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/editorconfig-checker/blobs/sha256:34872cd61b879386460265318386355db50e30002cd2c3ab81c632485cf25bd9",
          "sha256": "34872cd61b879386460265318386355db50e30002cd2c3ab81c632485cf25bd9"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/editorconfig-checker/blobs/sha256:34872cd61b879386460265318386355db50e30002cd2c3ab81c632485cf25bd9",
          "sha256": "34872cd61b879386460265318386355db50e30002cd2c3ab81c632485cf25bd9"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/editorconfig-checker/blobs/sha256:bcdae0ba7faf0330f8f46663b72e15aedcacaa4bfaac97252e574c1909c9109a",
          "sha256": "bcdae0ba7faf0330f8f46663b72e15aedcacaa4bfaac97252e574c1909c9109a"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/editorconfig-checker.rb",
  "ruby_source_checksum": {
    "sha256": "143da8129f1dec1e63f409e10ea2a9b3479bbcea7687c5a150587e24c98706ed"
  },
  "date_added": "2022-07-04T13:39:57+00:00",
  "readme": "# editorconfig-checker\n\n<a href=\"https://www.buymeacoffee.com/mstruebing\" target=\"_blank\"><img src=\"https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png\" alt=\"Buy Me A Coffee\" style=\"height: 41px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;\" ></a>\n\n[![ci](https://github.com/editorconfig-checker/editorconfig-checker/actions/workflows/ci.yml/badge.svg)](https://github.com/editorconfig-checker/editorconfig-checker/actions/workflows/ci.yml)\n[![codecov](https://codecov.io/gh/editorconfig-checker/editorconfig-checker/branch/main/graph/badge.svg)](https://codecov.io/gh/editorconfig-checker/editorconfig-checker)\n[![Hits-of-Code](https://hitsofcode.com/github/editorconfig-checker/editorconfig-checker)](https://hitsofcode.com/view/github/editorconfig-checker/editorconfig-checker)\n[![Go Report Card](https://goreportcard.com/badge/github.com/editorconfig-checker/editorconfig-checker)](https://goreportcard.com/report/github.com/editorconfig-checker/editorconfig-checker)\n\n![Logo](docs/logo.png)\n\n1. [What?](#what)\n2. [Quickstart](#quickstart)\n3. [Installation](#installation)\n4. [Usage](#usage)\n5. [Configuration](#configuration)\n6. [Excluding](#excluding)\n   1. [Excluding Lines](#excluding-lines)\n   2. [Excluding Blocks](#excluding-blocks)\n   3. [Excluding Files](#excluding-files)\n      1. [Inline](#inline)\n      2. [Default Excludes](#default-excludes)\n      3. [Manually Excluding](#manually-excluding)\n         1. [via configuration](#via-configuration)\n         2. [via arguments](#via-arguments)\n         3. [Generally](#generally)\n7. [Docker](#docker)\n8. [Continuous Integration](#continuous-integration)\n9. [Support](#support)\n\n## What?\n\n![Example Screenshot](docs/screenshot.png)\n\nThis is a tool to check if your files consider your `.editorconfig` rules.\nMost tools—like linters, for example—only test one filetype and need an extra configuration.\nThis tool only needs your `.editorconfig` to check all files.\n\nIf you don't know about editorconfig already you can read about it here: [editorconfig.org](https://editorconfig.org/).\n\nCurrently implemented editorconfig features are:\n\n- `end_of_line`\n- `insert_final_newline`\n- `trim_trailing_whitespace`\n- `indent_style`\n- `indent_size`\n- `max_line_length`\n\nUnsupported features are:\n\n- `charset`\n\n## Quickstart\n\n```shell\nVERSION=\"2.7.0\"\nOS=\"linux\"\nARCH=\"amd64\"\ncurl -O -L -C - https://github.com/editorconfig-checker/editorconfig-checker/releases/download/$VERSION/ec-$OS-$ARCH.tar.gz && \\\ntar xzf ec-$OS-$ARCH.tar.gz && \\\n./bin/ec-$OS-$ARCH\n```\n\n## Installation\n\nGrab a binary from the [release page](https://github.com/editorconfig-checker/editorconfig-checker/releases).\n\nIf you have go installed you can run `go get github.com/editorconfig-checker/editorconfig-checker` and run `make build` inside the project folder.\nThis will place a binary called `ec` into the `bin` directory.\n\nIf you are using Arch Linux, you can use [pacman](https://wiki.archlinux.org/title/Pacman) to install from [extra repository](https://archlinux.org/packages/extra/x86_64/editorconfig-checker/):\n\n```shell\npacman -S editorconfig-checker\n```\n\nAlso, development (VCS) package is available in the [AUR](https://aur.archlinux.org/packages/editorconfig-checker-git):\n\n```shell\n# <favourite-aur-helper> <install-command> editorconfig-checker-git\n\n# i.e.\nparu -S editorconfig-checker-git\n```\n\nIf go 1.16 or greater is installed, you can also install it globally via `go install`:\n\n```shell\ngo install github.com/editorconfig-checker/editorconfig-checker/cmd/editorconfig-checker@latest\n```\n\n## Usage\n\n```\nUSAGE:\n  -config string\n        config\n  -debug\n        print debugging information\n  -disable-end-of-line\n        disables the trailing whitespace check\n  -disable-indent-size\n        disables only the indent-size check\n  -disable-indentation\n        disables the indentation check\n  -disable-insert-final-newline\n        disables the final newline check\n  -disable-trim-trailing-whitespace\n        disables the trailing whitespace check\n  -dry-run\n        show which files would be checked\n  -exclude string\n        a regex which files should be excluded from checking - needs to be a valid regular expression\n  -h    print the help\n  -help\n        print the help\n  -ignore-defaults\n        ignore default excludes\n  -init\n        creates an initial configuration\n  -no-color\n        dont print colors\n  -v    print debugging information\n  -verbose\n        print debugging information\n  -version\n        print the version number\n```\n\nIf you run this tool from a repository root it will check all files which are added to the git repository and are text files. If the tool isn't able to determine a file type it will be added to be checked too.\n\nIf you run this tool from a normal directory it will check all files which are text files. If the tool isn't able to determine a file type it will be added to be checked too.\n\n## Configuration\n\nThe configuration is done via arguments or an `.ecrc` file.\n\nA sample `.ecrc` file can look like this and will be used from your current working directory if not specified via the `--config` argument:\n\n```json\n{\n  \"Verbose\": false,\n  \"Debug\": false,\n  \"IgnoreDefaults\": false,\n  \"SpacesAftertabs\": false,\n  \"NoColor\": false,\n  \"Exclude\": [],\n  \"AllowedContentTypes\": [],\n  \"PassedFiles\": [],\n  \"Disable\": {\n    \"EndOfLine\": false,\n    \"Indentation\": false,\n    \"IndentSize\": false,\n    \"InsertFinalNewline\": false,\n    \"TrimTrailingWhitespace\": false,\n    \"MaxLineLength\": false\n  }\n}\n```\n\nYou can set any of the options under the `\"Disable\"` section to `true` to disable those particular checks.\n\nYou could also specify command line arguments and they will get merged with the configuration file, the command line arguments have a higher precedence than the configuration.\n\nYou can create a configuration with the `init`-flag. If you specify an `config`-path it will be created there.\n\nBy default the allowed_content_types are:\n\n1. `text/` (matches `text/plain`, `text/html`, etc.)\n1. `application/ecmascript`\n1. `application/json`\n1. `application/x-ndjson`\n1. `application/xml`\n1. `+json` (matches `application/geo+json`, etc.)\n1. `+xml` (matches `application/rss+xml`, etc.)\n1. `application/octet-stream`\n\n`application/octet-stream` is needed as a fallback when no content type could be determined. You can add additional accepted content types with the `allowed_content_types` key. But the default ones don't get removed.\n\n## Excluding\n\n### Excluding Lines\n\nYou can exclude single lines inline. To do that you need a comment on that line that says: `editorconfig-checker-disable-line`.\n\n```javascript\nconst myTemplateString = `\n  first line\n     wrongly indended line because it needs to be` // editorconfig-checker-disable-line\n```\n\n### Excluding Blocks\n\nTo temporarily disable all checks, add a comment containing `editorconfig-checker-disable`. Re-enable with a comment containing `editorconfig-checker-enable`\n\n```javascript\n// editorconfig-checker-disable\nconst myTemplateString = `\n  first line\n     wrongly indended line because it needs to be\n`\n// editorconfig-checker-enable\n```\n\n### Excluding Files\n\n#### Inline\n\nIf you want to exclude a file inline you need a comment on the first line of the file that contains: `editorconfig-checker-disable-file`\n\n```haskell\n-- editorconfig-checker-disable-file\nadd :: Int -> Int -> Int\nadd x y =\n  let result = x + y -- falsy indentation would not report\n  in result -- falsy indentation would not report\n```\n\n#### Default Excludes\n\nIf you don't pass the `ignore-defaults` flag to the binary these files are excluded automatically:\n\n```\n\"^\\\\.yarn/\",\n\"^yarn\\\\.lock$\",\n\"^package-lock\\\\.json$\",\n\"^composer\\\\.lock$\",\n\"^Cargo\\\\.lock$\",\n\"^\\\\.pnp\\\\.cjs$\",\n\"^\\\\.pnp\\\\.js$\",\n\"^\\\\.pnp\\\\.loader\\\\.mjs$\",\n\"\\\\.snap$\",\n\"\\\\.otf$\",\n\"\\\\.woff$\",\n\"\\\\.woff2$\",\n\"\\\\.eot$\",\n\"\\\\.ttf$\",\n\"\\\\.gif$\",\n\"\\\\.png$\",\n\"\\\\.jpg$\",\n\"\\\\.jpeg$\",\n\"\\\\.webp$\",\n\"\\\\.avif\",\n\"\\\\.mp4$\",\n\"\\\\.wmv$\",\n\"\\\\.svg$\",\n\"\\\\.ico$\",\n\"\\\\.bak$\",\n\"\\\\.bin$\",\n\"\\\\.pdf$\",\n\"\\\\.zip$\",\n\"\\\\.gz$\",\n\"\\\\.tar$\",\n\"\\\\.7z$\",\n\"\\\\.bz2$\",\n\"\\\\.log$\",\n\"\\\\.patch$\",\n\"\\\\.css\\\\.map$\",\n\"\\\\.js\\\\.map$\",\n\"min\\\\.css$\",\n\"min\\\\.js$\"\n```\n\n#### Manually Excluding\n\n##### via configuration\n\nIn your `.ecrc` file you can exclude files with the `\"exclude\"` key which takes an array of regular expressions.\nThis will get merged with the default excludes (if not ignored). You should remember to escape your regular expressions correctly. ;)\n\nAn `.ecrc` which would ignore all test files and all markdown files can look like this:\n\n```json\n{\n  \"Verbose\": false,\n  \"IgnoreDefaults\": false,\n  \"Exclude\": [\"testfiles\", \"\\\\.md$\"],\n  \"SpacesAfterTabs\": false,\n  \"Disable\": {\n    \"EndOfLine\": false,\n    \"Indentation\": false,\n    \"IndentSize\": false,\n    \"InsertFinalNewline\": false,\n    \"TrimTrailingWhitespace\": false,\n    \"MaxLineLength\": false\n  }\n}\n```\n\n##### via arguments\n\nIf you want to play around how the tool would behave you can also pass the `--exclude` argument to the binary. This will accept a regular expression as well. If you use this argument the default excludes as well as the excludes from the `.ecrc` file will merged together.\n\nFor example: `ec --exclude node_modules`\n\n##### Generally\n\nEvery exclude option is merged together.\n\nIf you want to see which files the tool would check without checking them you can pass the `--dry-run` flag.\n\nNote that while `--dry-run` outputs absolute paths, a regular expression matches on relative paths from where the `ec` command is used.\n\n## Docker\n\nYou are able to run this tool inside a Docker container.\nTo do this you need to have Docker installed and run this command in your repository root which you want to check:\n`docker run --rm --volume=$PWD:/check mstruebing/editorconfig-checker`\n\nDockerhub: [mstruebing/editorconfig-checker](https://hub.docker.com/r/mstruebing/editorconfig-checker)\n\n## Continuous Integration\n\n### Mega-Linter\n\nInstead of installing and configuring `editorconfig-checker` and all other linters in your project CI workflows (GitHub Actions & others), you can use [Mega-Linter](https://nvuillam.github.io/mega-linter/) which does all that for you with a single [assisted installation](https://nvuillam.github.io/mega-linter/installation/).\n\nMega-Linter embeds [editorconfig-checker](https://nvuillam.github.io/mega-linter/descriptors/editorconfig_editorconfig_checker/) by default in all its [flavors](https://nvuillam.github.io/mega-linter/flavors/), meaning that it will be run at each commit or Pull Request to detect any issue related to `.editorconfig`.\n\nIf you want to use only `editorconfig-checker` and not the 70+ other linters, you can use the following `.mega-linter.yml` configuration file:\n\n```yaml\nENABLE:\n  - EDITORCONFIG\n```\n\n## Support\n\nIf you have any questions, suggestions, need a wrapper for a programming language or just want to chat join #editorconfig-checker on freenode(IRC).\nIf you don't have an IRC-client set up you can use the [freenode webchat](https://webchat.freenode.net/?channels=editorconfig-checker)."
}
