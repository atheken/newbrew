{
  "name": "yq",
  "full_name": "yq",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [
    "yq@4"
  ],
  "versioned_formulae": [],
  "desc": "Process YAML, JSON, XML, CSV and properties documents from the CLI",
  "license": "MIT",
  "homepage": "https://github.com/mikefarah/yq",
  "versions": {
    "stable": "4.34.2",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/mikefarah/yq/archive/v4.34.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "035b7e827eccc66907270ff7f0d35c7917d56ded4aff44f7b942fe4802b70d01"
    },
    "head": {
      "url": "https://github.com/mikefarah/yq.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/yq/blobs/sha256:5f541a0d6e71baceccfef6f309581ab5baae0c8e464f6e4f3fa59bf21ce87cee",
          "sha256": "5f541a0d6e71baceccfef6f309581ab5baae0c8e464f6e4f3fa59bf21ce87cee"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/yq/blobs/sha256:5f541a0d6e71baceccfef6f309581ab5baae0c8e464f6e4f3fa59bf21ce87cee",
          "sha256": "5f541a0d6e71baceccfef6f309581ab5baae0c8e464f6e4f3fa59bf21ce87cee"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/yq/blobs/sha256:5f541a0d6e71baceccfef6f309581ab5baae0c8e464f6e4f3fa59bf21ce87cee",
          "sha256": "5f541a0d6e71baceccfef6f309581ab5baae0c8e464f6e4f3fa59bf21ce87cee"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/yq/blobs/sha256:c4ccd7d1a0b182a225d1a151f5f9692aba4f8c69e1fcf41d04b6d383128cf407",
          "sha256": "c4ccd7d1a0b182a225d1a151f5f9692aba4f8c69e1fcf41d04b6d383128cf407"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/yq/blobs/sha256:c4ccd7d1a0b182a225d1a151f5f9692aba4f8c69e1fcf41d04b6d383128cf407",
          "sha256": "c4ccd7d1a0b182a225d1a151f5f9692aba4f8c69e1fcf41d04b6d383128cf407"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/yq/blobs/sha256:c4ccd7d1a0b182a225d1a151f5f9692aba4f8c69e1fcf41d04b6d383128cf407",
          "sha256": "c4ccd7d1a0b182a225d1a151f5f9692aba4f8c69e1fcf41d04b6d383128cf407"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/yq/blobs/sha256:3620d2b3f41c3155675a2cad2db721d4cacaf343f13d852560e9fa7571b78bc5",
          "sha256": "3620d2b3f41c3155675a2cad2db721d4cacaf343f13d852560e9fa7571b78bc5"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go",
    "pandoc"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [
    "python-yq"
  ],
  "conflicts_with_reasons": [
    "both install `yq` executables"
  ],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/yq.rb",
  "ruby_source_checksum": {
    "sha256": "056e48f6acf855343ae5be16b5d9977865f396cb3ad2712a931ff8fb596f320b"
  },
  "date_added": "2017-12-24T10:03:17-08:00",
  "readme": "# yq\n\n![Build](https://github.com/mikefarah/yq/workflows/Build/badge.svg)  ![Docker Pulls](https://img.shields.io/docker/pulls/mikefarah/yq.svg) ![Github Releases (by Release)](https://img.shields.io/github/downloads/mikefarah/yq/total.svg) ![Go Report](https://goreportcard.com/badge/github.com/mikefarah/yq) ![CodeQL](https://github.com/mikefarah/yq/workflows/CodeQL/badge.svg)\n\n\na lightweight and portable command-line YAML, JSON and XML processor. `yq` uses [jq](https://github.com/stedolan/jq) like syntax but works with yaml files as well as json, xml, properties, csv and tsv. It doesn't yet support everything `jq` does - but it does support the most common operations and functions, and more is being added continuously.\n\nyq is written in go - so you can download a dependency free binary for your platform and you are good to go! If you prefer there are a variety of package managers that can be used as well as Docker and Podman, all listed below.\n\n## Quick Usage Guide\n\nRead a value:\n```bash\nyq '.a.b[0].c' file.yaml\n```\n\nPipe from STDIN:\n```bash\nyq '.a.b[0].c' < file.yaml\n```\n\nUpdate a yaml file, inplace\n```bash\nyq -i '.a.b[0].c = \"cool\"' file.yaml\n```\n\nUpdate using environment variables\n```bash\nNAME=mike yq -i '.a.b[0].c = strenv(NAME)' file.yaml\n```\n\nMerge multiple files\n```bash\n# note the use of `ea` to evaluate all the files at once\n# instead of in sequence\nyq ea '. as $item ireduce ({}; . * $item )' path/to/*.yml\n```\n\nMultiple updates to a yaml file\n```bash\nyq -i '\n  .a.b[0].c = \"cool\" |\n  .x.y.z = \"foobar\" |\n  .person.name = strenv(NAME)\n' file.yaml\n```\n\nConvert JSON to YAML\n```bash\nyq -Poy sample.json\n```\n\nSee the [documentation](https://mikefarah.gitbook.io/yq/) for more examples.\n\nTake a look at the discussions for [common questions](https://github.com/mikefarah/yq/discussions/categories/q-a), and [cool ideas](https://github.com/mikefarah/yq/discussions/categories/show-and-tell)\n\n## Install\n\n### [Download the latest binary](https://github.com/mikefarah/yq/releases/latest)\n\n### wget\nUse wget to download, gzipped pre-compiled binaries:\n\n\nFor instance, VERSION=v4.2.0 and BINARY=yq_linux_amd64\n\n#### Compressed via tar.gz\n```bash\nwget https://github.com/mikefarah/yq/releases/download/${VERSION}/${BINARY}.tar.gz -O - |\\\n  tar xz && mv ${BINARY} /usr/bin/yq\n```\n\n#### Plain binary\n\n```bash\nwget https://github.com/mikefarah/yq/releases/download/${VERSION}/${BINARY} -O /usr/bin/yq &&\\\n    chmod +x /usr/bin/yq\n```\n\n#### Latest version\n\n```bash\nwget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq &&\\\n    chmod +x /usr/bin/yq\n```\n\n### MacOS / Linux via Homebrew:\nUsing [Homebrew](https://brew.sh/)\n```\nbrew install yq\n```\n\n### Linux via snap:\n```\nsnap install yq\n```\n\n#### Snap notes\n`yq` installs with [_strict confinement_](https://docs.snapcraft.io/snap-confinement/6233) in snap, this means it doesn't have direct access to root files. To read root files you can:\n\n```\nsudo cat /etc/myfile | yq '.a.path'\n```\n\nAnd to write to a root file you can either use [sponge](https://linux.die.net/man/1/sponge):\n```\nsudo cat /etc/myfile | yq '.a.path = \"value\"' | sudo sponge /etc/myfile\n```\nor write to a temporary file:\n```\nsudo cat /etc/myfile | yq '.a.path = \"value\"' | sudo tee /etc/myfile.tmp\nsudo mv /etc/myfile.tmp /etc/myfile\nrm /etc/myfile.tmp\n```\n\n### Run with Docker or Podman\n#### Oneshot use:\n\n```bash\ndocker run --rm -v \"${PWD}\":/workdir mikefarah/yq [command] [flags] [expression ]FILE...\n```\n\nNote that you can run `yq` in docker without network access and other privileges if you desire,\nnamely `--security-opt=no-new-privileges --cap-drop all --network none`.\n\n```bash\npodman run --rm -v \"${PWD}\":/workdir mikefarah/yq [command] [flags] [expression ]FILE...\n```\n\n#### Pipe in via STDIN:\n\nYou'll need to pass the `-i\\--interactive` flag to docker:\n\n```bash\ndocker run -i --rm mikefarah/yq '.this.thing' < myfile.yml\n```\n\n```bash\npodman run -i --rm mikefarah/yq '.this.thing' < myfile.yml\n```\n\n#### Run commands interactively:\n\n```bash\ndocker run --rm -it -v \"${PWD}\":/workdir --entrypoint sh mikefarah/yq\n```\n\n```bash\npodman run --rm -it -v \"${PWD}\":/workdir --entrypoint sh mikefarah/yq\n```\n\nIt can be useful to have a bash function to avoid typing the whole docker command:\n\n```bash\nyq() {\n  docker run --rm -i -v \"${PWD}\":/workdir mikefarah/yq \"$@\"\n}\n```\n\n```bash\nyq() {\n  podman run --rm -i -v \"${PWD}\":/workdir mikefarah/yq \"$@\"\n}\n```\n#### Running as root:\n\n`yq`'s container image no longer runs under root (https://github.com/mikefarah/yq/pull/860). If you'd like to install more things in the container image, or you're having permissions issues when attempting to read/write files you'll need to either:\n\n\n```\ndocker run --user=\"root\" -it --entrypoint sh mikefarah/yq\n```\n\n```\npodman run --user=\"root\" -it --entrypoint sh mikefarah/yq\n```\n\nOr, in your Dockerfile:\n\n```\nFROM mikefarah/yq\n\nUSER root\nRUN apk add --no-cache bash\nUSER yq\n```\n\n#### Missing timezone data\nBy default, the alpine image yq uses does not include timezone data. If you'd like to use the `tz` operator, you'll need to include this data:\n\n```\nFROM mikefarah/yq\n\nUSER root\nRUN apk add --no-cache tzdata\nUSER yq\n```\n\n#### Podman with SELinux\n\nIf you are using podman with SELinux, you will need to set the shared volume flag `:z` on the volume mount:\n\n```\n-v \"${PWD}\":/workdir:z\n```\n\n### GitHub Action\n```\n  - name: Set foobar to cool\n    uses: mikefarah/yq@master\n    with:\n      cmd: yq -i '.foo.bar = \"cool\"' 'config.yml'\n  - name: Get an entry with a variable that might contain dots or spaces\n    id: get_username\n    uses: mikefarah/yq@master\n    with:\n      cmd: yq '.all.children.[\"${{ matrix.ip_address }}\"].username' ops/inventories/production.yml\n  - name: Reuse a variable obtained in another step\n    run: echo ${{ steps.get_username.outputs.result }}\n```\n\nSee https://mikefarah.gitbook.io/yq/usage/github-action for more.\n\n### Go Install:\n```\ngo install github.com/mikefarah/yq/v4@latest\n```\n\n## Community Supported Installation methods\nAs these are supported by the community :heart: - however, they may be out of date with the officially supported releases.\n\n_Please note that the Debian package (previously supported by @rmescandon) is no longer maintained. Please use an alternative installation method._\n\n\n### Nix\n\n```\nnix profile install nixpkgs#yq-go\n```\n\nSee [here](https://search.nixos.org/packages?channel=unstable&show=yq-go&from=0&size=50&sort=relevance&type=packages&query=yq-go)\n\n\n### Webi\n\n```\nwebi yq\n```\n\nSee [webi](https://webinstall.dev/)\nSupported by @adithyasunil26 (https://github.com/webinstall/webi-installers/tree/master/yq)\n\n### Arch Linux\n\n```\npacman -S go-yq\n```\n\n### Windows:\n[![Chocolatey](https://img.shields.io/chocolatey/v/yq.svg)](https://chocolatey.org/packages/yq)\n[![Chocolatey](https://img.shields.io/chocolatey/dt/yq.svg)](https://chocolatey.org/packages/yq)\n```\nchoco install yq\n```\nSupported by @chillum (https://chocolatey.org/packages/yq)\n\nand\n\n### Winget\nwinget install yq\n\nhttps://winget.run/pkg/MikeFarah/yq\n\n### Mac:\nUsing [MacPorts](https://www.macports.org/)\n```\nsudo port selfupdate\nsudo port install yq\n```\nSupported by @herbygillot (https://ports.macports.org/maintainer/github/herbygillot)\n\n### Alpine Linux\n- Enable edge/community repo by adding ```$MIRROR/alpine/edge/community``` to ```/etc/apk/repositories```\n- Update database index with ```apk update```\n- Install yq with ```apk add yq```\n\nSupported by Tuan Hoang\nhttps://pkgs.alpinelinux.org/package/edge/community/x86/yq\n\n\n## Features\n- [Detailed documentation with many examples](https://mikefarah.gitbook.io/yq/)\n- Written in portable go, so you can download a lovely dependency free binary\n- Uses similar syntax as `jq` but works with YAML, [JSON](https://mikefarah.gitbook.io/yq/usage/convert) and [XML](https://mikefarah.gitbook.io/yq/usage/xml) files\n- Fully supports multi document yaml files\n- Supports yaml [front matter](https://mikefarah.gitbook.io/yq/usage/front-matter) blocks (e.g. jekyll/assemble)\n- Colorized yaml output\n- [Date/Time manipulation and formatting with TZ](https://mikefarah.gitbook.io/yq/operators/datetime)\n- [Deeply data structures](https://mikefarah.gitbook.io/yq/operators/traverse-read)\n- [Sort keys](https://mikefarah.gitbook.io/yq/operators/sort-keys)\n- Manipulate yaml [comments](https://mikefarah.gitbook.io/yq/operators/comment-operators), [styling](https://mikefarah.gitbook.io/yq/operators/style), [tags](https://mikefarah.gitbook.io/yq/operators/tag) and [anchors and aliases](https://mikefarah.gitbook.io/yq/operators/anchor-and-alias-operators).\n- [Update inplace](https://mikefarah.gitbook.io/yq/v/v4.x/commands/evaluate#flags)\n- [Complex expressions to select and update](https://mikefarah.gitbook.io/yq/operators/select#select-and-update-matching-values-in-map)\n- Keeps yaml formatting and comments when updating (though there are issues with whitespace)\n- [Decode/Encode base64 data](https://mikefarah.gitbook.io/yq/operators/encode-decode)\n- [Load content from other files](https://mikefarah.gitbook.io/yq/operators/load)\n- [Convert to/from json/ndjson](https://mikefarah.gitbook.io/yq/v/v4.x/usage/convert)\n- [Convert to/from xml](https://mikefarah.gitbook.io/yq/v/v4.x/usage/xml)\n- [Convert to/from properties](https://mikefarah.gitbook.io/yq/v/v4.x/usage/properties)\n- [Convert to/from csv/tsv](https://mikefarah.gitbook.io/yq/usage/csv-tsv)\n- [General shell completion scripts (bash/zsh/fish/powershell)](https://mikefarah.gitbook.io/yq/v/v4.x/commands/shell-completion)\n- [Reduce](https://mikefarah.gitbook.io/yq/operators/reduce) to merge multiple files or sum an array or other fancy things.\n- [Github Action](https://mikefarah.gitbook.io/yq/usage/github-action) to use in your automated pipeline (thanks @devorbitus)\n\n## [Usage](https://mikefarah.gitbook.io/yq/)\n\nCheck out the [documentation](https://mikefarah.gitbook.io/yq/) for more detailed and advanced usage.\n\n```\nUsage:\n  yq [flags]\n  yq [command]\n\nExamples:\n\n# yq defaults to 'eval' command if no command is specified. See \"yq eval --help\" for more examples.\nyq '.stuff' < myfile.yml # outputs the data at the \"stuff\" node from \"myfile.yml\"\n\nyq -i '.stuff = \"foo\"' myfile.yml # update myfile.yml inplace\n\n\nAvailable Commands:\n  completion       Generate the autocompletion script for the specified shell\n  eval             (default) Apply the expression to each document in each yaml file in sequence\n  eval-all         Loads _all_ yaml documents of _all_ yaml files and runs expression once\n  help             Help about any command\n  shell-completion Generate completion script\n\nFlags:\n  -C, --colors                        force print with colors\n  -e, --exit-status                   set exit status if there are no matches or null or false is returned\n  -f, --front-matter string           (extract|process) first input as yaml front-matter. Extract will pull out the yaml content, process will run the expression against the yaml content, leaving the remaining data intact\n      --header-preprocess             Slurp any header comments and separators before processing expression. (default true)\n  -h, --help                          help for yq\n  -I, --indent int                    sets indent level for output (default 2)\n  -i, --inplace                       update the file inplace of first file given.\n  -p, --input-format string           [yaml|y|xml|x] parse format for input. Note that json is a subset of yaml. (default \"yaml\")\n  -M, --no-colors                     force print with no colors\n  -N, --no-doc                        Don't print document separators (---)\n  -n, --null-input                    Don't read input, simply evaluate the expression given. Useful for creating docs from scratch.\n  -o, --output-format string          [yaml|y|json|j|props|p|xml|x] output format type. (default \"yaml\")\n  -P, --prettyPrint                   pretty print, shorthand for '... style = \"\"'\n  -s, --split-exp string              print each result (or doc) into a file named (exp). [exp] argument must return a string. You can use $index in the expression as the result counter.\n      --unwrapScalar                  unwrap scalar, print the value with no quotes, colors or comments (default true)\n  -v, --verbose                       verbose mode\n  -V, --version                       Print version information and quit\n      --xml-attribute-prefix string   prefix for xml attributes (default \"+\")\n      --xml-content-name string       name for xml content (if no attribute name is present). (default \"+content\")\n\nUse \"yq [command] --help\" for more information about a command.\n```\n## Known Issues / Missing Features\n- `yq` attempts to preserve comment positions and whitespace as much as possible, but it does not handle all scenarios (see https://github.com/go-yaml/yaml/tree/v3 for details)\n- Powershell has its own...[opinions on quoting yq](https://mikefarah.gitbook.io/yq/usage/tips-and-tricks#quotes-in-windows-powershell)\n- \"yes\", \"no\" were dropped as boolean values in the yaml 1.2 standard - which is the standard yq assumes.\n\nSee [tips and tricks](https://mikefarah.gitbook.io/yq/usage/tips-and-tricks) for more common problems and solutions."
}
