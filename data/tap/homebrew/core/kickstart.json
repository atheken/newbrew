{
  "name": "kickstart",
  "full_name": "kickstart",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Scaffolding tool to get new projects up and running quickly",
  "license": "MIT",
  "homepage": "https://github.com/Keats/kickstart",
  "versions": {
    "stable": "0.3.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/Keats/kickstart/archive/refs/tags/v0.3.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "98f25f870d6b1bff9bb22a485cf307d42a1d4243550080cf0d122c6d71c23ded"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kickstart/blobs/sha256:1b1dcc991129ca4a822b8b8ac5e8be164a7bf65b6ca56fce267300fe0770c6ea",
          "sha256": "1b1dcc991129ca4a822b8b8ac5e8be164a7bf65b6ca56fce267300fe0770c6ea"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kickstart/blobs/sha256:fdb5a1637f755d3d0c4f7db16d136c6a854f40fc5edfa19a351b200576f572ef",
          "sha256": "fdb5a1637f755d3d0c4f7db16d136c6a854f40fc5edfa19a351b200576f572ef"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kickstart/blobs/sha256:dd5aa5cde9dbf7f7e00616648d0ca0aff07ba007e4d117fcee57b7c837dc19d8",
          "sha256": "dd5aa5cde9dbf7f7e00616648d0ca0aff07ba007e4d117fcee57b7c837dc19d8"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kickstart/blobs/sha256:23355c3677b666b7079674e5c8604a0b26242dae04cd9b2448b70a8261009dc7",
          "sha256": "23355c3677b666b7079674e5c8604a0b26242dae04cd9b2448b70a8261009dc7"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kickstart/blobs/sha256:2e0c6a85d535ee38876825adb4dd6eb9ea959534bc125e796ffe3625bee10940",
          "sha256": "2e0c6a85d535ee38876825adb4dd6eb9ea959534bc125e796ffe3625bee10940"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kickstart/blobs/sha256:a339668d1c7d9ded0f1c061cea821dfe3090b734f400e162c7746d5ca6b5e013",
          "sha256": "a339668d1c7d9ded0f1c061cea821dfe3090b734f400e162c7746d5ca6b5e013"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kickstart/blobs/sha256:5beff86259f7c42160e4d9cb535b4edae33966cd5aa8468c4a420c614f5a9197",
          "sha256": "5beff86259f7c42160e4d9cb535b4edae33966cd5aa8468c4a420c614f5a9197"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kickstart/blobs/sha256:731d389d83ec12043779f96dbee9049d09a97768a2c2d6e1993a3ae10ee0a181",
          "sha256": "731d389d83ec12043779f96dbee9049d09a97768a2c2d6e1993a3ae10ee0a181"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/kickstart.rb",
  "ruby_source_checksum": {
    "sha256": "fda693850cf1e735d8b9f1e43ce3da002ae56b7da32dd21d197db15fc513c86e"
  },
  "date_added": "2021-04-08T00:15:39+01:00",
  "readme": "# kickstart\n\nA CLI tool to easily get a new project up and running by using pre-made templates.\nThis is a slightly more powerful version of an equivalent tool in Python, [cookiecutter](https://github.com/audreyr/cookiecutter). It is an alternative to NodeJS projects such as [Yeoman](https://yeoman.io/) or [Slush](https://github.com/slushjs/slush).\n\n[![Crates.io](https://img.shields.io/crates/v/kickstart.svg)](https://crates.io/crates/kickstart)\n\n![kickstart.gif](./kickstart.gif)\n\n## Installation\n\n`kickstart` is available only through crates.io:\n\n```bash\n$ cargo install kickstart\n```\n\nOr as a pre-built binary [on the Releases page](https://github.com/Keats/kickstart/releases).\n\nRun `kickstart --help` for a full listing of the available commands and their flags/options.\n\n## Features\n\n- Cross-platform: Windows, Mac and Linux supported\n- Single binary: no need to install a virtualenv or anything else\n- Simple to use\n- Directory names and filenames can be templated: `{{ repo_name }}/{{author}}.md` is a valid path\n- All templating done through [Tera](https://tera.netlify.com/docs/) - a template engine inspired by Jinja2\n- Choose your own adventure: it supports conditional questions based on previous answers\n- It can load templates from a local directory or from a Git repository\n- It has conditional cleanup to not let irrelevant files in the output directory after generation\n- Templates can be made for any kind of projects/languages\n- Case conversion filters, e.g. `camelCase` to `CamelCase`\n\nThe main drawback compared to cookiecutter is the lack of hook scripts support, which can be mitigated a bit by the conditional cleanup.\n\n[builtin]: https://tera.netlify.com/docs/#built-in-filters\n\nLastly, since Windows does not allow `|` in file paths, you may use a [tera built-in filter][builtin]\nby using the `$$` separator instead.\n\nNote that, in file templates, you should keep using `|` for filtering, as the `$$` syntax is only for files and directories. Keep in mind the characters `()` are not allowed on Windows so do not use filter parameters if you want to be cross-platform.\n\n## Try it out\n\n```bash\n# From the root of this repo\n$ kickstart examples/super-basic\n$ kickstart examples/complex -o Hello\n# Anywhere\n$ kickstart https://github.com/Keats/kickstart -s examples/super-basic\n$ kickstart https://github.com/Keats/kickstart-sample -o sample\n```\n\n## Creating your own template\nCreating a template is fairly simple: create files and then just add a `template.toml` in the root folder. Here is a description of all the fields available in it:\n\n```toml\n# Required, name of the template\nname = \"Django\"\n# Optional, longer form description\ndescription = \"A fully-featured Django template\"\n# Required, the version of the kickstart schema, currently only `1` is used\nkickstart_version = 1\n# Optional, the URL of the template\nurl = \"https://google.com\"\n# Optional, a list of authors for this template\nauthors = [\n\n]\n# Optional, a list of keywords for this template\nkeywords = [\n\n]\n# Optional, those files will NOT be copied over when generating the template\n# Use it to remove template-specific like its CI or its README/docs\nignore = [\n    \"README.md\",\n    \"CONTRIBUTING.md\",\n    \".travis.yml\",\n    \"docs\",\n]\n# If this is set, kickstart will use this directory as a base for the template instead of\n# the root directory. This is useful when your template has its own documentation/CI/etc and you don't want\n# to ignore it.\ndirectory = \"some-directory\"\n# Optional, a list of patterns. All files matching one of the patterns will\n# be copied over without going through Tera.\n# Use it for files that contain syntax similar to Tera for example\ncopy_without_render = [\n    \"*.html\",\n]\n\n# Optional, a list of cleanup actions to do.\n# All paths listed will be deleted if the `name` has the value `value` after\n# the questions have been answered and the project generated.\ncleanup = [\n    { name = \"spa\", value = true, paths = [\"{{ project_name }}/templates/\"]},\n    { name = \"auth_method\", value = \"none\", paths = [\"{{ project_name }}/docs/auth.md\"]},\n]\n\n# A list of variables, the schema is explained in detail below\n[[variables]]\nname = \"project_name\"\ndefault = \"my-project\"\nprompt = \"What is the name of this project?\"\nvalidation = \"^([a-zA-Z][a-zA-Z0-9_-]+)$\"\n\n[[variables]]\nname = \"database\"\ndefault = \"postgres\"\nprompt = \"Which database do you want to use?\"\nchoices = [\"postgres\", \"mysql\", \"sqlite\"]\n\n[[variables]]\nname = \"pg_version\"\ndefault = \"10.4\"\nprompt = \"Which version of Postgres?\"\nchoices =  [\n    \"10.4\",\n    \"10.3\",\n    \"10.2\",\n    \"10.1\",\n    \"9.6\",\n    \"9.5\",\n    \"9.4\",\n    \"9.3\",\n]\nonly_if = { name = \"database\", value = \"postgres\" }\n\n[[variables]]\nname = \"auth_method\"\ndefault = \"jwt\"\nprompt = \"How are users going to be authenticated?\"\nchoices = [\"jwt\", \"sessions\", \"none\"]\n\n[[variables]]\nname = \"sentry\"\ndefault = true\nprompt = \"Do you want to add Sentry integration?\"\n\n[[variables]]\nname = \"spa\"\ndefault = false\nprompt = \"Is the frontend a SPA?\"\n\n[[variables]]\nname = \"js_framework\"\ndefault = \"React\"\nprompt = \"Which JS framework do you want to setup?\"\nchoices =  [\n    \"React\",\n    \"Angular\",\n    \"Vue\",\n    \"None\",\n]\nonly_if = { name = \"spa\", value = true }\n\n[[variables]]\nname = \"typescript\"\ndefault = true\nprompt = \"Do you want to use TypeScript?\"\nonly_if = { name = \"spa\", value = true }\n\n```\n\nA variable has the following required fields:\n\n- `name`: the name of the variable in Tera context\n- `default`: the default value for that question, `kickstart` uses that to deduce the type of that value (only string, bool and integer are currently supported)\n- `prompt`: the text to display to the user\n\nAnd three more optional fields:\n\n- `choices`: a list of potential values, `kickstart` will make the user pick one\n- `only_if`: this question will only be asked if the variable `name` has the value `value`\n- `validation`: a Regex pattern to check when getting a string value\n\n## List of templates\n\n- [Rust CLI application](https://github.com/Keats/rust-cli-template)\n\n## Case Conversion Filters\nCase conversion filters are provided (_via [heck](https://github.com/withoutboats/heck)_):\n- `upper_camel_case`: UpperCamelCase\n- `camel_case`: lowerCamelCase\n- `snake_case`: snake_case\n- `kebab_case`: kebab-case\n- `shouty_snake_case`: SHOUTY_SNAKE_CASE\n- `title_case`: Title Case\n- `shouty_kebab_case`: SHOUTY-KEBAB-CASE\n\nYou can use these like any other filter, e.g. `{{variable_name | camel_case}}`.\n\n## Changelog\n\n### 0.4.0 (2023-08-02)\n\n- Add case conversion filter\n- Update dependencies\n\n### 0.3.0 (2021-07-10)\n\n- Update dependencies\n\n### 0.2.1 (2020-02-07)\n\n- Allow using `$$` for filters in filenames/directories\n\n### 0.2.0 (2020-01-09)\n\n- Update all dependencies\n- Add the `directory` field to change the template directory away from the current one\n- VCS files are not automatically ignored anymore\n\n### 0.1.8 (2018-09-30)\n\n- Allow loading templates from a subdirectory\n\n### 0.1.7 (2018-08-09)\n\n- Work with Git aliases\n- The crate now works as a library as well as a binary\n\n### 0.1.6 (2018-08-02)\n\n- Add a `--no-input` flag to the main command to generate a template from defaults\n- Validate that a template only uses allowed TOML types (String, integer and boolean) in `validate` command\n- Better question UI\n\n### 0.1.5 (2018-07-31)\n\n- Fix git clone command\n\n### 0.1.4 (2018-07-31)\n\n- Fix missing error display impl\n- Fix TOML error not showing up\n- Fix multi-layered questions being asked when they shouldn't\n\n### 0.1.3 (2018-07-31)\n\n- Add pattern to match in the question when there is on\n\n### 0.1.2 (2018-07-31)\n\n- Add optional `validation` field to validate a string against a regex\n- Add colours and boldness to CLI\n- Use `git` command rather than git2 crate to avoid some build issues\n- Add `cleanup` field to template definition for post-generation cleanup\n- Add `validate` command to diagnose errors in a `template.toml` file"
}
