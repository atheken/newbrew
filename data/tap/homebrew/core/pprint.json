{
  "name": "pprint",
  "full_name": "pprint",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Pretty printer for modern C++",
  "license": "MIT",
  "homepage": "https://github.com/p-ranav/pprint",
  "versions": {
    "stable": "0.9.1",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/p-ranav/pprint/archive/v0.9.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "b9cc0d42f7be4abbb50b2e3b6a89589c5399201a3dc1fd7cfa72d412afdb2f86"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 2,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pprint/blobs/sha256:2bd9ae7e3fd65f467b6416bf779f79aa7bb30ab6a064a3971b4cd5fed16fd234",
          "sha256": "2bd9ae7e3fd65f467b6416bf779f79aa7bb30ab6a064a3971b4cd5fed16fd234"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [
    {
      "name": "macos",
      "cask": null,
      "download": null,
      "version": "10.13",
      "contexts": [],
      "specs": [
        "stable"
      ]
    }
  ],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": true,
  "disable_date": "2023-06-19",
  "disable_reason": "repo_archived",
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/pprint.rb",
  "ruby_source_checksum": {
    "sha256": "bed49cd3f958f6ac658e28978bb1276a2db90bcf63e23f220f41d3c54f2addba"
  },
  "date_added": "2019-05-22T20:17:18-04:00",
  "readme": "<p align=\"center\">\n  <img height=\"60\" src=\"https://i.imgur.com/QT98aqi.png\" alt=\"pprint\"/>\n</p>\n\n## Highlights\n\n* Single header file\n* Requires C++17\n* MIT License\n\n## Quick Start\n\nSimply include pprint.hpp and you're good to go.\n\n```cpp\n#include <pprint.hpp>\n```\n\nTo start printing, create a ```PrettyPrinter```\n\n```cpp\npprint::PrettyPrinter printer;\n```\n\nYou can construct a ```PrettyPrinter``` with any stream that inherits from ```std::ostream``` , e.g, ```std::stringstream```\n\n```cpp\nstd::stringstream stream;\npprint::PrettyPrinter printer(stream);\n```\n\n\n## Fundamental Types\n\n```cpp\nprinter.print(5);\nprinter.print(3.14f);\nprinter.print(2.718);\nprinter.print(true);\nprinter.print('x');\nprinter.print(\"Hello, 世界\");\nprinter.print(nullptr);\n```\n\n```bash\n5\n3.14f\n2.718\ntrue\nx\nHello, 世界\nnullptr\n```\n\n## Strings\n\nMaybe you want your strings to be quoted? Simply set ```printer.quotes(true)```\n\n```cpp\nprinter.quotes(true);\nprinter.print(\"A\", \"B\", \"C\");\n```\n\n```bash\n\"A\" \"B\" \"C\"\n```\n\n## Complex Numbers\n\n```cpp\nusing namespace std::complex_literals;\nstd::complex<double> foo = 1. + 2.5i;\nstd::complex<double> bar = 9. + 4i;\nprinter.print(foo, \"*\", bar, \"=\", (foo * bar));   // parameter packing\n```\n\n```bash\n(1 + 2.5i) * (9 + 4i) = (-1 + 26.5i)\n```\n## Enumeration Types\n\n```cpp\nenum Color { RED = 2, BLUE = 4, GREEN = 8 };\nColor color = BLUE;\nprinter.print(color);\n```\n\n```bash\n4\n```\n\nIf you compile with\n* Clang/LLVM >= 5\n* Visual C++ >= 15.3 / Visual Studio >= 2017\n* Xcode >= 10.2\n* GCC >= 9\n\nthen pprint will print the name of the enum for you (thanks to [magic_enum](https://github.com/Neargye/magic_enum))\n\n```cpp\nenum Level { LOW, MEDIUM, HIGH };\nLevel current_level = MEDIUM;\nstd::cout << \"Current level: \";\nprinter.print(current_level);\n```\n\n```bash\nCurrent level: MEDIUM\n```\n\n## STL Sequence Containers\n\npprint supports a variety of STL sequence containers including ```std::vector```, ```std::list```, ```std::deque```, and ```std::array```. \n\nHere's an example pretty print of a simple 3x3 matrix:\n\n```cpp\ntypedef std::array<std::array<int, 3>, 3> Mat3x3;\nMat3x3 matrix;\nmatrix[0] = {1, 2, 3};\nmatrix[1] = {4, 5, 6};\nmatrix[2] = {7, 8, 9};\nprinter.print(\"Matrix =\", matrix);\n```\n\n```bash\nMatrix = [\n  [1, 2, 3], \n  [4, 5, 6], \n  [7, 8, 9]\n]\n```\n\n### Compact Printing\n\npprint also supports compact printing of containers. Simply call ```printer.compact(true)``` to enable this:\n\n```cpp\nstd::vector<std::map<std::string, int>> foo {{{\"a\", 1}, {\"b\", 2}}, {{\"c\", 3}, {\"d\", 4}}};\nprinter.compact(true);\nprinter.print(\"Foo =\", foo);\n```\n\n```bash\nFoo = [{a : 1, b : 2}, {c : 3, d : 4}]\n```\n\n## STL Associative Containers\n\nSupport for associative containers includes pretty printing of ```std::map```, ```std::multimap```, ```std::unordered_map```, ```std::unordered_multimap```, ```std::set```, ```std::multiset```, ```std::unordered_set``` and , ```std::unordered_multiset``` \n\n```cpp\nprinter.print(std::map<std::string, std::set<int>>{ \n    {\"foo\", {1, 2, 3, 3, 2, 1}}, {\"bar\", {7, 6, 5, 4}}});\n```\n\n```bash\n{\n  \"bar\" : {4, 5, 6, 7}, \n  \"foo\" : {1, 2, 3}\n}\n```\n\n## STL Container Adaptors\n\npprint can print container adaptors including ```std::queue```, ```std::priority_queue``` and ```std::stack```. Here's an example print of a priority queue:\n\n```cpp\nstd::priority_queue<int> queue;\nfor(int n : {1,8,5,6,3,4,0,9,7,2}) queue.push(n);\nprinter.print(queue);\n```\n\n```bash\n[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n```\n\n## Fixed-size Heterogeneous Tuples\n\n```cpp\nauto get_student = [](int id) {\n  if (id == 0) return std::make_tuple(3.8, 'A', \"Lisa Simpson\");\n  if (id == 1) return std::make_tuple(2.9, 'C', \"Milhouse Van Houten\");\n  if (id == 2) return std::make_tuple(1.7, 'D', \"Ralph Wiggum\");\n  throw std::invalid_argument(\"id\");\n};\nprinter.print({ get_student(0), get_student(1), get_student(2) });\n```\n\n```bash\n{(1.7, 'D', \"Ralph Wiggum\"), (2.9, 'C', \"Milhouse Van Houten\"), (3.8, 'A', \"Lisa Simpson\")}\n```\n\n## Type-safe Unions\n\n```cpp\n// Construct a vector of values\nstd::vector<std::variant<bool, int, int *, float, std::string, std::vector<int>,\t\t      \n       std::map<std::string, std::map<std::string, int>>, \n       std::pair<double, double>>> var;\nvar.push_back(5);\nvar.push_back(nullptr);\nvar.push_back(3.14f);\nvar.push_back(std::string{\"Hello World\"});\nvar.push_back(std::vector<int>{1, 2, 3, 4});\nvar.push_back(std::map<std::string, std::map<std::string, int>>{{\"a\",{{\"b\",1}}}, {\"c\",{{\"d\",2}, {\"e\",3}}}});\nvar.push_back(true);\nvar.push_back(std::pair<double, double>{1.1, 2.2});\n\n// Print the vector\npprint::PrettyPrinter printer;\nprinter.indent(2);\nprinter.quotes(true);\nprinter.print(var);\n```\n\n```bash\n[\n  5, \n  nullptr,\n  3.14f, \n  \"Hello World\", \n  [1, 2, 3, 4], \n  {\"a\" : {\"b\" : 1}, \"c\" : {\"d\" : 2, \"e\" : 3}}, \n  true, \n  (1.1, 2.2)\n]\n```\n\n## Optional Values\n\n```cpp\nstd::optional<int> opt = 5;\nstd::optional<int> opt2;\n\nprinter.print(opt);\nprinter.print(opt2);\n```\n\n```bash\n5\nnullopt\n```\n\n## Class Objects\n\npprint print class objects with or without an overloaded ```<<``` operator \n\n```cpp\nclass Foo {};\nFoo foo;\nprinter.print(foo);\n```\n\n```\n<Object main::Foo>\n```\n\nIf an ```<<``` operator is available, pprint will use it to print your object:\n\n```cpp\nclass Date {\n  unsigned int month, day, year;\npublic:\n  Date(unsigned int m, unsigned int d, unsigned int y) : month(m), day(d), year(y) {}\n  friend std::ostream& operator<<(std::ostream& os, const Date& dt);\n};\n\n    \nstd::ostream& operator<<(std::ostream& os, const Date& dt) {\n  os << dt.month << '/' << dt.day << '/' << dt.year;\n  return os;\n}\n```\n\n```cpp\nDate date(04, 07, 2019);\nprinter.print(\"Today's date is\", date);\n```\n\n```bash\nToday's date is 4/7/2019\n```\n\n## User-defined types\n\nHere's an example to print user-defined types. Let's say you want to print Mesh objects\n\n```cpp\nstruct Vector3 {\n  float x, y, z;\n};\n\nstruct Mesh {\n  std::vector<Vector3> vertices;\n};\n```\n\nFirst, overload the ```<<``` operator for these structs:\n\n```cpp\nstd::ostream& operator<<(std::ostream& os, const Vector3& v) {\n  pprint::PrettyPrinter printer(os);\n  printer.print_inline(std::make_tuple(v.x, v.y, v.z));\n  return os;\n}\n\nstd::ostream& operator<<(std::ostream& os, const Mesh& mesh) {\n  pprint::PrettyPrinter printer(os);\n  printer.print(\"Mesh {\");\n  printer.indent(2);\n  printer.print_inline(\"vertices:\", mesh.vertices);\n  printer.print(\"}\");\n  return os;\n}\n```\n\nthen simply call ```printer.print(Mesh)```\n\n```cpp\nMesh quads = {{\n  {0, 0, 0}, {1, 0, 0}, {1, 1, 0}, {0, 0, 0}, {1, 1, 0}, {0, 1, 0},\n  {0, 0, 1}, {1, 0, 1}, {1, 1, 1}, {0, 0, 1}, {1, 1, 1}, {0, 1, 1},\n  }};\n\npprint::PrettyPrinter printer;\nprinter.print(quads);\n```\n\n```bash\nMesh {\n  vertices: [\n      (0, 0, 0), \n      (1, 0, 0), \n      (1, 1, 0), \n      (0, 0, 0), \n      (1, 1, 0), \n      (0, 1, 0), \n      (0, 0, 1), \n      (1, 0, 1), \n      (1, 1, 1), \n      (0, 0, 1), \n      (1, 1, 1), \n      (0, 1, 1)\n  ]\n}\n```\n## License\nThe project is available under the [MIT](https://opensource.org/licenses/MIT) license."
}
