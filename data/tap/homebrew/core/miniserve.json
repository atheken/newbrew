{
  "name": "miniserve",
  "full_name": "miniserve",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "High performance static file server",
  "license": "MIT",
  "homepage": "https://github.com/svenstaro/miniserve",
  "versions": {
    "stable": "0.24.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/svenstaro/miniserve/archive/v0.24.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "ed0619bfbad3f9ea635aa266a9c4e96247ad94683d50743f0464f48f9e48ae88"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/miniserve/blobs/sha256:0f1e8c5fcef4ffa4c4dab44897542c4d9eef5adb9934402e29ddfb31585a7c19",
          "sha256": "0f1e8c5fcef4ffa4c4dab44897542c4d9eef5adb9934402e29ddfb31585a7c19"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/miniserve/blobs/sha256:5683a1a1d809cbb4451a658e455f53a7fd46f4618210319924fee7847c143e01",
          "sha256": "5683a1a1d809cbb4451a658e455f53a7fd46f4618210319924fee7847c143e01"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/miniserve/blobs/sha256:59dbf3c56ca993da67b46e546e57b0dd122de3fd52582523ef11b9680cc91856",
          "sha256": "59dbf3c56ca993da67b46e546e57b0dd122de3fd52582523ef11b9680cc91856"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/miniserve/blobs/sha256:bc95fff0bd91a853a0403e38bfc498f3fa5ae94e03a592d3692df3035170567c",
          "sha256": "bc95fff0bd91a853a0403e38bfc498f3fa5ae94e03a592d3692df3035170567c"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/miniserve/blobs/sha256:8733c71e2feb2472a0cab6a5f1e3bd8eefca951d80938778abfc3e7760b0f24c",
          "sha256": "8733c71e2feb2472a0cab6a5f1e3bd8eefca951d80938778abfc3e7760b0f24c"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/miniserve/blobs/sha256:d4609872ffc2855603525af721bdf24b99a3319a02119aa9e80c792d0bf78383",
          "sha256": "d4609872ffc2855603525af721bdf24b99a3319a02119aa9e80c792d0bf78383"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/miniserve/blobs/sha256:174134cc5de910a9840a7b080e773760579c6a92af6519daeb37f7a8173123f6",
          "sha256": "174134cc5de910a9840a7b080e773760579c6a92af6519daeb37f7a8173123f6"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/miniserve.rb",
  "ruby_source_checksum": {
    "sha256": "c9c473ba3c3153f5055801250287365a9b97c401af4b11ec9b327a0445509385"
  },
  "date_added": "2018-08-11T10:57:11+02:00",
  "readme": "<p align=\"center\">\n  <img src=\"data/logo.svg\" alt=\"miniserve - a CLI tool to serve files and dirs over HTTP\"><br>\n</p>\n\n# miniserve - a CLI tool to serve files and dirs over HTTP\n\n[![CI](https://github.com/svenstaro/miniserve/workflows/CI/badge.svg)](https://github.com/svenstaro/miniserve/actions)\n[![Docker Hub](https://img.shields.io/docker/pulls/svenstaro/miniserve)](https://cloud.docker.com/repository/docker/svenstaro/miniserve/)\n[![Crates.io](https://img.shields.io/crates/v/miniserve.svg)](https://crates.io/crates/miniserve)\n[![license](http://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/svenstaro/miniserve/blob/master/LICENSE)\n[![Stars](https://img.shields.io/github/stars/svenstaro/miniserve.svg)](https://github.com/svenstaro/miniserve/stargazers)\n[![Downloads](https://img.shields.io/github/downloads/svenstaro/miniserve/total.svg)](https://github.com/svenstaro/miniserve/releases)\n[![Lines of Code](https://tokei.rs/b1/github/svenstaro/miniserve)](https://github.com/svenstaro/miniserve)\n\n**For when you really just want to serve some files over HTTP right now!**\n\n**miniserve** is a small, self-contained cross-platform CLI tool that allows you to just grab the binary and serve some file(s) via HTTP.\nSometimes this is just a more practical and quick way than doing things properly.\n\n## Screenshot\n\n![Screenshot](screenshot.png)\n\n## How to use\n\n### Serve a directory:\n\n    miniserve linux-distro-collection/\n\n### Serve a single file:\n\n    miniserve linux-distro.iso\n\n### Set a custom index file to serve instead of a file listing:\n\n    miniserve --index test.html\n\n### Serve an SPA (Single Page Application) so that non-existent paths are forwarded to the SPA's router instead\n\n    miniserve --spa --index index.html\n\n### Require username/password:\n\n    miniserve --auth joe:123 unreleased-linux-distros/\n\n### Require username/password as hash:\n\n    pw=$(echo -n \"123\" | sha256sum | cut -f 1 -d ' ')\n    miniserve --auth joe:sha256:$pw unreleased-linux-distros/\n    \n### Require username/password from file (separate logins with new lines):\n\n    miniserve --auth-file auth.txt unreleased-linux-distros/\n\n### Generate random 6-hexdigit URL:\n\n    miniserve -i 192.168.0.1 --random-route /tmp\n    # Serving path /private/tmp at http://192.168.0.1/c789b6\n\n### Bind to multiple interfaces:\n\n    miniserve -i 192.168.0.1 -i 10.13.37.10 -i ::1 /tmp/myshare\n\n### Start with TLS:\n\n    miniserve --tls-cert my.cert --tls-key my.key /tmp/myshare\n\n### Upload a file using `curl`:\n\n    # in one terminal\n    miniserve -u -- .\n    # in another terminal\n    curl -F \"path=@$FILE\" http://localhost:8080/upload\\?path\\=/\n\n(where `$FILE` is the path to the file. This uses miniserve's default port of 8080)\n\nNote that for uploading, we have to use `--` to disambiguate the argument to `-u`.\nThis is because `-u` can also take a path (or multiple). If a path argument to `-u` is given,\nuploading will only be possible to the provided paths as opposed to every path.\n\nAnother effect of this is that you can't just combine flags like this `-uv` when `-u` is used. In\nthis example, you'd need to use `-u -v`.\n\n### Create a directory using `curl`:\n\n    # in one terminal\n    miniserve --upload-files --mkdir .\n    # in another terminal\n    curl -F \"mkdir=$DIR_NAME\" http://localhost:8080/upload\\?path=\\/\n\n(where `$DIR_NAME` is the name of the directory. This uses miniserve's default port of 8080.)\n\n### Take pictures and upload them from smartphones:\n\n    miniserve -u -m image -q\n\nThis uses the `--media-type` option, which sends a hint for the expected media type to the browser.\nSome mobile browsers like Firefox on Android will offer to open the camera app when seeing this.\n\n## Features\n\n- Easy to use\n- Just works: Correct MIME types handling out of the box\n- Single binary drop-in with no extra dependencies required\n- Authentication support with username and password (and hashed password)\n- Mega fast and highly parallel (thanks to [Rust](https://www.rust-lang.org/) and [Actix](https://actix.rs/))\n- Folder download (compressed on the fly as `.tar.gz` or `.zip`)\n- File uploading\n- Directory creation\n- Pretty themes (with light and dark theme support)\n- Scan QR code for quick access\n- Shell completions\n- Sane and secure defaults\n- TLS (for supported architectures)\n- Supports README.md rendering like on GitHub\n- Range requests\n\n## Usage\n\n```\nFor when you really just want to serve some files over HTTP right now!\n\nUsage: miniserve [OPTIONS] [PATH]\n\nArguments:\n  [PATH]\n          Which path to serve\n\n          [env: MINISERVE_PATH=]\n\nOptions:\n  -v, --verbose\n          Be verbose, includes emitting access logs\n\n          [env: MINISERVE_VERBOSE=]\n\n      --index <INDEX>\n          The name of a directory index file to serve, like \"index.html\"\n\n          Normally, when miniserve serves a directory, it creates a listing for that directory. However, if a directory\n          contains this file, miniserve will serve that file instead.\n\n          [env: MINISERVE_INDEX=]\n\n      --spa\n          Activate SPA (Single Page Application) mode\n\n          This will cause the file given by --index to be served for all non-existing file paths. In effect, this will serve\n          the index file whenever a 404 would otherwise occur in order to allow the SPA router to handle the request instead.\n\n          [env: MINISERVE_SPA=]\n\n      --pretty-urls\n          Activate Pretty URLs mode\n\n          This will cause the server to serve the equivalent `.html` file indicated by the path.\n\n          `/about` will try to find `about.html` and serve it.\n\n          [env: MINISERVE_PRETTY_URLS=]\n\n  -p, --port <PORT>\n          Port to use\n\n          [env: MINISERVE_PORT=]\n          [default: 8080]\n\n  -i, --interfaces <INTERFACES>\n          Interface to listen on\n\n          [env: MINISERVE_INTERFACE=]\n\n  -a, --auth <AUTH>\n          Set authentication\n\n          Currently supported formats:\n          username:password, username:sha256:hash, username:sha512:hash\n          (e.g. joe:123, joe:sha256:a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3)\n\n          [env: MINISERVE_AUTH=]\n\n      --auth-file <AUTH_FILE>\n          Read authentication values from a file\n\n          Example file content:\n\n          joe:123\n          bob:sha256:a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3\n          bill:\n\n          [env: MINISERVE_AUTH_FILE=]\n\n      --route-prefix <ROUTE_PREFIX>\n          Use a specific route prefix\n\n          [env: MINISERVE_ROUTE_PREFIX=]\n\n      --random-route\n          Generate a random 6-hexdigit route\n\n          [env: MINISERVE_RANDOM_ROUTE=]\n\n  -P, --no-symlinks\n          Hide symlinks in listing and prevent them from being followed\n\n          [env: MINISERVE_NO_SYMLINKS=]\n\n  -H, --hidden\n          Show hidden files\n\n          [env: MINISERVE_HIDDEN=]\n\n  -c, --color-scheme <COLOR_SCHEME>\n          Default color scheme\n\n          [env: MINISERVE_COLOR_SCHEME=]\n          [default: squirrel]\n          [possible values: squirrel, archlinux, zenburn, monokai]\n\n  -d, --color-scheme-dark <COLOR_SCHEME_DARK>\n          Default color scheme\n\n          [env: MINISERVE_COLOR_SCHEME_DARK=]\n          [default: archlinux]\n          [possible values: squirrel, archlinux, zenburn, monokai]\n\n  -q, --qrcode\n          Enable QR code display\n\n          [env: MINISERVE_QRCODE=]\n\n  -u, --upload-files [<ALLOWED_UPLOAD_DIR>]\n          Enable file uploading (and optionally specify for which directory)\n\n          [env: MINISERVE_ALLOWED_UPLOAD_DIR=]\n\n  -U, --mkdir\n          Enable creating directories\n\n          [env: MINISERVE_MKDIR_ENABLED=]\n\n  -m, --media-type <MEDIA_TYPE>\n          Specify uploadable media types\n\n          [env: MINISERVE_MEDIA_TYPE=]\n          [possible values: image, audio, video]\n\n  -M, --raw-media-type <MEDIA_TYPE_RAW>\n          Directly specify the uploadable media type expression\n\n          [env: MINISERVE_RAW_MEDIA_TYPE=]\n\n  -o, --overwrite-files\n          Enable overriding existing files during file upload\n\n          [env: OVERWRITE_FILES=]\n\n  -r, --enable-tar\n          Enable uncompressed tar archive generation\n\n          [env: MINISERVE_ENABLE_TAR=]\n\n  -g, --enable-tar-gz\n          Enable gz-compressed tar archive generation\n\n          [env: MINISERVE_ENABLE_TAR_GZ=]\n\n  -z, --enable-zip\n          Enable zip archive generation\n\n          WARNING: Zipping large directories can result in out-of-memory exception because zip generation is done in memory\n          and cannot be sent on the fly\n\n          [env: MINISERVE_ENABLE_ZIP=]\n\n  -D, --dirs-first\n          List directories first\n\n          [env: MINISERVE_DIRS_FIRST=]\n\n  -t, --title <TITLE>\n          Shown instead of host in page title and heading\n\n          [env: MINISERVE_TITLE=]\n\n      --header <HEADER>\n          Set custom header for responses\n\n          [env: MINISERVE_HEADER=]\n\n  -l, --show-symlink-info\n          Visualize symlinks in directory listing\n\n          [env: MINISERVE_SHOW_SYMLINK_INFO=]\n\n  -F, --hide-version-footer\n          Hide version footer\n\n          [env: MINISERVE_HIDE_VERSION_FOOTER=]\n\n      --hide-theme-selector\n          Hide theme selector\n\n          [env: MINISERVE_HIDE_THEME_SELECTOR=]\n\n  -W, --show-wget-footer\n          If enabled, display a wget command to recursively download the current directory\n\n          [env: MINISERVE_SHOW_WGET_FOOTER=]\n\n      --print-completions <shell>\n          Generate completion file for a shell\n\n          [possible values: bash, elvish, fish, powershell, zsh]\n\n      --print-manpage\n          Generate man page\n\n      --tls-cert <TLS_CERT>\n          TLS certificate to use\n\n          [env: MINISERVE_TLS_CERT=]\n\n      --tls-key <TLS_KEY>\n          TLS private key to use\n\n          [env: MINISERVE_TLS_KEY=]\n\n      --readme\n          Enable README.md rendering in directories\n\n          [env: MINISERVE_README=]\n\n  -h, --help\n          Print help (see a summary with '-h')\n\n  -V, --version\n          Print version\n```\n\n## How to install\n\n<a href=\"https://repology.org/project/miniserve/versions\"><img align=\"right\" src=\"https://repology.org/badge/vertical-allrepos/miniserve.svg\" alt=\"Packaging status\"></a>\n\n**On Linux**: Download `miniserve-linux` from [the releases page](https://github.com/svenstaro/miniserve/releases) and run\n\n    chmod +x miniserve-linux\n    ./miniserve-linux\n\nAlternatively, if you are on **Arch Linux**, you can do\n\n    pacman -S miniserve\n\nOn [Termux](https://termux.com/)\n\n    pkg install miniserve\n\n**On OSX**: Download `miniserve-osx` from [the releases page](https://github.com/svenstaro/miniserve/releases) and run\n\n    chmod +x miniserve-osx\n    ./miniserve-osx\n\nAlternatively install with [Homebrew](https://brew.sh/):\n\n    brew install miniserve\n    miniserve\n\n**On Windows**: Download `miniserve-win.exe` from [the releases page](https://github.com/svenstaro/miniserve/releases) and run\n\n    miniserve-win.exe\n\nAlternatively install with [Scoop](https://scoop.sh/):\n\n    scoop install miniserve\n\n**With Cargo**: Make sure you have a recent version of Rust. Then you can run\n\n    cargo install --locked miniserve\n    miniserve\n\n**With Docker:** Make sure the Docker daemon is running and then run\n\n    docker run -v /tmp:/tmp -p 8080:8080 --rm -it docker.io/svenstaro/miniserve /tmp\n\n**With Podman:** Just run\n\n    podman run -v /tmp:/tmp -p 8080:8080 --rm -it docker.io/svenstaro/miniserve /tmp\n\n## Shell completions\n\nIf you'd like to make use of the built-in shell completion support, you need to run `miniserve\n--print-completions <your-shell>` and put the completions in the correct place for your shell. A\nfew examples with common paths are provided below:\n\n    # For bash\n    miniserve --print-completions bash > ~/.local/share/bash-completion/completions/miniserve\n    # For zsh\n    miniserve --print-completions zsh > /usr/local/share/zsh/site-functions/_miniserve\n    # For fish\n    miniserve --print-completions fish > ~/.config/fish/completions/miniserve.fish\n\n## systemd\n\nA hardened systemd-compatible unit file can be found in `packaging/miniserve@.service`. You could\ninstall this to `/etc/systemd/system/miniserve@.service` and start and enable `miniserve` as a\ndaemon on a specific serve path `/my/serve/path` like this:\n\n    systemctl enable --now miniserve@-my-serve-path\n\nKeep in mind that you'll have to use `systemd-escape` to properly escape a path for this usage.\n\nIn case you want to customize the particular flags that miniserve launches with, you can use\n\n    systemctl edit miniserve@-my-serve-path\n\nand set the `[Service]` part in the resulting `override.conf` file. For instance:\n\n    [Service]\n    ExecStart=/usr/bin/miniserve --enable-tar --enable-zip --no-symlinks --verbose -i ::1 -p 1234 --title hello --color-scheme monokai --color-scheme-dark monokai -- %I\n\nMake sure to leave the `%I` at the very end in place or the wrong path might be served. You\nmight additionally have to override `IPAddressAllow` and `IPAddressDeny` if you plan on making\nminiserve directly available on a public interface.\n\n## Binding behavior\n\nFor convenience reasons, miniserve will try to bind on all interfaces by default (if no `-i` is provided).\nIt will also do that if explicitly provided with `-i 0.0.0.0` or `-i ::`.\nIn all of the aforementioned cases, it will bind on both IPv4 and IPv6.\nIf provided with an explicit non-default interface, it will ONLY bind to that interface.\nYou can provide `-i` multiple times to bind to multiple interfaces at the same time.\n\n## Why use this over alternatives?\n\n- darkhttpd: Not easily available on Windows and it's not as easy as download-and-go.\n- Python built-in webserver: Need to have Python installed, it's low performance, and also doesn't do correct MIME type handling in some cases.\n- netcat: Not as convenient to use and sending directories is [somewhat involved](https://nakkaya.com/2009/04/15/using-netcat-for-file-transfers/).\n\n## Releasing\n\nThis is mostly a note for me on how to release this thing:\n\n- Make sure `CHANGELOG.md` is up to date.\n- `cargo release <version>`\n- `cargo release --execute <version>`\n- Releases will automatically be deployed by GitHub Actions.\n- Update Arch package."
}
