{
  "name": "xh",
  "full_name": "xh",
  "tap": "homebrew/core",
  "oldname": "ht-rust",
  "oldnames": [
    "ht-rust"
  ],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Friendly and fast tool for sending HTTP requests",
  "license": "MIT",
  "homepage": "https://github.com/ducaale/xh",
  "versions": {
    "stable": "0.18.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/ducaale/xh/archive/refs/tags/v0.18.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "ed16781248d60a1f86d8da206440e9c761520bcd00917213dc6eb68fe357999e"
    },
    "head": {
      "url": "https://github.com/ducaale/xh.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/xh/blobs/sha256:d61598252fc5fbb54df6eafebff6ca858d460357a45f6d1f6f6bae0551c11630",
          "sha256": "d61598252fc5fbb54df6eafebff6ca858d460357a45f6d1f6f6bae0551c11630"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/xh/blobs/sha256:4be4b4127f5e092eb010635197b27e9a7578447f2f4cbca3a27262b5207fc059",
          "sha256": "4be4b4127f5e092eb010635197b27e9a7578447f2f4cbca3a27262b5207fc059"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/xh/blobs/sha256:d761e673f263c3faecd46adced465de42066d766625e7f75d401189f9a17fba6",
          "sha256": "d761e673f263c3faecd46adced465de42066d766625e7f75d401189f9a17fba6"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/xh/blobs/sha256:1f40065f6ff5b6df2c9738588f260ff1f831d772537102380b1963b71f5d66e5",
          "sha256": "1f40065f6ff5b6df2c9738588f260ff1f831d772537102380b1963b71f5d66e5"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/xh/blobs/sha256:2637f17856ec93fea48593d9b3b10edf5958c02bc4a52b0e25f443fe672e3c03",
          "sha256": "2637f17856ec93fea48593d9b3b10edf5958c02bc4a52b0e25f443fe672e3c03"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/xh/blobs/sha256:bf162b38e669261cc35ad5f160f8053b66d74f4ce92ff5c550d5b40aa2dd26e7",
          "sha256": "bf162b38e669261cc35ad5f160f8053b66d74f4ce92ff5c550d5b40aa2dd26e7"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/xh/blobs/sha256:ed590304329cbd86904ff0ced04a11d7116e81287cebf975ea4b483dedc42b3b",
          "sha256": "ed590304329cbd86904ff0ced04a11d7116e81287cebf975ea4b483dedc42b3b"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/xh.rb",
  "ruby_source_checksum": {
    "sha256": "be0fcdaef295637879233b6a4f7c4fa6ba6b0e4415cd0f1273851b85dc1f53dc"
  },
  "date_added": "2021-02-14T00:51:18+00:00",
  "readme": "# xh\n[![Version info](https://img.shields.io/crates/v/xh.svg)](https://crates.io/crates/xh)\n[![Packaging status](https://repology.org/badge/tiny-repos/xh.svg)](https://repology.org/project/xh/versions)\n\n`xh` is a friendly and fast tool for sending HTTP requests. It reimplements as much\nas possible of [HTTPie's](https://httpie.io/) excellent design, with a focus\non improved performance.\n\n[![asciicast](/assets/xh-demo.gif)](https://asciinema.org/a/475190)\n\n## Installation\n\n### via cURL (Linux & macOS)\n\n```\ncurl -sfL https://raw.githubusercontent.com/ducaale/xh/master/install.sh | sh\n```\n\n### via Powershell (Windows)\n\n```\niwr -useb https://raw.githubusercontent.com/ducaale/xh/master/install.ps1 | iex\n```\n\n\n### via a package manager\n\n| OS                 | Method     | Command                                    |\n|--------------------|------------|--------------------------------------------|\n| Any                | Cargo\\*    | `cargo install xh`                         |\n| Any                | [Huber]    | `huber install xh`                         |\n| Android ([Termux]) | pkg        | `pkg install xh`                           |\n| Android ([Magisk]) | Magisk\\*\\* | `magisk --install-module <path/to/module>` |\n| Alpine Linux       | apk\\*\\*\\*  | `apk add xh`                               |\n| Arch Linux         | Pacman     | `pacman -S xh`                             |\n| Debian & Ubuntu    | Apt\\*\\*\\*\\*| `sudo apt install xh`                      |\n| FreeBSD            | FreshPorts | `pkg install xh`                           |\n| Linux & macOS      | Nixpkgs    | `nix-env -iA nixpkgs.xh`                   |\n| Linux & macOS      | Homebrew   | `brew install xh`                          |\n| macOS              | MacPorts   | `sudo port install xh`                     |\n| Windows            | Scoop      | `scoop install xh`                         |\n| Windows            | Chocolatey | `choco install xh`                         |\n\n\\* Make sure that you have Rust 1.64 or later installed\n\n\\*\\* To install the module pick one of these [releases](https://github.com/Magisk-Modules-Alt-Repo/xhhttp/releases)\n\n\\*\\*\\* The xh package is available in Edge and will be in v3.17+. It is built with native-tls only.\n\n\\*\\*\\*\\* You will need to add the apt repository from https://apt.cli.rs/\n\n[Huber]: https://github.com/innobead/huber#installing-huber\n[Magisk]: https://github.com/topjohnwu/Magisk\n[Termux]: https://github.com/termux/termux-app\n\n### via pre-built binaries\nThe [release page](https://github.com/ducaale/xh/releases) contains prebuilt binaries for Linux, macOS and Windows.\n\n## Usage\n```\nUSAGE:\n    xh [OPTIONS] <[METHOD] URL> [--] [REQUEST_ITEM]...\n\nARGS:\n    <[METHOD] URL>       The request URL, preceded by an optional HTTP method\n    <REQUEST_ITEM>...    Optional key-value pairs to be included in the request\n\nOPTIONS:\n    -j, --json                           (default) Serialize data items from the command line as a JSON object\n    -f, --form                           Serialize data items from the command line as form fields\n        --multipart                      Like --form, but force a multipart/form-data request even without files\n        --raw <RAW>                      Pass raw request data without extra processing\n        --pretty <STYLE>                 Controls output processing [possible values: all, colors, format, none]\n    -s, --style <THEME>                  Output coloring style [possible values: auto, solarized, monokai, fruity]\n        --response-charset <ENCODING>    Override the response encoding for terminal display purposes\n        --response-mime <MIME_TYPE>      Override the response mime type for coloring and formatting for the terminal\n    -p, --print <FORMAT>                 String specifying what the output should contain\n    -h, --headers                        Print only the response headers. Shortcut for --print=h\n    -b, --body                           Print only the response body. Shortcut for --print=b\n    -m, --meta                           Print only the response metadata. Shortcut for --print=m\n    -v, --verbose                        Print the whole request as well as the response\n        --all                            Show any intermediary requests/responses while following redirects with --follow\n    -P, --history-print <FORMAT>         The same as --print but applies only to intermediary requests/responses\n    -4, --ipv4                           Resolve hostname to ipv4 addresses only\n    -6, --ipv6                           Resolve hostname to ipv6 addresses only\n    -q, --quiet                          Do not print to stdout or stderr\n    -S, --stream                         Always stream the response body\n    -o, --output <FILE>                  Save output to FILE instead of stdout\n    -d, --download                       Download the body to a file instead of printing it\n    -c, --continue                       Resume an interrupted download. Requires --download and --output\n        --session <FILE>                 Create, or reuse and update a session\n        --session-read-only <FILE>       Create or read a session without updating it form the request/response exchange\n    -A, --auth-type <AUTH_TYPE>          Specify the auth mechanism [possible values: basic, bearer, digest]\n    -a, --auth <USER[:PASS] | TOKEN>     Authenticate as USER with PASS (-A basic|digest) or with TOKEN (-A bearer)\n        --ignore-netrc                   Do not use credentials from .netrc\n        --offline                        Construct HTTP requests without sending them anywhere\n        --check-status                   (default) Exit with an error status code if the server replies with an error\n    -F, --follow                         Do follow redirects\n        --max-redirects <NUM>            Number of redirects to follow. Only respected if --follow is used\n        --timeout <SEC>                  Connection timeout of the request\n        --proxy <PROTOCOL:URL>           Use a proxy for a protocol. For example: --proxy https:http://proxy.host:8080\n        --verify <VERIFY>                If \"no\", skip SSL verification. If a file path, use it as a CA bundle\n        --cert <FILE>                    Use a client side certificate for SSL\n        --cert-key <FILE>                A private key file to use with --cert\n        --ssl <VERSION>                  Force a particular TLS version [possible values: auto, tls1, tls1.1, tls1.2, tls1.3]\n        --native-tls                     Use the system TLS library instead of rustls (if enabled at compile time)\n        --https                          Make HTTPS requests if not specified in the URL\n        --http-version <VERSION>         HTTP version to use [possible values: 1.0, 1.1, 2]\n    -I, --ignore-stdin                   Do not attempt to read stdin\n        --curl                           Print a translation to a curl command\n        --curl-long                      Use the long versions of curl's flags\n        --help                           Print help information\n    -V, --version                        Print version information\n\nEach option can be reset with a --no-OPTION argument.\n```\n\nRun `xh help` for more detailed information.\n\n### Request Items\n\n`xh` uses [HTTPie's request-item syntax](https://httpie.io/docs#request-items) to set headers, request body, query string, etc.\n\n- `=`/`:=` for setting the request body's JSON or form fields (`=` for strings and `:=` for other JSON types).\n- `==` for adding query strings.\n- `@` for including files in multipart requests e.g `picture@hello.jpg` or `picture@hello.jpg;type=image/jpeg;filename=goodbye.jpg`.\n- `:` for adding or removing headers e.g `connection:keep-alive` or `connection:`.\n- `;` for including headers with empty values e.g `header-without-value;`.\n\nAn `@` prefix can be used to read a value from a file. For example: `x-api-key:@api-key.txt`.\n\nThe request body can also be read from standard input, or from a file using `@filename`.\n\nTo construct a complex JSON object, a JSON path can be used as a key e.g `app[container][0][id]=090-5`.\nFor more information on this syntax, refer to https://httpie.io/docs/cli/nested-json.\n\n### Shorthand form for URLs\n\nSimilar to HTTPie, specifying the scheme portion of the request URL is optional, and a leading colon works as shorthand\nfor localhost. `:8000` is equivalent to `localhost:8000`, and `:/path` is equivalent to `localhost/path`.\n\nURLs can have a leading `://` which allows quickly converting a URL into a valid xh or HTTPie command. For example\n`http://httpbin.org/json` becomes `http ://httpbin.org/json`.\n\n\n```sh\nxh http://localhost:3000/users # resolves to http://localhost:3000/users\nxh localhost:3000/users        # resolves to http://localhost:3000/users\nxh :3000/users                 # resolves to http://localhost:3000/users\nxh :/users                     # resolves to http://localhost:80/users\nxh example.com                 # resolves to http://example.com\nxh ://example.com              # resolves to http://example.com\n```\n\n### Making HTTPS requests by default\n\n`xh` will default to HTTPS scheme if the binary name is one of `xhs`, `https`, or `xhttps`. If you have installed `xh`\nvia a package manager, both `xh` and `xhs` should be available by default. Otherwise, you need to create one like this:\n\n```sh\ncd /path/to/xh && ln -s ./xh ./xhs\nxh httpbin.org/get  # resolves to http://httpbin.org/get\nxhs httpbin.org/get # resolves to https://httpbin.org/get\n```\n\n### Strict compatibility mode\n\nIf `xh` is invoked as `http` or `https` (by renaming the binary), or if the `XH_HTTPIE_COMPAT_MODE` environment variable is set,\nit will run in HTTPie compatibility mode. The only current difference is that `--check-status` is not enabled by default.\n\n## Examples\n\n```sh\n# Send a GET request\nxh httpbin.org/json\n\n# Send a POST request with body {\"name\": \"ahmed\", \"age\": 24}\nxh httpbin.org/post name=ahmed age:=24\n\n# Send a GET request with querystring id=5&sort=true\nxh get httpbin.org/json id==5 sort==true\n\n# Send a GET request and include a header named x-api-key with value 12345\nxh get httpbin.org/json x-api-key:12345\n\n# Send a POST request with body read from stdin.\necho \"[1, 2, 3]\" | xh post httpbin.org/post\n\n# Send a PUT request and pipe the result to less\nxh put httpbin.org/put id:=49 age:=25 | less\n\n# Download and save to res.json\nxh -d httpbin.org/json -o res.json\n\n# Make a request with a custom user agent\nxh httpbin.org/get user-agent:foobar\n```\n\n## How xh compares to HTTPie\n\n### Advantages\n\n- Improved startup speed.\n- Available as a single statically linked binary that's easy to install and carry around.\n- HTTP/2 support.\n- Builtin translation to curl commands with the `--curl` flag.\n- Short, cheatsheet-style output from `--help`. (For longer output, pass `help`.)\n\n### Disadvantages\n\n- Not all of HTTPie's features are implemented. ([#4](https://github.com/ducaale/xh/issues/4))\n- Header names are not case-sensitive.\n- No plugin system.\n- General immaturity. HTTPie is old and well-tested.\n- Worse documentation.\n\n### Other differences\n\n- `--check-status` is enabled unless `xh` is being used in\n  [strict compatibility mode](https://github.com/ducaale/xh#strict-compatibility-mode).\n- `rustls` is used by default instead of the system's TLS library. (If enabled at compile time, the `--native-tls` flag can be used.)\n- JSON keys are not sorted.\n- Formatted output is always UTF-8.\n\n## Similar or related Projects\n\n- [curlie](https://github.com/rs/curlie) - frontend to cURL that adds the ease of use of httpie\n- [httpie-go](https://github.com/nojima/httpie-go) - httpie-like HTTP client written in Go\n- [curl2httpie](https://github.com/dcb9/curl2httpie) - convert command arguments between cURL and HTTPie"
}
