{
  "name": "vulture",
  "full_name": "vulture",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Find dead Python code",
  "license": "MIT",
  "homepage": "https://github.com/jendrikseipp/vulture",
  "versions": {
    "stable": "2.7",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://files.pythonhosted.org/packages/de/ff/196ca63becc5faf5586202ab6e30102322adeea538bb45549d97ed38225d/vulture-2.7.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "67fb80a014ed9fdb599dd44bb96cb54311032a104106fc2e706ef7a6dad88032"
    },
    "head": {
      "url": "https://github.com/jendrikseipp/vulture.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vulture/blobs/sha256:7d5dfb1c1062bb14adee775412b7abbef11b38c630a3d80487c4f1ae6c78c152",
          "sha256": "7d5dfb1c1062bb14adee775412b7abbef11b38c630a3d80487c4f1ae6c78c152"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vulture/blobs/sha256:db8de365af3d73df7f7de4ac62175d676949f4ba895d7e4762fd897997a0f3bc",
          "sha256": "db8de365af3d73df7f7de4ac62175d676949f4ba895d7e4762fd897997a0f3bc"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vulture/blobs/sha256:76dc4f359ec6f15a3aafc86bbb17dcc1bf8847ae9b0d24fcd9ca4078d99004d6",
          "sha256": "76dc4f359ec6f15a3aafc86bbb17dcc1bf8847ae9b0d24fcd9ca4078d99004d6"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vulture/blobs/sha256:abf242b7c8b219f3c022173298de96be0cdbc9a7cab581623e0e676a1d4b4286",
          "sha256": "abf242b7c8b219f3c022173298de96be0cdbc9a7cab581623e0e676a1d4b4286"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vulture/blobs/sha256:69059507d049b8b05f9e84690d4b2f448946b299ffb62746662daf98628e53b0",
          "sha256": "69059507d049b8b05f9e84690d4b2f448946b299ffb62746662daf98628e53b0"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vulture/blobs/sha256:5efd3717512cb9dcf74601f148400fd427a8e27cd308677b8b4c864011d3e442",
          "sha256": "5efd3717512cb9dcf74601f148400fd427a8e27cd308677b8b4c864011d3e442"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vulture/blobs/sha256:832b6778a2859b8f5dc40a1edcca62fe0b0605c7018f8d7925e64d3d459cbc5b",
          "sha256": "832b6778a2859b8f5dc40a1edcca62fe0b0605c7018f8d7925e64d3d459cbc5b"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "python@3.11"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/vulture.rb",
  "ruby_source_checksum": {
    "sha256": "1f798d858445c68cb10871b17ee9a0d507a7e23f4431be2e2a3fc3714f2e1422"
  },
  "date_added": "2020-11-02T20:04:48+00:00",
  "readme": "# Vulture - Find dead code\n\n![CI:Test](https://github.com/jendrikseipp/vulture/workflows/CI/badge.svg)\n[![Codecov Badge](https://codecov.io/gh/jendrikseipp/vulture/branch/main/graphs/badge.svg)](https://codecov.io/gh/jendrikseipp/vulture?branch=main)\n\nVulture finds unused code in Python programs. This is useful for\ncleaning up and finding errors in large code bases. If you run Vulture\non both your library and test suite you can find untested code.\n\nDue to Python's dynamic nature, static code analyzers like Vulture are\nlikely to miss some dead code. Also, code that is only called implicitly\nmay be reported as unused. Nonetheless, Vulture can be a very helpful\ntool for higher code quality.\n\n## Features\n\n* fast: uses static code analysis\n* tested: tests itself and has complete test coverage\n* complements pyflakes and has the same output syntax\n* sorts unused classes and functions by size with `--sort-by-size`\n* supports Python \\>= 3.6\n\n## Installation\n\n    $ pip install vulture\n\n## Usage\n\n    $ vulture myscript.py  # or\n    $ python3 -m vulture myscript.py\n    $ vulture myscript.py mypackage/\n    $ vulture myscript.py --min-confidence 100  # Only report 100% dead code.\n\nThe provided arguments may be Python files or directories. For each\ndirectory Vulture analyzes all contained\n<span class=\"title-ref\">\\*.py</span> files.\n\nAfter you have found and deleted dead code, run Vulture again, because\nit may discover more dead code.\n\n## Types of unused code\n\nIn addition to finding unused functions, classes, etc., Vulture can detect\nunreachable code. Each chunk of dead code is assigned a *confidence value*\nbetween 60% and 100%, where a value of 100% signals that it is certain that the\ncode won't be executed. Values below 100% are *very rough* estimates (based on\nthe type of code chunk) for how likely it is that the code is unused.\n\n| Code type | Confidence value |\n| ------------------- | -- |\n| function/method/class argument, unreachable code | 100% |\n| import | 90% |\n| attribute, class, function, method, property, variable | 60% |\n\nYou can use the `--min-confidence` flag to set the minimum confidence\nfor code to be reported as unused. Use `--min-confidence 100` to only\nreport code that is guaranteed to be unused within the analyzed files.\n\n## Handling false positives\n\nWhen Vulture incorrectly reports chunks of code as unused, you have\nseveral options for suppressing the false positives. If fixing your false\npositives could benefit other users as well, please file an issue report.\n\n#### Whitelists\n\nThe recommended option is to add used code that is reported as unused to a\nPython module and add it to the list of scanned paths. To obtain such a\nwhitelist automatically, pass `--make-whitelist` to Vulture:\n\n    $ vulture mydir --make-whitelist > whitelist.py\n    $ vulture mydir whitelist.py\n\nNote that the resulting `whitelist.py` file will contain valid Python\nsyntax, but for Python to be able to *run* it, you will usually have to\nmake some modifications.\n\nWe collect whitelists for common Python modules and packages in\n`vulture/whitelists/` (pull requests are welcome).\n\n#### Ignoring files\n\nIf you want to ignore a whole file or directory, use the `--exclude` parameter\n(e.g., `--exclude \"*settings.py,*/docs/*.py,*/test_*.py,*/.venv/*.py\"`). The\nexclude patterns are matched against absolute paths.\n\n#### Flake8 noqa comments\n\n<!-- Hide noqa docs until we decide whether we want to support it.\nAnother way of ignoring errors is to annotate the line causing the false\npositive with `# noqa: <ERROR_CODE>` in a trailing comment (e.g., `#\nnoqa: V103`). The `ERROR_CODE` specifies what kind of dead code to\nignore (see the table below for the list of error codes). In case no\nerror code is specified, Vulture ignores all results for the line.\n(Note that the line number for decorated objects is the line number of\nthe first decorator.)\n-->\n\nFor compatibility with [flake8](https://flake8.pycqa.org/), Vulture\nsupports the [F401 and\nF841](https://flake8.pycqa.org/en/latest/user/error-codes.html) error\ncodes for ignoring unused imports (`# noqa: F401`) and unused local\nvariables (`# noqa: F841`). However, we recommend using whitelists instead\nof `noqa` comments, since `noqa` comments add visual noise to the code and\nmake it harder to read.\n\n#### Ignoring names\n\nYou can use `--ignore-names foo*,ba[rz]` to let Vulture ignore all names\nstarting with `foo` and the names `bar` and `baz`. Additionally, the\n`--ignore-decorators` option can be used to ignore functions decorated\nwith the given decorator. This is helpful for example in Flask projects,\nwhere you can use `--ignore-decorators \"@app.route\"` to ignore all\nfunctions with the `@app.route` decorator. Note that Vulture simplifies\ndecorators it cannot parse: `@foo.bar(x, y)` becomes \"@foo.bar\" and\n`@foo.bar(x, y).baz` becomes \"@\" internally.\n\nWe recommend using whitelists instead of `--ignore-names` or\n`--ignore-decorators` whenever possible, since whitelists are\nautomatically checked for syntactic correctness when passed to Vulture\nand often you can even pass them to your Python interpreter and let it\ncheck that all whitelisted code actually still exists in your project.\n\n#### Marking unused variables\n\nThere are situations where you can't just remove unused variables, e.g.,\nin function signatures. The recommended solution is to use the `del`\nkeyword as described in the\n[PyLint manual](http://pylint-messages.wikidot.com/messages:w0613) and on\n[StackOverflow](https://stackoverflow.com/a/14836005):\n\n```python\ndef foo(x, y):\n    del y\n    return x + 3\n```\n\nVulture will also ignore all variables that start with an underscore, so\nyou can use `_x, y = get_pos()` to mark unused tuple assignments or\nfunction arguments, e.g., `def foo(x, _y)`.\n\n#### Minimum confidence\n\nRaise the minimum [confidence value](#types-of-unused-code) with the `--min-confidence` flag.\n\n#### Unreachable code\n\nIf Vulture complains about code like `if False:`, you can use a Boolean\nflag `debug = False` and write `if debug:` instead. This makes the code\nmore readable and silences Vulture.\n\n#### Forward references for type annotations\n\nSee [#216](https://github.com/jendrikseipp/vulture/issues/216). For\nexample, instead of `def foo(arg: \"Sequence\"): ...`, we recommend using\n\n``` python\nfrom __future__ import annotations\n\ndef foo(arg: Sequence):\n    ...\n```\n\nif you're using Python 3.7+.\n\n\n## Configuration\n\nYou can also store command line arguments in `pyproject.toml` under the\n`tool.vulture` section. Simply remove leading dashes and replace all\nremaining dashes with underscores.\n\nOptions given on the command line have precedence over options in\n`pyproject.toml`.\n\nExample Config:\n\n``` toml\n[tool.vulture]\nexclude = [\"*file*.py\", \"dir/\"]\nignore_decorators = [\"@app.route\", \"@require_*\"]\nignore_names = [\"visit_*\", \"do_*\"]\nmake_whitelist = true\nmin_confidence = 80\npaths = [\"myscript.py\", \"mydir\"]\nsort_by_size = true\nverbose = true\n```\n\n## Version control integration\n\nYou can use a [pre-commit](https://pre-commit.com/#install) hook to run\nVulture before each commit. For this, install pre-commit and add the\nfollowing to the `.pre-commit-config.yaml` file in your repository:\n\n```yaml\nrepos:\n  - repo: https://github.com/jendrikseipp/vulture\n    rev: 'v2.3'  # or any later Vulture version\n    hooks:\n      - id: vulture\n```\n\nThen run `pre-commit install`. Finally, create a `pyproject.toml` file\nin your repository and specify all files that Vulture should check under\n`[tool.vulture] --> paths` (see above).\n\n## How does it work?\n\nVulture uses the `ast` module to build abstract syntax trees for all\ngiven files. While traversing all syntax trees it records the names of\ndefined and used objects. Afterwards, it reports the objects which have\nbeen defined, but not used. This analysis ignores scopes and only takes\nobject names into account.\n\nVulture also detects unreachable code by looking for code after\n`return`, `break`, `continue` and `raise` statements, and by searching\nfor unsatisfiable `if`- and `while`-conditions.\n\n## Sort by size\n\nWhen using the `--sort-by-size` option, Vulture sorts unused code by its\nnumber of lines. This helps developers prioritize where to look for dead\ncode first.\n\n## Examples\n\nConsider the following Python script (`dead_code.py`):\n\n``` python\nimport os\n\nclass Greeter:\n    def greet(self):\n        print(\"Hi\")\n\ndef hello_world():\n    message = \"Hello, world!\"\n    greeter = Greeter()\n    func_name = \"greet\"\n    greet_func = getattr(greeter, func_name)\n    greet_func()\n\nif __name__ == \"__main__\":\n    hello_world()\n```\n\nCalling :\n\n    $ vulture dead_code.py\n\nresults in the following output:\n\n    dead_code.py:1: unused import 'os' (90% confidence)\n    dead_code.py:4: unused function 'greet' (60% confidence)\n    dead_code.py:8: unused variable 'message' (60% confidence)\n\nVulture correctly reports `os` and `message` as unused but it fails to\ndetect that `greet` is actually used. The recommended method to deal\nwith false positives like this is to create a whitelist Python file.\n\n**Preparing whitelists**\n\nIn a whitelist we simulate the usage of variables, attributes, etc. For\nthe program above, a whitelist could look as follows:\n\n``` python\n# whitelist_dead_code.py\nfrom dead_code import Greeter\nGreeter.greet\n```\n\nAlternatively, you can pass `--make-whitelist` to Vulture and obtain an\nautomatically generated whitelist.\n\nPassing both the original program and the whitelist to Vulture\n\n    $ vulture dead_code.py whitelist_dead_code.py\n\nmakes Vulture ignore the `greet` method:\n\n    dead_code.py:1: unused import 'os' (90% confidence)\n    dead_code.py:8: unused variable 'message' (60% confidence)\n\n<!-- Hide noqa docs until we decide whether we want to support it.\n**Using \"# noqa\"**\n\n```python\nimport os  # noqa\n\nclass Greeter:  # noqa: V102\n    def greet(self):  # noqa: V103\n        print(\"Hi\")\n```\n\n## Error codes\n\nFor compatibility with [flake8](https://flake8.pycqa.org/), Vulture\nsupports the [F401 and\nF841](https://flake8.pycqa.org/en/latest/user/error-codes.html) error\ncodes.\n\n| Error codes |    Description    |\n| ----------- | ----------------- |\n| V101        | Unused attribute  |\n| V102        | Unused class      |\n| V103        | Unused function   |\n| V104, F401  | Unused import     |\n| V105        | Unused property   |\n| V106        | Unused method     |\n| V107, F841  | Unused variable   |\n| V201        | Unreachable code  |\n\n-->\n\n## Exit codes\n\n| Exit code |                          Description                          |\n| --------- | ------------------------------------------------------------- |\n|     0     | No dead code found                                            |\n|     1     | Invalid input (file missing, syntax error, wrong encoding)    |\n|     2     | Invalid command line arguments                                |\n|     3     | Dead code found                                               |\n\n## Similar programs\n\n  - [pyflakes](https://pypi.org/project/pyflakes/) finds unused imports\n    and unused local variables (in addition to many other programmatic\n    errors).\n  - [coverage](https://pypi.org/project/coverage/) finds unused code\n    more reliably than Vulture, but requires all branches of the code to\n    actually be run.\n  - [uncalled](https://pypi.org/project/uncalled/) finds dead code by\n    using the abstract syntax tree (like Vulture), regular expressions,\n    or both.\n  - [dead](https://pypi.org/project/dead/) finds dead code by using the\n    abstract syntax tree (like Vulture).\n\n## Participate\n\nPlease visit <https://github.com/jendrikseipp/vulture> to report any\nissues or to make pull requests.\n\n  - Contributing guide:\n    [CONTRIBUTING.md](https://github.com/jendrikseipp/vulture/blob/main/CONTRIBUTING.md)\n  - Release notes:\n    [CHANGELOG.md](https://github.com/jendrikseipp/vulture/blob/main/CHANGELOG.md)\n  - Roadmap:\n    [TODO.md](https://github.com/jendrikseipp/vulture/blob/main/TODO.md)"
}
