{
  "name": "libfuse",
  "full_name": "libfuse",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [
    "libfuse@3"
  ],
  "versioned_formulae": [
    "libfuse@2"
  ],
  "desc": "Reference implementation of the Linux FUSE interface",
  "license": "LGPL-2.1-only or GPL-2.0-only",
  "homepage": "https://github.com/libfuse/libfuse",
  "versions": {
    "stable": "3.15.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/libfuse/libfuse/releases/download/fuse-3.15.1/fuse-3.15.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "13ef77cda531a21c2131f9576042970e98035c0a5f019abf661506efd2d38a4e"
    },
    "head": {
      "url": "https://github.com/libfuse/libfuse.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "x86_64_linux": {
          "cellar": "/home/linuxbrew/.linuxbrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/libfuse/blobs/sha256:bbdf695b0085f7cd4715d5cdabf659f362546aa76ac7db4ef29740278ce95bff",
          "sha256": "bbdf695b0085f7cd4715d5cdabf659f362546aa76ac7db4ef29740278ce95bff"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "meson",
    "ninja"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [
    {
      "name": "linux",
      "cask": null,
      "download": null,
      "version": null,
      "contexts": [],
      "specs": [
        "stable",
        "head"
      ]
    }
  ],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/libfuse.rb",
  "ruby_source_checksum": {
    "sha256": "49351f7ff7af972165f4942cd93e8a1f34d214199aa75000d0caea789007348f"
  },
  "date_added": "2020-10-29T11:27:44+01:00",
  "readme": "libfuse\n=======\n\nAbout\n-----\n\nFUSE (Filesystem in Userspace) is an interface for userspace programs\nto export a filesystem to the Linux kernel. The FUSE project consists\nof two components: the *fuse* kernel module (maintained in the regular\nkernel repositories) and the *libfuse* userspace library (maintained\nin this repository). libfuse provides the reference implementation\nfor communicating with the FUSE kernel module.\n\nA FUSE file system is typically implemented as a standalone\napplication that links with libfuse. libfuse provides functions to\nmount the file system, unmount it, read requests from the kernel, and\nsend responses back. libfuse offers two APIs: a \"high-level\",\nsynchronous API, and a \"low-level\" asynchronous API. In both cases,\nincoming requests from the kernel are passed to the main program using\ncallbacks. When using the high-level API, the callbacks may work with\nfile names and paths instead of inodes, and processing of a request\nfinishes when the callback function returns. When using the low-level\nAPI, the callbacks must work with inodes and responses must be sent\nexplicitly using a separate set of API functions.\n\n\nDevelopment Status\n------------------\n\nlibfuse is shipped by all major Linux distributions and has been in\nproduction use across a wide range of systems for many years. However,\nat present libfuse does not have any active, regular contributors. The\ncurrent maintainer continues to apply pull requests and makes regular\nreleases, but unfortunately has no capacity to do any development\nbeyond addressing high-impact issues. When reporting bugs, please\nunderstand that unless you are including a pull request or are\nreporting a critical issue, you will probably not get a response. If\nyou are using libfuse, please consider contributing to the project.\n\n\nSupported Platforms\n-------------------\n\n* Linux (fully)\n* BSD (mostly/best-effort)\n* For OS-X, please use [OSXFUSE](https://osxfuse.github.io/)\n  \n\nInstallation\n------------\n\nYou can download libfuse from https://github.com/libfuse/libfuse/releases. To build and\ninstall, you must use [Meson](http://mesonbuild.com/) and\n[Ninja](https://ninja-build.org).  After downloading the tarball and `.sig` file, verify\nit using [signify](https://www.openbsd.org/papers/bsdcan-signify.html):\n\n    signify -V -m fuse-X.Y.Z.tar.gz -p fuse-X.Y.pub\n    \nThe `fuse-X.Y.pub` file contains the signing key and needs to be obtained from a\ntrustworthy source. Each libfuse release contains the signing key for the release after it\nin the `signify` directory, so you only need to manually acquire this file once when you\ninstall libfuse for the first time.\n\nAfter you have validated the tarball, extract it, create a (temporary) build directory and\nrun Meson:\n\n    $ tar xzf fuse-X.Y.Z.tar.gz; cd fuse-X.Y.Z\n    $ mkdir build; cd build\n    $ meson setup ..\n\nNormally, the default build options will work fine. If you\nnevertheless want to adjust them, you can do so with the\n*meson configure* command:\n\n    $ meson configure # list options\n    $ meson configure -D disable-mtab=true # set an option\n\nTo build, test, and install libfuse, you then use Ninja:\n\n    $ ninja\n    $ sudo python3 -m pytest test/\n    $ sudo ninja install\n\nRunning the tests requires the [py.test](http://www.pytest.org/)\nPython module. Instead of running the tests as root, the majority of\ntests can also be run as a regular user if *util/fusermount3* is made\nsetuid root first:\n\n    $ sudo chown root:root util/fusermount3\n    $ sudo chmod 4755 util/fusermount3\n    $ python3 -m pytest test/\n\nSecurity implications\n---------------------\n\nThe *fusermount3* program is installed setuid root. This is done to\nallow normal users to mount their own filesystem implementations.\n\nTo limit the harm that malicious users can do this way, *fusermount3*\nenforces the following limitations:\n\n  - The user can only mount on a mountpoint for which they have write\n    permission\n\n  - The mountpoint must not be a sticky directory which isn't owned by\n    the user (like /tmp usually is)\n\n  - No other user (including root) can access the contents of the\n    mounted filesystem (though this can be relaxed by allowing the use\n    of the *allow_other* and *allow_root* mount options in\n    */etc/fuse.conf*)\n\n\nIf you intend to use the *allow_other* mount options, be aware that\nFUSE has an unresolved [security\nbug](https://github.com/libfuse/libfuse/issues/15): if the\n*default_permissions* mount option is not used, the results of the\nfirst permission check performed by the file system for a directory\nentry will be re-used for subsequent accesses as long as the inode of\nthe accessed entry is present in the kernel cache - even if the\npermissions have since changed, and even if the subsequent access is\nmade by a different user. This is of little concern if the filesystem\nis accessible only to the mounting user (which has full access to the\nfilesystem anyway), but becomes a security issue when other users are\nallowed to access the filesystem (since they can exploit this to\nperform operations on the filesystem that they do not actually have\npermissions for).\n\nThis bug needs to be fixed in the Linux kernel and has been known\nsince 2006 but unfortunately no fix has been applied yet. If you\ndepend on correct permission handling for FUSE file systems, the only\nworkaround is to use `default_permissions` (which does not currently\nsupport ACLs), or to completely disable caching of directory entry\nattributes.\n\nBuilding your own filesystem\n------------------------------\n\nFUSE comes with several example file systems in the `example`\ndirectory. For example, the *passthrough* examples mirror the contents\nof the root directory under the mountpoint. Start from there and adapt\nthe code!\n\nThe documentation of the API functions and necessary callbacks is\nmostly contained in the files `include/fuse.h` (for the high-level\nAPI) and `include/fuse_lowlevel.h` (for the low-level API). An\nautogenerated html version of the API is available in the `doc/html`\ndirectory and at http://libfuse.github.io/doxygen.\n\n\nGetting Help\n------------\n\nIf you need help, please ask on the <fuse-devel@lists.sourceforge.net>\nmailing list (subscribe at\nhttps://lists.sourceforge.net/lists/listinfo/fuse-devel).\n\nPlease report any bugs on the GitHub issue tracker at\nhttps://github.com/libfuse/libfuse/issues."
}
