{
  "name": "zsh-history-substring-search",
  "full_name": "zsh-history-substring-search",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Zsh port of Fish shell's history search",
  "license": "BSD-3-Clause",
  "homepage": "https://github.com/zsh-users/zsh-history-substring-search",
  "versions": {
    "stable": "1.1.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/zsh-users/zsh-history-substring-search/archive/v1.1.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "9b52eca6c894dd98caa5f07160199f3f3179ff017575d5acc9fdc467b1ac70f8"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zsh-history-substring-search/blobs/sha256:389dd56ef87f77caff258d05baa26c20adbc586e6afa6bf2520c1c47c7095485",
          "sha256": "389dd56ef87f77caff258d05baa26c20adbc586e6afa6bf2520c1c47c7095485"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zsh-history-substring-search/blobs/sha256:389dd56ef87f77caff258d05baa26c20adbc586e6afa6bf2520c1c47c7095485",
          "sha256": "389dd56ef87f77caff258d05baa26c20adbc586e6afa6bf2520c1c47c7095485"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zsh-history-substring-search/blobs/sha256:389dd56ef87f77caff258d05baa26c20adbc586e6afa6bf2520c1c47c7095485",
          "sha256": "389dd56ef87f77caff258d05baa26c20adbc586e6afa6bf2520c1c47c7095485"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zsh-history-substring-search/blobs/sha256:389dd56ef87f77caff258d05baa26c20adbc586e6afa6bf2520c1c47c7095485",
          "sha256": "389dd56ef87f77caff258d05baa26c20adbc586e6afa6bf2520c1c47c7095485"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zsh-history-substring-search/blobs/sha256:389dd56ef87f77caff258d05baa26c20adbc586e6afa6bf2520c1c47c7095485",
          "sha256": "389dd56ef87f77caff258d05baa26c20adbc586e6afa6bf2520c1c47c7095485"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zsh-history-substring-search/blobs/sha256:389dd56ef87f77caff258d05baa26c20adbc586e6afa6bf2520c1c47c7095485",
          "sha256": "389dd56ef87f77caff258d05baa26c20adbc586e6afa6bf2520c1c47c7095485"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zsh-history-substring-search/blobs/sha256:0a6975d72e0b087069583d9e515248371780264481a106a2ec491cbc11945d6e",
          "sha256": "0a6975d72e0b087069583d9e515248371780264481a106a2ec491cbc11945d6e"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "zsh"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": "To activate the history search, add the following at the end of your .zshrc:\n\n  source $HOMEBREW_PREFIX/share/zsh-history-substring-search/zsh-history-substring-search.zsh\n\nYou will also need to restart your terminal for this change to take effect.\n",
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/zsh-history-substring-search.rb",
  "ruby_source_checksum": {
    "sha256": "8f34af724f0489478f5050f6c4914f41ede0686c665598aee1cd9b7fde648685"
  },
  "date_added": "2013-11-14T19:55:36-08:00",
  "readme": "# zsh-history-substring-search\n\nThis is a clean-room implementation of the [Fish shell][1]'s history search\nfeature, where you can type in any part of any command from history and then\npress chosen keys, such as the UP and DOWN arrows, to cycle through matches.\n\n[1]: http://fishshell.com\n[2]: http://www.zsh.org/mla/users/2009/msg00818.html\n[3]: http://sourceforge.net/projects/fizsh/\n[4]: https://github.com/robbyrussell/oh-my-zsh/pull/215\n[5]: https://github.com/zsh-users/zsh-history-substring-search\n[6]: https://github.com/zsh-users/zsh-syntax-highlighting\n\n\nRequirements\n------------------------------------------------------------------------------\n\n* [ZSH](http://zsh.sourceforge.net) 4.3 or newer\n\nInstall\n------------------------------------------------------------------------------\n\nUsing the [Homebrew]( https://brew.sh ) package manager:\n\n    brew install zsh-history-substring-search\n    echo 'source /usr/local/share/zsh-history-substring-search/zsh-history-substring-search.zsh' >> ~/.zshrc\n\nUsing [Oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh):\n\n1. Clone this repository in oh-my-zsh's plugins directory:\n\n        git clone https://github.com/zsh-users/zsh-history-substring-search ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-history-substring-search\n\n2. Activate the plugin in `~/.zshrc`:\n\n        plugins=( [plugins...] zsh-history-substring-search)\n\n3. Source `~/.zshrc`  to take changes into account:\n\n        source ~/.zshrc\n\nUsage\n------------------------------------------------------------------------------\n\n1.  Load this script into your interactive ZSH session:\n\n        % source zsh-history-substring-search.zsh\n\n    If you want to use [zsh-syntax-highlighting][6] along with this script,\n    then make sure that you load it *before* you load this script:\n\n        % source zsh-syntax-highlighting.zsh\n        % source zsh-history-substring-search.zsh\n\n2.  Bind keyboard shortcuts to this script's functions.\n\n    Users typically bind their UP and DOWN arrow keys to this script, thus:\n    * Run `cat -v` in your favorite terminal emulator to observe key codes.\n      (**NOTE:** In some cases, `cat -v` shows the wrong key codes.  If the\n      key codes shown by `cat -v` don't work for you, press `<C-v><UP>` and\n      `<C-v><DOWN>` at your ZSH command line prompt for correct key codes.)\n    * Press the UP arrow key and observe what is printed in your terminal.\n    * Press the DOWN arrow key and observe what is printed in your terminal.\n    * Press the Control and C keys simultaneously to terminate the `cat -v`.\n    * Use your observations from the previous steps to create key bindings.\n      For example, if you observed `^[[A` for UP and `^[[B` for DOWN, then:\n\n          bindkey '^[[A' history-substring-search-up\n          bindkey '^[[B' history-substring-search-down\n\n      However, if the observed values don't work, you can try using terminfo:\n\n          bindkey \"$terminfo[kcuu1]\" history-substring-search-up\n          bindkey \"$terminfo[kcud1]\" history-substring-search-down\n\n      You might also want to bind the Control-P/N keys for use in EMACS mode:\n\n          bindkey -M emacs '^P' history-substring-search-up\n          bindkey -M emacs '^N' history-substring-search-down\n\n      You might also want to bind the `k` and `j` keys for use in VI mode:\n\n          bindkey -M vicmd 'k' history-substring-search-up\n          bindkey -M vicmd 'j' history-substring-search-down\n\n3.  Type any part of any previous command and then:\n\n    * Press the `history-substring-search-up` key, which was configured in\n      step 2 above, to select the nearest command that (1) contains your query\n      and (2) is also older than the current command in your command history.\n\n    * Press the `history-substring-search-down` key, which was configured in\n      step 2 above, to select the nearest command that (1) contains your query\n      and (2) is also newer than the current command in your command history.\n\n    * Press `^U` the Control and U keys simultaneously to abort the search.\n\n4.  If a matching command spans more than one line of text, press the LEFT\n    arrow key to move the cursor away from the end of the command, and then:\n\n    * Press the `history-substring-search-up` key, which was configured in\n      step 2 above, to move the cursor to the line above the cursored line.\n      When the cursor reaches the first line of the command, pressing the\n      `history-substring-search-up` key again will cause this script to\n      perform another search.\n\n    * Press the `history-substring-search-down` key, which was configured in\n      step 2 above, to move the cursor to the line below the cursored line.\n      When the cursor reaches the last line of the command, pressing the\n      `history-substring-search-down` key, which was configured in step 2\n      above, again will cause this script to perform another search.\n\n\nConfiguration\n------------------------------------------------------------------------------\n\nThis script defines the following global variables. You may override their\ndefault values.\n\n* `HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND` is a global variable that defines\n  how the query should be highlighted inside a matching command. Its default\n  value causes this script to highlight using bold, white text on a magenta\n  background. See the \"Character Highlighting\" section in the zshzle(1) man\n  page to learn about the kinds of values you may assign to this variable.\n\n* `HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_NOT_FOUND` is a global variable that\n  defines how the query should be highlighted when no commands in the\n  history match it. Its default value causes this script to highlight using\n  bold, white text on a red background. See the \"Character Highlighting\"\n  section in the zshzle(1) man page to learn about the kinds of values you\n  may assign to this variable.\n\n* `HISTORY_SUBSTRING_SEARCH_GLOBBING_FLAGS` is a global variable that defines\n  how the command history will be searched for your query. Its default value\n  causes this script to perform a case-insensitive search. See the \"Globbing\n  Flags\" section in the zshexpn(1) man page to learn about the kinds of\n  values you may assign to this variable.\n\n* `HISTORY_SUBSTRING_SEARCH_FUZZY` is a global variable that defines\n  how the command history will be searched for your query. If set to a non-empty\n  value, causes this script to perform a fuzzy search by words, matching in\n  given order e.g. `ab c` will match `*ab*c*`\n\n* `HISTORY_SUBSTRING_SEARCH_PREFIXED` is a global variable that defines how\n  the command history will be searched for your query. If set to a non-empty\n  value, your query will be matched against the start of each history entry.\n  For example, if this variable is empty, `ls` will match `ls -l` and `echo\n  ls`; if it is non-empty, `ls` will only match `ls -l`.\n\n* `HISTORY_SUBSTRING_SEARCH_ENSURE_UNIQUE` is a global variable that defines\n  whether all search results returned are _unique_. If set to a non-empty\n  value, then only unique search results are presented. This behaviour is off\n  by default. An alternative way to ensure that search results are unique is\n  to use `setopt HIST_IGNORE_ALL_DUPS`. If this configuration variable is off\n  and `setopt HIST_IGNORE_ALL_DUPS` is unset, then `setopt HIST_FIND_NO_DUPS`\n  is still respected and it makes this script skip duplicate _adjacent_ search\n  results as you cycle through them, but this does not guarantee that search\n  results are unique: if your search results were \"Dog\", \"Dog\", \"HotDog\",\n  \"Dog\", then cycling them gives \"Dog\", \"HotDog\", \"Dog\". Notice that the \"Dog\"\n  search result appeared twice as you cycled through them. If you wish to\n  receive globally unique search results only once, then use this\n  configuration variable, or use `setopt HIST_IGNORE_ALL_DUPS`.\n\n\nHistory\n------------------------------------------------------------------------------\n\n* September 2009: [Peter Stephenson][2] originally wrote this script and it\n  published to the zsh-users mailing list.\n\n* January 2011: Guido van Steen (@guidovansteen) revised this script and\n  released it under the 3-clause BSD license as part of [fizsh][3], the\n  Friendly Interactive ZSHell.\n\n* January 2011: Suraj N. Kurapati (@sunaku) extracted this script from\n  [fizsh][3] 1.0.1, refactored it heavily, and finally repackaged it as an\n  [oh-my-zsh plugin][4] and as an independently loadable [ZSH script][5].\n\n* July 2011: Guido van Steen, Suraj N. Kurapati, and Sorin Ionescu\n  (@sorin-ionescu) [further developed it][4] with Vincent Guerci (@vguerci).\n\n* March 2016: Geza Lore (@gezalore) greatly refactored it in pull request #55."
}
