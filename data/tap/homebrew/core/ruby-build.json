{
  "name": "ruby-build",
  "full_name": "ruby-build",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Install various Ruby versions and implementations",
  "license": "MIT",
  "homepage": "https://github.com/rbenv/ruby-build",
  "versions": {
    "stable": "20230717",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/rbenv/ruby-build/archive/v20230717.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "453461509859ae1d49aee16061264f86abe26f88ad32c0665b4eea901e2dbae2"
    },
    "head": {
      "url": "https://github.com/rbenv/ruby-build.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ruby-build/blobs/sha256:22802454be9a900c2d8ca2ed94ccf9fb443da505ae5b207c37cd4da15da98891",
          "sha256": "22802454be9a900c2d8ca2ed94ccf9fb443da505ae5b207c37cd4da15da98891"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "autoconf",
    "libyaml",
    "pkg-config",
    "readline"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": "ruby-build installs a non-Homebrew OpenSSL for each Ruby version installed and these are never upgraded.\n\nTo link Rubies to Homebrew's OpenSSL 1.1 (which is upgraded) add the following\nto your shell profile e.g. ~/.profile or ~/.zshrc:\n  export RUBY_CONFIGURE_OPTS=\"--with-openssl-dir=$(brew --prefix openssl@1.1)\"\n\nNote: this may interfere with building old versions of Ruby (e.g <2.4) that use\nOpenSSL <1.1.\n",
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/ruby-build.rb",
  "ruby_source_checksum": {
    "sha256": "c6d551860177d8002b9cf433504bc2483166149eb76399a9e56c0243dd5d3c5f"
  },
  "date_added": "2011-09-06T22:49:51-05:00",
  "readme": "# ruby-build\n\nruby-build is a command-line tool that simplifies installation of any Ruby version from source on Unix-like systems.\n\nIt is available as a plugin for [rbenv][] as the `rbenv install` command, or as a standalone program as the `ruby-build` command.\n\n## Installation\n\n### Homebrew package manager\n```sh\nbrew install ruby-build\n```\n\nUpgrade with:\n```sh\nbrew upgrade ruby-build\n```\n\n### Clone as rbenv plugin using git\n```sh\ngit clone https://github.com/rbenv/ruby-build.git \"$(rbenv root)\"/plugins/ruby-build\n```\n\nUpgrade with:\n```sh\ngit -C \"$(rbenv root)\"/plugins/ruby-build pull\n```\n\n### Install manually as a standalone program\n\nFirst, download a tarball from https://github.com/rbenv/ruby-build/releases/latest. Then:\n```sh\ntar -xzf ruby-build-*.tar.gz\nPREFIX=/usr/local ./ruby-build-*/install.sh\n```\n\n## Usage\n\n### Basic Usage\n\n```sh\n# As an rbenv plugin\n$ rbenv install --list                 # lists all available versions of Ruby\n$ rbenv install 2.2.0                  # installs Ruby 2.2.0 to ~/.rbenv/versions\n\n# As a standalone program\n$ ruby-build --definitions             # lists all available versions of Ruby\n$ ruby-build 2.2.0 ~/local/ruby-2.2.0  # installs Ruby 2.2.0 to ~/local/ruby-2.2.0\n```\n\n> **Warning**  \n> ruby-build mostly does not verify that system dependencies are present before downloading and attempting to compile Ruby from source. Please ensure that [all requisite libraries][build-env] such as build tools and development headers are already present on your system.\n\nBasically, what ruby-build does when installing a Ruby version is this:\n- Downloads an official tarball of Ruby source code;\n- Extracts the archive into a temporary directory on your system;\n- Executes `./configure --prefix=/path/to/destination` in the source code;\n- Runs `make install` to compile Ruby;\n- Verifies that the installed Ruby is functional.\n\nDepending on the context, ruby-build does a little bit more than the above: for example, it will try to link Ruby to the appropriate OpenSSL version, even if that means downloading and compiling OpenSSL itself; it will discover and link to Homebrew-installed instances of some libraries like libyaml and readline, etc.\n\n### Advanced Usage\n\n#### Custom Build Definitions\n\nTo install a version of Ruby that is not recognized by ruby-build, you can specify the path to a custom build definition file in place of a Ruby version number.\n\nCheck out [default build definitions][definitions] as examples on how to write definition files.\n\n#### Custom Build Configuration\n\nThe build process may be configured through the following environment variables:\n\n| Variable                        | Function                                                                                         |\n| ------------------------------- | ------------------------------------------------------------------------------------------------ |\n| `TMPDIR`                        | Where temporary files are stored.                                                                |\n| `RUBY_BUILD_BUILD_PATH`         | Where sources are downloaded and built. (Default: a timestamped subdirectory of `TMPDIR`)        |\n| `RUBY_BUILD_CACHE_PATH`         | Where to cache downloaded package files. (Default: `~/.rbenv/cache` if invoked as rbenv plugin)  |\n| `RUBY_BUILD_HTTP_CLIENT`        | One of `aria2c`, `curl`, or `wget` to use for downloading. (Default: first one found in PATH)    |\n| `RUBY_BUILD_ARIA2_OPTS`         | Additional options to pass to `aria2c` for downloading.                                          |\n| `RUBY_BUILD_CURL_OPTS`          | Additional options to pass to `curl` for downloading.                                            |\n| `RUBY_BUILD_WGET_OPTS`          | Additional options to pass to `wget` for downloading.                                            |\n| `RUBY_BUILD_MIRROR_URL`         | Custom mirror URL root.                                                                          |\n| `RUBY_BUILD_MIRROR_PACKAGE_URL` | Custom complete mirror URL (e.g. http://mirror.example.com/package-1.0.0.tar.gz).                  |\n| `RUBY_BUILD_SKIP_MIRROR`        | Bypass the download mirror and fetch all package files from their original URLs.                 |\n| `RUBY_BUILD_ROOT`               | Custom build definition directory. (Default: `share/ruby-build`)                                 |\n| `RUBY_BUILD_DEFINITIONS`        | Additional paths to search for build definitions. (Colon-separated list)                         |\n| `CC`                            | Path to the C compiler.                                                                          |\n| `RUBY_CFLAGS`                   | Additional `CFLAGS` options (_e.g.,_ to override `-O3`).                                         |\n| `CONFIGURE_OPTS`                | Additional `./configure` options.                                                                |\n| `MAKE`                          | Custom `make` command (_e.g.,_ `gmake`).                                                         |\n| `MAKE_OPTS` / `MAKEOPTS`        | Additional `make` options.                                                                       |\n| `MAKE_INSTALL_OPTS`             | Additional `make install` options.                                                               |\n| `RUBY_CONFIGURE_OPTS`           | Additional `./configure` options (applies only to Ruby source).                                  |\n| `RUBY_MAKE_OPTS`                | Additional `make` options (applies only to Ruby source).                                         |\n| `RUBY_MAKE_INSTALL_OPTS`        | Additional `make install` options (applies only to Ruby source).                                 |\n\n#### Applying Patches\n\nBoth `rbenv install` and `ruby-build` commands support the `-p/--patch` flag to apply a patch to the Ruby source code before building. Patches are read from standard input:\n\n```sh\n# applying a single patch\n$ rbenv install --patch 1.9.3-p429 < /path/to/ruby.patch\n\n# applying a patch from HTTP\n$ rbenv install --patch 1.9.3-p429 < <(curl -sSL http://git.io/ruby.patch)\n\n# applying multiple patches\n$ cat fix1.patch fix2.patch | rbenv install --patch 1.9.3-p429\n```\n\n#### Checksum Verification\n\nAll Ruby definition files bundled with ruby-build include checksums for packages, meaning that all externally downloaded packages are automatically checked for integrity after fetching.\n\nSee the next section for more information on how to author checksums.\n\n#### Package Mirrors\n\nTo speed up downloads, ruby-build fetches package files from a mirror hosted on\nAmazon CloudFront. To benefit from this, the packages must specify their checksum:\n\n```sh\n# example:\ninstall_package \"ruby-2.6.5\" \"https://ruby-lang.org/ruby-2.6.5.tgz#<SHA2>\"\n```\n\nruby-build will first try to fetch this package from `$RUBY_BUILD_MIRROR_URL/<SHA2>`\n(note: this is the complete URL), where `<SHA2>` is the checksum for the file. It\nwill fall back to downloading the package from the original location if:\n- the package was not found on the mirror;\n- the mirror is down;\n- the download is corrupt, i.e. the file's checksum doesn't match;\n- no tool is available to calculate the checksum; or\n- `RUBY_BUILD_SKIP_MIRROR` is enabled.\n\nYou may specify a custom mirror by setting `RUBY_BUILD_MIRROR_URL`.\n\nIf a mirror site doesn't conform to the above URL format, you can specify the\ncomplete URL by setting `RUBY_BUILD_MIRROR_PACKAGE_URL`. It behaves the same as\n`RUBY_BUILD_MIRROR_URL` except being a complete URL.\n\nThe default ruby-build download mirror is sponsored by\n[Basecamp](https://basecamp.com/).\n\n#### Keeping the build directory after installation\n\nBoth `ruby-build` and `rbenv install` accept the `-k` or `--keep` flag, which\ntells ruby-build to keep the downloaded source after installation. This can be\nuseful if you need to use `gdb` and `memprof` with Ruby.\n\nSource code will be kept in a parallel directory tree `~/.rbenv/sources` when\nusing `--keep` with the `rbenv install` command. You should specify the\nlocation of the source code with the `RUBY_BUILD_BUILD_PATH` environment\nvariable when using `--keep` with `ruby-build`.\n\n## Getting Help\n\nPlease see the [ruby-build wiki][wiki] for solutions to common problems.\n\nIf you can't find an answer on the wiki, open an issue on the [issue tracker][].\nBe sure to include the full build log for build failures.\n\n\n  [rbenv]: https://github.com/rbenv/rbenv#readme\n  [definitions]: https://github.com/rbenv/ruby-build/tree/master/share/ruby-build\n  [wiki]: https://github.com/rbenv/ruby-build/wiki\n  [build-env]: https://github.com/rbenv/ruby-build/wiki#suggested-build-environment\n  [issue tracker]: https://github.com/rbenv/ruby-build/issues"
}
