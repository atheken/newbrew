{
  "name": "mockery",
  "full_name": "mockery",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Mock code autogenerator for Golang",
  "license": "BSD-3-Clause",
  "homepage": "https://github.com/vektra/mockery",
  "versions": {
    "stable": "2.32.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/vektra/mockery/archive/refs/tags/v2.32.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "1252e562ccf874195044ef061be5a3e9897625acb57d75ad82c7ce7fd59d0ba6"
    },
    "head": {
      "url": "https://github.com/vektra/mockery.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mockery/blobs/sha256:1a2dc8c806d166cf2913cf4385f698e66b9c179b5c517b178571451c3af708ca",
          "sha256": "1a2dc8c806d166cf2913cf4385f698e66b9c179b5c517b178571451c3af708ca"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mockery/blobs/sha256:bf4ed22f09a13037bbfb1e90c1e27b43f43eb6c100fb580351ce69a66f9806fb",
          "sha256": "bf4ed22f09a13037bbfb1e90c1e27b43f43eb6c100fb580351ce69a66f9806fb"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mockery/blobs/sha256:796d22ce8c7e7c0a7715c3fe69dfc52092b2e260fdfc49c7850102f28d0a0e28",
          "sha256": "796d22ce8c7e7c0a7715c3fe69dfc52092b2e260fdfc49c7850102f28d0a0e28"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mockery/blobs/sha256:7c5c21d73020debca0792bc6422c77ce5e25e9c52b1a57c872cbf2818da28668",
          "sha256": "7c5c21d73020debca0792bc6422c77ce5e25e9c52b1a57c872cbf2818da28668"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mockery/blobs/sha256:2d32894d264b5b55abd4fcb9e6cddf4f8ef76a987ebd7157a431b38e2e93b9ad",
          "sha256": "2d32894d264b5b55abd4fcb9e6cddf4f8ef76a987ebd7157a431b38e2e93b9ad"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mockery/blobs/sha256:efc01861cab2eb73ae35e2e4b224e3e622d4e9e639e10a25ac5d70379200e0a4",
          "sha256": "efc01861cab2eb73ae35e2e4b224e3e622d4e9e639e10a25ac5d70379200e0a4"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mockery/blobs/sha256:b3ea48848d7340fcb3fb727e9f98c5379e6c4ac3612336c30f60c9f933c2733b",
          "sha256": "b3ea48848d7340fcb3fb727e9f98c5379e6c4ac3612336c30f60c9f933c2733b"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/mockery.rb",
  "ruby_source_checksum": {
    "sha256": "57b98cdaffb615f4aec0c6c82018566fb4fd0b0eddbcc6131a1f26d7452c387a"
  },
  "date_added": "2020-12-24T11:08:55+00:00",
  "readme": "\nmockery\n=======\n[![Release](https://github.com/vektra/mockery/actions/workflows/release.yml/badge.svg)](https://github.com/vektra/mockery/actions/workflows/release.yml) [![go.dev reference](https://img.shields.io/badge/go.dev-reference-007d9c?logo=go&logoColor=white&style=flat-square)](https://pkg.go.dev/github.com/vektra/mockery/v2?tab=overview) ![GitHub go.mod Go version](https://img.shields.io/github/go-mod/go-version/vektra/mockery) ![GitHub release (latest SemVer)](https://img.shields.io/github/v/release/vektra/mockery) [![Go Report Card](https://goreportcard.com/badge/github.com/vektra/mockery)](https://goreportcard.com/report/github.com/vektra/mockery) [![codecov](https://codecov.io/gh/vektra/mockery/branch/master/graph/badge.svg)](https://codecov.io/gh/vektra/mockery)\n\nmockery provides the ability to easily generate mocks for Golang interfaces using the [stretchr/testify/mock](https://pkg.go.dev/github.com/stretchr/testify/mock?tab=doc) package. It removes the boilerplate coding required to use mocks.\n\nDocumentation\n--------------\n\nDocumentation is found at out [GitHub Pages site](https://vektra.github.io/mockery/).\n\nDevelopment\n------------\n\ntaskfile.dev is used for build tasks. Initialize all go build tools:\n\n```\ngo mod download -x\n```\n\nYou can run any of the steps listed in `Taskfile.yml`:\n\n```\n$ task test\ntask: [test] go test -v -coverprofile=coverage.txt ./...\n```\n\nDevelopment Efforts\n-------------------\n\n### v1\n\nv1 is the original version of the software, and is no longer supported.\n\n### v2\n\n`mockery` is currently in v2, which originally included cosmetic and configuration improvements over v1, but also implements a number of quality-of-life additions.\n\n### v3\n\n[v3](https://github.com/vektra/mockery/projects/3) will include a ground-up overhaul of the entire codebase and will completely change how mockery works internally and externally. The highlights of the project are:\n- Moving towards a package-based model instead of a file-based model. `mockery` currently iterates over every file in a project and calls `package.Load` on each one, which is time-consuming. Moving towards a model where the entire package is loaded at once will dramatically reduce runtime, and will simplify logic. Additionally, supporting only a single mode of operation (package mode) will greatly increase the intuitiveness of the software.\n- Configuration-driven generation. `v3` will be entirely driven by configuration, meaning:\n  * You specify the packages you want mocked, instead of relying on it auto-discovering your package. Auto-discovery in theory sounds great, but in practice it leads to a great amount of complexity for very little benefit.\n  * Package- or interface-specific overrides can be given that change mock generation settings on a granular level. This will allow your mocks to be generated in a heterogeneous manner, and will be made explicit by YAML configuration.\n - Proper error reporting. Errors across the board will be done in accordance with modern Golang practices\n - Variables in generated mocks will be given meaningful names.\n\n\n\nStargazers\n----------\n\n[![Stargazers over time](https://starchart.cc/vektra/mockery.svg)](https://starchart.cc/vektra/mockery)"
}
