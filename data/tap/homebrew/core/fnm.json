{
  "name": "fnm",
  "full_name": "fnm",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Fast and simple Node.js version manager",
  "license": "GPL-3.0-only",
  "homepage": "https://github.com/Schniz/fnm",
  "versions": {
    "stable": "1.35.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/Schniz/fnm/archive/v1.35.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "31b29e4534f17240ae576c9b726498bf551f1c14b3a0fb3ecc9f4aa95843d27a"
    },
    "head": {
      "url": "https://github.com/Schniz/fnm.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fnm/blobs/sha256:41b0b4de195053d7e0783a450f8dd39d5d72602df49add9476bdd8492323b1b9",
          "sha256": "41b0b4de195053d7e0783a450f8dd39d5d72602df49add9476bdd8492323b1b9"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fnm/blobs/sha256:fc3e5e4fa5564f86632cd597221363f9a17f1e22b74aca03a91bcfc4d2779629",
          "sha256": "fc3e5e4fa5564f86632cd597221363f9a17f1e22b74aca03a91bcfc4d2779629"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fnm/blobs/sha256:071a1fd257337f5117e250aa6d717c0ae0a6068b45e39058f5ed1ea1c270641c",
          "sha256": "071a1fd257337f5117e250aa6d717c0ae0a6068b45e39058f5ed1ea1c270641c"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fnm/blobs/sha256:2c307a1b9300d457839ea51fe2e6737a022c973923b2a159b2066ae0f188ac91",
          "sha256": "2c307a1b9300d457839ea51fe2e6737a022c973923b2a159b2066ae0f188ac91"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fnm/blobs/sha256:ed23f0955e804b4730aa9c88bd0294514e7c9638e8e3be4e5f1c4acf90f2a294",
          "sha256": "ed23f0955e804b4730aa9c88bd0294514e7c9638e8e3be4e5f1c4acf90f2a294"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fnm/blobs/sha256:5995db0e7d6fa3f99072534e402561e6270114ba521a6f81d87698640507792b",
          "sha256": "5995db0e7d6fa3f99072534e402561e6270114ba521a6f81d87698640507792b"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fnm/blobs/sha256:880434fe4224787d632b52126de18bfbb3953ba5f10f1b62ed6c2b1a1f7c39ac",
          "sha256": "880434fe4224787d632b52126de18bfbb3953ba5f10f1b62ed6c2b1a1f7c39ac"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "zlib"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/fnm.rb",
  "ruby_source_checksum": {
    "sha256": "60567273e4555b2b7fe1b9d95729e94f6c39441d0e77bf2417457a78203eff3c"
  },
  "date_added": "2020-10-26T12:29:20+00:00",
  "readme": "<h1 align=\"center\">\n  Fast Node Manager (<code>fnm</code>)\n  <img alt=\"Amount of downloads\" src=\"https://img.shields.io/github/downloads/Schniz/fnm/total.svg?style=flat\" />\n  <a href=\"https://github.com/Schniz/fnm/actions\"><img src=\"https://img.shields.io/github/actions/workflow/status/Schniz/fnm/rust.yml?branch=master&label=workflow\" alt=\"GitHub Actions workflow status\" /></a>\n</h1>\n\n> :rocket: Fast and simple Node.js version manager, built in Rust\n\n<div align=\"center\">\n  <img src=\"./docs/fnm.svg\" alt=\"Blazing fast!\">\n</div>\n\n## Features\n\n:earth_americas: Cross-platform support (macOS, Windows, Linux)\n\n:sparkles: Single file, easy installation, instant startup\n\n:rocket: Built with speed in mind\n\n:open_file_folder: Works with `.node-version` and `.nvmrc` files\n\n## Installation\n\n### Using a script (macOS/Linux)\n\nFor `bash`, `zsh` and `fish` shells, there's an [automatic installation script](./.ci/install.sh).\n\nFirst ensure that `curl` and `unzip` are already installed on you operating system. Then execute:\n\n```sh\ncurl -fsSL https://fnm.vercel.app/install | bash\n```\n\n#### Upgrade\n\nOn macOS, it is as simple as `brew upgrade fnm`.\n\nOn other operating systems, upgrading `fnm` is almost the same as installing it. To prevent duplication in your shell config file add `--skip-shell` to install command.\n\n#### Parameters\n\n`--install-dir`\n\nSet a custom directory for fnm to be installed. The default is `$HOME/.fnm`.\n\n`--skip-shell`\n\nSkip appending shell specific loader to shell config file, based on the current user shell, defined in `$SHELL`. e.g. for Bash, `$HOME/.bashrc`. `$HOME/.zshrc` for Zsh. For Fish - `$HOME/.config/fish/conf.d/fnm.fish`\n\n`--force-install`\n\nmacOS installations using the installation script are deprecated in favor of the Homebrew formula, but this forces the script to install using it anyway.\n\nExample:\n\n```sh\ncurl -fsSL https://fnm.vercel.app/install | bash -s -- --install-dir \"./.fnm\" --skip-shell\n```\n\n### Manually\n\n#### Using Homebrew (macOS/Linux)\n\n```sh\nbrew install fnm\n```\n\nThen, [set up your shell for fnm](#shell-setup)\n\n#### Using Winget (Windows)\n\n```sh\nwinget install Schniz.fnm\n```\n\n#### Using Scoop (Windows)\n\n```sh\nscoop install fnm\n```\n\nThen, [set up your shell for fnm](#shell-setup)\n\n#### Using Chocolatey (Windows)\n\n```sh\nchoco install fnm\n```\n\nThen, [set up your shell for fnm](#shell-setup)\n\n#### Using Cargo (Linux/macOS/Windows)\n\n```sh\ncargo install fnm\n```\n\nThen, [set up your shell for fnm](#shell-setup)\n\n#### Using a release binary (Linux/macOS/Windows)\n\n- Download the [latest release binary](https://github.com/Schniz/fnm/releases) for your system\n- Make it available globally on `PATH` environment variable\n- [Set up your shell for fnm](#shell-setup)\n\n### Removing\n\nTo remove fnm (üò¢), just delete the `.fnm` folder in your home directory. You should also edit your shell configuration to remove any references to fnm (ie. read [Shell Setup](#shell-setup), and do the opposite).\n\n## Completions\n\nfnm ships its completions with the binary:\n\n```sh\nfnm completions --shell <SHELL>\n```\n\nWhere `<SHELL>` can be one of the supported shells:\n\n- `bash`\n- `zsh`\n- `fish`\n- `powershell`\n\nPlease follow your shell instructions to install them.\n\n### Shell Setup\n\nEnvironment variables need to be setup before you can start using fnm.\nThis is done by evaluating the output of `fnm env`.\nTo automatically run `fnm use` when a directory contains a `.node-version` or `.nvmrc` file, add the `--use-on-cd` option to your shell setup.\n\nAdding a `.node-version` to your project is as simple as:\n\n```bash\n$ node --version\nv14.18.3\n$ node --version > .node-version\n```\n\nCheck out the following guides for the shell you use:\n\n#### Bash\n\nAdd the following to your `.bashrc` profile:\n\n```bash\neval \"$(fnm env --use-on-cd)\"\n```\n\n#### Zsh\n\nAdd the following to your `.zshrc` profile:\n\n```zsh\neval \"$(fnm env --use-on-cd)\"\n```\n\n#### Fish shell\n\nCreate `~/.config/fish/conf.d/fnm.fish` add this line to it:\n\n```fish\nfnm env --use-on-cd | source\n```\n\n#### PowerShell\n\nAdd the following to the end of your profile file:\n\n```powershell\nfnm env --use-on-cd | Out-String | Invoke-Expression\n```\n\n- For macOS/Linux, the profile is located at `~/.config/powershell/Microsoft.PowerShell_profile.ps1`\n- On Windows, PowerShell comes pre-installed, but there are two versions of it. [Read more about it here](https://learn.microsoft.com/en-us/powershell/scripting/windows-powershell/install/installing-windows-powershell). The profile is located at different places depending on which version you're using:\n  - Built in PowerShell (aka \"Windows PowerShell\"): `~\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1`\n  - The newer, PowerShell >= 7, that's not built in: `~\\Documents\\PowerShell\\Microsoft.PowerShell_profile.ps1`\n\n#### Windows Command Prompt aka Batch aka WinCMD\n\nfnm is also supported but is not entirely covered. [You can set up a startup script](https://superuser.com/a/144348) and append the following line:\n\n```batch\nFOR /f \"tokens=*\" %i IN ('fnm env --use-on-cd') DO CALL %i\n```\n\n‚ö†Ô∏è If you get the error `i was unexpected at this time`, please make a .cmd file as suggested by the first step in the Usage with Cmder secton add it's path to the `AutoRun` registry key.\n\n#### Usage with Cmder\n\nUsage is very similar to the normal WinCMD install, apart for a few tweaks to allow being called from the cmder startup script. The example **assumes** that the `CMDER_ROOT` environment variable is **set** to the **root directory** of your Cmder installation.\nThen you can do something like this:\n\n- Make a .cmd file to invoke it\n\n```batch\n:: %CMDER_ROOT%\\bin\\fnm_init.cmd\n@echo off\nFOR /f \"tokens=*\" %%z IN ('fnm env --use-on-cd') DO CALL %%z\n```\n\n- Add it to the startup script\n\n```batch\n:: %CMDER_ROOT%\\config\\user_profile.cmd\ncall \"%CMDER_ROOT%\\bin\\fnm_init.cmd\"\n```\n\nYou can replace `%CMDER_ROOT%` with any other convenient path too.\n\n## [Usage](./docs/commands.md)\n\n[See the available commands for an extended usage documentation](./docs/commands.md)\n\n## Contributing\n\nPRs welcome :tada:\n\n### Developing:\n\n```sh\n# Install Rust\ngit clone https://github.com/Schniz/fnm.git\ncd fnm/\ncargo build\n```\n\n### Running Binary:\n\n```sh\ncargo run -- --help # Will behave like `fnm --help`\n```\n\n### Running Tests:\n\n```sh\ncargo test\n```"
}
