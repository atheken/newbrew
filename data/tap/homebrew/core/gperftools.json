{
  "name": "gperftools",
  "full_name": "gperftools",
  "tap": "homebrew/core",
  "oldname": "google-perftools",
  "oldnames": [
    "google-perftools"
  ],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Multi-threaded malloc() and performance analysis tools",
  "license": "BSD-3-Clause",
  "homepage": "https://github.com/gperftools/gperftools",
  "versions": {
    "stable": "2.10",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/gperftools/gperftools/releases/download/gperftools-2.10/gperftools-2.10.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "83e3bfdd28b8bcf53222c3798d4d395d52dadbbae59e8730c4a6d31a9c3732d8"
    },
    "head": {
      "url": "https://github.com/gperftools/gperftools.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/gperftools/blobs/sha256:e2dea42ef12ef30faad35deba5e4f6c52771e50e4fbb7bbfdbef4fc539b6520f",
          "sha256": "e2dea42ef12ef30faad35deba5e4f6c52771e50e4fbb7bbfdbef4fc539b6520f"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/gperftools/blobs/sha256:b6083efd21e2ba10f38b8d8884bec70a5ad96b60e4f159d700b88a4f32626dcf",
          "sha256": "b6083efd21e2ba10f38b8d8884bec70a5ad96b60e4f159d700b88a4f32626dcf"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/gperftools/blobs/sha256:53e182d8321912b58fa8a9e7989ac13d337323cea79c9a6865ca9aef8235fdad",
          "sha256": "53e182d8321912b58fa8a9e7989ac13d337323cea79c9a6865ca9aef8235fdad"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/gperftools/blobs/sha256:2d106f789f186da6f3097a119d0ef74ed454b2820013fc3e2137dcb93c1c9000",
          "sha256": "2d106f789f186da6f3097a119d0ef74ed454b2820013fc3e2137dcb93c1c9000"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/gperftools/blobs/sha256:119236efb407004d2d1c794d3fa97ac2d903f6271f03ba49ee905e23b8230320",
          "sha256": "119236efb407004d2d1c794d3fa97ac2d903f6271f03ba49ee905e23b8230320"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/gperftools/blobs/sha256:1e55694d046edcecc802b5ebb93529ba9515abc833c10f0612ac281174611643",
          "sha256": "1e55694d046edcecc802b5ebb93529ba9515abc833c10f0612ac281174611643"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/gperftools/blobs/sha256:425c644c9b7956e9e5d25153c3020d98b1ac2eaada5dcc497a87c4f142a1c1c4",
          "sha256": "425c644c9b7956e9e5d25153c3020d98b1ac2eaada5dcc497a87c4f142a1c1c4"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gperftools/blobs/sha256:bab264991e8d70ad7bde43cc3ce05077fd5560a808e8ac1c939dd1764deba29f",
          "sha256": "bab264991e8d70ad7bde43cc3ce05077fd5560a808e8ac1c939dd1764deba29f"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "libunwind"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "xz"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/gperftools.rb",
  "ruby_source_checksum": {
    "sha256": "cf99b10562a42f67623b16030129ce6d87a2c9639cd928534db4e1e396ef6cee"
  },
  "head_dependencies": {
    "build_dependencies": [
      "autoconf",
      "automake",
      "libtool"
    ],
    "dependencies": [
      "libunwind"
    ],
    "test_dependencies": [],
    "recommended_dependencies": [],
    "optional_dependencies": [],
    "uses_from_macos": [
      "xz"
    ],
    "uses_from_macos_bounds": [
      {}
    ]
  },
  "date_added": "2015-09-06T12:36:38+01:00",
  "readme": "gperftools\n----------\n(originally Google Performance Tools)\n\nThe fastest malloc weâ€™ve seen; works particularly well with threads\nand STL. Also: thread-friendly heap-checker, heap-profiler, and\ncpu-profiler.\n\n\nOVERVIEW\n---------\n\ngperftools is a collection of a high-performance multi-threaded\nmalloc() implementation, plus some pretty nifty performance analysis\ntools.\n\ngperftools is distributed under the terms of the BSD License. Join our\nmailing list at gperftools@googlegroups.com for updates:\nhttps://groups.google.com/forum/#!forum/gperftools\n\ngperftools was original home for pprof program. But do note that\noriginal pprof (which is still included with gperftools) is now\ndeprecated in favor of Go version at https://github.com/google/pprof\n\n\nTCMALLOC\n--------\nJust link in -ltcmalloc or -ltcmalloc_minimal to get the advantages of\ntcmalloc -- a replacement for malloc and new.  See below for some\nenvironment variables you can use with tcmalloc, as well.\n\ntcmalloc functionality is available on all systems we've tested; see\nINSTALL for more details.  See README_windows.txt for instructions on\nusing tcmalloc on Windows.\n\nwhen compiling.  gcc makes some optimizations assuming it is using its\nown, built-in malloc; that assumption obviously isn't true with\ntcmalloc.  In practice, we haven't seen any problems with this, but\nthe expected risk is highest for users who register their own malloc\nhooks with tcmalloc (using gperftools/malloc_hook.h).  The risk is\nlowest for folks who use tcmalloc_minimal (or, of course, who pass in\nthe above flags :-) ).\n\n\nHEAP PROFILER\n-------------\nSee docs/heapprofile.html for information about how to use tcmalloc's\nheap profiler and analyze its output.\n\nAs a quick-start, do the following after installing this package:\n\n1) Link your executable with -ltcmalloc\n2) Run your executable with the HEAPPROFILE environment var set:\n     $ HEAPPROFILE=/tmp/heapprof <path/to/binary> [binary args]\n3) Run pprof to analyze the heap usage\n     $ pprof <path/to/binary> /tmp/heapprof.0045.heap  # run 'ls' to see options\n     $ pprof --gv <path/to/binary> /tmp/heapprof.0045.heap\n\nYou can also use LD_PRELOAD to heap-profile an executable that you\ndidn't compile.\n\nThere are other environment variables, besides HEAPPROFILE, you can\nset to adjust the heap-profiler behavior; c.f. \"ENVIRONMENT VARIABLES\"\nbelow.\n\nThe heap profiler is available on all unix-based systems we've tested;\nsee INSTALL for more details.  It is not currently available on Windows.\n\n\nHEAP CHECKER\n------------\n\nPlease note that as of gperftools-2.11 this is deprecated. You should\nconsider asan and other sanitizers instead.\n\nSee docs/heap_checker.html for information about how to use tcmalloc's\nheap checker.\n\nIn order to catch all heap leaks, tcmalloc must be linked *last* into\nyour executable.  The heap checker may mischaracterize some memory\naccesses in libraries listed after it on the link line.  For instance,\nit may report these libraries as leaking memory when they're not.\n(See the source code for more details.)\n\nHere's a quick-start for how to use:\n\nAs a quick-start, do the following after installing this package:\n\n1) Link your executable with -ltcmalloc\n2) Run your executable with the HEAPCHECK environment var set:\n     $ HEAPCHECK=1 <path/to/binary> [binary args]\n\nOther values for HEAPCHECK: normal (equivalent to \"1\"), strict, draconian\n\nYou can also use LD_PRELOAD to heap-check an executable that you\ndidn't compile.\n\nThe heap checker is only available on Linux at this time; see INSTALL\nfor more details.\n\n\nCPU PROFILER\n------------\nSee docs/cpuprofile.html for information about how to use the CPU\nprofiler and analyze its output.\n\nAs a quick-start, do the following after installing this package:\n\n1) Link your executable with -lprofiler\n2) Run your executable with the CPUPROFILE environment var set:\n     $ CPUPROFILE=/tmp/prof.out <path/to/binary> [binary args]\n3) Run pprof to analyze the CPU usage\n     $ pprof <path/to/binary> /tmp/prof.out      # -pg-like text output\n     $ pprof --gv <path/to/binary> /tmp/prof.out # really cool graphical output\n\nThere are other environment variables, besides CPUPROFILE, you can set\nto adjust the cpu-profiler behavior; cf \"ENVIRONMENT VARIABLES\" below.\n\nThe CPU profiler is available on all unix-based systems we've tested;\nsee INSTALL for more details.  It is not currently available on Windows.\n\nNOTE: CPU profiling doesn't work after fork (unless you immediately\n      do an exec()-like call afterwards).  Furthermore, if you do\n      fork, and the child calls exit(), it may corrupt the profile\n      data.  You can use _exit() to work around this.  We hope to have\n      a fix for both problems in the next release of perftools\n      (hopefully perftools 1.2).\n\n\nEVERYTHING IN ONE\n-----------------\nIf you want the CPU profiler, heap profiler, and heap leak-checker to\nall be available for your application, you can do:\n   gcc -o myapp ... -lprofiler -ltcmalloc\n\nHowever, if you have a reason to use the static versions of the\nlibrary, this two-library linking won't work:\n   gcc -o myapp ... /usr/lib/libprofiler.a /usr/lib/libtcmalloc.a  # errors!\n\nInstead, use the special libtcmalloc_and_profiler library, which we\nmake for just this purpose:\n   gcc -o myapp ... /usr/lib/libtcmalloc_and_profiler.a\n\n\nCONFIGURATION OPTIONS\n---------------------\nFor advanced users, there are several flags you can pass to\n'./configure' that tweak tcmalloc performance.  (These are in addition\nto the environment variables you can set at runtime to affect\ntcmalloc, described below.)  See the INSTALL file for details.\n\n\nENVIRONMENT VARIABLES\n---------------------\nThe cpu profiler, heap checker, and heap profiler will lie dormant,\nusing no memory or CPU, until you turn them on.  (Thus, there's no\nharm in linking -lprofiler into every application, and also -ltcmalloc\nassuming you're ok using the non-libc malloc library.)\n\nThe easiest way to turn them on is by setting the appropriate\nenvironment variables.  We have several variables that let you\nenable/disable features as well as tweak parameters.\n\nHere are some of the most important variables:\n\nHEAPPROFILE=<pre> -- turns on heap profiling and dumps data using this prefix\nHEAPCHECK=<type>  -- turns on heap checking with strictness 'type'\nCPUPROFILE=<file> -- turns on cpu profiling and dumps data to this file.\nPROFILESELECTED=1 -- if set, cpu-profiler will only profile regions of code\n                     surrounded with ProfilerEnable()/ProfilerDisable().\nCPUPROFILE_FREQUENCY=x-- how many interrupts/second the cpu-profiler samples.\n\nPERFTOOLS_VERBOSE=<level> -- the higher level, the more messages malloc emits\nMALLOCSTATS=<level>    -- prints memory-use stats at program-exit\n\nFor a full list of variables, see the documentation pages:\n   docs/cpuprofile.html\n   docs/heapprofile.html\n   docs/heap_checker.html\n\nSee also TCMALLOC_STACKTRACE_METHOD_VERBOSE and\nTCMALLOC_STACKTRACE_METHOD environment variables briefly documented in\nour INSTALL file and on our wiki page at:\nhttps://github.com/gperftools/gperftools/wiki/gperftools'-stacktrace-capturing-methods-and-their-issues\n\n\nCOMPILING ON NON-LINUX SYSTEMS\n------------------------------\n\nPerftools was developed and tested on x86, aarch64 and riscv Linux\nsystems, and it works in its full generality only on those systems.\n\nHowever, we've successfully ported much of the tcmalloc library to\nFreeBSD, Solaris x86 (not tested recently though), and Mac OS X\n(aarch64; x86 and ppc have not been tested recently); and we've ported\nthe basic functionality in tcmalloc_minimal to Windows.  See INSTALL\nfor details.  See README_windows.txt for details on the Windows port.\n\n\n---\nOriginally written: 17 May 2011\nLast refreshed: 10 Aug 2023"
}
