{
  "name": "fargatecli",
  "full_name": "fargatecli",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "CLI for AWS Fargate",
  "license": "Apache-2.0",
  "homepage": "https://github.com/awslabs/fargatecli",
  "versions": {
    "stable": "0.3.2",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/awslabs/fargatecli/archive/0.3.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "f457745c74859c3ab19abc0695530fde97c1932b47458706c835b3ff79c6eba8"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fargatecli/blobs/sha256:c985223243a5cf6878445059c2abc05cb8cc2535b52c1feedd62c58854afc901",
          "sha256": "c985223243a5cf6878445059c2abc05cb8cc2535b52c1feedd62c58854afc901"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fargatecli/blobs/sha256:183015f15c85815aff732a2361baa4866507b6a98a92267f518e1b8dfc543859",
          "sha256": "183015f15c85815aff732a2361baa4866507b6a98a92267f518e1b8dfc543859"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fargatecli/blobs/sha256:ba7b19d6b21be020f27b1fc3b65e41b3c58467d92e289399abecb48cad82b9c9",
          "sha256": "ba7b19d6b21be020f27b1fc3b65e41b3c58467d92e289399abecb48cad82b9c9"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fargatecli/blobs/sha256:a96872766210deb91b9212423660530cfe191e9919fdb6cd7f65780e993d4a8b",
          "sha256": "a96872766210deb91b9212423660530cfe191e9919fdb6cd7f65780e993d4a8b"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fargatecli/blobs/sha256:c344a892d3d21c9499db679db25f6927f3c713d4afffd9f8a9bd42bcaf111435",
          "sha256": "c344a892d3d21c9499db679db25f6927f3c713d4afffd9f8a9bd42bcaf111435"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fargatecli/blobs/sha256:c35cbba29b8f2bd5bb92841a2356fa300622a9c42defca0c3f6886e93c3f5ef9",
          "sha256": "c35cbba29b8f2bd5bb92841a2356fa300622a9c42defca0c3f6886e93c3f5ef9"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fargatecli/blobs/sha256:4cf90341de4a444842414de2364ae5ed51283008dfd99739cde4fcd00583f50a",
          "sha256": "4cf90341de4a444842414de2364ae5ed51283008dfd99739cde4fcd00583f50a"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fargatecli/blobs/sha256:193a1ca57966d54bc0ebaaa5b28397448f2ecc0276d6f69b4adc20acd8324553",
          "sha256": "193a1ca57966d54bc0ebaaa5b28397448f2ecc0276d6f69b4adc20acd8324553"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fargatecli/blobs/sha256:c5b6d73103fdab97321d13426271177f03bb1240db637f8d252678e376e7f129",
          "sha256": "c5b6d73103fdab97321d13426271177f03bb1240db637f8d252678e376e7f129"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fargatecli/blobs/sha256:6878839aa708ebabc144e18b0b77f0d1e7754eeaad8634741338fa2c921c6de0",
          "sha256": "6878839aa708ebabc144e18b0b77f0d1e7754eeaad8634741338fa2c921c6de0"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go@1.17"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": true,
  "disable_date": "2023-06-19",
  "disable_reason": "unsupported",
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/fargatecli.rb",
  "ruby_source_checksum": {
    "sha256": "bfc3034dd3d6c63b154299b0fc44649748cfede890cc74b65bb8e8ed22af8918"
  },
  "date_added": "2020-04-30T16:41:07+00:00",
  "readme": "# Fargate CLI\n\n[![CircleCI](https://circleci.com/gh/jpignata/fargate/tree/master.svg?style=svg)](https://circleci.com/gh/jpignata/fargate/tree/master)\n[![GoDoc](https://godoc.org/github.com/awslabs/fargatecli?status.svg)](https://godoc.org/github.com/awslabs/fargatecli)\n\n# NOTICE\n\n:exclamation: :exclamation: :exclamation: Please note that this project is no longer actively maintained. A better option for new Fargate deployments on AWS is [the AWS Copilot CLI](https://github.com/aws/copilot-cli), which is both more featureful, and actively maintained by AWS. :exclamation: :exclamation: :exclamation:\n\n\n## Screencast\n\n[![fargate CLI screencast](http://img.youtube.com/vi/P6iY6ovhbfc/0.jpg)](http://www.youtube.com/watch?v=P6iY6ovhbfc)\n\n## Usage\n\n### Configuration\n\n#### Region\n\nBy default, fargate uses *us-east-1*. The CLI accepts a --region parameter and\nwill honor *AWS_REGION* and *AWS_DEFAULT_REGION* environment settings. Note that\nspecifying a region where all required services aren't available will return an\nerror.\n\nSee the [Region Table][region-table] for a breakdown of what services are\navailable in which regions.\n\n#### Credentials\n\nfargate is built using the [AWS SDK for Go][go-sdk] which looks for credentials\nin the following locations:\n\n1. [Environment Variables][go-env-vars]\n\n1. [Shared Credentials File][go-shared-credentials-file]\n\n1. [EC2 Instance Profile][go-iam-roles-for-ec2-instances]\n\nFor more information see [Specifying Credentials][go-specifying-credentials] in\nthe AWS SDK for Go documentation.\n\n### Commands\n\n- [Tasks](#tasks)\n- [Services](#services)\n- [Load Balancers](#load-balancers)\n- [Certificates](#certificates)\n\n#### Global Flags\n\n| Flag | Default | Description |\n| --- | --- | --- |\n| --cluster | fargate | ECS cluster name |\n| --region | us-east-1 | AWS region |\n| --no-color | false | Disable color output |\n| --verbose | false | Verbose output |\n\n#### Tasks\n\nTasks are one-time executions of your container. Instances of your task are run\nuntil you manually stop them either through AWS APIs, the AWS Management\nConsole, or `fargate task stop`, or until they are interrupted for any reason.\n\n- [list](#fargate-task-list)\n- [run](#fargate-task-run)\n- [info](#fargate-task-info)\n- [ps](#fargate-task-ps)\n- [logs](#fargate-task-logs)\n- [stop](#fargate-task-stop)\n\n##### fargate task list\n\n```console\nfargate task list\n```\n\nList running task groups\n\n##### fargate task run\n\n```console\nfargate task run <task-group-name> [--num <count>] [--cpu <cpu-units>] [--memory <MiB>]\n                                   [--image <docker-image>] [--env <key=value>]\n                                   [--task-role <task-role>] [--subnet-id <subnet-id>]\n                                   [--security-group-id <security-group-id>]\n```\n\nRun new tasks\n\nYou must specify a task group name in order to interact with the task(s) in\nsubsequent commands to view logs, stop and inspect tasks. Task group names do\nnot have to be unique -- multiple configurations of task instances can be\nstarted with the same task group.\n\nMultiple instances of a task can be run by specifying a number in the --num\nflag. If no number is specified, a single task instance will be run.\n\nCPU and memory settings can be optionally specified as CPU units and mebibytes\nrespectively using the --cpu and --memory flags. Every 1024 CPU units is\nequivilent to a single vCPU. AWS Fargate only supports certain combinations of\nCPU and memory configurations:\n\n| CPU (CPU Units) | Memory (MiB)                          |\n| --------------- | ------------------------------------- |\n| 256             | 512, 1024, or 2048                    |\n| 512             | 1024 through 4096 in 1GiB increments  |\n| 1024            | 2048 through 8192 in 1GiB increments  |\n| 2048            | 4096 through 16384 in 1GiB increments |\n| 4096            | 8192 through 30720 in 1GiB increments |\n\nIf not specified, fargate will launch minimally sized tasks at 0.25 vCPU (256\nCPU units) and 0.5GB (512 MiB) of memory.\n\nThe Docker container image to use in the task can be optionally specified via\nthe --image flag. If not specified, fargate will build a new Docker container\nimage from the current working directory and push it to Amazon ECR in a\nrepository named for the task group. If the current working directory is a git\nrepository, the container image will be tagged with the short ref of the HEAD\ncommit. If not, a timestamp in the format of YYYYMMDDHHMMSS will be used.\n\nEnvironment variables can be specified via the --env flag. Specify --env with a\nkey=value parameter multiple times to add multiple variables.\n\nSecurity groups can optionally be specified for the task by passing the\n--security-group-id flag with a security group ID. To add multiple security\ngroups, pass --security-group-id with a security group ID multiple times. If\n--security-group-id is omitted, a permissive security group will be applied to\nthe task.\n\nBy default, the task will be created in the default VPC and attached to the\ndefault VPC subnets for each availability zone. You can override this by\nspecifying explicit subnets by passing the --subnet-id flag with a subnet ID.\n\nA task role can be optionally specified via the --task-role flag by providing\neith a full IAM role ARN or the name of an IAM role. The tasks will be able to\nassume this role.\n\n##### fargate task info\n\n```console\nfargate task info <task-group-name> [--task <task-id>]\n```\n\nInspect tasks\n\nShows extended information for each running task within a task group or for\nspecific tasks specified with the --task flag. Information includes environment\nvariables which could differ between tasks in a task group. To inspect multiple\nspecific tasks within a task group specific --task with a task ID multiple\ntimes.\n\n##### fargate task ps\n\n```console\nfargate task ps <task-group-name>\n```\n\nList running tasks\n\n##### fargate task logs\n\n```console\nfargate task logs <task-group-name> [--follow] [--start <time-expression>] [--end <time-expression>]\n                                    [--filter <filter-expression>] [--task <task-id>]\n```\n\nShow logs from tasks\n\nReturn either a specific segment of task logs or tail logs in real-time using\nthe --follow option. Logs are prefixed by their log stream name which is in the\nformat of \"fargate/\\<task-group-name>/\\<task-id>.\"\n\nFollow will continue to run and return logs until interrupted by Control-C. If\n--follow is passed --end cannot be specified.\n\nLogs can be returned for specific tasks within a task group by passing a task\nID via the --task flag. Pass --task with a task ID multiple times in order to\nretrieve logs from multiple specific tasks.\n\nA specific window of logs can be requested by passing --start and --end options\nwith a time expression. The time expression can be either a duration or a\ntimestamp:\n\n  - Duration (e.g. -1h [one hour ago], -1h10m30s [one hour, ten minutes, and\n    thirty seconds ago], 2h [two hours from now])\n  - Timestamp with optional timezone in the format of YYYY-MM-DD HH:MM:SS [TZ];\n    timezone will default to UTC if omitted (e.g. 2017-12-22 15:10:03 EST)\n\nYou can filter logs for specific term by passing a filter expression via the\n--filter flag. Pass a single term to search for that term, pass multiple terms\nto search for log messages that include all terms. See the [CloudWatch Logs\ndocumentation][cwl-filter-expression] for more details.\n\n##### fargate task stop\n\n```console\nfargate task stop <task-group-name> [--task <task-id>]\n```\n\nStop tasks\n\nStops all tasks within a task group if run with only a task group name or stops\nindividual tasks if one or more tasks are passed via the --task flag. Specify\n--task with a task ID parameter multiple times to stop multiple specific tasks.\n\n#### Services\n\nServices manage long-lived instances of your containers that are run on AWS\nFargate. If your container exits for any reason, the service scheduler will\nrestart your containers and ensure your service has the desired number of\ntasks running. Services can be used in concert with a load balancer to\ndistribute traffic amongst the tasks in your service.\n\n- [list](#fargate-service-list)\n- [create](#fargate-service-create)\n- [deploy](#fargate-service-deploy)\n- [info](#fargate-service-info)\n- [logs](#fargate-service-logs)\n- [ps](#fargate-service-ps)\n- [scale](#fargate-service-scale)\n- [env set](#fargate-service-env-set)\n- [env unset](#fargate-service-env-unset)\n- [env list](#fargate-service-env-list)\n- [update](#fargate-service-update)\n- [restart](#fargate-service-restart)\n- [destroy](#fargate-service-destroy)\n\n##### fargate service list\n\n```console\nfargate service list\n```\n\nList services\n\n##### fargate service create\n\n```console\nfargate service create <service name> [--cpu <cpu units>] [--memory <MiB>] [--port <port-expression>]\n                                      [--lb <load-balancer-name>] [--rule <rule-expression>]\n                                      [--image <docker-image>] [--env <key=value>] [--num <count>]\n                                      [--task-role <task-role>] [--subnet-id <subnet-id>]\n                                      [--security-group-id <security-group-id>]\n```\n\nCreate a new service\n\nCPU and memory settings can be optionally specified as CPU units and mebibytes\nrespectively using the --cpu and --memory flags. Every 1024 CPU units is\nequivilent to a single vCPU. AWS Fargate only supports certain combinations of\nCPU and memory configurations:\n\n| CPU (CPU Units) | Memory (MiB)                          |\n| --------------- | ------------------------------------- |\n| 256             | 512, 1024, or 2048                    |\n| 512             | 1024 through 4096 in 1GiB increments  |\n| 1024            | 2048 through 8192 in 1GiB increments  |\n| 2048            | 4096 through 16384 in 1GiB increments |\n| 4096            | 8192 through 30720 in 1GiB increments |\n\nIf not specified, fargate will launch minimally sized tasks at 0.25 vCPU (256\nCPU units) and 0.5GB (512 MiB) of memory.\n\nThe Docker container image to use in the service can be optionally specified\nvia the --image flag. If not specified, fargate will build a new Docker\ncontainer image from the current working directory and push it to Amazon ECR in\na repository named for the task group. If the current working directory is a\ngit repository, the container image will be tagged with the short ref of the\nHEAD commit. If not, a timestamp in the format of YYYYMMDDHHMMSS will be used.\n\nTo use the service with a load balancer, a port must be specified when the\nservice is created. Specify a port by passing the --port flag and a port\nexpression of protocol:port-number. For example, if the service listens on port\n80 and uses HTTP, specify HTTP:80.  Valid protocols are HTTP, HTTPS, and TCP.\nYou can only specify a single port.\n\nServices can optionally be configured to use a load balancer. To put a load\nbalancer in front a service, pass the --lb flag with the name of a load\nbalancer. If you specify a load balancer, you must also specify a port via the\n--port flag to which the load balancer should forward requests. Optionally,\nApplication Load Balancers can be configured to route HTTP/HTTPS traffic to the\nservice based upon a rule. Rules are configured by passing one or more rules by\nspecifying the --rule flag along with a rule expression. Rule expressions are\nin the format of TYPE=VALUE. Type can either be PATH or HOST. PATH matches the\nPATH of the request and HOST matches the requested hostname in the HTTP\nrequest. Both PATH and HOST types can include up to three wildcard characters:\n\\* to match multiple characters and ? to match a single character. If rules are\nomitted, the service will be the load balancer's default action.\n\nEnvironment variables can be specified via the --env flag. Specify --env with a\nkey=value parameter multiple times to add multiple variables.\n\nSpecify the desired count of tasks the service should maintain by passing the\n--num flag with a number. If you omit this flag, fargate will configure a\nservice with a desired number of tasks of 1.\n\nSecurity groups can optionally be specified for the service by passing the\n--security-group-id flag with a security group ID. To add multiple security\ngroups, pass --security-group-id with a security group ID multiple times. If\n--security-group-id is omitted, a permissive security group will be applied to\nthe service.\n\nBy default, the service will be created in the default VPC and attached\nto the default VPC subnets for each availability zone. You can override this by\nspecifying explicit subnets by passing the --subnet-id flag with a subnet ID.\n\nA task role can be optionally specified via the --task-role flag by providing\neith a full IAM role ARN or the name of an IAM role. The tasks run by the\nservice will be able to assume this role.\n\n##### fargate service deploy\n\n```console\nfargate service deploy <service-name> [--image <docker-image>]\n```\n\nDeploy new image to service\n\nThe Docker container image to use in the service can be optionally specified\nvia the --image flag. If not specified, fargate will build a new Docker\ncontainer image from the current working directory and push it to Amazon ECR in\na repository named for the task group. If the current working directory is a\ngit repository, the container image will be tagged with the short ref of the\nHEAD commit. If not, a timestamp in the format of YYYYMMDDHHMMSS will be used.\n\n##### fargate service info\n\n```console\nfargate service info <service-name>\n```\n\nInspect service\n\nShow extended information for a service including load balancer configuration,\nactive deployments, and environment variables.\n\nDeployments show active versions of your service that are running. Multiple\ndeployments are shown if a service is transitioning due to a deployment or\nupdate to configuration such a CPU, memory, or environment variables.\n\n##### fargate service logs\n\n```console\nfargate service logs <service-name> [--follow] [--start <time-expression>] [--end <time-expression>]\n                                    [--filter <filter-expression>] [--task <task-id>]\n```\n\nShow logs from tasks in a service\n\nReturn either a specific segment of service logs or tail logs in real-time\nusing the --follow option. Logs are prefixed by their log stream name which is\nin the format of \"fargate/\\<service-name>/\\<task-id>.\"\n\nFollow will continue to run and return logs until interrupted by Control-C. If\n--follow is passed --end cannot be specified.\n\nLogs can be returned for specific tasks within a service by passing a task ID\nvia the --task flag. Pass --task with a task ID multiple times in order to\nretrieve logs from multiple specific tasks.\n\nA specific window of logs can be requested by passing --start and --end options\nwith a time expression. The time expression can be either a duration or a\ntimestamp:\n\n  - Duration (e.g. -1h [one hour ago], -1h10m30s [one hour, ten minutes, and\n    thirty seconds ago], 2h [two hours from now])\n  - Timestamp with optional timezone in the format of YYYY-MM-DD HH:MM:SS [TZ];\n    timezone will default to UTC if omitted (e.g. 2017-12-22 15:10:03 EST)\n\nYou can filter logs for specific term by passing a filter expression via the\n--filter flag. Pass a single term to search for that term, pass multiple terms\nto search for log messages that include all terms. See the [CloudWatch Logs\ndocumentation][cwl-filter-expression] for more details.\n\n##### fargate service ps\n\n```console\nfargate service ps <service-name>\n```\n\nList running tasks for a service\n\n##### fargate service scale\n\n```console\nfargate service scale <service-name> <scale-expression>\n```\n\nScale number of tasks in a service\n\nChanges the number of desired tasks to be run in a service by the given scale\nexpression. A scale expression can either be an absolute number or a delta\nspecified with a sign such as +5 or -2.\n\n##### fargate service env set\n\n```console\nfargate service env set <service-name> --env <key=value>\n```\n\nSet environment variables\n\nAt least one environment variable must be specified via the --env flag. Specify\n--env with a key=value parameter multiple times to add multiple variables.\n\n##### fargate service env unset\n\n```console\nfargate service env unset <service-name> --key <key-name>\n```\n\nUnset environment variables\n\nUnsets the environment variable specified via the --key flag. Specify --key with\na key name multiple times to unset multiple variables.\n\n##### fargate service env list\n\n```console\nfargate service env list <service-name>\n```\n\nShow environment variables\n\n##### fargate service update\n\n```console\nfargate service update <service-name> [--cpu <cpu-units>] [--memory <MiB>]\n```\n\nUpdate service configuration\n\nCPU and memory settings are specified as CPU units and mebibytes respectively\nusing the --cpu and --memory flags. Every 1024 CPU units is equivilent to a\nsingle vCPU. AWS Fargate only supports certain combinations of CPU and memory\nconfigurations:\n\n| CPU (CPU Units) | Memory (MiB)                          |\n| --------------- | ------------------------------------- |\n| 256             | 512, 1024, or 2048                    |\n| 512             | 1024 through 4096 in 1GiB increments  |\n| 1024            | 2048 through 8192 in 1GiB increments  |\n| 2048            | 4096 through 16384 in 1GiB increments |\n| 4096            | 8192 through 30720 in 1GiB increments |\n\nAt least one of --cpu or --memory must be specified.\n\n##### fargate service restart\n\n```console\nfargate service restart <service-name>\n```\n\nRestart service\n\nCreates a new set of tasks for the service and stops the previous tasks. This\nis useful if your service needs to reload data cached from an external source,\nfor example.\n\n##### fargate service destroy\n\n```console\nfargate service destroy <service-name>\n```\n\nDestroy service\n\nIn order to destroy a service, it must first be scaled to 0 running tasks.\n\n#### Load Balancers\n\nLoad balancers distribute incoming traffic between the tasks within a service\nfor HTTP/HTTPS and TCP applications. HTTP/HTTPS load balancers can route to\nmultiple services based upon rules you specify when you create a new service.\n\n- [list](#fargate-lb-list)\n- [create](#fargate-lb-create)\n- [destroy](#fargate-lb-destroy)\n- [alias](#fargate-lb-alias)\n- [info](#fargate-lb-info)\n\n##### fargate lb list\n\n```console\nfargate lb list\n```\n\nList load balancers\n\n##### fargate lb create\n\n```console\nfargate lb create <load-balancer-name> --port <port-expression> [--certificate <certificate-name>]\n                                       [--subnet-id <subnet-id>] [--security-group-id <security-group-id>]\n                                       [--scheme <lb-scheme>]\n```\n\nCreate a load balancer\n\nAt least one port must be specified for the load balancer listener via the\n--port flag and a port expression of protocol:port-number. For example, if you\nwanted an HTTP load balancer to listen on port 80, you would specify HTTP:80.\nValid protocols are HTTP, HTTPS, and TCP. You can specify multiple listeners by\npassing the --port flag with a port expression multiple times. You cannot mix\nTCP ports with HTTP/HTTPS ports on a single load balancer.\n\nYou can optionally include certificates to secure HTTPS ports by passed the\n--certificate flag along with a certificate name. This option can be specified\nmultiple times to add additional certificates to a single load balancer which\nuses Service Name Identification (SNI) to select the appropriate certificate\nfor the request.\n\nBy default, the load balancer will be created in the default VPC and attached\nto the default VPC subnets for each availability zone. You can override this by\nspecifying explicit subnets by passing the --subnet-id flag with a subnet ID.\nHTTP/HTTPS load balancers require at least two subnets attached while a TCP\nload balancer requires only one. You may only specify a single subnet from each\navailability zone.\n\nSecurity groups can optionally be specified for HTTP/HTTPS load balancers by\npassing the --security-group-id flag with a security group ID. To add multiple\nsecurity groups, pass --security-group-id with a security group ID multiple\ntimes. If --security-group-id is omitted, a permissive security group will be\napplied to the load balancer.\n\nYou can also choose the scheme type for load balancer via the --scheme flag.\nBy default, load balancers are internet-facing.\n\n##### fargate lb destroy\n\n```console\nfargate lb destroy <load-balancer-name>\n```\n\nDestroy load balancer\n\n##### fargate lb alias\n\n```console\nfargate lb alias <load-balancer-name> <hostname>\n```\n\nCreate a load balancer alias record\n\nCreate an alias record to the load balancer for domains that are hosted within\nAmazon Route 53 and within the same AWS account. If you're using another DNS\nprovider or host your domains in a different account, you will need to manually\ncreate this record.\n\n##### fargate lb info\n\n```console\nfargate lb info <load-balancer-name>\n```\n\nInspect load balancer\n\nReturns extended information about a load balancer including a list of\nlisteners, rules, and certificates in use by the load balancer.\n\n\n#### Certificates\n\nCertificates are TLS certificates issued by or imported into AWS Certificate\nManager for use in securing traffic between load balancers and end users. ACM\nprovides TLS certificates free of charge for use within AWS resources.\n\n- [list](#fargate-certificate-list)\n- [import](#fargate-certificate-import)\n- [request](#fargate-certificate-request)\n- [info](#fargate-certificate-info)\n- [validate](#fargate-certificate-validate)\n- [destroy](#fargate-certificate-destroy)\n\n##### fargate certificate list\n\n```console\nfargate certificate list\n```\n\nList certificates\n\n##### fargate certificate import\n\n```console\nfargate certificate import <domain-name> --certificate <filename> --key <filename> [--chain <filename>]\n```\n\nImport a certificate\n\nUpload a certificate from a certificate file, a private key file, and optionally\nan intermediate certificate chain file. The files must be PEM-encoded and the\nprivate key must not be encrypted or protected by a passphrase. See the\n[AWS Certificate Manager documentation][acm-import-cert] for more details.\n\n##### fargate certificate request\n\n```console\nfargate certificate request <domain-name> [--alias <domain-name>]\n```\n\nRequest a certificate\n\nCertificates can be for a fully qualified domain name (e.g. www.example.com) or\na wildcard domain name (e.g. *.example.com). You can add aliases to a\ncertificate by specifying additional domain names via the --alias flag. To add\nmultiple aliases, pass --alias multiple times. By default, AWS Certificate\nManager has a limit of 10 domain names per certificate, but this limit can be\nraised by AWS support.\n\n##### fargate certificate info\n\n```console\nfargate certificate info <domain-name>\n```\n\nInspect certificate\n\nShow extended information for a certificate. Includes each validation for the\ncertificate which shows DNS records which must be created to validate domain\nownership.\n\n##### fargate certificate validate\n\n```console\nfargate certificate validate <domain-name>\n```\n\nValidate certificate ownership\n\nfargate will automatically create DNS validation record to verify ownership for\nany domain names that are hosted within Amazon Route 53. If your certificate\nhas aliases, a validation record will be attempted per alias. Any records whose\ndomains are hosted in other DNS hosting providers or in other DNS accounts\nand cannot be automatically validated will have the necessary records output.\nThese records are also available in `fargate certificate info \\<domain-name>`.\n\nAWS Certificate Manager may take up to several hours after the DNS records are\ncreated to complete validation and issue the certificate.\n\n##### fargate certificate destroy\n\n```console\nfargate certificate destroy <domain-name>\n```\n\nDestroy certificate\n\nIn order to destroy a certificate, it must not be in use by any load balancers or\nany other AWS resources.\n\n[region-table]: https://aws.amazon.com/about-aws/global-infrastructure/regional-product-services/\n[go-sdk]: https://aws.amazon.com/documentation/sdk-for-go/\n[go-env-vars]: http://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#environment-variables\n[go-shared-credentials-file]: http://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#shared-credentials-file\n[go-iam-roles-for-ec2-instances]: http://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#iam-roles-for-ec2-instances\n[go-specifying-credentials]: http://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials\n[cwl-filter-expression]: http://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html#matching-terms-events\n[acm-import-cert]: http://docs.aws.amazon.com/acm/latest/APIReference/API_ImportCertificate.html"
}
