{
  "name": "terragrunt-atlantis-config",
  "full_name": "terragrunt-atlantis-config",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Generate Atlantis config for Terragrunt projects",
  "license": "MIT",
  "homepage": "https://github.com/transcend-io/terragrunt-atlantis-config",
  "versions": {
    "stable": "1.16.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/transcend-io/terragrunt-atlantis-config/archive/refs/tags/v1.16.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "a266aa0a3fd41f188551a3951af2c8c241a3956edc1eb99d81b1f9d2012923b2"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terragrunt-atlantis-config/blobs/sha256:522b60c0f4aed84b153f78547d3a53d6ea6f55aa7a9f1e1f8dd9acfd33f311b7",
          "sha256": "522b60c0f4aed84b153f78547d3a53d6ea6f55aa7a9f1e1f8dd9acfd33f311b7"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terragrunt-atlantis-config/blobs/sha256:522b60c0f4aed84b153f78547d3a53d6ea6f55aa7a9f1e1f8dd9acfd33f311b7",
          "sha256": "522b60c0f4aed84b153f78547d3a53d6ea6f55aa7a9f1e1f8dd9acfd33f311b7"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terragrunt-atlantis-config/blobs/sha256:522b60c0f4aed84b153f78547d3a53d6ea6f55aa7a9f1e1f8dd9acfd33f311b7",
          "sha256": "522b60c0f4aed84b153f78547d3a53d6ea6f55aa7a9f1e1f8dd9acfd33f311b7"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terragrunt-atlantis-config/blobs/sha256:518af1cbfce0795429d38b4e810bcb75466c9f5143d26a237565048ab4f44f20",
          "sha256": "518af1cbfce0795429d38b4e810bcb75466c9f5143d26a237565048ab4f44f20"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terragrunt-atlantis-config/blobs/sha256:518af1cbfce0795429d38b4e810bcb75466c9f5143d26a237565048ab4f44f20",
          "sha256": "518af1cbfce0795429d38b4e810bcb75466c9f5143d26a237565048ab4f44f20"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terragrunt-atlantis-config/blobs/sha256:518af1cbfce0795429d38b4e810bcb75466c9f5143d26a237565048ab4f44f20",
          "sha256": "518af1cbfce0795429d38b4e810bcb75466c9f5143d26a237565048ab4f44f20"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terragrunt-atlantis-config/blobs/sha256:d3925f39fe87e9c7aab1f60384480d79327d15d98391367340a17c708feb7890",
          "sha256": "d3925f39fe87e9c7aab1f60384480d79327d15d98391367340a17c708feb7890"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/terragrunt-atlantis-config.rb",
  "ruby_source_checksum": {
    "sha256": "7cda8eacefa63f1c754c0955c3a57d19ede71c1e73c30238e476a6afaaa38a2a"
  },
  "date_added": "2023-07-20T18:49:16-04:00",
  "readme": "<p align=\"center\">\n  <img alt=\"Terragrunt Atlantis Config by Transcend\" src=\"https://user-images.githubusercontent.com/7354176/78756035-f9863480-792e-11ea-96d3-d4ffe50e0269.png\"/>\n</p>\n<h1 align=\"center\">Terragrunt Atlantis Config</h1>\n<p align=\"center\">\n  <strong>Generate Atlantis Config for Terragrunt projects.</strong>\n</p>\n<br />\n\n## What is this?\n\n[Atlantis](https://runatlantis.io) is an awesome tool for Terraform pull request automation. Each repo can have a YAML config file that defines Terraform module dependencies, so that PRs that affect dependent modules will automatically generate `terraform plan`s for those modules.\n\n[Terragrunt](https://terragrunt.gruntwork.io) is a Terraform wrapper, which has the concept of dependencies built into its configuration.\n\nThis tool creates Atlantis YAML configurations for Terragrunt projects by:\n\n- Finding all `terragrunt.hcl` in a repo\n- Evaluating their `dependency`, `terraform`, `locals`, and other source blocks to find their dependencies\n- Creating a Directed Acyclic Graph of all dependencies\n- Constructing and logging YAML in Atlantis' config spec that reflects the graph\n\nThis is especially useful for organizations that use monorepos for their Terragrunt config (as we do at Transcend), and have thousands of lines of config.\n\n## Integrate into your Atlantis Server\n\nThe recommended way to use this tool is to install it onto your Atlantis server, and then use a [Pre-Workflow hook](https://www.runatlantis.io/docs/pre-workflow-hooks.html#pre-workflow-hooks) to run it after every clone. This way, Atlantis can automatically determine what modules should be planned/applied for any change to your repository.\n\nTo get started, add a `pre_workflow_hooks` field to your `repos` section of your [server-side repo config](https://www.runatlantis.io/docs/server-side-repo-config.html#do-i-need-a-server-side-repo-config-file):\n\n```json\n{\n  \"repos\": [\n    {\n      \"id\": \"<your_github_repo>\",\n      \"workflow\": \"default\",\n      \"pre_workflow_hooks\": [\n        {\n          \"run\": \"terragrunt-atlantis-config generate --output atlantis.yaml --autoplan --parallel --create-workspace\"\n        }\n      ]\n    }\n  ]\n}\n```\n\nThen, make sure `terragrunt-atlantis-config` is present on your Atlantis server. There are many different ways to configure a server, but this example in [Packer](https://www.packer.io/) should show the bash commands you'll need just about anywhere:\n\n```hcl\nvariable \"terragrunt_atlantis_config_version\" {\n  default = \"1.16.0\"\n}\n\nbuild {\n  // ...\n  provisioner \"shell\" {\n    inline = [\n      \"wget https://github.com/transcend-io/terragrunt-atlantis-config/releases/download/v${var.terragrunt_atlantis_config_version}/terragrunt-atlantis-config_${var.terragrunt_atlantis_config_version}_linux_amd64.tar.gz\",\n      \"sudo tar xf terragrunt-atlantis-config_${var.terragrunt_atlantis_config_version}_linux_amd64.tar.gz\",\n      \"sudo mv terragrunt-atlantis-config_${var.terragrunt_atlantis_config_version}_linux_amd64/terragrunt-atlantis-config_${var.terragrunt_atlantis_config_version}_linux_amd64 terragrunt-atlantis-config\",\n      \"sudo install terragrunt-atlantis-config /usr/local/bin\",\n    ]\n    inline_shebang = \"/bin/bash -e\"\n  }\n  // ...\n}\n```\n\nand just like that, your developers should never have to worry about an `atlantis.yaml` file, or even need to know what it is.\n\n## Extra dependencies\n\nFor basic cases, this tool can sniff out all dependencies in a module. However, you may have times when you want to add in additional dependencies such as:\n\n- You use Terragrunt's `read_terragrunt_config` function in your locals, and want to depend on the read file\n- Your Terragrunt module should be run anytime some non-terragrunt file is updated, such as a Dockerfile or Packer template\n- You want to run _all_ modules any time your product has a major version bump\n- You believe a module should be reapplied any time some other file or directory is updated\n\nIn these cases, you can customize the `locals` block in that Terragrunt module to have a field named `extra_atlantis_dependencies` with a list\nof values you want included in the config, such as:\n\n```hcl\nlocals {\n  extra_atlantis_dependencies = [\n    \"some_extra_dep\",\n    find_in_parent_folders(\".gitignore\")\n  ]\n}\n```\n\nIn your `atlantis.yaml` file, you will end up seeing output like:\n\n```yaml\n- autoplan:\n    enabled: false\n    when_modified:\n      - \"*.hcl\"\n      - \"*.tf*\"\n      - some_extra_dep\n      - ../../.gitignore\n  dir: example-setup/extra_dependency\n```\n\nIf you specify `extra_atlantis_dependencies` in the parent Terragrunt module, they will be merged with the child dependencies using the following rules:\n\n1. Any function in a parent will be evaluated from the child's directory. So you can use `get_parent_terragrunt_dir()` and other functions like you normally would in terragrunt.\n2. Absolute paths will work as they would in a child module, and the path in the output will be relative from the child module to the absolute path\n3. Relative paths, like the string `\"foo.json\"`, will be evaluated as relative to the Child module. This means that if you need something relative to the parent module, you should use something like `\"${get_parent_terragrunt_dir()}/foo.json\"`\n\n## All Flags\n\nOne way to customize the behavior of this module is through CLI flag values passed in at runtime. These settings will apply to all modules.\n\n| Flag Name                    | Description                                                                                                                                                                     | Default Value     |\n|------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------|\n| `--autoplan`                 | The default value for autoplan settings. Can be overriden by locals.                                                                                                            | false             |\n| `--automerge`                | Enables the automerge setting for a repo.                                                                                                                                       | false             |\n| `--cascade-dependencies`     | When true, dependencies will cascade, meaning that a module will be declared to depend not only on its dependencies, but all dependencies of its dependencies all the way down. | true              |\n| `--ignore-parent-terragrunt` | Ignore parent Terragrunt configs (those which don't reference a terraform module).<br>In most cases, this should be set to `true`                                               | true              |\n| `--parallel`                 | Enables `plan`s and `apply`s to happen in parallel. Will typically be used with `--create-workspace`                                                                            | true              |\n| `--create-workspace`         | Use different auto-generated workspace for each project. Default is use default workspace for everything                                                                        | false             |\n| `--create-project-name`      | Add different auto-generated name for each project                                                                                                                              | false             |\n| `--preserve-workflows`       | Preserves workflows from old output files. Useful if you want to define your workflow definitions on the client side                                                            | true              |\n| `--preserve-projects`        | Preserves projects from old output files. Useful for incremental builds using `--filter`                                                                                        | false             |\n| `--workflow`                 | Name of the workflow to be customized in the atlantis server. If empty, will be left out of output                                                                              | \"\"                |\n| `--apply-requirements`       | Requirements that must be satisfied before `atlantis apply` can be run. Currently the only supported requirements are `approved` and `mergeable`. Can be overridden by locals   | []                |\n| `--output`                   | Path of the file where configuration will be generated. Typically, you want a file named \"atlantis.yaml\". Default is to write to `stdout`.                                      | \"\"                |\n| `--root`                     | Path to the root directory of the git repo you want to build config for.                                                                                                        | current directory |\n| `--terraform-version`        | Default terraform version to specify for all modules. Can be overriden by locals                                                                                                | \"\"                |\n| `--ignore-dependency-blocks` | When true, dependencies found in `dependency` and `dependencies` blocks will be ignored                                                                                         | false             |\n| `--filter`                   | Path or glob expression to the directory you want scope down the config for. Default is all files in root                                                                       | \"\"                |\n| `--num-executors`            | Number of executors used for parallel generation of projects. Default is 15                                                                                                     | 15                |\n| `--execution-order-groups`   | Computes execution_order_group for projects                                                                                                                                     | false             |\n\n## Project generation\n\nThese flags offer additional options to generate Atlantis projects based on HCL configuration files in the terragrunt hierarchy. This, for example, enables Atlantis to use `terragrunt run-all` workflows on staging environment or product levels in a terragrunt hierarchy. Mostly useful in large terragrunt projects containing lots of interdependent child modules. Atlantis `locals` can be used in the defined project marker files.\n\n| Flag Name                    | Description                                                                                                                                                                     | Default Value     | Type |\n| ---------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------- |----- |\n| `--project-hcl-files`        | Comma-separated names of arbitrary hcl files in the terragrunt hierarchy to create Atlantis projects for.<br>Disables the `--filter` flag  | \"\"      |  list(string) |\n| `--use-project-markers`      | If enabled, project hcl files must include `locals { atlantis_project = true }` for project creation.  | false      |  bool |\n| `--create-hcl-project-childs`        | Creates Atlantis projects for terragrunt child modules below the directories containing the HCL files defined in --project-hcl-files  | false       | bool |\n| `--create-hcl-project-external-childs`    | Creates Atlantis projects for terragrunt child modules outside the directories containing the HCL files defined in --project-hcl-files  | true          | bool |\n\n## All Locals\n\nAnother way to customize the output is to use `locals` values in your terragrunt modules. These can be set in either the parent or child terragrunt modules, and the settings will only affect the current module (or all child modules for parent locals).\n\n| Locals Name                   | Description                                                                                                                                                    | type         |\n| ----------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------ |\n| `atlantis_workflow`           | The custom atlantis workflow name to use for a module                                                                                                          | string       |\n| `atlantis_apply_requirements` | The custom `apply_requirements` array to use for a module                                                                                                      | list(string) |\n| `atlantis_terraform_version`  | Allows overriding the `--terraform-version` flag for a single module                                                                                           | string       |\n| `atlantis_autoplan`           | Allows overriding the `--autoplan` flag for a single module                                                                                                    | bool         |\n| `atlantis_skip`               | If true on a child module, that module will not appear in the output.<br>If true on a parent module, none of that parent's children will appear in the output. | bool         |\n| `extra_atlantis_dependencies` | See [Extra dependencies](https://github.com/transcend-io/terragrunt-atlantis-config#extra-dependencies)                                                        | list(string) |\n| `atlantis_project`            | Create Atlantis project for a project hcl file. Only functional with `--project-hcl-files` and `--use-project-markers` | bool         |\n\n## Separate workspace for parallel plan and apply\n\nAtlantis added support for running plan and apply parallel in [v0.13.0](https://github.com/runatlantis/atlantis/releases/tag/v0.13.0).\n\nTo use this feature, projects have to be separated in different workspaces, and the `create-workspace` flag enables this by concatenating the project path as the\nname of the workspace.\n\nAs an example, project `${git_root}/stage/app/terragrunt.hcl` will have the name `stage_app` as workspace name. This flag should be used along with `parallel` to enable parallel plan and apply:\n\n```bash\nterragrunt-atlantis-config generate --output atlantis.yaml --parallel --create-workspace\n```\n\nEnabling this feature may consume more resources like cpu, memory, network, and disk, as each workspace will now be cloned separately by atlantis.\n\nAs when defining the workspace this info is also needed when running `atlantis plan/apply -d ${git_root}/stage/app -w stage_app` to run the command on specific directory,\nyou can also use the `atlantis plan/apply -p stage_app` in case you have enabled the `create-project-name` cli argument (it is `false` by default).\n\n## Rules for merging config\n\nEach terragrunt module can have locals, but can also have zero to many `include` blocks that can specify parent terragrunt files that can also have locals.\n\nIn most cases (for string/boolean locals), the primary terragrunt module has the highest precedence, followed by the locals in the lowest appearing `include` block, etc. all the way until the lowest precedence at the locals in the first `include` block to appear.\n\nHowever, there is one exception where the values are merged, which is the `atlantis_extra_dependencies` local. For this local, all values are appended to one another. This way, you can have `include` files declare their own dependencies.\n\n## Local Installation and Usage\n\nYou can install this tool locally to checkout what kinds of config it will generate for your repo, though in production it is recommended to [install this tool directly onto your Atlantis server](##integrate-into-your-atlantis-server)\n\nRecommended: Install any version via go install:\n\n```bash\ngo install github.com/transcend-io/terragrunt-atlantis-config@v1.16.0\n```\n\nThis module officially supports golang versions v1.13, v1.14, v1.15, and v1.16, tested on CircleCI with each build\nThis module also officially supports both Windows and Nix-based file formats, tested on CircleCI with each build\n\nUsage Examples (see below sections for all options):\n\n```bash\n# From the root of your repo\nterragrunt-atlantis-config generate\n\n# or from anywhere\nterragrunt-atlantis-config generate --root /some/path/to/your/repo/root\n\n# output to a file\nterragrunt-atlantis-config generate --autoplan --output ./atlantis.yaml\n```\n\nFinally, check the log output (or your output file) for the YAML.\n\n## Contributing\n\nTo test any changes you've made, run `make gotestsum` (or `make test` for standard golang testing).\n\nOnce all your changes are passing and your PR is reviewed, a merge into `master` will trigger a Github Actions job to build the new binary, test it, and deploy it's artifacts to Github Releases along with checksums.\n\nYou can then open a PR on our homebrew tap similar to https://github.com/transcend-io/homebrew-tap/pull/4, and as soon as that merges your code will be released. Homebrew is not updated for every release, as Github is the primary artifact store.\n\n## Contributors\n\n<img src=\"./CONTRIBUTORS.svg\">\n\n## Stargazers over time\n\n[![Stargazers over time](https://starchart.cc/transcend-io/terragrunt-atlantis-config.svg)](https://starchart.cc/transcend-io/terragrunt-atlantis-config)\n\n## License\n\n[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Ftranscend-io%2Fterragrunt-atlantis-config.svg?type=large)](https://app.fossa.io/projects/git%2Bgithub.com%2Ftranscend-io%2Fterragrunt-atlantis-config?ref=badge_large)"
}
