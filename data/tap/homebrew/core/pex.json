{
  "name": "pex",
  "full_name": "pex",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Package manager for PostgreSQL",
  "license": "MIT",
  "homepage": "https://github.com/petere/pex",
  "versions": {
    "stable": "1.20140409",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/petere/pex/archive/1.20140409.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "5047946a2f83e00de4096cd2c3b1546bc07be431d758f97764a36b32b8f0ae57"
    }
  },
  "revision": 4,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pex/blobs/sha256:e234606cb3b25042d187ef86b637c01e451eaf69542a2860452704558c7f111b",
          "sha256": "e234606cb3b25042d187ef86b637c01e451eaf69542a2860452704558c7f111b"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "libpq"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": "If installing for the first time, perform the following in order to setup the necessary directory structure:\n  pex init\n",
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/pex.rb",
  "ruby_source_checksum": {
    "sha256": "5386e2d41d6630d62dad7e0b798ab2d7630f71ab6c5a9cc2a88d1eeb94b51e67"
  },
  "date_added": "2014-05-14T12:34:16-07:00",
  "readme": "# Pex\n\nPex is a light-weight package manager for PostgreSQL.\n\nInstall a package:\n\n    pex install plproxy\n\nSee available packages:\n\n    pex search\n\nIt's based on Git and standard Unix tools underneath.\n\nSee the man page for the complete usage instructions.\n\nPex is intended for developers and has support for managing multiple PostgreSQL installations.\n\nPex has been influenced by [Homebrew](http://mxcl.github.com/homebrew/) but is otherwise unrelated.\n\n[![Build Status](https://secure.travis-ci.org/petere/pex.png)](http://travis-ci.org/petere/pex)\n\n## Why Pex\n\nThere are many things to like:\n\n- Light-weight: only trivial run-time dependencies\n- Independent: doesn't matter where packages are hosted\n- Curated: no obsolete, unmaintained, immature, or broken packages\n- Trackable: control when packages change and know where they came from\n- Tested: all package downloads are automatically tested\n- Flexible: supports many installation layouts, can build Debs and RPMs\n- Extensible: fork and add your own in-house packages, no infrastructure required\n- Secure: everything is linked together by cryptographic hashes\n\n## Installation\n\nYou can just get the [pex](https://raw.githubusercontent.com/petere/pex/master/pex) program directly and install it wherever you want.\n\nThe standard installation procedure is:\n\n    git clone git://github.com/petere/pex.git\n    cd pex\n    sudo make install\n\nThis install the `pex` program and the man page under `/usr/local`. See the `Makefile` for more options.\n\nTo make a Debian package, run `make deb`.\n\nAfter installation, you must run\n\n    pex init\n\njust once to fetch the initial package descriptions and set up some internal directories.\n\nPex has minimal run-time dependencies.  You just need a POSIX shell, curl, and git, as well as PostgreSQL, including development headers, and any build dependencies of the packages you want to install.\n\n## How it works\n\nPex uses a repository of package description files (see below) to know where to download a specific package.  The package description files are (normally) in a Git repository, by default cloned from https://github.com/petere/pex-packages.  So to make changes, use Git tools to make a branch, revert changes, etc.  When asked to install a package, Pex downloads, unpacks, builds, and installs the package into the PostgreSQL installation.  There are command-line options to choose among multiple PostgreSQL installations.\n\nPex maintains a small amount of state to keep track of what it has already downloaded or installed.  See the man page for the file locations.\n\nIf you maintain custom versions of packages or have in-house packages, Pex can support that.  Just edit the repository and change the download URLs or add your own packages.\n\n## Package description file format\n\nUse `pex --repo` to see where the package description files are stored.  See the man page for details.\n\nThe package files are in YAML format.  But note that the files are parsed by a shell script, not by a real YAML library, so be gentle. The files must be named `packagename.yaml`.  Here is an example of `plsh.yaml`:\n\n    homepage: https://github.com/petere/plsh\n    url: https://github.com/petere/plsh/archive/1.20121226.zip\n    sha1: c85166bc04a3a3731c4acc3f144a0d4779f20010\n\nThere are three required fields:\n\n* `homepage`: A location that can be opened in a web browser to learn about the package.\n* `url`: A location that curl can download and either tar or zip can unpack to get the package source.\n* `sha1`: The SHA1 hash of the downloaded archive.\n\nThere is one optional field:\n\n* `aliases`: Lists alternative package names.  These can be used in commands such as `install` instead of the canonical package name.  If the package provides extensions that differ from the package name, it is recommended that the extension names be listed as aliases.  For example, the package `plv8` might list\n\n    aliases: plcoffee plls\n\nUse `pex audit` to check the package file for syntax and other errors. Note that this requires Perl and the YAML module."
}
