{
  "name": "git-cinnabar",
  "full_name": "git-cinnabar",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Git remote helper to interact with mercurial repositories",
  "license": "GPL-2.0-only",
  "homepage": "https://github.com/glandium/git-cinnabar",
  "versions": {
    "stable": "0.6.2",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/glandium/git-cinnabar.git",
      "tag": "0.6.2",
      "revision": "3b763ba9d1a7adfbbec392a72e802bff3a5a245c",
      "checksum": null
    },
    "head": {
      "url": "https://github.com/glandium/git-cinnabar.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-cinnabar/blobs/sha256:c668ff3557b13a4f552e954b0ea99506d326a7544f8927df1d8daefb76298e65",
          "sha256": "c668ff3557b13a4f552e954b0ea99506d326a7544f8927df1d8daefb76298e65"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-cinnabar/blobs/sha256:d385e374295bac7baf44d7924980b46dcae579d80634464c3eb49a195925c210",
          "sha256": "d385e374295bac7baf44d7924980b46dcae579d80634464c3eb49a195925c210"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-cinnabar/blobs/sha256:477f14056ad207fe51536fab1056bcc27052f15467d421d81dca3f4c413d9572",
          "sha256": "477f14056ad207fe51536fab1056bcc27052f15467d421d81dca3f4c413d9572"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-cinnabar/blobs/sha256:ae256f9873a276a6b894b4f058749620f71485e643f48baf270ce03c8a1c4cfd",
          "sha256": "ae256f9873a276a6b894b4f058749620f71485e643f48baf270ce03c8a1c4cfd"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-cinnabar/blobs/sha256:5793f2494ddc9e2d6875adfc95e6f120a6b22140830d1f7cdec3849fbb44e534",
          "sha256": "5793f2494ddc9e2d6875adfc95e6f120a6b22140830d1f7cdec3849fbb44e534"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-cinnabar/blobs/sha256:de90bc46344f545aa8480ee993518754c0df9f7a4c7c87e21bcf5156e4c299a8",
          "sha256": "de90bc46344f545aa8480ee993518754c0df9f7a4c7c87e21bcf5156e4c299a8"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-cinnabar/blobs/sha256:ee5e94a86d07b49080d8d6d4ab671731d3c5a430fc1abdb84fd96eedf1c4b8f9",
          "sha256": "ee5e94a86d07b49080d8d6d4ab671731d3c5a430fc1abdb84fd96eedf1c4b8f9"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [
    "git",
    "mercurial"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "curl"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [
    "git-remote-hg"
  ],
  "conflicts_with_reasons": [
    "both install `git-remote-hg` binaries"
  ],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/git-cinnabar.rb",
  "ruby_source_checksum": {
    "sha256": "33102d677b68f1f8e140431a5c4d986d0652dead33c6f4f05b149cf206b0ecce"
  },
  "date_added": "2017-07-08T03:35:50-07:00",
  "readme": "git-cinnabar 0.6\n================\n\n*cinnabar is the common natural form in which mercury can be found on Earth.\nIt contains mercury sulfide and its powder is used to make the vermillion\npigment.*\n\ngit-cinnabar is a git remote helper to interact with mercurial repositories.\nContrary to other such helpers\n([[1]](https://github.com/felipec/git-remote-hg)\n [[2]](https://github.com/rfk/git-remote-hg)\n [[3]](https://github.com/cosmin/git-hg)\n [[4]](https://github.com/todesschaf/git-hg)\n [[5]](https://github.com/msysgit/msysgit/wiki/Guide-to-git-remote-hg)\n [[6]](https://github.com/buchuki/gitifyhg/)), it doesn't use a local\nmercurial clone under the hood.\n\nThe main focus at the moment is to make it work with mozilla-central and\nrelated mercurial repositories and support Mozilla workflows (try server,\netc.).\n\nRepositories last used with versions lower than 0.5.0 are not supported.\nPlease run `git cinnabar upgrade` with version 0.5.0 first.\n\nLicense:\n--------\n\nThe git-cinnabar source code is distributed under the terms of the Mozilla Public\nLicense version 2.0 (see the MPL-2.0 file), with parts (the git-core subdirectory)\ndistributed under the terms of the GNU General Public License version 2.0 (see the\ngit-core/COPYING file).\n\nAs a consequence, git-cinnabar binary executables are distributed under the terms\nof the GNU General Public License version 2.0.\n\nRequirements:\n-------------\n\n- Git (any version should work ; cinnabarclone bundles require 1.4.4).\n- In order to build from source:\n  - Rust 1.60.0 or newer.\n  - GCC or clang.\n\nSetup:\n------\n\n### Prebuilt binaries\n\n- Assuming a prebuilt binary is available for your system, get the\n  [download.py script](https://raw.githubusercontent.com/glandium/git-cinnabar/master/download.py)\n  and run it (requires python 3.6 or newer) with:\n\n  ```\n  $ ./download.py\n  ```\n\n- Add the directory where the download happened to your PATH. If you have\n  another git-remote-hg project in your PATH already, make sure the\n  git-cinnabar path comes before.\n\n### Cargo\n\n- Run the following:\n\n  ```\n  $ cargo install git-cinnabar\n  $ git cinnabar setup\n  ```\n\n### Build manually\n\n- Run the following:\n\n  ```\n  $ git clone https://github.com/glandium/git-cinnabar\n  $ cd git-cinnabar\n  $ make\n  ```\n\n- Add the git-cinnabar directory to your PATH.\n\nUsage:\n------\n\n`$ git clone hg::<mercurial repo>`\n\nwhere `<mercurial repo>` can be a path to a local directory containing a\nmercurial repository, or a http, https or ssh url.\n\nEssentially, use git like you would for a git repository, but use a `hg::` url\nwhere you would use a `git://` url.\n\nSee https://github.com/glandium/git-cinnabar/wiki/Mozilla:-A-git-workflow-for-Gecko-development\nfor an example workflow for Mozilla repositories.\n\nRemote refs styles:\n-------------------\n\nMercurial has two different ways to handle what git would call branches:\nbranches and bookmarks. Mercurial branches are permanent markers on each\nchangeset that belongs to them, and bookmarks are similar to git branches.\n\nYou may choose how to interact with those with the `cinnabar.refs`\nconfiguration. The following values are supported, either individually or\ncombined in a comma-separated list:\n\n- `bookmarks`: in this mode, the mercurial repository's bookmarks are exposed\n  as `refs/heads/$bookmark`. Practically speaking, this means the mercurial\n  bookmarks appear as the remote git branches.\n\n- `tips`: in this mode, the most recent head of each mercurial branch is\n  exposed as `refs/heads/$branch`. Any other head of the same branch is not\n  exposed. This mode can be useful when branches have no more than one head.\n\n- `heads`: in this mode, the mercurial repository's heads are exposed as\n  `refs/heads/$branch/$head`, where `$branch` is the mercurial branch name\n  and `$head` is the full changeset sha1 of that head.\n\nWhen these values are used in combinations, the branch mappings are varied\naccordingly to make the type of each remote ref explicit and to avoid name\ncollisions.\n\n- When combining `bookmarks` and `heads`, bookmarks are exposed as\n  `refs/heads/bookmarks/$bookmark` and branch heads are exposed as\n  `refs/heads/branches/$branch/$head` (where `$head` is the full changeset\n  sha1 of the head).\n\n- When combining `bookmarks` and `tips`, bookmarks are exposed as\n  `refs/heads/bookmarks/$bookmark` and branch tips are exposed as\n  `refs/heads/branches/$branch`. Any other heads of the same branch are not\n  exposed.\n\n- When combining all of `bookmarks`, `heads`, and `tips`, bookmarks are\n  exposed as `refs/heads/bookmarks/$bookmark`, branch heads are exposed as\n  `refs/heads/branches/$branch/$head` (where `$head` is the full changeset\n  sha1 of the head), except for the branch tips, which are exposed as\n  `refs/heads/branches/$branch/tip`.\n\nThe shorthand `all` (also the default), is the combination of `bookmarks`,\n`heads`, and `tips`.\n\nThe refs style can also be configured per remote with the\n`remote.$remote.cinnabar-refs` configuration. It is also possible to use\n`cinnabar.pushrefs` or `remote.$remote.cinnabar-pushrefs` to use a different\nscheme for pushes only.\n\nTags:\n-----\n\nBecause mercurial stores tags in a file in the repository, it is not possible\nfor git-cinnabar to know them when git asks for them, except when the\nrepository has already been updated. Until version 0.4.0, git-cinnabar would\ntry to get tags in a best effort way.\n\nFurthermore, the way tags are tracked across branches in mercurial can make it\nawkward when pulling from multiple mercurial repositories. For example, pulling\ntags from mozilla-release, mozilla-beta, and mozilla-esr\\* repositories is messy.\n\nSo, as of 0.5.0, tags are not associated with mercurial remotes anymore, and one\nneeds to setup a separate remote that consolidates all mercurial tags tracked by\ngit-cinnabar. That remote can be set like the following:\n\n`$ git remote add tags hg::tags:`\n\nAnd tags can be updated with, e.g.:\n\n`$ git fetch tags`\n\nFetching a specific mercurial changeset:\n----------------------------------------\n\nIt can sometimes be useful to fetch a specific mercurial changeset from a\nremote server, without fetching the entire repository. This can be done with a command line such as:\n\n`$ git cinnabar fetch hg::<mercurial repo> <changeset sha1>`\n\nTranslating git commits to mercurial changesets and vice-versa:\n---------------------------------------------------------------\n\nWhen dealing with a remote repository that doesn't use the same identifiers,\nthings can easily get complicated. Git-cinnabar comes with commands to know the\nmercurial changeset a git commit represents and the other way around.\n\nThe following command will give you the git commit corresponding to the given\nmercurial changeset sha1:\n\n`$ git cinnabar hg2git <changeset>`\n\nThe following command will give you the mercurial changeset corresponding to\nthe given git commit sha1:\n\n`$ git cinnabar git2hg <commit>`\n\nBoth commands allow abbreviated forms, as long as they are unambiguous\n(no need for all the 40 hex digits of the sha1).\n\nAvoiding metadata:\n------------------\n\nIn some cases, it is not desirable to have git-cinnabar create metadata for all\npushed commits. Notably, for volatile commits such as those used on the Mozilla\ntry repository.\n\nBy default, git-cinnabar doesn't store metadata when pushing to non-publishing\nrepositories. It does otherwise.\n\nThis behavior can be changed per-remote with a `remote.$remote.cinnabar-data`\npreference with one of the following values:\n- `always`\n- `never`\n- `phase`\n\n`phase` is the default described above. `always` and `never` are\nself-explanatory.\n\nCinnabar clone:\n---------------\n\nFor large repositories, an initial clone can take a large amount of time.\nA Mercurial server operator can install the extension provided in\n`mercurial/cinnabarclone.py`, and point to a git repository or bundle\ncontaining pre-generated git-cinnabar metadata. See details in the\nextension file.\n\nUsers cloning the repository would automatically get the metadata from\nthe git repository or bundle, and then pull the missing changesets from\nthe Mercurial repository.\n\nLimitations:\n------------\n\nAt the moment, push is limited to non-merge commits.\n\nThere is no support for the following mercurial features:\n- obsolescence markers\n- phases\n- namespaces\n\nChecking corruptions:\n---------------------\n\nGit-cinnabar is still in early infancy, and its metadata might get corrupted\nfor some reason.\n\nThe following command allows to detect various types of metadata corruption:\n\n`git cinnabar fsck`\n\nThis command will fix the corruptions it can, as well as adjust some of the\nmetadata that contains items that became unnecessary in newer versions.\n\nThe `--full` option may be added for a more thorough validation of the metadata\ncontents. Using this option adds a significant amount of work, and the command\ncan take more than half an hour on repositories the size of mozilla-central.\n\n`hg://` urls:\n-----------\n\nThe msys shell (not msys2) doesn't keep hg::url intact when crossing the\nmsys/native boundary, so when running cinnabar in a msys shell with a native\ngit, the url is munged as `hg;;proto;\\host\\path\\`, which git doesn't understand\nand doesn't even start redirecting to git-remote-hg.\n\nTo allow such setups to still work, `hg://` urls are supported. But since\nmercurial can be either on many different protocols, we abuse the port in the\ngiven url to pass the protocol.\n\nA `hg://` url thus looks like:\n\n`hg://<host>[:[<port>.]<protocol>]/<path>`\n\nThe default protocol is https, and the port can be omitted.\n\n- `hg::https://hg.mozilla.org/mozilla-central` becomes\n  `hg://hg.mozilla.org/mozilla-central`\n\n- `hg::http://hg.mozilla.org/mozilla-central` becomes\n  `hg://hg.mozilla.org:http/mozilla-central`\n\n- `hg::ssh://hg.mozilla.org/mozilla-central` becomes\n  `hg://hg.mozilla.org:ssh/mozilla-central`\n\n- `hg::file:///some/path` becomes (awkward) `hg://:file/some/path`\n\n- `hg::http://localhost:8080/foo` becomes `hg://localhost:8080.http/foo`\n\n- `hg::tags:` becomes `hg://:tags`\n\nExperimental features:\n----------------------\n\nGit-cinnabar has a set of experimental features that can be enabled\nindependently. You can set the `cinnabar.experiments` git configuration to a\ncomma-separated list of those features to enable the selected ones, or to\n`all` to enable them all. The available features are:\n\n- **merge**\n\n  Git-cinnabar currently doesn’t allow to push merge commits. The main\n  reason for this is that generating the correct mercurial data for those\n  merges is tricky, and needs to be gotten right.\n\n  The main caveat with this experimental support for pushing merges is that it\n  currently doesn’t handle the case where a file was moved on one of the\n  branches the same way mercurial would (i.e. the information would be lost to\n  mercurial users)."
}
