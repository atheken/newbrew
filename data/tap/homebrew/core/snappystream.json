{
  "name": "snappystream",
  "full_name": "snappystream",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "C++ snappy stream realization (compatible with snappy)",
  "license": "Apache-2.0",
  "homepage": "https://github.com/hoxnox/snappystream",
  "versions": {
    "stable": "1.0.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/hoxnox/snappystream/archive/1.0.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "a50a1765eac1999bf42d0afd46d8704e8c4040b6e6c05dcfdffae6dcd5c6c6b8"
    },
    "head": {
      "url": "https://github.com/hoxnox/snappystream.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/snappystream/blobs/sha256:6f548979a18dc5f812f008e189bcc86ce1db4d12297eed756f70f2cebb0ad8db",
          "sha256": "6f548979a18dc5f812f008e189bcc86ce1db4d12297eed756f70f2cebb0ad8db"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/snappystream/blobs/sha256:4f0621fed569c3f1f467fb5b89a1727d02dd9f069eac22dd662750764a34ad40",
          "sha256": "4f0621fed569c3f1f467fb5b89a1727d02dd9f069eac22dd662750764a34ad40"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/snappystream/blobs/sha256:4723ca8cfbd115326740f631b84db163cba902c1233c98e0b413a4250c228692",
          "sha256": "4723ca8cfbd115326740f631b84db163cba902c1233c98e0b413a4250c228692"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/snappystream/blobs/sha256:95271f76e12095cab04b34d0fc977a63ebae368837061cd034be543d1eed6733",
          "sha256": "95271f76e12095cab04b34d0fc977a63ebae368837061cd034be543d1eed6733"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/snappystream/blobs/sha256:1c5ef41496ec66bddc4e850801c848886a096637917b178b5486f7b04e246fe3",
          "sha256": "1c5ef41496ec66bddc4e850801c848886a096637917b178b5486f7b04e246fe3"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/snappystream/blobs/sha256:0259933ab01a0edf8162f901820728e9f36e0244e6dc34aa8de64caf95247bcb",
          "sha256": "0259933ab01a0edf8162f901820728e9f36e0244e6dc34aa8de64caf95247bcb"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/snappystream/blobs/sha256:083a4297326a9171920d68c6f0d93891d1cef8971546efd0293360b8dfc4e564",
          "sha256": "083a4297326a9171920d68c6f0d93891d1cef8971546efd0293360b8dfc4e564"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/snappystream/blobs/sha256:f768ccd06fd8d1cceb9905d71d7be38b55c3d2797df8d58a4f5528f22144db6d",
          "sha256": "f768ccd06fd8d1cceb9905d71d7be38b55c3d2797df8d58a4f5528f22144db6d"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [
    "snappy"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/snappystream.rb",
  "ruby_source_checksum": {
    "sha256": "99aa820b98c99e76b370c923582cc95e4ea30b33d603d0187b2219936dc80e4f"
  },
  "date_added": "2014-12-29T11:52:23+00:00",
  "readme": "# C++ snappy stream\n\n## Introduction\n\nThere is [snappy compressor from google][snappy], but it doesn't have default stream realisation.\nThis project aim to release C++ stream for snappy with format, compatible with [java realisation by\nDain Sundstrom][snjava]. So you can use, for example, java realisation for compression and C++ for\ndecompression, or vice versa.\n\nFormat description (from javadoc of Dain Sundstorm project):\n\n```\n   ---+---+---+---+---+---+---+---+---+...+---+---\n...   |CFL|SIZE   |CRC32C         |DATA       |   ...\n   ---+---+---+---+---+---+---+---+---+...+---+---\n\nCFL    - indicating if the block is compressed or not. A value of 0x00 means uncompressed, and\n         0x01 means compressed.\nSIZE   - size of block in network byte order. This value is never zero as empty blocks are\n         never written. The maximum allowed length is 32k.\nCRC32C - crc32c checksum of the user input data masked with the following function: \n         ((crc >>> 15) | (crc << 17)) + 0xa282ead8\n\nAn uncompressed block is simply copied from the input, thus guaranteeing that the output is\nnever larger than the input (not including the header)\n```\n\n[snappy]:http://code.google.com/p/snappy/\n[snjava]:http://github.com/dain/snappy#stream-format\n\n## Quick start\n\ninstall snappy and cmake using emerge, apt, or whatever (for conan - see\nbelow)\n\nexecute \n\n```c++\ncd /tmp\ngit clone git://github.com/hoxnox/snappy-stream.git\ncd snappy-stream\nmkdir build\ncd build\ncmake ../\nmake\ng++ -I../include -L./ ../doc/examples/example_main.cpp -lsnappystream -lsnappy -oexample\n./example\n```\n\nGenerate doc for futher reading (you will need doxygen)\n\n```sh\nmake doc\n```\n\n## Usage example\n\nBuilding and linking (assume snappy-stream - directory with the project, snappy-stream/build - build dir:\n\n```sh\ng++ -I\"snappy-stream/include\" -L\"snappy-stream/build\" example.cpp -lsnappystream\n```\n\nexample:\n\n```c++\n#include <fstream>\n#include <snappystream.hpp>\n\nvoid write()\n{\n\tstd::ofstream ofile(\"snappy-file\");\n\tif(!ofile.is_open())\n\t\treturn;\n\tsnappy::oSnappyStream osnstrm(ofile);\n\tosnstrm << \"Hello, world!\" << std::endl;\n}\n\nvoid read()\n{\n\tstd::ifstream ifile(\"snappy-file\");\n\tif(!ifile.is_open())\n\t\treturn;\n\tsnappy::iSnappyStream isnstrm(ifile);\n\tstd::cout << isnstrm.rdbuf();\n}\n\nint main(int argc, char * argv[])\n{\n\twrite();\n\tread();\n\treturn 0;\n}\n```\n\n## Boost iostreams filters\n\nYou can use snappystream with boost::iostreams. Project must be\nconfigured with `WITH_BOOST_IOSTREAMS` key:\n\n```c++\ncmake -DWITH_BOOST_IOSTREAMS=1 ./\n```\n\nIn that case snappystream.hpp includes OutputSnappyStreamBoostFilter.hpp\nand InputSnappyStreamBoostFilter.hpp.\n\nUsage example:\n\n```c++\nnamespace io = boost::iostreams;\n\nstd::ofstream file(\"/path/to/file\", std::ios::binary | std::ios::out);\nio::filtering_ostream out;\nout.push(snappy::OutputSnappyStreamBoostFilter());\nout.push(file);\nout << \"\"\n\nstd::ifstream file(\"/path/to/file\", std::ios::binary | std::ios::in);\nio::filtering_istream in;\nin.push(snappy::InputSnappyStreamBoostFilter());\nin.push(file);\nio::copy(in, std::cout);\n```\n\n## Building with conan\n\nYou can use [conan](http://conan.io) to easily include snappystream into your\nproject. All you need - conan executable, conanfile.txt\n\nAdd repository: \n\n```sh\nconan remote add hoxnox https://api.bintray.com/conan/hoxnox/conan\n```\nfile conanfile.txt:\n\n```sh\n[requires]\nsnappystream/0.2.8@hoxnox/stable\n[generators]\ncmake\n```\n\nTwo additional lines in your CMakeLists.txt\n\n```cmake\ninclude(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)\nconan_basic_setup()\n```\n\nand link with `CONAN_LIBS`:\n\n```cmake\ntarget_link_libraries(your_executable ${CONAN_LIBS})\n```\n\nBuilding is simple:\n\n```sh\nmkdir build && cd build\nconan install --build=missing ..\ncmake ..\nmake install\n```"
}
