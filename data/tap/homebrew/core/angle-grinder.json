{
  "name": "angle-grinder",
  "full_name": "angle-grinder",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Slice and dice log files on the command-line",
  "license": "MIT",
  "homepage": "https://github.com/rcoh/angle-grinder",
  "versions": {
    "stable": "0.19.2",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/rcoh/angle-grinder/archive/v0.19.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "3a5637bbd3ef3fc2f8164a1af90b8894f79c1b2adb89a874f1f3c5a56006e18b"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/angle-grinder/blobs/sha256:0898c435c13589304eb210f15f6ab3ca649f2f6487a9380dcc0f61f7117d5179",
          "sha256": "0898c435c13589304eb210f15f6ab3ca649f2f6487a9380dcc0f61f7117d5179"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/angle-grinder/blobs/sha256:448311b0df68d2960d91bae38fe6a70ae43bdaee5b5f282a18793c1eaa2915e5",
          "sha256": "448311b0df68d2960d91bae38fe6a70ae43bdaee5b5f282a18793c1eaa2915e5"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/angle-grinder/blobs/sha256:6197b3cb300eb4f0ee9f3c7d87cf89ea5f0812ab94297169980a2cc0a589c5d0",
          "sha256": "6197b3cb300eb4f0ee9f3c7d87cf89ea5f0812ab94297169980a2cc0a589c5d0"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/angle-grinder/blobs/sha256:13d49ccb3ec793eb72148bf9b9ef165c65198cfe912f5bfade27657e19c30e9c",
          "sha256": "13d49ccb3ec793eb72148bf9b9ef165c65198cfe912f5bfade27657e19c30e9c"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/angle-grinder/blobs/sha256:4e53031630575ee7cd4b17d4f9916c055c6f006c7da8965e7c53e0ec324e6c4d",
          "sha256": "4e53031630575ee7cd4b17d4f9916c055c6f006c7da8965e7c53e0ec324e6c4d"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/angle-grinder/blobs/sha256:c800568a011cd5eb5717df3640524b4248656adf4d9a7cc2575ce40ad744b940",
          "sha256": "c800568a011cd5eb5717df3640524b4248656adf4d9a7cc2575ce40ad744b940"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/angle-grinder/blobs/sha256:6b8c8908f8402680262893d66c663a9c4d98b572e71f5df6a44fdec3ccd04be3",
          "sha256": "6b8c8908f8402680262893d66c663a9c4d98b572e71f5df6a44fdec3ccd04be3"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "2706c66e8def3eeba4d9bf1adf66221c8ad70701",
  "ruby_source_path": "Formula/angle-grinder.rb",
  "ruby_source_checksum": {
    "sha256": "84070a602ed757dac3984779e946f96c3e572e5e611cf97be4a568de8c72afd1"
  },
  "date_added": "2018-04-21T07:44:54+10:00",
  "readme": "\n# angle-grinder [![Build Status](https://travis-ci.org/rcoh/angle-grinder.svg?branch=main)](https://travis-ci.org/rcoh/angle-grinder) [![Gitter chat](https://badges.gitter.im/gitterHQ/gitter.png)](https://gitter.im/angle-grinder/Lobby)\nSlice and dice log files on the command line.\n\nAngle-grinder allows you to parse, aggregate, sum, average, min/max, percentile, and sort your data. You can see it, live-updating, in your terminal. Angle grinder is designed for when, for whatever reason, you don't have your data in graphite/honeycomb/kibana/sumologic/splunk/etc. but still want to be able to do sophisticated analytics.\n\nAngle grinder can process well above 1M rows per second (simple pipelines as high as 5M), so it's usable for fairly meaty aggregation. The results will live update in your terminal as data is processed. Angle grinder is a bare bones functional programming language coupled with a pretty terminal UI.\n\n![overview gif](/screen_shots/overview.gif)\n\n## Quick Links\n* [Installation](#installation)\n* [Query Syntax Overview](#query-syntax)\n* [Operators](#operators)\n    * Parsers: [JSON](#json) [logfmt](#logfmt) [split](#split) [generic](#parse)\n    * Misc: [Add/remove fields](#fields) [limit](#limit) [timeslice](#timeslice) [where](#where)\n    * Aggregators: [count](#count) [sum](#sum) [min](#min) [max](#max) [percentile](#percentile) [sort](#sort) [total](#total) [count distinct](#count-distinct)\n* [Output Control](#rendering)\n## Installation\nBinaries are available for Linux and OSX. Many more platforms (including Windows) are available if you compile from source. In all of the commands below, the resulting binary will be called `agrind`. Starting with `v0.9.0`, `agrind` can self-update via the `--self-update` flag. Thanks to the many volunteers who maintain angle-grinder on different package managers & environments!\n\n### macOS\n**Brew**\n```bash\nbrew install angle-grinder\n```\n\n**Macports**\n```bash\nsudo port selfupdate\nsudo port install angle-grinder\n```\n\n### [FreeBSD](https://www.freshports.org/textproc/angle-grinder/)\n```bash\npkg install angle-grinder\n```\n\n### Linux (any MUSL compatible variant)\n```bash\ncurl -L https://github.com/rcoh/angle-grinder/releases/download/v0.18.0/agrind-x86_64-unknown-linux-musl.tar.gz \\\n  | tar Ozxf - \\\n  | sudo tee /usr/local/bin/agrind > /dev/null && sudo chmod +x /usr/local/bin/agrind\n  \nagrind --self-update  \n```\n\n### Cargo (most platforms)\n\nIf you have Cargo installed, you can compile & install from source: (Works with Stable Rust >=1.26)\n```bash\ncargo install ag\n```\n\n## Query Syntax\n\nAn angle grinder query is composed of filters followed by a series of operators.\nThe filters select the lines from the input stream to be transformed by the operators.\nTypically, the initial operators will transform the data in some way by parsing fields or JSON from the log line.\nThe subsequent operators can then aggregate or group the data via operators like `sum`, `average`, `percentile`, etc.\n```bash\nagrind '<filter1> [... <filterN>] | operator1 | operator2 | operator3 | ...'\n```\n\nA simple query that operates on JSON logs and counts the number of logs per level could be:\n```bash\nagrind '* | json | count by log_level'\n```\n\n### Escaping Field Names\n\nField names containing spaces, periods, or quotes must be escaped using `[\"<FIELD>\"]`:\n\n```bash\nagrind '* | json | count by [\"date received\"], [\"grpc.method\"]\n```\n\n### Filters\n\nThere are three basic filters:\n\n- `*`: Match all logs\n- `filter-me*` (with no quotes) is a case-insensitive match that can include wildcards\n- \"filter-me\" (in quotes) is a case-sensitive match (no wildcards, `*` matches literal `*`\n, `filter-me`, or `\"filter me!\"`.\n\nFilters can be combined with `AND`, `OR` and `NOT`\n```agrind\n(\"ERROR\" OR WARN*) AND NOT staging | count\n```\n\nSub-expressions _must_ be grouped in parenthesis. Only lines that match all filters will be passed to the subsequent operators.\n![filter.gif](/screen_shots/filter.gif)\n\n### Aliases\nStarting with v0.12.0, angle grinder supports aliases, pre-built pipelines do simplify common tasks or formats. The only alias currently defined is `apache`, which parses apache logs. Adding more `aliases` is one of the easiest ways to [contribute](#contributing)!\n\n*Examples*:\n```agrind\n* | apache | count by status\n```\n\n### Operators\n\n#### Non Aggregate Operators\nThese operators have a 1 to 1 correspondence between input data and output data. 1 row in, 0 or 1 rows out.\n\n##### JSON\n`json [from other_field]`: Extract json-serialized rows into fields for later use. If the row is _not_ valid JSON, then it is dropped. Optionally, `from other_field` can be\nspecified. Nested JSON structures are supported out of the box. Simply access nested values with `.key[index]`, for example, `.servers[6]`. Negative indexing is also supported.\n\n*Examples*:\n```agrind\n* | json\n```\n```agrind\n* | parse \"INFO *\" as js | json from js\n```\n\nGiven input like:\n```\n{\"key\": \"blah\", \"nested_key\": {\"this\": \"that\"}}\n```\n```agrind\n* | json | count_distinct(nested_key.this)\n```\n![json.gif](/screen_shots/json.gif)\n\n##### Logfmt\n`logfmt [from other_field]`: Extract logfmt-serialized rows into fields for later use. If the row is _not_ valid logfmt, then it is dropped. Optionally, `from other_field` can be specified. Logfmt is a an output format commonly used by Heroku and Splunk, described at https://www.brandur.org/logfmt.\n\n*Examples*:\n```agrind\n* | logfmt\n```\n\nGiven input like:\n```\n{\"key\": \"blah\", \"nested_key\": \"some=logfmt data=more\"}\n```\n```agrind\n* | json | logfmt from nested_key | fields some\n```\n\n##### Split\n`split[(input_field)] [on separator] [as new_field]`: Split the input via the separator (default is `,`). Output is an array type. If no `input_field` or `new_field`, the contents will be put in the key `_split`.\n\n*Examples*:\n```agrind\n* | split on \" \"\n```\n\nGiven input like:\n```\nINFO web-001 influxd[188053]: 127.0.0.1 \"POST /write HTTP/1.0\" 204\n```\n\nOutput:\n```\n[_split=[INFO, web-001, influxd[188053]:, 127.0.0.1, POST /write HTTP/1.0, 204]]\n```\n\nIf `input_field` is used, and there is no `new_field` specified, then the `input_field` will be overridden with the split data-structure. For example:\n```agrind\n* | parse \"* *\" as level, csv | split(csv)\n```\n\nGiven input like:\n```\nINFO darren,hello,50\nWARN jonathon,good-bye,100\n```\n\nWill output:\n```\n[csv=[darren, hello, 50]]        [level=INFO]\n[csv=[jonathon, good-bye, 100]]        [level=WARN]\n```\n\nOther examples:\n```agrind\n* | logfmt | split(raw) on \"blah\" as tokens | sum(tokens[1])\n```\n\n##### Parse\n`parse \"* pattern * otherpattern *\" [from field] as a,b,c [nodrop]`: Parse text that matches the pattern into variables. Lines that don't match the pattern will be dropped unless `nodrop` is specified. `*` is equivalent to regular expression `.*` and is greedy.\nBy default, `parse` operates on the raw text of the message. With `from field_name`, parse will instead process input from a specific column. Any whitespace in the parse\nexpression will match _any_ whitespace character in the input text (eg. a literal tab).\n\n*Examples*:\n```agrind\n* | parse \"[status_code=*]\" as status_code\n```\n![parse.gif](/screen_shots/parse.gif)\n\n##### Parse Regex\n`parse regex \"<regex-with-named-captures>\" [from field] [nodrop]`: Match the\ninput text against a regular expression and populate the record with the named\ncaptures.  Lines that don't match the pattern will be dropped unless `nodrop` is\nspecified. By default, `parse` operates on the raw text of the message. With\n`from field_name`, parse will instead process input from a specific column.\n\n*Notes*:\n\n- Only named captures are supported.  If the regular expression includes any\n  unnamed captures, an error will be raised.\n- The [Rust regular expression syntax](https://docs.rs/regex/latest/regex/#syntax) is used.\n- Escape sequences do not require an extra backslash (i.e. `\\w` works as-is).\n\n*Examples*:\nTo parse the phrase \"Hello, ...!\" and capture the value of the \"...\" in the\nname field:\n\n```agrind\n* | parse regex \"Hello, (?P<name>\\w+)\"\n```\n\n##### Fields\n`fields [only|except|-|+] a, b`: Drop fields `a, b` or include only `a, b` depending on specified mode.\n\n*Examples*:\nDrop all fields except `event` and `timestamp`\n```agrind\n* | json | fields + event, timestamp\n```\nDrop only the `event` field\n```agrind\n* | fields except event\n```\n\n##### Where\n`where <bool-expr>`: Drop rows where the condition is not met.\nThe condition must be an expression that returns a boolean value.\nThe expression can be as simple as a field name or a comparison (i.e. ==, !=, <=, >=, <, >)\nbetween fields and literal values (i.e. numbers, strings).\nThe '!' operator can be used to negate the result of a sub-expression.\nNote that `None == None`, so a row where both the left and right sides match a non-existent key will match.\n\n*Examples*\n```agrind\n* | json | where status_code >= 400\n```\n```agrind\n* | json | where user_id_a == user_id_b\n```\n```agrind\n* | json | where url != \"/hostname\"\n```\n\n##### Limit\n`limit #`: Limit the number of rows to the given amount.  If the number is positive, only the\nfirst N rows are returned.  If the number is negative, the last N rows are returned.\n\n*Examples*\n```agrind\n* | limit 10\n```\n```agrind\n* | limit -10\n```\n\n##### Field Expression\n`<expr> as <name>`: The given expression is evaluated and the result is stored\nin a field with the given name for the current row.  The expression can be\nmade up of the following:\n\n* `+`, `-`, `*`, `/`: Mathematical operators with the normal precedence rules.\n  The operators work on numeric values and strings that can automatically be\n  converted to a number.  In addition, these operators work for date-time and\n  duration values when appropriate.  For example, you can take the difference\n  between two date-times, but cannot add them together.\n* `==`, `!=` (or `<>`), `<=`, `>=`, `<`, `>`: Boolean operators work\n  on most data types.\n* `and`, `&&`, `or`, `||`: Short-circuiting logical operators.\n* `<field>`: The name of a field in the current row.  If the row does not\n  contain the given field, an error will be reported.\n* Parentheses to group operations\n\nThe following functions are supported within expressions:\n\n* Mathematical functions: `abs()`, `acos()`, `asin()`, `atan()`, `atan2()`,\n  `cbrt(), ceil()`, `cos()`, `cosh()`, `exp()`, `expm1()`, `floor()`,\n  `hypot()`, `log()`, `log10(), log1p()`, `round()`, `sin()`, `sinh()`,\n  `sqrt()`, `tan()`, `tanh()`, `toDegrees()`,\n  `toRadians()`\n* `concat(arg0, ..., argN)` - Concatenate the arguments into a string\n* `contains(haystack, needle)` - Return true if the haystack contains the needle.\n* `length(str)` - Returns the number of characters in \"str\".\n* `now()` - Returns the current date and time.\n* `num(value)` - Returns the given value as a number.\n* `parseDate(str)` - Attempt to parse a date from the given string.\n* `parseHex(str)` - Attempt to convert a hexadecimal string into an integer.\n* `substring(str, startOffset, [endOffset])` - Returns the part of the string\n  specified by the given starting offset up to the end offset (if specified).\n* `toLowerCase(str)` - Returns the lowercase version of the string.\n* `toUpperCase(str)` - Returns the uppercase version of the string.\n* `isNull(value)` - Returns true if value is `null`, false otherwise.\n* `isEmpty(value)` - Returns true if value is `null` or an empty string, false\n  otherwise.\n* `isBlank(value)` - Returns true if value is `null`, an empty string, or a\n  whitespace-only string, false otherwise.\n* `isNumeric(str)` - Returns true if the given string is a number.\n\n*Examples*\nMultiply `value` by 100 to get the percentage\n```agrind\n* | json | value * 100 as percentage\n```\n\n##### `if` Operator\n\n`if(<condition>, <value-if-true>, <value-if-false>)`: Choose between two values\nbased on the provided condition.\n\n*Examples*\n\nTo get byte counts for successful requests:\n\n```agrind\n* | json | if(status == 200, sc_bytes, 0) as ok_bytes\n```\n\n#### Aggregate Operators\nAggregate operators group and combine your data by 0 or more key fields. The same query can include multiple aggregates.\nThe general syntax is:\n```noformat\n(operator [as renamed_column])+ [by key_col1, key_col2]\n```\n\nIn the simplest form, key fields refer to columns, but they can also be generalized expressions (see examples)\n*Examples*:\n```agrind\n* | count\n```\n```agrind\n* | json | count by status_code\n```\n```agrind\n* | json | count, p50(response_ms), p90(response_ms) by status_code\n```\n```agrind\n* | json | count as num_requests, p50(response_ms), p90(response_ms) by status_code\n```\n```agrind\n* | json | count, p50(response_ms), p90(response_ms), count by status_code >= 400, url\n```\n\nThere are several aggregate operators available.\n\n##### Count\n`count[(condition)] [as count_column]`: Counts the number of input rows. Output column defaults to `_count`. Optionally, you\ncan provide a condition -- this will count all rows for which the condition evaluates to true.\n\n*Examples*:\n\nCount number of rows by `source_host`:\n```agrind\n* | count by source_host\n```\nCount number of source_hosts:\n```agrind\n* | count by source_host | count\n```\n\nCount the number of info vs. error logs:\n```agrind\n* | json | count(level == \"info\") as info_logs, count(level == \"error\") as error_logs\n```\n\n##### Sum\n`sum(column) [as sum_column]`: Sum values in `column`. If the value in `column` is non-numeric, the row will be ignored.\n*Examples*:\n```agrind\n* | json | sum(num_records) by action\n```\n\n##### Min\n`min(column) [as min_column] [by a, b] `: Compute the min of values in `column`. If the value in `column` is non-numeric, the row will be ignored.\n\n*Examples*:\n```agrind\n* | json | min(response_time)\n```\n\n##### Average\n`average(column) [as average_column] [by a, b] `: Average values in `column`. If the value in `column` is non-numeric, the row will be ignored.\n\n*Examples*:\n```agrind\n* | json | average(response_time)\n```\n\n##### Max\n`max(column) [as max_column] [by a, b] `: Compute the max of values in `column`. If the value in `column` is non-numeric, the row will be ignored.\n\n*Examples*:\n```agrind\n* | json | max(response_time)\n```\n\n##### Percentile\n`pXX(column)`: calculate the XXth percentile of `column`\n\n*Examples*:\n```agrind\n* | json | p50(response_time), p90(response_time) by endpoint_url, status_code\n```\n\n##### Sort\n`sort by a, [b, c] [asc|desc]`: Sort aggregate data by a collection of columns. Defaults to ascending. \n\n*Examples*:\n```agrind\n* | json | count by endpoint_url, status_code | sort by endpoint_url desc\n```\n\nIn addition to columns, `sort` can also sort an arbitrary expressions.\n```agrind\n* | json | sort by num_requests / num_responses\n```\n\n\n```agrind\n* | json | sort by length(endpoint_url)\n```\n\n##### Timeslice\n`timeslice(<timestamp>) <duration> [as <field>]`: Truncates a timestamp to the\ngiven duration to allow for partitioning messages into slices of time.  The\n`timestamp` parameter must be a date value, such as that returned by the\n`parseDate()` function.  The duration is an amount followed by one of the\nfollowing units:\n\n* `ns` - nanoseconds\n* `us` - microseconds\n* `ms` - milliseconds\n* `s` - seconds\n* `m` - minutes\n* `h` - hours\n* `d` - days\n* `w` - weeks\n\nThe resulting timestamp is placed in the `_timeslice` field by default or the\nfield specified after the `as` keyword.\n\n*Examples*:\n```agrind\n* | json | timeslice(parseDate(ts)) 5m\n```\n\n##### Total\n`total(a) [as renamed_total]`: Compute the running total of a given field. Total does not currently support grouping!\n\n*Examples*:\n```agrind\n* | json | total(num_requests) as tot_requests\n```\n\n##### Count Distinct\n`count_distinct(a)`: Count distinct values of column `a`. Warning: this is not fixed memory. Be careful about processing too many groups.\n\n*Examples*:\n```agrind\n* | json | count_distinct(ip_address)\n```\n\n### Example Queries\n- Count the number of downloads of angle-grinder by release (with special guest jq)\n```bash\ncurl  https://api.github.com/repos/rcoh/angle-grinder/releases  | \\\n   jq '.[] | .assets | .[]' -c | \\\n   agrind '* | json\n         | parse \"download/*/\" from browser_download_url as version\n         | sum(download_count) by version | sort by version desc'\n```\nOutput:\n```noformat\nversion       _sum\n-----------------------\nv0.6.2        0\nv0.6.1        4\nv0.6.0        5\nv0.5.1        0\nv0.5.0        4\nv0.4.0        0\nv0.3.3        0\nv0.3.2        2\nv0.3.1        9\nv0.3.0        7\nv0.2.1        0\nv0.2.0        1\n```\n- Take the 50th percentile of response time by host:\n```bash\ntail -F my_json_logs | agrind '* | json | pct50(response_time) by url'\n```\n- Count the number of status codes by url:\n```bash\ntail -F  my_json_logs | agrind '* | json | count status_code by url'\n```\nMore example queries can be found in the [tests folder](tests/structured_tests)\n\n### Rendering\nNon-aggregate data is simply written row-by-row to the terminal as it is received:\n```noformat\ntail -f live_pcap | agrind '* | parse \"* > *:\" as src, dest | parse \"length *\" as length'\n[dest=111.221.29.254.https]        [length=0]        [src=21:50:18.458331 IP 10.0.2.243.47152]\n[dest=111.221.29.254.https]        [length=310]      [src=21:50:18.458527 IP 10.0.2.243.47152]\n```\n\nAlternate rendering formats can be provided with the `--output` flag. Options:\n* `--output json`: JSON output\n* `--output logfmt`: logfmt style output (`k=v`)\n* `--output format=<rust formatter>`: This flag uses [rust string formatting syntax](https://doc.rust-lang.org/std/fmt/#syntax). For example:\n    ```noformat\n    tail -f live_pcap | agrind --format '{src} => {dst} | length={length}' '* | parse \"* > *:\" as src, dest | parse \"length *\" as length'\n    21:50:18.458331 IP 10.0.2.243.47152 => 111.221.29.254.https | length=0\n    21:50:18.458527 IP 10.0.2.243.47152 => 111.221.29.254.https | length=310\n    ```\n\nAggregate data is written to the terminal and will live-update until the stream ends:\n```noformat\nk2                  avg\n--------------------------------\ntest longer test    500.50\ntest test           375.38\nalternate input     4.00\nhello               3.00\nhello thanks        2.00\n```\n\nThe renderer will do its best to keep the data nicely formatted as it changes and the number of output rows is limited to the length of your terminal. Currently,\nit has a refresh rate of about 20hz.\n\nThe renderer can detect whether or not the output is a tty -- if you write to a file, it will print once when the pipeline completes.\n\n### Contributing\n`angle-grinder` builds with Rust >= 1.26. `rustfmt` is required when submitting PRs (`rustup component add rustfmt`).\n\nThere are a number of ways you can contribute:\n- Defining new aliases for common log formats or actions\n- Adding new special purpose operators\n- Improve documentation of existing operators + providing more usage examples\n- Provide more test cases of real queries on real world data\n- Tell more people about angle grinder!\n```bash\ncargo build\ncargo test\ncargo install --path .\nagrind --help\n... write some code!\n\ncargo fmt\n\ngit commit ... etc.\n```\n\n**When submitting PRs, please run `cargo fmt` -- this is necessary for the CI suite to pass.** You can install `cargo fmt` with: `rustup component add rustfmt` if it's not already in your toolchain.\n\nSee the following projects and open issues for specific potential improvements/bugs.\n\n#### Project: Improving Error Reporting\n\nUsability can be greatly improved by accurate and helpful error messages for query-related issues.\nIf you have struggled to figure out why a query is not working correctly and had a hard time\nfixing the issue, that would be a good place to jump in and start making changes!\n\nFirst, you need to determine where the problem is occurring.\nIf the parser is rejecting a query, the grammar may need some tweaking to be more accepting of\nsome syntax.\nFor example, if the field names are not provided for the `parse` operator, the query can still\nbe parsed to produce a syntax tree and the error can be raised in the next phase.\nIf the query passes the parsing phase, the problem may lie in the semantic analysis phase where the\nvalues in parse tree are verified for correctness.\nContinuing with the `parse` example, if the number of captures in the pattern string does not\nmatch the number of field names, the error would be raised here.\nFinally, if the query has been valid up to this point, you might want to raise an error at\nexecution time.\nFor example, if a field name being accessed does not exist in the records being passed to an\noperator, an error could be raised to tell the user that they might have mistyped the name.\n\nOnce you have an idea of where the problem might lie, you can start to dig into the code.\nThe grammar is written using [nom](https://github.com/Geal/nom/) and is contained in the\n[`lang.rs`](https://github.com/rcoh/angle-grinder/blob/main/src/lang.rs) module.\nThe enums/structs that make up the parse tree are also in the `lang.rs` module.\nTo make error reporting easier, values in the parse tree are wrapped with a `Positioned` object\nthat records where the value came from in the query string.\nThe `Positioned` objects are produced by the `with_pos!()` parser combinator.\nThese objects can then be passed to the `SnippetBuilder` in the\n[`errors.rs`](https://github.com/rcoh/angle-grinder/blob/main/src/errors.rs) module to highlight\nportions of the query string in error messages.\n\nThe semantic phase is contained in the\n[`typecheck.rs`](https://github.com/rcoh/angle-grinder/blob/main/src/typecheck.rs) module and\nis probably where most of the work will need to be done.\nThe `semantic_analysis()` methods in that module are passed an `ErrorBuilder` that can be used to\nbuild and send error reports to the user.\n\nAfter adjusting the grammar and adding a check for the problem, it will be time to figure out how\nto inform the user.\nIdeally, any errors should explain the problem, point the user to the relevant part of the query\nstring, and lead the user to a solution.\nUsing the `ErrorBuilder`, you can call the `new_error_report_for()` method to construct a\n`SnippetBuilder` for a given error.\nTo highlight a portion of the query string, use the `with_code_pointer()` method with the\n`Positioned` object that refers to the relevant segment of the query string.\nFinally, additional help/examples can be added by calling the `with_resolution()` method.\n\nOnce you're all done, you should see a nicely formatted error message like the following:\n\n```\nerror: Expecting an expression to count\n  |\n1 | * | count_distinct\n  |     ^^^^^^^^^^^^^^ No field argument given\n  |\n  = help: example: count_distinct(field_to_count)\n```\n\n### Similar Projects\n* Angle Grinder is a rewrite of [Sumoshell](https://github.com/SumoLogic/sumoshell) written to be easier to use, testable and a better platform for new features.\n* [lnav](http://lnav.org/) is a full featured log analysis platform in your terminal (with many more features than angle-grinder). It includes support for common log file formats out-of-the-box, generalized SQL queries on your logs, auto-coloring and a whole host of other features.\n* [visidata](http://visidata.org/) is a spreadsheets app in your terminal"
}
