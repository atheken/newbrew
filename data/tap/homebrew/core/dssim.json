{
  "name": "dssim",
  "full_name": "dssim",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "RGBA Structural Similarity Rust implementation",
  "license": "AGPL-3.0-or-later",
  "homepage": "https://github.com/kornelski/dssim",
  "versions": {
    "stable": "3.2.4",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/kornelski/dssim/archive/3.2.4.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "f58d834876ebcc8e5f21e94e0db42b173d2bea600642cbbbb6dab16a6b5d7537"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dssim/blobs/sha256:d4a216f56df26aff08e84ea6b81ec7761a79ccfd8ab140f0dd6fe62f389a183d",
          "sha256": "d4a216f56df26aff08e84ea6b81ec7761a79ccfd8ab140f0dd6fe62f389a183d"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dssim/blobs/sha256:152c13927b088e6f0ad1733e4540a6197a32dab7d674659cb966a95bda94316f",
          "sha256": "152c13927b088e6f0ad1733e4540a6197a32dab7d674659cb966a95bda94316f"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dssim/blobs/sha256:bc115c42134e98b2b9fa537715a9af7b44bfc22de71cad41df6c3ae104be80bd",
          "sha256": "bc115c42134e98b2b9fa537715a9af7b44bfc22de71cad41df6c3ae104be80bd"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dssim/blobs/sha256:7f27b7724b2f1f19d4bffd30c99fef77243349b76e519a2b92bda3d640786e51",
          "sha256": "7f27b7724b2f1f19d4bffd30c99fef77243349b76e519a2b92bda3d640786e51"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dssim/blobs/sha256:3026cc94e32968aa407186fbb3406f844228e82fb5c84d20b6a58753c1d943f3",
          "sha256": "3026cc94e32968aa407186fbb3406f844228e82fb5c84d20b6a58753c1d943f3"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dssim/blobs/sha256:20defb82713908472254c03c45b25e4eb224fd703e1bed428809d930cfe5c138",
          "sha256": "20defb82713908472254c03c45b25e4eb224fd703e1bed428809d930cfe5c138"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dssim/blobs/sha256:f1c5fdc878cf1eb50c934e1741ef86ddc70036bc389b01dd179a0ca339ce79d6",
          "sha256": "f1c5fdc878cf1eb50c934e1741ef86ddc70036bc389b01dd179a0ca339ce79d6"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dssim/blobs/sha256:b6adec880587fce1266c753dc41af3f237eddf9709d225b9dc36184d9474f8a1",
          "sha256": "b6adec880587fce1266c753dc41af3f237eddf9709d225b9dc36184d9474f8a1"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "nasm",
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/dssim.rb",
  "ruby_source_checksum": {
    "sha256": "18829d629de6f8299c63fac0c6edf9671241f5e0305ee2b6e416de12447e7f43"
  },
  "date_added": "2016-05-10T12:58:56+01:00",
  "readme": "# RGBA Structural Similarity\n\nThis tool computes (dis)similarity between two or more PNG &/or JPEG images using an algorithm approximating human vision. Comparison is done using a variant of [the SSIM algorithm](https://ece.uwaterloo.ca/~z70wang/research/ssim/).\n\nThe value returned is 1/SSIM-1, where 0 means identical image, and >0 (unbounded) is amount of difference. Values are not directly comparable with other tools. [See below](#interpreting-the-values) on interpreting the values.\n\n## Features\n\n* Improved algorithm\n    * Compares at multiple weighed resolutions, and scaling is done in linear-light RGB. It's sensitive to distortions of various sizes and blends colors correctly to detect e.g. chroma subsampling errors.\n    * Uses L\\*a\\*b\\* color space for the SSIM algorithm. It measures brightness and color much better than metrics from average of RGB channels.\n* Supports alpha channel.\n* Supports images with color profiles.\n* Takes advantage of multi-core CPUs.\n* Can be used as a library in C, Rust, and WASM.\n* No OpenCV or MATLAB needed.\n\n## Usage\n\n    dssim file-original.png file-modified.png\n\nWill output something like \"0.02341\" (smaller is better) followed by a filename.\n\nYou can supply multiple filenames to compare them all with the first file:\n\n    dssim file.png modified1.png modified2.png modified3.png\n\nYou can save an image visualising the difference between the files:\n\n    dssim -o difference.png file.png file-modified.png\n\nIt's also usable [as a library](https://docs.rs/dssim).\n\nPlease be mindful about color profiles in the images. Different profiles, or lack of support for profiles in other tools, can make images appear different even when the pixels are the same.\n\n### Interpreting the values\n\nThe amount of difference goes from 0 to infinity. It's not a percentage.\n\nIf you're comparing two different image compression codecs, then ensure you either:\n\n* compress images to the same file size, and then use DSSIM to compare which one is closests to the original, or\n* compress images to the same DSSIM value, and compare file sizes to see how much file size gain each option gives.\n\n[More about benchmarking image compression](https://kornel.ski/faircomparison).\n\nWhen you quote results, please include the DSSIM version. The scale has changed between versions.\nThe version is printed when you run `dssim -h`.\n\n## Download\n\n[Download from releases page](https://github.com/kornelski/dssim/releases). It's also available in Mac Homebrew and Ubuntu Snaps.\n\n### Build from source\n\nYou'll need [Rust 1.63](https://rustup.rs) or later. Clone the repo and run:\n\n    rustup update\n    cargo build --release\n\nWill give you `./target/release/dssim`.\n\n## Accuracy\n\nScores for version 3.2 [measured][2] against [TID2013][1] database:\n\nTID2013  | Spearman | Kendall\n---------|----------|--------\nNoise    |  -0.9392 | -0.7789\nActual   |  -0.9448 | -0.7913\nSimple   |  -0.9499 | -0.8082\nExotic   |  -0.8436 | -0.6574\nNew      |  -0.8717 | -0.6963\nColor    |  -0.8789 | -0.7032\nFull     |  -0.8711 | -0.6984\n\n[1]: http://www.ponomarenko.info/tid2013.htm\n[2]: https://lib.rs/crates/tid2013stats\n\n## Usage from C\n\nMake sure to build `dssim-core` library project, not the parent `dssim` binary project.\n\n```bash\ncd dssim-core\nrustup update\ncargo build --release\n```\n\nThis will build `target/release/libdssim_core.a` that you can link with your project. Use `dssim.h` included in the dssim repo. It's up to you where you put these files.\n\nAlternatively, on Linux there is a more involved but slightly more proper method:\n\n```bash\ncargo install cargo-c\ncargo cinstall --release --destdir=/ --prefix=/usr/lib\n```\n\nThis will install `libdssim.so` in `/usr/lib` and make `dssim` available to `pkg-config`. See `target/<platform>/release` for all the files built this way.\n\n## License\n\nDSSIM is dual-licensed under [AGPL](LICENSE) or [commercial](https://supso.org/projects/dssim) license.\n\n## The algorithm improvements in DSSIM\n\n* The comparison is done on multiple weighed scales (based on IWSSIM) to measure features of different sizes. A single-scale SSIM is biased towards differences smaller than its gaussian kernel.\n* Scaling is done in linear-light RGB to model physical effects of viewing distance/lenses. Scaling in sRGB or Lab would have incorrect gamma and mask distortions caused by chroma subsampling.\n* a/b channels of Lab are compared with lower spatial precision to simulate eyes' higher sensitivity to brightness than color changes.\n* SSIM score is pooled using mean absolute deviation. You can get per-pixel SSIM from the API to implement custom pooling.\n\n## Compiling for WASM\n\nFor compatibility with single-threaded WASM runtimes, disable the `threads` Cargo feature. It's enabled by default, so to disable it, disable default features:\n\n```toml\ndssim-core = { version = \"3.2\", default-features = false }\n```"
}
