{
  "name": "bazelisk",
  "full_name": "bazelisk",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "User-friendly launcher for Bazel",
  "license": "Apache-2.0",
  "homepage": "https://github.com/bazelbuild/bazelisk/",
  "versions": {
    "stable": "1.17.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/bazelbuild/bazelisk.git",
      "tag": "v1.17.0",
      "revision": "70e3e87d4ca23cdbe5439685fb6d2018d69be1e5",
      "checksum": null
    },
    "head": {
      "url": "https://github.com/bazelbuild/bazelisk.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bazelisk/blobs/sha256:c2831fe73922802f96703dfe863103ef8112c3460ef342173e746e0400e10dd9",
          "sha256": "c2831fe73922802f96703dfe863103ef8112c3460ef342173e746e0400e10dd9"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bazelisk/blobs/sha256:c2831fe73922802f96703dfe863103ef8112c3460ef342173e746e0400e10dd9",
          "sha256": "c2831fe73922802f96703dfe863103ef8112c3460ef342173e746e0400e10dd9"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bazelisk/blobs/sha256:c2831fe73922802f96703dfe863103ef8112c3460ef342173e746e0400e10dd9",
          "sha256": "c2831fe73922802f96703dfe863103ef8112c3460ef342173e746e0400e10dd9"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bazelisk/blobs/sha256:9a283624e099ec0c6b4ced72cc0408fc4c94346c428687941667a3b0342b73dd",
          "sha256": "9a283624e099ec0c6b4ced72cc0408fc4c94346c428687941667a3b0342b73dd"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bazelisk/blobs/sha256:9a283624e099ec0c6b4ced72cc0408fc4c94346c428687941667a3b0342b73dd",
          "sha256": "9a283624e099ec0c6b4ced72cc0408fc4c94346c428687941667a3b0342b73dd"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bazelisk/blobs/sha256:9a283624e099ec0c6b4ced72cc0408fc4c94346c428687941667a3b0342b73dd",
          "sha256": "9a283624e099ec0c6b4ced72cc0408fc4c94346c428687941667a3b0342b73dd"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bazelisk/blobs/sha256:e3724ab14709903c90064ad7eed9b626e3086865f075569557d2b2be074e7c5a",
          "sha256": "e3724ab14709903c90064ad7eed9b626e3086865f075569557d2b2be074e7c5a"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [
    "bazel"
  ],
  "conflicts_with_reasons": [
    "Bazelisk replaces the bazel binary"
  ],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "2706c66e8def3eeba4d9bf1adf66221c8ad70701",
  "ruby_source_path": "Formula/bazelisk.rb",
  "ruby_source_checksum": {
    "sha256": "d8aa3d40de0e141bdc06f419bb7833261c5e0497e011b5e140c9ca80f33ebd4f"
  },
  "date_added": "2019-07-20T14:23:33+02:00",
  "readme": "# Bazelisk\n\n**A user-friendly launcher for Bazel.**\n\n## About Bazelisk\n\nBazelisk is a wrapper for Bazel written in Go.\nIt automatically picks a good version of Bazel given your current working directory, downloads it from the official server (if required) and then transparently passes through all command-line arguments to the real Bazel binary.\nYou can call it just like you would call Bazel.\n\n## Installation\n\nOn macOS: `brew install bazelisk`.\n\nOn Windows: `choco install bazelisk`.\n\nEach adds bazelisk to the `PATH` as both `bazelisk` and `bazel`.\n\nOn Linux: You can download Bazelisk binary on our [Releases](https://github.com/bazelbuild/bazelisk/releases) page and add it to your `PATH` manually, which also works on macOS and Windows.\n\nBazelisk is also published to npm.\nFrontend developers may want to install it with `npm install -g @bazel/bazelisk`.\n\n> You will notice that it serves an analogous function for Bazel as the\n> [`nvm` utility](https://github.com/nvm-sh/nvm) which manages your version of Node.js.\n\nSome ideas how to use it:\n- Install it as the `bazel` binary in your `PATH` (e.g. copy it to `/usr/local/bin/bazel`).\n  Never worry about upgrading Bazel to the latest version again.\n- Check it into your repository and recommend users to build your software via `./bazelisk build //my:software`.\n  That way, even someone who has never used Bazel or doesn't have it installed can build your software.\n- As a company using Bazel or as a project owner, add a `.bazelversion` file to your repository.\n  This will tell Bazelisk to use the exact version specified in the file when running in your workspace.\n  The fact that it's versioned inside your repository will then allow for atomic upgrades of Bazel including all necessary changes.\n  If you install Bazelisk as `bazel` on your CI machines, too, you can even test Bazel upgrades via a normal presubmit / pull request.\n  It will also ensure that users will not try to build your project with an incompatible version of Bazel, which is often a cause for frustration and failing builds. (But see the note below about ensuring your developers install Bazelisk.)\n\nBefore Bazelisk was rewritten in Go, it was a Python script.\nThis still works and has the advantage that you can run it on any platform that has a Python interpreter, but is currently unmaintained and it doesn't support as many features.\nThe documentation below describes the newer Go version only.\n\n## How does Bazelisk know which Bazel version to run?\n\nIt uses a simple algorithm:\n- If the environment variable `USE_BAZEL_VERSION` is set, it will use the version specified in the value.\n- Otherwise, if a `.bazeliskrc` file exists in the workspace root and contains the `USE_BAZEL_VERSION` variable, this version will be used.\n- Otherwise, if a `.bazelversion` file exists in the current directory or recursively any parent directory, it will read the file and use the version specified in it.\n- Otherwise, if the environment variable `USE_BAZEL_FALLBACK_VERSION` is set to one of the following formats:\n  - If set to a value starting with `error:`, it will report an error and version detection will fail.\n  - If set to a value starting with `warn:`, it will report a warning and use the version specified after the prefix.\n  - If set to a value starting with `silent:`, it will use the version specified after the prefix.\n- Otherwise, it will use the official latest Bazel release.\n\nA version can optionally be prefixed with a fork name.\nThe fork and version should be separated by slash: `<FORK>/<VERSION>`.\nPlease see the next section for how to work with forks.\n\nBazelisk currently understands the following formats for version labels:\n- `latest` means the latest stable (LTS) version of Bazel as released on GitHub.\n  Previous releases can be specified via `latest-1`, `latest-2` etc.\n- A version number like `0.17.2` means that exact version of Bazel.\n  It can also be a release candidate version like `0.20.0rc3`, or a rolling release version like `5.0.0-pre.20210317.1`.\n- A floating version identifier like `4.x` that returns the latest release from the LTS series started by Bazel 4.0.0.\n- The hash of a Git commit. Please note that Bazel binaries are only available for commits that passed [Bazel CI](https://buildkite.com/bazel/bazel-bazel).\n\nAdditionally, a few special version names are supported for our official releases only (these formats do not work when using a fork):\n- `last_green` refers to the Bazel binary that was built at the most recent commit that passed [Bazel CI](https://buildkite.com/bazel/bazel-bazel).\n  Ideally this binary should be very close to Bazel-at-head.\n- `last_downstream_green` points to the most recent Bazel binary that builds and tests all [downstream projects](https://buildkite.com/bazel/bazel-at-head-plus-downstream) successfully.\n- `last_rc` points to the most recent release candidate.\n  If there is no active release candidate, Bazelisk uses the latest Bazel release instead.\n- `rolling` refers to the latest rolling release (even if there is a newer LTS release).\n\n## Where does Bazelisk get Bazel from?\n\nBy default Bazelisk retrieves Bazel releases, release candidates and binaries built at green commits from Google Cloud Storage. The downloaded artifacts are validated against the SHA256 value recorded in `BAZELISK_VERIFY_SHA256` if this variable is set in the configuration file.\n\nAs mentioned in the previous section, the `<FORK>/<VERSION>` version format allows you to use your own Bazel fork hosted on GitHub:\n\nIf you want to create a fork with your own releases, you should follow the naming conventions that we use in `bazelbuild/bazel` for the binary file names as this results in predictable URLs that are similar to the official ones.\nThe URL format looks like `https://github.com/<FORK>/bazel/releases/download/<VERSION>/<FILENAME>`.\n\nYou can also override the URL by setting the environment variable `$BAZELISK_BASE_URL`. Bazelisk will then append `/<VERSION>/<FILENAME>` to the base URL instead of using the official release server. Bazelisk will read file [`~/.netrc`](https://everything.curl.dev/usingcurl/netrc) for credentials for Basic authentication.\n\nIf for any reason none of this works, you can also override the URL format altogether by setting the environment variable `$BAZELISK_FORMAT_URL`. This variable takes a format-like string with placeholders and performs the following replacements to compute the download URL:\n\n- `%e`: Extension suffix, such as the empty string or `.exe`.\n- `%h`: Value of `BAZELISK_VERIFY_SHA256`, respecting uppercase/lowercase characters.\n- `%m`: Machine architecture name, such as `arm64` or `x86_64`.\n- `%o`: Operating system name, such as `darwin` or `linux`.\n- `%v`: Bazel version as determined by Bazelisk.\n- `%%`: Literal `%` for escaping purposes.\n- All other characters after `%` are reserved for future use and result in a processing error.\n\n## Ensuring that your developers use Bazelisk rather than Bazel\n\nBazel installers typically provide Bazel's [shell wrapper script] as the `bazel` on the PATH.\n\nWhen installed this way, Bazel checks the `.bazelversion` file itself, but the failure when it mismatches with the actual version of Bazel can be quite confusing to developers.\nYou may find yourself having to explain the difference between Bazel and Bazelisk (especially when you upgrade the pinned version).\nTo avoid this, you can add a check in your `tools/bazel` wrapper.\nSince Bazelisk is careful to avoid calling itself in a loop, it always calls the wrapper with the environment variable `BAZELISK_SKIP_WRAPPER` set to `true'.\nYou can check for the presence of that variable, and when not found, report a useful error to your users about how to install Bazelisk.\n\nNote that if users directly downloaded a Bazel binary and put it in their PATH, rather than running\nan installer, then `tools/bazel` and `.bazelversion` are not checked. You could call the\n[versions.check](https://github.com/bazelbuild/bazel-skylib/blob/1.1.1/docs/versions_doc.md#versionscheck) starlark module from the beginning of your WORKSPACE to\nrequire users update their bazel.\n\n[shell wrapper script]: https://github.com/bazelbuild/bazel/blob/master/scripts/packages/bazel.sh\n## Other features\n\nThe Go version of Bazelisk offers three new flags.\n\n### --strict\n\n`--strict` expands to the set of incompatible flags which may be enabled for the given version of Bazel.\n\n```shell\nbazelisk --strict build //...\n```\n\n### --migrate\n\n`--migrate` will run Bazel multiple times to help you identify compatibility issues.\nIf the code fails with `--strict`, the flag `--migrate` will run Bazel with each one of the flag separately, and print a report at the end.\nThis will show you which flags can safely enabled, and which flags require a migration.\n\n\n### --bisect\n\n`--bisect` flag allows you to bisect Bazel versions to find which version introduced a build failure. You can specify the range of versions to bisect with `--bisect=<GOOD>..<BAD>`, where GOOD is the last known working Bazel version and BAD is the first known non-working Bazel version. Bazelisk uses [GitHub's compare API](https://docs.github.com/en/rest/commits/commits#compare-two-commits) to get the list of commits to bisect. When GOOD is not an ancestor of BAD, GOOD is reset to their merge base commit.\n\nExamples:\n```shell\n# Bisect between 6.0.0 and Bazel at HEAD\nbazelisk --bisect=6.0.0..HEAD test //foo:bar_test\n\n# Bisect between 6.1.0 and the second release candidate of Bazel 6.2.0\nbazelisk --bisect=6.1.0..release-6.2.0rc2 test //foo:bar_test\n\n# Bisect between two commits on the main branch (or branches with `release-` prefix) of the Bazel GitHub repository.\nbazelisk --bisect=<good commit hash>..<bad commit hash> test //foo:bar_test\n```\n\nNote that, Bazelisk uses prebuilt Bazel binaries at commits on the main and release branches, therefore you cannot bisect your local commits.\n\n### Useful environment variables for --migrate and --bisect\n\nYou can set `BAZELISK_INCOMPATIBLE_FLAGS` to set a list of incompatible flags (separated by `,`) to be tested, otherwise Bazelisk tests all flags starting with `--incompatible_`.\n\nYou can set `BAZELISK_GITHUB_TOKEN` to set a GitHub access token to use for API requests to avoid rate limiting when on shared networks.\n\nYou can set `BAZELISK_SHUTDOWN` to run `shutdown` between builds when migrating or bisecting if you suspect this affects your results.\n\nYou can set `BAZELISK_CLEAN` to run `clean --expunge` between builds when migrating or bisecting if you suspect this affects your results.\n\n## tools/bazel\n\nIf `tools/bazel` exists in your workspace root and is executable, Bazelisk will run this file, instead of the Bazel version it downloaded.\nIt will set the environment variable `BAZEL_REAL` to the path of the downloaded Bazel binary.\nThis can be useful, if you have a wrapper script that e.g. ensures that environment variables are set to known good values.\nThis behavior can be disabled by setting the environment variable `BAZELISK_SKIP_WRAPPER` to any value (except the empty string) before launching Bazelisk.\n\nYou can control the user agent that Bazelisk sends in all HTTP requests by setting `BAZELISK_USER_AGENT` to the desired value.\n\n# .bazeliskrc configuration file\n\nThe Go version supports a `.bazeliskrc` file in the root directory of a workspace and the user home directory. This file allows users to set environment variables persistently.\n\nExample file content:\n\n\n```shell\nUSE_BAZEL_VERSION=0.19.0\nBAZELISK_GITHUB_TOKEN=abc\n```\n\nThe following variables can be set:\n\n- `BAZELISK_BASE_URL`\n- `BAZELISK_CLEAN`\n- `BAZELISK_GITHUB_TOKEN`\n- `BAZELISK_HOME`\n- `BAZELISK_INCOMPATIBLE_FLAGS`\n- `BAZELISK_SHUTDOWN`\n- `BAZELISK_SKIP_WRAPPER`\n- `BAZELISK_USER_AGENT`\n- `BAZELISK_VERIFY_SHA256`\n- `USE_BAZEL_VERSION`\n\nConfiguration variables are evaluated with precedence order. The preferred values are derived in order from highest to lowest precedence as follows:\n\n* Variables defined in the environment\n* Variables defined in the workspace root `.bazeliskrc`\n* Variables defined in the user home `.bazeliskrc`\n\n## Requirements\n\nFor ease of use, the Python version of Bazelisk is written to work with Python 2.7 and 3.x and only uses modules provided by the standard library.\n\nThe Go version can be compiled to run natively on Linux, macOS and Windows.\nYou need at least Go 1.11 to build Bazelisk, otherwise you'll run into errors like `undefined: os.UserCacheDir`.\n\nTo install the Go version, type:\n\n```shell\ngo get github.com/bazelbuild/bazelisk\n```\nWith Go 1.17 or later, the recommended way to install it is:\n```shell\ngo install github.com/bazelbuild/bazelisk@latest\n```\n\nTo add it to your PATH:\n\n```shell\nexport PATH=$PATH:$(go env GOPATH)/bin\n```\n\nFor more information, you may read about the [`GOPATH` environment variable](https://github.com/golang/go/wiki/SettingGOPATH).\n\n## Ideas for the future\n\n- Add support for checked-in Bazel binaries.\n- When the version label is set to a commit hash, first download a matching binary version of Bazel, then build Bazel automatically at that commit and use the resulting binary.\n- Add support to automatically bisect a build failure to a culprit commit in Bazel.\n  If you notice that you could successfully build your project using version X, but not using version X+1, then Bazelisk should be able to figure out the commit that caused the breakage and the Bazel team can easily fix the problem.\n\n## FAQ\n\n### Where does Bazelisk store the downloaded versions of Bazel?\nIt creates a directory called \"bazelisk\" inside your [user cache directory](https://golang.org/pkg/os/#UserCacheDir) and will store them there.\nFeel free to delete this directory at any time, as it can be regenerated automatically when required."
}
