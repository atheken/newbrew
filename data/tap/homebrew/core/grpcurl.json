{
  "name": "grpcurl",
  "full_name": "grpcurl",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Like cURL, but for gRPC",
  "license": "MIT",
  "homepage": "https://github.com/fullstorydev/grpcurl",
  "versions": {
    "stable": "1.8.7",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/fullstorydev/grpcurl/archive/v1.8.7.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "7f7a59f8a5ef8833d30a94e1c36ddb0d76bab1ae64cd5c8bcb87d42e877c3bca"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/grpcurl/blobs/sha256:12c372c78ff682370a954b7e8f6faa2a432e6b1b9eb4f5adcd5942a687095aa6",
          "sha256": "12c372c78ff682370a954b7e8f6faa2a432e6b1b9eb4f5adcd5942a687095aa6"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/grpcurl/blobs/sha256:37d01a36b9911c64b6a32ee44d1ed9eb148fb1844df0b81c1b19c235ed7fd907",
          "sha256": "37d01a36b9911c64b6a32ee44d1ed9eb148fb1844df0b81c1b19c235ed7fd907"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/grpcurl/blobs/sha256:81421aa8f13a8d6993aa60172b0252ac503daec9980441af6ee025af58eb8acb",
          "sha256": "81421aa8f13a8d6993aa60172b0252ac503daec9980441af6ee025af58eb8acb"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/grpcurl/blobs/sha256:bd1f6f8ee21b8ba12d83d7211e8006ca873c5f3a692c36f573be8c5202552c0f",
          "sha256": "bd1f6f8ee21b8ba12d83d7211e8006ca873c5f3a692c36f573be8c5202552c0f"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/grpcurl/blobs/sha256:7f7e652c6277205d1ae756475b283fa750eaf7aa3325be9ea08ba33f4939a040",
          "sha256": "7f7e652c6277205d1ae756475b283fa750eaf7aa3325be9ea08ba33f4939a040"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/grpcurl/blobs/sha256:12f6441cce946edee12c07729ab0e9b433dc44094b57dabd3e4e6e1864b4a811",
          "sha256": "12f6441cce946edee12c07729ab0e9b433dc44094b57dabd3e4e6e1864b4a811"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/grpcurl/blobs/sha256:6bb6275586993be3b1b9f9db7ad86a91d12e733815d7cb89141dca02b0b1ba54",
          "sha256": "6bb6275586993be3b1b9f9db7ad86a91d12e733815d7cb89141dca02b0b1ba54"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/grpcurl/blobs/sha256:a2ff19dc12a0e3df9384e6431a8f8f35e8ecd9527694a837f9a750121c58778b",
          "sha256": "a2ff19dc12a0e3df9384e6431a8f8f35e8ecd9527694a837f9a750121c58778b"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/grpcurl.rb",
  "ruby_source_checksum": {
    "sha256": "a59326aa3deb49cfec1a4fb2f9194a13ba5cacfb6fb3f3084995a42d059396c2"
  },
  "date_added": "2019-01-22T22:51:18+01:00",
  "readme": "# gRPCurl\n[![Build Status](https://circleci.com/gh/fullstorydev/grpcurl/tree/master.svg?style=svg)](https://circleci.com/gh/fullstorydev/grpcurl/tree/master)\n[![Go Report Card](https://goreportcard.com/badge/github.com/fullstorydev/grpcurl)](https://goreportcard.com/report/github.com/fullstorydev/grpcurl)\n\n`grpcurl` is a command-line tool that lets you interact with gRPC servers. It's\nbasically `curl` for gRPC servers.\n\nThe main purpose for this tool is to invoke RPC methods on a gRPC server from the\ncommand-line. gRPC servers use a binary encoding on the wire\n([protocol buffers](https://developers.google.com/protocol-buffers/), or \"protobufs\"\nfor short). So they are basically impossible to interact with using regular `curl`\n(and older versions of `curl` that do not support HTTP/2 are of course non-starters).\nThis program accepts messages using JSON encoding, which is much more friendly for both\nhumans and scripts.\n\nWith this tool you can also browse the schema for gRPC services, either by querying\na server that supports [server reflection](https://github.com/grpc/grpc/blob/master/src/proto/grpc/reflection/v1alpha/reflection.proto),\nby reading proto source files, or by loading in compiled \"protoset\" files (files that contain\nencoded file [descriptor protos](https://github.com/google/protobuf/blob/master/src/google/protobuf/descriptor.proto)).\nIn fact, the way the tool transforms JSON request data into a binary encoded protobuf\nis using that very same schema. So, if the server you interact with does not support\nreflection, you will either need the proto source files that define the service or need\nprotoset files that `grpcurl` can use.\n\nThis repo also provides a library package, `github.com/fullstorydev/grpcurl`, that has\nfunctions for simplifying the construction of other command-line tools that dynamically\ninvoke gRPC endpoints. This code is a great example of how to use the various packages of\nthe [protoreflect](https://godoc.org/github.com/jhump/protoreflect) library, and shows\noff what they can do.\n\nSee also the [`grpcurl` talk at GopherCon 2018](https://www.youtube.com/watch?v=dDr-8kbMnaw).\n\n## Features\n`grpcurl` supports all kinds of RPC methods, including streaming methods. You can even\noperate bi-directional streaming methods interactively by running `grpcurl` from an\ninteractive terminal and using stdin as the request body!\n\n`grpcurl` supports both secure/TLS servers _and_ plain-text servers (i.e. no TLS) and has\nnumerous options for TLS configuration. It also supports mutual TLS, where the client is\nrequired to present a client certificate.\n\nAs mentioned above, `grpcurl` works seamlessly if the server supports the reflection\nservice. If not, you can supply the `.proto` source files or you can supply protoset\nfiles (containing compiled descriptors, produced by `protoc`) to `grpcurl`.\n\n## Installation\n\n### Binaries\n\nDownload the binary from the [releases](https://github.com/fullstorydev/grpcurl/releases) page.\n\n### Homebrew (macOS)\n\nOn macOS, `grpcurl` is available via Homebrew:\n```shell\nbrew install grpcurl\n```\n\n### Docker\n\nFor platforms that support Docker, you can download an image that lets you run `grpcurl`:\n```shell\n# Download image\ndocker pull fullstorydev/grpcurl:latest\n# Run the tool\ndocker run fullstorydev/grpcurl api.grpc.me:443 list\n```\nNote that there are some pitfalls when using docker:\n- If you need to interact with a server listening on the host's loopback network, you must specify the host as `host.docker.internal` instead of `localhost` (for Mac or Windows) _OR_ have the container use the host network with `-network=\"host\"` (Linux only).\n- If you need to provide proto source files or descriptor sets, you must mount the folder containing the files as a volume (`-v $(pwd):/protos`) and adjust the import paths to container paths accordingly.\n- If you want to provide the request message via stdin, using the `-d @` option, you need to use the `-i` flag on the docker command.\n\n### Other Packages\n\nThere are numerous other ways to install `grpcurl`, thanks to support from third parties that\nhave created recipes/packages for it. These include other ways to install `grpcurl` on a variety\nof environments, including Windows and myriad Linux distributions.\n\nYou can see more details and the full list of other packages for `grpcurl` at _repology.org_:\nhttps://repology.org/project/grpcurl/information\n\n### From Source\nIf you already have the [Go SDK](https://golang.org/doc/install) installed, you can use the `go`\ntool to install `grpcurl`:\n```shell\ngo install github.com/fullstorydev/grpcurl/cmd/grpcurl@latest\n```\n\nThis installs the command into the `bin` sub-folder of wherever your `$GOPATH`\nenvironment variable points. (If you have no `GOPATH` environment variable set,\nthe default install location is `$HOME/go/bin`). If this directory is already in\nyour `$PATH`, then you should be good to go.\n\nIf you have already pulled down this repo to a location that is not in your\n`$GOPATH` and want to build from the sources, you can `cd` into the repo and then\nrun `make install`.\n\nIf you encounter compile errors and are using a version of the Go SDK older than 1.13,\nyou could have out-dated versions of `grpcurl`'s dependencies. You can update the\ndependencies by running `make updatedeps`. Or, if you are using Go 1.11 or 1.12, you\ncan add `GO111MODULE=on` as a prefix to the commands above, which will also build using\nthe right versions of dependencies (vs. whatever you may already have in your `GOPATH`).\n\n## Usage\nThe usage doc for the tool explains the numerous options:\n```shell\ngrpcurl -help\n```\n\nIn the sections below, you will find numerous examples demonstrating how to use\n`grpcurl`.\n\n### Invoking RPCs\nInvoking an RPC on a trusted server (e.g. TLS without self-signed key or custom CA)\nthat requires no client certs and supports server reflection is the simplest thing to\ndo with `grpcurl`. This minimal invocation sends an empty request body:\n```shell\ngrpcurl grpc.server.com:443 my.custom.server.Service/Method\n\n# no TLS\ngrpcurl -plaintext grpc.server.com:80 my.custom.server.Service/Method\n```\n\nTo send a non-empty request, use the `-d` argument. Note that all arguments must come\n*before* the server address and method name:\n```shell\ngrpcurl -d '{\"id\": 1234, \"tags\": [\"foo\",\"bar\"]}' \\\n    grpc.server.com:443 my.custom.server.Service/Method\n```\n\nAs can be seen in the example, the supplied body must be in JSON format. The body will\nbe parsed and then transmitted to the server in the protobuf binary format.\n\nIf you want to include `grpcurl` in a command pipeline, such as when using `jq` to\ncreate a request body, you can use `-d @`, which tells `grpcurl` to read the actual\nrequest body from stdin:\n```shell\ngrpcurl -d @ grpc.server.com:443 my.custom.server.Service/Method <<EOM\n{\n  \"id\": 1234,\n  \"tags\": [\n    \"foor\",\n    \"bar\"\n  ]\n}\nEOM\n```\n\n### Listing Services\nTo list all services exposed by a server, use the \"list\" verb. When using `.proto` source\nor protoset files instead of server reflection, this lists all services defined in the\nsource or protoset files.\n```shell\n# Server supports reflection\ngrpcurl localhost:8787 list\n\n# Using compiled protoset files\ngrpcurl -protoset my-protos.bin list\n\n# Using proto sources\ngrpcurl -import-path ../protos -proto my-stuff.proto list\n```\n\nThe \"list\" verb also lets you see all methods in a particular service:\n```shell\ngrpcurl localhost:8787 list my.custom.server.Service\n```\n\n### Describing Elements\nThe \"describe\" verb will print the type of any symbol that the server knows about\nor that is found in a given protoset file. It also prints a description of that\nsymbol, in the form of snippets of proto source. It won't necessarily be the\noriginal source that defined the element, but it will be equivalent.\n\n```shell\n# Server supports reflection\ngrpcurl localhost:8787 describe my.custom.server.Service.MethodOne\n\n# Using compiled protoset files\ngrpcurl -protoset my-protos.bin describe my.custom.server.Service.MethodOne\n\n# Using proto sources\ngrpcurl -import-path ../protos -proto my-stuff.proto describe my.custom.server.Service.MethodOne\n```\n\n## Descriptor Sources\nThe `grpcurl` tool can operate on a variety of sources for descriptors. The descriptors\nare required, in order for `grpcurl` to understand the RPC schema, translate inputs\ninto the protobuf binary format as well as translate responses from the binary format\ninto text. The sections below document the supported sources and what command-line flags\nare needed to use them.\n\n### Server Reflection\n\nWithout any additional command-line flags, `grpcurl` will try to use [server reflection](https://github.com/grpc/grpc/blob/master/src/proto/grpc/reflection/v1alpha/reflection.proto).\n\nExamples for how to set up server reflection can be found [here](https://github.com/grpc/grpc/blob/master/doc/server-reflection.md#known-implementations).\n\nWhen using reflection, the server address (host:port or path to Unix socket) is required\neven for \"list\" and \"describe\" operations, so that `grpcurl` can connect to the server\nand ask it for its descriptors.\n\n### Proto Source Files\nTo use `grpcurl` on servers that do not support reflection, you can use `.proto` source\nfiles.\n\nIn addition to using `-proto` flags to point `grpcurl` at the relevant proto source file(s),\nyou may also need to supply `-import-path` flags to tell `grpcurl` the folders from which\ndependencies can be imported.\n\nJust like when compiling with `protoc`, you do *not* need to provide an import path for the\nlocation of the standard protos included with `protoc` (which contain various \"well-known\ntypes\" with a package definition of `google.protobuf`). These files are \"known\" by `grpcurl`\nas a snapshot of their descriptors is built into the `grpcurl` binary.\n\nWhen using proto sources, you can omit the server address (host:port or path to Unix socket)\nwhen using the \"list\" and \"describe\" operations since they only need to consult the proto\nsource files.\n\n### Protoset Files\nYou can also use compiled protoset files with `grpcurl`. If you are scripting `grpcurl` and\nneed to re-use the same proto sources for many invocations, you will see better performance\nby using protoset files (since it skips the parsing and compilation steps with each\ninvocation).\n\nProtoset files contain binary encoded `google.protobuf.FileDescriptorSet` protos. To create\na protoset file, invoke `protoc` with the `*.proto` files that define the service:\n```shell\nprotoc --proto_path=. \\\n    --descriptor_set_out=myservice.protoset \\\n    --include_imports \\\n    my/custom/server/service.proto\n```\n\nThe `--descriptor_set_out` argument is what tells `protoc` to produce a protoset,\nand the `--include_imports` argument is necessary for the protoset to contain\neverything that `grpcurl` needs to process and understand the schema.\n\nWhen using protosets, you can omit the server address (host:port or path to Unix socket)\nwhen using the \"list\" and \"describe\" operations since they only need to consult the\nprotoset files."
}
