{
  "name": "dfmt",
  "full_name": "dfmt",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Formatter for D source code",
  "license": "BSL-1.0",
  "homepage": "https://github.com/dlang-community/dfmt",
  "versions": {
    "stable": "0.15.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/dlang-community/dfmt.git",
      "tag": "v0.15.1",
      "revision": "470e65f7cc19441c4d50932520aefb7d93f242d5",
      "checksum": null
    },
    "head": {
      "url": "https://github.com/dlang-community/dfmt.git",
      "branch": "v0.x.x"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dfmt/blobs/sha256:0fdcf8d6abe92da0779370868eb8cd46437bc88705ba963361b5deeb0466e4ed",
          "sha256": "0fdcf8d6abe92da0779370868eb8cd46437bc88705ba963361b5deeb0466e4ed"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dfmt/blobs/sha256:42099cdc494464ad1b203c242a7144f0d0147f4f948644986f6437f05248d4bb",
          "sha256": "42099cdc494464ad1b203c242a7144f0d0147f4f948644986f6437f05248d4bb"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dfmt/blobs/sha256:a284a73ce3996487787a8aeb084b951e6e4523342bc87e484f84de61d66cd040",
          "sha256": "a284a73ce3996487787a8aeb084b951e6e4523342bc87e484f84de61d66cd040"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dfmt/blobs/sha256:5ba1872f353a3ffec3c558edc7c89b82ddb8701a8d5d599b6520633bedb916a0",
          "sha256": "5ba1872f353a3ffec3c558edc7c89b82ddb8701a8d5d599b6520633bedb916a0"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dfmt/blobs/sha256:2e3b7afee0e3a199b364181e973a79991c82df1dbea3bd827ea7ef1442760dbb",
          "sha256": "2e3b7afee0e3a199b364181e973a79991c82df1dbea3bd827ea7ef1442760dbb"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dfmt/blobs/sha256:c0f852a6e158291f6203fdc20eb2c1b8053518ee8028b04f6da330f37e1ae2e5",
          "sha256": "c0f852a6e158291f6203fdc20eb2c1b8053518ee8028b04f6da330f37e1ae2e5"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dfmt/blobs/sha256:92db6ca03196895c6c144303402a38ffa5e0455489d600ed715f8442c77fa602",
          "sha256": "92db6ca03196895c6c144303402a38ffa5e0455489d600ed715f8442c77fa602"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "dmd"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/dfmt.rb",
  "ruby_source_checksum": {
    "sha256": "afedf2f7ee508e344c47f79c6b50f5c5d6dbe21ee2a159b033c2349cca2b28be"
  },
  "date_added": "2015-10-23T10:21:51+02:00",
  "readme": "# dfmt [![Build Status](https://github.com/dlang-community/dfmt/actions/workflows/d.yml/badge.svg)](https://github.com/dlang-community/dfmt/actions?query=workflow%3A%22D%22)\n\n**dfmt** is a formatter for D source code\n\n## Status\n**dfmt** is beta quality. Make backups of your files or use source control\nwhen using the **--inplace** option.\n\n## Installation\n\n### Installing with DUB\n\n```sh\n> dub run dfmt -- -h\n```\n\n### Building from source using Make\n* Clone the repository\n* Run ```git submodule update --init --recursive``` in the dfmt directory\n* To compile with DMD, run ```make``` in the dfmt directory. To compile with\n  LDC, run ```make ldc``` instead. The generated binary will be placed in ```dfmt/bin/```.\n\n### Building from source using dub\n* Clone the repository\n* run `dub build --build=release`, optionally with `--compiler=ldc2`\n\n## Using\nBy default, dfmt reads its input from **stdin** and writes to **stdout**.\nIf a file name is specified on the command line, input will be read from the\nfile instead, and output will be written to **stdout**.\n\n**dfmt** uses [EditorConfig](http://editorconfig.org/) files for configuration. If you run **dfmt** on a\nsource file it will look for *.editorconfig* files that apply to that source file.\nIf no file is specified on the command line, **dfmt** will look for *.editorconfig*\nfiles that would apply to a D file in the current working directory. Command\nline options can be used instead of *.editorconfig* files, or to override options\nfound there.\n\n### Options\n* `--help | -h`: Display command line options.\n* `--inplace | -i`: A file name is required and the file will be edited in-place.\n* `--align_switch_statements`: *see dfmt_align_switch_statements [below](#dfmt-specific-properties)*\n* `--brace_style`: *see dfmt_brace_style [below](#dfmt-specific-properties)*\n* `--compact_labeled_statements`: *see dfmt_compact_labeled_statements [below](#dfmt-specific-properties)*\n* `--end_of_line`: *see end_of_line [below](#standard-editorconfig-properties)*\n* `--indent_size`: *see indent_size [below](#standard-editorconfig-properties)*\n* `--indent_style | -t`: *see indent_style [below](#standard-editorconfig-properties)*\n* `--max_line_length`: *see max_line_length [below](#standard-editorconfig-properties)*\n* `--outdent_attributes`: *see dfmt_outdent_attributes [below](#dfmt-specific-properties)*\n* `--selective_import_space`: *see dfmt_selective_import_space [below](#dfmt-specific-properties)*\n* `--single_template_constraint_indent`: *see dfmt_single_template_constraint_indent [below](#dfmt-specific-properties)*\n* `--soft_max_line_length`: *see dfmt_soft_max_line_length [below](#dfmt-specific-properties)*\n* `--space_after_cast`: *see dfmt_space_after_cast [below](#dfmt-specific-properties)*\n* `--space_before_aa_colon`: *see dfmt_space_before_aa_colon [below](#dfmt-specific-properties)*\n* `--space_before_function_parameters`: *see dfmt_space_before_function_parameters [below](#dfmt-specific-properties)*\n* `--split_operator_at_line_end`: *see dfmt_split_operator_at_line_end [below](#dfmt-specific-properties)*\n* `--tab_width`: *see tab_width [below](#standard-editorconfig-properties)*\n* `--template_constraint_style`: *see dfmt_template_constraint_style [below](#dfmt-specific-properties)*\n* `--keep_line_breaks`: *see dfmt_keep_line_breaks [below](#dfmt-specific-properties)*\n* `--single_indent`: *see dfmt_single_indent [below](#dfmt-specific-properties)*\n* `--reflow_property_chains`: *see dfmt_property_chains [below](#dfmt-specific-properties)*\n* `--space_after_keywords`: *see dfmt_space_after_keywords [below](#dfmt-specific-properties)*\n\n### Example\n```\ndfmt --inplace --space_after_cast=false --max_line_length=80 \\\n    --soft_max_line_length=70 --brace_style=otbs file.d\n```\n\n## Disabling formatting\nFormatting can be temporarily disabled by placing the comments ```// dfmt off```\nand ```// dfmt on``` around code that you do not want formatted.\n\n```d\nvoid main(string[] args)\n{\n    bool optionOne, optionTwo, optionThree;\n\n    // dfmt has no way of knowing that \"getopt\" is special, so it wraps the\n    // argument list normally\n    getopt(args, \"optionOne\", &optionOne, \"optionTwo\", &optionTwo, \"optionThree\", &optionThree);\n\n    // dfmt off\n    getopt(args,\n        \"optionOne\", &optionOne,\n        \"optionTwo\", &optionTwo,\n        \"optionThree\", &optionThree);\n    // dfmt on\n}\n```\n\n## Configuration\n**dfmt** uses [EditorConfig](http://editorconfig.org/) configuration files.\n**dfmt**-specific properties are prefixed with *dfmt_*.\n### Standard EditorConfig properties\nProperty Name | Allowed Values | Description\n--------------|----------------|------------\nend_of_line | `cr`, `crlf` and `lf` | [See EditorConfig documentation.](https://github.com/editorconfig/editorconfig/wiki/EditorConfig-Properties#end_of_line) When not set, `dfmt` adopts the first line ending in the input.\ninsert_final_newline | **`true`** | Not supported. `dfmt` always inserts a final newline.\ncharset | **`UTF-8`** | Not supported. `dfmt` only works correctly on UTF-8.\nindent_style | `tab`, **`space`** | [See EditorConfig documentation.](https://github.com/editorconfig/editorconfig/wiki/EditorConfig-Properties#indent_style)\nindent_size | positive integers (**`4`**) | [See EditorConfig documentation.](https://github.com/editorconfig/editorconfig/wiki/EditorConfig-Properties#indent_size)\ntab_width | positive integers (**`4`**) | [See EditorConfig documentation.](https://github.com/editorconfig/editorconfig/wiki/EditorConfig-Properties#tab_width)\ntrim_trailing_whitespace | **`true`** | Not supported. `dfmt` does not emit trailing whitespace.\nmax_line_length | positive integers (**`120`**) | [See EditorConfig documentation.](https://github.com/editorconfig/editorconfig/wiki/EditorConfig-Properties#max_line_length)\n### dfmt-specific properties\nProperty Name | Allowed Values | Description\n--------------|----------------|------------\ndfmt_brace_style | **`allman`**, `otbs`, `stroustrup` or `knr` | [See Wikipedia](https://en.wikipedia.org/wiki/Brace_style)\ndfmt_soft_max_line_length | positive integers (**`80`**) | The formatting process will usually keep lines below this length, but they may be up to *max_line_length* columns long.\ndfmt_align_switch_statements | **`true`**, `false` | Align labels, cases, and defaults with their enclosing switch.\ndfmt_outdent_attributes (Not yet implemented) | **`true`**, `false`| Decrease the indentation level of attributes.\ndfmt_split_operator_at_line_end | `true`, **`false`** | Place operators on the end of the previous line when splitting lines.\ndfmt_space_after_cast | **`true`**, `false` | Insert space after the closing paren of a `cast` expression.\ndfmt_space_after_keywords (Not yet implemented) | **`true`**, `false` | Insert space after `if`, `while`, `foreach`, etc, and before the `(`.\ndfmt_space_before_function_parameters | `true`, **`false`** | Insert space before the opening paren of a function parameter list.\ndfmt_selective_import_space | **`true`**, `false` | Insert space after the module name and before the `:` for selective imports.\ndfmt_compact_labeled_statements | **`true`**, `false` | Place labels on the same line as the labeled `switch`, `for`, `foreach`, or `while` statement.\ndfmt_template_constraint_style | **`conditional_newline_indent`** `conditional_newline` `always_newline` `always_newline_indent` | Control the formatting of template constraints.\ndfmt_single_template_constraint_indent | `true`, **`false`** | Set if the constraints are indented by a single tab instead of two. Has only an effect if the style set to `always_newline_indent` or `conditional_newline_indent`.\ndfmt_space_before_aa_colon | `true`, **`false`** | Adds a space after an associative array key before the `:` like in older dfmt versions.\ndfmt_keep_line_breaks | `true`, **`false`** | Keep existing line breaks if these don't violate other formatting rules.\ndfmt_single_indent | `true`, **`false`** | Set if the code in parens is indented by a single tab instead of two.\ndfmt_reflow_property_chains | **`true`**, `false` | Recalculate the splitting of property chains into multiple lines.\ndfmt_space_after_keywords | **`true`**, `false` | Insert space after keywords (if,while,foreach,for, etc.).\n\n## Terminology\n* Braces - `{` and `}`\n* Brackets - `[` and `]`\n* Parenthesis / Parens  - `(` and `)`"
}
