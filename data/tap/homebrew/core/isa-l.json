{
  "name": "isa-l",
  "full_name": "isa-l",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Intelligent Storage Acceleration Library",
  "license": "BSD-3-Clause",
  "homepage": "https://github.com/intel/isa-l",
  "versions": {
    "stable": "2.30.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/intel/isa-l/archive/refs/tags/v2.30.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "bcf592c04fdfa19e723d2adf53d3e0f4efd5b956bb618fed54a1108d76a6eb56"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/isa-l/blobs/sha256:bb6ff29b6adfa19eb203ff666cb45901799fafb92cb92729f4919b7897905ac3",
          "sha256": "bb6ff29b6adfa19eb203ff666cb45901799fafb92cb92729f4919b7897905ac3"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/isa-l/blobs/sha256:1894e71fbaf5e4d7e10fa7168065f84993eb031ac6da348f898584b23ad8f03c",
          "sha256": "1894e71fbaf5e4d7e10fa7168065f84993eb031ac6da348f898584b23ad8f03c"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/isa-l/blobs/sha256:ccc29db398c4450a5ae50066d9fe2ae4f3558b19ecf428a4f0fd3caef70256a6",
          "sha256": "ccc29db398c4450a5ae50066d9fe2ae4f3558b19ecf428a4f0fd3caef70256a6"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/isa-l/blobs/sha256:75555d777f620a2a8e69d6e1349027357ebed26ae32b5452b75f46c39d87a934",
          "sha256": "75555d777f620a2a8e69d6e1349027357ebed26ae32b5452b75f46c39d87a934"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/isa-l/blobs/sha256:35ef03c3141f36d0e59a8b571dc14cc242407772c7e7b06475d9194745d0898b",
          "sha256": "35ef03c3141f36d0e59a8b571dc14cc242407772c7e7b06475d9194745d0898b"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "autoconf",
    "automake",
    "libtool",
    "nasm"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [
    {
      "name": "arch",
      "cask": null,
      "download": null,
      "version": "x86_64",
      "contexts": [],
      "specs": [
        "stable"
      ]
    }
  ],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/isa-l.rb",
  "ruby_source_checksum": {
    "sha256": "edc6f15d071bc831a83b4b5e9780417dd685b9ded441f9e3107e96b1e1e6d8be"
  },
  "date_added": "2021-12-10T14:27:05+00:00",
  "readme": "Intel(R) Intelligent Storage Acceleration Library\n=================================================\n\n[![Build Status](https://travis-ci.org/intel/isa-l.svg?branch=master)](https://travis-ci.org/intel/isa-l)\n[![Package on conda-forge](https://img.shields.io/conda/v/conda-forge/isa-l.svg)](https://anaconda.org/conda-forge/isa-l)\n\nISA-L is a collection of optimized low-level functions targeting storage\napplications.  ISA-L includes:\n* Erasure codes - Fast block Reed-Solomon type erasure codes for any\n  encode/decode matrix in GF(2^8).\n* CRC - Fast implementations of cyclic redundancy check.  Six different\n  polynomials supported.\n  - iscsi32, ieee32, t10dif, ecma64, iso64, jones64, rocksoft64.\n* Raid - calculate and operate on XOR and P+Q parity found in common RAID\n  implementations.\n* Compression - Fast deflate-compatible data compression.\n* De-compression - Fast inflate-compatible data compression.\n* igzip - A command line application like gzip, accelerated with ISA-L.\n\nAlso see:\n* [ISA-L for updates](https://github.com/intel/isa-l).\n* For crypto functions see [isa-l_crypto on github](https://github.com/intel/isa-l_crypto).\n* The [github wiki](https://github.com/intel/isa-l/wiki) including a list of\n  [distros/ports](https://github.com/intel/isa-l/wiki/Ports--Repos) offering binary packages\n  as well as a list of [language bindings](https://github.com/intel/isa-l/wiki/Language-Bindings).\n* [Contributing](CONTRIBUTING.md).\n* [Security Policy](SECURITY.md).\n* Docs on [units](doc/functions.md), [tests](doc/test.md), or [build details](doc/build.md).\n\nBuilding ISA-L\n--------------\n\n### Prerequisites\n\n* Make: GNU 'make' or 'nmake' (Windows).\n* Optional: Building with autotools requires autoconf/automake/libtool packages.\n* Optional: Manual generation requires help2man package.\n\nx86_64:\n* Assembler: nasm. Version 2.15 or later suggested (other versions of nasm and\n  yasm may build but with limited function [support](doc/build.md)).\n* Compiler: gcc, clang, icc or VC compiler.\n\naarch64:\n* Assembler: gas v2.24 or later.\n* Compiler: gcc v4.7 or later.\n\nother:\n* Compiler: Portable base functions are available that build with most C compilers.\n\n### Autotools\nTo build and install the library with autotools it is usually sufficient to run:\n\n    ./autogen.sh\n    ./configure\n    make\n    sudo make install\n\n### Makefile\nTo use a standard makefile run:\n\n    make -f Makefile.unx\n\n### Windows\nOn Windows use nmake to build dll and static lib:\n\n    nmake -f Makefile.nmake\n\nor see [details on setting up environment here](doc/build.md).\n\n### Other make targets\nOther targets include:\n* `make check` : create and run tests\n* `make tests` : create additional unit tests\n* `make perfs` : create included performance tests\n* `make ex`    : build examples\n* `make other` : build other utilities such as compression file tests\n* `make doc`   : build API manual"
}
