{
  "name": "git-fixup",
  "full_name": "git-fixup",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Alias for git commit --fixup <ref>",
  "license": "ISC",
  "homepage": "https://github.com/keis/git-fixup",
  "versions": {
    "stable": "1.5.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/keis/git-fixup/archive/v1.5.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "b110730f37009f8fe26bcbdd83e20a9ccad02367b48cd0cfe50f4ec1a74f0eae"
    },
    "head": {
      "url": "https://github.com/keis/git-fixup.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-fixup/blobs/sha256:6de34acd070e73748e8412252fad584ffeddacd87b11d1cd1d28fccfeb9e15c1",
          "sha256": "6de34acd070e73748e8412252fad584ffeddacd87b11d1cd1d28fccfeb9e15c1"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/git-fixup.rb",
  "ruby_source_checksum": {
    "sha256": "790a22dcb58f1ad0f89263df09931ba3e98865bbd7bbe110a440990b2687545f"
  },
  "date_added": "2015-02-25T18:13:02+00:00",
  "readme": "# git-fixup\n\nFighting the copy-paste element of your rebase workflow.\n\n`git fixup <ref>` is simply an alias for `git commit --fixup <ref>`. That's\njust a convenience feature that can be also be used to trigger tab completion.\n\nThe magic is in plain `git fixup` without any arguments.  It finds which\nlines/files you have changed, uses git blame/log to find the most recent commits\nthat touched those lines/files, and displays a list for you to pick from. This\nis a convenient alternative to manually searching through the commit log and\ncopy-pasting the commit hash.\n\n<img src=\"https://cloud.githubusercontent.com/assets/484559/6431298/344ded94-c023-11e4-8b82-314387ceeee3.png\" alt=\"git fixup\" width=\"500px\" />\n\n## Install\n\nOn **OS X** you can install this script with _homebrew_\n\n    brew install git-fixup\n\nOn **Arch linux** you can install from AUR using _yaourt_ or a similar tool\n\n    yaourt git-fixup\n\nFor most other systems (as long as they include `install` and `make`) you can\ninstall by cloning this repo and running make\n\n    git clone https://github.com/keis/git-fixup.git\n    cd git-fixup\n    make install\n    make install-zsh\n\nOr if you don't want to deal with any of that you can simply download the\nscripts in anyway you like and make sure to put the program and completion\nscript into your `$PATH` and `$fpath` respectively.\n\n## Usage\n\n```\ngit-fixup [-s|--squash] [-f|--fixup] [-c|--commit] [--no-verify]\n          [--rebase] [-b|--base <rev>] [<ref>]\n```\n\nFor this tool to make any sense you should enable the `rebase.autosquash`\nsetting in the git config, or use the `--rebase` option.\n\n\n```bash\n# Select the changes that should be part of the fixup.\n$ git add -p\n\n# Output a list of commits that the staged changes are likely a fixup of.\n$ git fixup\n\n# Create a fixup!-<commit> of the given ref. If you have installed the zsh script\n# you can cycle through the list of fixup candidates with tab completion.\n$ git fixup <ref>\n\n# Commit rebased into the selected commit as a fixup.\n$ git rebase -i ...\n```\n\n## Options\n\n### -s, --squash\n\nInstruct `git-fixup` to create a `squash!` commit instead of a `fixup!` commit.\n\nSquashing gives you the opportunity to edit the commit message before\nthe commits are squashed together.\n\nDefault action can be configured by setting [fixup.action](#fixupaction)\n\n### -f, --fixup\n\nInstruct `git-fixup` to create `fixup!` commit (This is the default).\n\nDefault action can be configured by setting [fixup.action](#fixupaction)\n\n### -c, --commit\n\nInstead of listing the suggested commits show a menu to pick a commit to\ncreate a fixup/squash commit of.\n\nA [default menu](#the-default-menu) is provided that is intentionally very\nsimple and with no advanced features. Instead of using it you can tell `git\nfixup` to use an external tool for the menu by defining a command line via\neither the [fixup.menu](#fixupmenu) setting in the git config or the `GITFIXUPMENU`\nenvironment variable (the latter overrides the former).\n\n```bash\n# Use fzf as a menu program\n$ GITFIXUPMENU=fzf git fixup -c\n```\n\nThis option can be enabled by default by setting [fixup.commit](#fixupcommit)\nin the git config.\n\n### --no-commit\n\nDon't show the commit menu even if previously instructed to do so.\n\n### --rebase\n\nCall an interactive rebase right after the commit is created, to automatically apply the\nfix-up into the target commit. This is merely to avoid doing two commands one after the\nother (`git fixup && git rebase`).\n\nThis simply calls `git rebase --interactive --autosquash target~1`, with the target being the\ncommit to fix-up.\n\nDefault rebase/no-rebase can be configured by setting [fixup.rebase](#fixuprebase)\n\n### --no-rebase\n\nDon't do a rebase even if previously instructed to do so (useful to bypass [fixup.rebase](#fixuprebase))\n\n### --no-verify\n\nBypass the pre-commit and commit-msg hooks. (see `git help commit`)\n\n\n### --base <rev>\n\nThis option receives as argument the revision to be used as base commit for\nthe search of fixup/squash candidates. You can use anything that resolves to a\ncommit. The special value `closest` resolves to the closest ancestor branch of\nthe current head.\n\nIf omitted, the default base commit is resolved in the following order:\n\n1. The value of the environment variable `GITFIXUPBASE` if present;\n2. The value of the configuration key `fixup.base` if present;\n3. The branch configured as upstream of the current one (i.e. `@{upstream}`)\n   if existing;\n4. Finally, the root commit (i.e. full history) if nothing of the above is\n   satisfied.\n\n## Configuration\n\n`git-fixup` uses configuration from the ENVIRONMENT or from `git config`\n\n### fixup.base\n\nOr `GITFIXUPBASE`\n\nThe default argument for `--base`. You can set the value `closest` to make\n`git-fixup` use the closest ancestor branch by default, for example.\n\n### fixup.action\n\nOr `GITFIXUPACTION`\n\nDecides if the default actions will be `fixup` or `squash`.\n\n### fixup.commit\n\nOr `GITFIXUPCOMMIT`\n\nDecides if the commit menu should be displayed instead of the commit list by\ndefault.\n\n```bash\n# Enable --commit for all my projects\n$ git config --global fixup.commit true\n```\n\n### fixup.rebase\n\nOr `GITFIXUPREBASE`\n\nDecides if `git rebase` should be called right after the `git commit` call.\n\n```bash\n# Enable --rebase for all my projects\n$ git config --global fixup.rebase true\n```\n\n### fixup.menu\n\nOr `GITFIXUPMENU`\n\nSets the command that will be used to display the commit menu. If not set\na simple [default menu](the-default-menu) will be used.\n\nSee [External menu](#external-menu) for more details and a more advanced\nexample.\n\n## Tab completion\n\nTab completion for zsh/fish is implemented. The suggestions for the tab completion\nare the suggested fixup bases as generated by running the tool without any\narguments.\n\nTo be able to tab complete the command itself add a line like this to your zsh\nconfiguration::\n\n    zstyle ':completion:*:*:git:*' user-commands fixup:'Create a fixup commit'\n\n\n## External menu\n\nIn order to use an external tool for display the commit menu, you need to\neither define the [fixup.menu](#fixupmenu) setting in the git config or set the\n`GITFIXUPMENU` environment variable with the command for the menu. The menu\ncommand must receive as input the lines as the options for the user and return\nthe selected line to the standard output.\n\nThe following example is a fragment of a git config that makes `git fixup\n--commit` display a nice menu with [fzf](https://github.com/junegunn/fzf):\n\n```ini\n[fixup]\n    menu = fzf --height '60%' \\\n                --bind 'tab:toggle-preview' \\\n                --preview 'git show --color {+1}' \\\n                --preview-window=up:80% \\\n                --prompt 'Select commit: '\n```\n\n## The default menu\n\nIf you have not configured an external menu, the default menu is used. See the\nexample below:\n\n```bash\n$ git fixup -c\n1) 500be603c66040dd8a9ca18832d6221c00e96184 [F] Add README.md <foo@bar.com>\n2) ddab3b03da529af5303531a3d4127e3663063e08 [F] Add index.js <foo@bar.com>\nWhich commit should I fixup? <your-selection>\n```\n\nHere `<your-selection>` should be the number of the desired commit in the list.\nYou can use `q` to abort the operation and `h` to see a help message for the\nmenu.\n\nIf the commit title alone is not enough for you to decide, you can use `show\n<number>` to call `git show` on the `<number>`-th commit of the menu.\n\n## Changelog\n\nSee [CHANGELOG.md](CHANGELOG.md)\n\n## Authors\n\nThe fine people who have contributed to this script in ASCIIbetical order.\n\n- Cristiano Giuffrida ([cgiuffr](https://github.com/cgiuffr))\n- David Keijser ([keis](https://github.com/keis))\n- Elan Ruusam√§e ([glensc](https://github.com/glensc))\n- Federico del Mazo ([FdelMazo](https://github.com/FdelMazo))\n- Gustavo Sousa ([guludo](https://github.com/guludo))\n- Joe Shaw ([joeshaw](https://github.com/joeshaw))\n- Philippe ([pe](https://github.com/pe))\n- Rickard Dybeck ([alde](https://github.com/alde))\n- Tiago Ribeiro ([fixe](https://github.com/fixe))"
}
