{
  "name": "agg",
  "full_name": "agg",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Asciicast to GIF converter",
  "license": "Apache-2.0",
  "homepage": "https://github.com/asciinema/agg",
  "versions": {
    "stable": "1.4.2",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/asciinema/agg/archive/refs/tags/v1.4.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "8a4b81733085d81de1076e2964dedf729a8603941de11659d775478293d9efd0"
    },
    "head": {
      "url": "https://github.com/asciinema/agg.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/agg/blobs/sha256:409d2ed8650b8ed3f280d0da256c3a22bb021091394ffc95df2156a527ce0a18",
          "sha256": "409d2ed8650b8ed3f280d0da256c3a22bb021091394ffc95df2156a527ce0a18"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/agg/blobs/sha256:45fab29511d7718d19eff1094be56fa4ae45a0747e8447a485ceab933571b95d",
          "sha256": "45fab29511d7718d19eff1094be56fa4ae45a0747e8447a485ceab933571b95d"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/agg/blobs/sha256:cb05c369fc8fb361ef817f4976ee38970c8cfdc8301235a740e1f02925729eff",
          "sha256": "cb05c369fc8fb361ef817f4976ee38970c8cfdc8301235a740e1f02925729eff"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/agg/blobs/sha256:c62d0cc1c2f1611e1c7fd170503ec4c9aea911ad51563b50438b0cedc0233bd4",
          "sha256": "c62d0cc1c2f1611e1c7fd170503ec4c9aea911ad51563b50438b0cedc0233bd4"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/agg/blobs/sha256:1d40f111349bcb6f2911e6163c2cc50063ee7026825520597d1efb3a5518f7c9",
          "sha256": "1d40f111349bcb6f2911e6163c2cc50063ee7026825520597d1efb3a5518f7c9"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/agg/blobs/sha256:2d135015e4172042b47ac1b9c4e184109f1d0d9bb98ce009f00f2028e62520cc",
          "sha256": "2d135015e4172042b47ac1b9c4e184109f1d0d9bb98ce009f00f2028e62520cc"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/agg/blobs/sha256:541ce23ec266fea9c7fc3bd64d97e51112f999919ee9da2805c3cdaf33db39eb",
          "sha256": "541ce23ec266fea9c7fc3bd64d97e51112f999919ee9da2805c3cdaf33db39eb"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "2706c66e8def3eeba4d9bf1adf66221c8ad70701",
  "ruby_source_path": "Formula/agg.rb",
  "ruby_source_checksum": {
    "sha256": "e3a5f747b9c576a321cded49d2e87c67a605a0027458677c046211ffaa99cbb3"
  },
  "date_added": "2022-08-30T13:12:36+00:00",
  "readme": "# agg - asciinema gif generator\n\nagg is a command-line tool for generating animated GIF files from [asciicast v2\nfiles](https://github.com/asciinema/asciinema/blob/master/doc/asciicast-v2.md)\nproduced by [asciinema terminal\nrecorder](https://github.com/asciinema/asciinema).\n\nIt uses Kornel Lesiński's excellent\n[gifski](https://github.com/ImageOptim/gifski) library to produce optimized,\nhigh quality GIF output with accurate frame timing.\n\nagg is a successor to\n[asciicast2gif](https://github.com/asciinema/asciicast2gif).\n\n![Demo](demo.gif)\n\n## Building\n\nBuilding from source requires [Rust](https://www.rust-lang.org/) compiler\n(1.56.0 or later) and [Cargo package manager](https://doc.rust-lang.org/cargo/).\nYou can install both with [rustup](https://rustup.rs/).\n\nTo download source code, build agg binary and install it in `$HOME/.cargo/bin`\nrun:\n\n```bash\ncargo install --git https://github.com/asciinema/agg\n```\n\nYou need to ensure `$HOME/.cargo/bin` is in your shell's `$PATH`.\n\nAlternatively, you can manually download source code and build agg binary with:\n\n```bash\ngit clone https://github.com/asciinema/agg\ncd agg\ncargo build --release\n```\n\nThis produces an executable file in _release mode_ (`--release`) at\n`target/release/agg`. There are no other build artifacts so you can copy the\nbinary to a directory in your `$PATH`.\n\n### Building via Docker\n\nAlternatively, if you have Docker, Podman or another Docker-compatible tool\ninstalled you can use it to build agg container image. This doesn't require Rust\ntoolchain installed on your machine.\n\nBuild the image with the following command:\n\n```sh\ndocker build -t agg .\n```\n\nThen run agg like this:\n\n```sh\ndocker run --rm -it -u $(id -u):$(id -g) -v $PWD:/data agg demo.cast demo.gif\n```\n\nIf you use Podman in root-less mode:\n\n```sh\npodman run --rm -it -v $PWD:/data agg demo.cast demo.gif\n```\n\n## Usage\n\nBasic usage:\n\n```bash\nagg demo.cast demo.gif\n```\n\nThe above command renders a GIF file with default theme (dracula), font size\n14px.\n\nAdditional options are available for customization. For example, the following\ncommand selects Monokai theme, larger font size, 2x playback speed:\n\n```bash\nagg --theme monokai --font-size 20 --speed 2 demo.cast demo.gif\n```\n\nRun `agg -h` to see all available options. Current options are:\n\n```text\n    --cols <COLS>\n        Override terminal width (number of columns)\n\n    --font-dir <FONT_DIR>\n        Use additional font directory\n\n    --font-family <FONT_FAMILY>\n        Specify font family [default: \"JetBrains Mono,Fira Code,SF Mono,Menlo,Consolas,DejaVu\n        Sans Mono,Liberation Mono\"]\n\n    --font-size <FONT_SIZE>\n        Specify font size (in pixels) [default: 14]\n\n    --fps-cap <FPS_CAP>\n        Set FPS cap [default: 30]\n\n-h, --help\n        Print help information\n\n    --idle-time-limit <IDLE_TIME_LIMIT>\n        Limit idle time to max number of seconds [default: 5]\n\n    --line-height <LINE_HEIGHT>\n        Specify line height [default: 1.4]\n\n    --no-loop\n        Disable animation loop\n\n    --renderer <RENDERER>\n        Select frame rendering backend [default: fontdue] [possible values: fontdue, resvg]\n\n    --rows <ROWS>\n        Override terminal height (number of rows)\n\n    --speed <SPEED>\n        Adjust playback speed [default: 1]\n\n    --theme <THEME>\n        Select color theme [possible values: asciinema, dracula, monokai, solarized-dark,\n        solarized-light, custom]\n\n-v, --verbose\n        Enable verbose logging\n\n-V, --version\n        Print version information\n```\n\n## Fonts\n\nBy default agg uses common monospaced font for a given platform, that can be\nfound on its default font family list. The list includes DejaVu Sans Mono and\nLiberation Mono (found on most Linux distros), SF Mono and Menlo (found on\nmacOS), Consolas (found on Windows), with addition of my personal favourites\nlike JetBrains Mono and Fira Code. The fonts are not included in agg and must be\npresent on the system. To see the default value run `agg --help` and look for\n`--font-family`. In addition there's implicit fallback to DejaVu Sans (not Mono)\nwhich helps with rendering symbols like ⣽ or ✔ amongst others.\n\nIf you want to use another font family then pass a comma-separated list like\nthis:\n\n```bash\nagg --font-family \"Source Code Pro,Fira Code\" demo.cast demo.gif\n```\n\nAs long as the fonts you want to use are installed in one of standard system\nlocations (e.g. /usr/share/fonts or ~/.local/share/fonts on Linux) agg will find\nthem. You can also use `--font-dir=/path/to/fonts` option to include extra\nfonts. `--font-dir` can be specified multiple times.\n\nTo verify agg picks up your font run it with `-v` (verbose) flag:\n\n```bash\nagg -v --font-family \"Source Code Pro,Fira Code\" demo.cast demo.gif\n```\n\nIt should print something similar to:\n\n```text\n[INFO agg] selected font families: [\"Source Code Pro\", \"Fira Code\", \"DejaVu Sans\", \"Noto Emoji\"]\n```\n\nThis list may also include implicit addition of DejaVu Sans fallback (mentioned\nearlier), as well as Noto Emoji (see section below).\n\nHere's how to use [Nerd Fonts](https://www.nerdfonts.com/) with agg:\n\n1. Download one of the patched font sets from\n   <https://github.com/ryanoasis/nerd-fonts/releases/latest> , e.g. JetBrainsMono.zip\n2. Unzip them into `~/.local/share/fonts` (on Linux) or install with system font\n   manager (macOS, Windows)\n3. Specify font family like this:\n\n```bash\nagg --font-family \"JetBrainsMono Nerd Font Mono\" demo.cast demo.gif\n```\n\n## Emoji\n\nCurrently agg supports only monochrome emojis via [Noto Emoji\nfont](https://fonts.google.com/noto/specimen/Noto+Emoji).\n\nInstall Noto Emoji font on your system or, point agg to a folder containing\n`NotoEmoji-*.ttf` files with `--font-dir`.\n\nNote that [Noto Color Emoji\nfont](https://fonts.google.com/noto/specimen/Noto+Color+Emoji) is not supported.\nBe aware that [some\ndistros](https://archlinux.org/packages/extra/any/noto-fonts-emoji/) ship this\ncolor font by name like \"noto-fonts-emoji\". This is _not_ what you need.\n\n## Color themes\n\nThere are several built-in color themes you can use with `--theme` option:\n\n- asciinema\n- dracula (default)\n- monokai\n- solarized-dark\n- solarized-light\n\nIf your asciicast file includes [theme\ndefinition](https://github.com/asciinema/asciinema/blob/develop/doc/asciicast-v2.md#theme)\nthen it's used automatically unless `--theme` option is explicitly specified.\n\nA custom, ad-hoc theme can be used with `--theme` option by passing a series of\ncomma-separated hex triplets defining terminal background color, default text\ncolor and a color palette:\n\n```text\n--theme bbbbbb,ffffff,000000,111111,222222,333333,444444,555555,666666,777777\n```\n\nThe above sets terminal background color to `bbbbbb`, default text color to `ffffff`,\nand uses remaining 8 colors as [SGR color\npalette](https://en.wikipedia.org/wiki/ANSI_escape_code#Colors).\n\nAdditional bright color variants can be specified by adding 8 more hex triplets\nat the end. For example, the equivalent of the built-in Monokai theme is:\n\n```text\n--theme 272822,f8f8f2,272822,f92672,a6e22e,f4bf75,66d9ef,ae81ff,a1efe4,f8f8f2,75715e,f92672,a6e22e,f4bf75,66d9ef,ae81ff,a1efe4,f9f8f5\n```\n\n## Additional GIF optimization\n\nGIF encoder used by agg, [gifski](https://github.com/ImageOptim/gifski),\nproduces great looking GIF files, although this often comes at a cost - file\nsize.\n\n[gifsicle](https://www.lcdf.org/gifsicle/) can be used to shrink the produced GIF file:\n\n```bash\ngifsicle --lossy=80 -k 128 -O2 -Okeep-empty demo.gif -o demo-opt.gif\n```\n\nEvery recording is different so you may need to tweak the lossiness level\n(`--lossy`), number of colors (`-k`) and other options to suit your needs.\n\n## Consulting\n\nI offer consulting services for asciinema project. See https://asciinema.org/consulting for more information.\n\n## License\n\n© 2022 Marcin Kulik.\n\nAll code is licensed under the Apache License, Version 2.0. See LICENSE file for details."
}
