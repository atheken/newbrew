{
  "name": "fswatch",
  "full_name": "fswatch",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Monitor a directory for changes and run a shell command",
  "license": "GPL-3.0-or-later and Apache-2.0",
  "homepage": "https://github.com/emcrisostomo/fswatch",
  "versions": {
    "stable": "1.17.1",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/emcrisostomo/fswatch/releases/download/1.17.1/fswatch-1.17.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "c38e341c567f5f16bfa64b72fc48bba5e93873d8572522e670e6f320bbc2122f"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/fswatch/blobs/sha256:96cea06f4891e9af44abcd6f30a250c8efebe660104893b7fd80c8f22b2ab569",
          "sha256": "96cea06f4891e9af44abcd6f30a250c8efebe660104893b7fd80c8f22b2ab569"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/fswatch/blobs/sha256:b7f5facb15c82b5dc9eb94e8cfaa4857e562609be24fdd716051c35bd2e85e8b",
          "sha256": "b7f5facb15c82b5dc9eb94e8cfaa4857e562609be24fdd716051c35bd2e85e8b"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/fswatch/blobs/sha256:ec08b3bf8f659a864d0c54f022939b45ea647c25769a8ab908f60f28ffbd803c",
          "sha256": "ec08b3bf8f659a864d0c54f022939b45ea647c25769a8ab908f60f28ffbd803c"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/fswatch/blobs/sha256:570223c980f22c296e4d6fa6e6058e778bb0e74d0dd9745ec49ec3940aeb5863",
          "sha256": "570223c980f22c296e4d6fa6e6058e778bb0e74d0dd9745ec49ec3940aeb5863"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/fswatch/blobs/sha256:6c57d2ea9ff9e425069580bba25c74f5890f454b807f4a94810271909d47283e",
          "sha256": "6c57d2ea9ff9e425069580bba25c74f5890f454b807f4a94810271909d47283e"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/fswatch/blobs/sha256:1da6e45f4051477e02acbf2f3d13a7917b8a80a38ca35d6ac8cbaff780df4651",
          "sha256": "1da6e45f4051477e02acbf2f3d13a7917b8a80a38ca35d6ac8cbaff780df4651"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/fswatch/blobs/sha256:c97ee3973b847257ad99f6ffff3c6ba3d33dbf2a333e0bbe289832b7e490f051",
          "sha256": "c97ee3973b847257ad99f6ffff3c6ba3d33dbf2a333e0bbe289832b7e490f051"
        },
        "x86_64_linux": {
          "cellar": "/home/linuxbrew/.linuxbrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/fswatch/blobs/sha256:60e3f628f00ace185e22523a1850f0521184e7477263ef69a1a0fcebd8b0f077",
          "sha256": "60e3f628f00ace185e22523a1850f0521184e7477263ef69a1a0fcebd8b0f077"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/fswatch.rb",
  "ruby_source_checksum": {
    "sha256": "3b9cad8cd3ae559462fafe5a8ce1fc98bd1c0f0465bc0af797fd5c41f13d7d90"
  },
  "date_added": "2013-09-12T10:27:09+01:00",
  "readme": "[![License](https://img.shields.io/badge/license-GPL--3.0-blue.svg?style=flat)](https://github.com/emcrisostomo/fswatch/blob/master/COPYING)\n\nREADME\n======\n\n`fswatch` is a file change monitor that receives notifications when the contents\nof the specified files or directories are modified.  `fswatch` implements\nseveral monitors:\n\n  * A monitor based on the _File System Events API_ of Apple macOS.\n  * A monitor based on _kqueue_, a notification interface introduced in FreeBSD\n    4.1 (and supported on most *BSD systems, including macOS).\n  * A monitor based on the _File Events Notification_ API of the Solaris kernel\n    and its derivatives.\n  * A monitor based on _inotify_, a Linux kernel subsystem that reports file\n    system changes to applications.\n  * A monitor based on _ReadDirectoryChangesW_, a Microsoft Windows API that\n    reports changes to a directory.\n  * A monitor which periodically stats the file system, saves file modification\n    times in memory, and manually calculates file system changes (which works\n    anywhere `stat (2)` can be used).\n\n`fswatch` should build and work correctly on any system shipping either of the\naforementioned APIs.\n\nTable of Contents\n-----------------\n\n  * [libfswatch](#libfswatch)\n  * [Features](#features)\n  * [Limitations](#limitations)\n  * [Getting fswatch](#getting-fswatch)\n  * [Building from Source](#building-from-source)\n  * [Installation](#installation)\n  * [Documentation](#documentation)\n  * [Localization](#localization)\n  * [Usage](#usage)\n  * [Contributing](#contributing)\n  * [Bug Reports](#bug-reports)\n\nlibfswatch\n----------\n\n`fswatch` is a frontend of `libfswatch`, a library with C and C++ binding.  More\ninformation on `libfswatch` can be found [here][README.libfswatch.md]. \n\n[README.libfswatch.md]: README.libfswatch.md\n\nFeatures\n--------\n\n`fswatch` main features are:\n\n  * Support for many OS-specific APIs such as kevent, inotify, and FSEvents.\n  * Recursive directory monitoring.\n  * Path filtering using including and excluding regular expressions.\n  * Customizable record format.\n  * Support for periodic idle events.\n\nLimitations\n-----------\n\nThe limitations of `fswatch` depend largely on the monitor being used:\n\n  * The **FSEvents** monitor, available only on macOS, has no known limitations,\n    and scales very well with the number of files being observed.\n\n  * The **File Events Notification** monitor, available on Solaris kernels and\n    its derivatives, has no known limitations.\n\n  * The **kqueue** monitor, available on any \\*BSD system featuring kqueue,\n    requires a file descriptor to be opened for every file being watched.  As a\n    result, this monitor scales badly with the number of files being observed,\n    and may begin to misbehave as soon as the `fswatch` process runs out of file\n    descriptors.  In this case, `fswatch` dumps one error on standard error for\n    every file that cannot be opened.\n\n  * The **inotify** monitor, available on Linux since kernel 2.6.13, may suffer\n    a queue overflow if events are generated faster than they are read from the\n    queue.  In any case, the application is guaranteed to receive an overflow\n    notification which can be handled to gracefully recover.  `fswatch`\n    currently throws an exception if a queue overflow occurs.  Future versions\n    will handle the overflow by emitting proper notifications.\n\n  * The **Windows** monitor can only establish a watch _directories_, not files.\n    To watch a file, its parent directory must be watched in order to receive\n    change events for all the directory's children, _recursively_ at any depth.\n    Optionally, change events can be filtered to include only changes to the\n    desired file.\n\n  * The **poll** monitor, available on any platform, only relies on\n    available CPU and memory to perform its task.  The performance of this\n    monitor degrades linearly with the number of files being watched.\n\nUsage recommendations are as follows:\n\n  * On macOS, use only the `FSEvents` monitor (which is the default behaviour).\n\n  * On Solaris and its derivatives use the _File Events Notification_ monitor.\n\n  * On Linux, use the `inotify` monitor (which is the default behaviour).\n\n  * If the number of files to observe is sufficiently small, use the `kqueue`\n    monitor.  Beware that on some systems the maximum number of file descriptors\n    that can be opened by a process is set to a very low value (values as low as\n    256 are not uncommon), even if the operating system may allow a much larger\n    value.  In this case, check your OS documentation to raise this limit on\n    either a per process or a system-wide basis.\n\n  * If feasible, watch directories instead of files.  Properly crafting the\n    receiving side of the events to deal with directories may sensibly reduce\n    the monitor resource consumption.\n\n  * On Windows, use the `windows` monitor.\n\n  * If none of the above applies, use the poll monitor.  The authors' experience\n    indicates that `fswatch` requires approximately 150 MB of RAM memory to\n    observe a hierarchy of 500.000 files with a minimum path length of 32\n    characters.  A common bottleneck of the poll monitor is disk access, since\n    `stat()`-ing a great number of files may take a huge amount of time.  In\n    this case, the latency should be set to a sufficiently large value in order\n    to reduce the performance degradation that may result from frequent disk\n    access.\n\nGetting fswatch\n---------------\n\nA regular user may be able to fetch `fswatch` from the package manager of your\nOS or a third-party one.  If you are looking for `fswatch` for macOS, you can\ninstall it using either [MacPorts] or [Homebrew]:\n\n```\n# MacPorts\n$ port install fswatch\n\n# Homebrew\n$ brew install fswatch\n```\n\nOn FreeBSD, `fswatch` can be installed using [pkg]:\n\n```console\n# pkg install fswatch-mon\n```\n\nCheck your favourite package manager and let us know if `fswatch` is missing\nthere.\n\n[MacPorts]: https://www.macports.org\n[Homebrew]: http://brew.sh\n[pkg]: https://man.freebsd.org/pkg/8\n\nBuilding from Source\n--------------------\n\nA user who wishes to build `fswatch` should get a [release tarball][release].\nA release tarball contains everything a user needs to build `fswatch` on their\nsystem, following the instructions detailed in the Installation section below\nand the `INSTALL` file.\n\nA developer who wishes to modify `fswatch` should get the sources (either from a\nsource tarball or cloning the repository) and have the GNU Build System\ninstalled on their machine.  Please read `README.gnu-build-system` to get further\ndetails about how to bootstrap `fswatch` from sources on your machine.\n\nGetting a copy of the source repository is not recommended unless you are a\ndeveloper, you have the GNU Build System installed on your machine, and you know\nhow to bootstrap it on the sources.\n\n[release]: https://github.com/emcrisostomo/fswatch/releases\n\nInstallation\n------------\n\nSee the `INSTALL` file for detailed information about how to configure and\ninstall `fswatch`.  Since the `fswatch` builds and uses dynamic libraries, in\nsome platforms you may need to perform additional tasks before you can use\n`fswatch`:\n\n  * Make sure the installation directory of dynamic libraries (`$PREFIX/lib`) is\n    included in the lookup paths of the dynamic linker of your operating system.\n    The default path, `/usr/local/lib`, will work in nearly every operating\n    system.\n  * Refreshing the links and cache to the dynamic libraries may be required.  In\n    GNU/Linux systems you may need to run `ldconfig`:\n\n        $ ldconfig\n\n`fswatch` is a C++ program and a C++ compiler compliant with the C++11 standard\nis required to compile it.  Check your OS documentation for information about\nhow to install the C++ toolchain and the C++ runtime.\n\nNo other software packages or dependencies are required to configure and install\n`fswatch` but the aforementioned APIs used by the file system monitors.\n\nDocumentation\n-------------\n\n`fswatch` provides the following [documentation]:\n\n  * Texinfo documentation, included with the distribution.\n  * HTML documentation.\n  * PDF documentation.\n  * A [wiki] page.\n  * A man page.\n\n`fswatch` official documentation is provided in Texinfo format.  This is the\nmost comprehensive source of information about `fswatch` and the only\nauthoritative one.  The man page, in particular, is a stub that suggests the\nuser to use the info page instead.\n\nIf you are installing `fswatch` using a package manager and you would like the\nPDF manual to be bundled into the package, please send a feature request to the\npackage maintainer.\n\n[documentation]: http://emcrisostomo.github.io/fswatch/doc\n[wiki]: https://github.com/emcrisostomo/fswatch/wiki\n\nLocalization\n------------\n\n`fswatch` is localizable and internally uses GNU `gettext` to decouple\nlocalizable string from their translation.  The currently available locales are:\n\n  * English (`en`).\n  * Italian (`it`).\n  * Spanish (`es`).\n\nTo build `fswatch` with localization support, you need to have `gettext`\ninstalled on your system.  If `configure` cannot find `<libintl.h>` or the\nlinker cannot find `libintl`, then you may need to manually provide their\nlocation to `configure`, usually using the `CPPFLAGS` and the `LDFLAGS`\nvariables.  See `README.macos` for an example.\n\nIf `gettext` is not available on your system, `fswatch` shall build correctly,\nbut it will lack localization support and the only available locale will be\nEnglish.\n\nUsage\n-----\n\n`fswatch` accepts a list of paths for which change events should be received:\n\n    $ fswatch [options] ... path-0 ... path-n\n\nThe event stream is created even if any of the paths do not exist yet.  If they\nare created after `fswatch` is launched, change events will be properly\nreceived.  Depending on the watcher being used, newly created paths will be\nmonitored after the amount of configured latency has elapsed.\n\nThe output of `fswatch` can be piped to other program in order to process it\nfurther:\n\n    $ fswatch -0 path | while read -d \"\" event \\\n      do \\\n        // do something with ${event}\n      done\n\nTo run a command when a set of change events is printed to standard output but\nno event details are required, then the following command can be used:\n\n    $ fswatch -o path | xargs -n1 -I{} program\n\nThe behaviour is consistent with earlier versions of `fswatch` (v. 0.x).\nPlease, read the _Compatibility Issues with fswatch v. 0.x_ section for further\ninformation.\n\nBy default `fswatch` chooses the best monitor available on the current platform,\nin terms of performance and resource consumption.  If the user wishes to specify\na different monitor, the `-m` option can be used to specify the monitor by name:\n\n    $ fswatch -m kqueue_monitor path\n\nThe list of available monitors can be obtained with the `-h` option.\n\nFor more information, refer to the `fswatch` documentation.\n\nContributing\n------------\n\nEverybody is welcome to contribute to `fswatch`.  Please, see\n[`CONTRIBUTING`][contrib] for further information.\n\n[contrib]: CONTRIBUTING.md\n\nBug Reports\n-----------\n\nBug reports can be sent directly to the authors.\n\nContact the Authors\n-------------------\n\nThe author can be contacted on IRC, using the Freenode `#fswatch` channel.\n\nLicense\n-------\n\nThis software is dual-licensed under the GPL v. 3.0 and the Apache License\nv. 2.0.\n\n-----\n\nCopyright (c) 2013-2021 Enrico M. Crisostomo\n\nThis program is free software; you can redistribute it and/or modify it under\nthe terms of the GNU General Public License as published by the Free Software\nFoundation; either version 3, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY\nWARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\nPARTICULAR PURPOSE.  See the GNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License along with\nthis program.  If not, see <http://www.gnu.org/licenses/>."
}
