{
  "name": "zx",
  "full_name": "zx",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Tool for writing better scripts",
  "license": "Apache-2.0",
  "homepage": "https://github.com/google/zx",
  "versions": {
    "stable": "7.2.3",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://registry.npmjs.org/zx/-/zx-7.2.3.tgz",
      "tag": null,
      "revision": null,
      "checksum": "2644e2e596dc2e60f0a37491a342301594f07e073495da14665fa244e9b01aac"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zx/blobs/sha256:543e21439f8c31d8aab38fdff7e374aad1d8f36cc9ad16b474162294d78dca2b",
          "sha256": "543e21439f8c31d8aab38fdff7e374aad1d8f36cc9ad16b474162294d78dca2b"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zx/blobs/sha256:543e21439f8c31d8aab38fdff7e374aad1d8f36cc9ad16b474162294d78dca2b",
          "sha256": "543e21439f8c31d8aab38fdff7e374aad1d8f36cc9ad16b474162294d78dca2b"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zx/blobs/sha256:543e21439f8c31d8aab38fdff7e374aad1d8f36cc9ad16b474162294d78dca2b",
          "sha256": "543e21439f8c31d8aab38fdff7e374aad1d8f36cc9ad16b474162294d78dca2b"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zx/blobs/sha256:655673ef365dc41ce93cc8d421f1a80fde74070e1a6d8dd11de54944df89abe0",
          "sha256": "655673ef365dc41ce93cc8d421f1a80fde74070e1a6d8dd11de54944df89abe0"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zx/blobs/sha256:655673ef365dc41ce93cc8d421f1a80fde74070e1a6d8dd11de54944df89abe0",
          "sha256": "655673ef365dc41ce93cc8d421f1a80fde74070e1a6d8dd11de54944df89abe0"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zx/blobs/sha256:655673ef365dc41ce93cc8d421f1a80fde74070e1a6d8dd11de54944df89abe0",
          "sha256": "655673ef365dc41ce93cc8d421f1a80fde74070e1a6d8dd11de54944df89abe0"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zx/blobs/sha256:543e21439f8c31d8aab38fdff7e374aad1d8f36cc9ad16b474162294d78dca2b",
          "sha256": "543e21439f8c31d8aab38fdff7e374aad1d8f36cc9ad16b474162294d78dca2b"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "node"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/zx.rb",
  "ruby_source_checksum": {
    "sha256": "f314ef6b405a02b10bddaf5880f113599c9482b367d452437dbb6415628bbc32"
  },
  "date_added": "2022-06-13T19:50:27+00:00",
  "readme": "<a href=\"https://webpod.dev/?from=zx\"><img src=\"https://webpod.dev/img/banner.png\" alt=\"Webpod - deploy JavaScript apps\" width=\"190\" align=\"right\"></a>\n\n# 🐚 zx\n\n```js\n#!/usr/bin/env zx\n\nawait $`cat package.json | grep name`\n\nlet branch = await $`git branch --show-current`\nawait $`dep deploy --branch=${branch}`\n\nawait Promise.all([\n  $`sleep 1; echo 1`,\n  $`sleep 2; echo 2`,\n  $`sleep 3; echo 3`,\n])\n\nlet name = 'foo bar'\nawait $`mkdir /tmp/${name}`\n```\n\nBash is great, but when it comes to writing more complex scripts,\nmany people prefer a more convenient programming language.\nJavaScript is a perfect choice, but the Node.js standard library\nrequires additional hassle before using. The `zx` package provides\nuseful wrappers around `child_process`, escapes arguments and\ngives sensible defaults.\n\n## Install\n\n```bash\nnpm i -g zx\n```\n\n**Requirement**: Node version >= 16.0.0\n\n## Goods\n\n[$](#command-) · [cd()](#cd) · [fetch()](#fetch) · [question()](#question) · [sleep()](#sleep) · [echo()](#echo) · [stdin()](#stdin) · [within()](#within) · [retry()](#retry) · [spinner()](#spinner) ·\n[chalk](#chalk-package) · [fs](#fs-package) · [os](#os-package) · [path](#path-package) · [glob](#globby-package) · [yaml](#yaml-package) · [minimist](#minimist-package) · [which](#which-package) ·\n[__filename](#__filename--__dirname) · [__dirname](#__filename--__dirname) · [require()](#require)\n\nFor running commands on remote hosts,\nsee [webpod](https://github.com/webpod/webpod).\n\n## Documentation\n\nWrite your scripts in a file with an `.mjs` extension in order to\nuse `await` at the top level. If you prefer the `.js` extension,\nwrap your scripts in something like `void async function () {...}()`.\n\nAdd the following shebang to the beginning of your `zx` scripts:\n\n```bash\n#!/usr/bin/env zx\n```\n\nNow you will be able to run your script like so:\n\n```bash\nchmod +x ./script.mjs\n./script.mjs\n```\n\nOr via the `zx` executable:\n\n```bash\nzx ./script.mjs\n```\n\nAll functions (`$`, `cd`, `fetch`, etc) are available straight away\nwithout any imports.\n\nOr import globals explicitly (for better autocomplete in VS Code).\n\n```js\nimport 'zx/globals'\n```\n\n### ``$`command` ``\n\nExecutes a given command using the `spawn` func\nand returns [`ProcessPromise`](#processpromise).\n\nEverything passed through `${...}` will be automatically escaped and quoted.\n\n```js\nlet name = 'foo & bar'\nawait $`mkdir ${name}`\n```\n\n**There is no need to add extra quotes.** Read more about it in\n[quotes](docs/quotes.md).\n\nYou can pass an array of arguments if needed:\n\n```js\nlet flags = [\n  '--oneline',\n  '--decorate',\n  '--color',\n]\nawait $`git log ${flags}`\n```\n\nIf the executed program returns a non-zero exit code,\n[`ProcessOutput`](#processoutput) will be thrown.\n\n```js\ntry {\n  await $`exit 1`\n} catch (p) {\n  console.log(`Exit code: ${p.exitCode}`)\n  console.log(`Error: ${p.stderr}`)\n}\n```\n\n### `ProcessPromise`\n\n```ts\nclass ProcessPromise extends Promise<ProcessOutput> {\n  stdin: Writable\n  stdout: Readable\n  stderr: Readable\n  exitCode: Promise<number>\n\n  pipe(dest): ProcessPromise\n\n  kill(): Promise<void>\n\n  nothrow(): this\n\n  quiet(): this\n}\n```\n\nRead more about the [ProcessPromise](docs/process-promise.md).\n\n### `ProcessOutput`\n\n```ts\nclass ProcessOutput {\n  readonly stdout: string\n  readonly stderr: string\n  readonly signal: string\n  readonly exitCode: number\n\n  toString(): string // Combined stdout & stderr.\n}\n```\n\nThe output of the process is captured as-is. Usually, programs print a new\nline `\\n` at the end.\nIf `ProcessOutput` is used as an argument to some other `$` process,\n**zx** will use stdout and trim the new line.\n\n```js\nlet date = await $`date`\nawait $`echo Current date is ${date}.`\n```\n\n## Functions\n\n### `cd()`\n\nChanges the current working directory.\n\n```js\ncd('/tmp')\nawait $`pwd` // => /tmp\n```\n\nLike `echo`, in addition to `string` arguments, `cd` accepts and trims\ntrailing newlines from `ProcessOutput` enabling common idioms like:\n\n```js\ncd(await $`mktemp -d`)\n```\n\n### `fetch()`\n\nA wrapper around the [node-fetch](https://www.npmjs.com/package/node-fetch)\npackage.\n\n```js\nlet resp = await fetch('https://medv.io')\n```\n\n### `question()`\n\nA wrapper around the [readline](https://nodejs.org/api/readline.html) package.\n\n```js\nlet bear = await question('What kind of bear is best? ')\n```\n\n### `sleep()`\n\nA wrapper around the `setTimeout` function.\n\n```js\nawait sleep(1000)\n```\n\n### `echo()`\n\nA `console.log()` alternative which can take [ProcessOutput](#processoutput).\n\n```js\nlet branch = await $`git branch --show-current`\n\necho`Current branch is ${branch}.`\n// or\necho('Current branch is', branch)\n```\n\n### `stdin()`\n\nReturns the stdin as a string.\n\n```js\nlet content = JSON.parse(await stdin())\n```\n\n### `within()`\n\nCreates a new async context.\n\n```js\nawait $`pwd` // => /home/path\n\nwithin(async () => {\n  cd('/tmp')\n\n  setTimeout(async () => {\n    await $`pwd` // => /tmp\n  }, 1000)\n})\n\nawait $`pwd` // => /home/path\n```\n\n```js\nawait $`node --version` // => v20.2.0\n\nlet version = await within(async () => {\n  $.prefix += 'export NVM_DIR=$HOME/.nvm; source $NVM_DIR/nvm.sh; nvm use 16;'\n  \n  return $`node --version`\n})\n\necho(version) // => v16.20.0\n```\n\n### `retry()`\n\nRetries a callback for a few times. Will return after the first\nsuccessful attempt, or will throw after specifies attempts count.\n\n```js\nlet p = await retry(10, () => $`curl https://medv.io`)\n\n// With a specified delay between attempts.\nlet p = await retry(20, '1s', () => $`curl https://medv.io`)\n\n// With an exponential backoff.\nlet p = await retry(30, expBackoff(), () => $`curl https://medv.io`)\n```\n\n### `spinner()`\n\nStarts a simple CLI spinner.\n\n```js\nawait spinner(() => $`long-running command`)\n\n// With a message.\nawait spinner('working...', () => $`sleep 99`)\n```\n\n## Packages\n\nThe following packages are available without importing inside scripts.\n\n### `chalk` package\n\nThe [chalk](https://www.npmjs.com/package/chalk) package.\n\n```js\nconsole.log(chalk.blue('Hello world!'))\n```\n\n### `fs` package\n\nThe [fs-extra](https://www.npmjs.com/package/fs-extra) package.\n\n```js\nlet {version} = await fs.readJson('./package.json')\n```\n\n### `os` package\n\nThe [os](https://nodejs.org/api/os.html) package.\n\n```js\nawait $`cd ${os.homedir()} && mkdir example`\n```\n\n### `path` package\n\nThe [path](https://nodejs.org/api/path.html) package.\n\n```js\nawait $`mkdir ${path.join(basedir, 'output')}`\n```\n\n### `globby` package\n\nThe [globby](https://github.com/sindresorhus/globby) package.\n\n```js\nlet packages = await glob(['package.json', 'packages/*/package.json'])\n```\n\n### `yaml` package\n\nThe [yaml](https://www.npmjs.com/package/yaml) package.\n\n```js\nconsole.log(YAML.parse('foo: bar').foo)\n```\n\n### `minimist` package\n\nThe [minimist](https://www.npmjs.com/package/minimist) package.\n\n```js\nlet myCustomArgv = minimist(process.argv.slice(2), { boolean: [\"force\", \"help\"] })\n```\n\nA minimist-parsed version of the process args as `argv` (parsed without any config).\n\n```js\nif (argv.someFlag) {\n  echo('yes')\n}\n```\n\n### `which` package\n\nThe [which](https://github.com/npm/node-which) package.\n\n```js\nlet node = await which('node')\n```\n\n## Configuration\n\n### `$.shell`\n\nSpecifies what shell is used. Default is `which bash`.\n\n```js\n$.shell = '/usr/bin/bash'\n```\n\nOr use a CLI argument: `--shell=/bin/bash`\n\n### `$.spawn`\n\nSpecifies a `spawn` api. Defaults to `require('child_process').spawn`.\n\n### `$.prefix`\n\nSpecifies the command that will be prefixed to all commands run.\n\nDefault is `set -euo pipefail;`.\n\nOr use a CLI argument: `--prefix='set -e;'`\n\n### `$.quote`\n\nSpecifies a function for escaping special characters during\ncommand substitution.\n\n### `$.verbose`\n\nSpecifies verbosity. Default is `true`.\n\nIn verbose mode, `zx` prints all executed commands alongside with their\noutputs.\n\nOr use the CLI argument `--quiet` to set `$.verbose = false`.\n\n### `$.env`\n\nSpecifies an environment variables map.\n\nDefaults to `process.env`.\n\n### `$.cwd`\n\nSpecifies a current working directory of all processes created with the `$`.\n\nThe [cd()](#cd) func changes only `process.cwd()` and if no `$.cwd` specified,\nall `$` processes use `process.cwd()` by default (same as `spawn` behavior).\n\n### `$.log`\n\nSpecifies a [logging function](src/core.ts).\n\n```ts\nimport { LogEntry, log } from 'zx/core'\n\n$.log = (entry: LogEntry) => {\n  switch (entry.kind) {\n    case 'cmd':\n      // for example, apply custom data masker for cmd printing\n      process.stderr.write(masker(entry.cmd))\n      break\n    default:\n      log(entry)\n  }\n}\n```\n\n## Polyfills\n\n### `__filename` & `__dirname`\n\nIn [ESM](https://nodejs.org/api/esm.html) modules, Node.js does not provide\n`__filename` and `__dirname` globals. As such globals are really handy in\nscripts,\n`zx` provides these for use in `.mjs` files (when using the `zx` executable).\n\n### `require()`\n\nIn [ESM](https://nodejs.org/api/modules.html#modules_module_createrequire_filename)\nmodules, the `require()` function is not defined.\nThe `zx` provides `require()` function, so it can be used with imports in `.mjs`\nfiles (when using `zx` executable).\n\n```js\nlet {version} = require('./package.json')\n```\n\n## FAQ\n\n### Passing env variables\n\n```js\nprocess.env.FOO = 'bar'\nawait $`echo $FOO`\n```\n\n### Passing array of values\n\nWhen passing an array of values as an argument to `$`, items of the array will\nbe escaped\nindividually and concatenated via space.\n\nExample:\n\n```js\nlet files = [...]\nawait $`tar cz ${files}`\n```\n\n### Importing into other scripts\n\nIt is possible to make use of `$` and other functions via explicit imports:\n\n```js\n#!/usr/bin/env node\nimport { $ } from 'zx'\n\nawait $`date`\n```\n\n### Scripts without extensions\n\nIf script does not have a file extension (like `.git/hooks/pre-commit`), zx\nassumes that it is\nan [ESM](https://nodejs.org/api/modules.html#modules_module_createrequire_filename)\nmodule.\n\n### Markdown scripts\n\nThe `zx` can execute [scripts written as markdown](docs/markdown.md):\n\n```bash\nzx docs/markdown.md\n```\n\n### TypeScript scripts\n\n```ts\nimport { $ } from 'zx'\n// Or\nimport 'zx/globals'\n\nvoid async function () {\n  await $`ls -la`\n}()\n```\n\nSet [`\"type\": \"module\"`](https://nodejs.org/api/packages.html#packages_type)\nin **package.json**\nand [`\"module\": \"ESNext\"`](https://www.typescriptlang.org/tsconfig/#module)\nin **tsconfig.json**.\n\n### Executing remote scripts\n\nIf the argument to the `zx` executable starts with `https://`, the file will be\ndownloaded and executed.\n\n```bash\nzx https://medv.io/game-of-life.js\n```\n\n### Executing scripts from stdin\n\nThe `zx` supports executing scripts from stdin.\n\n```js\nzx << 'EOF'\nawait $`pwd`\nEOF\n```\n\n### Executing scripts via --eval\n\nEvaluate the following argument as a script.\n\n```bash\ncat package.json | zx --eval 'let v = JSON.parse(await stdin()).version; echo(v)'\n```\n\n### Installing dependencies via --install\n\n```js\n// script.mjs:\nimport sh from 'tinysh'\n\nsh.say('Hello, world!')\n```\n\nAdd `--install` flag to the `zx` command to install missing dependencies\nautomatically.\n\n```bash\nzx --install script.mjs\n```\n\nYou can also specify needed version by adding comment with `@` after\nthe import.\n\n```js\nimport sh from 'tinysh' // @^1\n```\n\n### Executing commands on remote hosts\n\nThe `zx` uses [webpod](https://github.com/webpod/webpod) to execute commands on\nremote hosts.\n\n```js\nimport { ssh } from 'zx'\n\nawait ssh('user@host')`echo Hello, world!`\n```\n\n\n\n### Attaching a profile\n\nBy default `child_process` does not include aliases and bash functions.\nBut you are still able to do it by hand. Just attach necessary directives\nto the `$.prefix`.\n\n```js\n$.prefix += 'export NVM_DIR=$HOME/.nvm; source $NVM_DIR/nvm.sh; '\nawait $`nvm -v`\n```\n\n### Using GitHub Actions\n\nThe default GitHub Action runner comes with `npx` installed.\n\n```yaml\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Build\n        env:\n          FORCE_COLOR: 3\n        run: |\n          npx zx <<'EOF'\n          await $`...`\n          EOF\n```\n\n### Canary / Beta / RC builds\n\nImpatient early adopters can try the experimental zx versions.\nBut keep in mind: these builds are ⚠️️__beta__ in every sense.\n\n```bash\nnpm i zx@dev\nnpx zx@dev --install --quiet <<< 'import _ from \"lodash\" /* 4.17.15 */; console.log(_.VERSION)'\n```\n\n## License\n\n[Apache-2.0](LICENSE)\n\nDisclaimer: _This is not an officially supported Google product._"
}
