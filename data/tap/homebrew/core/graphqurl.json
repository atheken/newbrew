{
  "name": "graphqurl",
  "full_name": "graphqurl",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Curl for GraphQL with autocomplete, subscriptions and GraphiQL",
  "license": "Apache-2.0",
  "homepage": "https://github.com/hasura/graphqurl",
  "versions": {
    "stable": "1.0.1",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://registry.npmjs.org/graphqurl/-/graphqurl-1.0.1.tgz",
      "tag": null,
      "revision": null,
      "checksum": "c6dfb4106d5b8b0860c0df5dffd0cc75095d280ad4841bda25a6ef0b9a75e199"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/graphqurl/blobs/sha256:6720b6787af01d641813f3f8afd2c6f48bb0897c88c8a7a2dc1a3d25fa09749d",
          "sha256": "6720b6787af01d641813f3f8afd2c6f48bb0897c88c8a7a2dc1a3d25fa09749d"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/graphqurl/blobs/sha256:d8f189f4e958a6f06e820be1734fcdacf427b7ae67d7230347ee05a067ac5035",
          "sha256": "d8f189f4e958a6f06e820be1734fcdacf427b7ae67d7230347ee05a067ac5035"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/graphqurl/blobs/sha256:138b68d4fffc64cd4ce86e07b618ccfa561aa15a700e8c08c66b20b65797ba70",
          "sha256": "138b68d4fffc64cd4ce86e07b618ccfa561aa15a700e8c08c66b20b65797ba70"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/graphqurl/blobs/sha256:a26640944c1ed16f99a09a4bb96bcb36b49fa3c56f36b22123e80e0d19aee6b0",
          "sha256": "a26640944c1ed16f99a09a4bb96bcb36b49fa3c56f36b22123e80e0d19aee6b0"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/graphqurl/blobs/sha256:06e0a8884f13c768f968e32737ec8cc75d6abf6c92a02f9cab6d00d782d4c010",
          "sha256": "06e0a8884f13c768f968e32737ec8cc75d6abf6c92a02f9cab6d00d782d4c010"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/graphqurl/blobs/sha256:5300156ac1794e98e8e9e8f261f469ae7a6749631dfd55c8374054f425e83cb4",
          "sha256": "5300156ac1794e98e8e9e8f261f469ae7a6749631dfd55c8374054f425e83cb4"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/graphqurl/blobs/sha256:5300156ac1794e98e8e9e8f261f469ae7a6749631dfd55c8374054f425e83cb4",
          "sha256": "5300156ac1794e98e8e9e8f261f469ae7a6749631dfd55c8374054f425e83cb4"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/graphqurl/blobs/sha256:5300156ac1794e98e8e9e8f261f469ae7a6749631dfd55c8374054f425e83cb4",
          "sha256": "5300156ac1794e98e8e9e8f261f469ae7a6749631dfd55c8374054f425e83cb4"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/graphqurl/blobs/sha256:c0c19d5f82887b811d0b9f5cdaad5efcfb8da33e970c253af8af63faae597f02",
          "sha256": "c0c19d5f82887b811d0b9f5cdaad5efcfb8da33e970c253af8af63faae597f02"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "node"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/graphqurl.rb",
  "ruby_source_checksum": {
    "sha256": "596dffca1c73a4920f9ac3225b9bbb47fcf52e2292f2d1cd5f814348fb6bb556"
  },
  "date_added": "2021-07-07T16:59:27+00:00",
  "readme": "# graphqurl\n\n[![oclif](https://img.shields.io/badge/cli-oclif-brightgreen.svg)](https://oclif.io)\n[![Version](https://img.shields.io/npm/v/graphqurl.svg)](https://npmjs.org/package/graphqurl)\n\n[![Azure Pipelines](https://dev.azure.com/hasura/graphqurl/_apis/build/status/hasura.graphqurl?branchName=master)](https://dev.azure.com/hasura/graphqurl/_build/latest?definitionId=1&branchName=master)\n[![Appveyor CI](https://ci.appveyor.com/api/projects/status/github/hasura/graphqurl?branch=master&svg=true)](https://ci.appveyor.com/project/hasura-bot/graphqurl/branch/master)\n[![Downloads/week](https://img.shields.io/npm/dw/graphqurl.svg)](https://npmjs.org/package/graphqurl)\n[![License](https://img.shields.io/npm/l/graphqurl.svg)](https://github.com/hasura/graphqurl/blob/master/LICENSE)\n<!--[![Codecov](https://codecov.io/gh/hasura/graphqurl/branch/master/graph/badge.svg)](https://codecov.io/gh/hasura/graphqurl)-->\n\n`graphqurl` is a curl like CLI for GraphQL. It's features include:\n- CLI for making GraphQL queries. It also provisions queries with autocomplete.\n- Run a custom GraphiQL, where you can specify request's headers, locally against any endpoint\n- Use as a library with Node.js or from the browser\n- Supports subscriptions\n- Export GraphQL schema\n\nMade with :heart: by <a href=\"https://hasura.io\">Hasura</a>\n\n----------------\n![Graphqurl Demo](assets/subscription.gif)\n---\n![GraphiQL Demo](assets/graphiql.gif)\n---\n![Subscriptions triggering bash](assets/bash_trigger.gif)\n\n----------------\n\n## Table of contents\n- [Installation](#installation)\n  * [Steps to Install CLI](#steps-to-install-cli)\n  * [Steps to Install Node Library](#steps-to-install-node-library)\n- [Usage](#usage)\n  * [CLI](#cli)\n    + [Query](#query)\n    + [Auto-complete](#auto-complete)\n    + [GraphiQL](#graphiql)\n    + [Subscription](#subscription)\n    + [Export schema](#export-schema)\n  * [Command](#command)\n    + [Args](#args)\n    + [Flag Reference](#flag-reference)\n  * [Node Library](#node-library)\n    + [Using callbacks:](#using-callbacks)\n    + [Using Promises:](#using-promises)\n  * [API](#api)\n    + [createClient(options)](#createclient)\n    + [Client](#client)\n- [More Examples](#more-examples)\n  * [Node Library](#node-library-1)\n    + [Queries and Mutations](#queries-and-mutations)\n    + [Subscriptions](#subscriptions)\n  * [CLI](#cli-1)\n\n\n## Installation\n\n### Steps to Install CLI\n\n```bash\nnpm install -g graphqurl\n```\n\n### Steps to Install Node Library\n\n```bash\nnpm install --save graphqurl\n```\n\n## Usage\n\n### CLI\n\n#### Query\n\n```bash\ngq https://my-graphql-endpoint/graphql \\\n     -H 'Authorization: Bearer <token>' \\\n     -q 'query { table { column } }'\n```\n\n#### Auto-complete\n\nGraphqurl can auto-complete queries using schema introspection. Execute the\ncommand without providing a query string:\n\n```bash\n$ gq <endpoint> [-H <header:value>]\nEnter the query, use TAB to auto-complete, Ctrl+Q to execute, Ctrl+C to cancel\ngql>\n```\n\nYou can use `TAB` to trigger auto-complete. `Ctrl+C` to cancel the input and\n`Ctrl+Q`/`Enter` to execute the query.\n\n#### GraphiQL\n\nOpen GraphiQL with a given endpoint:\n\n```bash\ngq <endpoint> -i\n```\n\n> This is a custom GraphiQL where you can specify request's headers.\n\n\n#### Subscription\n\nSubscriptions can be executed and the response is streamed on to stdout.\n\n```bash\ngq <endpoint> \\\n   -q 'subscription { table { column } }'\n```\n\n#### Export schema\n\nExport GraphQL schema to GraphQL or JSON format:\n\n```bash\ngq <endpoint> --introspect > schema.graphql\n\n# json\ngq <endpoint> --introspect --format json > schema.json\n```\n\n### Command\n\n```bash\n$ gq ENDPOINT [-q QUERY]\n```\n\n#### Args\n\n* `ENDPOINT`: graphql endpoint (can be also set as `GRAPHQURL_ENDPOINT` env var)\n\n#### Flag Reference\n\n| Flag                | Shorthand | Description                                                                                           |\n|---------------------|-----------|-------------------------------------------------------------------------------------------------------|\n| `--query`           | `-q`      | GraphQL query to execute                                                                              |\n| `--header`          | `-H`      | request header                                                                                        |\n| `--variable`        | `-v`      | Variables used in the query                                                                           |\n| `--variablesJSON`   | `-n`      | Variables used in the query as JSON                                                                   |\n| `--graphiql`        | `-i`      | Open GraphiQL with the given endpoint, headers, query and variables                                   |\n| `--graphiqlHost` | `-a`      | Host to use for GraphiQL. (Default: `localhost`)                                                   |\n| `--graphiqlPort`    | `-p`      | Port to use for GraphiQL                                                                              |\n| `--singleLine`      | `-l`      | Prints output in a single line, does not prettify                                                     |\n| `--introspect`      |           | Introspect the endpoint and get schema                                                                |\n| `--format`          |           | Output format for GraphQL schema after introspection. Options: `json`, `graphql` (Default: `graphql`) |\n| `--help`            | `-h`      | Outputs the command help text                                                                         |\n| `--version`         |           | Outputs CLI version                                                                                   |\n|`--queryFile`        |           | File to read the query from                                                                           |\n|`--operationName`    |           | Name of the operation to execute from the query file                                                  |\n|`--variablesFile`    |           | JSON file to read the query variables from                                                            |\n\n\n### Node Library\n\n#### Using callbacks:\n\n```js\nconst { createClient } = require('graphqurl');\n\nconst client = createClient({\n  endpoint: 'https://my-graphql-endpoint/graphql',\n  headers: {\n    'Authorization': 'Bearer <token>'\n  }\n});\n\nfunction successCallback(response, queryType, parsedQuery) {\n  if (queryType === 'subscription') {\n    // handle subscription response\n  } else {\n    // handle query/mutation response\n  }\n}\n\nfunction errorCallback(error, queryType, parsedQuery) {\n  console.error(error);\n}\n\nclient.query(\n  {\n    query: 'query ($id: Int) { table_by_id (id: $id) { column } }',\n    variables: { id: 24 }\n  },\n  successCallback,\n  errorCallback\n);\n\n```\n\n#### Using Promises:\n\nFor queries and mutations,\n\n```js\nconst { createClient } = require('graphqurl');\n\nconst client = createClient({\n  endpoint: 'https://my-graphql-endpoint/graphql',\n  headers: {\n    'Authorization': 'Bearer <token>'\n  }\n});\n\nclient.query(\n  {\n    query: 'query ($id: Int) { table_by_id (id: $id) { column } }',\n    variables: { id: 24 }\n  }\n).then((response) => console.log(response))\n .catch((error) => console.error(error));\n```\n\nFor subscriptions,\n\n```js\nconst { createClient } = require('graphqurl');\n\nconst client = createClient({\n  endpoint: 'https://my-graphql-endpoint/graphql',\n  headers: {\n    'Authorization': 'Bearer <token>'\n  },\n  websocket: {\n    endpoint: 'wss://my-graphql-endpoint/graphql',\n    onConnectionSuccess: () => console.log('Connected'),\n    onConnectionError: () => console.log('Connection Error'),\n  }\n});\n\nclient.subscribe(\n  {\n    subscription: 'subscription { table { column } }',\n  },\n  (event) => {\n    console.log('Event received: ', event);\n    // handle event\n  },\n  (error) => {\n    console.log('Error: ', error);\n    // handle error\n  }\n)\n```\n\n### API\n\n#### createClient\n\nThe `createClient` function is available as a named export. It takes init options and returns `client`.\n\n```\nconst { createClient } = require('graphqurl');\n```\n\n\n- **options**: [Object, *required*] graphqurl init options with the following properties:\n  - endpoint: [String, *required*] GraphQL endpoint\n  - headers: [Object] Request header, defaults to `{}`. These headers will be added along with all the GraphQL queries, mutations and subscriptions made through the client.\n  - websocket: [Object] Options for configuring subscriptions over websocket. Subscriptions are not supported if this field is empty.\n    - endpoint: [String, ] WebSocket endpoint to run GraphQL subscriptions.\n    - shouldRetry: [Boolean] Boolean value whether to retry closed websocket connection. Defaults to false.\n    - parameters: [Object] Payload to send the connection init message with\n    - onConnectionSuccess: [void => void] Callback function called when the GraphQL connection is successful. Please not that this is different from the websocket connection being open. Please check the [followed protocol](https://github.com/apollographql/subscriptions-transport-ws/blob/master/PROTOCOL.md) for more details.\n    - onConnectionError: [error => null] Callback function called if the GraphQL connection over websocket is unsuccessful\n    - onConnectionKeepAlive: [void => null]: Callback function called when the GraphQL server sends `GRAPHQL_CONNECTION_KEEP_ALIVE` messages to keep the connection alive.\n\n- **Returns**: [client]\n\n#### Client\n\n\n```js\nconst client = createClient({\n  endpoint: 'https://my-graphql-endpoint/graphql'\n});\n```\n\nThe graphqurl client exposeses the following methods:\n\n- **client.query**: [(queryoptions, successCallback, errorCallback) => Promise (response)]\n  - queryOptions: [Object *required*]\n    - query: [String *required*] The GraphQL query or mutation to be executed over HTTP\n    - variables: [Object] GraphQL query variables. Defaults to `{}`\n    - headers: [Object] Header overrides. If you wish to make a GraphQL query while adding to or overriding the headers provided during initalisations, you can pass the headers here.\n  - successCallback: [response => null] Success callback which is called after a successful response. It is called with the following parameters:\n    - response: The response of your query\n  - errorCallback: [error => null] Error callback which is called after the occurrence of an error. It is called with the following parameters:\n    - error: The occurred error\n  - **Returns**: [Promise (response) ] This function returns the response wrapped in a promise.\n    - response: response is a GraphQL compliant JSON object in case of `queries` and `mutations`.\n\n- **client.subscribe**: [(subscriptionOptions, eventCallback, errorCallback) => Function (stop)]\n  - subscriptionOptions: [Object *required*]\n    - subscription: [String *required*] The GraphQL subscription to be started over WebSocket\n    - variables: [Object] GraphQL query variables. Defaults to `{}`\n    - onGraphQLData: [(response) => null] You can optionally pass this function as an event callback\n    - onGraphQLError: [(response) => null] You can optionally pass this function as an error callback\n    - onGraphQLComplete: [() => null] Callback function called when the GraphQL subscription is declared as `complete` by the server and no more events will be received\n  - eventCallback: [(response) => null] Event callback which is called after receiving an event from the given subscription. It is called with the following parameters:\n    - event: The received event from the subscription\n  - errorCallback: [error => null] Error callback which is called after the occurrence of an error. It is called with the following parameters:\n    - error: The occurred error\n  - **Returns**: [void => null] This is a function to stop the subscription\n\n\n## More Examples\n\n### Node Library\n\n#### Queries and Mutations\n\nQuery example with variables\n\n```js\nconst { createClient } = require('graphqurl');\n\nconst client = createClient({\n  endpoint: 'https://my-graphql-endpoint/graphql',\n  headers: {\n    'x-access-key': 'mysecretxxx',\n  },\n});\n\nclient.query(\n  {\n    query: `\n      query ($name: String) {\n        table(where: { column: $name }) {\n          id\n          column\n        }\n      }\n    `,\n    variables: {\n      name: 'Alice'\n    }\n  }\n).then((response) => console.log(response))\n .catch((error) => console.error(error));\n```\n\n#### Subscriptions\n\nUsing promises,\n\n```js\nconst { createClient } = require('graphqurl');\nconst client = createClient({\n  endpoint: 'https://my-graphql-endpoint/graphql',\n  headers: {\n    'Authorization': 'Bearer Andkw23kj=Kjsdk2902ksdjfkd'\n  }\n  websocket: {\n    endpoint: 'wss://my-graphql-endpoint/graphql',\n  }\n})\n\nconst eventCallback = (event) => {\n  console.log('Event received:', event);\n  // handle event\n};\n\nconst errorCallback = (error) => {\n  console.log('Error:', error)\n};\n\nclient.subscribe(\n  {\n    query: 'subscription { table { column } }',\n  },\n  eventCallback,\n  errorCallback\n)\n```\n\n\n### CLI\n\nGeneric example:\n\n```bash\ngq \\\n     https://my-graphql-endpoint/graphql \\\n     -H 'Authorization: Bearer <token>' \\\n     -H 'X-Another-Header: another-header-value' \\\n     -v 'variable1=value1' \\\n     -v 'variable2=value2' \\\n     -q 'query { table { column } }'\n```\n\n---\nMaintained with :heart: by <a href=\"https://hasura.io\">Hasura</a>"
}
