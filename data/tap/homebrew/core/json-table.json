{
  "name": "json-table",
  "full_name": "json-table",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Transform nested JSON data into tabular data in the shell",
  "license": "EPL-1.0",
  "homepage": "https://github.com/micha/json-table",
  "versions": {
    "stable": "4.3.3",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/micha/json-table/archive/4.3.3.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "0ab7bb2a705ad3399132060b30b32903762473ff79b5a6e6f52f086e507b0911"
    },
    "head": {
      "url": "https://github.com/micha/json-table.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/json-table/blobs/sha256:2e92d06b25f370ab9811406799e31be9e8f775e88ae9a9417940f4e8a54940c3",
          "sha256": "2e92d06b25f370ab9811406799e31be9e8f775e88ae9a9417940f4e8a54940c3"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/json-table/blobs/sha256:b90e09e62cd09817662e86c0c9854cd7a6e02b128dec008eeaa24d6c89482f11",
          "sha256": "b90e09e62cd09817662e86c0c9854cd7a6e02b128dec008eeaa24d6c89482f11"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/json-table/blobs/sha256:23e482349f2641ceb4b17f3c05bba8dcbef599a2d3b7eba981dbcce14989e157",
          "sha256": "23e482349f2641ceb4b17f3c05bba8dcbef599a2d3b7eba981dbcce14989e157"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/json-table/blobs/sha256:1f355223e0eacbec654b62e3df5525aed0bf8b5fea393e7ccba4bb48d02d8453",
          "sha256": "1f355223e0eacbec654b62e3df5525aed0bf8b5fea393e7ccba4bb48d02d8453"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/json-table/blobs/sha256:91ed4ccbdeaf3571036d17d31f6a093e867fc8ec6f1c254c7f79342fcb3ab7cb",
          "sha256": "91ed4ccbdeaf3571036d17d31f6a093e867fc8ec6f1c254c7f79342fcb3ab7cb"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/json-table/blobs/sha256:56d0c75307c1bfff97077e37070ee7a0532b09614226e5716e7d6a5ad2e2b113",
          "sha256": "56d0c75307c1bfff97077e37070ee7a0532b09614226e5716e7d6a5ad2e2b113"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/json-table/blobs/sha256:61d89ff5426049b2f0fbb237862ec1227cd36c8f00ce81f9a382e8b7d1c2792a",
          "sha256": "61d89ff5426049b2f0fbb237862ec1227cd36c8f00ce81f9a382e8b7d1c2792a"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/json-table/blobs/sha256:49f7c1f8e757456f63d5e8b9cb7ef0f2b1cdb22303b2ae799595305cb7e65c5b",
          "sha256": "49f7c1f8e757456f63d5e8b9cb7ef0f2b1cdb22303b2ae799595305cb7e65c5b"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/json-table/blobs/sha256:2afef9b965070bcde986759dbd03cfd8fe3e77aec5a12158fb4aa189626ab977",
          "sha256": "2afef9b965070bcde986759dbd03cfd8fe3e77aec5a12158fb4aa189626ab977"
        },
        "sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/json-table/blobs/sha256:e5ed8ece1e10ede4417f347703f1e62bb417c65a11f6cac5f10915d44359eb5b",
          "sha256": "e5ed8ece1e10ede4417f347703f1e62bb417c65a11f6cac5f10915d44359eb5b"
        },
        "el_capitan": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/json-table/blobs/sha256:3240813838be9e797fd443e5f51d6bb53fc56a8d958dd361cbc865de003619bd",
          "sha256": "3240813838be9e797fd443e5f51d6bb53fc56a8d958dd361cbc865de003619bd"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/json-table/blobs/sha256:c2a8b0576a8a0be8e8bc9bcafcb70ad0fd98197a2f465d4713163fff48ba7696",
          "sha256": "c2a8b0576a8a0be8e8bc9bcafcb70ad0fd98197a2f465d4713163fff48ba7696"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/json-table.rb",
  "ruby_source_checksum": {
    "sha256": "c4fe761ada91adfc9d12e5bd37d0590cc53dbddea86b8f77cb5ed32295f52790"
  },
  "date_added": "2017-09-18T00:47:26-07:00",
  "readme": "# json-table [![Build Status](https://travis-ci.org/micha/json-table.svg?branch=master)](https://travis-ci.org/micha/json-table)\n\n**Jt** reads UTF-8 encoded JSON forms from `stdin` and writes tab separated\nvalues (or CSV) to `stdout`. A simple stack-based programming language is used\nto extract values from the JSON input for printing.\n\n## INSTALL\n\nLinux users can install prebuilt binaries from the release tarball:\n\n```\nsudo bash -c \"cd /usr/local && wget -O - https://github.com/micha/json-table/raw/master/jt.tar.gz | tar xzvf -\"\n```\n\nmacOS users can install the latest release using [Homebrew](https://brew.sh/):\n\n```\nbrew install json-table\n```\n\nOtherwise, build from source:\n\n```\nmake && make test && sudo make install\n```\n\n> **NOTE:** Previous versions installed the **jt** manual in the `$PREFIX/man/`\n> directory, which was incorrect. They are now installed into `$PREFIX/share/man/`.\n> If you have installed **jt** previously you will probably want to delete those\n> old man pages from the `$PREFIX/man/` directory if you install a newer version.\n\n## OVERVIEW\n\nExtracting information from deeply nested JSON data is difficult and unreliable\nwith tools like **sed** and **awk**, and tools that are specially designed for\nmanipulating JSON are cumbersome to use in the shell because they either return\ntheir results as JSON or introduce a new turing complete scripting language\nthat needs to be quoted and constructed via string interpolation.\n\n**Jt** provides only what is needed to extract data from nested JSON data\nstructures and organize the data into a table. Tools like **cut**, **paste**,\n**join**, **sort**, **uniq**, etc. can be used to efficiently reduce the\ntabular data to produce the final result.\n\n#### Features\n\n* **Self contained** &mdash; statically linked, has no build or runtime dependencies.\n* **Fast, small memory footprint** &mdash; efficiently process large JSON input.\n* **Correct** &mdash; parser does not accept invalid JSON (see tests for details).\n\n#### Example 1\n\nSuppose we have some JSON data in a log file that we want to process:\n\n```json\n{\"account\":123,\"amount\":1.00}\n{\"account\":789,\"amount\":2.00}\n{\"account\":123,\"amount\":3.00}\n{\"account\":123,\"amount\":4.00}\n{\"account\":456,\"amount\":5.00}\n```\n\nFirst, use **jt** to extract interesting values to get us out of JSON-world and\ninto a nice tab delimited, newline separated tabular format that is amenable to\nprocessing with shell utilities:\n\n```bash\njt [ account % ] amount % <<EOT\n{\"account\":123,\"amount\":1.00}\n{\"account\":789,\"amount\":2.00}\n{\"account\":123,\"amount\":3.00}\n{\"account\":123,\"amount\":4.00}\n{\"account\":456,\"amount\":5.00}\nEOT\n```\n```\n123     1.00\n789     2.00\n123     3.00\n123     4.00\n456     5.00\n```\n\nFrom here we can process the values in the shell. For example, to compute the\nsum of the amounts for account 123:\n\n```bash\njt [ account % ] amount % <<EOT | awk -F\\\\t '$1 == 123 {print $2}' | paste -sd+ |bc\n{\"account\":123,\"amount\":1.00}\n{\"account\":789,\"amount\":2.00}\n{\"account\":123,\"amount\":4.00}\n{\"account\":123,\"amount\":4.00}\n{\"account\":456,\"amount\":5.00}\nEOT\n```\n```\n9.00\n```\n\nOr to compute the amount frequencies for the account:\n\n```bash\njt [ account % ] amount % <<EOT | awk -F\\\\t '$1 == 123 {print $2}' | sort | uniq -c\n{\"account\":123,\"amount\":1.00}\n{\"account\":789,\"amount\":2.00}\n{\"account\":123,\"amount\":4.00}\n{\"account\":123,\"amount\":4.00}\n{\"account\":456,\"amount\":5.00}\nEOT\n```\n```\n      1 1.00\n      2 4.00\n```\n\n#### Example 2\n\n**Jt** can also extract data from nested JSON:\n\n```bash\njt asgs [ name % ] instances [ id % ] [ az % ] [ state % ] <<EOT\n{\n  \"asgs\": [\n    {\n      \"name\": \"test1\",\n      \"instances\": [\n        {\"id\": \"i-9fb75dc\", \"az\": \"us-east-1a\", \"state\": \"InService\"},\n        {\"id\": \"i-95393ba\", \"az\": \"us-east-1a\", \"state\": \"Terminating:Wait\"},\n        {\"id\": \"i-241fd0b\", \"az\": \"us-east-1b\", \"state\": \"InService\"}\n      ]\n    },\n    {\n      \"name\": \"test2\",\n      \"instances\": [\n        {\"id\": \"i-4bbab16\", \"az\": \"us-east-1a\", \"state\": \"InService\"},\n        {\"id\": \"i-417c312\", \"az\": \"us-east-1b\", \"state\": \"InService\"}\n      ]\n    }\n  ]\n}\nEOT\n```\n```\ntest1   i-9fb75dc       us-east-1a      InService\ntest1   i-95393ba       us-east-1a      Terminating:Wait\ntest1   i-241fd0b       us-east-1b      InService\ntest2   i-4bbab16       us-east-1a      InService\ntest2   i-417c312       us-east-1b      InService\n```\n\nThe resulting TSV data can be piped to **awk**, for example, to get just the\ninstances in `test1` that are in service:\n\n```bash\njt asgs [ name % ] instances [ id % ] [ az % ] [ state % ] <<EOT \\\n  | awk -F\\\\t '$1 == \"test1\" && $4 == \"InService\" {print}'\n{\n  \"asgs\": [\n    {\n      \"name\": \"test1\",\n      \"instances\": [\n        {\"id\": \"i-9fb75dc\", \"az\": \"us-east-1a\", \"state\": \"InService\"},\n        {\"id\": \"i-95393ba\", \"az\": \"us-east-1a\", \"state\": \"Terminating:Wait\"},\n        {\"id\": \"i-241fd0b\", \"az\": \"us-east-1b\", \"state\": \"InService\"}\n      ]\n    },\n    {\n      \"name\": \"test2\",\n      \"instances\": [\n        {\"id\": \"i-4bbab16\", \"az\": \"us-east-1a\", \"state\": \"InService\"},\n        {\"id\": \"i-417c312\", \"az\": \"us-east-1b\", \"state\": \"InService\"}\n      ]\n    }\n  ]\n}\nEOT\n```\n```\ntest1   i-9fb75dc       us-east-1a      InService\ntest1   i-241fd0b       us-east-1b      InService\n```\n\n## DOCUMENTATION\n\nSee the [man page][man] or `man jt` in your terminal.\n\n## EXAMPLES\n\nThe [man page][man] has many examples.\n\n## SEE ALSO\n\n**Jt** is based on ideas from the excellent [jshon][jshon] tool.\n\n## COPYRIGHT\n\nCopyright © 2017 Micha Niskin. Distributed under the Eclipse Public License.\n\n[man]: http://htmlpreview.github.io/?https://raw.githubusercontent.com/micha/json-table/master/jt.1.html\n[jshon]: http://kmkeen.com/jshon/"
}
