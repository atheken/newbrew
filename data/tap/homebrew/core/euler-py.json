{
  "name": "euler-py",
  "full_name": "euler-py",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Project Euler command-line tool written in Python",
  "license": "MIT",
  "homepage": "https://github.com/iKevinY/EulerPy",
  "versions": {
    "stable": "1.4.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/iKevinY/EulerPy/archive/v1.4.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "0d2f633bc3985c8acfd62bc76ff3f19d0bfb2274f7873ec7e40c2caef315e46d"
    },
    "head": {
      "url": "https://github.com/iKevinY/EulerPy.git",
      "branch": "master"
    }
  },
  "revision": 2,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/euler-py/blobs/sha256:1913cf5a79895977ea9c9bf1e6c3d2e76fb965ebb062c86087859fbd80ecc227",
          "sha256": "1913cf5a79895977ea9c9bf1e6c3d2e76fb965ebb062c86087859fbd80ecc227"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "python@3.11"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/euler-py.rb",
  "ruby_source_checksum": {
    "sha256": "b74150225b4fb0ff2b47e1e457072efc9f688886391351f8df0c8adab30b3395"
  },
  "date_added": "2014-11-10T19:37:29+00:00",
  "readme": "**********************************\nEulerPy |Travis| |PyPI| |Homebrew|\n**********************************\n\nEulerPy is a command line tool designed to streamline the process of solving\nProject Euler problems using Python. The package focuses on two main tasks:\nfirstly, to create Python \"template\" files with a docstring containing the\ntext of a Project Euler problem for ease-of-reference, and secondly, to check\nwhether a problem has been solved correctly.\n\n\n============\nInstallation\n============\n\nEulerPy can be installed (and updated) from PyPI using `pip`_:\n\n.. code-block:: bash\n\n    $ pip install --upgrade EulerPy\n\n\nConversely, it can be uninstalled using `pip`_ as well.\n\n.. code-block:: bash\n\n    $ pip uninstall EulerPy\n\n\nAlternatively, OS X users can install EulerPy using `Homebrew`_:\n\n.. code-block:: bash\n\n    $ brew install euler-py\n\n\n=====\nUsage\n=====\n\nFirst, you'll want to ``cd`` to the directory where your Project Euler files\nare being stored.\n\n.. code-block:: bash\n\n    $ mkdir ~/project-euler\n    $ cd ~/project-euler\n\n\nAt this point, you'll probably want to run the ``euler`` command, which will\nprompt to create ``001.py``, a file containing the text to Project Euler problem\n#1 as its docstring.\n\n.. code-block:: bash\n\n    $ euler\n    No Project Euler files found in the current directory.\n    Generate file for problem 1? [Y/n]: Y\n    Successfully created \"001.py\".\n\n    $ cat 001.py\n    \"\"\"\n    Project Euler Problem 1\n    =======================\n\n    If we list all the natural numbers below 10 that are multiples of 3 or 5,\n    we get 3, 5, 6 and 9. The sum of these multiples is 23.\n\n    Find the sum of all the multiples of 3 or 5 below 1000.\n    \"\"\"\n\nAt this point, you can open up your editor of choice and code up a solution\nto the problem, making sure to ``print()`` the output. Once you feel that\nyou've solved the problem, run the ``euler`` command again to verify your\nsolution is correct. If the answer is correct, the solution will be printed\nin green and the script will ask to generate the next problem file. If\nincorrect, the solution will be printed in red instead. Additionally, the\ntime elapsed during the solution-checking process will also be printed.\n\n.. code-block:: bash\n\n    $ euler\n    Checking \"001.py\" against solution: [no output] # (output in red)\n\n    $ echo print 42 >> 001.py\n    $ euler\n    Checking \"001.py\" against solution: 42 # (output in green)\n    Generate file for problem 2? [Y/n]: Y\n    Successfully created \"002.py\".\n\n\nEulerPy also has a few command line options that act as different commands\n(use ``euler --help`` to see a summary of all the options).\n\n\n``--cheat / -c``\n----------------\n\nThe ``--cheat`` option will print the answer to a problem after prompting\nthe user to ensure that they want to see it. If no problem argument is given,\nit will print the answer to the problem that they are currently working on.\n\n.. code-block:: bash\n\n    $ euler --cheat\n    View answer to problem 2? [y/N]: Y\n    The answer to problem 2 is <redacted>.\n\n    $ euler --cheat 100\n    View answer to problem 100? [y/N]: Y\n    The answer to problem 100 is <redacted>.\n\n\n``--generate / -g``\n-------------------\n\nThe ``--generate`` option will create a Python file for the given problem\nnumber. If no problem number is given, it will overwrite the most recent\nproblem with a file containing only the problem docstring (after prompting\nthe user).\n\n.. code-block:: bash\n\n    $ euler --generate\n    Generate file for problem 2? [Y/n]: Y\n    \"002.py\" already exists. Overwrite? [y/N]:\n    Successfully created \"002.py\".\n\n    $ euler --generate 5\n    Generate file for problem 5? [Y/n]: n\n    Aborted!\n\n``euler <problem>`` is equivalent to ``euler --generate <problem>`` if the file\n**does not** exist.\n\n.. code-block:: bash\n\n    $ cat 005.py\n    cat: 005.py: No such file or directory\n\n    $ euler 5\n    Generate file for problem 5? [Y/n]: n\n    Aborted!\n\nThe file generation process will also automatically copy any relevant\nresource files to a ``resources`` subdirectory.\n\n.. code-block:: bash\n\n    $ euler 22\n    Generate file for problem 22? [Y/n]: Y\n    Successfully created \"022.py\".\n    Copied \"names.txt\" to project-euler/resources.\n\n\n``--preview / -p``\n------------------\n\nThe ``--preview`` option will print the text of a given problem to the terminal;\nif no problem number is given, it will print the next problem instead.\n\n.. code-block:: bash\n\n    $ euler --preview\n    Project Euler Problem 3\n    The prime factors of 13195 are 5, 7, 13 and 29.\n\n    What is the largest prime factor of the number 600851475143?\n\n    $ euler --preview 5\n    Project Euler Problem 5\n    2520 is the smallest number that can be divided by each of the numbers\n    from 1 to 10 without any remainder.\n\n    What is the smallest number that is evenly divisible by all of the numbers\n    from 1 to 20?\n\n\n``--skip / -s``\n---------------\n\nThe ``--skip`` option will prompt the user to \"skip\" to the next problem. As\nof EulerPy v1.1, it will also append a \"skipped\" suffix to the skipped problem\nfile.\n\n.. code-block:: bash\n\n    $ euler --skip\n    Current problem is problem 2.\n    Generate file for problem 3? [y/N]: Y\n    Successfully created \"003.py\".\n    Renamed \"002.py\" to \"002-skipped.py\".\n\n\n``--verify / -v``\n-----------------\n\nThe ``--verify`` option will check whether a given problem file outputs the\ncorrect solution to the problem. If no problem number is given, it will\ncheck the current problem.\n\n.. code-block:: bash\n\n    $ euler --verify\n    Checking \"003.py\" against solution: [no output] # (output in red)\n\n    $ euler --verify 1\n    Checking \"001.py\" against solution: <redacted> # (output in green)\n\nAs of EulerPy v1.1, verifying a skipped problem file will remove the \"skipped\"\nsuffix from its filename.\n\n.. code-block:: bash\n\n    $ euler --verify 2\n    Checking \"002-skipped.py\" against solution: <redacted>\n    Renamed \"002-skipped.py\" to \"002.py\".\n\n``euler <problem>`` is equivalent to ``euler --verify <problem>`` if the file\n**does** exist.\n\n.. code-block:: bash\n\n    $ cat 001.py\n    \"\"\"\n    Project Euler Problem 1\n    =======================\n\n    If we list all the natural numbers below 10 that are multiples of 3 or 5,\n    we get 3, 5, 6 and 9. The sum of these multiples is 23.\n\n    Find the sum of all the multiples of 3 or 5 below 1000.\n    \"\"\"\n\n\n    $ euler 1\n    Checking \"001.py\" against solution: <redacted>\n\n\n``--verify-all``\n----------------\n\nThe ``--verify-all`` option was added in EulerPy v1.1. It essentially runs\n``--verify`` on all the problem files it can find in the current directory,\nbut also prints an overview of all of the problems in the directory. Note\nthat if the verification encounters a ``KeyboardInterrupt`` exception, it will\nskip the verification of that specific file. This allows for the ability to\nskip verifying some files but not others, in the case that some solutions are\ntaking too long to compute.\n\n.. code-block:: bash\n\n    $ euler --verify-all\n    Checking \"001.py\" against solution: <redacted>\n\n    Checking \"002.py\" against solution: ^C\n\n    Checking \"003.py\" against solution: [no output]\n\n    ---------------------------------------------------------------\n    C = correct, I = incorrect, E = error, S = skipped, . = missing\n\n    Problems 001-020: C S I . .   . . . . .   . . . . .   . . . . .\n\nThis option should be run after upgrading to v1.1 from EulerPy v1.0, as it will\nautomatically rename any problems that have been skipped using ``--skip``,\nmaking them easy to distinguish from those that have been correctly solved.\n\n\nFile Prefixes\n-------------\n\nAs of v1.3.0, EulerPy will attempt to keep the prefix of problem files\nconsistent. The motivation behind this is that ``import 001`` results in a\nsyntax error whereas ``import euler001`` is valid. By using the latter\nnaming scheme, it is possible to reuse code written in previous files.\n\n.. code-block:: bash\n\n    $ mv 003.py euler003.py\n\n    $ euler --skip\n    Current problem is problem 3.\n    Generate file for problem 4? [y/N]: Y\n    Successfully created \"euler004.py\".\n    Renamed \"euler003.py\" to \"euler003-skipped.py\".\n\n\n============\nContributing\n============\n\nSee `CONTRIBUTING.rst`_.\n\n\n=============\nMiscellaneous\n=============\n\nThe text for the problems in `problems.txt`_ were derived from Kyle Keen's\n`Local Euler`_ project, and the solutions in `solutions.txt`_ were derived\nfrom Bai Li's `projecteuler-solutions`_ repository.\n\nSee `this blog post`_ for insight into the development process.\n\nEulerPy uses `Click`_ as a dependency for its CLI functionality.\n\n\n=======\nLicense\n=======\n\nEulerPy is licensed under the `MIT License`_.\n\n\n.. |Travis| image:: https://img.shields.io/travis/iKevinY/EulerPy/master.svg\n            :alt: Build Status\n            :target: http://travis-ci.org/iKevinY/EulerPy\n\n.. |PyPI| image:: https://img.shields.io/pypi/v/EulerPy.svg\n          :alt: PyPI Version\n          :target: https://pypi.python.org/pypi/EulerPy/\n\n.. |Homebrew| image:: https://img.shields.io/homebrew/v/euler-py.svg\n              :alt: Homebrew Version\n              :target: https://github.com/Homebrew/homebrew-core/blob/master/Formula/euler-py.rb\n\n.. _pip: http://www.pip-installer.org/en/latest/index.html\n.. _Homebrew: http://brew.sh\n.. _CONTRIBUTING.rst: https://github.com/iKevinY/EulerPy/blob/master/CONTRIBUTING.rst\n.. _Local Euler: http://kmkeen.com/local-euler/\n.. _problems.txt: https://github.com/iKevinY/EulerPy/blob/master/EulerPy/data/problems.txt\n.. _solutions.txt: https://github.com/iKevinY/EulerPy/blob/master/EulerPy/data/solutions.txt\n.. _projecteuler-solutions: https://github.com/luckytoilet/projecteuler-solutions\n.. _this blog post: http://kevinyap.ca/2014/06/eulerpy-streamlining-project-euler/\n.. _click: https://github.com/mitsuhiko/click\n.. _MIT License: https://github.com/iKevinY/EulerPy/blob/master/LICENSE"
}
