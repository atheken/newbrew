{
  "name": "mprocs",
  "full_name": "mprocs",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Run multiple commands in parallel",
  "license": "MIT",
  "homepage": "https://github.com/pvolok/mprocs",
  "versions": {
    "stable": "0.6.4",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/pvolok/mprocs/archive/refs/tags/v0.6.4.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "7fdb5f3f8baaa82ccb7bf2193a7b843027cb133824a99475226524c105255077"
    },
    "head": {
      "url": "https://github.com/pvolok/mprocs.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mprocs/blobs/sha256:0eb52d211cb3e815fde72ac095e47d6ed6d9c0c4144521a2a8186d60a978b45e",
          "sha256": "0eb52d211cb3e815fde72ac095e47d6ed6d9c0c4144521a2a8186d60a978b45e"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mprocs/blobs/sha256:809917011f4d7b325f47e690f18ad5ebc929e69057e8ff9bf8e4bd5c3d13d2d7",
          "sha256": "809917011f4d7b325f47e690f18ad5ebc929e69057e8ff9bf8e4bd5c3d13d2d7"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mprocs/blobs/sha256:d96fa9177201787519d810a8cef0dfa489c40991ef93f472f7437ba3400c8081",
          "sha256": "d96fa9177201787519d810a8cef0dfa489c40991ef93f472f7437ba3400c8081"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mprocs/blobs/sha256:d9faadb723f373b8ffd992a5282d1da8171130587166e2831e2cdc1ce44b831a",
          "sha256": "d9faadb723f373b8ffd992a5282d1da8171130587166e2831e2cdc1ce44b831a"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mprocs/blobs/sha256:1189819af1ec7c13b6c23a66d0964a123a2f46c3adeb82b5ae4a6784c344cace",
          "sha256": "1189819af1ec7c13b6c23a66d0964a123a2f46c3adeb82b5ae4a6784c344cace"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mprocs/blobs/sha256:944c5e0b1f910f4202eb334e8d0f5152d5c791c10241d57000f4a7095ed68a04",
          "sha256": "944c5e0b1f910f4202eb334e8d0f5152d5c791c10241d57000f4a7095ed68a04"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mprocs/blobs/sha256:21334450af9a4872263142344fe6451bc9d299fb2a8df5c0ca99b6d15642660c",
          "sha256": "21334450af9a4872263142344fe6451bc9d299fb2a8df5c0ca99b6d15642660c"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mprocs/blobs/sha256:010993dcf1f72fcdaf8ac26ae55c6f2ae3de15ac1aab7ec6a7012f69133b52e8",
          "sha256": "010993dcf1f72fcdaf8ac26ae55c6f2ae3de15ac1aab7ec6a7012f69133b52e8"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [
    "libxcb"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    {
      "python": "build"
    }
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/mprocs.rb",
  "ruby_source_checksum": {
    "sha256": "557198f63bece60034b32c8174ce3e25b9fda30e737b182162bb3e5462060ff8"
  },
  "date_added": "2022-07-04T22:53:08+00:00",
  "readme": "# mprocs\n\n_mprocs_ runs multiple commands in parallel and shows output of each command\nseparately.\n\nWhen you work on a project you very often need the same list of commands to be\nrunning. For example: `webpack serve`, `jest --watch`, `node src/server.js`.\nWith mprocs you can list these command in `mprocs.yaml` and run all of them by\nrunning `mprocs`. Then you can switch between outputs of running commands and\ninteract with them.\n\nIt is similar to\n[concurrently](https://github.com/open-cli-tools/concurrently) but _mprocs_\nshows output of each command separately and allows to interact with processes\n(you can even work in _vim_ inside _mprocs_).\n\n<!--ts-->\n\n- [Screenshots](#screenshots)\n- [Installation](#installation)\n  - [Download binary (Linux, Macos, Windows)](#download-binary-linux-macos-windows)\n  - [npm (Linux, Macos, Windows)](#npm-linux-macos-windows)\n  - [homebrew (Macos)](#homebrew-macos)\n  - [cargo (All platforms)](#cargo-all-platforms)\n  - [scoop (Windows)](#scoop-windows)\n  - [AUR (Arch Linux)](#aur-arch-linux)\n  - [MPR (Debian/Ubuntu)](#mpr-debianubuntu)\n- [Usage](#usage)\n  - [Config](#config)\n    - [Keymap](#keymap)\n    - [$select operator](#select-operator)\n    - [Running scripts from package.json](#running-scripts-from-packagejson)\n  - [Default keymap](#default-keymap)\n  - [Remote control](#remote-control)\n- [FAQ](#faq)\n  - [mprocs vs tmux/screen](#mprocs-vs-tmuxscreen)\n\n<!-- Created by https://github.com/ekalinin/github-markdown-toc -->\n<!-- Added by: pvolok, at: Sun Jul  3 22:53:57 +07 2022 -->\n\n<!--te-->\n\n## Screenshots\n\n<img src=\"img/screenshot1.png\" width=\"900\" height=\"645\" />\n<img src=\"img/screenshot2.png\" width=\"900\" height=\"645\" />\n\n## Installation\n\n[![Packaging status](https://repology.org/badge/vertical-allrepos/mprocs.svg)](https://repology.org/project/mprocs/versions)\n\n### Download binary (Linux, Macos, Windows)\n\n[Download](https://github.com/pvolok/mprocs/releases) executable for your\nplatform and put it into a directory included in PATH.\n\n### npm (Linux, Macos, Windows)\n\n```sh\nnpm install -g mprocs\n```\n\n```sh\nyarn global add mprocs\n```\n\n### homebrew (Macos, Linux)\n\n```sh\nbrew install mprocs\n```\n\n### cargo (All platforms)\n\n```sh\ncargo install mprocs\n```\n\n### scoop (Windows)\n\n```sh\nscoop install mprocs\n```\n\n### AUR (Arch Linux)\n\n```sh\nyay mprocs\n```\n\n```sh\nyay mprocs-bin\n```\n\n### MPR (Debian/Ubuntu)\n\n```sh\ngit clone 'https://mpr.makedeb.org/mprocs'\ncd mprocs/\nmakedeb -si\n```\n\n## Usage\n\n1. Run `mprocs cmd1 cmd2 …` (example: `mprocs \"yarn test -w\" \"webpack serve\"`)\n\nOR\n\n1. Create `mprocs.yaml` file\n2. Run `mprocs` command\n\nExample `mprocs.yaml`:\n\n```yaml\nprocs:\n  nvim:\n    cmd: [\"nvim\"]\n  server:\n    shell: \"nodemon server.js\"\n  webpack: \"webpack serve\"\n  tests:\n    shell: \"jest -w\"\n    env:\n      NODE_ENV: test\n```\n\n### Config\n\nThere are two kinds of configs: global and local. _Global_ config is loaded\nfrom `~/.config/mprocs/mprocs.yaml` (or\n`C:\\Users\\Alice\\AppData\\Roaming\\mprocs\\mprocs.yaml` on Windows). _Local_ config\nis loaded from `mprocs.yaml` from current directory (or set via cli argument:\n`mprocs --config ./cfg/mprocs.yaml`). Settings in the _local_ config override\nsettings the _global_.\n\n- **procs**: _object_ - Processes to run. Only allowed in local config.\n  - **shell**: _string_ - Shell command to run (exactly one of **shell** or\n    **cmd** must be provided).\n  - **cmd**: _array<string>_ - Array of command and args to run (exactly one of\n    **shell** or **cmd** must be provided).\n  - **cwd**: _string_ - Set working directory for the process. Prefix\n    `<CONFIG_DIR>` will be replaced with the path of the directory where the\n    config is located.\n  - **env**: _object<string, string|null>_ - Set env variables. Object keys are\n    variable names. Assign variable to null, to clear variables inherited from\n    parent process.\n  - **add_path**: _string|array<string>_ - Add entries to the _PATH_\n    environment variable.\n  - **autostart**: _bool_ - Start process when mprocs starts. Default: _true_.\n  - **stop**: _\"SIGINT\"|\"SIGTERM\"|\"SIGKILL\"|{send-keys:\n    array<key>}|\"hard-kill\"_ -\n    A way to stop a process (using `x` key or when quitting mprocs).\n- **hide_keymap_window**: _bool_ - Hide the pane at the bottom of the screen\n  showing key bindings.\n- **mouse_scroll_speed**: _integer_ - Number of lines to scrollper one mouse\n  scroll.\n- **proc_list_width**: _integer_ - Process list window width.\n- **keymap_procs**: _object_ - Key bindings for process list. See\n  [Keymap](#keymap).\n- **keymap_term**: _object_ - Key bindings for terminal window. See\n  [Keymap](#keymap).\n- **keymap_copy**: _object_ - Key bindings for copy mode. See\n  [Keymap](#keymap).\n\n#### Keymap\n\nDefault key bindings can be overridden in config using _keymap_procs_,\n_keymap_term_, or _keymap_copy_ fields. Available commands are documented in\nthe [Remote control](#remote-control) section.\n\nThere are three keymap levels:\n\n- Default keymaps\n- `~/.config/mprocs/mprocs.yaml`\n- `./mprocs.yaml` (can be overridden by the _-c/--config_ cli arg)\n\nLower levers override bindings from previous levels. Key bindings from previous\nlevels can be cleared by specifying `reset: true` field at the same level as\nkeys.\n\n```yaml\nkeymap_procs: # keymap when process list is focused\n  <C-q>: { c: toggle-focus }\n  <C-a>: null # unbind key\nkeymap_term: # keymap when terminal is focused\n  reset: true\n  <C-q>: { c: toggle-focus }\n  <C-j>:\n    c: batch\n    cmds:\n      - { c: focus-procs }\n      - { c: next-proc }\n```\n\n#### `$select` operator\n\nYou can define different values depending on the current operating system. Any\nvalue in config can be wrapped with a _$select_ operator. To provide different\nvalues based on current OS define an object with:\n\n- First field `$select: os`\n- Fields defining values for different OSes: `macos: value`. Possible\n  values are listed here:\n  https://doc.rust-lang.org/std/env/consts/constant.OS.html.\n- Field `$else: default value` will be matched if no value was defined for\n  current OS. If current OS is not matched and field `$else` is missing, then\n  mprocs will fail to load config.\n\nExample `mprocs.yaml`:\n\n```yaml\nprocs:\n  my processs:\n    shell:\n      $select: os\n      windows: \"echo %TEXT%\"\n      $else: \"echo $TEXT\"\n    env:\n      TEXT:\n        $select: os\n        windows: Windows\n        linux: Linux\n        macos: Macos\n        freebsd: FreeBSD\n```\n\n#### Running scripts from package.json\n\nIf you run _mprocs_ with an `--npm` argument, it will load scripts from\n`package.json`. But the scripts are not run by default, and you can launch\ndesired scripts manually.\n\n```sh\n# Run mprocs with scripts from package.json\nmprocs --npm\n```\n\n### Default keymap\n\nProcess list focused:\n\n- `q` - Quit (soft kill processes and wait then to exit)\n- `Q` - Force quit (terminate processes)\n- `C-a` - Focus output pane\n- `x` - Soft kill selected process (send SIGTERM signal, hard kill on Windows)\n- `X` - Hard kill selected process (send SIGKILL)\n- `s` - Start selected process, if it is not running\n- `r` - Soft kill selected process and restart it when it stops\n- `R` - Hard kill selected process and restart it when it stops\n- `a` - Add new process\n- `d` - Remove selected process (process must be stopped first)\n- `e` - Rename selected process\n- `k` or `↑` - Select previous process\n- `j` or `↓` - Select next process\n- `M-1` - `M-8` - Select process 1-8\n- `C-d` or `page down` - Scroll output down\n- `C-u` or `page up` - Scroll output up\n- `C-e` - Scroll output down by 3 lines\n- `C-y` - Scroll output up by 3 lines\n- `z` - Zoom into terminal window\n- `v` - Enter copy mode\n\nProcess output focused:\n\n- `C-a` - Focus processes pane\n\nCopy mode:\n\n- `v` - Start selecting end point\n- `c` - Copy selected text\n- `Esc` - Leave copy mode\n- `C-a` - Focus processes pane\n- `C-d` or `page down` - Scroll output down\n- `C-u` or `page up` - Scroll output up\n- `C-e` - Scroll output down by 3 lines\n- `C-y` - Scroll output up by 3 lines\n- `h` or `↑` - Move cursor up\n- `l` or `→` - Move cursor right\n- `j` or `↓` - Move cursor down\n- `h` or `←` - Move cursor left\n\n### Remote control\n\nOptionally, _mprocs_ can listen on TCP port for remote commands.\nYou have to define remote control server address in `mprocs.yaml`\n(`server: 127.0.0.1:4050`) or via cli argument (`mprocs --server 127.0.0.1:4050`). To send a command to running _mprocs_ instance\nuse the **ctl** argument: `mprocs --ctl '{c: quit}'` or `mprocs --ctl '{c: send-key, key: <C-c>}'`.\n\nCommands are encoded as yaml. Available commands:\n\n- `{c: quit-or-ask}` - Stop processes and quit. If any processes are running,\n  show a confirmation dialog.\n- `{c: quit}` - Stop processes and quit. Does not show confirm dialog.\n- `{c: force-quit}`\n- `{c: toggle-focus}` - Toggle focus between process list and terminal.\n- `{c: focus-procs}` - Focus process list\n- `{c: focus-term}` - Focus process terminal window\n- `{c: zoom}` - Zoom into terminal window\n- `{c: next-proc}`\n- `{c: prev-proc}`\n- `{c: select-proc, index: <PROCESS INDEX>}` - Select process by index\n- `{c: start-proc}`\n- `{c: term-proc}`\n- `{c: kill-proc}`\n- `{c: restart-proc}`\n- `{c: force-restart-proc}`\n- `{c: show-add-proc}`\n- `{c: add-proc, cmd: \"<SHELL COMMAND>\"}`\n- `{c: show-remove-proc}`\n- `{c: remove-proc, id: \"<PROCESS ID>\"}`\n- `{c: show-rename-proc}`\n- `{c: rename-proc, name: \"<NEW_NAME>\"}` - Rename currently selected process\n- `{c: scroll-down}`\n- `{c: scroll-up}`\n- `{c: scroll-down-lines, n: <COUNT>}`\n- `{c: scroll-up-lines, n: <COUNT>}`\n- `{c: copy-mode-enter}` - Enter copy mode\n- `{c: copy-mode-leave}` - Leave copy mode\n- `{c: copy-mode-move, dir: <DIRECTION> }` - Move starting or ending position\n  of the selection. Available directions: `up/right/down/left`.\n- `{c: copy-mode-end}` - Start selecting end point of the selection.\n- `{c: copy-mode-copy}` - Copy selected text to the clipboard and leave copy\n  mode.\n- `{c: send-key, key: \"<KEY>\"}` - Send key to current process. Key examples:\n  `<C-a>`, `<Enter>`\n- `{c: batch, cmds: [{c: focus-procs}, …]}` - Send multiple commands\n\n## FAQ\n\n### mprocs vs tmux/screen\n\n_mprocs_ is meant to make it easier to run specific commands that you end up\nrunning repeatedly, such as compilers and test runners. This is in contrast\nwith _tmux_, which is usually used to run much more long-lived processes -\nusually a shell - in each window/pane. Another difference is that _tmux_ runs a\nserver and a client, which allows the client to detach and reattach later,\nkeeping the processes running. _mprocs_ is meant more for finite lifetime\nprocesses that you keep re-running, but when _mprocs_ ends, so do the processes\nit is running within its windows.\n\n### Copying doesn't work in tmux\n\nTmux doesn't have escape sequences for copying enabled by default. To enable it\nadd the following to `~/.tmux.conf`:\n\n```\nset -g set-clipboard on\n```"
}
