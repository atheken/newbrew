{
  "name": "cheat",
  "full_name": "cheat",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Create and view interactive cheat sheets for *nix commands",
  "license": "MIT",
  "homepage": "https://github.com/cheat/cheat",
  "versions": {
    "stable": "4.4.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/cheat/cheat/archive/refs/tags/4.4.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "8694d75896dcb1dfb91ed95ec37f7fe409ad2bde76e66f80b20be24ee92ae3ec"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cheat/blobs/sha256:c725e96c8dd02d2525aff37625c0b787768bcab5ffe9e05c002e143a7d0d9646",
          "sha256": "c725e96c8dd02d2525aff37625c0b787768bcab5ffe9e05c002e143a7d0d9646"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cheat/blobs/sha256:a7d95be6359e9b73ae4d1ee5c86b1dc87b05af881b77162761e300016b6303e5",
          "sha256": "a7d95be6359e9b73ae4d1ee5c86b1dc87b05af881b77162761e300016b6303e5"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cheat/blobs/sha256:9bf0464892442dcdf7830c4267e306f4022fc058c201a677f564b006d77555ef",
          "sha256": "9bf0464892442dcdf7830c4267e306f4022fc058c201a677f564b006d77555ef"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cheat/blobs/sha256:e21f97c913467e985671ec962c1c9e289c50756dd30979200beef199d9e5c14d",
          "sha256": "e21f97c913467e985671ec962c1c9e289c50756dd30979200beef199d9e5c14d"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cheat/blobs/sha256:43de4fe510193020cf309c6025ac272a1481f28d5a466b311eba7c4d65402682",
          "sha256": "43de4fe510193020cf309c6025ac272a1481f28d5a466b311eba7c4d65402682"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cheat/blobs/sha256:b7bf297d1e132c1a0a33523455c6519d5ed2b003b391526fef7698179a7ef674",
          "sha256": "b7bf297d1e132c1a0a33523455c6519d5ed2b003b391526fef7698179a7ef674"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cheat/blobs/sha256:5b4d72129ec6e3e688f767458e4d3b01fb5a0189bb72f1655a13b669d11c2fc6",
          "sha256": "5b4d72129ec6e3e688f767458e4d3b01fb5a0189bb72f1655a13b669d11c2fc6"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cheat/blobs/sha256:646d9ab56e05a3e005e0ec99ba51255c1535527746c47980206550a5c3f17aa0",
          "sha256": "646d9ab56e05a3e005e0ec99ba51255c1535527746c47980206550a5c3f17aa0"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [
    "bash-snippets"
  ],
  "conflicts_with_reasons": [
    "both install a `cheat` executable"
  ],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/cheat.rb",
  "ruby_source_checksum": {
    "sha256": "a7aa79f8446daf89c69d2b8de1521aa4cab4b4a14f7cfea1771544e8b009d91c"
  },
  "date_added": "2014-06-05T16:19:41+01:00",
  "readme": "![Workflow status](https://github.com/cheat/cheat/actions/workflows/build.yml/badge.svg)\n\n\ncheat\n=====\n\n`cheat` allows you to create and view interactive cheatsheets on the\ncommand-line. It was designed to help remind \\*nix system administrators of\noptions for commands that they use frequently, but not frequently enough to\nremember.\n\n![The obligatory xkcd](http://imgs.xkcd.com/comics/tar.png 'The obligatory xkcd')\n\nUse `cheat` with [cheatsheets][].\n\n\nExample\n-------\nThe next time you're forced to disarm a nuclear weapon without consulting\nGoogle, you may run:\n\n```sh\ncheat tar\n```\n\nYou will be presented with a cheatsheet resembling the following:\n\n```sh\n# To extract an uncompressed archive:\ntar -xvf '/path/to/foo.tar'\n\n# To extract a .gz archive:\ntar -xzvf '/path/to/foo.tgz'\n\n# To create a .gz archive:\ntar -czvf '/path/to/foo.tgz' '/path/to/foo/'\n\n# To extract a .bz2 archive:\ntar -xjvf '/path/to/foo.tgz'\n\n# To create a .bz2 archive:\ntar -cjvf '/path/to/foo.tgz' '/path/to/foo/'\n```\n\nUsage\n-----\nTo view a cheatsheet:\n\n```sh\ncheat tar      # a \"top-level\" cheatsheet\ncheat foo/bar  # a \"nested\" cheatsheet\n```\n\nTo edit a cheatsheet:\n\n```sh\ncheat -e tar     # opens the \"tar\" cheatsheet for editing, or creates it if it does not exist\ncheat -e foo/bar # nested cheatsheets are accessed like this\n```\n\nTo view the configured cheatpaths:\n\n```sh\ncheat -d\n```\n\nTo list all available cheatsheets:\n\n```sh\ncheat -l\n```\n\nTo list all cheatsheets that are tagged with \"networking\":\n\n```sh\ncheat -l -t networking\n```\n\nTo list all cheatsheets on the \"personal\" path:\n\n```sh\ncheat -l -p personal\n```\n\nTo search for the phrase \"ssh\" among cheatsheets:\n\n```sh\ncheat -s ssh\n```\n\nTo search (by regex) for cheatsheets that contain an IP address:\n\n```sh\ncheat -r -s '(?:[0-9]{1,3}\\.){3}[0-9]{1,3}'\n```\n\nFlags may be combined in intuitive ways. Example: to search sheets on the\n\"personal\" cheatpath that are tagged with \"networking\" and match a regex:\n\n```sh\ncheat -p personal -t networking --regex -s '(?:[0-9]{1,3}\\.){3}[0-9]{1,3}'\n```\n\n\n\nInstalling\n----------\nFor installation and configuration instructions, see [INSTALLING.md][].\n\nCheatsheets\n-----------\nCheatsheets are plain-text files with no file extension, and are named\naccording to the command used to view them:\n\n```sh\ncheat tar     # file is named \"tar\"\ncheat foo/bar # file is named \"bar\", in a \"foo\" subdirectory\n```\n\nCheatsheet text may optionally be preceeded by a YAML frontmatter header that\nassigns tags and specifies syntax:\n\n```\n---\nsyntax: javascript\ntags: [ array, map ]\n---\n// To map over an array:\nconst squares = [1, 2, 3, 4].map(x => x * x);\n```\n\nThe `cheat` executable includes no cheatsheets, but [community-sourced\ncheatsheets are available][cheatsheets]. You will be asked if you would like to\ninstall the community-sourced cheatsheets the first time you run `cheat`.\n\nCheatpaths\n----------\nCheatsheets are stored on \"cheatpaths\", which are directories that contain\ncheatsheets. Cheatpaths are specified in the `conf.yml` file.\n\nIt can be useful to configure `cheat` against multiple cheatpaths. A common\npattern is to store cheatsheets from multiple repositories on individual\ncheatpaths:\n\n```yaml\n# conf.yml:\n# ...\ncheatpaths:\n  - name: community                   # a name for the cheatpath\n    path: ~/documents/cheat/community # the path's location on the filesystem\n    tags: [ community ]               # these tags will be applied to all sheets on the path\n    readonly: true                    # if true, `cheat` will not create new cheatsheets here\n\n  - name: personal\n    path: ~/documents/cheat/personal  # this is a separate directory and repository than above\n    tags: [ personal ]\n    readonly: false                   # new sheets may be written here\n# ...\n```\n\nThe `readonly` option instructs `cheat` not to edit (or create) any cheatsheets\non the path. This is useful to prevent merge-conflicts from arising on upstream\ncheatsheet repositories.\n\nIf a user attempts to edit a cheatsheet on a read-only cheatpath, `cheat` will\ntransparently copy that sheet to a writeable directory before opening it for\nediting.\n\n### Directory-scoped Cheatpaths ###\nAt times, it can be useful to closely associate cheatsheets with a directory on\nyour filesystem. `cheat` facilitates this by searching for a `.cheat` folder in\nthe current working directory. If found, the `.cheat` directory will\n(temporarily) be added to the cheatpaths.\n\nAutocompletion\n--------------\nShell autocompletion is currently available for `bash`, `fish`, and `zsh`. Copy\nthe relevant [completion script][completions] into the appropriate directory on\nyour filesystem to enable autocompletion. (This directory will vary depending\non operating system and shell specifics.)\n\nAdditionally, `cheat` supports enhanced autocompletion via integration with\n[fzf][]. To enable `fzf` integration:\n\n1. Ensure that `fzf` is available on your `$PATH`\n2. Set an envvar: `export CHEAT_USE_FZF=true`\n\n[INSTALLING.md]: INSTALLING.md\n[Releases]:      https://github.com/cheat/cheat/releases\n[cheatsheets]:   https://github.com/cheat/cheatsheets\n[completions]:   https://github.com/cheat/cheat/tree/master/scripts\n[fzf]:           https://github.com/junegunn/fzf\n[go]:            https://golang.org"
}
