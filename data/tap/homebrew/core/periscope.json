{
  "name": "periscope",
  "full_name": "periscope",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Organize and de-duplicate your files without losing data",
  "license": "GPL-3.0-only",
  "homepage": "https://github.com/anishathalye/periscope",
  "versions": {
    "stable": "0.3.5",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/anishathalye/periscope.git",
      "tag": "v0.3.5",
      "revision": "b4eb74e389a3bb4eb6a4225e9bccd8744203b895",
      "checksum": null
    },
    "head": {
      "url": "https://github.com/anishathalye/periscope.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/periscope/blobs/sha256:1814d4eb64988e0cc57a7766b0696c55ded99437a3558d60764f2c85b5e1cc53",
          "sha256": "1814d4eb64988e0cc57a7766b0696c55ded99437a3558d60764f2c85b5e1cc53"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/periscope/blobs/sha256:4e2100139c6388a7954e002f8c40415b01bf5538e266ce057d2635771a2e85f5",
          "sha256": "4e2100139c6388a7954e002f8c40415b01bf5538e266ce057d2635771a2e85f5"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/periscope/blobs/sha256:50a953e087342698678e7d6f91f1b0efff98ccb25dde5896f210f073def24e41",
          "sha256": "50a953e087342698678e7d6f91f1b0efff98ccb25dde5896f210f073def24e41"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/periscope/blobs/sha256:e71b0d0433581720f9578bd744886f365683a40eda9315e01a5ceb925cc75d02",
          "sha256": "e71b0d0433581720f9578bd744886f365683a40eda9315e01a5ceb925cc75d02"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/periscope/blobs/sha256:3e2b016f5a54f9a6706ecce39590612016763ca8a28cb362736b943b4d18d7f4",
          "sha256": "3e2b016f5a54f9a6706ecce39590612016763ca8a28cb362736b943b4d18d7f4"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/periscope/blobs/sha256:52c225ce532478e5e002ac925312006dc0d6a29ca96ce04a1953df796728ad31",
          "sha256": "52c225ce532478e5e002ac925312006dc0d6a29ca96ce04a1953df796728ad31"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/periscope/blobs/sha256:99f72d97940f3463403ab50742b48f2a7c325a761cbb278c500c9fe77c07991e",
          "sha256": "99f72d97940f3463403ab50742b48f2a7c325a761cbb278c500c9fe77c07991e"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/periscope.rb",
  "ruby_source_checksum": {
    "sha256": "2afaa29464ce54f5f35a5dbc52ec3fbcf220adb7cdf9e81c34057c8b4c166f35"
  },
  "date_added": "2020-08-31T18:31:08+00:00",
  "readme": "# Periscope [![Build Status](https://github.com/anishathalye/periscope/workflows/CI/badge.svg)](https://github.com/anishathalye/periscope/actions?query=workflow%3ACI)\n<!--\nOther useful stuff:\n\nhttps://goreportcard.com/report/github.com/anishathalye/periscope\n-->\n\nPeriscope gives you \"duplicate vision\" to help you organize and de-duplicate your files without losing data.\n\n<p align=\"center\">\n<img src=\"https://raw.githubusercontent.com/anishathalye/assets/master/periscope/demo.gif\" width=\"636\" alt=\"Periscope demo\">\n</p>\n\nPeriscope (`psc`) works differently from most other duplicate file finders. It\nis designed to be used _interactively_: Periscope will help you explore the\nfilesystem, understand which files are duplicated, determine where duplicate\ncopies live, and safely delete duplicates without losing data.\n\nFollowing a `psc scan`, Periscope lets you navigate and explore your filesystem\nwith the workflow you're already used to &mdash; using your shell and commands\nlike `cd`, `ls`, `tree`, and so on &mdash; while providing additional\n_duplicate-aware commands_ that mirror core filesystem utilities. For example,\n`psc ls` gives a directory listing that highlights duplicates, and `psc rm`\ndeletes files only if a duplicate exists elsewhere. This makes it easy to\nunderstand how data is organized (and duplicated), reorganize files, and delete\nduplicates without worrying about accidentally losing data.\n\n<p align=\"center\">\n<a href=\"#workflow\">Workflow</a> &middot; <a href=\"#commands\">Commands</a> &middot; <a href=\"#installation\">Installation</a> &middot; <a href=\"#contributing\">Contributing</a>\n</p>\n\n## Workflow\n\n**Find duplicates**\n\nStart with `psc scan` to scan folders for duplicates. Once you run this, you\nshouldn't need to run it again while looking at and deleting duplicates, unless\nyou move files around. If you delete files manually (rather than with `psc rm`),\nyou can make Periscope detect deletions with `psc refresh`, which runs much\nfaster than a full scan. `psc scan` is incremental, so if you want to scan a new\ndirectory or re-analyze one that was already scanned, you can always run the\ncommand again.\n\n**Understand duplicates**\n\nYou can get a high-level understanding of how many duplicates you have and\nwhere they are located:\n\n- `psc summary` gives statistics on duplicate files\n- `psc report` shows a full list of duplicates, sorted by file size\n\nAfter identifying areas to explore with `psc report`, you can navigate to those\ndirectories in your shell with `cd`, and then you can use Periscope commands to\nunderstand duplicates:\n\n- `psc ls` gives a duplicate-aware directory listing (optionally recursively,\n  with the `-R` flag)\n- `psc info` shows information on a specific file (and its duplicates)\n\n**Delete duplicates**\n\nYou can use the `psc rm` command to delete duplicates. You can think of it like\na safe version of `rm`: it will not let you delete files unless there are\nduplicate copies elsewhere. A `psc rm -r` will recursively delete duplicates\nbut not unique files. A `psc rm --contained <path>` will delete duplicates only\nif a copy is contained in the given folder.\n\n**Remove duplicate database**\n\nWhen you're done with a Periscope session, you can delete the duplicate\ndatabase with `psc finish`.\n\n## Commands\n\nRun `psc help` to see the full list of commands and `psc help [command]` to see\nhelp on a specific command.\n\n**`psc scan` scans for duplicates**\n\nScans paths for duplicates and populates the database with information about\nduplicates. Scans the current directory if given no argument. Scanning is\nincremental; if you want to start from scratch, run `psc finish` first.\n\n**`psc refresh` removes deleted files from the database**\n\nRemoves deleted files from the duplicate database. `psc rm` does this\nautomatically, so this command only needs to be used if you use some other\nprogram (e.g. coreutils `rm`) and want to remove missing files from the\ndatabase. This command does not re-analyze files, so if you've made substantial\nchanges to the filesystem, like moving files around or adding new files, it's\nbest to do a `psc scan` of the relevant directories.\n\n**`psc finish` deletes the duplicate database**\n\nDeletes the duplicate database. Once you're done using Periscope, it's good to\nuse this command to delete the duplicate database, so it doesn't waste space on\ndisk.\n\n**`psc summary` reports statistics**\n\nPrints statistics about the duplicate database, such as number of duplicate\nfiles and the amount of space duplicates consume.\n\n**`psc report` reports scan results**\n\nLists all duplicates in the duplicate database, sorted by file size. Because\nthis list is usually large, it's helpful to pipe the output to a pager, e.g.\n`psc report | less`.\n\n**`psc export` exports scan results**\n\nExports information about duplicates in a machine-readable format (default\nJSON). **This is the only output from Periscope that other programs should\nconsume.** Future versions of Periscope may add to the information that's\nincluded in the dump, but the layout of existing data will not change.\n\n**`psc ls` lists a directory**\n\nLists files and folders in the given directory (or the current directory, if\nnone is given). This command shows the number of duplicates that each file has:\n1 means that there is a single duplicate elsewhere in the filesystem; if a file\nhas no duplicates, the number is omitted. Directories are tagged with a 'd',\nand special files are tagged with a character describing their type, e.g. 'p'\nfor named pipes. `-a` shows hidden files. `-d` lists only duplicates, while\n`-u` lists only unique files. `-v` lists all duplicates of every file, and `-r`\nshows the path to the duplicate as a relative path instead of an absolute path.\n`-R` lists files recursively; this flag combines well with the `-d` flag, to\nlist only duplicate files recursively contained in a given directory.\n\n**`psc tree` lists all duplicates in a given directory**\n\nLists all files recursively contained in the given directory (or the current\ndirectory, if none is given) that have a duplicate file elsewhere. This command\nhides hidden files and folders by default; the `-a` flag includes hidden files.\n\nThis command shows a \"flattened\" representation; in most cases, a `psc ls -Rd`\nis more useful.\n\n**`psc info` inspects a file**\n\nShows information about a single file's duplicates. Like with `psc ls`, the\n`-r` flag shows the path to the duplicate as a path relative to the given file.\n\n**`psc rm` deletes duplicates**\n\nDeletes duplicates but not unique files; no way of invoking this command will\ndelete unique files. This command makes use of the database, but it\ndouble-checks files and their copies before it deletes anything, so a stale\nduplicate database will not result in data loss. The `-n` flag will perform a\ndry run, listing files that would be deleted but not actually deleting\nanything. `-r` deletes duplicates recursively. The `--contained <path>`\nargument gives more fine-grained control over deletion: files are only deleted\nif they have a duplicate _in the given location_. This is useful, for example,\nfor deleting files from a \"to organize\" directory only if they are also\ncontained in the \"organized\" directory, as in the demo video above. By default,\n`psc rm` does not delete any files when it's given a set where there are no\nduplicates outside the set: for example, if files \"/a/x1\" and \"/a/x2\" are\nduplicates, recursively removing \"/a\" will leave both files untouched. Passing\nthe `--arbitrary` flag will result in such duplicates being handled by\narbitrarily choosing one file to save and deleting the rest.\n\n## Installation\n\n**Install with [Homebrew](https://brew.sh/) (on macOS):**\n\n```bash\nbrew install periscope\n```\n\n**Download a binary release:**\n[Periscope releases](https://github.com/anishathalye/periscope/releases).\n\nPeriscope has binary releases for macOS and Linux. It has not been tested on\nWindows.\n\n**Install from source with `go install`:**\n\n```bash\ngo install -v github.com/anishathalye/periscope/cmd/psc@latest\n```\n\nPeriscope depends on go-sqlite3, which uses cgo, so you need a C compiler\npresent in your path. You might also need to set `CGO_ENABLED=1` if you have it\ndisabled otherwise.\n\n<!--\n\nTesting releases:\n\n```\ndocker run -e --rm --privileged -v $PWD:/go/src/github.com/anishathalye/periscope -v /var/run/docker.sock:/var/run/docker.sock -w /go/src/github.com/anishathalye/periscope mailchain/goreleaser-xcgo --rm-dist --skip-publish\n```\n\nSupply `--snapshot` if version is not tagged\n\n-->\n\n## Contributing\n\nBug reports, feature requests, feedback on the tool or documentation, and pull\nrequests are all appreciated. If you are planning on making substantial changes\nthat you hope to have merged, it is highly recommended that you first open an\nissue to discuss your proposed change.\n\n## License\n\nCopyright (c) Anish Athalye (me@anishathalye.com). Released under GPLv3.\nSee [LICENSE.txt](LICENSE.txt) for details."
}
