{
  "name": "sourcekitten",
  "full_name": "sourcekitten",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Framework and command-line tool for interacting with SourceKit",
  "license": "MIT",
  "homepage": "https://github.com/jpsim/SourceKitten",
  "versions": {
    "stable": "0.34.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/jpsim/SourceKitten.git",
      "tag": "0.34.1",
      "revision": "b6dc09ee51dfb0c66e042d2328c017483a1a5d56",
      "checksum": null
    },
    "head": {
      "url": "https://github.com/jpsim/SourceKitten.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sourcekitten/blobs/sha256:bf824c9e874b8f19c74a0553ba0d7977cd151295f9920059a740768cb1b99913",
          "sha256": "bf824c9e874b8f19c74a0553ba0d7977cd151295f9920059a740768cb1b99913"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sourcekitten/blobs/sha256:2aba055153236af33d75a900140217f5bee6f939a291de46720ae73b5cc0583f",
          "sha256": "2aba055153236af33d75a900140217f5bee6f939a291de46720ae73b5cc0583f"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sourcekitten/blobs/sha256:64087bd481a91558143401b526a698b33594a8b831898d7f15b23c8d0d0fb50c",
          "sha256": "64087bd481a91558143401b526a698b33594a8b831898d7f15b23c8d0d0fb50c"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sourcekitten/blobs/sha256:760aeb628d7253077edca91193dc39cb18b54af8668ab520b28b0ee357ac2a01",
          "sha256": "760aeb628d7253077edca91193dc39cb18b54af8668ab520b28b0ee357ac2a01"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [
    {
      "name": "xcode",
      "cask": null,
      "download": null,
      "version": "14.0",
      "contexts": [
        "build"
      ],
      "specs": [
        "stable",
        "head"
      ]
    },
    {
      "name": "macos",
      "cask": null,
      "download": null,
      "version": null,
      "contexts": [],
      "specs": [
        "stable",
        "head"
      ]
    },
    {
      "name": "xcode",
      "cask": null,
      "download": null,
      "version": "6.0",
      "contexts": [],
      "specs": [
        "stable",
        "head"
      ]
    }
  ],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/sourcekitten.rb",
  "ruby_source_checksum": {
    "sha256": "8a10ed9d4f5901d3c9d19f48ad6f40609bbc04f6a6fca25cd4b5035c0b453089"
  },
  "date_added": "2015-01-19T18:29:29+01:00",
  "readme": "# SourceKitten\n\nAn adorable little framework and command line tool for interacting with [SourceKit][uncovering-sourcekit].\n\nSourceKitten links and communicates with `sourcekitd.framework` to parse the Swift AST, extract comment docs for Swift or Objective-C projects, get syntax data for a Swift file and lots more!\n\n![SwiftPM](https://github.com/jpsim/SourceKitten/workflows/SwiftPM/badge.svg)\n\n## Installation\n\nBuilding SourceKitten requires Xcode 13.3 or later or a Swift 5.6\ntoolchain or later with the Swift Package Manager.\n\nSourceKitten typically supports previous versions of SourceKit.\n\n### Homebrew\n\nRun `brew install sourcekitten`.\n\n### Swift Package Manager\n\nRun `swift build` in the root directory of this project.\n\n### Bazel\n\nAdd the following to your `WORKSPACE` file:\n\n```python\nSOURCEKITTEN_VERSION = \"SOME_VERSION\"\nSOURCEKITTEN_SHA = \"SOME_SHA\"\nhttp_archive(\n    name = \"com_github_jpsim_sourcekitten\",\n    url = \"https://github.com/jpsim/SourceKitten/archive/refs/tags/%s.tar.gz\" % (SOURCEKITTEN_VERSION),\n    sha256 = SOURCEKITTEN_SHA,\n    strip_prefix = \"SourceKitten-%s\" % SOURCEKITTEN_VERSION\n)\n```\n\nThen run: `bazel run @com_github_jpsim_sourcekitten//:sourcekitten -- -h`\n\n### Xcode (via Make)\n\nRun `make install` in the root directory of this project.\n\n### Package\n\nDownload and open SourceKitten.pkg from the [releases tab](https://github.com/jpsim/SourceKitten/releases).\n\n## Command Line Usage\n\nOnce SourceKitten is installed, you may use it from the command line.\n\n```\n$ sourcekitten help\nOVERVIEW: An adorable little command line tool for interacting with SourceKit\n\nUSAGE: sourcekitten <subcommand>\n\nOPTIONS:\n  --version               Show the version.\n  -h, --help              Show help information.\n\nSUBCOMMANDS:\n  complete                Generate code completion options\n  doc                     Print Swift or Objective-C docs as JSON\n  format                  Format Swift file\n  index                   Index Swift file and print as JSON\n  module-info             Obtain information about a Swift module and print as JSON\n  request                 Run a raw SourceKit request\n  structure               Print Swift structure information as JSON\n  syntax                  Print Swift syntax information as JSON\n  version                 Display the current version of SourceKitten\n\n  See 'sourcekitten help <subcommand>' for detailed help.\n```\n\n## How is SourceKit resolved?\n\nSourceKitten searches for SourceKit in the following order:\n\n* `$XCODE_DEFAULT_TOOLCHAIN_OVERRIDE`\n* `$TOOLCHAIN_DIR`\n* `xcrun -find swift`\n* `/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain`\n* `/Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain`\n* `~/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain`\n* `~/Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain`\n\nOn Linux, SourceKit is expected to be located in\n`/usr/lib/libsourcekitdInProc.so` or specified by the `LINUX_SOURCEKIT_LIB_PATH`\nenvironment variable.\n\n## Projects Built With SourceKitten\n\n* [SwiftLint](https://github.com/realm/SwiftLint):\n  A tool to enforce Swift style and conventions.\n* [Jazzy](https://github.com/realm/Jazzy):\n  Soulful docs for Swift & Objective-C.\n* [Sourcery](https://github.com/krzysztofzablocki/Sourcery):\n  Meta-programming for Swift, stop writing boilerplate code.\n* [SwiftyMocky](https://github.com/MakeAWishFoundation/SwiftyMocky):\n  Framework for mock generation.\n* [SourceKittenDaemon](https://github.com/terhechte/SourceKittenDaemon):\n  Swift Auto Completions for any Text Editor.\n* [SourceDocs](https://github.com/eneko/SourceDocs):\n  Command Line Tool that generates Markdown documentation from inline source\n  code comments.\n* [Cuckoo](https://github.com/Brightify/Cuckoo):\n  First boilerplate-free mocking framework for Swift.\n* [IBAnalyzer](https://github.com/fastred/IBAnalyzer): Find common xib and\n  storyboard-related problems without running your app or writing unit tests.\n* [Taylor](https://github.com/yopeso/Taylor): Measure Swift code metrics and\n  get reports in Xcode, Jenkins and other CI platforms.\n\n<details>\n  <summary>See More</summary>\n\n  * https://github.com/appsquickly/TyphoonSwift\n  * https://github.com/banjun/bansan\n  * https://github.com/Beaver/BeaverCodeGen\n  * https://github.com/Ben-G/Meet\n  * https://github.com/dfreemanRIIS/ETAMock\n  * https://github.com/dostu/SwiftMetric\n  * https://github.com/draven-archive/MetaKit\n  * https://github.com/geosor/SwiftVisualizer\n  * https://github.com/godfreynolan/AgileSwiftTst\n  * https://github.com/godfreynolan/CodeCraftsman\n  * https://github.com/ilyapuchka/dipgen\n  * https://github.com/ilyapuchka/SourceKittenEditorExtension\n  * https://github.com/interstateone/Unused\n  * https://github.com/ishkawa/DIKit\n  * https://github.com/IvanovGeorge/FBAuth\n  * https://github.com/jmpg93/NavigatorSwift\n  * https://github.com/jpmartha/Pancake\n  * https://github.com/jpweber/Kontext\n  * https://github.com/KenichiroSato/CatDogTube\n  * https://github.com/klundberg/grift\n  * https://github.com/kovtun1/DependenciesGraph\n  * https://github.com/lvsti/Bridgecraft\n  * https://github.com/maralla/completor-swift\n  * https://github.com/marcsnts/Shopify-Winter18-Technical\n  * https://github.com/momentumworks/Formula\n  * https://github.com/nevil/UNClassDiagram\n  * https://github.com/norio-nomura/LinuxSupportForXcode\n  * https://github.com/paulofaria/swift-package-crawler-data\n  * https://github.com/rajat-explorer/Github-Profiler\n  * https://github.com/rockbruno/swiftshield\n  * https://github.com/S2dentik/Enlight\n  * https://github.com/seanhenry/SwiftMockGeneratorForXcode\n  * https://github.com/sharplet/swiftags\n  * https://github.com/siejkowski/Croupier\n  * https://github.com/SwiftKit/CuckooGenerator\n  * https://github.com/SwiftKit/Torch\n  * https://github.com/SwiftTools/SwiftFelisCatus\n  * https://github.com/swizzlr/lux\n  * https://github.com/tid-kijyun/XcodeSourceEditorExtension-ProtocolImplementation\n  * https://github.com/tjarratt/fake4swift\n  * https://github.com/tkohout/Genie\n  * https://github.com/tomquist/MagicMirror\n  * https://github.com/TurfDb/TurfGen\n  * https://github.com/vadimue/AwesomeWeather\n  * https://github.com/yonaskolb/Beak\n  * https://github.com/zenzz/vs-swifter-server\n  * https://github.com/zenzz/zxxswifter-server\n  * https://github.com/scribd/Weaver\n  * https://github.com/Nonchalant/FactoryProvider\n</details>\n\n## Complete\n\nRunning `sourcekitten complete --file file.swift --offset 123` or\n`sourcekitten complete --text \"0.\" --offset 2` will print out code completion\noptions for the offset in the file/text provided:\n\n```json\n[{\n  \"descriptionKey\" : \"advancedBy(n: Distance)\",\n  \"associatedUSRs\" : \"s:FSi10advancedByFSiFSiSi s:FPSs21RandomAccessIndexType10advancedByuRq_S__Fq_Fqq_Ss16ForwardIndexType8Distanceq_ s:FPSs16ForwardIndexType10advancedByuRq_S__Fq_Fqq_S_8Distanceq_ s:FPSs10Strideable10advancedByuRq_S__Fq_Fqq_S_6Strideq_ s:FPSs11_Strideable10advancedByuRq_S__Fq_Fqq_S_6Strideq_\",\n  \"kind\" : \"source.lang.swift.decl.function.method.instance\",\n  \"sourcetext\" : \"advancedBy(<#T##n: Distance##Distance#>)\",\n  \"context\" : \"source.codecompletion.context.thisclass\",\n  \"typeName\" : \"Int\",\n  \"moduleName\" : \"Swift\",\n  \"name\" : \"advancedBy(n: Distance)\"\n},\n{\n  \"descriptionKey\" : \"advancedBy(n: Self.Distance, limit: Self)\",\n  \"associatedUSRs\" : \"s:FeRq_Ss21RandomAccessIndexType_SsS_10advancedByuRq_S__Fq_FTqq_Ss16ForwardIndexType8Distance5limitq__q_\",\n  \"kind\" : \"source.lang.swift.decl.function.method.instance\",\n  \"sourcetext\" : \"advancedBy(<#T##n: Self.Distance##Self.Distance#>, limit: <#T##Self#>)\",\n  \"context\" : \"source.codecompletion.context.superclass\",\n  \"typeName\" : \"Self\",\n  \"moduleName\" : \"Swift\",\n  \"name\" : \"advancedBy(n: Self.Distance, limit: Self)\"\n},\n...\n]\n```\n\nTo use the iOS SDK, pass `-sdk` and `-target` arguments preceded by `--`:\n```\nsourcekitten complete --text \"import UIKit ; UIColor.\" --offset 22 -- -target arm64-apple-ios9.0 -sdk /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS9.0.sdk\n```\n\n## Doc\n\nRunning `sourcekitten doc` will pass all arguments after what is parsed to\n`xcodebuild` (or directly to the compiler, SourceKit/clang, in the\n`--single-file` mode).\n\n### Example usage\n\n1. `sourcekitten doc -- -workspace SourceKitten.xcworkspace -scheme SourceKittenFramework`\n2. `sourcekitten doc --single-file file.swift -- -j4 file.swift`\n3. `sourcekitten doc --module-name Alamofire -- -project Alamofire.xcodeproj`\n4. `sourcekitten doc -- -workspace Haneke.xcworkspace -scheme Haneke`\n5. `sourcekitten doc --objc Realm/Realm.h -- -x objective-c -isysroot $(xcrun --show-sdk-path) -I $(pwd)`\n\n## Structure\n\nRunning `sourcekitten structure --file file.swift` or `sourcekitten structure --text \"struct A { func b() {} }\"` will return a JSON array of structure information:\n\n```json\n{\n  \"key.substructure\" : [\n    {\n      \"key.kind\" : \"source.lang.swift.decl.struct\",\n      \"key.offset\" : 0,\n      \"key.nameoffset\" : 7,\n      \"key.namelength\" : 1,\n      \"key.bodyoffset\" : 10,\n      \"key.bodylength\" : 13,\n      \"key.length\" : 24,\n      \"key.substructure\" : [\n        {\n          \"key.kind\" : \"source.lang.swift.decl.function.method.instance\",\n          \"key.offset\" : 11,\n          \"key.nameoffset\" : 16,\n          \"key.namelength\" : 3,\n          \"key.bodyoffset\" : 21,\n          \"key.bodylength\" : 0,\n          \"key.length\" : 11,\n          \"key.substructure\" : [\n\n          ],\n          \"key.name\" : \"b()\"\n        }\n      ],\n      \"key.name\" : \"A\"\n    }\n  ],\n  \"key.offset\" : 0,\n  \"key.diagnostic_stage\" : \"source.diagnostic.stage.swift.parse\",\n  \"key.length\" : 24\n}\n```\n\n## Syntax\n\nRunning `sourcekitten syntax --file file.swift` or `sourcekitten syntax --text \"import Foundation // Hello World\"` will return a JSON array of syntax highlighting information:\n\n```json\n[\n  {\n    \"offset\" : 0,\n    \"length\" : 6,\n    \"type\" : \"source.lang.swift.syntaxtype.keyword\"\n  },\n  {\n    \"offset\" : 7,\n    \"length\" : 10,\n    \"type\" : \"source.lang.swift.syntaxtype.identifier\"\n  },\n  {\n    \"offset\" : 18,\n    \"length\" : 14,\n    \"type\" : \"source.lang.swift.syntaxtype.comment\"\n  }\n]\n```\n\n## Request\n\nRunning `sourcekitten request --yaml [FILE|TEXT]` will execute a sourcekit request with the given yaml. For example:\n\n```yaml\nkey.request: source.request.cursorinfo\nkey.sourcefile: \"/tmp/foo.swift\"\nkey.offset: 8\nkey.compilerargs:\n  - \"/tmp/foo.swift\"\n```\n\n## SourceKittenFramework\n\nMost of the functionality of the `sourcekitten` command line tool is actually encapsulated in a framework named SourceKittenFramework.\n\nIf you’re interested in using SourceKitten as part of another tool, or perhaps extending its functionality, take a look at the SourceKittenFramework source code to see if the API fits your needs.\n\n*Note: SourceKitten is written entirely in Swift, and the SourceKittenFramework API is not designed to interface with Objective-C.*\n\n## License\n\nMIT licensed.\n\n[uncovering-sourcekit]: http://jpsim.com/uncovering-sourcekit"
}
