{
  "name": "dwarf",
  "full_name": "dwarf",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Object file manipulation tool",
  "license": "GPL-2.0",
  "homepage": "https://github.com/elboza/dwarf-ng/",
  "versions": {
    "stable": "0.4.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/elboza/dwarf-ng/archive/dwarf-0.4.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "a64656f53ded5166041ae25cc4b1ad9ab5046a5c4d4c05b727447e73c0d83da0"
    }
  },
  "revision": 1,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/dwarf/blobs/sha256:d0244af1e2cc656fa2c4d040caef6910ffdc6a8cff2480d315db3bc9fbe0a9e3",
          "sha256": "d0244af1e2cc656fa2c4d040caef6910ffdc6a8cff2480d315db3bc9fbe0a9e3"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/dwarf/blobs/sha256:0bd56303a2a78e899a035597b779d5a3701f911ebfdf586d4a41d660f13253fe",
          "sha256": "0bd56303a2a78e899a035597b779d5a3701f911ebfdf586d4a41d660f13253fe"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/dwarf/blobs/sha256:30b7f9852b68c70d6e8e07c0de3e9075a4e0edd0facc219970de6535e5931b4d",
          "sha256": "30b7f9852b68c70d6e8e07c0de3e9075a4e0edd0facc219970de6535e5931b4d"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/dwarf/blobs/sha256:bce795ff823288cbfe918b0b3f8ed08f9cd7aab506e25fe104ff15d9174c2079",
          "sha256": "bce795ff823288cbfe918b0b3f8ed08f9cd7aab506e25fe104ff15d9174c2079"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/dwarf/blobs/sha256:cf1b9df9782554d32d6827b89b29195ed7f391a37cd0b9cbab9a63e0ceacec20",
          "sha256": "cf1b9df9782554d32d6827b89b29195ed7f391a37cd0b9cbab9a63e0ceacec20"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/dwarf/blobs/sha256:b0bec07c54898e3506e249b3c18fde361772367f1e2d8cc2ee6726a678aea7cd",
          "sha256": "b0bec07c54898e3506e249b3c18fde361772367f1e2d8cc2ee6726a678aea7cd"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/dwarf/blobs/sha256:1d0e1d803ab771d58a56cd52939d01b7c9e1a8474cb80c21b2251320340e5dc2",
          "sha256": "1d0e1d803ab771d58a56cd52939d01b7c9e1a8474cb80c21b2251320340e5dc2"
        },
        "mojave": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/dwarf/blobs/sha256:c10f3ccbb2dc59b7c76c9dd46a71f1e41d7c7faa8fab5f4326599b3a5467c770",
          "sha256": "c10f3ccbb2dc59b7c76c9dd46a71f1e41d7c7faa8fab5f4326599b3a5467c770"
        },
        "high_sierra": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/dwarf/blobs/sha256:92db022169f222a0ce002e6c20e6256cc5636f61c1e6fa1c44b56481c5a2422d",
          "sha256": "92db022169f222a0ce002e6c20e6256cc5636f61c1e6fa1c44b56481c5a2422d"
        },
        "sierra": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/dwarf/blobs/sha256:dbc5a7043b5888284ddab1d97b57406fc6c24d71c205a54482e3ef0e442e20fd",
          "sha256": "dbc5a7043b5888284ddab1d97b57406fc6c24d71c205a54482e3ef0e442e20fd"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dwarf/blobs/sha256:15de6388ac637850379a4b2cf37e2089b97b96cf0df0ed536f3c7b7b19a9c641",
          "sha256": "15de6388ac637850379a4b2cf37e2089b97b96cf0df0ed536f3c7b7b19a9c641"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "flex",
    "readline"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    {
      "bison": "build"
    }
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/dwarf.rb",
  "ruby_source_checksum": {
    "sha256": "feb68fb376ebf441db315e2358268f6c72e88d50f61739c3e015d80a0655519e"
  },
  "date_added": "2010-09-04T11:24:12+02:00",
  "readme": "dwarf-ng\n========\n\n### -- a little and powerful object file manipulation tool and hex editor.\n\n\n**dwarf-ng** is a powerful object file manipulation tool and hex editor in the spirit of _gdb_. with dwarf-ng you can read and edit all the file's section headers as well as the raw data. With dwarf-ng you can create and customize new file's header and it can be used as a compiler back-end to create executables/object files. dwarf-ng also permits to inject easily new headers and pieces of code/data into the file. dwarf-ng currently handles\n\n* Raw\n* ELF (Elf32, Elf64),\n* PE (Portable executables PE32, PE+) and\n* Mach-O (os x executables 32&64bit)\n\nfiles format. In the future new files type will be added.\n\n\n## HOWTO INSTALL\n\n```\n$ make help             #(show make options)\n$ make                  #(make FLEX=osx #to build in macosx)\n$ sudo make install\n```\n\n## Dependencies\n\n* flex\n* bison\n* readline (libreadline libreadline-dev)\n* gcc\n\n### documentation\n\nread the [dwarf man page](doc/xdwarf.man.html)\n\n### dwarfrc\n\ndwarf look for config files in sequence: `/etc/dwarfrc` and `~/.dwarfrc` .\nhere is an example of a config file:\n\n```\n#dwarf config file.\n\n\twork_on_tmpcopy=yes #(yes|no)\n\tverbose=0 #this is a comment\n\ttmpdir=\"/tmp\"\n\ttmpname=\"dw_temp_filex\"\n\tcolors=yes #(yes|no) yes=normalcolor\n\t#theme=2  #(0=nocolor, 1=normalcolor, 2=boldcolor)\n\n```\n### usage\n```\n$ ./dwarf -h\ndwarf-ng-0.4.0 (c) Fernando Iazeolla 2007-2013-2017.\n\nUSAGE: dwarf [options] [file]\nvalid options:\n-s              --stdin                 file from stdin\n-i              --shell --interactive   interactive (shell mode)\n-h              --help                  show this help\n-c '<commands>' --command '<commands>'  command  mode (execute commands)\n-e '<commands>' --command '<commands>'  command  mode alias (execute commands)\n-x <file>       --execute <file>        execute file script\n-v              --version               show dwarf-ng's version number\n-f <file>       --file <file>           open file\n-p              --probe                 probe file and print file type and info\n-C [n]          --colors [n]            colored output (n=theme num)\n-B              --nocolors              nocolored output\n-T [n]          --theme [n]             theme 2 colored output (n=theme num)\n-W              --work-on-copy          work on copy file\n-P              --no-work-on-copy       no work on copy file\n-D <name>       --tmpdir <name>         set tmp dir path\n-N <name>       --tmpname <name>        set tmp filename\n-s <offs>       --seek <offs>           set seek offset\n-b <size>       --block <size>          set block size\n```\n### demo\n\n![Demo1](media/demo1.gif)\n\n![Demo2](media/demo2.gif)\n\n### dwarf-ng general commands\n\ndwarf-ng is a powerful command line hex editor in the spirit of gdb.\n\n##### main help\n\n```\ndwarf> ?\nAppend '?' to any char command to get detailed help.\ngeneral command syntax:\ncommand[?][+] [%nx] [data] [offset]    n=times,x=format\n| ?                this help\n| q                exit dwarf-ng interpreter\n| i                show file info and headers info.\n| o[?]             open/opened file commands.\n| b[?]             See / change block size.\n| s[?] [addr]      seek to address.\n| e[?]             show config vars.\n| M[?]             move block of file around.\n| p[?]             print commands.\n| x[?]             just an alias for px (print hex).\n| w[?]             write operations.\n| S[?]             section headers operations.\n| !'commands'      execute commands into shell (bash).\n```\n\n##### open/opened file help\n```\nopen/opened files commands:\n| o [%x] file               open file (o foo) (o %%w foo)(x=w write-on-copy, x=f no write-on-copy).\n| oc                        close opened file.\n| ol                        show opened files list.\n| os                        show opened file size.\n| ou  n                     switch to opened file number n\n| oR  [+ -]n                resize opened file of [+ -]n bytes.\n| oR+ n                     increaes size of opened file of n bytes.\n| oR- n                     decreasesize of opened file of n bytes.\n| oS [filename]             save file (to filename).\n| oT type                   change file type to 'type' (oT elf).\n| oN [%x] [filename] [!type] open new empty file [named filename] x=w (work-on-copy) x=f (no-work-on-copy).\n| oP                        probe opened file type and load data struct.\n| oL                        probe opened file type and load data struct.(probe (oP) alias).\n| oO  [%x] filename         open filename without probing filetype and without loading data structures (x=w write-on-copy, x=f no-write-on-copy).\n```\n\n##### block size help\n\n```\nGet/Set block size\n| b             display current block size\n| b  33         set block size to 33\n| b+ 3          increase blocksize by 3\n| b- 16         decrease blocksize by 16\n| b  0xfa+4     numeric argument can be an expression\n```\n##### seek help\n```\nUsage: s   #Seek commands\n| s             Print current address\n| s  addr       Seek to address\n| s-            Undo seek\n| s+            Redo seek\n| s- n          Seek n bytes backward\n| s+ n          Seek n bytes forward\n| s--           Seek blocksize bytes backward\n| s++           Seek blocksize bytes forward\n| s*            List undo seek history\n| s/ DATA       Search for next occurrence of 'DATA'\n| s/x 9091      Search for next occurrence of \\x90\\x91\n| ss            Seek silently (without adding an entry to the seek history)\n| s             Print current address\n```\n##### print commands\n\n```\ndwarf> p?\nprint commands\n| pp[?] [%nx] [@]expr     generic print function.\n| px [%n][x]              hex print of n bytes from offset x.\n| pxl n                   hex print n lines.\n| pxx [%n][x]             hex pretty print of n bytes from offset x.\n| ps [%n][x]              print a string at offset x of n len.\n| pn [%x] [offs] [!%z]    print number (cC=char, sS=short(little, big endian), wW=word(little,big endian), qQ=quad) from offset in z format (d=decimal,x=hex) .\n| x  [%n][x]              same as px.\n| xl  n                   same as pxl.\n| xx [%n][x]              same as pxx.\n```\n##### write commands\n```\ndwarf> w?\nwrite operations commands.\nappend '+' to the commands to perform the operation increasing the file size (not overwriting operations).\n| wx[+] [%n] '9190' [offset]          write hex 0x91 0x90 at offset max n bytes.\n| ws[+] [%n] 'foo' [offset]           write string foo at offset max n chars.\n| wz[+] [%n] 'foo' [offset]           write string zero terminated at offset max n chars.\n| wps[+] [%np|b] 'pattern' [offset]   write string pattern n times at offset (p repeats n times the string, b repeats n times the bytes[can trunc string]).\n| wpx[+] [%np|b] 'pattern' [offset]   write hex pattern n times at offset (p repeats n times the string, b repeats n times the bytes[can trunc string]).\n| wf[+] [%n] ./myfile [offset]        write myfile at offset max n bytes.\n| wr[+] [%n][offset]                  write random bytes at offset max n times.\n| wle[+] [%1|2|4|8] number [offset]   write little endian number of 1,2,4,8 bytes at offset.\n| wbe[+] [%1|2|4|8] number [offset]   write big endian number of 1,2,4,8 bytes at offset.\n| wn[+] [%cCsSwWqQ] number [offset]   write number at offset (c C=1byte, s=le short(little endian 2 bytes), S=be short, w=le word, W=be word(big endian 4 bytes), q=le quad(little endian 8 bytes), Q=be quad).\n| wo[?]                               write over operations commands.\n```\n##### write over commands\n```\ndwarf> wo?\nwrite over operations commands (n=times [bytes repeated], offs=offset)\n| woa [%n] expr [offs]        +=  addition (f.ex: woa 0x0102)\n| woA [%n] expr [offs]        &=  and\n| wos [%n] expr [offs]        -=  substraction\n| wol [%n] expr [offs]        <<= shift left\n| wom [%n] expr [offs]        *=  multiply\n| wor [%n] expr [offs]        >>= shift right\n| woo [%n] expr [offs]        |=  or\n| wox [%n] expr [offs]        ^=  xor  (f.ex: wox %4 0x90 0x100)\n| wo2 [offs]                  2=  2 byte endian swap\n| wo4 [offs]                  4=  4 byte endian swap\n| wo8 [offs]                  8=  8 byte endian swap\n```\n\n#### file types\nthe section name vars are available from the `i` command.\n\n##### elf\n```\nmain elf struct: $elf\nprogram header: $ph[0..n]\nsection header: $sh[0..n]\n```\n\n##### mach-0\n```\nMacho main header: $mac\nload command: $lc[0..n]\nMacho section: $lc::sect[0..n]\n\nmain fat header: $fat\nfile's architectures: $arch[0..n]\n```\n\n##### PE (MZ)\n```\nMZEXE struct: $mz\npe main header: $pe\n$pe::FileHeader\n$pe::OptionalHeader\nPE section: $sect[0..n]\n```\n#### EXAMPLES\n\n##### var assignment\n```\na=5; pp a\na=7\npp a\nb=3\nc=a+b+7\npp c\npp %x c\t\t#prints c variable in hexadecimal format\n```\n\n##### structured variable\n```\no myfile              #open the file\ni                     #prints file's main structures\npp $elf               #prints the main elf structure (assuming an elf file :) )\npp $elf::ph_num       #prints program header's number\n$elf::ph_num=7        #sets program header number\na=$sh[7]::offset      #puts into 'a' variable the 'offset' member of the 8th section header\npp $ph                #prints a list of all program header\npp $sh[0]             #prints the 1st section header details\n```\n\n##### offsets\n```\npp @<       #prints the offset of the beginnig of the opened file (zero ;) )\npp @>       #prints the offset of the end of size (filesize ;) )\nos          #equivalent to print @>\na=@sh[1]    #a is the offset of the beginning of the 2nd section header\nc=@sh[1]<   #c=a\nb=@sh[1]>   #b is the offset of the end of the 2nd section header\nwx %10 '0' $sh[4]::offset   #inject 10 times the value 0 (zero) from '$sh[4]::offset' offset\nwf ./vir.bin @ph[4]>        #inject the content of \"vir.bin\" file from the end of the 5th program header\n```\n\n##### header create\n```\nSc+ ph @ph[2]>         #create a program header from the end of the 3rd program header's section \nSc+ sh @sh[4]          #create a section header from the beginning of the 5th section and shift file so it won't overwrite data. \n                       #old $sh[4] is now $sh[5] and the section created is $sh[4]\n$elf::sh_num=$elf::sh_num+1 #remember to increase the section number from the main elf header\n```\n##### hex editor && generic file operations\n```\no myfile      #open the file\noO myfile     #open the file without loading data\noP            #probe file type and loads file data\nx             #hexdump from actual offset\nx 0x100       #hexdump from offset 0x100\ns             #show current offset\ns 0x100       #set offset at 0x100\nb 0x33        #set block size eq 0x33\npp %x 10+2    #print 10+2 expression result in hex\npp %3 1       #print 3 times '1'\npp %3x @0x100 #print 3 bytes nin hex format starting al 0x100 offset\npp %3c @0     #print 3 char from offset 0\nps %3         #print 3 chat from current offset\noR+ 10        #resize file increase 10 bytes\nM 0 +10 0x100 #move 10 bytes block from offset 0 to offset 0x100\nM 0 0x23 0x44 #move bytes from 0 to 0x23 at new offset 0x44\n\n...\n\n(and many more....)\n\n```\n\n### dwarf\n![dwarf](media/the-white-dwarf.jpg)\n\n#### LICENSE\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 2 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program. If not, see <http://www.gnu.org/licenses/>.\n    "
}
