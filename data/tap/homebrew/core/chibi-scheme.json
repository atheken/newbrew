{
  "name": "chibi-scheme",
  "full_name": "chibi-scheme",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Small footprint Scheme for use as a C Extension Language",
  "license": "BSD-3-Clause",
  "homepage": "https://github.com/ashinn/chibi-scheme",
  "versions": {
    "stable": "0.10",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/ashinn/chibi-scheme/archive/0.10.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "ae1d2057138b7f438f01bfb1e072799105faeea1de0ab3cc10860adf373993b3"
    },
    "head": {
      "url": "https://github.com/ashinn/chibi-scheme.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": "/opt/homebrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/chibi-scheme/blobs/sha256:ad09d2ffe56cff238f35f494831537ee5abf0cfb79eac853d4fdf30c59f4db59",
          "sha256": "ad09d2ffe56cff238f35f494831537ee5abf0cfb79eac853d4fdf30c59f4db59"
        },
        "arm64_monterey": {
          "cellar": "/opt/homebrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/chibi-scheme/blobs/sha256:d2f22ab5082b1d77f7511e4d94c84ccc75a5661b8b4a88e2b8f3e1aef005f338",
          "sha256": "d2f22ab5082b1d77f7511e4d94c84ccc75a5661b8b4a88e2b8f3e1aef005f338"
        },
        "arm64_big_sur": {
          "cellar": "/opt/homebrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/chibi-scheme/blobs/sha256:18fc48f1b5623936fd24b7259b4bcb0e611a91ebe2354b2e1ca8b3dc99dd3eb6",
          "sha256": "18fc48f1b5623936fd24b7259b4bcb0e611a91ebe2354b2e1ca8b3dc99dd3eb6"
        },
        "ventura": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/chibi-scheme/blobs/sha256:3da3a458763da85598324d71211965cb01e34d2b0f4fa590957ba63b12e3f0f8",
          "sha256": "3da3a458763da85598324d71211965cb01e34d2b0f4fa590957ba63b12e3f0f8"
        },
        "monterey": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/chibi-scheme/blobs/sha256:17e2c86eb08a94910eef369344fa0bc0136120155f9b94aa465d4ed63e450124",
          "sha256": "17e2c86eb08a94910eef369344fa0bc0136120155f9b94aa465d4ed63e450124"
        },
        "big_sur": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/chibi-scheme/blobs/sha256:2547ea8be7276702a7db43cd70ca284d74fd7176d612e4b2bab2837343fd3736",
          "sha256": "2547ea8be7276702a7db43cd70ca284d74fd7176d612e4b2bab2837343fd3736"
        },
        "catalina": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/chibi-scheme/blobs/sha256:38846d601710212a1e2769fd7415d176f0ee439798108ca022f86328fd23b42d",
          "sha256": "38846d601710212a1e2769fd7415d176f0ee439798108ca022f86328fd23b42d"
        },
        "mojave": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/chibi-scheme/blobs/sha256:e24e63d2279cdc92dd95d61520c031b8c6ed1f57a3bbe5f7c971376c930112a1",
          "sha256": "e24e63d2279cdc92dd95d61520c031b8c6ed1f57a3bbe5f7c971376c930112a1"
        },
        "x86_64_linux": {
          "cellar": "/home/linuxbrew/.linuxbrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/chibi-scheme/blobs/sha256:d1e2da39ca7ade3c5cd55d95132c56ba7d73b6d70c60ad5b55aa0866aa4fc879",
          "sha256": "d1e2da39ca7ade3c5cd55d95132c56ba7d73b6d70c60ad5b55aa0866aa4fc879"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/chibi-scheme.rb",
  "ruby_source_checksum": {
    "sha256": "f1e3350287285db583a289526557d9f0a16ec9818ac6f2015b8a3b2d88a53fae"
  },
  "date_added": "2011-03-05T11:15:38-08:00",
  "readme": "# ![Chibi-Scheme](https://goo.gl/ZDtn4q)\n\n**Minimal Scheme Implementation for use as an Extension Language**\n\nhttp://synthcode.com/wiki/chibi-scheme\n\nChibi-Scheme is a very small library intended for use as an extension\nand scripting language in C programs.  In addition to support for\nlightweight VM-based threads, each VM itself runs in an isolated heap\nallowing multiple VMs to run simultaneously in different OS threads.\n\nThere are no external dependencies so is relatively easy to drop into\nany project.\n\nDespite the small size, Chibi-Scheme attempts to do The Right Thing.\nThe default settings include:\n\n* a full numeric tower, with rational and complex numbers\n* full and seamless Unicode support\n* low-level and high-level hygienic macros\n* an extensible module system\n\nSpecifically, the default repl language contains all bindings from\n[R7RS small](https://small.r7rs.org/), available explicitly as the\n`(scheme small)` library.  The language is built in layers, however -\nsee the manual for instructions on compiling with fewer features or\nrequesting a smaller language on startup.\n\nChibi-Scheme is known to work on **32** and **64-bit** Linux, FreeBSD,\nNetBSD, OpenBSD and OS X, Plan 9, Windows, iOS, Android,\nARM and [Emscripten](https://kripken.github.io/emscripten-site).  Basic\nsupport for native Windows desktop also exists. See README-win32.md\nfor details and build instructions.\n\nTo build on most platforms just run `make && make test`.  This has a\nfew conditionals assuming GNU make.  If using another make, there are\na few parameters in Makefile.detect you need to set by hand.\n\nThis will provide a shared library *libchibi-scheme*, as well as a\nsample *chibi-scheme* command-line repl.  You can then run\n\n    sudo make install\n\nto install the binaries and libraries.  You can optionally specify a\n**PREFIX** for the installation directory:\n\n    make PREFIX=/path/to/install/\n    sudo make PREFIX=/path/to/install/ install\n\nBy default files are installed in **/usr/local**.\n\nIf you want to try out chibi-scheme without installing, be sure to set\n`LD_LIBRARY_PATH` so it can find the shared libraries.\n\nTo make the emscripten build run `make js` (_not_ `emmake make js`).\n\nFor more detailed documentation, run `make doc` and see the generated\n*doc/chibi.html*."
}
