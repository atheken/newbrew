{
  "name": "pyvim",
  "full_name": "pyvim",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Pure Python Vim clone",
  "license": "BSD-3-Clause",
  "homepage": "https://github.com/prompt-toolkit/pyvim",
  "versions": {
    "stable": "3.0.3",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://files.pythonhosted.org/packages/c3/31/04e144ec3a3a0303e3ef1ef9c6c1ec8a3b5ba9e88b98d21442d9152783c1/pyvim-3.0.3.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "2a3506690f73a79dd02cdc45f872d3edf20a214d4c3666d12459e2ce5b644baa"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pyvim/blobs/sha256:84271d72d5e192730afe696ff8befbd09ed45c9ebb495fdc2a5675ef9e363f32",
          "sha256": "84271d72d5e192730afe696ff8befbd09ed45c9ebb495fdc2a5675ef9e363f32"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pyvim/blobs/sha256:6998e350ae758b15aa2db8198001bc8a8124ed1c86a74e32ff3901359bb193b5",
          "sha256": "6998e350ae758b15aa2db8198001bc8a8124ed1c86a74e32ff3901359bb193b5"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pyvim/blobs/sha256:59c15aa998f7b3961dd042fd1e32bf09eb59510dd1774e348ceb4d297a36cf09",
          "sha256": "59c15aa998f7b3961dd042fd1e32bf09eb59510dd1774e348ceb4d297a36cf09"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pyvim/blobs/sha256:e2971047d47ad67e4a6a28afac14094a5dc6addf200880b24607da3730b46618",
          "sha256": "e2971047d47ad67e4a6a28afac14094a5dc6addf200880b24607da3730b46618"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pyvim/blobs/sha256:8968b45fc990d804c0fb406dcfd19f5a459e0a65bf06152c763bc5d9a147c4d6",
          "sha256": "8968b45fc990d804c0fb406dcfd19f5a459e0a65bf06152c763bc5d9a147c4d6"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pyvim/blobs/sha256:3ea53ff35fdcdace23d6d95d67ddae50da86b64e63cac5a4796235f24df404b2",
          "sha256": "3ea53ff35fdcdace23d6d95d67ddae50da86b64e63cac5a4796235f24df404b2"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pyvim/blobs/sha256:1a18a3f4743b90fc41e4fad362eaf4a5fbb050874ab6fcebf61058ceb014d12c",
          "sha256": "1a18a3f4743b90fc41e4fad362eaf4a5fbb050874ab6fcebf61058ceb014d12c"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pyvim/blobs/sha256:709d795900c4098c90892135c0859c0c93f8aa18868eeeb023bc4357bace19b6",
          "sha256": "709d795900c4098c90892135c0859c0c93f8aa18868eeeb023bc4357bace19b6"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "pygments",
    "python@3.11",
    "six"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/pyvim.rb",
  "ruby_source_checksum": {
    "sha256": "145ce7d319ceb9dd03dfc2d276826fb188c8302a82ed1d61e53dc375c1d79499"
  },
  "date_added": "2016-01-20T09:19:30+00:00",
  "readme": "pyvim\n=====\n\n*An implementation of Vim in Python*\n\n::\n\n    pip install pyvim\n\n.. image :: https://github.com/jonathanslenders/pyvim/raw/master/docs/images/welcome-screen.png\n\nIssues, questions, wishes, comments, feedback, remarks? Please create a GitHub\nissue, I appreciate it.\n\n|Build Status|\n\n\nInstallation\n------------\n\nSimply install ``pyvim`` using pip:\n\n::\n\n    pip install pyvim\n\n\nIt is a good idea to add the following to your ``~/.bashrc`` if you really\nwant to use it:\n\n::\n\n    alias vi=pyvim\n    export EDITOR=pyvim\n\n\nThe good things\n---------------\n\nThe editor is written completely in Python. (There are no C extensions). This\nmakes development a lot faster. It's easy to prototype and integrate new\nfeatures.\n\nWe have already many nice things, for instance:\n\n- Syntax highlighting of files, using the Pygments lexers.\n\n- Horizontal and vertical splits, as well as tab pages. (Similar to Vim.)\n\n- All of the functionality of `prompt_toolkit\n  <http://github.com/jonathanslenders/python-prompt-toolkit>`_. This includes a\n  lot of Vi key bindings, it's platform independent and runs on every Python\n  version from python 2.6 up to 3.4. It also runs on Pypy with a noticeable\n  performance boost.\n\n- Several ``:set ...`` commands have been implemented, like ``incsearch``,\n  ``number``, ``ignorecase``, ``wildmenu``, ``expandtab``, ``hlsearch``,\n  ``ruler``, ``paste`` and ``tabstop``.\n\n- Other working commands: ``vsplit``, ``tabnew``, ``only``, ``badd``, and many\n  others.\n\n- For Python source code, auto completion uses the amazing Jedi library, and\n  code checking in done (asynchronously) through Pyflakes.\n\n- Colorschemes can be changed at runtime.\n\nFurther, when the project develops, it should also become possible to write\nextensions in Python, and use Python as a scripting language. (Instead of\nvimscript, for instance.)\n\nWe can also do some cool stuff. Like for instance running the editor on the\nPython asyncio event loop and having other coroutines interact with the editor.\n\n\nSome more screenshots\n---------------------\n\nEditing its own source code:\n\n.. image :: https://github.com/jonathanslenders/pyvim/raw/master/docs/images/editing-pyvim-source.png\n\nWindow layouts (horizontal and vertical splits + tab pages.)\n\n.. image :: https://github.com/jonathanslenders/pyvim/raw/master/docs/images/window-layout.png\n\nPyflakes for Python code checking and Jedi for autocompletion:\n\n.. image :: https://github.com/jonathanslenders/pyvim/raw/master/docs/images/pyflakes-and-jedi.png\n\nOther colorschemes:\n\n.. image :: https://github.com/jonathanslenders/pyvim/raw/master/docs/images/colorschemes.png\n\nChinese and Japanese input (double width characters):\n\n.. image :: https://raw.githubusercontent.com/jonathanslenders/pyvim/master/docs/images/cjk.png?v2\n\n\nConfiguring pyvim\n-----------------\n\nIt is possible to create a ``.pyvimrc`` file for a custom configuration.\nHave a look at this example: `pyvimrc\n<https://github.com/jonathanslenders/pyvim/blob/master/examples/config/pyvimrc>`_\n\n\nLimitations\n-----------\n\nCompared to Vi Improved, Pyvim is still less powerful in many aspects.\n\n- ``prompt_toolkit`` does not (or not yet) allow buffers to have an individual\n  cursor when buffers are opened in several windows. Currently, this results in\n  some unexpected behaviour, when a file is displayed in two windows at the\n  same time. (The cursor could be displayed in the wrong window and other\n  windows will sometimes scroll along when the cursor moves.) This has to be\n  fixed in the future.\n- The data structure for a buffer is extremely simple. (Right now, it's just a\n  Python string, and an integer for the cursor position.) This works extremely\n  well for development and quickly prototyping of new features, but it comes\n  with a performance penalty. Depending on the system, when a file has above a\n  thousand lines and syntax highlighting is enabled, editing will become\n  noticeable slower. (The bottleneck is probably the ``BufferControl`` code,\n  which on every key press tries to reflow the text and calls pygments for\n  highlighting. And this is Python code looping through single characters.)\n- A lot of nice Vim features, like line folding, macros, etcetera are not yet\n  implemented.\n- Windows support is not that nice. It works, but could be improved. (I think\n  most Windows users are not that interested in this project, but prove me\n  wrong.)\n\n\nRoadmap\n-------\n\nThere is no roadmap. I mostly implement the stuff which I need or interests me,\nor which gives me the opportunity to learn. But feel free to create a GitHub\nissue to request a new feature. Pull requests are also welcome. (Maybe create\nan issue first to discuss it, if you're unsure whether I'll merge it.)\n\nMaybe some day we will have a better data structure (Rope), that makes it\npossible to open really large files. (With good algorithms, Python does not have\nto be slower than C code.)\n\nMaybe we will also have line folding and probably block editing. Maybe some\nday we will have a built-in Python debugger or mouse support. We'll see. :)\n\n\nTesting\n-------\n\nTo run all tests, install pytest:\n\n    pip install pytest\n\nAnd then run from root pyvim directory:\n\n    py.test\n\nTo test pyvim against all supported python versions, install tox:\n\n    pip install tox\n\nAnd then run from root pyvim directory:\n\n    tox\n\nYou need to have installed all the supported versions of python in order to run\ntox command successfully.\n\n\nWhy did I create Pyvim?\n-----------------------\n\nThere are several reasons.\n\nThe main reason is maybe because it was a small step after I created the Python\n``prompt-toolkit`` library. That is a library which is actually only a simply\npure Python readline replacement, but with some nice additions like syntax\nhighlighting and multiline editing. It was never intended to be a toolkit for\nfull-screen terminal applications, but at some point I realised that everything\nwe need for an editor was in there and I liked to challenge its design. So, I\nstarted an editor and the first proof of concept was literally just a few\nhundred lines of code, but it was already a working editor.\n\nThe creation of ``pyvim`` will make sure that we have a solid architecture for\n``prompt-toolkit``, but it also aims to demonstrate the flexibility of the\nlibrary. When it makes sense, features of ``pyvim`` will move back to\n``prompt-toolkit``, which in turn also results in a better Python REPL.\n(see `ptpython <https://github.com/jonathanslenders/ptpython>`_, an alternative\nREPL.)\n\nAbove all, it is really fun to create an editor.\n\n\nAlternatives\n------------\n\nCertainly have a look at the alternatives:\n\n- Kaa: https://github.com/kaaedit/kaa by @atsuoishimoto\n- Vai: https://github.com/stefanoborini/vai by @stefanoborini\n- Vis: https://github.com/martanne/vis by @martanne\n\n\nQ & A:\n------\n\nQ\n Do you use curses?\nA\n No, it uses only ``prompt-toolkit``.\n\n\nThanks\n------\n\n- To Vi Improved, by Bram Moolenaar. For the inspiration.\n- To Jedi, pyflakes and the docopt Python libraries.\n- To the Python wcwidth port of Jeff Quast for support of double width characters.\n- To Guido van Rossum, for creating Python.\n\n\n.. |Build Status| image:: https://api.travis-ci.org/jonathanslenders/pyvim.svg?branch=master\n    :target: https://travis-ci.org/jonathanslenders/pyvim#"
}
