{
  "name": "libff",
  "full_name": "libff",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "C++ library for Finite Fields and Elliptic Curves",
  "license": "MIT",
  "homepage": "https://github.com/scipr-lab/libff",
  "versions": {
    "stable": "0.2.1",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/scipr-lab/libff.git",
      "tag": "v0.2.1",
      "revision": "5835b8c59d4029249645cf551f417608c48f2770",
      "checksum": null
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libff/blobs/sha256:12665fa3a1821e160992a72a91c67861ffd18fcc10bf255c20188474ec8785ac",
          "sha256": "12665fa3a1821e160992a72a91c67861ffd18fcc10bf255c20188474ec8785ac"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libff/blobs/sha256:3f8fff685a6b4b00cb5dc78dad9927be27c22cfdbde465e1d7f49c08ea6a9d56",
          "sha256": "3f8fff685a6b4b00cb5dc78dad9927be27c22cfdbde465e1d7f49c08ea6a9d56"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libff/blobs/sha256:183ad3fd1bb600316578dc051b250a02c803b03ee43af471b3ea3bac249af0d5",
          "sha256": "183ad3fd1bb600316578dc051b250a02c803b03ee43af471b3ea3bac249af0d5"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libff/blobs/sha256:b42e23e8c807c75ff7825ba73a348a3c94e6d4d31682da30377b237ad99c5e8d",
          "sha256": "b42e23e8c807c75ff7825ba73a348a3c94e6d4d31682da30377b237ad99c5e8d"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libff/blobs/sha256:7e92d770effa52f27d690e55981eb4bbe164ab9266573b1554ae7efbf1870167",
          "sha256": "7e92d770effa52f27d690e55981eb4bbe164ab9266573b1554ae7efbf1870167"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libff/blobs/sha256:5c89ae786b7d9f035e65ca4a47a0f0008511a0ba701a2659c1194c2f55157507",
          "sha256": "5c89ae786b7d9f035e65ca4a47a0f0008511a0ba701a2659c1194c2f55157507"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/libff/blobs/sha256:e0c274f4e83f703347f24d6c6c487224b19c72eb4f199daecfbb6c794380cd17",
          "sha256": "e0c274f4e83f703347f24d6c6c487224b19c72eb4f199daecfbb6c794380cd17"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake",
    "openssl@3"
  ],
  "dependencies": [
    "gmp"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/libff.rb",
  "ruby_source_checksum": {
    "sha256": "65a3202b29f36775379334861627d579d0da6e1c6f56c3df1bbcbb304b2a1e69"
  },
  "date_added": "2022-08-31T16:21:47+00:00",
  "readme": "<h1 align=\"center\">libff</h1>\n<h4 align=\"center\">C++ library for Finite Fields and Elliptic Curves</h4>\n\n___libff___ is a C++ library for finite fields and elliptic curves. The library is developed by [SCIPR Lab] and contributors (see [AUTHORS] file) and is released under the MIT License (see [LICENSE] file).\n\n## Table of contents\n\n- [Directory structure](#directory-structure)\n- [Elliptic curve choices](#elliptic-curve-choices)\n- [Build guide](#build-guide)\n\n## Directory structure\n\nThe directory structure is as follows:\n\n* [__libff__](libff): C++ source code, containing the following modules:\n  * [__algebra__](libff/algebra): fields and elliptic curve groups\n  * [__common__](libff/common): miscellaneous utilities\n* [__depends__](depends): dependency libraries\n\n## Elliptic curve choices\n\nThe libsnark library currently provides three options:\n\n* `edwards`:\n   an instantiation based on an Edwards curve, providing 80 bits of security.\n\n* `bn128`:\n   an instantiation based on a Barreto-Naehrig curve, providing 128\n   bits of security. The underlying curve implementation is\n   \\[ate-pairing], which has incorporated our patch that changes the\n   BN curve to one suitable for SNARK applications.\n\n    *   This implementation uses dynamically-generated machine code for the curve\n        arithmetic. Some modern systems disallow execution of code on the heap, and\n        will thus block this implementation.\n\n        For example, on Fedora 20 at its default settings, you will get the error\n        `zmInit ERR:can't protect` when running this code. To solve this,\n        run `sudo setsebool -P allow_execheap 1` to allow execution,\n        or use `make CURVE=ALT_BN128` instead.\n\n* `alt_bn128`:\n   an alternative to `bn128`, somewhat slower but avoids dynamic code generation.\n\nNote that `bn128` requires an x86-64 CPU while the other curve choices\nshould be architecture-independent.\n\n## Build guide\n\nThe library has the following dependencies:\n\n* [Boost](http://www.boost.org/)\n* [CMake](http://cmake.org/)\n* [GMP](http://gmplib.org/)\n* [libsodium](https://libsodium.gitbook.io/doc/)\n* [libprocps](http://packages.ubuntu.com/trusty/libprocps-dev) (turned off by default)\n\nThe library has been tested on Linux, but it is compatible with Windows and MacOS.\n\n### Installation\n\nOn Ubuntu 14.04 LTS:\n\n```\nsudo apt-get install build-essential git libboost-all-dev cmake libgmp3-dev libssl-dev libprocps3-dev pkg-config libsodium-dev\n```\n\n\nOn MacOS, all of the libraries from the previous section can be installed with `brew`, except for `libprocps`, which is turned off by default.\n\nFetch dependencies from their GitHub repos:\n\n```\ngit submodule init && git submodule update\n```\n\n### Compilation\n\nTo compile, starting at the project root directory, create the build directory and Makefile:\n\n```\nmkdir build && cd build\ncmake ..\n```\n\nIf you are on macOS, change the cmake command to be\n\n```\ncmake .. -DOPENSSL_ROOT_DIR=$(brew --prefix openssl)\n```\n\nOther build flags include:\n| Flag | Value | Description |\n| ---- | ----- | ----------- |\n| MAKE_INSTALL_PREFIX | (your path) | Specifies the desired install location. |\n| CMAKE_BUILD_TYPE | Debug | Enables asserts. Note that tests now use gtest instead of asserts. |\n| WITH_PROCPS | ON | Enables `libprocps`, which is by default turned off since it is not supported on some systems such as MacOS. |\n\nThen, to compile and install the library, run this within the build directory:\n```\nmake\nmake install\n```\n\nThis will install `libff.a` into `/install/path/lib`; so your application should be linked using `-L/install/path/lib -lff`. It also installs the requisite headers into `/install/path/include`; so your application should be compiled using `-I/install/path/include`.\n\n## Testing\n\nTo build and execute the tests for this library, run:\n```\nmake check\n```\n\n## Code formatting and linting\n\nTo run clang-tidy on this library, specify the variable `USE_CLANG_TIDY` (eg. `cmake .. -D USE_CLANG_TIDY=ON`).\nThen, run:\n```\nmake clang-tidy\n```\n\nOne can specify which clang-tidy checks to run and which files to run clang-tidy on using the `.clang-tidy` file in the root directory of the project.\n\n## Profile\n\nTo compile the multi-exponentiation profiler in this library, run:\n```\nmake profile\n```\nThe resulting profiler is named `multiexp_profile` and can be found in the `libff` folder under the build directory.\n\n[SCIPR Lab]: http://www.scipr-lab.org/ (Succinct Computational Integrity and Privacy Research Lab)\n\n[LICENSE]: LICENSE (LICENSE file in top directory of libff distribution)\n\n[AUTHORS]: AUTHORS (AUTHORS file in top directory of libff distribution)"
}
