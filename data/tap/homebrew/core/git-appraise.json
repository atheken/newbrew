{
  "name": "git-appraise",
  "full_name": "git-appraise",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Distributed code review system for Git repos",
  "license": "Apache-2.0",
  "homepage": "https://github.com/google/git-appraise",
  "versions": {
    "stable": "0.7",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/google/git-appraise/archive/v0.7.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "b57dd4ac4746486e253658b2c93422515fd8dc6fdca873b5450a6fb0f9487fb3"
    },
    "head": {
      "url": "https://github.com/google/git-appraise.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-appraise/blobs/sha256:987bab897e08380d91b10c6fdd7202c7a8e067d1417fb9887196b6cb5cdde19c",
          "sha256": "987bab897e08380d91b10c6fdd7202c7a8e067d1417fb9887196b6cb5cdde19c"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-appraise/blobs/sha256:117d03b5537210ab8f3efa3a76ff1a29394e66125d005b13183b9414d322c101",
          "sha256": "117d03b5537210ab8f3efa3a76ff1a29394e66125d005b13183b9414d322c101"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-appraise/blobs/sha256:8f41dadc38480e15a1e0b55ba01ffa62a24416321b3337802c40a44a81e61dbe",
          "sha256": "8f41dadc38480e15a1e0b55ba01ffa62a24416321b3337802c40a44a81e61dbe"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-appraise/blobs/sha256:b4140f1103438c29899231dfe0b1cc289bc812c8d0e68bd7c827d10a68c1c900",
          "sha256": "b4140f1103438c29899231dfe0b1cc289bc812c8d0e68bd7c827d10a68c1c900"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-appraise/blobs/sha256:ad050720c5681456f47cef2988332445afe205a3c952f00fce6f12f831eb16de",
          "sha256": "ad050720c5681456f47cef2988332445afe205a3c952f00fce6f12f831eb16de"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-appraise/blobs/sha256:cf48e84b761a284f1479fc5d3073ad19ed895d4718119cb175ca953246d98468",
          "sha256": "cf48e84b761a284f1479fc5d3073ad19ed895d4718119cb175ca953246d98468"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-appraise/blobs/sha256:c09bd9a262807d81e959f60445ab6e60ec75907ea448306644efbb9eb9d62b39",
          "sha256": "c09bd9a262807d81e959f60445ab6e60ec75907ea448306644efbb9eb9d62b39"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-appraise/blobs/sha256:1c1748a7102d5350cf74a90a05706b2a8d6fc6fcc90cce7e823856c183ad4e46",
          "sha256": "1c1748a7102d5350cf74a90a05706b2a8d6fc6fcc90cce7e823856c183ad4e46"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/git-appraise.rb",
  "ruby_source_checksum": {
    "sha256": "3b96d45d4eeef96772bca6db2f0d7326d9c0d5b2995fa891ab4a210d51a877d6"
  },
  "date_added": "2017-10-17T13:08:41-07:00",
  "readme": "# Distributed Code Review For Git\n[![Build Status](https://travis-ci.org/google/git-appraise.svg?branch=master)](https://travis-ci.org/google/git-appraise)\n\nThis repo contains a command line tool for performing code reviews on git\nrepositories.\n\n## Overview\n\nThis tool is a *distributed* code review system for git repos.\n\nBy \"distributed\", we mean that code reviews are stored inside of the repository\nas git objects. Every developer on your team has their own copy of the review\nhistory that they can push or pull. When pulling, updates from the remote\nrepo are automatically merged by the tool.\n\nThis design removes the need for any sort of server-side setup. As a result,\nthis tool can work with any git hosting provider, and the only setup required\nis installing the client on your workstation.\n\n## Installation\n\nAssuming you have the [Go tools installed](https://golang.org/doc/install), run\nthe following command:\n\n    go install github.com/google/git-appraise/git-appraise@latest\n\nThen, either make sure that `${GOPATH}/bin` is in your PATH, or explicitly add the\n\"appraise\" git alias by running the following command.\n\n    git config --global alias.appraise '!'\"${GOPATH}/bin/git-appraise\"\n\n#### Windows:\n\n    git config --global alias.appraise \"!%GOPATH%/bin/git-appraise.exe\"\n\n## Requirements\n\nThis tool expects to run in an environment with the following attributes:\n\n1.  The git command line tool is installed, and included in the PATH.\n2.  The tool is run from within a git repo.\n3.  The git command line tool is configured with the credentials it needs to\n    push to and pull from the remote repos.\n\n## Usage\n\nRequesting a code review:\n\n    git appraise request\n\nPushing code reviews to a remote:\n\n    git appraise push [<remote>]\n\nPulling code reviews from a remote:\n\n    git appraise pull [<remote>]\n\nListing open code reviews:\n\n    git appraise list\n\nShowing the status of the current review, including comments:\n\n    git appraise show\n\nShowing the diff of a review:\n\n    git appraise show --diff [--diff-opts \"<diff-options>\"] [<review-hash>]\n\nCommenting on a review:\n\n    git appraise comment -m \"<message>\" [-f <file> [-l <line>]] [<review-hash>]\n\nAccepting the changes in a review:\n\n    git appraise accept [-m \"<message>\"] [<review-hash>]\n\nSubmitting the current review:\n\n    git appraise submit [--merge | --rebase]\n\nA more detailed getting started doc is available [here](docs/tutorial.md).\n\n## Metadata\n\nThe code review data is stored in [git-notes](https://git-scm.com/docs/git-notes),\nusing the formats described below. Each item stored is written as a single\nline of JSON, and is written with at most one such item per line. This allows\nthe git notes to be automatically merged using the \"cat\\_sort\\_uniq\" strategy.\n\nSince these notes are not in a human-friendly form, all of the refs used to\ntrack them start with the prefix \"refs/notes/devtools\". This helps make it\nclear that these are meant to be read and written by automated tools.\n\nWhen a field named \"v\" appears in one of these notes, it is used to denote\nthe version of the metadata format being used. If that field is missing, then\nit defaults to the value 0, which corresponds to this initial version of the\nformats.\n\n### Code Review Requests\n\nCode review requests are stored in the \"refs/notes/devtools/reviews\" ref, and\nannotate the first revision in a review. They must conform to the\n[request schema](schema/request.json).\n\nIf there are multiple requests for a single commit, then they are sorted by\ntimestamp and the final request is treated as the current one. This sorting\nshould be done in a stable manner, so that if there are multiple requests\nwith the same timestamp, then the last such request in the note is treated\nas the current one.\n\nThis design allows a user to update a review request by re-running the\n`git appraise request` command.\n\n### Continuous Integration Status\n\nContinuous integration build and test results are stored in the\n\"refs/notes/devtools/ci\" ref, and annotate the revision that was built and\ntested. They must conform to the [ci schema](schema/ci.json).\n\n### Robot Comments\n\nRobot comments are comments generated by static analysis tools. These are\nstored in the \"refs/notes/devtools/analyses\" ref, and annotate the revision.\nThey must conform to the [analysis schema](schema/analysis.json).\n\n### Review Comments\n\nReview comments are comments that were written by a person rather than by a\nmachine. These are stored in the \"refs/notes/devtools/discuss\" ref, and\nannotate the first revision in the review. They must conform to the\n[comment schema](schema/comment.json).\n\n## Integrations\n\n### Libraries\n\n  - [Go (use git-appraise itself)](https://github.com/google/git-appraise/blob/master/review/review.go)\n  - [Rust](https://github.com/Nemo157/git-appraise-rs)\n\n### Graphical User Interfaces\n\n  - [Git-Appraise-Web](https://github.com/google/git-appraise-web)\n\n### Plugins\n\n  - [Eclipse](https://github.com/google/git-appraise-eclipse)\n  - [Jenkins](https://github.com/jenkinsci/google-git-notes-publisher-plugin)\n\n### Mirrors to other systems\n\n  - [GitHub Pull Requests](https://github.com/google/git-pull-request-mirror)\n  - [Phabricator Revisions](https://github.com/google/git-phabricator-mirror)\n\n## Contributing\n\nPlease see [the CONTRIBUTING file](CONTRIBUTING.md) for information on contributing to Git Appraise."
}
