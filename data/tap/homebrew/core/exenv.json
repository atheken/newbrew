{
  "name": "exenv",
  "full_name": "exenv",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Elixir versions management tool",
  "license": "MIT",
  "homepage": "https://github.com/mururu/exenv",
  "versions": {
    "stable": "0.1.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/mururu/exenv/archive/v0.1.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "368095760ecc386a0930954f5f0ce7cea977641fe6d27b1beff032f512598a58"
    },
    "head": {
      "url": "https://github.com/mururu/exenv.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/exenv/blobs/sha256:ae3d33c35709202895d8d27bff0ea95075cd1455cc20207b139c43b73ca34322",
          "sha256": "ae3d33c35709202895d8d27bff0ea95075cd1455cc20207b139c43b73ca34322"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": true,
  "disable_date": "2023-06-19",
  "disable_reason": "repo_archived",
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/exenv.rb",
  "ruby_source_checksum": {
    "sha256": "78221862f8cc52083d61837e15eb13eb263ec1456df9edd41a061f086c79e9bd"
  },
  "date_added": "2013-06-14T11:13:02-07:00",
  "readme": "**This repository is archived**\n\n---\n\n# Simple Elixir Version Management: exenv\n\nexenv lets you easily switch between multiple versions of Elixir. It's\nsimple, unobtrusive, and follows the UNIX tradition of single-purpose\ntools that do one thing well.\n\nexenv is a Elixir version of rbenv and used denv as a reference.\nThanks to @sstephenson and @repeatedly.\n\n### exenv _doesâ€¦_\n\n* Let you **change the global Elixir version** on a per-user basis.\n* Provide support for **per-project Elixir versions**.\n* Allow you to **override the Elixir version** with an environment\n  variable.\n\n## Table of Contents\n\n   * [1 How It Works](#section_1)\n   * [2 Installation](#section_2)\n      * [2.1 Basic GitHub Checkout](#section_2.1)\n         * [2.1.1 Upgrading](#section_2.1.1)\n      * [2.2 Neckbeard Configuration](#section_2.2)\n   * [3 Usage](#section_3)\n      * [3.1 exenv global](#section_3.1)\n      * [3.2 exenv local](#section_3.2)\n      * [3.3 exenv shell](#section_3.3)\n      * [3.4 exenv versions](#section_3.4)\n      * [3.5 exenv version](#section_3.5)\n      * [3.6 exenv rehash](#section_3.6)\n      * [3.7 exenv which](#section_3.7)\n   * [4 Development](#section_4)\n      * [4.1 Version History](#section_4.1)\n      * [4.2 License](#section_4.2)\n\n## <a name=\"section_1\"></a> 1 How It Works\n\nexenv operates on the per-user directory `~/.exenv`. Version names in\nexenv correspond to subdirectories of `~/.exenv/versions`. For\nexample, you might have `~/.exenv/versions/0.6.0` and\n`~/.exenv/versions/0.7.0`.\n\nEach version is a working tree with its own binaries, like\n`~/.exenv/versions/0.6.0/bin/elixir` and\n`~/.exenv/versions/0.7.0/bin/iex`. exenv makes _shim binaries_\nfor every such binary across all installed versions of Elixir.\n\nThese shims are simple wrapper scripts that live in `~/.exenv/shims`\nand detect which Elixir version you want to use. They insert the\ndirectory for the selected version at the beginning of your `$PATH`\nand then execute the corresponding binary.\n\nBecause of the simplicity of the shim approach, all you need to use\nexenv is `~/.exenv/shims` in your `$PATH`.\n\n## <a name=\"section_2\"></a> 2 Installation\n\n### <a name=\"section_2.1\"></a> 2.1 Basic GitHub Checkout\n\nThis will get you going with the latest version of exenv and make it\neasy to fork and contribute any changes back upstream.\n\n1. Check out exenv into `~/.exenv`.\n\n        $ cd\n        $ git clone git://github.com/mururu/exenv.git .exenv\n\n2. Add `~/.exenv/bin` to your `$PATH` for access to the `exenv`\n   command-line utility.\n\n        $ echo 'export PATH=\"$HOME/.exenv/bin:$PATH\"' >> ~/.bash_profile\n\n    **Zsh note**: Modify your `~/.zshenv` file instead of `~/.bash_profile`.\n\n3. Add exenv init to your shell to enable shims and autocompletion.\n\n        $ echo 'eval \"$(exenv init -)\"' >> ~/.bash_profile\n\n    **Zsh note**: Modify your `~/.zshenv` file instead of `~/.bash_profile`.\n\n4. Restart your shell so the path changes take effect. You can now\n   begin using exenv.\n\n        $ exec $SHELL\n\n5. Install Elixir versions into `~/.exenv/versions`. For example, to\n   install Elixir 0.13.3, download and unpack the source, then run:\n\n        $ wget https://github.com/elixir-lang/elixir/archive/v0.13.3.zip\n        $ unzip v0.13.3.zip\n        $ mv elixir-0.13.3/ ~/.exenv/versions/0.13.3\n\n6. Rebuild the shim binaries. You should do this any time you install\n   a new Elixir binary (for example, when installing a new Elixir version,\n   or when installing a gem that provides a binary).\n\n        $ exenv rehash\n\n#### <a name=\"section_2.1.1\"></a> 2.1.1 Upgrading\n\nIf you've installed exenv using the instructions above, you can\nupgrade your installation at any time using git.\n\nTo upgrade to the latest development version of exenv, use `git pull`:\n\n    $ cd ~/.exenv\n    $ git pull\n\nTo upgrade to a specific release of exenv, check out the corresponding\ntag:\n\n    $ cd ~/.exenv\n    $ git fetch\n    $ git tag\n    v0.1.0\n    v0.1.1\n    v0.1.2\n    v0.2.0\n    $ git checkout v0.2.0\n\n### <a name=\"section_2.2\"></a> 2.2 Neckbeard Configuration\n\nSkip this section unless you must know what every line in your shell\nprofile is doing.\n\n`exenv init` is the only command that crosses the line of loading\nextra commands into your shell. Coming from rvm, some of you might be\nopposed to this idea. Here's what `exenv init` actually does:\n\n1. Sets up your shims path. This is the only requirement for exenv to\n   function properly. You can do this by hand by prepending\n   `~/.exenv/shims` to your `$PATH`.\n\n2. Installs autocompletion. This is entirely optional but pretty\n   useful. Sourcing `~/.exenv/completions/exenv.bash` will set that\n   up. There is also a `~/.exenv/completions/exenv.zsh` for Zsh\n   users.\n\n3. Rehashes shims. From time to time you'll need to rebuild your\n   shim files. Doing this on init makes sure everything is up to\n   date. You can always run `exenv rehash` manually.\n\n4. Installs the sh dispatcher. This bit is also optional, but allows\n   exenv and plugins to change variables in your current shell, making\n   commands like `exenv shell` possible. The sh dispatcher doesn't do\n   anything crazy like override `cd` or hack your shell prompt, but if\n   for some reason you need `exenv` to be a real script rather than a\n   shell function, you can safely skip it.\n\nRun `exenv init -` for yourself to see exactly what happens under the\nhood.\n\n## <a name=\"section_3\"></a> 3 Usage\n\nLike `git`, the `exenv` command delegates to subcommands based on its\nfirst argument. The most common subcommands are:\n\n### <a name=\"section_3.1\"></a> 3.1 exenv global\n\nSets the global version of Elixir to be used in all shells by writing\nthe version name to the `~/.exenv/version` file. This version can be\noverridden by a per-project `.exenv-version` file, or by setting the\n`EXENV_VERSION` environment variable.\n\n    $ exenv global 0.7.0\n\nThe special version name `system` tells exenv to use the system Elixir\n(detected by searching your `$PATH`).\n\nWhen run without a version number, `exenv global` reports the\ncurrently configured global version.\n\n### <a name=\"section_3.2\"></a> 3.2 exenv local\n\nSets a local per-project Elixir version by writing the version name to\nan `.exenv-version` file in the current directory. This version\noverrides the global, and can be overridden itself by setting the\n`EXENV_VERSION` environment variable or with the `exenv shell`\ncommand.\n\n    $ exenv local 0.6.0\n\nWhen run without a version number, `exenv local` reports the currently\nconfigured local version. You can also unset the local version:\n\n    $ exenv local --unset\n\n### <a name=\"section_3.3\"></a> 3.3 exenv shell\n\nSets a shell-specific Elixir version by setting the `EXENV_VERSION`\nenvironment variable in your shell. This version overrides both\nproject-specific versions and the global version.\n\n    $ exenv shell 0.7.0\n\nWhen run without a version number, `exenv shell` reports the current\nvalue of `EXENV_VERSION`. You can also unset the shell version:\n\n    $ exenv shell --unset\n\nNote that you'll need exenv's shell integration enabled (step 3 of\nthe installation instructions) in order to use this command. If you\nprefer not to use shell integration, you may simply set the\n`EXENV_VERSION` variable yourself:\n\n    $ export EXENV_VERSION=0.6.0\n\n### <a name=\"section_3.4\"></a> 3.4 exenv versions\n\nLists all Elixir versions known to exenv, and shows an asterisk next to\nthe currently active version.\n\n    $ exenv versions\n      0.5.0\n    * 0.6.0\n      0.7.0\n\n### <a name=\"section_3.5\"></a> 3.5 exenv version\n\nDisplays the currently active Elixir version, along with information on\nhow it was set.\n\n    $ exenv version\n    0.7.0 (set by /Volumes/37signals/basecamp/.exenv-version)\n\n### <a name=\"section_3.6\"></a> 3.6 exenv rehash\n\nInstalls shims for all Elixir binaries known to exenv (i.e.,\n`~/.exenv/versions/*/bin/*`). Run this command after you install a new\nversion of Elixir.\n\n    $ exenv rehash\n\n### <a name=\"section_3.7\"></a> 3.7 exenv which\n\nDisplays the full path to the binary that exenv will execute when you\nrun the given command.\n\n    $ exenv which iex\n    /Users/sam/.exenv/versions/0.7.0/bin/iex\n\n### <a name=\"section_3.8\"></a> 3.8 exenv install\n\nUsing [elixir-build](https://github.com/mururu/elixir-build),\nyou can install Elixir automatically. Please see here([elixir-build](https://github.com/mururu/elixir-build))\nfor more details.\n\n## <a name=\"section_4\"></a> 4 Development\n\nThe exenv source code is [hosted on\nGitHub](https://github.com/mururu/exenv). It's clean, modular,\nand easy to understand, even if you're not a shell hacker.\n\nPlease feel free to submit pull requests and file bugs on the [issue\ntracker](https://github.com/mururu/exenv/issues).\n\n### <a name=\"section_4.1\"></a> 4.1 Version History\n\n**0.1.0** (November 10, 2012)\n\nFork [rbenv](https://github.com/sstephenson/rbenv)\n\n### <a name=\"section_4.2\"></a> 4.2 License\n\n(The MIT license)\n\nCopyright (c) 2011 Sam Stephenson, Yuki Ito\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
}
