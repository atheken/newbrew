{
  "name": "portal",
  "full_name": "portal",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Quick and easy command-line file transfer utility from any computer to another",
  "license": "MIT",
  "homepage": "https://github.com/SpatiumPortae/portal",
  "versions": {
    "stable": "1.2.3",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/SpatiumPortae/portal/archive/v1.2.3.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "6d71f8c4b60da2bff404509fbeff57fc41a1300b51867aeace9632562fa9e30a"
    },
    "head": {
      "url": "https://github.com/SpatiumPortae/portal.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/portal/blobs/sha256:956d12c9e7f7c8f8979c8b17ca0eaeb45e8639419a8c8ab2d271ebf19e1def0c",
          "sha256": "956d12c9e7f7c8f8979c8b17ca0eaeb45e8639419a8c8ab2d271ebf19e1def0c"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/portal/blobs/sha256:956d12c9e7f7c8f8979c8b17ca0eaeb45e8639419a8c8ab2d271ebf19e1def0c",
          "sha256": "956d12c9e7f7c8f8979c8b17ca0eaeb45e8639419a8c8ab2d271ebf19e1def0c"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/portal/blobs/sha256:956d12c9e7f7c8f8979c8b17ca0eaeb45e8639419a8c8ab2d271ebf19e1def0c",
          "sha256": "956d12c9e7f7c8f8979c8b17ca0eaeb45e8639419a8c8ab2d271ebf19e1def0c"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/portal/blobs/sha256:93a8ee8abb4795f58ed78bf8050d87c68c997d6af40c9791e504cb93de26022a",
          "sha256": "93a8ee8abb4795f58ed78bf8050d87c68c997d6af40c9791e504cb93de26022a"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/portal/blobs/sha256:93a8ee8abb4795f58ed78bf8050d87c68c997d6af40c9791e504cb93de26022a",
          "sha256": "93a8ee8abb4795f58ed78bf8050d87c68c997d6af40c9791e504cb93de26022a"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/portal/blobs/sha256:93a8ee8abb4795f58ed78bf8050d87c68c997d6af40c9791e504cb93de26022a",
          "sha256": "93a8ee8abb4795f58ed78bf8050d87c68c997d6af40c9791e504cb93de26022a"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/portal/blobs/sha256:611aa11a9045911553b7751fc59df6f0c58bbe9107d0b88442ee2d349da8d8e6",
          "sha256": "611aa11a9045911553b7751fc59df6f0c58bbe9107d0b88442ee2d349da8d8e6"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/portal.rb",
  "ruby_source_checksum": {
    "sha256": "9d2581bf9c07f42e426c2ccbba094daee36e2dbbbe06382c970f145a6ff1e064"
  },
  "date_added": "2023-03-16T07:56:17+00:00",
  "readme": "# Portal\n\n<p align=\"center\">\n<img src=\"https://user-images.githubusercontent.com/6842167/172497072-e196c2d0-f0f9-4039-83f4-5d7e056e97cf.png\" width=\"375\" height=\"auto\">\n</p>\n<p align=\"center\" style=\"font-weight: bold;\">\na command-line file transfer utility for sending files from any computer to another\n</p>\n  \n<br>\n\n<p align=\"center\">\n      <a href=\"https://github.com/SpatiumPortae/portal/releases\"><img src=\"https://img.shields.io/github/v/release/spatiumportae/portal?color=%231777AB&label=version\"></a>\n      &nbsp;\n      <a href=\"https://github.com/SpatiumPortae/portal/actions\"><img src=\"https://img.shields.io/github/actions/workflow/status/SpatiumPortae/portal/ci.yml?branch=master&color=%231777AB\"></a>\n      &nbsp;\n      <a href=\"https://github.com/SpatiumPortae/portal/blob/master/LICENSE\"><img src=\"https://img.shields.io/github/license/spatiumportae/portal?color=%231777AB\"></a>\n</p>\n\n## Installation\n\nOn macOS/Linux, if you are using [Homebrew](https://brew.sh/)\n```bash\nbrew install portal\n```\n\nOn Windows, if you are using [Scoop](https://scoop.sh)\n\n```bash\nscoop install portal\n```\n\nOn Windows, if you are using [WinGet](https://github.com/microsoft/winget-cli)\n```bash\nwinget install SpatiumPortae.portal\n```\n\nOn Arch Linux (AUR)\n```bash\nyay -S portal-bin\n```\n\n<!-- \n// Hidden until the snap build is granted the right filesystem permissions.\nOn the Snap Store\n```bash\nsudo snap install portal\n```\n-->\n\nOn any platform, you can get the [latest release manually](https://github.com/SpatiumPortae/portal/releases/latest), or simply run\n\n```bash\ncurl -sL portal.spatiumportae.com | bash\n```\nor\n```bash\nwget -qO - portal.spatiumportae.com | bash\n```\n\n## How it works\n\n### Sending files and folders\n\nTo send files:\n\n```bash\nportal send <file1> <file2> <folder1> <folder2> ...\n```\n\nThe application will output a temporary password on the format `1-inertia-elliptical-celestial`.\n<br><br>\nThe sender will communicate this password to the receiver over some secure channel.\n\n### Receiving files and folders\n\nTo receive those files:\n\n```bash\nportal receive 1-intertia-elliptical-celestial\n```\n\nThe two clients will establish a connection through a relay server. The file transfer will then commence with a direct or relayed connection, depending on what's possible.\n\n## What it looks like ✨\n\nThe sender **(top)** sends a folder and three files to the receiver **(bottom)**.\n<br><br>\nIn this case, as you can see in the event log, the transfer is made using **direct transfer**. That means\nthat the files are sent **directly** from one client to the other, _no middlemen involved_. \n<br><br>\nAs it happens, these computers are in the same local network, and `portal` recognizes this.\n\n![demo](./assets/demo.gif)\n\n## Features\n\n`portal` provides:\n\n- End-to-end encryption using [PAKE2](https://en.wikipedia.org/wiki/Password-authenticated_key_agreement)\n- Direct transfer of files if possible (e.g. sender and receiver are in the same local network)\n- Fallback to relay server if sender and receiver cannot connect directly\n- Parallel gzip compression of files for faster and more efficient transfers\n- Hosting your own relay (we'd appreciate it if you plan to send a lot of data!)\n- Configurability and shell completions\n- A shiny UI ⭐✨ to gaze your eyes upon while you wait for your files\n\n### Completions\n\n`portal` provides extensive <kbd>TAB</kbd> completions for the following shells:\n\n- `bash`\n- `zsh`\n- `fish`\n- `powershell`\n\nTo see installation instructions for your shell and platform, run:\n\n```bash\nportal completion [bash|zsh|fish|powershell] --help\n```\n\n#### Tip!\n\nYou probably didn't _quite_ catch the password Bob was screaming across the room.\n<br>\nYou can use <kbd>TAB</kbd> completions to auto-complete passwords on the receiving end.\n\nPress <kbd>TAB</kbd> when entering parts of your password...\n```bash\nportal receive 42-relative-parsec-s...\n```\n\n...and `portal` will suggest the possible words\n```bash\n$ portal receive 42-relative-parsec-s...\n\n42-relative-parsec-supernova  42-relative-parsec-scatter    42-relative-parsec-solar      42-relative-parsec-spin       42-relative-parsec-static     \n42-relative-parsec-sigma      42-relative-parsec-solid      42-relative-parsec-star       42-relative-parsec-storm      42-relative-parsec-system\n```\n\n__boom__. _supernova_.\n```bash\nportal receive 42-relative-parsec-supernova\n```\n\n### Flags\n\n#### `Receiver`\n\n- `-y/--yes`: overwrite existing files without `[Y/n]` prompts\n\n#### `Relay`\n\n- `-p/--port`: port to host the relay server on\n\n#### `Sender` and `Receiver`\n\n- `-r/--relay`: address of the relay server (`:8080`, `myrelay.io:1234`, ...)\n- `-s/--tui-style`: the style of the tui (`rich` | `raw`)\n\n#### `Sender`, `Receiver` and `Relay`\n\n- `-h/--help`: output help messages for any command\n- `-v/--verbose`: log debug info to file\n\n### Configuration\n\n`portal` places its configuration file in `$HOME/.config/portal/config.yml`.\n<br><br>\nAs evident by the file extension, the config is a simple [YAML](https://yaml.org/) file with descriptive field names.\n\n#### Default configuration\n```yaml\n# The URL of the relay server.\nrelay: portal.spatiumportae.com\n# Log debug output to file.\nverbose: false\n# Prompt for overwriting duplicates when receiving files.\nprompt_overwrite_files: true\n# The port used when serving the relay using \"portal serve\".\nrelay_serve_port: 8080\n# The style of the TUI.\ntui_style: rich\n```\n\n### Hosting your own relay\n\nThe `portal` binary comes with a built-in relay server.\n<br><br>\nSpinning up your own relay is as easy as...\n```bash\nportal serve --port 1337\n```\n\nThe server log output is `JSON`. Super-recommended to run it through [jq](https://github.com/stedolan/jq)!\n```bash\nportal serve --port 1337 2>&1 | jq .\n```\n...\n```json\n{\n  \"level\": \"info\",\n  \"ts\": \"2023-02-28T02:57:45.310134+01:00\",\n  \"caller\": \"rendezvous/server.go:77\",\n  \"msg\": \"serving rendezvous server\",\n  \"version\": \"v1.2.1\",\n  \"address\": \":1337\"\n}\n```\n\n### More details about the connection process\n\n<details>\n<summary>Technical details</summary>\n  \n### Technical details\n\nThe connection between the sender and the server is negotiated using a intermediary server (relay).\n<br><br>\nThe relay server is used to negotiate a secure encrypted channel while never seeing the contents of files nor the temporary password.\n\nThe communication works as follows:\n\n- `sender` connects to `relay`\n- `relay` allocates a numerical ID to the sender and sends it to the `sender`\n- `sender` generates and outputs the password (starting with the ID) to the terminal, hashes the password and sends it to the `relay`\n- `receiver` hashes the password (which has been communicated over some secure channel) and sends it to the `relay`\n- When both the `sender` and the `receiver` have sent the hashed password to the `relay`, the cryptographic exchange starts\n- During the cryptographic exchange, the `relay`, well, relays messages from the `sender` to the `receiver` and vice-versa\n- Once the cryptographic exchange is done, every message sent by the `sender` and `receiver` is encrypted, and the `relay` cannot see their contents\n- The file transfer is about to begin, and can commence in two ways: \n  1. The `sender` and `receiver` are in the same local network or can be reached directly by IP in some other way\n     - In this case, the `sender` and `receiver` will happily send the files to each other directly. The `relay` will close down for this connection.\n  2. The `sender` and `receiver` are not on the same local network, or cannot reach each other directly. The transfer will go through the `relay`, which will continue to relay encrypted messages until the file transfer is completed\n\n</details>\n\n## Building from source\n\nThe [`Makefile`](Makefile) has everything you need. \n<br><br>\nTo build a binary containing all commands, run:\n```bash\nPORTAL_VERSION=v1.x.x make build\n```\n\nIt's important to include `PORTAL_VERSION`, which is a [semantic version](https://semver.org/) string. This is needed\nin order to validate senders and receivers against the relay, so transfers are disallowed\nwhen on different major versions, for instance.\n\n## Maintainers\n\n- [Arvid Gotthard](https://github.com/mellonnen)\n- [Zino Kader](https://github.com/ZinoKader)\n\n## Acknowledgements\n\na big thank you to [magic-wormhole](https://github.com/magic-wormhole/magic-wormhole) for greatly inspiring the concept of Portal.\n\n[nhooyr/websocket](https://github.com/nhooyr/websocket), [shollz/pake](https://github.com/schollz/pake), [charmbracelet/bubbles](https://github.com/charmbracelet/bubbles), [charmbracelet/bubbletea](https://github.com/charmbracelet/bubbletea), [charmbracelet/lipgloss](https://github.com/charmbracelet/lipgloss), [muesli/reflow](https://github.com/muesli/reflow), [klauspost/pgzip](https://github.com/klauspost/pgzip) and many, many more.\n\n### DigitalOcean <3\n\nA **special thanks** to our sponsors [DigitalOcean](https://m.do.co/c/73a491fda077).\n<br><br>\nThe public relay available for everyone to use is...\n\n[![DigitalOcean Referral Badge](https://web-platforms.sfo2.digitaloceanspaces.com/WWW/Badge%203.svg)](https://www.digitalocean.com/?refcode=73a491fda077&utm_campaign=Referral_Invite&utm_medium=Referral_Program&utm_source=badge)"
}
