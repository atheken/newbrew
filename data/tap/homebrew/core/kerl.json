{
  "name": "kerl",
  "full_name": "kerl",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Easy building and installing of Erlang/OTP instances",
  "license": "MIT",
  "homepage": "https://github.com/kerl/kerl",
  "versions": {
    "stable": "3.0.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/kerl/kerl/archive/3.0.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "5cc38017f2f52e3801deb62afb94ed5948c2435464ccc58e64430dcbb5201d82"
    },
    "head": {
      "url": "https://github.com/kerl/kerl.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kerl/blobs/sha256:8563426f34ef0bff2841677d9411855a12f4bf47b059b8a1b1f26f6127ec275a",
          "sha256": "8563426f34ef0bff2841677d9411855a12f4bf47b059b8a1b1f26f6127ec275a"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/kerl.rb",
  "ruby_source_checksum": {
    "sha256": "fc1732dec5e416827f5e8c5f4c78efc23ce1371e83e5f94824c1301d80ee7952"
  },
  "date_added": "2013-08-04T21:27:52-07:00",
  "readme": "# `kerl` [![GitHub Actions CI][ci-img]][ci] [![GitHub Actions Lint][lint-img]][lint]\n\n[ci-img]: https://github.com/kerl/kerl/actions/workflows/ci.yml/badge.svg\n[ci]: https://github.com/kerl/kerl/actions/workflows/ci.yml\n[lint-img]: https://github.com/kerl/kerl/actions/workflows/lint.yml/badge.svg\n[lint]: https://github.com/kerl/kerl/actions/workflows/lint.yml\n\nEasy building and installing of [Erlang/OTP](https://www.erlang.org) instances.\n\n`kerl` aims to be shell agnostic and its only dependencies, excluding what's\nrequired to actually build Erlang/OTP, are `curl` and `git`.\n\nAll is done so that, once a specific release has been built, creating a new\ninstallation is as fast as possible.\n\n## Table of Contents\n\n- [Installing `kerl`](#installing-kerl)\n- [How `kerl` works](#how-kerl-works)\n- [Using `kerl`](#using-kerl)\n- [`kerl` options](#kerl-options)\n- [Command reference](#command-reference)\n- [Important notes](#important-notes)\n- [Shell support](#shell-support)\n- [The `kerl` glossary](#the-kerl-glossary)\n- [The `kerl` project](#the-kerl-project)\n\n## Installing `kerl`\n\nIf you are on macOS, and using [homebrew](https://github.com/Homebrew/brew),\nyou can install `kerl`, along with shell completion, by running:\n\n```console\n$ brew install kerl\n```\n\nAlternatively, you can download the script directly from GitHub:\n\n```console\n$ curl -O https://raw.githubusercontent.com/kerl/kerl/master/kerl\n```\n\nThen ensure it is executable\n\n```console\n$ chmod a+x kerl\n```\n\nand drop it in your `$PATH`.\n\nOptionally, download and install `kerl`'s `bash_completion` file from\n<https://github.com/kerl/kerl/raw/master/bash_completion/kerl>\n\nOptionally, download and install `kerl`'s `zsh-completion` file from\n<https://github.com/kerl/kerl/raw/master/zsh_completion/_kerl>\n\n### Updating `kerl` locally\n\nRun:\n\n```console\n$ kerl upgrade\nlocal kerl found (/usr/local/bin/kerl) at version 2.6.0.\nremote kerl found at version 3.0.0.\nVersions are different. Upgrading to 3.0.0.\nkerl 2.6.0 is now available at /usr/local/bin/kerl.\nUpdating list of available releases...\nDone!\n```\n\n## How `kerl` works\n\n`kerl` keeps tracks of the releases it downloads, builds and installs, allowing\neasy installations to new destinations (without complete rebuilding) and easy\nswitches between Erlang/OTP installations.\n\nBy default, `kerl` downloads source tarballs from the [official Erlang/OTP repository](https://github.com/erlang/otp/tags)\nbut you can tell `kerl` to download from the [official Erlang/OTP website](https://www.erlang.org/downloads)\nby setting `KERL_BUILD_BACKEND=tarball`.\nHowever, this website does not use HTTPS and is down more often than GitHub.\n\nYou can also install directly from a raw Git repository by using the\n`kerl build git <git_url> <git_version> <build_name>` syntax.\n\n## Using `kerl`\n\nList the available releases:\n\n<!-- markdownlint-disable MD007 # line-length -->\n```console\n$ kerl list releases\n24.0-rc1\n...\n24.3.4.13\n25.0-rc1\n...\n25.3.2.3\n26.0-rc1\n...\n26.0.2\nRun '/usr/local/bin/kerl update releases' to update this list from erlang.org\n```\n<!-- markdownlint-enable MD007 # line-length -->\n\nPick your choice and build it:\n\n```console\n$ kerl build 25.3 25.3\nDownloading 25.3 to /home/user/.kerl/archives...\n...\nExtracting source code\nBuilding Erlang/OTP 25.3 (25.3), please wait...\n...\nErlang/OTP 25.3 (25.3) has been successfully built\n```\n\nNote that named builds allow you to have different builds for the same Erlang/OTP release with\ndifferent configure options:\n\n```console\n$ KERL_BUILD_DOCS=yes kerl build 25.3 25.3-builtdocs\nExtracting source code\nBuilding Erlang/OTP 25.3 (25.3-builtdocs), please wait...\n...\nBuilding docs...\nErlang/OTP 25.3 (25.3-builtdocs) has been successfully built\n```\n\nYou can verify your build has been registered:\n\n```console\n$ kerl list builds\n25.3,25.3\n25.3,25.3-builtdocs\n```\n\nNow install a build to some location:\n\n```console\n$ kerl install 25.3 /usr/local/lib/erlang/25.3\nInstalling Erlang/OTP 25.3 (25.3) in /usr/local/lib/erlang/25.3...\nBuilding Dialyzer PLT...\nDone building /usr/local/lib/erlang/25.3/dialyzer/plt\nYou can activate this installation running the following command:\n. /usr/local/lib/erlang/25.3/activate\nLater on, you can leave the installation typing:\nkerl_deactivate\n```\n\nHere again you can check the installation's been registered:\n\n```console\n$ kerl list installations\n25.3 /usr/local/lib/erlang/25.3\n```\n\nAnd at last activate it:\n\n```console\n$ . /usr/local/lib/erlang/25.3/activate\n```\n\nActivation will backup your `$PATH`, and prepend it with the installation's `bin/`\ndirectory. Thus it's only valid for the current shell session, and until you either\nactivate another installation or call `kerl_deactivate`.\n\n**Note**: alternatively you can use `kerl build-install` as a shortcut for\nthe two previous actions to be played in sequence.\n\n```console\n$ kerl build-install\nusage: ./kerl build-install <release> [build_name] [directory]\n```\n\n```console\n$ kerl build-install git\nusage: ./kerl build-install git <git_url> <git_version> <build_name> [directory]\n```\n\nYou're now ready to work with your 25.3 installation:\n\n```console\n$ erl -version\nErlang (SMP,ASYNC_THREADS) (BEAM) emulator version 13.2\n```\n\nWhen you're done just call the shell function:\n\n```console\n$ kerl_deactivate\n```\n\nAnytime you can check which installation, if any, is currently active with:\n\n```console\n$ kerl active\nThe current active installation is:\n/usr/local/lib/erlang/25.3\n```\n\nYou can get an overview of the current `kerl` state with:\n\n```console\n$ kerl status\nAvailable builds:\n25.3,25.3\n25.3,25.3-builtdocs\n----------\nAvailable installations:\n25.3 /usr/local/lib/erlang/25.3\n----------\nThe current active installation is:\n/usr/local/lib/erlang/25.3\nDialyzer PLT for the active installation is:\n/usr/local/lib/erlang/25.3/dialyzer/plt\nThe build options for the active installation are:\n...\n```\n\nYou can delete builds and installations with the following commands:\n\n```console\n$ kerl delete build 25.3-builtdocs\nThe 25.3-builtdocs build has been deleted\n```\n\n```console\n$ kerl delete installation 25.3\nThe installation \"25.3\" has been deleted\n```\n\nYou can easily deploy an installation to another host having `ssh` and `rsync` access with the\nfollowing command:\n\n```console\n$ kerl deploy anotherhost /usr/local/lib/erlang/25.3\nCloning Erlang/OTP 25.3 (/usr/local/lib/erlang/25.3) to anotherhost (/usr/local/lib/erlang/25.3) ...\n```\n\nOn anotherhost, you can activate this installation running the following command:\n\n```console\n$ . /usr/local/lib/erlang/25.3/activate\n```\n\nLater on, you can leave the installation typing:\n\n```console\n$ kerl_deactivate\n```\n\n### Building Erlang/OTP from a GitHub fork\n\nIt is possible to build Erlang/OTP from a GitHub fork, by using the `KERL_BUILD_BACKEND=git` and\nsetting `OTP_GITHUB_URL` to the URL of the fork. For example, to build `<orgname>'s` Erlang/OTP fork:\n\n<!-- markdownlint-disable MD007 # line-length -->\n```console\n$ export KERL_BUILD_BACKEND=git\n$ export OTP_GITHUB_URL='https://github.com/<orgname>/otp'\n$ kerl update releases\nThe available releases are:\n24.0-rc1\n24.0-rc1.1-orgname\n...\n24.3.4.13\n24.3.4.13.1-orgname\n25.0-rc1\n...\n25.3.2.3\n26.0-rc1\n26.0-rc1.1-orgname\n...\n26.0.2\n```\n<!-- markdownlint-enable MD007 # line-length -->\n\nFrom here (provided the `KERL_BUILD_BACKEND` and `OTP_GITHUB_URL` variables remain in place), it is\npossible to use `kerl` as before:\n\n```console\n$ kerl build 26.0-rc1.1-orgname 26.0-rc1.1-orgname\n```\n\n### Building Erlang/OTP from a Git source\n\nYou can build Erlang/OTP directly from a Git repository with a command of the form\n`kerl build git <git_url> <git_version> <build_name>` where `<git_version>` can\nbe either a branch, a tag or a commit id that will be passed to `git checkout`:\n\n```console\n$ kerl build git https://github.com/erlang/otp.git OTP-24.3.4.13 24.3.4.13\nChecking out Erlang/OTP git repository from https://github.com/erlang/otp.git...\nBuilding Erlang/OTP OTP-24.3.4.13 from git, please wait...\nErlang/OTP 25.3 from git has been successfully built\n```\n\n### Debugging `kerl` usage\n\nIf `KERL_DEBUG` is set to a value, then `kerl` will emit copious debug logging, including\na best effort attempt at line numbers. The line numbers may or may not be accurate if\n`kerl` is run under the `dash` shell, as is commonly found in Alpine Linux/Docker images.\n\n### Configuring `kerl`\n\nYou can tune `kerl` using the `.kerlrc` file in your `$HOME` directory.\n\n## `kerl` options\n\n`kerl` options can be passed either via `.kerlrc` or environment variables, as shown below.\n\n### Color configuration\n\n#### `KERL_COLORIZE`\n\nDefault: 1 (Enabled)\nEnable VT100 colorizing if `tput` available (provided by `ncurses`). Set to 0 to disable.\nColorization will be disabled anyway if necessary requirements are missing.\n\nColor for log levels can be overriden, by setting ANSI numerical color code to variables\n`KERL_COLOR_*` :\n\n- `KERL_COLOR_E` : (1=red) Error level color\n- `KERL_COLOR_W` : (3=yellow) Warning level color\n- `KERL_COLOR_N` : (4=blue) Notice level color\n- `KERL_COLOR_T` : (6=cyan) Tip level color\n- `KERL_COLOR_S` : (2=green) Success level color\n- `KERL_COLOR_D` : (9) Default Terminal color\n\n### Locations on disk\n\n#### `KERL_BASE_DIR`\n\nDefault: `$HOME/.kerl`\nDirectory in which `kerl` will cache artifacts for building and installing.\n\n#### `KERL_CONFIG`\n\nDefault: `$HOME/.kerlrc`\nFile from which to source `kerl` configuration\n\n#### `KERL_DOWNLOAD_DIR`\n\nDefault: `${KERL_BASE_DIR}/archives`\nDirectory in which to place downloaded artifacts\n\n#### `KERL_BUILD_DIR`\n\nDefault: `${KERL_BASE_DIR}/builds`\nDirectory in which `kerl` will perform builds\n\n#### `KERL_GIT_DIR`\n\nDefault: `${KERL_BASE_DIR}/gits`\nDirectory in which `kerl` will clone Git repositories for building.\n\n### Build configuration\n\n#### `KERL_AUTOCLEAN`\n\nDefault: 1 (Enabled)\nClean all build artifacts but the log file on failure. This allows safe build retries\nafter failure while still keeping a log file with all attempted builds until\nsuccess.\n\nSet to 0 to keep build artifacts on failure.\n\n#### `KERL_CONFIGURE_OPTIONS`\n\nSpace-separated options to pass to `configure` when building Erlang/OTP.\n\n#### `KERL_CONFIGURE_APPLICATIONS`\n\nSpace-separated list of Erlang/OTP applications which should exclusively be built.\n\n#### `KERL_CONFIGURE_DISABLE_APPLICATIONS`\n\nSpace-separated list of Erlang/OTP applications to disable during building.\n\n#### `KERL_BUILD_PLT`\n\nCreate a PLT file alongside the built release.\n\n#### `KERL_USE_AUTOCONF`\n\nUse `autoconf` during build process.\n\n**Note**: automatically enabled when using `KERL_BUILD_BACKEND=git`\n\n#### `KERL_BUILD_BACKEND`\n\nDefault value: `git`\nAcceptable values: `tarball`, `git`\n\n- `tarball`: fetch Erlang/OTP releases from <erlang.org>\n- `git`: fetch Erlang/OTP releases from [`$OTP_GITHUB_URL`](#otp_github_url)\n\n**Note**: docs are only fetched when this is set to `tarball`. To enable creation of docs when set to\n`git`, one must also set [`$KERL_BUILD_DOCS`](#kerl_build_docs).\n\n**Note**: this option has no effect when using `kerl build git...`, which invokes `kerl` to directly\nclone a Git repository and build from there.\n\n#### `KERL_RELEASE_TARGET`\n\nAllows building, alongside the regular VM, a list of various runtime types for debugging\n(such as `cerl -debug` or `cerl -asan`)\n\n**Note**: enable this build using `KERL_RELEASE_TARGET=\"debug asan\"`\n\n**Note**: available types: `opt`, `gcov`, `gprof`, `debug`, `valgrind`, `asan` or `lcnt`\n\nFor more information: see  \"How to Build a Debug Enabled Erlang RunTime System\" in\n<https://www.erlang.org/doc/installation_guide/install>.\n\n#### `OTP_GITHUB_URL`\n\nDefault value: `https://github.com/erlang/otp`\nAcceptable value: any GitHub fork of Erlang/OTP\n\n#### `KERL_BUILD_DOCS`\n\nIf `$KERL_BUILD_DOCS` is set, `kerl` will create docs from the built Erlang/OTP version regardless of\norigin (`tarball` backend from <erlang.org> or via `kerl build git`, or via `git` backend).\n\nIf `$KERL_BUILD_DOCS` is unset, `kerl` will only install docs when **not** installing a build\ncreated via `kerl build git...`, and according to `KERL_INSTALL_HTMLDOCS` and `KERL_INSTALL_MANPAGES`.\n\n#### `KERL_DOC_TARGETS`\n\nDefault: `chunks`\nAvailable targets:\n\n- `man`: install manpage docs.\n- `html`: install HTML docs.\n- `pdf`: install PDF docs.\n- `chunks`: install the \"chunks\" format to get documentation from the `erl` REPL.\n\nYou can set multiple type of targets separated by space, example `$KERL_DOC_TARGETS=\"man html pdf chunks\"`\n\n#### `KERL_INSTALL_MANPAGES`\n\nInstall man pages when not building from Git source.\n\nIt's noteworthy that when not using `KERL_BUILD_DOCS=yes`, the docset that may be downloaded can be\nup to 120 MB.\n\n#### `KERL_INSTALL_HTMLDOCS`\n\nInstall HTML documentation when not building from Git source.\n\nIt's noteworthy that when not using `KERL_BUILD_DOCS=yes`, the docset that may be downloaded can be\nup to 120 MB.\n\n#### `KERL_SASL_STARTUP`\n\nBuild Erlang/OTP to use SASL startup instead of minimal (default, when var is unset).\n\n### Activation configuration\n\nThe following applies when activating an installation (i.e. `. ${KERL_DEFAULT_INSTALL_DIR}/19.2/activate`).\n\n#### `KERL_ENABLE_PROMPT`\n\nWhen set, automatically prefix the shell prompt with a section containing the\nErlang/OTP version (see [`$KERL_PROMPT_FORMAT`](#kerl_prompt_format) ).\n\n#### `KERL_PROMPT_FORMAT`\n\nDefault: `(%BUILDNAME%)`\nAvailable variables:\n\n- `%BUILDNAME%`: name of the `kerl` build (e.g. `my_test_build_18.0`)\n- `%RELEASE%`: name of the Erlang/OTP release (e.g. `19.2` or `R16B02`)\n\nThe format of the prompt section to add.\n\n### Installation configuration\n\n#### `KERL_DEFAULT_INSTALL_DIR`\n\nEffective when calling `kerl install <build>` with no installation location argument.\n\nIf unset, `$PWD` is used.\n\nIf set, install the build under `$KERL_DEFAULT_INSTALL_DIR/${buildname}`.\n\n#### `KERL_APP_INSTALL_DIR`\n\nEffective when calling `kerl upgrade`. This is the folder where the `kerl` application\nresides.\n\nIf unset, `$PWD` is used.\n\nIf set, `kerl` is installed at `$KERL_APP_INSTALL_DIR/kerl`.\n\n#### `KERL_DEPLOY_SSH_OPTIONS` + `KERL_DEPLOY_RSYNC_OPTIONS`\n\nOptions passed to `ssh` and `rsync` during `kerl deploy` tasks.\n\n## Command reference\n\nYou can also get information on the following by executing `kerl` (no parameters) on your shell.\n\n### `build`\n\n```console\n$ kerl build <release> <build_name>\n$ # or\n$ kerl build git <git_url> <git_version> <build_name>\n```\n\nCreates a named build either from an official Erlang/OTP release or from a git repository.\n\n```console\n$ kerl build 25.3 25.3\n$ #or\n$ kerl build git https://github.com/erlang/otp.git OTP-24.3.4.13 24.3.4.13\n```\n\n#### Tuning\n\n##### Configure options\n\nYou can specify the configure options to use when building Erlang/OTP with the\n`KERL_CONFIGURE_OPTIONS` variable, either in your `$HOME/.kerlrc` file or\nprepending it to the command line. A full list of all options can be found the in\n[Erlang/OTP documentation](https://erlang.org/doc/installation_guide/INSTALL.html#Advanced-configuration-and-build-of-ErlangOTP_Configuring).\n\n##### Configure applications\n\nIf non-empty, you can specify the subset of applications to use when building\n(and subsequent installing) Erlang/OTP with the `KERL_CONFIGURE_APPLICATIONS`\nvariable, either in your `$HOME/.kerlrc` file or prepending it to the command\nline.\n\n```console\n$ KERL_CONFIGURE_APPLICATIONS=\"kernel stdlib sasl\" kerl build 25.0.3 25.0.3-minimal\n```\n\n##### Configure disable applications\n\nIf non-empty, you can specify the subset of applications to disable when\nbuilding (and subsequent installing) Erlang/OTP with the\n`KERL_CONFIGURE_DISABLE_APPLICATIONS` variable, either in your `$HOME/.kerlrc`\nfile or prepending it to the command line.\n\n```console\n$ KERL_CONFIGURE_DISABLE_APPLICATIONS=\"odbc\" kerl build 24.3.4.13 24.3.4.13-no-odbc\n```\n\n##### Enable autoconf\n\nYou can enable the use of `autoconf` in the build process setting\n`KERL_USE_AUTOCONF=yes` in your `$HOME/.kerlrc` file.\n\n**Note**: `autoconf` is always enabled for Git builds.\n\n##### Using shell export command in .kerlrc\n\nConfigure variables which includes spaces such as those in `CFLAGS` cannot be\npassed on with `KERL_CONFIGURE_OPTIONS`. In such a case you can use shell\n`export` command to define the environment variables for `./configure`. Note\nwell: this method has a side effect to change your shell execution environment\nafter activating a `kerl` installation of Erlang/OTP. Here is an example of\n`.kerlrc` for building Erlang/OTP for FreeBSD with clang compiler:\n\n<!-- markdownlint-disable MD007 # line-length -->\n```console\n$ # for clang\n$ export CC=clang CXX=clang CFLAGS=\"-g -O3 -fstack-protector\" LDFLAGS=\"-fstack-protector\"\n$ # compilation options\n$ KERL_CONFIGURE_OPTIONS=\"--disable-native-libs --enable-vm-probes --with-dynamic-trace=dtrace --with-ssl=/usr/local --with-javac --enable-hipe --enable-kernel-poll --with-wx-config=/usr/local/bin/wxgtk2u-2.8-config --without-odbc --enable-threads --enable-sctp --enable-smp-support\"\n```\n<!-- markdownlint-enable MD007 # line-length -->\n\nIn case you cannot access the default directory for temporary files (`/tmp`) or\nsimply want them somewhere else, you can also provide your own directory with\nthe variable `TMP_DIR`.\n\n```console\n$ export TMP_DIR=/your/custom/temporary/dir\n```\n\n#### Building documentation\n\nPrior to `kerl` 1.0, `kerl` always downloaded prepared documentation from\nerlang.org. Now if `KERL_BUILD_DOCS=yes` is set, `kerl` will build the man pages\nand HTML documentation from the source repository in which it is working.\n\n**Note**: this variable takes precedent over the other documentation parameters.\n\n### `install`\n\n#### Installing a build\n\n```console\n$ kerl install <build_name> [directory]\n```\n\nInstalls a named build to the specified filesystem location.\n\n```console\n$ kerl install 25.3 /usr/local/lib/erlang/25.3\n```\n\nIf path is omitted the current working directory will be used. However, if\n`KERL_DEFAULT_INSTALL_DIR` is defined in `$HOME/.kerlrc`,\n`KERL_DEFAULT_INSTALL_DIR/<build-name>` will be used instead.\n\n##### Install location restrictions\n\n**Warning**: `kerl` assumes the given installation directory is for its sole use.\nIf you later delete it with the `kerl delete` command, the whole directory will\nbe deleted, along with anything you may have added to it!\n\nSo only install `kerl` in an empty (or non-existant) directory.\n\nIf you attempt to install `kerl` in `$HOME` or `.erlang` or `$KERL_BASE_DIR`,\nthen `kerl` will give you an error and refuse to proceed. If you try to install\n`kerl` in a directory that exists and is not empty, `kerl` will give you an error.\n\n##### Tuning\n\n###### SASL startup\n\nYou can have SASL started automatically setting `KERL_SASL_STARTUP=yes` in your\n`$HOME/.kerlrc` file or prepending it to the command line.\n\n###### Manpages installation\n\nYou can have manpages installed automatically setting\n`KERL_INSTALL_MANPAGES=yes` in your `$HOME/.kerlrc` file or prepending it to the\ncommand line.\n\n**Note**: for Git-based builds, you want to set `KERL_BUILD_DOCS=yes`\n\n###### HTML docs installation\n\nYou can have HTML docs installed automatically setting\n`KERL_INSTALL_HTMLDOCS=yes` in your `$HOME/.kerlrc` file or prepending it to the\ncommand line.\n\n*Note*: for Git-based builds, you want to set `KERL_BUILD_DOCS=yes`\n\n#### Documentation installation\n\nMan pages will be installed to `[path]/man` and HTML docs will be installed in\n`[path]/html`.  The `kerl` `activate` script manipulates the MANPATH of the current\nshell such that `man 3 gen_server` or `erl -man gen_server` should work perfectly.\n\nDo not fret - `kerl_deactivate` restores your shell's `MANPATH` to whatever its\noriginal value was.\n\n### `deploy`\n\n```console\n$ kerl deploy <[user@]host> [directory] [remote_directory]\n```\n\nDeploys the specified installation to the given host and location.\n\n```console\n$ kerl deploy anotherhost /path/to/install/dir\n```\n\nIf `[remote_directory]` is omitted the specified `[directory]` will be used.\n\nIf both `[directory]` and `[remote_directory]` are omitted the current working directory will be used.\n\n*NOTE*: `kerl` assumes the specified host is accessible via `ssh` and `rsync`.\n\n#### Tuning\n\n##### Additional SSH options\n\nYou can have additional options given to `ssh` by setting them in the\n`KERL_DEPLOY_SSH_OPTIONS` variable in your `$HOME/.kerlrc` file or on the command\nline, e.g. `KERL_DEPLOY_SSH_OPTIONS='-qx -o PasswordAuthentication=no'`.\n\n##### Additional RSYNC options\n\nYou can have additional options given to `rsync` by setting them in the\n`KERL_DEPLOY_RSYNC_OPTIONS` variable in your `$HOME/.kerlrc` file or on the\ncommand line, e.g. `KERL_DEPLOY_RSYNC_OPTIONS='--delete'`.\n\n### `update`\n\n```console\n$ kerl update releases\n```\n\nIf `KERL_BUILD_BACKEND=tarball` this command fetches the up-to-date list of Erlang/OTP\nreleases from erlang.org.\n\nIf it is set to `KERL_BUILD_BACKEND=git` this command fetches an up-to-date\nlist of Erlang/OTP tags from the official Erlang/OTP GitHub repository.\n\n### `list`\n\n```console\n$ kerl list <releases|builds|installations>\n```\n\nLists the releases, builds or installations available.\n\n### `delete`\n\n```console\n$ kerl delete build <build_name>\n$ # or\n$ kerl delete installation <directory>\n```\n\nDeletes the specified build or installation.\n\n```console\n$ kerl delete build 25.3\nThe 25.3 build has been deleted\n```\n\n```console\n$ kerl delete installation /usr/local/lib/erlang/25.3\nThe installation in /usr/local/lib/erlang/25.3 has been deleted\n```\n\n### `active`\n\n```console\n$ kerl active\n```\n\nPrints the path of the currently active installation, if any.\n\n```console\n$ kerl active\nThe current active installation is:\n/usr/local/lib/erlang/25.3\n```\n\n### `status`\n\n```console\n$ kerl status\n```\n\nPrints the available builds and installations as well as the currently active installation.\n\n```console\n$ kerl status\nAvailable builds:\n25.3,25.3\n25.3,25.3-builtdocs\n----------\nAvailable installations:\n25.3 /usr/local/lib/erlang/25.3\n----------\nThe current active installation is:\n/usr/local/lib/erlang/25.3\nDialyzer PLT for the active installation is:\n/usr/local/lib/erlang/25.3/dialyzer/plt\nThe build options for the active installation are:\n...\n```\n\n### `path`\n\n```console\n$ kerl path [installation]\n```\n\nPrints the path of the currently active installation if one is active. When given an\ninstallation name, it will return the path to that installation location on disk.\nThis makes it useful for automation without having to run `kerl`'s output through\nother tools to extract to path information.\n\n```console\n$ kerl path\nNo active kerl-managed erlang installation\n```\n\n```console\n$ kerl path 24.3.3\n/usr/local/lib/erlang/24.3.3\n```\n\n### `build-install`\n\n```console\n$ kerl build-install <release> [build_name] [directory]\nkerl build-install git <git_url> <git_version> <build_name> [directory]\n```\n\nCombines `kerl build` and `kerl install` into a single command.\n\n### `plt`\n\nPrints Dialyzer PLT path for the active installation.\n\n### `prompt`\n\nPrints a string suitable for insertion in prompt.\n\n### `cleanup`\n\n```console\n$ kerl cleanup <build_name|all>\n```\n\nRemove compilation artifacts (use after installation), for a given build or for \"all\".\n\n### `version`\n\nPrints current version.\n\n## Important notes\n\n### Compiling crypto on older macOS\n\nApple stopped shipping OpenSSL in OS X 10.11 (El Capitan) in favor of Apple's\nown SSL library. That makes using homebrew the most convenient way to install\nopenssl on macOS 10.11 or later. Additionally, homebrew [stopped creating](https://github.com/Homebrew/brew/pull/612)\nsymlinks from the homebrew installation directory to `/usr/local`, so in\nresponse to this, *if* you're running El Capitan, Sierra, or High Sierra\n*and* you have homebrew installed, *and* you used it to install openssl,\n`kerl` will ask homebrew for the openssl installation prefix and configure Erlang/OTP\nto build with that location automatically.\n\n**Important**: if you already have `--with-ssl` in your `.kerlrc`, `kerl`\nwill honor that instead, and will not do any automatic configuration.\n\n### Note on .kerlrc\n\nSince `.kerlrc` is a dot file for `/bin/sh`, running shell commands inside the\n`.kerlrc` will affect the shell and environment variables for the commands being\nexecuted later. For example, the shell `export` commands in `.kerlrc` will affect\n*your login shell environment* when activating `curl`.  Use with care.\n\n## Shell support\n\n### fish\n\n`kerl` has basic support for the fish shell.\n\nTo activate an installation:\n\n```console\n$ source /path/to/install/dir/activate.fish\n```\n\nDeactivation is the same as in other shells:\n\n```console\n$ kerl_deactivate\n```\n\n### C\n\n`kerl` has basic support for the C shells (`csh`, `tcsh`, etc.).\n\nTo activate an installation:\n\n```console\n$ source /path/to/install/dir/activate.csh\n```\n\nThe activation script sources file `.kerlrc.csh` instead of `.kerlrc`.\n\nDeactivation is the same as in other shells:\n\n```console\n$ kerl_deactivate\n```\n\n### Bash\n\nBash completion is available from\n<https://github.com/kerl/kerl/raw/master/bash_completion/kerl>.\n\n### Zsh\n\nZsh completion is available from\n<https://github.com/kerl/kerl/raw/master/zsh_completion/_kerl>.\n\n## The `kerl` glossary\n\nHere are the abstractions `kerl` is handling:\n\n- **releases**: Erlang/OTP releases from [erlang.org](https://erlang.org)\n\n- **builds**: the result of configuring and compiling releases or Git repositories\n\n- **installations**: the result of deploying builds to filesystem locations (also referred to as \"sandboxes\")\n\n## The `kerl` project\n\n### Erlang/OTP support policy\n\nAs of 2021 September 17, we are supporting the current Erlang/OTP release version\nand 2 prior release versions (same as upstream Erlang/OTP). Older Erlang/OTP releases\nmay or may not work. We will advance release support as new releases of Erlang/OTP\nbecome available.\n\n### Code of conduct\n\nYou can read more about our code of conduct at [CODE_OF_CONDUCT.md](CODE_OF_CONDUCT.md).\n\n### Contributing to `kerl`\n\nContributions are welcome! Be sure to read and follow the general guidelines made explicit in\n[CONTRIBUTING.md](CONTRIBUTING.md).\n\n### License\n\n`kerl` is MIT-licensed, as per [LICENSE.md](LICENSE.md). You'll also find the same license notice\ninside the distributable shell script.\n\n### Changelog\n\nCheck [CHANGELOG.md](CHANGELOG.md) and also [GitHub releases](https://github.com/kerl/kerl/releases)."
}
