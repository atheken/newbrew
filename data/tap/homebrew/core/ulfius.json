{
  "name": "ulfius",
  "full_name": "ulfius",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "HTTP Framework for REST Applications in C",
  "license": "LGPL-2.1-only",
  "homepage": "https://github.com/babelouest/ulfius/",
  "versions": {
    "stable": "2.7.13",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/babelouest/ulfius/archive/refs/tags/v2.7.13.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "b1679bc0885acedff66abad84b51f492497ab1114d6911d07d2cf7eb77ccadce"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/ulfius/blobs/sha256:40fa12cedb5436353fccc44dacd67fab19dcce8fe22440f6f064cc9a39e647f1",
          "sha256": "40fa12cedb5436353fccc44dacd67fab19dcce8fe22440f6f064cc9a39e647f1"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/ulfius/blobs/sha256:ced5108089d089fd93cf9de184c9260a3cd3dd23147b7bed5b2633d25edb1886",
          "sha256": "ced5108089d089fd93cf9de184c9260a3cd3dd23147b7bed5b2633d25edb1886"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/ulfius/blobs/sha256:b1b8019a42955b8e2833bc7593c8fda7e7604cafdbc277a3bd5c690755c61458",
          "sha256": "b1b8019a42955b8e2833bc7593c8fda7e7604cafdbc277a3bd5c690755c61458"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/ulfius/blobs/sha256:71c94a6fe3e1800a700d1966cf241284552a37fd44efe2f6e010bc9325306c5c",
          "sha256": "71c94a6fe3e1800a700d1966cf241284552a37fd44efe2f6e010bc9325306c5c"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/ulfius/blobs/sha256:c9d813332cc047457f5ef25b1ed68ccf16ceccdffaaa3a3683f121a7bc7c5e1a",
          "sha256": "c9d813332cc047457f5ef25b1ed68ccf16ceccdffaaa3a3683f121a7bc7c5e1a"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/ulfius/blobs/sha256:9617ea427778fba53fc1f126177540a1b3b23ed2ba180b045f63c8821c14aba2",
          "sha256": "9617ea427778fba53fc1f126177540a1b3b23ed2ba180b045f63c8821c14aba2"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ulfius/blobs/sha256:0763ec79fb970c405df59a59bad803d2910338fe9098bdca35e484d593982e68",
          "sha256": "0763ec79fb970c405df59a59bad803d2910338fe9098bdca35e484d593982e68"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [
    "gnutls",
    "jansson",
    "libmicrohttpd"
  ],
  "test_dependencies": [
    "pkg-config"
  ],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "curl",
    "zlib"
  ],
  "uses_from_macos_bounds": [
    {},
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/ulfius.rb",
  "ruby_source_checksum": {
    "sha256": "66d9256c18b8e7c3d3bf33bef8daeaa070dc6d4999e5a25e8609258274880ef0"
  },
  "date_added": "2023-02-23T11:21:40+00:00",
  "readme": "# Ulfius HTTP Framework\n\n![.github/workflows/ccpp.yml](https://github.com/babelouest/ulfius/workflows/.github/workflows/ccpp.yml/badge.svg)\n![CodeQL](https://github.com/babelouest/ulfius/workflows/CodeQL/badge.svg)\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/3195/badge)](https://bestpractices.coreinfrastructure.org/projects/3195)\n\nHTTP Framework for REST Applications in C.\n\nBased on [GNU Libmicrohttpd](https://www.gnu.org/software/libmicrohttpd/) for the backend web server, [Jansson](http://www.digip.org/jansson/) for the json manipulation library, and [Libcurl](http://curl.haxx.se/libcurl/) for the http/smtp client API.\n\nUsed to facilitate creation of web applications in C programs with a small memory footprint, as in embedded systems applications.\n\nYou can create webservices in HTTP or HTTPS mode, stream data, or implement server websockets.\n\n## Hello World! example application\n\nThe source code of a hello world using Ulfius is the following:\n\n```C\n/**\n * test.c\n * Small Hello World! example\n * to compile with gcc, run the following command\n * gcc -o test test.c -lulfius\n */\n#include <stdio.h>\n#include <ulfius.h>\n\n#define PORT 8080\n\n/**\n * Callback function for the web application on /helloworld url call\n */\nint callback_hello_world (const struct _u_request * request, struct _u_response * response, void * user_data) {\n  ulfius_set_string_body_response(response, 200, \"Hello World!\");\n  return U_CALLBACK_CONTINUE;\n}\n\n/**\n * main function\n */\nint main(void) {\n  struct _u_instance instance;\n\n  // Initialize instance with the port number\n  if (ulfius_init_instance(&instance, PORT, NULL, NULL) != U_OK) {\n    fprintf(stderr, \"Error ulfius_init_instance, abort\\n\");\n    return(1);\n  }\n\n  // Endpoint list declaration\n  ulfius_add_endpoint_by_val(&instance, \"GET\", \"/helloworld\", NULL, 0, &callback_hello_world, NULL);\n\n  // Start the framework\n  if (ulfius_start_framework(&instance) == U_OK) {\n    printf(\"Start framework on port %d\\n\", instance.port);\n\n    // Wait for the user to press <enter> on the console to quit the application\n    getchar();\n  } else {\n    fprintf(stderr, \"Error starting framework\\n\");\n  }\n  printf(\"End framework\\n\");\n\n  ulfius_stop_framework(&instance);\n  ulfius_clean_instance(&instance);\n\n  return 0;\n}\n```\n\n## Main features\n\n### Webservice\n\n- Create a webservice in a separate thread, the endpoint is identified by its method (ex: `GET`, `POST`, `PUT`, `DELETE`, etc.) and its URL path with its optional parameters (ex: `/api/doc/@id`). The webservice is executed in a callback function.\n\n- Stream large amount of data with a reduced memory footprint.\n\n- Websocket service, the websocket messages exchange is executed in dedicated callback functions.\n\n### Client requests\n\n- Client http[s] and smtp requests execution, the response is parsed in a dedicated structure.\n\n- Client websocket request execution, the websocket messages exchange is executed in dedicated callback functions.\n\n### Websockets\n\n- Create a websocket service application\n\n- Create websocket client application\n\n- CLI to connect to a remote websocket: [uwsc](https://github.com/babelouest/ulfius/tree/master/tools/uwsc)\n\n## Installation\n\nSee [INSTALL.md](INSTALL.md) file for installation details\n\n## Documentation\n\nSee [API.md](API.md) file for API documentation details\n\nSee the [online documentation](https://babelouest.github.io/ulfius/) for a doxygen format of the API documentation.\n\n## Example programs source code\n\nExample programs are available to understand the different functionalities available, see [example_programs](https://github.com/babelouest/ulfius/blob/master/example_programs) folder for detailed sample source codes and documentation.\n\n## Example callback functions\n\nExample callback functions are available in the folder [example_callbacks](https://github.com/babelouest/ulfius/blob/master/example_callbacks). The example callback functions available are:\n- static file server: to provide static files of a specific folder\n- oauth2 bearer: to check the validity of a Oauth2 bearer jwt token. Requires [libjwt](https://github.com/benmcollins/libjwt).\n\n## Projects using Ulfius framework\n\n- [Glewlwyd](https://github.com/babelouest/glewlwyd), a lightweight SSO server that provides OAuth2 and OpenID Connect authentication protocols\n- [Le Biniou](https://biniou.net/), user-friendly yet powerful music visualization / VJing tool\n- [Angharad](https://github.com/babelouest/angharad), House automation system for ZWave and other types of devices\n- [Hutch](https://github.com/babelouest/hutch), a safe locker for passwords and other secrets, using JavaScript client side encryption only\n- [Taliesin](https://github.com/babelouest/taliesin), a lightweight audio streaming server\n- [Taulas Raspberry Pi Serial interface](https://github.com/babelouest/taulas/tree/master/taulas_raspberrypi_serial), an interface for Arduino devices that implement [Taulas](https://github.com/babelouest/taulas/) protocol, a house automation protocol for Angharad\n\n## Questions, problems ?\n\nI'm open for questions and suggestions, feel free to open an [issue](https://github.com/babelouest/ulfius/issues), a [pull request](https://github.com/babelouest/ulfius/pulls) or send me an [e-mail](mailto:mail@babelouest.io) if you feel like it!\n\nYou can visit the IRC channel #ulfius on the [Libera.â€‹Chat](https://libera.chat/) network."
}
