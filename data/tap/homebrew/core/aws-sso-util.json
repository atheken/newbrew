{
  "name": "aws-sso-util",
  "full_name": "aws-sso-util",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Smooth out the rough edges of AWS SSO (temporarily, until AWS makes it better)",
  "license": "Apache-2.0",
  "homepage": "https://github.com/benkehoe/aws-sso-util",
  "versions": {
    "stable": "4.32.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://files.pythonhosted.org/packages/6e/93/90d3753ac7ea3148c41c43929cace11d8fc1331c629497ab24a91a6c3724/aws_sso_util-4.32.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "2649dcf3c594851a0c55ed6ebf2df70205d1debd6e58e263738430d4703890ec"
    },
    "head": {
      "url": "https://github.com/benkehoe/aws-sso-util.git",
      "branch": "master"
    }
  },
  "revision": 1,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/aws-sso-util/blobs/sha256:fd132d3f0e2b183ce830926b0fac0c0a81b248c4f59a273da520d13c44bdc697",
          "sha256": "fd132d3f0e2b183ce830926b0fac0c0a81b248c4f59a273da520d13c44bdc697"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/aws-sso-util/blobs/sha256:a2c8be83f5e68929e2bd7ab64c1ac898631c1b3b443cc507ba0f29fca32b8c69",
          "sha256": "a2c8be83f5e68929e2bd7ab64c1ac898631c1b3b443cc507ba0f29fca32b8c69"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/aws-sso-util/blobs/sha256:1b5833f19b218e08e90efb844657b71eca9048af93cd80b87941bb3c0d18e55b",
          "sha256": "1b5833f19b218e08e90efb844657b71eca9048af93cd80b87941bb3c0d18e55b"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/aws-sso-util/blobs/sha256:0c5dab5a527ff9cd994451387fbacd2f70b9408ea00404505234c875dbab91b9",
          "sha256": "0c5dab5a527ff9cd994451387fbacd2f70b9408ea00404505234c875dbab91b9"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/aws-sso-util/blobs/sha256:76499bc6ae84fe3d34106732a90653c8465fe9123726d0e0766fa607963b2ddc",
          "sha256": "76499bc6ae84fe3d34106732a90653c8465fe9123726d0e0766fa607963b2ddc"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/aws-sso-util/blobs/sha256:bdcb1eb52cb7a5d4af32d18794e590930ff5b4be78760028309026d557eda079",
          "sha256": "bdcb1eb52cb7a5d4af32d18794e590930ff5b4be78760028309026d557eda079"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/aws-sso-util/blobs/sha256:4f01b32504735060fe474b12049a18e79d7062084056d3977f9babb141bbd6b1",
          "sha256": "4f01b32504735060fe474b12049a18e79d7062084056d3977f9babb141bbd6b1"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "python@3.11",
    "pyyaml",
    "six"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "2706c66e8def3eeba4d9bf1adf66221c8ad70701",
  "ruby_source_path": "Formula/aws-sso-util.rb",
  "ruby_source_checksum": {
    "sha256": "8ef2d650d3f1b70392269cfd0264167fe8f7b587f2ac0574ae0f2f50567848d9"
  },
  "date_added": "2021-10-01T13:07:01+00:00",
  "readme": "# aws-sso-util\n## Making life with AWS IAM Identity Center (formerly AWS SSO) a little easier\n\n[IAM Identity Center](https://aws.amazon.com/single-sign-on/) (formerly AWS SSO) has some rough edges, and `aws-sso-util` is here to smooth them out, hopefully temporarily until AWS makes it better.\n\nYou can read a primer on IAM Identity Center [here](docs/primer.md).\nNote that because it was originally called AWS SSO, field names in configuration and APIs will continue to have \"SSO\" in them, rather than Identity Center.\n\n`aws-sso-util` contains utilities for the following:\n* Configuring `.aws/config`\n* Logging in/out\n* AWS SDK support\n* Looking up identifiers\n* CloudFormation\n\n`aws-sso-util` supersedes `aws-sso-credential-process`, which is still available in its original form [here](https://github.com/benkehoe/aws-sso-credential-process).\nRead the updated docs for `aws-sso-util credential-process` [here](docs/credential-process.md).\n\n## Programmatic interaction with Identity Center\n\n`aws-sso-util` provides command-line utilities. The underlying Python library for Identity Center authentication is [`aws-sso-lib`](lib/README.md), which has useful functions like interactive login, creating a boto3 session for specific a account and role, and the programmatic versions of the `lookup` functions in `aws-sso-util`. See the documentation [here](lib/README.md).\n\n## Quickstart\n\n0. It's a good idea to [install the AWS CLI v2](https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2.html) (which has Identity Center support).\n\n1. I recommend you install [`pipx`](https://pipxproject.github.io/pipx/), which installs the tool in an isolated virtualenv while linking the script you need.\n\nMac [and Linux](https://docs.brew.sh/Homebrew-on-Linux):\n```bash\nbrew install pipx\npipx ensurepath\n```\n\nOther:\n```bash\npython3 -m pip install --user pipx\npython3 -m pipx ensurepath\n```\n\n2. Install\n```bash\npipx install aws-sso-util\n```\n\n3. Learn\n```bash\naws-sso-util --help\n```\n\n4. Autocomplete\n\n`aws-sso-util` uses [click](https://click.palletsprojects.com/en/8.0.x/), which supports autocompletion.\nThe details of enabling shell completion with click vary by shell ([instructions here](https://click.palletsprojects.com/en/8.0.x/shell-completion/)), but here is an example for `.bashrc` that updates the completion script in the background.\n\n```bash\n_AWS_SSO_UTIL_COMPLETE_SCRIPT_DIR=~/.local/share/aws-sso-util\n_AWS_SSO_UTIL_COMPLETE_SCRIPT=$_AWS_SSO_UTIL_COMPLETE_SCRIPT_DIR/complete.sh\nif which aws-sso-util > /dev/null; then\n  mkdir -p $_AWS_SSO_UTIL_COMPLETE_SCRIPT_DIR\n  ({ _AWS_SSO_UTIL_COMPLETE=bash_source aws-sso-util > $_AWS_SSO_UTIL_COMPLETE_SCRIPT.tmp ;\n    mv $_AWS_SSO_UTIL_COMPLETE_SCRIPT.tmp $_AWS_SSO_UTIL_COMPLETE_SCRIPT; } &)\n  if [ -f $_AWS_SSO_UTIL_COMPLETE_SCRIPT ]; then\n    source $_AWS_SSO_UTIL_COMPLETE_SCRIPT\n  fi\nfi\n```\n\n## Configuring `.aws/config`\n\nRead the full docs for `aws-sso-util configure` and `aws-sso-util roles` [here](docs/configure.md).\n\nThe AWS CLI and most AWS SDKs support Identity Center configuration in `~/.aws/config`; each profile specifies the account and role (the *Identity Center* role, also known as a Permission Set, which is distinct from the corresponding IAM role within the given account) to use.\nA profile configured for Identity Center looks like this:\n\n```ini\n[profile my-sso-profile]\nsso_start_url = https://example.awsapps.com/start\nsso_region = us-east-1 # the region Identity Center is configured in\nsso_account_id = 123456789012\nsso_role_name = MyRoleName\nregion = us-east-2 # the region to use for AWS API calls\n```\n\nYou can view the roles you have available to you with `aws-sso-util roles`, which you can use to configure your profiles in [`~/.aws/config`](https://ben11kehoe.medium.com/aws-configuration-files-explained-9a7ea7a5b42e), or you can use `aws configure sso` in the AWS CLI v2, but `aws-sso-util` also provides functionality to directly configure profiles for you.\n\n`aws-sso-util configure` has two subcommands, `aws-sso-util configure profile` for configuring a single profile, and `aws-sso-util configure populate` to add _all_ your permissions as profiles, in whatever region(s) you want (with highly configurable profile names).\n\nYou probably want to set the environment variables `AWS_DEFAULT_SSO_START_URL` and `AWS_DEFAULT_SSO_REGION`, which will inform these commands of your Identity Center start url and region (that is, the region that you've configured Identity Center in), so that you don't have to pass them in as parameters every time.\n\n`aws-sso-util configure profile` takes a profile name and prompts you with the accounts and roles you have access to, to configure that profile.\n\n`aws-sso-util configure populate` takes one or more regions, and generates a profile for each account+role+region combination.\nThe profile names are completely customizable.\n\n## Logging in and out\n\nRead the full docs for `aws-sso-util login` and `aws-sso-util logout` [here](docs/login.md).\n\nA problem with [`aws sso login`](https://awscli.amazonaws.com/v2/documentation/api/latest/reference/sso/login.html) is that it's required to operate on a profile, that is, you have to tell it to log in to Identity Center *plus some account and role.*\nBut the whole point of Identity Center is that you log in once for *many* accounts and roles.\nYou could have a particular account and role set up in your default profile, but I prefer not to have a default profile so that I'm always explicitly selecting a profile and never accidentally end up in the default by mistake.\n`aws-sso-util login` solves this problem by letting you *just log in* without having to think about where you'll be using those credentials.\n\n## Running one-off commands as a specific account and role\n\nRead the full docs for `aws-sso-util run-as` [here](docs/run-as.md).\n\nIn general, in the Identity Center world, you shouldn't be trying to manually set credentials in an environment, nor thinking about \"logging in\" to a particular account and role.\nYou log in to *Identity Center* once, and then *use* accounts and roles with that session.\nYou should orient yourself around configuration profiles—use [`aws-sso-util configure populate`](configure.md) to set up profiles for every account and role you have access to, and then use either the `--profile` argument to tell a command to use a specific profile, or set the `AWS_PROFILE` environment variable to have all commands your shell use a particular profile unless they are told otherwise ([here's a shell function to help manage that env var](https://gist.github.com/benkehoe/0d2985e56059437e489314d021be3fbe)).\n\nHowever, there are times when it's useful to be able to run a command as a specific account and role, without needing a profile configured for it—or without knowing the profile name corresponding to the account and role.\nFor this purpose, there's `aws-sso-util run-as`.\nThink of it as the shell equivalent to [`aws_sso_lib.get_boto3_session()`](lib/README.md#get_boto3_session).\n\n## Opening the AWS console in a browser\n\n> :warning: This feature is in beta and is subject to change without a compatibility version bump.\n\nRead the full docs for `aws-sso-util console` [here](docs/console.md).\n\nYou can open the AWS console in the browser for a given account and role with `aws-sso-util console`, including going to a specific page in the console.\nThis uses the [federated sign-in](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-custom-url.html) process.\nIt also allows for the launch configuration to be packaged up as a token, which makes it easier to share between users.\n\n## Debugging issues\n\nRead the full docs for `aws-sso-util check` [here](docs/check.md).\n\n`aws-sso-util check` helps diagnose configuration and access issues.\nIt can be used to help administrators debug user issues, or as validation in shell scripting.\nIt validates that `aws-sso-util` can find an Identity Center instance configuration, and additionally whether the user has access to a particular account and/or role.\n\n## Adding Identity Center support to AWS SDKs\n\nThe credential process is added automatically (by default) by the `aws-sso-util configure` commands; you only need to read this section if you're not using that or want to understand it more fully.\nRead the full docs for `aws-sso-util credential-process` [here](docs/credential-process.md).\n\nNot all AWS SDKs have support for Identity Center (which will change eventually).\nHowever, they all have support for `credential_process`, which allows an external process to provide credentials.\n`aws-sso-util credential-process` uses this to allow these SDKs to get credentials from Identity Center.\n\nNOTE: if you test it out with your favorite script or application and get something like `NoCredentialProviders: no valid providers in chain.`, you may need to set the environment variable `AWS_SDK_LOAD_CONFIG=1`\n\n## Administrators: Looking up identifiers and assignments\n\nRead the full docs for `aws-sso-util admin lookup` and `aws-sso-util admin assignments` [here](docs/lookup.md).\n\nWhen you're creating assignments through the API or CloudFormation, you're required to use identifiers like the instance ARN, the principal ID, etc.\nThese identifiers aren't readily available through the console, and the principal IDs are not the IDs you're familiar with.\n`aws-sso-util admin lookup` allows you to get these identifers, even en masse.\n\nThere is no simple API for retrieving all assignments or even a decent subset.\nThe current best you can do is [list all the users with a particular PermissionSet on a particular account](https://docs.aws.amazon.com/singlesignon/latest/APIReference/API_ListAccountAssignments.html).\n`aws-sso-util admin assignments` takes the effort out of looping over the necessary APIs.\n\n## Administrators: CloudFormation support\n\nYou'll want to read the full docs [here](docs/cloudformation.md).\n\nIdentity Center's CloudFormation support currently only includes [`AWS::SSO::Assignment`](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sso-assignment.html), which means for every combination of principal (group or user), permission set, and target (AWS account), you need a separate CloudFormation resource.\nAdditionally, Identity Center does not support OUs as targets, so you need to specify every account separately.\n\nObviously, this gets verbose, and even an organization of moderate size is likely to have tens of thousands of assignments.\n`aws-sso-util admin cfn` provides two mechanisms to make this concise.\n\nI look forward to discarding this part of the tool once there are two prerequisites:\n1. OUs as targets for assignments\n2. An `AWS::SSO::AssignmentGroup` resource that allows specifications of multiple principals, permission sets, and targets, and performs the combinatorics directly.\n\n### CloudFormation Macro\n`aws-sso-util` defines a resource format for an AssignmentGroup that is a combination of multiple principals, permission sets, and targets, and provides a CloudFormation Macro you can deploy that lets you use this resource in your templates.\n\n### Client-side generation\n\nI am against client-side generation of CloudFormation templates, but if you don't want to trust this 3rd party macro, you can generate the CloudFormation templates directly.\n\n`aws-sso-util admin cfn` takes one or more input files, and for each input file, generates a CloudFormation template and potentially one or more child templates.\nThese templates can then be packaged and uploaded using [`aws cloudformation package`](https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudformation/package.html) or [the SAM CLI](https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html), for example.\n\nThe input files can either be templates using the Macro (using the `--macro` flag), or somewhat simpler configuration files using a different syntax.\nThese configuration files can define permission sets inline, have references that turn into template parameters, and you can provide a base template that the resulting resources are layered on top of."
}
