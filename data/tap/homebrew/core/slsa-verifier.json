{
  "name": "slsa-verifier",
  "full_name": "slsa-verifier",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Verify provenance from SLSA compliant builders",
  "license": "Apache-2.0",
  "homepage": "https://github.com/slsa-framework/slsa-verifier",
  "versions": {
    "stable": "2.3.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/slsa-framework/slsa-verifier/archive/refs/tags/v2.3.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "56f4ef585269a49f5af42cf19f0683b1593ec57f516ff2d426cd81623d4ce6ec"
    },
    "head": {
      "url": "https://github.com/slsa-framework/slsa-verifier.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/slsa-verifier/blobs/sha256:ef2c9e94be3d84837f663d99d4a34cf01484823a8bfc05bd81c719b6433d1723",
          "sha256": "ef2c9e94be3d84837f663d99d4a34cf01484823a8bfc05bd81c719b6433d1723"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/slsa-verifier/blobs/sha256:ef2c9e94be3d84837f663d99d4a34cf01484823a8bfc05bd81c719b6433d1723",
          "sha256": "ef2c9e94be3d84837f663d99d4a34cf01484823a8bfc05bd81c719b6433d1723"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/slsa-verifier/blobs/sha256:ef2c9e94be3d84837f663d99d4a34cf01484823a8bfc05bd81c719b6433d1723",
          "sha256": "ef2c9e94be3d84837f663d99d4a34cf01484823a8bfc05bd81c719b6433d1723"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/slsa-verifier/blobs/sha256:6842d91f8a81df33035a444af23f65fe2149c42eedf58ef5fd115368d45f3fef",
          "sha256": "6842d91f8a81df33035a444af23f65fe2149c42eedf58ef5fd115368d45f3fef"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/slsa-verifier/blobs/sha256:32806b0a61ab0028ad8f7864d29af5589e96be6e3d2086f8b246526d9a07acaf",
          "sha256": "32806b0a61ab0028ad8f7864d29af5589e96be6e3d2086f8b246526d9a07acaf"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/slsa-verifier/blobs/sha256:7e46674e80decb52e1734444291bedbc989cda454975a42869426ba50d2c17a9",
          "sha256": "7e46674e80decb52e1734444291bedbc989cda454975a42869426ba50d2c17a9"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/slsa-verifier/blobs/sha256:3eca13cc4e327e705e5dcc5109ee6588f3c839c82d8dbf08136daee7bc065e86",
          "sha256": "3eca13cc4e327e705e5dcc5109ee6588f3c839c82d8dbf08136daee7bc065e86"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/slsa-verifier.rb",
  "ruby_source_checksum": {
    "sha256": "8dc4d97602839cd2f040748e00ecb0c6ea9c619847ee44ff2daa48190c23ea9c"
  },
  "date_added": "2023-06-11T19:12:49-04:00",
  "readme": "# Verification of SLSA provenance\n\n[![OpenSSF Scorecard](https://api.securityscorecards.dev/projects/github.com/slsa-framework/slsa-verifier/badge)](https://api.securityscorecards.dev/projects/github.com/slsa-framework/slsa-verifier)\n[![OpenSSF Best Practices](https://bestpractices.coreinfrastructure.org/projects/6729/badge)](https://bestpractices.coreinfrastructure.org/projects/6729)\n[![Go Report Card](https://goreportcard.com/badge/github.com/slsa-framework/slsa-verifier)](https://goreportcard.com/report/github.com/slsa-framework/slsa-verifier)\n[![Slack](https://img.shields.io/static/v1?label=openssf.slack.com&message=%23slsa-tooling&color=4A154B&logo=slack)](https://slack.openssf.org/)\n[![SLSA 3](https://slsa.dev/images/gh-badge-level3.svg)](https://slsa.dev)\n\n<img align=\"right\" src=\"https://slsa.dev/images/logo-mono.svg\" width=\"140\" height=\"140\">\n\n<!-- markdown-toc --bullets=\"-\" -i README.md -->\n\n<!-- toc -->\n\n- [Overview](#overview)\n  - [What is SLSA?](#what-is-slsa)\n  - [What is provenance?](#what-is-provenance)\n  - [What is slsa-verifier?](#what-is-slsa-verifier)\n- [Installation](#installation)\n  - [Compilation from source](#compilation-from-source)\n    - [Option 1: Install via go](#option-1-install-via-go)\n    - [Option 2: Compile manually](#option-2-compile-manually)\n  - [Use the installer Action on GitHub Actions](#use-the-installer-action-on-github-actions)\n  - [Download the binary](#download-the-binary)\n- [Available options](#available-options)\n- [Option list](#option-list)\n  - [Option details](#option-details)\n- [Verification for GitHub builders](#verification-for-github-builders)\n  - [Artifacts](#artifacts)\n  - [Containers](#containers)\n  - [npm packages](#npm-packages)\n    - [The verify-npm-package command](#the-verify-npm-package-command)\n    - [npm packages built using the SLSA3 Node.js builder](#npm-packages-built-using-the-slsa3-nodejs-builder)\n    - [npm packages built using the npm CLI](#npm-packages-built-using-the-npm-cli)\n  - [Container-based builds](#container-based-builds)\n- [Verification for Google Cloud Build](#verification-for-google-cloud-build)\n  - [Artifacts](#artifacts-1)\n  - [Containers](#containers-1)\n- [Known Issues](#known-issues)\n  - [tuf: invalid key](#tuf-invalid-key)\n  - [panic: assignment to entry in nil map](#panic-assignment-to-entry-in-nil-map)\n- [Technical design](#technical-design)\n  - [Blog post](#blog-post)\n  - [Specifications](#specifications)\n  - [TOCTOU attacks](#toctou-attacks)\n\n<!-- tocstop -->\n\n## Overview\n\n### What is SLSA?\n\n[Supply chain Levels for Software Artifacts](https://slsa.dev), or SLSA (salsa),\nis a security framework, a check-list of standards and controls to prevent\ntampering, improve integrity, and secure packages and infrastructure in your\nprojects, businesses or enterprises.\n\nSLSA defines an incrementially adoptable set of levels which are defined in\nterms of increasing compliance and assurance. SLSA levels are like a common\nlanguage to talk about how secure software, supply chains and their component\nparts really are.\n\n### What is provenance?\n\nProvenance is information, or metadata, about how a software artifact was\ncreated. This could include information about what source code, build system,\nand build steps were used, as well as who and why the build was initiated.\nProvenance can be used to determine the authenticity and trustworthiness of\nsoftware artifacts that you use.\n\nAs part of the framework, SLSA defines a\n[provenance format](https://slsa.dev/provenance/) which can be used hold this\nmetadata.\n\n### What is slsa-verifier?\n\nslsa-verifier is a tool for verifying\n[SLSA provenance](https://slsa.dev/provenance/) that was generated by CI/CD\nbuilders. slsa-verifier verifies the provenance by verifying the cryptographic\nsignatures on provenance to make sure it was created by the expected builder.\nIt then verifies that various values such as the builder id, source code\nrepository, ref (branch or tag) matches the expected values.\n\nIt currently supports verifying provenance generated by:\n\n1. [SLSA generator](https://github.com/slsa-framework/slsa-github-generator)\n1. [Google Cloud Build (GCB)](https://cloud.google.com/build/docs/securing-builds/view-build-provenance).\n\n## Installation\n\nYou have two options to install the verifier.\n\n### Compilation from source\n\n#### Option 1: Install via go\n\nIf you want to install the verifier, you can run the following command:\n\n```bash\n$ go install github.com/slsa-framework/slsa-verifier/v2/cli/slsa-verifier@v2.3.0\n$ slsa-verifier <options>\n```\n\nTools like [dependabot](https://docs.github.com/en/code-security/dependabot/dependabot-version-updates/configuring-dependabot-version-updates) or [renovate](https://github.com/renovatebot/renovate) use your project's go.mod to identify the version of your Go dependencies.\nIf you install the verifier binary in CI, we strongly recommend you create a placeholder `go.mod` containing slsa-verifier as a dependency to receive updates and keep the binary up-to-date. Use the following the steps:\n\n1. Create a tooling/tooling_test.go file containing the following:\n\n```go\n//go:build tools\n// +build tools\n\npackage main\n\nimport (\n\t_ \"github.com/slsa-framework/slsa-verifier/v2/cli/slsa-verifier\"\n)\n```\n\n1. Run the following commands in the tooling directory. (It will create a go.sum file.)\n\n```bash\n$ go mod init <your-project-name>-tooling\n$ go mod tidy\n```\n\n1. Commit the tooling folder (containing the 3 files tooling_test.go, go.mod and go.sum) to the repository.\n1. To install the verifier in your CI, run the following commands:\n\n```bash\n$ cd tooling\n$ grep _ tooling_test.go | cut -f2 -d '\"' | xargs -n1 -t go install\n```\n\nAlternatively, if your project does not rely on additional tools and only uses slsa-verifier, you can instead run the following commands:\n\n```bash\n$ cd tooling\n$ go install github.com/slsa-framework/slsa-verifier/v2/cli/slsa-verifier\n```\n\n#### Option 2: Compile manually\n\n```bash\n$ git clone git@github.com:slsa-framework/slsa-verifier.git\n$ cd slsa-verifier && git checkout v2.3.0\n$ go run ./cli/slsa-verifier <options>\n```\n\n### Use the installer Action on GitHub Actions\n\nIf you need to install the verifier to run in a GitHub workflow, use the installer Action as described in [actions/installer/README.md](./actions/installer/README.md).\n\n### Download the binary\n\nDownload the binary from the latest release at [https://github.com/slsa-framework/slsa-verifier/releases/tag/v2.3.0](https://github.com/slsa-framework/slsa-verifier/releases/tag/v2.3.0)\n\nDownload the [SHA256SUM.md](https://github.com/slsa-framework/slsa-verifier/blob/main/SHA256SUM.md).\n\nVerify the checksum:\n\n```bash\n$ sha256sum -c --strict SHA256SUM.md\n  slsa-verifier-linux-amd64: OK\n```\n\n## Available options\n\nWe currently support artifact verification (for binary blobs) and container images.\n\n## Option list\n\nBelow is a list of options currently supported for binary blobs and container images. Note that signature verification is handled seamlessly without the need for developers to manipulate public keys. See [Available options](#available-options) for details on the options exposed to validate the provenance.\n\n```bash\n$ git clone git@github.com:slsa-framework/slsa-verifier.git\n$ go run ./cli/slsa-verifier/ verify-artifact --help\nVerifies SLSA provenance on artifact blobs given as arguments (assuming same provenance)\n\nUsage:\n  slsa-verifier verify-artifact [flags] artifact [artifact..]\n\nFlags:\n      --build-workflow-input map[]    [optional] a workflow input provided by a user at trigger time in the format 'key=value'. (Only for 'workflow_dispatch' events on GitHub Actions). (default map[])\n      --builder-id string             [optional] the unique builder ID who created the provenance\n  -h, --help                          help for verify-artifact\n      --print-provenance              [optional] print the verified provenance to stdout\n      --provenance-path string        path to a provenance file\n      --source-branch string          [optional] expected branch the binary was compiled from\n      --source-tag string             [optional] expected tag the binary was compiled from\n      --source-uri string             expected source repository that should have produced the binary, e.g. github.com/some/repo\n      --source-versioned-tag string   [optional] expected version the binary was compiled from. Uses semantic version to match the tag\n```\n\nMultiple artifacts can be passed to `verify-artifact`. As long as they are all covered by the same provenance file, the verification will succeed.\n\n### Option details\n\nThe following options are available:\n\n| Option                 | Description                                                                                                                                                                                                                                                                                                                                                                                               | Support                                                                                             |\n| ---------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------- |\n| `source-uri`           | Expects a source, for e.g. `github.com/org/repo`.                                                                                                                                                                                                                                                                                                                                                         | All builders                                                                                        |\n| `source-branch`        | Expects a `branch` like `main` or `dev`. Not supported for all GitHub Workflow triggers.                                                                                                                                                                                                                                                                                                                  | [GitHub builders](https://github.com/slsa-framework/slsa-github-generator#generation-of-provenance) |\n| `source-tag`           | Expects a `tag` like `v0.0.1`. Verifies exact tag used to create the binary. Supported for new [tag](https://github.com/slsa-framework/example-package/blob/main/.github/workflows/e2e.go.tag.main.config-ldflags-assets-tag.slsa3.yml#L5) and [release](https://github.com/slsa-framework/example-package/blob/main/.github/workflows/e2e.go.release.main.config-ldflags-assets-tag.slsa3.yml) triggers. | [GitHub builders](https://github.com/slsa-framework/slsa-github-generator#generation-of-provenance) |\n| `source-versioned-tag` | Like `tag`, but verifies using semantic versioning.                                                                                                                                                                                                                                                                                                                                                       | [GitHub builders](https://github.com/slsa-framework/slsa-github-generator#generation-of-provenance) |\n| `build-workflow-input` | Expects key-value pairs like `key=value` to match against [inputs](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onworkflow_dispatchinputs) for GitHub Actions `workflow_dispatch` triggers.                                                                                                                                                                      | [GitHub builders](https://github.com/slsa-framework/slsa-github-generator#generation-of-provenance) |\n\n## Verification for GitHub builders\n\n### Artifacts\n\nTo verify an artifact, run the following command:\n\n```bash\n$ slsa-verifier verify-artifact slsa-test-linux-amd64 \\\n  --provenance-path slsa-test-linux-amd64.intoto.jsonl \\\n  --source-uri github.com/slsa-framework/slsa-test \\\n  --source-tag v1.0.3\nVerified signature against tlog entry index 3189970 at URL: https://rekor.sigstore.dev/api/v1/log/entries/206071d5ca7a2346e4db4dcb19a648c7f13b4957e655f4382b735894059bd199\nVerified build using builder https://github.com/slsa-framework/slsa-github-generator/.github/workflows/builder_go_slsa3.yml@refs/tags/v1.2.0 at commit 5bb13ef508b2b8ded49f9264d7712f1316830d10\nPASSED: Verified SLSA provenance\n```\n\nThe verified in-toto statement may be written to stdout with the\n`--print-provenance` flag to pipe into policy engines.\n\nOnly GitHub URIs are supported with the `--source-uri` flag. A tag should not\nbe specified, even if the provenance was built at some tag. If you intend to do\nsource versioning validation, you can use `--source-tag` to validate the\nrelease tag. For commit SHA validation, use `--print-provenance` and inspect\nthe commit SHA of the config source or materials.\n\nMultiple artifacts built from the same GitHub builder can be verified in the\nsame command, by passing them in the same command line as arguments:\n\n```bash\n$ slsa-verifier verify-artifact \\\n  --provenance-path /tmp/demo/multiple.intoto.jsonl \\\n  --source-uri github.com/mihaimaruseac/example \\\n  /tmp/demo/fib /tmp/demo/hello\n\nVerified signature against tlog entry index 9712459 at URL: https://rekor.sigstore.dev/api/v1/log/entries/24296fb24b8ad77a1544828b67bb5a2335f7e0d01c504a32ceb6f3a8814ed12c8f1b222d308bd9e8\nVerified build using builder https://github.com/slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@refs/tags/v1.4.0 at commit 11fab87c5ee6f46c6f5e68f6c5378c62ce1ca77c\nVerifying artifact /tmp/demo/fib: PASSED\n\nVerified signature against tlog entry index 9712459 at URL: https://rekor.sigstore.dev/api/v1/log/entries/24296fb24b8ad77a1544828b67bb5a2335f7e0d01c504a32ceb6f3a8814ed12c8f1b222d308bd9e8\nVerified build using builder https://github.com/slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@refs/tags/v1.4.0 at commit 11fab87c5ee6f46c6f5e68f6c5378c62ce1ca77c\nVerifying artifact /tmp/demo/hello: PASSED\n\nPASSED: Verified SLSA provenance\n```\n\nThe only requirement is that the provenance file covers all artifacts passed as arguments in the command line (that is, they are a subset of `subject` field in the provenance file).\n\n### Containers\n\nTo verify a container image, you need to pass a container image name that is _immutable_ by providing its digest, in order to avoid [TOCTOU attacks](#toctou-attacks).\n\nFirst set the image name:\n\n```shell\nIMAGE=ghcr.io/ianlewis/actions-test:v0.0.86\n```\n\nGet the digest for your container _without_ pulling it using the [crane](https://github.com/google/go-containerregistry/blob/main/cmd/crane/doc/crane.md) command:\n\n```shell\nIMAGE=\"${IMAGE}@\"$(crane digest \"${IMAGE}\")\n```\n\nTo verify a container image, run the following command. Note that to use `ghcr.io` you need to set the `GH_TOKEN` environment variable as well.\n\n```shell\nslsa-verifier verify-image \"$IMAGE\" \\\n    --source-uri github.com/ianlewis/actions-test \\\n    --source-tag v0.0.86\n```\n\nYou should see that the verification passed in the output.\n\n```\nVerified build using builder https://github.com/slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@refs/tags/v1.4.0 at commit d9be953dd17e7f20c7a234ada668f9c8c4aaafc3\nPASSED: Verified SLSA provenance\n```\n\n### npm packages\n\nVerification of npm packages is currently an experimental feature.\n\n#### The verify-npm-package command\n\n```bash\n$ slsa-verifier verify-npm-package --help\nVerifies SLSA provenance for an npm package tarball [experimental]\n\nUsage:\n  slsa-verifier verify-npm-package [flags] tarball\n\nFlags:\n      --attestations-path string      path to a file containing the attestations\n      --build-workflow-input map[]    [optional] a workflow input provided by a user at trigger time in the format 'key=value'. (Only for 'workflow_dispatch' events on GitHub Actions). (default map[])\n      --builder-id string             [optional] the unique builder ID who created the provenance\n  -h, --help                          help for verify-npm-package\n      --package-name string           the package name\n      --package-version string        the package version\n      --print-provenance              [optional] print the verified provenance to stdout\n      --source-branch string          [optional] expected branch the binary was compiled from\n      --source-tag string             [optional] expected tag the binary was compiled from\n      --source-uri string             expected source repository that should have produced the binary, e.g. github.com/some/repo\n      --source-versioned-tag string   [optional] expected version the binary was compiled from. Uses semantic version to match the tag\n```\n\n#### npm packages built using the SLSA3 Node.js builder\n\nThis section describes how to verify packages built using the SLSA Build L3\n[Node.js builder](https://github.com/slsa-framework/slsa-github-generator/blob/main/internal/builders/nodejs/README.md).\n\nTo verify an npm package, first download the package tarball and attestations.\n\n```shell\ncurl -Sso attestations.json $(npm view @ianlewis/actions-test@0.1.127 --json | jq -r '.dist.attestations.url') && \\\ncurl -Sso actions-test.tgz \"$(npm view @ianlewis/actions-test@0.1.127 --json | jq -r '.dist.tarball')\"\n```\n\nYou can then verify the package by running the following command:\n\n```shell\nSLSA_VERIFIER_EXPERIMENTAL=1 slsa-verifier verify-npm-package actions-test.tgz \\\n  --attestations-path attestations.json \\\n  --builder-id \"https://github.com/slsa-framework/slsa-github-generator/.github/workflows/builder_nodejs_slsa3.yml\" \\\n  --package-name \"@ianlewis/actions-test\" \\\n  --package-version 0.1.127 \\\n  --source-uri github.com/ianlewis/actions-test\n```\n\nThe verified in-toto statement may be written to stdout with the\n`--print-provenance` flag to pipe into policy engines.\n\nOnly GitHub URIs are supported with the `--source-uri` flag. A tag should not\nbe specified, even if the provenance was built at some tag. If you intend to do\nsource versioning validation, you can use `--source-tag` to validate the\nrelease tag and `--package-version` to validate the package version. For commit\nSHA validation, use `--print-provenance` and inspect the commit SHA of the\nconfig source or materials.\n\n#### npm packages built using the npm CLI\n\nThis section describes how to verify packages built using the npm CLI on GitHub.\n\nTo verify an npm package, first download the package tarball and attestations.\n\n```shell\ncurl -Sso attestations.json $(npm view @ianlewis/actions-test@0.1.132 --json | jq -r '.dist.attestations.url') && \\\ncurl -Sso actions-test.tgz \"$(npm view @ianlewis/actions-test@0.1.132 --json | jq -r '.dist.tarball')\"\n```\n\nYou can then verify the package by running the following command:\n\n```shell\nSLSA_VERIFIER_EXPERIMENTAL=1 slsa-verifier verify-npm-package actions-test.tgz \\\n  --attestations-path attestations.json \\\n  --builder-id \"https://github.com/actions/runner/github-hosted\" \\\n  --package-name \"@ianlewis/actions-test\" \\\n  --package-version 0.1.132 \\\n  --source-uri github.com/ianlewis/actions-test\n```\n\nIf the package was built with self-hosted runners, replace\n\"https://github.com/actions/runner/github-hosted\" with\n\"https://github.com/actions/runner/self-hosted\".\n\nThe verified in-toto statement may be written to stdout with the\n`--print-provenance` flag to pipe into policy engines.\n\nOnly GitHub URIs are supported with the `--source-uri` flag. A tag should not\nbe specified, even if the provenance was built at some tag. If you intend to do\nsource versioning validation, you can use `--source-tag` to validate the\nrelease tag and `--package-version` to validate the package version. For commit\nSHA validation, use `--print-provenance` and inspect the commit SHA of the\nconfig source or materials.\n\n### Container-based builds\n\nTo verify an artifact produced by the [Container-based builder](https://github.com/slsa-framework/slsa-github-generator/blob/main/internal/builders/docker/README.md), you will first need to run the following command to verify the provenance like the section above for general [Artifacts](#artifacts):\n\n```bash\n$ slsa-verifier verify-artifact slsa-test-linux-amd64 \\\n  --provenance-path slsa-test-linux-amd64.sigstore \\\n  --source-uri github.com/slsa-framework/slsa-test \\\n  --source-tag v1.0.3\nVerified signature against tlog entry index 3189970 at URL: https://rekor.sigstore.dev/api/v1/log/entries/206071d5ca7a2346e4db4dcb19a648c7f13b4957e655f4382b735894059bd199\nVerified build using builder https://github.com/slsa-framework/slsa-github-generator/.github/workflows/builder_container-based_slsa3.yml@refs/tags/v1.7.0 at commit 5bb13ef508b2b8ded49f9264d7712f1316830d10\nPASSED: Verified SLSA provenance\n```\n\nThe input provenance is a `.sigstore` file, which is a [Sigstore bundle](https://github.com/sigstore/protobuf-specs/blob/main/protos/sigstore_bundle.proto#L63) that contains the in-toto statement containing the SLSA provenance along with verification material. The verified in-toto statement contained in the bundle may be written to stdout with the `--print-provenance` flag to pipe into policy engines.\n\nTo verify the user-specified builder image that was used to produce the artifact, extract the builder image with the following command and validate in a policy engine:\n\n```bash\n$ cat verifier-statement.intoto | jq -r '.predicate.buildDefinition.externalParameters.builderImage'\n```\n\nThe builder image is described using an [in-toto Resource Descriptor](https://github.com/in-toto/attestation/blob/main/spec/v1/resource_descriptor.md).\n\nIn case the builds are reproducible, you may also use the internal [docker CLI tool](https://github.com/slsa-framework/slsa-github-generator/tree/main/internal/builders/docker#the-verify-command) to verify the artifact by rebuilding the artifact with the provided provenance.\n\n## Verification for Google Cloud Build\n\n### Artifacts\n\nThis is WIP and currently not supported.\n\n### Containers\n\nTo verify a container image, you need to pass a container image name that is _immutable_ by providing its digest, in order to avoid [TOCTOU attacks](#toctou-attacks).\n\nFirst set the image name:\n\n```shell\nIMAGE=laurentsimon/slsa-gcb-v0.3:test\n```\n\nDownload the provenance:\n\n```shell\ngcloud artifacts docker images describe $IMAGE --format json --show-provenance > provenance.json\n```\n\nGet the digest for your container _without_ pulling it using the [crane](https://github.com/google/go-containerregistry/blob/main/cmd/crane/doc/crane.md) command:\n\n```shell\nIMAGE=\"${IMAGE}@\"$(crane digest \"${IMAGE}\")\n```\n\nVerify the image:\n\n```shell\nslsa-verifier verify-image \"$IMAGE\" \\\n  --provenance-path provenance.json \\\n  --source-uri github.com/laurentsimon/gcb-tests \\\n  --builder-id=https://cloudbuild.googleapis.com/GoogleHostedWorker\n```\n\nYou should see that the verification passed in the output.\n\n```\nPASSED: Verified SLSA provenance\n```\n\nThe verified in-toto statement may be written to stdout with the\n`--print-provenance` flag to pipe into policy engines.\n\nNote that `--source-uri` supports GitHub repository URIs like `github.com/$OWNER/$REPO` when the build was enabled with a Cloud Build [GitHub trigger](https://cloud.google.com/build/docs/automating-builds/github/build-repos-from-github). Otherwise, the build provenance will contain the name of the Cloud Storage bucket used to host the source files, usually of the form `gs://[PROJECT_ID]_cloudbuild/source` (see [Running build](https://cloud.google.com/build/docs/running-builds/submit-build-via-cli-api#running_builds)). We recommend using GitHub triggers in order to preserve the source provenance and valiate that the source came from an expected, version-controlled repository. You _may_ match on the fully-qualified tar like `gs://[PROJECT_ID]_cloudbuild/source/1665165360.279777-955d1904741e4bbeb3461080299e929a.tgz`.\n\n## Known Issues\n\n### tuf: invalid key\n\nThis will occur only when verifying provenance generated with GitHub Actions.\n\n**Affected versions:** v1.3.0-v1.3.1, v1.2.0-v1.2.1, v1.1.0-v1.1.2, v1.0.0-v1.0.4\n\n`slsa-verifier` will fail with the following error:\n\n```\nFAILED: SLSA verification failed: could not find a matching valid signature entry: got unexpected errors unable to initialize client, local cache may be corrupt: tuf: invalid key: unable to fetch Rekor public keys from TUF repository\n```\n\nThis issue is tracked by [issue #325](https://github.com/slsa-framework/slsa-verifier/issues/325). You _must_ update to the newest patch versions of each minor release to fix this issue.\n\n### panic: assignment to entry in nil map\n\nThis will occur only when verifying provenance against workflow inputs.\n\n**Affected versions:** v2.0.0\n\n`slsa-verifier` will fail with the following error:\n\n```\npanic: assignment to entry in nil map\n```\n\nThis is fixed by [PR #379](https://github.com/slsa-framework/slsa-verifier/pull/379). You _must_ update to the newest patch versions of each minor release to fix this issue.\n\n## Technical design\n\n### Blog post\n\nFind our blog post series [here](https://security.googleblog.com/2022/04/improving-software-supply-chain.html).\n\n### Specifications\n\nFor a more in-depth technical dive, read the [SPECIFICATIONS.md](https://github.com/slsa-framework/slsa-github-generator/blob/main/SPECIFICATIONS.md).\n\n### TOCTOU attacks\n\nAs explained on [Wikipedia](https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use), a \"time-of-check to time-of-use (TOCTOU) is a class of software bugs caused by a race condition involving the checking of the state of a part of a system and the use of the results of that check\".\n\nIn the context of provenance verification, imagine you verify a container refered to via a _mutable_ image `image:tag`. The verification succeeds and verifies the corresponding hash is `sha256:abcdef...`. After verification, you pull and run the image using `docker run image:tag`. An attacker could have altered the image between the verification step and the run step. To mitigate this attack, we ask users to always pass an _immutable_ reference to the artifact they verify."
}
