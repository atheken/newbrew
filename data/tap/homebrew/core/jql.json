{
  "name": "jql",
  "full_name": "jql",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "JSON query language CLI tool",
  "license": "Apache-2.0 or MIT",
  "homepage": "https://github.com/yamafaktory/jql",
  "versions": {
    "stable": "7.0.2",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/yamafaktory/jql/archive/refs/tags/jql-v7.0.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "ac3816e4aab33972dbf359de1df369ffc8d434af78638536b4243d6cecb55a79"
    },
    "head": {
      "url": "https://github.com/yamafaktory/jql.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/jql/blobs/sha256:b55152728bebc040988351f0ee89e427d08141f76b5bb670dfa4a95f132a4f59",
          "sha256": "b55152728bebc040988351f0ee89e427d08141f76b5bb670dfa4a95f132a4f59"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/jql/blobs/sha256:715a0febeb26b91f7f124a642ed8f158fddd8895acfa7750c97cd50fb7a80435",
          "sha256": "715a0febeb26b91f7f124a642ed8f158fddd8895acfa7750c97cd50fb7a80435"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/jql/blobs/sha256:36e1066398f0f5f549ee1cf9d291c205721c22e9b26924b04ea210f4b9116b42",
          "sha256": "36e1066398f0f5f549ee1cf9d291c205721c22e9b26924b04ea210f4b9116b42"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/jql/blobs/sha256:69a46b25ebabb39469582743ebb210c3ebbdcc8230da8a2e973cf42bb4ac29cc",
          "sha256": "69a46b25ebabb39469582743ebb210c3ebbdcc8230da8a2e973cf42bb4ac29cc"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/jql/blobs/sha256:62a2bfcf6237abfb67562d3694e0d84188f990b90f7fcc2ee1abeb0802d47352",
          "sha256": "62a2bfcf6237abfb67562d3694e0d84188f990b90f7fcc2ee1abeb0802d47352"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/jql/blobs/sha256:fc034e2aedf50adace772de9bbc33ffed6df45aa8ad90747e61b9cdf7e8e539c",
          "sha256": "fc034e2aedf50adace772de9bbc33ffed6df45aa8ad90747e61b9cdf7e8e539c"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/jql/blobs/sha256:17ccdc1ba1fefdddf4ff1c2f2786a80724410dd4d21bf7a85007bc0c24612245",
          "sha256": "17ccdc1ba1fefdddf4ff1c2f2786a80724410dd4d21bf7a85007bc0c24612245"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/jql.rb",
  "ruby_source_checksum": {
    "sha256": "9e6987982b398a85fbfe3d2723e34d72c70faa59036934b6b64b19a59b949e37"
  },
  "date_added": "2020-12-19T20:04:50+00:00",
  "readme": "![jql](jql.svg)\n\n---\n\n[![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/yamafaktory/jql/ci.yml?branch=main&logo=github&style=flat-square)](https://github.com/yamafaktory/jql/actions/workflows/ci.yml)\n[![Crates.io](https://img.shields.io/crates/v/jql?style=flat-square)](https://crates.io/crates/jql)\n[![Docs.rs](https://img.shields.io/docsrs/jql-parser?label=jql-parser%20docs&style=flat-square)](https://docs.rs/jql-parser/latest/jql_parser/)\n[![Docs.rs](https://img.shields.io/docsrs/jql-runner?label=jql-runner%20docs&style=flat-square)](https://docs.rs/jql-runner/latest/jql_runner/)\n\n`jql` is a JSON Query Language tool built with Rust 🦀.\n\nPronounce it as **jackal** 🐺.\n\n## 📜 Philosophy\n\n- ⚡Be fast\n- 🪶 Stay lightweight\n- 🎮 Keep its features as simple as possible\n- 🧠 Avoid redundancy\n- 💡 Provide meaningful error messages\n- 🍰 Eat JSON as input, process, output JSON back\n\n## 🚀 Installation\n\n### Alpine Linux\n\nThe package is maintained by @jirutka.\n\n```sh\napk add jql\n```\n\n### Archlinux\n\nThe AUR package is maintained by @barklan.\n\n```sh\nyay -S jql\n```\n\n### Cargo\n\n```sh\ncargo install jql\n```\n\n### Fedora\n\n```sh\ndnf install jql\n```\n\n### FreeBSD\n\n```sh\npkg install jql\n```\n\n### Homebrew\n\n```sh\nbrew install jql\n```\n\n### Nix\n\n```sh\nnix-env -i jql\n```\n\n### openSUSE\n\n```sh\nzypper install jql\n```\n\n### Manual installation from GitHub\n\nCompiled binary versions are automatically uploaded to GitHub when a new release is made. You can install `jql` manually by [downloading a release](https://github.com/yamafaktory/jql/releases).\n\n## 🛠️ Usage\n\nTo make a selection from a JSON input, `jql` expects a **query** as a sequence of **tokens**.\n\nTo be fully compliant with the JSON format, `jql` always expect key selectors to be **double-quoted**, see [The JavaScript Object Notation (JSON) Data Interchange Format](https://tools.ietf.org/html/rfc8259#section-13).\n\n```json\n{\n  \".valid\": 1337,\n  \"\": \"yeah!\",\n  \"\\\"\": \"yup, valid too!\"\n}\n```\n\nConsequently, to be shell compliant, a query must be either enclosed by single quotation marks or every inner double quotation mark must be escaped.\n\n### Separators\n\n#### Group separator\n\nGroup separators build up an array from sub-queries.\n\n**JSON input**\n\n```json\n{ \"a\": 1, \"b\": 2, \"c\": 3 }\n```\n\n**Query**\n\n```sh\n'\"a\",\"b\",\"c\"'\n```\n\n**JSON output**\n\n```json\n[1, 2, 3]\n```\n\n### Selectors\n\n#### Arrays\n\n##### Array index selector\n\nIndexes can be used in arbitrary order.\n\n**JSON input**\n\n```json\n[1, 2, 3]\n```\n\n**Query**\n\n```sh\n'[2,1]'\n```\n\n**JSON output**\n\n```json\n[3, 2]\n```\n\n##### Array range selector\n\nRange can be in natural order `[0:2]`, reversed `[2:0]`, without lower `[:2]` or upper bound `[0:]`.\n\n**JSON input**\n\n```json\n[1, 2, 3]\n```\n\n**Query**\n\n```sh\n'[2:1]'\n```\n\n**JSON output**\n\n```json\n[3, 2]\n```\n\n##### Lens selector\n\nLens can be a combination of one or more selectors with or an optional value, a value being any of **boolean** | **null** | **number** | **string**.\n\n**JSON input**\n\n```json\n[\n  { \"a\": 1, \"b\": { \"d\": 2 } },\n  { \"a\": 2, \"b\": \"some\" },\n  { \"a\": 2, \"b\": { \"d\": null } },\n  { \"a\": 2, \"b\": true },\n  { \"c\": 3, \"b\": 4 }\n]\n```\n\n**Query**\n\n```sh\n'|={\"b\"\"d\"=2, \"c\"}'\n```\n\n**JSON output**\n\n```json\n[\n  { \"a\": 1, \"b\": { \"d\": 2 } },\n  { \"c\": 3, \"b\": 4 }\n]\n```\n\n#### Objects\n\n##### Key selector\n\nAny valid JSON key can be used.\n\n**JSON input**\n\n```json\n{ \"a\": 1, \"b\": 2, \"c\": 3 }\n```\n\n**Query**\n\n```sh\n'\"c\"'\n```\n\n**JSON output**\n\n```json\n3\n```\n\n##### Multi key selector\n\nKeys can be used in arbitrary order.\n\n**JSON input**\n\n```json\n{ \"a\": 1, \"b\": 2, \"c\": 3 }\n```\n\n**Query**\n\n```sh\n'{\"c\",\"a\"}'\n```\n\n**JSON output**\n\n```json\n{ \"c\": 3, \"a\": 1 }\n```\n\n##### Object index selector\n\nIndexes can be used in arbitrary order.\n\n**JSON input**\n\n```json\n{ \"a\": 1, \"b\": 2, \"c\": 3 }\n```\n\n**Query**\n\n```sh\n'{2,0}'\n```\n\n**JSON output**\n\n```json\n{ \"c\": 3, \"a\": 1 }\n```\n\n##### Object range selector\n\nRange can be in natural order `{0:2}`, reversed `{2:0}`, without lower `{:2}` or upper bound `{0:}`.\n\n**JSON input**\n\n```json\n{ \"a\": 1, \"b\": 2, \"c\": 3 }\n```\n\n**Query**\n\n```sh\n'{2:1}'\n```\n\n**JSON output**\n\n```json\n{ \"c\": 3, \"b\": 2 }\n```\n\n#### Operators\n\n##### Flatten operator\n\nFlattens arrays and objects.\n\n**JSON input**\n\n```json\n[[[[[[[[[[[[[[{ \"a\": 1 }]]]]]]]]]]]]], [[[[[{ \"b\": 2 }]]]], { \"c\": 3 }], null]\n```\n\n**Query**\n\n```sh\n'..'\n```\n\n**JSON output**\n\n```json\n[{ \"a\": 1 }, { \"b\": 2 }, { \"c\": 3 }, null]\n```\n\n**JSON input**\n\n```json\n{ \"a\": { \"c\": false }, \"b\": { \"d\": { \"e\": { \"f\": 1, \"g\": { \"h\": 2 } } } } }\n```\n\n**Query**\n\n```sh\n'..'\n```\n\n**JSON output**\n\n```json\n{\n  \"a.c\": false,\n  \"b.d.e.f\": 1,\n  \"b.d.e.g.h\": 2\n}\n```\n\n##### Pipe in operator\n\nApplies the next tokens in parallel on each element of an array.\n\n**JSON input**\n\n```json\n{ \"a\": [{ \"b\": { \"c\": 1 } }, { \"b\": { \"c\": 2 } }] }\n```\n\n**Query**\n\n```sh\n'\"a\"|>\"b\"\"c\"'\n```\n\n**JSON output**\n\n```json\n[1, 2]\n```\n\n##### Pipe out operator\n\nStops the parallelization initiated by the pipe in operator.\n\n**JSON input**\n\n```json\n{ \"a\": [{ \"b\": { \"c\": 1 } }, { \"b\": { \"c\": 2 } }] }\n```\n\n**Query**\n\n```sh\n'\"a\"|>\"b\"\"c\"<|[1]'\n```\n\n**JSON output**\n\n```json\n2\n```\n\n##### Truncate operator\n\nMaps the output into simple JSON primitives **boolean** | **null** | **number** | **string** | **[]** | **{}**.\n\n**JSON input**\n\n```json\n{ \"a\": [1, 2, 3] }\n```\n\n**Query**\n\n```sh\n'\"a\"!'\n```\n\n**JSON output**\n\n```json\n[]\n```\n\n## 💻 Shell integration\n\n### How to save the output\n\n```sh\njql '\"a\"' input.json > output.json\n```\n\n### How to read from stdin\n\n```sh\ncat test.json | jql '\"a\"'\n```\n\n### Available flags\n\n#### Inline the JSON output\n\nBy default, the output is pretty printed in a more human-readable way, this can be disabled.\n\n```sh\n-i, --inline\n```\n\n#### Read the query from file\n\nThe command will read the provided query from a file instead of the stdin.\n\n```sh\n-q, --query <FILE>\n```\n\n#### Write to stdout without JSON double-quotes\n\nThis can be useful to drop the double-quotes surrounding a string primitive.\n\n```sh\n-r, --raw-string\n```\n\n#### Read a stream of JSON data line by line\n\nThis flag is only about reading processing any JSON output streamed line by line (e.g. Docker logs with the `--follow` flag). This is not an option to read an incomplete streamed content (e.g. a very large input).\n\n```sh\n-s, --stream\n```\n\n#### Validate the JSON data\n\nThe command will return a matching exit code based on the validity of the JSON content or file provided.\n\n```sh\n-v, --validate\n```\n\n#### Print help\n\n```sh\n-h, --help\n```\n\n#### Print version\n\n```sh\n-V, --version\n```\n\n#### Help\n\n```sh\njql -h\njql --help\n```\n\n## 🦀 Workspace\n\nThis project is composed of following crates:\n\n- jql (_binary_)\n- [jql-parser](https://docs.rs/jql-parser/latest/jql_parser/) (_library_)\n- [jql-runner](https://docs.rs/jql-runner/latest/jql_runner/) (_library_)\n\n## Development\n\nSome commands are available as a `justfile` at the root of the workspace (testing / fuzzing).\n\n### Prerequisites\n\n- [cargo-nextest](https://nexte.st/)\n- [just](https://just.systems/man/en/)\n\n### Commands\n\n```sh\njust --list\n```\n\n## ⚠️ Non-goal\n\nThere's no plan to align `jql` with `jq` or any other similar tool.\n\n## ⚡ Performance\n\nSome benchmarks comparing a set of similar functionalities provided by this tool and [jq](https://stedolan.github.io/jq/) are available [here](PERFORMANCE.md).\n\n## 📔 Licenses\n\n- [Apache License, Version 2.0](https://github.com/yamafaktory/jql/blob/main/LICENSE-APACHE)\n- [MIT license](https://github.com/yamafaktory/jql/blob/main/LICENSE-MIT)"
}
