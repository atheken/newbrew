{
  "name": "toml-test",
  "full_name": "toml-test",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Language agnostic test suite for TOML parsers",
  "license": "MIT",
  "homepage": "https://github.com/burntsushi/toml-test",
  "versions": {
    "stable": "1.3.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/BurntSushi/toml-test/archive/refs/tags/v1.3.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "737604b374669975fd8d80c562124e2ff4913217aeadbb14ff07033c52fe09ac"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/toml-test/blobs/sha256:591bf561dfdaaf206b5b622853f2520effd025ef36e5b35046863cca6a56bcb2",
          "sha256": "591bf561dfdaaf206b5b622853f2520effd025ef36e5b35046863cca6a56bcb2"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/toml-test/blobs/sha256:591bf561dfdaaf206b5b622853f2520effd025ef36e5b35046863cca6a56bcb2",
          "sha256": "591bf561dfdaaf206b5b622853f2520effd025ef36e5b35046863cca6a56bcb2"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/toml-test/blobs/sha256:591bf561dfdaaf206b5b622853f2520effd025ef36e5b35046863cca6a56bcb2",
          "sha256": "591bf561dfdaaf206b5b622853f2520effd025ef36e5b35046863cca6a56bcb2"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/toml-test/blobs/sha256:33c6ade25312fa354e0bf9ba1f754644904cae6e2eb9c5793517ef92ab683c46",
          "sha256": "33c6ade25312fa354e0bf9ba1f754644904cae6e2eb9c5793517ef92ab683c46"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/toml-test/blobs/sha256:33c6ade25312fa354e0bf9ba1f754644904cae6e2eb9c5793517ef92ab683c46",
          "sha256": "33c6ade25312fa354e0bf9ba1f754644904cae6e2eb9c5793517ef92ab683c46"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/toml-test/blobs/sha256:33c6ade25312fa354e0bf9ba1f754644904cae6e2eb9c5793517ef92ab683c46",
          "sha256": "33c6ade25312fa354e0bf9ba1f754644904cae6e2eb9c5793517ef92ab683c46"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/toml-test/blobs/sha256:f4ed2940fb820d865bc210919fbb8e105a369dbf164cac5f6caf3fea89cc330f",
          "sha256": "f4ed2940fb820d865bc210919fbb8e105a369dbf164cac5f6caf3fea89cc330f"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/toml-test.rb",
  "ruby_source_checksum": {
    "sha256": "c5d29491daac894fc67c451370a79649fc0bcdd0cd6c606aff1b9cb73b98a2fe"
  },
  "date_added": "2022-09-19T19:52:14+00:00",
  "readme": "`toml-test` is a language-agnostic test suite to verify the correctness of\n[TOML][t] parsers and writers.\n\nTests are divided into two groups: \"invalid\" and \"valid\". Decoders or encoders\nthat reject \"invalid\" tests pass the tests, and decoders that accept \"valid\"\ntests and output precisely what is expected pass the tests. The output format is\nJSON, described below.\n\nBoth encoders and decoders share valid tests, except an encoder accepts JSON and\noutputs TOML rather than the reverse. The TOML representations are read with a\nblessed decoder and is compared. The JSON given to a TOML encoder is in the same\nformat as the JSON that a TOML decoder should output.\n\nCompatible with TOML version [v1.0.0][v1].\n\n[t]: https://toml.io\n[v1]: https://toml.io/en/v1.0.0\n\nInstallation\n------------\nThere are binaries on the [release page][r]; these are statically compiled and\nshould run in most environments. It's recommended you use a binary, or a tagged\nrelease if you build from source especially in CI environments. This prevents\nyour tests from breaking on changes to tests in this tool.\n\nTo compile from source you will need Go 1.16 or newer (older versions will *not*\nwork):\n\n    $ git clone https://github.com/BurntSushi/toml-test.git\n    $ cd toml-test\n    $ go build ./cmd/toml-test\n\nThis will build a `./toml-test` binary.\n\n[r]: https://github.com/BurntSushi/toml-test/releases\n\nUsage\n-----\n`toml-test` accepts an encoder or decoder as the first positional argument, for\nexample:\n\n    $ toml-test my-toml-decoder\n    $ toml-test my-toml-encoder -encoder\n\nThe `-encoder` flag is used to signal that this is an encoder rather than a\ndecoder.\n\nFor example, to run the tests against the Go TOML library:\n\n    # Install my parser\n    $ go install github.com/BurntSushi/toml/cmd/toml-test-decoder@master\n    $ go install github.com/BurntSushi/toml/cmd/toml-test-encoder@master\n\n    $ toml-test toml-test-decoder\n    toml-test [toml-test-decoder]: using embeded tests: 278 passed\n\n    $ toml-test -encoder toml-test-encoder\n    toml-test [toml-test-encoder]: using embeded tests:  94 passed,  0 failed\n\nThe default is to use the tests compiled in the binary; you can use `-testdir`\nto load tests from the filesystem. You can use `-run [name]` or `-skip [name]`\nto run or skip specific tests. Both flags can be given more than once and accept\nglob patterns: `-run 'valid/string/*'`.\n\nSee `toml-test -help` for detailed usage.\n\n### Implementing a decoder\nFor your decoder to be compatible with `toml-test` it **must** satisfy the\nexpected interface:\n\n- Your decoder **must** accept TOML data on `stdin`.\n- If the TOML data is invalid, your decoder **must** return with a non-zero\n  exit code, indicating an error.\n- If the TOML data is valid, your decoder **must** output a JSON encoding of\n  that data on `stdout` and return with a zero exit code, indicating success.\n\nAn example in pseudocode:\n\n    toml_data = read_stdin()\n\n    parsed_toml = decode_toml(toml_data)\n\n    if error_parsing_toml():\n        print_error_to_stderr()\n        exit(1)\n\n    print_as_tagged_json(parsed_toml)\n    exit(0)\n\nDetails on the tagged JSON is explained below in \"JSON encoding\".\n\n### Implementing an encoder\nFor your encoder to be compatible with `toml-test`, it **must** satisfy the\nexpected interface:\n\n- Your encoder **must** accept JSON data on `stdin`.\n- If the JSON data cannot be converted to a valid TOML representation, your\n  encoder **must** return with a non-zero exit code, indicating an error.\n- If the JSON data can be converted to a valid TOML representation, your encoder\n  **must** output a TOML encoding of that data on `stdout` and return with a\n  zero exit code, indicating success.\n\nAn example in pseudocode:\n\n    json_data = read_stdin()\n\n    parsed_json_with_tags = decode_json(json_data)\n\n    if error_parsing_json():\n        print_error_to_stderr()\n        exit(1)\n\n    print_as_toml(parsed_json_with_tags)\n    exit(0)\n\nJSON encoding\n-------------\nThe following JSON encoding applies equally to both encoders and decoders:\n\n- TOML tables correspond to JSON objects.\n- TOML table arrays correspond to JSON arrays.\n- TOML values correspond to a special JSON object of the form:\n  `{\"type\": \"{TOML_TYPE}\", \"value\": \"{TOML_VALUE}\"}`\n\nIn the above, `TOML_TYPE` may be one of:\n\n- string\n- integer\n- float\n- bool\n- datetime\n- datetime-local\n- date-local\n- time-local\n\n`TOML_VALUE` is always a JSON string.\n\nEmpty hashes correspond to empty JSON objects (`{}`) and empty arrays correspond\nto empty JSON arrays (`[]`).\n\nOffset datetimes should be encoded in RFC 3339; Local datetimes should be\nencoded following RFC 3339 without the offset part. Local dates should be\nencoded as the date part of RFC 3339 and Local times as the time part.\n\nExamples:\n\n    TOML                JSON\n\n    a = 42              {\"type\": \"integer\": \"value\": \"42\"}\n\n<!-- -->\n\n    [tbl]               {\"tbl\": {\n    a = 42                  \"a\": {\"type\": \"integer\": \"value\": \"42\"}\n                        }}\n\n<!-- -->\n\n    a = [\"a\", 2]        {\"a\": [\n                            {\"type\": \"string\",  \"value\": \"1\"},\n                            {\"type\": \"integer\": \"value\": \"2\"}\n                        ]}\n\nOr a more complex example:\n\n```toml\nbest-day-ever = 1987-07-05T17:45:00Z\n\n[numtheory]\nboring     = false\nperfection = [6, 28, 496]\n```\n\nAnd the JSON encoding expected by `toml-test` is:\n\n```json\n{\n  \"best-day-ever\": {\"type\": \"datetime\", \"value\": \"1987-07-05T17:45:00Z\"},\n  \"numtheory\": {\n    \"boring\": {\"type\": \"bool\", \"value\": \"false\"},\n    \"perfection\": [\n      {\"type\": \"integer\", \"value\": \"6\"},\n      {\"type\": \"integer\", \"value\": \"28\"},\n      {\"type\": \"integer\", \"value\": \"496\"}\n    ]\n  }\n}\n```\n\nNote that the only JSON values ever used are objects, arrays and strings.\n\nAn example implementation can be found in the BurnSushi/toml:\n\n- [Add tags](https://github.com/BurntSushi/toml/blob/master/internal/tag/add.go)\n- [Remove tags](https://github.com/BurntSushi/toml/blob/master/internal/tag/rm.go)\n\nImplementation-defined behaviour\n--------------------------------\nThis only tests behaviour that's should be true for every encoder implementing\nTOML; a few things are left up to implementations, and are not tested here.\n\n- Millisecond precision (3 digits) is required for datetimes and times, and\n  further precision is implementation-specific, and any greater precision than\n  is supported must be truncated (not rounded).\n\n  This tests only millisecond precision, and not any further precision or the\n  truncation of it.\n\nAssumptions of Truth\n--------------------\nThe following are taken as ground truths by `toml-test`:\n\n- All tests classified as `invalid` **are** invalid.\n- All tests classified as `valid` **are** valid.\n- All expected outputs in `valid/test-name.json` are exactly correct.\n- The Go standard library package `encoding/json` decodes JSON correctly.\n- When testing encoders the\n  [BurntSushi/toml](https://github.com/BurntSushi/toml) TOML decoder is assumed\n  to be correct. (Note that this assumption is not made when testing decoders!)\n\nOf particular note is that **no TOML decoder** is taken as ground truth when\ntesting decoders. This means that most changes to the spec will only require an\nupdate of the tests in `toml-test`. (Bigger changes may require an adjustment of\nhow two things are considered equal. Particularly if a new type of data is\nadded.) Obviously, this advantage does not apply to testing TOML encoders since\nthere must exist a TOML decoder that conforms to the specification in order to\nread the output of a TOML encoder.\n\nUsage without `toml-test` binary\n--------------------------------\nWhile the `toml-test` tool is a convenient way to run the tests, you can also\nre-implement its behaviour in your own language's test-suite, which may be an\neasier way to run the tests.\n\nBecause multiple TOML versions are supported, not all tests are valid for every\nversion of TOML; for example the 1.0.0 tests contain a test that trailing commas\nin tables are invalid, but in 1.1.0 this should be considered valid.\n\nIn short: you can't \"just\" copy all .toml and .json files from the tests/\ndirectory. The [tests/files-toml-1.0.0] and [tests/files-toml-1.1.0] files\ncontain a list of files you should run for that TOML version.\n\nYou can use those lists to determine which tests to run, or include only those\ntests in your library by copying them with something like:\n\n    <files-toml-1.0.0 while read l; do\n        mkdir -p ~/my-test/\"$(dirname \"$l\")\"\n        cp -r \"$l\" ~/my-test/\"$l\"\n    done\n\nThese files are generated with `toml-test -list-files`:\n\n    % toml-test -list-files -toml=1.0.0\n    % toml-test -list-files -toml=1.1.0\n\n[tests/files-toml-1.0.0]: tests/files-toml-1.0.0\n[tests/files-toml-1.1.0]: tests/files-toml-1.1.0\n\nAdding tests\n------------\n`toml-test` was designed so that tests can be easily added and removed. As\nmentioned above, tests are split into two groups: invalid and valid tests.\n\nInvalid tests **only check if a decoder rejects invalid TOML data**. Or, in the\ncase of testing encoders, invalid tests **only check if an encoder rejects an\ninvalid representation of TOML** (e.g., a hetergeneous array). Therefore, all\ninvalid tests should try to **test one thing and one thing only**. Invalid tests\nshould be named after the fault it is trying to expose. Invalid tests for\ndecoders are in the `tests/invalid` directory while invalid tests for encoders\nare in the `tests/invalid-encoder` directory.\n\nValid tests check that a decoder accepts valid TOML data **and** that the parser\nhas the correct representation of the TOML data. Therefore, valid tests need a\nJSON encoding in addition to the TOML data. The tests should be small enough\nthat writing the JSON encoding by hand will not give you brain damage. The exact\nreverse is true when testing encoders.\n\nA valid test without either a `.json` or `.toml` file will automatically fail.\n\nIf you have tests that you'd like to add, please submit a pull request.\n\nWhy JSON?\n---------\nIn order for a language agnostic test suite to work, we need some kind of data\nexchange format. TOML cannot be used, as it would imply that a particular parser\nhas a blessing of correctness.\n\nMy decision to use JSON was not a careful one. It was based on expediency. The\nGo standard library has an excellent `encoding/json` package built in, which\nmade it easy to compare JSON data.\n\nThe problem with JSON is that the types in TOML are not in one-to-one\ncorrespondence with JSON. This is why every TOML value represented in JSON is\ntagged with a type annotation, as described above.\n\nYAML may be closer in correspondence with TOML, but I don't believe we should\nrely on that correspondence. Making things explicit with JSON means that writing\ntests is a little more cumbersome, but it also reduces the number of assumptions\nwe need to make."
}
