{
  "name": "sha1dc",
  "full_name": "sha1dc",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Tool to detect SHA-1 collisions in files, including SHAttered",
  "license": "MIT",
  "homepage": "https://github.com/cr-marcstevens/sha1collisiondetection",
  "versions": {
    "stable": "1.0.3",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/cr-marcstevens/sha1collisiondetection/archive/stable-v1.0.3.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "77a1c2b2a4fbe4f78de288fa4831ca63938c3cb84a73a92c79f436238bd9ac07"
    },
    "head": {
      "url": "https://github.com/cr-marcstevens/sha1collisiondetection.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/sha1dc/blobs/sha256:dbfe38e4ad0344a2fe7df59871c2193c5000fa7d013ca6d7ac101d2ade9611f7",
          "sha256": "dbfe38e4ad0344a2fe7df59871c2193c5000fa7d013ca6d7ac101d2ade9611f7"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/sha1dc/blobs/sha256:5b325daffed30000496e7377b980768998ec15ac1b4c481838b0eccdcfd44354",
          "sha256": "5b325daffed30000496e7377b980768998ec15ac1b4c481838b0eccdcfd44354"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/sha1dc/blobs/sha256:392a2173a9bf9a53f40edb2ef6c77a9d34ee567c9d18f405288b7b83e7fdc87b",
          "sha256": "392a2173a9bf9a53f40edb2ef6c77a9d34ee567c9d18f405288b7b83e7fdc87b"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/sha1dc/blobs/sha256:320528612c69085d4e283dba52d84dd5101fb2348ff15955a480c08cfe4f06d0",
          "sha256": "320528612c69085d4e283dba52d84dd5101fb2348ff15955a480c08cfe4f06d0"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/sha1dc/blobs/sha256:8034c9dce92fc85c8f79c22f01becabacb0efed4cf40bf19ba750e8539ebed55",
          "sha256": "8034c9dce92fc85c8f79c22f01becabacb0efed4cf40bf19ba750e8539ebed55"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/sha1dc/blobs/sha256:9f927c95f5b3838ba7c269a3376f52d5bc9ddea216f6cbf6d07e667fa6c1a829",
          "sha256": "9f927c95f5b3838ba7c269a3376f52d5bc9ddea216f6cbf6d07e667fa6c1a829"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/sha1dc/blobs/sha256:ed78939b30e385c3adeac725b9f2865d60b8c0e15e1ec75d1b6c90855dc14206",
          "sha256": "ed78939b30e385c3adeac725b9f2865d60b8c0e15e1ec75d1b6c90855dc14206"
        },
        "mojave": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/sha1dc/blobs/sha256:1c12564c84282e1ddbac545864bd695527dca9026411725e4a4604eaed81ec8b",
          "sha256": "1c12564c84282e1ddbac545864bd695527dca9026411725e4a4604eaed81ec8b"
        },
        "high_sierra": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/sha1dc/blobs/sha256:a489f11b91a88486274717eace83368f6b072b134ddc62001157b1fae9873dab",
          "sha256": "a489f11b91a88486274717eace83368f6b072b134ddc62001157b1fae9873dab"
        },
        "sierra": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/sha1dc/blobs/sha256:9eba4b19247672b715376e2086689e7418235d850a158636d2ba3deb46851933",
          "sha256": "9eba4b19247672b715376e2086689e7418235d850a158636d2ba3deb46851933"
        },
        "el_capitan": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/sha1dc/blobs/sha256:32d59c039a26d232b35f3c1877ca8c78ba0a303866adefee002c017359b03267",
          "sha256": "32d59c039a26d232b35f3c1877ca8c78ba0a303866adefee002c017359b03267"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sha1dc/blobs/sha256:981db3d0b2fcf5e914e1506a746dfb2bd14d83a191f268d8cdf5cb57401c0475",
          "sha256": "981db3d0b2fcf5e914e1506a746dfb2bd14d83a191f268d8cdf5cb57401c0475"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "coreutils",
    "libtool"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/sha1dc.rb",
  "ruby_source_checksum": {
    "sha256": "87a20387b35f08f13a0c6f03224c999db5e10b9463b64d970382df846c3678e4"
  },
  "date_added": "2017-03-06T18:03:15+00:00",
  "readme": "# sha1collisiondetection\nLibrary and command line tool to detect SHA-1 collisions in files\n\nCopyright 2017 Marc Stevens <marc@marc-stevens.nl>\n\nDistributed under the MIT Software License.\n\nSee accompanying file LICENSE.txt or copy at https://opensource.org/licenses/MIT.\n\n## Developers\n\n- Marc Stevens, CWI Amsterdam (https://marc-stevens.nl)\n- Dan Shumow, Microsoft Research (https://www.microsoft.com/en-us/research/people/danshu/)\n\n## About\nThis library and command line tool were designed as near drop-in replacements for common SHA-1 libraries and sha1sum.\nThey will compute the SHA-1 hash of any given file and additionally will detect cryptanalytic collision attacks against SHA-1 present in each file. It is very fast and takes less than twice the amount of time as regular SHA-1.\n\nMore specifically they will detect any cryptanalytic collision attack against SHA-1 using any of the top 32 SHA-1 disturbance vectors with probability 1:\n```\n    I(43,0), I(44,0), I(45,0), I(46,0), I(47,0), I(48,0), I(49,0), I(50,0), I(51,0), I(52,0),\n    I(46,2), I(47,2), I(48,2), I(49,2), I(50,2), I(51,2),\n    II(45,0), II(46,0), II(47,0), II(48,0), II(49,0), II(50,0), II(51,0), II(52,0), II(53,0), II(54,0), II(55,0), II(56,0),\n    II(46,2), II(49,2), II(50,2), II(51,2)\n```\nThe possibility of false positives can be neglected as the probability is smaller than 2^-90.\n\nThe library supports both an indicator flag that applications can check and act on, as well as a special _safe-hash_ mode that returns the real SHA-1 hash when no collision was detected and a different _safe_ hash when a collision was detected.\nColliding files will have the same SHA-1 hash, but will have different unpredictable safe-hashes.\nThis essentially enables protection of applications against SHA-1 collisions with no further changes in the application, e.g., digital signature forgeries based on SHA-1 collisions automatically become invalid.\n\nFor the theoretical explanation of collision detection see the award-winning paper on _Counter-Cryptanalysis_:\n\nCounter-cryptanalysis, Marc Stevens, CRYPTO 2013, Lecture Notes in Computer Science, vol. 8042, Springer, 2013, pp. 129-146,\nhttps://marc-stevens.nl/research/papers/C13-S.pdf\n\n## Compiling\n\nRun:\n```\nmake\n```\n\n## Command-line usage\n\nThere are two programs `bin/sha1dcsum` and `bin/sha1dcsum_partialcoll`.\nThe first program `bin/sha1dcsum` will detect and warn for files that were generated with a cryptanalytic SHA-1 collision attack,\nlike the one documented at https://shattered.io/ as well as the later derived attack https://sha-mbles.github.io/.\nThe second program `bin/sha1dcsum_partialcoll` will detect and warn for files that were generated with a cryptanalytic collision attack against reduced-round SHA-1 (of which there are a few examples so far).\n\nExamples:\n```\nbin/sha1dcsum test/sha1_reducedsha_coll.bin test/shattered-1.pdf\nbin/sha1dcsum_partialcoll test/sha1reducedsha_coll.bin test/shattered-1.pdf\npipe_data | bin/sha1dcsum -\n```\n\n## Library usage\n\nSee the documentation in `lib/sha1.h`. Here is a simple example code snippet:\n```\n#include <sha1dc/sha1.h>\n\nSHA1_CTX ctx;\nunsigned char hash[20];\nSHA1DCInit(&ctx);\n\n/** disable safe-hash mode (safe-hash mode is enabled by default) **/\n// SHA1DCSetSafeHash(&ctx, 0);\n/** disable use of unavoidable attack conditions to speed up detection (enabled by default) **/\n// SHA1DCSetUseUBC(&ctx, 0); \n\nSHA1DCUpdate(&ctx, buffer, (unsigned)(size));\n\nint iscoll = SHA1DCFinal(hash,&ctx);\nif (iscoll)\n    printf(\"collision detected\");\nelse\n    printf(\"no collision detected\");\n```\n\n## Inclusion in other programs\n\nIn order to make it easier to include these sources in other project\nthere are several preprocessor macros that the code uses. Rather than\ncopy/pasting and customizing or specializing the code, first see if\nsetting any of these defines appropriately will allow you to avoid\nmodifying the code yourself.\n\n- SHA1DC_NO_STANDARD_INCLUDES\n\n Skips including standard headers. Use this if your project for\n whatever reason wishes to do its own header includes.\n\n- SHA1DC_CUSTOM_INCLUDE_SHA1_C\n\n  Includes a custom header at the top of sha1.c. Usually this would be\n  set in conjunction with SHA1DC_NO_STANDARD_INCLUDES to point to a\n  header file which includes various standard headers.\n\n- SHA1DC_INIT_SAFE_HASH_DEFAULT\n\n  Sets the default for safe_hash in SHA1DCInit(). Valid values are 0\n  and 1. If unset 1 is the default.\n\n- SHA1DC_CUSTOM_TRAILING_INCLUDE_SHA1_C\n\n  Includes a custom trailer in sha1.c. Useful for any extra utility\n  functions that make use of the functions already defined in sha1.c.\n\n- SHA1DC_CUSTOM_TRAILING_INCLUDE_SHA1_H\n\n  Includes a custom trailer in sha1.h. Useful for defining the\n  prototypes of the functions or code included by\n  SHA1DC_CUSTOM_TRAILING_INCLUDE_SHA1_C.\n\n- SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C\n\n  Includes a custom header at the top of ubc_check.c.\n\n- SHA1DC_CUSTOM_TRAILING_INCLUDE_UBC_CHECK_C\n\n  Includes a custom trailer in ubc_check.c.\n\n- SHA1DC_CUSTOM_TRAILING_INCLUDE_UBC_CHECK_H\n\n  Includes a custom trailer in ubc_check.H.\n\nThis code will try to auto-detect certain things based on\nCPU/platform. Unless you're running on some really obscure CPU or\nporting to a new platform you should not need to tweak this. If you do\nplease open an issue at\nhttps://github.com/cr-marcstevens/sha1collisiondetection\n\n- SHA1DC_FORCE_LITTLEENDIAN / SHA1DC_FORCE_BIGENDIAN\n\n  Override the check for processor endianenss and force either\n  Little-Endian or Big-Endian.\n\n- SHA1DC_FORCE_UNALIGNED_ACCESS\n\n  Permit unaligned access. This will fail on e.g. SPARC processors, so\n  it's only permitted on a whitelist of processors. If your CPU isn't\n  detected as allowing this, and allows unaligned access, setting this\n  may improve performance (or make it worse, if the kernel has to\n  catch and emulate such access on its own)."
}
