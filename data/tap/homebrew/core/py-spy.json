{
  "name": "py-spy",
  "full_name": "py-spy",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Sampling profiler for Python programs",
  "license": "MIT",
  "homepage": "https://github.com/benfred/py-spy",
  "versions": {
    "stable": "0.3.14",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/benfred/py-spy/archive/refs/tags/v0.3.14.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "c01da8b74be0daba79781cfc125ffcd3df3a0d090157fe0081c71da2f6057905"
    },
    "head": {
      "url": "https://github.com/benfred/py-spy.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/py-spy/blobs/sha256:6640d4124619c0e3d007cb0284f2fb33d393c279baee741432d586c28e48f612",
          "sha256": "6640d4124619c0e3d007cb0284f2fb33d393c279baee741432d586c28e48f612"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/py-spy/blobs/sha256:4c9528218834611e0d11368cd892d576887fa0c614cda521203b9c665b000785",
          "sha256": "4c9528218834611e0d11368cd892d576887fa0c614cda521203b9c665b000785"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/py-spy/blobs/sha256:0cbeb6a465786ff60f02816f708b1184612fbb27a3142cdf9731cc70f6b5ec59",
          "sha256": "0cbeb6a465786ff60f02816f708b1184612fbb27a3142cdf9731cc70f6b5ec59"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/py-spy/blobs/sha256:633076498c9549f079573bf14bd52590fa001929e36136047f99369e2cf86f84",
          "sha256": "633076498c9549f079573bf14bd52590fa001929e36136047f99369e2cf86f84"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/py-spy/blobs/sha256:e4e51038926d8e3e375f02c0e1511c7eb8274a40dfb4509f8d0d36e5a4ee1ff0",
          "sha256": "e4e51038926d8e3e375f02c0e1511c7eb8274a40dfb4509f8d0d36e5a4ee1ff0"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/py-spy/blobs/sha256:411fd9ea3515958e15d197598cfe7e39cc9087cb86c2fd13db6e5af8dbb78864",
          "sha256": "411fd9ea3515958e15d197598cfe7e39cc9087cb86c2fd13db6e5af8dbb78864"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/py-spy/blobs/sha256:9e03831868de123c9a3b9b42c6d954cedfe1241bf8c4dc5c234adca1a9ffa871",
          "sha256": "9e03831868de123c9a3b9b42c6d954cedfe1241bf8c4dc5c234adca1a9ffa871"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [
    "libunwind"
  ],
  "test_dependencies": [
    "python@3.11"
  ],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/py-spy.rb",
  "ruby_source_checksum": {
    "sha256": "2e4590df7aa6cf13c3ee69140939590bf43470e1e751ba27507fabe4560e9174"
  },
  "date_added": "2021-07-15T09:37:33+00:00",
  "readme": "py-spy: Sampling profiler for Python programs\n=====\n[![Build Status](https://github.com/benfred/py-spy/workflows/Build/badge.svg?branch=master)](https://github.com/benfred/py-spy/actions?query=branch%3Amaster)\n[![FreeBSD Build Status](https://api.cirrus-ci.com/github/benfred/py-spy.svg)](https://cirrus-ci.com/github/benfred/py-spy)\n\npy-spy is a sampling profiler for Python programs. It lets you visualize what your Python\nprogram is spending time on without restarting the program or modifying the code in any way.\npy-spy is extremely low overhead: it is written in Rust for speed and doesn't run\nin the same process as the profiled Python program. This means py-spy is safe to use against production Python code.\n\npy-spy works on Linux, OSX, Windows and FreeBSD, and supports profiling all recent versions of the CPython\ninterpreter (versions 2.3-2.7 and 3.3-3.11).\n\n## Installation\n\nPrebuilt binary wheels can be installed from PyPI with:\n\n```\npip install py-spy\n```\n\nYou can also download prebuilt binaries from the [GitHub Releases\nPage](https://github.com/benfred/py-spy/releases).\n\nIf you're a Rust user, py-spy can also be installed with: ```cargo install py-spy```.\n\nOn macOS, [py-spy is in Homebrew](https://formulae.brew.sh/formula/py-spy#default) and \ncan be installed with ```brew install py-spy```.\n\nOn Arch Linux, [py-spy is in AUR](https://aur.archlinux.org/packages/py-spy/) and can be\ninstalled with ```yay -S py-spy```.\n\nOn Alpine Linux, [py-spy is in testing repository](https://pkgs.alpinelinux.org/packages?name=py-spy&branch=edge&repo=testing) and\ncan be installed with ```apk add py-spy --update-cache --repository http://dl-3.alpinelinux.org/alpine/edge/testing/ --allow-untrusted```.\n\n## Usage\n\npy-spy works from the command line and takes either the PID of the program you want to sample from\nor the command line of the python program you want to run. py-spy has three subcommands\n```record```, ```top``` and ```dump```:\n\n### record\n\npy-spy supports recording profiles to a file using the ```record``` command. For example, you can\ngenerate a [flame graph](http://www.brendangregg.com/flamegraphs.html) of your python process by\ngoing:\n\n``` bash\npy-spy record -o profile.svg --pid 12345\n# OR\npy-spy record -o profile.svg -- python myprogram.py\n```\n\nWhich will generate an interactive SVG file looking like:\n\n![flame graph](./images/flamegraph.svg)\n\nYou can change the file format to generate\n[speedscope](https://github.com/jlfwong/speedscope) profiles or raw data with the ```--format``` parameter.\nSee ```py-spy record --help``` for information on other options including changing\nthe sampling rate, filtering to only include threads that hold the GIL, profiling native C extensions,\nshowing thread-ids, profiling subprocesses and more.\n\n### top\n\nTop shows a live view of what functions are taking the most time in your python program, similar\nto the Unix [top](https://linux.die.net/man/1/top) command. Running py-spy with:\n\n``` bash\npy-spy top --pid 12345\n# OR\npy-spy top -- python myprogram.py\n```\n\nwill bring up a live updating high level view of your python program:\n\n![console viewer demo](./images/console_viewer.gif)\n\n### dump\n\npy-spy can also display the current call stack for each python thread with the ```dump``` command:\n\n```bash\npy-spy dump --pid 12345\n```\n\nThis will dump out the call stacks for each thread, and some other basic process info to the\nconsole:\n\n![dump output](./images/dump.png)\n\nThis is useful for the case where you just need a single call stack to figure out where your\npython program is hung on. This command also has the ability to print out the local variables\nassociated with each stack frame by setting the ```--locals``` flag.\n\n## Frequently Asked Questions\n\n### Why do we need another Python profiler?\n\nThis project aims to let you profile and debug any running Python program, even if the program is\nserving production traffic.\n\nWhile there are many other python profiling projects, almost all of them require modifying\nthe profiled program in some way. Usually, the profiling code runs inside of the target python process,\nwhich will slow down and change how the program operates. This means it's not generally safe\nto use these profilers for debugging issues in production services since they will usually have\na noticeable impact on performance.\n\n### How does py-spy work?\n\npy-spy works by directly reading the memory of the python program using the\n[process_vm_readv](http://man7.org/linux/man-pages/man2/process_vm_readv.2.html) system call on Linux,\nthe [vm_read](https://developer.apple.com/documentation/kernel/1585350-vm_read?language=objc) call on OSX\nor the [ReadProcessMemory](https://msdn.microsoft.com/en-us/library/windows/desktop/ms680553(v=vs.85).aspx) call\non Windows.\n\nFiguring out the call stack of the Python program is done by looking at the global PyInterpreterState variable\nto get all the Python threads running in the interpreter, and then iterating over each PyFrameObject in each thread\nto get the call stack. Since the Python ABI changes between versions, we use rust's [bindgen](https://github.com/rust-lang-nursery/rust-bindgen) to generate different rust structures for each Python interpreter\nclass we care about and use these generated structs to figure out the memory layout in the Python program.\n\nGetting the memory address of the Python Interpreter can be a little tricky due to [Address Space Layout Randomization](https://en.wikipedia.org/wiki/Address_space_layout_randomization). If the target python interpreter ships\nwith symbols it is pretty easy to figure out the memory address of the interpreter by dereferencing the\n```interp_head```  or ```_PyRuntime``` variables depending on the Python version. However, many Python\nversions are shipped with either stripped binaries or shipped without the corresponding PDB symbol files on Windows. In\nthese cases we scan through the BSS section for addresses that look like they may point to a valid PyInterpreterState\nand check if the layout of that address is what we expect.\n\n\n### Can py-spy profile native extensions?\n\nYes! py-spy supports profiling native python extensions written in languages like C/C++ or Cython,\non x86_64 Linux and Windows. You can enable this mode by passing ```--native``` on the\ncommand line. For best results, you should compile your Python extension with symbols. Also worth\nnoting for Cython programs is that py-spy needs the generated C or C++ file in order to return line\nnumbers of the original .pyx file.  Read the [blog post](https://www.benfrederickson.com/profiling-native-python-extensions-with-py-spy/)\nfor more information.\n\n### How can I profile subprocesses?\n\nBy passing in the ```--subprocesses``` flag to either the record or top view, py-spy will also include\nthe output from any python process that is a child process of the target program. This is useful\nfor profiling applications that use multiprocessing or gunicorn worker pools. py-spy will monitor\nfor new processes being created, and automatically attach to them and include samples from them in\nthe output. The record view will include the PID and cmdline of each program in the callstack,\nwith subprocesses appearing as children of their parent processes.\n\n### When do you need to run as sudo?\n\npy-spy works by reading memory from a different python process, and this might not be allowed for security reasons depending on\nyour OS and system settings. In many cases, running as a root user (with sudo or similar) gets around these security restrictions.\nOSX always requires running as root, but on Linux it depends on how you are launching py-spy and the system\nsecurity settings.\n\nOn Linux the default configuration is to require root permissions when attaching to a process that isn't a child.\nFor py-spy this means you can profile without root access by getting py-spy to create the process\n(```py-spy record  -- python myprogram.py```) but attaching to an existing process by specifying a\nPID will usually require root (```sudo py-spy record --pid 123456```).\nYou can remove this restriction on Linux by setting the [ptrace_scope sysctl variable](https://wiki.ubuntu.com/SecurityTeam/Roadmap/KernelHardening#ptrace_Protection).\n\n### How do you detect if a thread is idle or not?\n\npy-spy attempts to only include stack traces from threads that are actively running code, and exclude threads that\nare sleeping or otherwise idle. When possible, py-spy attempts to get this thread activity information\nfrom the OS: by reading in  ```/proc/PID/stat``` on Linux, by using the mach\n[thread_basic_info](https://opensource.apple.com/source/xnu/xnu-792/osfmk/mach/thread_info.h.auto.html)\ncall on OSX, and by looking if the current SysCall is [known to be\nidle](https://github.com/benfred/py-spy/blob/8326c6dbc6241d60125dfd4c01b70fed8b8b8138/remoteprocess/src/windows/mod.rs#L212-L229)\non Windows.\n\nThere are some limitations with this approach though that may cause idle threads to still be\nmarked as active. First off, we have to get this thread activity information before pausing the\nprogram, because getting this from a paused program will cause it to always return that this is\nidle. This means there is a potential race condition, where we get the thread activity and\nthen the thread is in a different state when we get the stack trace. Querying the OS for thread\nactivity also isn't implemented yet for FreeBSD and i686/ARM processors on Linux. On Windows,\ncalls that are blocked on IO also won't be marked as idle yet, for instance when reading input\nfrom stdin. Finally, on some Linux calls the ptrace attach that we are using may cause idle threads\nto wake up momentarily, causing false positives when reading from procfs. For these reasons, \nwe also have a heuristic fallback that marks known certain known calls in\npython as being idle. \n\nYou can disable this functionality by setting the ```--idle``` flag, which\nwill include frames that py-spy considers idle.  \n\n### How does GIL detection work?\n\nWe get GIL activity by looking at the threadid value pointed to by the ```_PyThreadState_Current``` symbol\nfor Python 3.6 and earlier and by figuring out the equivalent from the ```_PyRuntime``` struct in\nPython 3.7 and later. These symbols might not be included in your python distribution, which will\ncause resolving which thread holds on to the GIL to fail. Current GIL usage is also shown in the \n```top``` view as %GIL.\n\nPassing the ```--gil``` flag will only include traces for threads that are holding on to the\n[Global Interpreter Lock](https://wiki.python.org/moin/GlobalInterpreterLock). In some cases this\nmight be a more accurate view of how your python program is spending its time, though you should\nbe aware that this will miss activity in extensions that release the GIL while still active.\n\n### Why am I having issues profiling /usr/bin/python on OSX?\n\nOSX has a feature called [System Integrity Protection](https://en.wikipedia.org/wiki/System_Integrity_Protection) that prevents even the root user from reading memory from any binary located in /usr/bin. Unfortunately, this includes the python interpreter that ships with OSX.\n\nThere are a couple of different ways to deal with this:\n * You can install a different Python distribution. The built-in Python [will be removed](https://developer.apple.com/documentation/macos_release_notes/macos_catalina_10_15_release_notes) in a future OSX, and you probably want to migrate away from Python 2 anyways =).\n * You can use [virtualenv](https://virtualenv.pypa.io/en/stable/) to run the system python in an environment where SIP doesn't apply.\n * You can [disable System Integrity Protection](https://www.macworld.co.uk/how-to/mac/how-turn-off-mac-os-x-system-integrity-protection-rootless-3638975/).\n\n### How do I run py-spy in Docker?\n\nRunning py-spy inside of a docker container will also usually bring up a permissions denied error even when running as root.\n\nThis error is caused by docker restricting the process_vm_readv system call we are using. This can\nbe overridden by setting\n[```--cap-add SYS_PTRACE```](https://docs.docker.com/engine/security/seccomp/) when starting the docker container.\n\nAlternatively you can edit the docker-compose yaml file\n\n```\nyour_service:\n   cap_add:\n     - SYS_PTRACE\n```\n\nNote that you'll need to restart the docker container in order for this setting to take effect.\n\nYou can also use py-spy from the Host OS to profile a running process running inside the docker\ncontainer. \n\n### How do I run py-spy in Kubernetes?\n\npy-spy needs `SYS_PTRACE` to be able to read process memory. Kubernetes drops that capability by default, resulting in the error\n```\nPermission Denied: Try running again with elevated permissions by going 'sudo env \"PATH=$PATH\" !!'\n```\nThe recommended way to deal with this is to edit the spec and add that capability. For a deployment, this is done by adding this to `Deployment.spec.template.spec.containers`\n```\nsecurityContext:\n  capabilities:\n    add:\n    - SYS_PTRACE\n```\nMore details on this here: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-capabilities-for-a-container\nNote that this will remove the existing pods and create those again.\n\n### How do I install py-spy on Alpine Linux?\n\nAlpine python opts out of the `manylinux` wheels: [pypa/pip#3969 (comment)](https://github.com/pypa/pip/issues/3969#issuecomment-247381915).\nYou can override this behaviour to use pip to install py-spy on Alpine by going:\n\n    echo 'manylinux1_compatible = True' > /usr/local/lib/python3.7/site-packages/_manylinux.py\n\nAlternatively you can download a musl binary from the [GitHub releases page](https://github.com/benfred/py-spy/releases).\n\n### How can I avoid pausing the Python program?\n\nBy setting the ```--nonblocking``` option, py-spy won't pause the target python you are profiling from. While\nthe performance impact of sampling from a process with py-spy is usually extremely low, setting this option\nwill totally avoid interrupting your running python program.\n\nWith this option set, py-spy will instead read the interpreter state from the python process as it is running.\nSince the calls we use to read memory from are not atomic, and we have to issue multiple calls to get a stack trace this\nmeans that occasionally we get errors when sampling. This can show up as an increased error rate when sampling, or as\npartial stack frames being included in the output.\n\n### Does py-spy support 32-bit Windows? Integrate with PyPy? Work with USC2 versions of Python2?\n\nNot yet =).\n\nIf there are features you'd like to see in py-spy either thumb up the [appropriate\nissue](https://github.com/benfred/py-spy/issues?q=is%3Aissue+is%3Aopen+sort%3Areactions-%2B1-desc) or create a new one that describes what functionality is missing.\n\n### How to force colored output when piping to a pager?\n\npy-spy follows the [CLICOLOR](https://bixense.com/clicolors/) specification, thus setting `CLICOLOR_FORCE=1` in your environment will have py-spy print colored output even when piped to a pager.\n\n## Credits\n\npy-spy is heavily inspired by [Julia Evans](https://github.com/jvns/) excellent work on [rbspy](http://github.com/rbspy/rbspy).\nIn particular, the code to generate flamegraph and speedscope files is taken directly from rbspy, and this project uses the\n[read-process-memory](https://github.com/luser/read-process-memory) and [proc-maps](https://github.com/benfred/proc-maps) crates that were spun off from rbspy.\n\n## License\n\npy-spy is released under the MIT License, see the [LICENSE](https://github.com/benfred/py-spy/blob/master/LICENSE) file for the full text."
}
