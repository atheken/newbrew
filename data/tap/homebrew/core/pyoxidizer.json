{
  "name": "pyoxidizer",
  "full_name": "pyoxidizer",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Modern Python application packaging and distribution tool",
  "license": "MPL-2.0",
  "homepage": "https://github.com/indygreg/PyOxidizer",
  "versions": {
    "stable": "0.23.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/indygreg/PyOxidizer/archive/pyoxidizer/0.23.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "d96c4747d37686c052ef5a064fda59ac0b175085589cd7cdd4e277906136f8a7"
    },
    "head": {
      "url": "https://github.com/indygreg/PyOxidizer.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pyoxidizer/blobs/sha256:a438770a4ce6bb1ea06f3d23d1c0cf505f93383de2ff27d99b22d5d5b34c9f51",
          "sha256": "a438770a4ce6bb1ea06f3d23d1c0cf505f93383de2ff27d99b22d5d5b34c9f51"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pyoxidizer/blobs/sha256:cb62cb641b9b69e0995c19c288a051a5f59e11de3a174aceb4c67daf48332b4c",
          "sha256": "cb62cb641b9b69e0995c19c288a051a5f59e11de3a174aceb4c67daf48332b4c"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pyoxidizer/blobs/sha256:2dbd06e01ecb46b93bb3250bd0d5e349295ba6c56b77622d29c64676ed17e3e8",
          "sha256": "2dbd06e01ecb46b93bb3250bd0d5e349295ba6c56b77622d29c64676ed17e3e8"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pyoxidizer/blobs/sha256:4b03858e038e6d7a4a40abf538618704f9b891815766a45492ae41af608eba72",
          "sha256": "4b03858e038e6d7a4a40abf538618704f9b891815766a45492ae41af608eba72"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pyoxidizer/blobs/sha256:80d2014e88d9937d1a88b99da5a8d035e8ac42ccc4df7480512e020e6ee30fb6",
          "sha256": "80d2014e88d9937d1a88b99da5a8d035e8ac42ccc4df7480512e020e6ee30fb6"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pyoxidizer/blobs/sha256:e9aa0d494c359e0f8b16c8c3ae31159d8f540f3f9d7946ca4bdc20bc6a83fe10",
          "sha256": "e9aa0d494c359e0f8b16c8c3ae31159d8f540f3f9d7946ca4bdc20bc6a83fe10"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pyoxidizer/blobs/sha256:3d1bc85db1bcbb5f69c8dba9c294d65ef9b674d217f6eab670ccc6eb4dedf812",
          "sha256": "3d1bc85db1bcbb5f69c8dba9c294d65ef9b674d217f6eab670ccc6eb4dedf812"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pyoxidizer/blobs/sha256:8de042e72b4759060bdfd5fac56d50594614f7c0cab901b8ccf70955a4191191",
          "sha256": "8de042e72b4759060bdfd5fac56d50594614f7c0cab901b8ccf70955a4191191"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/pyoxidizer.rb",
  "ruby_source_checksum": {
    "sha256": "57da944abf777424648a09b9dfa577ccdb4925294bde9fd2ac3b9306345a7efd"
  },
  "date_added": "2021-08-13T09:57:08+00:00",
  "readme": "# PyOxidizer\n\n[![Build Status](https://github.com/indygreg/PyOxidizer/workflows/.github/workflows/pyoxidizer.yml/badge.svg)](https://github.com/indygreg/PyOxidizer/actions)\n\n`PyOxidizer` is a utility for producing binaries that embed Python.\nThe over-arching goal of `PyOxidizer` is to make complex packaging and\ndistribution problems simple so application maintainers can focus on\nbuilding applications instead of toiling with build systems and packaging\ntools.\n\n`PyOxidizer` is capable of producing a single file executable - with\na copy of Python and all its dependencies statically linked and all\nresources (like `.pyc` files) embedded in the executable. You can\ncopy a single executable file to another machine and run a Python\napplication contained within. It *just works*.\n\n`PyOxidizer` exposes its lower level functionality for embedding\nself-contained Python interpreters as a tool and software library. So if\nyou don't want to ship executables that only consist of a Python\napplication, you can still use `PyOxidizer` to e.g. produce a library\ncontaining Python suitable for linking in any application or use\n`PyOxidizer`'s embedding library directly for embedding Python in a\nlarger application.\n\nThe _Oxidizer_ part of the name comes from Rust: executables produced\nby `PyOxidizer` are compiled from Rust and Rust code is responsible\nfor managing the embedded Python interpreter and all its operations.\nIf you don't know Rust, that's OK: PyOxidizer tries to make the existence\nof Rust nearly invisible to end-users.\n\nWhile solving packaging and distribution problems is the primary goal\nof `PyOxidizer`, a side-effect of solving that problem with Rust is\nthat `PyOxidizer` can serve as a bridge between these two languages.\n`PyOxidizer` can be used to easily add a Python interpreter to _any_\nRust project. But the opposite is also true: `PyOxidizer` can also be\nused to add Rust to Python. Using `PyOxidizer`, you could _bootstrap_\na new Rust project which contains an embedded version of Python and your\napplication. Initially, your project is a few lines of Rust that\ninstantiates a Python interpreter and runs Python code. Over time,\nfunctionality could be (re)written in Rust and your previously\nPython-only project could leverage Rust and its diverse ecosystem. Since\n`PyOxidizer` abstracts the Python interpreter away, this could all be\ninvisible to end-users: you could rewrite an application from Python to\nRust and people may not even know because they never see a `libpython`,\n`.py` files, etc.\n\n## Project Info\n\n:house: The official home of the `PyOxidizer` project is\nhttps://github.com/indygreg/PyOxidizer.\n\n:notebook_with_decorative_cover: Documentation (generated from the `docs/` directory) is available\nat https://gregoryszorc.com/docs/pyoxidizer/main/.\n\n:speech_balloon: The [pyoxidizer-users](https://groups.google.com/forum/#!forum/pyoxidizer-users)\nmailing list is a forum for users to discuss all things PyOxidizer.\n\n:moneybag: If you want to financially contribute to PyOxidizer, do so\nvia [GitHub Sponsors](https://github.com/sponsors/indygreg) or\n[on Patreon](https://www.patreon.com/indygreg)."
}
