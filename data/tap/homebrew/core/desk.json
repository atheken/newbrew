{
  "name": "desk",
  "full_name": "desk",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Lightweight workspace manager for the shell",
  "license": "MIT",
  "homepage": "https://github.com/jamesob/desk",
  "versions": {
    "stable": "0.6.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/jamesob/desk/archive/v0.6.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "620bfba5b285d4d445e3ff9e399864063d7b0e500ef9c70d887fb7b157576c45"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/desk/blobs/sha256:b2da60c73f101b56b6a5ac51ed46427c68cf0194d7229755b4b25a215b1f0c1a",
          "sha256": "b2da60c73f101b56b6a5ac51ed46427c68cf0194d7229755b4b25a215b1f0c1a"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/desk.rb",
  "ruby_source_checksum": {
    "sha256": "3cfd3d06cec9ad0673d73afc5ad211823dc6cf7f9f2f66ec7d6d1dfb61e3c65a"
  },
  "date_added": "2015-11-25T17:00:26+00:00",
  "readme": "\n# ◲  desk\n\n[![build](https://api.travis-ci.org/jamesob/desk.svg?branch=master)](https://travis-ci.org/jamesob/desk) [![Join the chat at https://gitter.im/jamesob/desk](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/jamesob/desk?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nLightweight workspace manager for the shell.\n\nDesk makes it easy to flip back and forth between different project contexts in\nyour favorite shell. Change directory, activate a virtualenv or rvm, load\nin domain-specific aliases, environment variables, functions, arbitrary shell files, \nall in a single command.\n\nInstead of relying on `CTRL-R` to execute and recall (\"that command's gotta\nbe here somewhere...\"), desk helps shorten and document those actions with\nshell aliases and functions, which are then namespaced under a particular\ndesk.\n\nBecause Deskfiles are just enriched shell scripts, the possibilities are \nendless. For example, when doing work on AWS I have desk \nsecurely load AWS API keys into environment variables via \n[`pass`](https://www.passwordstore.org/) -- no effort on my part, and no \nrisk of accidentally persisting that sensitive information to a history file.\n\n<img src='screencap.gif' width=700>\n\nI have a hard time calling this a \"workspace manager\" with a straight\nface -- it's basically just a shell script that sources another shell script in a new shell.\nBut I often find myself working in multiple different code trees simultaneously:\nthe quick context switches and namespaced commands that desk facilitates\nhave proven useful.\n\nThere are no dependencies other than `bash`. Desk is explicitly tested with `bash`,\n`zsh`, and `fish`.\n\n```sh\n◲  desk 0.6.0\n\nUsage:\n\n    desk\n        List the current desk and any associated aliases. If no desk\n        is being used, display available desks.\n    desk init\n        Initialize desk configuration.\n    desk (list|ls)\n        List all desks along with a description.\n    desk (.|go) [<desk-name-or-path> [shell-args...]]\n        Activate a desk. Extra arguments are passed onto shell. If called with\n        no arguments, look for a Deskfile in the current directory. If not a\n        recognized desk, try as a path to directory containing a Deskfile.\n    desk run <desk-name> <cmd>\n        Run a command within a desk's environment then exit. Think '$SHELL -c'.\n    desk edit [desk-name]\n        Edit (or create) a deskfile with the name specified, otherwise\n        edit the active deskfile.\n    desk help\n        Show this text.\n    desk version\n        Show version information.\n\nSince desk spawns a shell, to deactivate and \"pop\" out a desk, you\nsimply need to exit or otherwise end the current shell process.\n```\n\nFor example, given this deskfile (`~/.desk/desks/tf.sh`):\n```sh\n# tf.sh\n#\n# Description: desk for doing work on a terraform-based repository\n#\n\ncd ~/terraform-repo\n\n# Set up AWS env variables: <key id> <secret>\nset_aws_env() {\n  export AWS_ACCESS_KEY_ID=\"$1\"\n  export AWS_SECRET_ACCESS_KEY=\"$2\"\n}\n\n# Run `terraform plan` with proper AWS var config\nplan() {\n  terraform plan -module-depth=-1 \\\n    -var \"access_key=${AWS_ACCESS_KEY_ID}\" \\\n    -var \"secret_key=${AWS_SECRET_ACCESS_KEY}\"\n}\n\n# Run `terraform apply` with proper AWS var config\nalias apply='terraform apply'\n```\n\nwe'd get\n\n```sh\n$ desk . tf\n$ desk\n\ntf\ndesk for doing work on a terraform repo\n\n  set_aws_env   Set up AWS env variables: <key id> <secret>\n  plan          Run `terraform plan` with proper AWS var config\n  apply         Run `terraform apply` with proper AWS var config\n```\n\nBasically, desk just associates a shell script (`name.sh`) with a name. When\nyou call `desk . name`, desk drops you into a shell where `name.sh` has been\nexecuted, and then desk extracts out certain comments in `name.sh` for useful\nrendering.\n\n### Installing\n\n#### With homebrew\n\n`brew install desk`\n\n#### With curl\n\nAssuming `~/bin` exists and is on the PATH... otherwise, substitute `/usr/local/bin`\nand add `sudo` as needed.\n\n0. `curl https://raw.githubusercontent.com/jamesob/desk/master/desk > ~/bin/desk`\n0. `chmod +x ~/bin/desk`\n\n#### With git\n\n0. `git clone git@github.com:jamesob/desk.git && cd desk && sudo make install`\n\nAfter that, run `desk init` and start adding deskfiles with either `desk edit [deskfile name]`\nor by manually adding shell scripts into your deskfiles directory (by default `~/.desk/desks/`).\n\n### Enabling shell extensions\n\n**NB**: Shell extensions are automatically enabled if Desk is installed via Homebrew.\n\n#### Using bash\n\n0. Add `source /path/to/desk/repo/shell_plugins/bash/desk` to your `.bashrc`.\n\n#### Using fish\n\n```fish\nmkdir -p ~/.config/fish/completions\ncp /path/to/desk/repo/shell_plugins/fish/desk.fish ~/.config/fish/completions\n```\n\n#### Using zsh\n\n0. Add `fpath=(/path/to/desk/repo/shell_plugins/zsh $fpath)` to your `.zshrc`.\n\n\nOptionally, use one of the zsh plugin frameworks mentioned below.\n\n#### Using [oh-my-zsh](http://ohmyz.sh/)\n\n0. `make oh-my-zsh` from within this repo. This sets up a symlink.\n\nor\n\n0. `cd ~/.oh-my-zsh/custom/plugins`\n0. `git clone git@github.com:jamesob/desk.git /tmp/desk && cp -r /tmp/desk/shell_plugins/zsh desk`\n0. Add desk to your plugin list\n\n#### Using [Antigen](https://github.com/zsh-users/antigen)\n\n0. Add `antigen bundle jamesob/desk shell_plugins/zsh` to your `.zshrc`\n0. Open a new terminal window. Antigen will clone the desk repo and add it to your path.\n\n#### Using [zgen](https://github.com/tarjoilija/zgen)\n\n0. Add `zgen load jamesob/desk shell_plugins/zsh` to your `.zshrc` with your other load commands\n0. `rm ~/.zgen/init.zsh`\n0. Start a new shell; zgen will generate a new `init.zsh` and automatically clone the desk repository for you and add it to your path.\n\n### Deskfile rules\n\nDeskfiles are just shell scripts, nothing more, that live in the desk config directory.\nDesk does pay attention to certain kinds of comments, though.\n\n- *description*: you can describe a deskfile by including `# Description: ...`\n  somewhere in the file.\n\n- *alias and function docs*: if the line above an alias or function is a\n  comment, it will be used as documentation.\n \n### Deskfiles\n\nDeskfiles are just shell scripts at the root of a project directory that \nadhere to the conventions above. These can be put into version control to\nformalize and ease common development tasks like running tests or doing\nlocal builds.\n\nFor example, if we have some directory or repository called `myproject`, if\nwe create `myproject/Deskfile`, we'll be able to do any of the following:\n```sh\n$ desk go /path/to/myproject/\n$ desk go /path/to/myproject/Deskfile\nmyproject/ $ desk go .\nmyproject/ $ desk go\n```\n \n### Sharing deskfiles across computers\n\nOf course, the desk config directory (by default `~/.desks`) can be a symlink\nso that deskfiles can be stored in some centralized place, like Dropbox,\nand so shared across many computers.\n\n### Using a non-default config location\n\nBy default, desk configuration lives in `~/.desk` (`$DESK_DIR`) and deskfiles\nlive in `~/.desk/desks` (`$DESK_DESKS_DIR`). If you want to use some other\nlocation, specify as much in `desk init` and then ensure you set `$DESK_DIR`\nand/or `$DESK_DESKS_DIR` to match in your shell's rc file.\n\n### Shortening invocation\n\nTyping `desk .` frequently can get old; personally, I like to alias this with\n```sh\nalias d.='desk .'\n```\nin my shell rc file.\n\n### Usage with OS X\n\nDesk won't work when used strictly with `~/.bash_profile` on OS X's terminal, since\nthe content of `~/.bash_profile` is only executed on *login*, not shell creation, as\nexplained [here](http://www.joshstaiger.org/archives/2005/07/bash_profile_vs.html).\n\nMy recommendation is to use `~/.bashrc` as your general-purpose config file, then simply\nhave `~/.bash_profile` point to it:\n```sh\n# ~/.bash_profile\n\nif [ -f ~/.bashrc ]; then\n   source ~/.bashrc\nfi\n```\n\n### Related projects\n\n- [godesk](https://github.com/hamin/godesk) by @hamin: a desk launcher with fuzzy filtering\n\n\n### Tips accepted\n\n![18ehgMUJBqKc2Eyi6WHiMwHFwA8kobYEhy](http://i.imgur.com/KAfUPA6.png)\n\nBTC: `18ehgMUJBqKc2Eyi6WHiMwHFwA8kobYEhy`\n\nHalf of all tips will be donated to [an organization providing aid to Syrian refugees](http://www.moas.eu/).\n\n#### Donations made on behalf of tippers\n\n| date | amount | organization |\n| ---- | ------ | ------------ |\n| 2015-11-18 | $1.07 | http://moas.eu |\n| 2016-11-14 | $21.00 | http://moas.eu |"
}
