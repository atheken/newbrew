{
  "name": "pg_cron",
  "full_name": "pg_cron",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Run periodic jobs in PostgreSQL",
  "license": "PostgreSQL",
  "homepage": "https://github.com/citusdata/pg_cron",
  "versions": {
    "stable": "1.5.2",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/citusdata/pg_cron/archive/refs/tags/v1.5.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "6f7f0980c03f1e2a6a747060e67bf4a303ca2a50e941e2c19daeed2b44dec744"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/pg_cron/blobs/sha256:d1354aab62f348135f3eb3f958501713abfd4f55f7b0d31d5f9be7f3f8b957b0",
          "sha256": "d1354aab62f348135f3eb3f958501713abfd4f55f7b0d31d5f9be7f3f8b957b0"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/pg_cron/blobs/sha256:f1966148855d0c61e57332da132ae076891d1a209fe0c375c7fcc3a267db7139",
          "sha256": "f1966148855d0c61e57332da132ae076891d1a209fe0c375c7fcc3a267db7139"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/pg_cron/blobs/sha256:b2fc6d147b890e786eca05560d8e2757a19e2606c628b8e21a1f826dd14d2132",
          "sha256": "b2fc6d147b890e786eca05560d8e2757a19e2606c628b8e21a1f826dd14d2132"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/pg_cron/blobs/sha256:facab61695bb48936085eee1905431a60473ec5d9b1626166ad5f7cc52b3984f",
          "sha256": "facab61695bb48936085eee1905431a60473ec5d9b1626166ad5f7cc52b3984f"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/pg_cron/blobs/sha256:80743a74bb21f30bcfe98dd62e720f5a8dffca8978d6c376051b7732448758c7",
          "sha256": "80743a74bb21f30bcfe98dd62e720f5a8dffca8978d6c376051b7732448758c7"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/pg_cron/blobs/sha256:904da5e3e39d239c4f70e56b6823fae21c44e89a8c0b54ea25201b0e9742ea00",
          "sha256": "904da5e3e39d239c4f70e56b6823fae21c44e89a8c0b54ea25201b0e9742ea00"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pg_cron/blobs/sha256:a84b6f00593314a8d52e9d4cb6c8dce0442e0d7f67a622e040f0a9538924a914",
          "sha256": "a84b6f00593314a8d52e9d4cb6c8dce0442e0d7f67a622e040f0a9538924a914"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "postgresql@14"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/pg_cron.rb",
  "ruby_source_checksum": {
    "sha256": "0e2a8f4a167e789eb63cdde498036e9dcc806ff49d38b2886f3668aad2ac029f"
  },
  "date_added": "2022-06-06T14:15:21+00:00",
  "readme": "[![Citus Banner](/github-banner.png)](https://www.citusdata.com/)\n\n## What is pg_cron?\n\npg_cron is a simple cron-based job scheduler for PostgreSQL (10 or higher) that runs inside the database as an extension. It uses the same syntax as regular cron, but it allows you to schedule PostgreSQL commands directly from the database. You can also use '[1-59] seconds' to schedule a job based on an interval.\n\n```sql\n-- Delete old data on Saturday at 3:30am (GMT)\nSELECT cron.schedule('30 3 * * 6', $$DELETE FROM events WHERE event_time < now() - interval '1 week'$$);\n schedule\n----------\n       42\n\n-- Vacuum every day at 10:00am (GMT)\nSELECT cron.schedule('nightly-vacuum', '0 10 * * *', 'VACUUM');\n schedule\n----------\n       43\n\n-- Change to vacuum at 3:00am (GMT)\nSELECT cron.schedule('nightly-vacuum', '0 3 * * *', 'VACUUM');\n schedule\n----------\n       43\n\n-- Stop scheduling jobs\nSELECT cron.unschedule('nightly-vacuum' );\n unschedule \n------------\n t\n\nSELECT cron.unschedule(42);\n unschedule\n------------\n          t\n\n-- Vacuum every Sunday at 4:00am (GMT) in a database other than the one pg_cron is installed in\nSELECT cron.schedule_in_database('weekly-vacuum', '0 4 * * 0', 'VACUUM', 'some_other_database');\n schedule\n----------\n       44\n\n-- Call a stored procedure every 5 seconds\nSELECT cron.schedule('process-updates', '5 seconds', 'CALL process_updates()'); \n```\n\npg_cron can run multiple jobs in parallel, but it runs at most one instance of a job at a time. If a second run is supposed to start before the first one finishes, then the second run is queued and started as soon as the first run completes.\n\nThe schedule uses the standard cron syntax, in which * means \"run every time period\", and a specific number means \"but only at this time\":\n\n```\n ┌───────────── min (0 - 59)\n │ ┌────────────── hour (0 - 23)\n │ │ ┌─────────────── day of month (1 - 31)\n │ │ │ ┌──────────────── month (1 - 12)\n │ │ │ │ ┌───────────────── day of week (0 - 6) (0 to 6 are Sunday to\n │ │ │ │ │                  Saturday, or use names; 7 is also Sunday)\n │ │ │ │ │\n │ │ │ │ │\n * * * * *\n```\n\nAn easy way to create a cron schedule is: [crontab.guru](http://crontab.guru/).\n\nThe code in pg_cron that handles parsing and scheduling comes directly from the cron source code by Paul Vixie, hence the same options are supported.\n\n## Installing pg_cron\n\nInstall on Red Hat, CentOS, Fedora, Amazon Linux with PostgreSQL 15 using [PGDG](https://yum.postgresql.org/repopackages/):\n\n```bash\n# Install the pg_cron extension\nsudo yum install -y pg_cron_15\n```\n\nInstall on Debian, Ubuntu with PostgreSQL 15 using [apt.postgresql.org](https://wiki.postgresql.org/wiki/Apt):\n\n```bash\n# Install the pg_cron extension\nsudo apt-get -y install postgresql-15-cron\n```\n\nYou can also install pg_cron by building it from source:\n\n```bash\ngit clone https://github.com/citusdata/pg_cron.git\ncd pg_cron\n# Ensure pg_config is in your path, e.g.\nexport PATH=/usr/pgsql-15/bin:$PATH\nmake && sudo PATH=$PATH make install\n```\n\n## Setting up pg_cron\n\nTo start the pg_cron background worker when PostgreSQL starts, you need to add pg_cron to `shared_preload_libraries` in postgresql.conf. Note that pg_cron does not run any jobs as a long a server is in [hot standby](https://www.postgresql.org/docs/current/static/hot-standby.html) mode, but it automatically starts when the server is promoted.\n\n```\n# add to postgresql.conf\n\n# required to load pg_cron background worker on start-up\nshared_preload_libraries = 'pg_cron'\n```\n\nBy default, the pg_cron background worker expects its metadata tables to be created in the \"postgres\" database. However, you can configure this by setting the `cron.database_name` configuration parameter in postgresql.conf.\n```\n# add to postgresql.conf\n\n# optionally, specify the database in which the pg_cron background worker should run (defaults to postgres)\ncron.database_name = 'postgres'\n```\n`pg_cron` may only be installed to one database in a cluster. If you need to run jobs in multiple databases, use `cron.schedule_in_database()`.\n\nPreviously pg_cron could only use GMT time, but now you can adapt your time by setting `cron.timezone` in postgresql.conf.\n```\n# add to postgresql.conf\n\n# optionally, specify the timezone in which the pg_cron background worker should run (defaults to GMT). E.g:\ncron.timezone = 'PRC'\n```\n\nAfter restarting PostgreSQL, you can create the pg_cron functions and metadata tables using `CREATE EXTENSION pg_cron`.\n\n```sql\n-- run as superuser:\nCREATE EXTENSION pg_cron;\n\n-- optionally, grant usage to regular users:\nGRANT USAGE ON SCHEMA cron TO marco;\n```\n\n### Ensuring pg_cron can start jobs\n\n**Important**: By default, pg_cron uses libpq to open a new connection to the local database, which needs to be allowed by [pg_hba.conf](https://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html). \nIt may be necessary to enable `trust` authentication for connections coming from localhost in  for the user running the cron job, or you can add the password to a [.pgpass file](https://www.postgresql.org/docs/current/static/libpq-pgpass.html), which libpq will use when opening a connection. \n\nYou can also use a unix domain socket directory as the hostname and enable `trust` authentication for local connections in [pg_hba.conf](https://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html), which is normally safe:\n```\n# Connect via a unix domain socket:\ncron.host = '/tmp'\n\n# Can also be an empty string to look for the default directory:\ncron.host = ''\n```\n\nAlternatively, pg_cron can be configured to use background workers. In that case, the number of concurrent jobs is limited by the `max_worker_processes` setting, so you may need to raise that.\n\n```\n# Schedule jobs via background workers instead of localhost connections\ncron.use_background_workers = on\n# Increase the number of available background workers from the default of 8\nmax_worker_processes = 20\n```\n\nFor security, jobs are executed in the database in which the `cron.schedule` function is called with the same permissions as the current user. In addition, users are only able to see their own jobs in the `cron.job` table.\n\n## Viewing job run details\n\nYou can view the status of running and recently completed job runs in the `cron.job_run_details`:\n\n```sql\nselect * from cron.job_run_details order by start_time desc limit 5;\n┌───────┬───────┬─────────┬──────────┬──────────┬───────────────────┬───────────┬──────────────────┬───────────────────────────────┬───────────────────────────────┐\n│ jobid │ runid │ job_pid │ database │ username │      command      │  status   │  return_message  │          start_time           │           end_time            │\n├───────┼───────┼─────────┼──────────┼──────────┼───────────────────┼───────────┼──────────────────┼───────────────────────────────┼───────────────────────────────┤\n│    10 │  4328 │    2610 │ postgres │ marco    │ select process()  │ succeeded │ SELECT 1         │ 2023-02-07 09:30:00.098164+01 │ 2023-02-07 09:30:00.130729+01 │\n│    10 │  4327 │    2609 │ postgres │ marco    │ select process()  │ succeeded │ SELECT 1         │ 2023-02-07 09:29:00.015168+01 │ 2023-02-07 09:29:00.832308+01 │\n│    10 │  4321 │    2603 │ postgres │ marco    │ select process()  │ succeeded │ SELECT 1         │ 2023-02-07 09:28:00.011965+01 │ 2023-02-07 09:28:01.420901+01 │\n│    10 │  4320 │    2602 │ postgres │ marco    │ select process()  │ failed    │ server restarted │ 2023-02-07 09:27:00.011833+01 │ 2023-02-07 09:27:00.72121+01  │\n│     9 │  4320 │    2602 │ postgres │ marco    │ select do_stuff() │ failed    │ job canceled     │ 2023-02-07 09:26:00.011833+01 │ 2023-02-07 09:26:00.22121+01  │\n└───────┴───────┴─────────┴──────────┴──────────┴───────────────────┴───────────┴──────────────────┴───────────────────────────────┴───────────────────────────────┘\n(10 rows)\n```\n \nThe records in `cron.job_run_details` are not cleaned automatically, but every user that can schedule cron jobs also has permission to delete their own `cron.job_run_details` records. \n\nEspecially when you have jobs that run every few seconds, it can be a good idea to clean up regularly, which can easily be done using pg_cron itself:\n\n```sql\n-- Delete old cron.job_run_details records of the current user every day at noon\nSELECT  cron.schedule('delete-job-run-details', '0 12 * * *', $$DELETE FROM cron.job_run_details WHERE end_time < now() - interval '7 days'$$);\n```\n\nIf you do not want to use `cron.job_run_details` at all, then you can add `cron.log_run = off` to `postgresql.conf`.\n\n## Example use cases\n\nArticles showing possible ways of using pg_cron:\n\n* [Auto-partitioning using pg_partman](https://www.citusdata.com/blog/2018/01/24/citus-and-pg-partman-creating-a-scalable-time-series-database-on-postgresql/)\n* [Computing rollups in an analytical dashboard](https://www.citusdata.com/blog/2017/12/27/real-time-analytics-dashboards-with-citus/)\n* [Deleting old data, vacuum](https://www.citusdata.com/blog/2016/09/09/pgcron-run-periodic-jobs-in-postgres/)\n* [Feeding cats](http://bonesmoses.org/2016/09/09/pg-phriday-irrelevant-inclinations/)\n* [Routinely invoking a function](https://fluca1978.github.io/2019/05/21/pgcron.html)\n* [Postgres as a cron server](https://supabase.io/blog/2021/03/05/postgres-as-a-cron-server)\n\n## Managed services\n\nThe following table keeps track of which of the major managed Postgres services support pg_cron.\n\n| Service       | Supported     |\n| ------------- |:-------------:|\n| [Aiven](https://aiven.io/postgresql) | :heavy_check_mark: |\n| [Alibaba Cloud](https://www.alibabacloud.com/help/doc-detail/150355.htm) | :heavy_check_mark: |\n| [Amazon RDS](https://aws.amazon.com/rds/postgresql/)     | :heavy_check_mark:      |          |\n| [Azure](https://azure.microsoft.com/en-us/services/postgresql/) | :heavy_check_mark:  |\n| [Crunchy Bridge](https://www.crunchydata.com/products/crunchy-bridge/?ref=producthunt) | :heavy_check_mark: |\n| [DigitalOcean](https://www.digitalocean.com/products/managed-databases/) | :heavy_check_mark: |\n| [Google Cloud](https://cloud.google.com/sql/postgresql/) | :heavy_check_mark: |\n| [Heroku](https://elements.heroku.com/addons/heroku-postgresql) | :x: | |\n| [ScaleGrid](https://scalegrid.io/postgresql.html) | :heavy_check_mark:  |\n| [Scaleway](https://www.scaleway.com/en/database/) | :heavy_check_mark:  |\n| [Supabase](https://supabase.io/docs/guides/database) | :heavy_check_mark:  |\n\n\n## Code of Conduct\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments."
}
