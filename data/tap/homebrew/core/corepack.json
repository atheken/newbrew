{
  "name": "corepack",
  "full_name": "corepack",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Package acting as bridge between Node projects and their package managers",
  "license": "MIT",
  "homepage": "https://github.com/nodejs/corepack",
  "versions": {
    "stable": "0.19.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://registry.npmjs.org/corepack/-/corepack-0.19.0.tgz",
      "tag": null,
      "revision": null,
      "checksum": "889a93e002451a46710d5a799863c1e788ba6545d196bdc9e978f0bd46d071af"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/corepack/blobs/sha256:644006acd5307d4cb3f3d0fe992aa1831ee37d96f5b48a6500b22a1faf654b45",
          "sha256": "644006acd5307d4cb3f3d0fe992aa1831ee37d96f5b48a6500b22a1faf654b45"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "node"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [
    "hadoop",
    "yarn",
    "pnpm"
  ],
  "conflicts_with_reasons": [
    "both install `yarn` binaries",
    "both install `yarn` and `yarnpkg` binaries",
    "both install `pnpm` and `pnpx` binaries"
  ],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/corepack.rb",
  "ruby_source_checksum": {
    "sha256": "04ff5510c9ecfab04dcfc8bb9464f66b1e823fdb10792420828e3f3f772eaacb"
  },
  "date_added": "2021-11-03T17:23:02+00:00",
  "readme": "# <img src=\"./icon.svg\" height=\"25\" /> corepack\n\nCorepack is a zero-runtime-dependency Node.js script that acts as a bridge\nbetween Node.js projects and the package managers they are intended to be used\nwith during development. In practical terms, **Corepack lets you use Yarn, npm,\nand pnpm without having to install them**.\n\n## How to Install\n\n### Default Installs\n\nCorepack is [distributed by default with all recent Node.js versions](https://nodejs.org/api/corepack.html).\nRun `corepack enable` to install the required Yarn and pnpm binaries on your path.\n\n### Manual Installs\n\n<details>\n<summary>Install Corepack using npm</summary>\n\nFirst uninstall your global Yarn and pnpm binaries (just leave npm). In general,\nyou'd do this by running the following command:\n\n```shell\nnpm uninstall -g yarn pnpm\n\n# That should be enough, but if you installed Yarn without going through npm it might\n# be more tedious - for example, you might need to run `brew uninstall yarn` as well.\n```\n\nThen install Corepack:\n\n```shell\nnpm install -g corepack\n```\n\nWe do acknowledge the irony and overhead of using npm to install Corepack, which\nis at least part of why the preferred option is to use the Corepack version that\nis distributed along with Node.js itself.\n\n</details>\n\n<details><summary>Install Corepack from source</summary>\n\nSee [`CONTRIBUTING.md`](./CONTRIBUTING.md).\n\n</details>\n\n## Usage\n\n### When Building Packages\n\nJust use your package managers as you usually would. Run `yarn install` in Yarn\nprojects, `pnpm install` in pnpm projects, and `npm` in npm projects. Corepack\nwill catch these calls, and depending on the situation:\n\n- **If the local project is configured for the package manager you're using**,\n  Corepack will silently download and cache the latest compatible version.\n\n- **If the local project is configured for a different package manager**,\n  Corepack will request you to run the command again using the right package\n  manager - thus avoiding corruptions of your install artifacts.\n\n- **If the local project isn't configured for any package manager**, Corepack\n  will assume that you know what you're doing, and will use whatever package\n  manager version has been pinned as \"known good release\". Check the relevant\n  section for more details.\n\n### When Authoring Packages\n\nSet your package's manager with the `packageManager` field in `package.json`:\n\n```json\n{\n  \"packageManager\": \"yarn@3.2.3+sha224.953c8233f7a92884eee2de69a1b92d1f2ec1655e66d08071ba9a02fa\"\n}\n```\n\nHere, `yarn` is the name of the package manager, specified at version `3.2.3`,\nalong with the SHA-224 hash of this version for validation.\n`packageManager@x.y.z` is required. The hash is optional but strongly\nrecommended as a security practice. Permitted values for the package manager are\n`yarn`, `npm`, and `pnpm`.\n\n## Known Good Releases\n\nWhen running Corepack within projects that don't list a supported package\nmanager, it will default to a set of Known Good Releases. In a way, you can\ncompare this to Node.js, where each version ships with a specific version of\nnpm.\n\nIf there is no Known Good Release for the requested package manager, Corepack\nlooks up the npm registry for the latest available version and cache it for\nfuture use.\n\nThe Known Good Releases can be updated system-wide using the `--activate` flag\nfrom the `corepack prepare` and `corepack hydrate` commands.\n\n## Offline Workflow\n\nThe utility commands detailed in the next section.\n\n- Either you can use the network while building your container image, in which\n  case you'll simply run `corepack prepare` to make sure that your image\n  includes the Last Known Good release for the specified package manager.\n\n  - If you want to have _all_ Last Known Good releases for all package managers,\n    just use the `--all` flag which will do just that.\n\n- Or you're publishing your project to a system where the network is\n  unavailable, in which case you'll preemptively generate a package manager\n  archive from your local computer (using `corepack prepare -o`) before storing\n  it somewhere your container will be able to access (for example within your\n  repository). After that it'll just be a matter of running\n  `corepack hydrate <path/to/corepack.tgz>` to setup the cache.\n\n## Utility Commands\n\n### `corepack <binary name>[@<version>] [... args]`\n\nThis meta-command runs the specified package manager in the local folder. You\ncan use it to force an install to run with a given version, which can be useful\nwhen looking for regressions.\n\nNote that those commands still check whether the local project is configured for\nthe given package manager (ie you won't be able to run `corepack yarn install`\non a project where the `packageManager` field references `pnpm`).\n\n### `corepack enable [... name]`\n\n| Option                | Description                             |\n| --------------------- | --------------------------------------- |\n| `--install-directory` | Add the shims to the specified location |\n\nThis command will detect where Corepack is installed and will create shims next\nto it for each of the specified package managers (or all of them if the command\nis called without parameters). Note that the npm shims will not be installed\nunless explicitly requested, as npm is currently distributed with Node.js\nthrough other means.\n\nIf the file system where the `corepack` binary is located is read-only, this\ncommand will fail. A workaround is to add the binaries as alias in your\nshell configuration file (e.g. in `~/.bash_aliases`):\n\n```sh\nalias yarn=\"corepack yarn\"\nalias yarnpkg=\"corepack yarnpkg\"\nalias pnpm=\"corepack pnpm\"\nalias pnpx=\"corepack pnpx\"\nalias npm=\"corepack npm\"\nalias npx=\"corepack npx\"\n```\n\nOn Windows PowerShell, you can add functions using the `$PROFILE` automatic\nvariable:\n\n```powershell\necho \"function yarn { corepack yarn `$args }\" >> $PROFILE\necho \"function yarnpkg { corepack yarnpkg `$args }\" >> $PROFILE\necho \"function pnpm { corepack pnpm `$args }\" >> $PROFILE\necho \"function pnpx { corepack pnpx `$args }\" >> $PROFILE\necho \"function npm { corepack npm `$args }\" >> $PROFILE\necho \"function npx { corepack npx `$args }\" >> $PROFILE\n```\n\n### `corepack disable [... name]`\n\n| Option                | Description                                |\n| --------------------- | ------------------------------------------ |\n| `--install-directory` | Remove the shims to the specified location |\n\nThis command will detect where Node.js is installed and will remove the shims\nfrom there.\n\n### `corepack prepare [... name@version]`\n\n| Option        | Description                                                             |\n| ------------- | ----------------------------------------------------------------------- |\n| `--all`       | Prepare the \"Last Known Good\" version of all supported package managers |\n| `-o,--output` | Also generate an archive containing the package managers                |\n| `--activate`  | Also update the \"Last Known Good\" release                               |\n\nThis command will download the given package managers (or the one configured for\nthe local project if no argument is passed in parameter) and store it within the\nCorepack cache. If the `-o,--output` flag is set (optionally with a path as\nparameter), an archive will also be generated that can be used by the\n`corepack hydrate` command.\n\n### `corepack hydrate <path/to/corepack.tgz>`\n\n| Option       | Description                               |\n| ------------ | ----------------------------------------- |\n| `--activate` | Also update the \"Last Known Good\" release |\n\nThis command will retrieve the given package manager from the specified archive\nand will install it within the Corepack cache, ready to be used without further\nnetwork interaction.\n\n## Environment Variables\n\n- `COREPACK_DEFAULT_TO_LATEST` can be set to `0` in order to instruct Corepack\n  not to lookup on the remote registry for the latest version of the selected\n  package manager.\n\n- `COREPACK_ENABLE_NETWORK` can be set to `0` to prevent Corepack from accessing\n  the network (in which case you'll be responsible for hydrating the package\n  manager versions that will be required for the projects you'll run, using\n  `corepack hydrate`).\n\n- `COREPACK_ENABLE_STRICT` can be set to `0` to prevent Corepack from throwing\n  error if the package manager does not correspond to the one defined for the\n  current project. This means that if a user is using the package manager\n  specified in the current project, it will use the version specified by the\n  project's `packageManager` field. But if the user is using other package\n  manager different from the one specified for the current project, it will use\n  the system-wide package manager version.\n\n- `COREPACK_ENABLE_PROJECT_SPEC` can be set to `0` to prevent Corepack from\n  checking if the package manager corresponds to the one defined for the current\n  project. This means that it will always use the system-wide package manager\n  regardless of what is being specified in the project's `packageManager` field.\n\n- `COREPACK_HOME` can be set in order to define where Corepack should install\n  the package managers. By default it is set to `%LOCALAPPDATA%\\node\\corepack`\n  on Windows, and to `$HOME/.cache/node/corepack` everywhere else.\n\n- `COREPACK_ROOT` has no functional impact on Corepack itself; it's\n  automatically being set in your environment by Corepack when it shells out to\n  the underlying package managers, so that they can feature-detect its presence\n  (useful for commands like `yarn init`).\n\n- `COREPACK_NPM_REGISTRY` sets the registry base url used when retrieving\n  package managers from npm. Default value is `https://registry.npmjs.org`\n\n- `COREPACK_NPM_TOKEN` sets a Bearer token authorization header when connecting\n  to a npm type registry.\n\n- `COREPACK_NPM_USERNAME` and `COREPACK_NPM_PASSWORD` to set a Basic\n  authorization header when connecting to a npm type registry. Note that both\n  environment variables are required and as plain text. If you want to send an\n  empty password, explicitly set `COREPACK_NPM_PASSWORD` to an empty string.\n\n- `HTTP_PROXY`, `HTTPS_PROXY`, and `NO_PROXY` are supported through\n  [`node-proxy-agent`](https://github.com/TooTallNate/node-proxy-agent).\n\n## Troubleshooting\n\n### Networking\n\nThere are a wide variety of networking issues that can occur while running `corepack` commands. Things to check:\n\n- Make sure your network connection is active.\n- Make sure the host for your request can be resolved by your DNS; try using\n  `curl [URL]` (ipv4) and `curl -6 [URL]` (ipv6) from your shell.\n- Check your proxy settings (see [Environment Variables](#environment-variables)).\n\n## Contributing\n\nSee [`CONTRIBUTING.md`](./CONTRIBUTING.md).\n\n## Design\n\nSee [`DESIGN.md`](/DESIGN.md).\n\n## License (MIT)\n\nSee [`LICENSE.md`](./LICENSE.md)."
}
