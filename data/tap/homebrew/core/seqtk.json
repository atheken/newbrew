{
  "name": "seqtk",
  "full_name": "seqtk",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Toolkit for processing sequences in FASTA/Q formats",
  "license": "MIT",
  "homepage": "https://github.com/lh3/seqtk",
  "versions": {
    "stable": "1.4",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/lh3/seqtk/archive/v1.4.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "d124604ec24f29ed14ce127426ab90e0f3a2c0280c80d1a3ff8b1c09feede19c"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/seqtk/blobs/sha256:10eca0327229b13765451786c03c7def8fd277d014f5a74e709915fc50a8fdbd",
          "sha256": "10eca0327229b13765451786c03c7def8fd277d014f5a74e709915fc50a8fdbd"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/seqtk/blobs/sha256:fb2ec54def8fadafa1c673e851180f0883e651582a78397394706602786d3559",
          "sha256": "fb2ec54def8fadafa1c673e851180f0883e651582a78397394706602786d3559"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/seqtk/blobs/sha256:325cb00b4694492303da6d2b776bf7ecfc31f9ac6259a9d3d0a1b9ada86d29cc",
          "sha256": "325cb00b4694492303da6d2b776bf7ecfc31f9ac6259a9d3d0a1b9ada86d29cc"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/seqtk/blobs/sha256:a22a8a2d9b1568d03efe732ccd3a4fa461f0b8adab78587a8b6fdbfbb8db292a",
          "sha256": "a22a8a2d9b1568d03efe732ccd3a4fa461f0b8adab78587a8b6fdbfbb8db292a"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/seqtk/blobs/sha256:fed18e5929988555d1623c2a023821de35cd3f200adb40bbb56ecd56b48b5646",
          "sha256": "fed18e5929988555d1623c2a023821de35cd3f200adb40bbb56ecd56b48b5646"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/seqtk/blobs/sha256:ac4bce32281d7b1c988285d0341691bacfaeba03a6d9d82113ff0ead8125accb",
          "sha256": "ac4bce32281d7b1c988285d0341691bacfaeba03a6d9d82113ff0ead8125accb"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/seqtk/blobs/sha256:afd0ca56a9c7ed70b7958688d5d38c85b48c18eba76a52f303abad25f7b41eb0",
          "sha256": "afd0ca56a9c7ed70b7958688d5d38c85b48c18eba76a52f303abad25f7b41eb0"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "zlib"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/seqtk.rb",
  "ruby_source_checksum": {
    "sha256": "709856246c5b8eb07240bef8027572f7092c79fced5416bab11002a9eaac298e"
  },
  "date_added": "2017-12-26T14:14:25+01:00",
  "readme": "Introduction\n------------\n\nSeqtk is a fast and lightweight tool for processing sequences in the FASTA or\nFASTQ format. It seamlessly parses both FASTA and FASTQ files which can also be\noptionally compressed by gzip. To install `seqtk`,\n```sh\ngit clone https://github.com/lh3/seqtk.git;\ncd seqtk; make\n```\nThe only library dependency is zlib.\n\nSeqtk Examples\n--------------\n\n* Convert FASTQ to FASTA:\n\n        seqtk seq -a in.fq.gz > out.fa\n\n* Convert ILLUMINA 1.3+ FASTQ to FASTA and mask bases with quality lower than 20 to lowercases (the 1st command line) or to `N` (the 2nd):\n\n        seqtk seq -aQ64 -q20 in.fq > out.fa\n        seqtk seq -aQ64 -q20 -n N in.fq > out.fa\n\n* Fold long FASTA/Q lines and remove FASTA/Q comments:\n\n        seqtk seq -Cl60 in.fa > out.fa\n\n* Convert multi-line FASTQ to 4-line FASTQ:\n\n        seqtk seq -l0 in.fq > out.fq\n\n* Reverse complement FASTA/Q:\n\n        seqtk seq -r in.fq > out.fq\n\n* Extract sequences with names in file `name.lst`, one sequence name per line:\n\n        seqtk subseq in.fq name.lst > out.fq\n\n* Extract sequences in regions contained in file `reg.bed`:\n\n        seqtk subseq in.fa reg.bed > out.fa\n\n* Mask regions in `reg.bed` to lowercases:\n\n        seqtk seq -M reg.bed in.fa > out.fa\n\n* Subsample 10000 read pairs from two large paired FASTQ files (remember to use the same random seed to keep pairing):\n\n        seqtk sample -s100 read1.fq 10000 > sub1.fq\n        seqtk sample -s100 read2.fq 10000 > sub2.fq\n\n* Trim low-quality bases from both ends using the Phred algorithm:\n\n        seqtk trimfq in.fq > out.fq\n\n* Trim 5bp from the left end of each read and 10bp from the right end:\n\n        seqtk trimfq -b 5 -e 10 in.fa > out.fa\n\n* Find telomere (TTAGGG)n repeats:\n\n        seqtk telo seq.fa > telo.bed 2> telo.count"
}
