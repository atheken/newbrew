{
  "name": "libepoxy",
  "full_name": "libepoxy",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Library for handling OpenGL function pointer management",
  "license": "MIT",
  "homepage": "https://github.com/anholt/libepoxy",
  "versions": {
    "stable": "1.5.10",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://download.gnome.org/sources/libepoxy/1.5/libepoxy-1.5.10.tar.xz",
      "tag": null,
      "revision": null,
      "checksum": "072cda4b59dd098bba8c2363a6247299db1fa89411dc221c8b81b8ee8192e623"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libepoxy/blobs/sha256:52aeeb179036343d54c93b30413f41e7dfd524d2aeb8b7f590ef31bbb07bd657",
          "sha256": "52aeeb179036343d54c93b30413f41e7dfd524d2aeb8b7f590ef31bbb07bd657"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libepoxy/blobs/sha256:a5164efc11c9f11adaba87595c6a12cadf12671e860e9b38d11fa3081c7b2c1c",
          "sha256": "a5164efc11c9f11adaba87595c6a12cadf12671e860e9b38d11fa3081c7b2c1c"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libepoxy/blobs/sha256:839cc3388516586debdc98d72a3fb4b8237ee432a5be7262e8c835367093f29d",
          "sha256": "839cc3388516586debdc98d72a3fb4b8237ee432a5be7262e8c835367093f29d"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libepoxy/blobs/sha256:91cca5d118a350e7105a303fd873915fc5f36c0a83be02101f3c742a52d0059c",
          "sha256": "91cca5d118a350e7105a303fd873915fc5f36c0a83be02101f3c742a52d0059c"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libepoxy/blobs/sha256:9ec0246218c3d31cfce70e1a492f7cdc03884f638d9986be28bec0b769d6648b",
          "sha256": "9ec0246218c3d31cfce70e1a492f7cdc03884f638d9986be28bec0b769d6648b"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libepoxy/blobs/sha256:c398ece0b10339f409d48d3b06866285f7a58294a3dca6d9c88e798a35af6b36",
          "sha256": "c398ece0b10339f409d48d3b06866285f7a58294a3dca6d9c88e798a35af6b36"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libepoxy/blobs/sha256:2b5537e288b18b6545d0cf78229d5c2b695d0d2e51b627e21e77573c88217b42",
          "sha256": "2b5537e288b18b6545d0cf78229d5c2b695d0d2e51b627e21e77573c88217b42"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/libepoxy/blobs/sha256:8798e1682f355df0c5009b8b968ecb2b9bd447f32683ad21f10e68ea60320819",
          "sha256": "8798e1682f355df0c5009b8b968ecb2b9bd447f32683ad21f10e68ea60320819"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "meson",
    "ninja",
    "pkg-config",
    "python@3.11"
  ],
  "dependencies": [
    "freeglut"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/libepoxy.rb",
  "ruby_source_checksum": {
    "sha256": "97e2e51251ccc90152f45ea378a3e3d69cded9b3d28ef607b8bce0b34faba246"
  },
  "date_added": "2015-02-18T22:29:48+00:00",
  "readme": "![Ubuntu](https://github.com/anholt/libepoxy/workflows/Ubuntu/badge.svg)\n![macOS](https://github.com/anholt/libepoxy/workflows/macOS/badge.svg)\n![MSVC Build](https://github.com/anholt/libepoxy/workflows/MSVC%20Build/badge.svg)\n![MSYS2 Build](https://github.com/anholt/libepoxy/workflows/MSYS2%20Build/badge.svg)\n[![License: MIT](https://img.shields.io/badge/license-MIT-brightgreen.svg)](https://opensource.org/licenses/MIT)\n\nEpoxy is a library for handling OpenGL function pointer management for\nyou.\n\nIt hides the complexity of `dlopen()`, `dlsym()`, `glXGetProcAddress()`,\n`eglGetProcAddress()`, etc. from the app developer, with very little\nknowledge needed on their part.  They get to read GL specs and write\ncode using undecorated function names like `glCompileShader()`.\n\nDon't forget to check for your extensions or versions being present\nbefore you use them, just like before!  We'll tell you what you forgot\nto check for instead of just segfaulting, though.\n\nFeatures\n--------\n\n  * Automatically initializes as new GL functions are used.\n  * GL 4.6 core and compatibility context support.\n  * GLES 1/2/3 context support.\n  * Knows about function aliases so (e.g.) `glBufferData()` can be\n    used with `GL_ARB_vertex_buffer_object` implementations, along\n    with GL 1.5+ implementations.\n  * EGL, GLX, and WGL support.\n  * Can be mixed with non-epoxy GL usage.\n\nBuilding\n--------\n\n```sh\nmkdir _build && cd _build\nmeson\nninja\nsudo ninja install\n```\n\nDependencies for Debian:\n\n  * meson\n  * libegl1-mesa-dev\n\nDependencies for macOS (using MacPorts): \n\n  * pkgconfig\n  * meson\n\nThe test suite has additional dependencies depending on the platform.\n(X11, EGL, a running X Server).\n\nSwitching your code to using epoxy\n----------------------------------\n\nIt should be as easy as replacing:\n\n```cpp\n#include <GL/gl.h>\n#include <GL/glx.h>\n#include <GL/glext.h>\n```\n\nwith:\n\n```cpp\n#include <epoxy/gl.h>\n#include <epoxy/glx.h>\n```\n\nAs long as epoxy's headers appear first, you should be ready to go.\nAdditionally, some new helpers become available, so you don't have to\nwrite them:\n\n`int epoxy_gl_version()` returns the GL version:\n\n  * 12 for GL 1.2\n  * 20 for GL 2.0\n  * 44 for GL 4.4\n\n`bool epoxy_has_gl_extension()` returns whether a GL extension is\navailable (`GL_ARB_texture_buffer_object`, for example).\n\nNote that this is not terribly fast, so keep it out of your hot paths,\nok?\n\nWhy not use libGLEW?\n--------------------\n\nGLEW has several issues:\n\n  * Doesn't know about aliases of functions (There are 5 providers of\n    `glPointParameterfv()`, for example, and you don't want to have to\n    choose which one to call when they're all the same).\n  * Doesn't support OpenGL ES.\n  * Has a hard-to-maintain parser of extension specification text\n    instead of using the old .spec file or the new .xml.\n  * Has significant startup time overhead when `glewInit()`\n    autodetects the world.\n  * User-visible multithreading support choice for win32.\n\nThe motivation for this project came out of previous use of libGLEW in\n[piglit](http://piglit.freedesktop.org/).  Other GL dispatch code\ngeneration projects had similar failures.  Ideally, piglit wants to be\nable to build a single binary for a test that can run on whatever\ncontext or window system it chooses, not based on link time choices.\n\nWe had to solve some of GLEW's problems for piglit and solving them\nmeant replacing every single piece of GLEW, so we built\npiglit-dispatch from scratch.  And since we wanted to reuse it in\nother GL-related projects, this is the result.\n\nKnown issues when running on Windows\n------------------------------------\n\nThe automatic per-context symbol resolution for win32 requires that\nepoxy knows when `wglMakeCurrent()` is called, because `wglGetProcAddress()`\nreturns values depend on the context's device and pixel format.  If\n`wglMakeCurrent()` is called from outside of epoxy (in a way that might\nchange the device or pixel format), then epoxy needs to be notified of\nthe change using the `epoxy_handle_external_wglMakeCurrent()` function.\n\nThe win32 `wglMakeCurrent()` variants are slower than they should be,\nbecause they should be caching the resolved dispatch tables instead of\nresetting an entire thread-local dispatch table every time."
}
