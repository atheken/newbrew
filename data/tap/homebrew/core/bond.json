{
  "name": "bond",
  "full_name": "bond",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Cross-platform framework for working with schematized data",
  "license": "MIT",
  "homepage": "https://github.com/microsoft/bond",
  "versions": {
    "stable": "10.0.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/microsoft/bond/archive/10.0.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "87858b597a1da74421974d5c3cf3a9ea56339643b19b48274d44b13bc9483f29"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/bond/blobs/sha256:1b43d85e0b9f6b61893d0c53a2e6609ae47b848cbc0d9edb5b16a8ce8c17d9c0",
          "sha256": "1b43d85e0b9f6b61893d0c53a2e6609ae47b848cbc0d9edb5b16a8ce8c17d9c0"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/bond/blobs/sha256:7c8b0675dd3148dee7a8cf6fd0a73fb870e1979a9a2121af9bd8486e3cc12f78",
          "sha256": "7c8b0675dd3148dee7a8cf6fd0a73fb870e1979a9a2121af9bd8486e3cc12f78"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/bond/blobs/sha256:31b834df421932bba76bc64d08b6a6900d6c05205c87e4f3d8c4e4218c3a953e",
          "sha256": "31b834df421932bba76bc64d08b6a6900d6c05205c87e4f3d8c4e4218c3a953e"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/bond/blobs/sha256:d20864dea9b364962c2025a463ca19cc1136a633df86ff5d1f59b44ae9262f38",
          "sha256": "d20864dea9b364962c2025a463ca19cc1136a633df86ff5d1f59b44ae9262f38"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bond/blobs/sha256:c5c047bff8729f94818174f40051191e242ccd8383553b30b18e0bc598847126",
          "sha256": "c5c047bff8729f94818174f40051191e242ccd8383553b30b18e0bc598847126"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake",
    "ghc@8.6",
    "haskell-stack"
  ],
  "dependencies": [
    "boost",
    "rapidjson"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    {
      "xz": "build"
    }
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [
    {
      "name": "arch",
      "cask": null,
      "download": null,
      "version": "x86_64",
      "contexts": [],
      "specs": [
        "stable"
      ]
    }
  ],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": true,
  "deprecation_date": "2022-12-10",
  "deprecation_reason": "depends on GHC 8.6 to build",
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "2706c66e8def3eeba4d9bf1adf66221c8ad70701",
  "ruby_source_path": "Formula/bond.rb",
  "ruby_source_checksum": {
    "sha256": "fb9ea75cf91293f11f151ee16edf3d3b48c0f945b0ae7fe8cac9a32f2bb7ce0b"
  },
  "date_added": "2020-07-31T11:47:17+00:00",
  "readme": "![The Bond logo: a stylized glue gun](https://raw.githubusercontent.com/microsoft/bond/master/doc/src/logos/bond-logo-64x64-white.png)\n<hr />\n\n[![Build Status](https://github.com/microsoft/bond/workflows/Linux%20CI/badge.svg?event=push)](https://github.com/microsoft/bond/actions?query=event%3Apush)\n[![Bond.CSharp NuGet package](https://img.shields.io/nuget/v/Bond.CSharp.svg?style=flat)](https://microsoft.github.io/bond/manual/bond_cs.html#nuget-packages)\n\n# Bond\n\nBond is an open-source, cross-platform framework for working with schematized\ndata. It supports cross-language serialization/deserialization and powerful\ngeneric mechanisms for efficiently manipulating data. Bond is broadly used at\nMicrosoft in high scale services.\n\nBond is published on GitHub at [https://github.com/microsoft/bond/](https://github.com/microsoft/bond/).\n\nFor details, see the User's Manuals:\n\n* [C++](https://microsoft.github.io/bond/manual/bond_cpp.html)\n* [C#](https://microsoft.github.io/bond/manual/bond_cs.html)\n* [Java](https://microsoft.github.io/bond/manual/bond_java.html)\n* [Python](https://microsoft.github.io/bond/manual/bond_py.html)\n* [Bond-over-gRPC](https://microsoft.github.io/bond/manual/bond_over_grpc.html)\n  ([deprecated: will be removed in May\n  2022](https://github.com/microsoft/bond/issues/1131))\n* [`gbc`, the Bond compiler/codegen tool](https://microsoft.github.io/bond/manual/compiler.html)\n    * See also\n      [the compiler library](https://hackage.haskell.org/package/bond) that\n      powers `gbc`.\n\nFor a discussion about how Bond compares to similar frameworks see [Why Bond](https://microsoft.github.io/bond/why_bond.html).\n\n## Dependencies\n\nBond C++ library requires some C++11 features (currently limited to those\nsupported by Visual C++ 2015); a C++11 compiler is required. Additionally,\nto build Bond you will need CMake (3.1+),\n[Haskell Stack](https://docs.haskellstack.org/en/stable/README/#how-to-install)\n(1.5.1+) and Boost (1.61+).\n\nAdditionally, Bond requires RapidJSON. The Bond repository has a Git submodules for RapidJSON. It should be cloned with the `--recursive` flag:\n\n```bash\ngit clone --recursive https://github.com/microsoft/bond.git\n```\n\nIf you already have RapidJSON and would like to build against it, add argument `-DBOND_FIND_RAPIDJSON=TRUE` to the CMake invocation. It will use find_package(RapidJSON). If you do not provide a RapidJSON library, Bond will also install RapidJSON.\n\nFollowing are specific instructions for building on various platforms.\n\n### Linux\n\nBond must be built with C++11 compiler. We test with Clang (3.8) and GNU C++\n(5.4). We recommend Clang as it's faster with template-heavy code like Bond.\n\nRun the following commands to install the minimal set of packages needed to\nbuild the core Bond library on Ubuntu 14.04:\n\n```bash\nsudo apt-get install \\\n    clang \\\n    cmake \\\n    zlib1g-dev \\\n    libboost-dev \\\n    libboost-thread-dev\n```\n\nAdditionally, you need the [Haskell Tool\nStack](https://docs.haskellstack.org/en/stable/README/). If your distro isn't\nshipping a new enough version of it, you may encounter some non-obvious build\nfailures, so we recommend installing the latest Stack outside of package\nmanagement:\n\n```bash\ncurl -sSL https://get.haskellstack.org/ | sh\n```\n\nIn the root `bond` directory run:\n\n```bash\nmkdir build\ncd build\ncmake ..\nmake\nsudo make install\n```\n\nThe `build` directory is just an example. Any directory can be used as the\nbuild destination.\n\nTo build the Bond Python module and all the C++/Python tests and\nexamples, a few more packages are needed.\n\n```bash\nsudo apt-get install \\\n    autoconf \\\n    build-essential \\\n    libboost-date-time-dev \\\n    libboost-python-dev \\\n    libboost-test-dev \\\n    libtool \\\n    python2.7-dev\n```\n\nCMake needs to be re-run with different options. This can be done after\nbuilding just the core libraries: the build tree will simply be updated with\nthe new options.\n\n```bash\ncd build # or wherever you ran CMake before\n```\n\nRunning the following command in the `build` directory will build and execute all\nthe tests and examples:\n\n```bash\nmake --jobs 8 check\nsudo make install # To install the other libraries just built\n```\n\n(The unit tests are large so you may want to run 4-8 build jobs in parallel,\nassuming you have enough memory.)\n\n### macOS\n\nInstall Xcode and then run the following command to install the required\npackages using Homebrew ([http://brew.sh/](http://brew.sh/)):\n\n```bash\nbrew install \\\n    cmake \\\n    haskell-stack \\\n    boost \\\n    boost-python\n```\n\n(boost-python is optional and only needed for Python support.)\n\nBond can be built on macOS using either standard \\*nix makefiles or Xcode. In\norder to generate and build from makefiles, in the root `bond` directory run:\n\n```bash\nmkdir build\ncd build\ncmake ..\nmake\nsudo make install\n```\n\nAlternatively, you can generate Xcode projects by passing the `-G Xcode` option\nto cmake:\n\n```bash\ncmake -G Xcode ..\n```\n\nYou can build and run unit tests by building the `check` target in Xcode or by\nrunning make in the `build` directory:\n\n```bash\nmake --jobs 8 check\n```\n\nNote that if you are using Homebrew's Python, you'll need to build\nboost-python from source:\n\n```bash\nbrew install --build-from-source boost-python\n```\n\nand tell cmake the location of Homebrew's libpython by setting the\n`PYTHON_LIBRARY` variable, e.g.:\n\n```bash\ncmake .. \\\n    -DPYTHON_LIBRARY=/usr/local/Cellar/python/2.7.9/Frameworks/Python.framework/Versions/2.7/lib/libpython2.7.dylib\n```\n\n### Windows\n\n[![Build Status](https://ci.appveyor.com/api/projects/status/7xd2a54x9cwco314/branch/master?svg=true)](https://ci.appveyor.com/project/MicrosoftBond/bond/branch/master)\n\nInstall the following tools:\n\n- Visual Studio 2015 or 2017\n    - VS2017 is required to build C# Bond from source\n- .NET Core SDK ([https://www.microsoft.com/net/core](https://www.microsoft.com/net/core#windows))\n    - Alternative to VS2017 for building C# Bond from source\n- CMake ([http://www.cmake.org/download/](http://www.cmake.org/download/))\n- Haskell Stack ([https://docs.haskellstack.org/en/stable/install_and_upgrade/#windows](https://docs.haskellstack.org/en/stable/install_and_upgrade/#windows))\n\nIf you are building on a network behind a proxy, set the environment variable\n`HTTP_PROXY`, e.g.:\n\n```bash\nset HTTP_PROXY=http://your-proxy-name:80\n```\n\nNow you are ready to build the C# version of Bond. Open the solution file\n`cs\\cs.sln` in Visual Studio and build as usual. The C# unit tests can\nalso be run from within the solution.\n\nTo build using the .NET Core SDK:\n\n```bash\ndotnet restore cs\\cs.sln\ndotnet msbuild cs\\cs.sln\n```\n\nThe C++ and Python versions of Bond additionally require:\n\n- Boost 1.61+ ([http://www.boost.org/users/download/](http://www.boost.org/users/download/))\n- Python 2.7 ([https://www.python.org/downloads/](https://www.python.org/downloads/))\n\nYou may need to set the environment variables `BOOST_ROOT` and `BOOST_LIBRARYDIR`\nto specify where Boost and its pre-built libraries for your environment (MSVC 12 or MSVC 14) can be\nfound, e.g.:\n\n```bash\nset BOOST_ROOT=D:\\boost_1_61_0\nset BOOST_LIBRARYDIR=D:\\boost_1_61_0\\lib64-msvc-14.0\n```\n\nThe core Bond library and most examples only require Boost headers. The\npre-built libraries are only needed for unit tests, and Python. If Boost or\nPython libraries are not found on the system, then some tests and examples\nwill not be built.\n\nTo generate a solution to build the Bond Core C++ and Python with Visual\nStudio 2015 run the following commands from the root `bond` directory:\n\n```bash\nmkdir build\ncd build\nset PreferredToolArchitecture=x64\ncmake -G \"Visual Studio 14 2015 Win64\" ..\n```\n\nSetting `PreferredToolArchitecture=x64` selects the 64-bit toolchain which\ndramatically improves build speed. (The Bond unit tests are too big to build\nwith 32-bit tools.)\n\nInstead of `cmake` you can also use `cmake-gui` and specify configuration\nsettings in the UI. This configuration step has to be performed only once. From\nthen on you can use the generated solution `build\\bond.sln` from Visual Studio\nor build from the command line using `cmake`:\n\n```bash\ncmake --build . --target\ncmake --build . --target INSTALL\n```\n\nTo build and execute the unit tests and examples run:\n\n```bash\ncmake --build . --target check -- /maxcpucount:8\n```\n\nAlternatively, you can build and install Bond using the [vcpkg](https://github.com/microsoft/vcpkg/) dependency manager:\n\n```batch\ngit clone https://github.com/microsoft/vcpkg.git\ncd vcpkg\n./bootstrap-vcpkg.bat\n./vcpkg integrate install\n./vcpkg install bond\n```\n\nThe Bond port in vcpkg is kept up to date by Microsoft team members and community contributors.\nIf the version is out of date, please [create an issue or pull request in the vcpkg repository](https://github.com/microsoft/vcpkg/issues/new/choose).\n\n## Contributing\n\nInterested in contributing to Bond? Take a look at our\n[contribution guidelines](https://github.com/microsoft/bond/blob/master/CONTRIBUTING.md)\nto get started."
}
