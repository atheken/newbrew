{
  "name": "zsh-autocomplete",
  "full_name": "zsh-autocomplete",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Real-time type-ahead completion for Zsh",
  "license": "MIT",
  "homepage": "https://github.com/marlonrichert/zsh-autocomplete",
  "versions": {
    "stable": "23.07.13",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/marlonrichert/zsh-autocomplete/archive/refs/tags/23.07.13.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "97bd8061b7eb2abb87045ebb00abc2568a9367f296fc27ec3e636fcf07ff8f78"
    },
    "head": {
      "url": "https://github.com/marlonrichert/zsh-autocomplete.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zsh-autocomplete/blobs/sha256:67613df78e1b46ca46f15bda76f19417c0dd2a0462ee30bc0e3c5ec2437b64d9",
          "sha256": "67613df78e1b46ca46f15bda76f19417c0dd2a0462ee30bc0e3c5ec2437b64d9"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [
    "clitest"
  ],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    {
      "zsh": "test"
    }
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": "Installation\n1. Add at or near the top of your .zshrc file (before any calls to compdef):\n  source $HOMEBREW_PREFIX/share/zsh-autocomplete/zsh-autocomplete.plugin.zsh\n2. Remove any calls to compinit from your .zshrc file.\n3. If you're using Ubuntu, add to your .zshenv file:\n  skip_global_compinit=1\nThen restart your shell.\nFor more details, see:\n  https://github.com/marlonrichert/zsh-autocomplete\n",
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/zsh-autocomplete.rb",
  "ruby_source_checksum": {
    "sha256": "f01b0e4bc8f54d18e225dd387929ad026a0e56012205ff3a1eadf764a63f80f1"
  },
  "date_added": "2023-02-10T08:54:41+00:00",
  "readme": "# Autocomplete for Zsh\nAutocomplete for Zsh adds **real-time type-ahead autocompletion** to Zsh.  Find\nas you type, then press <kbd>Tab</kbd> to insert the top completion or\n<kbd>‚Üì</kbd>to select another completion.\n\n> Enjoy using this software?\n[Become a sponsor!](https://github.com/sponsors/marlonrichert) üíù\n\n[![file-search](.img/file-search.gif)](https://asciinema.org/a/377611)\n\n<sub>(The look and feel shown in images here might not be up to date.</sub>\n\n## Other Features\nBesides autocompletion, Autocomplete comes with many other useful completion\nfeatures.\n\n### Optimized completion config\nZsh's completion system is powerful, but hard to configure.  So, let\nAutocomplete [do it for you](Functions/Init/.autocomplete:config), while providing a\nmanageable list of [configuration settings](#configuration) for changing the\ndefaults.\n\n### Fuzzy multi-line history search\nPress <kbd>Ctrl</kbd><kbd>R</kbd> to do a real-time history search listing\nmultiple results.\n\n[![history-search](.img/history-search.gif)](https://asciinema.org/a/379844)\n\n### History menu\nPress <kbd>‚Üë</kbd> to open a menu with the last 16 history items.  If the\ncommand line is not empty, then the contents of the command line are used to\nperform a fuzzy history search.\n\n![history menu](.img/history-menu.png)\n\n### Multi-selection\nPress <kbd>Ctrl</kbd><kbd>Space</kbd> in the completion menu or the history menu\nto insert more than one item.\n\n![multi-select](.img/multi-select.png)\n\n### Recent dirs completion\nWorks out of the box with zero configuration, but also lets you\n[use your favorite tool for tracking directories](#use-a-custom-backend-for-recent-directories)\ninstead.\n\n![recent dirs](.img/recent-dirs.png)\n\n## Key Bindings\n* Depending on your terminal, not all keybindings might be available to you.\n* Instead of <kbd>Alt</kbd>, your terminal might require you to press\n  <kbd>Escape</kbd>, <kbd>Option</kbd> or <kbd>Meta</kbd>.\n* In most terminals, <kbd>Enter</kbd> is interchangeable with <kbd>Return</kbd>,\n  but in some terminals, it is not.\n\n### On the command line\n| `main` | `emacs` | `vicmd` | `viins` | Action\n| -----: | ------: | ------: | ------: | -----:\n| | <kbd>Tab</kbd> | | <kbd>Tab</kbd> | Insert top completion\n| <kbd>Shift</kbd><kbd>Tab</kbd> | | | | Insert substring occuring in all listed completions\n| <kbd>‚Üë</kbd> | <kbd>Ctrl</kbd><kbd>P</kbd> | <kbd>K</kbd> | |  Cursor up _-or-_ [History menu](#history-menu)\n| <kbd>‚Üì</kbd> | <kbd>Ctrl</kbd><kbd>N</kbd> | <kbd>J</kbd> | | Cursor down _-or-_ Completion menu\n| <kbd>Alt</kbd><kbd>‚Üë</kbd> | <kbd>Alt</kbd><kbd>P</kbd> | <kbd>Shift</kbd><kbd>N</kbd> | | History menu (always)\n| <kbd>Alt</kbd><kbd>‚Üì</kbd> | <kbd>Alt</kbd><kbd>N</kbd> | <kbd>N</kbd> | | Completion menu (always)\n| | <kbd>Ctrl</kbd><kbd>S</kbd> | <kbd>?</kbd> | | Search through _all_ menu text\n| | <kbd>Ctrl</kbd><kbd>R</kbd> | <kbd>/</kbd> | | Toggle [history search mode](#real-time-history-search) on/off\n\n### In the menus\n| Key(s) | Action |\n| -----: | ------\n| <kbd>‚Üë</kbd> <kbd>‚Üì</kbd> <kbd>‚Üê</kbd> <kbd>‚Üí</kbd> | Change selection\n| <kbd>Alt</kbd><kbd>‚Üë</kbd> | Backward one group (completion only)\n| <kbd>Alt</kbd><kbd>‚Üì</kbd> | Forward one group (completion only)\n| <kbd>PgUp</kbd><br><kbd>Alt</kbd><kbd>V</kbd> | Page up\n| <kbd>PgDn</kbd><br><kbd>Ctrl</kbd><kbd>V</kbd> | Page down\n| <kbd>Ctrl</kbd><kbd>S</kbd> | Enter search mode _-or-_ Go to next match\n| <kbd>Ctrl</kbd><kbd>R</kbd> | Enter search mode _-or-_ Go to previous match\n| <kbd>Tab</kbd><br><kbd>Enter</kbd> | Exit search mode _-or-_ Exit menu\n| <kbd>Ctrl</kbd><kbd>Space</kbd> | Add another completion\n| <kbd>Ctrl</kbd><kbd>-</kbd><br><kbd>Ctrl</kbd><kbd>/</kbd> | Remove last completion\n| <kbd>Ctrl</kbd><kbd>G</kbd> | Remove all completions\n| Other keys | Depends on the keymap from which you opened the menu. See the Zsh manual on [menu selection](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#Menu-selection).\n\n## Requirements\nRecommended:\n* Tested to work with [Zsh](http://zsh.sourceforge.net) 5.8 and newer.\n\nMinimum:\n* Should theoretically work with Zsh 5.4, but I'm unable to test that.\n\n## Installing & Updating\nIf you use [Znap](https://github.com/marlonrichert/zsh-snap), simply add the\nfollowing to your `.zshrc` file:\n```zsh\nznap source marlonrichert/zsh-autocomplete\n```\nThen restart your shell.\n\nTo update, do\n```zsh\n% znap pull\n```\n\nTo uninstall, remove `znap source marlonrichert/zsh-autocomplete` from your\n`.zshrc` file, then run\n```zsh\n% znap uninstall\n```\n\n### Manual installation\n 1. Clone the repo:\n    ```zsh\n    % cd ~/Repos  # ...or wherever you keep your Git repos/Zsh plugins\n    % git clone --depth 1 -- https://github.com/marlonrichert/zsh-autocomplete.git\n    ```\n 1.  Add at or near the top of your `.zshrc` file (_before_ any calls to\n    `compdef`):\n    ```zsh\n    source ~/Repos/zsh-autocomplete/zsh-autocomplete.plugin.zsh\n    ```\n 1. Remove any calls to `compinit` from your `.zshrc` file.\n 1. Restart your shell.\n\nTo update, do:\n```zsh\n% git -C ~autocomplete pull\n```\n\nTo uninstall, simply undo the installation steps above in reverse order:\n 1. Restore the lines you deleted in step 3.\n 1. Delete the line you added in step 2.\n 1. Delete the repo you created in step 1.\n 1. Restart your shell.\n\n### Other frameworks/plugin managers\nTo install with another Zsh framework or plugin manager, please refer to your\nframework's/plugin manager's documentation for instructions.  When in doubt,\ninstall [manually](#manually).\n\n### Additional step for Ubuntu\nIf you're using Ubuntu, you additionally need to add the following to your\n`.zshenv` file:\n```zsh\nskip_global_compinit=1\n```\n\n## Troubleshooting\nTry the steps in the\n[bug report template](.github/ISSUE_TEMPLATE/bug-report.md).\n\n## Configuration\nThe following are the most commonly requested ways to configure Autocomplete's\nbehavior.  Add these to your `.zshrc` file to use them.\n\n### Pass arguments to `compinit`\n\nIf necessary, you can let Autocomplete pass arguments to `compinit` as follows:\n```sh\nzstyle '*:compinit' arguments -D -i -u -C -w\n```\n\n### Reassign <kbd>Tab</kbd>\nYou can reassign <kbd>Tab</kbd> to do something else than the default.  This\nincludes letting another plugin set it.  Here are two examples of what you can\ndo with this:\n\n#### Make <kbd>Tab</kbd> and <kbd>Shift</kbd><kbd>Tab</kbd> cycle completions on the command line\n```zsh\nbindkey '\\t' menu-complete \"$terminfo[kcbt]\" reverse-menu-complete\n```\n\n#### Make <kbd>Tab</kbd> go straight to the menu and cycle there\n```zsh\nbindkey '\\t' menu-select \"$terminfo[kcbt]\" menu-select\nbindkey -M menuselect '\\t' menu-complete \"$terminfo[kcbt]\" reverse-menu-complete\n```\n\n### First insert the common substring\nYou can make any completion widget first insert the sequence of characters\nthat's common to all completions, if any, before inserting actual completions:\n```zsh\n# all Tab widgets\nzstyle ':autocomplete:*complete*:*' insert-unambiguous yes\n\n# all history widgets\nzstyle ':autocomplete:*history*:*' insert-unambiguous yes\n\n# ^S\nzstyle ':autocomplete:menu-search:*' insert-unambiguous yes\n```\n\n### Make <kbd>Enter</kbd> submit the command line straight from the menu\nBy default, pressing <kbd>Enter</kbd> in the menu search exits the search and\npressing it otherwise in the menu exits the menu.  If you instead want to make\n<kbd>Enter</kbd> _always_ submit the command line, use the following:\n```zsh\nbindkey -M menuselect '\\r' .accept-line\n```\n\n### Add or don't add a space after certain completions\nWhen inserting a completion, a space is added after certain types of\ncompletions.  The default list is as follows:\n```zsh\nzstyle ':autocomplete:*' add-space \\\n    executables aliases functions builtins reserved-words commands\n```\nModifying this list will change when a space is inserted.  If you change the\nlist to `'*'`, a space is always inserted.  If you put no elements in the list,\nthen a space is never inserted.\n\n### Use a custom backend for recent directories\nAutocomplete comes with its own backend for keeping track of and listing recent\ndirectories (which uses part of\n[`cdr`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Recent-Directories)\nunder the hood).  However, you can override this and supply Autocomplete with\nrecent directories from any source that you like.  To do so, define a function\nlike this:\n```zsh\n+autocomplete:recent-directories() {\n  typeset -ga reply=( [code that generates an array of absolute paths] )\n}\n```\n\n### Add a backend for recent files\nOut of the box, Autocomplete doesn't track or offer recent files. However, it\nwill do so if you add a backend for it:\n```zsh\n+autocomplete:recent-files() {\n  typeset -ga reply=( [code that generates an array of absolute paths] )\n}\n```\n\n### Start each new line in history search mode\nThis will make Autocomplete behave as if you pressed <kbd>Ctrl</kbd><kbd>R</kbd> at the start of each new command line:\n```zsh\nzstyle ':autocomplete:*' default-context history-incremental-search-backward\n```\n\n### Wait with autocompletion until typing stops for a certain amount of seconds\nNormally, Autocomplete fetches completions after you stop typing for about 0.05 seconds. You can change this as follows:\n```zsh\nzstyle ':autocomplete:*' delay 0.1  # seconds (float)\n```\n\n### Don't show completions if the current word matches a pattern\nFor example, this will stop completions from showing whenver the current word consists of two or more dots:\n```zsh\nzstyle ':autocomplete:*' ignored-input '..##'\n```\n\n## Limit the number of lines shown\nBy default, Autocomplete let the history menu fill half of the screen, and limits autocompletion and history search\nto maximum of 16 lines.  You can change these limits as follows:\n\n```zsh\n# Autocompletion\nzstyle -e ':autocomplete:list-choices:*' list-lines 'reply=( $(( LINES / 3 )) )'\n\n# Override history search.\nzstyle ':autocomplete:history-incremental-search-backward:*' list-lines 8\n\n# History menu.\nzstyle ':autocomplete:history-search-backward:*' list-lines 256\n```\n\nNote that for autocompletion and history search, the maximum number of lines is additionally capped to the number of\nlines that fit on screen.  However, there is no such limit for the history menu.  If that generates more lines than fit\non screen, you can simply scroll upwards to see more.\n\n### Reset history key bindings to Zsh default\nAdd any of the following to your `.zshrc` file _after_ sourcing Autocomplete:\n\n#### Reset <kbd>‚Üë</kbd> and <kbd>‚Üì</kbd>\n```zsh\n() {\n   local -a prefix=( '\\e'{\\[,O} )\n   local -a up=( ${^prefix}A ) down=( ${^prefix}B )\n   local key=\n   for key in $up[@]; do\n      bindkey \"$key\" up-line-or-history\n   done\n   for key in $down[@]; do\n      bindkey \"$key\" down-line-or-history\n   done\n}\n```\n\n#### Reset <kbd>Ctrl</kbd><kbd>R</kbd> and <kbd>Ctrl</kbd><kbd>S</kbd>\n```\n   zle -A {.,}history-incremental-search-backward\n   zle -A {.,}vi-history-search-backward\n   bindkey -M emacs '^S' history-incremental-search-forward\n   bindkey -M vicmd '/' vi-history-search-forward\n}\n```\n\n## Author\n¬© 2020-2023 [Marlon Richert](https://github.com/marlonrichert)\n\n## License\nThis project is licensed under the MIT License.  See the [LICENSE](LICENSE) file\nfor details."
}
