{
  "name": "json-fortran",
  "full_name": "json-fortran",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Fortran 2008 JSON API",
  "license": "BSD-3-Clause",
  "homepage": "https://github.com/jacobwilliams/json-fortran",
  "versions": {
    "stable": "8.3.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/jacobwilliams/json-fortran/archive/8.3.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "5fe9ad709a726416cec986886503e0526419742e288c4e43f63c1c22026d1e8a"
    },
    "head": {
      "url": "https://github.com/jacobwilliams/json-fortran.git",
      "branch": "master"
    }
  },
  "revision": 1,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/json-fortran/blobs/sha256:d936676f2faf35b0341970dfb1061ce0aeb0f0614d86310106074449b784f93e",
          "sha256": "d936676f2faf35b0341970dfb1061ce0aeb0f0614d86310106074449b784f93e"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/json-fortran/blobs/sha256:26b60a9213b96f66f52cb746e525b2d27f4bdcc32c8d5c45573a9bfe520cbe89",
          "sha256": "26b60a9213b96f66f52cb746e525b2d27f4bdcc32c8d5c45573a9bfe520cbe89"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/json-fortran/blobs/sha256:abb51e49f62492e8d97787aee78794d7cab70ac12bf87dd8b4fbdf800e6a2cfc",
          "sha256": "abb51e49f62492e8d97787aee78794d7cab70ac12bf87dd8b4fbdf800e6a2cfc"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/json-fortran/blobs/sha256:ad02003294f9502cff6da74532bb2f70afe86a8f9c203cd5efbe46026a4176d0",
          "sha256": "ad02003294f9502cff6da74532bb2f70afe86a8f9c203cd5efbe46026a4176d0"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/json-fortran/blobs/sha256:ac9ac273a706c8e39c67a27feb28a56afae3dd1e46102a31db6d9a64723377cc",
          "sha256": "ac9ac273a706c8e39c67a27feb28a56afae3dd1e46102a31db6d9a64723377cc"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/json-fortran/blobs/sha256:9b6d905241a4d21fb09d2e247c9044b0f4cc3e02f616966191f2457503a3c61c",
          "sha256": "9b6d905241a4d21fb09d2e247c9044b0f4cc3e02f616966191f2457503a3c61c"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/json-fortran/blobs/sha256:e08acdb01ec8e436afe559000f89b82cb94600e6fabd31c18c0f39239e4e3bb8",
          "sha256": "e08acdb01ec8e436afe559000f89b82cb94600e6fabd31c18c0f39239e4e3bb8"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/json-fortran/blobs/sha256:29d252bb182f924b58e988d72e565c022dc707b65022e837888c06d22cf6de6d",
          "sha256": "29d252bb182f924b58e988d72e565c022dc707b65022e837888c06d22cf6de6d"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake",
    "ford"
  ],
  "dependencies": [
    "gcc"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/json-fortran.rb",
  "ruby_source_checksum": {
    "sha256": "28b2c29478f8a7618d996c9f71a19e5a9b390910aec66285754fe25a4328d78c"
  },
  "date_added": "2015-06-07T17:36:09+01:00",
  "readme": "<h1 id=\"json-fortran\"><img alt=\"JSON-Fortran\" src=\"/media/json-fortran-logo-2.png\" title=\"JSON-Fortran logo\"></h1>\n\nJSON-Fortran: A Modern Fortran JSON API\n\n<!-- markdown-toc start - Don't edit this section. Run M-x markdown-toc/generate-toc again -->\n**Table of Contents**\n\n- [JSON-Fortran](#json-fortran)\n    - [Status](#status)\n    - [Brief description](#brief-description)\n    - [Download](#download)\n    - [Building the library](#building-the-library)\n    - [Documentation](#documentation)\n    - [Contributing](#contributing)\n    - [License](#license)\n    - [Miscellaneous](#miscellaneous)\n\n<!-- markdown-toc end -->\n\nStatus\n------\n[![Build Status](https://github.com/jacobwilliams/json-fortran/actions/workflows/CI.yml/badge.svg)](https://github.com/jacobwilliams/json-fortran/actions)\n[![GitHub issues](https://img.shields.io/github/issues/jacobwilliams/json-fortran.png)](https://github.com/jacobwilliams/json-fortran/issues)\n[![Codecov](https://codecov.io/gh/jacobwilliams/json-fortran/branch/master/graph/badge.svg)](https://codecov.io/gh/jacobwilliams/json-fortran)\n[![last-commit](https://img.shields.io/github/last-commit/jacobwilliams/json-fortran)](https://github.com/jacobwilliams/json-fortran/commits/master)\n\n\nTake a look at the\n[CHANGELOG](https://github.com/jacobwilliams/json-fortran/blob/master/CHANGELOG.md#unreleased)\nfor a list of changes since the latest release.\n\n[top](#json-fortran)\n\nBrief description\n---------------\n\nJSON-Fortran is a user-friendly, thread-safe, and object-oriented API for reading and writing [JSON](http://json.org) files, written in modern Fortran.\n\n[top](#json-fortran)\n\nDownload\n--------------------\n\n[![GitHub release](https://img.shields.io/github/release/jacobwilliams/json-fortran.svg)](https://github.com/jacobwilliams/json-fortran/releases)\n[![homebrew version](https://img.shields.io/homebrew/v/json-fortran.svg)](https://formulae.brew.sh/formula/json-fortran)\n[![Conda (channel only)](https://img.shields.io/conda/vn/conda-forge/json-fortran)](https://github.com/conda-forge/json-fortran-feedstock)\n\nDownload the official versioned releases\n[here](https://github.com/jacobwilliams/json-fortran/releases/latest).\nOr, get the latest development code from the master branch\n[here](https://github.com/jacobwilliams/json-fortran.git).\n\n__NEWS:__ As of June 7, 2015,\n[json-fortran](https://github.com/jacobwilliams/json-fortran) can be\ndownloaded and installed with the [homebrew](http://brew.sh) package\nmanager on Mac OS X. Once [homebrew](http://brew.sh) is installed,\nmake sure that the formulae are up to date, view the package options\nand caveats, and install the\n[json-fortran formula](https://formulae.brew.sh/formula/json-fortran):\n\n```bash\nbrew update\nbrew info json-fortran\nbrew install --with-unicode-support json-fortran\n```\n\n_Please note_, if you wish to support usage of JSON-Fortran with\nmultiple Fortran compilers, please follow the CMake installation\ninstructions below, as the homebrew installation is only intended to\nsupport a single Fortran compiler. Cheers!\n\n__NEWS:__ As of January 20, 2022,\n[json-fortran](https://github.com/jacobwilliams/json-fortran) can be\ndownloaded and installed via the [conda](https://docs.conda.io/en/latest/)\npackage manager on Mac OS X and Linux. Once a conda-distribution, like\n[miniforge](https://github.com/conda-forge/miniforge), is installed\nthe [json-fortran package](https://anaconda.org/conda-forge/json-fortran)\ncan be installed.\n\n```bash\nconda install json-fortran\n```\n\n_Note:_ Packages on conda-forge are build with GCC 9.4 which is upwards\ncompatible with newer GCC versions, but not with other Fortran compilers.\n\n[top](#json-fortran)\n\nBuilding the library\n--------------------\n\nThe code requires a Fortran compiler that supports\nvarious Fortran 2003 and Fortran 2008 features such as: allocatable\nstrings, `newunit`, `generic`, `class`, and `abstract interface`.\nIt has been successfully compiled with the [Intel Fortran compiler\n13.1.0](https://software.intel.com/en-us/articles/non-commercial-software-development) (and greater) and the [GNU gfortran\ncompiler](http://gcc.gnu.org/wiki/GFortran) [4.9 and greater]. It has also\nbeen reported that the library can be built (using the CMake build\nscript) with the [NAG Fortran compiler 6.0](http://www.nag.com/nagware/NP/NP_desc.asp)\n\nCurrently, several ways are provided to build the JSON-fortran library\n(libjsonfortran).\n\n* A build script, `build.sh` is provided in the project root directory. This script uses [FoBiS](https://github.com/szaghi/FoBiS) to build the JSON-Fortran library and the unit tests on Unix-like systems.  Edit the script to use either the [Intel Fortran Compiler](https://software.intel.com/en-us/fortran-compilers) or [Gfortran](https://gcc.gnu.org/wiki/GFortran).  Note that version 1.2.5 of FoBiS (or later) is required.\n\n* A [FoBiS](https://github.com/szaghi/FoBiS) configuration file (`json-fortran.fobis`) is also provided that can also build the library and examples. Use the `mode` flag to indicate what to build. For example:\n\n  * To build all the examples using gfortran: `FoBiS.py build -f json-fortran.fobis -mode tests-gnu`\n  * To build all the examples using ifort: `FoBiS.py build -f json-fortran.fobis -mode tests-intel`\n  * To build a static library using gfortran: `FoBiS.py build -f json-fortran.fobis -mode static-gnu`\n  * To build a static library using ifort: `FoBiS.py build -f json-fortran.fobis -mode static-intel`\n\n  The full set of modes are: `static-gnu`, `static-gnu-debug`, `static-intel`, `static-intel-debug`, `shared-gnu`, `shared-gnu-debug`, `shared-intel`, `shared-intel-debug`, `tests-gnu`, `tests-gnu-debug`, `tests-intel`, `tests-intel-debug`\n\n  To generate the documentation using [ford](https://github.com/Fortran-FOSS-Programmers/ford), run: ```FoBis.py rule --execute makedoc -f json-fortran.fobis```\n\n  To run all the tests, run: ```FoBis.py rule --execute tests -f json-fortran.fobis```\n\n* A [Visual Studio](https://www.visualstudio.com) project is included for building the library (and unit tests) on Windows with the Intel Fortran Compiler.  The project has been tested with Visual Studio 2010 and 2013.\n\n* A [CMake](http://www.cmake.org) build\nsystem is provided. This build system has been tested on Mac and Linux\nusing the Intel Fortran Compiler, gfortran 4.9, and NAG Fortran 6.0. It does also work on Windows (but note that the Visual Studio project it generates is not quite the same as the one mentioned above). This CMake based build provides an install target,\nand exports from both the install location and the build location so\nthat building and using JSON-Fortran in another CMake based project is\ntrivial. To get started with the CMake based build, set the\nenvironment variable `FC` to point to your Fortran compiler, and\ncreate a build directory. Then `(cmake-gui|ccmake|cmake)\n/path/to/json-fortran-root` to configure, `make` to build and `make\ninstall` to optionally install. You can also use `make check` to build and run the unit tests.\nAs long as the project is built with\nCMake, other CMake projects can find it and link against it. For example,\nif you have a second copy of the JSON-Fortran project tree, and want to build the unit tests\nlinking against those compiled/installed by the first copy:\n\n```CMake\ncmake_minimum_required ( VERSION 2.8.8 FATAL_ERROR )\nenable_language ( Fortran )\nproject ( jf_test NONE )\n\nfind_package ( jsonfortran-${CMAKE_Fortran_COMPILER_ID} 8.3.0 REQUIRED )\n\nfile ( GLOB JF_TEST_SRCS \"src/tests/jf_test_*.F90\" )\nforeach ( UNIT_TEST ${JF_TEST_SRCS} )\n  get_filename_component ( TEST ${UNIT_TEST} NAME_WE )\n  add_executable ( ${TEST} ${UNIT_TEST} )\n  target_link_libraries ( ${TEST} jsonfortran::jsonfortran-static )\n  # or for linking against the dynamic/shared library:\n  # target_link_libraries ( ${TEST} jsonfortran::jsonfortran ) # instead\nendforeach()\n```\n\n* A [Fortran Package Manager](https://github.com/fortran-lang/fpm) file is also included, so that JSON-Fortran can be compiled with FPM.\n\n[top](#json-fortran)\n\nDocumentation\n--------------\n\nThe API documentation for the latest release version can be found\n[here](https://jacobwilliams.github.io/json-fortran/).  The\ndocumentation can also be generated by processing the source files\nwith [FORD](https://github.com/Fortran-FOSS-Programmers/ford).  Note that both the\nshell script and CMake will also generate these files automatically in the documentation folder, assuming you have FORD installed.\n\nSome examples can also be found on the [wiki](https://github.com/jacobwilliams/json-fortran/wiki/Example-Usage).\n\n[top](#json-fortran)\n\nContributing\n------------\n\nWant to help?  Take a quick look at our [contributing guidelines](https://github.com/jacobwilliams/json-fortran/blob/master/.github/CONTRIBUTING.md) then claim something and [Fork. Commit. Pull request.](https://help.github.com/articles/fork-a-repo/)\n\n[top](#json-fortran)\n\nLicense\n--------\nThe JSON-Fortran source code and related files and documentation are distributed under a permissive free software license (BSD-style).  See the [LICENSE](https://raw.githubusercontent.com/jacobwilliams/json-fortran/master/LICENSE) file for more details.\n\n[top](#json-fortran)\n\nMiscellaneous\n---------------\n\n* JSON-Fortran is a fork and extensive upgrade of the Fortran 95 [FSON](https://github.com/josephalevin/fson) code. The reason for the split was to be able to incorporate object-oriented and other nice features of the Fortran 2003 and 2008 standards.  Many thanks to the original authors of FSON.\n* For more information about JSON, see: <http://www.json.org/>\n* [json-fortran on Codecov.IO](https://codecov.io/gh/jacobwilliams/json-fortran)\n\n[top](#json-fortran)"
}
