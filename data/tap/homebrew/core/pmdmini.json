{
  "name": "pmdmini",
  "full_name": "pmdmini",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Plays music in PC-88/98 PMD chiptune format",
  "license": "GPL-2.0-or-later",
  "homepage": "https://github.com/mistydemeo/pmdmini",
  "versions": {
    "stable": "2.0.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/mistydemeo/pmdmini/archive/v2.0.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "e3288dcf356e83ef4ad48cde44fcb703ca9ce478b9fcac1b44bd9d2d84bf2ba3"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/pmdmini/blobs/sha256:40b0b5792363acec17804091d52164083487b90a027f4fe2bdf05ca5a7045ba6",
          "sha256": "40b0b5792363acec17804091d52164083487b90a027f4fe2bdf05ca5a7045ba6"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/pmdmini/blobs/sha256:27137c3e0caeb62401f16ff188ab94c629935342615a97be38e2a12e77877f33",
          "sha256": "27137c3e0caeb62401f16ff188ab94c629935342615a97be38e2a12e77877f33"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/pmdmini/blobs/sha256:a2c9ff100327daa46dae7c0fb7d49ee5dd71f7dbd28d585d6a8f6f74b3c2db92",
          "sha256": "a2c9ff100327daa46dae7c0fb7d49ee5dd71f7dbd28d585d6a8f6f74b3c2db92"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/pmdmini/blobs/sha256:1579283d159ce1e4a6cc100211eb926a463401e0cdee4ebf314008c478c14c09",
          "sha256": "1579283d159ce1e4a6cc100211eb926a463401e0cdee4ebf314008c478c14c09"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/pmdmini/blobs/sha256:b84f6ad8b040a1b193b753e8d9934045d605b7ba37a547acab95302aea802a77",
          "sha256": "b84f6ad8b040a1b193b753e8d9934045d605b7ba37a547acab95302aea802a77"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/pmdmini/blobs/sha256:149cbae3b8b5b93ad8b5e55590e87b96120aa5c4fa729f142d2ab62ea3758d4a",
          "sha256": "149cbae3b8b5b93ad8b5e55590e87b96120aa5c4fa729f142d2ab62ea3758d4a"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/pmdmini/blobs/sha256:32eaf2e42986d019c891e922a4c6744abdc243c7d927210f65a26c4b363aa569",
          "sha256": "32eaf2e42986d019c891e922a4c6744abdc243c7d927210f65a26c4b363aa569"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pmdmini/blobs/sha256:40d7b0addf0328bbb2bd4ab80af954ce4feaa11d57fb76aecc21da90b522cf9e",
          "sha256": "40d7b0addf0328bbb2bd4ab80af954ce4feaa11d57fb76aecc21da90b522cf9e"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "sdl2"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/pmdmini.rb",
  "ruby_source_checksum": {
    "sha256": "e05f8ce1498a21504cc0e2156ebd09a60e2a09289507b5ed163d24f5999414e4"
  },
  "date_added": "2012-02-04T00:28:59-06:00",
  "readme": "pmdmini\n=======\n\npmdmini is a C library with a simple API which can play back MDX chiptunes from the [PC-98](https://en.wikipedia.org/wiki/NEC_PC-9801). The PC-98 was a very popular series of Japanese home computers. With its [Yamaha YM2203](https://en.wikipedia.org/wiki/Yamaha_YM2203) or [YM2608](https://en.wikipedia.org/wiki/Yamaha_YM2608) sound chip, for which many games and songs were written; the Professional Music Driver (PMD) library was a popular music library created by M. Kajihara. pmdmini allows playing back music written using PMD.\n\nSome sample PMD music can be found at the [Modland FTP](http://www.exotica.org.uk/mediawiki/index.php?title=Special%3AModland&md=search&mod=&aut=&for=pmd&col=&ins=) and at the website of [Zun](http://www16.big.or.jp/~zun/html/pmd.html) (creator of the Touhou series of games).\n\nUsage\n=====\n\nDetailed API documentation is available in the pmdmini.h header file, but the following sample program shows how to use mdxmini to open a file, extract some metadata, and play back music:\n\n```c\n// Initializes the library, before performing any other actions.\npmd_init();\n// Check if the file is a valid PMD file before doing anything else!\nint is_valid = pmd_is_pmd(path_to_file);\nif (!is_valid) {\n    fprintf(stderr, \"Failed to open input file: %s\\n\", path_to_file);\n    return 1;\n}\n\n// Before playback begins, call pmd_setrate to set the preferred sampling rate for generated audio.\nint playback_rate = 48000;\npmd_setrate(playback_rate);\n\n// Opens the file on disk and prepares the player for playback.\npmd_play(path_to_file, path_to_samples);\n\n// Get the song duration, in whole seconds.\nint length = pmd_length_sec();\nprintf(\"Song length: %i seconds\\n\", length);\n\n// pmd_get_title allows the song's title to be fetched; this is usually encoded in Shift-JIS.\nchar title[1024];\npmd_get_title(title);\nprintf(\"Title: %s\\n\", title);\n// The composer is stored separately; this is also Shift-JIS.\nchar compo[1024];\npmd_get_compo(compo);\nprintf(\"Composer: %s\\n\", title);\n\n// For playback, define a buffer into which we'll render raw PCM data.\nint buf_len = 8192;\nshort buf[buf_len];\n// Number of channels, which we'll fetch for display later.\n// This is constant for a given song, so just fetch it once.\nint number_of_channels = pmd_get_tracks();\nprintf(\"Number of channels: %i\\n\", number_of_channels);\n// A buffer into which we'll write information about the notes being played in a given frame.\nint notes[32];\n\nint position;\n\n// Track the number of buffers played so far, which is useful to calculate the current position.\nint played_buffers = 0;\nint finished = 1;\n\n// The playback loop!\nwhile (finished == 1)\n{\n    // Calculate the song position based on the buffer size and frequency.\n    position = played_buffers / (((playback_rate * 16 * 2) / 8) / (buf_len * 2));\n    printf(\"Current position: %i / %i\\n\", position, length);\n\n    // Render samples into the buffer\n    pmd_renderer(buf, buf_len / 2);\n    // Check the position against the reported duration to determine if playback is finished\n    if (position >= length) {\n        finished = 0;\n    }\n\n    // Do something with the calculated sample here; this is platform-dependent, so this intro will omit it.\n\n    // Fill the note buffer with information about the notes in the current frame\n    pmd_get_current_notes(notes, number_of_channels);\n\n    for (int i = 0; i < number_of_channels; i++) {\n        printf(\"Note for channel %i is %i\\n\", i, notes[i]);\n    }\n\n    // Increment the count of played buffers.\n    played_buffers++;\n}\n\n// When playback is over, finalize the library's state.\npmd_stop();\n```\n\nPrograms using pmdmini\n======================\n\n* [MDXPLAYER for Android](https://github.com/mistydemeo/mdxplayer), by BouKiCHi\n* [ruby-mdxplay](https://github.com/mistydemeo/ruby-mdxplay)\n* [Paula](https://github.com/mistydemeo/paula)\n* [Modizer](http://yoyofr.blogspot.ca/p/modizer.html) by [yoyofr](http://yoyofr.blogspot.ca)\n\nCredits\n=======\n\n* KAJIHARA Mashahiro - original author of the PMD sound driver for PC-9801\n* AGAWA Koji - Maintainer of [PMDXMMS](http://web.archive.org/web/20040215211934/http://www.self-core.org/~kaoru-k/wiki/PmdXmms.html), on which pmdmini was based\n* [PMDWin / C60](http://c60.la.coocan.jp) - PMD sound engine for Windows, on which PMDXMMS was based\n* M88 / cisc - author of OPNA FM sound generator used by PMDWin\n* PPZ8 / Ukky - author of PPZ8 PCM driver\n* [BouKiCHi](http://clogging.blog57.fc2.com) - author of the pmdmini library, and of the Android mdxplayer\n* [Misty De Meo](http://www.mistys-internet.website) - bugfixes and improvements to mdxmini, current maintainer"
}
