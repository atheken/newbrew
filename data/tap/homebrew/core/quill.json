{
  "name": "quill",
  "full_name": "quill",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "C++17 Asynchronous Low Latency Logging Library",
  "license": "MIT",
  "homepage": "https://github.com/odygrd/quill",
  "versions": {
    "stable": "3.3.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/odygrd/quill/archive/refs/tags/v3.3.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "2bf6a870960e002b2fbf322d0b1c6b547af92858454fa96adfc374d545c66a36"
    },
    "head": {
      "url": "https://github.com/odygrd/quill.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/quill/blobs/sha256:4aedf67d074cc6ea3dd11dea5db56535710f88c92b07a9d9b92bc85f76acae94",
          "sha256": "4aedf67d074cc6ea3dd11dea5db56535710f88c92b07a9d9b92bc85f76acae94"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/quill/blobs/sha256:804b6d65c409da375560e3c7be73223d4f4a9d282b750eb7d26458e80f285215",
          "sha256": "804b6d65c409da375560e3c7be73223d4f4a9d282b750eb7d26458e80f285215"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/quill/blobs/sha256:7d959f3fc9d1b924d4034dfc77e304f77dd55f9e24671661d43489778805bf1f",
          "sha256": "7d959f3fc9d1b924d4034dfc77e304f77dd55f9e24671661d43489778805bf1f"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/quill/blobs/sha256:20b6d9be871b9a121ae310e0f683687389f9d40ec7ee1b2e48d9ebfb60fa7c2c",
          "sha256": "20b6d9be871b9a121ae310e0f683687389f9d40ec7ee1b2e48d9ebfb60fa7c2c"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/quill/blobs/sha256:b65b0641076b4d75e166ba15dc934689f822fe2cafc09dfcf79a0776ee0f423b",
          "sha256": "b65b0641076b4d75e166ba15dc934689f822fe2cafc09dfcf79a0776ee0f423b"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/quill/blobs/sha256:ee1dc75843562b058e94540b03eca85acc59885c3533b169a5446e54f09ddf87",
          "sha256": "ee1dc75843562b058e94540b03eca85acc59885c3533b169a5446e54f09ddf87"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/quill/blobs/sha256:0c597fec568781f52f0c207ac790726744d60cb548c0b61ed59b5518ea93d9a0",
          "sha256": "0c597fec568781f52f0c207ac790726744d60cb548c0b61ed59b5518ea93d9a0"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [
    {
      "name": "macos",
      "cask": null,
      "download": null,
      "version": "10.15",
      "contexts": [],
      "specs": [
        "stable",
        "head"
      ]
    }
  ],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/quill.rb",
  "ruby_source_checksum": {
    "sha256": "465c4ab31e5a981b1bf8c891309e22671aeeda97b1a060be85ccd7e75df5e21a"
  },
  "date_added": "2020-04-21T14:17:45+01:00",
  "readme": "<div align=\"center\">\n  <a href=\"https://github.com/odygrd/quill\">\n    <img width=\"125\" src=\"https://i.postimg.cc/DZrH8HkX/quill-circle-photos-v2-x2-colored-toned.png\" alt=\"Quill logo\">\n  </a>\n  <h1>Quill</h1>\n\n  <div>\n    <a href=\"https://github.com/odygrd/quill/actions?query=workflow%3Alinux\">\n      <img src=\"https://img.shields.io/github/actions/workflow/status/odygrd/quill/linux.yml?branch=master&label=linux&logo=linux&style=flat-square\" alt=\"linux-ci\" />\n    </a>\n    <a href=\"https://github.com/odygrd/quill/actions?query=workflow%3Amacos\">\n      <img src=\"https://img.shields.io/github/actions/workflow/status/odygrd/quill/macos.yml?branch=master&label=macos&logo=apple&logoColor=white&style=flat-square\" alt=\"macos-ci\" />\n    </a>\n    <a href=\"https://github.com/odygrd/quill/actions?query=workflow%3Awindows\">\n      <img src=\"https://img.shields.io/github/actions/workflow/status/odygrd/quill/windows.yml?branch=master&label=windows&logo=windows&logoColor=blue&style=flat-square\" alt=\"windows-ci\" />\n    </a>\n    <a href=\"https://cloud.drone.io/odygrd/quill\">\n      <img src=\"https://img.shields.io/drone/build/odygrd/quill/master?label=ARM&logo=drone&style=flat-square\" alt=\"drone-ci\" />\n    </a>\n  </div>\n\n  <div>\n    <a href=\"https://codecov.io/gh/odygrd/quill\">\n      <img src=\"https://img.shields.io/codecov/c/gh/odygrd/quill/master.svg?logo=codecov&style=flat-square\" alt=\"Codecov\" />\n    </a>\n    <a href=\"https://www.codacy.com/manual/odygrd/quill?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=odygrd/quill&amp;utm_campaign=Badge_Grade\">\n      <img src=\"https://img.shields.io/codacy/grade/cd387bc34658475d98bff84db3ad5287?logo=codacy&style=flat-square\" alt=\"Codacy\" />\n    </a>\n    <a href=\"https://www.codefactor.io/repository/github/odygrd/quill\">\n      <img src=\"https://img.shields.io/codefactor/grade/github/odygrd/quill?logo=codefactor&style=flat-square\" alt=\"CodeFactor\" />\n     </a>\n  </div>\n\n  <div>\n    <a href=\"https://opensource.org/licenses/MIT\">\n      <img src=\"https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square\" alt=\"license\" />\n    </a>\n    <a href=\"https://en.wikipedia.org/wiki/C%2B%2B17\">\n      <img src=\"https://img.shields.io/badge/language-C%2B%2B17%20%2F%20C%2B%2B14-red.svg?style=flat-square\" alt=\"language\" />\n    </a>\n  </div>\n\n  <p><b>Asynchronous Low Latency C++ Logging Library</b></p>\n\n</div>\n\n\n<br>\n\n- [Introduction](#introduction)\n- [Documentation](#documentation)\n- [Features](#features)\n- [Caveats](#caveats)\n- [Performance](#performance)\n- [Basic Usage](#basic-usage)\n- [CMake Integration](#cmake-integration)\n- [Design](#design)\n- [License](#license)\n\n|       homebrew       |         vcpkg         |       conan       |\n|:--------------------:|:---------------------:|:-----------------:|\n| `brew install quill` | `vcpkg install quill` | `quill/[>=1.2.3]` |\n\n## Introduction\n\nQuill is a high-performance, cross-platform logging library designed for C++14 and onwards. It provides two versions of\nthe library:\n\n- `v1.7`: This version is based on C++14 and focuses on bug fixes and stability improvements.\n- `v2` and onwards: Starting from version 2, Quill is based on C++17 and includes new features and ongoing maintenance.\n\nQuill is a production-ready logging library that has undergone extensive unit testing. It has been successfully utilized\nin production environments, including financial trading applications, providing high-performance and reliable logging\ncapabilities.\n\n## Documentation\n\nFor detailed documentation and usage instructions, please visit\nthe [Quill Documentation on Read the Docs](http://quillcpp.readthedocs.io/). It provides comprehensive information on\nhow to integrate and utilize Quill in your C++ applications.\n\nAdditionally, you can explore the [examples](http://github.com/odygrd/quill/tree/master/examples) folder in the Quill\nrepository on GitHub. These examples serve as valuable resources to understand different usage scenarios and demonstrate\nthe capabilities of the library.\n\n## Features\n\n- **Low Latency Logging**: Achieve fast logging performance with low latency. Refer to\n  the [Benchmarks](http://github.com/odygrd/quill#performance) for more details.\n- **Backend Logging Thread**: Format logs outside the critical path in a backend logging thread. For `non-built-in`\n  types, the backend logging thread invokes `ostream::operator<<()` on a copy of the object. Compile-time detection of\n  unsafe copying for `non-trivial user defined` types is supported. To avoid formatting them on the critical path, such\n  types can be tagged as `safe-to-copy`.\n  See [User Defined Types](http://quillcpp.readthedocs.io/en/latest/tutorial.html#user-defined-types) for more\n  information.\n- **Custom Formatters**: Customize log formatting based on user-defined patterns.\n  Explore [Formatters](http://quillcpp.readthedocs.io/en/latest/tutorial.html#formatters) for further details.\n- **Flexible Timestamp Generation**: Choose between rdtsc, chrono, or custom clocks (useful for simulations) for\n  timestamp generation.\n- **Log Stack Traces**: Store log messages in a ring buffer and display them later in response to a higher severity log\n  statement or on demand. Refer\n  to [Backtrace Logging](http://quillcpp.readthedocs.io/en/latest/tutorial.html#backtrace-logging) for more information.\n- **Multiple Logging Targets**: Utilize various logging targets, including:\n  - Console logging with color support.\n  - File logging.\n  - Rotating log files.\n  - Time rotating log files.\n  - JSON logging.\n  - Custom handlers.\n- **Log Message Filtering**: Apply filters to selectively process log messages. Learn more\n  about [Filters](http://quillcpp.readthedocs.io/en/latest/tutorial.html#filters).\n- **Structured Logging**: Generate JSON structured logs.\n  See [Structured-Log](http://quillcpp.readthedocs.io/en/latest/tutorial.html#json-log) for details.\n- **Blocking or Dropping Message Modes**: Choose between `blocking` or `dropping` message modes in the library.\n  In `blocking` mode, the hot threads pause and wait when the queue is full until space becomes available, ensuring no\n  message loss but introducing potential latency. In `dropping` mode, log messages beyond the queue's capacity may be\n  dropped to prioritize low latency. The library provides reports on dropped messages, queue reallocations, and blocked\n  hot threads for monitoring purposes.\n- **Queue Types**: The library supports two types of queues for transferring logs from the hot path to the backend\n  thread: bounded queues with a fixed capacity and unbounded queues that start small and can dynamically grow.\n- **Wide Character Support**: Log messages and filenames with wide characters are supported (Windows and v1.7.x only).\n- **Ordered Log Statements**: Log statements are ordered by timestamp even when produced by different threads,\n  facilitating easier debugging of multithreaded applications.\n- **Compile-Time Log Level Stripping**: Completely strip out log levels at compile time, reducing `if` branches.\n- **Clean and Warning-Free Codebase**: Ensure a clean and warning-free codebase, even with high compiler warning levels.\n- **Crash-Safe Behavior**: Benefit from crash-safe behavior with a built-in signal handler.\n- **Type-Safe Python-Style API**: Utilize a type-safe API inspired by Python, with compile-time checks and built-in\n  support for logging STL types/containers using the excellent [{fmt}](http://github.com/fmtlib/fmt) library.\n- **Huge Pages**: Benefit from support for huge pages on the hot path. This feature allows for improved performance and\n  efficiency.\n- **Printf-style format**: The library offers support for the `printf` style format in addition to the existing `libfmt`\n  style format. This feature is particularly useful when migrating from legacy codebases that rely on the `printf` style\n  format.\n\n## Caveats\n\nQuill may not work well with `fork()` since it spawns a background thread and `fork()` doesn't work well\nwith multithreading.\n\nIf your application uses `fork()` and you want to log in the child processes as well, you should call \n`quill::start()` after the `fork()` call. Additionally, you should ensure that you write to different \nfiles in the parent and child processes to avoid conflicts.\n\nFor example :\n\n```c++\n#include \"quill/Quill.h\"\n#include <stdio.h>\n#include <sys/types.h>\n#include <unistd.h>\n\nint main()\n{\n  // DO NOT CALL THIS BEFORE FORK\n  // quill::start();\n\n  if (fork() == 0)\n  {\n    // Get or create a handler to the file - Write to a different file\n    std::shared_ptr<quill::Handler> file_handler =\n      quill::file_handler(\"child_log.log\", \"w\", quill::FilenameAppend::DateTime);\n\n    quill::Config cfg;\n    cfg.default_handlers.push_back(std::move(file_handler));\n    quill::configure(cfg);\n\n    quill::start();\n\n    QUILL_LOG_INFO(quill::get_logger(), \"Hello from Child {}\", 123);\n  }\n  else\n  {\n    // Get or create a handler to the file - Write to a different file\n    std::shared_ptr<quill::Handler> file_handler =\n      quill::file_handler(\"parent_log.log\", \"w\", quill::FilenameAppend::DateTime);\n\n    quill::Config cfg;\n    cfg.default_handlers.push_back(std::move(file_handler));\n    quill::configure(cfg);\n\n    quill::start();\n\n    QUILL_LOG_INFO(quill::get_logger(), \"Hello from Parent {}\", 123);\n  }\n}\n```\n\n## Performance\n\n### Latency\n\n#### Logging Numbers\n\nThe following message is logged 100,000 times per\nthread: `LOG_INFO(logger, \"Logging int: {}, int: {}, double: {}\", i, j, d)`.\n\nThe results presented in the tables below are measured in nanoseconds (ns).\n\n##### 1 Thread\n\n| Library                                                        | 50th | 75th | 90th | 95th | 99th | 99.9th |\n|----------------------------------------------------------------|:----:|:----:|:----:|:----:|:----:|:------:|\n| [Quill v3.0.0 Unbounded Queue](http://github.com/odygrd/quill) |  20  |  21  |  24  |  25  |  27  |   34   |\n| [Quill v3.0.0 Bounded Queue](http://github.com/odygrd/quill)   |  17  |  19  |  21  |  22  |  26  |   36   |\n| [fmtlog](http://github.com/MengRao/fmtlog)                     |  16  |  19  |  21  |  22  |  27  |   40   |\n| [MS BinLog](http://github.com/Morgan-Stanley/binlog)           |  41  |  43  |  44  |  46  |  66  |  118   |\n| [PlatformLab NanoLog](http://github.com/PlatformLab/NanoLog)   |  53  |  66  |  75  |  80  |  92  |  106   |\n| [Reckless](http://github.com/mattiasflodin/reckless)           |  62  |  75  |  79  |  84  |  94  |  103   |\n| [Iyengar NanoLog](http://github.com/Iyengar111/NanoLog)        | 164  | 186  | 213  | 232  | 305  |  389   |         \n| [spdlog](http://github.com/gabime/spdlog)                      | 694  | 761  | 838  | 887  | 996  |  1143  |    \n| [g3log](http://github.com/KjellKod/g3log)                      | 5398 | 5639 | 5875 | 6025 | 6327 |  6691  |             \n\n##### 4 Threads\n\n| Library                                                        | 50th | 75th | 90th | 95th | 99th | 99.9th |\n|----------------------------------------------------------------|:----:|:----:|:----:|:----:|:----:|:------:|\n| [Quill v3.0.0 Unbounded Queue](http://github.com/odygrd/quill) |  20  |  22  |  24  |  26  |  28  |   35   |\n| [Quill v3.0.0 Bounded Queue](http://github.com/odygrd/quill)   |  17  |  19  |  21  |  22  |  26  |   36   |\n| [fmtlog](http://github.com/MengRao/fmtlog)                     |  16  |  19  |  21  |  23  |  26  |   35   |\n| [MS BinLog](http://github.com/Morgan-Stanley/binlog)           |  42  |  44  |  46  |  48  |  76  |  118   |\n| [PlatformLab NanoLog](http://github.com/PlatformLab/NanoLog)   |  56  |  67  |  77  |  82  |  95  |  159   |\n| [Reckless](http://github.com/mattiasflodin/reckless)           |  46  |  62  |  78  |  92  | 113  |  155   |                      \n| [Iyengar NanoLog](http://github.com/Iyengar111/NanoLog)        | 150  | 168  | 247  | 289  | 355  |  456   |\n| [spdlog](http://github.com/gabime/spdlog)                      | 728  | 828  | 907  | 959  | 1140 |  1424  |\n| [g3log](http://github.com/KjellKod/g3log)                      | 5103 | 5318 | 5525 | 5657 | 5927 |  6279  |\n\n#### Logging Numbers and Large Strings\n\nThe following message is logged 100,000 times per\nthread: `LOG_INFO(logger, \"Logging int: {}, int: {}, string: {}\", i, j, large_string)`.\nThe large string used in the log message is over 35 characters to prevent the short string optimization\nof `std::string`.\n\n##### 1 Thread\n\n| Library                                                        | 50th | 75th | 90th | 95th | 99th | 99.9th |\n|----------------------------------------------------------------|:----:|:----:|:----:|:----:|:----:|:------:|\n| [Quill v3.0.0 Unbounded Queue](http://github.com/odygrd/quill) |  31  |  33  |  35  |  36  |  39  |   48   |\n| [Quill v3.0.0 Bounded Queue](http://github.com/odygrd/quill)   |  30  |  32  |  33  |  35  |  43  |   51   |\n| [fmtlog](http://github.com/MengRao/fmtlog)                     |  29  |  31  |  34  |  37  |  44  |   53   |\n| [MS BinLog](http://github.com/Morgan-Stanley/binlog)           |  50  |  51  |  53  |  56  |  77  |  127   |\n| [PlatformLab NanoLog](http://github.com/PlatformLab/NanoLog)   |  71  |  86  | 105  | 117  | 136  |  158   |\n| [Reckless](http://github.com/mattiasflodin/reckless)           | 215  | 242  | 268  | 284  | 314  |  517   |\n| [Iyengar NanoLog](http://github.com/Iyengar111/NanoLog)        | 172  | 191  | 218  | 238  | 312  |  401   |  \n| [spdlog](http://github.com/gabime/spdlog)                      | 653  | 708  | 770  | 831  | 950  |  1083  |    \n| [g3log](http://github.com/KjellKod/g3log)                      | 4802 | 4998 | 5182 | 5299 | 5535 |  5825  |\n\n##### 4 Threads\n\n| Library                                                        | 50th | 75th | 90th | 95th | 99th | 99.9th |\n|----------------------------------------------------------------|:----:|:----:|:----:|:----:|:----:|:------:|\n| [Quill v3.0.0 Unbounded Queue](http://github.com/odygrd/quill) |  31  |  33  |  35  |  37  |  40  |   48   |\n| [Quill v3.0.0 Bounded Queue](http://github.com/odygrd/quill)   |  29  |  31  |  33  |  35  |  41  |   49   |\n| [fmtlog](http://github.com/MengRao/fmtlog)                     |  29  |  31  |  35  |  37  |  44  |   54   |\n| [MS BinLog](http://github.com/Morgan-Stanley/binlog)           |  50  |  52  |  54  |  58  |  86  |  130   |\n| [PlatformLab NanoLog](http://github.com/PlatformLab/NanoLog)   |  69  |  82  |  99  | 111  | 134  |  194   |\n| [Reckless](http://github.com/mattiasflodin/reckless)           | 187  | 209  | 232  | 247  | 291  |  562   |\n| [Iyengar NanoLog](http://github.com/Iyengar111/NanoLog)        | 159  | 173  | 242  | 282  | 351  |  472   |\n| [spdlog](http://github.com/gabime/spdlog)                      | 679  | 751  | 839  | 906  | 1132 |  1478  | \n| [g3log](http://github.com/KjellKod/g3log)                      | 4739 | 4955 | 5157 | 5284 | 5545 |  5898  |\n\nThe benchmark was conducted on an Ubuntu system with an Intel Xeon Gold 6254 CPU running at 3.10GHz. The benchmark used\nGCC 12.2 as the compiler.\n\nTo ensure accurate performance measurement, each thread was pinned to a different CPU. The cores are also isolated on\nthis particular system.\n\nThe benchmark methodology involved logging 20 messages in a loop, calculating and storing the average latency for those\nmessages, waiting between 1-2 milliseconds, and repeating this process for a specified number of iterations.\n\nThe benchmark was executed four times for each logging library, and the reported latencies represent the second-best\nresult obtained.\n\nYou can find the benchmark code on the [logger_benchmarks](http://github.com/odygrd/logger_benchmarks) repository.\n\n### Throughput\n\nWhile the primary focus of the library is not on throughput, it does provide efficient handling of log messages across\nmultiple threads. The backend logging thread, responsible for formatting and ordering log messages from hot threads,\nensures that all queues are emptied on a high priority basis. This approach prevents the need for allocating new queues\nor dropping messages on the hot path. Instead, the backend thread internally buffers log messages and writes them when\nthe hot thread queues are empty or when a predefined limit, `backend_thread_transit_events_soft_limit`, is reached.\n\nComparing throughput with other logging libraries in an asynchronous logging scenario has proven challenging. Some\nlibraries may drop log messages, resulting in smaller log files than expected, while others only offer asynchronous\nflush, making it difficult to determine when the logging thread has finished processing all messages.\n\nIn contrast, Quill provides a blocking `flush()` guarantee, ensuring that every log message from the hot threads up to\nthat point is flushed to the file. The maximum throughput is measured by determining the maximum number of log messages\nthe backend logging thread can write to the file per second.\n\nFor benchmarking purposes, you can find the\ncode [here](https://github.com/odygrd/quill/blob/master/benchmarks/backend_throughput/quill_backend_throughput.cpp).\nWhen measured on the same system as the latency benchmarks mentioned earlier, logging 4 million messages resulted in a\nlog file size of 476 MB. The average throughput achieved was 1.76 million messages per second, with a total elapsed time\nof 2266 ms.\n\nPlease note that while Quill performs well in terms of throughput, its primary strength lies in its efficient handling\nof log messages across threads.\n\n## Basic usage\n\n```c++\n#include \"quill/Quill.h\"\n\nint main()\n{\n  quill::configure(\n    []()\n    {\n      // See Config.h and Tweaks.h for run time and compile time configuration options\n      quill::Config cfg;\n      return cfg;\n    }());\n\n  // Starts the logging backend thread\n  quill::start();\n\n  // Create a file logger\n  quill::Logger* logger = quill::create_logger(\n    \"file_logger\",\n    quill::file_handler(\"example.log\",\n                        []()\n                        {\n                          quill::FileHandlerConfig cfg;\n                          cfg.set_open_mode('w');\n                          cfg.set_pattern(\n                            \"[%(ascii_time)] [%(thread)] [%(filename):%(lineno)] [%(logger_name)] \"\n                            \"[%(level_name)] - %(message)\",\n                            \"%H:%M:%S.%Qms\");\n                          return cfg;\n                        }()));\n\n  logger->set_log_level(quill::LogLevel::TraceL3);\n\n  // enable a backtrace that will get flushed when we log CRITICAL\n  logger->init_backtrace(2u, quill::LogLevel::Critical);\n\n  LOG_BACKTRACE(logger, \"Backtrace log {}\", 1);\n  LOG_BACKTRACE(logger, \"Backtrace log {}\", 2);\n\n  LOG_INFO(logger, \"Welcome to Quill!\");\n  LOG_ERROR(logger, \"An error message. error code {}\", 123);\n  LOG_WARNING(logger, \"A warning message.\");\n  LOG_CRITICAL(logger, \"A critical error.\");\n  LOG_DEBUG(logger, \"Debugging foo {}\", 1234);\n  LOG_TRACE_L1(logger, \"{:>30}\", \"right aligned\");\n  LOG_TRACE_L2(logger, \"Positional arguments are {1} {0} \", \"too\", \"supported\");\n  LOG_TRACE_L3(logger, \"Support for floats {:03.2f}\", 1.23456);\n}\n```\n\n```c++\n#include \"quill/Quill.h\"\n\nint main()\n{\n  quill::Config cfg;\n  cfg.enable_console_colours = true;\n  quill::configure(cfg);\n  \n  quill::start();\n\n  // Default root logger to stdout\n  quill::Logger* logger = quill::get_logger();\n  logger->set_log_level(quill::LogLevel::TraceL3);\n\n  // enable a backtrace that will get flushed when we log CRITICAL\n  logger->init_backtrace(2u, quill::LogLevel::Critical);\n\n  LOG_BACKTRACE(logger, \"Backtrace log {}\", 1);\n  LOG_BACKTRACE(logger, \"Backtrace log {}\", 2);\n\n  LOG_INFO(logger, \"Welcome to Quill!\");\n  LOG_ERROR(logger, \"An error message. error code {}\", 123);\n  LOG_WARNING(logger, \"A warning message.\");\n  LOG_CRITICAL(logger, \"A critical error.\");\n  LOG_DEBUG(logger, \"Debugging foo {}\", 1234);\n  LOG_TRACE_L1(logger, \"{:>30}\", \"right aligned\");\n  LOG_TRACE_L2(logger, \"Positional arguments are {1} {0} \", \"too\", \"supported\");\n  LOG_TRACE_L3(logger, \"Support for floats {:03.2f}\", 1.23456);\n}\n```\n\n### Output\n\n[![Screenshot-2020-08-14-at-01-09-43.png](http://i.postimg.cc/02Vbt8LH/Screenshot-2020-08-14-at-01-09-43.png)](http://postimg.cc/LnZ95M4z)\n\n## CMake-Integration\n\n#### External\n\n##### Building and Installing Quill as Static Library\n\n```\ngit clone http://github.com/odygrd/quill.git\nmkdir cmake_build\ncd cmake_build\nmake install\n```\n\nNote: To install in custom directory invoke cmake with `-DCMAKE_INSTALL_PREFIX=/quill/install-dir/`\n\n##### Building and Installing Quill as Static Library With External `libfmt`\n\n```\ncmake -DCMAKE_PREFIX_PATH=/my/fmt/fmt-config.cmake-directory/ -DQUILL_FMT_EXTERNAL=ON -DCMAKE_INSTALL_PREFIX=/quill/install-dir/'\n```\n\nThen use the library from a CMake project, you can locate it directly with `find_package()`\n\n##### Directory Structure\n\n```\nmy_project/\n├── CMakeLists.txt\n├── main.cpp\n```\n\n##### CMakeLists.txt\n\n```cmake\n# Set only if needed - quill was installed under a custom non-standard directory\nset(CMAKE_PREFIX_PATH /test_quill/usr/local/)\n\nfind_package(quill REQUIRED)\n\n# Linking your project against quill\nadd_executable(example main.cpp)\ntarget_link_libraries(example PRIVATE quill::quill)\n```\n\n##### main.cpp\n\nSee [basic usage](#basic-usage)\n\n#### Embedded\n\nTo embed the library directly, copy the source [folder](http://github.com/odygrd/quill/tree/master/quill/quill) to your\nproject and call `add_subdirectory()` in your `CMakeLists.txt` file\n\n##### Directory Structure\n\n```\nmy_project/\n├── quill/            (source folder)\n├── CMakeLists.txt\n├── main.cpp\n```\n\n##### CMakeLists.txt\n\n```cmake\ncmake_minimum_required(VERSION 3.1.0)\nproject(my_project)\n\nset(CMAKE_CXX_STANDARD 14)\n\nadd_subdirectory(quill)\n\nadd_executable(my_project main.cpp)\ntarget_link_libraries(my_project PRIVATE quill::quill)\n```\n\n##### main.cpp\n\nSee [basic usage](#basic-usage)\n\n#### Building Quill as a Shared Library (DLL) on Windows\n\nTo build Quill as a shared library (DLL) on Windows, follow these steps:\n\n1. Add the following CMake flags when configuring the build:\n   ```\n   -DCMAKE_WINDOWS_EXPORT_ALL_SYMBOLS=TRUE -DBUILD_SHARED_LIBS=ON\n   ```\n\n2. Additionally, you need to define `QUILL_BUILD_SHARED` either in your code before including `Quill.h` or as a compiler\n   flag when building outside of CMake.\n\n#### Building Quill for Android NDK\n\nTo build Quill for Android NDK add the following CMake flags when configuring the build:\n\n  ```\n  -DQUILL_NO_THREAD_NAME_SUPPORT:BOOL=ON\n  ```\n\n## Design\n\n![design.jpg](docs%2Fdesign.jpg)\n\n## License\n\nQuill is licensed under the [MIT License](http://opensource.org/licenses/MIT)\n\nQuill depends on third party libraries with separate copyright notices and license terms.\nYour use of the source code for these subcomponents is subject to the terms and conditions of the following licenses.\n\n- ([MIT License](http://opensource.org/licenses/MIT)) {fmt} (http://github.com/fmtlib/fmt/blob/master/LICENSE.rst)\n- ([MIT License](http://opensource.org/licenses/MIT)) doctest (http://github.com/onqtam/doctest/blob/master/LICENSE.txt)"
}
