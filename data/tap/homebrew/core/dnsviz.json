{
  "name": "dnsviz",
  "full_name": "dnsviz",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Tools for analyzing and visualizing DNS and DNSSEC behavior",
  "license": "GPL-2.0-or-later",
  "homepage": "https://github.com/dnsviz/dnsviz/",
  "versions": {
    "stable": "0.9.4",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://files.pythonhosted.org/packages/a5/7c/b38750c866e7e29bc76450c75f61ede6c2560e75cfe36df81e9517612434/dnsviz-0.9.4.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "6448d4c6e7c1844aa2a394d60f7cc53721ad985e0e830c30265ef08a74a7aa28"
    }
  },
  "revision": 2,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/dnsviz/blobs/sha256:5a71a6c91593a90b9ecd76dbfc27afba76500620aaddee7ff88fab78e71b119d",
          "sha256": "5a71a6c91593a90b9ecd76dbfc27afba76500620aaddee7ff88fab78e71b119d"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/dnsviz/blobs/sha256:55b1e30f09a738d831a92555eed6630b694248088e9089deef27d973d114f304",
          "sha256": "55b1e30f09a738d831a92555eed6630b694248088e9089deef27d973d114f304"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/dnsviz/blobs/sha256:254dc87f29c57a1594c6a3d4ca4fbf8a2e52c9967a6ab970a4c3aef775cd1f31",
          "sha256": "254dc87f29c57a1594c6a3d4ca4fbf8a2e52c9967a6ab970a4c3aef775cd1f31"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/dnsviz/blobs/sha256:77ff1faa9c59f7347af9dfb37d3a6c6cf22c1f0d8b9612ac0858525cc7a981a8",
          "sha256": "77ff1faa9c59f7347af9dfb37d3a6c6cf22c1f0d8b9612ac0858525cc7a981a8"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/dnsviz/blobs/sha256:5bca7af88657cc2d05a7764417a230fd8bdb3d65885333a16f6d897f6d333af4",
          "sha256": "5bca7af88657cc2d05a7764417a230fd8bdb3d65885333a16f6d897f6d333af4"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/dnsviz/blobs/sha256:17c5b7efc2b3bce906a472478b509b882317e357e61e2c60b710c318aaf5014c",
          "sha256": "17c5b7efc2b3bce906a472478b509b882317e357e61e2c60b710c318aaf5014c"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dnsviz/blobs/sha256:546e26d786634c81029b5ded89d12ecd07b75bb8b7f7f594c43c596f9829c057",
          "sha256": "546e26d786634c81029b5ded89d12ecd07b75bb8b7f7f594c43c596f9829c057"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "pkg-config",
    "swig"
  ],
  "dependencies": [
    "graphviz",
    "openssl@3",
    "python@3.11",
    "swig"
  ],
  "test_dependencies": [
    "bind"
  ],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/dnsviz.rb",
  "ruby_source_checksum": {
    "sha256": "57747062ebf59cae490e372eea4e55c2d765242edbf6a24ea1f5ce8e8dd080c0"
  },
  "date_added": "2016-12-02T09:30:56+00:00",
  "readme": "# ![DNSViz](doc/images/logo-220x100.png)\n\n\n## Table of Contents\n* [Installation](#installation)\n* [Usage](#usage)\n* [Pre-Deployment DNS Testing](#pre-deployment-dns-testing)\n* [Docker Container](#docker-container)\n\n\n## Description\n\nDNSViz is a tool suite for analysis and visualization of Domain Name System\n(DNS) behavior, including its security extensions (DNSSEC).  This tool suite\npowers the Web-based analysis available at https://dnsviz.net/\n\n\n## Installation\n\nDNSViz packages are available in repositories for popular operating systems,\nsuch as Debian, Ubuntu, and FreeBSD.  DNSViz can also be installed on Mac OS X\nvia Homebrew or MacPorts.\n\nThe remainer of this section covers other methods of installation, including a\nlist of [dependencies](#dependencies), installation to a\n[virtual environment](#installation-in-a-virtual-environment), and installation\non [Fedora, RHEL 8, CentOS 8,](#fedora--rhel-8--centos-8-rpm-build-and-install) and\n[RHEL 7](#rhel-7-rpm-build-and-install).\n\nInstructions for running in a Docker container are also available\n[later in this document](#docker-container).\n\n\n### Dependencies\n\n* python (2.7, 3.5 - 3.9) - https://www.python.org/\n\n* dnspython (1.13.0 or later) - https://www.dnspython.org/\n\n* pygraphviz (1.3 or later) - https://pygraphviz.github.io/\n\n* M2Crypto (0.37.0 or later) - https://gitlab.com/m2crypto/m2crypto\n\nNote that earlier versions of the software listed above might also work with\nDNSViz, but with some caveats.  For example, M2Crypto 0.28.0 and later will\nwork, but versions of M2Crypto earlier than 0.37.0 lack support for DNSSEC\nalgorithms 15 (Ed25519) and 16 (Ed448).  Also, while DNSViz itself still works\nwith python 2.7, some versions of its software dependencies have moved on:\npygraphviz 1.6 and dnspython 2.0.0 dropped support for python 2.7.\n\n\n### Optional Software\n\n* OpenSSL GOST Engine - https://github.com/gost-engine/engine\n\n  With OpenSSL version 1.1.0 and later, the OpenSSL GOST Engine is necessary to\n  validate DNSSEC signatures with algorithm 12 (GOST R 34.10-2001) and create\n  digests of type 3 (GOST R 34.11-94).\n\n* ISC BIND - https://www.isc.org/bind/\n\n  When using DNSViz for [pre-deployment testing](#pre-deployment-dns-testing)\n  by specifying zone files and/or alternate delegation information on the\n  command line (i.e., with `-N`, `-x`, or `-D`), `named(8)` is invoked to serve\n  one or more zones.  ISC BIND is only needed in this case, and `named(8)` does\n  not need to be running (i.e., as a server).\n\n  Note that default AppArmor policies for Debian are known to cause issues when\n  invoking `named(8)` from DNSViz for pre-deployment testing.  Two solutions to\n  this problem are to either: 1) create a local policy for AppArmor that allows\n  `named(8)` to run with fewer restrictions; or 2) disable AppArmor completely.\n\n\n### Installation in a Virtual Environment\n\nTo install DNSViz to a virtual environment, first create and activate a virtual\nenvironment, and install the dependencies:\n```\n$ virtualenv ~/myenv\n$ source ~/myenv/bin/activate\n(myenv) $ pip install -r requirements.txt\n```\n(Note that this installs the dependencies that are python packages, but some of\nthese packages have non-python dependencies, such as Graphviz (required for\npygraphviz) that are not installed automatically.)\n\nNext download and install DNSViz from the Python Package Index (PyPI):\n```\n(myenv) $ pip install dnsviz\n```\nor locally, from a downloaded or cloned copy of DNSViz:\n```\n(myenv) $ pip install .\n```\n\n\n### Fedora / RHEL 8 / CentOS 8 RPM Build and Install\n\n*RHEL 8 only*: Enable CodeReady Linux Builder by following the instructions [here](https://access.redhat.com/articles/4348511).\n\n*CentOS 8 only*: Enable PowerTools and EPEL with the following two commands:\n```\n$ sudo dnf config-manager --set-enabled powertools\n$ sudo dnf install epel-release\n```\n\nThe remaining instructions are for Fedora, RHEL 8, and CentOS 8.\n\nInstall the tools for building an RPM, and set up the rpmbuild tree.\n```\n$ sudo dnf install rpm-build rpmdevtools python3-devel\n$ rpmdev-setuptree\n```\n\nFrom within the DNSViz source directory, create a source distribution tarball\nand copy it and the DNSViz spec file to the appropriate rpmbuild\nsubdirectories.\n```\n$ python3 setup.py sdist\n$ cp dist/dnsviz-*.tar.gz ~/rpmbuild/SOURCES/\n$ cp contrib/dnsviz.spec ~/rpmbuild/SPECS/\n```\n\nInstall dnspython, pygraphviz, and M2Crypto.\n```\n$ sudo dnf install python3-dns python3-pygraphviz python3-m2crypto\n```\n(Note that as of Fedora 33 / RHEL 8 / CentOS 8, the latest version of M2Crypto is 0.35.2.  If you\nwould like support for DNSSEC algorithms 15 (Ed25519) and 16 (Ed448), you will\nneed to install M2Crypto using `pip3`.  For example, see [installation to a\nvirtual environment](#installation-in-a-virtual-environment).)\n\nBuild and install the DNSViz RPM.\n```\n$ rpmbuild -ba rpmbuild/SPECS/dnsviz.spec\n$ sudo rpm -iv rpmbuild/RPMS/noarch/dnsviz-*-1.*.noarch.rpm\n```\n\n\n### RHEL 7 RPM Build and Install\n\nInstall pygraphviz, M2Crypto, and dnspython, after installing their build dependencies.\n```\n$ sudo yum install python3 gcc python3-devel graphviz-devel openssl-devel swig\n$ pip3 install --user pbr m2crypto pygraphviz dnspython\n```\n\nInstall rpm-build tools, then build and install the DNSViz RPM.\n```\n$ sudo yum install rpm-build\n$ python3 setup.py bdist_rpm --install-script contrib/rpm-install.sh --distribution-name el7\n$ sudo rpm -iv dist/dnsviz-*-1.noarch.rpm\n```\n\nNote that a custom install script is used to properly install the DNSViz man\npages.\n\n\n## Usage\n\nDNSViz is invoked using the `dnsviz` command-line utility.  `dnsviz` itself\nuses several subcommands: `probe`, `grok`, `graph`, `print`, and `query`.  See\nthe man pages associated with each subcommand, in the form of\n\"dnsviz-<subcommand> (1)\" (e.g., \"man dnsviz-probe\") for more detailed\ndocumentation and usage.\n\n### dnsviz probe\n\n`dnsviz probe` takes one or more domain names as input and performs a series of\nqueries to either recursive (default) or authoritative DNS servers, the results\nof which are serialized into JSON format.\n\n\n#### Examples\n\nAnalyze the domain name example.com using your configured DNS resolvers (i.e.,\nin `/etc/resolv.conf`) and store the queries and responses in the file named\n\"example.com.json\":\n```\n$ dnsviz probe example.com > example.com.json\n```\n\nSame thing:\n```\n$ dnsviz probe -o example.com.json example.com\n```\n\nAnalyze the domain name example.com by querying its authoritative servers\ndirectly:\n```\n$ dnsviz probe -A -o example.com.json example.com\n```\n\nAnalyze the domain name example.com by querying explicitly-defined\nauthoritative servers, rather than learning the servers through referrals from\nthe IANA root servers:\n```\n$ dnsviz probe -A \\\n  -x example.com:a.iana-servers.org=199.43.132.53,a.iana-servers.org=[2001:500:8c::53] \\\n  -x example.com:b.iana-servers.org=199.43.133.53,b.iana-servers.org=[2001:500:8d::53] \\\n  -o example.com.json example.com\n```\n\nSame, but have `dnsviz probe` resolve the names:\n```\n$ dnsviz probe -A \\\n  -x example.com:a.iana-servers.org,b.iana-servers.org \\\n  -o example.com.json example.com\n```\n\nAnalyze the domain name example.com and its entire ancestry by querying\nauthoritative servers and following delegations, starting at the root:\n```\n$ dnsviz probe -A -a . -o example.com.json example.com\n```\n\nAnalyze multiple names in parallel (four threads) using explicit recursive\nresolvers (replace *192.0.1.2* and *2001:db8::1* with legitimate resolver\naddresses):\n```\n$ dnsviz probe -s 192.0.2.1,[2001:db8::1] -t 4 -o multiple.json \\\n  example.com sandia.gov verisignlabs.com dnsviz.net\n```\n\n\n### dnsviz grok\n\n`dnsviz grok` takes serialized query results in JSON format (i.e., output from\n`dnsviz probe`) as input and assesses specified domain names based on their\ncorresponding content in the input.  The output is also serialized into JSON\nformat.\n\n\n#### Examples\n\nProcess the query/response output produced by `dnsviz probe`, and store the\nserialized results in a file named \"example.com-chk.json\":\n```\n$ dnsviz grok < example.com.json > example.com-chk.json\n```\n\nSame thing:\n```\n$ dnsviz grok -r example.com.json -o example.com-chk.json example.com\n```\n\nShow only info-level information: descriptions, statuses, warnings, and errors:\n```\n$ dnsviz grok -l info -r example.com.json -o example.com-chk.json\n```\n\nShow descriptions only if there are related warnings or errors:\n```\n$ dnsviz grok -l warning -r example.com.json -o example.com-chk.json\n```\n\nShow descriptions only if there are related errors:\n```\n$ dnsviz grok -l error -r example.com.json -o example.com-chk.json\n```\n\nUse root key as DNSSEC trust anchor, to additionally indicate\nauthentication status of responses:\n```\n$ dig +noall +answer . dnskey | awk '$5 % 2 { print $0 }' > tk.txt\n$ dnsviz grok -l info -t tk.txt -r example.com.json -o example.com-chk.json\n```\n\nPipe `dnsviz probe` output directly to `dnsviz grok`:\n```\n$ dnsviz probe example.com | \\\n      dnsviz grok -l info -o example.com-chk.json\n```\n\nSame thing, but save the raw output (for re-use) along the way:\n```\n$ dnsviz probe example.com | tee example.com.json | \\\n      dnsviz grok -l info -o example.com-chk.json\n```\n\nAssess multiple names at once with error level:\n```\n$ dnsviz grok -l error -r multiple.json -o example.com-chk.json\n```\n\n\n### dnsviz graph\n\n`dnsviz graph` takes serialized query results in JSON format (i.e., output from\n`dnsviz probe`) as input and assesses specified domain names based on their\ncorresponding content in the input.  The output is an image file, a `dot`\n(directed graph) file, or an HTML file, depending on the options passed.\n\n\n#### Examples\n\nProcess the query/response output produced by `dnsviz probe`, and produce a\ngraph visually representing the results in a png file named \"example.com.png\".\n```\n$ dnsviz graph -Tpng < example.com.json > example.com.png\n```\n\nSame thing:\n```\n$ dnsviz graph -Tpng -o example.com.png example.com < example.com.json\n```\n\nSame thing, but produce interactive HTML format:\ninteractive HTML output in a file named \"example.com.html\":\n```\n$ dnsviz graph -Thtml < example.com.json > example.com.html\n```\n\nSame thing (filename is derived from domain name and output format):\n```\n$ dnsviz graph -Thtml -O -r example.com.json\n```\n\nUse alternate DNSSEC trust anchor:\n```\n$ dig +noall +answer example.com dnskey | awk '$5 % 2 { print $0 }' > tk.txt\n$ dnsviz graph -Thtml -O -r example.com.json -t tk.txt\n```\n\nPipe `dnsviz probe` output directly to `dnsviz graph`:\n```\n$ dnsviz probe example.com | \\\n      dnsviz graph -Thtml -O\n```\n\nSame thing, but save the raw output (for re-use) along the way:\n```\n$ dnsviz probe example.com | tee example.com.json | \\\n      dnsviz graph -Thtml -O\n```\n\nProcess analysis of multiple domain names, creating an image for each name\nprocessed:\n```\n$ dnsviz graph -Thtml -O -r multiple.json\n```\n\nProcess analysis of multiple domain names, creating a single image for all\nnames.\n```\n$ dnsviz graph -Thtml -r multiple.json > multiple.html\n```\n\n\n### dnsviz print\n\n`dnsviz print` takes serialized query results in JSON format (i.e., output from\n`dnsviz probe`) as input and assesses specified domain names based on their\ncorresponding content in the input.  The output is textual output suitable for\nfile or terminal display.\n\n\n#### Examples\n\nProcess the query/response output produced by `dnsviz probe`, and output the\nresults to the terminal:\n```\n$ dnsviz print < example.com.json\n```\n\nUse alternate DNSSEC trust anchor:\n```\n$ dig +noall +answer example.com dnskey | awk '$5 % 2 { print $0 }' > tk.txt\n$ dnsviz print -r example.com.json -t tk.txt\n```\n\nPipe `dnsviz probe` output directly to `dnsviz print`:\n```\n$ dnsviz probe example.com | \\\n      dnsviz print\n```\n\nSame thing, but save the raw output (for re-use) along the way:\n```\n$ dnsviz probe example.com | tee example.com.json | \\\n      dnsviz print\n```\n\n\n### dnsviz query\n\n`dnsviz query` is a wrapper that couples the functionality of `dnsviz probe`\nand `dnsviz print` into a tool with minimal dig-like usage, used to make\nanalysis queries and return the textual output to terminal or file output in\none go.\n\n\n#### Examples\n\nAnalyze the domain name example.com using the first of your configured DNS\nresolvers (i.e., in `/etc/resolv.conf`):\n```\n$ dnsviz query example.com\n```\n\nSame, but specify an alternate trust anchor:\n```\n$ dnsviz query +trusted-key=tk.txt example.com\n```\n\nAnalyze example.com through the recursive resolver at 192.0.2.1:\n```\n$ dnsviz query @192.0.2.1 +trusted-key=tk.txt example.com\n```\n\n\n## Pre-Deployment DNS Testing\n\nThe examples in this section demonstrate usage of DNSViz for pre-deployment\ntesting.\n\n\n### Pre-Delegation Testing\n\nThe following examples involve issuing diagnostic queries for a zone before it\nis ever delegated.\n\nIssue queries against a zone file on the local system (`example.com.zone`).\n`named(8)` is invoked to serve the file locally:\n```\n$ dnsviz probe -A -x example.com+:example.com.zone example.com\n```\n(Note the use of \"+\", which designates that the parent servers should not be\nqueried for DS records.)\n\nIssue queries to a server that is serving the zone:\n```\n$ dnsviz probe -A -x example.com+:192.0.2.1 example.com\n```\n(Note that this server doesn't need to be a server in the NS RRset for\nexample.com.)\n\nIssue queries to the servers in the authoritative NS RRset, specified by name\nand/or address:\n```\n$ dnsviz probe -A \\\n      -x example.com+:ns1.example.com=192.0.2.1 \\\n      -x example.com+:ns2.example.com=192.0.2.1,ns2.example.com=[2001:db8::1] \\\n      example.com\n```\n\nSpecify the names and addresses corresponding to the future delegation NS\nrecords and (as appropriate) A/AAAA glue records in the parent zone (com):\n```\n$ dnsviz probe -A \\\n      -N example.com:ns1.example.com=192.0.2.1 \\\n      -N example.com:ns2.example.com=192.0.2.1,ns2.example.com=[2001:db8::1] \\\n      example.com\n```\n\nAlso supply future DS records:\n```\n$ dnsviz probe -A \\\n      -N example.com:ns1.example.com=192.0.2.1 \\\n      -N example.com:ns2.example.com=192.0.2.1,ns2.example.com=[2001:db8::1] \\\n      -D example.com:dsset-example.com. \\\n      example.com\n```\n\n\n### Pre-Deployment Testing of Authoritative Zone Changes\n\nThe following examples involve issuing diagnostic queries for a delegated zone\nbefore changes are deployed.\n\nIssue diagnostic queries for a new zone file that has been created but not yet\nbeen deployed (i.e., with changes to DNSKEY or other records):\n```\n$ dnsviz probe -A -x example.com:example.com.zone example.com\n```\n(Note the absence of \"+\", which designates that the parent servers will be\nqueried for DS records.)\n\nIssue queries to a server that is serving the new version of the zone:\n```\n$ dnsviz probe -A -x example.com:192.0.2.1 example.com\n```\n(Note that this server doesn't need to be a server in the NS RRset for\nexample.com.)\n\n\n### Pre-Deployment Testing of Delegation Changes\n\nThe following examples involve issuing diagnostic queries for a delegated zone\nbefore changes are deployed to the delegation, glue, or DS records for that\nzone.\n\nSpecify the names and addresses corresponding to the new delegation NS records\nand (as appropriate) A/AAAA glue records in the parent zone (com):\n```\n$ dnsviz probe -A \\\n      -N example.com:ns1.example.com=192.0.2.1 \\\n      -N example.com:ns2.example.com=192.0.2.1,ns2.example.com=[2001:db8::1] \\\n      example.com\n```\n\nAlso supply the replacement DS records:\n```\n$ dnsviz probe -A \\\n      -N example.com:ns1.example.com=192.0.2.1 \\\n      -N example.com:ns2.example.com=192.0.2.1,ns2.example.com=[2001:db8::1] \\\n      -D example.com:dsset-example.com. \\\n      example.com\n```\n\n\n## Docker Container\n\nA ready-to-use docker container is available for use.\n\n```\ndocker pull dnsviz/dnsviz\n```\n\nThis section only covers Docker-related examples, for more information see the\n[Usage](#usage) section.\n\n\n### Simple Usage\n\n```\n$ docker run dnsviz/dnsviz help\n$ docker run dnsviz/dnsviz query example.com\n```\n\n\n### Working with Files\n\nIt might be useful to mount a local working directory into the container,\nespecially when combining multiple commands or working with zone files.\n\n```\n$ docker run -v \"$PWD:/data:rw\" dnsviz/dnsviz probe dnsviz.net > probe.json\n$ docker run -v \"$PWD:/data:rw\" dnsviz/dnsviz graph -r probe.json -T png -O\n```\n\n\n### Using a Host Network\n\nWhen running authoritative queries, a host network is recommended.\n\n```\n$ docker run --network host dnsviz/dnsviz probe -4 -A example.com > example.json\n```\n\nOtherwise, you're likely to encounter the following error:\n`dnsviz.query.SourceAddressBindError: Unable to bind to local address (EADDRNOTAVAIL)`\n\n\n### Interactive Mode\n\nWhen performing complex analyses, where you need to combine multiple DNSViz\ncommands, use bash redirection, etc., it might be useful to run the container\ninteractively:\n\n```\n$ docker run --network host -v \"$PWD:/data:rw\" --entrypoint /bin/sh -ti dnsviz/dnsviz\n/data # dnsviz --help\n```"
}
