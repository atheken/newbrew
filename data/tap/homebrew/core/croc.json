{
  "name": "croc",
  "full_name": "croc",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Securely send things from one computer to another",
  "license": "MIT",
  "homepage": "https://github.com/schollz/croc",
  "versions": {
    "stable": "9.6.5",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/schollz/croc/archive/v9.6.5.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "2d3ba7bae3c49e3870e2f8523c6be00e92fe6e46828269a8cea34d4034102cad"
    },
    "head": {
      "url": "https://github.com/schollz/croc.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/croc/blobs/sha256:34be7a4340de866aa4b1f883cdc9604a30d1ceea355d38cad459986377964766",
          "sha256": "34be7a4340de866aa4b1f883cdc9604a30d1ceea355d38cad459986377964766"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/croc/blobs/sha256:34be7a4340de866aa4b1f883cdc9604a30d1ceea355d38cad459986377964766",
          "sha256": "34be7a4340de866aa4b1f883cdc9604a30d1ceea355d38cad459986377964766"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/croc/blobs/sha256:34be7a4340de866aa4b1f883cdc9604a30d1ceea355d38cad459986377964766",
          "sha256": "34be7a4340de866aa4b1f883cdc9604a30d1ceea355d38cad459986377964766"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/croc/blobs/sha256:b22e747202aa670bbbe75d68e618cda3fd1fd595d93391f14f38ee5b42e78aad",
          "sha256": "b22e747202aa670bbbe75d68e618cda3fd1fd595d93391f14f38ee5b42e78aad"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/croc/blobs/sha256:b22e747202aa670bbbe75d68e618cda3fd1fd595d93391f14f38ee5b42e78aad",
          "sha256": "b22e747202aa670bbbe75d68e618cda3fd1fd595d93391f14f38ee5b42e78aad"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/croc/blobs/sha256:b22e747202aa670bbbe75d68e618cda3fd1fd595d93391f14f38ee5b42e78aad",
          "sha256": "b22e747202aa670bbbe75d68e618cda3fd1fd595d93391f14f38ee5b42e78aad"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/croc/blobs/sha256:894d52ea147115cf2fc1109b3bfd3349647546d12a2191b20a95d92369d1066e",
          "sha256": "894d52ea147115cf2fc1109b3bfd3349647546d12a2191b20a95d92369d1066e"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/croc.rb",
  "ruby_source_checksum": {
    "sha256": "3d5353c98a4fb74e454a8dcf141b1c0ead81dfbb85585f03ad43df04292853cb"
  },
  "date_added": "2020-09-07T07:19:10+00:00",
  "readme": "\n<p align=\"center\">\n<img\n    src=\"https://user-images.githubusercontent.com/6550035/46709024-9b23ad00-cbf6-11e8-9fb2-ca8b20b7dbec.jpg\"\n    width=\"408px\" border=\"0\" alt=\"croc\">\n<br>\n<a href=\"https://github.com/schollz/croc/releases/latest\"><img src=\"https://img.shields.io/badge/version-v9.6.5-brightgreen.svg?style=flat-square\" alt=\"Version\"></a>\n<a href=\"https://coveralls.io/github/schollz/croc\"><img src=\"https://img.shields.io/badge/coverage-81%25-green.svg?style=flat-square\" alt=\"Coverage\"></a>\n<a href=\"https://travis-ci.org/schollz/croc\"><img\nsrc=\"https://img.shields.io/travis/schollz/croc.svg?style=flat-square\" alt=\"Build\nStatus\"></a> \n<p align=\"center\">This project is supported by <a href=\"https://github.com/sponsors/schollz\">Github sponsors</a>.</p>\n\n`croc` is a tool that allows any two computers to simply and securely transfer files and folders. AFAIK, *croc* is the only CLI file-transfer tool that does **all** of the following:\n\n- allows **any two computers** to transfer data (using a relay)\n- provides **end-to-end encryption** (using PAKE)\n- enables easy **cross-platform** transfers (Windows, Linux, Mac)\n- allows **multiple file** transfers\n- allows **resuming transfers** that are interrupted\n- local server or port-forwarding **not needed**\n- **ipv6-first** with ipv4 fallback\n- can **use proxy**, like tor\n\nFor more information about `croc`, see [my blog post](https://schollz.com/software/croc6) or read a [recent interview I did](https://console.substack.com/p/console-91).\n\n![Example](src/install/customization.gif)\n\n## Install\n\nDownload [the latest release for your system](https://github.com/schollz/croc/releases/latest), or install a release from the command-line:\n\n```\ncurl https://getcroc.schollz.com | bash\n```\n\n\nOn macOS you can install the latest release with [Homebrew](https://brew.sh/): \n\n```\nbrew install croc\n```\n\nOn macOS you can also install the latest release with [MacPorts](https://macports.org/): \n\n```\nsudo port selfupdate\nsudo port install croc\n```\n\nOn Windows you can install the latest release with [Scoop](https://scoop.sh/), [Chocolatey](https://chocolatey.org), or [Winget](https://learn.microsoft.com/en-us/windows/package-manager/): \n\n```\nscoop install croc\n```\n\n```\nchoco install croc\n```\n\n```\nwinget install schollz.croc\n```\n\nOn Unix you can install the latest release with [Nix](https://nixos.org/nix):\n\n```\nnix-env -i croc\n```\n\n\nOn Alpine Linux you have to install dependencies first:\n\n```\napk add bash coreutils\nwget -qO- https://getcroc.schollz.com | bash\n```\n\nOn Arch Linux you can install the latest release with `pacman`:\n\n```\npacman -S croc\n```\n\nOn Fedora you can install with `dnf`:\n\n```\ndnf install croc\n```\n\nOn Gentoo you can install with `portage`:\n```\nemerge net-misc/croc\n```\n\nOn Termux you can install with `pkg`:\n\n```\npkg install croc\n```\n\nOn FreeBSD you can install with `pkg`:\n\n```\npkg install croc\n```\n\nOr, you can [install Go](https://golang.org/dl/) and build from source (requires Go 1.17+): \n\n```\ngo install github.com/schollz/croc/v9@latest\n```\n\nOn Android there is a 3rd party F-Droid app [available to download](https://f-droid.org/en/packages/com.github.howeyc.crocgui/).\n\n\n## Usage \n\nTo send a file, simply do: \n\n```\n$ croc send [file(s)-or-folder]\nSending 'file-or-folder' (X MB)\nCode is: code-phrase\n```\n\nThen to receive the file (or folder) on another computer, you can just do \n\n```\ncroc code-phrase\n```\n\nThe code phrase is used to establish password-authenticated key agreement ([PAKE](https://en.wikipedia.org/wiki/Password-authenticated_key_agreement)) which generates a secret key for the sender and recipient to use for end-to-end encryption.\n\nThere are a number of configurable options (see `--help`). A set of options (like custom relay, ports, and code phrase) can be set using `--remember`.\n\n### Custom code phrase\n\nYou can send with your own code phrase (must be more than 6 characters).\n\n```\ncroc send --code [code-phrase] [file(s)-or-folder]\n```\n\n### Allow overwriting without prompt\n\nBy default, croc will prompt whether to overwrite a file. You can automatically overwrite files by using the `--overwrite` flag (recipient only). For example, receive a file to automatically overwrite:\n\n```\ncroc --yes --overwrite <code>\n```\n\n\n### Use pipes - stdin and stdout\n\nYou can pipe to `croc`:\n\n```\ncat [filename] | croc send\n```\n\nIn this case `croc` will automatically use the stdin data and send and assign a filename like \"croc-stdin-123456789\". To receive to `stdout` at you can always just use the `--yes`  will automatically approve the transfer and pipe it out to `stdout`. \n\n```\ncroc --yes [code-phrase] > out\n```\n\nAll of the other text printed to the console is going to `stderr` so it will not interfere with the message going to `stdout`.\n\n\n### Send text \n\nSometimes you want to send URLs or short text. In addition to piping, you can easily send text with `croc`:\n\n```\ncroc send --text \"hello world\"\n```\n\nThis will automatically tell the receiver to use `stdout` when they receive the text so it will be displayed.\n\n\n### Use a proxy\n\nYou can use a proxy as your connection to the relay by adding a proxy address with `--socks5`. For example, you can send via a tor relay:\n\n```\ncroc --socks5 \"127.0.0.1:9050\" send SOMEFILE\n```\n\n### Change encryption curve\n\nYou can choose from several different elliptic curves to use for encryption by using the `--curve` flag. Only the recipient can choose the curve. For example, receive a file using the P-521 curve:\n\n```\ncroc --curve p521 <codephrase>\n```\n\nAvailable curves are P-256, P-348, P-521 and SIEC. P-256 is the default curve.\n\n### Change hash algorithm\n\nYou can choose from several different hash algorithms. The default is the `xxhash` algorithm which is fast and thorough. If you want to optimize for speed you can use the `imohash` algorithm which is even faster, but since it samples files (versus reading the whole file) it can mistakenly determine that a file is the same on the two computers transferring - though this is only a problem if you are syncing files versus sending a new file to a computer.\n\n```\ncroc send --hash imohash SOMEFILE\n```\n\n### Self-host relay\n\nThe relay is needed to staple the parallel incoming and outgoing connections. By default, `croc` uses a public relay but you can also run your own relay:\n\n```\ncroc relay\n```\n\nBy default it uses TCP ports 9009-9013. Make sure to open those up. You can customized the ports (e.g. `croc relay --ports 1111,1112`), but you must have a minimum of **2** ports for the relay. The first port is for communication and the subsequent ports are used for the multiplexed data transfer.\n\nYou can send files using your relay by entering `--relay` to change the relay that you are using if you want to custom host your own.\n\n```\ncroc --relay \"myrelay.example.com:9009\" send [filename]\n```\n\nNote, when sending, you only need to include the first port (the communication port). The subsequent ports for data transfer will be transmitted back to the user from the relay.\n\n#### Self-host relay (docker)\n\nIf it's easier you can also run a relay with Docker:\n\n\n```\ndocker run -d -p 9009-9013:9009-9013 -e CROC_PASS='YOURPASSWORD' schollz/croc\n```\n\nBe sure to include the password for the relay otherwise any requests will be rejected. \n\n```\ncroc --pass YOURPASSWORD --relay \"myreal.example.com:9009\" send [filename]\n```\n\nNote: when including `--pass YOURPASSWORD` you can instead pass a file with the password, e.g. `--pass FILEWITHPASSWORD`.\n\n## License\n\nMIT\n\n## Acknowledgements\n\n`croc` has gone through many iterations, and I am awed by all the great contributions! If you feel like contributing, in any way, by all means you can send an Issue, a PR, or ask a question.\n\nThanks [@warner](https://github.com/warner) for the [idea](https://github.com/warner/magic-wormhole), [@tscholl2](https://github.com/tscholl2) for the [encryption gists](https://gist.github.com/tscholl2/dc7dc15dc132ea70a98e8542fefffa28), [@skorokithakis](https://github.com/skorokithakis) for [code on proxying two connections](https://www.stavros.io/posts/proxying-two-connections-go/). Finally thanks for making pull requests [@maximbaz](https://github.com/maximbaz), [@meyermarcel](https://github.com/meyermarcel), [@Girbons](https://github.com/Girbons), [@techtide](https://github.com/techtide), [@heymatthew](https://github.com/heymatthew), [@Lunsford94](https://github.com/Lunsford94), [@lummie](https://github.com/lummie), [@jesuiscamille](https://github.com/jesuiscamille), [@threefjord](https://github.com/threefjord), [@marcossegovia](https://github.com/marcossegovia), [@csleong98](https://github.com/csleong98), [@afotescu](https://github.com/afotescu), [@callmefever](https://github.com/callmefever), [@El-JojA](https://github.com/El-JojA), [@anatolyyyyyy](https://github.com/anatolyyyyyy), [@goggle](https://github.com/goggle), [@smileboywtu](https://github.com/smileboywtu), [@nicolashardy](https://github.com/nicolashardy), [@fbartels](https://github.com/fbartels), [@rkuprov](https://github.com/rkuprov), [@hreese](https://github.com/hreese), [@xenrox](https://github.com/xenrox) and [Ipar](https://github.com/lpar)!"
}
