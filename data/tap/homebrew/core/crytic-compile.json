{
  "name": "crytic-compile",
  "full_name": "crytic-compile",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Abstraction layer for smart contract build systems",
  "license": "AGPL-3.0-only",
  "homepage": "https://github.com/crytic/crytic-compile",
  "versions": {
    "stable": "0.3.3",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://files.pythonhosted.org/packages/9f/45/dd3278e1f16bd9ff110b9ecb061ce073b51143ca2bfa891cad71aa567da9/crytic-compile-0.3.3.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "b0461ecff11e4be40013e4267a8e20221ebe25c3226e446e60e7c103baf7efaf"
    },
    "head": {
      "url": "https://github.com/crytic/crytic-compile.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/crytic-compile/blobs/sha256:7c6784c1a513e80306e6d6b99a0960096374d405798e8e51391dca6007e66dbc",
          "sha256": "7c6784c1a513e80306e6d6b99a0960096374d405798e8e51391dca6007e66dbc"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/crytic-compile/blobs/sha256:5c67b4dc656180d88100f1a76d3a0e9c297e26836238dc3d859881614d486a83",
          "sha256": "5c67b4dc656180d88100f1a76d3a0e9c297e26836238dc3d859881614d486a83"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/crytic-compile/blobs/sha256:dfc0c055bc820f28bec0c0b7b2b65283a7d4cbbcd25d74bccc82611ff009e274",
          "sha256": "dfc0c055bc820f28bec0c0b7b2b65283a7d4cbbcd25d74bccc82611ff009e274"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/crytic-compile/blobs/sha256:e1dce635a2a4c2a94ccd4d626d4616e109f00266a5d7dffa65df5c785e6cbe4c",
          "sha256": "e1dce635a2a4c2a94ccd4d626d4616e109f00266a5d7dffa65df5c785e6cbe4c"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/crytic-compile/blobs/sha256:230f955f0adff4c5b9fe37b3160e711458ff7cf9e799102ccca920f19847fd24",
          "sha256": "230f955f0adff4c5b9fe37b3160e711458ff7cf9e799102ccca920f19847fd24"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/crytic-compile/blobs/sha256:111efc29cb98c7249bc831d76d820e28f31f19abd3eadaea2b4fb2f5888040cc",
          "sha256": "111efc29cb98c7249bc831d76d820e28f31f19abd3eadaea2b4fb2f5888040cc"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/crytic-compile/blobs/sha256:954e444b3d6568508e602f892a3803805f5a689e7b7d8c2ef42628750d767cbe",
          "sha256": "954e444b3d6568508e602f892a3803805f5a689e7b7d8c2ef42628750d767cbe"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "python@3.11",
    "solc-select"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/crytic-compile.rb",
  "ruby_source_checksum": {
    "sha256": "b2dc21cc3453464557a1c484d6e30e6394efbd67fd6270c3c7f7eab2f8ed7b20"
  },
  "date_added": "2022-08-14T03:43:14+00:00",
  "readme": "# Crytic-compile\n[![Build Status](https://img.shields.io/github/actions/workflow/status/crytic/crytic-compile/ci.yml?branch=master)](https://github.com/crytic/crytic-compile/actions?query=workflow%3ACI)\n[![Slack Status](https://slack.empirehacking.nyc/badge.svg)](https://slack.empirehacking.nyc)\n[![PyPI version](https://badge.fury.io/py/crytic-compile.svg)](https://badge.fury.io/py/crytic-compile)\n\nLibrary to help smart contract compilation. It includes support for:\n- Direct solc compilation\n- [Foundry](https://github.com/foundry-rs/foundry/)\n- [Hardhat](https://github.com/nomiclabs/hardhat)\n- [Brownie](https://github.com/iamdefinitelyahuman/brownie)\n- [Buidler](https://github.com/nomiclabs/buidler)\n- [Dapp](https://dapp.tools/dapp/)\n- [Embark](https://embark.status.im/)\n- [Etherlime](https://github.com/LimeChain/etherlime)\n- [Etherscan](https://etherscan.io/) (including several alt-chain explorers and testnets)\n- [Truffle](https://truffleframework.com/)\n- [Waffle](https://github.com/EthWorks/Waffle)\n\nTo force compilation with a specific framework, use the `--compile-force-framework` flag. For example, to force compilation with Hardhat:\n\n```shell\ncrytic-compile . --compile-force-framework hardhat\n```\n\nSee the [Configuration](https://github.com/crytic/crytic-compile/wiki/Configuration) documentation for advanced usages.\n\nThe plugin is used in Trail of Bits tools, including:\n- [Slither](https://github.com/crytic/slither)\n- [Echidna](https://github.com/crytic/echidna)\n- [Manticore](https://github.com/trailofbits/manticore/)\n- [evm-cfg-builder](https://github.com/crytic/evm_cfg_builder)\n\n\n## Installation\n\n```shell\npip3 install crytic-compile\n```\n\n## Usage\n\nIn the root directory of your project e.g. same directory as `hardhat.config.js` or `foundry.toml`, run:\n\n```shell\ncrytic-compile .\n```\n\nCrytic-compile will generate `crytic-export/contracts.json` containing the AST/ABI and bytecodes of the contracts.\n\nRun `crytic-compile --help` for more options.\n\n## Library Linking\n\nIf your project uses [libraries](https://docs.soliditylang.org/en/latest/contracts.html#libraries) with external functions, they can be linked to their deployed address with the `--compile-libraries` flag. For example, if you have a library `SafeMath` deployed at `0xff`, you can link it with:\n\n\n```shell\ncrytic-compile . --compile-libraries \"(SafeMath, 0xff)\"\n```\n\nIf you are fuzzing with Echidna or Medusa, follow this [tutorial on linking libraries](https://secure-contracts.com/program-analysis/echidna/advanced/working-with-libraries.html?highlight=library#linking-libraries).\n\n### As a library\n\nSee the [library documentation](https://github.com/crytic/crytic-compile/wiki/Library-Documentation)."
}
