{
  "name": "pacvim",
  "full_name": "pacvim",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Learn vim commands via a game",
  "license": "LGPL-3.0-or-later",
  "homepage": "https://github.com/jmoon018/PacVim",
  "versions": {
    "stable": "1.1.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/jmoon018/PacVim/archive/v1.1.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "c869c5450fbafdfe8ba8a8a9bba3718775926f276f0552052dcfa090d21acb28"
    },
    "head": {
      "url": "https://github.com/jmoon018/PacVim.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pacvim/blobs/sha256:49f67bf7c8bd084178d6574b3871ba35f9f2b960382af02317c28ecf203a9210",
          "sha256": "49f67bf7c8bd084178d6574b3871ba35f9f2b960382af02317c28ecf203a9210"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pacvim/blobs/sha256:802d9f2831e1cc5fc3e4eede8440f63596b642aead5ceffabbc612495555261f",
          "sha256": "802d9f2831e1cc5fc3e4eede8440f63596b642aead5ceffabbc612495555261f"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pacvim/blobs/sha256:b690b089d153174f596700e750e133228e05949b3c4d01c993d93b862b102dc0",
          "sha256": "b690b089d153174f596700e750e133228e05949b3c4d01c993d93b862b102dc0"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pacvim/blobs/sha256:42dfa466a32d36eee64a2e949b7a8aa2d5b6316b7cb4e369511e0763d21f8934",
          "sha256": "42dfa466a32d36eee64a2e949b7a8aa2d5b6316b7cb4e369511e0763d21f8934"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pacvim/blobs/sha256:a9a92c82a3202ee0d64140220bcbe511ec5a0a462b1bf75b84bba05b26214844",
          "sha256": "a9a92c82a3202ee0d64140220bcbe511ec5a0a462b1bf75b84bba05b26214844"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pacvim/blobs/sha256:52a18b2f8a5a6e9ab6f2c31c08432c44c3f00183e18c80154a5c6f8daa069160",
          "sha256": "52a18b2f8a5a6e9ab6f2c31c08432c44c3f00183e18c80154a5c6f8daa069160"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pacvim/blobs/sha256:85bd0087ecc54716772881e46ce00553ee037eb2ea200d34d5db28709092369f",
          "sha256": "85bd0087ecc54716772881e46ce00553ee037eb2ea200d34d5db28709092369f"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pacvim/blobs/sha256:e2ecd6cc1337adb4c9e760c50a83ae04a8cb86495d3c1ea167bfa5930d7a16a0",
          "sha256": "e2ecd6cc1337adb4c9e760c50a83ae04a8cb86495d3c1ea167bfa5930d7a16a0"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pacvim/blobs/sha256:b8ef8cdba34802db97fba770e013393973e908e11486b87a4f5189f139e468dc",
          "sha256": "b8ef8cdba34802db97fba770e013393973e908e11486b87a4f5189f139e468dc"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pacvim/blobs/sha256:3abc4ac74d298cd3feb45f1a48f7b5f34d099805ae541f1c4bd57ff8e7a485a8",
          "sha256": "3abc4ac74d298cd3feb45f1a48f7b5f34d099805ae541f1c4bd57ff8e7a485a8"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "ncurses"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/pacvim.rb",
  "ruby_source_checksum": {
    "sha256": "61c1516ca95b2319578baf240d309e1e73f4bf89802d6207de4e992f37bdd957"
  },
  "date_added": "2015-01-27T10:33:20+00:00",
  "readme": "# PacVim\n\nPacVim is a game that teaches you vim commands.\nYou must move pacman (the green cursor) to highlight each word on the gameboard while avoiding the ghosts (in red).\n\n![my image](https://raw.githubusercontent.com/jmoon018/PacVim/master/gifs/all.gif)\n# Building and running\n\nVim is a great tool to write and edit code, but many \npeople, including me, struggled with the steep learning curve. \nI did not find a fun, free way to learn about the vim commands\nin-depth, and thus, PacVim was born. Inspired by the classic,\nPacMan, <b>PacVim</b> is a game that'll give anyone plenty of\npractice with the vim commands while being a ton of fun to play.\n\nDownload and build the game with:\n\n## Mac OS X\n`brew install pacvim`\n\n## Linux (and Mac OS X alternative)\n\n1. Download and install Curses (graphics library) <br>\n\t-> For Ubuntu (in terminal): `sudo apt-get install libncurses5-dev` <br>\n\t\n\t-> OR [This tutorial](http://geeksww.com/tutorials/operating_systems/linux/tools/how_to_download_compile_and_install_gnu_ncurses_on_debianubuntu_linux.php) may help (have not confirmed)\n\t\n\t-> OR build from source: [Curses source files](http://ftp.gnu.org/pub/gnu/ncurses/)\n\n\t-> Mac OS X should come with Curses installed, so skip this step. \n\t\n<!--\t-> For Mac OS X: Install Homebrew (brew.sh), then use `brew install ncurses && brew link ncurses --force`. If you get errors, type `brew tap homebrew/dupes` and try again.-->\n\n\n```\n2. git clone https://github.com/jmoon018/PacVim.git\n3. cd PacVim\n4. [sudo] make install\n```\n\n## Using Docker\n\nIf you have docker installed already, you can just:\n\n```sh\ndocker run -it freedomben/pacvim [LEVEL_NUMBER] [MODE]\n```\n\n### Building the docker image from source\n\nFrom the project root, build the image:\n\n```sh\ndocker build -t freedomben/pacvim .\n```\n\nPush to docker hub:\n\n```sh\ndocker push freedomben/pacvim\n```\n\nTo play, run (from anywhere):\n```\n$ pacvim [LEVEL_NUMBER] [MODE]\n```\nYou may specify the starting level and mode (`n` and `h` for normal/hard). Default mode is hard:\n```\n$ pacvim 8 n\n```\n\nTo Uninstall, navigate to the folder where you cloned this repo, and type `make uninstall` <br>\nNote: this game may not install/compile properly without gcc version 4.8.X or higher\n\n# How To Play\n\nThe objective of PacVim is very similar to PacMan.\nYou must run over all the characters on the screen while avoiding the ghosts (red `G`).\nPacVim has two special obstacles:\n\n1. You cannot move into the walls (yellow color).  You must use vim motions to jump over them.\n\n2. If you step on a tilde character (cyan `~`), you lose!\n\nYou are given three lives. You gain a life each time you beat\nlevel 0, 3, 6, 9, etc. There are 10 levels, 0 through 9. After\nbeating the 9th level, the game is reset to the 0th level, but\nthe ghosts move faster.\n\n<b>Winning conditions:</b> Use vim commands to move the cursor\nover the letters and highlight them. After all letters are\nhighlighted, you win and proceed to the next level.\n\n<b>Losing conditions:</b> If you touch a ghost (indicated\nby a red `G`) or a tilde character, you lose a life. If you\nhave less than 0 lives, you lose the entire game.\n\n<h4>List of Implemented Commands</h4>\n\n| key | what it does |\n| --- | --- |\n| q   | quit the game |\n| h   | move left |\n| j   | move down |\n| k   | move up |\n| l   | move right |\n| w   | move forward to next word beginning |\n| W   | move forward to next WORD beginning |\n| e   | move forward to next word ending |\n| E   | move forward to next WORD ending |\n| b   | move backward to next word beginning |\n| B   | move backward to next WORD beginning |\n| $   | move to the end of the line |\n| 0   | move to the beginning of the line |\n| gg/1G | move to the beginning of the first line |\n| *number*G | move to the beginning of the line given by *number* |\n| G   | move to the beginning of the last line |\n| ^   | move to the first word at the current line |\n| &   | 1337 cheatz (beat current level)\n\n\n# Create Your Own Map! \n\nThe maps for <b>PacVim</b> are loaded from text files from\nthe <i>/usr/local/share/pacvim-maps</i> folder. After installing, you may, instead, use the *maps* folder (where you installed\nthe game) by calling `make MAPDIR=maps`.\n\nThe name of each text file must be\nin a format such as: `map#.txt`, where `#` represents a number like\n0, 1, 9, 14, etc. The numbers must be consecutive (can't have map0.txt,\nmap1.txt, and then map3.txt). <b>MAKE SURE YOU CHANGE THE NUM_OF_LEVELS \nIN GLOBALS.CPP OR ELSE YOUR NEW MAPS WON'T LOAD</b>. It should be equal\nto the highest map number.\n\nIn the map text file, the walls are denoted by ampersands `#`, and the\ntildes come just from the tilde key. Maps must be bounded and closed,\nso the player is trapped within 4 walls. Make sure walls block the top\nand left of the terminal (or else the player goes offscreen). Any\nshape, height, and width, within these constraints, should work\n\n<b>Creating Ghosts and Players</b><br>\nAt the bottom of each map text file, parameters about the Ghost(s)\nand Players are specified\n\n<b>Ghost:</b><br>\n`/# X Y` ... EG: `/0.5 1 1`<br>\nThe forward slash denotes that this information describes a Ghost (instead of player).<br>\nThe # denotes the time, in seconds, it takes for the Ghost to move. (#=0.5 means 2 moves/sec)<br>\nX and Y denote the starting x- and y-position of the Ghost<br>\n\n<b>Player:</b> <br>\n`pX Y` ... EG: `p15 7`\nThe 'p' denotes that this information describes a Player (instead of Ghost).<br>\nThe X and Y denote the starting x- and y-position of the Player. <br>\n<b>This is optional</b>, the player spawns in the middle of the map otherwise<br>\n<b>This should be the last line of the file</b><br>\n \n<h2>Code Overview</h2>\n\n<h4>avatar.cpp</h4>\nContains the <b>`avatar`</b> class, which contains information about\nthe player, such as his/her x position, y position, etc. It\nalso contains methods that allow the player to move and correspond\nto the keystrokes. For example, the <b>`avatar`</b> class contains the method\ncalled <b>`parseWordForward(bool)`</b> which implements the functionality\nfor the \"w\" (or \"W\" if true) vim command.\n\n<h4>ghost1.cpp</h4>\nContains the <b>Ghost1</b> class, derived from the <b>`avatar`</b> class. It is\njust like the avatar class, but it requires an extra paremeter\nupon initialization, called `sleepTime`, a double value that\ndetermines how quickly a ghost moves. It refers to the time, in\nseconds, the ghost must wait to move. A `sleepTime` of 0.5 means\nthe ghost moves 2 times a second. `sleepTime` = 0.33 is 3 moves per second, etc.\n<br>\nThe `Ghost1` class also contains a method called <b>`spawnGhost`</b> which\ncreates the ghost at the location based on its initialization parameters.\nThe ghost will appear when `READY` (global bool) is true (this means the player\nis ready), and it will call <b>`ghost.think()`</b> one second afterwards.\n<br>\n`think` is a recursive method that simply moves the ghost. It uses \na basic greedy algorithm based on the distance of the ghost's potential\nmoves (up, down, right, left) and the player.\n<br>\n\nEach ghost contains its own thread. A global mutex, called `mtx`, is\nused (in `think`) to ensure that resources are shared properly.\n\n`helperFns.cpp`\nContains methods that allow easy changes of the screen. A few of them:\n\n* `chtype charAt(int x, int y)` returns the chtype at the (x,y) location\n* `bool writeAt(int x, int y, chtype letter)` writes the 'letter' at location (x,y). Returns false if location is invalid.\n* `void printAtBottom(string msg)`  writes a message one line below the last line\n\n<h4>game.cpp</h4>\nThis contains the <i>main()</i> method among many other important ones\n\n<b>main</b> - contains a loop that breaks when `LIVES` < 0. In the loop,\nthe proper map name is determined and loaded. Data is reset (such as as the pointers,\nthe ghost AI, etc). The level is incremented.\n<br>\n<b>init(const char*)</b> - called by <b>`main`</b>. Calls <b>`drawScreen(str map)`</b>, creates and\nspawns player and ghosts threads. Then calls <b>`playGame`</b>. After <b>`playGame`</b>\nends, all the ghost threads are deleted, and then we go back to the <b>`main`</b> method.\n<br>\n<b>drawScreen(char* map)</b> - called by <b>`init`</b>. Reads from text file given\nby parameter. Loads everything onto the screen with the proper color and gets\ninformation from the ghost and player so that they spawn in the proper place in <b>`init`</b>.\n<br>\n<b>playGame(time_t, avatar player)</b> - called by <b>`init`</b>. This contains two loops,\none that consumes everything in the input buffer (which is then deleted), the second\nloop allows the player to continuously input keystrokes. When a keystroke is input,\n<b>`onKeystroke`</b> is called\n<br>\n\n\n<h2><a name=\"ToDoBugsTag\">To-dos / Bugs</a></h2>\n<ul>\n\t<li>More testing on `#G` and `G` commands</li>\n\t<li>G can go out of bounds on Map 8 with the boxes. #G (between boxes)</li>\n\t<li>G won't move to proper line, it can hit the last wall rather than the last word (map2)</li>\n\t<li>Refactor code, more comments</li>\n</ul>\n\n\n<h2>LICENSE</h2>\nPacVim is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License (LGPL) as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nPacVim is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>."
}
