{
  "name": "sysbench",
  "full_name": "sysbench",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "System performance benchmark tool",
  "license": "GPL-2.0-or-later",
  "homepage": "https://github.com/akopytov/sysbench",
  "versions": {
    "stable": "1.0.20",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/akopytov/sysbench/archive/1.0.20.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "e8ee79b1f399b2d167e6a90de52ccc90e52408f7ade1b9b7135727efe181347f"
    },
    "head": {
      "url": "https://github.com/akopytov/sysbench.git",
      "branch": "master"
    }
  },
  "revision": 4,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/sysbench/blobs/sha256:bd6313f906b867b19f8a7465b4f7a80169d2e4a7916d69f2da864437979e8966",
          "sha256": "bd6313f906b867b19f8a7465b4f7a80169d2e4a7916d69f2da864437979e8966"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/sysbench/blobs/sha256:817b352a292da3477b1756d821fad347e282eda93fa61a503251ec20cadb6599",
          "sha256": "817b352a292da3477b1756d821fad347e282eda93fa61a503251ec20cadb6599"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/sysbench/blobs/sha256:3ed34ddca46da962077b1f690f802c852601f9af61aa265d2d31c5b44be24e14",
          "sha256": "3ed34ddca46da962077b1f690f802c852601f9af61aa265d2d31c5b44be24e14"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/sysbench/blobs/sha256:9f310c5ee955ff09898977b4851a94c80d832e248450a6e664817003475de65e",
          "sha256": "9f310c5ee955ff09898977b4851a94c80d832e248450a6e664817003475de65e"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/sysbench/blobs/sha256:5170b0cd36d6aa793244b06a2023eb4e6d8d62b5e56bc4b05d115ca28e7113f0",
          "sha256": "5170b0cd36d6aa793244b06a2023eb4e6d8d62b5e56bc4b05d115ca28e7113f0"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/sysbench/blobs/sha256:e873a2ca248c5c6dceb59860f928b2b6f3e1fb831a5b0d20fb2484f5f1a1afd7",
          "sha256": "e873a2ca248c5c6dceb59860f928b2b6f3e1fb831a5b0d20fb2484f5f1a1afd7"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sysbench/blobs/sha256:bd8b79dcaf01792bc8f831adfabd4f98ea4409e0bbdc036b23ea3d8c008c05df",
          "sha256": "bd8b79dcaf01792bc8f831adfabd4f98ea4409e0bbdc036b23ea3d8c008c05df"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "autoconf",
    "automake",
    "libtool",
    "pkg-config"
  ],
  "dependencies": [
    "libpq",
    "luajit",
    "mysql-client",
    "openssl@3"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "vim"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/sysbench.rb",
  "ruby_source_checksum": {
    "sha256": "64b31f907a85eb19665329fe453913d7869727e98a9bbeea83ff9acc6c291d24"
  },
  "date_added": "2013-10-04T08:07:59-07:00",
  "readme": "[![Latest Release][release-badge]][release-url]\n[![Build Status][action-badge]][action-url]\n[![Debian Packages][deb-badge]][deb-url]\n[![RPM Packages][rpm-badge]][rpm-url]\n[![Coverage Status][coveralls-badge]][coveralls-url]\n[![License][license-badge]][license-url]\n\n<!-- markdown-toc start - Don't edit this section. Run M-x markdown-toc-generate-toc again -->\n**Table of Contents**\n\n- [sysbench](#sysbench)\n    - [Features](#features)\n- [Installing from Binary Packages](#installing-from-binary-packages)\n    - [Linux](#linux)\n    - [macOS](#macos)\n    - [Windows](#windows)\n- [Building and Installing From Source](#building-and-installing-from-source)\n    - [Build Requirements](#build-requirements)\n        - [Windows](#windows)\n        - [Debian/Ubuntu](#debianubuntu)\n        - [RHEL/CentOS](#rhelcentos)\n        - [Fedora](#fedora)\n        - [macOS](#macos)\n    - [Build and Install](#build-and-install)\n- [Usage](#usage)\n    - [General Syntax](#general-syntax)\n    - [General Command Line Options](#general-command-line-options)\n    - [Random Numbers Options](#random-numbers-options)\n- [Versioning](#versioning)\n\n<!-- markdown-toc end -->\n\n# sysbench\n\nsysbench is a scriptable multi-threaded benchmark tool based on\nLuaJIT. It is most frequently used for database benchmarks, but can also\nbe used to create arbitrarily complex workloads that do not involve a\ndatabase server.\n\nsysbench comes with the following bundled benchmarks:\n\n- `oltp_*.lua`: a collection of OLTP-like database benchmarks\n- `fileio`: a filesystem-level benchmark\n- `cpu`: a simple CPU benchmark\n- `memory`: a memory access benchmark\n- `threads`: a thread-based scheduler benchmark\n- `mutex`: a POSIX mutex benchmark\n\n## Features\n\n- extensive statistics about rate and latency is available, including\n  latency percentiles and histograms;\n- low overhead even with thousands of concurrent threads. sysbench is\n  capable of generating and tracking hundreds of millions of events per\n  second;\n- new benchmarks can be easily created by implementing pre-defined hooks\n  in user-provided Lua scripts;\n- can be used as a general-purpose Lua interpreter as well, simply\n  replace `#!/usr/bin/lua` with `#!/usr/bin/sysbench` in your script.\n\n# Installing from Binary Packages\n\n## Linux\n\nThe easiest way to download and install sysbench on Linux is using\nbinary package repositories hosted by\n[packagecloud](https://packagecloud.io). The repositories are\nautomatically updated on each sysbench release. Currently x86_64, i386\nand aarch64 binaries are available.\n\nMultiple methods to download and install sysbench packages are available and\ndescribed at <https://packagecloud.io/akopytov/sysbench/install>.\n\nQuick install instructions:\n\n- Debian/Ubuntu\n  ``` shell\n  curl -s https://packagecloud.io/install/repositories/akopytov/sysbench/script.deb.sh | sudo bash\n  sudo apt -y install sysbench\n  ```\n\n- RHEL/CentOS:\n  ``` shell\n  curl -s https://packagecloud.io/install/repositories/akopytov/sysbench/script.rpm.sh | sudo bash\n  sudo yum -y install sysbench\n  ```\n\n- Fedora:\n  ``` shell\n  curl -s https://packagecloud.io/install/repositories/akopytov/sysbench/script.rpm.sh | sudo bash\t\n  sudo dnf -y install sysbench\n  ```\n\n- Arch Linux:\n  ``` shell\n  sudo pacman -Suy sysbench\n  ```\n\n## macOS\n\nOn macOS, up-to-date sysbench packages are available from Homebrew:\n```shell\n# Add --with-postgresql if you need PostgreSQL support\nbrew install sysbench\n```\n\n## Windows\nAs of sysbench 1.0 support for native Windows builds was dropped. It may\nbe re-introduced in later releases. Currently, the recommended way to\nobtain sysbench on Windows is\nusing\n[Windows Subsystem for Linux available in Windows 10](https://msdn.microsoft.com/en-us/commandline/wsl/about).\n\nAfter installing WSL and getting into he bash prompt on Windows\nfollowing Debian/Ubuntu installation instructions is\nsufficient. Alternatively, one can use WSL to build and install sysbench\nfrom source, or use an older sysbench release to build a native binary.\n\n# Building and Installing From Source\n\nIt is recommended to install sysbench from the official binary\npackages as described in\n[Installing from Binary Packages](#installing-from-binary-packages). Below\nare instruction for cases when you want to use sysbench on an\narchitecture for which no binary packages are available.\n\n## Build Requirements\n\n### Windows\nAs of sysbench 1.0 support for native Windows builds was\ndropped. It may be re-introduced in later versions. Currently, the\nrecommended way to build sysbench on Windows is using\n[Windows Subsystem for Linux available in Windows 10](https://msdn.microsoft.com/en-us/commandline/wsl/about).\n\nAfter installing WSL and getting into bash prompt on Windows, following\nDebian/Ubuntu build instructions is sufficient. Alternatively, one can\nbuild and use an older 0.5 release on Windows.\n\n### Debian/Ubuntu\n``` shell\n    apt -y install make automake libtool pkg-config libaio-dev\n    # For MySQL support\n    apt -y install libmysqlclient-dev libssl-dev\n    # For PostgreSQL support\n    apt -y install libpq-dev\n```\n\n### RHEL/CentOS\n``` shell\n    yum -y install make automake libtool pkgconfig libaio-devel\n    # For MySQL support, replace with mysql-devel on RHEL/CentOS 5\n    yum -y install mariadb-devel openssl-devel\n    # For PostgreSQL support\n    yum -y install postgresql-devel\n```\n\n### Fedora\n``` shell\n    dnf -y install make automake libtool pkgconfig libaio-devel\n    # For MySQL support\n    dnf -y install mariadb-devel openssl-devel\n    # For PostgreSQL support\n    dnf -y install postgresql-devel\n```\n\n### macOS\n\nAssuming you have Xcode (or Xcode Command Line Tools) and Homebrew installed:\n``` shell\n    brew install automake libtool openssl pkg-config\n    # For MySQL support\n    brew install mysql\n    # For PostgreSQL support\n    brew install postgresql\n    # openssl is not linked by Homebrew, this is to avoid \"ld: library not found for -lssl\"\n    export LDFLAGS=-L/usr/local/opt/openssl/lib \n```\n\n## Build and Install\n``` shell\n    ./autogen.sh\n    # Add --with-pgsql to build with PostgreSQL support\n    ./configure\n    make -j\n    make install\n```\n\nThe above will build sysbench with MySQL support by default. If you have\nMySQL headers and libraries in non-standard locations (and no\n`mysql_config` can be found in the `PATH`), you can specify them\nexplicitly with `--with-mysql-includes` and `--with-mysql-libs` options\nto `./configure`.\n\nTo compile sysbench without MySQL support, use `--without-mysql`. If no\ndatabase drivers are available database-related scripts will not work,\nbut other benchmarks will be functional.\n\n# Usage\n\n## General Syntax\n\nThe general command line syntax for sysbench is:\n\n\t\t  sysbench [options]... [testname] [command] \n\n- *testname* is an optional name of a built-in test (e.g. `fileio`,\n  `memory`, `cpu`, etc.), or a name of one of the bundled Lua scripts\n  (e.g. `oltp_read_only`), or a *path* to a custom Lua script. If no\n  test name is specified on the command line (and thus, there is no\n  *command* too, as in that case it would be parsed as a *testname*), or\n  the test name is a dash (\"`-`\"), then sysbench expects a Lua script to\n  execute on its standard input.\n\n- *command* is an optional argument that will be passed by sysbench to\n  the built-in test or script specified with *testname*. *command*\n  defines the *action* that must be performed by the test. The list of\n  available commands depends on a particular test. Some tests also\n  implement their own custom commands.\n\n  Below is a description of typical test commands and their purpose:\n\n\t+ `prepare`: performs preparative actions for those tests which need\n\tthem, e.g. creating the necessary files on disk for the `fileio`\n\ttest, or filling the test database for database benchmarks.\n\t+ `run`: runs the actual test specified with the *testname*\n    argument. This command is provided by all tests.\n\t+ `cleanup`: removes temporary data after the test run in those\n    tests which create one.\n\t+ `help`: displays usage information for the test specified with the\n\t*testname* argument. This includes the full list of commands\n\tprovided by the test, so it should be used to get the available\n\tcommands.\n\n- *options* is a list of zero or more command line options starting with\n\t`'--'`. As with commands, the `sysbench testname help` command\n\tshould be used to describe available options provided by a\n\tparticular test.\n\n\tSee [General command line options](README.md#general-command-line-options)\n\tfor a description of general options provided by sysbench itself.\n\n\nYou can use `sysbench --help` to display the general command line syntax\nand options.\n\n## General Command Line Options\n\nThe table below lists the supported common options, their descriptions and default values:\n\n*Option*              | *Description* | *Default value*\n----------------------|---------------|----------------\n| `--threads`           | The total number of worker threads to create                                                                                                                                                                                                                                                                                                                                                                                                                            | 1               |\n| `--events`            | Limit for total number of requests. 0 (the default) means no limit                                                                                                                                                                                                                                                                                                                                                                                                      | 0               |\n| `--time`              | Limit for total execution time in seconds. 0 means no limit                                                                                                                                                                                                                                                                                                                                                                                                             | 10              |\n| `--warmup-time`       | Execute events for this many seconds with statistics disabled before the actual benchmark run with statistics enabled. This is useful when you want to exclude the initial period of a benchmark run from statistics. In many benchmarks, the initial period is not representative because CPU/database/page and other caches need some time to warm up                                                                                                                                                                                                                                                                                                  | 0               |\n| `--rate`              | Average transactions rate. The number specifies how many events (transactions) per seconds should be executed by all threads on average. 0 (default) means unlimited rate, i.e. events are executed as fast as possible                                                                                                                                                                                                                                                                 | 0               |\n| `--thread-init-timeout` | Wait time in seconds for worker threads to initialize                                                                                                                                                                                                                                                                                                                                                                                                                  | 30              |\n| `--thread-stack-size` | Size of stack for each thread                                                                                                                                                                                                                                                                                                                                                                                                                                           | 32K             |\n| `--report-interval`   | Periodically report intermediate statistics with a specified interval in seconds. Note that statistics produced by this option is per-interval rather than cumulative. 0 disables intermediate reports                                                                                                                                                                                                                                                                  | 0               |\n| `--debug`             | Print more debug info                                                                                                                                                                                                                                                                                                                                                                                                                                                   | off             |\n| `--validate`          | Perform validation of test results where possible                                                                                                                                                                                                                                                                                                                                                                                                                       | off             |\n| `--help`              | Print help on general syntax or on a specified test, and exit                                                                                                                                                                                                                                                                                                                                                                                                           | off             |\n| `--verbosity`         | Verbosity level (0 - only critical messages, 5 - debug)                                                                                                                                                                                                                                                                                                                                                                                                                 | 4               |\n| `--percentile`        | sysbench measures execution times for all processed requests to display statistical information like minimal, average and maximum execution time. For most benchmarks it is also useful to know a request execution time value matching some percentile (e.g. 95% percentile means we should drop 5% of the most long requests and choose the maximal value from the remaining ones). This option allows to specify a percentile rank of query execution times to count | 95              |\n| `--luajit-cmd`        | perform a LuaJIT control command. This option is equivalent to `luajit -j`. See [LuaJIT documentation](http://luajit.org/running.html#opt_j) for more information                                                                                                                                                                                                                                                                                                       |               |\n\nNote that numerical values for all *size* options (like `--thread-stack-size` in this table) may be specified by appending the corresponding multiplicative suffix (K for kilobytes, M for megabytes, G for gigabytes and T for terabytes).\n\n## Random Numbers Options\n\nsysbench provides a number of algorithms to generate random numbers that are distributed according to a given probability distribution. The table below lists options that can be used to control those algorithms.\n\n*Option*              | *Description* | *Default value*\n----------------------|---------------|----------------\n`--rand-type` | random numbers distribution {uniform, gaussian, special, pareto, zipfian} to use by default. Benchmark scripts may choose to use either the default distribution, or specify it explictly, i.e. override the default. | special\n`--rand-seed` | seed for random number generator. When 0, the current time is used as an RNG seed. | 0\n`--rand-spec-iter` | number of iterations for the special distribution | 12\n`--rand-spec-pct` | percentage of the entire range where 'special' values will fall in the special distribution | 1\n`--rand-spec-res` | percentage of 'special' values to use for the special distribution | 75\n`--rand-pareto-h` | shape parameter for the Pareto distribution | 0.2\n`--rand-zipfian-exp` | shape parameter (theta) for the Zipfian distribution | 0.8\n\n# Versioning\n\nFor transparency and insight into its release cycle, and for striving to maintain backward compatibility, sysbench will be maintained under the Semantic Versioning guidelines as much as possible.\n\nReleases will be numbered with the following format:\n\n`<major>.<minor>.<patch>`\n\nAnd constructed with the following guidelines:\n\n* Breaking backward compatibility bumps the major (and resets the minor and patch)\n* New additions without breaking backward compatibility bumps the minor (and resets the patch)\n* Bug fixes and misc changes bumps the patch\n\nFor more information on SemVer, please visit [http://semver.org/](http://semver.org/).\n\n[coveralls-badge]: https://coveralls.io/repos/github/akopytov/sysbench/badge.svg?branch=master\n[coveralls-url]: https://coveralls.io/github/akopytov/sysbench?branch=master\n[action-url]: https://github.com/akopytov/sysbench/actions/workflows/ci.yml\n[action-badge]: https://github.com/akopytov/sysbench/actions/workflows/ci.yml/badge.svg\n[license-badge]: https://img.shields.io/badge/license-GPLv2-blue.svg\n[license-url]: COPYING\n[release-badge]: https://img.shields.io/github/release/akopytov/sysbench.svg\n[release-url]: https://github.com/akopytov/sysbench/releases/latest\n[deb-badge]: https://img.shields.io/badge/Packages-Debian-red.svg?style=flat\n[deb-url]: https://packagecloud.io/akopytov/sysbench?filter=debs\n[rpm-badge]: https://img.shields.io/badge/Packages-RPM-blue.svg?style=flat\n[rpm-url]: https://packagecloud.io/akopytov/sysbench?filter=rpms"
}
