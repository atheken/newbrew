{
  "name": "easeprobe",
  "full_name": "easeprobe",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Simple, standalone, and lightWeight tool that can do health/status checking",
  "license": "Apache-2.0",
  "homepage": "https://github.com/megaease/easeprobe",
  "versions": {
    "stable": "2.1.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/megaease/easeprobe.git",
      "tag": "v2.1.0",
      "revision": "c4e27709607bd8dc4945df273ef274a8ecd569d2",
      "checksum": null
    },
    "head": {
      "url": "https://github.com/megaease/easeprobe.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/easeprobe/blobs/sha256:9bb97f44af5c03a97995ce7e514ea161749463a5e52d11bad2d3a6eab7e592e9",
          "sha256": "9bb97f44af5c03a97995ce7e514ea161749463a5e52d11bad2d3a6eab7e592e9"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/easeprobe/blobs/sha256:9bb97f44af5c03a97995ce7e514ea161749463a5e52d11bad2d3a6eab7e592e9",
          "sha256": "9bb97f44af5c03a97995ce7e514ea161749463a5e52d11bad2d3a6eab7e592e9"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/easeprobe/blobs/sha256:9bb97f44af5c03a97995ce7e514ea161749463a5e52d11bad2d3a6eab7e592e9",
          "sha256": "9bb97f44af5c03a97995ce7e514ea161749463a5e52d11bad2d3a6eab7e592e9"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/easeprobe/blobs/sha256:da22e6db84a51adf9150d7d73a33d8d1dfba2f8a6e5ed034766f0d464b5a29e1",
          "sha256": "da22e6db84a51adf9150d7d73a33d8d1dfba2f8a6e5ed034766f0d464b5a29e1"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/easeprobe/blobs/sha256:da22e6db84a51adf9150d7d73a33d8d1dfba2f8a6e5ed034766f0d464b5a29e1",
          "sha256": "da22e6db84a51adf9150d7d73a33d8d1dfba2f8a6e5ed034766f0d464b5a29e1"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/easeprobe/blobs/sha256:da22e6db84a51adf9150d7d73a33d8d1dfba2f8a6e5ed034766f0d464b5a29e1",
          "sha256": "da22e6db84a51adf9150d7d73a33d8d1dfba2f8a6e5ed034766f0d464b5a29e1"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/easeprobe/blobs/sha256:6520fddcf5e30170e34c63f760e28eb962fdfad3fc9ab7e84de196a88287c7ca",
          "sha256": "6520fddcf5e30170e34c63f760e28eb962fdfad3fc9ab7e84de196a88287c7ca"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/easeprobe.rb",
  "ruby_source_checksum": {
    "sha256": "3969cec9a5c71d9bb9be967383f9f57b719d83d70ddecc1391234e2b07cd6e80"
  },
  "date_added": "2022-03-29T09:00:25+00:00",
  "readme": "<h1>EaseProbe</h1>\n\n[![Go Report Card](https://goreportcard.com/badge/github.com/megaease/easeprobe)](https://goreportcard.com/report/github.com/megaease/easeprobe)\n[![codecov](https://codecov.io/gh/megaease/easeprobe/branch/main/graph/badge.svg?token=L7SR8X6SRN)](https://codecov.io/gh/megaease/easeprobe)\n[![Build](https://github.com/megaease/easeprobe/actions/workflows/test.yaml/badge.svg)](https://github.com/megaease/easeprobe/actions/workflows/test.yaml)\n[![GitHub go.mod Go version](https://img.shields.io/github/go-mod/go-version/megaease/easeprobe)](https://github.com/megaease/easeprobe/blob/main/go.mod)\n[![Join MegaEase Slack](https://img.shields.io/badge/slack-megaease-brightgreen?logo=slack)](https://join.slack.com/t/openmegaease/shared_invite/zt-upo7v306-lYPHvVwKnvwlqR0Zl2vveA)\n\n\nEaseProbe is a simple, standalone, and lightweight tool that can do health/status checking, written in Go.\n\n![](docs/overview.png)\n\n<h2>Table of Contents</h2>\n\n- [1. Introduction](#1-introduction)\n  - [1.1 Probe](#11-probe)\n  - [1.2 Notification](#12-notification)\n  - [1.3 Report \\& Metrics](#13-report--metrics)\n- [2. Getting Started](#2-getting-started)\n  - [2.1 Build](#21-build)\n  - [2.2 Configure](#22-configure)\n  - [2.3 Run](#23-run)\n- [3. Deployment](#3-deployment)\n- [4. User Manual](#4-user-manual)\n- [5. Benchmark](#5-benchmark)\n- [6. Contributing](#6-contributing)\n- [7. Community](#7-community)\n- [8. License](#8-license)\n\n\n# 1. Introduction\n\nEaseProbe is designed to do three kinds of work - **Probe**, **Notify**, and **Report**.\n\n## 1.1 Probe\n\nEaseProbe supports a variety of methods to perform its probes such as:\n\n- **HTTP**. Checking the HTTP status code, Support mTLS, HTTP Basic Auth, setting Request Header/Body, and XPath response evaluation. ( [HTTP Probe Manual](./docs/Manual.md#12-http) )\n- **TCP**. Check whether a TCP connection can be established or not. ( [TCP Probe Manual](./docs/Manual.md#13-tcp) )\n- **Ping**. Ping a host to see if it is reachable or not. ( [Ping Probe Manual](./docs/Manual.md#14-ping) )\n- **Shell**. Run a Shell command and check the result. ( [Shell Command Probe Manual](./docs/Manual.md#15-shell) )\n- **SSH**. Run a remote command via SSH and check the result. Support the bastion/jump server ([SSH Command Probe Manual](./docs/Manual.md#16-ssh))\n- **TLS**. Connect to a given port using TLS and (optionally) validate for revoked or expired certificates ( [TLS Probe Manual](./docs/Manual.md#17-tls) )\n- **Host**. Run an SSH command on a remote host and check the CPU, Memory, and Disk usage. ( [Host Load Probe Manual](./docs/Manual.md#18-host) )\n- **Client**. The following native clients are supported. They all support mTLS and data checking. ( [Native Client Probe Manual](./docs/Manual.md#19-native-client) )\n  - **MySQL**. Connect to a MySQL server and run the `SHOW STATUS` SQL.\n  - **Redis**. Connect to a Redis server and run the `PING` command.\n  - **Memcache**. Connect to a Memcache server and run the `version` command or validate a given key/value pair.\n  - **MongoDB**. Connect to a MongoDB server and perform a ping.\n  - **Kafka**. Connect to a Kafka server and perform a list of all topics.\n  - **PostgreSQL**. Connect to a PostgreSQL server and run `SELECT 1` SQL.\n  - **Zookeeper**. Connect to a Zookeeper server and run `get /` command.\n\n## 1.2 Notification\n\nEaseProbe supports notification delivery to the following:\n\n- **Slack**. Using Slack Webhook for notification delivery\n- **Discord**. Using Discord Webhook for notification delivery\n- **Telegram**. Using Telegram Bot for notification delivery\n- **Teams**. Support the [Microsoft Teams](https://docs.microsoft.com/en-us/microsoftteams/platform/webhooks-and-connectors/how-to/connectors-using?tabs=cURL#setting-up-a-custom-incoming-webhook) notification delivery\n- **Email**. Support email notification delivery to one or more email addresses\n- **AWS SNS**. Support the AWS Simple Notification Service\n- **WeChat Work**. Support Enterprise WeChat Work notification delivery\n- **DingTalk**. Support the DingTalk notification delivery\n- **Lark**. Support the Lark(Feishu) notification delivery\n- **SMS**. SMS notification delivery with support for multiple SMS service providers\n  - [Twilio](https://www.twilio.com/sms)\n  - [Vonage(Nexmo)](https://developer.vonage.com/messaging/sms/overview)\n  - [YunPain](https://www.yunpian.com/doc/en/domestic/list.html)\n- **Log**. Write the notification into a log file or Syslog.\n- **Shell**. Run a shell command to deliver the notification (see [example](resources/scripts/notify/notify.sh))\n- **RingCentral**. Using RingCentral Webhook for notification delivery\n\n> **Note**:\n>\n> 1) The notification is **Edge-Triggered Mode** by default, if you want to config it as **Level-Triggered Mode** with different interval and max notification, please refer to the manual - [Alerting Interval](./docs/Manual.md#112-alerting-interval).\n>\n> 2) Windows platforms do not support syslog as notification method.\n\nCheck the [Notification Manual](./docs/Manual.md#2-notification) to see how to configure it.\n\n## 1.3 Report & Metrics\n\nEaseProbe supports the following report and metrics:\n\n- **SLA Report Notify**. EaseProbe would send the daily, weekly, or monthly SLA report using the defined **`notify:`** methods.\n- **SLA Live Report**. The EaseProbe would listen on the `0.0.0.0:8181` port by default. By accessing this service you will be provided with a live SLA report either as HTML at `http://localhost:8181/` or as JSON at `http://localhost:8181/api/v1/sla`\n- **SLA Data Persistence**. The SLA data will be persisted in `$CWD/data/data.yaml` by default. You can configure this path by editing the `settings` section of your configuration file.\n\nFor more information, please check the [Global Setting Configuration](./docs/Manual.md#73-global-setting-configuration)\n\n- **Prometheus Metrics**. The EaseProbe would listen on the `8181` port by default. By accessing this service you will be provided with Prometheus metrics at `http://easeprobe:8181/metrics`.\n\nThe metrics are prefixed with `easeprobe_` and are documented in [Prometheus Metrics Exporter](./docs/Manual.md#6-prometheus-metrics-exporter)\n\n# 2. Getting Started\n\nYou can get started with EaseProbe, by any of the following methods:\n* Download the release for your platform from https://github.com/megaease/easeprobe/releases\n* Use the available EaseProbe docker image `docker run -it megaease/easeprobe`\n* Build `easeprobe` from sources\n\n## 2.1 Build\n\nCompiler `Go 1.20+` (Generics Programming Support), checking the [Go Installation](https://go.dev/doc/install) to see how to install Go on your platform.\n\nUse `make` to build and produce the `easeprobe` binary file. The executable is produced under the `build/bin` directory.\n\n```shell\n$ make\n```\n## 2.2 Configure\n\nRead the [User Manual](./docs/Manual.md) for detailed instructions on how to configure all EaseProbe parameters.\n\nCreate a configuration file (eg. `$CWD/config.yaml`) using the configuration template at [./resources/config.yaml](https://raw.githubusercontent.com/megaease/easeprobe/main/resources/config.yaml), which includes the complete list of configuration parameters.\n\nThe following simple configuration example can be used to get started:\n\n```YAML\nhttp: # http probes\n  - name: EaseProbe Github\n    url: https://github.com/megaease/easeprobe\nnotify:\n  log:\n    - name: log file # local log file\n      file: /var/log/easeprobe.log\nsettings:\n  probe:\n    timeout: 30s # the time out for all probes\n    interval: 1m # probe every minute for all probes\n```\n\nYou can check the [EaseProbe JSON Schema](./docs/Manual.md#81-easeprobe-json-schema) section to use a JSON Scheme file to make your life easier when you edit the configuration file.\n\n## 2.3 Run\n\nYou can run the following command to start EaseProbe once built\n\n```shell\n$ build/bin/easeprobe -f config.yaml\n```\n* `-f` configuration file or URL or path for multiple files which will be automatically merged into one. Can also be achieved by setting the environment variable `PROBE_CONFIG`\n* `-d` dry run. Can also be achieved by setting the environment variable `PROBE_DRY`\n\n# 3. Deployment\n\nEaseProbe can be deployed by Systemd, Docker, Docker-Compose, & Kubernetes.\n\nYou can find the details in [Deployment Guide](./docs/Deployment.md)\n\n# 4. User Manual\n\nFor detailed instructions and features please refer to the [User Manual](./docs/Manual.md)\n\n# 5. Benchmark\n\nWe have performed an extensive benchmark on EaseProbe. For the benchmark results please refer to - [Benchmark Report](./docs/Benchmark.md)\n\n# 6. Contributing\n\nIf you're interested in contributing to the project, please spare a moment to read our [CONTRIBUTING Guide](./docs/CONTRIBUTING.md)\n\n# 7. Community\n\n- Join Slack [Workspace](https://join.slack.com/t/openmegaease/shared_invite/zt-upo7v306-lYPHvVwKnvwlqR0Zl2vveA) for requirements, issues, and development.\n- [MegaEase on Twitter](https://twitter.com/megaease)\n\n# 8. License\n\nEaseProbe is under the Apache 2.0 license. See the [LICENSE](./LICENSE) file for details."
}
