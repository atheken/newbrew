{
  "name": "bash-completion@2",
  "full_name": "bash-completion@2",
  "tap": "homebrew/core",
  "oldname": "bash-completion2",
  "oldnames": [
    "bash-completion2"
  ],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Programmable completion for Bash 4.2+",
  "license": "GPL-2.0",
  "homepage": "https://github.com/scop/bash-completion",
  "versions": {
    "stable": "2.11",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/scop/bash-completion/releases/download/2.11/bash-completion-2.11.tar.xz",
      "tag": null,
      "revision": null,
      "checksum": "73a8894bad94dee83ab468fa09f628daffd567e8bef1a24277f1e9a0daf911ac"
    },
    "head": {
      "url": "https://github.com/scop/bash-completion.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bash-completion/2/blobs/sha256:c4551dd2b4efcc64fe37febc7471365cba49648a46437972aeb57bb3ca0a3b08",
          "sha256": "c4551dd2b4efcc64fe37febc7471365cba49648a46437972aeb57bb3ca0a3b08"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bash-completion/2/blobs/sha256:c4551dd2b4efcc64fe37febc7471365cba49648a46437972aeb57bb3ca0a3b08",
          "sha256": "c4551dd2b4efcc64fe37febc7471365cba49648a46437972aeb57bb3ca0a3b08"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bash-completion/2/blobs/sha256:336f04248a6da8c65291ef74c35430f843ae10b5c29d092ab463803fa14b2014",
          "sha256": "336f04248a6da8c65291ef74c35430f843ae10b5c29d092ab463803fa14b2014"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bash-completion/2/blobs/sha256:606996545b7e56cb10c51052b0dc811d3c3e4c2246e4cf2c2fdfe78a97b0113d",
          "sha256": "606996545b7e56cb10c51052b0dc811d3c3e4c2246e4cf2c2fdfe78a97b0113d"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bash-completion/2/blobs/sha256:606996545b7e56cb10c51052b0dc811d3c3e4c2246e4cf2c2fdfe78a97b0113d",
          "sha256": "606996545b7e56cb10c51052b0dc811d3c3e4c2246e4cf2c2fdfe78a97b0113d"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bash-completion/2/blobs/sha256:27ccf1267d18fcd3e6018ec80363d003d07f750182bdef61150371532100bfc9",
          "sha256": "27ccf1267d18fcd3e6018ec80363d003d07f750182bdef61150371532100bfc9"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bash-completion/2/blobs/sha256:3fe7e4021769be9a92eac055496e6189996c3527270db1dfdd4b0eb8cd7b4192",
          "sha256": "3fe7e4021769be9a92eac055496e6189996c3527270db1dfdd4b0eb8cd7b4192"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bash-completion/2/blobs/sha256:3fe7e4021769be9a92eac055496e6189996c3527270db1dfdd4b0eb8cd7b4192",
          "sha256": "3fe7e4021769be9a92eac055496e6189996c3527270db1dfdd4b0eb8cd7b4192"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bash-completion/2/blobs/sha256:3fe7e4021769be9a92eac055496e6189996c3527270db1dfdd4b0eb8cd7b4192",
          "sha256": "3fe7e4021769be9a92eac055496e6189996c3527270db1dfdd4b0eb8cd7b4192"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bash-completion/2/blobs/sha256:c4551dd2b4efcc64fe37febc7471365cba49648a46437972aeb57bb3ca0a3b08",
          "sha256": "c4551dd2b4efcc64fe37febc7471365cba49648a46437972aeb57bb3ca0a3b08"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "bash"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [
    "bash-completion"
  ],
  "conflicts_with_reasons": [
    "each are different versions of the same formula"
  ],
  "link_overwrite": [],
  "caveats": "Add the following line to your ~/.bash_profile:\n  [[ -r \"$HOMEBREW_PREFIX/etc/profile.d/bash_completion.sh\" ]] && . \"$HOMEBREW_PREFIX/etc/profile.d/bash_completion.sh\"\n",
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "2706c66e8def3eeba4d9bf1adf66221c8ad70701",
  "ruby_source_path": "Formula/bash-completion@2.rb",
  "ruby_source_checksum": {
    "sha256": "ce79bf84eee56f622ef72bf9217ad890e65a4f8d07f0042ccd6b99b1475096e7"
  },
  "head_dependencies": {
    "build_dependencies": [
      "autoconf",
      "automake"
    ],
    "dependencies": [
      "bash"
    ],
    "test_dependencies": [],
    "recommended_dependencies": [],
    "optional_dependencies": [],
    "uses_from_macos": [],
    "uses_from_macos_bounds": []
  },
  "date_added": "2017-03-06T15:34:31-05:00",
  "readme": "# bash-completion\n\n[![CI](https://github.com/scop/bash-completion/actions/workflows/ci.yaml/badge.svg)](https://github.com/scop/bash-completion/actions/workflows/ci.yaml)\n\n## Introduction\n\nbash-completion is a collection of command line command completions for the\n[Bash shell](https://www.gnu.org/software/bash/), collection of helper\nfunctions to assist in creating new completions, and set of facilities for\nloading completions automatically on demand, as well as installing them.\n\n## Installation\n\nThe easiest way to install this software is to use a package; refer to\n[Repology](https://repology.org/project/bash-completion) for a comprehensive\nlist of operating system distributions, package names, and available versions.\n\nDepending on the package, you may still\nneed to source it from either `/etc/bashrc` or `~/.bashrc` (or any\nother file sourcing those). If you have _only_ bash >= 4.2 installed, you can\ndo this by simply using:\n\n```shell\n# Use bash-completion, if available\n[[ $PS1 && -f /usr/share/bash-completion/bash_completion ]] && \\\n    . /usr/share/bash-completion/bash_completion\n```\n\nIf you have older bash versions in use, their loading of `bash_completion`\nshould be prevented. See further for more info.\n\nIf you don't have the package readily available for your distribution, or\nyou simply don't want to use one, you can install bash completion using the\nstandard commands for GNU autotools packages:\n\n```shell\nautoreconf -i      # if not installing from prepared release tarball\n./configure\nmake               # GNU make required\nmake check         # optional\nmake install       # as root\nmake installcheck  # optional, requires python3 with pytest >= 3.6, pexpect\n```\n\nThese commands install the completions and helpers, as well as a\n`profile.d` script that loads `bash_completion` where appropriate.\n\nIf your system does not use the `profile.d` directory (usually below\n`/etc`) mechanism (i.e., does not automatically source shell scripts in\nit), you can source the `$sysconfdir/profile.d/bash_completion.sh`\nscript in `/etc/bashrc` or `~/.bashrc`.\n\nThe `profile.d` script provides a configuration file hook that can be\nused to prevent loading `bash_completion` on per user basis when it's\ninstalled system wide. To do this:\n\n1. Turn off programmable completion with `shopt -u progcomp` in\n   `$XDG_CONFIG_HOME/bash_completion` (or `~/.config/bash_completion`\n   if `$XDG_CONFIG_HOME` is not set)\n2. Turn it back on (for example in `~/.bashrc`) if you want to use\n   programmable completion for other purposes.\n\n### macOS (OS X)\n\nIf you're using macOS (formerly OS X), `/etc/bashrc` is apparently not sourced at\nall. In that case, you can put the `bash_completion` file in `/sw/etc`\nand add the following code to `~/.bash_profile`:\n\n```shell\nif [ -f /sw/etc/bash_completion ]; then\n   . /sw/etc/bash_completion\nfi\n```\n\n## Troubleshooting\n\nIf you find that a given function is producing errors or does not work\nas it should under certain circumstances when you attempt completion,\ntry running `set -x` or `set -v` prior to attempting the completion\nagain. This will produce useful debugging output that will aid us in\nfixing the problem if you are unable to do so yourself. Turn off the\ntrace output by running either `set +x` or `set +v`.\n\nIf you are filing an issue, please attach the generated debugging output\nin `set -x` mode copy-pasted to a separate, attached file in the report.\nBefore doing so, be sure to review the output for anything you may not want\nto share in public, and redact as appropriate.\n\nTo debug dynamic loading of a completion, tracing needs to be turned\non before the debugged completion is attempted the first time. The\neasiest way to do this is to start a new shell session, and to turn\ntracing on in it before doing anything else there.\n\n## Known problems\n\n1. Many of the completion functions assume GNU versions of the various\n   text utilities that they call (e.g. `grep`, `sed`, and `awk`). Your\n   mileage may vary.\n\n## FAQ\n\n**Q. The bash completion code inhibits some commands from completing on\n   files with extensions that are legitimate in my environment. Do I\n   have to disable completion for that command in order to complete on\n   the files that I need to?**\n\nA. No. Use `M-/` to (in the words of the bash man page) attempt file\n   name completion on the text to the left of the cursor. This will\n   circumvent any file type restrictions put in place by the bash\n   completion code.\n\n**Q. How can I override a completion shipped by bash-completion?**\n\nA. Install a local completion of your own appropriately for the desired\n   command, and it will take precedence over the one shipped by us. See the\n   next answer for details where to install it, if you are doing it on per user\n   basis. If you want to do it system wide, you can install eagerly loaded\n   files in `compatdir` (see a couple of questions further down for more\n   info. To get the path of `compatdir` for the current system, the output of\n   `pkg-config bash-completion --variable compatdir` can be used) and install a\n   completion for the commands to override our completion for in them.\n\n   If you want to use bash's default completion instead of one of ours,\n   something like this should work (where `$cmd` is the command to override\n   completion for): `complete -o default -o bashdefault $cmd`\n\n**Q. Where should I install my own local completions?**\n\nA. Put them in the `completions` subdir of `$BASH_COMPLETION_USER_DIR`\n   (defaults to `$XDG_DATA_HOME/bash-completion` or\n    `~/.local/share/bash-completion`\n   if `$XDG_DATA_HOME` is not set) to have them loaded automatically\n   on demand when the respective command is being completed.\n   See also the next question's answer for considerations for these\n   files' names, they apply here as well. Alternatively, you can write\n   them directly in `~/.bash_completion` which is loaded eagerly by\n   our main script.\n\n**Q. I author/maintain package X and would like to maintain my own\n   completion code for this package. Where should I put it to be sure\n   that interactive bash shells will find it and source it?**\n\nA. [ Disclaimer: Here, how to make the completion code visible to\n   bash-completion is explained.  We do not require always making the\n   completion code visible to bash-completion.  In what condition the\n   completion code is installed should be determined at the author/maintainers'\n   own discretion. ]\n\n   Install it in one of the directories pointed to by bash-completion's\n   `pkgconfig` file variables. There are two alternatives:\n\n   - The recommended directory is `completionsdir`, which you can get with\n     `pkg-config --variable=completionsdir bash-completion`. From this\n     directory, completions are automatically loaded on demand based on invoked\n     commands' names, so be sure to name your completion file accordingly, and\n     to include (for example) symbolic links in case the file provides\n     completions for more than one command. The completion filename for\n     command `foo` in this directory should be either `foo`, or `foo.bash`.\n     (Underscore prefixed `_foo` works too, but is reserved for\n     bash-completion internal use as a deprecation/fallback marker.)\n   - The other directory which is only present for backwards compatibility,\n     its usage is no longer recommended, is `compatdir` (get it with\n     `pkg-config --variable=compatdir bash-completion`). From this\n     directory, files are loaded eagerly when `bash_completion` is loaded.\n\n   For packages using GNU autotools the installation can be handled\n   for example like this in `configure.ac`:\n\n   ```m4\n   PKG_CHECK_VAR(bashcompdir, [bash-completion], [completionsdir], ,\n     bashcompdir=\"${sysconfdir}/bash_completion.d\")\n   AC_SUBST(bashcompdir)\n   ```\n\n   ...accompanied by this in `Makefile.am`:\n\n   ```makefile\n   bashcompdir = @bashcompdir@\n   dist_bashcomp_DATA = your-completion-file # completion files go here\n   ```\n\n   For cmake we ship the `bash-completion-config.cmake` and\n   `bash-completion-config-version.cmake` files. Example usage:\n\n   ```cmake\n   find_package(bash-completion)\n   if(BASH_COMPLETION_FOUND)\n     message(STATUS\n       \"Using bash completion dir ${BASH_COMPLETION_COMPLETIONSDIR}\")\n   else()\n     set (BASH_COMPLETION_COMPLETIONSDIR \"/etc/bash_completion.d\")\n     message (STATUS\n       \"Using fallback bash completion dir ${BASH_COMPLETION_COMPLETIONSDIR}\")\n   endif()\n\n   install(FILES your-completion-file DESTINATION\n     ${BASH_COMPLETION_COMPLETIONSDIR})\n   ```\n\n   In bash-completion >= 2.12, we search the data directory of\n   `bash-completion` under the installation prefix where the target command is\n   installed.  When one can assume that the version of the target\n   bash-completion is 2.12 or higher, the completion script can actually be\n   installed to `$PREFIX/share/bash-completion/completions/` under the same\n   installation prefix as the target program installed under `$PREFIX/bin/` or\n   `$PREFIX/sbin/`.  For the detailed search order, see also \"Q. What is the\n   search order for the completion file of each target command?\" below.\n\n   Example for `Makefile.am`:\n\n   ```makefile\n   bashcompdir = $(datarootdir)/bash-completion/completions\n   dist_bashcomp_DATA = your-completion-file\n   ```\n\n   Example for `CMakeLists.txt`:\n\n   ```cmake\n   install(FILES your-completion-file DESTINATION \"${CMAKE_INSTALL_DATAROOTDIR}/bash-completion/completions\")\n   ```\n\n**Q. When completing on a symlink to a directory, bash does not append\n   the trailing `/` and I have to hit <kbd>&lt;Tab></kbd> again.\n   I don't like this.**\n\nA. This has nothing to do with `bash_completion`. It's the default for\n   completing symlinks to directories since bash 2.05a, and was added\n   because sometimes you want to operate on the symlink itself, rather\n   than what it points to.\n\n   You can get the pre-2.05a behaviour back by putting `set\n   mark-symlinked-directories on` in your `/etc/inputrc` or\n   `~/.inputrc` file.\n\n**Q. Completion goes awry when I try to complete on something that contains\n   a colon.**\n\nA. This is actually a 'feature' of bash. bash recognises a colon as\n   starting a new completion token, which is often what you want when\n   completing something like a `PATH` variable:\n\n   ```shell\n   export PATH=/bin:/sbin:/usr<Tab>\n   ```\n\n   Without the special treatment of the colon, the above wouldn't work\n   without programmable completion, so it has long been a feature of\n   the shell.\n\n   Unfortunately, you don't want the colon to be treated as a special\n   case when doing something like:\n\n   ```shell\n   man File::B<Tab>\n   ```\n\n   Here, the colons make bash think that it's completing a new token\n   that begins with 'B'.\n\n   Unfortunately, there's no way to turn this off. The only thing you\n   can do is escape the colons with a backslash.\n\n**Q. Why is `rpm` completion so slow with `-q`?**\n\nA. Probably because the database is being queried every time and this uses a\n   lot of memory.\n\n   You can make this faster by pregenerating the list of installed\n   packages on the system. Make sure you have a readable file called\n   `/var/log/rpmpkgs`. It's generated by `/etc/cron.daily/rpm` on\n   some Red Hat and Mandrake and derivative Linux systems.\n\n   If you don't have such a cron job, make one:\n\n   ```shell\n   #!/bin/sh\n\n   rpm -qa --qf '%{name}-%{version}-%{release}.%{arch}.rpm\\n' 2>&1 \\\n           | sort >/var/log/rpmpkgs\n   ```\n\n   rpm completion will use this flat text file instead of the RPM database,\n   unless it detects that the database has changed since the file was created,\n   in which case it will still use the database to ensure accuracy.\n\n**Q. bash-completion interferes with my `command_not_found_handle` function\n   (or the other way around)!**\n\nA. If your `command_not_found_handle` function is not intended to\n   address (possibly missing) commands invoked during bash\n   programmable completion functions, you can account for this\n   in the function by, for example, testing if the `$COMP_LINE`\n   variable is set and taking appropriate action, typically returning\n   early and silently with success.\n\n**Q. Can tab completion be made even easier?**\n\nA. The `readline(3)` library offers a few settings that can make tab\n   completion easier (or at least different) to use.\n\n   For example, try putting the following in either `/etc/inputrc` or\n   `~/.inputrc`:\n\n   ```inputrc\n   set show-all-if-ambiguous on\n   ```\n\n   This will allow single tab completion as opposed to requiring a\n   double tab. This makes things much more pleasant, in our opinion.\n\n   ```inputrc\n   set visible-stats on\n   ```\n\n   This will suffix each returned file completion with a character\n   denoting its type, in a similar way to `ls(1)` with `-F` or `--classify`.\n\n   ```inputrc\n   set page-completions off\n   ```\n\n   This turns off the use of the internal pager when returning long\n   completion lists.\n\n**Q. Is bash the be-all-and-end-all of completion as far as shells go?**\n\nA. Absolutely not. zsh has an extremely sophisticated completion system\n   that offers many features absent from the bash implementation. Its\n   users often cannot resist pointing this out. More information can\n   be found at <https://www.zsh.org/>.\n\n**Q. What is the search order for the completion file of each target command?**\n\nA. The completion files of commands are looked up by the shell function\n  `__load_completion`.  Here, the search order in bash-completion >= 2.12 is\n  explained.\n\n  1. `BASH_COMPLETION_USER_DIR`. The subdirectory `completions` of each paths\n     in `BASH_COMPLETION_USER_DIR` separated by colons is considered for a\n     completion directory.\n  2. The location of the main `bash_completion` file. The subdirectory\n     `completions` in the same directory as `bash_completion` is considered.\n  3. The location of the target command.  When the real location of the command\n     is in the directory `<prefix>/bin` or `<prefix>/sbin`, the directory\n     `<prefix>/share/bash-completion/completions` is considered.\n  4. `XDG_DATA_DIRS` (or the system directories `/usr/local/share:/usr/share`\n     if empty).  The subdirectory `bash-completion/completions` of each paths\n     in `XDG_DATA_DIRS` separated by colons is considered.\n\n  The completion files of the name `<cmd>` or `<cmd>.bash`, where `<cmd>` is\n  the name of the target command, are searched in the above completion\n  directories in order.  The file that is found first is used.  When no\n  completion file is found in any completion directories in this process, the\n  completion files of the name `_<cmd>` is next searched in the completion\n  directories in order."
}
