{
  "name": "reproc",
  "full_name": "reproc",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Cross-platform (C99/C++11) process library",
  "license": "MIT",
  "homepage": "https://github.com/DaanDeMeyer/reproc",
  "versions": {
    "stable": "14.2.4",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/DaanDeMeyer/reproc/archive/refs/tags/v14.2.4.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "55c780f7faa5c8cabd83ebbb84b68e5e0e09732de70a129f6b3c801e905415dd"
    },
    "head": {
      "url": "https://github.com/DaanDeMeyer/reproc.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/reproc/blobs/sha256:92dfc69a9bdaf3fe24d6a0e9614991fb7d76555b11744ff1a486fa153c4af70b",
          "sha256": "92dfc69a9bdaf3fe24d6a0e9614991fb7d76555b11744ff1a486fa153c4af70b"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/reproc/blobs/sha256:1d50813532d791a9709b50e885a5624d1df39fb9c37661472859c3a26670a2a6",
          "sha256": "1d50813532d791a9709b50e885a5624d1df39fb9c37661472859c3a26670a2a6"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/reproc/blobs/sha256:38e7d2580d04f3d0929c6e60ef97cf19da2dd084f920d26a6a11e10c811de7ae",
          "sha256": "38e7d2580d04f3d0929c6e60ef97cf19da2dd084f920d26a6a11e10c811de7ae"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/reproc/blobs/sha256:bd24d6a297d490c2f97bf9e81ef43ca13da3a431268a4601ba103e1d25802578",
          "sha256": "bd24d6a297d490c2f97bf9e81ef43ca13da3a431268a4601ba103e1d25802578"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/reproc/blobs/sha256:46ee83678708da249ff86807ae8d1c325a1f45c433adf4b2a9b2fe978406f133",
          "sha256": "46ee83678708da249ff86807ae8d1c325a1f45c433adf4b2a9b2fe978406f133"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/reproc/blobs/sha256:eca3bef688c4b569bdfc5553518d9e5fb943d03d4d3e84ac8efb7fc4dd780db8",
          "sha256": "eca3bef688c4b569bdfc5553518d9e5fb943d03d4d3e84ac8efb7fc4dd780db8"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/reproc/blobs/sha256:c4d326f594531cea94259af9fe79a1e0efd8f1aafa1b9293b5ba536673308f00",
          "sha256": "c4d326f594531cea94259af9fe79a1e0efd8f1aafa1b9293b5ba536673308f00"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/reproc/blobs/sha256:7bba935ec5f089ca4705e6402d440eaef6c64eaaac73b6fa95baa68af69fc826",
          "sha256": "7bba935ec5f089ca4705e6402d440eaef6c64eaaac73b6fa95baa68af69fc826"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/reproc.rb",
  "ruby_source_checksum": {
    "sha256": "f57321e303d55e162a2728bc5567f1393302cf711c0851d6cf11e07070baeac6"
  },
  "date_added": "2021-08-22T05:16:46+00:00",
  "readme": "# reproc\n\n- [What is reproc?](#what-is-reproc)\n- [Features](#features)\n- [Questions](#questions)\n- [Installation](#installation)\n- [Dependencies](#dependencies)\n- [CMake options](#cmake-options)\n- [Documentation](#documentation)\n- [Error handling](#error-handling)\n- [Multithreading](#multithreading)\n- [Gotchas](#gotchas)\n\n## What is reproc?\n\nreproc (Redirected Process) is a cross-platform C/C++ library that simplifies\nstarting, stopping and communicating with external programs. The main use case\nis executing command line applications directly from C or C++ code and\nretrieving their output.\n\nreproc consists out of two libraries: reproc and reproc++. reproc is a C99\nlibrary that contains the actual code for working with external programs.\nreproc++ depends on reproc and adapts its API to an idiomatic C++11 API. It also\nadds a few extras that simplify working with external programs from C++.\n\n## Features\n\n- Start any program directly from C or C++ code.\n- Communicate with a program via its standard streams.\n- Wait for a program to exit or forcefully stop it yourself. When forcefully\n  stopping a process you can either allow the process to clean up its resources\n  or stop it immediately.\n- The core library (reproc) is written in C99. An optional C++11 wrapper library\n  (reproc++) with extra features is available for use in C++ applications.\n- Multiple installation methods. Either build reproc as part of your project or\n  use a system installed version of reproc.\n\n## Usage\n\n```c\n#include <reproc/run.h>\n\nint main(void)\n{\n  const char *args[] = { \"echo\", \"Hello, world!\", NULL };\n  return reproc_run(args, (reproc_options) { 0 });\n}\n```\n\n## Questions\n\nIf you have any questions after reading the readme and documentation you can\neither make an issue or ask questions directly in the reproc\n[gitter](https://gitter.im/reproc/Lobby) channel.\n\n## Installation\n\n**Note: Building reproc requires CMake 3.12 or higher.**\n\nThere are multiple ways to get reproc into your project. One way is to build\nreproc as part of your project using CMake. To do this, we first have to get the\nreproc source code into the project. This can be done using any of the following\noptions:\n\n- When using CMake 3.11 or later, you can use the CMake `FetchContent` API to\n  download reproc when running CMake. See\n  <https://cliutils.gitlab.io/modern-cmake/chapters/projects/fetch.html> for an\n  example.\n- Another option is to include reproc's repository as a git submodule.\n  <https://cliutils.gitlab.io/modern-cmake/chapters/projects/submodule.html>\n  provides more information.\n- A very simple solution is to just include reproc's source code in your\n  repository. You can download a zip of the source code without the git history\n  and add it to your repository in a separate directory.\n\nAfter including reproc's source code in your project, it can be built from the\nroot CMakeLists.txt file as follows:\n\n```cmake\nadd_subdirectory(<path-to-reproc>) # For example: add_subdirectory(external/reproc)\n```\n\nCMake options can be specified before calling `add_subdirectory`:\n\n```cmake\nset(REPROC++ ON)\nadd_subdirectory(<path-to-reproc>)\n```\n\n**Note: If the option has already been cached in a previous CMake run, you'll\nhave to clear CMake's cache to apply the new default value.**\n\nFor more information on configuring reproc's build, see\n[CMake options](#cmake-options).\n\nYou can also depend on an installed version of reproc. You can either build and\ninstall reproc yourself or install reproc via a package manager. reproc is\navailable in the following package repositories:\n\n- Arch User Repository (<https://aur.archlinux.org/packages/reproc>)\n- vcpkg (https://github.com/microsoft/vcpkg/tree/master/ports/reproc)\n\nIf using a package manager is not an option, you can build and install reproc\nfrom source (CMake 3.13+):\n\n```sh\ncmake -B build\ncmake --build build\ncmake --install build\n```\n\nEnable the `REPROC_TEST` option and build the `test` target to run the tests\n(CMake 3.13+):\n\n```sh\ncmake -B build -DREPROC_TEST=ON\ncmake --build build\ncmake --build build --target test\n```\n\nAfter installing reproc your build system will have to find it. reproc provides\nboth CMake config files and pkg-config files to simplify finding a reproc\ninstallation using CMake and pkg-config respectively. Note that reproc and\nreproc++ are separate libraries and as a result have separate config files as\nwell. Make sure to search for the one you want to use.\n\nTo find an installed version of reproc using CMake:\n\n```cmake\nfind_package(reproc) # Find reproc.\nfind_package(reproc++) # Find reproc++.\n```\n\nAfter building reproc as part of your project or finding a installed version of\nreproc, you can link against it from within your CMakeLists.txt file as follows:\n\n```cmake\ntarget_link_libraries(myapp reproc) # Link against reproc.\ntarget_link_libraries(myapp reproc++) # Link against reproc++.\n```\n\nFrom Meson 0.53.2 onwards, reproc can be included as a CMake subproject in Meson\nbuild scripts. See https://mesonbuild.com/CMake-module.html for more\ninformation.\n\n## Dependencies\n\nBy default, reproc has a dependency on pthreads on POSIX systems (`-pthread`)\nand a dependency on Winsock 2.2 on Windows systems (`-lws2_32`). CMake and\npkg-config handle these dependencies automatically.\n\n## CMake options\n\nreproc's build can be configured using the following CMake options:\n\n### User\n\n- `REPROC++`: Build reproc++ (default: `${REPROC_DEVELOP}`)\n- `REPROC_TEST`: Build tests (default: `${REPROC_DEVELOP}`)\n\n  Run the tests by running the `test` binary which can be found in the build\n  directory after building reproc.\n\n- `REPROC_EXAMPLES`: Build examples (default: `${REPROC_DEVELOP}`)\n\n  The resulting binaries will be located in the examples folder of each project\n  subdirectory in the build directory after building reproc.\n\n### Advanced\n\n- `REPROC_OBJECT_LIBRARIES`: Build CMake object libraries (default:\n  `${REPROC_DEVELOP}`)\n\n  This is useful to directly include reproc in another library. When building\n  reproc as a static or shared library, it has to be installed alongside the\n  consuming library which makes distributing the consuming library harder. When\n  using object libraries, reproc's object files are included directly into the\n  consuming library and no extra installation is necessary.\n\n  **Note: reproc's object libraries will only link correctly from CMake 3.14\n  onwards.**\n\n  **Note: This option overrides `BUILD_SHARED_LIBS`.**\n\n- `REPROC_INSTALL`: Generate installation rules (default: `ON` unless\n  `REPROC_OBJECT_LIBRARIES` is enabled)\n- `REPROC_INSTALL_CMAKECONFIGDIR`: CMake config files installation directory\n  (default: `${CMAKE_INSTALL_LIBDIR}/cmake`)\n- `REPROC_INSTALL_PKGCONFIG`: Install pkg-config files (default: `ON`)\n- `REPROC_INSTALL_PKGCONFIGDIR`: pkg-config files installation directory\n  (default: `${CMAKE_INSTALL_LIBDIR}/pkgconfig`)\n\n- `REPROC_MULTITHREADED`: Use `pthread_sigmask` and link against the system's\n  thread library (default: `ON`)\n\n### Developer\n\n- `REPROC_DEVELOP`: Configure option default values for development (default:\n  `OFF` unless the `REPROC_DEVELOP` environment variable is set)\n- `REPROC_SANITIZERS`: Build with sanitizers (default: `${REPROC_DEVELOP}`)\n- `REPROC_TIDY`: Run clang-tidy when building (default: `${REPROC_DEVELOP}`)\n- `REPROC_WARNINGS`: Enable compiler warnings (default: `${REPROC_DEVELOP}`)\n- `REPROC_WARNINGS_AS_ERRORS`: Add -Werror or equivalent to the compile flags\n  and clang-tidy (default: `OFF`)\n\n## Documentation\n\nEach function and class is documented extensively in its header file. Examples\ncan be found in the examples subdirectory of [reproc](reproc/examples) and\n[reproc++](reproc++/examples).\n\n## Error handling\n\nOn failure, Most functions in reproc's API return a negative `errno` (POSIX) or\n`GetLastError` (Windows) style error code. For actionable errors, reproc\nprovides constants (`REPROC_ETIMEDOUT`, `REPROC_EPIPE`, ...) that can be used to\nmatch against the error without having to write platform-specific code. To get a\nstring representation of an error, pass it to `reproc_strerror`.\n\nreproc++'s API integrates with the C++ standard library error codes mechanism\n(`std::error_code` and `std::error_condition`). Most methods in reproc++'s API\nreturn `std::error_code` values that contain the actual system error that\noccurred. You can test against these error codes using values from the\n`std::errc` enum.\n\nSee the examples for more information on how to handle errors when using reproc.\n\nNote:\n\nBoth reproc and reproc++ APIs take `options` argument that may define one or more\n`stop` actions such as `terminate` or `kill`.\nFor that reason if the child process is being terminated or killed using a signal\non POSIX, the error code will **not** reflect an error.\n\nIt's up to the downstream project to *interpret* status codes reflecting unexpected\nbehaviors alongside error codes (see this [example](https://github.com/DaanDeMeyer/reproc/issues/68#issuecomment-959074504)).\n\n## Multithreading\n\nDon't call the same operation on the same child process from more than one\nthread at the same time. For example: reading and writing to a child process\nfrom different threads is fine but waiting on the same child process from two\ndifferent threads at the same time will result in issues.\n\n## Gotchas\n\n- (POSIX) It is strongly recommended to not call `waitpid` on pids of processes\n  started by reproc.\n\n  reproc uses `waitpid` to wait until a process has exited. Unfortunately,\n  `waitpid` cannot be called twice on the same process. This means that\n  `reproc_wait` won't work correctly if `waitpid` has already been called on a\n  child process beforehand outside of reproc.\n\n- It is strongly recommended to make sure each child process actually exits\n  using `reproc_wait` or `reproc_stop`.\n\n  On POSIX, a child process that has exited is a zombie process until the parent\n  process waits on it using `waitpid`. A zombie process takes up resources and\n  can be seen as a resource leak so it is important to make sure all processes\n  exit correctly in a timely fashion.\n\n- It is strongly recommended to try terminating a child process by waiting for\n  it to exit or by calling `reproc_terminate` before resorting to `reproc_kill`.\n\n  When using `reproc_kill` the child process does not receive a chance to\n  perform cleanup which could result in resources being leaked. Chief among\n  these leaks is that the child process will not be able to stop its own child\n  processes. Always try to let a child process exit normally by calling\n  `reproc_terminate` before calling `reproc_kill`. `reproc_stop` is a handy\n  helper function that can be used to perform multiple stop actions in a row\n  with timeouts inbetween.\n\n- (POSIX) It is strongly recommended to ignore the `SIGPIPE` signal in the\n  parent process.\n\n  On POSIX, writing to a closed stdin pipe of a child process will terminate the\n  parent process with the `SIGPIPE` signal by default. To avoid this, the\n  `SIGPIPE` signal has to be ignored in the parent process. If the `SIGPIPE`\n  signal is ignored `reproc_write` will return `REPROC_EPIPE` as expected when\n  writing to a closed stdin pipe.\n\n- While `reproc_terminate` allows the child process to perform cleanup it is up\n  to the child process to correctly clean up after itself. reproc only sends a\n  termination signal to the child process. The child process itself is\n  responsible for cleaning up its own child processes and other resources.\n\n- (Windows) `reproc_kill` is not guaranteed to kill a child process immediately\n  on Windows. For more information, read the Remarks section in the\n  documentation of the Windows `TerminateProcess` function that reproc uses to\n  kill child processes on Windows.\n\n- Child processes spawned via reproc inherit a single extra file handle which is\n  used to wait for the child process to exit. If the child process closes this\n  file handle manually, reproc will wrongly detect the child process has exited.\n  If this handle is further inherited by other processes that outlive the child\n  process, reproc will detect the child process is still running even if it has\n  exited. If data is written to this handle, reproc will also wrongly detect the\n  child process has exited.\n\n- (Windows) It's not possible to detect if a child process closes its stdout or\n  stderr stream before exiting. The parent process will only be notified that a\n  child process output stream is closed once that child process exits.\n\n- (Windows) reproc assumes that Windows creates sockets that are usable as file\n  system objects. More specifically, the default sockets returned by `WSASocket`\n  should have the `XP1_IFS_HANDLES ` flag set. This might not be the case if\n  there are external LSP providers installed on a Windows machine. If this is\n  the case, we recommend removing the software that's providing the extra\n  service providers since they're deprecated and should not be used anymore (see\n  https://docs.microsoft.com/en-us/windows/win32/winsock/categorizing-layered-service-providers-and-applications)."
}
