{
  "name": "wally",
  "full_name": "wally",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Modern package manager for Roblox projects inspired by Cargo",
  "license": "MPL-2.0",
  "homepage": "https://github.com/UpliftGames/wally",
  "versions": {
    "stable": "0.3.2",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/UpliftGames/wally/archive/refs/tags/v0.3.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "f7da2a10865b05efe97273aa1d08e0efbb9d26fecb770d819bdc01fbb98a0ad9"
    },
    "head": {
      "url": "https://github.com/UpliftGames/wally.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/wally/blobs/sha256:c2342665f1ff90ae3b398b6f77f6a8b13a40cb28da096fd90396d311f49a6954",
          "sha256": "c2342665f1ff90ae3b398b6f77f6a8b13a40cb28da096fd90396d311f49a6954"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/wally/blobs/sha256:c89a4d262ef25cabd1314c9199386ad26293245329bc4b4f42ca61efe0e671ae",
          "sha256": "c89a4d262ef25cabd1314c9199386ad26293245329bc4b4f42ca61efe0e671ae"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/wally/blobs/sha256:e163760b40bb391a16d79959b2900441b819a128b20fac990728d757daead46b",
          "sha256": "e163760b40bb391a16d79959b2900441b819a128b20fac990728d757daead46b"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/wally/blobs/sha256:e2b3d38a5a171f0942cf2931a434aabe6a6ca9014c39468918f4711a48b3ccb3",
          "sha256": "e2b3d38a5a171f0942cf2931a434aabe6a6ca9014c39468918f4711a48b3ccb3"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/wally/blobs/sha256:aed7b3c520028f006b526682892ed3a94af7986f68fbd4b1adda297ffcb44bff",
          "sha256": "aed7b3c520028f006b526682892ed3a94af7986f68fbd4b1adda297ffcb44bff"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/wally/blobs/sha256:c552601bb3c6eb5495b40e5ac0312243731c47ec2478eb1adb8b0b57c595b228",
          "sha256": "c552601bb3c6eb5495b40e5ac0312243731c47ec2478eb1adb8b0b57c595b228"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/wally/blobs/sha256:66ffa7e6874e0908b42a519d4b67223b668c08e11d3dc5eef078c7e35671593c",
          "sha256": "66ffa7e6874e0908b42a519d4b67223b668c08e11d3dc5eef078c7e35671593c"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "pkg-config",
    "rust"
  ],
  "dependencies": [
    "openssl@3"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "zlib"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/wally.rb",
  "ruby_source_checksum": {
    "sha256": "fb2312dc08324a55d5d845d2d0727bb4dd30543a8673e12b06ded5c8fd3e0340"
  },
  "date_added": "2023-05-11T22:50:24-07:00",
  "readme": "<div align=\"center\" width=\"800\">\n    <img alt=\"Wally Logo\" src=\"wally-logo.svg\" />\n    <h1>Wally, a package manager for Roblox\n    \t<br><a href=\"https://upliftgames-wally.statuspage.io/\"><img alt=\"Dynamic Status Badge\" src=\"https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fvhs2807lh6ws.statuspage.io%2Fapi%2Fv2%2Fsummary.json&query=%24.status.description&label=Status%20\"></a>\n\t</h1>\n</div>\n\n\n* [Installation](#installation)\n* [Commands](#commands)\n* [Prior Art](#prior-art)\n* [Manifest Format](#manifest-format)\n* [Lockfile Format](#lockfile-format)\n* [Registries](#registries)\n* [License](#license)\n\n## About\nWally is a package manager for Roblox inspired by Cargo (Rust) and npm (JavaScript). It brings the familiar, community-oriented world of sharing code from other communities into the Roblox ecosystem.\n\nWally has two pieces that work together: a command line tool named `wally` and a registry server that hosts packages. Most users will only interact with the command line tool, but both are available in this repository.\n\n## Installation\n\n### With Aftman (preferred)\n[Aftman][aftman] is the toolchain manager we recommend. You can use it to install Wally:\n\nIn your project (preferred)\n```bash\naftman init\naftman add UpliftGames/wally\naftman install\n```\n\nOr install wally globally\n```bash\naftman add --global UpliftGames/wally\naftman install\n```\n\n[aftman]: https://github.com/LPGhatguy/aftman\n\n### Homebrew\n[Homebrew][homebrew] is also a convenient way to install wally! (only for MacOS/Linux)\n```bash\nbrew install wally\n```\n\n[homebrew]: https://brew.sh/\n\n### From GitHub\nPre-built binaries are available for Windows, macOS, and Linux from the [GitHub Releases Page for Wally][releases].\n\n[releases]: https://github.com/UpliftGames/wally/releases\n\n### From Source\nIt's straightforward to compile Wally from source. Wally requires Rust 1.51.0 or newer.\n\nClone the repository and use:\n\n```bash\ncargo install --locked --path .\n```\n\n## Commands\n\n### `wally init`\nCreate a new, empty package.\n\nParity with:\n* `cargo init`\n* `npm init`\n\n### `wally install [--locked]`\nInstalls all packages.\n\n`--locked` matches `cargo XXX --locked`, which will error if there is not an up-to-date lockfile. Intended for use on CI machines.\n(locked is a planned feature and not yet implemented)\n\nParity with:\n* `npm install` with no arguments\n\n### `wally update [package-names]`\nUpdate packages recursively. By default, will update all packages. If any package names are given (in the form `scope/name` or `scope/name@version-req`), just those packages will be updated instead.\n\nParity with:\n* `cargo update`\n* `npm update` (npm 7+, equivalent to `--depth 9999` in npm 6.x and older)\n\n### `wally publish [--token <token>]`\nPublish the current package.\n\nParity with:\n* `cargo publish`\n* `npm publish`\n\n### `wally login [--token <token>]`\nLog into an account to publish packages to a registry.\n\nYou can also directly provide a token via `wally login --token \"$WALLY_AUTH_TOKEN\"`.\n\nParity with:\n* `cargo login`\n* `npm login`\n\n### `wally logout`\nLog out of a registry account.\n\nParity with:\n* `cargo logout`\n* `npm logout`\n\n### `wally package [--list] --output <path>`\nPackage the current project as a zip file suitable for uploading to the package registry. Useful for adding entries to the registry and debugging what ends up in the blob that will be uploaded. `--list` will output which files will be included instead of creating a zip file.\n\nParity with:\n* `cargo package`\n\n### `wally manifest-to-json`\nPrints the current project's manifest as a line of JSON. Used for adding entries to the package index.\n\nParity with:\n* `cargo read-manifest`\n\n### `wally search <query>`\nSearch the registry to see what packages are available.\n\n## Prior Art\nWally aims to stand on the shoulders of giants. Decisions we make are in part backed up by looking at other package managers and other public documentation:\n\n* [*So you want to write a package manager*](https://medium.com/@sdboyer/so-you-want-to-write-a-package-manager-4ae9c17d9527)\n* [crates.io](https://crates.io/) and [Cargo](https://github.com/rust-lang/cargo) from the Rust ecosystem\n* [npm](https://npmjs.org/) from the JavaScript ecosystem\n* [PyPI](https://pypi.org/), [pip](https://pip.pypa.io/en/stable/), [pipenv](https://pypi.org/project/pipenv/), and [Poetry](https://python-poetry.org/) from Python\n\n## Manifest Format\nThe package manifest file describes a package and all of the packages it depends on. Package manifests are written in [TOML][toml] and stored in a file named `wally.toml`.\n\nManifest files are written by humans. They can contain comments and formatting decisions that are tough to preserve with automatic editing tools. This should be okay -- editing a package manifest should be easy.\n\nManifest files define all necessary information about a package.\n\nHere is an example package manifest, annotated with comments:\n\n```toml\n[package]\n# Package names are always \"SCOPE/NAME\"\n# They can include lowercase letters, numbers, and dashes.\nname = \"lpghatguy/asink\"\n\n# Descriptions are free-form. These will be used as part of package listings\n# and search results.\ndescription = \"Asynchronous programming primitives\"\n\n# Versions follow Semantic Versioning.\n# https://semver.org/\nversion = \"2.0.7\"\n\n# Contains an SPDX License Expression.\n# Licenses are required for publishing code to public registries.\nlicense = \"MIT OR Apache-2.0\"\n\n# The author list is a free-form list, but conventionally contains names and\n# email addresses.\nauthors = [\"Lucien Greathouse <lucien@uplift.games>\"]\n\n# Packages belong to a \"realm\", which helps prevent using code in the wrong\n# context. For now, we have \"server\" and \"shared\" realms.\n# The server realm should only be used for packages which shouldn't be replicated.\nrealm = \"shared\"\n\n# Wally supports multiple registries.\n# This feature can be used to have split public/private registries to\n# keep internal code private and isolated.\nregistry = \"https://github.com/upliftgames/wally-index\"\n\n# You can also specify files to include or exclude from the package\n# By default gitignore files are respected and Wally won't include hidden\n# files/directories or packages downloaded by Wally.\n# include = []\nexclude = [\"node_modules\"]\n\n# Packages can be marked as private to prevent them from being published.\nprivate = true\n\n[dependencies]\n# Most dependencies will look like this.\n#\n# The name on the left is an alias. It defines what name we would like to\n# use to refer to this package.\n#\n# The value on the right will usually be a string of the form\n#   \"SCOPE/NAME@VERSION_REQ\"\n# Versions are SemVer version requirements. The default behavior matches\n# Cargo, or npm with the `^` version specifier.\nRoact = \"roblox/roact@1.2.0\"\nPromise = \"evaera/promise@2.0.1\"\n\n[server-dependencies]\n# Dependencies in the server realm can be required here as shown above.\n# These are dependencies which should only ever exist on the server.\n\n[dev-dependencies]\n# Dev dependencies can be server or shared but are only needed during development.\nTestEZ = \"roblox/testez@0.4.1\"\n```\n\n## Lockfile Format\nThe lockfile contains the exact versions of each dependency that a project depends on. They're a critical feature that ensures that everyone who works on a game is getting the exact same version of every package.\n\nLockfiles are written in [TOML][toml] and stored in a file named `wally.lock`. They're human-readable, but are only written by tools. We've optimized the lockfile format for reading as well as diffing so that they're as easy to review as possible.\n\n```toml\n[[package]]\nname = \"registry:lpghatguy/asink\"\nversion = \"2.0.7\"\ndependencies = [\n \"registry:roblox/roact\",\n \"registry:evaera/roblox-lua-promise\",\n \"registry:roblox/mono-thing\",\n \"git:https://github.com/Roblox/cool-thing.git\",\n]\n\n[[package]]\nname = \"registry:evaera/roblox-lua-promise\"\nversion = \"2.1.0\"\nchecksum = \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"\n\n[[package]]\nname = \"registry:roblox/mono-thing\"\nversion = \"1.3.2\"\nchecksum = \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"\n\n[[package]]\nname = \"git:https://github.com/Roblox/cool-thing.git\"\nrev = \"foo\"\ncommit = \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"\n```\n\n## Registries\nLike many programming language package managers, Wally packages are published to a registry.\n\nA Wally registry consists of two pieces, inspired by Cargo and crates.io:\n* A Git repository containing a package index\n* A registry API that handles downloading and publishing package contents\n\nThe official Wally registry is available at https://github.com/upliftgames/wally-index.\n\n### Registry API\n\n* GET `/v1/package-contents/<scope>/<name>/<version>`\n\t* Returns the contents of a package for installation\n\t* Package contents are ZIP files\n* GET `/v1/package-metadata/<scope>/<name>`\n\t* Returns metadata for a package\n* GET `/v1/package-search?query=phrase`\n\t* Query what packages are available on this registry\n* POST `/api/v1/publish`\n\t* Client will post a package tarball that is extracted and published from the server.\n\n[toml]: https://toml.io/\n\n## License\nWally is available under the terms of the Mozilla Public License Version 2.0. Terms and conditions are available in [LICENSE.txt](LICENSE.txt) or at <https://www.mozilla.org/en-US/MPL/2.0/>."
}
