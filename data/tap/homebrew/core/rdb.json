{
  "name": "rdb",
  "full_name": "rdb",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Redis RDB parser",
  "license": "Apache-2.0",
  "homepage": "https://github.com/HDT3213/rdb/",
  "versions": {
    "stable": "1.0.10",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/HDT3213/rdb/archive/refs/tags/v1.0.10.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "a9916307b08300bd4e023b36e08f8cada0b8c003358278e0591cf298b4016de0"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rdb/blobs/sha256:08eaf505ffcc631127319f3a5825a072df8718103c79e77b10b322d1a03f900d",
          "sha256": "08eaf505ffcc631127319f3a5825a072df8718103c79e77b10b322d1a03f900d"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rdb/blobs/sha256:08eaf505ffcc631127319f3a5825a072df8718103c79e77b10b322d1a03f900d",
          "sha256": "08eaf505ffcc631127319f3a5825a072df8718103c79e77b10b322d1a03f900d"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rdb/blobs/sha256:08eaf505ffcc631127319f3a5825a072df8718103c79e77b10b322d1a03f900d",
          "sha256": "08eaf505ffcc631127319f3a5825a072df8718103c79e77b10b322d1a03f900d"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rdb/blobs/sha256:2f48e34e14b8a81cb6c505ec895e1d81917b51be9b2bf32f3617f5e099b49b33",
          "sha256": "2f48e34e14b8a81cb6c505ec895e1d81917b51be9b2bf32f3617f5e099b49b33"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rdb/blobs/sha256:2f48e34e14b8a81cb6c505ec895e1d81917b51be9b2bf32f3617f5e099b49b33",
          "sha256": "2f48e34e14b8a81cb6c505ec895e1d81917b51be9b2bf32f3617f5e099b49b33"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rdb/blobs/sha256:2f48e34e14b8a81cb6c505ec895e1d81917b51be9b2bf32f3617f5e099b49b33",
          "sha256": "2f48e34e14b8a81cb6c505ec895e1d81917b51be9b2bf32f3617f5e099b49b33"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rdb/blobs/sha256:fba5cdbb9b7fc5978712875b89dd263695870c62a30a87b1a5be6d25f36d7c01",
          "sha256": "fba5cdbb9b7fc5978712875b89dd263695870c62a30a87b1a5be6d25f36d7c01"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/rdb.rb",
  "ruby_source_checksum": {
    "sha256": "94a2fb86b73c38c351fa66604f843e59097744311c13b483459e8ededb6b331c"
  },
  "date_added": "2022-08-19T04:44:13+00:00",
  "readme": "![license](https://img.shields.io/github/license/HDT3213/rdb)\n[![Build Status](https://travis-ci.com/HDT3213/rdb.svg?branch=master)](https://app.travis-ci.com/github/HDT3213/rdb)\n[![Coverage Status](https://coveralls.io/repos/github/HDT3213/rdb/badge.svg?branch=master)](https://coveralls.io/github/HDT3213/rdb?branch=master)\n[![Go Report Card](https://goreportcard.com/badge/github.com/HDT3213/rdb)](https://goreportcard.com/report/github.com/HDT3213/rdb)\n[![Go Reference](https://pkg.go.dev/badge/github.com/hdt3213/rdb.svg)](https://pkg.go.dev/github.com/hdt3213/rdb)\n<br>\n[![Mentioned in Awesome Go](https://awesome.re/mentioned-badge-flat.svg)](https://github.com/avelino/awesome-go)\n\n[中文版](https://github.com/HDT3213/rdb/blob/master/README_CN.md)\n\nThis is a golang implemented Redis RDB parser for secondary development and memory analysis.\n\nIt provides abilities to:\n\n- Generate memory report for rdb file\n- Convert RDB files to JSON\n- Convert RDB files to Redis Serialization Protocol (or AOF file)\n- Find the biggest N keys in RDB files\n- Draw FlameGraph to analysis which kind of keys occupied most memory\n- Customize data usage\n- Generate RDB file\n\nSupport RDB version: 1 <= version <= 11(Redis 7.2)\n\nIf you read Chinese, you could find a thorough introduction to the RDB file format here: [Golang 实现 Redis(11): RDB 文件格式](https://www.cnblogs.com/Finley/p/16251360.html)\n\nThanks sripathikrishnan for his [redis-rdb-tools](https://github.com/sripathikrishnan/redis-rdb-tools)\n\n# Install\n\nIf you have installed `go` on your compute, just simply use:\n\n```\ngo install github.com/hdt3213/rdb@latest\n```\n\n### Package Managers\n\nIf you're a [Homebrew](https://brew.sh/) user, you can install [rdb](https://formulae.brew.sh/formula/rdb) via:\n\n```sh\n$ brew install rdb\n```\n\nOr, you can download executable binary file from [releases](https://github.com/HDT3213/rdb/releases) and put its path to\nPATH environment.\n\nuse `rdb` command in terminal, you can see it's manual\n\n```\nThis is a tool to parse Redis' RDB files\nOptions:\n  -c command, including: json/memory/aof/bigkey/flamegraph\n  -o output file path\n  -n number of result, using in \n  -port listen port for flame graph web service\n  -sep separator for flamegraph, rdb will separate key by it, default value is \":\". \n                supporting multi separators: -sep sep1 -sep sep2 \n  -regex using regex expression filter keys\n  -no-expired filter expired keys\n\nExamples:\nparameters between '[' and ']' is optional\n1. convert rdb to json\n  rdb -c json -o dump.json dump.rdb\n2. generate memory report\n  rdb -c memory -o memory.csv dump.rdb\n3. convert to aof file\n  rdb -c aof -o dump.aof dump.rdb\n4. get largest keys\n  rdb -c bigkey [-o dump.aof] [-n 10] dump.rdb\n5. draw flamegraph\n  rdb -c flamegraph [-port 16379] [-sep :] dump.rdb\n```\n\n# Convert to Json\n\nUsage:\n\n```\nrdb -c json -o <output_path> <source_path>\n```\n\nexample:\n\n```\nrdb -c json -o intset_16.json cases/intset_16.rdb\n```\n\nYou can get some rdb examples in [cases](https://github.com/HDT3213/rdb/tree/master/cases)\n\nThe examples for json result:\n\n```json\n[\n    {\"db\":0,\"key\":\"hash\",\"size\":64,\"type\":\"hash\",\"hash\":{\"ca32mbn2k3tp41iu\":\"ca32mbn2k3tp41iu\",\"mddbhxnzsbklyp8c\":\"mddbhxnzsbklyp8c\"}},\n    {\"db\":0,\"key\":\"string\",\"size\":10,\"type\":\"string\",\"value\":\"aaaaaaa\"},\n    {\"db\":0,\"key\":\"expiration\",\"expiration\":\"2022-02-18T06:15:29.18+08:00\",\"size\":8,\"type\":\"string\",\"value\":\"zxcvb\"},\n    {\"db\":0,\"key\":\"list\",\"expiration\":\"2022-02-18T06:15:29.18+08:00\",\"size\":66,\"type\":\"list\",\"values\":[\"7fbn7xhcnu\",\"lmproj6c2e\",\"e5lom29act\",\"yy3ux925do\"]},\n    {\"db\":0,\"key\":\"zset\",\"expiration\":\"2022-02-18T06:15:29.18+08:00\",\"size\":57,\"type\":\"zset\",\"entries\":[{\"member\":\"zn4ejjo4ths63irg\",\"score\":1},{\"member\":\"1ik4jifkg6olxf5n\",\"score\":2}]},\n    {\"db\":0,\"key\":\"set\",\"expiration\":\"2022-02-18T06:15:29.18+08:00\",\"size\":39,\"type\":\"set\",\"members\":[\"2hzm5rnmkmwb3zqd\",\"tdje6bk22c6ddlrw\"]}\n]\n```\n\n# Generate Memory Report\n\nRDB uses rdb encoded size to estimate redis memory usage.\n\n```\nrdb -c memory -o <output_path> <source_path>\n```\n\nExample:\n\n```\nrdb -c memory -o mem.csv cases/memory.rdb\n```\n\nThe examples for csv result:\n\n```csv\ndatabase,key,type,size,size_readable,element_count\n0,hash,hash,64,64B,2\n0,s,string,10,10B,0\n0,e,string,8,8B,0\n0,list,list,66,66B,4\n0,zset,zset,57,57B,2\n0,large,string,2056,2K,0\n0,set,set,39,39B,2\n```\n\n# Flame Graph\n\nIn many cases there is not a few very large key but lots of small keys that occupied most memory.\n\nRDB tool could separate keys by the given delimeters, then aggregate keys with same prefix.\n\nFinally RDB tool presents the result as flame graph, with which you could find out which kind of keys consumed most\nmemory.\n\n![截屏2022-10-30 12.06.00.png](https://s2.loli.net/2022/11/08/HW9ZxGfeEzArUhM.png)\n\nIn this example, the keys of pattern `Comment:*` use 8.463% memory.\n\nUsage:\n\n```\nrdb -c flamegraph [-port <port>] [-sep <separator1>] [-sep <separator2>] <source_path>\n```\n\nExample:\n\n```\nrdb -c flamegraph -port 16379 -sep : dump.rdb\n```\n\n# Find The Biggest Keys\n\nRDB can find biggest N keys in file\n\n```\nrdb -c bigkey -n <result_number> <source_path>\n```\n\nExample:\n\n```\nrdb -c bigkey -n 5 cases/memory.rdb\n```\n\nThe examples for csv result:\n\n```csv\ndatabase,key,type,size,size_readable,element_count\n0,large,string,2056,2K,0\n0,list,list,66,66B,4\n0,hash,hash,64,64B,2\n0,zset,zset,57,57B,2\n0,set,set,39,39B,2\n```\n\n# Convert to AOF\n\nUsage:\n\n```\nrdb -c aof -o <output_path> <source_path>\n```\n\nExample:\n\n```\nrdb -c aof -o mem.aof cases/memory.rdb\n```\n\nThe examples for aof result:\n\n```\n*3\n$3\nSET\n$1\ns\n$7\naaaaaaa\n```\n\n# Regex Filter\n\nRDB tool supports using regex expression to filter keys.\n\nExample:\n```rdb\nrdb -c json -o regex.json -regex '^l.*' cases/memory.rdb\n```\n\n# Customize data usage\n\n```go\npackage main\n\nimport (\n\t\"github.com/hdt3213/rdb/parser\"\n\t\"os\"\n)\n\nfunc main() {\n\trdbFile, err := os.Open(\"dump.rdb\")\n\tif err != nil {\n\t\tpanic(\"open dump.rdb failed\")\n\t}\n\tdefer func() {\n\t\t_ = rdbFile.Close()\n\t}()\n\tdecoder := parser.NewDecoder(rdbFile)\n\terr = decoder.Parse(func(o parser.RedisObject) bool {\n\t\tswitch o.GetType() {\n\t\tcase parser.StringType:\n\t\t\tstr := o.(*parser.StringObject)\n\t\t\tprintln(str.Key, str.Value)\n\t\tcase parser.ListType:\n\t\t\tlist := o.(*parser.ListObject)\n\t\t\tprintln(list.Key, list.Values)\n\t\tcase parser.HashType:\n\t\t\thash := o.(*parser.HashObject)\n\t\t\tprintln(hash.Key, hash.Hash)\n\t\tcase parser.ZSetType:\n\t\t\tzset := o.(*parser.ZSetObject)\n\t\t\tprintln(zset.Key, zset.Entries)\n\t\t}\n\t\t// return true to continue, return false to stop the iteration\n\t\treturn true\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n```\n\n# Generate RDB file\n\nThis library can generate RDB file: \n\n```go\npackage main\n\nimport (\n\t\"github.com/hdt3213/rdb/encoder\"\n\t\"github.com/hdt3213/rdb/model\"\n\t\"os\"\n\t\"time\"\n)\n\nfunc main() {\n\trdbFile, err := os.Create(\"dump.rdb\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer rdbFile.Close()\n\tenc := encoder.NewEncoder(rdbFile)\n\terr = enc.WriteHeader()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tauxMap := map[string]string{\n\t\t\"redis-ver\":    \"4.0.6\",\n\t\t\"redis-bits\":   \"64\",\n\t\t\"aof-preamble\": \"0\",\n\t}\n\tfor k, v := range auxMap {\n\t\terr = enc.WriteAux(k, v)\n\t\tif err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}\n\n\terr = enc.WriteDBHeader(0, 5, 1)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\texpirationMs := uint64(time.Now().Add(time.Hour*8).Unix() * 1000)\n\terr = enc.WriteStringObject(\"hello\", []byte(\"world\"), encoder.WithTTL(expirationMs))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\terr = enc.WriteListObject(\"list\", [][]byte{\n\t\t[]byte(\"123\"),\n\t\t[]byte(\"abc\"),\n\t\t[]byte(\"la la la\"),\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\terr = enc.WriteSetObject(\"set\", [][]byte{\n\t\t[]byte(\"123\"),\n\t\t[]byte(\"abc\"),\n\t\t[]byte(\"la la la\"),\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\terr = enc.WriteHashMapObject(\"list\", map[string][]byte{\n\t\t\"1\":  []byte(\"123\"),\n\t\t\"a\":  []byte(\"abc\"),\n\t\t\"la\": []byte(\"la la la\"),\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\terr = enc.WriteZSetObject(\"list\", []*model.ZSetEntry{\n\t\t{\n\t\t\tScore: 1.234,\n\t\t\tMember: \"a\",\n\t\t},\n\t\t{\n\t\t\tScore: 2.71828,\n\t\t\tMember: \"b\",\n\t\t},\n\t})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\terr = enc.WriteEnd()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n```\n\n# Benchmark\n\nTested on MacBook Pro (16-inch, 2019) 2.6 GHz 6cores Intel Core i7, using  a 1.3 GB RDB file encoded with v9 format from Redis 5.0 in production environment.\n\n|usage|elapsed|speed|\n|:-:|:-:|:-:|\n|ToJson|74.12s|17.96MB/s|\n|Memory|18.585s|71.62MB/s|\n|AOF|104.77s|12.76MB/s|\n|Top10|14.8s|89.95MB/s|\n|FlameGraph|21.83s|60.98MB/s|"
}
