{
  "name": "fzf",
  "full_name": "fzf",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Command-line fuzzy finder written in Go",
  "license": "MIT",
  "homepage": "https://github.com/junegunn/fzf",
  "versions": {
    "stable": "0.42.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/junegunn/fzf/archive/0.42.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "743c1bfc7851b0796ab73c6da7db09d915c2b54c0dd3e8611308985af8ed3df2"
    },
    "head": {
      "url": "https://github.com/junegunn/fzf.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fzf/blobs/sha256:007ac5ffcfa1cbf733393fe35d5daf3647e07865f04d31d6c442fb8de936d219",
          "sha256": "007ac5ffcfa1cbf733393fe35d5daf3647e07865f04d31d6c442fb8de936d219"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fzf/blobs/sha256:007ac5ffcfa1cbf733393fe35d5daf3647e07865f04d31d6c442fb8de936d219",
          "sha256": "007ac5ffcfa1cbf733393fe35d5daf3647e07865f04d31d6c442fb8de936d219"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fzf/blobs/sha256:007ac5ffcfa1cbf733393fe35d5daf3647e07865f04d31d6c442fb8de936d219",
          "sha256": "007ac5ffcfa1cbf733393fe35d5daf3647e07865f04d31d6c442fb8de936d219"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fzf/blobs/sha256:5cd9be92ee93dd44fecaaec2528656d609ef968ca1529fbf01720afbff5dfdcd",
          "sha256": "5cd9be92ee93dd44fecaaec2528656d609ef968ca1529fbf01720afbff5dfdcd"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fzf/blobs/sha256:5cd9be92ee93dd44fecaaec2528656d609ef968ca1529fbf01720afbff5dfdcd",
          "sha256": "5cd9be92ee93dd44fecaaec2528656d609ef968ca1529fbf01720afbff5dfdcd"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fzf/blobs/sha256:5cd9be92ee93dd44fecaaec2528656d609ef968ca1529fbf01720afbff5dfdcd",
          "sha256": "5cd9be92ee93dd44fecaaec2528656d609ef968ca1529fbf01720afbff5dfdcd"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fzf/blobs/sha256:2c7586893fbacc5e1755ecb44dae017b283bd45a6a28017409396ea950116dd3",
          "sha256": "2c7586893fbacc5e1755ecb44dae017b283bd45a6a28017409396ea950116dd3"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "ncurses"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": "To install useful keybindings and fuzzy completion:\n  $HOMEBREW_PREFIX/opt/fzf/install\n\nTo use fzf in Vim, add the following line to your .vimrc:\n  set rtp+=$HOMEBREW_PREFIX/opt/fzf\n",
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/fzf.rb",
  "ruby_source_checksum": {
    "sha256": "b95eeb7482e5348a0e44daffffa4d8fa46368a216c4bb861e9ebd1a18ed591c1"
  },
  "date_added": "2014-03-09T12:30:39+00:00",
  "readme": "<img src=\"https://raw.githubusercontent.com/junegunn/i/master/fzf.png\" height=\"170\" alt=\"fzf - a command-line fuzzy finder\"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)\n===\n\nfzf is a general-purpose command-line fuzzy finder.\n\n<img src=\"https://raw.githubusercontent.com/junegunn/i/master/fzf-preview.png\" width=640>\n\nIt's an interactive Unix filter for command-line that can be used with any\nlist; files, command history, processes, hostnames, bookmarks, git commits,\netc.\n\nPros\n----\n\n- Portable, no dependencies\n- Blazingly fast\n- The most comprehensive feature set\n- Flexible layout\n- Batteries included\n    - Vim/Neovim plugin, key bindings, and fuzzy auto-completion\n\nSponsors ❤️\n-----------\n\nI would like to thank all the sponsors of this project who make it possible for me to continue to improve fzf.\n\nIf you'd like to sponsor this project, please visit https://github.com/sponsors/junegunn.\n\n<!-- sponsors --><a href=\"https://github.com/miyanokomiya\"><img src=\"https://github.com/miyanokomiya.png\" width=\"60px\" alt=\"miyanokomiya\" /></a><a href=\"https://github.com/jonhoo\"><img src=\"https://github.com/jonhoo.png\" width=\"60px\" alt=\"Jon Gjengset\" /></a><a href=\"https://github.com/AceofSpades5757\"><img src=\"https://github.com/AceofSpades5757.png\" width=\"60px\" alt=\"Kyle L. Davis\" /></a><a href=\"https://github.com/Frederick888\"><img src=\"https://github.com/Frederick888.png\" width=\"60px\" alt=\"Frederick Zhang\" /></a><a href=\"https://github.com/moritzdietz\"><img src=\"https://github.com/moritzdietz.png\" width=\"60px\" alt=\"Moritz Dietz\" /></a><a href=\"https://github.com/mikker\"><img src=\"https://github.com/mikker.png\" width=\"60px\" alt=\"Mikkel Malmberg\" /></a><a href=\"https://github.com/dfsnow\"><img src=\"https://github.com/dfsnow.png\" width=\"60px\" alt=\"Dan Snow\" /></a><a href=\"https://github.com/pldubouilh\"><img src=\"https://github.com/pldubouilh.png\" width=\"60px\" alt=\"Pierre Dubouilh\" /></a><a href=\"https://github.com/rcorre\"><img src=\"https://github.com/rcorre.png\" width=\"60px\" alt=\"Ryan Roden-Corrent\" /></a><a href=\"https://github.com/getsentry\"><img src=\"https://github.com/getsentry.png\" width=\"60px\" alt=\"Sentry\" /></a><a href=\"https://github.com/blissdev\"><img src=\"https://github.com/blissdev.png\" width=\"60px\" alt=\"Jordan Arentsen\" /></a><a href=\"https://github.com/mislav\"><img src=\"https://github.com/mislav.png\" width=\"60px\" alt=\"Mislav Marohnić\" /></a><a href=\"https://github.com/aexvir\"><img src=\"https://github.com/aexvir.png\" width=\"60px\" alt=\"Alex Viscreanu\" /></a><a href=\"https://github.com/dbalatero\"><img src=\"https://github.com/dbalatero.png\" width=\"60px\" alt=\"David Balatero\" /></a><a href=\"https://github.com/comatory\"><img src=\"https://github.com/comatory.png\" width=\"60px\" alt=\"Ondrej Synacek\" /></a><a href=\"https://github.com/moobar\"><img src=\"https://github.com/moobar.png\" width=\"60px\" alt=\"\" /></a><a href=\"https://github.com/majjoha\"><img src=\"https://github.com/majjoha.png\" width=\"60px\" alt=\"Mathias Jean Johansen\" /></a><a href=\"https://github.com/benelan\"><img src=\"https://github.com/benelan.png\" width=\"60px\" alt=\"Ben Elan\" /></a><a href=\"https://github.com/jryom\"><img src=\"https://github.com/jryom.png\" width=\"60px\" alt=\"Jesper\" /></a><a href=\"https://github.com/nckmrnv\"><img src=\"https://github.com/nckmrnv.png\" width=\"60px\" alt=\"Nikolay Marinov\" /></a><a href=\"https://github.com/pawelduda\"><img src=\"https://github.com/pawelduda.png\" width=\"60px\" alt=\"Paweł Duda\" /></a><a href=\"https://github.com/slezica\"><img src=\"https://github.com/slezica.png\" width=\"60px\" alt=\"Santiago Lezica\" /></a><a href=\"https://github.com/pbwn\"><img src=\"https://github.com/pbwn.png\" width=\"60px\" alt=\"\" /></a><a href=\"https://github.com/timgluz\"><img src=\"https://github.com/timgluz.png\" width=\"60px\" alt=\"Timo Sulg\" /></a><a href=\"https://github.com/seanmorton\"><img src=\"https://github.com/seanmorton.png\" width=\"60px\" alt=\"Sean Morton\" /></a><a href=\"https://github.com/pyrho\"><img src=\"https://github.com/pyrho.png\" width=\"60px\" alt=\"Damien Rajon\" /></a><a href=\"https://github.com/ArtBIT\"><img src=\"https://github.com/ArtBIT.png\" width=\"60px\" alt=\"ArtBIT\" /></a><a href=\"https://github.com/da-moon\"><img src=\"https://github.com/da-moon.png\" width=\"60px\" alt=\"\" /></a><a href=\"https://github.com/hovissimo\"><img src=\"https://github.com/hovissimo.png\" width=\"60px\" alt=\"Hovis\" /></a><a href=\"https://github.com/dariusjonda\"><img src=\"https://github.com/dariusjonda.png\" width=\"60px\" alt=\"Darius Jonda\" /></a><a href=\"https://github.com/cristiand391\"><img src=\"https://github.com/cristiand391.png\" width=\"60px\" alt=\"Cristian Dominguez\" /></a><a href=\"https://github.com/eliangcs\"><img src=\"https://github.com/eliangcs.png\" width=\"60px\" alt=\"Chang-Hung Liang\" /></a><a href=\"https://github.com/raveensrk\"><img src=\"https://github.com/raveensrk.png\" width=\"60px\" alt=\"Raveen Kumar\" /></a><a href=\"https://github.com/asphaltbuffet\"><img src=\"https://github.com/asphaltbuffet.png\" width=\"60px\" alt=\"Ben Lechlitner\" /></a><a href=\"https://github.com/BenSandeen\"><img src=\"https://github.com/BenSandeen.png\" width=\"60px\" alt=\"\" /></a><!-- sponsors -->\n\nTable of Contents\n-----------------\n\n<!-- vim-markdown-toc GFM -->\n\n* [Installation](#installation)\n    * [Using Homebrew](#using-homebrew)\n    * [Using git](#using-git)\n    * [Using Linux package managers](#using-linux-package-managers)\n    * [Windows](#windows)\n    * [As Vim plugin](#as-vim-plugin)\n* [Upgrading fzf](#upgrading-fzf)\n* [Building fzf](#building-fzf)\n* [Usage](#usage)\n    * [Using the finder](#using-the-finder)\n    * [Layout](#layout)\n    * [Search syntax](#search-syntax)\n    * [Environment variables](#environment-variables)\n    * [Options](#options)\n    * [Demo](#demo)\n* [Examples](#examples)\n* [`fzf-tmux` script](#fzf-tmux-script)\n* [Key bindings for command-line](#key-bindings-for-command-line)\n* [Fuzzy completion for bash and zsh](#fuzzy-completion-for-bash-and-zsh)\n    * [Files and directories](#files-and-directories)\n    * [Process IDs](#process-ids)\n    * [Host names](#host-names)\n    * [Environment variables / Aliases](#environment-variables--aliases)\n    * [Settings](#settings)\n    * [Supported commands](#supported-commands)\n    * [Custom fuzzy completion](#custom-fuzzy-completion)\n* [Vim plugin](#vim-plugin)\n* [Advanced topics](#advanced-topics)\n    * [Performance](#performance)\n    * [Executing external programs](#executing-external-programs)\n    * [Turning into a different process](#turning-into-a-different-process)\n    * [Reloading the candidate list](#reloading-the-candidate-list)\n        * [1. Update the list of processes by pressing CTRL-R](#1-update-the-list-of-processes-by-pressing-ctrl-r)\n        * [2. Switch between sources by pressing CTRL-D or CTRL-F](#2-switch-between-sources-by-pressing-ctrl-d-or-ctrl-f)\n        * [3. Interactive ripgrep integration](#3-interactive-ripgrep-integration)\n    * [Preview window](#preview-window)\n* [Tips](#tips)\n    * [Respecting `.gitignore`](#respecting-gitignore)\n    * [Fish shell](#fish-shell)\n* [Related projects](#related-projects)\n* [License](#license)\n\n<!-- vim-markdown-toc -->\n\nInstallation\n------------\n\nfzf project consists of the following components:\n\n- `fzf` executable\n- `fzf-tmux` script for launching fzf in a tmux pane\n- Shell extensions\n    - Key bindings (`CTRL-T`, `CTRL-R`, and `ALT-C`) (bash, zsh, fish)\n    - Fuzzy auto-completion (bash, zsh)\n- Vim/Neovim plugin\n\nYou can [download fzf executable][bin] alone if you don't need the extra\nstuff.\n\n[bin]: https://github.com/junegunn/fzf/releases\n\n### Using Homebrew\n\nYou can use [Homebrew](https://brew.sh/) (on macOS or Linux)\nto install fzf.\n\n```sh\nbrew install fzf\n\n# To install useful key bindings and fuzzy completion:\n$(brew --prefix)/opt/fzf/install\n```\n\nfzf is also available [via MacPorts][portfile]: `sudo port install fzf`\n\n[portfile]: https://github.com/macports/macports-ports/blob/master/sysutils/fzf/Portfile\n\n### Using git\n\nAlternatively, you can \"git clone\" this repository to any directory and run\n[install](https://github.com/junegunn/fzf/blob/master/install) script.\n\n```sh\ngit clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf\n~/.fzf/install\n```\n\n### Using Linux package managers\n\n| Package Manager | Linux Distribution      | Command                            |\n| ---             | ---                     | ---                                |\n| APK             | Alpine Linux            | `sudo apk add fzf`                 |\n| APT             | Debian 9+/Ubuntu 19.10+ | `sudo apt install fzf`             |\n| Conda           |                         | `conda install -c conda-forge fzf` |\n| DNF             | Fedora                  | `sudo dnf install fzf`             |\n| Nix             | NixOS, etc.             | `nix-env -iA nixpkgs.fzf`          |\n| Pacman          | Arch Linux              | `sudo pacman -S fzf`               |\n| pkg             | FreeBSD                 | `pkg install fzf`                  |\n| pkgin           | NetBSD                  | `pkgin install fzf`                |\n| pkg_add         | OpenBSD                 | `pkg_add fzf`                      |\n| Portage         | Gentoo                  | `emerge --ask app-shells/fzf`      |\n| XBPS            | Void Linux              | `sudo xbps-install -S fzf`         |\n| Zypper          | openSUSE                | `sudo zypper install fzf`          |\n\n> :warning: **Key bindings (CTRL-T / CTRL-R / ALT-C) and fuzzy auto-completion\n> may not be enabled by default.**\n>\n> Refer to the package documentation for more information. (e.g. `apt show fzf`)\n\n[![Packaging status](https://repology.org/badge/vertical-allrepos/fzf.svg)](https://repology.org/project/fzf/versions)\n\n### Windows\n\nPre-built binaries for Windows can be downloaded [here][bin]. fzf is also\navailable via [Chocolatey][choco], [Scoop][scoop], and [Winget][winget]:\n\n| Package manager | Command              |\n| ---             | ---                  |\n| Chocolatey      | `choco install fzf`  |\n| Scoop           | `scoop install fzf`  |\n| Winget          | `winget install fzf` |\n\n[choco]: https://chocolatey.org/packages/fzf\n[scoop]: https://github.com/ScoopInstaller/Main/blob/master/bucket/fzf.json\n[winget]: https://github.com/microsoft/winget-pkgs/tree/master/manifests/j/junegunn/fzf\n\nKnown issues and limitations on Windows can be found on [the wiki\npage][windows-wiki].\n\n[windows-wiki]: https://github.com/junegunn/fzf/wiki/Windows\n\n### As Vim plugin\n\nIf you use\n[vim-plug](https://github.com/junegunn/vim-plug), add this line to your Vim\nconfiguration file:\n\n```vim\nPlug 'junegunn/fzf', { 'do': { -> fzf#install() } }\n```\n\n`fzf#install()` makes sure that you have the latest binary, but it's optional,\nso you can omit it if you use a plugin manager that doesn't support hooks.\n\nFor more installation options, see [README-VIM.md](README-VIM.md).\n\nUpgrading fzf\n-------------\n\nfzf is being actively developed, and you might want to upgrade it once in a\nwhile. Please follow the instruction below depending on the installation\nmethod used.\n\n- git: `cd ~/.fzf && git pull && ./install`\n- brew: `brew update; brew upgrade fzf`\n- macports: `sudo port upgrade fzf`\n- chocolatey: `choco upgrade fzf`\n- vim-plug: `:PlugUpdate fzf`\n\nBuilding fzf\n------------\n\nSee [BUILD.md](BUILD.md).\n\nUsage\n-----\n\nfzf will launch interactive finder, read the list from STDIN, and write the\nselected item to STDOUT.\n\n```sh\nfind * -type f | fzf > selected\n```\n\nWithout STDIN pipe, fzf will use find command to fetch the list of\nfiles excluding hidden ones. (You can override the default command with\n`FZF_DEFAULT_COMMAND`)\n\n```sh\nvim $(fzf)\n```\n\n> *:bulb: A more robust solution would be to use `xargs` but we've presented\n> the above as it's easier to grasp*\n> ```sh\n> fzf --print0 | xargs -0 -o vim\n> ```\n\n>\n> *:bulb: fzf also has the ability to turn itself into a different process.*\n>\n> ```sh\n> fzf --bind 'enter:become(vim {})'\n> ```\n>\n> *See [Turning into a different process](#turning-into-a-different-process)\n> for more information.*\n\n### Using the finder\n\n- `CTRL-K` / `CTRL-J` (or `CTRL-P` / `CTRL-N`) to move cursor up and down\n- `Enter` key to select the item, `CTRL-C` / `CTRL-G` / `ESC` to exit\n- On multi-select mode (`-m`), `TAB` and `Shift-TAB` to mark multiple items\n- Emacs style key bindings\n- Mouse: scroll, click, double-click; shift-click and shift-scroll on\n  multi-select mode\n\n### Layout\n\nfzf by default starts in fullscreen mode, but you can make it start below the\ncursor with `--height` option.\n\n```sh\nvim $(fzf --height 40%)\n```\n\nAlso, check out `--reverse` and `--layout` options if you prefer\n\"top-down\" layout instead of the default \"bottom-up\" layout.\n\n```sh\nvim $(fzf --height 40% --reverse)\n```\n\nYou can add these options to `$FZF_DEFAULT_OPTS` so that they're applied by\ndefault. For example,\n\n```sh\nexport FZF_DEFAULT_OPTS='--height 40% --layout=reverse --border'\n```\n\n### Search syntax\n\nUnless otherwise specified, fzf starts in \"extended-search mode\" where you can\ntype in multiple search terms delimited by spaces. e.g. `^music .mp3$ sbtrkt\n!fire`\n\n| Token     | Match type                 | Description                          |\n| --------- | -------------------------- | ------------------------------------ |\n| `sbtrkt`  | fuzzy-match                | Items that match `sbtrkt`            |\n| `'wild`   | exact-match (quoted)       | Items that include `wild`            |\n| `^music`  | prefix-exact-match         | Items that start with `music`        |\n| `.mp3$`   | suffix-exact-match         | Items that end with `.mp3`           |\n| `!fire`   | inverse-exact-match        | Items that do not include `fire`     |\n| `!^music` | inverse-prefix-exact-match | Items that do not start with `music` |\n| `!.mp3$`  | inverse-suffix-exact-match | Items that do not end with `.mp3`    |\n\nIf you don't prefer fuzzy matching and do not wish to \"quote\" every word,\nstart fzf with `-e` or `--exact` option. Note that when  `--exact` is set,\n`'`-prefix \"unquotes\" the term.\n\nA single bar character term acts as an OR operator. For example, the following\nquery matches entries that start with `core` and end with either `go`, `rb`,\nor `py`.\n\n```\n^core go$ | rb$ | py$\n```\n\n### Environment variables\n\n- `FZF_DEFAULT_COMMAND`\n    - Default command to use when input is tty\n    - e.g. `export FZF_DEFAULT_COMMAND='fd --type f'`\n    - > :warning: This variable is not used by shell extensions due to the\n      > slight difference in requirements.\n      >\n      > (e.g. `CTRL-T` runs `$FZF_CTRL_T_COMMAND` instead, `vim **<tab>` runs\n      > `_fzf_compgen_path()`, and `cd **<tab>` runs `_fzf_compgen_dir()`)\n      >\n      > The available options are described later in this document.\n- `FZF_DEFAULT_OPTS`\n    - Default options\n    - e.g. `export FZF_DEFAULT_OPTS=\"--layout=reverse --inline-info\"`\n\n### Options\n\nSee the man page (`man fzf`) for the full list of options.\n\n### Demo\nIf you learn by watching videos, check out this screencast by [@samoshkin](https://github.com/samoshkin) to explore `fzf` features.\n\n<a title=\"fzf - command-line fuzzy finder\" href=\"https://www.youtube.com/watch?v=qgG5Jhi_Els\">\n  <img src=\"https://i.imgur.com/vtG8olE.png\" width=\"640\">\n</a>\n\nExamples\n--------\n\n* [Wiki page of examples](https://github.com/junegunn/fzf/wiki/examples)\n    * *Disclaimer: The examples on this page are maintained by the community\n      and are not thoroughly tested*\n* [Advanced fzf examples](https://github.com/junegunn/fzf/blob/master/ADVANCED.md)\n\n`fzf-tmux` script\n-----------------\n\n[fzf-tmux](bin/fzf-tmux) is a bash script that opens fzf in a tmux pane.\n\n```sh\n# usage: fzf-tmux [LAYOUT OPTIONS] [--] [FZF OPTIONS]\n\n# See available options\nfzf-tmux --help\n\n# select git branches in horizontal split below (15 lines)\ngit branch | fzf-tmux -d 15\n\n# select multiple words in vertical split on the left (20% of screen width)\ncat /usr/share/dict/words | fzf-tmux -l 20% --multi --reverse\n```\n\nIt will still work even when you're not on tmux, silently ignoring `-[pudlr]`\noptions, so you can invariably use `fzf-tmux` in your scripts.\n\nAlternatively, you can use `--height HEIGHT[%]` option not to start fzf in\nfullscreen mode.\n\n```sh\nfzf --height 40%\n```\n\nKey bindings for command-line\n-----------------------------\n\nThe install script will setup the following key bindings for bash, zsh, and\nfish.\n\n- `CTRL-T` - Paste the selected files and directories onto the command-line\n    - Set `FZF_CTRL_T_COMMAND` to override the default command\n    - Set `FZF_CTRL_T_OPTS` to pass additional options to fzf\n      ```sh\n      # Preview file content using bat (https://github.com/sharkdp/bat)\n      export FZF_CTRL_T_OPTS=\"\n        --preview 'bat -n --color=always {}'\n        --bind 'ctrl-/:change-preview-window(down|hidden|)'\"\n      ```\n- `CTRL-R` - Paste the selected command from history onto the command-line\n    - If you want to see the commands in chronological order, press `CTRL-R`\n      again which toggles sorting by relevance\n    - Set `FZF_CTRL_R_OPTS` to pass additional options to fzf\n      ```sh\n      # CTRL-/ to toggle small preview window to see the full command\n      # CTRL-Y to copy the command into clipboard using pbcopy\n      export FZF_CTRL_R_OPTS=\"\n        --preview 'echo {}' --preview-window up:3:hidden:wrap\n        --bind 'ctrl-/:toggle-preview'\n        --bind 'ctrl-y:execute-silent(echo -n {2..} | pbcopy)+abort'\n        --color header:italic\n        --header 'Press CTRL-Y to copy command into clipboard'\"\n      ```\n- `ALT-C` - cd into the selected directory\n    - Set `FZF_ALT_C_COMMAND` to override the default command\n    - Set `FZF_ALT_C_OPTS` to pass additional options to fzf\n      ```sh\n      # Print tree structure in the preview window\n      export FZF_ALT_C_OPTS=\"--preview 'tree -C {}'\"\n      ```\n\nIf you're on a tmux session, you can start fzf in a tmux split-pane or in\na tmux popup window by setting `FZF_TMUX_OPTS` (e.g. `export FZF_TMUX_OPTS='-p80%,60%'`).\nSee `fzf-tmux --help` for available options.\n\nMore tips can be found on [the wiki page](https://github.com/junegunn/fzf/wiki/Configuring-shell-key-bindings).\n\nFuzzy completion for bash and zsh\n---------------------------------\n\n### Files and directories\n\nFuzzy completion for files and directories can be triggered if the word before\nthe cursor ends with the trigger sequence, which is by default `**`.\n\n- `COMMAND [DIRECTORY/][FUZZY_PATTERN]**<TAB>`\n\n```sh\n# Files under the current directory\n# - You can select multiple items with TAB key\nvim **<TAB>\n\n# Files under parent directory\nvim ../**<TAB>\n\n# Files under parent directory that match `fzf`\nvim ../fzf**<TAB>\n\n# Files under your home directory\nvim ~/**<TAB>\n\n\n# Directories under current directory (single-selection)\ncd **<TAB>\n\n# Directories under ~/github that match `fzf`\ncd ~/github/fzf**<TAB>\n```\n\n### Process IDs\n\nFuzzy completion for PIDs is provided for kill command.\n\n```sh\n# Can select multiple processes with <TAB> or <Shift-TAB> keys\nkill -9 **<TAB>\n```\n\n### Host names\n\nFor ssh and telnet commands, fuzzy completion for hostnames is provided. The\nnames are extracted from /etc/hosts and ~/.ssh/config.\n\n```sh\nssh **<TAB>\ntelnet **<TAB>\n```\n\n### Environment variables / Aliases\n\n```sh\nunset **<TAB>\nexport **<TAB>\nunalias **<TAB>\n```\n\n### Settings\n\n```sh\n# Use ~~ as the trigger sequence instead of the default **\nexport FZF_COMPLETION_TRIGGER='~~'\n\n# Options to fzf command\nexport FZF_COMPLETION_OPTS='--border --info=inline'\n\n# Use fd (https://github.com/sharkdp/fd) instead of the default find\n# command for listing path candidates.\n# - The first argument to the function ($1) is the base path to start traversal\n# - See the source code (completion.{bash,zsh}) for the details.\n_fzf_compgen_path() {\n  fd --hidden --follow --exclude \".git\" . \"$1\"\n}\n\n# Use fd to generate the list for directory completion\n_fzf_compgen_dir() {\n  fd --type d --hidden --follow --exclude \".git\" . \"$1\"\n}\n\n# Advanced customization of fzf options via _fzf_comprun function\n# - The first argument to the function is the name of the command.\n# - You should make sure to pass the rest of the arguments to fzf.\n_fzf_comprun() {\n  local command=$1\n  shift\n\n  case \"$command\" in\n    cd)           fzf --preview 'tree -C {} | head -200'   \"$@\" ;;\n    export|unset) fzf --preview \"eval 'echo \\$'{}\"         \"$@\" ;;\n    ssh)          fzf --preview 'dig {}'                   \"$@\" ;;\n    *)            fzf --preview 'bat -n --color=always {}' \"$@\" ;;\n  esac\n}\n```\n\n### Supported commands\n\nOn bash, fuzzy completion is enabled only for a predefined set of commands\n(`complete | grep _fzf` to see the list). But you can enable it for other\ncommands as well by using `_fzf_setup_completion` helper function.\n\n```sh\n# usage: _fzf_setup_completion path|dir|var|alias|host COMMANDS...\n_fzf_setup_completion path ag git kubectl\n_fzf_setup_completion dir tree\n```\n\n### Custom fuzzy completion\n\n_**(Custom completion API is experimental and subject to change)**_\n\nFor a command named _\"COMMAND\"_, define `_fzf_complete_COMMAND` function using\n`_fzf_complete` helper.\n\n```sh\n# Custom fuzzy completion for \"doge\" command\n#   e.g. doge **<TAB>\n_fzf_complete_doge() {\n  _fzf_complete --multi --reverse --prompt=\"doge> \" -- \"$@\" < <(\n    echo very\n    echo wow\n    echo such\n    echo doge\n  )\n}\n```\n\n- The arguments before `--` are the options to fzf.\n- After `--`, simply pass the original completion arguments unchanged (`\"$@\"`).\n- Then, write a set of commands that generates the completion candidates and\n  feed its output to the function using process substitution (`< <(...)`).\n\nzsh will automatically pick up the function using the naming convention but in\nbash you have to manually associate the function with the command using the\n`complete` command.\n\n```sh\n[ -n \"$BASH\" ] && complete -F _fzf_complete_doge -o default -o bashdefault doge\n```\n\nIf you need to post-process the output from fzf, define\n`_fzf_complete_COMMAND_post` as follows.\n\n```sh\n_fzf_complete_foo() {\n  _fzf_complete --multi --reverse --header-lines=3 -- \"$@\" < <(\n    ls -al\n  )\n}\n\n_fzf_complete_foo_post() {\n  awk '{print $NF}'\n}\n\n[ -n \"$BASH\" ] && complete -F _fzf_complete_foo -o default -o bashdefault foo\n```\n\nVim plugin\n----------\n\nSee [README-VIM.md](README-VIM.md).\n\nAdvanced topics\n---------------\n\n### Performance\n\nfzf is fast. Performance should not be a problem in most use cases. However,\nyou might want to be aware of the options that can affect performance.\n\n- `--ansi` tells fzf to extract and parse ANSI color codes in the input, and it\n  makes the initial scanning slower. So it's not recommended that you add it\n  to your `$FZF_DEFAULT_OPTS`.\n- `--nth` makes fzf slower because it has to tokenize each line.\n- `--with-nth` makes fzf slower as fzf has to tokenize and reassemble each\n  line.\n\n### Executing external programs\n\nYou can set up key bindings for starting external processes without leaving\nfzf (`execute`, `execute-silent`).\n\n```bash\n# Press F1 to open the file with less without leaving fzf\n# Press CTRL-Y to copy the line to clipboard and aborts fzf (requires pbcopy)\nfzf --bind 'f1:execute(less -f {}),ctrl-y:execute-silent(echo {} | pbcopy)+abort'\n```\n\nSee *KEY BINDINGS* section of the man page for details.\n\n### Turning into a different process\n\n`become(...)` is similar to `execute(...)`/`execute-silent(...)` described\nabove, but instead of executing the command and coming back to fzf on\ncomplete, it turns fzf into a new process for the command.\n\n```sh\nfzf --bind 'enter:become(vim {})'\n```\n\nCompared to the seemingly equivalent command substitution `vim \"$(fzf)\"`, this\napproach has several advantages:\n\n* Vim will not open an empty file when you terminate fzf with\n  <kbd>CTRL-C</kbd>\n* Vim will not open an empty file when you press <kbd>ENTER</kbd> on an empty\n  result\n* Can handle multiple selections even when they have whitespaces\n  ```sh\n  fzf --multi --bind 'enter:become(vim {+})'\n  ```\n\nTo be fair, running `fzf --print0 | xargs -0 -o vim` instead of `vim \"$(fzf)\"`\nresolves all of the issues mentioned. Nonetheless, `become(...)` still offers\nadditional benefits in different scenarios.\n\n* You can set up multiple bindings to handle the result in different ways\n  without any wrapping script\n  ```sh\n  fzf --bind 'enter:become(vim {}),ctrl-e:become(emacs {})'\n  ```\n  * Previously, you would have to use `--expect=ctrl-e` and check the first\n    line of the output of fzf\n* You can easily build the subsequent command using the field index\n  expressions of fzf\n  ```sh\n  # Open the file in Vim and go to the line\n  git grep --line-number . |\n      fzf --delimiter : --nth 3.. --bind 'enter:become(vim {1} +{2})'\n  ```\n\n### Reloading the candidate list\n\nBy binding `reload` action to a key or an event, you can make fzf dynamically\nreload the candidate list. See https://github.com/junegunn/fzf/issues/1750 for\nmore details.\n\n#### 1. Update the list of processes by pressing CTRL-R\n\n```sh\nps -ef |\n  fzf --bind 'ctrl-r:reload(ps -ef)' \\\n      --header 'Press CTRL-R to reload' --header-lines=1 \\\n      --height=50% --layout=reverse\n```\n\n#### 2. Switch between sources by pressing CTRL-D or CTRL-F\n\n```sh\nFZF_DEFAULT_COMMAND='find . -type f' \\\n  fzf --bind 'ctrl-d:reload(find . -type d),ctrl-f:reload(eval \"$FZF_DEFAULT_COMMAND\")' \\\n      --height=50% --layout=reverse\n```\n\n#### 3. Interactive ripgrep integration\n\nThe following example uses fzf as the selector interface for ripgrep. We bound\n`reload` action to `change` event, so every time you type on fzf, the ripgrep\nprocess will restart with the updated query string denoted by the placeholder\nexpression `{q}`. Also, note that we used `--disabled` option so that fzf\ndoesn't perform any secondary filtering.\n\n```sh\n: | rg_prefix='rg --column --line-number --no-heading --color=always --smart-case' \\\n    fzf --bind 'start:reload:$rg_prefix \"\"' \\\n        --bind 'change:reload:$rg_prefix {q} || true' \\\n        --bind 'enter:become(vim {1} +{2})' \\\n        --ansi --disabled \\\n        --height=50% --layout=reverse\n```\n\nIf ripgrep doesn't find any matches, it will exit with a non-zero exit status,\nand fzf will warn you about it. To suppress the warning message, we added\n`|| true` to the command, so that it always exits with 0.\n\nSee [\"Using fzf as interactive Ripgrep launcher\"](https://github.com/junegunn/fzf/blob/master/ADVANCED.md#using-fzf-as-interactive-ripgrep-launcher)\nfor more sophisticated examples.\n\n### Preview window\n\nWhen the `--preview` option is set, fzf automatically starts an external process\nwith the current line as the argument and shows the result in the split window.\nYour `$SHELL` is used to execute the command with `$SHELL -c COMMAND`.\nThe window can be scrolled using the mouse or custom key bindings.\n\n```bash\n# {} is replaced with the single-quoted string of the focused line\nfzf --preview 'cat {}'\n```\n\nPreview window supports ANSI colors, so you can use any program that\nsyntax-highlights the content of a file, such as\n[Bat](https://github.com/sharkdp/bat) or\n[Highlight](http://www.andre-simon.de/doku/highlight/en/highlight.php):\n\n```bash\nfzf --preview 'bat --color=always {}' --preview-window '~3'\n```\n\nYou can customize the size, position, and border of the preview window using\n`--preview-window` option, and the foreground and background color of it with\n`--color` option. For example,\n\n```bash\nfzf --height 40% --layout reverse --info inline --border \\\n    --preview 'file {}' --preview-window up,1,border-horizontal \\\n    --bind 'ctrl-/:change-preview-window(50%|hidden|)' \\\n    --color 'fg:#bbccdd,fg+:#ddeeff,bg:#334455,preview-bg:#223344,border:#778899'\n```\n\nSee the man page (`man fzf`) for the full list of options.\n\nMore advanced examples can be found [here](https://github.com/junegunn/fzf/blob/master/ADVANCED.md).\n\n----\n\nSince fzf is a general-purpose text filter rather than a file finder, **it is\nnot a good idea to add `--preview` option to your `$FZF_DEFAULT_OPTS`**.\n\n```sh\n# *********************\n# ** DO NOT DO THIS! **\n# *********************\nexport FZF_DEFAULT_OPTS='--preview \"bat --style=numbers --color=always --line-range :500 {}\"'\n\n# bat doesn't work with any input other than the list of files\nps -ef | fzf\nseq 100 | fzf\nhistory | fzf\n```\n\nTips\n----\n\n### Respecting `.gitignore`\n\nYou can use [fd](https://github.com/sharkdp/fd),\n[ripgrep](https://github.com/BurntSushi/ripgrep), or [the silver\nsearcher](https://github.com/ggreer/the_silver_searcher) instead of the\ndefault find command to traverse the file system while respecting\n`.gitignore`.\n\n```sh\n# Feed the output of fd into fzf\nfd --type f --strip-cwd-prefix | fzf\n\n# Setting fd as the default source for fzf\nexport FZF_DEFAULT_COMMAND='fd --type f --strip-cwd-prefix'\n\n# Now fzf (w/o pipe) will use fd instead of find\nfzf\n\n# To apply the command to CTRL-T as well\nexport FZF_CTRL_T_COMMAND=\"$FZF_DEFAULT_COMMAND\"\n```\n\nIf you want the command to follow symbolic links and don't want it to exclude\nhidden files, use the following command:\n\n```sh\nexport FZF_DEFAULT_COMMAND='fd --type f --strip-cwd-prefix --hidden --follow --exclude .git'\n```\n\n### Fish shell\n\n`CTRL-T` key binding of fish, unlike those of bash and zsh, will use the last\ntoken on the command-line as the root directory for the recursive search. For\ninstance, hitting `CTRL-T` at the end of the following command-line\n\n```sh\nls /var/\n```\n\nwill list all files and directories under `/var/`.\n\nWhen using a custom `FZF_CTRL_T_COMMAND`, use the unexpanded `$dir` variable to\nmake use of this feature. `$dir` defaults to `.` when the last token is not a\nvalid directory. Example:\n\n```sh\nset -g FZF_CTRL_T_COMMAND \"command find -L \\$dir -type f 2> /dev/null | sed '1d; s#^\\./##'\"\n```\n\nRelated projects\n----------------\n\nhttps://github.com/junegunn/fzf/wiki/Related-projects\n\n[License](LICENSE)\n------------------\n\nThe MIT License (MIT)\n\nCopyright (c) 2013-2023 Junegunn Choi"
}
