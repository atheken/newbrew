{
  "name": "cityhash",
  "full_name": "cityhash",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Hash functions for strings",
  "license": "MIT",
  "homepage": "https://github.com/google/cityhash",
  "versions": {
    "stable": "1.1.1",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/cityhash/cityhash-1.1.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "76a41e149f6de87156b9a9790c595ef7ad081c321f60780886b520aecb7e3db4"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cityhash/blobs/sha256:8b40df9470428bbabbd02a72658b34469a59c14d41f2782d0c6cd657aaa7613e",
          "sha256": "8b40df9470428bbabbd02a72658b34469a59c14d41f2782d0c6cd657aaa7613e"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cityhash/blobs/sha256:a7bdc9022f63b8137aa89ffa935b059bbb00fef7a017a4e374f85a006b6a407a",
          "sha256": "a7bdc9022f63b8137aa89ffa935b059bbb00fef7a017a4e374f85a006b6a407a"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cityhash/blobs/sha256:e43f909c5fb775ca6c05675798d12343b1187820316716a844634e1a3419e21f",
          "sha256": "e43f909c5fb775ca6c05675798d12343b1187820316716a844634e1a3419e21f"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cityhash/blobs/sha256:e28b61cd0edb007b53f6effd11dda5b1b40e694dd6fb19a23aaf2c30105e5952",
          "sha256": "e28b61cd0edb007b53f6effd11dda5b1b40e694dd6fb19a23aaf2c30105e5952"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cityhash/blobs/sha256:af8607ad49fe965c7d64547928d2813259a2d55dd8556f5a82bbcb6e54dfefc4",
          "sha256": "af8607ad49fe965c7d64547928d2813259a2d55dd8556f5a82bbcb6e54dfefc4"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cityhash/blobs/sha256:8ef1413a8bdd03a86b054f673462e82cdea4230fb9a75f98ada2d996bdcd0893",
          "sha256": "8ef1413a8bdd03a86b054f673462e82cdea4230fb9a75f98ada2d996bdcd0893"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cityhash/blobs/sha256:ddca5903f40b8ec22ca0a2da4f116a03dc45d0f383c508f4f0370cd5899b80c3",
          "sha256": "ddca5903f40b8ec22ca0a2da4f116a03dc45d0f383c508f4f0370cd5899b80c3"
        },
        "mojave": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cityhash/blobs/sha256:4d7f25360b715d36177c70f06f7c21f39d38b6b8aa9f8a5befe80818baa3545f",
          "sha256": "4d7f25360b715d36177c70f06f7c21f39d38b6b8aa9f8a5befe80818baa3545f"
        },
        "high_sierra": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cityhash/blobs/sha256:37e8244399c42c6f3bdb2fad91562607e96bc3380378d318ceecbc16ec8d52be",
          "sha256": "37e8244399c42c6f3bdb2fad91562607e96bc3380378d318ceecbc16ec8d52be"
        },
        "sierra": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cityhash/blobs/sha256:62d8d1409dfe744d4de7a1727824b06c5a80b248433c2d8bd8a4efcd444346cb",
          "sha256": "62d8d1409dfe744d4de7a1727824b06c5a80b248433c2d8bd8a4efcd444346cb"
        },
        "el_capitan": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cityhash/blobs/sha256:b09962ca43b3bb3321e1e57bf74a0936142ec5c94e198113ac3aa14e669e4d28",
          "sha256": "b09962ca43b3bb3321e1e57bf74a0936142ec5c94e198113ac3aa14e669e4d28"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cityhash/blobs/sha256:f381c56f8063574fc86fa4eace73e99bf9be10155f90c1881362e70aea75826a",
          "sha256": "f381c56f8063574fc86fa4eace73e99bf9be10155f90c1881362e70aea75826a"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/cityhash.rb",
  "ruby_source_checksum": {
    "sha256": "11d11b2a2fc22c53391954d7d436e142f1df98d580b3881f1d36df3d1110e39d"
  },
  "date_added": "2013-05-14T10:18:33-05:00",
  "readme": "CityHash, a family of hash functions for strings.\n\n\nIntroduction\n============\n\nCityHash provides hash functions for strings.  The functions mix the\ninput bits thoroughly but are not suitable for cryptography.  See\n\"Hash Quality,\" below, for details on how CityHash was tested and so on.\n\nWe provide reference implementations in C++, with a friendly MIT license.\n\nCityHash32() returns a 32-bit hash.\n\nCityHash64() and similar return a 64-bit hash.\n\nCityHash128() and similar return a 128-bit hash and are tuned for\nstrings of at least a few hundred bytes.  Depending on your compiler\nand hardware, it's likely faster than CityHash64() on sufficiently long\nstrings.  It's slower than necessary on shorter strings, but we expect\nthat case to be relatively unimportant.\n\nCityHashCrc128() and similar are variants of CityHash128() that depend\non _mm_crc32_u64(), an intrinsic that compiles to a CRC32 instruction\non some CPUs.  However, none of the functions we provide are CRCs.\n\nCityHashCrc256() is a variant of CityHashCrc128() that also depends\non _mm_crc32_u64().  It returns a 256-bit hash.\n\nAll members of the CityHash family were designed with heavy reliance\non previous work by Austin Appleby, Bob Jenkins, and others.\nFor example, CityHash32 has many similarities with Murmur3a.\n\nPerformance on long strings: 64-bit CPUs\n========================================\n \nWe are most excited by the performance of CityHash64() and its variants on\nshort strings, but long strings are interesting as well.\n\nCityHash is intended to be fast, under the constraint that it hash very\nwell.  For CPUs with the CRC32 instruction, CRC is speedy, but CRC wasn't\ndesigned as a hash function and shouldn't be used as one.  CityHashCrc128()\nis not a CRC, but it uses the CRC32 machinery.\n\nOn a single core of a 2.67GHz Intel Xeon X5550, CityHashCrc256 peaks at about\n5 to 5.5 bytes/cycle.  The other CityHashCrc functions are wrappers around\nCityHashCrc256 and should have similar performance on long strings.\n(CityHashCrc256 in v1.0.3 was even faster, but we decided it wasn't as thorough\nas it should be.)  CityHash128 peaks at about 4.3 bytes/cycle.  The fastest\nMurmur variant on that hardware, Murmur3F, peaks at about 2.4 bytes/cycle.\nWe expect the peak speed of CityHash128 to dominate CityHash64, which is\naimed more toward short strings or use in hash tables.\n\nFor long strings, a new function by Bob Jenkins, SpookyHash, is just\nslightly slower than CityHash128 on Intel x86-64 CPUs, but noticeably\nfaster on AMD x86-64 CPUs.  For hashing long strings on AMD CPUs\nand/or CPUs without the CRC instruction, SpookyHash may be just as\ngood or better than any of the CityHash variants.\n\nPerformance on short strings: 64-bit CPUs\n=========================================\n\nFor short strings, e.g., most hash table keys, CityHash64 is faster than\nCityHash128, and probably faster than all the aforementioned functions,\ndepending on the mix of string lengths.  Here are a few results from that\nsame hardware, where we (unrealistically) tested a single string length over\nand over again:\n\nHash              Results\n------------------------------------------------------------------------------\nCityHash64 v1.0.3 7ns for 1 byte, or 6ns for 8 bytes, or 9ns for 64 bytes\nMurmur2 (64-bit)  6ns for 1 byte, or 6ns for 8 bytes, or 15ns for 64 bytes\nMurmur3F          14ns for 1 byte, or 15ns for 8 bytes, or 23ns for 64 bytes\n\nWe don't have CityHash64 benchmarks results for v1.1, but we expect the\nnumbers to be similar.\n\nPerformance: 32-bit CPUs\n========================\n\nCityHash32 is the newest variant of CityHash.  It is intended for\n32-bit hardware in general but has been mostly tested on x86.  Our benchmarks\nsuggest that Murmur3 is the nearest competitor to CityHash32 on x86.\nWe don't know of anything faster that has comparable quality.  The speed rankings\nin our testing: CityHash32 > Murmur3f > Murmur3a (for long strings), and\nCityHash32 > Murmur3a > Murmur3f (for short strings).\n\nInstallation\n============\n\nWe provide reference implementations of several CityHash functions, written\nin C++.  The build system is based on autoconf.  It defaults the C++\ncompiler flags to \"-g -O2\", which is probably slower than -O3 if you are\nusing gcc.  YMMV.\n\nOn systems with gcc, we generally recommend:\n\n./configure\nmake all check CXXFLAGS=\"-g -O3\"\nsudo make install\n\nOr, if your system has the CRC32 instruction, and you want to build everything:\n\n./configure --enable-sse4.2\nmake all check CXXFLAGS=\"-g -O3 -msse4.2\"\nsudo make install\n\nNote that our build system doesn't try to determine the appropriate compiler\nflag for enabling SSE4.2.  For gcc it is \"-msse4.2\".  The --enable-sse4.2\nflag to the configure script controls whether citycrc.h is installed when\nyou \"make install.\"  In general, picking the right compiler flags can be\ntricky, and may depend on your compiler, your hardware, and even how you\nplan to use the library.\n\nFor generic information about how to configure this software, please try:\n\n./configure --help\n\nFailing that, please work from city.cc and city*.h, as they contain all the\nnecessary code.\n\n\nUsage\n=====\n\nThe above installation instructions will produce a single library.  It will\ncontain CityHash32(), CityHash64(), and CityHash128(), and their variants,\nand possibly CityHashCrc128(), CityHashCrc128WithSeed(), and\nCityHashCrc256().  The functions with Crc in the name are declared in\ncitycrc.h; the rest are declared in city.h.\n\n\nLimitations\n===========\n\n1) CityHash32 is intended for little-endian 32-bit code, and everything else in\nthe current version of CityHash is intended for little-endian 64-bit CPUs.\n\nAll functions that don't use the CRC32 instruction should work in\nlittle-endian 32-bit or 64-bit code.  CityHash should work on big-endian CPUs\nas well, but we haven't tested that very thoroughly yet.\n\n2) CityHash is fairly complex.  As a result of its complexity, it may not\nperform as expected on some compilers.  For example, preliminary reports\nsuggest that some Microsoft compilers compile CityHash to assembly that's\n10-20% slower than it could be.\n\n\nHash Quality\n============\n\nWe like to test hash functions with SMHasher, among other things.\nSMHasher isn't perfect, but it seems to find almost any significant flaw.\nSMHasher is available at http://code.google.com/p/smhasher/\n\nSMHasher is designed to pass a 32-bit seed to the hash functions it tests.\nNo CityHash function is designed to work that way, so we adapt as follows:\nFor our functions that accept a seed, we use the given seed directly (padded\nwith zeroes); for our functions that don't accept a seed, we hash the\nconcatenation of the given seed and the input string.\n\nThe CityHash functions have the following flaws according to SMHasher:\n\n(1) CityHash64: none\n\n(2) CityHash64WithSeed: none\n\n(3) CityHash64WithSeeds: did not test\n\n(4) CityHash128: none\n\n(5) CityHash128WithSeed: none\n\n(6) CityHashCrc128: none\n\n(7) CityHashCrc128WithSeed: none\n\n(8) CityHashCrc256: none\n\n(9) CityHash32: none\n\nSome minor flaws in 32-bit and 64-bit functions are harmless, as we\nexpect the primary use of these functions will be in hash tables.  We\nmay have gone slightly overboard in trying to please SMHasher and other\nsimilar tests, but we don't want anyone to choose a different hash function\nbecause of some minor issue reported by a quality test.\n\n\nFor more information\n====================\n\nhttp://code.google.com/p/cityhash/\n\ncityhash-discuss@googlegroups.com\n\nPlease feel free to send us comments, questions, bug reports, or patches."
}
