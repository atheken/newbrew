{
  "name": "git-series",
  "full_name": "git-series",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Track changes to a patch series over time",
  "license": "MIT",
  "homepage": "https://github.com/git-series/git-series",
  "versions": {
    "stable": "0.9.1",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/git-series/git-series/archive/0.9.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "c0362e19d3fa168a7cb0e260fcdecfe070853b163c9f2dfd2ad8213289bc7e5f"
    }
  },
  "revision": 9,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/git-series/blobs/sha256:1568eef8c171318e5252a2b70cf6c73593cdde9771aad628a4e488f959c549e4",
          "sha256": "1568eef8c171318e5252a2b70cf6c73593cdde9771aad628a4e488f959c549e4"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/git-series/blobs/sha256:bc86ff7a61825bfdce2a6526b1c4f093b925015b237431c55a01c81b5689fff8",
          "sha256": "bc86ff7a61825bfdce2a6526b1c4f093b925015b237431c55a01c81b5689fff8"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/git-series/blobs/sha256:10dc8abee745d6a0c5050d664c4f215e843eead39c63cd7f8b0b0ea50891a42f",
          "sha256": "10dc8abee745d6a0c5050d664c4f215e843eead39c63cd7f8b0b0ea50891a42f"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/git-series/blobs/sha256:d9aa7c268d33b8b1dd161bed8b5d3d2634bfc29198f84832642cf6c520342d51",
          "sha256": "d9aa7c268d33b8b1dd161bed8b5d3d2634bfc29198f84832642cf6c520342d51"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/git-series/blobs/sha256:ea19bae915f274db6c6cda126037cd5360a562f14e479787c7b29bf0e878fe20",
          "sha256": "ea19bae915f274db6c6cda126037cd5360a562f14e479787c7b29bf0e878fe20"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/git-series/blobs/sha256:67f0a92d24fdf4611d3dcaa2a63d47f678f9ff8b4b99a13c47544c713c9654b1",
          "sha256": "67f0a92d24fdf4611d3dcaa2a63d47f678f9ff8b4b99a13c47544c713c9654b1"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-series/blobs/sha256:4b14ff0d2da9a97e00e16d8bc216eea5e81675fa3ce956c4461167ac761d6193",
          "sha256": "4b14ff0d2da9a97e00e16d8bc216eea5e81675fa3ce956c4461167ac761d6193"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "pkg-config",
    "rust"
  ],
  "dependencies": [
    "libgit2",
    "libssh2",
    "openssl@3"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/git-series.rb",
  "ruby_source_checksum": {
    "sha256": "688ebfc0373f9839a8683d4a332c65d8c9dcab819c52c8b065f2d528915f4104"
  },
  "date_added": "2016-10-05T09:24:40+01:00",
  "readme": "git series tracks changes to a patch series over time.  git series also tracks\na cover letter for the patch series, formats the series for email, and prepares\npull requests.\n\n[Manpage for git-series](http://man7.org/linux/man-pages/man1/git-series.1.html)\n\nAbout git-series\n================\n\nA patch series typically goes through multiple iterations before submission;\nthe path from idea to RFC to `[PATCHv12 1/8]` includes many invocations of\n`git rebase -i`. However, while Git tracks and organizes commits quite well, it\ndoesn't actually track changes to a patch series at all, outside of the\nephemeral reflog.  This makes it a challenge to collaborate on a patch series,\ndistribution package, backport, or any other development process that includes\nrebasing or non-fast-forward development.\n\nTypically, tracking the evolution of a patch series over time involves moving\npart of the version control outside of git.  You can move the patch series from\ngit into quilt or a distribution package, and then version the patch files with\ngit, losing the power of git's tools.  Or, you can keep the patch series in\ngit, and version it via multiple named branches; however, names like\nfeature-v2, feature-v3-typofix, and feature-v8-rebased-4.6-alice-fix sound like\nfilenames from corporate email, not modern version control.  And either way,\ngit doesn't track your cover letter at all.\n\ngit-series tracks both a patch series and its evolution within the same git\nrepository.  git-series works entirely with existing git features, allowing git\nto push and pull a series to any git repository along with other branches and\ntags.  git-series also tracks a cover letter for the patch series, formats the\nseries for email, and prepares pull requests.\n\nAs you change a patch series, git-series can show diffs between versions,\nfinding and showing the correspondence between the old and new versions of each\ncommit, even after changing or rebasing those commits.  The series diff format\nshows corresponding old and new commits side-by-side, with interdiffs for\nmodified commits.\n\nBuilding and installing\n=======================\n\ngit-series is written in Rust.  You'll need both Rust and Cargo installed to\nbuild it.  If your OS distribution includes packages for Rust and Cargo, start\nby installing those (for instance, on Debian, `apt install rustc cargo`).\nIf your distribution doesn't have packages of Rust and Cargo, or has an\noutdated version (which may result in build errors), you can [download the\nstable version of Rust and Cargo from the rust-lang.org download\npage](https://www.rust-lang.org/downloads.html).\n\nWith Rust and Cargo installed, you can download and install the latest release\nof git-series with:\n\n```\ncargo install --root ~/.local git-series\n```\n\nThis will install git-series into `~/.local/bin/git-series`.  If you don't\nalready have `~/.local/bin` on your `$PATH`, you may want to add it there, or\nchange the `--root`.  You may also want to install the included manpage,\n`git-series.1`, into `~/.local/share/man/man1/git-series.1`.\n\nIf you'd like to package git-series for your distribution, please contact me.\n\nOverview of commands\n====================\n\n- Use `git series start seriesname` to start a patch series seriesname.\n\n- Use `git series base somecommit` to set the base commit for the series.\n  (This is the upstream commit you based the series on, not the first patch in\n  the series.)\n\n- Use normal git commands to commit changes.\n\n- Use `git series rebase -i` to help rework or reorganize the patch series.\n\n- Use `git series status` to check what has changed.\n\n- Use `git series diff` to show the changes to the patch series as a diff.\n\n- Use `git series cover` to add or edit a cover letter.\n\n- Use `git series add` and `git series commit` (or `git series commit -a`) to\n  commit changes to the patch series.  You can do this whenever you've changed\n  the base or cover letter, or whenever you've changed HEAD to a new commit.\n  Make a series commit whenever you've made a semantic change to the patch\n  series that you want to record, such as rebasing on a new upstream version,\n  reorganizing patches, or incorporating feedback.\n\n- Use `git series format` to prepare the patch series to send via email, or\n  use `git series req` to prepare a \"please pull\" mail (after pushing the\n  changes to a repository as a branch or tag).\n\nWorkflow example\n================\n\nSuppose you want to write a patch series implementing a new feature for a\nproject.  You already have a local `git clone` of the repository.  You could\nstart a branch for this patch series, but it may take multiple iterations\nbefore upstream accepts it, and you may need to use rebase or amend to fix\ncommits; a branch can't track that.  With git-series, you'll develop the patch\nseries as you normally would, including rebases, and periodically `git series\ncommit` the state of the patch series, complete with a commit message\nexplaining what you've changed.  Even if you rebase the patch series, or make\nsome other change that doesn't fast-forward, git-series will track those\nchanges with a branch that *does* fast-forward, so you can easily share and\nreview the history of your patch series.\n\nDeveloping or importing the first version\n-----------------------------------------\n\nTo start the patch series, first run `git series start featurename`.\n`featurename` here specifies the name for the series, just as you'd specify the\nname of a branch.\n\nA patch series needs some base to build on, identifying the upstream commit you\nwant to develop from.  This will become the parent of the first patch in your\nseries.  If you want to base your patch series on the current version, run `git\nseries base HEAD`.  If you want to base this patch series on some other commit,\nsuch as a released version, first check out that commit with `git checkout\nthecommit`, then run `git series base HEAD`.\n\nYou can then develop the patch series as usual, committing patches with git.\n\nIf you've already started on the patch series and made some commits, you can\nstill adopt the current version of the patch series into git-series.  Find the\nparent commit of the first patch in your series, and run `git series base\nthatcommit`.\n\nAs with `git`, you can run `git series status` at any time to see the current\nstate of the series, including changes you might want to commit, and the next\nstep to run.  After the above steps, `git series status` should show `base` and\n`series` modified; running `git series base` set the `base` in the \"working\"\nversion, and `series` in the working version always refers to HEAD (the current\ngit commit you have checked out).\n\nNow that you've written an initial version of the patch series (or you already\nwrote it before you started using git-series), you can commit that version to\ngit-series.  Run `git series commit -a` to commit the series.  This will run\nyour editor so you can provide a series commit message (e.g. \"Initial version\nof feature\" or \"Import feature into git-series\").\n\nIf your patch series include multiple patches, you may want to add a cover\nletter.  Run `git series cover` to edit the cover letter, then `git series\ncommit -a -m 'Add cover letter'` to commit that change to the series.\n\nNow that you have the first version of the patch series, you can format it as a\nseries of emails with `git series format`.\n\nDeveloping v2\n-------------\n\nYou send the patch series by email, and you get feedback from the maintainers:\nthe concept looks good, but you need to split one of the patches into two, and\nadd benchmark results in another commit's commit message.\n\nRun `git series rebase -i`, and split the commit (mark it for 'e'dit, `git\nreset -N HEAD^`, repeatedly `git add -p` and `git commit`, then `git rebase\n--continue`).  Then, commit that change to the series: `git series commit -a -m\n'Split out X change into a separate patch'`\n\nThen, run `git series rebase -i` again to add the benchmark results (mark the\ncommit for 'r'eword), and commit that change: `git series commit -a -m 'Add\nbenchmark results'`.\n\nYou may want to document the changes in the cover letter: run `git series\ncover`, document the changes, and `git series commit -a -m 'Update cover letter\nfor v2'`.  (Alternatively, you can incrementally add to the cover letter along\nwith each change to the series.)\n\nNow that you have v2 of the patch series, you can format it as a new series of\nemails with `git series format -v 2`."
}
