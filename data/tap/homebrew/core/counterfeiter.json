{
  "name": "counterfeiter",
  "full_name": "counterfeiter",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Tool for generating self-contained, type-safe test doubles in go",
  "license": "MIT",
  "homepage": "https://github.com/maxbrunsfeld/counterfeiter",
  "versions": {
    "stable": "6.6.2",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/maxbrunsfeld/counterfeiter/archive/refs/tags/v6.6.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "fd1e7566387f7104c3c83a7818e160eda399c6efedcd3d262088a28a35eb01e1"
    },
    "head": {
      "url": "https://github.com/maxbrunsfeld/counterfeiter.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/counterfeiter/blobs/sha256:c26f49f3b74c8609b3f4b07650b9dcb6667ba2cd220dc3e20c6f1b6ee558a763",
          "sha256": "c26f49f3b74c8609b3f4b07650b9dcb6667ba2cd220dc3e20c6f1b6ee558a763"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/counterfeiter/blobs/sha256:4a7a8ba2f44e3aeebf82ce9d5e0f9a5dee1a60107ecee4dc322425c4ef6fcc1f",
          "sha256": "4a7a8ba2f44e3aeebf82ce9d5e0f9a5dee1a60107ecee4dc322425c4ef6fcc1f"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/counterfeiter/blobs/sha256:e17a3528b0607ea518cddeb42fdae5a3415d0b8ab7012f9f0f7db6bb40e7ba24",
          "sha256": "e17a3528b0607ea518cddeb42fdae5a3415d0b8ab7012f9f0f7db6bb40e7ba24"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/counterfeiter/blobs/sha256:6fe661609b7048d878c84d8cf0f2aa585acbdfdbd9e44396471df9e85f571bd4",
          "sha256": "6fe661609b7048d878c84d8cf0f2aa585acbdfdbd9e44396471df9e85f571bd4"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/counterfeiter/blobs/sha256:1f5db7989ad1ada9b1bb559c4166a85f1216085a65c2974a1cb853efcb0c4096",
          "sha256": "1f5db7989ad1ada9b1bb559c4166a85f1216085a65c2974a1cb853efcb0c4096"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/counterfeiter/blobs/sha256:99e3bd162e3593efd95be27443dd1505e3d5cf1ccbc22bcb994e4de261299c49",
          "sha256": "99e3bd162e3593efd95be27443dd1505e3d5cf1ccbc22bcb994e4de261299c49"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/counterfeiter/blobs/sha256:ae5703c931b6e8f9380f194423dfddc8dad506c0befd404b6d909dfeeceed24f",
          "sha256": "ae5703c931b6e8f9380f194423dfddc8dad506c0befd404b6d909dfeeceed24f"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "go"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/counterfeiter.rb",
  "ruby_source_checksum": {
    "sha256": "5ade966a8bfec5e4ef7374c38ca5f08e3c36e4062d82a3d289e0b407aa1ef227"
  },
  "date_added": "2020-12-23T17:19:32+00:00",
  "readme": "# `counterfeiter` [![Go](https://github.com/maxbrunsfeld/counterfeiter/actions/workflows/go.yml/badge.svg)](https://github.com/maxbrunsfeld/counterfeiter/actions/workflows/go.yml) [![CircleCI](https://circleci.com/gh/maxbrunsfeld/counterfeiter.svg?style=svg)](https://circleci.com/gh/maxbrunsfeld/counterfeiter) [![Build status](https://ci.appveyor.com/api/projects/status/0j2v7pt06lp9yanm/branch/master?svg=true)](https://ci.appveyor.com/project/maxbrunsfeld/counterfeiter/branch/master)\n\nWhen writing unit-tests for an object, it is often useful to have fake implementations\nof the object's collaborators. In go, such fake implementations cannot be generated\nautomatically at runtime, and writing them by hand can be quite arduous.\n\n`counterfeiter` allows you to simply generate test doubles for a given interface.\n\n### Supported Versions Of `go`\n\n`counterfeiter` follows the [support policy of `go` itself](https://golang.org/doc/devel/release.html#policy):\n\n> Each major Go release is supported until there are two newer major releases. For example, Go 1.5 was supported until the Go 1.7 release, and Go 1.6 was supported until the Go 1.8 release. We fix critical problems, including [critical security problems](https://golang.org/security), in supported releases as needed by issuing minor revisions (for example, Go 1.6.1, Go 1.6.2, and so on).\n\nIf you are having problems with `counterfeiter` and are not using a supported version of go, please update to use a supported version of go before opening an issue.\n\n### Using `counterfeiter`\n\n⚠️ Please use [`go modules`](https://blog.golang.org/using-go-modules) when working with counterfeiter.\n\nTypically, `counterfeiter` is used in `go generate` directives. It can be frustrating when you change your interface declaration and suddenly all of your generated code is suddenly out-of-date. The best practice here is to use the [`go generate` command](https://blog.golang.org/generate) to make it easier to keep your test doubles up to date.\n\n#### Step 1 - Create `tools.go`\n\nYou can take a dependency on tools by creating a `tools.go` file, as described in [How can I track tool dependencies for a module?](https://github.com/golang/go/wiki/Modules#how-can-i-track-tool-dependencies-for-a-module). This ensures that everyone working with your module is using the same version of each tool you use.\n\n```shell\n$ cat tools/tools.go\n```\n\n```go\n// +build tools\n\npackage tools\n\nimport (\n\t_ \"github.com/maxbrunsfeld/counterfeiter/v6\"\n)\n\n// This file imports packages that are used when running go generate, or used\n// during the development process but not otherwise depended on by built code.\n```\n\n#### Step 2a - Add `go:generate` Directives\n\nYou can add directives right next to your interface definitions (or not), in any `.go` file in your module.\n\n```shell\n$ cat myinterface.go\n```\n\n```go\npackage foo\n\n//go:generate go run github.com/maxbrunsfeld/counterfeiter/v6 . MySpecialInterface\n\ntype MySpecialInterface interface {\n\tDoThings(string, uint64) (int, error)\n}\n```\n\n```shell\n$ go generate ./...\nWriting `FakeMySpecialInterface` to `foofakes/fake_my_special_interface.go`... Done\n```\n\n#### Step 2b - Add `counterfeiter:generate` Directives\n\nIf you plan to have many directives in a single package, consider using this\noption. You can add directives right next to your interface definitions\n(or not), in any `.go` file in your module.\n\n```shell\n$ cat myinterface.go\n```\n\n```go\npackage foo\n\n// You only need **one** of these per package!\n//go:generate go run github.com/maxbrunsfeld/counterfeiter/v6 -generate\n\n// You will add lots of directives like these in the same package...\n//counterfeiter:generate . MySpecialInterface\ntype MySpecialInterface interface {\n\tDoThings(string, uint64) (int, error)\n}\n\n// Like this...\n//counterfeiter:generate . MyOtherInterface\ntype MyOtherInterface interface {\n\tDoOtherThings(string, uint64) (int, error)\n}\n```\n\n```shell\n$ go generate ./...\nWriting `FakeMySpecialInterface` to `foofakes/fake_my_special_interface.go`... Done\nWriting `FakeMyOtherInterface` to `foofakes/fake_my_other_interface.go`... Done\n```\n\n#### Step 3 - Run `go generate`\n\nYou can run `go generate` in the directory with your directive, or in the root of your module (to ensure you generate for all packages in your module):\n\n```shell\n$ go generate ./...\n```\n\n#### Invoking `counterfeiter` from the shell\n\nYou can use the following command to invoke `counterfeiter` from within a go module:\n\n```shell\n$ go run github.com/maxbrunsfeld/counterfeiter/v6\n\nUSAGE\n\tcounterfeiter\n\t\t[-generate] [-o <output-path>] [-p] [--fake-name <fake-name>]\n\t\t[<source-path>] <interface> [-]\n```\n\n#### Installing `counterfeiter` to `$GOPATH/bin`\n\nThis is unnecessary if you're using the approach described above, but does allow you to invoke `counterfeiter` in your shell _outside_ of a module:\n\n```shell\n$ GO111MODULE=off go get -u github.com/maxbrunsfeld/counterfeiter\n$ counterfeiter\n\nUSAGE\n\tcounterfeiter\n\t\t[-generate] [-o <output-path>] [-p] [--fake-name <fake-name>]\n\t\t[<source-path>] <interface> [-]\n```\n\n### Generating Test Doubles\n\nGiven a path to a package and an interface name, you can generate a test double.\n\n```shell\n$ cat path/to/foo/file.go\n```\n\n```go\npackage foo\n\ntype MySpecialInterface interface {\n\t\tDoThings(string, uint64) (int, error)\n}\n```\n\n```shell\n$ go run github.com/maxbrunsfeld/counterfeiter/v6 path/to/foo MySpecialInterface\nWrote `FakeMySpecialInterface` to `path/to/foo/foofakes/fake_my_special_interface.go`\n```\n\n### Using Test Doubles In Your Tests\n\nInstantiate fakes`:\n\n```go\nimport \"my-repo/path/to/foo/foofakes\"\n\nvar fake = &foofakes.FakeMySpecialInterface{}\n```\n\nFakes record the arguments they were called with:\n\n```go\nfake.DoThings(\"stuff\", 5)\n\nExpect(fake.DoThingsCallCount()).To(Equal(1))\n\nstr, num := fake.DoThingsArgsForCall(0)\nExpect(str).To(Equal(\"stuff\"))\nExpect(num).To(Equal(uint64(5)))\n```\n\nYou can stub their return values:\n\n```go\nfake.DoThingsReturns(3, errors.New(\"the-error\"))\n\nnum, err := fake.DoThings(\"stuff\", 5)\nExpect(num).To(Equal(3))\nExpect(err).To(Equal(errors.New(\"the-error\")))\n```\n\nFor more examples of using the `counterfeiter` API, look at [some of the provided examples](https://github.com/maxbrunsfeld/counterfeiter/blob/master/generated_fakes_test.go).\n\n### Generating Test Doubles For Third Party Interfaces\n\nFor third party interfaces, you can specify the interface using the alternative syntax `<package>.<interface>`, for example:\n\n```shell\n$ go run github.com/maxbrunsfeld/counterfeiter/v6 github.com/go-redis/redis.Pipeliner\n```\n\n### Running The Tests For `counterfeiter`\n\nIf you want to run the tests for `counterfeiter` (perhaps, because you want to contribute a PR), all you have to do is run `scripts/ci.sh`.\n\n### Contributions\n\nSo you want to contribute to `counterfeiter`! That's great, here's exactly what you should do:\n\n- open a new github issue, describing your problem, or use case\n- help us understand how you want to fix or extend `counterfeiter`\n- write one or more unit tests for the behavior you want\n- write the simplest code you can for the feature you're working on\n- try to find any opportunities to refactor\n- avoid writing code that isn't covered by unit tests\n\n`counterfeiter` has a few high level goals for contributors to keep in mind\n\n- keep unit-level test coverage as high as possible\n- keep `main.go` as simple as possible\n- avoid making the command line options any more complicated\n- avoid making the internals of `counterfeiter` any more complicated\n\nIf you have any questions about how to contribute, rest assured that @tjarratt and other maintainers will work with you to ensure we make `counterfeiter` better, together. This project has largely been maintained by the community, and we greatly appreciate any PR (whether big or small).\n\n### License\n\n`counterfeiter` is MIT-licensed."
}
