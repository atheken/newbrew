{
  "name": "regipy",
  "full_name": "regipy",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Offline registry hive parsing tool",
  "license": "MIT",
  "homepage": "https://github.com/mkorman90/regipy",
  "versions": {
    "stable": "3.1.6",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://files.pythonhosted.org/packages/e0/f2/61846ba036f840b3cfe9b412dca3ef629bdc7506faafbd56b2c8de987950/regipy-3.1.6.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "edc9fd8501f3374afd49020550bf361235e569959712825fbd2f444d2aeca8d9"
    },
    "head": {
      "url": "https://github.com/mkorman90/regipy.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/regipy/blobs/sha256:c1b052bd53472b1147ac579e177aed6e33928509a493840a142baf2ad0542fec",
          "sha256": "c1b052bd53472b1147ac579e177aed6e33928509a493840a142baf2ad0542fec"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/regipy/blobs/sha256:ac231a88e8a51997fbf43eae246f1b304523f701ed31ac0e7d1e4adfeb83db23",
          "sha256": "ac231a88e8a51997fbf43eae246f1b304523f701ed31ac0e7d1e4adfeb83db23"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/regipy/blobs/sha256:c04755aff613cc591a95327b562b1cca802cc6ed270e348bf6ae7708bce8006c",
          "sha256": "c04755aff613cc591a95327b562b1cca802cc6ed270e348bf6ae7708bce8006c"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/regipy/blobs/sha256:2f5be65d31a8260064599211abff2f1140d9b84d586d25d9ed0151ff417a3302",
          "sha256": "2f5be65d31a8260064599211abff2f1140d9b84d586d25d9ed0151ff417a3302"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/regipy/blobs/sha256:8b2c6d2893f7d082bf580c92de1194f5bd74389b00a40ecd3e9f317fdea22be0",
          "sha256": "8b2c6d2893f7d082bf580c92de1194f5bd74389b00a40ecd3e9f317fdea22be0"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/regipy/blobs/sha256:e1fd84bce3ba58d93cd13c60b3ddd9e9b43c3990fe1596b37cc3ca57aa0ba37f",
          "sha256": "e1fd84bce3ba58d93cd13c60b3ddd9e9b43c3990fe1596b37cc3ca57aa0ba37f"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/regipy/blobs/sha256:98a2138104bcf2fd926b940d9dd11b430df67ece72b71eb07ff79ab61decd492",
          "sha256": "98a2138104bcf2fd926b940d9dd11b430df67ece72b71eb07ff79ab61decd492"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "python-tabulate",
    "python@3.11"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/regipy.rb",
  "ruby_source_checksum": {
    "sha256": "228d3bfc087558a4a437b21bde1b62e6a6042dc04f3688c5a63fd2045ab690a9"
  },
  "date_added": "2020-11-13T19:00:18+00:00",
  "readme": "## regipy\n\n[![CircleCI](https://circleci.com/gh/mkorman90/regipy.svg?style=shield)](https://circleci.com/gh/mkorman90/regipy)\n\nRegipy is a python library for parsing offline registry hives (Hive files with REGF header). regipy has a lot of capabilities:\n* Use as a library:\n    * Recurse over the registry hive, from root or a given path and get all subkeys and values\n    * Read specific subkeys and values\n    * Apply transaction logs on a registry hive\n* Command Line Tools\n    * Dump an entire registry hive to json\n    * Apply transaction logs on a registry hive\n    * Compare registry hives\n    * Execute plugins from a robust plugin system (i.e: amcache, shimcache, extract computer name...)\n\n## Installation\n\nRegipy latest version can be installed from pypi:\n\n```bash\npip install regipy[full]\n```\n\nNOTE: ``regipy[full]`` installs dependencies that require compilation tools and might take some time. \nIt is possible to install a version with relaxed dependencies, by omitting the ``[full]``.\n\nAlso, it is possible to install from source by cloning the repository and executing:\n```bash\npip install --editable .[full]\n```\n\n\n## CLI\n\n#### Parse the header:\n```bash\nregistry-parse-header ~/Documents/TestEvidence/Registry/SYSTEM\n```\nExample output:\n```\n╒════════════════════════╤══════════╕\n│ signature              │ b'regf'  │\n├────────────────────────┼──────────┤\n│ primary_sequence_num   │ 11639    │\n├────────────────────────┼──────────┤\n│ secondary_sequence_num │ 11638    │\n├────────────────────────┼──────────┤\n│ last_modification_time │ 0        │\n├────────────────────────┼──────────┤\n│ major_version          │ 1        │\n├────────────────────────┼──────────┤\n│ minor_version          │ 5        │\n├────────────────────────┼──────────┤\n│ file_type              │ 0        │\n├────────────────────────┼──────────┤\n│ file_format            │ 1        │\n├────────────────────────┼──────────┤\n│ root_key_offset        │ 32       │\n├────────────────────────┼──────────┤\n│ hive_bins_data_size    │ 10534912 │\n├────────────────────────┼──────────┤\n│ clustering_factor      │ 1        │\n├────────────────────────┼──────────┤\n│ file_name              │ SYSTEM   │\n├────────────────────────┼──────────┤\n│ checksum               │ 0        │\n╘════════════════════════╧══════════╛\n[2019-02-09 13:46:12.111654] WARNING: regipy.cli: Hive is not clean! You should apply transaction logs\n```\n* When parsing the header of a hive, also checksum validation and transaction validations are done\n\n\n#### Dump entire hive to disk (this might take some time)\n```bash\nregistry-dump ~/Documents/TestEvidence/Registry/NTUSER-CCLEANER.DAT -o /tmp/output.json\n```\nregistry-dump util can also output a timeline instead of a JSON, by adding the `-t` flag\n\n\n#### Run relevant plugins on Hive\n```bash\nregistry-plugins-run ~/Documents/TestEvidence/Registry/SYSTEM -o /tmp/plugins_output.json\n```\nThe hive type will be detected automatically and the relevant plugins will be executed. \n[**See the plugins section for more information**](docs/PLUGINS.md)\n\n#### Compare registry hives\nCompare registry hives of the same type and output to CSV (if `-o` is not specified output will be printed to screen)\n```bash\nregistry-diff NTUSER.dat NTUSER_modified.dat -o /tmp/diff.csv\n```\nExample output:\n```\n[2019-02-11 19:49:18.824245] INFO: regipy.cli: Comparing NTUSER.DAT vs NTUSER_modified.DAT\n╒══════════════╤══════════════╤════════════════════════════════════════════════════════════════════════════════╤════════════════════════════════════════════════╕\n│ difference   │ first_hive   │ second_hive                                                                    │ description                                    │\n╞══════════════╪══════════════╪════════════════════════════════════════════════════════════════════════════════╪════════════════════════════════════════════════╡\n│ new_subkey   │              │ 2019-02-11T19:46:31.832134+00:00                                               │ \\Software\\Microsoft\\legitimate_subkey          │\n├──────────────┼──────────────┼────────────────────────────────────────────────────────────────────────────────┼────────────────────────────────────────────────┤\n│ new_value    │              │ not_a_malware: c:\\temp\\legitimate_binary.exe @ 2019-02-11 19:45:25.516346+00:00 │ \\Software\\Microsoft\\Windows\\CurrentVersion\\Run │\n╘══════════════╧══════════════╧════════════════════════════════════════════════════════════════════════════════╧════════════════════════════════════════════════╛\n[2019-02-11 19:49:18.825328] INFO: regipy.cli: Detected 2 differences\n```\n\n## Recover a registry hive, using transaction logs:\n```bash\nregistry-transaction-logs NTUSER.DAT -p ntuser.dat.log1 -s ntuser.dat.log2 -o recovered_NTUSER.dat \n```\nAfter recovering, compare the hives with registry-diff to see what changed\n\n## Using as a library\n\n#### Initiate the registry hive object\n```\nfrom regipy.registry import RegistryHive\nreg = RegistryHive('/Users/martinkorman/Documents/TestEvidence/Registry/Vibranium-NTUSER.DAT')\n```\n\n#### Iterate recursively over the entire hive, from root key\n```python\nfor entry in reg.recurse_subkeys(as_json=True):\n    print(entry)\n```\n\n#### Iterate over a key and get all subkeys and their modification time:\n```\nfor sk in reg.get_key('Software').iter_subkeys():\n    print(sk.name, convert_wintime(sk.header.last_modified).isoformat())\n\nAdobe 2019-02-03T22:05:32.525965\nAppDataLow 2019-02-03T22:05:32.526047\nMcAfee 2019-02-03T22:05:32.526140\nMicrosoft 2019-02-03T22:05:32.526282\nNetscape 2019-02-03T22:05:32.526352\nODBC 2019-02-03T22:05:32.526521\nPolicies 2019-02-03T22:05:32.526592\n```\n\n#### Get the values of a key:\n```\nreg.get_key('Software\\Microsoft\\Internet Explorer\\BrowserEmulation').get_values(as_json=True)\n[{'name': 'CVListTTL',\n  'value': 0,\n  'value_type': 'REG_DWORD',\n  'is_corrupted': False},\n {'name': 'UnattendLoaded',\n  'value': 0,\n  'value_type': 'REG_DWORD',\n  'is_corrupted': False},\n {'name': 'TLDUpdates',\n  'value': 0,\n  'value_type': 'REG_DWORD',\n  'is_corrupted': False},\n {'name': 'CVListXMLVersionLow',\n  'value': 2097211,\n  'value_type': 'REG_DWORD',\n  'is_corrupted': False},\n {'name': 'CVListXMLVersionHigh',\n  'value': None,\n  'value_type': 'REG_DWORD',\n  'is_corrupted': False},\n {'name': 'CVListLastUpdateTime',\n  'value': None,\n  'value_type': 'REG_DWORD',\n  'is_corrupted': False},\n {'name': 'IECompatVersionHigh',\n  'value': None,\n  'value_type': 'REG_DWORD',\n  'is_corrupted': False},\n {'name': 'IECompatVersionLow',\n  'value': 2097211,\n  'value_type': 'REG_DWORD',\n  'is_corrupted': False},\n {'name': 'StaleCompatCache',\n  'value': 0,\n  'value_type': 'REG_DWORD',\n  'is_corrupted': False}]\n```\n\n#### Use as a plugin:\n```\nfrom regipy.plugins.ntuser.ntuser_persistence import NTUserPersistencePlugin\nNTUserPersistencePlugin(reg, as_json=True).run()\n\n{\n\t'Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run': {\n\t\t'timestamp': '2019-02-03T22:10:52.655462',\n\t\t'values': [{\n\t\t\t'name': 'Sidebar',\n\t\t\t'value': '%ProgramFiles%\\\\Windows Sidebar\\\\Sidebar.exe /autoRun',\n\t\t\t'value_type': 'REG_EXPAND_SZ',\n\t\t\t'is_corrupted': False\n\t\t}]\n\t}\n}\n```\n\n####  Run all relevant plugins for a specific hive\n```\nfrom regipy.plugins.utils import run_relevant_plugins\nreg = RegistryHive('/Users/martinkorman/Documents/TestEvidence/Registry/SYSTEM')\nrun_relevant_plugins(reg, as_json=True)\n\n{\n\t'routes': {},\n\t'computer_name': [{\n\t\t'control_set': 'ControlSet001\\\\Control\\\\ComputerName\\\\ComputerName',\n\t\t'computer_name': 'DESKTOP-5EG84UG',\n\t\t'timestamp': '2019-02-03T22:19:28.853219'\n\t}]\n}\n\n\n```"
}
