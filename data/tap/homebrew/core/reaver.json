{
  "name": "reaver",
  "full_name": "reaver",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Implements brute force attack to recover WPA/WPA2 passkeys",
  "license": "GPL-2.0-or-later",
  "homepage": "https://github.com/t6x/reaver-wps-fork-t6x",
  "versions": {
    "stable": "1.6.6",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/t6x/reaver-wps-fork-t6x/releases/download/v1.6.6/reaver-1.6.6.tar.xz",
      "tag": null,
      "revision": null,
      "checksum": "e329a0da0b6dd888916046535ff86a6aa144644561937954e560bb1810ab6702"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/reaver/blobs/sha256:c5905b2c9cb255997aafa2a96c694b88b75dd39eabddcd1801d05971b4331c24",
          "sha256": "c5905b2c9cb255997aafa2a96c694b88b75dd39eabddcd1801d05971b4331c24"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/reaver/blobs/sha256:3e4fe541cec1d31a1e6836829dcf050586e385cd030664c8971f9aac369e2313",
          "sha256": "3e4fe541cec1d31a1e6836829dcf050586e385cd030664c8971f9aac369e2313"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/reaver/blobs/sha256:fa4d8cefff1f3c59bcb4cad2a696bc5e16c1f82d201afe7bc78b22f28f182493",
          "sha256": "fa4d8cefff1f3c59bcb4cad2a696bc5e16c1f82d201afe7bc78b22f28f182493"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/reaver/blobs/sha256:be139f6efa3077d3c328684afe33401c2ca6e09e716bf8842d6acc7c71972c9d",
          "sha256": "be139f6efa3077d3c328684afe33401c2ca6e09e716bf8842d6acc7c71972c9d"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/reaver/blobs/sha256:69e3fcd6c69e7e71bfdbf84a780f466097163cc8a34f8928350d02b4fb57a1ce",
          "sha256": "69e3fcd6c69e7e71bfdbf84a780f466097163cc8a34f8928350d02b4fb57a1ce"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/reaver/blobs/sha256:ec036d6b49bce14bfdee5ff3f7f03468148d60b48c06ee75bfd156a9c387baf1",
          "sha256": "ec036d6b49bce14bfdee5ff3f7f03468148d60b48c06ee75bfd156a9c387baf1"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/reaver/blobs/sha256:e4f10cca5698e3ae3d03841e67d84d277d8e05a06c181567a2a1de5ad74f40a3",
          "sha256": "e4f10cca5698e3ae3d03841e67d84d277d8e05a06c181567a2a1de5ad74f40a3"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/reaver/blobs/sha256:5301d082e3bd0a833d6b352e994d3b39edced488a46ef597b17aaa1e25669989",
          "sha256": "5301d082e3bd0a833d6b352e994d3b39edced488a46ef597b17aaa1e25669989"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "pixiewps"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "libpcap",
    "sqlite"
  ],
  "uses_from_macos_bounds": [
    {},
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/reaver.rb",
  "ruby_source_checksum": {
    "sha256": "30e4f0a3857c48125cb28ef07da2108da167733846fd43da365aad2d31431abf"
  },
  "date_added": "2013-08-17T23:35:11-07:00",
  "readme": "# Overview\n\n**Reaver** implements a **brute force attack** against **Wifi Protected Setup** (WPS) registrar **PINs** in order to recover **WPA/WPA2 passphrases**, as described in [Brute forcing Wi-Fi Protected Setup When poor design meets poor implementation.](http://sviehb.files.wordpress.com/2011/12/viehboeck_wps.pdf) by **Stefan Viehb√∂ck**.  \n**Reaver** has been designed to be a robust and practical attack against **Wi-Fi Protected Setup (WPS)** registrar PINs in order to **recover WPA/WPA2 passphrases** and has been tested against a wide variety of access points and WPS implementations.  \n**Depending on the target's Access Point (AP)**, to recover the plain text WPA/WPA2 passphrase the **average** amount of time for the transitional **online brute force** method is **between 4-10 hours**. In practice, it will generally take half this time to guess the correct WPS pin and recover the passphrase.\nWhen using the **offline attack**, **if** the AP is vulnerable, it may take only a matter of **seconds to minutes**.\n\nThe first version of **reaver-wps** (reaver 1.0) was created by **Craig Heffner** in 2011.   \n**reaver-wps-fork-t6x** version **1.6.x** is a **community forked version** which includes **various bug fixes**, **new features** and additional attack method (such as the **offline Pixie Dust** attack).\n\n* The original Reaver (version 1.0 to 1.4) can be found in [google code archives](https://code.google.com/p/reaver-wps/).\n* The discontinued reaver-wps-fork-t6x community edition, reaver version 1.5.3, which includes the Pixie Dust attack, is now the  [old-master branch](https://github.com/t6x/reaver-wps-fork-t6x/tree/master-old) from this repository.  \n* The latest revison of reaver-wps-fork-t6x community edition is the [master branch](https://github.com/t6x/reaver-wps-fork-t6x)  from this repository.  \nReaver versioning was updated to **1.6.x** in order to identify the new cycle.  \nAll stable relases since the first beta version of reaver 1.6 can be downloaded from our [Releases](https://github.com/t6x/reaver-wps-fork-t6x/releases) page.  \n* More information about the Pixie Dust attack (including **which APs are vulnerable**) can be found in [pixiewps repository](https://github.com/wiire/pixiewps), \n[pixie dust thread (in Kali forum)](https://forums.kali.org/showthread.php?24286-WPS-Pixie-Dust-Attack-(Offline-WPS-Attack)) & [Dominique Bongard's full disclosure](https://docs.google.com/spreadsheets/d/1tSlbqVQ59kGn8hgmwcPTHUECQ3o9YhXR91A_p7Nnj5Y/edit?usp=sharing)\n\n- - -\n\n# Requirements  \n\n## Build-time dependencies\n\n - libpcap-dev  \n - build-essential  \n\n## Runtime-time dependencies  \n\n - pixiewps (optional, required for pixiedust attack)  \n - aircrack-ng (optional, though recommended)  \n\n## Example \n```\nsudo apt -y install build-essential libpcap-dev aircrack-ng pixiewps\n```\n_The example uses [Kali Linux](https://www.kali.org/) as the Operating System (OS) as `pixiewps` is included._\n\nYou **must** already have Wiire's Pixiewps installed to perform a pixie dust attack, latest version can be found in its [official github repository](https://github.com/wiire/pixiewps).\n\n- - -\n\n# Setup\n\n**Download**\n\n`git clone https://github.com/t6x/reaver-wps-fork-t6x`\n\nor\n\n`wget https://github.com/t6x/reaver-wps-fork-t6x/archive/master.zip && unzip master.zip`\n\n**Locate the shell**\n\n`cd reaver-wps-fork-t6x*`  \n`cd src`  \n\n**Compile**\n\n`./configure`  \n`make`  \n\n**Install**\n\n`sudo make install`  \n\n- - -\n\n# Reaver Usage\n\n```\nCopyright (c) 2011, Tactical Network Solutions, Craig Heffner <cheffner@tacnetsol.com>\n\nRequired Arguments:\n\t-i, --interface=<wlan>          Name of the monitor-mode interface to use\n\t-b, --bssid=<mac>               BSSID of the target AP\n\nOptional Arguments:\n\t-m, --mac=<mac>                 MAC of the host system\n\t-e, --essid=<ssid>              ESSID of the target AP\n\t-c, --channel=<channel>         Set the 802.11 channel for the interface (implies -f)\n\t-s, --session=<file>            Restore a previous session file\n\t-C, --exec=<command>            Execute the supplied command upon successful pin recovery\n\t-f, --fixed                     Disable channel hopping\n\t-5, --5ghz                      Use 5GHz 802.11 channels\n\t-v, --verbose                   Display non-critical warnings (-vv or -vvv for more)\n\t-q, --quiet                     Only display critical messages\n\t-h, --help                      Show help\n\nAdvanced Options:\n\t-p, --pin=<wps pin>             Use the specified pin (may be arbitrary string or 4/8 digit WPS pin)\n\t-d, --delay=<seconds>           Set the delay between pin attempts [1]\n\t-l, --lock-delay=<seconds>      Set the time to wait if the AP locks WPS pin attempts [60]\n\t-g, --max-attempts=<num>        Quit after num pin attempts\n\t-x, --fail-wait=<seconds>       Set the time to sleep after 10 unexpected failures [0]\n\t-r, --recurring-delay=<x:y>     Sleep for y seconds every x pin attempts\n\t-t, --timeout=<seconds>         Set the receive timeout period [10]\n\t-T, --m57-timeout=<seconds>     Set the M5/M7 timeout period [0.40]\n\t-A, --no-associate              Do not associate with the AP (association must be done by another application)\n\t-N, --no-nacks                  Do not send NACK messages when out of order packets are received\n\t-S, --dh-small                  Use small DH keys to improve crack speed\n\t-L, --ignore-locks              Ignore locked state reported by the target AP\n\t-E, --eap-terminate             Terminate each WPS session with an EAP FAIL packet\n\t-J, --timeout-is-nack           Treat timeout as NACK (DIR-300/320)\n\t-F, --ignore-fcs                Ignore frame checksum errors\n\t-w, --win7                      Mimic a Windows 7 registrar [False]\n\t-K, --pixie-dust                Run pixiedust attack\n\t-Z                              Run pixiedust attack\n\t-O, --output-file=<filename>\tWrite packets of interest into pcap file\n\t-M, --mac-changer               Change the last digit of the MAC Address for each pin attempt [False]\n\nExample:\n\treaver -i wlan0mon -b 00:90:4C:C1:AC:21 -vv\n ```  \n \nOptions description and examples of use can be found in the [Readme from Craig Heffner](https://github.com/t6x/reaver-wps-fork-t6x/blob/master/docs/README.REAVER). Here comes a description of the new options introduced since then:  \n## -K or -Z  // --pixie-dust \nThe `-K` and `-Z` option perform the offline attack, Pixie Dust _(`pixiewps`)_, by automatically passing the **PKE**, **PKR**, **E-Hash1**, **E-Hash2**, **E-Nonce** and **Authkey** variables. `pixiewps` will then try to attack **Ralink**, **Broadcom** and **Realtek** detected chipset.\n**Special note**: If you are attacking a **Realtek AP**, **do NOT** use small DH Keys (`-S`) option.\nUser will have to execute reaver with the cracked PIN (option -p) to get the WPA pass-phrase. \nThis is a temporary solution and an option to do a full attack will be implemented soon\n## -p with arbitrary string // --pin=<wps pin>  \nSee our wiki: [Introducing a new way to crack WPS: Option p with an Arbitrary String](https://github.com/t6x/reaver-wps-fork-t6x/wiki/Introducing-a-new-way-to-crack-WPS:-Option--p-with-an-Arbitrary-String) \n\n# Wash Usage  \n\n```\nCopyright (c) 2011, Tactical Network Solutions, Craig Heffner\n\nRequired Arguments:\n\t-i, --interface=<iface>              Interface to capture packets on\n\t-f, --file [FILE1 FILE2 FILE3 ...]   Read packets from capture files\n\nOptional Arguments:\n\t-c, --channel=<num>                  Channel to listen on [auto]\n\t-n, --probes=<num>                   Maximum number of probes to send to each AP in scan mode [15]\n\t-O, --output-file=<filename>\t     Write packets of interest into pcap file\n\t-F, --ignore-fcs                     Ignore frame checksum errors\n\t-2, --2ghz                           Use 2.4GHz 802.11 channels\n\t-5, --5ghz                           Use 5GHz 802.11 channels\n\t-s, --scan                           Use scan mode\n\t-u, --survey                         Use survey mode [default]\n\t-a, --all                            Show all APs, even those without WPS\n\t-j, --json                           print extended WPS info as json\n\t-U, --utf8\t\t\t     \t\t\t Show UTF8 ESSID (does not sanitize ESSID, dangerous)\n\t-p, --progress                       Show percentage of crack progress\n\t-h, --help                           Show help\n\nExample:\n\twash -i wlan0mon\n```\n\nA detailed description of the options with  concrete syntax examples can be found in [Craig Heffner's wash readme](https://github.com/t6x/reaver-wps-fork-t6x/blob/master/docs/README.WASH).  \nAbout the new options and features: \n## -a  //  --all  \nThe option `-a` of Wash will list all access points, including those without WPS enabled.  \n## -j  //  --json  \nThe extended WPS information (serial, model...) from the AP probe answer will be printed in the terminal (in json format)  \n## \"Vendor\" column  \nWash now displays the manufacturer of the wifi chipset from the Acces Points in order to know if they are vulnerable to pixie dust attack.  \n## Stdout can be piped  \nNotice that wash output can be piped into other commands. For more information see the wiki article [Everything about the new options from wash](https://github.com/t6x/reaver-wps-fork-t6x/wiki/Everything-about-the-new-options-from-wash)  \n  \n# Acknowledgements\n\n## Contribution\nCreator of reaver-wps-fork-t6x \"community edition\": \n`t6x`  \n  \nMain developer since version 1.6b: \n`rofl0r`  \n\nModifications made by:\n`t6_x`, `DataHead`, `Soxrok2212`, `Wiire`, `AAnarchYY`, `kib0rg`, `KokoSoft`, `rofl0r`, `horrorho`, `binarymaster`, `«∏otaz`, `Adde88`, `feitoi`\n\nSome ideas made by:\n`nuroo`, `kcdtv`\n\nBug fixes made by:\n`alxchk`, `USUARIONUEVO`, `ldm314`, `vk496`, `falsovsky`, `rofl0r`, `xhebox`\n\n## Special Thanks\n\n* `Soxrok2212` for all work done to help in the development of tools\n* `Wiire` for developing Pixiewps\n* `Craig Heffner` for creating Reaver and for the creation of default pin generators (D-Link, Belkin) - http://www.devttys0.com/\n* `Dominique Bongard` for discovering the Pixie Dust attack."
}
