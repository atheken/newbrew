{
  "name": "dura",
  "full_name": "dura",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Backs up your work automatically via Git commits",
  "license": "Apache-2.0",
  "homepage": "https://github.com/tkellogg/dura",
  "versions": {
    "stable": "0.2.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/tkellogg/dura/archive/refs/tags/v0.2.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "6486afa167cc2c9b6b6646b9a3cb36e76c1a55e986f280607c8933a045d58cca"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/dura/blobs/sha256:9afb3146b424af7ac38eb1054ba8ed6f6f918c4eeb3a1ebce44696b9c59af8c1",
          "sha256": "9afb3146b424af7ac38eb1054ba8ed6f6f918c4eeb3a1ebce44696b9c59af8c1"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/dura/blobs/sha256:fedf4c54dd1cc680b6dbdf2534b69d9b8e256e067636b0fcbb531ea0b5cb8476",
          "sha256": "fedf4c54dd1cc680b6dbdf2534b69d9b8e256e067636b0fcbb531ea0b5cb8476"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/dura/blobs/sha256:6e9e81ec0f29a48921d55bb3168648fbef695dc3d1a242c6aa851bfdf3575dca",
          "sha256": "6e9e81ec0f29a48921d55bb3168648fbef695dc3d1a242c6aa851bfdf3575dca"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/dura/blobs/sha256:d4ef7d4344c67c86442066f7b09e11e5224b93c607dfbea0e91d08eea9f8d38b",
          "sha256": "d4ef7d4344c67c86442066f7b09e11e5224b93c607dfbea0e91d08eea9f8d38b"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/dura/blobs/sha256:189cbc09ab1621aa501666194c27b9616a9b0674ace36ac981896a02816bbc25",
          "sha256": "189cbc09ab1621aa501666194c27b9616a9b0674ace36ac981896a02816bbc25"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/dura/blobs/sha256:c01130844f54014c8ad174037da08ac04ec826811c89e917c388662d61f92bd2",
          "sha256": "c01130844f54014c8ad174037da08ac04ec826811c89e917c388662d61f92bd2"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/dura/blobs/sha256:b0279f3f31e75da9843e5a0ad3bbcae62a29277153c8e8992d4de490397aca70",
          "sha256": "b0279f3f31e75da9843e5a0ad3bbcae62a29277153c8e8992d4de490397aca70"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dura/blobs/sha256:b01d4685f6aa2d5fe11722b7c7379695600d6827fa48bd72addebc9cfbd16968",
          "sha256": "b01d4685f6aa2d5fe11722b7c7379695600d6827fa48bd72addebc9cfbd16968"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust",
    "pkg-config"
  ],
  "dependencies": [
    "openssl@3"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "zlib"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": {
    "run": [
      "/home/linuxbrew/.linuxbrew/opt/dura/bin/dura",
      "serve"
    ],
    "run_type": "immediate",
    "keep_alive": {
      "always": true
    },
    "working_dir": "/home/linuxbrew/.linuxbrew/var",
    "log_path": "/home/linuxbrew/.linuxbrew/var/log/dura.log.json",
    "error_log_path": "/home/linuxbrew/.linuxbrew/var/log/dura.stderr.log"
  },
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/dura.rb",
  "ruby_source_checksum": {
    "sha256": "cae510139fae9534f3022565a485f71a786cdfc9d3ae5acbaa7534c77da7d968"
  },
  "date_added": "2022-07-26T18:19:43+00:00",
  "readme": "# Dura\n\n[![Build][build badge]][build action]\n\nDura is a background process that watches your Git repositories and commits your uncommitted changes without impacting\nHEAD, the current branch, or the Git index (staged files). If you ever get into an \"oh snap!\" situation where you think\nyou just lost days of work, checkout a `dura` branch and recover.\n\nWithout `dura`, you use Ctrl-Z in your editor to get back to a good state. That's so 2021. Computers crash and Ctrl-Z\nonly works on files independently. Dura snapshots changes across the entire repository as-you-go, so you can revert to\n\"4 hours ago\" instead of \"hit Ctrl-Z like 40 times or whatever\". Finally, some sanity.\n\n## How to use\n\nRun it in the background:\n\n```bash\n$ dura serve &\n```\n\nThe `serve` can happen in any directory. The `&` is Unix shell syntax to run the process in the background, meaning that you can start\n`dura` and then keep using the same terminal window while `dura` keeps running. You could also run `dura serve` in a\nwindow that you keep open.\n\nLet `dura` know which repositories to watch:\n\n```bash\n$ cd some/git/repo\n$ dura watch\n```\n\nRight now, you have to `cd` into each repo that you want to watch, one at a time.\n\nIf you have thoughts on how to do this better, share them [here](https://github.com/tkellogg/dura/issues/3). Until that's sorted, you can\nrun something like `find ~ -type d -name .git -prune | xargs -I= sh -c \"cd =/..; dura watch\"` to get started on your existing repos.\n\nMake some changes. No need to commit or even stage them. Use any Git tool to see the `dura` branches:\n\n```bash\n$ git log --all\n```\n\n`dura` produces a branch for every real commit you make and makes commits to that branch without impacting your working\ncopy. You keep using Git exactly as you did before.\n\n\nLet `dura` know that it should stop running in the background with the `kill` command.\n\n```bash\n$ dura kill\n```\n\nThe `kill` can happen in any directory. It indicates to the `serve`\nprocess that it should exit if there is a `serve` process running.\n\n## How to recover\n\nThe `dura` branch that's tracking your current uncommitted changes looks like `dura/f4a88e5ea0f1f7492845f7021ae82db70f14c725`.\nIn $SHELL, you can get the branch name via:\n\n```bash\n$ echo \"dura/$(git rev-parse HEAD)\"\n```\n\nUse `git log` or [`tig`](https://jonas.github.io/tig/) to figure out which commit you want to rollback to. Copy the hash\nand then run something like\n\n```bash\n# Or, if you don't trust dura yet, `git stash`\n$ git reset HEAD --hard\n# get the changes into your working directory\n$ git checkout $THE_HASH\n# last few commands reset HEAD back to master but with changes uncommitted\n$ git checkout -b temp-branch\n$ git reset master\n$ git checkout master\n$ git branch -D temp-branch\n```\n\nIf you're interested in improving this experience, [collaborate here](https://github.com/tkellogg/dura/issues/4).\n\n## Install\n\n### Cargo Install\n1. Install Cargo  \n2. If you want run release version, type ```cargo install dura``` else type ```cargo install --git https://github.com/tkellogg/dura```\n\n### By Source\n\n1. Install Rust (e.g., `brew install rustup && brew install rust`)\n2. Clone this repository (e.g., `git clone https://github.com/tkellogg/dura.git`)\n3. Navigate to repository base directory (`cd dura`)\n4. Run `cargo install --path .` **Note:** If you receive a failure fetching the cargo dependencies try using the local [git client for cargo fetches](https://doc.rust-lang.org/cargo/reference/config.html#netgit-fetch-with-cli). `CARGO_NET_GIT_FETCH_WITH_CLI=true cargo install --path .`\n\n### Mac OS X\n\nThis installs `dura` and sets up a launchctl service to keep it running.\n\n```bash\n$ brew install dura\n```\n\n### Windows\n1. Download [rustup-init](https://www.rust-lang.org/tools/install)\n2. Clone this repository (e.g., `git clone https://github.com/tkellogg/dura.git`)\n3. Navigate to repository base directory (`cd dura`)\n4. Run `cargo install --path .` **Note:** If you receive a failure fetching the cargo dependencies try using the local [git client for cargo fetches](https://doc.rust-lang.org/cargo/reference/config.html#netgit-fetch-with-cli). `CARGO_NET_GIT_FETCH_WITH_CLI=true cargo install --path .`\n\n### Arch Linux\n\n```bash\n$ paru -S dura-git\n```\n\n### Nix / Nixos\n\n[Nix][nix website] is a tool that takes a unique approach to package\nmanagement and system configuration. NixOS is a Linux distribution\nbuilt on top of the Nix package manager.\n\nTo run `dura` locally using pre-compiled binaries:\n\n```bash\nnix shell nixpkgs#dura\n```\n\nIf you're willing to contribute and develop, `dura` also provides its\nown ready-to-use [Nix flake][nix flake].\n\nTo build and run the latest development version of `dura` locally:\n\n```bash\nnix run github:tkellogg/dura\n```\n\nTo run a development environment with the required tools\nto develop:\n\n```bash\nnix develop github:tkellogg/dura\n```\n\n## FAQ\n\n### Is this stable?\n\nYes. Lots of people have been using it since 2022-01-01 without issue. It uses [libgit2](https://libgit2.org/) to make the commits, so it's fairly battle hardened.\n\n### How often does this check for changes?\n\nEvery now and then, like 5 seconds or so. Internally there's a control loop that sleeps 5 seconds between iterations, so it\nruns less frequently than every 5 seconds (potentially a lot less frequently, if there's a lot of work to do).\n\n\nBrought to you by <a rel=\"nofollow me\" href=\"https://hachyderm.io/@kellogh\">Tim Kellogg</a>.\n\n\n[build badge]: https://github.com/tkellogg/dura/actions/workflows/build.yaml/badge.svg\n[build action]: https://github.com/tkellogg/dura/actions/workflows/build.yaml\n[nix website]: https://nixos.org/\n[nix flake]: https://nixos.wiki/wiki/Flakes"
}
