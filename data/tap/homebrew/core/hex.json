{
  "name": "hex",
  "full_name": "hex",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Futuristic take on hexdump",
  "license": "MIT",
  "homepage": "https://github.com/sitkevij/hex",
  "versions": {
    "stable": "0.4.2",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/sitkevij/hex/archive/refs/tags/v0.4.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "a7cc1ece337fc19e77fbbbca145001bc5d447bde4118eb6de2c99407eb1a3b74"
    },
    "head": {
      "url": "https://github.com/sitkevij/hex.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/hex/blobs/sha256:245116da00ee18fb6c48ddbd0083b62e86a41957f2b599b47d51ffec1a5adcd4",
          "sha256": "245116da00ee18fb6c48ddbd0083b62e86a41957f2b599b47d51ffec1a5adcd4"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/hex/blobs/sha256:d926a35caa10284418a160ec7a6cb5cb44121d2fd03b52d84fe7734196b4524f",
          "sha256": "d926a35caa10284418a160ec7a6cb5cb44121d2fd03b52d84fe7734196b4524f"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/hex/blobs/sha256:de567e3c63410e409c9d2940c0b95db95a1a7b86ef3b6583a701d0b6dfc4f77e",
          "sha256": "de567e3c63410e409c9d2940c0b95db95a1a7b86ef3b6583a701d0b6dfc4f77e"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/hex/blobs/sha256:f91fdf2c20304970c38cd1aec11cbe0e5e416917f9c22a4a19cd7d2d395f0401",
          "sha256": "f91fdf2c20304970c38cd1aec11cbe0e5e416917f9c22a4a19cd7d2d395f0401"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/hex/blobs/sha256:3630ae16eab4b22999fd1f4b34bdd69a8de15a63973f82268fb45dddbb5f080e",
          "sha256": "3630ae16eab4b22999fd1f4b34bdd69a8de15a63973f82268fb45dddbb5f080e"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/hex/blobs/sha256:d4e9bcfc557b0325b96003c1626506f4c1f66ad0a6dda54b9a8868c251a61ba1",
          "sha256": "d4e9bcfc557b0325b96003c1626506f4c1f66ad0a6dda54b9a8868c251a61ba1"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/hex/blobs/sha256:965b7895b352c914b2bf1a8b26bff934adf9eb5d6223a3da309b5b57154e31c0",
          "sha256": "965b7895b352c914b2bf1a8b26bff934adf9eb5d6223a3da309b5b57154e31c0"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/hex.rb",
  "ruby_source_checksum": {
    "sha256": "534cbd12da2ee68be0d2a43e7eb887c73a7743651f06c45ef501adf69da0cb30"
  },
  "date_added": "2023-07-05T00:56:07-04:00",
  "readme": "# hex (hx)\n\nFuturistic take on hexdump.\n\n[hx](https://github.com/sitkevij/hex) accepts a file path as input and outputs a hexadecimal colorized view to stdout.\n\n```sh\n$ hx tests/files/alphanumeric.txt\n0x000000: 0x61 0x62 0x63 0x64 0x65 0x66 0x67 0x68 0x69 0x6a abcdefghij\n0x00000a: 0x6b 0x69 0x6c 0x6d 0x6e 0x6f 0x70 0x71 0x72 0x73 kilmnopqrs\n0x000014: 0x74 0x75 0x76 0x77 0x78 0x79 0x7a 0x30 0x31 0x32 tuvwxyz012\n0x00001e: 0x33 0x34 0x35 0x36 0x37 0x38 0x39 0x0a 0x30 0x31 3456789.01\n0x000028: 0x32 0x33 0x34 0x35 0x36 0x37 0x38 0x39 0x30 0x31 2345678901\n0x000032: 0x32 0x33 0x34 0x35 0x36 0x37 0x38 0x39 0x30 0x31 2345678901\n0x00003c: 0x32 0x33 0x34 0x35 0x36 0x37 0x38 0x39           23456789\n   bytes: 68\n```\n\n[hx](https://github.com/sitkevij/hex) also accepts stdin as input.\n\n```sh\ncat \"tests/files/alphanumeric.txt\" | hx\n0x000000: 0x61 0x62 0x63 0x64 0x65 0x66 0x67 0x68 0x69 0x6a abcdefghij\n0x00000a: 0x6b 0x69 0x6c 0x6d 0x6e 0x6f 0x70 0x71 0x72 0x73 kilmnopqrs\n0x000014: 0x74 0x75 0x76 0x77 0x78 0x79 0x7a 0x30 0x31 0x32 tuvwxyz012\n0x00001e: 0x33 0x34 0x35 0x36 0x37 0x38 0x39 0x0a 0x30 0x31 3456789.01\n0x000028: 0x32 0x33 0x34 0x35 0x36 0x37 0x38 0x39 0x30 0x31 2345678901\n0x000032: 0x32 0x33 0x34 0x35 0x36 0x37 0x38 0x39 0x30 0x31 2345678901\n0x00003c: 0x32 0x33 0x34 0x35 0x36 0x37 0x38 0x39           23456789\n   bytes: 68\n```\n\n[![build](https://travis-ci.org/sitkevij/hex.svg?branch=master)](https://travis-ci.org/sitkevij/hex)\n[![coverage](https://img.shields.io/codecov/c/github/sitkevij/hex/master.svg)](https://codecov.io/gh/sitkevij/hex)\n\n## quick links\n\n* [install](#install)\n* [features](#features)\n* [manual](#manual)\n* [license](#license)\n\n## examples\n\n### lower hex format -fx\n\n`$ hx src/main.rs`\n\n![lower hex output format](https://raw.githubusercontent.com/sitkevij/hex/master/assets/hex_screenshot_macos_format_default.png \"default output format\")\n\n### binary hex format -fb\n\n`$ hx -fb -c4 src/main.rs`\n\n![binary hex output format](https://raw.githubusercontent.com/sitkevij/hex/master/assets/hex_screenshot_macos_format_b.png)\n\n### octal hex format -fo\n\n`$ hx -fo -c8 src/main.rs`\n\n![octal hex output format](https://raw.githubusercontent.com/sitkevij/hex/master/assets/hex_screenshot_macos_format_o.png)\n\n## install\n\n### crates.io install\n\nIf `cargo` is already installed, simply:\n\n```sh\ncargo install hx\n```\n\n### source install\n\nFrom within the `hx` source code directory, simply execute:\n\n```sh\nmake install\n```\n\nThis will run the following `cargo` commands:\n\n```sh\ncargo build --release\ncargo test --verbose --all -- --nocapture\ncargo install --path .\n```\n\nWhich will compile the release version, run tests and install release binary to `<USERDIR>/.cargo/bin/hx`.\n\nIf `<USERDIR>/.cargo/bin` is part of the `PATH` environment variable, `hx` should be able to be executed anywhere in the shell.\n\n### arch linux install\n\n```sh\npacman -S hex\n```\n\n### debian install\n\n```sh\ncurl -sLO https://github.com/sitkevij/hex/releases/download/v0.4.2/hx_0.4.2_amd64.deb && dpkg -i hx_0.4.2_amd64.deb\n```\n\n### guix install\n\n```sh\nguix install hex\n```\n\nIn an isolated environment:\n\n```sh\nguix shell --container hex\n```\n\n### docker run\n\n```sh\ncat README.md | docker run -i sitkevij/hx:latest\n```\n\n## features\n\n### output arrays in `rust`, `c`, `golang`, `python`, `kotlin`, `java`, or `swift`\n\n`hx` has a feature which can output the input file bytes as source code arrays.\n\nFor example:\n\n#### rust array: -ar\n\n```sh\n$ hx -ar -c8 tests/files/tiny.txt\nlet ARRAY: [u8; 3] = [\n    0x69, 0x6c, 0x0a\n];\n```\n\n#### c array: -ac\n\n```sh\n$ hx -ac -c8 tests/files/tiny.txt\nunsigned char ARRAY[3] = {\n    0x69, 0x6c, 0x0a\n};\n```\n\n#### golang array: -ag\n\n```sh\n$ hx -ag -c8 tests/files/tiny.txt\na := [3]byte{\n    0x69, 0x6c, 0x0a,\n}\n```\n\n#### python array: -ap\n\n```sh\n$ hx -ap -c8 tests/files/tiny.txt\na = [\n    0x69, 0x6c, 0x0a\n]\n```\n\n#### kotlin array: -ak\n\n```sh\n$ hx -ak -c8 tests/files/tiny.txt\nval a = byteArrayOf(\n    0x69, 0x6c, 0x0a\n)\n```\n\n#### java array: -aj\n\n```sh\n$ hx -aj -c8 tests/files/tiny.txt\nbyte[] a = new byte[]{\n    0x69, 0x6c, 0x0a\n};\n```\n\n#### swift array: -as\n\n```sh\n$ hx -as -c8 tests/files/tiny.txt\nlet a: [UInt8] = [\n    0x69, 0x6c, 0x0a\n]\n```\n\n### NO_COLOR support\n\n`hx` will honor the NO_COLOR environment variable. If set, no color will be output to the terminal.\n\nRust `no_color` crate:\n\n* <https://crates.io/crates/no_color>\n* <https://github.com/sitkevij/no_color>\n\n## manual\n\n```txt\nhx\nFuturistic take on hexdump, made in Rust.\n\nUSAGE:\n    hx [OPTIONS] [INPUTFILE]\n    <stdout> | hx [OPTIONS]\n\nFLAGS:\n    -h, --help       Prints help information\n    -V, --version    Prints version information\n\nOPTIONS:\n    -a, --array <array_format>    Set source code format output: rust (r), C (c), golang (g), python (p), kotlin (k), java (j) [possible values: r, c, g, p, k, j]\n    -t, --color <color>           Set color tint terminal output. 0 to disable, 1 to enable [possible values: 0, 1]\n    -c, --cols <columns>          Set column length\n    -f, --format <format>         Set format of octet: Octal (o), LowerHex (x), UpperHex (X), Binary (b) [possible\n                                  values: o, x, X, b]\n    -u, --func <func_length>      Set function wave length\n    -l, --len <len>               Set <len> bytes to read\n    -p, --places <func_places>    Set function wave output decimal places\n\nARGS:\n    <INPUTFILE>    Pass file path as an argument for hex dump\n```\n\n## license\n\nMIT"
}
