{
  "name": "dcd",
  "full_name": "dcd",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Auto-complete program for the D programming language",
  "license": "GPL-3.0-or-later",
  "homepage": "https://github.com/dlang-community/DCD",
  "versions": {
    "stable": "0.15.2",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/dlang-community/DCD.git",
      "tag": "v0.15.2",
      "revision": "4946d49abdc35810254151923bab30fb3cc2c004",
      "checksum": null
    },
    "head": {
      "url": "https://github.com/dlang-community/dcd.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dcd/blobs/sha256:6b667329fc26ff55eba9b62027200818deef9378c15f5524e0031f35d471bf9e",
          "sha256": "6b667329fc26ff55eba9b62027200818deef9378c15f5524e0031f35d471bf9e"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dcd/blobs/sha256:1007cccd0a4c996e5a5515f978eefb67e57598d372ba7e43467d1c2220c80920",
          "sha256": "1007cccd0a4c996e5a5515f978eefb67e57598d372ba7e43467d1c2220c80920"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dcd/blobs/sha256:b6ce58f93e86c4d23bbb23da6acb37c31d707cc2da062b9c541ff6ea65b303c6",
          "sha256": "b6ce58f93e86c4d23bbb23da6acb37c31d707cc2da062b9c541ff6ea65b303c6"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dcd/blobs/sha256:6c9cb410387c80d7d596bb925cf90cc0d1dfc8c0f9d3780b0ad1302540352265",
          "sha256": "6c9cb410387c80d7d596bb925cf90cc0d1dfc8c0f9d3780b0ad1302540352265"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dcd/blobs/sha256:70550825ebf34833947ca9e7bcb9ec03292d6ecbf77e6691d4791eaadc4218ea",
          "sha256": "70550825ebf34833947ca9e7bcb9ec03292d6ecbf77e6691d4791eaadc4218ea"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dcd/blobs/sha256:5711120e29181ce752e1616c5777eea9864ac15d6583dc634aa3a9d9f47de647",
          "sha256": "5711120e29181ce752e1616c5777eea9864ac15d6583dc634aa3a9d9f47de647"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dcd/blobs/sha256:658abefb0b260e852fb16078e353b453929f6f04fa8af8f636ed2d5e2aa89fca",
          "sha256": "658abefb0b260e852fb16078e353b453929f6f04fa8af8f636ed2d5e2aa89fca"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "dmd"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/dcd.rb",
  "ruby_source_checksum": {
    "sha256": "eedabc02710a39870c7e2effc46fae464af3bb6131b7bd78d2837ae1911c184c"
  },
  "date_added": "2015-04-02T14:33:58+01:00",
  "readme": "# DCD [![CI status](https://travis-ci.org/dlang-community/DCD.svg?branch=master)](https://travis-ci.org/dlang-community/DCD/)\nThe D Completion Daemon is an auto-complete program for the D programming language.\n\n![Teaser](teaser.png \"This is what the future looks like - Jayce, League of Legends\")\n\n(The above is a screenshot of [Textadept](http://foicica.com/textadept/))\n\nDCD is not an IDE. DCD is designed to provide autocompletion for your favorite\ntext editor. If you are looking for an IDE, try [one of these](http://wiki.dlang.org/IDEs).\n\nDCD consists of a client and a server. The client (dcd-client) is almost always\nused through a text editor script or plugin, though it can be used from the\ncommand line. The server (dcd-server) is responsible for caching imported files,\ncalculating autocomplete information, and sending it back to the client.\n\n# Status\n\nThis program is reasonably stable. Please report problems on the Github issue\ntracker. Please be sure that you have read the documentation before filing an\nissue. (If you want to help your bug to get fixed faster, you can create a\n[test case](https://github.com/dlang-community/DCD/wiki/Testing) that helps isolate\nthe issue.)\n\n* Working:\n\t* Autocompletion of properties of built-in types such as int, float, double, etc.\n\t* Autocompletion of __traits, scope, and extern arguments\n\t* Autocompletion of enums\n\t* Autocompletion of class, struct, and interface instances.\n\t* Display of call tips for functions, constructors, and variables of function type\n\t* alias declarations\n\t* Public imports\n\t* Finding the declaration location of a symbol at the cursor\n\t* *import* statement completions\n\t* Display of documentation comments in function call tips\n\t* *alias this*\n\t* *auto* declarations (Mostly)\n\t* *with* statements\n\t* Simple UFCS suggestions for concrete types and fundamental types.\n* Not working:\n\t* UFCS completion for templates, literals, aliased types, UFCS function arguments, and '.' chaining with other UFCS functions.\n\t* UFCS calltips\n\t* Autocompletion of declarations with template arguments (This will work to some extent, but it won't do things like replace T with int)\n\t* Determining the type of an enum member when no base type is specified, but the first member has an initializer\n\t* auto functions (which can then propagate the failure to auto declarations)\n\t* That one feature that you *REALLY* needed\n\n# Setup\n### General\n\n1. Install a recent D compiler. DCD is tested with DMD 2.068.2, DMD 2.069.0-rc2, and LDC 0.16 (Do not use DMD 2.068.1)\n1. Follow the directions listed below for Homebrew, Git + Make, or Dub, depending on how you would like to build DCD.\n1. Configure your text editor to call the dcd-client program. See the [wiki](https://github.com/dlang-community/DCD/wiki/IDEs-and-Editors-with-DCD-support) for information on configuring your specific editor.\n1. Start the dcd-server program before editing code. (Unless, of course, your editor's plugin handles this for you)\n\n### Git + Make\n\n1. Install a recent D compiler.\n1. Run `git submodule update --init --recursive` after cloning this repository to grab the various dependencies.\n1. Optionally set the environment variable `DC` if you wish to use another compiler than the DMD known by the system.\n1. Run `make` to build the client and server. (Or run build.bat on Windows).\n\n### OS X w/ Homebrew\n\n1. `brew install dcd`\n\n### Dub\n\n1. `dub build --build=release --config=client`\n1. `dub build --build=release --config=server`\n\n# Sockets\n## TCP\n\nOn Windows DCD will use TCP sockets to communicate between the client and server.\nDCD can use TCP sockets on other operating systems if the client and server use\nthe `--tcp` or `--port` command-line switches.\n\n## UNIX domain sockets\n\nOperating systems that support UNIX domain sockets will use them by default.\nThe path to the socket file can be overriden with the `--socketFile` option.\nThese are the default paths:\n\n#### OSX\n\nThe socket will be created at `/var/tmp/dcd-${UID}.socket`\n\n#### Linux/BSD\n\nThe client and server will attempt to create the socket in the following locations:\n* `${XDG_RUNTIME_DIR}/dcd.socket`\n* `/tmp/dcd-${UID}.socket` if `XDG_RUNTIME_DIR` is not defined.\n\n# Client\n\nBecause DCD is designed to be used from a text editor, this section is written\nprimarily for plugin authors.\n\n## Get autocomplete information\n\nThe primary use case of the client is to query the server for autocomplete information.\nTo do this, provide the client with the file that the user is editing along with the\ncursor position (in bytes).\n\n    dcd-client -c123 sourcefile.d\n\nThis will cause the client to print a listing of completions to *stdout*.\nThe client will print either a listing of function call tips, or a listing of of\ncompletions depending on if the cursor was directly after a dot character or after\na left parenthesis.\n\nThe file name is optional. If it is not specified, input will be read from *stdin*.\n\n### Dot completion\n\nWhen the first line of output is \"identifiers\", the editor should display a\ncompletion list.\n\n#### Output format\n\nA line containing the string \"identifiers\" followed by the completions that are\navailable, one per line. Each line consists of the completion name followed by a\ntab character, followed by a completion kind\n\n##### Completion kinds\n\n* c - class name\n* i - interface name\n* s - struct name\n* u - union name\n* v - variable name\n* m - member variable name\n* k - keyword, built-in version, scope statement\n* f - function or method\n* F - UFCS function\n* g - enum name\n* e - enum member\n* P - package name\n* M - module name\n* a - array\n* A - associative array\n* l - alias name\n* t - template name\n* T - mixin template name\n* h - template type parameter (when no colon constraint)\n* p - template variadic parameter\n\n#### Example output\n\n\tidentifiers\n\tparts\tv\n\tname\tv\n\tlocation\tv\n\tqualifier\tv\n\tkind\tv\n\ttype\tv\n\tresolvedType\tv\n\tcalltip\tv\n\tgetPartByName\tf\n\n#### Extended output mode\n\nYou can pass `--extended` to dcd-client to get more information. Output will now be\nescaped (newlines get escaped to `\\n`, tabs get escaped to `\\t`, backslash gets escaped to `\\\\`).\n\nCalltips are slightly different here because they first start with the function name instead of\narguments and the second part will be blank. The actual calltip is now in the third column.\n\nColumns may be empty, in which case there will be multiple tabs next to each other.\n\nThe following information will be available in every line for completion in this format then in\na tab separated format:\n* identifier: raw name of a variable or function, etc\n* kind: empty for calltips, see above for rest\n* definition: function or variable definition string or close approximation for information display purpose\n* symbol location: in which file (or `stdin`) & byte offset this symbol is defined. Separated with a space.\n* documentation: escaped documentation string of this symbol\n* typeOf: resolved type name of this symbol:\n\t<!-- the items in list are copied from messages.d -->\n\t* For variables, fields, globals, constants: resolved type or empty if unresolved.\n\t* For functions: resolved return type or empty if unresolved.\n\t* For constructors: may be struct/class name or empty in any case.\n\t* Otherwise (probably) empty.\n\n#### Example `--extended` output\n\n\tidentifiers\n\tlibraryFunction\tf\tTuple!long libraryFunction(string s, string s2)\tstdin 190\tfoobar\n\tlibraryFunction\tf\tint* libraryFunction(string s)\tstdin 99\tHello\\nWorld\tint*\n\tlibraryVariable\tv\tint libraryVariable\tstdin 56\tMy variable\tint\n\tlibreTypes\tg\t\tstdin 298\n\n#### Note\n\nDCD's output will start with \"identifiers\" when completing at a left paren\ncharacter if the keywords *pragma*, *scope*, *__traits*, *extern*, or *version*\nwere just before the paren.\n\nTypes in the calltips and typeOf column may not be complete, e.g. missing\ntemplate parameters or typeof expressions, etc.\n\n### Parenthesis completion\n\nWhen the first line of output is \"calltips\", the editor should display a function\ncall tip.\n\n##### Output format\n\nA line containing the string \"calltips\", followed by zero or more lines, each\ncontaining a call tip for an overload of the given function.\n\n##### Example output\n\n\tcalltips\n\tSymbol findSymbolInCurrentScope(size_t cursorPosition, string name)\n\n## Doc comment display\n\n    dcd-client --doc -c 4298\n\nWhen run with the --doc or -d option, DCD will attempt to display documentation\ncomments associated with the symbol at the cursor position. In the case of\nfunctions there can be more than one documentation comment associated with a\nsymbol. One doc comment will be printed per line. Newlines within the doc\ncomments will be replaced with \"\\n\", and backslashes escaped as \"\\\\\".\n\n#### Example output\n\n\tAn example doc comment\\nParams: a = first param\\n    Returns: nothing\n\tAn example doc comment\\nParams: a = first param\\n     b = second param\\n    Returns: nothing\n\n## Clear server's autocomplete cache\n\n    dcd-client --clearCache\n\n## Add import search path\n\nImport paths can be added to the server without restarting it. To accomplish\nthis, run the client with the -I option:\n\n\tdcd-client -Ipath/to/imports\n\n## Remove import search path\n\nImport paths can be removed from the server without restarting it. To accomplish\nthis, run the client with the -R option:\n\n\tdcd-client -Rpath/to/imports\n\n## Find declaration of symbol at cursor\n\n    dcd-client --symbolLocation -c 123\n\nThe \"--symbolLocation\" or \"-l\" flags cause the client to instruct the server\nto return the path to the file and the byte offset of the declaration of the\nsymbol at the given cursor position.\n\nThe output consists of the absolute path to the file followed by a tab character\nfollowed by the byte offset, followed by a newline character. For example:\n\n\t/home/example/src/project/bar.d\t3482\n\n## Search for symbols by name\n\nThe \"--search\" or \"-s\" option causes the server to return location information\nfor all symbols with the given name in both the file being edited as well as\nthe server cache. The output format is one result per line, with the path, the\nsymbol type, and the byte offset of the symbol separated by tab characters.\n\n### Example\n\nSearch the server's cache for symbols named \"toImpl\". (Using echo to give an EOF\nin place of a file being edited.)\n\n    echo | dcd-client --search toImpl\n\n    /usr/include/dmd/phobos/std/conv.d  f   48491\n    /usr/include/dmd/phobos/std/conv.d  f   47527\n    /usr/include/dmd/phobos/std/conv.d  f   47229\n    /usr/include/dmd/phobos/std/conv.d  f   40358\n    /usr/include/dmd/phobos/std/conv.d  f   38348\n    /usr/include/dmd/phobos/std/conv.d  f   35619\n    /usr/include/dmd/phobos/std/conv.d  f   32743\n    /usr/include/dmd/phobos/std/conv.d  f   22486\n    /usr/include/dmd/phobos/std/conv.d  f   16322\n    /usr/include/dmd/phobos/std/conv.d  f   14829\n    /usr/include/dmd/phobos/std/conv.d  f   14066\n    /usr/include/dmd/phobos/std/conv.d  f   13058\n    /usr/include/dmd/phobos/std/conv.d  f   12717\n    /usr/include/dmd/phobos/std/conv.d  f   9494\n\n## Find the use of the symbol at the cursor\n\n    dcd-client --localUse -c 123\n\nThe \"--localUse\" or \"-u\" flags cause the client to instruct the server\nto return all the uses, within the same module, of the symbol located at the given cursor position.\n\n#### Output format\n\nWhen uses exist, if the source symbol is an identifier (a type, a variable name, etc.)\nand if the symbol is not ambiguous then the first line contains the location of the symbol\n(a file name or literally _stdin_), a tab then the offset to the symbol declaration.\nFollowing the first line is a list of all known uses of the symbol in the current file.\nThe list is composed of lines each containing a single number that indicates the byte offset\nfrom the start of the file to the i-th use.\n\nOtherwise the client outputs _00000_ so that the length of the answer is guaranteed to be at least 5 bytes.\n\n#### Example output\n\n    stdin 45\n    26\n    45\n    133\n\n\n# Server\n\nThe server must be running for the DCD client to provide autocomplete information.\nIn future versions the client may start the server if it is not running, but for\nnow it must be started manually or (usually) by an editor plugin.\n\n## Configuration Files\n\nThe server will attempt to read the file `${XDG_CONFIG_HOME}/dcd/dcd.conf`\n(`~/.config/dcd/dcd.conf` if XDG_CONFIG_HOME is not set) on Posix systems, or\n`dcd.conf` on Windows in the current working directory on startup.\nIf it exists, each line of the file is interpreted as a path that should be\nsearched when looking for module imports. Lines that start with the \"#\" character\nare ignored. Lines can contain environment variables which will be expanded\nduring loading. The name of the environment variable needs to the enclosed in\n${VAR}. For example:\n\n\t${HOME}/sysroot/usr/include/dmd/phobos\n\nKeep in mind that DCD treats import paths the same way that the compiler does.\nFor example, a configuration file like this will not work as expected:\n\n\t/usr/include/dmd/\n\nWhat you actually want is this:\n\n\t/usr/include/dmd/druntime/import\n\t/usr/include/dmd/phobos\n\n## Shut down the server\n\nThe server can be shut down by running the client with the `--shutdown` option:\n\n\tdcd-client --shutdown\n\n## Import directories\n\nImport directories can be specified on the command line at startup:\n\n\tdcd-server -I/home/user/code/one -I/home/user/code/two\n\n## Port number\n\nThe `--port` or `-p` option lets you specify the port number that the\nserver will listen on. The default port is 9166."
}
