{
  "name": "homeworlds",
  "full_name": "homeworlds",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "C++ framework for the game of Binary Homeworlds",
  "license": "BSD-2-Clause",
  "homepage": "https://github.com/Quuxplusone/Homeworlds/",
  "versions": {
    "stable": "20141022",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/Quuxplusone/Homeworlds.git",
      "tag": null,
      "revision": "917cd7e7e6d0a5cdfcc56cd69b41e3e80b671cde",
      "checksum": null
    }
  },
  "revision": 5,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/homeworlds/blobs/sha256:9a34aebc0071531698225b1e64a19a45c6eff1efecf4e948ee963d590e18f22f",
          "sha256": "9a34aebc0071531698225b1e64a19a45c6eff1efecf4e948ee963d590e18f22f"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/homeworlds/blobs/sha256:c64318bee66cc6f65c77c7cb846b87a3a756f0fe92045824f32963341564669d",
          "sha256": "c64318bee66cc6f65c77c7cb846b87a3a756f0fe92045824f32963341564669d"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/homeworlds/blobs/sha256:cccfb68554076f1c70337b70ca450779546af81986e81973cb7b25acb9a0220f",
          "sha256": "cccfb68554076f1c70337b70ca450779546af81986e81973cb7b25acb9a0220f"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/homeworlds/blobs/sha256:17d89e3982a30bade2c248ad02edde9c429128e0b25efb997f146c89eddeb016",
          "sha256": "17d89e3982a30bade2c248ad02edde9c429128e0b25efb997f146c89eddeb016"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/homeworlds/blobs/sha256:4ee671d1292a1e9c8f63ea3e1a40625d20b4349e3a3d188077646936ae9f60c5",
          "sha256": "4ee671d1292a1e9c8f63ea3e1a40625d20b4349e3a3d188077646936ae9f60c5"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/homeworlds/blobs/sha256:311295581320a095f2754a7adc5c1c291d2ad9a9baa368daee04c0c73c78ceca",
          "sha256": "311295581320a095f2754a7adc5c1c291d2ad9a9baa368daee04c0c73c78ceca"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/homeworlds/blobs/sha256:117c083e402e42c76765855805ecda628538eab7372fc80cceef84a100b9368f",
          "sha256": "117c083e402e42c76765855805ecda628538eab7372fc80cceef84a100b9368f"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/homeworlds/blobs/sha256:88f7a3976037aea175f742cb16c1e3e0e7e0f7945bf9f24b42eaedeabe16834c",
          "sha256": "88f7a3976037aea175f742cb16c1e3e0e7e0f7945bf9f24b42eaedeabe16834c"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "wxwidgets"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/homeworlds.rb",
  "ruby_source_checksum": {
    "sha256": "54088865fb12d25b15a77722b7abf4ceac09143959e91b4a2dcf74c971e394e2"
  },
  "date_added": "2017-02-08T10:08:53+00:00",
  "readme": "# Homeworlds\n\nThis is a C++ framework for working with the game of Binary Homeworlds,\na two-player game of strategy and tactics that might aptly be described\nas \"space chess\".  Homeworlds is normally played with a set of Icehouse\npieces in four colors, and without a board; the pieces shift on and off\nthe table during the game to represent star systems and spaceships.\nThe goal of the game is to eliminate all of the ships defending your\nenemy's homeworld: by moving in a larger ship to capture them, by\nsending in fleets of the appropriate colors to catastrophe them, or by\nsending in those fleets to catastrophe the enemy's binary star system\nitself.\n\n\n## Components\n\nThis project consists of five main components:\n\n\n### C++14 library code in `core-src/`\n\nThis poorly structured library includes C++ data structures for\n`SingleAction`, `WholeMove`, `PieceCollection`, `StarSystem`, and `GameState`.\nIt also includes these facilities:\n\n- `ApplyMove`: apply a `WholeMove` to a `GameState`\n\n- `AllMoves`: generate all possible `WholeMove`s from a given `GameState`\n\n- `InferMove`: \"fill in the blanks\" in an incomplete `WholeMove` such as `build g1`,\n    given the current `GameState`\n\n- `AIMove`: pick the best move from among all the possible `WholeMove`s following\n    the current `GameState`\n\n\n### `annotate`, a command-line game analyzer\n\nC++14 source code in `core-src/`.\n\nThis command-line utility brings together all of the above library code.\nYou can use it to play a game against the computer, by alternately entering\nyour own moves and the special command `ai_move`.\n\nTo run the C++ unit tests, first install GTest\n(instructions are [here](https://stackoverflow.com/a/46611467/1424877))\nand then run `make test`.\n\n\n### `wxgui`, a graphical game interface\n\nC++14 source code in `wxgui-src/`.\n\nThis GUI program uses the wxWidgets library, and is my experiment with\na graphical Homeworlds program. Use the mouse to drag pieces around on the\nboard, and then click \"Done\" to end your turn. The program will take care\nof figuring out what move you made to get from A to B.\n\n\n### `libannotate`, a Python extension\n\nPython and C++14 source code in `setup.py` and `pythonsrc/`.\n\nThis Python extension wraps up the C++ library code into a much simpler and cleaner\nPython module with just a few high-level entry points. Python class types are\nprovided only for `GameState` and `WholeMove`.\n\n    import libannotate\n    st = libannotate.GameState('Foo (0,b3r1) g1g3-\\nBar(1,b3y2) -g3')\n    m = st.getBestMove(0)\n    print (m.toString())\n\nFor more examples of usage, see `pythonsrc/tests.py`.\n\n\n### SuperDuperGames.org archive\n\nPython source code and text files in `superdupergames-archive/`.\n\nA partial mirror of the [SuperDuperGames.org](http://superdupergames.org)\ngame archive, containing over 700 game transcripts to date.\nIncludes a Python script to translate the archive games from SDG's format\ninto the format expected by `annotate` and `libannotate`.\n\n\n## Patches wanted\n\nDo you know how to make the wxWidgets GUI look better? Please submit\na patch! If you don't want to deal with the GitHub overhead, you can\nsend me an email.\n\nDo you think you can make a better AI? Again, please submit a patch!\nI know the current AI is very weak. The major hurdle is that it's not always\nfeasible to look more than one move ahead, unless you can figure out\nhow to prune bad moves. Homeworlds has a much higher branching factor\nthan either chess or go. Another hurdle is that my internal representations\nof game states and actions are fairly verbose and hard to manipulate\n(in terms of CPU cycles).\n\n\n## External links\n\n- http://boardgamegeek.com/boardgame/14634/homeworlds\n\n- http://www.wunderland.com/WTS/Andy/Games/ILoveHomeworlds.html\n\n- http://superdupergames.org/main.html\n\nThis project is not affiliated with SuperDuperGames.org, BoardGameGeek.com, or Looney Labs."
}
