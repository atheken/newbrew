{
  "name": "oauth2c",
  "full_name": "oauth2c",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "User-friendly CLI for OAuth2",
  "license": "Apache-2.0",
  "homepage": "https://github.com/cloudentity/oauth2c",
  "versions": {
    "stable": "1.10.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/cloudentity/oauth2c/archive/refs/tags/v1.10.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "9968c76ddeea4153dd19906ceb7481e0c7487a45f6c48796c397a18e6162b753"
    },
    "head": {
      "url": "https://github.com/cloudentity/oauth2c.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/oauth2c/blobs/sha256:1aaa0b07004e79eb9e1164e5d27db670d0803b38f970ab3dbe0d0613c5ea71fd",
          "sha256": "1aaa0b07004e79eb9e1164e5d27db670d0803b38f970ab3dbe0d0613c5ea71fd"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/oauth2c/blobs/sha256:1aaa0b07004e79eb9e1164e5d27db670d0803b38f970ab3dbe0d0613c5ea71fd",
          "sha256": "1aaa0b07004e79eb9e1164e5d27db670d0803b38f970ab3dbe0d0613c5ea71fd"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/oauth2c/blobs/sha256:1aaa0b07004e79eb9e1164e5d27db670d0803b38f970ab3dbe0d0613c5ea71fd",
          "sha256": "1aaa0b07004e79eb9e1164e5d27db670d0803b38f970ab3dbe0d0613c5ea71fd"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/oauth2c/blobs/sha256:8afcbcdc3338f40f50c0c48c1a38e714aceb9c254fa43f4518b7719bff1c58b9",
          "sha256": "8afcbcdc3338f40f50c0c48c1a38e714aceb9c254fa43f4518b7719bff1c58b9"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/oauth2c/blobs/sha256:8afcbcdc3338f40f50c0c48c1a38e714aceb9c254fa43f4518b7719bff1c58b9",
          "sha256": "8afcbcdc3338f40f50c0c48c1a38e714aceb9c254fa43f4518b7719bff1c58b9"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/oauth2c/blobs/sha256:8afcbcdc3338f40f50c0c48c1a38e714aceb9c254fa43f4518b7719bff1c58b9",
          "sha256": "8afcbcdc3338f40f50c0c48c1a38e714aceb9c254fa43f4518b7719bff1c58b9"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/oauth2c/blobs/sha256:283dcbf99b3cf9b818143966d863393818e7581f9d368837530f372b36b1ce97",
          "sha256": "283dcbf99b3cf9b818143966d863393818e7581f9d368837530f372b36b1ce97"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/oauth2c.rb",
  "ruby_source_checksum": {
    "sha256": "23e4d82b8f37cce4b11618a9313b72cd8e10df3956c798916317ca5a896707b0"
  },
  "date_added": "2022-12-11T03:49:08+00:00",
  "readme": "# OAuth2c: user-friendly OAuth CLI\n\n[![status](https://github.com/cloudentity/oauth2c/workflows/build/badge.svg)](https://github.com/cloudentity/oauthc/actions)\n[![license](https://img.shields.io/badge/license-Apache--2.0-blue.svg)](https://www.apache.org/licenses/LICENSE-2.0.html)\n[![release](https://img.shields.io/github/release-pre/cloudentity/oauth2c.svg)](https://github.com/cloudentity/oauth2c/releases)\n[![downloads](https://img.shields.io/github/downloads/cloudentity/oauth2c/total)](https://github.com/cloudentity/oauth2c/releases)\n[![packages](https://repology.org/badge/tiny-repos/oauth2c.svg)](https://repology.org/project/oauth2c/versions)\n\n`oauth2c` is a command-line tool for interacting with OAuth 2.0 authorization servers. Its goal is to make it easy to fetch access tokens\nusing any grant type or client authentication method. It is compliant with almost all basic and advanced OAuth 2.0, OIDC, OIDF FAPI and JWT profiles.\n\n![demo](https://user-images.githubusercontent.com/909896/176916616-36d803ef-832a-4bd8-ba8d-f6689e31ed22.gif)\n\n## Features\n\n* support for **authorization code**, **hybrid**, **implicit**, **password**, **client credentials**, **refresh token**, **JWT bearer**, **token exchange**, **device** grant flows\n* support for **client secret basic**, **client secret post**, **client secret JWT**, **private key JWT**, **TLS client auth** client authentication methods\n* passing request parameters as plaintext, signed, and/or encrypted JWT\n* support for **Proof Key for Code Exchange** (**PKCE**)\n* support for **JWT Secured Authorization Response Mode** (**JARM**)\n* support for **Pushed Authorization Requests** (**PAR**)\n* support for **Demonstration of Proof of Possession** (**DPoP**)\n* support for **Rich Authorization Requests** (**RAR**)\n\n## Installation\n\n<a href=\"https://repology.org/project/oauth2c/versions\">\n    <img src=\"https://repology.org/badge/vertical-allrepos/oauth2c.svg\" alt=\"Packaging status\" align=\"right\">\n</a>\n\nTo install `oauth2c`, you have several options depending on your operating system.\n\n### Install on Mac\n\nOn Mac, you can install `oauth2c` using `brew` by running the following command:\n\n``` sh\nbrew install cloudentity/tap/oauth2c\n```\n\n### Install on Linux\n\nOn linux, you can install `oauth2c` using the installation script by running the following command:\n\n``` sh\ncurl -sSfL https://raw.githubusercontent.com/cloudentity/oauth2c/master/install.sh | \\\n  sudo sh -s -- -b /usr/local/bin latest\n```\n\nAlternatively, you can check the [packages page] for specific instructions on installing oauth2c using a package manager.\n\n[packages page]: https://repology.org/project/oauth2c/versions\n\n### Compile from source\n\nTo compile `oauth2c` from source using `go`. To do this run the following command:\n\n``` sh\ngo install github.com/cloudentity/oauth2c@latest\n```\n\nYou can also download a pre-built binary from the [releases page].\n\n[releases page]: https://github.com/cloudentity/oauth2c/releases\n\n## Usage\n\nTo use `oauth2c`, run the following command and follow the prompts:\n\n``` sh\noauth2c [issuer url] [flags]\n```\n\nThe available flags are:\n\n``` sh\n      --actor-token string          acting party token\n      --actor-token-type string     acting party token type\n      --assertion string            claims for jwt bearer assertion\n      --audience strings            requested audience\n      --auth-method string          token endpoint authentication method\n      --claims string               use claims\n      --client-id string            client identifier\n      --client-secret string        client secret\n      --dpop                        use DPoP\n      --encrypted-request-object    pass request parameters as encrypted jwt\n      --encryption-key string       path or url to encryption key in jwks format\n      --grant-type string           grant type\n  -h, --help                        help for oauthc\n      --id-token-hint string        id token hint\n      --idp-hint string             identity provider hint\n      --insecure                    allow insecure connections\n      --login-hint string           user identifier hint\n      --par                         enable pushed authorization requests (PAR)\n      --password string             resource owner password credentials grant flow password\n      --pkce                        enable proof key for code exchange (PKCE)\n      --rar string                  use rich authorization request (RAR)\n      --redirect-url string         client redirect url (default \"http://localhost:9876/callback\")\n      --refresh-token string        refresh token\n      --request-object              pass request parameters as jwt\n      --response-mode string        response mode\n      --response-types strings      response type\n      --scopes strings              requested scopes\n      --signing-key string          path or url to signing key in jwks format\n  -s, --silent                      silent mode\n      --subject-token string        third party token\n      --subject-token-type string   third party token type\n      --timeout duration            http client timeout (default 1m0s)\n      --tls-cert string             path to tls cert pem file\n      --tls-key string              path to tls key pem file\n      --tls-root-ca string          path to tls root ca pem file\n      --username string             resource owner password credentials grant flow username\n```\n\n`oauth2c` opens a browser for flows such as authorization code and starts an HTTP server which acts as a client application and waits for a callback.\n\n> **Note**: To make browser flows work add `http://localhost:9876/callback` as a redirect URL to your client.\n\n`oauth2c` prints all the requests it made to obtain an access token. If you want to integrate it with CI/CD pipeline use the `--silent` flag.\n\nFor more information on the available options and arguments run `oauth2c --help`.\n\n## Example\n\nRun the following command to get an access token using\n\n* authorization code flow\n* hybrid mode\n* TLS client auth\n* proof key for code exchange\n* jwt secure authorization response mode\n* pushed authorization requests\n* signed and encrypted request object\n\n``` sh\noauth2c https://oauth2c.us.authz.cloudentity.io/oauth2c/demo \\\n  --client-id 3f07a8c2adea4c1ab353f3ca8e16b8fd \\\n  --response-types code,id_token \\\n  --response-mode form_post.jwt \\\n  --grant-type authorization_code \\\n  --auth-method tls_client_auth \\\n  --scopes openid,email,offline_access \\\n  --tls-cert https://raw.githubusercontent.com/cloudentity/oauth2c/master/data/cert.pem \\\n  --tls-key https://raw.githubusercontent.com/cloudentity/oauth2c/master/data/key.pem \\\n  --signing-key https://raw.githubusercontent.com/cloudentity/oauth2c/master/data/rsa/key.json \\\n  --encryption-key https://oauth2c.us.authz.cloudentity.io/oauth2c/demo/.well-known/jwks.json \\\n  --request-object \\\n  --pkce \\\n  --par\n```\n\nSee [examples](docs/examples.md) for more.\n\n## License\n\n`oauth2c` is released under the [Apache v2.0](http://www.apache.org/licenses/LICENSE-2.0).\n\n## Contributing\n\nWe welcome contributions! If you have an idea for a new feature or have found a bug, please open an issue on GitHub."
}
