{
  "name": "echidna",
  "full_name": "echidna",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Ethereum smart contract fuzzer",
  "license": "AGPL-3.0-only",
  "homepage": "https://github.com/crytic/echidna",
  "versions": {
    "stable": "2.2.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/crytic/echidna/archive/refs/tags/v2.2.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "cd98ba4c42df459e9ea438deac0d157cbc0edead9cc76dad3c9424f470c5a5b5"
    },
    "head": {
      "url": "https://github.com/crytic/echidna.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/echidna/blobs/sha256:295efec9e6e2124567a266e3ec8a69f4518daf87f9adc65735357e65c49eb4bd",
          "sha256": "295efec9e6e2124567a266e3ec8a69f4518daf87f9adc65735357e65c49eb4bd"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/echidna/blobs/sha256:5c30bf46addf6649edb963472f81282136ff6e28ef5f00530981ee442b1ec75f",
          "sha256": "5c30bf46addf6649edb963472f81282136ff6e28ef5f00530981ee442b1ec75f"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/echidna/blobs/sha256:d04f6539ef0896e5def97ccf243ef27b19ba8ca9dd13afaf5125e4d41028c0c4",
          "sha256": "d04f6539ef0896e5def97ccf243ef27b19ba8ca9dd13afaf5125e4d41028c0c4"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/echidna/blobs/sha256:71413a88143d3adb927c7722ae98648147cbbe10b8d3e753809ebe5e2bc016a2",
          "sha256": "71413a88143d3adb927c7722ae98648147cbbe10b8d3e753809ebe5e2bc016a2"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/echidna/blobs/sha256:9abe5b39bdb786c7f43f7efe559f20fa1b8e8481e5856e272c86acb986d9e8ac",
          "sha256": "9abe5b39bdb786c7f43f7efe559f20fa1b8e8481e5856e272c86acb986d9e8ac"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/echidna/blobs/sha256:ae3d0c14f7428debcc424025731798aae09e06cf790124a9f39e2a3679b3a620",
          "sha256": "ae3d0c14f7428debcc424025731798aae09e06cf790124a9f39e2a3679b3a620"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/echidna/blobs/sha256:21d7cb1f1f1d0db89252b33cfa19963af73448f77048d0f0323265236ed078a6",
          "sha256": "21d7cb1f1f1d0db89252b33cfa19963af73448f77048d0f0323265236ed078a6"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "ghc@9.2",
    "haskell-stack"
  ],
  "dependencies": [
    "crytic-compile",
    "libff",
    "secp256k1",
    "slither-analyzer"
  ],
  "test_dependencies": [
    "truffle"
  ],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "ncurses",
    "zlib"
  ],
  "uses_from_macos_bounds": [
    {},
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/echidna.rb",
  "ruby_source_checksum": {
    "sha256": "9abdc7c99b2eaed8889228a2c6f12c8bb02079e2ed1d990ee7efa915a3265b11"
  },
  "date_added": "2022-08-31T16:21:48+00:00",
  "readme": "# Echidna: A Fast Smart Contract Fuzzer <a href=\"https://raw.githubusercontent.com/crytic/echidna/master/echidna.png\"><img src=\"https://raw.githubusercontent.com/crytic/echidna/master/echidna.png\" width=\"75\"/></a>\n\n![Build Status](https://github.com/crytic/echidna/workflows/CI/badge.svg)\n\nEchidna is a weird creature that eats bugs and is highly electrosensitive (with apologies to Jacob Stanley)\n\nMore seriously, Echidna is a Haskell program designed for fuzzing/property-based testing of Ethereum smart contracts. It uses sophisticated grammar-based fuzzing campaigns based on a [contract ABI](https://solidity.readthedocs.io/en/develop/abi-spec.html) to falsify user-defined predicates or [Solidity assertions](https://solidity.readthedocs.io/en/develop/control-structures.html#id4). We designed Echidna with modularity in mind, so it can be easily extended to include new mutations or test specific contracts in specific cases.\n\n## Features\n\n* Generates inputs tailored to your actual code\n* Optional corpus collection, mutation and coverage guidance to find deeper bugs\n* Powered by [Slither](https://github.com/crytic/slither) to extract useful information before the fuzzing campaign\n* Source code integration to identify which lines are covered after the fuzzing campaign\n* Interactive terminal UI, text-only or JSON output\n* Automatic test case minimization for quick triage\n* Seamless integration into the development workflow\n* Maximum gas usage reporting of the fuzzing campaign\n* Support for a complex contract initialization with [Etheno](https://github.com/crytic/etheno) and Truffle\n\n.. and [a beautiful high-resolution handcrafted logo](https://raw.githubusercontent.com/crytic/echidna/master/echidna.png).\n\n<a href=\"https://i.imgur.com/saFWti4.png\"><img src=\"https://i.imgur.com/saFWti4.png\" width=\"650\"/></a>\n\n## Usage\n\n### Executing the test runner\n\nThe core Echidna functionality is an executable called `echidna`, which takes a contract and a list\nof invariants (properties that should always remain true) as input. For each invariant, it generates\nrandom sequences of calls to the contract and checks if the invariant holds. If it can find some way\nto falsify the invariant, it prints the call sequence that does so. If it can't, you have some\nassurance the contract is safe.\n\n### Writing invariants\n\nInvariants are expressed as Solidity functions with names that begin with `echidna_`, have no arguments, and return a boolean. For example, if you have some `balance` variable that should never go below `20`, you can write an extra function in your contract like this one:\n\n```solidity\nfunction echidna_check_balance() public returns (bool) {\n    return(balance >= 20);\n}\n```\n\nTo check these invariants, run:\n\n```sh\n$ echidna myContract.sol\n```\n\nAn example contract with tests can be found [tests/solidity/basic/flags.sol](tests/solidity/basic/flags.sol). To run it, you should execute:\n\n```sh\n$ echidna tests/solidity/basic/flags.sol\n```\n\nEchidna should find a call sequence that falsifies `echidna_sometimesfalse` and should be unable to find a falsifying input for `echidna_alwaystrue`.\n\n### Collecting and visualizing coverage\n\nAfter finishing a campaign, Echidna can save a coverage maximizing **corpus** in a special directory specified with the `corpusDir` config option. This directory will contain two entries: (1) a directory named `coverage` with JSON files that can be replayed by Echidna and (2) a plain-text file named `covered.txt`, a copy of the source code with coverage annotations.\n\nIf you run `tests/solidity/basic/flags.sol` example, Echidna will save a few files serialized transactions in the `coverage` directory and a `covered.$(date +%s).txt` file with the following lines:\n\n```text\n*r  |  function set0(int val) public returns (bool){\n*   |    if (val % 100 == 0)\n*   |      flag0 = false;\n  }\n\n*r  |  function set1(int val) public returns (bool){\n*   |    if (val % 10 == 0 && !flag0)\n*   |      flag1 = false;\n  }\n```\n\nOur tool signals each execution trace in the corpus with the following \"line marker\":\n\n* `*` if an execution ended with a STOP\n* `r` if an execution ended with a REVERT\n* `o` if an execution ended with an out-of-gas error\n* `e` if an execution ended with any other error (zero division, assertion failure, etc)\n\n### Support for smart contract build systems\n\nEchidna can test contracts compiled with different smart contract build systems, including [Truffle](https://truffleframework.com/) or [hardhat](https://hardhat.org/) using [crytic-compile](https://github.com/crytic/crytic-compile). To invoke echidna with the current compilation framework, use `echidna .`.\n\nOn top of that, Echidna supports two modes of testing complex contracts. Firstly, one can [describe an initialization procedure with Truffle and Etheno](https://github.com/crytic/building-secure-contracts/blob/master/program-analysis/echidna/end-to-end-testing.md) and use that as the base state for Echidna. Secondly, Echidna can call into any contract with a known ABI by passing in the corresponding Solidity source in the CLI. Use `allContracts: true` in your config to turn this on.\n\n### Crash course on Echidna\n\nOur [Building Secure Smart Contracts](https://github.com/crytic/building-secure-contracts/tree/master/program-analysis/echidna#echidna-tutorial) repository contains a crash course on Echidna, including examples, lessons and exercises.\n\n### Using Echidna in a GitHub Actions workflow\n\nThere is an Echidna action which can be used to run `echidna` as part of a\nGitHub Actions workflow. Please refer to the\n[crytic/echidna-action](https://github.com/crytic/echidna-action) repository for\nusage instructions and examples.\n\n### Configuration options\n\nEchidna's CLI can be used to choose the contract to test and load a\nconfiguration file.\n\n```sh\n$ echidna contract.sol --contract TEST --config config.yaml\n```\n\nThe configuration file allows users to choose EVM and test generation\nparameters. An example of a complete and annotated config file with the default\noptions can be found at\n[tests/solidity/basic/default.yaml](tests/solidity/basic/default.yaml).\nMore detailed documentation on the configuration options is available in our\n[wiki](https://github.com/trailofbits/echidna/wiki/Config).\n\nEchidna supports three different output drivers. There is the default `text`\ndriver, a `json` driver, and a `none` driver, which should suppress all\n`stdout` output. The JSON driver reports the overall campaign as follows.\n\n```\nCampaign = {\n  \"success\"      : bool,\n  \"error\"        : string?,\n  \"tests\"        : [Test],\n  \"seed\"         : number,\n  \"coverage\"     : Coverage,\n  \"gas_info\"     : [GasInfo]\n}\nTest = {\n  \"contract\"     : string,\n  \"name\"         : string,\n  \"status\"       : string,\n  \"error\"        : string?,\n  \"testType\"     : string,\n  \"transactions\" : [Transaction]?\n}\nTransaction = {\n  \"contract\"     : string,\n  \"function\"     : string,\n  \"arguments\"    : [string]?,\n  \"gas\"          : number,\n  \"gasprice\"     : number\n}\n```\n\n`Coverage` is a dict describing certain coverage-increasing calls.\nEach `GasInfo` entry is a tuple that describes how maximal\ngas usage was achieved, and is also not too important. These interfaces are\nsubject to change to be slightly more user-friendly at a later date. `testType`\nwill either be `property` or `assertion`, and `status` always takes on either\n`fuzzing`, `shrinking`, `solved`, `passed`, or `error`.\n\n### Debugging Performance Problems\n\nOne way to diagnose Echidna's performance issues is to run `echidna` with profiling on.\nTo run Echidna with basic profiling, add `+RTS -p -s` to your original `echidna` command:\n\n```sh\n$ nix develop # alternatively nix-shell\n$ cabal --enable-profiling run echidna -- ... +RTS -p -s\n$ less echidna.prof\n```\n\nThis produces a report file (`echidna.prof`), that shows which functions take up the most CPU and memory usage.\n\nIf the basic profiling doesn't help, you can use more [advanced profiling techniques](https://input-output-hk.github.io/hs-opt-handbook.github.io/src/Measurement_Observation/Heap_Ghc/eventlog.html).\n\nCommon causes for performance issues that we observed:\n\n- Costly functions called in hot paths\n- Lazy data constructors that accumulate thunks\n- Inefficient data structures used in hot paths\n\nChecking for these is a good place to start. If you suspect some comuptation is too lazy and\nleaks memory, you can use `force` from `Control.DeepSeq` to make sure it gets evaluated.\n\n## Limitations and known issues\n\nEVM emulation and testing are hard. Echidna has some limitations in the latest release. Some of\nthese are inherited from [hevm](https://github.com/ethereum/hevm) while some are results from\ndesign/performance decisions or simply bugs in our code. We list them here including their\ncorresponding issue and the status (\"wont fix\", \"on hold\", \"in review\", \"fixed\"). Issues that are\n\"fixed\" are expected to be included in the next Echidna release.\n\n| Description | Issue | Status |\n| :---        | :---: | :---:  |\n| Vyper support is limited | [#652](https://github.com/crytic/echidna/issues/652) | *wont fix* |\n| Limited library support for testing | [#651](https://github.com/crytic/echidna/issues/651) | *wont fix* |\n\n## Installation\n\n### Precompiled binaries\n\nBefore starting, make sure Slither is [installed](https://github.com/crytic/slither) (`pip3 install slither-analyzer --user`).\nIf you want to quickly test Echidna in Linux or MacOS, we provide statically linked Linux binaries built on Ubuntu and mostly static MacOS binaries on our [releases page](https://github.com/crytic/echidna/releases). You can also grab the same type of binaries from our [CI pipeline](https://github.com/crytic/echidna/actions?query=workflow%3ACI+branch%3Amaster+event%3Apush), just click the commit to find binaries for Linux or MacOS.\n\n### Homebrew (macOS / Linux)\n\nIf you have Homebrew installed on your Mac or Linux machine, you can install Echidna and all of its dependencies (Slither, crytic-compile) by running `brew install echidna`.\n\nYou can also compile and install the latest `master` branch code by running `brew install --HEAD echidna`\n\nYou can get further information in the [`echidna` Homebrew Formula](https://formulae.brew.sh/formula/echidna) page. The formula itself is maintained as part of the [homebrew-core repository](https://github.com/Homebrew/homebrew-core/blob/HEAD/Formula/echidna.rb)\n\n### Docker container\n\nIf you prefer to use a pre-built Docker container, check out our [docker\npackage](https://github.com/orgs/crytic/packages?repo_name=echidna), which is\nauto-built via GitHub Actions. The `echidna` container is based on\n`ubuntu:focal` and it is meant to be a small yet flexible enough image to use\nEchidna on. It provides a pre-built version of `echidna`, as well as\n`slither`, `crytic-compile`, `solc-select` and `nvm` under 200 MB.\n\nNote that the container images currently only build on x86 systems. Running them\non ARM devices, such as Mac M1 systems, is not recommended due to the performance\nloss incurred by the CPU emulation.\n\nDifferent tags are available for the Docker container image:\n\n| Tag           | Build in tag\n|---------------|-------------\n| `vx.y.z`      | Build corresponding to release `vx.y.z`\n| `latest`      | Latest Echidna tagged release.\n| `edge`        | Most recent commit on the default branch.\n| `testing-foo` | Testing build based on the `foo` branch.\n\nTo run the container with the latest Echidna version interactively, you can use\nsomething like the following command. It will map the current directory as\n`/src` inside the container, and give you a shell where you can use\n`echidna`:\n\n```sh\n$ docker run --rm -it -v `pwd`:/src ghcr.io/crytic/echidna/echidna\n```\n\nOtherwise, if you want to locally build the latest version of Echidna, we\nrecommend using Docker. From within a clone of this repository, run the\nfollowing command to build the Docker container image:\n\n```sh\n$ docker build -t echidna -f docker/Dockerfile --target final-ubuntu .\n```\n\nThen, you can run the `echidna` image locally. For example, to install solc\n0.5.7 and check `tests/solidity/basic/flags.sol`, you can run:\n\n```sh\n$ docker run -it -v `pwd`:/src echidna bash -c \"solc-select install 0.5.7 && solc-select use 0.5.7 && echidna /src/tests/solidity/basic/flags.sol\"\n```\n\n### Building using Stack\n\nIf you'd prefer to build from source, use [Stack](https://docs.haskellstack.org/en/stable/README/). `stack install` should build and compile `echidna` in `~/.local/bin`. You will need to link against libreadline and libsecp256k1 (built with recovery enabled), which should be installed with the package manager of your choosing. You also need to install the latest release of [libff](https://github.com/scipr-lab/libff). Refer to our [CI tests](.github/scripts/install-libff.sh) for guidance.\n\nSome Linux distributions do not ship static libraries for certain things that Haskell needs, e.g. Arch Linux, which will cause `stack build` to fail with linking errors because we use the `-static` flag. In that case, use `--flag echidna:-static` to produce a dynamically linked binary.\n\nIf you're getting errors building related to linking, try tinkering with `--extra-include-dirs` and `--extra-lib-dirs`.\n\n### Building using Nix (works natively on Apple M1 systems)\n\n[Nix users](https://nixos.org/download.html) can install the latest Echidna with:\n\n```sh\n$ nix-env -i -f https://github.com/crytic/echidna/tarball/master\n```\n\nWith flakes enabled, you can run Echidna straight from this repo:\n```sh\n$ nix run github:crytic/echidna # master\n$ nix run github:crytic/echidna/v2.1.1 # specific ref (tag/branch/commit)\n```\n\nTo build a standalone release for non-Nix macOS systems, the following will\nbundle Echidna and all linked dylibs:\n\n```sh\n$ nix build .#echidna-bundle\n```\n\nNix will automatically install all the dependencies required for development\nincluding `crytic-compile` and `solc`. A quick way to start developing Echidna:\n\n```sh\n$ git clone https://github.com/crytic/echidna\n$ cd echidna\n$ nix develop # alternatively nix-shell\n[nix-shell]$ cabal run echidna\n[nix-shell]$ cabal run tests\n[nix-shell]$ cabal new-repl\n```\n\n## Public use of Echidna\n\n### Property testing suites\n\nThis is a partial list of smart contracts projects that use Echidna for testing:\n\n* [Primitive](https://github.com/primitivefinance/rmm-core/tree/main/contracts/crytic)\n* [Uniswap-v3](https://github.com/search?q=org%3AUniswap+echidna&type=commits)\n* [Balancer](https://github.com/balancer-labs/balancer-core/tree/master/echidna)\n* [MakerDAO vest](https://github.com/makerdao/dss-vest/pull/16)\n* [Optimism DAI Bridge](https://github.com/BellwoodStudios/optimism-dai-bridge/blob/master/contracts/test/DaiEchidnaTest.sol)\n* [WETH10](https://github.com/WETH10/WETH10/tree/main/contracts/fuzzing)\n* [Yield](https://github.com/yieldprotocol/fyDai/pull/312)\n* [Convexity Protocol](https://github.com/opynfinance/ConvexityProtocol/tree/dev/contracts/echidna)\n* [Aragon Staking](https://github.com/aragon/staking/blob/82bf54a3e11ec4e50d470d66048a2dd3154f940b/packages/protocol/contracts/test/lib/EchidnaStaking.sol)\n* [Centre Token](https://github.com/centrehq/centre-tokens/tree/master/echidna_tests)\n* [Tokencard](https://github.com/tokencard/contracts/tree/master/tools/echidna)\n* [Minimalist USD Stablecoin](https://github.com/usmfum/USM/pull/41)\n\n### Trophies\n\nThe following security vulnerabilities were found by Echidna. If you found a security vulnerability using our tool, please submit a PR with the relevant information.\n\n| Project | Vulnerability | Date |\n|--|--|--|\n[0x Protocol](https://github.com/trailofbits/publications/blob/master/reviews/0x-protocol.pdf) | If an order cannot be filled, then it cannot be canceled | Oct 2019\n[0x Protocol](https://github.com/trailofbits/publications/blob/master/reviews/0x-protocol.pdf) | If an order can be partially filled with zero, then it can be partially filled with one token | Oct 2019\n[0x Protocol](https://github.com/trailofbits/publications/blob/master/reviews/0x-protocol.pdf) | The cobbdouglas function does not revert when valid input parameters are used | Oct 2019\n[Balancer Core](https://github.com/trailofbits/publications/blob/master/reviews/BalancerCore.pdf) | An attacker cannot steal assets from a public pool | Jan 2020\n[Balancer Core](https://github.com/trailofbits/publications/blob/master/reviews/BalancerCore.pdf) | An attacker cannot generate free pool tokens with joinPool | Jan 2020\n[Balancer Core](https://github.com/trailofbits/publications/blob/master/reviews/BalancerCore.pdf) | Calling joinPool-exitPool does not lead to free pool tokens | Jan 2020\n[Balancer Core](https://github.com/trailofbits/publications/blob/master/reviews/BalancerCore.pdf) |  Calling exitswapExternAmountOut does not lead to free assets | Jan 2020\n[Liquity Dollar](https://github.com/trailofbits/publications/blob/master/reviews/Liquity.pdf) | [Closing troves require to hold the full amount of LUSD minted](https://github.com/liquity/dev/blob/echidna_ToB_final/packages/contracts/contracts/TestContracts/E2E.sol#L242-L298) | Dec 2020\n[Liquity Dollar](https://github.com/trailofbits/publications/blob/master/reviews/Liquity.pdf) | [Troves can be improperly removed](https://github.com/liquity/dev/blob/echidna_ToB_final/packages/contracts/contracts/TestContracts/E2E.sol#L242-L298) | Dec 2020\n[Liquity Dollar](https://github.com/trailofbits/publications/blob/master/reviews/Liquity.pdf) | Initial redeem can revert unexpectedly | Dec 2020\n[Liquity Dollar](https://github.com/trailofbits/publications/blob/master/reviews/Liquity.pdf) | Redeem without redemptions might still return success | Dec 2020\n[Origin Dollar](https://github.com/trailofbits/publications/blob/master/reviews/OriginDollar.pdf) | Users are allowed to transfer more tokens that they have | Nov 2020\n[Origin Dollar](https://github.com/trailofbits/publications/blob/master/reviews/OriginDollar.pdf) | User balances can be larger than total supply | Nov 2020\n[Yield Protocol](https://github.com/trailofbits/publications/blob/master/reviews/YieldProtocol.pdf) | Arithmetic computation for buying and selling tokens is imprecise | Aug 2020\n\n### Research\n\nWe can also use Echidna to reproduce research examples from smart contract fuzzing papers to show how quickly it can find the solution. All of these can be solved, in a few seconds to one or two minutes on a laptop computer.\n\n| Source | Code\n|--|--\n[Using automatic analysis tools with MakerDAO contracts](https://forum.openzeppelin.com/t/using-automatic-analysis-tools-with-makerdao-contracts/1021) | [SimpleDSChief](https://github.com/crytic/echidna/blob/master/tests/solidity/research/vera_dschief.sol)\n[Integer precision bug in Sigma Prime](https://github.com/b-mueller/sabre#example-2-integer-precision-bug) | [VerifyFunWithNumbers](https://github.com/crytic/echidna/blob/master/tests/solidity/research/solcfuzz_funwithnumbers.sol)\n[Learning to Fuzz from Symbolic Execution with Application to Smart Contracts](https://files.sri.inf.ethz.ch/website/papers/ccs19-ilf.pdf) | [Crowdsale](https://github.com/crytic/echidna/blob/master/tests/solidity/research/ilf_crowdsale.sol)\n[Harvey: A Greybox Fuzzer for Smart Contracts](https://arxiv.org/abs/1905.06944) | [Foo](https://github.com/crytic/echidna/blob/master/test/solidity/research/harvey_foo.sol), [Baz](https://github.com/crytic/echidna/blob/master/tests/solidity/research/harvey_baz.sol)\n\n### Academic Publications\n\n| Paper Title | Venue | Publication Date |\n| --- | --- | --- |\n| [echidna-parade: Diverse multicore smart contract fuzzing](https://agroce.github.io/issta21.pdf) | [ISSTA 2021](https://conf.researchr.org/home/issta-2021) | July 2021 |\n| [Echidna: Effective, usable, and fast fuzzing for smart contracts](https://agroce.github.io/issta20.pdf) | [ISSTA 2020](https://conf.researchr.org/home/issta-2020) | July 2020 |\n| [Echidna: A Practical Smart Contract Fuzzer](papers/echidna_fc_poster.pdf) | [FC 2020](https://fc20.ifca.ai/program.html) | Feb 2020 |\n\nIf you are using Echidna for academic work, consider applying to the [Crytic $10k Research Prize](https://blog.trailofbits.com/2019/11/13/announcing-the-crytic-10k-research-prize/).\n\n## Getting help\n\nFeel free to stop by our #ethereum slack channel in [Empire Hacking](https://slack.empirehacking.nyc/) for help using or extending Echidna.\n\n* Get started by reviewing these simple [Echidna invariants](tests/solidity/basic/flags.sol)\n\n* Considering [emailing](mailto:echidna-dev@trailofbits.com) the Echidna development team directly for more detailed questions\n\n## License\n\nEchidna is licensed and distributed under the [AGPLv3 license](https://github.com/crytic/echidna/blob/master/LICENSE)."
}
