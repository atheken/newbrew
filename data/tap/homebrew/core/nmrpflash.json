{
  "name": "nmrpflash",
  "full_name": "nmrpflash",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Netgear Unbrick Utility",
  "license": "GPL-3.0-or-later",
  "homepage": "https://github.com/jclehner/nmrpflash",
  "versions": {
    "stable": "0.9.20",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/jclehner/nmrpflash/archive/refs/tags/v0.9.20.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "4aa17a84735f04e91b5e90e9a61e8c48033a5689bf45594ea1eeff715f0acd48"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/nmrpflash/blobs/sha256:da2ba840d084cfbe19cf91fded8435490e2d4a3edd67408e2b83834e7c6b3c31",
          "sha256": "da2ba840d084cfbe19cf91fded8435490e2d4a3edd67408e2b83834e7c6b3c31"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/nmrpflash/blobs/sha256:87f57cd2988fdd5743467a10929845eed62dc0f1e894286e6adb8ac77303e110",
          "sha256": "87f57cd2988fdd5743467a10929845eed62dc0f1e894286e6adb8ac77303e110"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/nmrpflash/blobs/sha256:87a4d3fcf68e8a1087b3f28fbb85ea92c676d652e0b057f70da63b7709fa9b4c",
          "sha256": "87a4d3fcf68e8a1087b3f28fbb85ea92c676d652e0b057f70da63b7709fa9b4c"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/nmrpflash/blobs/sha256:b8638d2e3f4f1b7698ea413a323dca2ac7af46c010126b058e6228718a565cab",
          "sha256": "b8638d2e3f4f1b7698ea413a323dca2ac7af46c010126b058e6228718a565cab"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/nmrpflash/blobs/sha256:ad1413001fcfb694c5d4c1f2cc47509fd39c9990c6b8c2b51226c712879f32cc",
          "sha256": "ad1413001fcfb694c5d4c1f2cc47509fd39c9990c6b8c2b51226c712879f32cc"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/nmrpflash/blobs/sha256:d818d50c7ebcbb07a4e3fbca5100849fa8eaa4f64ea2b98d18a3f35977f0891c",
          "sha256": "d818d50c7ebcbb07a4e3fbca5100849fa8eaa4f64ea2b98d18a3f35977f0891c"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/nmrpflash/blobs/sha256:dceab7348d37e77a710ea02f9e53c4f741c692122ff8e4ba9deac429d141501b",
          "sha256": "dceab7348d37e77a710ea02f9e53c4f741c692122ff8e4ba9deac429d141501b"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "pkg-config"
  ],
  "dependencies": [
    "libnl"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "libpcap"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/nmrpflash.rb",
  "ruby_source_checksum": {
    "sha256": "e57f702083930cbaa85d9d4a426da8fda967e1679b967632edaa460efcf1e8ec"
  },
  "date_added": "2022-07-20T17:06:26+00:00",
  "readme": "![icon](nmrpflash.svg)\n\nnmrpflash - Netgear Unbrick Utility\n====================================\n\n`nmrpflash` uses Netgear's [NMRP protocol](http://www.chubb.wattle.id.au/PeterChubb/nmrp.html)\nto flash a new firmware image to a compatible device. It has been successfully tested with\nvarious models (D7000, DNG3700v2, EX2700, EX6100v2, EX6120, EX6150v2, EX8000, R6020, R6080, R6100, R6220, R6400, R7000,\nR7000P, R6800, R8000, R8000P, R8500, WAX202, WNDR3800, WNDR4300, WNDR4500v3, WNDR4700, WNR3500), but is likely to be compatible with\nmost other Netgear devices as well.\n\nPrebuilt binaries for Linux, macOS and Windows are available [here](https://github.com/jclehner/nmrpflash/releases)\n([Npcap](https://nmap.org/npcap/#download) is required on Windows). On Linux and macOS, you can also use\n[Homebrew](https://formulae.brew.sh/formula/nmrpflash). FreeBSD packages can be fetched and installed using the FreeBSD `pkg` command.\n\n```\nUsage: nmrpflash [OPTIONS...]\n\nOptions (-i, and -f or -c are mandatory):\n -a <ipaddr>     IP address to assign to target device [10.164.183.253]\n -A <ipaddr>     IP address to assign to selected interface [10.164.183.252]\n -B              Blind mode (don't wait for response packets)\n -c <command>    Command to run before (or instead of) TFTP upload\n -f <firmware>   Firmware file\n -F <filename>   Remote filename to use during TFTP upload\n -i <interface>  Network interface directly connected to device\n -m <mac>        MAC address of target device (xx:xx:xx:xx:xx:xx)\n -M <netmask>    Subnet mask to assign to target device [255.255.255.0]\n -t <timeout>    Timeout (in milliseconds) for NMRP packets [10000 ms]\n -T <timeout>    Time (seconds) to wait after successfull TFTP upload [1800 s]\n -p <port>       Port to use for TFTP upload [69]\n -R <region>     Set device region (NA, WW, GR, PR, RU, BZ, IN, KO, JP)\n -S <n>          Skip <n> bytes of the firmware file\n -v              Be verbose\n -V              Print version and exit\n -L              List network interfaces\n -h              Show this screen\n```\n\n### Using nmrpflash\n\nDownload the correct firmware image for your device. When downloading from the Netgear site,\nthe firmware is usually contained in a `.zip` file - extract this first. The actual firmware\nfile will have an extension such as `.chk`, `.bin`, `.trx` or `.img`.\n\nNow, using an Ethernet cable, connect your Netgear router to the computer that will run\n`nmrpflash`. Use the LAN port, which is often colored blue on Netgear devices. If the\nrouter has multiple LAN ports, use the one labled `1`.\n\nNext, you'll have to determine which network interface corresponds to the one connected to\nthe Netgear router. All available interfaces can be listed using  \n\n```\n# nmrpflash -L\neth0      192.168.1.2  c0:de:fa:ce:01:23\neth2      0.0.0.0      ca:fe:ba:be:45:67\nwifi0     10.0.10.138  de:ad:be:ef:89:ab\n```\n\nFor the rest of this example, let's assume that your router is connected to `eth2`, and that\nyou want to flash a firmware image named `EX2700-V1.0.1.8.img`.\n\nFirst of all, turn *off* the router. Then start `nmrpflash` using the following command:\n\n```\n# nmrpflash -i eth2 -f EX2700-V1.0.1.8.img\nWaiting for Ethernet connection (Ctrl-C to skip).\n```\n\nAs soon as you see the `Waiting for Ethernet connection.` message, turn the router *on*. If all went\nwell, `nmrpflash` will continue printing messages:\n\n```\nAdvertising NMRP server on eth2 ... /\nReceived configuration request from fe:ed:1b:ad:f0:0d\nSending configuration: 10.164.183.252/24\nReceived upload request: filename 'firmware'.\nUploading EX2700-V1.0.1.8.img ... OK (3539077 b)\nWaiting for remote to respond.\nReceived keep-alive request (11).\nRemote finished. Closing connection.\nReboot your device now.\n```\n\nNow reboot the device, and you're good to go.\n\n### Common issues\n\n**In any case, run `nmrpflash` with `-vvv` before filing a bug report!**\n\n###### \"Error while loading shared libraries: ...\" (Linux)\n\nYou must install your Linux distribution's `libpcap` and `libnl-3`\npackages (exact names will vary depending on your distribution).\n\nOn Debian based distros (such as Ubuntu) you can install these dependencies with\n\n    sudo apt install libpcap libnl-3\n\n###### \"The program can't start because wpcap.dll is missing\" (Windows)\n\nInstall [Npcap](https://nmap.org/npcap/#download) with \"WinPcap Compatibility\" enabled.\n\nVersion 0.9.13 was the last version to support Windows XP.\n\n###### \"nmrpflash cannot be opened because the developer cannot be verified.\" (macOS)\n\nGo to `ï£¿ -> System Preferences -> Security & Privacy`. Under the `General` tab, there should\nbe a message like \"nmrpflash was blocked from use because it is not from an identified\ndeveloper\". Click the `Allow anyway` button next to it, and run `nmrpflash` again.\nIf that doesn't work, try [this](https://support.apple.com/guide/mac-help/open-a-mac-app-from-an-unidentified-developer-mh40616/mac).\n\nPlease note that [Homebrew](https://formulae.brew.sh/formula/nmrpflash) is the preferred method of\ninstalling `nmrpflash` on macOS.\n\n###### \"No suitable network interfaces found.\"\n\nMake sure the network interface is up (wireless interfaces are not supported).\nOn Windows, try restarting the Npcap service (commands must be run as\nadministrator):\n\n```\nC:\\> net stop npf\nC:\\> net start npf\n```\n\n###### \"No response after 60 seconds. Bailing out.\"\n\nAlways run `nmrpflash` in the sequence described above!\n\nYou can try specifying the MAC address using `-m xx:xx:xx:xx:xx:xx`,\nor, if that still doesn't work, \"blind mode\" using `-B`. Note that\ncareful timing between running `nmrpflash` and turning on the router may\nbe required in this mode.\n\nIt's also possible the bootloader itself is bricked, or that the\nparticular device does not support the NMRP protocol.\n\n###### Stuck at \"Waiting for remote to respond.\"\n\nThe file transfer was successful, but the router still needs to actually\nwrite the data to the flash chip. Depending on the image size, this can\ntake quite some time: times of 15 minutes and more have been reported.\n\nSome devices will send keep-alive packets (see [below](#received-keep-alive-request))\nduring this time, which are esentially telling `nmrpflash` that it's still busy flashing.\n\nDo not reboot your device at this time, because flashing is probably\nstill in progress (sometimes indicated by flashing LEDs). Only when\nnmrpflash says `Reboot your device now.` you can assume that the\nprocess has finished.\n\n###### \"Timeout while waiting for ACK(0)/OACK.\"\n\nThe device did not respond to `nmrpflash`'s TFTP upload request. By default,\n`nmrpflash` will assign `10.164.183.252` to the target device, while adding `10.164.183.253`\nto the network interface specified by the `-i` flag. You can use `-a` to change the IP\naddress assigned to the target (e.g. if your network is `192.168.1.0/24`, specify a *free*\nIP address, such as `-a 192.168.1.252`), and `-A` to change the IP address used for the\nnetwork interface.\n\nIf you have a firewall installed on the computer that is running `nmrpflash` (such as \n`iptables` or `nftables`), try disabling the firewall before running `nmrpflash` again.\n\n###### \"Timeout while waiting for CLOSE_REQ.\"\n\nAfter a successful file upload, `nmrpflash` waits for up to 30 minutes for an\nanswer from your device. You can increase this by specifying a longer timeout\nusing `-T` switch (argument is in seconds).\n\nIt's entirely possible that the image was flashed successfully, but the\noperation took longer than 15 minutes.\n\n###### \"Address X/Y cannot be used on interface Z.\"\n\n`nmrpflash` refuses to use an IP address / subnet mask combination that would\nmake the remote device unreachable from the device running `nmrpflash`. For\nexample, if the IP address of your computer is 192.168.0.1/255.255.255.0, assigning\n192.168.2.1/255.255.255.0 to the router makes no sense, because the TFTP upload will\nfail.\n\n###### \"IP address of X has changed. Please assign a static IP to the interface.\"\n\nThis can happen if the network interface in question automatically detects that\nthe network cable has been connected, and your computer tries to reconfigure that\ninterface (NetworkManager on Linux does this for example) - this can usually be\ndisabled.\n\n###### \"Received keep-alive request.\"\n\nThis usually means that flashing is in progress. On some devices, you may get a few\nhundred keep-alive requests before it eventually finishes! On others, you'll only\nreceive a few, with many minutes between each message.\n\n###### \"TFTP block rollover. Upload might fail!\"\n\nBy default, file transfers using TFTP are limited to `65535 * 512` bytes\n(almost 32 MiB). Uploading files exceeding this limit might fail, depending\non the device. If it does fail, your only option is flashing an older image,\nwhich is smaller than 32 MiB.\n\n###### \"Ignoring extra upload request.\"\n\nExtraneous upload requests are usually sent by the device if the image validation\nfailed. Some possible causes are:\n\n* If you downloaded a firmware that's contained in an archive (a `.zip` for\nexample), you must extract this file, and then use the contained firmware file\nas the argument to the `-f` parameter. Some examples for file extensions used\nfor firmware: `.chk`, `.bin`, `.trx`, `.img`.\n\n* Some devices prevent you from downgrading the firmware. See if it works with\nthe latest version available for your device. If you're already using the latest\nversion, it might be possible to patch the version info of the firmware file. A\nfuture version of `nmrpflash` might incorporate an auto-patch feature for these\ncases.\n\n* Your device might expect a different image format for `nmrpflash` than when\nflashing via the web interface.\n\n###### \"Timeout while waiting for 0000.\" after \"Waiting for remote to respond.\"\n\nThis could indicate that the device hasn't finished flashing, after the default timeout\n(15 minutes). Try increasing the timeout, using the `-T <seconds>` option,\nfor example use `-T 1800` to specify a timeout of 30 minutes.\n\n###### \"bind: Cannot assign requested address\"\n\nSpecify the address of the router (`-a`), and address of your computer (`-A`).\nFor example:\n\n`-A 10.0.0.2 -a 10.0.0.1`\n\nor\n\n`-A 192.168.1.2 -a 192.168.1.1`\n\n### Building and installing\n###### Linux, Mac OS X, BSDs\n\nOn Linux, developer packages for `libpcap`, `libnl` and `libnl-route` must be installed:\n\n```\n$ sudo apt install libpcap-dev libnl-3-dev libnl-route-3-dev\n```\n\nThen, it's as easy as \n\n```\n$ make && sudo make install\n```\n\nOn Linux and macOS, you can use [Homebrew](https://brew.sh) to install `nmrpflash`:\n\n```\n$ brew install nmrpflash\n```\n\nOn FreeBSD (assuming the ports infrastructure is installed and you have root permissions):\n\n```\n$ cd /usr/ports/sysutils/nmrpflash\n$ make install\n```\n\nOr install the FreeBSD binary package with:\n\n```\n$ pkg install nmrpflash\n```\n\n###### Windows\n\nThe repository includes a [CodeBlocks](https://www.codeblocks.org/) project\nfile (`nmrpflash.cbp`). Download the latest [Npcap SDK](https://nmap.org/npcap/)\nand extract it into the a folder named `Npcap` in the source's root directory.\n\n### Donate\n\nYou can [buy me a coffee](https://www.buymeacoffee.com/jclehner) if you want, but please consider\ndonating the money for charity instead - [MÃ©decins Sans Frontiers](https://www.msf.org/donate) comes to mind,\nbut any other organization, local or international, that you think deserves support will do. Thank you!"
}
