{
  "name": "swiftlint",
  "full_name": "swiftlint",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Tool to enforce Swift style and conventions",
  "license": "MIT",
  "homepage": "https://github.com/realm/SwiftLint",
  "versions": {
    "stable": "0.52.4",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/realm/SwiftLint.git",
      "tag": "0.52.4",
      "revision": "9eaecbedce469a51bd8487effbd4ab46ec8384ae",
      "checksum": null
    },
    "head": {
      "url": "https://github.com/realm/SwiftLint.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/swiftlint/blobs/sha256:718f5989e0909ea736848e0d6f32d07cfa20bb23cab5fb9989803872e88d1a29",
          "sha256": "718f5989e0909ea736848e0d6f32d07cfa20bb23cab5fb9989803872e88d1a29"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/swiftlint/blobs/sha256:bcc2c13aa6c01634b382991df048bb331caa5eec230fff33ddbab19258a30c22",
          "sha256": "bcc2c13aa6c01634b382991df048bb331caa5eec230fff33ddbab19258a30c22"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/swiftlint/blobs/sha256:5aec3b872abfead26c702334f0cffddb8ea653481720d7c1248ad836be37a975",
          "sha256": "5aec3b872abfead26c702334f0cffddb8ea653481720d7c1248ad836be37a975"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/swiftlint/blobs/sha256:e3171413a8649150601f777176af1dae458cb4be35aa1185e31636db1bb7124a",
          "sha256": "e3171413a8649150601f777176af1dae458cb4be35aa1185e31636db1bb7124a"
        },
        "x86_64_linux": {
          "cellar": "/home/linuxbrew/.linuxbrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/swiftlint/blobs/sha256:e8ec45e149d2e33295ddcd87a142389492176b51d0c2216127ae00d3ade33a6b",
          "sha256": "e8ec45e149d2e33295ddcd87a142389492176b51d0c2216127ae00d3ade33a6b"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "swift"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [
    {
      "name": "xcode",
      "cask": null,
      "download": null,
      "version": "14.0",
      "contexts": [
        "build"
      ],
      "specs": [
        "stable",
        "head"
      ]
    },
    {
      "name": "xcode",
      "cask": null,
      "download": null,
      "version": "8.0",
      "contexts": [],
      "specs": [
        "stable",
        "head"
      ]
    }
  ],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/swiftlint.rb",
  "ruby_source_checksum": {
    "sha256": "594ee9b294b84833eebacdda6d7c3f77231c7ae52d4230fd24f8d57e21efcac2"
  },
  "date_added": "2015-05-19T10:17:43+01:00",
  "readme": "# SwiftLint\n\nA tool to enforce Swift style and conventions, loosely based on the now archived [GitHub Swift Style Guide](https://github.com/github/swift-style-guide). SwiftLint enforces the style guide rules that are generally accepted by the Swift community. These rules are well described in popular style guides like [Kodeco's Swift Style Guide](https://github.com/kodecocodes/swift-style-guide).\n\nSwiftLint hooks into [Clang](http://clang.llvm.org) and\n[SourceKit](http://www.jpsim.com/uncovering-sourcekit) to use the\n[AST](http://clang.llvm.org/docs/IntroductionToTheClangAST.html) representation\nof your source files for more accurate results.\n\n[![Build Status](https://dev.azure.com/jpsim/SwiftLint/_apis/build/status/realm.SwiftLint?branchName=main)](https://dev.azure.com/jpsim/SwiftLint/_build/latest?definitionId=4?branchName=main)\n[![codecov.io](https://codecov.io/github/realm/SwiftLint/coverage.svg?branch=main)](https://codecov.io/github/realm/SwiftLint?branch=main)\n\n![](https://raw.githubusercontent.com/realm/SwiftLint/main/assets/screenshot.png)\n\nThis project adheres to the [Contributor Covenant Code of Conduct](https://realm.io/conduct).\nBy participating, you are expected to uphold this code. Please report\nunacceptable behavior to [info@realm.io](mailto:info@realm.io).\n\n> Language Switch: [中文](https://github.com/realm/SwiftLint/blob/main/README_CN.md), [한국어](https://github.com/realm/SwiftLint/blob/main/README_KR.md).\n\n## Installation\n\n### Using [Homebrew](http://brew.sh/):\n\n```\nbrew install swiftlint\n```\n\n### Using [CocoaPods](https://cocoapods.org):\n\nSimply add the following line to your Podfile:\n\n```ruby\npod 'SwiftLint'\n```\n\nThis will download the SwiftLint binaries and dependencies in `Pods/` during your next\n`pod install` execution and will allow you to invoke it via `${PODS_ROOT}/SwiftLint/swiftlint`\nin your Script Build Phases.\n\nThis is the recommended way to install a specific version of SwiftLint since it supports\ninstalling a pinned version rather than simply the latest (which is the case with Homebrew).\n\nNote that this will add the SwiftLint binaries, its dependencies' binaries, and the Swift binary\nlibrary distribution to the `Pods/` directory, so checking in this directory to SCM such as\ngit is discouraged.\n\n### Using [Mint](https://github.com/yonaskolb/mint):\n\n```\n$ mint install realm/SwiftLint\n```\n\n### Using a pre-built package:\n\nYou can also install SwiftLint by downloading `SwiftLint.pkg` from the\n[latest GitHub release](https://github.com/realm/SwiftLint/releases/latest) and\nrunning it.\n\n### Installing from source:\n\nYou can also build and install from source by cloning this project and running\n`make install` (Xcode 13.3 or later).\n\n### Using Bazel\n\nPut this in your `MODULE.bazel`:\n\n```bzl\nbazel_dep(name = \"swiftlint\", version = \"0.50.4\", repo_name = \"SwiftLint\")\n```\n\nOr put this in your `WORKSPACE`:\n\n<details>\n\n<summary>WORKSPACE</summary>\n\n```bzl\nload(\"@bazel_tools//tools/build_defs/repo:http.bzl\", \"http_archive\")\n\nhttp_archive(\n    name = \"build_bazel_rules_apple\",\n    sha256 = \"f94e6dddf74739ef5cb30f000e13a2a613f6ebfa5e63588305a71fce8a8a9911\",\n    url = \"https://github.com/bazelbuild/rules_apple/releases/download/1.1.3/rules_apple.1.1.3.tar.gz\",\n)\n\nload(\n    \"@build_bazel_rules_apple//apple:repositories.bzl\",\n    \"apple_rules_dependencies\",\n)\n\napple_rules_dependencies()\n\nload(\n    \"@build_bazel_rules_swift//swift:repositories.bzl\",\n    \"swift_rules_dependencies\",\n)\n\nswift_rules_dependencies()\n\nload(\n    \"@build_bazel_rules_swift//swift:extras.bzl\",\n    \"swift_rules_extra_dependencies\",\n)\n\nswift_rules_extra_dependencies()\n\nhttp_archive(\n    name = \"SwiftLint\",\n    sha256 = \"7c454ff4abeeecdd9513f6293238a6d9f803b587eb93de147f9aa1be0d8337c4\",\n    url = \"https://github.com/realm/SwiftLint/releases/download/0.49.1/bazel.tar.gz\",\n)\n\nload(\"@SwiftLint//bazel:repos.bzl\", \"swiftlint_repos\")\n\nswiftlint_repos()\n\nload(\"@SwiftLint//bazel:deps.bzl\", \"swiftlint_deps\")\n\nswiftlint_deps()\n```\n\n</details>\n\nThen you can run SwiftLint in the current directory with this command:\n\n```console\nbazel run -c opt @SwiftLint//:swiftlint\n```\n\n## Usage\n\n### Presentation\n\nTo get a high-level overview of recommended ways to integrate SwiftLint into your project,\nwe encourage you to watch this presentation or read the transcript:\n\n[![Presentation](https://raw.githubusercontent.com/realm/SwiftLint/main/assets/presentation.svg)](https://youtu.be/9Z1nTMTejqU)\n\n### Xcode\n\nIntegrate SwiftLint into your Xcode project to get warnings and errors displayed\nin the issue navigator.\n\nTo do this select the project in the file navigator, then select the primary app\ntarget, and go to Build Phases. Click the + and select \"New Run Script Phase\".\nInsert the following as the script:\n\n![](https://raw.githubusercontent.com/realm/SwiftLint/main/assets/runscript.png)\n\nIf you installed SwiftLint via Homebrew on Apple Silicon, you might experience this warning:\n\n> warning: SwiftLint not installed, download from https://github.com/realm/SwiftLint\n\nThat is because Homebrew on Apple Silicon installs the binaries into the `/opt/homebrew/bin`\nfolder by default. To instruct Xcode where to find SwiftLint, you can either add\n`/opt/homebrew/bin` to the `PATH` environment variable in your build phase\n\n```bash\nif [[ \"$(uname -m)\" == arm64 ]]; then\n    export PATH=\"/opt/homebrew/bin:$PATH\"\nfi\n\nif which swiftlint > /dev/null; then\n  swiftlint\nelse\n  echo \"warning: SwiftLint not installed, download from https://github.com/realm/SwiftLint\"\nfi\n```\n\nor you can create a symbolic link in `/usr/local/bin` pointing to the actual binary:\n\n```bash\nln -s /opt/homebrew/bin/swiftlint /usr/local/bin/swiftlint\n```\n\nYou might want to move your SwiftLint phase directly before the 'Compile Sources'\nstep to detect errors quickly before compiling. However, SwiftLint is designed\nto run on valid Swift code that cleanly completes the compiler's parsing stage.\nSo running SwiftLint before 'Compile Sources' might yield some incorrect\nresults.\n\nIf you wish to fix violations as well, your script could run\n`swiftlint --fix && swiftlint` instead of just `swiftlint`. This will mean\nthat all correctable violations are fixed while ensuring warnings show up in\nyour project for remaining violations.\n\nIf you've installed SwiftLint via CocoaPods the script should look like this:\n\n```bash\n\"${PODS_ROOT}/SwiftLint/swiftlint\"\n```\n\n### Plug-in Support\n\nSwiftLint can be used as a build tool plug-in for both Xcode projects as well as\nSwift packages.\n\n> Due to limitations with Swift Package Manager Plug-ins this is only\nrecommended for projects that have a SwiftLint configuration in their root directory as\nthere is currently no way to pass any additional options to the SwiftLint executable.\n\n#### Xcode\n\nYou can integrate SwiftLint as an Xcode Build Tool Plug-in if you're working\nwith a project in Xcode.\n\nAdd SwiftLint as a package dependency to your project without linking any of the\nproducts.\n\nSelect the target you want to add linting to and open the `Build Phases` inspector.\nOpen `Run Build Tool Plug-ins` and select the `+` button.\nSelect `SwiftLintPlugin` from the list and add it to the project.\n\n![](https://raw.githubusercontent.com/realm/SwiftLint/main/assets/select-swiftlint-plugin.png)\n\nFor unattended use (e.g. on CI), you can disable the package validation dialog by\n\n* individually passing `-skipPackagePluginValidation` to `xcodebuild` or\n* globally setting `defaults write com.apple.dt.Xcode IDESkipPackagePluginFingerprintValidatation -bool YES` \n  for that user.\n\n_Note: This implicitly trusts all Xcode package plugins and bypasses Xcode's package validation\n       dialogs, which has security implications._\n\n#### Swift Package\n\nYou can integrate SwiftLint as a Swift Package Manager Plug-in if you're working with\na Swift Package with a `Package.swift` manifest.\n\nAdd SwiftLint as a package dependency to your `Package.swift` file.  \nAdd SwiftLint to a target using the `plugins` parameter.\n\n```swift\n.target(\n    ...\n    plugins: [.plugin(name: \"SwiftLintPlugin\", package: \"SwiftLint\")]\n),\n```\n\n### Visual Studio Code\n\nTo integrate SwiftLint with [vscode](https://code.visualstudio.com), install the\n[`vscode-swiftlint`](https://marketplace.visualstudio.com/items?itemName=vknabel.vscode-swiftlint) extension from the marketplace.\n\n### fastlane\n\nYou can use the [official swiftlint fastlane action](https://docs.fastlane.tools/actions/swiftlint) to run SwiftLint as part of your fastlane process.\n\n```ruby\nswiftlint(\n    mode: :lint,                            # SwiftLint mode: :lint (default) or :autocorrect\n    executable: \"Pods/SwiftLint/swiftlint\", # The SwiftLint binary path (optional). Important if you've installed it via CocoaPods\n    path: \"/path/to/lint\",                  # Specify path to lint (optional)\n    output_file: \"swiftlint.result.json\",   # The path of the output file (optional)\n    reporter: \"json\",                       # The custom reporter to use (optional)\n    config_file: \".swiftlint-ci.yml\",       # The path of the configuration file (optional)\n    files: [                                # List of files to process (optional)\n        \"AppDelegate.swift\",\n        \"path/to/project/Model.swift\"\n    ],\n    ignore_exit_status: true,               # Allow fastlane to continue even if SwiftLint returns a non-zero exit status (Default: false)\n    quiet: true,                            # Don't print status logs like 'Linting ' & 'Done linting' (Default: false)\n    strict: true                            # Fail on warnings? (Default: false)\n)\n```\n\n### Docker\n\n`swiftlint` is also available as a [Docker](https://www.docker.com/) image using `Ubuntu`.\nSo just the first time you need to pull the docker image using the next command:\n```bash\ndocker pull ghcr.io/realm/swiftlint:latest\n```\n\nThen following times, you just run `swiftlint` inside of the docker like:\n```bash\ndocker run -it -v `pwd`:`pwd` -w `pwd` ghcr.io/realm/swiftlint:latest\n```\n\nThis will execute `swiftlint` in the folder where you are right now (`pwd`), showing an output like:\n```bash\n$ docker run -it -v `pwd`:`pwd` -w `pwd` ghcr.io/realm/swiftlint:latest\nLinting Swift files in current working directory\nLinting 'RuleDocumentation.swift' (1/490)\n...\nLinting 'YamlSwiftLintTests.swift' (490/490)\nDone linting! Found 0 violations, 0 serious in 490 files.\n```\n\nHere you have more documentation about the usage of [Docker Images](https://docs.docker.com/).\n\n### Command Line\n\n```\n$ swiftlint help\nOVERVIEW: A tool to enforce Swift style and conventions.\n\nUSAGE: swiftlint <subcommand>\n\nOPTIONS:\n  --version               Show the version.\n  -h, --help              Show help information.\n\nSUBCOMMANDS:\n  analyze                 Run analysis rules\n  docs                    Open SwiftLint documentation website in the default web browser\n  generate-docs           Generates markdown documentation for all rules\n  lint (default)          Print lint warnings and errors\n  reporters               Display the list of reporters and their identifiers\n  rules                   Display the list of rules and their identifiers\n  version                 Display the current version of SwiftLint\n\n  See 'swiftlint help <subcommand>' for detailed help.\n```\n\nRun `swiftlint` in the directory containing the Swift files to lint. Directories\nwill be searched recursively.\n\nTo specify a list of files when using `lint` or `analyze`\n(like the list of files modified by Xcode specified by the\n[`ExtraBuildPhase`](https://github.com/norio-nomura/ExtraBuildPhase) Xcode\nplugin, or modified files in the working tree based on `git ls-files -m`), you\ncan do so by passing the option `--use-script-input-files` and setting the\nfollowing instance variables: `SCRIPT_INPUT_FILE_COUNT` and\n`SCRIPT_INPUT_FILE_0`, `SCRIPT_INPUT_FILE_1`...`SCRIPT_INPUT_FILE_{SCRIPT_INPUT_FILE_COUNT - 1}`.\n\nThese are same environment variables set for input files to\n[custom Xcode script phases](http://indiestack.com/2014/12/speeding-up-custom-script-phases/).\n\n### Working With Multiple Swift Versions\n\nSwiftLint hooks into SourceKit so it continues working even as Swift evolves!\n\nThis also keeps SwiftLint lean, as it doesn't need to ship with a full Swift\ncompiler, it just communicates with the official one you already have installed\non your machine.\n\nYou should always run SwiftLint with the same toolchain you use to compile your\ncode.\n\nYou may want to override SwiftLint's default Swift toolchain if you have\nmultiple toolchains or Xcodes installed.\n\nHere's the order in which SwiftLint determines which Swift toolchain to use:\n\n* `$XCODE_DEFAULT_TOOLCHAIN_OVERRIDE`\n* `$TOOLCHAIN_DIR` or `$TOOLCHAINS`\n* `xcrun -find swift`\n* `/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain`\n* `/Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain`\n* `~/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain`\n* `~/Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain`\n\n`sourcekitd.framework` is expected to be found in the `usr/lib/` subdirectory of\nthe value passed in the paths above.\n\nYou may also set the `TOOLCHAINS` environment variable to the reverse-DNS\nnotation that identifies a Swift toolchain version:\n\n```shell\n$ TOOLCHAINS=com.apple.dt.toolchain.Swift_2_3 swiftlint --fix\n```\n\nOn Linux, SourceKit is expected to be located in\n`/usr/lib/libsourcekitdInProc.so` or specified by the `LINUX_SOURCEKIT_LIB_PATH`\nenvironment variable.\n\n### pre-commit\n\nSwiftLint can be run as a [pre-commit](https://pre-commit.com/) hook.\nOnce [installed](https://pre-commit.com/#install), add this to the\n`.pre-commit-config.yaml` in the root of your repository:\n\n```yaml\nrepos:\n  - repo: https://github.com/realm/SwiftLint\n    rev: 0.50.3\n    hooks:\n      - id: swiftlint\n```\n\nAdjust `rev` to the SwiftLint version of your choice.  `pre-commit autoupdate` can be used to update to the current version.\n\nSwiftLint can be configured using `entry` to apply fixes and fail on errors:\n```yaml\n-   repo: https://github.com/realm/SwiftLint\n    rev: 0.50.3\n    hooks:\n    -   id: swiftlint\n        entry: swiftlint --fix --strict\n```\n\n## Rules\n\nOver 200 rules are included in SwiftLint and the Swift community (that's you!)\ncontinues to contribute more over time.\n[Pull requests](https://github.com/realm/SwiftLint/blob/main/CONTRIBUTING.md) are encouraged.\n\nYou can find an updated list of rules and more information about them\n[here](https://realm.github.io/SwiftLint/rule-directory.html).\n\nYou can also check [Source/SwiftLintBuiltInRules/Rules](https://github.com/realm/SwiftLint/tree/main/Source/SwiftLintBuiltInRules/Rules)\ndirectory to see their implementation.\n\n### Opt-In Rules\n\n`opt_in_rules` are disabled by default (i.e., you have to explicitly enable them\nin your configuration file).\n\nGuidelines on when to mark a rule as opt-in:\n\n* A rule that can have many false positives (e.g. `empty_count`)\n* A rule that is too slow\n* A rule that is not general consensus or is only useful in some cases\n  (e.g. `force_unwrapping`)\n\n### Disable rules in code\n\nRules can be disabled with a comment inside a source file with the following\nformat:\n\n`// swiftlint:disable <rule1> [<rule2> <rule3>...]`\n\nThe rules will be disabled until the end of the file or until the linter sees a\nmatching enable comment:\n\n`// swiftlint:enable <rule1> [<rule2> <rule3>...]`\n\nFor example:\n\n```swift\n// swiftlint:disable colon\nlet noWarning :String = \"\" // No warning about colons immediately after variable names!\n// swiftlint:enable colon\nlet hasWarning :String = \"\" // Warning generated about colons immediately after variable names\n```\n\nIncluding the `all` keyword will disable all rules until the linter sees a matching enable comment:\n\n`// swiftlint:disable all`\n`// swiftlint:enable all`\n\nFor example:\n\n```swift\n// swiftlint:disable all\nlet noWarning :String = \"\" // No warning about colons immediately after variable names!\nlet i = \"\" // Also no warning about short identifier names\n// swiftlint:enable all\nlet hasWarning :String = \"\" // Warning generated about colons immediately after variable names\nlet y = \"\" // Warning generated about short identifier names\n```\n\nIt's also possible to modify a `disable` or `enable` command by appending\n`:previous`, `:this` or `:next` for only applying the command to the previous,\nthis (current) or next line respectively.\n\nFor example:\n\n```swift\n// swiftlint:disable:next force_cast\nlet noWarning = NSNumber() as! Int\nlet hasWarning = NSNumber() as! Int\nlet noWarning2 = NSNumber() as! Int // swiftlint:disable:this force_cast\nlet noWarning3 = NSNumber() as! Int\n// swiftlint:disable:previous force_cast\n```\n\nRun `swiftlint rules` to print a list of all available rules and their\nidentifiers.\n\n### Configuration\n\nConfigure SwiftLint by adding a `.swiftlint.yml` file from the directory you'll\nrun SwiftLint from. The following parameters can be configured:\n\nRule inclusion:\n\n* `disabled_rules`: Disable rules from the default enabled set.\n* `opt_in_rules`: Enable rules that are not part of the default set. The\n   special `all` identifier will enable all opt in linter rules, except the ones\n   listed in `disabled_rules`.\n* `only_rules`: Only the rules specified in this list will be enabled.\n   Cannot be specified alongside `disabled_rules` or `opt_in_rules`.\n* `analyzer_rules`: This is an entirely separate list of rules that are only\n  run by the `analyze` command. All analyzer rules are opt-in, so this is the\n  only configurable rule list, there are no equivalents for `disabled_rules`\n  `only_rules`.\n\n```yaml\n# By default, SwiftLint uses a set of sensible default rules you can adjust:\ndisabled_rules: # rule identifiers turned on by default to exclude from running\n  - colon\n  - comma\n  - control_statement\nopt_in_rules: # some rules are turned off by default, so you need to opt-in\n  - empty_count # find all the available rules by running: `swiftlint rules`\n\n# Alternatively, specify all rules explicitly by uncommenting this option:\n# only_rules: # delete `disabled_rules` & `opt_in_rules` if using this\n#   - empty_parameters\n#   - vertical_whitespace\n\nanalyzer_rules: # rules run by `swiftlint analyze`\n  - explicit_self\n\nincluded: # case-sensitive paths to include during linting. `--path` is ignored if present\n  - Source\nexcluded: # case-sensitive paths to ignore during linting. Takes precedence over `included`\n  - Carthage\n  - Pods\n  - Source/ExcludedFolder\n  - Source/ExcludedFile.swift\n  - Source/*/ExcludedFile.swift # exclude files with a wildcard\n\n# If true, SwiftLint will not fail if no lintable files are found.\nallow_zero_lintable_files: false\n\n# configurable rules can be customized from this configuration file\n# binary rules can set their severity level\nforce_cast: warning # implicitly\nforce_try:\n  severity: warning # explicitly\n# rules that have both warning and error levels, can set just the warning level\n# implicitly\nline_length: 110\n# they can set both implicitly with an array\ntype_body_length:\n  - 300 # warning\n  - 400 # error\n# or they can set both explicitly\nfile_length:\n  warning: 500\n  error: 1200\n# naming rules can set warnings/errors for min_length and max_length\n# additionally they can set excluded names\ntype_name:\n  min_length: 4 # only warning\n  max_length: # warning and error\n    warning: 40\n    error: 50\n  excluded: iPhone # excluded via string\n  allowed_symbols: [\"_\"] # these are allowed in type names\nidentifier_name:\n  min_length: # only min_length\n    error: 4 # only error\n  excluded: # excluded via string array\n    - id\n    - URL\n    - GlobalAPIKey\nreporter: \"xcode\" # reporter type (xcode, json, csv, checkstyle, codeclimate, junit, html, emoji, sonarqube, markdown, github-actions-logging, summary)\n```\n\nYou can also use environment variables in your configuration file,\nby using `${SOME_VARIABLE}` in a string.\n\n### Defining Custom Rules\n\nIn addition to the rules that the main SwiftLint project ships with, SwiftLint\ncan also run two types of custom rules that you can define yourself in your own\nprojects:\n\n#### 1. Swift Custom Rules\n\nThese rules are written the same way as the Swift-based rules that ship with\nSwiftLint so they're fast, accurate, can leverage SwiftSyntax, can be unit\ntested, and more.\n\nUsing these requires building SwiftLint with Bazel as described in\n[this video](https://vimeo.com/820572803) or its associated code in\n[github.com/jpsim/swiftlint-bazel-example](https://github.com/jpsim/swiftlint-bazel-example).\n\n#### 2. Regex Custom Rules\n\nYou can define custom regex-based rules in your configuration file using the\nfollowing syntax:\n\n```yaml\ncustom_rules:\n  pirates_beat_ninjas: # rule identifier\n    included: \n      - \".*\\\\.swift\" # regex that defines paths to include during linting. optional.\n    excluded: \n      - \".*Test\\\\.swift\" # regex that defines paths to exclude during linting. optional\n    name: \"Pirates Beat Ninjas\" # rule name. optional.\n    regex: \"([nN]inja)\" # matching pattern\n    capture_group: 0 # number of regex capture group to highlight the rule violation at. optional.\n    match_kinds: # SyntaxKinds to match. optional.\n      - comment\n      - identifier\n    message: \"Pirates are better than ninjas.\" # violation message. optional.\n    severity: error # violation severity. optional.\n  no_hiding_in_strings:\n    regex: \"([nN]inja)\"\n    match_kinds: string\n```\n\nThis is what the output would look like:\n\n![](https://raw.githubusercontent.com/realm/SwiftLint/main/assets/custom-rule.png)\n\nIt is important to note that the regular expression pattern is used with the flags `s`\nand `m` enabled, that is `.`\n[matches newlines](https://developer.apple.com/documentation/foundation/nsregularexpression/options/1412529-dotmatcheslineseparators)\nand `^`/`$` \n[match the start and end of lines](https://developer.apple.com/documentation/foundation/nsregularexpression/options/1408263-anchorsmatchlines),\nrespectively. If you do not want to have `.` match newlines, for example, the regex can be prepended by `(?-s)`. \n\nYou can filter the matches by providing one or more `match_kinds`, which will\nreject matches that include syntax kinds that are not present in this list. Here\nare all the possible syntax kinds:\n\n* `argument`\n* `attribute.builtin`\n* `attribute.id`\n* `buildconfig.id`\n* `buildconfig.keyword`\n* `comment`\n* `comment.mark`\n* `comment.url`\n* `doccomment`\n* `doccomment.field`\n* `identifier`\n* `keyword`\n* `number`\n* `objectliteral`\n* `parameter`\n* `placeholder`\n* `string`\n* `string_interpolation_anchor`\n* `typeidentifier`\n\nAll syntax kinds used in a snippet of Swift code can be extracted asking\n[SourceKitten](https://github.com/jpsim/SourceKitten). For example,\n`sourcekitten syntax --text \"struct S {}\"` delivers\n\n* `source.lang.swift.syntaxtype.keyword` for the `struct` keyword and\n* `source.lang.swift.syntaxtype.identifier` for its name `S`\n\nwhich match to `keyword` and `identifier` in the above list.\n\nIf using custom rules in combination with `only_rules`, make sure to add\n`custom_rules` as an item under `only_rules`.\n\nUnlike Swift custom rules, you can use official SwiftLint builds\n(e.g. from Homebrew) to run regex custom rules.\n\n### Auto-correct\n\nSwiftLint can automatically correct certain violations. Files on disk are\noverwritten with a corrected version.\n\nPlease make sure to have backups of these files before running\n`swiftlint --fix`, otherwise important data may be lost.\n\nStandard linting is disabled while correcting because of the high likelihood of\nviolations (or their offsets) being incorrect after modifying a file while\napplying corrections.\n\n### Analyze\n\nThe `swiftlint analyze` command can lint Swift files using the\nfull type-checked AST. The compiler log path containing the clean `swiftc` build\ncommand invocation (incremental builds will fail) must be passed to `analyze`\nvia the `--compiler-log-path` flag.\ne.g. `--compiler-log-path /path/to/xcodebuild.log`\n\nThis can be obtained by \n\n1. Cleaning DerivedData (incremental builds won't work with analyze)\n2. Running `xcodebuild -workspace {WORKSPACE}.xcworkspace -scheme {SCHEME} > xcodebuild.log`\n3. Running `swiftlint analyze --compiler-log-path xcodebuild.log`\n\nAnalyzer rules tend to be considerably slower than lint rules.\n\n## Using Multiple Configuration Files\n\nSwiftLint offers a variety of ways to include multiple configuration files.\nMultiple configuration files get merged into one single configuration that is then applied\njust as a single configuration file would get applied.\n\nThere are quite a lot of use cases where using multiple configuration files could be helpful:\n\nFor instance, one could use a team-wide shared SwiftLint configuration while allowing overrides\nin each project via a child configuration file.\n\nTeam-Wide Configuration:\n\n```yaml\ndisabled_rules:\n- force_cast\n```\n\nProject-Specific Configuration:\n\n```yaml\nopt_in_rules:\n- force_cast\n```\n\n### Child / Parent Configs (Locally)\n\nYou can specify a `child_config` and / or a `parent_config` reference within a configuration file.\nThese references should be local paths relative to the folder of the configuration file they are specified in.\nThis even works recursively, as long as there are no cycles and no ambiguities.\n\n**A child config is treated as a refinement and therefore has a higher priority**,\nwhile a parent config is considered a base with lower priority in case of conflicts.\n\nHere's an example, assuming you have the following file structure:\n\n```\nProjectRoot\n    |_ .swiftlint.yml\n    |_ .swiftlint_refinement.yml\n    |_ Base\n        |_ .swiftlint_base.yml\n```\n\nTo include both the refinement and the base file, your `.swiftlint.yml` should look like this:\n\n```yaml\nchild_config: .swiftlint_refinement.yml\nparent_config: Base/.swiftlint_base.yml\n```\n\nWhen merging parent and child configs, `included` and `excluded` configurations\nare processed carefully to account for differences in the directory location\nof the containing configuration files.\n\n### Child / Parent Configs (Remote)\n\nJust as you can provide local `child_config` / `parent_config` references, instead of\nreferencing local paths, you can just put urls that lead to configuration files.\nIn order for SwiftLint to detect these remote references, they must start with `http://` or `https://`.\n\nThe referenced remote configuration files may even recursively reference other\nremote configuration files, but aren't allowed to include local references.\n\nUsing a remote reference, your `.swiftlint.yml` could look like this:\n\n```yaml\nparent_config: https://myteamserver.com/our-base-swiftlint-config.yml\n```\n\nEvery time you run SwiftLint and have an Internet connection, SwiftLint tries to get a new version of\nevery remote configuration that is referenced. If this request times out, a cached version is\nused if available. If there is no cached version available, SwiftLint fails – but no worries, a cached version\nshould be there once SwiftLint has run successfully at least once.\n\nIf needed, the timeouts for the remote configuration fetching can be specified manually via the\nconfiguration file(s) using the `remote_timeout` / `remote_timeout_if_cached` specifiers.\nThese values default to 2 / 1 second(s).\n\n### Command Line\n\nInstead of just providing one configuration file when running SwiftLint via the command line,\nyou can also pass a hierarchy, where the first configuration is treated as a parent,\nwhile the last one is treated as the highest-priority child.\n\nA simple example including just two configuration files looks like this:\n\n`swiftlint --config .swiftlint.yml --config .swiftlint_child.yml`\n\n### Nested Configurations\n\nIn addition to a main configuration (the `.swiftlint.yml` file in the root folder),\nyou can put other configuration files named `.swiftlint.yml` into the directory structure\nthat then get merged as a child config, but only with an effect for those files\nthat are within the same directory as the config or in a deeper directory where\nthere isn't another configuration file. In other words: Nested configurations don't work \nrecursively – there's a maximum number of one nested configuration per file \nthat may be applied in addition to the main configuration.\n\n`.swiftlint.yml` files are only considered as a nested configuration if they have not been\nused to build the main configuration already (e. g. by having been referenced via something\nlike `child_config: Folder/.swiftlint.yml`). Also, `parent_config` / `child_config`\nspecifications of nested configurations are getting ignored because there's no sense to that.\n\nIf one (or more) SwiftLint file(s) are explicitly specified via the `--config` parameter,\nthat configuration will be treated as an override, no matter whether there exist\nother `.swiftlint.yml` files somewhere within the directory. **So if you want to use\n nested configurations, you can't use the `--config` parameter.**\n\n## License\n\n[MIT licensed.](https://github.com/realm/SwiftLint/blob/main/LICENSE)\n\n## About\n\n<img src=\"https://raw.githubusercontent.com/realm/SwiftLint/main/assets/realm.png\" width=\"184\" />\n\nSwiftLint is maintained and funded by Realm Inc. The names and logos for\nRealm are trademarks of Realm Inc.\n\nWe :heart: open source software!\nSee [our other open source projects](https://github.com/realm),\nread [our blog](https://realm.io/news), or say hi on twitter\n([@realm](https://twitter.com/realm)).\n\n<img src=\"https://raw.githubusercontent.com/realm/SwiftLint/main/assets/macstadium.png\" width=\"184\" />\n\nOur thanks to MacStadium for providing a Mac Mini to run our performance\ntests."
}
