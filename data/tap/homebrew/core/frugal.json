{
  "name": "frugal",
  "full_name": "frugal",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Cross language code generator for creating scalable microservices",
  "license": "Apache-2.0",
  "homepage": "https://github.com/Workiva/frugal",
  "versions": {
    "stable": "3.16.24",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/Workiva/frugal/archive/v3.16.24.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "70e14552bdf59608f35703deb6f6132fa376cbdb8173c07efdd59fc610ed12ba"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/frugal/blobs/sha256:62bdd97f6129bf2228f5af11f42f0866229e84b0b6a171601573a80be5262f56",
          "sha256": "62bdd97f6129bf2228f5af11f42f0866229e84b0b6a171601573a80be5262f56"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/frugal/blobs/sha256:0d6661504e4e3821300e8f26ee81237be48f5202d3d75ddf4a67156a59091dc1",
          "sha256": "0d6661504e4e3821300e8f26ee81237be48f5202d3d75ddf4a67156a59091dc1"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/frugal/blobs/sha256:9dd19130ac3ee85f6aa736eb40841bb1ecbe0f17bc0c90564d921d7377113800",
          "sha256": "9dd19130ac3ee85f6aa736eb40841bb1ecbe0f17bc0c90564d921d7377113800"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/frugal/blobs/sha256:daa32b9816a9c64194cb3a5dabe5ff214de2eabcbeeb543fc0e1706416b8e3b8",
          "sha256": "daa32b9816a9c64194cb3a5dabe5ff214de2eabcbeeb543fc0e1706416b8e3b8"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/frugal/blobs/sha256:194ee6404d2a5f484a6890f265edce2fcfad674fa87ae6d50fd8083feb77f4aa",
          "sha256": "194ee6404d2a5f484a6890f265edce2fcfad674fa87ae6d50fd8083feb77f4aa"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/frugal/blobs/sha256:8ba2c73b605a58994e961641cdeecc92c042e200d4dad6538d6a7b179c543a5c",
          "sha256": "8ba2c73b605a58994e961641cdeecc92c042e200d4dad6538d6a7b179c543a5c"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/frugal/blobs/sha256:ea26909ee36f9c9cb10929a5fe147d184190f20700efb0a2c88c9f7820c57ee9",
          "sha256": "ea26909ee36f9c9cb10929a5fe147d184190f20700efb0a2c88c9f7820c57ee9"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/frugal.rb",
  "ruby_source_checksum": {
    "sha256": "a6066e9769dae730f0465472151a850d54424811eb7581de0ea91288361831fd"
  },
  "date_added": "2017-08-22T13:10:39-07:00",
  "readme": "# Frugal\n\n![Build Status](https://travis-ci.org/Workiva/frugal.svg?branch=develop)\n\nFrugal is an extension of [Apache Thrift](https://thrift.apache.org/) which\nprovides additional functionality. Key features include:\n\n- request headers\n- request multiplexing\n- request interceptors\n- per-request timeouts\n- thread-safe clients\n- code-generated pub/sub APIs\n- support for Go, Java, Dart, and Python (2.7 and 3.5)\n\nFrugal is intended to act as a superset of Thrift, meaning it\nimplements the same functionality as Thrift with some additional\nfeatures. For a more detailed explanation, see the\n[documentation](documentation).\n\n## Installation\n\n### Homebrew\n\n```bash\nbrew install frugal\n```\n\n### Download\n\nPre-compiled binaries for OS X and Linux are available from the Github\nreleases tab. Currently, adding these binaries is a manual process. If\na downloadable release is missing, notify the messaging team to have it\nadded.\n\nIf go is already installed and setup you can also simply:\n\n```bash\n$ go get github.com/Workiva/frugal\n```\n\n### From Source\n\nIf go is already installed and setup, you can run the following commands:\n\n```bash\n$ git clone git@github.com:Workiva/frugal.git\n$ cd frugal\n$ go install\n```\n\nWhen generating go, be aware the frugal go library and the frugal compiler\nhave separate dependencies.\n\n## Usage\n\nDefine your Frugal file which contains your pub/sub interface, or *scopes*, and\nThrift definitions.\n\n```thrift\n# event.frugal\n\n// Anything allowed in a .thrift file is allowed in a .frugal file.\nstruct Event {\n    1: i64 ID,\n    2: string Message\n}\n\n// Scopes are a Frugal extension for pub/sub APIs.\nscope Events {\n    EventCreated: Event\n}\n```\n\nGenerate the code with `frugal`. Currently, only Go, Java, Dart, and Python are\nsupported.\n\n```\n$ frugal -gen=go event.frugal\n```\n\nBy default, generated code is placed in a `gen-*` directory. This code\ncan then be used in your application. Example code is avaliable in the\n[examples/](examples/) directory for supported languages.\n\n### Prefixes\n\nBy default, Frugal publishes messages on the topic `<scope>.<operation>`. For\nexample, the `EventCreated` operation in the following Frugal definition would\nbe published on `Events.EventCreated`:\n\n```thrift\nscope Events {\n    EventCreated: Event\n}\n```\n\nCustom topic prefixes can be defined on a per-scope basis:\n\n```thrift\nscope Events prefix foo.bar {\n    EventCreated: Event\n}\n```\n\nAs a result, `EventCreated` would be published on `foo.bar.Events.EventCreated`.\n\nPrefixes can also define variables which are provided at publish and subscribe\ntime:\n\n```thrift\nscope Events prefix foo.{user} {\n    EventCreated: Event\n}\n```\n\nThis variable is then passed to publish and subscribe calls:\n\n```go\nvar (\n    event = &event.Event{ID: 42, Message: \"hello, world!\"}\n    user  = \"bill\"\n)\npublisher.PublishEventCreated(frugal.NewFContext(\"\"), event, user)\n\nsubscriber.SubscribeEventCreated(user, func(ctx *frugal.FContext, e *event.Event) {\n    fmt.Printf(\"Received event for %s: %s\\n\", user, e.Message)\n})\n```\n\n### Generated Comments\n\nIn Thrift, comments of the form `/** ... */` are included in generated code. In\nFrugal, to include comments in generated code, they should be of the form `/**@\n... */`.\n\n```thrift\n/**@\n * This comment is included in the generated code because\n * it has the @ sign.\n */\nstruct Foo {}\n\n/**@ This comment is included too. */\nservice FooService {\n    /** This comment isn't included because it doesn't have the @ sign. */\n    Foo getFoo()\n}\n```\n\n### Annotations\n\nAnnotations are extra directive in the IDL that can alter the way code is generated.\nSome common annotations are listed below\n\n| Annotation    | Values        | Allowed Places | Description\n| ------------- | ------------- | -------------- | -----------\n| vendor        | Optional location | Namespaces, Includes | See [vendoring includes](#vendoring-includes)\n| deprecated    | Optional description | Service methods, Struct/union/exception fields | See [deprecating](#deprecating)\n\n### Vendoring Includes\n\nFrugal does not generate code for includes by default. The `-r` flag is\nrequired to recursively generate includes. If `-r` is set, Frugal generates the\nentire IDL tree, including code for includes, in the same output directory (as\nspecified by `-out`) by default. Since this can cause problems when using a\nlibrary that uses a Frugal-generated object generated with the same IDL in two\nor more places, Frugal provides special support for vendoring dependencies\nthrough a `vendor` annotation on includes and namespaces.\n\nThe `vendor` annotation is used on namespace definitions to indicate to any\nconsumers of the IDL where the generated code is vendored so that consumers can\ngenerate code that points to it. This cannot be used with `*` namespaces since\nit is language-dependent. Consumers then use the `vendor` annotation on\nincludes they wish to vendor. The value provided on the include-side `vendor`\nannotation, if any, is ignored.\n\nWhen an include is annotated with `vendor`, Frugal will skip generating the\ninclude if `use_vendor` language option is set since this flag indicates\nintention to use the vendored code as advertised by the `vendor` annotation.\n\nIf no location is specified by the `vendor` annotation, the behavior is defined\nby the language generator.\n\nThe `vendor` annotation is currently only supported by Go, Dart and Java.\n\nThe example below illustrates how this works.\n\nbar.frugal (\"providing\" IDL):\n```thrift\nnamespace go bar (vendor=\"github.com/Workiva/my-repo/gen-go/bar\")\nnamespace dart bar (vendor=\"my-repo/gen-go\")\nnamespace java bar (vendor=\"com.workiva.bar.custom.pkg\")\n\nstruct Struct {}\n```\n\nfoo.frugal (\"consuming\" IDL):\n```thrift\ninclude \"bar.frugal\" (vendor)\n\nservice MyService {\n    bar.Struct getStruct()\n}\n```\n\n```\nfrugal -r -gen go:package_prefix=github.com/Workiva/my-other-repo/gen-go,use_vendor foo.frugal\n```\n\nWhen we run the above command to generate `foo.frugal`, Frugal will not\ngenerate code for `bar.frugal` since `use_vendor` is set and the \"providing\"\nIDL has a vendor path set for the Go namespace. Instead, the generated code for\n`foo.frugal` will reference the vendor path specified in `bar.frugal`\n(github.com/Workiva/my-repo/gen-go/bar).\n\n### Deprecating\nMarks a method or field as deprecated (if supported by the language, or in a comment otherwise), and logs a warning if a deprecated method is called. This is not available on an entire struct, only the fields within the struct.\n```\n  Struct GetFooRequest {\n      1: String value (deprecated=\"Use newValue instead\")\n  }\n\n  GetFooResponse getFoo(10: GetFooRequest request) throws (\n    1: FooError error\n  ) (deprecated=\"Use getBar instead\")\n```\nIn Dart, this compiles to\n```\nclass GetFooRequest implements thrift.TBase {\n  ...\n\n  /// Deprecated: Use newValue instead\n  @deprecated\n  List<String> _value;\n  ...\n}\n```\n\n```\n  /// Deprecated: Use getBar instead\n  @deprecated\n  Future<namespace.GetFooResponse> getFoo(frugal.FContext ctx, namespace.GetFooRequest request);\n```\n\n\n## Thrift Parity\n\nFrugal is intended to be a superset of Thrift, meaning valid Thrift should be\nvalid Frugal. File an issue if you discover an inconsistency in compatibility\nwith the IDL."
}
