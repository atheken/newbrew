{
  "name": "primesieve",
  "full_name": "primesieve",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Fast C/C++ prime number generator",
  "license": "BSD-2-Clause",
  "homepage": "https://github.com/kimwalisch/primesieve",
  "versions": {
    "stable": "11.1",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/kimwalisch/primesieve/archive/v11.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "bab3bc4a1f3247f95b83dfc494ab0ce37a370a7b05379640f58e786d8d5fba61"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/primesieve/blobs/sha256:120a1a269f8ed4ee6c164e257800a58b41dcf1beb0d642d6a7c9d750560f8f77",
          "sha256": "120a1a269f8ed4ee6c164e257800a58b41dcf1beb0d642d6a7c9d750560f8f77"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/primesieve/blobs/sha256:13d09364b1885785ea0a7fb7de379e4ccbd69e3cf68789a3d49839c8826674db",
          "sha256": "13d09364b1885785ea0a7fb7de379e4ccbd69e3cf68789a3d49839c8826674db"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/primesieve/blobs/sha256:b3c8f23227b5e0870bdf4c3a49f795a860bc2a0067935b825f1cbaeef9168bec",
          "sha256": "b3c8f23227b5e0870bdf4c3a49f795a860bc2a0067935b825f1cbaeef9168bec"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/primesieve/blobs/sha256:53fa5f14e9392a4e20b1f99db0f06c9b8cceff89837bab78f645cc19e1ef180f",
          "sha256": "53fa5f14e9392a4e20b1f99db0f06c9b8cceff89837bab78f645cc19e1ef180f"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/primesieve/blobs/sha256:958153771aa5003990ccd7e7f8470f52da91aa891ef26857970f20459b94efb9",
          "sha256": "958153771aa5003990ccd7e7f8470f52da91aa891ef26857970f20459b94efb9"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/primesieve/blobs/sha256:109da40994c495963033867984bae44a14d9897e121cc587e04edf6b28c54062",
          "sha256": "109da40994c495963033867984bae44a14d9897e121cc587e04edf6b28c54062"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/primesieve/blobs/sha256:4e286688ae56f8ad9a64058d6a7316fdc40f13adf713e7eb8a2397e907acf8e1",
          "sha256": "4e286688ae56f8ad9a64058d6a7316fdc40f13adf713e7eb8a2397e907acf8e1"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/primesieve.rb",
  "ruby_source_checksum": {
    "sha256": "571308c0d4b2bb25d061f54d8b437a7f0c24e80feba3a4e69fc1393abde1e4bd"
  },
  "date_added": "2012-02-21T21:45:59-06:00",
  "readme": "# primesieve\n\n[![Build Status](https://ci.appveyor.com/api/projects/status/github/kimwalisch/primesieve?branch=master&svg=true)](https://ci.appveyor.com/project/kimwalisch/primesieve)\n[![Github Releases](https://img.shields.io/github/release/kimwalisch/primesieve.svg)](https://github.com/kimwalisch/primesieve/releases)\n\nprimesieve is a command-line program and C/C++ library for quickly generating prime numbers.\nIt is very cache efficient, it detects your CPU's L1 & L2 cache sizes and allocates its main\ndata structures accordingly. It is also multi-threaded by default, it uses all available CPU\ncores whenever possible i.e. if sequential ordering is not required. primesieve\ncan generate primes and [prime k-tuplets](https://en.wikipedia.org/wiki/Prime_k-tuple)\nup to 2<sup>64</sup>.\n\nprimesieve generates primes using the segmented\n[sieve of Eratosthenes](https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes) with\n[wheel factorization](https://en.wikipedia.org/wiki/Wheel_factorization).\nThis algorithm has a run time complexity of $O(n\\log{\\log{n}})$ operations and uses\n$O(\\sqrt{n})$ memory. Furthermore primesieve uses the\n[bucket sieve](http://sweet.ua.pt/tos/software/prime_sieve.html)\nalgorithm which improves the cache efficiency when generating primes > 2<sup>32</sup>.\nprimesieve uses 8 bytes per sieving prime, in practice its memory usage is about\n$\\pi(\\sqrt{n})\\times 8$ bytes per thread.\n\n* [More algorithm details](doc/ALGORITHMS.md)\n\n## Installation\n\nThe primesieve command-line program can be installed using your operating system's\npackage manager. For doing development with libprimesieve you may need\nto install ```libprimesieve-dev``` or ```libprimesieve-devel```.\n\n<table>\n    <tr>\n        <td><b>Windows:</b></td>\n        <td><code>winget install primesieve</code></td>\n    </tr>\n    <tr>\n        <td><b>macOS:</b></td>\n        <td><code>brew install primesieve</code></td>\n    </tr>\n    <tr>\n        <td><b>Arch Linux:</b></td>\n        <td><code>sudo pacman -S primesieve</code></td>\n    </tr>\n    <tr>\n        <td><b>Debian/Ubuntu:</b></td>\n        <td><code>sudo apt install primesieve</code></td>\n    </tr>\n    <tr>\n        <td><b>Fedora:</b></td>\n        <td><code>sudo dnf install primesieve</code></td>\n    </tr>\n    <tr>\n        <td><b>FreeBSD:</b></td>\n        <td><code>pkg install primesieve</code></td>\n    </tr>\n    <tr>\n        <td><b>openSUSE:</b></td>\n        <td><code>sudo zypper install primesieve</code></td>\n    </tr>\n</table>\n\n## Usage examples\n\n```sh\n# Count the primes ≤ 1e10 using all CPU cores\nprimesieve 1e10\n\n# Print the primes ≤ 1000000\nprimesieve 1000000 --print\n\n# Store the primes ≤ 1000000 in a text file\nprimesieve 1000000 --print > primes.txt\n\n# Print the twin primes ≤ 1000000\nprimesieve 1000000 --print=2\n\n# Count the prime triplets inside [1e10, 1e10+2^32]\nprimesieve 1e10 --dist=2^32 --count=3\n```\n\n## Command-line options\n\n```\nUsage: primesieve [START] STOP [OPTION]...\nGenerate the primes and/or prime k-tuplets inside [START, STOP]\n(< 2^64) using the segmented sieve of Eratosthenes.\n\nOptions:\n  -c, --count[=NUM+]  Count primes and/or prime k-tuplets, NUM <= 6.\n                      Count primes: -c or --count (default option),\n                      count twin primes: -c2 or --count=2,\n                      count prime triplets: -c3 or --count=3, ...\n      --cpu-info      Print CPU information (cache sizes).\n  -d, --dist=DIST     Sieve the interval [START, START + DIST].\n  -h, --help          Print this help menu.\n  -n, --nth-prime     Find the nth prime.\n                      primesieve 100 -n: finds the 100th prime,\n                      primesieve 2 100 -n: finds the 2nd prime > 100.\n      --no-status     Turn off the progressing status.\n  -p, --print[=NUM]   Print primes or prime k-tuplets, NUM <= 6.\n                      Print primes: -p or --print,\n                      print twin primes: -p2 or --print=2,\n                      print prime triplets: -p3 or --print=3, ...\n  -q, --quiet         Quiet mode, prints less output.\n  -s, --size=SIZE     Set the sieve size in KiB, SIZE <= 8192.\n                      By default primesieve uses a sieve size that\n                      matches your CPU's L1 cache size (per core) or is\n                      slightly smaller than your CPU's L2 cache size.\n      --test          Run various sieving tests.\n  -t, --threads=NUM   Set the number of threads, NUM <= CPU cores.\n                      Default setting: use all available CPU cores.\n      --time          Print the time elapsed in seconds.\n  -v, --version       Print version and license information.\n```\n\n## Build instructions\n\nYou need to have installed a C++ compiler which supports C++11 (or later)\nand CMake ≥ 3.4.\n\n```sh\ncmake .\ncmake --build . --parallel\nsudo cmake --install .\nsudo ldconfig\n```\n\n* [Detailed build instructions](doc/BUILD.md)\n\n## C++ API\n\nInclude the ```<primesieve.hpp>``` header to use libprimesieve's C++ API.\n\n```C++\n#include <primesieve.hpp>\n#include <iostream>\n\nint main()\n{\n  primesieve::iterator it;\n  uint64_t prime = it.next_prime();\n\n  // Iterate over the primes < 10^6\n  for (; prime < 1000000; prime = it.next_prime())\n    std::cout << prime << std::endl;\n\n  return 0;\n}\n```\n\n* [C++ API documentation](doc/CPP_API.md)\n\n## C API\n\nInclude the ```<primesieve.h>``` header to use libprimesieve's C API.\n\n```C\n#include <primesieve.h>\n#include <inttypes.h>\n#include <stdio.h>\n\nint main()\n{\n  primesieve_iterator it;\n  primesieve_init(&it);\n  uint64_t prime;\n\n  /* Iterate over the primes < 10^6 */\n  while ((prime = primesieve_next_prime(&it)) < 1000000)\n    printf(\"%\" PRIu64 \"\\n\", prime);\n\n  primesieve_free_iterator(&it);\n  return 0;\n}\n```\n\n* [C API documentation](doc/C_API.md)\n\n## Bindings for other languages\n\nprimesieve natively supports C and C++ and has bindings available for:\n\n<table>\n    <tr>\n        <td><b>Common Lisp:</b></td>\n        <td><a href=\"https://github.com/AaronChen0/cl-primesieve\">cl-primesieve</a></td>\n    </tr>\n    <tr>\n        <td><b>Janet:</b></td>\n        <td><a href=\"https://github.com/bunder/janet-primesieve\">janet-primesieve</a></td>\n    </tr>\n    <tr>\n        <td><b>Julia:</b></td>\n        <td><a href=\"https://github.com/jlapeyre/PrimeSieve.jl\">PrimeSieve.jl</a></td>\n    </tr>\n    <tr>\n        <td><b>Nim:</b></td>\n        <td><a href=\"https://github.com/nandub/primesievec-nim\">primesievec-nim</a></td>\n    </tr>\n    <tr>\n        <td><b>Haskell:</b></td>\n        <td><a href=\"https://hackage.haskell.org/package/primesieve\">primesieve-haskell</a></td>\n    </tr>\n    <tr>\n        <td><b>Pascal:</b></td>\n        <td><a href=\"https://github.com/JulStrat/primesieve-pas\">primesieve-pas</a></td>\n    </tr> \n    <tr>\n        <td><b>Perl:</b></td>\n        <td><a href=\"https://gitlab.com/oesiman/primesieve\">Primesieve</a></td>\n    </tr>\n    <tr>\n        <td><b>Python:</b></td>\n        <td><a href=\"https://github.com/shlomif/primesieve-python\">primesieve-python</a></td>\n    </tr>\n    <tr>\n        <td><b>Raku:</b></td>\n        <td><a href=\"https://github.com/CurtTilmes/raku-primesieve\">raku-primesieve</a></td>\n    </tr>\n    <tr>\n        <td><b>Ruby:</b></td>\n        <td><a href=\"https://github.com/robertjlooby/primesieve-ruby\">primesieve-ruby</a></td>\n    </tr>\n    <tr>\n        <td><b>Rust:</b></td>\n        <td><a href=\"https://github.com/pthariensflame/primesieve.rs\">primesieve.rs</a></td>\n    </tr>   \n</table>\n\nMany thanks to the developers of these bindings!"
}
