{
  "name": "securefs",
  "full_name": "securefs",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Filesystem with transparent authenticated encryption",
  "license": "MIT",
  "homepage": "https://github.com/netheril96/securefs",
  "versions": {
    "stable": "0.13.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/netheril96/securefs.git",
      "tag": "0.13.1",
      "revision": "bb7088e3fe43cd5978ec6b09b4cd9615a4ab654c",
      "checksum": null
    },
    "head": {
      "url": "https://github.com/netheril96/securefs.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/securefs/blobs/sha256:4ee41830ddaa8bae8ad280a3826e28895d6ee21e487fc7fa6cbf8f8d5835c8e6",
          "sha256": "4ee41830ddaa8bae8ad280a3826e28895d6ee21e487fc7fa6cbf8f8d5835c8e6"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [
    "libfuse@2"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [
    {
      "name": "linux",
      "cask": null,
      "download": null,
      "version": null,
      "contexts": [],
      "specs": [
        "stable",
        "head"
      ]
    }
  ],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/securefs.rb",
  "ruby_source_checksum": {
    "sha256": "f80b3a51758c0bf31bc115b8a4eca25bd874a95459aa2a9a9774bce43ab0c50d"
  },
  "date_added": "2017-04-19T14:34:00+01:00",
  "readme": "# securefs\n\n`securefs` is a filesystem in userspace (FUSE) with transparent encryption (when writing) and decryption (when reading).\n\n`securefs` mounts a regular directory onto a mount point. The mount point appears as a regular filesystem, where one can read/write/create files, directories and symbolic links. The underlying directory will be automatically updated to contain the encrypted and authenticated contents.\n\n## Motivation\n\nFrom sensitive financial records to personal diaries and collection of guilty pleasures, we all have something to keep private from prying eyes. Especially when we store our files in the cloud, the company and the NSA may well get their hands upon it. The best protection we can afford ourselves is **cryptography**, the discipline developed by mathematicians and military originally to keep the national secrets.\n\nSecurity, however, is often at odds with convenience, and people easily grow tired of the hassle and revert to no protection at all. Consider the case of protecting our files either locally or in the cloud: we have to encrypt the files before committing to the cloud and decrypt it every time we need to read and write. Worse still, such actions leave unencrypted traces on our hard drive. If we store data in the cloud, another issue arise: manual encryption and decryption prevent files from being synced efficiently.\n\n`securefs` is intended to make the experience as smooth as possible so that the security and convenience do not conflict. After mounting the virtual filesystem, everything just works&#8482;.\n\n## Comparison\n\nThere are already many encrypting filesystem in widespread use. Some notable ones are TrueCrypt, FileVault, BitLocker, eCryptFS, encfs and gocryptfs. `securefs` differs from them in that it is the only one with all of the following features:\n\n- [Authenticated encryption](https://en.wikipedia.org/wiki/Authenticated_encryption) (hence secure against chosen ciphertext attacks)\n- [Probabilistic encryption](https://en.wikipedia.org/wiki/Probabilistic_encryption) (hence provides semantical security)\n- Supported on all major platforms (Mac, Linux, BSDs and Windows)\n- Efficient cloud synchronization (not a single preallocated file as container)\n- (Optional) File size obfuscation by random padding.\n\n## Install\n\n[![Actions Status](https://github.com/netheril96/securefs/workflows/C%2FC%2B%2B%20CI/badge.svg)](https://github.com/netheril96/securefs/actions)\n\n### Dependencies\n\nOn Windows, we need to separately install [WinFsp](https://winfsp.dev/) and [VC++ redistributable](https://learn.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist?view=msvc-170#visual-studio-2015-2017-2019-and-2022).\n\nOn Linux, we need to install `fuse-dev` package.\n\nOn FreeBSD, we need to run `pkg install fusefs-libs`.\n\nOn macOS, we need to install [MacFUSE](https://osxfuse.github.io/).\n\n### Binary packages\n\nDownload from the Release page.\n\n### Build from source\n\nFirst you need to install [vcpkg](vcpkg.io). Then run `python3 build.py --enable_test`.\n\n### Package managers\n\n#### macOS\nUse homebrew.\n\n`brew install netheril96/fuse/securefs-mac`\n\n## Basic usage\n\n_It is recommended to disable or encrypt the swap and hibernation file. Otherwise plaintext and keys stored in the main memory may be written to disk by the OS at any time._\n\nExamples:\n\n```bash\nsecurefs --help\nsecurefs create ~/Secret\nsecurefs chpass ~/Secret\nsecurefs mount ~/Secret ~/Mount # press Ctrl-C to unmount\nsecurefs m -h # m is an alias for mount, -h tell you all the flags\n```\n\n## Lite and full mode\n\nThere are two categories of filesystem format.\n\nThe **lite** format simply encrypts filenames and file contents separately, similar to how `encfs` operates, although with more security.\n\nThe **full** format maps files, directory and symlinks in the virtual filesystem all to regular files in the underlying filesystem. The directory structure is flattened and recorded as B-trees in files.\n\nThe lite format has become the default on Unix-like operating systems as it is much faster and features easier conflict resolution, especially when used with DropBox, Google Drive, etc. The full format, however, leaks fewer information about the filesystem hierarchy, runs relatively independent of the features of the underlying filesystem, and is in general more secure.\n\nTo request full format, which is no longer the default, run `securefs create --format 2`.\n\n## Design and algorithms\n\nSee [here](docs/design.md).\n\n## Caveat\n\nIf you store `securefs` encrypted files on iCloud Drive, it might cause Spotlight Search on iOS to stop working. It is a bug in iOS, not in `securefs`.\n\nTo work around that bug, you can disable the indexing of _Files_ app in Settings -> Siri & Suggestions."
}
