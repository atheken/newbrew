{
  "name": "nodeenv",
  "full_name": "nodeenv",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Node.js virtual environment builder",
  "license": "BSD-3-Clause",
  "homepage": "https://github.com/ekalinin/nodeenv",
  "versions": {
    "stable": "1.8.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/ekalinin/nodeenv/archive/1.8.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "2a8931e93a9aeae1fffa0bd76e077168e5c0ce4b32f9bc85dee2e8d8eb35a2f9"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/nodeenv/blobs/sha256:a10ab650965b6f6e7d349917cc5f5e4d4af273c2386576b82129a79fcdae8547",
          "sha256": "a10ab650965b6f6e7d349917cc5f5e4d4af273c2386576b82129a79fcdae8547"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "python"
  ],
  "uses_from_macos_bounds": [
    {
      "since": "catalina"
    }
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/nodeenv.rb",
  "ruby_source_checksum": {
    "sha256": "83f6a6a8038502afd846d27f26a1edfa395979a19ca09f0dd007b47330b6770e"
  },
  "date_added": "2015-10-06T04:28:41+01:00",
  "readme": "Node.js virtual environment\n===========================\n\n``nodeenv`` (node.js virtual environment) is a tool to create \nisolated node.js environments.\n\nIt creates an environment that has its own installation directories, \nthat doesn't share libraries with other node.js virtual environments.\n\nAlso the new environment can be integrated with the environment which was built\nby virtualenv_ (python).\n\nIf you use nodeenv feel free to add your project on wiki: `Who-Uses-Nodeenv`_.\n\n.. _Who-Uses-Nodeenv: https://github.com/ekalinin/nodeenv/wiki/Who-Uses-Nodeenv\n\n.. image:: https://travis-ci.org/ekalinin/nodeenv.svg?branch=master\n    :target: https://travis-ci.org/ekalinin/nodeenv\n\n.. contents:: :local:\n\n\nInstall\n-------\n\nGlobal installation\n^^^^^^^^^^^^^^^^^^^\n\nYou can install nodeenv globally with `easy_install`_::\n\n    $ sudo easy_install nodeenv\n\nor with `pip`_::\n\n    $ sudo pip install nodeenv\n\nor on Debian using `dpkg`_::\n\n    $ ln -s debian-upstream debian\n    $ dpkg-buildpackage -uc -us -b\n    $ sudo dpkg -i $(ls -1rt ../nodeenv_*.deb | tail -n1)\n\n.. _dpkg: https://www.debian.org/doc/manuals/debian-faq/ch-pkgtools.en.html\n\nLocal installation\n^^^^^^^^^^^^^^^^^^\n\nIf you're using virtualenv_ then you can install nodeenv via\npip_/easy_install_ inside any virtual environment built with virtualenv::\n\n    $ virtualenv env\n    $ . env/bin/activate\n    (env) $ pip install nodeenv\n    (env) $ nodeenv --version\n    0.6.5\n\nIf you want to work with the latest version of the nodeenv you can \ninstall it from the github `repository`_::\n\n    $ git clone https://github.com/ekalinin/nodeenv.git\n    $ ./nodeenv/nodeenv.py --help\n\nor with `pip`_::\n\n    $ pip install -e git+https://github.com/ekalinin/nodeenv.git#egg=nodeenv\n\n.. _repository: https://github.com/ekalinin/nodeenv\n.. _pip: http://pypi.python.org/pypi/pip\n.. _easy_install: http://pypi.python.org/pypi/setuptools\n\n\nDependency\n----------\n\nFor nodeenv\n^^^^^^^^^^^\n\n* python (2.6+, 3.5+, or pypy)\n* make\n* tail\n\nFor node.js\n^^^^^^^^^^^\n\n* libssl-dev\n\nUsage\n-----\n\nBasic\n^^^^^\n\nCreate new environment::\n\n    $ nodeenv env\n\nActivate new environment::\n\n    $ . env/bin/activate\n\nCheck versions of main packages::\n\n    (env) $ node -v\n    v0.10.26\n\n    (env) $ npm -v\n    1.4.3\n\nDeactivate environment::\n\n    (env) $ deactivate_node\n\nAdvanced\n^^^^^^^^\n\nGet available node.js versions::\n\n    $ nodeenv --list\n    0.0.1   0.0.2   0.0.3   0.0.4   0.0.5   0.0.6   0.1.0\n    0.1.2   0.1.3   0.1.4   0.1.5   0.1.6   0.1.7   0.1.8\n    0.1.10  0.1.11  0.1.12  0.1.13  0.1.14  0.1.15  0.1.16\n    0.1.18  0.1.19  0.1.20  0.1.21  0.1.22  0.1.23  0.1.24\n    0.1.26  0.1.27  0.1.28  0.1.29  0.1.30  0.1.31  0.1.32\n    0.1.90  0.1.91  0.1.92  0.1.93  0.1.94  0.1.95  0.1.96\n    0.1.98  0.1.99  0.1.100 0.1.101 0.1.102 0.1.103 0.1.104\n    0.2.1   0.2.2   0.2.3   0.2.4   0.2.5   0.2.6   0.3.0\n    0.3.2   0.3.3   0.3.4   0.3.5   0.3.6   0.3.7   0.3.8\n    0.4.1   0.4.2   0.4.3   0.4.4   0.4.5   0.4.6\n\nInstall node.js \"0.4.3\" without ssl support with 4 parallel commands \nfor compilation and npm.js \"0.3.17\"::\n\n    $ nodeenv --without-ssl --node=0.4.3 --npm=0.3.17 --with-npm --jobs=4 env-4.3\n\nInstall node.js from the source::\n\n    $ nodeenv --node=0.10.25 --source env-0.10.25\n\nInstall node.js from a mirror::\n\n    $ nodeenv --node=10.19.0 --mirror=https://npm.taobao.org/mirrors/node\n\nIt's much faster to install from the prebuilt package than Install & compile\nnode.js from source::\n\n    $ time nodeenv --node=0.10.25 --prebuilt env-0.10.25-prebuilt\n     + Install node.js (0.10.25) ... done.\n\n    real    0m6.928s\n    user    0m0.408s\n    sys     0m1.144s\n\n    $ time nodeenv --node=0.10.25 --source env-0.10.25-src\n     + Install node.js (0.10.25) ... done.\n\n    real    4m12.602s\n    user    6m34.112s\n    sys     0m30.524s\n\nCreate a new environment with the system-wide node.js::\n\n    $ nodeenv --node=system\n\nSaving the versions of all installed packages to a file::\n\n    $ . env-4.3/bin/activate\n    (env-4.3)$ npm install -g express\n    (env-4.3)$ npm install -g jade\n    (env-4.3)$ freeze ../prod-requirements.txt\n\nIf you want to list locally installed packages use ``-l`` option::\n\n    (env-4.3)$ freeze -l ../prod-requirements.txt\n\nCreate an environment from a requirements file::\n\n    $ nodeenv --requirements=../prod-requirements.txt --jobs=4 env-copy\n\nRequirements files are plain text files that contain a list of packages \nto be installed. These text files allow you to create repeatable installations.\nRequirements file example::\n\n    $ cat ../prod-requirements.txt\n    connect@1.3.0\n    express@2.2.2\n    jade@0.10.4\n    mime@1.2.1\n    npm@0.3.17\n    qs@0.0.7\n\nIf you already have the python virtualenv tool, and want to use nodeenv and\nvirtualenv in conjunction, then you should create (or activate) the python\nvirtual environment::\n\n    # in case of using virtualenv_wrapper\n    $ mkvirtualenv my_env\n\n    # in case of using virtualenv\n    $ . my_env/bin/activate\n\nand add a node virtual environment to this existing new_venv::\n\n    $ nodeenv -p\n    \nIf you need to set the path to make used to build node::\n\n\t$ nodeenv -m /usr/local/bin/gmake ENV\n\nThat's all. Now, all your node.js modules will be installed into your virtual\nenvironment::\n\n    $ workon my_env\n    $ npm install -g coffee-script\n    $ which coffee\n    /home/monty/virtualenvs/my_env/bin/coffee\n    \nCreating a virtual environment with a custom prompt:\n\n    $ nodeenv --node=12.18.2 --prompt=\"(myenv)\" nodeenv\n\nIf environment's directory already exists then you can use ``--force`` option::\n\n    $ nodeenv --requirements=requirements.txt --jobs=4 --force env\n\nIf you already have an environment and want to update packages from requirements\nfile you can use ``--update`` option::\n\n    $ . env-4.3/bin/activate\n    (env-4.3)$ nodeenv --requirements=requirements.txt --update env-4.3\n\nIf you want to call node from environment without activation then you should\nuse `shim` script::\n\n    $ ./env-4.3/bin/shim --version\n    v0.4.3\n\nConfiguration\n-------------\nYou can use the INI-style file ``~/.nodeenvrc`` to set default values for many options,\nthe keys in that file are the long command-line option names.\n\nThese are the available options and their defaults::\n\n    [nodeenv]\n    node = 'latest'\n    npm = 'latest'\n    with_npm = False\n    jobs = '2'\n    without_ssl = False\n    debug = False\n    profile = False\n    make = 'make'\n    prebuilt = True\n    ignore_ssl_certs = False\n    mirror = None\n\nAlternatives\n------------\n\nThere are several alternatives that create isolated environments:\n\n* `nave <https://github.com/isaacs/nave>`_ - Virtual Environments for Node.\n  Nave stores all environments in one directory ``~/.nave``. Can create\n  per node version environments using `nave use envname versionname`.\n  Can not pass additional arguments into configure (for example --without-ssl)\n  Can't run on windows because it relies on bash.\n\n* `nvm <https://github.com/creationix/nvm/blob/master/nvm.sh>`_ - Node Version\n  Manager. It is necessarily to do `nvm sync` for caching available node.js\n  version.\n  Can not pass additional arguments into configure (for example --without-ssl)\n\n* virtualenv_ - Virtual Python Environment builder. For python only.\n\n.. _`virtualenv`: https://github.com/pypa/virtualenv\n\nLICENSE\n=======\n\nBSD / `LICENSE <https://github.com/ekalinin/nodeenv/blob/master/LICENSE>`_"
}
