{
  "name": "condure",
  "full_name": "condure",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "HTTP/WebSocket connection manager",
  "license": "Apache-2.0",
  "homepage": "https://github.com/fanout/condure",
  "versions": {
    "stable": "1.10.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/fanout/condure/archive/1.10.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "abe4d83ae2494a8eabd036f6f455fb4d8ebc71b29d8d50a0b35a7a59f8e0ea60"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/condure/blobs/sha256:7cbf1b4f07f0fa4abf5253d02beb7445118f5b9fd6dd765c3cd802f53a6141d3",
          "sha256": "7cbf1b4f07f0fa4abf5253d02beb7445118f5b9fd6dd765c3cd802f53a6141d3"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/condure/blobs/sha256:3ff53263a687653623e67c2bbc2d8cfaac6dd39ecfa66aa5b575299f753fd3b9",
          "sha256": "3ff53263a687653623e67c2bbc2d8cfaac6dd39ecfa66aa5b575299f753fd3b9"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/condure/blobs/sha256:9e21d650e79b5f518e5d56456a9d8f44fe4d9a05e19aa7d95f998cbff1e91d43",
          "sha256": "9e21d650e79b5f518e5d56456a9d8f44fe4d9a05e19aa7d95f998cbff1e91d43"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/condure/blobs/sha256:edc995c5d6f9c12116e79642aa8c24e1e6d1c407a58caa16efa2f76b7f0b3efc",
          "sha256": "edc995c5d6f9c12116e79642aa8c24e1e6d1c407a58caa16efa2f76b7f0b3efc"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/condure/blobs/sha256:2522ab36941f43986b4428cc8bbb8656d579ba236fbde045541fecaf3307d395",
          "sha256": "2522ab36941f43986b4428cc8bbb8656d579ba236fbde045541fecaf3307d395"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/condure/blobs/sha256:f734cdba37663a940a6de71bc6be83796672ecbcfa9bdd9ee6f310d90498c121",
          "sha256": "f734cdba37663a940a6de71bc6be83796672ecbcfa9bdd9ee6f310d90498c121"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/condure/blobs/sha256:d79ea18827bcdbb96cba73940736977c56af5895db6db9af0f318ad76a58321e",
          "sha256": "d79ea18827bcdbb96cba73940736977c56af5895db6db9af0f318ad76a58321e"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "pkg-config",
    "rust"
  ],
  "dependencies": [
    "openssl@3",
    "zeromq"
  ],
  "test_dependencies": [
    "python@3.11"
  ],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/condure.rb",
  "ruby_source_checksum": {
    "sha256": "7dfaa4ef4fb12af1c46308eedf0b9a18ef6509d3c8d49f466c685eeb282e68b7"
  },
  "date_added": "2020-11-08T16:11:37+00:00",
  "readme": "# Condure\n\nCondure is a service that manages network connections in order to allow controlling the connections from multiple processes. It can manage incoming connections as well as outgoing connections. Applications communicate with Condure over [ZeroMQ](https://zeromq.org/).\n\nCondure can only manage connections for protocols it knows about. Currently this is HTTP/1 and WebSockets. See [Supported protocols](#supported-protocols).\n\nThe project was inspired by [Mongrel2](https://mongrel2.org/).\n\n## Use cases\n\n* Pass connection ownership from one process to another.\n* Restart an application without its connections getting disconnected.\n* Balance connection ownership among multiple processes.\n\n## Basic usage\n\nStart the server:\n\n```\n$ condure --listen 8000 --zclient-stream ipc://client\n```\n\nConnect a handler to it, such as this simple Python program:\n\n```py\n# this handler responds to every request with \"hello world\"\n\nimport os\nimport time\nimport tnetstring\nimport zmq\n\ninstance_id = 'basichandler.{}'.format(os.getpid()).encode()\n\nctx = zmq.Context()\nin_sock = ctx.socket(zmq.PULL)\nin_sock.connect('ipc://client-out')\nout_sock = ctx.socket(zmq.PUB)\nout_sock.connect('ipc://client-in')\n\n# await subscription\ntime.sleep(0.01)\n\nwhile True:\n    m_raw = in_sock.recv()\n    req = tnetstring.loads(m_raw[1:])\n    print('IN {}'.format(req))\n\n    resp = {}\n    resp[b'from'] = instance_id\n    resp[b'id'] = req[b'id']\n    resp[b'code'] = 200\n    resp[b'reason'] = b'OK'\n    resp[b'headers'] = [[b'Content-Type', b'text/plain']]\n    resp[b'body'] = b'hello world\\n'\n\n    print('OUT {}'.format(resp))\n    out_sock.send(req[b'from'] + b' T' + tnetstring.dumps(resp))\n```\n\nA client request:\n\n```\n$ curl -i http://localhost:8000\nHTTP/1.1 200 OK\nContent-Type: text/plain\nContent-Length: 12\n\nhello world\n```\n\nThe process that receives the request doesn't need to be the same one that responds! For example, here's a program that outputs request IDs to stdout:\n\n```py\n# this handler just outputs the request ID\n\nimport tnetstring\nimport zmq\n\nctx = zmq.Context()\nsock = ctx.socket(zmq.PULL)\nsock.connect('ipc://client-out')\n\nwhile True:\n    m = sock.recv_multipart()\n    req = tnetstring.loads(m[0][1:])\n    print('{} {}'.format(req[b'from'].decode(), req[b'id'].decode()))\n```\n\nWe can see request ID information when a client request is made:\n\n```\n$ python examples/printreq.py\ncondure 0-0-0\n```\n\nFrom another shell we can respond using a program like this:\n\n```py\n# this program sends a response to a certain request ID\n\nimport sys\nimport time\nimport tnetstring\nimport zmq\n\nbody = sys.argv[1]\naddr = sys.argv[2].encode()\nrid = sys.argv[3].encode()\n\nctx = zmq.Context()\nsock = ctx.socket(zmq.PUB)\nsock.connect('ipc://client-in')\n\n# await subscription\ntime.sleep(0.01)\n\nresp = {}\nresp[b'from'] = b'sendresp'\nresp[b'id'] = rid\nresp[b'code'] = 200\nresp[b'reason'] = b'OK'\nresp[b'headers'] = [[b'Content-Type', b'text/plain']]\nresp[b'body'] = '{}\\n'.format(body).encode()\n\nm = [addr + b' T' + tnetstring.dumps(resp)]\n\nsock.send_multipart(m)\n```\n\nFor example:\n\n```\n$ python examples/sendresp.py \"responding from another process\" condure 0-0-0\n```\n\nThe client sees:\n\n```\n$ curl -i http://localhost:8000\nHTTP/1.1 200 OK\nContent-Type: text/plain\nContent-Length: 32\n\nresponding from another process\n```\n\nFor easy testing, the programs can be piped together:\n\n```\n$ python -u examples/printreq.py | xargs -n 2 python examples/sendresp.py \"responding from another process\"\n```\n\n## Suspending and resuming connections\n\nWhen passing control of a connection from one process to another, it is important to suspend the connection first. This is done by sending a `handoff-start` message and waiting for a `handoff-proceed` message. At that point, the connection information can be given to another process, and the connection can be resumed by sending any message (such as `keep-alive`). See the [ZHTTP spec](https://rfc.zeromq.org/spec/33/).\n\n## REQ mode\n\nIn addition to the stream mode which uses PUSH/ROUTER/SUB sockets, there is a \"REQ\" mode available which uses a DEALER socket. To enable it, set `req` as the mode on a listen port. This mode can be handy for implementing simple request/response servers using ZeroMQ.\n\n## Supported protocols\n\nCondure supports HTTP/1 and WebSockets.\n\nCondure manages connections at layer 7 and only supports protocols it knows about. This is to simplify its usage. Handling arbitrary protocols would require applications to build protocol stacks capable of suspending/resuming sessions at arbitrary byte positions in TCP streams, making Condure usage prohibitive. Instead, Condure is protocol-aware, and provides parsed frames to applications, so that applications are only required to support suspending/resuming sessions at frame boundaries.\n\n## Performance\n\nCondure was built for high performance. It uses numerous optimization techniques, including minimal heap allocations, ring buffers, vectored I/O, hierarchical timing wheels, and fast data structures (e.g. slabs). Over 1M concurrent connections have been tested on a single instance using just 2 workers (4 threads total). See https://blog.fanout.io/2020/08/11/rewriting-pushpins-connection-manager-in-rust/\n\n## Comparison to Mongrel2\n\n* Condure supports acting as a server and as a client.\n* Condure supports multiple cores.\n* Condure supports listening on multiple ports without requiring multiple processes.\n* Condure does not support multiple routes and is not intended to be a shared server. Each application that wants to keep connections in a separate process should spawn its own Condure instance.\n* Condure has no config file. Configuration is supplied using command line arguments.\n* Condure uses a different ZeroMQ-based protocol, [ZHTTP](https://rfc.zeromq.org/spec/33/), which is easier to use than Mongrel2's protocol and more reliable.\n\n## Future plans\n\n* HTTP/2\n* HTTP/3"
}
