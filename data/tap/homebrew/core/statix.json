{
  "name": "statix",
  "full_name": "statix",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Lints and suggestions for the nix programming language",
  "license": "MIT",
  "homepage": "https://github.com/nerdypepper/statix",
  "versions": {
    "stable": "0.5.6",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/nerdypepper/statix/archive/v0.5.6.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "ed4e05c96541372d917691797674bacc1759d6a1c2d621fef5db650dfa34aea7"
    },
    "head": {
      "url": "https://github.com/nerdypepper/statix.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/statix/blobs/sha256:127c64e525f291f13a753e93484cc6261f5cf08fe8e631aaaf9bbd0c07dd80d5",
          "sha256": "127c64e525f291f13a753e93484cc6261f5cf08fe8e631aaaf9bbd0c07dd80d5"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/statix/blobs/sha256:a341c31ecd2a97b20d383a6a06761ee8902977d660da697cdfbf16d18587fcc6",
          "sha256": "a341c31ecd2a97b20d383a6a06761ee8902977d660da697cdfbf16d18587fcc6"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/statix/blobs/sha256:027921b88c04e2246da514fe0393e84bb82f0c077fcb3116a0f2ee58e169a969",
          "sha256": "027921b88c04e2246da514fe0393e84bb82f0c077fcb3116a0f2ee58e169a969"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/statix/blobs/sha256:371ca555c23fcf6e2851cd3a3fba46dab6dac0be4cc7d228a13d2f705fbfa0cc",
          "sha256": "371ca555c23fcf6e2851cd3a3fba46dab6dac0be4cc7d228a13d2f705fbfa0cc"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/statix/blobs/sha256:c9bec9a03e1fdd1d7b2806cd8d84db05950a22aec908cfab67314430134925dc",
          "sha256": "c9bec9a03e1fdd1d7b2806cd8d84db05950a22aec908cfab67314430134925dc"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/statix/blobs/sha256:1a677e57aba3eae126b72090291c2e4ee96a6b3cb8403ed66b04eadf6b3a7cac",
          "sha256": "1a677e57aba3eae126b72090291c2e4ee96a6b3cb8403ed66b04eadf6b3a7cac"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/statix/blobs/sha256:f92e2af8ddd288908aaaebb1016fa5156132d0c3c6c20b8e432c1302fde03e8b",
          "sha256": "f92e2af8ddd288908aaaebb1016fa5156132d0c3c6c20b8e432c1302fde03e8b"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/statix/blobs/sha256:7aa6f1785699aaaa668f5c389ac5866f717c6a3ab0f2d40961259dc6eda92790",
          "sha256": "7aa6f1785699aaaa668f5c389ac5866f717c6a3ab0f2d40961259dc6eda92790"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/statix.rb",
  "ruby_source_checksum": {
    "sha256": "f8bbe98bfbfd5d624be15276abb576bcdb1463ed409407f6626bbb2ed422c853"
  },
  "date_added": "2021-12-14T04:15:29+00:00",
  "readme": "# statix\n\n> Lints and suggestions for the Nix programming language.\n\n`statix check` highlights antipatterns in Nix code. `statix\nfix` can fix several such occurrences.\n\nFor the time-being, `statix` works only with ASTs\nproduced by the `rnix-parser` crate and does not evaluate\nany nix code (imports, attr sets etc.).\n\n## Examples\n\n```shell\n$ statix check tests/c.nix\n[W04] Warning: Assignment instead of inherit from\n   ╭─[tests/c.nix:2:3]\n   │\n 2 │   mtl = pkgs.haskellPackages.mtl;\n   ·   ───────────────┬───────────────\n   ·                  ╰───────────────── This assignment is better written with inherit\n───╯\n\n$ statix fix --dry-run tests/c.nix\n--- tests/c.nix\n+++ tests/c.nix [fixed]\n@@ -1,6 +1,6 @@\n let\n-  mtl = pkgs.haskellPackages.mtl;\n+  inherit (pkgs.haskellPackages) mtl;\n in\n null\n```\n\n## Installation\n\n`statix` is available via a nix flake:\n\n```shell\n# build from source\nnix build git+https://git.peppe.rs/languages/statix\n./result/bin/statix --help\n\n# statix also provides a flake app\nnix run git+https://git.peppe.rs/languages/statix -- --help\n\n# save time on builds using cachix\ncachix use statix\n```\n\nInstall from nixpkgs:\n\n```shell\nnix run nixpkgs#statix -- help\n```\n\nInstall with [brew/linuxbrew](https://brew.sh)\n\n```bash\nbrew install statix\n```\n\n## Usage\n\nBasic usage is as simple as:\n\n```shell\n# recursively finds nix files and raises lints\nstatix check /path/to/dir\n\n# ignore generated files, such as Cargo.nix\nstatix check /path/to/dir -i Cargo.nix\n\n# ignore more than one file\nstatix check /path/to/dir -i a.nix b.nix c.nix\n\n# ignore an entire directory\nstatix check /path/to/dir -i .direnv\n\n# statix respects your .gitignore if it exists\n# run statix in \"unrestricted\" mode, to disable that\nstatix check /path/to/dir -u\n\n# see `statix -h` for a full list of options\n```\n\nCertain lints have suggestions. Apply suggestions back to\nthe source with:\n\n```shell\nstatix fix /path/to/file\n\n# show diff, do not write to file\nstatix fix --dry-run /path/to/file\n```\n\n`statix` supports a variety of output formats; standard,\njson and errfmt:\n\n```shell\nstatix check /path/to/dir -o json   # only when compiled with --all-features\nstatix check /path/to/dir -o errfmt # singleline, easy to integrate with vim\n```\n\n### Configuration\n\nIgnore lints and fixes by creating a `statix.toml` file at\nyour project root:\n\n```\n# within statix.toml\ndisabled = [\n  \"empty_pattern\"\n]\n```\n\n`statix` automatically discovers the configuration file by\ntraversing parents of the current directory and looking for\na `statix.toml` file. Alternatively, you can pass the path\nto the `statix.toml` file on the command line with the\n`--config` flag (available on `statix check` and `statix\nfix`).\n\nThe available lints are (see `statix list` for an updated\nlist):\n\n```\nbool_comparison\nempty_let_in\nmanual_inherit\nmanual_inherit_from\nlegacy_let_syntax\ncollapsible_let_in\neta_reduction\nuseless_parens\nempty_pattern\nredundant_pattern_bind\nunquoted_uri\ndeprecated_is_null\nempty_inherit\nfaster_groupby\nfaster_zipattrswith\ndeprecated_to_path\nbool_simplification\nuseless_has_attr\n```\n\nAll lints are enabled by default. Generate a minimal config\nwith `statix dump > statix.toml`.\n\n## TODO\n\n- Resolve imports and scopes for better lints\n- Add silent flag that exits with status"
}
