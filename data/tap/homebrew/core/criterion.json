{
  "name": "criterion",
  "full_name": "criterion",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Cross-platform C and C++ unit testing framework for the 21st century",
  "license": "MIT",
  "homepage": "https://github.com/Snaipe/Criterion",
  "versions": {
    "stable": "2.4.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/Snaipe/Criterion/releases/download/v2.4.1/criterion-2.4.1.tar.xz",
      "tag": null,
      "revision": null,
      "checksum": "d0f86a8fc868e2c7b83894ad058313023176d406501a4ee8863e5357e31a80e7"
    },
    "head": {
      "url": "https://github.com/Snaipe/Criterion.git",
      "branch": "bleeding"
    }
  },
  "revision": 2,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/criterion/blobs/sha256:024f829292c95e44dcbf5d418dbab3f522de8b8817af94b9e6755922395cf10b",
          "sha256": "024f829292c95e44dcbf5d418dbab3f522de8b8817af94b9e6755922395cf10b"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/criterion/blobs/sha256:baaef6ed0a89f1dc2c23ab986b57bbe4c2b874bbf75e9ff4ecbbfe6a6fe4d3e6",
          "sha256": "baaef6ed0a89f1dc2c23ab986b57bbe4c2b874bbf75e9ff4ecbbfe6a6fe4d3e6"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/criterion/blobs/sha256:ca48903b667e7a43848fa625c6a88faad8af1253b8439a1aa74859335fcc91f2",
          "sha256": "ca48903b667e7a43848fa625c6a88faad8af1253b8439a1aa74859335fcc91f2"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/criterion/blobs/sha256:46380b7b004712fa4989d35e0f6b9564474e509a612d5e386165ad2c7457f161",
          "sha256": "46380b7b004712fa4989d35e0f6b9564474e509a612d5e386165ad2c7457f161"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/criterion/blobs/sha256:0758af431a378629d15665b337af210dfb953f81d35daf38c81b532a0c6bdcc5",
          "sha256": "0758af431a378629d15665b337af210dfb953f81d35daf38c81b532a0c6bdcc5"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/criterion/blobs/sha256:250273dc8dbe3d0b1517134e86c5d65fe6b223c93236a2e538b286d702f9ede9",
          "sha256": "250273dc8dbe3d0b1517134e86c5d65fe6b223c93236a2e538b286d702f9ede9"
        },
        "x86_64_linux": {
          "cellar": "/home/linuxbrew/.linuxbrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/criterion/blobs/sha256:4bd64030261a71a8aab068ca01edf2cdcdb9f5cbfe5dd5f63097123bed9706c5",
          "sha256": "4bd64030261a71a8aab068ca01edf2cdcdb9f5cbfe5dd5f63097123bed9706c5"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake",
    "meson",
    "ninja",
    "pkg-config"
  ],
  "dependencies": [
    "libgit2",
    "nanomsg"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "libffi"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/criterion.rb",
  "ruby_source_checksum": {
    "sha256": "f2dcc4120ce3dd55a23b76cf7303cc307e42fe4a41230e1f3651457dca96710e"
  },
  "date_added": "2022-04-05T11:14:29+00:00",
  "readme": "<h1><img src=\"doc/criterion-title.png\" height=\"96\" alt=\"Criterion Logo\" /></h1>\n\n[![Build Status](https://api.cirrus-ci.com/github/Snaipe/Criterion.svg)](https://cirrus-ci.com/github/Snaipe/Criterion)\n[![Coverage Status](https://img.shields.io/codecov/c/github/Snaipe/Criterion/bleeding.svg)](https://codecov.io/github/Snaipe/Criterion?branch=bleeding)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/Snaipe/Criterion/blob/master/LICENSE)\n[![Version](https://img.shields.io/github/release/Snaipe/Criterion.svg?label=version)](https://github.com/Snaipe/Criterion/releases/latest)\n[![Documentation (Stable)](https://img.shields.io/badge/docs-stable-green)][online-docs]\n[![Documentation (Bleeding)](https://img.shields.io/badge/docs-bleeding-orange)][online-docs-latest]\n\nA dead-simple, yet extensible, C and C++ unit testing framework.\n\n![Screencast](./doc/screencast.gif)\n\n## Philosophy\n\nMost test frameworks for C require a lot of boilerplate code to\nset up tests and test suites -- you need to create a main,\nthen register new test suites, then register the tests within\nthese suites, and finally call the right functions.\n\nThis gives the user great control, at the unfortunate cost of simplicity.\n\nCriterion follows the KISS principle, while keeping the control\nthe user would have with other frameworks:\n\n* [x] C99 and C++11 compatible.\n* [x] Tests are automatically registered when declared.\n* [x] Implements a xUnit framework structure.\n* [x] A default entry point is provided, no need to declare a main\n  unless you want to do special handling.\n* [x] Test are isolated in their own process, crashes and signals can be\n  reported and tested.\n* [x] Unified interface between C and C++: include the criterion header and it *just* works.\n* [x] Supports parameterized tests and theories.\n* [x] Progress and statistics can be followed in real time with report hooks.\n* [x] TAP output format can be enabled with an option.\n* [x] Runs on Linux, FreeBSD, macOS, and Windows (Compiling with MinGW GCC and Visual Studio 2015+).\n\n## Downloads\n\n### Packages\n\n| Platform | Command |\n| --- | --- |\n**Ubuntu** (>=21.04) / **Debian** (>=11) | `apt-get install libcriterion-dev`\n**Gentoo** | `emerge -a dev-libs/criterion`\n**Arch Linux** ([AUR][aur]) | `pacaur -S criterion`\n**macOS** | `brew install criterion`\n**Nix** | `nix-env -iA nixpkgs.criterion`\n**FreeBSD** | `pkg install criterion`\n\nIf you'd like to see Criterion included in your favorite distribution, please reach out to their package maintainers team.\n\n### Binary archives\n\nBinary releases for Linux x86\\_64 are available [on the release page](https://github.com/Snaipe/Criterion/releases).\n\nIf you have a different platform, you can still [build the library from source](http://criterion.readthedocs.org/en/latest/setup.html#installation).\n\n## Developer Resources\n\n### Documentation\n\nAn online documentation is available on [ReadTheDocs][online-docs]\n([PDF][pdf-docs] | [Zip][zip-docs] | [Epub][epub-docs])\n\n### Samples\n\nSample tests can be found in the [sample directory][samples].\n\n* [A simple test][sample-simple]\n* [Using multiple suites][sample-suites]\n* [Writing assertions][sample-asserts]\n* [Adding test fixtures][sample-fixtures]\n* [Tests with signals][sample-signal]\n* [Using report hooks][sample-report]\n\n### Getting help\n\n| Channel | Description |\n| --- | --- |\n[![Ask a question in GitHub discussions](https://img.shields.io/badge/github-Ask%20a%20question-46BC99.svg)][gh-discussions] | Ask a question in GitHub discussions\n[![Subscribe to the mailing list](https://img.shields.io/badge/ml-criterion@freelists.org-46BC99.svg)][mailing-list] | Criterion mailing list on freelists.org\n\n### Misc\n\n* [autotools skeleton for projects with criterion tests][autotools]\n* [CMake find module for Criterion][find-module]\n\n## Credits\n\nCriterion is built with the following projects:\n\n* [boxfort](https://github.com/diacritic/BoxFort)\n* [debugbreak](https://github.com/scottt/debugbreak)\n* [libffi](https://sourceware.org/libffi/)\n* [klib](http://attractivechaos.github.io/klib/)\n* [libcsptr](https://github.com/Snaipe/libcsptr)\n* [nanomsg](http://nanomsg.org/)\n* [nanopb](http://koti.kapsi.fi/jpa/nanopb/)\n\nLogo made by [Paul Bouigue](http://www.cargocollective.com/pbouigue).\n\n[online-docs]: http://criterion.readthedocs.org/\n[online-docs-latest]: http://criterion.readthedocs.org/en/latest\n[pdf-docs]: http://readthedocs.org/projects/criterion/downloads/pdf/latest/\n[zip-docs]: http://readthedocs.org/projects/criterion/downloads/htmlzip/latest/\n[epub-docs]: http://readthedocs.org/projects/criterion/downloads/epub/latest/\n\n[samples]: ./samples/\n[sample-simple]: ./samples/simple.c\n[sample-suites]: ./samples/suites.c\n[sample-asserts]: ./samples/asserts.c\n[sample-fixtures]: ./samples/fixtures.c\n[sample-signal]: ./samples/signal.c\n[sample-report]: ./samples/report.c\n\n[autotools]: ./dev/autotools\n[find-module]: ./dev/FindCriterion.cmake\n\n[aur]: https://aur.archlinux.org/packages/criterion/\n\n[mailing-list]: http://www.freelists.org/list/criterion\n[gh-discussions]: https://github.com/Snaipe/Criterion/discussions/new?category=q-a"
}
