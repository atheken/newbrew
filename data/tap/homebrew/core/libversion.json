{
  "name": "libversion",
  "full_name": "libversion",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Advanced version string comparison library",
  "license": "MIT",
  "homepage": "https://github.com/repology/libversion",
  "versions": {
    "stable": "3.0.3",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/repology/libversion/archive/refs/tags/3.0.3.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "bb49d745a0c8e692007af6d928046d1ab6b9189f8dbba834cdf3c1d251c94a1d"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libversion/blobs/sha256:678f93db1e9a2a5eea319f8e617ca98649f699c49753e53b463ad0c53c4ca6d2",
          "sha256": "678f93db1e9a2a5eea319f8e617ca98649f699c49753e53b463ad0c53c4ca6d2"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libversion/blobs/sha256:a1c1177a83175a7084eb350560728ec8d9b98985a7e0a17f9df29e2149da71d0",
          "sha256": "a1c1177a83175a7084eb350560728ec8d9b98985a7e0a17f9df29e2149da71d0"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libversion/blobs/sha256:f02d597938633f6b90e8096fb643e222f45d3d7091705b2292d2cd57eb975c9c",
          "sha256": "f02d597938633f6b90e8096fb643e222f45d3d7091705b2292d2cd57eb975c9c"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libversion/blobs/sha256:55214b46e71ca86a53fced6ec189f5d5d88f1683534578816562c0ea59b23f65",
          "sha256": "55214b46e71ca86a53fced6ec189f5d5d88f1683534578816562c0ea59b23f65"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libversion/blobs/sha256:f4f9d55d39e551756a77055b77108b65f2aea9bc2d8f3bb0eaa13b3f6023c142",
          "sha256": "f4f9d55d39e551756a77055b77108b65f2aea9bc2d8f3bb0eaa13b3f6023c142"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libversion/blobs/sha256:3b8a9af1caeeba055c351dd7b39fec1cc2adc3e7dd125c63bebcbc06c3cce9f1",
          "sha256": "3b8a9af1caeeba055c351dd7b39fec1cc2adc3e7dd125c63bebcbc06c3cce9f1"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/libversion/blobs/sha256:244074a47f2d78925338b7e54defef0b35a250c50e4cd0ae4247c5c659a7c87f",
          "sha256": "244074a47f2d78925338b7e54defef0b35a250c50e4cd0ae4247c5c659a7c87f"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/libversion.rb",
  "ruby_source_checksum": {
    "sha256": "6adcbc1bc0c13105f4211b804d09727147512e9c899a1c2a96ba05acd65b6fe0"
  },
  "date_added": "2023-07-05T01:31:15+01:00",
  "readme": "# libversion\n\n<a href=\"https://repology.org/metapackage/libversion/versions\">\n\t<img src=\"https://repology.org/badge/vertical-allrepos/libversion.svg\" alt=\"libversion packaging status\" align=\"right\">\n</a>\n\n![CI](https://github.com/repology/libversion/workflows/CI/badge.svg)\n[![Coverage Status](https://coveralls.io/repos/github/repology/libversion/badge.svg?branch=master)](https://coveralls.io/github/repology/libversion?branch=master)\n[![Github commits (since latest release)](https://img.shields.io/github/commits-since/repology/libversion/latest.svg)](https://github.com/repology/libversion)\n\nAdvanced version string comparison library.\n\nNeed to compare software, package or whatever versions? Comparing\n`1.0` and `1.1` could be easy, but are you ready for more\ncomplex cases like `1.2-x.3~alpha4`? **libversion** is, which\nis proven by using the library in [Repology](https://repology.org/)\nproject which relies on comparing software version strings, even\nif they are written in different formats.\n\n## Features\n\nA short list of version features libversion handles for you:\n\n* Simple versions, obviously: `0.9 < 1.0 < 1.1`\n* Omitting insignificant components: `1.0 == 1.0.0`\n* Leading zeroes: `1.001 == 1.1`\n* Unusual separators: `1_2~3 == 1.2.3`\n* Letter suffixes: `1.2 < 1.2a < 1.2b < 1.3`\n* Alphanumeric prerelease components:\n  * `1.0alpha1 == 1.0.alpha1 == 1.0a1 == 1.0.a1`\n  * `1.0alpha1 < 1.0alpha2 < 1.0beta1 < 1.0rc1 < 1.0`\n* Awareness of prerelease keywords: while `1.0 < 1.0a-1` (_a_ treated\n  as version addendum), but `1.0alpha-1 < 1.0` (_alpha_ is treated\n  as prerelease marker)\n* Awareness of _patch_, _post_ and _pl_ keywords: while `1.0alpha1 < 1.0`\n  (_alpha_ is pre-release), but `1.0 < 1.0patch1 < 1.1` (_patch_ is post-release)\n* Customizable handling of _p_ keyword (it may mean either _patch_ or _pre_,\n  and since libversion cannot guess, this is controlled with an external flag)\n\nSee [doc/ALGORITHM.md](doc/ALGORITHM.md) for more elaborate description\nof inner logic.\n\n## API\n\n### Version comparison\n\n```\nint version_compare2(const char* v1, const char* v2);\nint version_compare4(const char* v1, const char* v2, int v1_flags, int v2_flags);\n```\n\nCompares version strings `v1` and `v2`.\n\nReturns **-1** if `v1` is lower than `v2`, **0** if `v1` is equal to `v2` and **1** if `v1` is higher than `v2`.\n\nThread safe, does not produce errors, does not allocate dynamic memory,\nO(N) computational complexity, O(1) stack memory requirements.\n\n4-argument form allows specifying flags for each version argument to\ntune comparison behavior in specific cases. Currently supported `flags`\nvalues are:\n\n* `VERSIONFLAG_P_IS_PATCH` _p_ letter is treated as _patch_\n  (post-release) instead of _pre_ (pre-release).\n* `VERSIONFLAG_ANY_IS_PATCH` any letter sequence is treated as\n  post-release (useful for handling patchsets as in\n  `1.2foopatchset3.barpatchset4`).\n* `VERSIONFLAG_LOWER_BOUND` derive lowest possible version with\n  the given prefix. For example, lower bound for `1.0` is such\n  imaginary version `?` that it's higher than any release before\n  `1.0` and lower than any prerelease of `1.0`.\n  E.g. `0.999` < lower bound(`1.0`) < `1.0alpha0`.\n* `VERSIONFLAG_UPPER_BOUND` derive highest possible version with\n  the given prefix. Opposite of `VERSIONFLAG_LOWER_BOUND`.\n\nIf both `flags` are zero, `version_compare4` acts exactly the same\nas `version_compare2`.\n\n## Example\n\n```c\n#include <assert.h>\n#include <libversion/version.h>\n\nint main() {\n    /* 0.99 < 1.11 */\n    assert(version_compare2(\"0.99\", \"1.11\") == -1);\n\n    /* 1.0 == 1.0.0 */\n    assert(version_compare2(\"1.0\", \"1.0.0\") == 0);\n\n    /* 1.0alpha1 < 1.0.rc1 */\n    assert(version_compare2(\"1.0alpha1\", \"1.0.rc1\") == -1);\n\n    /* 1.0 > 1.0.rc1 */\n    assert(version_compare2(\"1.0\", \"1.0-rc1\") == 1);\n\n    /* 1.2.3alpha4 is the same as 1.2.3~a4 */\n    assert(version_compare2(\"1.2.3alpha4\", \"1.2.3~a4\") == 0);\n\n    /* by default, `p' is treated as `pre'... */\n    assert(version_compare2(\"1.0p1\", \"1.0pre1\") == 0);\n    assert(version_compare2(\"1.0p1\", \"1.0post1\") == -1);\n    assert(version_compare2(\"1.0p1\", \"1.0patch1\") == -1);\n\n    /* ...but this is tunable: here it's handled as `patch` */\n    assert(version_compare4(\"1.0p1\", \"1.0pre1\", VERSIONFLAG_P_IS_PATCH, 0) == 1);\n    assert(version_compare4(\"1.0p1\", \"1.0post1\", VERSIONFLAG_P_IS_PATCH, 0) == 0);\n    assert(version_compare4(\"1.0p1\", \"1.0patch1\", VERSIONFLAG_P_IS_PATCH, 0) == 0);\n\n    /* a way to check that the version belongs to a given release */\n    assert(\n        version_compare4(\"1.0alpha1\", \"1.0\", 0, VERSIONFLAG_LOWER_BOUND) == 1) &&\n        version_compare4(\"1.0alpha1\", \"1.0\", 0, VERSIONFLAG_UPPER_BOUND) == -1) &&\n        version_compare4(\"1.0.1\", \"1.0\", 0, VERSIONFLAG_LOWER_BOUND) == 1) &&\n        version_compare4(\"1.0.1\", \"1.0\", 0, VERSIONFLAG_UPPER_BOUND) == -1) &&\n        /* 1.0alpha1 and 1.0.1 belong to 1.0 release, e.g. they lie between\n           (lowest possible version in 1.0) and (highest possible version in 1.0) */\n    );\n}\n```\n\n```sh\ngcc my_code.c `pkg-config --cflags --libs libversion`\n# or (for static linking)\ngcc my_code.c --static `pkg-config --static --cflags --libs libversion`\n```\n\nUsing libversion in CMake is very simple (note that this handles\ninclude paths and compiler flags as well):\n\n```cmake\nfind_package(libversion)\ntarget_link_libraries(my_target libversion::libversion)\n# or (for static linking)\ntarget_link_libraries(my_target libversion::libversion_static)\n```\n\n## Building\n\nlibversion uses [CMake](https://cmake.org/) build system.\n\nTo build the library, run `cmake . && cmake --build .`.\n\nTo run test suite, run `ctest` after building.\n\nTo install the library systemwide, run `make install`.\n\nThe project installs library, headers, pkg-config file, CMake import\nfiles and a demo utility, `version_compare`, which may be used to\ncompare versions from command line:\n\n```\n$ ./version_compare\nUsage: ./version_compare version1 version2\n$ ./version_compare 0.99 1.0\n<\n```\n\n## Bindings\n\n* Python: [py-libversion](https://github.com/repology/py-libversion) by @AMDmi3\n* Go: [golibversion](https://github.com/saenai255/golibversion) by @saenai255\n\n## Author\n\n* [Dmitry Marakasov](https://github.com/AMDmi3) <amdmi3@amdmi3.ru>\n\n## License\n\n[MIT](COPYING)"
}
