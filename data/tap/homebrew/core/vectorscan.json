{
  "name": "vectorscan",
  "full_name": "vectorscan",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "High-performance regular expression matching library",
  "license": "BSD-3-Clause",
  "homepage": "https://github.com/VectorCamp/vectorscan",
  "versions": {
    "stable": "5.4.9",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/VectorCamp/vectorscan/archive/refs/tags/vectorscan/5.4.9.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "e61c78f26a9d04ccffab0df1159885c4503fc501172402c57f7357a2126ea3c6"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/vectorscan/blobs/sha256:39e6c29a222fefec22d4346eb81841962097e405b6077cf696f8890aab155cf0",
          "sha256": "39e6c29a222fefec22d4346eb81841962097e405b6077cf696f8890aab155cf0"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/vectorscan/blobs/sha256:432f5c87edd6de377363fb8348fde42ceefa5c36eea781509bb070a06dccb4ac",
          "sha256": "432f5c87edd6de377363fb8348fde42ceefa5c36eea781509bb070a06dccb4ac"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/vectorscan/blobs/sha256:5c67d4a31c7253e9bd6b23df0bfa74a31eb527b9410d274fea1da8c4d07afdc0",
          "sha256": "5c67d4a31c7253e9bd6b23df0bfa74a31eb527b9410d274fea1da8c4d07afdc0"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "boost",
    "cmake",
    "pcre",
    "pkg-config",
    "ragel"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [
    {
      "name": "arch",
      "cask": null,
      "download": null,
      "version": "arm64",
      "contexts": [],
      "specs": [
        "stable"
      ]
    }
  ],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/vectorscan.rb",
  "ruby_source_checksum": {
    "sha256": "ae7d46cb717bef1a5705cdc79f3dc6af633c6678a5ff97a590182d4a38e94d40"
  },
  "date_added": "2022-06-24T15:13:37+00:00",
  "readme": "# Vectorscan?\n\nA fork of Intel's Hyperscan, modified to run on more platforms. Currently ARM NEON/ASIMD\nis 100% functional, and Power VSX are in development. ARM SVE2 will be implemented when\nharwdare becomes accessible to the developers. More platforms will follow in the future,\non demand/request.\n\nVectorscan will follow Intel's API and internal algorithms where possible, but will not\nhesitate to make code changes where it is thought of giving better performance or better\nportability. In addition, the code will be gradually simplified and made more uniform and\nall architecture specific -currently Intel- #ifdefs will be removed and abstracted away.\n\n# Why the fork?\n\nOriginally, the ARM porting was supposed to be merged into Intel's own Hyperscan, and 2 \nPull Requests had been made to the project for this reason ([1], [2]). Unfortunately, the\nPRs were rejected for now and the forseeable future, thus we have created Vectorscan for \nour own multi-architectural and opensource collaborative needs.\n\n# What is Hyperscan?\n\nHyperscan is a high-performance multiple regex matching library. It follows the\nregular expression syntax of the commonly-used libpcre library, but is a\nstandalone library with its own C API.\n\nHyperscan uses hybrid automata techniques to allow simultaneous matching of\nlarge numbers (up to tens of thousands) of regular expressions and for the\nmatching of regular expressions across streams of data.\n\nVectorscan is typically used in a DPI library stack, just like Hyperscan.\n\n# Cross Compiling for AArch64\n\n- To cross compile for AArch64, first adjust the variables set in cmake/setenv-arm64-cross.sh.\n  - `export CROSS=<arm-cross-compiler-dir>/bin/aarch64-linux-gnu-`\n  - `export CROSS_SYS=<arm-cross-compiler-system-dir>`\n  - `export BOOST_PATH=<boost-source-dir>`\n- Set the environment variables:\n  - `source cmake/setenv-arm64-cross.sh`\n- Configure Vectorscan:\n  - `mkdir <build-dir-name>`\n  - `cd <build-dir>`\n  - `cmake -DCROSS_COMPILE_AARCH64=1 <hyperscan-source-dir> -DCMAKE_TOOLCHAIN_FILE=<hyperscan-source-dir>/cmake/arm64-cross.cmake`\n- Build Vectorscan:\n  - `make -jT` where T is the number of threads used to compile.\n  - `cmake --build . -- -j T` can also be used instead of make.\n\n# Compiling for SVE\n\nThe following cmake variables can be set in order to target Arm's Scalable\nVector Extension. They are listed in ascending order of strength, with cmake\ndetecting whether the feature is available in the compiler and falling back to\na weaker version if not. Only one of these variables needs to be set as weaker\nvariables will be implied as set.\n\n- `BUILD_SVE`\n- `BUILD_SVE2`\n- `BUILD_SVE2_BITPERM`\n\n# Documentation\n\nInformation on building the Hyperscan library and using its API is available in\nthe [Developer Reference Guide](http://intel.github.io/hyperscan/dev-reference/).\n\n# License\n\nVectorscan, like Hyperscan is licensed under the BSD License. See the LICENSE file in the\nproject repository.\n\n# Versioning\n\nThe `master` branch on Github will always contain the most recent release of\nHyperscan. Each version released to `master` goes through QA and testing before\nit is released; if you're a user, rather than a developer, this is the version\nyou should be using.\n\nFurther development towards the next release takes place on the `develop`\nbranch.\n\n# Get Involved\n\nThe official homepage for Vectorscan is at [www.github.com/VectorCamp/vectorscan](https://www.github.com/VectorCamp/vectorscan).\n\n# Original Hyperscan links\nThe official homepage for Hyperscan is at [www.hyperscan.io](https://www.hyperscan.io).\n\nIf you have questions or comments, we encourage you to [join the mailing\nlist](https://lists.01.org/mailman/listinfo/hyperscan). Bugs can be filed by\nsending email to the list, or by creating an issue on Github.\n\nIf you wish to contact the Hyperscan team at Intel directly, without posting\npublicly to the mailing list, send email to\n[hyperscan@intel.com](mailto:hyperscan@intel.com).\n\n[1]: https://github.com/intel/hyperscan/pull/272\n[2]: https://github.com/intel/hyperscan/pull/287"
}
