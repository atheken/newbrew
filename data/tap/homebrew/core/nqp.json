{
  "name": "nqp",
  "full_name": "nqp",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Lightweight Raku-like environment for virtual machines",
  "license": "Artistic-2.0",
  "homepage": "https://github.com/Raku/nqp",
  "versions": {
    "stable": "2023.06",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/Raku/nqp/releases/download/2023.06/nqp-2023.06.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "ddcb92f29180699ebaf0a7faa46ad4ac902f9c8826d7476d9c6f71176cadd7d3"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": "/opt/homebrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/nqp/blobs/sha256:6de4c501b2f9d51c26743c5e8dc277cb1d3be1bf833fd2d8edb626c7dc8b7043",
          "sha256": "6de4c501b2f9d51c26743c5e8dc277cb1d3be1bf833fd2d8edb626c7dc8b7043"
        },
        "arm64_monterey": {
          "cellar": "/opt/homebrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/nqp/blobs/sha256:4718040cae7912e40176beedddb95e865f30e979e57d08796ee1299330eb7b99",
          "sha256": "4718040cae7912e40176beedddb95e865f30e979e57d08796ee1299330eb7b99"
        },
        "arm64_big_sur": {
          "cellar": "/opt/homebrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/nqp/blobs/sha256:083187e3b032bfbf440f79586a3cc56ee13660acef3c974dfdbe7c597a0cd0ef",
          "sha256": "083187e3b032bfbf440f79586a3cc56ee13660acef3c974dfdbe7c597a0cd0ef"
        },
        "ventura": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/nqp/blobs/sha256:474ef34e4698ef872bf33a095829f77b3ce77d032bfca3c34c531313ee79e62d",
          "sha256": "474ef34e4698ef872bf33a095829f77b3ce77d032bfca3c34c531313ee79e62d"
        },
        "monterey": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/nqp/blobs/sha256:4ce6f856be4697992bee7688dfebe10a74fcb6e68d3dcc6db9e611735694f71b",
          "sha256": "4ce6f856be4697992bee7688dfebe10a74fcb6e68d3dcc6db9e611735694f71b"
        },
        "big_sur": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/nqp/blobs/sha256:c7940d2f4c989cecf2dca1a366582821fbd253c8c60ea3788602edaa90e810cc",
          "sha256": "c7940d2f4c989cecf2dca1a366582821fbd253c8c60ea3788602edaa90e810cc"
        },
        "x86_64_linux": {
          "cellar": "/home/linuxbrew/.linuxbrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/nqp/blobs/sha256:0bf1a53bd5bc89d14cd2c9f8a4841c102bbdb3c2a6d5f21e87ba6d8396a8bbd8",
          "sha256": "0bf1a53bd5bc89d14cd2c9f8a4841c102bbdb3c2a6d5f21e87ba6d8396a8bbd8"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "libtommath",
    "libuv",
    "moarvm"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    {
      "perl": "build"
    },
    "libffi"
  ],
  "uses_from_macos_bounds": [
    {},
    {}
  ],
  "requirements": [],
  "conflicts_with": [
    "rakudo-star"
  ],
  "conflicts_with_reasons": [
    "rakudo-star currently ships with nqp included"
  ],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/nqp.rb",
  "ruby_source_checksum": {
    "sha256": "f257bf9d9cc7128f9fcd3ffd71fbcf1caffc3fd86c9fc37bd8909e76276c194f"
  },
  "date_added": "2019-01-07T12:35:49+01:00",
  "readme": "=pod\n\n=head1 NQP - Not Quite Perl\n\nNQP is Copyright (C) 2009-2020 by The Perl Foundation.  See F<LICENSE>\nfor licensing details.\n\nThis is \"Not Quite Perl\" -- a lightweight Raku-like environment for\nvirtual machines.  The key feature of NQP is that it's designed to be a very\nsmall environment (as compared with, say, raku or Rakudo) and is focused on\nbeing a high-level way to create compilers and libraries for virtual\nmachines like L<MoarVM|https://github.com/MoarVM/MoarVM>, the JVM, and others.\n\nUnlike a full-fledged implementation of Raku, NQP strives to have as small\na runtime footprint as it can, while still providing a Raku object model\nand regular expression engine for the virtual machine.\n\n=head2 Building from source\n\n=for HTML <a href=\"https://dev.azure.com/Raku/nqp/_build/latest?definitionId=1&branchName=master\"><img src=\"https://dev.azure.com/Raku/nqp/_apis/build/status/Raku.nqp?branchName=master\"></a>\n\nTo build NQP from source, you'll just need a C<make> utility and C<Perl> 5.8 or\nnewer.  To automatically obtain and build MoarVM you may also need\na C<git> client.\n\nTo obtain C<NQP> directly from its repository:\n\n    $ git clone git://github.com/Raku/nqp.git\n\nIf you don't have git installed, you can get a tarball or zip of NQP from\ngithub by visiting http://github.com/Raku/nqp/tree/main and clicking\n\"Download\".  Then unpack the tarball or zip.\n\nC<NQP> can run on three different backends: C<MoarVM>, the C<JVM>, and C<JavaScript>.\nThe C<JVM> and C<JavaScript> backends are currently experimental.  The JVM backend\nrequires C<JDK 1.9> (also known as C<JDK 9>) or higher.\n\nOnce you have a copy of NQP, decide which backends you want to run,\nand configure and build it as follows:\n\n    $ cd nqp\n    $ perl Configure.pl --backends=moar,jvm\n    $ make\n\nIf you don't have an installed MoarVM, you can have\nC<Configure.pl> download and build one for you by passing the C<--gen-moar>\noption to it as well.\n\nThe C<make> step will create a C<nqp> or C<nqp.exe> executable in the current\ndirectory.  Programs can then be run from the build directory using a\ncommand like:\n\n    $ ./nqp hello.nqp\n\nBy default, NQP searches for the MoarVM executable and installs to the\ndirectory C<./install>. You can change that with the C<--prefix> option to\nConfigure.pl; this will point to the directory prefix where `moar` is installed, such as `/usr`; it needs to be the same one used when configuring MoarVM unless you use the option `--with-moar`. This optional argument should point to the directory prefix where `moar` is installed, in that case; for instance, `--with-moar=/usr/local`.\n\nOnce built, NQP's C<make install> target will install NQP and its libraries\ninto the same location as the MoarVM installation\nthat was used to create it.  Until this step is\nperformed, the C<nqp> executable created by C<make> above can only be\nreliably run from the root of NQP's build directory.  After C<make install>\nis performed the executable can be run from any directory.\n\nIf the C<NQP> compiler is invoked without an explicit script to run, it enters\na small interactive mode that allows statements to be executed from the\ncommand line.  Each line entered is treated as a separate compilation unit,\nhowever (which means that subroutines are preserved after they are defined,\nbut variables are not).\n\n=head2 Troubleshooting\n\n=head3 OS X\n\nOn OS X, it appears that configuration fails in some configurations:\n\n  3rdparty/libuv/include/uv-darwin.h:26:11: fatal error: 'mach/mach.h' file not found\n\nShould this happen to you, then a solution might be the following:\n\n    $ cd MoarVM/3rdparty/libuv/include\n    $ ln -s /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk/usr/include/mach\n    $ cd ../../../..\n    $ # run the Configure again\n\nNote that the 10.9 in the above, represents the major version of OS X being\nused.  On Mavericks use 10.9 (like above), on Yosemite use 10.10.\n\n=head3 JVM\n\nIf attempting to run NQP on the JVM results in NQP claiming it couldn't reserve\nenough memory, you may need to increase the memory limit of your shell like so:\n\n    $ ulimit -d 6144000\n\n=head2 Using NQP\n\nB<NOTE:> there's B<no end-user support> for NQP and the behaviour can\nchange without notice. It's a tool for writing Raku compilers, not a\nlow-level module for Raku programmers.\n\nThe L<examples directory|https://github.com/raku/nqp/tree/main/examples> is a good place to start, with the\nL<loops|https://github.com/raku/nqp/blob/main/examples/loops.nqp> and other files. Opcodes are listed in\nL<the docs directory|https://github.com/raku/nqp/blob/main/docs/ops.markdown>. NQP also has built-in routines\nlisted in L<the docs directory|https://github.com/raku/nqp/blob/main/docs/built-ins.md>. You can use NQP from this\nrelease, it will be already installed if you have built Raku from\nscratch.\n\n=head2 JavaScript backend\n\nThe best thing before playing with it/hacking on it is to contact pmurias via IRC at C<#raku> on L<irc.libera.chat|https://web.libera.chat/?channels=#raku>.\nWe depend on C<node.js> at least 10.10.0\n\nBuilding the JavaScript backend currently requires building the moar backend:\n\n    $ perl Configure.pl --backends=moar,js\n    $ make\n\nCurrently it needs to be run like:\n\n    $ ./nqp-js file.nqp\n\nIf you are developing C<nqp-js>, you may want to pass the C<--link> option to configure to have the C<nqp-runtime> linked instead of installed\n\n    $ cd src/vm/js/nqp-runtime; npm link .\n    $ perl Configure --backends=moar,js\n\n=cut"
}
