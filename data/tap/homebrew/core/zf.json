{
  "name": "zf",
  "full_name": "zf",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Command-line fuzzy finder that prioritizes matches on filenames",
  "license": "MIT",
  "homepage": "https://github.com/natecraddock/zf",
  "versions": {
    "stable": "0.8.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/natecraddock/zf.git",
      "tag": "0.8.0",
      "revision": "fb66faf9258ebad06ac06c8d2a597b869b72069b",
      "checksum": null
    },
    "head": {
      "url": "https://github.com/natecraddock/zf.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zf/blobs/sha256:6dbab2a5e6182fc671cbbae1d066df3b5f08c4cb40c8ebde65fe9043e5d1dcf0",
          "sha256": "6dbab2a5e6182fc671cbbae1d066df3b5f08c4cb40c8ebde65fe9043e5d1dcf0"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zf/blobs/sha256:56d5a4a874a0bd082b3455fe06a16b0d4343b770a3701b248f211c24cb1d42a5",
          "sha256": "56d5a4a874a0bd082b3455fe06a16b0d4343b770a3701b248f211c24cb1d42a5"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zf/blobs/sha256:aada6ce9c5e8d78dae76bd08d02a7aef5ca1ac22685c5fd65c29077dd7d87912",
          "sha256": "aada6ce9c5e8d78dae76bd08d02a7aef5ca1ac22685c5fd65c29077dd7d87912"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zf/blobs/sha256:1c47cd203b641575113c6ab10b33608eb3b9495ff168d5a3253eced802760a4c",
          "sha256": "1c47cd203b641575113c6ab10b33608eb3b9495ff168d5a3253eced802760a4c"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zf/blobs/sha256:63035c6f21e1b357d347d0d3d92a790d4e66028911a3ee3b78192212eaea2fdf",
          "sha256": "63035c6f21e1b357d347d0d3d92a790d4e66028911a3ee3b78192212eaea2fdf"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zf/blobs/sha256:ca285ce67e75edd1630b9db30d24ad2954a0749deda7a399114a5413a9d0bbb0",
          "sha256": "ca285ce67e75edd1630b9db30d24ad2954a0749deda7a399114a5413a9d0bbb0"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zf/blobs/sha256:0c26ef59e4187e32882b959a121453eb82b2aff3935a7f8961d642e5e027ef0a",
          "sha256": "0c26ef59e4187e32882b959a121453eb82b2aff3935a7f8961d642e5e027ef0a"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "zig"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/zf.rb",
  "ruby_source_checksum": {
    "sha256": "96b8aa86ccfc5a6bd5f98429c270a5e19bc8935b760b3ac11174027451bc6d65"
  },
  "date_added": "2022-12-11T04:06:29+00:00",
  "readme": "# zf\n\n[![shield showing current tests status](https://github.com/natecraddock/zf/actions/workflows/tests.yml/badge.svg)](https://github.com/natecraddock/zf/actions/workflows/tests.yml) [![Packaging status](https://repology.org/badge/tiny-repos/zf.svg)](https://repology.org/project/zf/versions)\n\nzf is an interactive commandline fuzzy finder that prioritizes matches on filenames. zf accepts newline separated strings on `stdin` and outputs the selected line on `stdout`. Use with a pipe, or io redirection. See the [documentation](https://github.com/natecraddock/zf/blob/master/doc/zf.md) for more details. zf is also packaged as an allocation-free library for fuzzy filtering.\n\nhttps://user-images.githubusercontent.com/7967463/225198950-a6ab568f-644f-40a1-b202-c12a35aeaed8.mp4\n\n## Features\n\n* designed for fuzzy matching file paths (but also works as a general purpose fuzzy finder)\n* refine search results with whitespace separated query terms\n* case insensitive unless the query contains uppercase letters (smartcase)\n* multiselect to output multiple selected lines\n* Zig and C libraries for the zf ranking algorithm\n\nzf aims to be simple:\n* no full-window interface\n* minimal config and options\n* sensible defaults\n\n## Docs\n\n* [Usage Documentation](https://github.com/natecraddock/zf/blob/master/doc/zf.md)\n* [Library Documentation](https://github.com/natecraddock/zf/blob/master/doc/lib.md)\n\n## Why use zf?\n\nzf was designed knowing that a frequent use case for fuzzy finders is filtering filepaths. It also works great for any arbitrary string, but it is especially good at filtering filepaths with precision.\n\nSpecifically,\n\n* Matches on filenames are prioritized over filepath matches\n* Matches on the beginning of a word are prioritized over matches in the middle of a word\n* Non-sequential character matches are penalized\n* Strict path matching offers even more precision\n\nHere are some concrete examples.\n\n### Filename priority\n\nThe query is matched first on the filename and then on the path if the filename doesn't match. This example comes from Blender's source code, and was my original inspiration for designing zf.\n\n```text\n> make\n./GNUmakefile\n./source/blender/makesdna/DNA_genfile.h\n./source/blender/makesdna/intern/dna_genfile.c\n./source/blender/makesrna/intern/rna_cachefile.c\n./source/blender/makesdna/DNA_curveprofile_types.h\n```\n\nFzf and fzy both rank `source/blender/makesdna/DNA_genfile.h` first in the results, with `GNUmakefile` 10 items down the list.\n\n### Space-separated tokens\n\nBut not every filename is unique. Sometimes there are codebases where there are many files with the same or similar names, like an `__init__.py` in Python, or `.c` and `.h` file pairs in C. In zf each space separated query term is used to narrow down the results. Imagine searching for an `__init__.py` file in a Python project.\n\n```text\n> init\n./__init__.py\n./ui/__init__.py\n./data/__init__.py\n./config/__init__.py\n```\n\nAt this point you can either move the selection down with <kdb>Down</kbd> or `c-n` to find\n`./config/__init__.py`, or you can add a new token to the query string.\n\n```text\n> init c\n./config/__init__.py\n```\n\nTreating the query string as a sequence of tokens makes filtering more\nefficient.\n\n### Strict path matching\n\nThis feature is a \"do what I mean\" feature, more easily used than explained. When the query looks like a path (contains at least one path separator) strict path matching is enabled.\n\nPath segments are the portions of a path delimited by path separators. `foo/bar` has segments `foo` and `bar`. With strict path matching the path segments of the query token must not span across path segments in the candidate. As an example, the query `foo/` would match `foo/bar/` but not `fo/obar/` because the characters `\"foo\"` must appear in a single path segment.\n\nThis is useful for narrowing down results when you know the exact path structure of your files. With the following paths\n\n```\n./app/models/foo/bar/baz.rb\n./app/models/foo/bar-baz.rb\n./app/models/foo-bar-baz.rb\n./app/monsters/dungeon/foo/bar/baz.rb\n```\n\nStrict path matching ensures that the intended path structure is found.\n\n```\n> a/m/f/b/baz\n./app/models/foo/bar/baz.rb\n```\n\nIn other fuzzy finders the string `app/monsters/dungeon/foo/bar/baz.rb` is also included in the results. Strict path matching prevents this because there is a slash between `onsters/dungeon` and nothing in the query matches the `dungeon` segment.\n\nTo end strict path matching, just add a space to start a new query token.\n\n## Installation\n\n### Arch Linux\n\nAn [AUR package](https://aur.archlinux.org/packages/zf/) is available.\n\n### macOS\n\nInstall with Homebrew\n\n```\nbrew install zf\n```\n\n### Nix\n\n```\nnix-env --install zf\n```\n\n### Binaries\n\nEach [release](https://github.com/natecraddock/zf/releases/latest) has binaries attached for macOS and Linux.\n\n### Building from source\n\nFor compatibility with system package managers, zf targets the latest stable release of Zig. The [`unstable`](https://github.com/natecraddock/zf/tree/unstable) branch is kept up to date with Zig master.\n\n```\ngit clone https://github.com/natecraddock/zf\ncd zf\nzig build -Doptimize=ReleaseSafe --summary all\n```\n\nThe executable will be created in `./zig-out/bin/zf`. For debug builds omit `-Doptimize=ReleaseSafe`.\n\n## Integrations\n\nWould you like to use zf in an editor? Try one of the following plugins\n\n* [zf.vim](https://github.com/ratfactor/zf.vim): zf integrated with vim for\n  fuzzy file finding. Similar to fzf.vim.\n* [telescope-zf-native.nvim](https://github.com/natecraddock/telescope-zf-native.nvim)\n  a neovim [telescope](https://github.com/nvim-telescope/telescope.nvim)\n  extension to override the default Lua sorter with zf.\n\n## Contributing\n\nI am open to contributions of all kinds, but be aware that I want to keep zf small and easy to maintain."
}
