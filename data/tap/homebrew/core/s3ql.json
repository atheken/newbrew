{
  "name": "s3ql",
  "full_name": "s3ql",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "POSIX-compliant FUSE filesystem using object store as block storage",
  "license": "GPL-3.0",
  "homepage": "https://github.com/s3ql/s3ql",
  "versions": {
    "stable": "3.8.1",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/s3ql/s3ql/releases/download/release-3.8.1/s3ql-3.8.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "d4731ebaacadca38a677bb18a99446c19d4f5b573628d55371f715acace11c4c"
    }
  },
  "revision": 1,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/s3ql/blobs/sha256:5a9dbc30a57887057a7898f1fe5843b3bba02936698e494c81ecaa2999161d4e",
          "sha256": "5a9dbc30a57887057a7898f1fe5843b3bba02936698e494c81ecaa2999161d4e"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "pkg-config",
    "rust"
  ],
  "dependencies": [
    "libffi",
    "libfuse",
    "openssl@3",
    "python@3.9"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [
    {
      "name": "linux",
      "cask": null,
      "download": null,
      "version": null,
      "contexts": [],
      "specs": [
        "stable"
      ]
    }
  ],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": true,
  "deprecation_date": "2022-11-07",
  "deprecation_reason": "repo_archived",
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/s3ql.rb",
  "ruby_source_checksum": {
    "sha256": "3c2c39d101ca0418904e2ddb7d4890c46720fd3db4a93609282d0cc8e57118b1"
  },
  "date_added": "2019-01-29T10:13:14+01:00",
  "readme": "..\n  NOTE: We cannot use sophisticated ReST syntax here because this\n  file is rendered by GitHub.\n\n======\n S3QL\n======\n\nS3QL is a file system that stores all its data online using storage\nservices like `Google Storage`_, `Amazon S3`_, or OpenStack_. S3QL\neffectively provides a virtual drive of dynamic, infinite capacity that\ncan be accessed from any computer with internet access.\n\nS3QL is a full featured UNIX file system that is conceptually indistinguishable from a\nlocal file system like ext4.  Furthermore, S3QL has additional features like compression\nencryption, data de-duplication, immutable trees and snapshotting which make it especially\nsuitable for online backup and archival.\n\nS3QL is designed to favor simplicity and elegance over performance and\nfeature-creep. Care has been taken to make the source code as\nreadable and serviceable as possible. Solid error detection and error\nhandling have been included from the very first line, and S3QL comes\nwith extensive automated test cases for all its components.\n\n.. _`Google Storage`: https://cloud.google.com/storage/docs\n.. _`Amazon S3`: https://aws.amazon.com/s3/\n.. _OpenStack: https://www.openstack.org/software/\n\n\nFeatures\n========\n\n* **Transparency.** Conceptually, S3QL is indistinguishable from a\n  local file system. For example, it supports hardlinks, symlinks,\n  standard unix permissions, extended attributes and file\n  sizes up to 2 TB.\n\n* **Dynamic Size.** The size of an S3QL file system grows and shrinks\n  dynamically as required.\n\n* **Compression.** Before storage, all data may be compressed with the\n  LZMA, bzip2 or deflate (gzip) algorithm.\n\n* **Encryption.** After compression (but before upload), all data can be\n  AES encrypted with a 256 bit key. An additional SHA256 HMAC checksum\n  is used to protect the data against manipulation.\n\n* **Data De-duplication.** If several files have identical contents,\n  the redundant data will be stored only once. This works across all\n  files stored in the file system, and also if only some parts of the\n  files are identical while other parts differ.\n\n* **Immutable Trees.** Directory trees can be made immutable, so that\n  their contents can no longer be changed in any way whatsoever. This\n  can be used to ensure that backups can not be modified after they\n  have been made.\n\n* **Copy-on-write snapshots.** S3QL can replicate entire directory\n  trees without using any additional storage space. Only if one of the\n  copies is modified, the part of the data that has been modified will\n  take up additional storage space. This can be used to create\n  intelligent snapshots that preserve the state of a directory at\n  different points in time using a minimum amount of space.\n\n* **Performance independent of network latency.** All operations\n  that do not write or read file contents (like creating directories\n  or moving, renaming, and changing permissions of files and\n  directories) are very fast because they are carried out without any\n  network transactions.\n\n  S3QL achieves this by saving the entire file and directory structure\n  in a database. This database is locally cached and the remote\n  copy updated asynchronously.\n\n* **Support for low bandwidth connections.** S3QL splits file contents\n  into smaller blocks and caches blocks locally. This minimizes both\n  the number of network transactions required for reading and writing\n  data, and the amount of data that has to be transferred when only\n  parts of a file are read or written.\n\n\nDevelopment Status\n==================\n\nS3QL is considered stable and suitable for production use.  Starting\nwith version 2.17.1, S3QL uses semantic versioning. This means that\nbackwards-incompatible versions (e.g., versions that require an\nupgrade of the file system revision) will be reflected in an increase\nof the major version number.\n\n\nSupported Platforms\n===================\n\nS3QL is developed and tested under Linux. Users have also reported\nrunning S3QL successfully on OS-X, FreeBSD and NetBSD. We try to\nmaintain compatibility with these systems, but (due to lack of\npre-release testers) we cannot guarantee that every release will run\non all non-Linux systems. Please report any bugs you find, and we will\ntry to fix them.\n\n\nTypical Usage\n=============\n\nBefore a file system can be mounted, the backend which will hold the\ndata has to be initialized. This is done with the *mkfs.s3ql*\ncommand. Here we are using the Amazon S3 backend, and\n*nikratio-s3ql-bucket* is the S3 bucket in which the file system will\nbe stored. ::\n\n  mkfs.s3ql s3://ap-south-1/nikratio-s3ql-bucket\n\nTo mount the S3QL file system stored in the S3 bucket\n*nikratio_s3ql_bucket* in the directory ``/mnt/s3ql``, enter::\n\n  mount.s3ql s3://ap-south-1/nikratio-s3ql-bucket /mnt/s3ql\n\nNow you can instruct your favorite backup program to run a backup into\nthe directory ``/mnt/s3ql`` and the data will be stored on Amazon\nS3. When you are done, the file system has to be unmounted with ::\n\n   umount.s3ql /mnt/s3ql\n\n\nNeed Help?\n==========\n\nThe following resources are available:\n\n* The `S3QL User's Guide`_.\n* The `S3QL Wiki`_\n* The `S3QL Mailing List`_. You\n  can subscribe by sending a mail to\n  `s3ql+subscribe@googlegroups.com <mailto:s3ql+subscribe@googlegroups.com>`_.\n\nPlease report any bugs you may encounter in the `GitHub Issue Tracker`_.\n\nContributing\n============\n\nThe S3QL source code is available on GitHub_.\n\n.. _`S3QL User's Guide`: https://www.rath.org/s3ql-docs/\n.. _`S3QL Wiki`: https://github.com/s3ql/s3ql/wiki\n.. _`S3QL Mailing List`: https://groups.google.com/g/s3ql\n.. _`GitHub Issue Tracker`: https://github.com/s3ql/s3ql/issues\n.. _GitHub: https://github.com/s3ql/s3ql"
}
