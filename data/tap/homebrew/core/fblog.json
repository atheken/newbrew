{
  "name": "fblog",
  "full_name": "fblog",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Small command-line JSON log viewer",
  "license": "WTFPL",
  "homepage": "https://github.com/brocode/fblog",
  "versions": {
    "stable": "4.4.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/brocode/fblog/archive/v4.4.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "5ac8beb5885359744f84fccd6d941d682842ed32ee0e229dc8edd2b183ce0667"
    },
    "head": {
      "url": "https://github.com/brocode/fblog.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fblog/blobs/sha256:f61f90023c951da8586b551853a48bfb36aaaadd3b170a22c4953913e79636d7",
          "sha256": "f61f90023c951da8586b551853a48bfb36aaaadd3b170a22c4953913e79636d7"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fblog/blobs/sha256:37ad4c7f2c2ca8bf8d144a1cbc3b2d6f5b55be34d5edfa4ebcc30489adad0efc",
          "sha256": "37ad4c7f2c2ca8bf8d144a1cbc3b2d6f5b55be34d5edfa4ebcc30489adad0efc"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fblog/blobs/sha256:ffa80dff8fa7ff7ec7689bdd7e4d8269438f934e242ae54faecbd11642454904",
          "sha256": "ffa80dff8fa7ff7ec7689bdd7e4d8269438f934e242ae54faecbd11642454904"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fblog/blobs/sha256:6e935e2a976816e7db40f7040b8bfe69ff11e10540e2a64bc4bbf225f3182adf",
          "sha256": "6e935e2a976816e7db40f7040b8bfe69ff11e10540e2a64bc4bbf225f3182adf"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fblog/blobs/sha256:5b27a82fa1d7189721da20d1bc4ea03e96d0f2b2cc25da60321df29ade6b9f5a",
          "sha256": "5b27a82fa1d7189721da20d1bc4ea03e96d0f2b2cc25da60321df29ade6b9f5a"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fblog/blobs/sha256:e80faa02b5aae39af9c933b981b329bfe2174e9505b2586100b2c0ad74d6b694",
          "sha256": "e80faa02b5aae39af9c933b981b329bfe2174e9505b2586100b2c0ad74d6b694"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fblog/blobs/sha256:2348344868c1773fa34bd6164b8a62f18a541a940176524a4f54662f705dbb78",
          "sha256": "2348344868c1773fa34bd6164b8a62f18a541a940176524a4f54662f705dbb78"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/fblog.rb",
  "ruby_source_checksum": {
    "sha256": "a812328aa01d28ec29ff0e90a7a4104896ec71fba572be14dda1930e82167473"
  },
  "date_added": "2020-06-12T09:05:19+00:00",
  "readme": "[[./logo/fblog_small.png]]\n\n* fblog\n\n  [[https://crates.io/crates/fblog][file:https://img.shields.io/crates/v/fblog.svg]]\n  [[https://github.com/brocode/fblog/blob/nested-values/.github/workflows/rust.yml][file:https://github.com/brocode/fblog/actions/workflows/rust.yml/badge.svg?branch=master]]\n  [[https://rawkode.chat/][file:https://img.shields.io/discord/730728064031653999.svg]]\n\n  A small tool to view json log files.\n\n  [[file:demo.png]]\n\n\n\n** Print specific fields\n\n   #+BEGIN_SRC shell-script\n   fblog -a message -a \"status > a\" sample_nested.json.log\n   #+END_SRC\n\n** Prefix Logs\n\n   If your query docker or kubectl for multiple pods it will prefix\n   the log lines: ~PODNAME | {\"message\": \"test\"}~. ~fblog~ can parse this and add it to\n   the message. Just use ~-p~.\n    \n\n** Filter\n   To filter log messages it is possible to use lua. If you are unsure\n   which variables are available you can use ~--print-lua~ to see the\n   code generated by fblog.\n\n   #+BEGIN_SRC shell-script\n   fblog -f 'level ~= \"info\"' # will print all message where the level is not info\n   fblog -f 'process == \"play\"' # will print all message where the process is play\n   fblog -f 'string.find(fu, \"bow.*\") ~= nil' # will print all messages where fu starts with bow\n   fblog -f 'process == \"play\"' # will print all message where the process is play\n   fblog -f 'process == \"rust\" and fu == \"bower\"'\n   fblog --no-implicit-filter-return-statement -f 'if 3 > 2 then return true else return false end'\n\n   # not valid lua identifiers like log.level gets converted to log_level.\n   # Every character that is not _ or a letter will be converted to _\n   fblog -d -f 'log_level == \"WARN\"' sample_elastic.log\n\n   # nested fields are converted to lua records\n   fblog  -d -f 'status.a == 100' sample_nested.json.log\n\n   # array fields are converted to lua tables (index starts with 1)\n   fblog  -d -f 'status.d[2] == \"a\"' sample_nested.json.log\n   #+END_SRC\n\n** Customize\n   ~fblog~ tries to detect the message, severity and timestamp of a log\n   entry. This behavior can be customized. See ~--help~ for more\n   information.\n\n   You can customize fblog messages:\n   Format output:\n   #+BEGIN_SRC shell-script\n   fblog -p --main-line-format \"{{#if short_message}}{{ red short_message }}{{/if}}\" sample.json.log\n   #+END_SRC\n\n   The following sanitized variables are provided by fblog:\n\n   * fblog_timestamp\n   * fblog_level\n   * fblog_message\n   * fblog_prefix\n\n   For the default formatting see ~--help~\n\n   Nested values are registered as objects. So you can use ~nested.value~ to access nested values.\n\n   handlebar helpers:\n\n   * bold\n   * yellow\n   * red\n   * blue\n   * purple\n   * green\n   * color_rgb 0 0 0\n   * uppercase\n   * level_style\n   * fixed_size 10\n\n** NO_COLOR\n   ~fblog~ disables color output if the ~NO_COLOR~ environment variable is present.\n\n   [[https://no-color.org/][no-color]]\n\n** Message placeholder substitution\n   Placeholders in the message (~fblog_message~) can be substituted with their corresponding values in a context object or array.\n   To enable substitutions, pass the ~-s~ flag or either set context key (~-c context~) or placeholder format (~-F {key}~).\n\n   Note that the placeholder format should be written like ~<PREFIX>key<SUFFIX>~, where it would match a placeholder with the key ~key~.\n   \n*** Example\n   Given the following log (referred to as ~example.log~):\n   #+BEGIN_SRC json\n   {\"message\": \"Found #{count} new items.\", \"extra_data\": {\"count\": 556}, \"level\": \"info\"}\n   #+END_SRC\n\n   Running with the following arguments:\n   #+BEGIN_SRC bash\n   fblog -c extra_data -F '#{key}' example.log\n   #+END_SRC\n\n   Result:\n   \n   [[./res/placeholder-example1.svg]]\n\n** Installation\n   #+BEGIN_SRC bash\n   cargo install fblog\n   #+END_SRC\n\n   Available in package managers: [[https://aur.archlinux.org/packages/fblog/][AUR]], [[https://formulae.brew.sh/formula/fblog][brew]]\n\n\n** Log tailing\n   ~fblog~ does not support native log tailing but this is easily achiveable.\n\n   #+BEGIN_SRC bash\n   tail -f file | fblog\n   #+END_SRC\n\n   Or with kubernetes tooling for example\n\n   #+BEGIN_SRC bash\n   kubectl logs -f ... | fblog\n   #+END_SRC\n\n   In general you can pipe any endless stream to fblog.\n\n** Discord\n   In the case you want to talk about new features or give us direct feedback,\n   you can join the [[https://rawkode.chat/][Discord]] (Thanks [[https://github.com/rawkode][@rawkode]]) in the channel ~#fblog~."
}
