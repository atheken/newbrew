{
  "name": "ktmpl",
  "full_name": "ktmpl",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Parameterized templates for Kubernetes manifests",
  "license": "MIT",
  "homepage": "https://github.com/jimmycuadra/ktmpl",
  "versions": {
    "stable": "0.9.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/jimmycuadra/ktmpl/archive/0.9.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "3377f10477775dd40e78f9b3d65c3db29ecd0553e9ce8a5bdcb8d09414c782e9"
    },
    "head": {
      "url": "https://github.com/jimmycuadra/ktmpl.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ktmpl/blobs/sha256:e549a6d1bf1f7d482349d5fcd6b592f7fe2281e2299ac0d8ecc1e8b45c3be605",
          "sha256": "e549a6d1bf1f7d482349d5fcd6b592f7fe2281e2299ac0d8ecc1e8b45c3be605"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ktmpl/blobs/sha256:1714ecf6633220ed65b1c3283862d889552d8c189500614586501f72d4a6e863",
          "sha256": "1714ecf6633220ed65b1c3283862d889552d8c189500614586501f72d4a6e863"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ktmpl/blobs/sha256:248f481ecd9cd1354cc55fe07877c6212fe2ffc3e031ea05c67ac42b621cfe5c",
          "sha256": "248f481ecd9cd1354cc55fe07877c6212fe2ffc3e031ea05c67ac42b621cfe5c"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ktmpl/blobs/sha256:8191182f4620f45a4f092d7a854b3535a4f7bd9ded1103cddafd7b80662963da",
          "sha256": "8191182f4620f45a4f092d7a854b3535a4f7bd9ded1103cddafd7b80662963da"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ktmpl/blobs/sha256:058e0b3999bd65c216e64d22e57f2fd82d4a602cf4f39ef6d84c3de5d47deb78",
          "sha256": "058e0b3999bd65c216e64d22e57f2fd82d4a602cf4f39ef6d84c3de5d47deb78"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ktmpl/blobs/sha256:8339361fc53cd0ede0a635cb1dfb808068b4615b477de71a3df35607edec9149",
          "sha256": "8339361fc53cd0ede0a635cb1dfb808068b4615b477de71a3df35607edec9149"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ktmpl/blobs/sha256:77dbcd12d216cfa5bfc3ac870046630a86e13ce9936a92c3f7a99d1a91dd3a9d",
          "sha256": "77dbcd12d216cfa5bfc3ac870046630a86e13ce9936a92c3f7a99d1a91dd3a9d"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ktmpl/blobs/sha256:ee2d87ec29cf08bcbc3c0c32d4a818f45cda4ce17ae6006e1185b1fa3cd25db1",
          "sha256": "ee2d87ec29cf08bcbc3c0c32d4a818f45cda4ce17ae6006e1185b1fa3cd25db1"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/ktmpl.rb",
  "ruby_source_checksum": {
    "sha256": "ee7f78d60e80f12c1b3cdc5f28b9b6ba641d08070fd141b286987f8db0a8f8c4"
  },
  "date_added": "2017-02-20T12:36:29+00:00",
  "readme": "# ktmpl\n\n**ktmpl** is a tool for processing [Kubernetes](http://kubernetes.io/) manifest templates.\nIt is a very simple client-side implementation of the [Templates + Parameterization proposal](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/apps/OBSOLETE_templates.md).\n\n## Synopsis\n\n```\nktmpl 0.6.0\nProduces a Kubernetes manifest from a parameterized template\n\nUSAGE:\n    ktmpl [OPTIONS] <template>\n\nFLAGS:\n    -h, --help       Prints help information\n    -V, --version    Prints version information\n\nOPTIONS:\n    -b, --base64-parameter <NAME> <VALUE>\n            Same as --parameter, but for values already encoded in Base64\n    -p, --parameter <NAME> <VALUE>\n            Supplies a value for the named parameter\n    -f, --parameter-file <PARAMETER_FILE>...\n            Path to a YAML file with parameter values\n    -s, --secret <NAME> <NAMESPACE>\n            A secret to Base64 encode after parameter interpolation\n\nARGS:\n    <template>    Path to the template file to be processed (use \"-\" to read from stdin)\n```\n\n## Usage\n\nRun `ktmpl TEMPLATE` where TEMPLATE is a path to a Kubernetes manifest template in YAML format.\nThe included [example.yml](example.yml) is a working example template.\n\nTo provide values for template parameters, use the `--parameter`, `--base64-parameter` or `--parameter-file` options.\n\nThe included `example.yml` and `params.yml` files are used in the following examples.\n\nUsing the `--parameter` option:\n\n``` bash\nktmpl example.yml --parameter MONGODB_PASSWORD secret\n```\n\nUsing the `--parameter-file` option:\n\n```\nktmpl example.yml --parameter-file params.yml\n```\n\nA parameter file must contain one or more YAML documents.\nEach document must be a YAML hash with string keys and string values, corresponding to template\nparameters and their values, respectively.\n\nIn parameter files, if the same parameter is defined more than once, the last defined value will be\nused.\nParameter values supplied via the `--parameter` option will override any that are defined via\nparameter files.\n\nTemplate parameters that have default values can be overridden with the same mechanisms:\n\n``` bash\nktmpl example.yml --parameter MONGODB_USER carl --parameter MONGODB_PASSWORD secret\n```\n\nThe processed template will be output to stdout, suitable for piping into a `kubectl` command:\n\n``` bash\nktmpl example.yml --parameter MONGODB_PASSWORD password | kubectl create -f -\n```\n\nIf a parameter's `parameterType` is `base64`, the value passed for that parameter via `--parameter` will be Base64-encoded before being inserted into the template.\nIf the value passed via `--parameter` is already Base64-encoded, and hence encoding it again would be an error, use the `--base64-parameter` option instead:\n\n``` bash\nktmpl example.yml --base64-parameter MONGODB_PASSWORD c2VjcmV0 | kubectl create -f -\n```\n\nThis can be handy when working with Kubernetes secrets, or anywhere else binary or opaque data is needed.\nValues provided via parameter files are always treated as plain strings, so the `--base64-parameter` option is required for values that are already Base64-encoded.\n\nWhen working with Kubernetes secrets with values that _contain_ a parameter as well as literal text, such as a config file with passwords in it, the `--secret` option is useful.\nFor example, using the provided [secret_example.yml](secret_example.yml) template:\n\n``` bash\nktmpl secret_example.yml --parameter PASSWORD narble --secret webapp default\n```\n\n\"webapp\" is the name of the secret and \"default\" is the namespace of the secret.\nThis will cause ktmpl to Base64 encode every value in the named secret's data hash after the normal parameter interpolation step.\nWhen using the `--secret` option, you probably don't want to use `base64` as the `parameterType` for any parameters within the secret, since the entire value will be Base64 encoded after interpolation.\nIf a Kubernetes secret named with the `--secret` option is not found in the template, ktmpl will exit with an error.\n\nIt's also possible to supply the template via stdin instead of a named file by using `-` as the filename:\n\n``` bash\ncat example.yml | ktmpl - --parameter MONGODB_PASSWORD password | kubectl create -f -\n```\n\n## Installing ktmpl\n\n### Homebrew\n\n```\nbrew install ktmpl\n```\n\n### Cargo\n\n```\ncargo install ktmpl\n```\n\n### Precompiled binary\n\n[Releases](https://github.com/jimmycuadra/ktmpl/releases)\n\n### Docker\n\n```\ndocker pull jimmycuadra/ktmpl\n```\n\n### Building from source\n\n1. Install the appropriate version of [Rust](https://www.rust-lang.org/) for your system.\n2. Run `git clone git@github.com:jimmycuadra/ktmpl.git`.\n3. Inside the freshly cloned repository, run `cargo install --path .`.\n\nMake sure Cargo's bin directory is added to your PATH environment variable.\n\n## Development\n\nTo package the current release for distribution, update `TAG` in the Makefile and then run `make`.\nRelease artifacts will be written to the `dist` directory.\nYour GPG secret key will be required to sign `sha256sums.txt`.\n\nDocker images for `jimmycuadra/ktmpl` and `jimmycuadra/ktmpl:$TAG` will be created, but you must push them manually.\n`cargo publish` must be run manually to release to crates.io.\n\n## Legal\n\nktmpl is released under the MIT license. See `LICENSE` for details."
}
