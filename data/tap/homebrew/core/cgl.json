{
  "name": "cgl",
  "full_name": "cgl",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Cut Generation Library",
  "license": "EPL-2.0",
  "homepage": "https://github.com/coin-or/Cgl",
  "versions": {
    "stable": "0.60.7",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/coin-or/Cgl/archive/releases/0.60.7.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "93b30a80b5d2880c2e72d5877c64bdeaf4d7c1928b3194ea2f88b1aa4517fb1b"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cgl/blobs/sha256:3ddd93328f7b4eb4ecfaf4dac9164827b49034a2bbbca9ac03901d87ca8dd6ce",
          "sha256": "3ddd93328f7b4eb4ecfaf4dac9164827b49034a2bbbca9ac03901d87ca8dd6ce"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cgl/blobs/sha256:44c8ab710a85a522bae175ac78395e368296cb07bde774805aab214dfb854d99",
          "sha256": "44c8ab710a85a522bae175ac78395e368296cb07bde774805aab214dfb854d99"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cgl/blobs/sha256:677dddccb79e3389d017a91a4e4da553c58868ff56185891e02d62567f4ce486",
          "sha256": "677dddccb79e3389d017a91a4e4da553c58868ff56185891e02d62567f4ce486"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cgl/blobs/sha256:642be86f74cf36155df032886103b2fa76434b8d297f36c352667c945e964c54",
          "sha256": "642be86f74cf36155df032886103b2fa76434b8d297f36c352667c945e964c54"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cgl/blobs/sha256:15e126b054f035a2de747d098d2fd4d9f2c3ff3395607784257cde9544ffb13c",
          "sha256": "15e126b054f035a2de747d098d2fd4d9f2c3ff3395607784257cde9544ffb13c"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cgl/blobs/sha256:b778532577e8b296512ed07940c17019002695c766bbce50c6271d0c0a69d8c2",
          "sha256": "b778532577e8b296512ed07940c17019002695c766bbce50c6271d0c0a69d8c2"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cgl/blobs/sha256:c164298d488e8e71948514edd97154453299a62cf2026306224e24e595297a3d",
          "sha256": "c164298d488e8e71948514edd97154453299a62cf2026306224e24e595297a3d"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "pkg-config"
  ],
  "dependencies": [
    "clp",
    "coinutils",
    "osi"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/cgl.rb",
  "ruby_source_checksum": {
    "sha256": "df9602a6b304dbc8af5af32aec1355afdf77023592e11b712da1d52a2364b1b7"
  },
  "date_added": "2020-08-11T07:25:21+00:00",
  "readme": "# Cgl\n\n[![A COIN-OR Project](https://coin-or.github.io/coin-or-badge.png)](https://www.coin-or.org)\n\nProjects such as this one are maintained by a small group of volunteers under\nthe auspices of the non-profit [COIN-OR Foundation](https://www.coin-or.org)\nand we need your help! Please consider [sponsoring our\nactivities](https://github.com/sponsors/coin-or) or [volunteering](mailto:volunteer@coin-or.org) to help!\n\n[![Latest Release](https://img.shields.io/github/v/release/coin-or/Cgl?sort=semver)](https://github.com/coin-or/Cgl/releases)\n\n_This file is auto-generated from [config.yml](.coin-or/config.yml) using the \n[generate_readme](.coin-or/generate_readme) script.\nTo make changes, please edit [config.yml](.coin-or/config.yml) or the generation scripts\n[here](.coin-or/generate_readme) and [here](https://github.com/coin-or/coinbrew/blob/master/scripts/generate_readme)._\n\nThe COIN-OR Cut Generation Library (`Cgl`) is a collection of cut generators that can be \nused with other COIN-OR packages that make use of cuts, such as, among others, the linear solver \n[Clp](https://github.com/coin-or/Clp) or the mixed integer linear programming solvers \n[Cbc](https://github.com/coin-or/Cbc) or [BCP](https://github.com/coin-or/Bcp). \n`Cgl` uses the abstract class `OsiSolverInterface` \n(see [Osi](https://github.com/coin-or/Osi)) to use or communicate with a solver.\nIt does not directly call a solver.\n\nEach cut generator is in a separate directory with its own maintainer.\nAll generators are combined in one library when `Cgl` is compiled.\n\nAvailable cut generators are: \n\n * Combinatorial cuts:\n   * [CglAllDifferent](https://github.com/coin-or/Cgl/wiki/CglAllDifferent)\n   * CglBKClique\n   * [CglClique](https://github.com/coin-or/Cgl/wiki/CglClique)\n   * [CglKnapsackCover](https://github.com/coin-or/Cgl/wiki/CglKnapsackCover)\n   * [CglOddHole](https://github.com/coin-or/Cgl/wiki/CglOddHole)\n   * CglOddWheel\n   * CglZeroHalf\n\n * Flow cover cuts:\n   * [CglFlowCover](https://github.com/coin-or/Cgl/wiki/CglFlowCover)\n\n * Gomory cuts and variants:\n   * [CglGomory](https://github.com/coin-or/Cgl/wiki/CglGomory)\n   * CglGMI\n   * [CglRedSplit](https://github.com/coin-or/Cgl/wiki/CglRedSplit)\n   * CglRedSplit2\n\n * Lift-and-project cuts:\n   * [CglLiftAndProject](https://github.com/coin-or/Cgl/wiki/CglLiftAndProject)\n   * [CglLandP](https://github.com/coin-or/Cgl/wiki/CglLandP)\n\n * Mixed integer rounding cuts and variants:\n   * [CglMixedIntegerRounding](https://github.com/coin-or/Cgl/wiki/CglMixedIntegerRounding)\n   * [CglMixedIntegerRounding2](https://github.com/coin-or/Cgl/wiki/CglMixedIntegerRounding2)\n   * [CglTwomir](https://github.com/coin-or/Cgl/wiki/CglTwomir)\n   * [CglResidualCapacity](https://github.com/coin-or/Cgl/wiki/CglResidualCapacity)\n\n * Strengthening:\n   * CglCliqueStrengthening\n   * [CglDuplicateRow](https://github.com/coin-or/Cgl/wiki/CglDuplicateRow)\n   * [CglPreprocess](https://github.com/coin-or/Cgl/wiki/CglPreprocess)\n   * [CglProbing](https://github.com/coin-or/Cgl/wiki/CglProbing)\n   * [CglSimpleRounding](https://github.com/coin-or/Cgl/wiki/CglSimpleRounding)\n\nCoinUtils is an open-source collection of classes and helper functions\nthat are generally useful to multiple COIN-OR projects.\nThese utilities include:\n * classes for storing and manipulating sparse matrices and vectors,\n * performing matrix factorization,\n * parsing input files in standard formats, e.g. MPS,\n * building representations of mathematical programs,\n * performing simple presolve operations,\n * warm starting algorithms for mathematical programs,\n * comparing floating point numbers with a tolerance\n * classes for storing and manipulating conflict graphs, and\n * classes for searching and storing cliques and odd cycles in conflict graphs, among others.\n\nThe project managers of Cgl are Robin Lougee (@rlougee) and Francois Margot.\n\n\nCgl is written in C++ and is released as open source under the [Eclipse Public License 2.0](http://www.opensource.org/licenses/EPL-2.0).\n\nIt is distributed under the auspices of the [COIN-OR Foundation](https://www.coin-or.org).\n\nThe Cgl development site is https://github.com/coin-or/Cgl.\n\n## CITE\n\nCode: [![DOI](https://zenodo.org/badge/173502902.svg)](https://zenodo.org/badge/latestdoi/173502902)\n\n## CURRENT BUILD STATUS\n\n[![Windows Builds](https://github.com/coin-or/Cgl/actions/workflows/windows-ci.yml/badge.svg?branch=master)](https://github.com/coin-or/Cgl/actions/workflows/windows-ci.yml?query=branch%3Amaster)\n\n[![Linux and MacOS Builds](https://github.com/coin-or/Cgl/actions/workflows/linux-ci.yml/badge.svg?branch=master)](https://github.com/coin-or/Cgl/actions/workflows/linux-ci.yml?query=branch%3Amaster)\n\n## DOWNLOAD\n\nWhat follows is a quick start guide for obtaining or building\nCgl on common platforms. More detailed information is\navailable [here](https://coin-or.github.io/user_introduction.html).\n\n### Docker image\n\nThere is a Docker image that provides Cgl, as well as other projects\nin the [COIN-OR Optimization\nSuite](https://github.com/coin-or/COIN-OR-OptimizationSuite) [here](https://hub.docker.com/repository/docker/coinor/coin-or-optimization-suite)\n\n### Binaries\n\nFor newer releases, binaries will be made available as assets attached to\nreleases in Github\n[here](https://github.com/coin-or/Cgl/releases). Older binaries\nare archived as part of Cbc\n[here](https://www.coin-or.org/download/binary/Cbc).\n\n * *Linux* (see https://repology.org/project/coin-or-cgl/versions for a complete listing): \n   * arch:\n     ```\n     $ sudo pacman -S  coin-or-cgl\n     ```\n   * Debian/Ubuntu:\n     ```\n     $ sudo apt-get install  coinor-cgl coinor-libcgl-dev\n     ```\n   * Fedora/Redhat/CentOS:\n     ```\n     $ sudo yum install  coin-or-Cgl coin-or-Cgl-devel\n     ```\n   * freebsd:\n     ```\n     $ sudo pkg install math/cgl\n     ```\n   * linuxbrew:\n     ```\n     $ brew install cgl\n     ```\n * *Windows*: The easiest way to get Cgl on Windows is to download an archive as described above.\n * *Mac OS X*: The easiest way to get Cgl on Mac OS X is through [Homebrew](https://brew.sh).\n     ```\n     $ brew tap coin-or-tools/coinor\n     $ brew install coin-or-tools/coinor/cgl\n     ```\n\n* *conda* (cross-platform, no Windows for now):\n     ```\n     $ conda install coin-or-cgl\n     ```\n\nDue to license incompatibilities, pre-compiled binaries lack some \nfunctionality. If binaries are not available for your platform for the latest \nversion and you would like to request them to be built and posted, feel free \nto let us know on the mailing list. \n\n### Source\n\nSource code can be obtained either by\n\n * Downloading a snapshot of the source code for the latest release version of Cgl from the\n [releases](https://github.com/coin-or/Cgl/releases) page,\n * Cloning this repository from [Github](https://github.com/coin-or/Cgl), or \n * Using the [coinbrew](https://github.com/coin-or/coinbrew) script to get the project and all dependencies (recommended, see below).   \n\n### Dependencies\n\nCgl has a number of dependencies, which are detailed in\n[config.yml](.coin-or/config.yml). Dependencies on other COIN-OR projects are\nautomatically downloaded when obtaining the source with `coinbrew`. For some\nof the remaining third-party dependencies, automatic download scripts and\nbuild wrappers are provided (and will also be automatically run for required\nand recommended dependencies), while other libraries that are aeasy to obtain\nmust be installed using an appropriate package manager (or may come with your\nOS by default). \n\n## BUILDING from source\n\nThese quick start instructions assume you are in a bash shell. \n\n### Using `coinbrew`\n\nTo download and build Cgl from source, execute the \nfollowing on the command line. \n```\nwget https://raw.githubusercontent.com/coin-or/coinbrew/master/coinbrew\nchmod u+x coinbrew\n./coinbrew fetch Cgl@master\n./coinbrew build Cgl\n```\nFor more detailed instructions on coinbrew, see https://coin-or.github.io/coinbrew.\nThe `coinbrew` script will fetch the additional projects specified in the Dependencies section of [config.yml](.coin-or/config.yml).\n\n### Without `coinbrew` (Expert users)\n\n * Download the source code, e.g., by cloning the git repo https://github.com/coin-or/Cgl\n * Download and install the source code for the dependencies listed in [config.yml](.coin-or/config.yml)\n * Build the code as follows (make sure to set PKG_CONFIG_PTH to install directory for dependencies).\n\n```\n./configure -C\nmake\nmake test\nmake install\n```\n\n## Doxygen Documentation\n\nIf you have `Doxygen` available, you can build a HTML documentation by typing\n\n`make doxygen-docs` \n\nin the build directory. If Cgl was built via `coinbrew`, then the build\ndirectory will be `./build/Cgl/master` by default. The doxygen documentation main file\nis found at `<build-dir>/doxydoc/html/index.html`.\n\nIf you don't have `doxygen` installed locally, you can use also find the\ndocumentation [here](http://coin-or.github.io/Cgl/Doxygen).\n\n\n## Project Links\n\n * [Code of Conduct](https://www.coin-or.org/code-of-conduct/)\n * [COIN-OR Web Site](http://www.coin-or.org/)\n * [COIN-OR general discussion forum](https://github.com/orgs/coin-or/discussions)\n * [Cgl Discussion forum](https://github.com/coin-or/Cgl/discussions)\n * [Report a bug](https://github.com/coin-or/Cgl/issues/new)\n * [Doxygen generated documentation](http://coin-or.github.io/Cgl/Doxygen)\n\n---------\n\n## Information for Subproject Managers\n\nA cut generator in `Cgl` must conform to the following:\n\n * Its main class `CglCutGeneratorDeriv` is derived from the class `CglCutGenerator`.\n * It has three related classes used for data, parameters and information with respect to the enumeration tree:\n   * A class `CglDataDeriv` derived from `CglData`; it should contain pointers on all data used by the generator that might be obtained from an `OsiSolverInterface` object when calling `generateCuts()` with an `OsiSolverInterface` object as parameter. The class `CglDataDeriv` might be `CglData` if the latter is sufficient. An exception is made for generators needing information deemed too expensive to collect from the solver (for example the optimal Simplex tableau); in this case `CglDataDeriv` might still contain a pointer on the `OsiSolverInterface` object, but its use should be limited to obtaining the \"expensive\" information from the solver.\n   * A class `CglParamDeriv` derived from `CglParam`. It should contain parameters of the generator that can be set by the user. The parameters in the class `CglParamDeriv` must be taken into account during the cut generation. The class `CglParamDeriv` might be `CglParam` if the latter is sufficient.\n   * A class `CglTreeInfoDeriv` derived from `CglTreeInfo`. The class `CglTreeInfoDeriv` might be `CglTreeInfo` if the latter is sufficient.\n * The class `CglCutGeneratorDeriv` must have \n   * A member of type `CglParamDeriv` used to store the current parameters.\n   * A method `getParam()` that returns the object storing the current parameters.\n   * A method `generateCuts(const OsiSolverInterface & si, OsiCuts & cs, const CglTreeInfoDeriv info)`\n   * A method `generateCuts(const CglDataDeriv &data, OsiCuts & cs, const CglTreeInfoDeriv info)`\n * The data class `CglDataDeriv` must have methods `getMember()` and `setMember()` for each `member` of the class. Data members in `CglData` irrelevant for a generator are completely ignored. If a data member that is used by a generator is not available when `generateCuts(const CglDataDeriv &data, OsiCuts & cs, const CglTreeInfoDeriv info)` is called, the call is aborted, as if no cuts were found. A warning message might be printed.\n * The class `CglParamDeriv` must have methods `getMember()` and `setMember()` for each `member` of the class. All parameters must have default values. Each cut generator with a derived class is free to change the default values for all the members of `CglParamDeriv`, including those from `CglParam`.\n * Once an object of the cut generator class is created, it should be possible to call generateCuts() several times in a row without having to destroy and re-create the object.\n * By default, a successful call to `generateCuts()` should not generate any output. If an error occurs, a message might be printed."
}
