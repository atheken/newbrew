{
  "name": "garble",
  "full_name": "garble",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Obfuscate Go builds",
  "license": "BSD-3-Clause",
  "homepage": "https://github.com/burrowers/garble",
  "versions": {
    "stable": "0.10.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/burrowers/garble/archive/refs/tags/v0.10.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "11c038cb5fb6b21a2160305beec939c69b0712e39f52f0a0b6d977fa68d5b6db"
    },
    "head": {
      "url": "https://github.com/burrowers/garble.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/garble/blobs/sha256:ba0821114a58ed15fad34a23179486094526551826fbaa786e7a052b0e082b83",
          "sha256": "ba0821114a58ed15fad34a23179486094526551826fbaa786e7a052b0e082b83"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/garble/blobs/sha256:ba0821114a58ed15fad34a23179486094526551826fbaa786e7a052b0e082b83",
          "sha256": "ba0821114a58ed15fad34a23179486094526551826fbaa786e7a052b0e082b83"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/garble/blobs/sha256:ba0821114a58ed15fad34a23179486094526551826fbaa786e7a052b0e082b83",
          "sha256": "ba0821114a58ed15fad34a23179486094526551826fbaa786e7a052b0e082b83"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/garble/blobs/sha256:33139d9ab9315c532d1f0ae781daf536af3a4c98d8b006cf2de5845fe0167e79",
          "sha256": "33139d9ab9315c532d1f0ae781daf536af3a4c98d8b006cf2de5845fe0167e79"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/garble/blobs/sha256:33139d9ab9315c532d1f0ae781daf536af3a4c98d8b006cf2de5845fe0167e79",
          "sha256": "33139d9ab9315c532d1f0ae781daf536af3a4c98d8b006cf2de5845fe0167e79"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/garble/blobs/sha256:33139d9ab9315c532d1f0ae781daf536af3a4c98d8b006cf2de5845fe0167e79",
          "sha256": "33139d9ab9315c532d1f0ae781daf536af3a4c98d8b006cf2de5845fe0167e79"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/garble/blobs/sha256:393639d2de0a92130ae75ebe3c6acec0901ed2cdbaac3ce081137e51791071bf",
          "sha256": "393639d2de0a92130ae75ebe3c6acec0901ed2cdbaac3ce081137e51791071bf"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [
    "git"
  ],
  "test_dependencies": [
    "go"
  ],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/garble.rb",
  "ruby_source_checksum": {
    "sha256": "1a39fa5caf45c5743d986475adf9b9d4aef987f74200f2e12357da675b637789"
  },
  "date_added": "2023-03-18T22:06:57+00:00",
  "readme": "# garble\n\n\tgo install mvdan.cc/garble@latest\n\nObfuscate Go code by wrapping the Go toolchain. Requires Go 1.20 or later.\n\n\tgarble build [build flags] [packages]\n\nThe tool also supports `garble test` to run tests with obfuscated code,\n`garble run` to obfuscate and execute simple programs,\nand `garble reverse` to de-obfuscate text such as stack traces.\nRun `garble -h` to see all available commands and flags.\n\nYou can also use `go install mvdan.cc/garble@master` to install the latest development version.\n\n### Purpose\n\nProduce a binary that works as well as a regular build, but that has as little\ninformation about the original source code as possible.\n\nThe tool is designed to be:\n\n* Coupled with `cmd/go`, to support modules and build caching\n* Deterministic and reproducible, given the same initial source code\n* Reversible given the original source, to de-obfuscate panic stack traces\n\n### Mechanism\n\nThe tool wraps calls to the Go compiler and linker to transform the Go build, in\norder to:\n\n* Replace as many useful identifiers as possible with short base64 hashes\n* Replace package paths with short base64 hashes\n* Replace filenames and position information with short base64 hashes\n* Remove all [build](https://go.dev/pkg/runtime/#Version) and [module](https://go.dev/pkg/runtime/debug/#ReadBuildInfo) information\n* Strip debugging information and symbol tables via `-ldflags=\"-w -s\"`\n* [Obfuscate literals](#literal-obfuscation), if the `-literals` flag is given\n* Remove [extra information](#tiny-mode), if the `-tiny` flag is given\n\nBy default, the tool obfuscates all the packages being built.\nYou can manually specify which packages to obfuscate via `GOGARBLE`,\na comma-separated list of glob patterns matching package path prefixes.\nThis format is borrowed from `GOPRIVATE`; see `go help private`.\n\nNote that commands like `garble build` will use the `go` version found in your\n`$PATH`. To use different versions of Go, you can\n[install them](https://go.dev/doc/manage-install#installing-multiple)\nand set up `$PATH` with them. For example, for Go 1.17.1:\n\n```sh\n$ go install golang.org/dl/go1.17.1@latest\n$ go1.17.1 download\n$ PATH=$(go1.17.1 env GOROOT)/bin:${PATH} garble build\n```\n\n### Literal obfuscation\n\nUsing the `-literals` flag causes literal expressions such as strings to be\nreplaced with more complex expressions, resolving to the same value at run-time.\nString literals injected via `-ldflags=-X` are also replaced by this flag.\nThis feature is opt-in, as it can cause slow-downs depending on the input code.\n\nLiterals used in constant expressions cannot be obfuscated, since they are\nresolved at compile time. This includes any expressions part of a `const`\ndeclaration, for example.\n\n### Tiny mode\n\nWith the `-tiny` flag, even more information is stripped from the Go binary.\nPosition information is removed entirely, rather than being obfuscated.\nRuntime code which prints panics, fatal errors, and trace/debug info is removed.\nMany symbol names are also omitted from binary sections at link time.\nAll in all, this can make binaries about 15% smaller.\n\nWith this flag, no panics or fatal runtime errors will ever be printed, but they\ncan still be handled internally with `recover` as normal. In addition, the\n`GODEBUG` environmental variable will be ignored.\n\nNote that this flag can make debugging crashes harder, as a panic will simply\nexit the entire program without printing a stack trace, and source code\npositions and many names are removed.\nSimilarly, `garble reverse` is generally not useful in this mode.\n\n### Control flow obfuscation\n\nSee: [CONTROLFLOW.md](docs/CONTROLFLOW.md)\n\n### Speed\n\n`garble build` should take about twice as long as `go build`, as it needs to\ncomplete two builds. The original build, to be able to load and type-check the\ninput code, and then the obfuscated build.\n\nGarble obfuscates one package at a time, mirroring how Go compiles one package\nat a time. This allows Garble to fully support Go's build cache; incremental\n`garble build` calls should only re-build and re-obfuscate modified code.\n\nNote that the first call to `garble build` may be comparatively slow,\nas it has to obfuscate each package for the first time. This is akin to clearing\n`GOCACHE` with `go clean -cache` and running a `go build` from scratch.\n\nGarble also makes use of its own cache to reuse work, akin to Go's `GOCACHE`.\nIt defaults to a directory under your user's cache directory,\nsuch as `~/.cache/garble`, and can be placed elsewhere by setting `GARBLE_CACHE`.\n\n### Determinism and seeds\n\nJust like Go, garble builds are deterministic and reproducible in nature.\nThis has significant benefits, such as caching builds and being able to use\n`garble reverse` to de-obfuscate stack traces.\n\nBy default, garble will obfuscate each package in a unique way,\nwhich will change if its build input changes: the version of garble, the version\nof Go, the package's source code, or any build parameter such as GOOS or -tags.\nThis is a reasonable default since guessing those inputs is very hard.\n\nYou can use the `-seed` flag to provide your own obfuscation randomness seed.\nReusing the same seed can help produce the same code obfuscation,\nwhich can help when debugging or reproducing problems.\nRegularly rotating the seed can also help against reverse-engineering in the long run,\nas otherwise one can look at changes in how Go's standard library is obfuscated\nto guess when the Go or garble versions were changed across a series of builds.\n\nTo always use a different seed for each build, use `-seed=random`.\nNote that extra care should be taken when using custom seeds:\nif a `-seed` value used in a build is lost, `garble reverse` will not work.\n\n### Caveats\n\nMost of these can improve with time and effort. The purpose of this section is\nto document the current shortcomings of this tool.\n\n* Exported methods are never obfuscated at the moment, since they could\n  be required by interfaces. This area is a work in progress; see\n  [#3](https://github.com/burrowers/garble/issues/3).\n\n* Garble aims to automatically detect which Go types are used with reflection,\n  as obfuscating those types might break your program.\n  Note that Garble obfuscates [one package at a time](#speed),\n  so if your reflection code inspects a type from an imported package,\n  and your program broke, you may need to add a \"hint\" in the imported package:\n   ```go\n   type Message struct {\n       Command string\n       Args    string\n   }\n\n   // Never obfuscate the Message type.\n   var _ = reflect.TypeOf(Message{})\n   ```\n\n* Go plugins are not currently supported; see [#87](https://github.com/burrowers/garble/issues/87).\n* Garble requires `git` to patch the linker. That can be avoided once go-gitdiff supports [non-strict patches](https://github.com/bluekeyes/go-gitdiff/issues/30). \n\n### Contributing\n\nWe welcome new contributors. If you would like to contribute, see\n[CONTRIBUTING.md](CONTRIBUTING.md) as a starting point."
}
