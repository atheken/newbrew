{
  "name": "fleetctl",
  "full_name": "fleetctl",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Distributed init system",
  "license": "Apache-2.0",
  "homepage": "https://github.com/coreos/fleet",
  "versions": {
    "stable": "1.0.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/coreos/fleet.git",
      "tag": "v1.0.0",
      "revision": "b8127afc06e3e41089a7fc9c3d7d80c9925f4dab",
      "checksum": null
    },
    "head": {
      "url": "https://github.com/coreos/fleet.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fleetctl/blobs/sha256:c6d95d7c2a535214d3e02819916101e64fd1ecfd17a09a33fcc270696e08766d",
          "sha256": "c6d95d7c2a535214d3e02819916101e64fd1ecfd17a09a33fcc270696e08766d"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fleetctl/blobs/sha256:8bb493ec565f24cc16ae33f23f860cb179047a4d379474c2c1e1730fd2b07ae7",
          "sha256": "8bb493ec565f24cc16ae33f23f860cb179047a4d379474c2c1e1730fd2b07ae7"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fleetctl/blobs/sha256:e77b6b66846ae13494dd3f8a950b8650c3ae0847b1f3e439ce216c8aab3275a5",
          "sha256": "e77b6b66846ae13494dd3f8a950b8650c3ae0847b1f3e439ce216c8aab3275a5"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fleetctl/blobs/sha256:db133bc31ff2a813dfaf6b5faa7d41c892dd91803f5612540a09b58c7c81d783",
          "sha256": "db133bc31ff2a813dfaf6b5faa7d41c892dd91803f5612540a09b58c7c81d783"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fleetctl/blobs/sha256:69f1d75544203e04ea3fba75c639ebbdfa564f0cbdea53f62bfb2f8f253bdf60",
          "sha256": "69f1d75544203e04ea3fba75c639ebbdfa564f0cbdea53f62bfb2f8f253bdf60"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fleetctl/blobs/sha256:a8fa7b4e9479073b568a5e1325d7d56708e28cbc921df09698cc671dc939b258",
          "sha256": "a8fa7b4e9479073b568a5e1325d7d56708e28cbc921df09698cc671dc939b258"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fleetctl/blobs/sha256:578bc15de6d87d53165ff70805388b41388f01d10a7c5d809fafd46c4d9040aa",
          "sha256": "578bc15de6d87d53165ff70805388b41388f01d10a7c5d809fafd46c4d9040aa"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fleetctl/blobs/sha256:5572247273e727544512f619016572c64f0694328b20f94d00897824512809f4",
          "sha256": "5572247273e727544512f619016572c64f0694328b20f94d00897824512809f4"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": true,
  "disable_date": "2022-07-31",
  "disable_reason": "repo_archived",
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/fleetctl.rb",
  "ruby_source_checksum": {
    "sha256": "858dbb31418ba002758e73a53cff9b2e80907eb649d5b4004545288a6774227d"
  },
  "date_added": "2014-05-07T18:10:58-07:00",
  "readme": "## <img src=\"Documentation/achtung.png\" alt=\"WARNING\" width=\"30\" height=\"30\"><img src=\"Documentation/achtung.png\" alt=\"WARNING\" width=\"30\" height=\"30\"><img src=\"Documentation/achtung.png\" alt=\"WARNING\" width=\"30\" height=\"30\"> Deprecation warning <img src=\"Documentation/achtung.png\" alt=\"WARNING\" width=\"30\" height=\"30\"><img src=\"Documentation/achtung.png\" alt=\"WARNING\" width=\"30\" height=\"30\"><img src=\"Documentation/achtung.png\" alt=\"WARNING\" width=\"30\" height=\"30\"><a name=\"deprecation-warning\"></a>\nfleet is no longer developed or maintained by CoreOS. After February 1, 2018, a fleet container image will continue to be available from the CoreOS Quay registry, but will not be shipped as part of Container Linux. CoreOS instead [recommends Kubernetes for all clustering needs](https://coreos.com/blog/migrating-from-fleet-to-kubernetes.html).\n\nThe project exists here for historical reference. If you are interested in the future of the project and taking over stewardship, please contact fleet@coreos.com\n\n# fleet - a distributed init system\n\n[![Build Status](https://travis-ci.org/coreos/fleet.png?branch=master)](https://travis-ci.org/coreos/fleet)\n[![Build Status](https://semaphoreci.com/api/v1/coreos/fleet/branches/master/badge.svg)](https://semaphoreci.com/coreos/fleet)\n\nfleet ties together [systemd][coreos-systemd] and [etcd][etcd] into a simple distributed init system. Think of it as an extension of systemd that operates at the cluster level instead of the machine level.\n\n**This project is quite low-level, and is designed as a foundation for higher order orchestration.** fleet is a cluster-wide elaboration on systemd units, and is not a container manager or orchestration system. fleet supports basic scheduling of systemd units across nodes in a cluster. Those looking for more complex scheduling requirements or a first-class container orchestration system should check out [Kubernetes][kubernetes]. The [fleet and kubernetes comparison table][fleet-vs-k8s] has more information about the two systems.\n\n## Current status\n\nThe fleet project is [no longer maintained](#deprecation-warning).\n\nAs of v1.0.0, fleet has seen production use for some time and is largely considered stable.\nHowever, there are [various known and unresolved issues](https://github.com/coreos/fleet/issues), including [scalability limitations][fleet-scaling] with its architecture.\nAs such, it is not recommended to run fleet clusters larger than 100 nodes or with more than 1000 services.\n\n## Using fleet\n\nLaunching a unit with fleet is as simple as running `fleetctl start`:\n\n```sh\n$ fleetctl start examples/hello.service\nUnit hello.service launched on 113f16a7.../172.17.8.103\n```\n\nThe `fleetctl start` command waits for the unit to get scheduled and actually start somewhere in the cluster.\n`fleetctl list-unit-files` tells you the desired state of your units and where they are currently scheduled:\n\n```sh\n$ fleetctl list-unit-files\nUNIT            HASH     DSTATE    STATE     TMACHINE\nhello.service   e55c0ae  launched  launched  113f16a7.../172.17.8.103\n```\n\n`fleetctl list-units` exposes the systemd state for each unit in your fleet cluster:\n\n```sh\n$ fleetctl list-units\nUNIT            MACHINE                    ACTIVE   SUB\nhello.service   113f16a7.../172.17.8.103   active   running\n```\n\n## Supported Deployment Patterns\n\nfleet is not intended to be an all-purpose orchestration system, and as such supports only a few simple deployment patterns:\n\n* Deploy a single unit anywhere on the cluster\n* Deploy a unit globally everywhere in the cluster\n* Automatic rescheduling of units on machine failure\n* Ensure that units are deployed together on the same machine\n* Forbid specific units from colocation on the same machine (anti-affinity)\n* Deploy units to machines only with specific metadata\n\nThese patterns are all defined using [custom systemd unit options][unit-files].\n\n## Getting Started\n\nBefore you can deploy units, fleet must be [deployed and configured][deploy-and-configure] on each host in your cluster. (If you are running CoreOS, fleet is already installed.)\n\nAfter you have machines configured (check `fleetctl list-machines`), get to work with the [client][using-the-client.md].\n\n### Building\n\nfleet must be built with Go 1.5+ on a Linux machine. Simply run `./build` and then copy the binaries out of `bin/` directory onto each of your machines. The tests can similarly be run by simply invoking `./test`.\n\nIf you're on a machine without Go 1.5+ but you have Docker installed, run `./build-docker` to compile the binaries instead.\n\n## Project Details\n\n### API\n\nThe fleet API uses JSON over HTTP to manage units in a fleet cluster.\nSee the [API documentation][api-doc] for more information.\n\n### Release Notes\n\nSee the [releases tab][releases] for more information on each release.\n\n### License\n\nfleet is released under the Apache 2.0 license. See the [LICENSE][license] file for details.\n\nSpecific components of fleet use code derivative from software distributed under other licenses; in those cases the appropriate licenses are stipulated alongside the code.\n\n[api-doc]: Documentation/api-v1.md\n[contributing]: CONTRIBUTING.md\n[coreos-systemd]: https://github.com/coreos/docs/blob/master/os/getting-started-with-systemd.md\n[deploy-and-configure]: Documentation/deployment-and-configuration.md\n[etcd]: https://github.com/coreos/etcd\n[fleet-scaling]: Documentation/fleet-scaling.md\n[fleet-vs-k8s]: Documentation/fleet-k8s-compared.md\n[kubernetes]: http://kubernetes.io\n[license]: LICENSE\n[maintainers]: MAINTAINERS\n[releases]: https://github.com/coreos/fleet/releases\n[unit-files]: Documentation/unit-files-and-scheduling.md#fleet-specific-options\n[using-the-client.md]: Documentation/using-the-client.md"
}
