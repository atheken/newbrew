{
  "name": "oclgrind",
  "full_name": "oclgrind",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "OpenCL device simulator and debugger",
  "license": "BSD-3-Clause",
  "homepage": "https://github.com/jrprice/Oclgrind",
  "versions": {
    "stable": "21.10",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/jrprice/Oclgrind/archive/v21.10.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "b40ea81fcf64e9012d63c3128640fde9785ef4f304f9f876f53496595b8e62cc"
    }
  },
  "revision": 2,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/oclgrind/blobs/sha256:89a927ac8cfbfe82e860a05347a7d7ca61bf3d426e2e3c6ab8c3ff93358230de",
          "sha256": "89a927ac8cfbfe82e860a05347a7d7ca61bf3d426e2e3c6ab8c3ff93358230de"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/oclgrind/blobs/sha256:952c3159099400839aaadcebec2c20f08bce32dc7de9e507d8435df6a5ba2e9a",
          "sha256": "952c3159099400839aaadcebec2c20f08bce32dc7de9e507d8435df6a5ba2e9a"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/oclgrind/blobs/sha256:b56d81e7e93e41f6e339f216392541d1270a3c309d57d83328cf531802bc483c",
          "sha256": "b56d81e7e93e41f6e339f216392541d1270a3c309d57d83328cf531802bc483c"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/oclgrind/blobs/sha256:c5c442f08c52f8a2a3ba70c9def1ce6b15d618c1952aefd3acb4b221be0cf7b9",
          "sha256": "c5c442f08c52f8a2a3ba70c9def1ce6b15d618c1952aefd3acb4b221be0cf7b9"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/oclgrind/blobs/sha256:4c9b7d599bde78dd00085ff802b84b499008e5800fc9c91a11901c9b0fec5c75",
          "sha256": "4c9b7d599bde78dd00085ff802b84b499008e5800fc9c91a11901c9b0fec5c75"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/oclgrind/blobs/sha256:37bf40f81471fedbeb7c295c7c6ecf22f2f2d32c28dd8d8e273922a66a959129",
          "sha256": "37bf40f81471fedbeb7c295c7c6ecf22f2f2d32c28dd8d8e273922a66a959129"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/oclgrind/blobs/sha256:52da235facbe5b6d02b0990c8d987223ba8bd18e003820c4860b4fa5475179b3",
          "sha256": "52da235facbe5b6d02b0990c8d987223ba8bd18e003820c4860b4fa5475179b3"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/oclgrind/blobs/sha256:658070a3826a514c4d72109792dfb85d5d79d6d4df5f79fee780f29edf0842b7",
          "sha256": "658070a3826a514c4d72109792dfb85d5d79d6d4df5f79fee780f29edf0842b7"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [
    "llvm@13",
    "readline"
  ],
  "test_dependencies": [
    "opencl-headers"
  ],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/oclgrind.rb",
  "ruby_source_checksum": {
    "sha256": "79a1a1fd5903ed863ef3bde0ce78ae8e86419120cbc1876c44cce71f4abee1fa"
  },
  "date_added": "2018-09-20T09:45:35+02:00",
  "readme": "Oclgrind\n========\n\nAbout\n-----\nThis project implements a virtual OpenCL device simulator, including\nan OpenCL runtime with ICD support. The goal is to provide a platform\nfor creating tools to aid OpenCL development. In particular, this\nproject currently implements utilities for debugging memory access\nerrors, detecting data-races and barrier divergence, collecting\ninstruction histograms, and for interactive OpenCL kernel debugging.\nThe simulator is built on an interpreter for LLVM IR. This project was\noriginally created by James Price and Simon McIntosh-Smith at the\nUniversity of Bristol.\n\nBinary releases can be found on the GitHub releases page:\n\n  https://github.com/jrprice/Oclgrind/releases\n\n\nBuild dependencies\n------------------\nTo build this project, you will need LLVM and Clang 11.0 (or newer)\ndevelopment libraries and headers. If you build LLVM from source, it\nis recommended to enable optimizations to significantly improve the\nperformance of Oclgrind (set `CMAKE_BUILD_TYPE` to `Release` or\n`RelWithDebInfo`).\n\nYou will need to use a compiler that supports C++14. Python should\nalso be available in order to run the test suite.\n\n\nBuilding on Linux and macOS (CMake)\n-----------------------------------\nThe recommended method of building Oclgrind is via CMake.\n\nWhen configuring the CMake build, you may be prompted to supply a\nvalue for the `LLVM_DIR` parameter (this shouldn't be necessary if\nLLVM is installed in a standard system location). This should be set\nto the directory containing your LLVM installation's\n`LLVMConfig.cmake` file (typically either\n`${LLVM_ROOT}/lib/cmake/llvm` or `${LLVM_ROOT}/share/llvm/cmake/`).\nIf Clang is installed separately to LLVM, then you may also be\nprompted to supply a path for the `CLANG_ROOT` parameter, which should\nbe the root of your Clang installation (containing the `bin/`, `lib/`\nand `include/` directories).\n\nA typical CMake command-line might look like this:\n\n    cmake ${OCLGRIND_SOURCE} \\\n          -DCMAKE_BUILD_TYPE=RelWithDebInfo \\\n          -DCMAKE_INSTALL_PREFIX=${INSTALL_ROOT} \\\n          -DLLVM_DIR=${LLVM_ROOT}/lib/cmake/llvm\n\nwhere `${OCLGRIND_SOURCE}` is the path to the root directory\ncontaining the Oclgrind source code, `${LLVM_ROOT}` is the path to the\nLLVM installation, and `${INSTALL_ROOT}` is the desired installation\nroot directory (this can be omitted if installing to system\ndirectories).\n\nNext, build and install with make:\n\n    make\n    make test\n    make install\n\nIf installing to a non-system location, you should add the `bin/`\ndirectory to the `PATH` environment variable in order to make use of\nthe `oclgrind` command. If you wish to use Oclgrind via the OpenCL ICD\nloader (optional), then you should create an ICD loading point by\ncopying the `oclgrind.icd` file from the build directory to\n`/etc/OpenCL/vendors/`.\n\n\nBuilding on Windows\n-------------------\nBuilding Oclgrind on Windows requires Visual Studio 2017 (or newer).\n\nWhen configuring the CMake build, you may be prompted to supply a\nvalue for the `LLVM_DIR` parameter. This should be set to the\ndirectory containing your LLVM installation's `LLVMConfig.cmake` file\n(for example `C:\\Program Files\\LLVM\\lib\\cmake\\llvm`). If Clang is\ninstalled separately to LLVM, then you may also be prompted to supply\na path in the `CLANG_ROOT` parameter, which should be the root of your\nClang installation (containing the `bin/`, `lib/` and `include/`\ndirectories).\n\nYou should add the `bin` directory of the Oclgrind installation to the\n`PATH` environment variable in order to make use of the `oclgrind`\ncommand. If you wish to use Oclgrind via the OpenCL ICD loader\n(optional), then you should also create an ICD loading point. To do\nthis, you should add a `REG_DWORD` value to the Windows Registry under\none or both of the registry keys below, with the name set to the\nabsolute path of the `oclgrind-rt-icd.dll` library and the value set\nto 0.\n\nKey for 32-bit machines or 64-bit apps on a 64-bit machine:\n`HKEY_LOCAL_MACHINE\\SOFTWARE\\Khronos\\OpenCL\\Vendors`\n\nKey for 32-bit apps on a 64-bit machine:\n`HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Khronos\\OpenCL\\Vendors`\n\n\nUsage\n-----\nThe recommended method of running an application with Oclgrind is to\nuse the `oclgrind` command, for example:\n\n    oclgrind ./application\n\nThis command will make it such the only OpenCL platform and device\navailable to your application is Oclgrind. If you need more control\nover platform selection then installing an ICD loading point for\nOclgrind will cause it to appear when an application calls\n`clGetPlatformIDs()`, alongside any other OpenCL platforms installed\non your system.\n\nIf it encounters any invalid memory accesses, Oclgrind will\nreport the details to stderr, for example:\n\n    Invalid write of size 4 at global memory address 0x1000000000040\n        Kernel:  vecadd\n        Entity:  Global(16,0,0) Local(0,0,0) Group(16,0,0)\n        store i32 %tmp9, i32 addrspace(1)* %tmp15, align 4\n        At line 4 of input.cl\n          c[i] = a[i] + b[i]\n\nSince it is interpreting an abstract intermediate representation and\nbounds-checking each memory access, Oclgrind will run quite slowly\n(typically a couple of orders of magnitude slower than a regular CPU\nimplementation). Therefore, it is recommended to run your application\nwith a small problem if possible.\n\nTo enable an interactive, GDB-style debugging session, supply the `-i`\nflag to the oclgrind command, or export the environment variable\n`OCLGRIND_INTERACTIVE=1`. This will cause Oclgrind to automatically\nbreak at the beginning of each kernel invocation, and upon\nencountering an invalid memory access. Type `help` for details of\navailable commands.\n\nFor more detailed information about using Oclgrind please visit the\nGitHub Wiki:\n\n  https://github.com/jrprice/Oclgrind/wiki/\n\n\nContact\n-------\nIf you encounter any issues or have any questions, please use the\nGitHub issues page:\n\n  https://github.com/jrprice/Oclgrind/issues"
}
