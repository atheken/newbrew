{
  "name": "libgrape-lite",
  "full_name": "libgrape-lite",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "C++ library for parallel graph processing",
  "license": "Apache-2.0",
  "homepage": "https://github.com/alibaba/libgrape-lite",
  "versions": {
    "stable": "0.3.2",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/alibaba/libgrape-lite/archive/refs/tags/v0.3.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "e0701a389f615eb169faf0272ad4aa0679b8e7b06f94a4732c8232d2f40fc0ae"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libgrape-lite/blobs/sha256:5437b82e7cbc55ec1394e21b8cecb11c7d5149b9205afdaee7765bded95e0d5c",
          "sha256": "5437b82e7cbc55ec1394e21b8cecb11c7d5149b9205afdaee7765bded95e0d5c"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libgrape-lite/blobs/sha256:9ca019ceb41ef6b447df677376bf396c8fcb49b1bd75a4c69994492c1487e0fa",
          "sha256": "9ca019ceb41ef6b447df677376bf396c8fcb49b1bd75a4c69994492c1487e0fa"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libgrape-lite/blobs/sha256:7eead4cc06b4f89b45cd365e98577e6f13985569f7781484d3b3a759969df6d5",
          "sha256": "7eead4cc06b4f89b45cd365e98577e6f13985569f7781484d3b3a759969df6d5"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libgrape-lite/blobs/sha256:73510a5810bf7c2c54af3f8b1188051e4651739d584a0b03136d4e80ee84a869",
          "sha256": "73510a5810bf7c2c54af3f8b1188051e4651739d584a0b03136d4e80ee84a869"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libgrape-lite/blobs/sha256:078f61025dd058c4e0fcd83449142abfa1c624459878bd15c6a8c2f8cec08313",
          "sha256": "078f61025dd058c4e0fcd83449142abfa1c624459878bd15c6a8c2f8cec08313"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/libgrape-lite/blobs/sha256:a83c2f7d28fd6efc4846641070514f0fe13e1e6af4320dcc247c343323e304a2",
          "sha256": "a83c2f7d28fd6efc4846641070514f0fe13e1e6af4320dcc247c343323e304a2"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/libgrape-lite/blobs/sha256:d6a99920810c692f8420e82009a38c7ec32b316e38bb1a38e42a85f033a27a3a",
          "sha256": "d6a99920810c692f8420e82009a38c7ec32b316e38bb1a38e42a85f033a27a3a"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [
    "glog",
    "open-mpi"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/libgrape-lite.rb",
  "ruby_source_checksum": {
    "sha256": "76932492310356062d276ad7517064a1d16415e1e264886d83c7e0e1ae3d44f2"
  },
  "date_added": "2021-12-30T09:26:32+00:00",
  "readme": "<h1 align=\"center\">\n    <img src=\"https://alibaba.github.io/libgrape-lite/logo.png\" width=\"100\" alt=\"libgrape-lite\">\n    <br>\n    libgrape-lite\n</h1>\n<p align=\"center\">\n    A C++ library for parallel graph processing\n</p>\n\n[![C/C++ CI](https://github.com/alibaba/libgrape-lite/workflows/C++%20CI/badge.svg)](https://github.com/alibaba/libgrape-lite/actions?workflow=C++%20CI)\n[![codecov](https://codecov.io/gh/alibaba/libgrape-lite/branch/master/graph/badge.svg)](https://codecov.io/gh/alibaba/libgrape-lite)\n[![GraphScope](https://img.shields.io/badge/Enables-Graphscope-blue)](https://github.com/alibaba/GraphScope)\n\n**libgrape-lite** is a C++ library from Alibaba for parallel graph processing. It differs from prior systems in its ability to parallelize sequential graph algorithms as a whole by following the *PIE* programming model from [GRAPE](https://dl.acm.org/doi/10.1145/3035918.3035942). Sequential algorithms can be easily [\"plugged into\"](examples/analytical_apps/sssp/sssp_auto.h) libgrape-lite with only minor changes and get parallelized to handle large graphs efficiently. In addition to the ease of programming, libgrape-lite is designed to be highly [efficient](Performance.md) and [flexible](examples/gnn_sampler), to cope the scale, variety and complexity from real-life graph applications.\n\n## Building **libgrape-lite**\n\n### Dependencies\n\n**libgrape-lite** is developed and tested on CentOS 7. It should also work on other unix-like distributions. Building libgrape-lite requires the following softwares installed as dependencies.\n\n- [CMake](https://cmake.org/) (>=2.8)\n- A modern C++ compiler compliant with C++-11 standard. (g++ >= 4.8.1 or clang++ >= 3.3)\n- [MPICH](https://www.mpich.org/) (>= 2.1.4) or [OpenMPI](https://www.open-mpi.org/) (>= 3.0.0)\n- [glog](https://github.com/google/glog) (>= 0.3.4)\n\nHere are the dependencies for optional features:\n\n- [jemalloc](http://jemalloc.net/) (>= 5.0.0) for better memory allocation;\n- [Doxygen](https://www.doxygen.nl/index.html) (>= 1.8) for generating documentation;\n- Linux [HUGE_PAGES](http://www.kernel.org/doc/Documentation/vm/hugetlbpage.txt) support, for better performance.\n- [CUDA](https://developer.nvidia.com/zh-cn/cuda-toolkit) (>= 10.0) for GPU-based graph processing.\n- [NCCL](https://developer.nvidia.com/nccl) (>= 2.7) for multi-GPU communication.\n\nExtra dependencies are required by examples:\n\n- [gflags](https://github.com/gflags/gflags) (>= 2.2.0);\n- [Apache Kafka](https://github.com/apache/kafka) (>= 2.3.0);\n- [librdkafka](https://github.com/edenhill/librdkafka)(>= 0.11.3);\n\n### Building libgrape-lite and examples\n\nOnce the required dependencies have been installed, go to the root directory of libgrape-lite and do a out-of-source build using CMake.\n\n```bash\nmkdir build && cd build\ncmake ..\nmake -j\n```\n\nThe building targets include a shared/static library, and two sets of examples: [analytical_apps](./examples/analytical_apps) and a [gnn_sampler](./examples/gnn_sampler).\n\nAlternatively, you can build a particular target with command:\n\n```bash\nmake libgrape-lite # or\nmake analytical_apps # or\nmake gnn_sampler\n```\n\n### Building libgrape-lite with GPU support\n\nlibgrape-lite supports deploying graph algorithms to GPUs.\nWhen CUDA is detected on the machine and NCCL >= 2.7, GPU support will be enabled automatically.\n\n## Running libgrape-lite applications\n\n### Graph format\n\nThe input of libgrape-lite is formatted following the [LDBC Graph Analytics](http://graphalytics.org) benchmark, with two files for each graph, a `.v` file for vertices with 1 or 2 columns, which are a vertex_id and optionally followed by the data assigned to the vertex; and a `.e` file for edges with 2 or 3 columns, representing source, destination and optionally the data on the edge, correspondingly. See sample files `p2p-31.v` and `p2p-31.e` under the [dataset](dataset/) directory. \n\n### Example applications\n\n**libgrape-lite** provides six algorithms from the LDBC benchmark as examples. The deterministic algorithms are, single-source shortest path(SSSP), connected component(WCC), PageRank, local clustering coefficient(LCC), community detection of label propagation(CDLP), and breadth first search(BFS).    \n\nTo run a specific analytical application, users may use command like this:\n\n```bash\n# run single-source shortest path with 4 workers in local.\nmpirun -n 4 ./run_app --vfile ../dataset/p2p-31.v --efile ../dataset/p2p-31.e --application sssp --sssp_source 6 --out_prefix ./output_sssp --directed\n\n# or run connected component with 4 workers on a cluster.\n# HOSTFILE provides a list of hosts where MPI processes are launched. \nmpirun -n 4 -hostfile HOSTFILE ./run_app --application=wcc --vfile ../dataset/p2p-31.v --efile ../dataset/p2p-31.e --out_prefix ./output_wcc\n\n# or run breadth-first search with 8 workers in a multi-GPU server.\nmpirun -n 8 ./run_cuda_app --application=bfs --lb=cm --bfs_source 6 --vfile ../dataset/p2p-31.v --efile ../dataset/p2p-31.e --out_prefix ./output_wcc\n\n# see more flags info.\n./run_app --help\n```\n\n### LDBC benchmarking\n\nThe analytical applications support the LDBC Analytical Benchmark suite with the provided `ldbc_driver`. Please refer to [ldbc_driver](./ldbc_driver) for more details. The benchmark results for libgrape-lite and other state-of-the-art systems could be found [here](Performance.md).\n\n### GNN sampler\n\nIn addition to offline graph analytics, libgrape-lite could also be utilized to handle more complex graph tasks. A sampler for GNN training/inference on dynamic graphs (taking graph changes and queries, and producing results via [Kafka](https://kafka.apache.org/)) is included as an example. Please refer to [examples/gnn_sampler](./examples/gnn_sampler) for more details.\n\n### GPU-based graph analytics\n\nlibgrape-lite also supports graph analytics on multi-GPU servers. Unlike CPUs, GPUs have more-but-weaker cores, making load balancing the key to high-performance sparse graph processing on GPUs. libgrape-lite provides multiple load balancing strategies on GPUs (`wm`, `cm`, `cta`, and `strict`). libgrape-lite adopts NCCL to handle communication between multiple GPUs. With GPU acceleration, libgrape-lite can obtain similar performance for a 4-node CPU cluster with a single GPU. The detailed benchmark results of libgrape-lite on GPUs could also be found [here](Performance.md).\n\n## Documentation\n\nDocumentation is generated using Doxygen. Users can build doxygen documentation in the build directory using:\n\n```bash\ncd build\nmake doc\n# open docs/index.html\n```\n\nThe latest version of online documentation can be found at [https://alibaba.github.io/libgrape-lite](https://alibaba.github.io/libgrape-lite)\n\n## License\n\n**libgrape-lite** is distributed under [Apache License 2.0](./LICENSE). Please note that third-party libraries may not have the same license as libgrape-lite.\n\n## Acknowledgements\n\n- [flat_hash_map](https://github.com/skarupke/flat_hash_map), an efficient hashmap implementation;\n- [granula](https://github.com/atlarge-research/granula), a tool for gathering performance information for LDBC Benchmark;\n- [xoroshiro](http://prng.di.unimi.it/), a pseudo-random number generator;\n- [threadpool](https://github.com/progschj/threadpool), a concise C++11 Thread Pool implementation.\n\n\n## Publications\n- Wenfei Fan, Jingbo Xu, Wenyuan Yu, Jingren Zhou, Xiaojian Luo, Ping Lu, Qiang Yin, Yang Cao, and Ruiqi Xu. Parallelizing Sequential Graph Computations. ACM Transactions on Database Systems (TODS) 43(4): 18:1-18:39.\n\n- Wenfei Fan, Jingbo Xu, Yinghui Wu, Wenyuan Yu, Jiaxin Jiang. GRAPE: Parallelizing Sequential Graph Computations. The 43rd International Conference on Very Large Data Bases (VLDB), demo, 2017 (**the Best Demo Award**).\n\n- Wenfei Fan, Jingbo Xu, Yinghui Wu, Wenyuan Yu, Jiaxin Jiang, Zeyu Zheng, Bohan Zhang, Yang Cao, and Chao Tian. Parallelizing Sequential Graph Computations, ACM SIG Conference on Management of Data (SIGMOD), 2017 (**the Best Paper Award**).\n\n\n## Getting involved\n\n- Read [contribution guide](./CONTRIBUTING.md).\n- Join in the [Slack channel](http://slack.graphscope.io/)\n- Please report bugs by submitting a GitHub issue.\n- Submit contributions using pull requests.\n\nThank you in advance for your contributions!"
}
