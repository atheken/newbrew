{
  "name": "mx",
  "full_name": "mx",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Command-line tool used for the development of Graal projects",
  "license": "GPL-2.0-only",
  "homepage": "https://github.com/graalvm/mx",
  "versions": {
    "stable": "6.35.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/graalvm/mx/archive/refs/tags/6.35.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "219018cda30b3660a20b1e9dd3c978b79f7d928695cfd1c94435f2925b8254db"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mx/blobs/sha256:da16d2b3bfe6abf192d4e53a9b06040bce410fe8a39f0d5252ba8b4ea5f4d859",
          "sha256": "da16d2b3bfe6abf192d4e53a9b06040bce410fe8a39f0d5252ba8b4ea5f4d859"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mx/blobs/sha256:da16d2b3bfe6abf192d4e53a9b06040bce410fe8a39f0d5252ba8b4ea5f4d859",
          "sha256": "da16d2b3bfe6abf192d4e53a9b06040bce410fe8a39f0d5252ba8b4ea5f4d859"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mx/blobs/sha256:da16d2b3bfe6abf192d4e53a9b06040bce410fe8a39f0d5252ba8b4ea5f4d859",
          "sha256": "da16d2b3bfe6abf192d4e53a9b06040bce410fe8a39f0d5252ba8b4ea5f4d859"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mx/blobs/sha256:da16d2b3bfe6abf192d4e53a9b06040bce410fe8a39f0d5252ba8b4ea5f4d859",
          "sha256": "da16d2b3bfe6abf192d4e53a9b06040bce410fe8a39f0d5252ba8b4ea5f4d859"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mx/blobs/sha256:da16d2b3bfe6abf192d4e53a9b06040bce410fe8a39f0d5252ba8b4ea5f4d859",
          "sha256": "da16d2b3bfe6abf192d4e53a9b06040bce410fe8a39f0d5252ba8b4ea5f4d859"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mx/blobs/sha256:da16d2b3bfe6abf192d4e53a9b06040bce410fe8a39f0d5252ba8b4ea5f4d859",
          "sha256": "da16d2b3bfe6abf192d4e53a9b06040bce410fe8a39f0d5252ba8b4ea5f4d859"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mx/blobs/sha256:f4a31866cafdac847d1704ee20ff323e2fb3cb983f2cd00d32ca0bd68b9fe00d",
          "sha256": "f4a31866cafdac847d1704ee20ff323e2fb3cb983f2cd00d32ca0bd68b9fe00d"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "python@3.11"
  ],
  "test_dependencies": [
    "openjdk"
  ],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": true,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/mx.rb",
  "ruby_source_checksum": {
    "sha256": "cd60ada2d615582e224aa0f71a29ca28fc11cfbf894658634d57bcd7daf3fc58"
  },
  "date_added": "2021-04-07T11:46:10+00:00",
  "readme": "# README #\n\n`mx` is a command line based tool for managing the development of (primarily) Java code.\nIt includes a mechanism for specifying the dependencies as well as making it simple to build,\ntest, run, update, etc the code and built artifacts. `mx` contains support for developing code\nspread across multiple source repositories. `mx` is written in Python and is extensible.\n\nThe organizing principle of `mx` is a _suite_. A _suite_ is both a directory and the container for the components of the suite.\nA suite component is either a _project_, _library_ or _distribution_. There are various flavors of each of these.\nA suite may import and depend on other suites. For an execution of mx, exactly one suite is the primary suite.\nThis is either the suite in whose directory `mx` is executed or the value of the global `-p` mx option.\nThe set of suites reachable from the primary suite by transitive closure of the imports relation form the set that `mx` operates on.\n\n### Running mx\n\n`mx` can be run directly (i.e., `python mx/mx.py ...`), but is more commonly invoked via the `mx/mx` bash script.\nAdding the `mx/` directory to your PATH simplifies executing `mx`. The `mx/mx.cmd` script should be used on Windows.\n\nThe general form of the `mx` command line is:\n\n```\nmx [global options] [command] [command-specific options]\n```\n\nIf no options or command is specified, `mx` prints information on the available options and commands,\nwhich will include any suite-specific options and commands. Help for a specific command is obtained\nvia `mx help <command>`. Global options are expected to have wide applicability to many commands and as\nsuch precede the command to be executed.\n\nFor an example of `mx` usage, see [README.md](https://github.com/oracle/graal/blob/master/compiler/README.md).\n\nNote: There is a Bash completion script for global options and commands, located in `bash_completion` directory.\nInstall it for example by `source`ing this script in your `~/.bashrc` file. If used, a temporary file\n`/tmp/mx-bash-completion-<project-path-hash>` is created and used for better performance.\n\n[mx-honey](https://github.com/mukel/mx-honey) provides richer completions for `zsh` users.\n\n### Suites\n\nThe definition of a suite and its components is in a file named `suite.py` in the _mx metadata directory_ of the\nprimary suite. This is the directory named `mx.<suite name>` in the suite's top level directory. For example,\nfor the `compiler` suite, it is `mx.compiler`. The format of `suite.py` is JSON with the following extensions:\n* Python multi-line and single-quoted strings are supported\n* Python hash-prefixed comments are supported\n\n### Java projects\n\nJava source code is contained in a `project`. Here's an example of two [Graal compiler projects](https://github.com/oracle/graal/blob/b95d8827609d8b28993bb4468f5daa128a614e52/compiler/mx.compiler/suite.py#L129-L147):\n```python\n\"org.graalvm.compiler.serviceprovider\" : {\n  \"subDir\" : \"src\",\n  \"sourceDirs\" : [\"src\"],\n  \"dependencies\" : [\"JVMCI_SERVICES\"],\n  \"checkstyle\" : \"org.graalvm.compiler.graph\",\n  \"javaCompliance\" : \"8\",\n  \"workingSets\" : \"API,Graal\",\n},\n\n\"org.graalvm.compiler.serviceprovider.jdk9\" : {\n  \"subDir\" : \"src\",\n  \"sourceDirs\" : [\"src\"],\n  \"dependencies\" : [\"org.graalvm.compiler.serviceprovider\"],\n  \"uses\" : [\"org.graalvm.compiler.serviceprovider.GraalServices.JMXService\"],\n  \"checkstyle\" : \"org.graalvm.compiler.graph\",\n  \"javaCompliance\" : \"9+\",\n  \"multiReleaseJarVersion\" : \"9\",\n  \"workingSets\" : \"API,Graal\",\n},\n```\n\nThe `javaCompliance` attribute can be a single number (e.g. `8`), the lower bound of a range (e.g. `8+`) or a fixed range (e.g. `9..11`).\nThis attribute specifies the following information:\n* The maximum Java language level used by the project. This is the lower bound in a range. It is also used as the value for the `-source`\nand `-target` javac options when compiling the project.\n* The JDKs providing any internal JDK API used by the project. A project that does not use any internal JDK API should specify an\nopen range (e.g. `8+`). Otherwise, a JDK matching the exact version or range is required to compile the project.\n\nThe `multiReleaseJarVersion` attribute is explained in the \"Versioning sources for different JDK releases\" section below.\n\n### Java distributions\n\nA distribution encompasses one or more Java projects and enables the class files and related resources from projects\nto be packaged into a jar file. If a distribution declares itself as a module (see [Java modules support](#java-modules-support)),\na JMOD file will also be produced when the distribution is built. The path to the jar file for a distribution is given\nby `mx paths <distribution name>`. For example:\n```\n> mx paths GRAAL\n/Users/dnsimon/graal/graal/compiler/mxbuild/dists/jdk11/graal.jar\n```\n\nWhen building the jar for a distribution, mx will create the layout for the jar in a directory\nthat is a sibling of the distribution's jar path. For example:\n\n```\n├── graal.jar\n├── graal.jar.files\n│   ├── META-INF\n│   └── org\n```\n\nFor efficiency, the files under the `*.files` hierarchy will be symlinks where possible. On Windows,\ncreating symlinks is a privileged operation and so if symlinks cannot be created, files are copied\ninstead. There are plenty of internet resources describing how to elevate your privileges on\nWindows to enable symlinking (e.g. [here](https://www.scivision.dev/windows-symbolic-link-permission-enable/)).\n\n#### Exploded builds\n\nBy default, mx will produce a jar for each distribution. If a distribution defines a module, the jar is further processed\nto make it a [multi-release](#versioning-sources-for-different-jdk-releases)\n[modular jar](https://openjdk.java.net/projects/jigsaw/spec/sotms/#module-artifacts) and a jmod file is also created.\nCreating the jar and jmod files increases build time. For faster development, it's possible to\nleave a distribution in its exploded form, a directory with the same layout as the jar structure. To work in\nthis mode, set `MX_BUILD_EXPLODED=true`. Also, ensure that exactly one\nJDK is specified by the union of `JAVA_HOME` and `EXTRA_JAVA_HOMES` (required since there is no equivalent of\nmulti-release jar support for directories).\n\nUsing `MX_BUILD_EXPLODED=true` is roughly equivalent to\n[building the OpenJDK](https://github.com/openjdk/jdk/blob/master/doc/building.md#running-make) with `make` instead of `make images`.\n\nNote that `MX_BUILD_EXPLODED=true` should not be used when building for deployment.\n\n### Java modules support\n\nA distribution that has a `moduleInfo` attribute will result in a [Java module](https://openjdk.java.net/projects/jigsaw/quick-start) being\nbuilt from the distribution. The `moduleInfo` attribute must specify the name of the module and can include\nother parts of a [module descriptor](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/module/ModuleDescriptor.html).\n\nThis is best shown with examples from [Truffle](https://github.com/oracle/graal/blob/master/truffle/mx.truffle/suite.py)\nand [Graal](https://github.com/oracle/graal/blob/master/compiler/mx.compiler/suite.py):\n\nHere is an extract from the definition of the `TRUFFLE_API` distribution which produces the\n`org.graavm.truffle` module:\n```\n\"TRUFFLE_API\" : {\n    \"moduleInfo\" : {\n        \"name\" : \"org.graalvm.truffle\",\n        \"requires\" : [\n            \"static java.desktop\"\n        ],\n        \"exports\" : [\n            \"com.oracle.truffle.api.nodes to jdk.internal.vm.compiler\",\n            \"com.oracle.truffle.api.impl to jdk.internal.vm.compiler, org.graalvm.locator\",\n            \"com.oracle.truffle.api to jdk.internal.vm.compiler, org.graalvm.locator, com.oracle.graal.graal_enterprise\",\n            \"com.oracle.truffle.api.object to jdk.internal.vm.compiler, com.oracle.graal.graal_enterprise\",\n            \"com.oracle.truffle.object to jdk.internal.vm.compiler, com.oracle.graal.graal_enterprise\",\n        ],\n        \"uses\" : [\n          \"com.oracle.truffle.api.TruffleRuntimeAccess\",\n          \"java.nio.file.spi.FileTypeDetector\",\n          \"com.oracle.truffle.api.impl.TruffleLocator\",\n        ],\n    },\n    ...\n    \"distDependencies\" : [\n        # These distributions must also have `moduleInfo` attributes and the corresponding\n        # modules will be added to the set of `requires` for this module.\n        \"sdk:GRAAL_SDK\"\n    ],\n}\n```\n\nThe `module-info.java` created by `mx` from the above is:\n```\nmodule org.graalvm.truffle {\n    requires java.base;\n    requires static java.desktop;\n    requires java.logging;\n    requires jdk.unsupported;\n    requires transitive org.graalvm.sdk;\n    exports com.oracle.truffle.api to com.oracle.graal.graal_enterprise, jdk.internal.vm.compiler, org.graalvm.locator;\n    exports com.oracle.truffle.api.impl to jdk.internal.vm.compiler, org.graalvm.locator;\n    exports com.oracle.truffle.api.nodes to jdk.internal.vm.compiler;\n    exports com.oracle.truffle.api.object to com.oracle.graal.graal_enterprise, jdk.internal.vm.compiler;\n    exports com.oracle.truffle.object to com.oracle.graal.graal_enterprise, jdk.internal.vm.compiler;\n    uses com.oracle.truffle.api.TruffleRuntimeAccess;\n    uses com.oracle.truffle.api.impl.TruffleLocator;\n    uses com.oracle.truffle.api.object.LayoutFactory;\n    uses java.nio.file.spi.FileTypeDetector;\n    provides com.oracle.truffle.api.object.LayoutFactory with com.oracle.truffle.object.basic.DefaultLayoutFactory;\n    provides org.graalvm.polyglot.impl.AbstractPolyglotImpl with com.oracle.truffle.polyglot.PolyglotImpl;\n    // conceals: com.oracle.truffle.api.debug\n    // conceals: com.oracle.truffle.api.debug.impl\n    // conceals: com.oracle.truffle.api.dsl\n    // conceals: com.oracle.truffle.api.frame\n    // conceals: com.oracle.truffle.api.instrumentation\n    // conceals: com.oracle.truffle.api.interop\n    // conceals: com.oracle.truffle.api.interop.impl\n    // conceals: com.oracle.truffle.api.io\n    // conceals: com.oracle.truffle.api.library\n    // conceals: com.oracle.truffle.api.object.dsl\n    // conceals: com.oracle.truffle.api.profilesLayoutFactory\n    // conceals: com.oracle.truffle.api.source\n    // conceals: com.oracle.truffle.api.utilities\n    // conceals: com.oracle.truffle.object.basic\n    // conceals: com.oracle.truffle.polyglot\n    // jarpath: /Users/dnsimon/hs/graal/truffle/mxbuild/dists/jdk11/truffle-api.jar\n    // dist: TRUFFLE_API\n    // modulepath: org.graalvm.sdk\n}\n```\n\nThe `provides` clauses are automatically derived from the `META-INF/services/` directory in the distribution's jar file.\nThe generation of the `provides` clauses can be modified by utilizing the `ignoredServiceTypes` attribute.\nHere is an extract from the definition of the `TRUFFLE_NFI` distribution, which prevents adding `DefaultExportProvider` and\n`EagerExportProvider` implementations to `provides` clauses.\n```\n\"TRUFFLE_NFI\" : {\n    \"moduleInfo\" : {\n        \"name\" : \"com.oracle.truffle.truffle_nfi\",\n        \"exports\" : [\n            \"com.oracle.truffle.nfi.api\",\n            \"com.oracle.truffle.nfi.backend.spi\",\n            \"com.oracle.truffle.nfi.backend.spi.types\",\n            \"com.oracle.truffle.nfi.backend.spi.util\",\n        ],\n        \"ignoredServiceTypes\" : [\n            \"com.oracle.truffle.api.library.DefaultExportProvider\",\n            \"com.oracle.truffle.api.library.EagerExportProvider\",\n        ],\n    }\n    ...\n}\n```\n\nThe GRAAL distribution shows how a single `exports` attribute can be used to specify multiple `exports` clauses:\n\n```\n\"GRAAL\" : {\n    \"moduleInfo\" : {\n        \"name\" : \"jdk.internal.vm.compiler\",\n        \"exports\" : [\n            # Qualified exports of all packages in GRAAL to modules built from\n            # ENTERPRISE_GRAAL and GRAAL_MANAGEMENT distributions\n            \"* to com.oracle.graal.graal_enterprise,jdk.internal.vm.compiler.management\",\n        ],\n        ...\n    },\n    ...\n},\n```\n\nThis results info a `module-info.java` as that contains qualified exports, a small subset of which are shown below:\n```\nmodule jdk.internal.vm.compiler {\n    ...\n    exports org.graalvm.compiler.api.directives to com.oracle.graal.graal_enterprise, jdk.internal.vm.compiler.management;\n    exports org.graalvm.compiler.api.replacements to com.oracle.graal.graal_enterprise, jdk.internal.vm.compiler.management;\n    exports org.graalvm.compiler.api.runtime to com.oracle.graal.graal_enterprise, jdk.internal.vm.compiler.management;\n    exports org.graalvm.compiler.asm to com.oracle.graal.graal_enterprise, jdk.internal.vm.compiler.management;\n    exports org.graalvm.compiler.asm.aarch64 to com.oracle.graal.graal_enterprise, jdk.internal.vm.compiler.management;\n    exports org.graalvm.compiler.asm.amd64 to com.oracle.graal.graal_enterprise, jdk.internal.vm.compiler.management;\n    ...\n```\n\nThe jars build for a distribution are in `<suite>/mxbuild/dists/jdk*/`. The modular jars are in the `jdk<N>` directories\nwhere `N >= 9`. There is a modular jar built for each JDK version denoted by the `javaCompliance` values of the distribution's\nconstituent projects.\n\n#### Specifying required modules\n\nIf a project with a Java compliance >= 9 uses a package from a module other than `java.base`, it must specify these\nadditional modules with the `requires` attribute. For example:\n```\n\"org.graalvm.compiler.hotspot.management.jdk11\" : {\n    ...\n    \"requires\" : [\n        \"jdk.management\"\n    ],\n    \"javaCompliance\" : \"11+\",\n    ...\n},\n```\nThe `requires` attribute is used for two purposes:\n* As input to the `requires` attribute of the descriptor for the module\n  encapsulating the project.\n* To derive a value for the `--limit-modules` javac option\n  which restricts the modules observable during compilation. This is required to support\n  separate compilation of projects that are part of a JDK module. For example,\n  `org.graalvm.compiler.hotspot.amd64` depends on `org.graalvm.compiler.hotspot`\n  and the classes of both these projects are contained in the `jdk.internal.vm.compiler`\n  module. When compiling `org.graalvm.compiler.hotspot.amd64`, we must compile against\n  classes in `org.graalvm.compiler.hotspot` as they might be different (i.e., newer)\n  than the classes in `jdk.internal.vm.compiler`. The value of `--limit-modules` will\n  omit `jdk.internal.vm.compiler` in this case to achieve this hiding. In the absence\n  of a `requires` attribute, only the `java.base` module is observable when compiling\n  on JDK 9+.\n\n#### Use of concealed packages\n\nConcealed packages are those defined by a module but not exported by the module.\nIf a project uses concealed packages, it must specify a `requiresConcealed` attribute\ndenoting the concealed packages it accesses. For example:\n```\n\"org.graalvm.compiler.lir.aarch64.jdk11\" : {\n    \"requiresConcealed\" : {\n        \"jdk.internal.vm.ci\" : [\n            \"jdk.vm.ci.aarch64\",\n            \"jdk.vm.ci.code\",\n        ],\n    },\n    \"javaCompliance\" : \"11+\",\n},\n```\nThis will result in `--add-exports=jdk.internal.vm.ci/jdk.vm.ci.aarch64=ALL-UNNAMED` and\n`--add-exports=jdk.internal.vm.ci/jdk.vm.ci.code=ALL-UNNAMED` being added to the `javac`\ncommand line when the `org.graalvm.compiler.lir.aarch64.jdk11` project is compiled by a\nJDK 9+ `javac`.\n\nNote that the `requires` and `requiresConcealed` attributes only apply to projects with\na minimum `javaCompliance` value of 9 or greater. When `javac` from jdk 9+ is used in\nconjunction with `-source 8` (as will be the case for projects with a minimum `javaCompliance`\nof 8 or less), all classes in the JDK are observable. However, if an 8 project would need a\n`requires` or `requiresConcealed` attribute were it a 9+ project, then these attributes must be\napplied to any module containing the project. For example,\n`org.graalvm.compiler.serviceprovider` has `\"javaCompliance\" : \"8+\"` and contains\ncode that imports `sun.misc.Unsafe`. Since `org.graalvm.compiler.serviceprovider`\nis part of the `jdk.internal.vm.compiler` module defined by the `GRAAL` distribution,\n`GRAAL` must include a `requires` attribute in its `moduleInfo` attribute:\n```\n\"GRAAL\" : {\n    \"moduleInfo\" : {\n        \"name\" : \"jdk.internal.vm.compiler\",\n        \"requires\" : [\"jdk.unsupported\"],\n        ...\n    }\n}\n```\n\nModules can be removed from the JDK. For example, [JDK-8255616](https://bugs.openjdk.java.net/browse/JDK-8255616)\nremoved the `jdk.aot`, `jdk.internal.vm.compile` and `jdk.internal.vm.compile.management` modules from standard JDK binaries\nas of JDK 16. Any `requiresConcealed` attributes targeting these modules must use a Java compliance qualifier so that\nthe relevant sources can still be built on JDK 16:\n```\n\"com.oracle.svm.enterprise.jdk11.test\": {\n    ...\n    \"requiresConcealed\": {\n        \"jdk.internal.vm.compiler@11..15\": [\n            \"org.graalvm.compiler.serviceprovider\"\n        ],\n        ...\n    }\n}\n```\n\nAs shown above, a module name in a `requiresConcealed` attribute can be qualified by appending `@` followed by\na valid Java compliance specifier. Such a module will be ignored if the JDK version used to compile the sources\nis not matched by the specified Java compliance. This also works for the regular `requires` attribute. E.g.\n```\n    \"requires\": [\n        ...\n        \"jdk.scripting.nashorn@11..14\",\n    ],\n    ...\n```\nis needed to ensure that a given module requires module `jdk.scripting.nashorn` only when the specified compliance matches.\n\n### Selecting JDKs\n\nSpecifying JDKs to mx is done via the `--java-home` and `--extra-java-homes` options or\nvia the `JAVA_HOME` and `EXTRA_JAVA_HOMES` environment variables.\nAn option has precedence over the corresponding environment variable.\nMx comes with a [`select_jdk.py`](select_jdk.py) helper that simplifies\nswitching between different values for `JAVA_HOME` and `EXTRA_JAVA_HOMES`.\n\n#### Install a JDK with fetch-jdk\n\nThe `mx fetch-jdk` command can download and install JDKs defined in JSON files. See `mx fetch-jdk --help` for more detail.    \n\n### Generated artifacts\n\nThe build artifacts of mx are in directories separate from the source file directories.\nOutput for platform dependent suite constituents is under a directory whose name\nreflects the current platform. For example:\n\n```\n<suite>/mxbuild/<project>               # Platform independent project\n<suite>/mxbuild/darwin-amd64/<project>  # Platform dependent project\n```\n\nPartitioning build output to take the platform into account has the following advantages:\n* A file system shared between different platforms (e.g. via NFS or virtualization host/guest\n file system sharing) keeps its platform dependent output separated.\n\nUnless `MX_OUTPUT_ROOT_INCLUDES_CONFIG=false` then:\n* The output for JDK dependent suite constituents is under a directory reflecting the\n JDK(s) specified by `JAVA_HOME` and `EXTRA_JAVA_HOMES`.\n* The output for platform and JDK dependent suite constituents is under a directory\n reflecting both the platform and JDKs.\n\nFor example:\n\n```\n<suite>/mxbuild/jdk16+8/<project>               # JDK dependent project\n<suite>/mxbuild/darwin-amd64/<project>          # Platform dependent project\n<suite>/mxbuild/darwin-amd64-jdk16+8/<project>  # Platform and JDK dependent project\n```\n\nPartitioning build output to take JDK configuration into account has the following advantages:\n* Avoids re-compilation after changing the value of `JAVA_HOME` or `EXTRA_JAVA_HOMES` in the\n case where no sources have changed since `mx build` was last executed with the new values.\n* Avoid issues related to API changes between JDK versions. If only public JDK API was\n used by Java projects, this could be solved with the `--release` option introduced by\n [JEP 247](https://openjdk.java.net/jeps/247). However, a significant number of mx managed\n projects use JDK internal API in which case `--release` does not help.\n\nNote that IDE configurations ignore `MX_OUTPUT_ROOT_INCLUDES_CONFIG` and so must be regenerated after\nchanging the value of `JAVA_HOME` or `EXTRA_JAVA_HOMES` if you want output generated by an IDE to be\nvisible to subsequent mx commands.\n\nThe JDK configuration dependent layout of build artifacts is best shown by an example.\nConsider the following directory tree containing `graal` and `truffleruby`\nrepositories where `graal` defines the suites `compiler`, `truffle` and `sdk`\nand `truffleruby` defines a single `truffleruby` suite:\n```\nws\n├── graal\n│   ├── compiler\n│   ├── sdk\n│   └── truffle\n└── truffleruby\n```\n\nWith this layout when working on macOS with `$JAVA_HOME` set to a JDK 8\nand `$EXTRA_JAVA_HOMES` set to a JDK 16, after running `mx build`, the layout will be:\n\n```\nws\n├── graal\n│   ├── compiler\n│   │   └── mxbuild\n│   │       ├── darwin-amd64\n│   │       │   └── <project>\n│   │       └── jdk8+16\n│   │           └── <project>\n│   ├── sdk\n│   │   └── mxbuild\n│   │       ├── darwin-amd64\n│   │       │   └── <project>\n│   │       └── jdk8+16\n│   │           └── <project>\n│   └── truffle\n│       └── mxbuild\n│           ├── darwin-amd64\n│           │   └── <project>\n│           └── jdk8+16\n│               └── <project>\n└── truffleruby\n    └── mxbuild\n        ├── darwin-amd64\n        │   └── <project>\n        └── jdk8+16\n            └── <project>\n```\n\n### Unit testing with Junit <a name=\"junit\"></a>\n\nThe `unittest` command supports running Junit tests in `mx` suites.\n\nThe unit test harness will use any `org.junit.runner.notification.RunListener`\nobjects available via `java.util.ServiceLoader.load()`.\n\nExecuting tests on JDK 9 or later can be complicated if the tests access\npackages that are publicly available in JDK 8 or earlier but are not public as\nof JDK 9. That is, the packages are *concealed* by their declaring module. Such\ntests can be compiled simply enough by specifying their Java compliance as\n\"1.8=\". Running the tests on JDK 9 however requires that the concealed packages\nare exported to the test classes. To achieve this, an `AddExports` annotation\nshould be applied to the test class requiring the export or to any of its super\nclasses or super interfaces. To avoid the need for a dependency on mx, unittest\nharness simply looks for an annotation named `AddExports` that matches the\nfollowing definition:\n\n```\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/**\n * Specifies packages concealed in JDK modules used by a test. The mx unit test runner will ensure\n * the packages are exported to the module containing annotated test class.\n */\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\npublic @interface AddExports {\n    /**\n     * The qualified name of the concealed package(s) in {@code <module>/<package>} format (e.g.,\n     * \"jdk.vm.ci/jdk.vm.ci.code\").\n     */\n    String[] value() default \"\";\n}\n```\n\n#### Coverage testing with JaCoCo\n\nTo enable code coverage testing with JaCoCo, the JaCoCo agent needs to be\ninjected through VM command line arguments. For this, mx provides the\nconvenience method `mx_gate.get_jacoco_agent_args()` which returns a list of\nthose arguments if coverage is requested (e.g. by using\n`mx gate --jacocout ...`), otherwise `None`.\n[Here](https://github.com/oracle/graal/blob/07412155ab8edc6b67b819c215f0d6dc986aef59/compiler/mx.compiler/mx_compiler.py#L746)\nis an example how it is used to enable coverage testing of the sources of the\nGraal compiler.\nRunning code with the JaCoCo agent enabled outputs a `jacoco.exec` which can be\nconverted into an HTML or CSV report with the `mx jacocoreport` command.\n\nThe packages or classes to be included in the JaCoCo report can be customized\nby importing `mx_gate` and using the helper functions:\n\n- `add_jacoco_includes` (adds one or more package patterns to the list of packages to include in the report)\n- `add_jacoco_excludes` (adds one or more package patterns to the list of packages to exclude from the report)\n- `add_jacoco_excluded_annotations` (adds one or more annotations to the list of annotations that will cause a class to be excluded from the report)\n\nThe include patterns can include an explicit trailing `.*` wildcard match. The exclude patterns have an implicit trailing wildcard match. Annotation names added to the annotation exclusion list must start with an `@` character.\n\nAs an example from `mx_compiler.py`:\n```\nmx_gate.add_jacoco_includes(['org.graalvm.*'])\nmx_gate.add_jacoco_excludes(['com.oracle.truffle.*'])\nmx_gate.add_jacoco_excluded_annotations(['@Snippet', '@ClassSubstitution'])\n```\nThis adds classes from packages starting with org.graalvm to the report, excludes classes in packages startng with com.oracle.truffle and also excludes classes annotated with `@Snippet` and `@ClassSubstitution`.\n\nTo omit excluded classes from the JaCoCo data and report use the gate option `--jacoco-omit-excluded`.\n\n### Versioning sources for different JDK releases\n\nMx includes support for multiple versions of a Java class. The mechanism is inspired by and\nsimilar to [multi-release jars](https://docs.oracle.com/javase/10/docs/specs/jar/jar.html#multi-release-jar-files).\nA versioned Java class has a base version and one or more versioned copies. The public signature of each\ncopy (i.e., methods and fields accessed from outside the source file) must be identical.\nNote that the only API that is visible from the JAR is the one from the base version.\n\nVersioned classes for JDK 9 or later need to be in a project with a `javaCompliance` greater than\nor equal to 9 and a `multiReleaseJarVersion` attribute whose value is also greater or equal to 9.\nThe versioned project must have the base project as a dependency.\n\nVersioned classes for JDK 8 or earlier need to be in a project with a `javaCompliance` less than or\nequal to 8 and an `overlayTarget` attribute denoting the base project.\n\n### Profiling with proftool\n\nMx includes `proftool`, a utility for capturing and examining profiles of Java programs.\nFurther details are [here](README-proftool.md).\n\n### URL rewriting\n\nMx includes support for the primary suite to be able to override the source URLs of imported suites.\nThe suite level `urlrewrites` attribute allows regular expression URL rewriting, and, optionally, digest rewriting. For example:\n```\n  \"urlrewrites\" : [\n    {\n      \"https://git.acme.com/(.*).git\" : {\n        \"replacement\" : r”https://my.company.com/foo-git-cache/\\1.git\",\n        \"digest\" : \"sha1:da39a3ee5e6b4b0d3255bfef95601890afd80709\",\n      }\n    },\n    {\n      \"https://hg.acme.com/(.*)\" : {\n        \"replacement\" : r”https://my.company.com/foo-hg-cache/\\1\",\n      }\n    }\n  ],\n```\nThe rules are applied in definition order. Only rewrite rules from the primary suite are used meaning a suite may have to replicate the rewrite rules of its suite dependencies.\nThis allows the primary suite to retain full control over where its dependencies are sourced from.\n\nRewrite rules can also be specified by the `MX_URLREWRITES` environment variable.\nThe value of this variable must either be a JSON object describing a single rewrite rule, a JSON array describing a list of rewrite rules or a file containing one of these JSON values.\nRewrites rules specified by `MX_URLREWRITES` are applied after rules specified by the primary suite.\n\n### IDE configuration generation\n\nMx supports generating IDE configurations using the `mx ideinit` command.\nThere are also specific commands that generate configurations for Eclipse (`mx eclipseinit`), Netbeans (`mx netbeansinit`) or IntelliJ (`mx intellijinit`) individually.\nPlease see [here](docs/IDE.md) for details.\n\n### Environment variable processing\n\nSuites might require various environment variables to be defined for\nthe suite to work and mx provides `env` files to cache this\ninformation for a suite.  Each suite can have an `env` file in\n_suite_/mx._suite_/`env` and a default env file can be provided for\nthe user in ~/.mx/env.  Env files are loaded in the following order\nand override any value provided by the shell environment.\n\n1.  ~/.mx/`env` is loaded first.\n\n2.  The primary suite's `env` file is loaded before loading of the suites begins.\n\n3.  The env files of any subsuites are loaded in a depth first fashion\n    such that subsuite `env` files are loaded before their dependents.\n\n4.  The primary suite's `env` file is reloaded so that it overrides\n    any definitions provided by subsuites.\n\nThe `-v` option to `mx` will show the loading of `env` files during suite parsing.\n\n### Multiple suites per repository\n\nSometimes it might be convenient to group multiple suites inside a single repository.\nIn particular, this helps ensure that all these suites are synchronized and tested together.\n\n* A suite inside a 'big repo' must be in a directory that has the same name as the suite\n* If you depend on a suite that is inside a 'big repo', you have to set `subdir` to `True` in the suite import.\n* If you depend on a suite that is in the same 'big repo' as the current suite, you should not specify `urls` in the suite import.\n* In order to `sclone` something that is inside a 'big repo' you have to use the `--subdir` argument for `sclone` which tells in which directory the suite that you want to clone is\n* In order to dynamically import a suite that is inside a 'big repo' you have to use `--dynamicimport bigrepo/suite` (e.g., `--dynamicimport graal-enterprise/substratrevm`)\n\nNote that a suite in a \"big repo\" should not have a dependency to a suite in a different repository that in turn has a transitive dependency to the same \"big repo\".\nIn other words, there should be no back-and-forth to the same repo.\n\n\n### Preview features\n\nJava projects may use language or runtime features which are considered _preview features_ in certain Java versions, in which case preview features must be enabled for compilation (`--enable-preview`).\nThis is specified using the `javaPreviewNeeded` attribute, which is a version specification in the same format as `javaCompliance`, for example: `\"javaPreviewNeeded\": \"19..20\"`\nIf the compiling JDK matches that version or version range, preview features are enabled for compilation.\nGiven that javac and the JVM must be on the same JDK version for preview features (see [here](https://nipafx.dev/enable-preview-language-features/#same-version-for-feature-compiler-and-jvm) for details),\ncompiling a project with preview features will force the javac `-source` and `-target` options to `N` where `N` is\nthe minimum of:\n* the version of the JDK being used for compilation (i.e. `JAVA_HOME`) and\n* the lowest version where `--enable-preview` is not needed.\n\nThe following table of examples should make this clearer:\n\n| JDK | javaPreviewNeeded | -target / -source | --enable-preview |\n| ----|-------------------|-------------------|------------------|\n| 19  | 19+               | 19                | Yes              |\n| 20  | 19+               | 20                | Yes              |\n| 20  | 19                | 20                | No               |\n| 21  | 19                | 20                | No               |\n| 22  | 20                | 21                | No               |\n| 22  | 19..20            | 21                | No               |\n\n### System dependent configuration\n\nA project can specify system dependent configuration options depending on which\noperating system and architecture are in use. The following example shows how\nthe `bar` property can be set to `A` on Windows and `B` on all other operating\nsystems.\n\n```python\n\"project\" : {\n  \"foo\" : \"A\",\n  \"os\" : {\n    \"windows\" : {\n      \"bar\" : \"A\"\n    },\n    \"<others>\" : {\n      \"bar\" : \"B\"\n    }\n  }\n}\n```\n\nCommonly supported operating system names are `darwin`, `linux` and `windows`.\nThe `<others>` value can be used as a wildcard to match any other operating\nsystem. A warning is emitted if no operating system is matched.\n\nThe `arch` property can be used to alter the configuration depending on which\nsystem architecture is used. Common examples of examples of system architectures\nare `amd64` and `aarch64`. The following example shows how the `bar` property\ncan be set to `A` on amd64 and to `B` on all other platforms.\n\n```python\n\"project\" : {\n  \"foo\" : \"A\",\n  \"arch\" : {\n    \"amd64\" : {\n      \"bar\" : \"A\"\n    },\n    \"<others>\" : {\n      \"bar\" : \"B\"\n    }\n  }\n}\n```\n\nConfiguration options that should depend on both the operating system and the\narchitecture value can be specified using the `os_arch` property as follows. The\nfollowing configuration example sets the property `bar` to `A` on amd64 linux\nsystems, and to `B` for all other systems.\n\n```python\n\"project\" : {\n  \"foo\" : \"A\",\n  \"os_arch\" : {\n    \"linux\" : {\n      \"amd64\" : {\n        \"bar\" : \"A\"\n      },\n      \"<others>\" : {\n        \"bar\" : \"B\"\n      }\n    },\n    \"<others>\" : {\n      \"<others>\" : {\n        \"bar\" : \"B\"\n      }\n    }\n  }\n}\n```\n\nIt is only possible to specify one of either the `os`, `arch` or `os_arch`\noptions for any project."
}
