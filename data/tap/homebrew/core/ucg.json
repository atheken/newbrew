{
  "name": "ucg",
  "full_name": "ucg",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Tool for searching large bodies of source code (like grep)",
  "license": "GPL-3.0-or-later",
  "homepage": "https://github.com/gvansickle/ucg",
  "versions": {
    "stable": "0.3.3",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/gvansickle/ucg/releases/download/0.3.3/universalcodegrep-0.3.3.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "116d832bbc743c7dd469e5e7f1b20addb3b7a08df4b4441d59da3acf221caf2d"
    },
    "head": {
      "url": "https://github.com/gvansickle/ucg.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/ucg/blobs/sha256:afbb657bc288953de91236ba95f3c609ba4e411e8602f0efda43770422436c43",
          "sha256": "afbb657bc288953de91236ba95f3c609ba4e411e8602f0efda43770422436c43"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/ucg/blobs/sha256:3ffc7fcd491433d72238d232acc46f48e08e1c85b40a147f67dabb7de8ec830d",
          "sha256": "3ffc7fcd491433d72238d232acc46f48e08e1c85b40a147f67dabb7de8ec830d"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/ucg/blobs/sha256:ea472cd9d4ecff1791a8df22e8207387957cad4af9b367698887772b98f434ff",
          "sha256": "ea472cd9d4ecff1791a8df22e8207387957cad4af9b367698887772b98f434ff"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/ucg/blobs/sha256:2e18cfd35ea53d5326a69f3d21cf32c2e850cd864735e3e45cd645d85e350ec7",
          "sha256": "2e18cfd35ea53d5326a69f3d21cf32c2e850cd864735e3e45cd645d85e350ec7"
        },
        "mojave": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/ucg/blobs/sha256:2b073d5a0ee4cb2fe71822ce27c014b00974298cfc656f1fe0279f58bde398f9",
          "sha256": "2b073d5a0ee4cb2fe71822ce27c014b00974298cfc656f1fe0279f58bde398f9"
        },
        "high_sierra": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/ucg/blobs/sha256:3642e741bc9ffd1cf1982bfc2c373e0ed54a417c08ac46f43e4cf8a09a0a1a8a",
          "sha256": "3642e741bc9ffd1cf1982bfc2c373e0ed54a417c08ac46f43e4cf8a09a0a1a8a"
        },
        "sierra": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/ucg/blobs/sha256:dddf2d62a2e582a9356a4da6434ddb0432ce6d6b1d50a5dc6728f9b6254531a5",
          "sha256": "dddf2d62a2e582a9356a4da6434ddb0432ce6d6b1d50a5dc6728f9b6254531a5"
        },
        "el_capitan": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/ucg/blobs/sha256:e4699a681ae9d2e9d68ce7da85fc050907070bc9650fad0c4f76faf991f3a422",
          "sha256": "e4699a681ae9d2e9d68ce7da85fc050907070bc9650fad0c4f76faf991f3a422"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ucg/blobs/sha256:2e2db85a685f30bdda52dbc415278d3e070fc3b8aa8dd5529cede481d5e5e8eb",
          "sha256": "2e2db85a685f30bdda52dbc415278d3e070fc3b8aa8dd5529cede481d5e5e8eb"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "autoconf",
    "automake",
    "libtool",
    "pkg-config"
  ],
  "dependencies": [
    "pcre2"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [
    {
      "name": "arch",
      "cask": null,
      "download": null,
      "version": "x86_64",
      "contexts": [],
      "specs": [
        "stable",
        "head"
      ]
    }
  ],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/ucg.rb",
  "ruby_source_checksum": {
    "sha256": "c9a5d152473d525836116230e5f8293a0465c7ee901bdaa812fe6f975cdb4245"
  },
  "date_added": "2016-12-31T17:13:27+00:00",
  "readme": "# UniversalCodeGrep\n\n[![License](https://img.shields.io/badge/License-GPL3-red.svg)](COPYING)\n[![Travis-CI Build Status](https://travis-ci.org/gvansickle/ucg.svg?branch=master)](https://travis-ci.org/gvansickle/ucg)\n<a href=\"https://scan.coverity.com/projects/gvansickle-ucg\">\n  <img alt=\"Coverity Scan Build Status\"\n       src=\"https://scan.coverity.com/projects/7451/badge.svg\"/>\n</a>\n\nUniversalCodeGrep (ucg) is an extremely fast grep-like tool specialized for searching large bodies of source code.\n\n## Table of Contents\n\n* [Introduction](#introduction)\n  * [Speed](#speed)\n    * [Benchmark: '\\#include\\\\s\\+\"\\.\\*\"' on Boost source](#benchmark-includes-on-boost-source)\n* [License](#license)\n* [Installation](#installation)\n  * [Fedora Copr Repository](#fedora-copr-repository)\n  * [Arch Linux User Repository](#arch-linux-user-repository)\n  * [OS X](#os-x)\n  * [Building the Source Tarball](#building-the-source-tarball)\n    * [\\*BSD Note](#bsd-note)\n    * [Build Prerequisites](#build-prerequisites)\n      * [gcc and g\\+\\+ versions 4\\.8 or greater\\.](#gcc-and-g-versions-48-or-greater)\n      * [PCRE: libpcre2\\-8 version 10\\.20 or greater, or libpcre version 8\\.21 or greater\\.](#pcre-libpcre2-8-version-1020-or-greater-or-libpcre-version-821-or-greater)\n    * [OS X Prerequisites](#os-x-prerequisites)\n  * [Supported OSes and Distributions](#supported-oses-and-distributions)\n* [Usage](#usage)\n  * [Command Line Options](#command-line-options)\n    * [Searching](#searching)\n    * [Search Output](#search-output)\n    * [File presentation](#file-presentation)\n    * [File/directory inclusion/exclusion:](#filedirectory-inclusionexclusion)\n    * [File type specification:](#file-type-specification)\n    * [Performance Tuning:](#performance-tuning)\n    * [Miscellaneous:](#miscellaneous)\n    * [Informational options:](#informational-options)\n* [Configuration (\\.ucgrc) Files](#configuration-ucgrc-files)\n  * [Format](#format)\n  * [Location and Read Order](#location-and-read-order)\n* [User\\-Defined File Types](#user-defined-file-types)\n  * [Extension List Filter](#extension-list-filter)\n  * [Literal Filename Filter](#literal-filename-filter)\n  * [Glob filter](#glob-filter)\n* [Author](#author)\n\n<!-- TOC Created by [gh-md-toc](https://github.com/ekalinin/github-markdown-toc.go) -->\n\n\n## Introduction\n\nUniversalCodeGrep (`ucg`) is an extremely fast grep-like tool specialized for searching large bodies of source code.  It is intended to be largely command-line compatible with [`Ack`](http://beyondgrep.com/), to some extent with [`ag`](http://geoff.greer.fm/ag/), and where appropriate with `grep`.  Search patterns are specified as PCRE regexes.\n\n### Speed\n`ucg` is intended to address the impatient programmer's code searching needs.  `ucg` is written in C++20 and takes advantage of the concurrency (and other) support of the language to increase scanning speed while reducing reliance on third-party libraries and increasing portability.  Regex scanning is provided by the [PCRE2 library](http://www.pcre.org/), with its [JIT compilation feature](http://www.pcre.org/current/doc/html/pcre2jit.html) providing a huge performance gain on most platforms.  Directory tree traversal is performed by multiple threads, reducing the impact of waiting for I/O completions.  Critical functions are implemented with hand-rolled vectorized (SSE2/4.2/etc.) versions selected at program load-time based on what the system supports, with non-vectorized fallbacks.\n\nAs a consequence of its overall design for maximum concurrency and speed, `ucg` is extremely fast.  As an example, under Fedora 25, one of the benchmarks in the test suite which scans the Boost 1.58.0 source tree with `ucg` and a selection of similar utilities yields the following results:\n\n#### Benchmark: '#include\\s+\".*\"' on Boost source\n\n| Command | Program Version | Elapsed Real Time, Average of 10 Runs | Num Matched Lines | Num Diff Chars |\n|---------|-----------------|---------------------------------------|-------------------|----------------|\n| `/usr/bin/ucg --noenv --cpp '#include\\s+.*' ~/src/boost_1_58_0` | 0.3.0 | 0.228973 | 9511 | 189 |\n| `/usr/bin/rg -Lun -t cpp '#include\\s+.*' ~/src/boost_1_58_0` | 0.2.9 | 0.167586 | 9509 | 0 |\n| `/usr/bin/ag  --cpp '#include\\s+.*' ~/src/boost_1_58_0` | 0.32.0 | 2.29074 | 9511 | 189 |\n| `grep -Ern --color --include=\\*.cpp --include=\\*.hpp --include=\\*.h --include=\\*.cc --include=\\*.cxx '#include\\s+.*' ~/src/boost_1_58_0` | grep (GNU grep) 2.26 | 0.370082 | 9509 | 0 |\n\nNote that UniversalCodeGrep is in fact somewhat faster than `grep` itself, even when `grep` is only using [Extended Regular Expressions](http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap09.html#tag_09_04).  And `ucg` certainly wins the ease-of-use contest.\n\n## License\n\n[GPL (Version 3 only)](https://github.com/gvansickle/ucg/blob/master/COPYING)\n\n## Installation\n\nUniversalCodeGrep packages are currently available for Fedora 23/24/25/26, Arch Linux, and OS X.\n\n<!-- COMING SOON\n### Ubuntu PPA\n\nIf you are a Ubuntu user, the easiest way to install UniversalCodeGrep is from the Launchpad PPA [here](https://launchpad.net/~grvs/+archive/ubuntu/ucg).  To install from the command line:\n\n```sh\n# Add the PPA to your system:\nsudo add-apt-repository ppa:grvs/ucg\n# Pull down the latest lists of software from all archives:\nsudo apt-get update\n# Install ucg:\nsudo apt-get install universalcodegrep\n```\n-->\n\n### Fedora Copr Repository\n\nIf you are a Fedora user, the easiest way to install UniversalCodeGrep is from the Fedora Copr-hosted dnf/yum repository [here](https://copr.fedoraproject.org/coprs/grvs/UniversalCodeGrep).  Installation is as simple as:\n\n```sh\n# Add the Copr repo to your system:\nsudo dnf copr enable grvs/UniversalCodeGrep\n# Install UniversalCodeGrep:\nsudo dnf install universalcodegrep\n```\n\n### Arch Linux User Repository\n\nIf you are a Arch Linux user, the easiest way to install UniversalCodeGrep is from the Arch Linux User Repository (AUR) [here](https://aur.archlinux.org/packages/ucg/).  Installation is as simple as:\n\n```sh\n# Install using yaourt:\nyaourt -S ucg\n```\nOr you can install manually:\n```sh\n# Install manually:\ncd /tmp/\ncurl -L -O https://aur.archlinux.org/cgit/aur.git/snapshot/ucg.tar.gz\ntar -xvf ucg.tar.gz\ncd ycg\nmakepkg -sri\n```\n<!-- COMING SOON\n\n### openSUSE Binary RPMs\n\nBinary RPMs for openSUSE are available [here](https://github.com/gvansickle/ucg/releases/tag/0.3.3).\n\n-->\n\n### OS X\n\n`ucg` has been accepted into `homebrew-core`, so installing it is as easy as:\n\n```sh\nbrew install ucg\n```\n\n### Building the Source Tarball\n\nIf a `ucg` package is not available for your platform, UniversalCodeGrep can be built and installed from the distribution tarball (available [here](https://github.com/gvansickle/ucg/releases/download/0.3.3/universalcodegrep-0.3.3.tar.gz)) in the standard autotools manner:\n\n```sh\ntar -xaf universalcodegrep-0.3.3.tar.gz\ncd universalcodegrep-0.3.3\n./configure\nmake\nmake install\n```\n\nThis will install the `ucg` executable in `/usr/local/bin`.  If you wish to install it elsewhere or don't have permissions on `/usr/local/bin`, specify an installation prefix on the `./configure` command line:\n\n```sh\n./configure --prefix=~/<install-root-dir>\n```\n\n> #### *BSD Note\n>\n> On at least PC-BSD 10.3, g++48 can't find its own libstdc++ without a little help.  Configure the package like this:\n> ```sh\n> ./configure LDFLAGS='-Wl,-rpath=/usr/local/lib/gcc48'\n> ```\n\n#### Build Prerequisites\n\n##### `gcc` and `g++` versions 4.8 or greater.\n\nVersions of `gcc` prior to 4.8 do not have sufficiently complete C++11 support to build `ucg`.  `clang`/`clang++` is also known to work, but is not the primary development compiler.\n\n##### PCRE: `libpcre2-8` version 10.20 or greater, or `libpcre` version 8.21 or greater.\n\nOne or both of these should be available from your Linux/OS X/*BSD distro's package manager. You'll need the `-devel` versions if they're packaged separately.  Prefer `libpcre2-8`; while `ucg` will currently work with either PCRE2 or PCRE, you'll get better performance with PCRE2, and further development will be concentrated on PCRE2.\n\n> #### OS X Prerequisites\n>\n> OS X additionally requires the installation of `argp-standalone`, which is normally part of the `glibc` library on Linux systems.  This can\n> be installed along with a pcre2 library from Homebrew:\n> ```sh\n> $ brew update\n> $ brew install pcre2 argp-standalone\n> ```\n\n### Supported OSes and Distributions\n\nUniversalCodeGrep 0.3.3 should build and run on any reasonably POSIX-compliant platform where the prerequisites are available.  It has been built and tested on the following OSes/distros:\n\n- Linux:\n  - Fedora 23, 24, 25, 26\n  - Arch Linux\n  - Ubuntu 16.04 (Xenial), 14.04 (Trusty Tahr)\n- OS X:\n  - OS X 10.10, 10.11, 10.12, with Xcode 6.4, 7.3.1, 8gm, 8.1, and 8.2 resp.\n- *BSDs:\n  - TrueOS (nee PC-BSD) 12.0 (FreeBSD 12.0)\n- Windows:\n  - Windows 7 + Cygwin 64-bit\n\nNote that at this time, only x86-64/amd64 architectures are fully supported.  32-bit x86 builds are also occasionally tested.\n\n## Usage\n\nInvoking `ucg` is the same as with `ack` or `ag`:\n\n```sh\nucg [OPTION...] PATTERN [FILES OR DIRECTORIES]\n```\n\n...where `PATTERN` is a PCRE-compatible regular expression.\n\nIf no `FILES OR DIRECTORIES` are specified, searching starts in the current directory.\n\n### Command Line Options\n\nVersion 0.3.3 of `ucg` supports a significant subset of the options supported by `ack`.  In general, options specified later\non the command line override options specified earlier on the command line.\n\n#### Searching\n| Option | Description |\n|----------------------|------------------------------------------|\n| `--[no]smart-case`   | Ignore case if PATTERN is all lowercase (default: enabled). |\n| `-i, --ignore-case`  | Ignore case distinctions in PATTERN.                        |\n| `-Q, --literal`      | Treat all characters in PATTERN as literal.                 |\n| `-w, --word-regexp`  | PATTERN must match a complete word.                         |\n\n####  Search Output\n| Option | Description |\n|----------------------|------------------------------------------|\n| `--column`   | Print column of first match after line number. |\n| `--nocolumn` | Don't print column of first match (default).   |\n\n#### File presentation\n| Option | Description |\n|----------------------|------------------------------------------|\n| `--color, --colour`     | Render the output with ANSI color codes.    |\n| `--nocolor, --nocolour` | Render the output without ANSI color codes. |\n\n#### File/directory inclusion/exclusion:\n| Option | Description |\n|----------------------|------------------------------------------|\n| `--[no]ignore-dir=name, --[no]ignore-directory=name`     | [Do not] exclude directories with this name.        |\n| `--exclude=GLOB, --ignore=GLOB` | Files matching GLOB will be ignored. |\n| `--ignore-file=FILTER:FILTERARGS` |  Files matching FILTER:FILTERARGS (e.g. ext:txt,cpp) will be ignored. |\n| `--include=GLOB`                       | Only files matching GLOB will be searched. |\n| `-k, --known-types`                              | Only search in files of recognized types (default: on). |\n| `-n, --no-recurse`                               | Do not recurse into subdirectories.        |\n| `-r, -R, --recurse`                              | Recurse into subdirectories (default: on). |\n| `--type=[no]TYPE`                                | Include only [exclude all] TYPE files.  Types may also be specified as `--[no]TYPE`: e.g., `--cpp` is equivalent to `--type=cpp`.  May be specified multiple times. |\n\n#### File type specification:\n| Option | Description |\n|----------------------|------------------------------------------|\n| `--type-add=TYPE:FILTER:FILTERARGS` | Files FILTERed with the given FILTERARGS are treated as belonging to type TYPE.  Any existing definition of type TYPE is appended to. |\n| `--type-del=TYPE`                   | Remove any existing definition of type TYPE. |\n| `--type-set=TYPE:FILTER:FILTERARGS` | Files FILTERed with the given FILTERARGS are treated as belonging to type TYPE.  Any existing definition of type TYPE is replaced. |\n\n#### Performance Tuning:\n| Option | Description |\n|----------------------|------------------------------------------|\n| `--dirjobs=NUM_JOBS`   |  Number of directory traversal jobs (std::thread<>s) to use.  Default is 2. |\n| `-j, --jobs=NUM_JOBS`       | Number of scanner jobs (std::thread<>s) to use.  Default is the number of cores on the system. |\n\n#### Miscellaneous:\n| Option | Description |\n|----------------------|------------------------------------------|\n| `--noenv`         | Ignore .ucgrc files.                            |\n\n#### Informational options:\n| Option | Description |\n|----------------------|------------------------------------------|\n| `-?, --help`                      | give this help list                 |\n| `--help-types, --list-file-types` | Print list of supported file types. |\n| `--usage`                         | give a short usage message          |\n| `-V, --version`                   | print program version               |\n\n## Configuration (.ucgrc) Files\n\nUniversalCodeGrep supports configuration files with the name `.ucgrc`, in which command-line options can be stored on a per-user and per-directory-hierarchy basis.\n\n### Format\n\n`.ucgrc` files are text files with a simple format.  Each line of text can be either:\n\n1. A single-line comment.  The line must start with a `#` and the comment continues for the rest of the line.\n2. A command-line parameter.  This must be exactly as if it was given on the command line.\n\n### Location and Read Order\n\nWhen `ucg` is invoked, it looks for command-line options from the following locations in the following order:\n\n1. The `.ucgrc` file in the user's `$HOME` directory, if any.\n2. The first `.ucgrc` file found, if any, by walking up the component directories of the current working directory.  This traversal stops at either the user's `$HOME` directory or the root directory.  This is called the project config file, and is intended to live in the top-level directory of a project directory hierarchy.\n3. The command line itself.\n\nOptions read later will override earlier options.\n\n## User-Defined File Types\n\n`ucg` supports user-defined file types with the `--type-set=TYPE:FILTER:FILTERARGS` and `--type-add=TYPE:FILTER:FILTERARGS` command-line options.  Three FILTERs are currently supported, `ext` (extension list), `is` (literal filename), and `glob` (glob pattern).\n\n### Extension List Filter\n\nThe extension list filter allows you to specify a comma-separated list of file extensions which are to be considered as belonging to file type TYPE.\nExample:\n`--type-set=type1:ext:abc,xqz,def`\n\n### Literal Filename Filter\n\nThe literal filename filter simply specifies a single literal filename which is to be considered as belonging to file type TYPE.\nExample:\n`--type-add=autoconf:is:configure.ac`\n\n### Glob filter\n\nThe glob filter allows you to specify a glob pattern to match against filenames.  If the glob matches, the file is considered as belonging to the file type TYPE.\nExample:\n`--type-set=mk:glob:?akefile*`\n\n## Author\n\n[Gary R. Van Sickle](https://github.com/gvansickle)"
}
