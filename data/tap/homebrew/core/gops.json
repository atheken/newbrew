{
  "name": "gops",
  "full_name": "gops",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Tool to list and diagnose Go processes currently running on your system",
  "license": "BSD-3-Clause",
  "homepage": "https://github.com/google/gops",
  "versions": {
    "stable": "0.3.27",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/google/gops/archive/refs/tags/v0.3.27.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "1d5b8b0979c284d29d85f44aba6d0a5175059568aa698a242c5bc1d772263746"
    },
    "head": {
      "url": "https://github.com/google/gops.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gops/blobs/sha256:4b962ab71b74211a8cc4d421450597e73300b8a66027d8b3fa8ad55557f53de2",
          "sha256": "4b962ab71b74211a8cc4d421450597e73300b8a66027d8b3fa8ad55557f53de2"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gops/blobs/sha256:1c2bf5ee24c3ba38d15715d5a7e01c0aaad063fc6264303ea8522bd42be089ef",
          "sha256": "1c2bf5ee24c3ba38d15715d5a7e01c0aaad063fc6264303ea8522bd42be089ef"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gops/blobs/sha256:6f0f151581fd4308ba90ec3eb1dd62171fe40e9b3a0a04258b5793cb5167c9fd",
          "sha256": "6f0f151581fd4308ba90ec3eb1dd62171fe40e9b3a0a04258b5793cb5167c9fd"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gops/blobs/sha256:809f885c8caf1b2f3b22dff4d33dfae0d2646c4a4b2291e4fb25d85c1fecb7df",
          "sha256": "809f885c8caf1b2f3b22dff4d33dfae0d2646c4a4b2291e4fb25d85c1fecb7df"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gops/blobs/sha256:8c134a4ed12158c406cd3483f9d0802ddb7277c44597a13e8b453c0e9e482cc8",
          "sha256": "8c134a4ed12158c406cd3483f9d0802ddb7277c44597a13e8b453c0e9e482cc8"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gops/blobs/sha256:cc9b769c28f074605a2c2c6e58493b4cfa4e4808018cbd9725ebf13326a687ce",
          "sha256": "cc9b769c28f074605a2c2c6e58493b4cfa4e4808018cbd9725ebf13326a687ce"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gops/blobs/sha256:3499eec0a4fd2cf8fd974bde8c82ed9ec0c3b49566756b5a06f5f234e3d472db",
          "sha256": "3499eec0a4fd2cf8fd974bde8c82ed9ec0c3b49566756b5a06f5f234e3d472db"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [
    "go"
  ],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/gops.rb",
  "ruby_source_checksum": {
    "sha256": "f7f070c9efc9874d5e870520afc36528f256e43e742b74795efc002cfb16e12d"
  },
  "date_added": "2022-04-09T17:58:42+00:00",
  "readme": "# gops\n\n[![GitHub Action Status](https://github.com/google/gops/workflows/Tests/badge.svg)](https://github.com/google/gops/actions?query=workflow%3ATests)\n[![GoDoc](https://godoc.org/github.com/google/gops?status.svg)](https://godoc.org/github.com/google/gops)\n\ngops is a command to list and diagnose Go processes currently running on your system.\n\n```sh\n$ gops\n983   980    uplink-soecks  go1.9   /usr/local/bin/uplink-soecks\n52697 52695  gops           go1.10  /Users/jbd/bin/gops\n4132  4130   foops        * go1.9   /Users/jbd/bin/foops\n51130 51128  gocode         go1.9.2 /Users/jbd/bin/gocode\n```\n\n## Installation\n\nTo install the latest version of gops:\n\n```sh\n$ go get github.com/google/gops\n```\n\nor\n\n```sh\n$ go install github.com/google/gops@latest\n```\n\nTo install a specific gops version, for example v0.3.19:\n\n```sh\n$ go install github.com/google/gops@v0.3.19\n```\n\n## Diagnostics\n\nFor processes that start the diagnostics agent, gops can report\nadditional information such as the current stack trace, Go version, memory\nstats, etc.\n\nIn order to start the diagnostics agent, see the [hello example](https://github.com/google/gops/blob/master/examples/hello/main.go).\n\n``` go\npackage main\n\nimport (\n\t\"log\"\n\t\"time\"\n\n\t\"github.com/google/gops/agent\"\n)\n\nfunc main() {\n\tif err := agent.Listen(agent.Options{}); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\ttime.Sleep(time.Hour)\n}\n```\n\nOtherwise, you could set `GOPS_CONFIG_DIR` environment variables to assign your config dir.\nDefault, gops will use the current user's home directory(AppData on windows).\n\n### Manual\n\nIt is possible to use gops tool both in local and remote mode.\n\nLocal mode requires that you start the target binary as the same user that runs gops binary.\nTo use gops in a remote mode you need to know target's agent address.\n\nIn Local mode use process's PID as a target; in Remote mode target is a `host:port` combination.\n\n#### Listing all processes running locally\n\nTo print all go processes, run `gops` without arguments:\n\n```sh\n$ gops\n983   980    uplink-soecks  go1.9   /usr/local/bin/uplink-soecks\n52697 52695  gops           go1.10  /Users/jbd/bin/gops\n4132  4130   foops        * go1.9   /Users/jbd/bin/foops\n51130 51128  gocode         go1.9.2 /Users/jbd/bin/gocode\n```\n\nThe output displays:\n* PID\n* PPID\n* Name of the program\n* Go version used to build the program\n* Location of the associated program\n\nNote that processes running the agent are marked with `*` next to the PID (e.g. `4132*`).\n\n#### $ gops \\<pid\\> [duration]\n\nTo report more information about a process, run `gops` followed by a PID:\n\n```sh\n$ gops <pid>\nparent PID:\t5985\nthreads:\t27\nmemory usage:\t0.199%\ncpu usage:\t0.139%\nusername:\tjbd\ncmd+args:\t/Applications/Splice.app/Contents/Resources/Splice Helper.app/Contents/MacOS/Splice Helper -pid 5985\nlocal/remote:\t127.0.0.1:56765 <-> :0 (LISTEN)\nlocal/remote:\t127.0.0.1:56765 <-> 127.0.0.1:50955 (ESTABLISHED)\nlocal/remote:\t100.76.175.164:52353 <-> 54.241.191.232:443 (ESTABLISHED)\n```\n\nIf an optional duration is specified in the format as expected by\n[`time.ParseDuration`](https://golang.org/pkg/time/#ParseDuration), the CPU\nusage for the given time period is reported in addition:\n\n```sh\n$ gops <pid> 2s\nparent PID:\t5985\nthreads:\t27\nmemory usage:\t0.199%\ncpu usage:\t0.139%\ncpu usage (2s):\t0.271%\nusername:\tjbd\ncmd+args:\t/Applications/Splice.app/Contents/Resources/Splice Helper.app/Contents/MacOS/Splice Helper -pid 5985\nlocal/remote:\t127.0.0.1:56765 <-> :0 (LISTEN)\nlocal/remote:\t127.0.0.1:56765 <-> 127.0.0.1:50955 (ESTABLISHED)\nlocal/remote:\t100.76.175.164:52353 <-> 54.241.191.232:443 (ESTABLISHED)\n```\n\n#### $ gops tree\n\nTo display a process tree with all the running Go processes, run the following command:\n\n```sh\n$ gops tree\n\n...\n├── 1\n│   └── 13962 [gocode] {go1.9}\n├── 557\n│   └── 635 [com.docker.supervisor] {go1.9.2}\n│       └── 638 [com.docker.driver.amd64-linux] {go1.9.2}\n└── 13744\n    └── 67243 [gops] {go1.10}\n```\n\n#### $ gops stack (\\<pid\\>|\\<addr\\>)\n\nIn order to print the current stack trace from a target program, run the following command:\n\n\n```sh\n$ gops stack (<pid>|<addr>)\ngops stack 85709\ngoroutine 8 [running]:\nruntime/pprof.writeGoroutineStacks(0x13c7bc0, 0xc42000e008, 0xc420ec8520, 0xc420ec8520)\n\t/Users/jbd/go/src/runtime/pprof/pprof.go:603 +0x79\nruntime/pprof.writeGoroutine(0x13c7bc0, 0xc42000e008, 0x2, 0xc428f1c048, 0xc420ec8608)\n\t/Users/jbd/go/src/runtime/pprof/pprof.go:592 +0x44\nruntime/pprof.(*Profile).WriteTo(0x13eeda0, 0x13c7bc0, 0xc42000e008, 0x2, 0xc42000e008, 0x0)\n\t/Users/jbd/go/src/runtime/pprof/pprof.go:302 +0x3b5\ngithub.com/google/gops/agent.handle(0x13cd560, 0xc42000e008, 0xc420186000, 0x1, 0x1, 0x0, 0x0)\n\t/Users/jbd/src/github.com/google/gops/agent/agent.go:150 +0x1b3\ngithub.com/google/gops/agent.listen()\n\t/Users/jbd/src/github.com/google/gops/agent/agent.go:113 +0x2b2\ncreated by github.com/google/gops/agent.Listen\n\t/Users/jbd/src/github.com/google/gops/agent/agent.go:94 +0x480\n# ...\n```\n\n#### $ gops memstats (\\<pid\\>|\\<addr\\>)\n\nTo print the current memory stats, run the following command:\n\n```sh\n$ gops memstats (<pid>|<addr>)\n```\n\n#### $ gops gc (\\<pid\\>|\\<addr\\>)\n\nIf you want to force run garbage collection on the target program, run `gc`.\nIt will block until the GC is completed.\n\n#### $ gops setgc (\\<pid\\>|\\<addr\\>) <perc>\n\nSets the garbage collection target to a certain percentage.\nThe following command sets it to 10%:\n\n``` sh\n$ gops setgc (<pid>|<addr>) 10\n```\nThe following command turns off the garbage collector:\n\n```sh\n$ gops setgc (<pid>|<addr>) off\n```\n\n#### $ gops version (\\<pid\\>|\\<addr\\>)\n\ngops reports the Go version the target program is built with, if you run the following:\n\n```sh\n$ gops version (<pid>|<addr>)\ndevel +6a3c6c0 Sat Jan 14 05:57:07 2017 +0000\n```\n\n#### $ gops stats (\\<pid\\>|\\<addr\\>)\n\nTo print the runtime statistics such as number of goroutines and `GOMAXPROCS`.\n\n#### Profiling\n\n\n##### Pprof\n\ngops supports CPU and heap pprof profiles. After reading either heap or CPU profile,\nit shells out to the `go tool pprof` and let you interactively examine the profiles.\n\nTo enter the CPU profile, run:\n\n```sh\n$ gops pprof-cpu (<pid>|<addr>)\n```\n\nTo enter the heap profile, run:\n\n```sh\n$ gops pprof-heap (<pid>|<addr>)\n```\n\n##### Execution trace\n\ngops allows you to start the runtime tracer for 5 seconds and examine the results.\n\n```sh\n$ gops trace (<pid>|<addr>)\n```"
}
