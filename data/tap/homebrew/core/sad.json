{
  "name": "sad",
  "full_name": "sad",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "CLI search and replace | Space Age seD",
  "license": "MIT",
  "homepage": "https://github.com/ms-jpq/sad",
  "versions": {
    "stable": "0.4.23",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/ms-jpq/sad/archive/refs/tags/v0.4.23.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "bdb366b6c3a3cb069d4d4acb33faeff6f6c40d38ed4bbf66fafbe46e71cbafda"
    },
    "head": {
      "url": "https://github.com/ms-jpq/sad.git",
      "branch": "senpai"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sad/blobs/sha256:11cc4875f8a0e61f5460c32b690b3383a05977c1781757eb5fb2d4f1f0af551f",
          "sha256": "11cc4875f8a0e61f5460c32b690b3383a05977c1781757eb5fb2d4f1f0af551f"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sad/blobs/sha256:6e1baefaec3e780a624158013dc5f43363402d814f285cf6b6695acf1865b9af",
          "sha256": "6e1baefaec3e780a624158013dc5f43363402d814f285cf6b6695acf1865b9af"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sad/blobs/sha256:1604ed184a03f92bf1fa7d8305b8160b3976b5e4a3239efdde084b595d880ae1",
          "sha256": "1604ed184a03f92bf1fa7d8305b8160b3976b5e4a3239efdde084b595d880ae1"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sad/blobs/sha256:2fdbada4bd1ff10afcb0701481ab11f939a166c1cec125af80e7b383dbcb442b",
          "sha256": "2fdbada4bd1ff10afcb0701481ab11f939a166c1cec125af80e7b383dbcb442b"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sad/blobs/sha256:db6d9b36c126b985c3e2346b5ce8a6df779e80ee9ce2b8deff4517e5bc0820ec",
          "sha256": "db6d9b36c126b985c3e2346b5ce8a6df779e80ee9ce2b8deff4517e5bc0820ec"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sad/blobs/sha256:8bf2d0ff89c1ea56cec9e067628d57b00be4b143a437bc2cce47d9e8933e01bd",
          "sha256": "8bf2d0ff89c1ea56cec9e067628d57b00be4b143a437bc2cce47d9e8933e01bd"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sad/blobs/sha256:2115afbd70c36285540df21c3de43d145570f9cd032ec664d970b609e81efc35",
          "sha256": "2115afbd70c36285540df21c3de43d145570f9cd032ec664d970b609e81efc35"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    {
      "python": "build"
    }
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/sad.rb",
  "ruby_source_checksum": {
    "sha256": "e86f37ee28384790a49a4ae68b269efee996927baf7498031d2a0fcf321072c7"
  },
  "date_added": "2023-04-12T16:55:37-04:00",
  "readme": "# [SAD!](https://ms-jpq.github.io/sad)\n\n**Space Age seD**\n\n## What does it do?\n\nBasically `sad` is a **Batch File Edit** tool.\n\nIt will show you a really nice diff of proposed changes _before_ you commit them.\n\nUnlike `sed`, you can double check before you fat finger your edit.\n\n## Preview (with fzf)\n\nSelectively replace `std` -> `joseph joestar` in the `sad` repo.\n\nYou can pick and choose which changes to apply.\n\nYou can also choose the clustering factor for changes using `--unified=<n>`. (Same as in GNU diff)\n\n![preview1](https://github.com/ms-jpq/sad/raw/senpai/previews/preview1.gif)\n\n**If you have `delta` installed, try `--pager 'delta -s'` for side by side view**\n\n## Preview (no fzf)\n\nReplace all`'\"(\\d+)\"'` -> `'ðŸŒˆ$1ðŸŒˆ'` in the `chromium` repo.\n\nuse `--commit` or `-k` to commit changes all at once.\n\n`-c` is taken because `sad` has to trick `fzf` into thinking it's `bash` :)\n\n![preview2](https://github.com/ms-jpq/sad/raw/senpai/previews/preview2.gif)\n\n## How to use sad?\n\n**with fzf**\n\n```bash\nexport GIT_PAGER='<highlighter-of-your-choice>'\n# ^ can be done in your bash/zsh/rc file.\nfind \"$FIND_ARGS\" | sad '<pattern>' '<replacement>'\n```\n\n**without fzf**\n\n```bash\nfind \"$FIND_ARGS\" | sad '<pattern>' '<replacement>' | highlighter-of-your-choice\n```\n\nor\n\n```bash\nfind \"$FIND_ARGS\" | sad '<pattern>' '<replacement>' --pager=<highlighter-of-your-choice>\n```\n\nor\n\n```bash\nexport GIT_PAGER='<highlighter-of-your-choice>'\nfind \"$FIND_ARGS\" | sad '<pattern>' '<replacement>'\n```\n\n**gotta go fast**\n\nIf you wanna go fast.\n\n- preview to verify you really want the changes.\n\n- run with `--commit`, and redirect `stdout` to a file or `/dev/null`\n\n---\n\n## Requirements\n\nTechnically none of these are \"required\", but they make `sad` so much happier.\n\nIf you install the things below, `sad` will automatically use them. It's progressive enhancement!\n\n### Commandline fuzzer\n\n[**fzf**](https://github.com/junegunn/fzf)\n\n`sad` does not come with a UI, it uses `fzf` to perform selection.\n\n### Diff Colorizer\n\nAny `git` compatible colourizer would work. I prefer these two:\n\n[**delta**](https://github.com/dandavison/delta)\n\n`fd <files> | sad <pattern> <replacement> | delta`\n\n[**diff-so-fancy**](https://github.com/so-fancy/diff-so-fancy)\n\n`fd <files> | sad <pattern> <replacement> | diff-so-fancy | less`\n\n## Environmental Variables\n\n| Name        | Function                               |\n| ----------- | -------------------------------------- |\n| `GIT_PAGER` | `sad` will use the same pager as `git` |\n\n## Flags\n\n| Name             | Function                                  |\n| ---------------- | ----------------------------------------- |\n| `-f` `--flags`   | Regex flags, see below                    |\n| `-k` `--commit`  | No preview, write changes to file         |\n| `-0` `--read0`   | Use `\\x00` as stdin delimiter             |\n| `-e` `--exact`   | String literal mode                       |\n| `-p` `--pager`   | Colourizing program, disable = `never`    |\n| `--fzf`          | Additional Fzf options, disable = `never` |\n| `-u` `--unified` | Same as in GNU `diff`, affects hunk size  |\n\n## Regex Flags\n\nBy default, `sad` uses smartcase, and multiline matching.\n\nFor each options, lowercase toggles on and uppercase toggles off.\n\nie. `i` => on, `I` => off\n\n| Name | Function                                                                             |\n| ---- | ------------------------------------------------------------------------------------ |\n| `i`  | case insensitive (works for `--exact` mode as well)                                  |\n| `m`  | multiline: `^` `$` match each line                                                   |\n| `s`  | allow `.` match `\\n`                                                                 |\n| `u`  | swap the meaning of `*` and `*?` patterns, (normally `*` is lazy and `*?` is greedy) |\n| `x`  | ignore whitespace and allow `#` comments                                             |\n\n## Exit Codes\n\n| Code  | Meaning                                                                                                                |\n| ----- | ---------------------------------------------------------------------------------------------------------------------- |\n| `0`   | Good                                                                                                                   |\n| `1`   | Bad                                                                                                                    |\n| `130` | Interrupted (ie. user cancel), or if using `fzf`, [it will always exit `130`](https://github.com/ms-jpq/sad/issues/5). |\n\n## GET SAD NOW!\n\nFor scripting, use the following format:\n\n```bash\n# replace `x86_64-unknown-linux-gnu.deb` with your desired package\nwget 'https://github.com/ms-jpq/sad/releases/latest/download/x86_64-unknown-linux-gnu.deb'\n```\n\n### Homebrew:\n\n```bash\nbrew install sad\n```\n\n### Scoop:\n\n```bash\nscoop install sad\n```\n\n### Snap Store:\n\ncoming soon...\n\n### Distribution packages:\n\n##### Debian/Ubuntu:\n\nYou can download `sad` deb packages from the [github release page](https://github.com/ms-jpq/sad/releases/latest).\n\n##### Arch Linux:\n\nThere is an official Arch Linux package that can be installed via `pacman`:\n\n```\npacman -Syu sad\n```\n\n##### Other:\n\nMissing a package for your favourite distribution? Let us know!\n\n### Compile from source:\n\n##### Requirements:\n\nTo compile sad yourself you'll have to make sure you have\n[Rust](https://www.rust-lang.org/) and `cargo` installed.\n\n##### Install instructions:\n\nTo install cargo from source you can run the following commands:\n\n```bash\ncargo install --locked --all-features \\\n  --git https://github.com/ms-jpq/sad --branch senpai\n```\n\nIf you want to install it in a specific directory you can provide the `--root`\nflag, like so:\n\n```bash\ncargo install --locked --all-features --root=\"/usr/bin/\" \\\n  --git https://github.com/ms-jpq/sad --branch senpai\n```\n\n## What about stdin -> stdout\n\nIf you just want to edit the shell stream, I would recommend [`sd`](https://github.com/chmln/sd), it uses the same concept, but its more for in stream edits. `sad` was inspired by my initial usage of `sd`.\n\n```bash\ncommand1 | sd '<pattern>' '<replacement>' | command2\n```\n\n[`ripgrep`](https://github.com/BurntSushi/ripgrep) with `--replace` also works\n\n```bash\ncommand1 | rg --passthru --replace '<replacement>' -- '<pattern>' | command2\n```\n\nTake note however, `rg` will `exit 1`, it it finds no matches.\n\n## Thank yous\n\nSpecial thanks to [MadeOfMagicAndWires](https://github.com/MadeOfMagicAndWires) for their generous contribution for maintaining the AUR package.\n\n## Bugs\n\nPlease file an issue if you see one `<3`"
}
