{
  "name": "drake",
  "full_name": "drake",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Data workflow tool meant to be 'make for data'",
  "license": "EPL-1.0",
  "homepage": "https://github.com/Factual/drake",
  "versions": {
    "stable": "1.0.3",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/Factual/drake/archive/refs/tags/1.0.3.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "49c22b84f4059c1af905f92e276ac8a7aa80a8c236aca4c06df9b6c676b2cff7"
    },
    "head": {
      "url": "https://github.com/Factual/drake.git",
      "branch": "develop"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/drake/blobs/sha256:98db9a4ae8a9345944f0b5388a35036c9a2384137f7a7db044ebc59cb5ebc117",
          "sha256": "98db9a4ae8a9345944f0b5388a35036c9a2384137f7a7db044ebc59cb5ebc117"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "openjdk@8"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [
    {
      "name": "arch",
      "cask": null,
      "download": null,
      "version": "x86_64",
      "contexts": [],
      "specs": [
        "stable",
        "head"
      ]
    }
  ],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/drake.rb",
  "ruby_source_checksum": {
    "sha256": "06b2546f1d42034b35ca23ddf810da42e5a4a23e155d04e13e3259992933a8b5"
  },
  "date_added": "2014-03-08T14:29:22-08:00",
  "readme": "# Drake\n\n<img src=\"http://gdurl.com/2jhD\" align=\"right\"/>\n\nDrake is a simple-to-use, extensible, text-based data workflow tool that organizes command execution around data and its dependencies. Data processing steps are defined along with their inputs and outputs and Drake automatically resolves their dependencies and calculates:\n\n * which commands to execute (based on file timestamps)\n * in what order to execute the commands (based on dependencies)\n\nDrake is similar to _GNU Make_, but designed especially for data workflow management. It has HDFS support, allows multiple inputs and outputs, and includes a host of features designed to help you bring sanity to your otherwise chaotic data processing workflows.\n\n## Drake walk-through\n\nIf you like screencasts, check out this [Drake walk-through video](http://www.youtube.com/watch?v=BUgxmvpuKAs) recorded by Artem Boytsov, Drake's primary designer:\n\n<a href=\"http://www.youtube.com/watch?v=BUgxmvpuKAs\">\n  <img src=\"https://lh6.googleusercontent.com/-wOmqvTkHHk0/UQBnQaVcXJI/AAAAAAAAAC4/apFtmcPXCPQ/s800/Screen%2520Shot%25202013-01-23%2520at%25202.41.43%2520PM.png\" width=\"320\" height=\"195\"/>\n</a>\n\n## Installation\n\nDrake has been tested under Linux, Mac OS X and Windows 8. We've not tested it on other operating systems.\n\nDrake installs itself on the first run of the `drake` shell script; there is no\nseparate install script.  Follow these instructions to install drake manually:\n\n1. Make sure you have [Java](https://www.java.com) version 6 or later.\n2. [Download the `drake` script from the `master` branch](https://raw.githubusercontent.com/Factual/drake/master/bin/drake)\n of this project.\n3. Place the `drake` script on your `$PATH`. (`~/bin` is a good choice if it is on your path.)\n4. Set it to be executable. (`chmod 755 ~/bin/drake`)\n5. Run it (`drake`) \n\n### Homebrew\n\nIf you're on a Mac you can alternatively use [Homebrew](http://brew.sh/) to install Drake:\n```\nbrew install drake\n```\n\n### Upgrade Drake\n\nStarting with Drake version 1.0.0, once you have Drake installed you can easily upgrade your version of Drake by running `drake --upgrade`. The latest version of Drake will be downloaded and installed for you.\n\n### Download or build the uberjar\n\nYou can build Drake from source or run from a prebuilt jar. [Detailed instructions](https://github.com/Factual/drake/wiki/Download-or-build-the-uberjar)\n\n\n### Use Drake as a Clojure library\n\nYou can programmatically use Drake from your Clojure project by using [Drake's Clojure front end](https://github.com/Factual/drake/wiki/A-Clojure-Frontend-to-Drake). Your project.clj dependencies should include the latest Drake library, e.g.:\n\n```clojure\n[factual/drake \"1.0.3\"]\n```\n\n### Faster startup time\n\nThe JVM startup time can be a nuisance. To reduce startup time, we recommend using the way cool [Drip](https://github.com/flatland/drip). Please see [the Drake with Drip](https://github.com/Factual/drake/wiki/Faster-startup:-Drake-with-Drip) wiki page.\n\n## Basic Usage\n\nThe [wiki](https://github.com/Factual/drake/wiki) is the home for Drake's documentation, but here are simple notes on usage:\n\nTo build a specific target (and any out-of-date dependencies, if necessary):\n\n```bash\n$ drake mytarget\n```\n\nTo build a target and everything that depends on it (a.k.a. \"down-tree\" mode):\n\n```bash\n$ drake ^mytarget\n```\n\nTo build a specific target only, without any dependencies, up or down the tree:\n\n```bash\n$ drake =mytarget\n```\n\nTo force build a target:\n\n```bash\n$ drake +mytarget\n```\n\nTo force build a target and all its downtree dependencies:\n\n```bash\n$ drake +^mytarget\n```\n\nTo force build the entire workflow:\n\n```bash\n$ drake +...\n```\n\nTo exclude targets:\n\n```bash\n$ drake ... -sometarget -anothertarget\n```\n\nBy default, Drake will look for `./Drakefile`. The simplest way to run your workflow is to name your workflow file `Drakefile`, and make sure you're in the same directory. Then, simply:\n\n```bash\n$ drake\n```\n\nTo specify the workflow file explicitly, use `-w` or `--workflow`. E.g.:\n\n```bash\n$ drake -w /myworkflow/my-workflow.drake\n```\n\nUse `drake --help` for the full list of options.\n\n## Documentation, etc.\n\nThe [wiki](https://github.com/Factual/drake/wiki) is the home for Drake's documentation.\n\nA lot of work went into designing and specifying Drake. To prove it, here's [the 60 page specification and user manual](https://docs.google.com/document/d/1bF-OKNLIG10v_lMes_m4yyaJtAaJKtdK0Jizvi_MNsg/edit). It's stored in Google Docs, and we encourage everyone to use its superb commenting feature to provide feedback. Just select the text you want to comment on, and click Insert -> Comment (Ctrl + Alt + M on Windows, Cmd + Option + M on Mac). It can also be downloaded as a PDF.\n\nThere are annotated workflow examples in the demos directory.\n\nThere's a [Google Group for Drake](https://groups.google.com/forum/?fromgroups#!forum/drake-workflow) where you can ask questions. And if you found a bug or want to submit a feature request, go to [Drake's GitHub issues page](https://github.com/Factual/drake/issues?sort=created&state=open).\n\n## Visualize your workflow\nSee more [detail](https://github.com/Factual/drake/wiki/Visualize-your-workflow)\n\n<img src=\"https://cloud.githubusercontent.com/assets/855457/7533038/509e37f8-f5a0-11e4-8c2e-8951272811af.png\"/>\n\n## Asynchronous Execution of Steps\n\nPlease see [the wiki page on async](https://github.com/Factual/drake/wiki/Async-Execution-of-Steps).\n\n## Plugins\n\nDrake has a plugin mechanism, allowing developers to publish and use custom plugins that extend Drake. See the [Plugin wiki page](https://github.com/Factual/drake/wiki/Plugins) for details.\n\n## HDFS Compatibility\n\nDrake provides HDFS support by allowing you to specify inputs and outputs like `hdfs:/my/big_file.txt`.\n\nIf you plan to use Drake with HDFS, please see [the wiki page on HDFS Compatibility](https://github.com/Factual/drake/wiki/HDFS-Compatibility).\n\n## Amazon S3 Compatibility\n\nThanks to [Chris Howe](https://github.com/howech), Drake now has basic compatibility with Amazon S3 by allowing you to specify\ninputs and outputs like `s3://bucket/path/to/object`.\n\nIf you plan to use Drake with S3, please see [the wiki doc on S3 Compatibility](https://github.com/Factual/drake/wiki/S3-Compatibility).\n\n## Drake on the REPL\n\nYou can use Drake from your Clojure REPL, via `drake.core/run-workflow`. Please see [the Drake on the REPL wiki page](https://github.com/Factual/drake/wiki/Drake-on-the-REPL) for more details.\n\n## Stuff outside this repo\n\nThanks to [Lars Yencken](https://github.com/larsyencken), we now have [Vim syntax support](https://bitbucket.org/larsyencken/vim-drake-syntax) for Drake:\n\n<img src=\"https://lh3.googleusercontent.com/-mqNpFqf7P0k/UQoXkpAqr1I/AAAAAAAAADU/U5zrvozVmzE/s400/image.png\"/>\n\nAlso thanks to [Lars Yencken](https://github.com/larsyencken), [utilities for making life easier in Python with Drake workflows](https://pypi.python.org/pypi/drakeutil).\n\nCourtesy of [@daguar](https://gist.github.com/daguar), an [alternative approach to installing Drake on Mac OS X](https://gist.github.com/daguar/5368778).\n\n[Original blog post](http://blog.factual.com/introducing-drake-a-kind-of-make-for-data) announcing Drake's open source release\n\n[An epic knock-down-drag-out set of threads on Hacker News](https://news.ycombinator.com/item?id=5110921) discussing the design merits of Drake\n\n\n\n## License\n\nSource Copyright Â© 2012-2015 Factual, Inc.\n\nDistributed under the Eclipse Public License, the same as Clojure uses. See the file COPYING."
}
