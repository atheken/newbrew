{
  "name": "s3scanner",
  "full_name": "s3scanner",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Scan for misconfigured S3 buckets across S3-compatible APIs!",
  "license": "MIT",
  "homepage": "https://github.com/sa7mon/S3Scanner",
  "versions": {
    "stable": "3.0.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/sa7mon/S3Scanner/archive/refs/tags/v3.0.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "bf6d40f919be2284840980ab874cd9a345c3ea948902b14504f225d9ef1af953"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/s3scanner/blobs/sha256:71ae001ea9ab31eff87a50a7642ca56d0e39e991dcf5bad334777afaa317193d",
          "sha256": "71ae001ea9ab31eff87a50a7642ca56d0e39e991dcf5bad334777afaa317193d"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/s3scanner/blobs/sha256:71ae001ea9ab31eff87a50a7642ca56d0e39e991dcf5bad334777afaa317193d",
          "sha256": "71ae001ea9ab31eff87a50a7642ca56d0e39e991dcf5bad334777afaa317193d"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/s3scanner/blobs/sha256:71ae001ea9ab31eff87a50a7642ca56d0e39e991dcf5bad334777afaa317193d",
          "sha256": "71ae001ea9ab31eff87a50a7642ca56d0e39e991dcf5bad334777afaa317193d"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/s3scanner/blobs/sha256:7800f52f9d4858d4c6deb66b0b330756d35fffb18a5654a4b83298a07f883cb5",
          "sha256": "7800f52f9d4858d4c6deb66b0b330756d35fffb18a5654a4b83298a07f883cb5"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/s3scanner/blobs/sha256:7800f52f9d4858d4c6deb66b0b330756d35fffb18a5654a4b83298a07f883cb5",
          "sha256": "7800f52f9d4858d4c6deb66b0b330756d35fffb18a5654a4b83298a07f883cb5"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/s3scanner/blobs/sha256:7800f52f9d4858d4c6deb66b0b330756d35fffb18a5654a4b83298a07f883cb5",
          "sha256": "7800f52f9d4858d4c6deb66b0b330756d35fffb18a5654a4b83298a07f883cb5"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/s3scanner/blobs/sha256:856a2954c1c74c2d209bc99d00a7a22658b1cf55094985fccbb981a6ee009be1",
          "sha256": "856a2954c1c74c2d209bc99d00a7a22658b1cf55094985fccbb981a6ee009be1"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/s3scanner.rb",
  "ruby_source_checksum": {
    "sha256": "d1bac8779632bb41fed71a3afb90837f39176dc1b8f230e9b72fdc4e6d5710bd"
  },
  "date_added": "2023-07-30T16:00:00-04:00",
  "readme": "<h1 align=\"center\">\nS3Scanner\n</h1>\n\n<p align=\"center\">\n<a href=\"https://opensource.org/licenses/MIT\"><img src=\"https://img.shields.io/badge/License-MIT-yellow.svg\"/></a>\n<a href=\"https://github.com/sponsors/sa7mon/\"><img src=\"https://img.shields.io/github/sponsors/sa7mon\" /></a>\n<a href=\"https://github.com/sa7mon/S3Scanner/issues\"><img src=\"https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat\"/></a>\n<a href=\"https://github.com/sa7mon/S3Scanner/releases/latest\"><img src=\"https://img.shields.io/github/v/release/sa7mon/s3scanner\" /></a>\n</p>\n<p align=\"center\">\n<a href=\"#features\">Features</a> - <a href=\"#usage\">Usage</a> - <a href=\"#quick-start\">Quick Start</a> - <a href=\"#installation\">Installation</a> - <a href=\"https://github.com/sa7mon/S3Scanner/discussions\">Discuss</a> \n</p>\n<br>\nA tool to find open S3 buckets in AWS or other cloud providers:\n\n- AWS\n- DigitalOcean\n- DreamHost\n- GCP\n- Linode\n- Custom\n\n<img alt=\"demo\" src=\"https://github.com/sa7mon/S3Scanner/assets/3712226/cfa16801-2a44-4ae9-ad85-9dd466390cd9\">\n\n# Features\n\n* ‚ö°Ô∏è Multi-threaded scanning\n* üî≠ Supports many built-in S3 storage providers or custom\n* üïµÔ∏è‚Äç‚ôÄÔ∏è Scans all bucket permissions to find misconfigurations\n* üíæ Save results to Postgres database\n* üêá Connect to RabbitMQ for automated scanning at scale\n* üê≥ Docker support\n\n# Usage\n\n```\nINPUT: (1 required)\n  -bucket        string  Name of bucket to check.\n  -bucket-file   string  File of bucket names to check.\n  -mq                    Connect to RabbitMQ to get buckets. Requires config file key \"mq\". Default: \"false\"\n\nOUTPUT:\n  -db       Save results to a Postgres database. Requires config file key \"db.uri\". Default: \"false\"\n  -json     Print logs to stdout in JSON format instead of human-readable. Default: \"false\"\n\nOPTIONS:\n  -enumerate           Enumerate bucket objects (can be time-consuming). Default: \"false\"\n  -provider    string  Object storage provider: aws, custom, digitalocean, dreamhost, gcp, linode - custom requires config file. Default: \"aws\"\n  -threads     int     Number of threads to scan with. Default: \"4\"\n\nDEBUG:\n  -verbose     Enable verbose logging. Default: \"false\"\n  -version     Print version Default: \"false\"\n\nIf config file is required these locations will be searched for config.yml: \".\" \"/etc/s3scanner/\" \"$HOME/.s3scanner/\"\n```\n\n# üöÄ Support\nIf you've found this tool useful, please consider donating to support its development. You can find sponsor options on the side of this repo page or in [FUNDING.yml](.github/FUNDING.yml)\n\n<div align=\"center\"><a href=\"https://www.tines.com/?utm_source=oss&utm_medium=sponsorship&utm_campaign=s3scanner\"><img src=\"https://user-images.githubusercontent.com/3712226/146481766-a331b010-29c4-4537-ac30-9a4b4aad06b3.png\" height=50 width=140></a></div>\n\n<p align=\"center\">Huge thank you to <a href=\"https://www.tines.com/?utm_source=oss&utm_medium=sponsorship&utm_campaign=s3scanner\">tines</a> for being an ongoing sponsor of this project.</p>\n\n# Quick Start\n\nScan AWS for bucket names listed in a file, enumerate all objects\n  ```shell\n  $ s3scanner -bucket-file names.txt -enumerate\n   ```\n\nScan a bucket in GCP, enumerate all objects, and save results to database\n  ```shell\n  $ s3scanner -provider gcp -db -bucket my-bucket -enumerate\n  ```\n\n# Installation\n\n* **Homebrew**\n    ```shell\n    brew install s3scanner\n    ```\n* **Docker**\n    ```shell\n    docker run --rm -it ghcr.io/sa7mon/s3scanner:latest -bucket my-bucket\n    ```\n* **Go**\n    ```shell\n    # replace version with latest release\n    go install -v github.com/sa7mon/s3scanner@v3.0.1\n    # or\n    go install -v github.com/sa7mon/s3scanner@latest \n    ```\n* **Build from source**\n    ```shell\n    git clone git@github.com:sa7mon/S3Scanner.git && cd S3Scanner\n    go build -o s3scanner .\n    ./s3scanner -bucket my-bucket\n    ```\n\n# Using\n\n## Input\n\n`s3scanner` requires exactly one type of input: `-bucket`, `-bucket-file`, or `-mq`.\n\n```\nINPUT: (1 required)\n  -bucket        string  Name of bucket to check.\n  -bucket-file   string  File of bucket names to check.\n  -mq                    Connect to RabbitMQ to get buckets. Requires config file key \"mq\". Default: \"false\"\n```\n\n*`-bucket`*\n------------\n\nScan a single bucket\n\n```shell\ns3scanner -bucket secret_uploads\n```\n\n*`-bucket-file`*\n----------------\nScans every bucket name listed in file\n\n```\ns3scanner -bucket-file names.txt\n```\nwhere `names.txt` contains one bucket name per line\n\n```\n$ cat names.txt\nbucket123\nassets\nimage-uploads\n```\n\n*`-mq`*\n-------\n\nConnects to a RabbitMQ server and consumes messages containing bucket names to scan.\n\n```\ns3scanner -mq\n```\n\nMessages should be JSON-encoded [`Bucket`](https://github.com/sa7mon/s3scanner/blob/main/bucket/bucket.go) objects - refer to [`mqingest`](https://github.com/sa7mon/s3scanner/blob/main/cmd/mqingest/mqingest.go) for a Golang publishing example.\n\n`-mq` requires the `mq.uri` and `mq.queue_name` config file keys. See Config File section for example.\n\n## Output\n\n```\nOUTPUT:\n  -db       Save results to a Postgres database. Requires config file key \"db.uri\". Default: \"false\"\n  -json     Print logs to stdout in JSON format instead of human-readable. Default: \"false\"\n```\n\n*`-db`*\n----------\n\nSaves all scan results to a PostgreSQL database\n\n```shell\ns3scanner -bucket images -db\n```\n\n* Requires the `db.uri` config file key. See Config File section for example.\n* If using `-db`, results will also be printed to the console if using `-json` or the default human-readable output mode.\n* `s3scanner` runs Gorm's [Auto Migration](https://gorm.io/docs/migration.html#Auto-Migration) feature each time it connects two the database. If\nthe schema already has tables with names Gorm expects, it may change these tables' structure. It is recommended to create a Postgres schema dedicated to `s3scanner` results.\n\n*`-json`*\n----------\n\nInstead of outputting scan results to console in human-readable format, output machine-readable JSON.\n\n```shell\ns3scanner -bucket images -json\n```\n\nThis will print one JSON object per line to the console, which can then be piped to `jq` or other tools that accept JSON input.\n\n**Example**: Print bucket name and region for all buckets that exist\n\n```shell\n$ s3scanner -bucket-file names.txt -json | jq -r '. | select(.bucket.exists==1) | [.bucket.name, .bucket.region] | join(\" - \")'       \n10000 - eu-west-1\n10000.pizza - ap-southeast-1\nimages_staging - us-west-2\n```\n\n## Options\n\n```\nOPTIONS:\n  -enumerate           Enumerate bucket objects (can be time-consuming). Default: \"false\"\n  -provider    string  Object storage provider: aws, custom, digitalocean, dreamhost, gcp, linode - custom requires config file. Default: \"aws\"\n  -threads     int     Number of threads to scan with. Default: \"4\"\n```\n\n*`-enumerate`*\n--------------\n\nEnumerate all objects stored in bucket. By default, `s3scanner` will only check permissions of buckets.\n```shell\ns3scanner -bucket attachments -enumerate\n```\n\n* **Note:** This can take a long time if there are a large number of objects stored.\n* When enumerating, `s3scanner` will request \"pages\" of 1,000 objects. If there are more than 5,000 pages of objects, it will skip the rest.\n\n*`-provider`*\n-------------\n\nName of storage provider to use when checking buckets.\n\n```shell\ns3scanner -bucket assets -provider gcp\n```\n\n* Use \"custom\" when targeting a currently unsupported or local network storage provider.\n* \"custom\" provider requires config file keys under `providers.custom` listed in the Config File section.\n\n*`-threads`*\n------------\n\nNumber of threads to scan with.\n\n```shell\ns3scanner -bucket secret_docs -threads 8\n```\n\n* Increasing threads will increase the number of buckets being scanned simultaneously, but will not speed up object enumeration. Enumeration is currently single-threaded per bucket.\n\n## Debug\n\n```\nDEBUG:\n  -verbose     Enable verbose logging. Default: \"false\"\n  -version     Print version Default: \"false\"\n```\n\n*`-verbose`*\n------------\n\nEnables verbose logging of debug messages. This option will produce a lot of logs and is not recommended to use unless filing a bug report.\n\n```shell\ns3scanner -bucket spreadsheets -verbose\n```\n\n*`-version`*\n------------\n\nPrint the version info and exit.\n\n```shell\ns3scanner -version\n```\n\n* Will print `dev` if compiled from source.\n\n# Config File\n\nIf using flags that require config options, `s3scanner` will search for `config.yml` in:\n \n* (current directory)\n* `/etc/s3scanner/`\n* `$HOME/.s3scanner/`\n\n```yaml\n# Required by -db\ndb:\n  uri: \"postgresql://user:pass@db.host.name:5432/schema_name\"\n\n# Required by -mq\nmq:\n  queue_name: \"aws\"\n  uri: \"amqp://user:pass@localhost:5672\"\n\n# providers.custom required by `-provider custom`\n#   address_style - Addressing style used by endpoints.\n#     type: string\n#     values: \"path\" or \"vhost\"\n#   endpoint_format - Format of endpoint URLs. Should contain '$REGION' as placeholder for region name\n#     type: string\n#   insecure - Ignore SSL errors\n#     type: boolean\n# regions must contain at least one option\nproviders:\n  custom: \n    address_style: \"path\"\n    endpoint_format: \"https://$REGION.vultrobjects.com\"\n    insecure: false\n    regions:\n      - \"ewr1\"\n```\n\nWhen `s3scanner` parses the config file, it will take the `endpoint_format` and replace `$REGION` for all `regions` listed to create a list of endpoint URLs.\n\n# S3 compatible APIs\n\n**Note:** `S3Scanner` currently only supports scanning for anonymous user permissions of non-AWS services\n\nüìö More information on non-AWS APIs can be found [in the project wiki](https://github.com/sa7mon/S3Scanner/wiki/S3-Compatible-APIs).\n\n## Permissions\n\nThis tool will attempt to get all available information about a bucket, but it's up to you to interpret the results.\n\n[Possible permissions](https://docs.aws.amazon.com/AmazonS3/latest/user-guide/set-bucket-permissions.html) for buckets:\n\n* Read - List and view all files\n* Write - Write files to bucket\n* Read ACP - Read all Access Control Policies attached to bucket\n* Write ACP - Write Access Control Policies to bucket\n* Full Control - All above permissions\n\nAny or all of these permissions can be set for the 2 main user groups:\n* Authenticated Users\n* Public Users (those without AWS credentials set)\n* Individual users/groups (out of scope of this tool)\n\n**What this means:** Just because a bucket doesn't allow reading/writing ACLs doesn't mean you can't read/write files in the bucket. Conversely, you may be able to list ACLs but not read/write to the bucket\n\n# License\n\nMIT"
}
