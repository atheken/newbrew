{
  "name": "tcpkali",
  "full_name": "tcpkali",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "High performance TCP and WebSocket load generator and sink",
  "license": "BSD-2-Clause",
  "homepage": "https://github.com/satori-com/tcpkali",
  "versions": {
    "stable": "1.1.1",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/satori-com/tcpkali/releases/download/v1.1.1/tcpkali-1.1.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "a9a15a1703fc4960360a414ee282d821a7b42d4bbba89f9e72a796164ff69598"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tcpkali/blobs/sha256:a4e360c9b9f4e392e429075847cf3d4f02d0318668d19d5745a7f0108c381330",
          "sha256": "a4e360c9b9f4e392e429075847cf3d4f02d0318668d19d5745a7f0108c381330"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tcpkali/blobs/sha256:1da7a44e7f3a40440cbb5ac8fa5fde5156c22125080daf5c6afc884b3f8dc264",
          "sha256": "1da7a44e7f3a40440cbb5ac8fa5fde5156c22125080daf5c6afc884b3f8dc264"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tcpkali/blobs/sha256:7e7b45ed05cf7d7ad1dde75394b670e192c217cdfe98012e8da514cf6717d64a",
          "sha256": "7e7b45ed05cf7d7ad1dde75394b670e192c217cdfe98012e8da514cf6717d64a"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tcpkali/blobs/sha256:e3a2e0de9e4081e5f2720aec73737040ad1449b1d69d4ce7fbd1cad1940f4c11",
          "sha256": "e3a2e0de9e4081e5f2720aec73737040ad1449b1d69d4ce7fbd1cad1940f4c11"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tcpkali/blobs/sha256:4fb40f82ea3e44a7903dea3e1ef6a950833368346a5810a91b393b7537ec8bd6",
          "sha256": "4fb40f82ea3e44a7903dea3e1ef6a950833368346a5810a91b393b7537ec8bd6"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tcpkali/blobs/sha256:6496fe2ab336a75fecc905017ea8886c67dff3e13139b37474e6f500eb98e0fa",
          "sha256": "6496fe2ab336a75fecc905017ea8886c67dff3e13139b37474e6f500eb98e0fa"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tcpkali/blobs/sha256:01bd403a6b94827f4670877d1e36ee4c439f708d84d364584e5b1538837e72d0",
          "sha256": "01bd403a6b94827f4670877d1e36ee4c439f708d84d364584e5b1538837e72d0"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tcpkali/blobs/sha256:3e9bbcb12b289d1dff3c2355664208ee0a65cea032ebe1dc0d6d1346f67c1a2f",
          "sha256": "3e9bbcb12b289d1dff3c2355664208ee0a65cea032ebe1dc0d6d1346f67c1a2f"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tcpkali/blobs/sha256:b82b2ea3a3d17d3fd464a5e887c9cce14dce8a82bbcb350df5f7bd321893bfdb",
          "sha256": "b82b2ea3a3d17d3fd464a5e887c9cce14dce8a82bbcb350df5f7bd321893bfdb"
        },
        "sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tcpkali/blobs/sha256:f73513ed96b6436085e0941865f0cc4fd2ce1009a1d8770c740e8e97d5173cf1",
          "sha256": "f73513ed96b6436085e0941865f0cc4fd2ce1009a1d8770c740e8e97d5173cf1"
        },
        "el_capitan": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tcpkali/blobs/sha256:2d0075b2fca885fb694660a3914362030be255c8e3dfed407bb8ca96c996bbf7",
          "sha256": "2d0075b2fca885fb694660a3914362030be255c8e3dfed407bb8ca96c996bbf7"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tcpkali/blobs/sha256:ae1230bcf9879d1d8f09d5e0a3b80c9baf7f59c2bfa77a296a06ed6a821d5be7",
          "sha256": "ae1230bcf9879d1d8f09d5e0a3b80c9baf7f59c2bfa77a296a06ed6a821d5be7"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    {
      "bison": "build"
    },
    "ncurses"
  ],
  "uses_from_macos_bounds": [
    {},
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/tcpkali.rb",
  "ruby_source_checksum": {
    "sha256": "2cf640809bfa819921d75d2560a56509cb7f4e136cf493cd9826acd97f68cd24"
  },
  "date_added": "2015-12-11T18:46:20+00:00",
  "readme": "\n# About\n\n`tcpkali` is a high performance TCP and WebSocket load generator and sink.\n\n![tcpkali mascot](doc/images/tcpkali-mascot.png)\n\n# Features\n\n * Opens millions of connections from a single host by using available interface aliases.\n * Efficient multi-core operation (`--workers`); utilizes all available cores by default.\n * Allows opening massive number of connections (`--connections`)\n * Allows limiting an upstream and downstream of a single connection throughput (`--channel-bandwidth-downstream`, `--channel-bandwidth-upstream` or `--message-rate`)\n * Allows specifying the first and subsequent messages (`--message`, `--first-message`).\n * Measures response latency percentiles using [HdrHistogram](https://github.com/HdrHistogram) (`--latency-marker`)\n * Sends stats to StatsD/DataDog (`--statsd`)\n\n# Quick example: testing a web server\n\n    tcpkali -em \"GET / HTTP/1.1\\r\\nHost: google.com\\r\\n\\r\\n\" -r 10 \\\n            --latency-marker \"HTTP/1.1\" google.com:80\n\n# Install\n\n## From packages\n\n| OS       | Package manager                         | Command                |\n| -------- | --------------------------------------- | ---------------------- |\n| Mac OS X | [Homebrew](http://brew.sh/)             | `brew install tcpkali` |\n| Mac OS X | [MacPorts](https://www.macports.org/)   | `port install tcpkali` |\n| FreeBSD  | [pkgng](https://wiki.freebsd.org/pkgng) | `pkg install tcpkali`  |\n| Linux    | [nix](https://nixos.org/nix/)           | `nix-env -i tcpkali`   |\n\n## From sources\n\nInstall the following packages first:\n\n * autoconf\n * automake\n * libtool\n * bison\n * flex\n * gcc-c++\n * ncurses-devel or equivalent ncurses package, *optional*.\n\n**Build and install:**\n\n    test -f configure || autoreconf -iv\n    ./configure\n    make\n    sudo make install\n\n[![Build Status](https://travis-ci.org/satori-com/tcpkali.svg?branch=master)](https://travis-ci.org/satori-com/tcpkali)\n\n# Usage (Short version)\n\n    Usage: tcpkali [OPTIONS] [-l <port>] [<host:port>...]\n    Where some OPTIONS are:\n      -h                   Print this help screen, then exit\n      --help               Print long help screen, then exit\n      -d                   Dump i/o data for a single connection\n\n      -c <N>               Connections to keep open to the destinations\n      -l <port>            Listen on the specified port\n      --ws, --websocket    Use RFC6455 WebSocket transport\n      -T <Time=10s>        Exit after the specified amount of time\n\n      -e                   Unescape backslash-escaping in a message string\n      -1 <string>          Message to send to the remote host once\n      -m <string>          Message to repeatedly send to the remote\n      -r <Rate>            Messages per second to send in a connection\n\n    Variable units and recognized multipliers:\n      <N>, <Rate>:  k (1000, as in \"5k\" is 5000), m (1000000)\n      <Time>:       ms, s, m, h, d (milliseconds, seconds, minutes, hours, days)\n      <Rate> and <Time> can be fractional values, such as 0.25.\n\nYou can get the full list of options using `tcpkali --help`, from\n`man tcpkali`, and by consulting the\n[tcpkali man page source](doc/tcpkali.man.md).\n\n# Usage Examples\n<details>\n<summary>A few command line examples</summary>\n\n## TCP Examples\n\nConnect to a local web server and do nothing:\n\n    tcpkali 127.0.0.1:80\n\nConnect to a local echo server and hammer it with stream of dollars:\n\n    tcpkali --message '$' localhost:echo\n    tcpkali -m '$' localhost:echo\n\nOpen 10000 connections to two remote servers:\n\n    tcpkali --connections 10000 yahoo.com:80 google.com:80\n    tcpkali -c 10k yahoo.com:80 google.com:80\n\nOpen 100 connections to itself and do nothing:\n\n    tcpkali --connections 100 --listen-port 12345 127.0.0.1:12345\n    tcpkali -c100 -l12345 127.1:12345\n\nOpen a connection to itself and send lots of cookies:\n\n    tcpkali --listen-port 12345 --message \"cookies\" 127.0.0.1:12345\n    tcpkali -l 12345 -m \"cookies\" 127.1:12345\n\nListen for incoming connections and throw away data for 3 hours:\n\n    tcpkali --listen-port 12345 --duration 3h\n    tcpkali -l12345 -T3h\n\n## WebSocket examples\n\nOpen connection to the local WebSocket server, send hello, and wait:\n\n    tcpkali --websocket --first-message \"hello\" 127.0.0.1:80\n\nOpen connection to the local server and send tons of empty JSON frames:\n\n    tcpkali --websocket --message \"\\{ws.text}\" 127.1:80\n\nSend a binary frame with a picture every second (angle brackets are literal):\n\n    tcpkali --ws -m \"\\{ws.binary <image.png>}\" -r1 127.1:80\n\n</details>"
}
