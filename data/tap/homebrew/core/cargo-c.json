{
  "name": "cargo-c",
  "full_name": "cargo-c",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Helper program to build and install c-like libraries",
  "license": "MIT",
  "homepage": "https://github.com/lu-zero/cargo-c",
  "versions": {
    "stable": "0.9.22",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/lu-zero/cargo-c/archive/refs/tags/v0.9.22.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "6af542e3d76e4341693b2e9a9f50abf15b04d82c5f9d1b350110cfac7e914e73"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cargo-c/blobs/sha256:98238b35a147e5982e786b9c0a6876791accdf2534c74e9fd4f80b57cf6ae6d7",
          "sha256": "98238b35a147e5982e786b9c0a6876791accdf2534c74e9fd4f80b57cf6ae6d7"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cargo-c/blobs/sha256:d1e5323e129eea909b1681f7b60710eb911e3d1e8138f39a3605bad02fd5e487",
          "sha256": "d1e5323e129eea909b1681f7b60710eb911e3d1e8138f39a3605bad02fd5e487"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cargo-c/blobs/sha256:440056f707350b6ed950e36bc1bb95b47ce2f26c560683800750e8904fc45006",
          "sha256": "440056f707350b6ed950e36bc1bb95b47ce2f26c560683800750e8904fc45006"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cargo-c/blobs/sha256:32c845d987a2b95c37378aa42196ecbda26e37df6cd364f23bb97f5a1b62b701",
          "sha256": "32c845d987a2b95c37378aa42196ecbda26e37df6cd364f23bb97f5a1b62b701"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cargo-c/blobs/sha256:f82dcafce74d96cdf27fb8c8dd37a696f9ca15f965563f175d2543531a81c6fc",
          "sha256": "f82dcafce74d96cdf27fb8c8dd37a696f9ca15f965563f175d2543531a81c6fc"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cargo-c/blobs/sha256:5cb898294bb6efe71981c95bd6284fec8461ff47470aaa235e626192a89126a5",
          "sha256": "5cb898294bb6efe71981c95bd6284fec8461ff47470aaa235e626192a89126a5"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cargo-c/blobs/sha256:b5ee34f9d0f91401c46135bc7011410bf2cd2f8c962d602b8ec05188d9d648fd",
          "sha256": "b5ee34f9d0f91401c46135bc7011410bf2cd2f8c962d602b8ec05188d9d648fd"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust",
    "pkg-config"
  ],
  "dependencies": [
    "libgit2",
    "libssh2",
    "openssl@3"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "zlib"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/cargo-c.rb",
  "ruby_source_checksum": {
    "sha256": "bc40d9cda5f5149529a8357b40eec0a8d5df8036d4556ec776ab1f2503fe1641"
  },
  "date_added": "2019-11-22T18:01:03-05:00",
  "readme": "# Cargo C-ABI helpers\n\n[![LICENSE](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE)\n[![Crates.io](https://img.shields.io/crates/v/cargo-c.svg)](https://crates.io/crates/cargo-c)\n[![Build Status](https://github.com/lu-zero/cargo-c/workflows/Rust/badge.svg)](https://github.com/lu-zero/cargo-c/actions?query=workflow:Rust)\n[![cargo-c chat](https://img.shields.io/badge/zulip-join_chat-brightgreen.svg)](https://rust-av.zulipchat.com/#narrow/stream/254255-cargo-c)\n[![dependency status](https://deps.rs/repo/github/lu-zero/cargo-c/status.svg)](https://deps.rs/repo/github/lu-zero/cargo-c)\n\n[cargo](https://doc.rust-lang.org/cargo) applet to build and install C-ABI compatible dynamic and static libraries.\n\nIt produces and installs a correct [pkg-config](https://www.freedesktop.org/wiki/Software/pkg-config/) file, a static library and a dynamic library, and a C header to be used by any C (and C-compatible) software.\n\n## Installation\n**cargo-c** may be installed from [crates.io](https://crates.io/crates/cargo-c).\n``` sh\ncargo install cargo-c\n```\n\nThe `rustc` version supported is the same as the one supported by the `cargo` version embedded in the package version, or as set in the\n[rust-version](https://doc.rust-lang.org/cargo/reference/manifest.html#the-rust-version-field) field.\n\nYou must have the **cargo** build [requirements](https://github.com/rust-lang/cargo#compiling-from-source) satisfied in order to build **cargo-c**:\n* `git`\n* `pkg-config` (on Unix, used to figure out the host-provided headers/libraries)\n* `curl` (on Unix)\n* OpenSSL headers (only for Unix, this is the `libssl-dev` package on deb-based distributions)\n\nYou may pass `--features=vendored-openssl` if you have problems building openssl-sys using the host-provided OpenSSL.\n\n``` sh\ncargo install cargo-c --features=vendored-openssl\n```\n\n## Usage\n``` sh\n# build the library, create the .h header, create the .pc file\n$ cargo cbuild --destdir=${D} --prefix=/usr --libdir=/usr/lib64\n```\n``` sh\n# build the library, create the .h header, create the .pc file, build and run the tests\n$ cargo ctest\n```\n``` sh\n# build the library, create the .h header, create the .pc file and install all of it\n$ cargo cinstall --destdir=${D} --prefix=/usr --libdir=/usr/lib64\n```\n\nFor a more in-depth explanation of how `cargo-c` works and how to use it for\nyour crates, read [Building Crates so they Look Like C ABI Libraries][dev.to].\n\n### The TL;DR:\n\n- [Create][diff-1] a `capi.rs` with the C-API you want to expose and use\n  ~~`#[cfg(cargo_c)]`~~`#[cfg(feature=\"capi\")]` to hide it when you build a normal rust library.\n- [Make sure][diff-2] you have a lib target and if you are using a workspace\n  the first member is the crate you want to export, that means that you might\n  have [to add a \".\" member at the start of the list][diff-3].\n- ~~Since Rust 1.38, also add \"staticlib\" to the \"lib\" `crate-type`.~~ Do not specify the `crate-type`, cargo-c will add the correct library target by itself.\n- You may use the feature `capi` to add C-API-specific optional dependencies.\n  > **NOTE**: It must be always present in `Cargo.toml`\n- Remember to [add][diff-4] a [`cbindgen.toml`][cbindgen-toml] and fill it with\n  at least the include guard and probably you want to set the language to C (it\n  defaults to C++)\n- Once you are happy with the result update your documentation to tell the user\n  to install `cargo-c` and do `cargo cinstall --prefix=/usr\n  --destdir=/tmp/some-place` or something along those lines.\n\n[diff-1]: https://github.com/RustAudio/lewton/pull/50/commits/557cb4ce35beedf6d6bfaa481f29936094a71669\n[diff-2]: https://github.com/RustAudio/lewton/pull/50/commits/e7ea8fff6423213d1892e86d51c0c499d8904dc1\n[diff-3]: https://github.com/xiph/rav1e/pull/1381/commits/7d558125f42f4b503bcdcda5a82765da76a227e0#diff-80398c5faae3c069e4e6aa2ed11b28c0R94\n[diff-4]: https://github.com/RustAudio/lewton/pull/51/files\n[cbindgen-toml]: https://github.com/eqrion/cbindgen/blob/master/docs.md#cbindgentoml\n\n## Advanced\nYou may override various aspects of `cargo-c` via settings in `Cargo.toml` under the `package.metadata.capi` key\n\n```toml\n[package.metadata.capi]\n# Configures the minimum required cargo-c version. Trying to run with an\n# older version causes an error.\nmin_version = \"0.6.10\"\n```\n\n### Header Generation\n\n```toml\n[package.metadata.capi.header]\n# Used as header file name. By default this is equal to the crate name.\n# The name can be with or without the header filename extension `.h`\nname = \"new_name\"\n# Install the header into a subdirectory with the name of the crate. This\n# is enabled by default, pass `false` or \"\" to disable it.\nsubdirectory = \"libfoo-2.0/foo\"\n# Generate the header file with `cbindgen`, or copy a pre-generated header\n# from the `assets` subdirectory. By default a header is generated.\ngeneration = true\n# Can be use to disable header generation completely.\n# This can be used when generating dynamic modules instead of an actual library.\nenabled = true\n```\n\n### `pkg-config` File Generation\n\n```toml\n[package.metadata.capi.pkg_config]\n# Used as the package name in the pkg-config file and defaults to the crate name.\nname = \"libfoo\"\n# Used as the pkg-config file name and defaults to the crate name.\nfilename = \"libfoo-2.0\"\n# Used as the package description in the pkg-config file and defaults to the crate description.\ndescription = \"some description\"\n# Used as the package version in the pkg-config file and defaults to the crate version.\nversion = \"1.2.3\"\n# Used as the Requires field in the pkg-config file, if defined\nrequires = \"gstreamer-1.0, gstreamer-base-1.0\"\n# Used as the Requires.private field in the pkg-config file, if defined\nrequires_private = \"gobject-2.0, glib-2.0 >= 2.56.0, gmodule-2.0\"\n# Strip the include search path from the last n components, useful to support installing in a\n# subdirectory but then include with the path. By default it is 0.\nstrip_include_path_components = 1\n\n```\n\n### Library Generation\n\n```toml\n[package.metadata.capi.library]\n# Used as the library name and defaults to the crate name. This might get\n# prefixed with `lib` depending on the target platform.\nname = \"new_name\"\n# Used as library version and defaults to the crate version. How this is used\n# depends on the target platform.\nversion = \"1.2.3\"\n# Used to install the library to a subdirectory of `libdir`.\ninstall_subdir = \"gstreamer-1.0\"\n# Used to disable versioning links when installing the dynamic library\nversioning = false\n# Add `-Cpanic=abort` to the RUSTFLAGS automatically, it may be useful in case\n# something might panic in the crates used by the library.\nrustflags = \"-Cpanic=abort\"\n# Used to disable the generation of additional import library file in platforms\n# that have the concept such as Windows\nimport_library = false\n```\n\n### Custom data install\n```toml\n[package.metadata.capi.install.data]\n# Used to install the data to a subdirectory of `datadir`. By default it is the same as `name`\nsubdirectory = \"foodata\"\n# Copy the pre-generated data files found in {root_dir}/{from} to {datadir}/{to}/{matched subdirs}\n# If {from} is a single path instead of a glob, the destination is {datapath}/{to}.\n# datapath is {datadir}/{subdirectory}\nasset = [{from=\"pattern/with/or/without/**/*\", to=\"destination\"}]\n# Copy the pre-generated data files found in {OUT_DIR}/{from} to {includedir}/{to}/{matched subdirs}\n# If {from} is a single path instead of a glob, the destination is {datapath}/{to}.\n# datapath is {datadir}/{subdirectory}\ngenerated = [{from=\"pattern/with/or/without/**/*\", to=\"destination\"}]\n\n[package.metadata.capi.install.include]\n# Copy the pre-generated includes found in {root_dir}/{from} to {includedir}/{to}/{matched subdirs}\n# If {from} is a single path instead of a glob, the destination is {includepath}/{to}.\n# includepath is {includedir}/{header.subdirectory}\nasset = [{from=\"pattern/with/or/without/**/*\", to=\"destination\"}]\n# Copy the pre-generated includes found in {OUT_DIR}/{from} to {includedir}/{to}/{matched subdirs}\n# If {from} is a single path instead of a glob, the destination is {includedpath}/{to}.\n# includepath is {includedir}/{header.subdirectory}\ngenerated = [{from=\"pattern/with/or/without/**/*\", to=\"destination\"}]\n```\n\n### Notes\n\nDo **not** pass `RUSTFLAGS` that are managed by cargo through other means, (e.g. the flags driven by `[profiles]` or the flags driven by `[target.<>]`), cargo-c effectively builds as if the *target* is always explicitly passed.\n\n## Users\n\n- [ebur128](https://github.com/sdroege/ebur128#c-api)\n- [gcode-rs](https://github.com/Michael-F-Bryan/gcode-rs)\n- [gst-plugins-rs](https://gitlab.freedesktop.org/gstreamer/gst-plugins-rs)\n- [lewton](https://github.com/RustAudio/lewton)\n- [libdovi](https://github.com/quietvoid/dovi_tool/tree/main/dolby_vision#libdovi-c-api)\n- [libimagequant](https://github.com/ImageOptim/libimagequant#building-with-cargo-c)\n- [rav1e](https://github.com/xiph/rav1e)\n- [sled](https://github.com/spacejam/sled/tree/master/bindings/sled-native)\n- [pathfinder](https://github.com/servo/pathfinder#c)\n- [udbserver](https://github.com/bet4it/udbserver)\n\n## Status\n\n- [x] cli\n  - [x] build command\n  - [x] install command\n  - [x] test command\n  - [x] cargo applet support\n- [x] build targets\n  - [x] pkg-config generation\n  - [x] header generation (cbindgen integration)\n- [x] `staticlib` support\n- [x] `cdylib` support\n- [x] Generate version information in the header\n  - [ ] Make it tunable\n- [x] Extra Cargo.toml keys\n- [x] Better status reporting\n\n[dev.to]: https://dev.to/luzero/building-crates-so-they-look-like-c-abi-libraries-1ibn\n[using]: https://dev.to/luzero/building-crates-so-they-look-like-c-abi-libraries-1ibn#using-cargoc\n\n## Availability\n\n[![Packaging status](https://repology.org/badge/vertical-allrepos/cargo-c.svg)](https://repology.org/project/cargo-c/versions)\n\n\n## Acknowledgements\n\nThis software has been partially developed in the scope of the H2020 project SIFIS-Home with GA n. 952652."
}
