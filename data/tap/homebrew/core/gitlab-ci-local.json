{
  "name": "gitlab-ci-local",
  "full_name": "gitlab-ci-local",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Run gitlab pipelines locally as shell executor or docker executor",
  "license": "MIT",
  "homepage": "https://github.com/firecow/gitlab-ci-local",
  "versions": {
    "stable": "4.42.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://registry.npmjs.org/gitlab-ci-local/-/gitlab-ci-local-4.42.0.tgz",
      "tag": null,
      "revision": null,
      "checksum": "b278af22b6423f88cdfb4ff771ef6fb40e864585ed2ee4ccfa6a9334b4732619"
    },
    "head": {
      "url": "https://github.com/firecow/gitlab-ci-local.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gitlab-ci-local/blobs/sha256:18b976aea6d141e85d09fa2e387f318d51b02137c488c35b2b4aef2b3d344f34",
          "sha256": "18b976aea6d141e85d09fa2e387f318d51b02137c488c35b2b4aef2b3d344f34"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gitlab-ci-local/blobs/sha256:18b976aea6d141e85d09fa2e387f318d51b02137c488c35b2b4aef2b3d344f34",
          "sha256": "18b976aea6d141e85d09fa2e387f318d51b02137c488c35b2b4aef2b3d344f34"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gitlab-ci-local/blobs/sha256:18b976aea6d141e85d09fa2e387f318d51b02137c488c35b2b4aef2b3d344f34",
          "sha256": "18b976aea6d141e85d09fa2e387f318d51b02137c488c35b2b4aef2b3d344f34"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gitlab-ci-local/blobs/sha256:cc3ea34ee93bda6cbeb81e05fdbfe99e8c58d54a542b2d08334d8dddcb37497d",
          "sha256": "cc3ea34ee93bda6cbeb81e05fdbfe99e8c58d54a542b2d08334d8dddcb37497d"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gitlab-ci-local/blobs/sha256:cc3ea34ee93bda6cbeb81e05fdbfe99e8c58d54a542b2d08334d8dddcb37497d",
          "sha256": "cc3ea34ee93bda6cbeb81e05fdbfe99e8c58d54a542b2d08334d8dddcb37497d"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gitlab-ci-local/blobs/sha256:cc3ea34ee93bda6cbeb81e05fdbfe99e8c58d54a542b2d08334d8dddcb37497d",
          "sha256": "cc3ea34ee93bda6cbeb81e05fdbfe99e8c58d54a542b2d08334d8dddcb37497d"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gitlab-ci-local/blobs/sha256:0c942d1207f92f5c7fed131b56eeb1e9e4a2ce15014358b5072e8421f949c8b4",
          "sha256": "0c942d1207f92f5c7fed131b56eeb1e9e4a2ce15014358b5072e8421f949c8b4"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "node"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/gitlab-ci-local.rb",
  "ruby_source_checksum": {
    "sha256": "a8d2a45624e0b0d18aaabe6799db28455a3ec477d1ba2e5c94a30b2bd65e7fea"
  },
  "date_added": "2021-10-24T16:33:53+00:00",
  "readme": "Tired of pushing to test your .gitlab-ci.yml?\n\nRun gitlab pipelines locally as shell executor or docker executor.\n\nGet rid of all those dev specific shell scripts and make files.\n\n[![build](https://img.shields.io/github/actions/workflow/status/firecow/gitlab-ci-local/build.yml?branch=master)](https://github.com/firecow/gitlab-ci-local/actions)\n[![Known Vulnerabilities](https://snyk.io/test/github/firecow/gitlab-ci-local/badge.svg)](https://snyk.io/test/github/firecow/gitlab-ci-local)\n[![npm](https://img.shields.io/npm/v/gitlab-ci-local)](https://npmjs.org/package/gitlab-ci-local)\n[![license](https://img.shields.io/github/license/firecow/gitlab-ci-local)](https://npmjs.org/package/gitlab-ci-local)\n[![Renovate](https://img.shields.io/badge/renovate-enabled-brightgreen.svg)](https://renovatebot.com)\n\n[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=firecow_gitlab-ci-local&metric=alert_status)](https://sonarcloud.io/dashboard?id=firecow_gitlab-ci-local)\n[![Maintainability Rating](https://sonarcloud.io/api/project_badges/measure?project=firecow_gitlab-ci-local&metric=sqale_rating)](https://sonarcloud.io/dashboard?id=firecow_gitlab-ci-local)\n[![Reliability Rating](https://sonarcloud.io/api/project_badges/measure?project=firecow_gitlab-ci-local&metric=reliability_rating)](https://sonarcloud.io/dashboard?id=firecow_gitlab-ci-local)\n[![Security Rating](https://sonarcloud.io/api/project_badges/measure?project=firecow_gitlab-ci-local&metric=security_rating)](https://sonarcloud.io/dashboard?id=firecow_gitlab-ci-local)\n\n[![Coverage](https://sonarcloud.io/api/project_badges/measure?project=firecow_gitlab-ci-local&metric=coverage)](https://sonarcloud.io/dashboard?id=firecow_gitlab-ci-local)\n[![Code Smells](https://sonarcloud.io/api/project_badges/measure?project=firecow_gitlab-ci-local&metric=code_smells)](https://sonarcloud.io/dashboard?id=firecow_gitlab-ci-local)\n[![Duplicated Lines (%)](https://sonarcloud.io/api/project_badges/measure?project=firecow_gitlab-ci-local&metric=duplicated_lines_density)](https://sonarcloud.io/dashboard?id=firecow_gitlab-ci-local)\n\n## Table of contents\n\n* [Examples](./examples)\n    * [docker-compose-nodejs](./examples/docker-compose-nodejs)\n    * [docker-swarm-php](./examples/docker-swarm-php)\n    * [docker-in-docker-build](./examples/docker-in-docker-build)\n* [Installation](#installation)\n* [Convenience](#convenience)\n    * [CLI options via shell](#cli-options-via-shell)\n    * [DotEnv file](#dotenv-file)\n    * [Bash alias](#bash-alias)\n    * [Tab completion](#tab-completion)\n    * [Listing jobs](#list-pipeline-jobs)\n* [Quirks](#quirks)\n    * [Tracked Files](#tracked-files)\n    * [Local Only](#local-only)\n    * [Home File Variables](#home-file-variables)\n    * [Remote File Variables](#remote-file-variables)\n    * [Project File Variables](#project-file-variables)\n    * [Decorators](#decorators)\n    * [Includes](#includes)\n    * [Artifacts](#artifacts)\n* [Development](#development)\n    * [Scripts](#scripts)\n    * [Package binaries](#package-binaries)\n\n## Installation\n\n### NPM\n\n```bash\nnpm install -g gitlab-ci-local\n```\n\n### Linux based on Debian\n\nUsers of Debian-based distributions should prefer the [the Deb822 format][deb822], installed with:\n\n```bash\nsudo wget -O /etc/apt/sources.list.d/gitlab-ci-local.sources https://gitlab-ci-local-ppa.firecow.dk/gitlab-ci-local.sources\nsudo apt-get update\nsudo apt-get install gitlab-ci-local\n```\n\n  [deb822]: https://repolib.readthedocs.io/en/latest/deb822-format.html#deb822-format\n\nIf your distribution does not support this, you can run these commands:\n\n```bash\ncurl -s \"https://gitlab-ci-local-ppa.firecow.dk/pubkey.gpg\" | sudo apt-key add -\necho \"deb https://gitlab-ci-local-ppa.firecow.dk ./\" | sudo tee /etc/apt/sources.list.d/gitlab-ci-local.list\nsudo apt-get update\nsudo apt-get install gitlab-ci-local\n```\n\nNote that the path `/etc/apt/sources.list.d/gitlab-ci-local.list` is used in the file `gitlab-ci-local.list`.\nIf you change it in these commands you must also change it in `/etc/apt/sources.list.d/gitlab-ci-local.list`.\n\n### Macos\n\n*bash version must be above or equal 4.x.x*\n\n```bash\nbrew install gitlab-ci-local\n```\n\n### Windows (Git bash)\n\n- Install [gitbash](https://git-scm.com/downloads)\n- Install [rsync](https://prasaz.medium.com/add-rsync-to-windows-git-bash-f42736bae1b3)\n\nDownload and put binary in `C:\\Program Files\\Git\\mingw64\\bin`\n\n```bash\ncurl -L https://github.com/firecow/gitlab-ci-local/releases/latest/download/win.gz | gunzip -c > /c/Program\\ Files/Git/mingw64/bin/gitlab-ci-local.exe\n```\n\nExecuting `gitlab-ci-local` with `--variable MSYS_NO_PATHCONV=1` can be useful in certain situations\n\n## Convenience\n\n### CLI options via shell\n\n```\n# Overrides .gitlab-ci.yml as the default git ci/cd file\nexport GCL_NEEDS='true' >> ~/.bashrc\nexport GCL_FILE='.gitlab-ci-local.yml' >> ~/.bashrc\nexport GLC_VARIABLES=\"IMAGE=someimage SOMEOTHERIMAGE=someotherimage\"\n```\n\n### DotEnv file\n\nAdd a `.gitlab-ci-local-env` file to the current working directory or a `.env` file in `$HOME/.gitlab-ci-local`\n\n```\n# Overrides .gitlab-ci.yml as the default git ci/cd file\nFILE=doctor-strange.yml # --file\n\n# Always runs needed jobs, when gitlab-ci-local <job-name> is called\nNEEDS=true # --needs\n```\n\nAll cli options can be assigned default values this way\n\n### Bash alias\n\n```bash\necho \"alias gcl='gitlab-ci-local'\" >> ~/.bashrc\n```\n\n### Tab completion\n\n```bash\ngitlab-ci-local --completion >> ~/.bashrc \n```\n\n### Logging options\n\n```shell\nexport GCL_TIMESTAMPS=true # or --timestamps: show timestamps in logs\nexport GCL_MAX_JOB_NAME_LENGTH=30 # or --maxJobNameLength: limit padding around job name\nexport GCL_QUIET=true # or --quiet: Suppress all job output\n```\n\n### List Pipeline Jobs\n\nSometimes there is the need of knowing which jobs will be added before actually executing the pipeline.\nGitLab CI Local is providing the ability of showing added jobs with the following cli flags.\n\n#### --list\n\nThe command `gitlab-ci-local --list` will return pretty output and will also filter all jobs which are set\nto `when: never`.\n\n```text\nname        description  stage   when        allow_failure  needs\ntest-job    Run Tests    test    on_success  false      \nbuild-job                build   on_success  true           [test-job]\n```\n\n#### --list-all\n\nSame as `--list` but will also print out jobs which are set to `when: never` (directly and implicit e.g. via rules).\n\n```text\nname        description  stage   when        allow_failure  needs\ntest-job    Run Tests    test    on_success  false      \nbuild-job                build   on_success  true           [test-job]\ndeploy-job               deploy  never       false          [build-job]\n```\n\n#### --list-csv\n\nThe command `gitlab-ci-local --list-csv` will output the pipeline jobs as csv formatted list and will also filter all\njobs which are set\nto `when: never`.\nThe description will always be wrapped in quotes (even if there is none) to prevent semicolons in the description\ndisturb the csv structure.\n\n```text\nname;description;stage;when;allow_failure;needs\ntest-job;\"Run Tests\";test;on_success;false;[]\nbuild-job;\"\";build;on_success;true;[test-job]\n```\n\n#### --list-csv-all\n\nSame as `--list-csv-all` but will also print out jobs which are set to `when: never` (directly and implicit e.g. via\nrules).\n\n```text\nname;description;stage;when;allow_failure;needs\ntest-job;\"Run Tests\";test;on_success;false;[]\nbuild-job;\"\";build;on_success;true;[test-job]\ndeploy-job;\"\";deploy;never;false;[build-job]\n```\n\n## Quirks\n\ngit+http isn't properly supported https://github.com/firecow/gitlab-ci-local/issues/605 and has certain quirks\n\n### Tracked Files\n\nUntracked and ignored files will not be synced inside isolated jobs, only tracked files are synced.\n\nRemember `git add`\n\n### Local Only\n\n```yml\nlocal-only-job:\n  rules:\n    - { if: $GITLAB_CI == 'false' }\n```\n\n```yml\nlocal-only-subsection:\n  script:\n    - if [ $GITLAB_CI == 'false' ]; then eslint . --fix; fi\n    - eslint . \n```\n\n### Home file variables\n\nPut a file like this in `$HOME/.gitlab-ci-local/variables.yml`\n\n```yaml\n---\nproject:\n  gitlab.com/test-group/test-project.git:\n    # Will be type Variable and only available if remote is exact match\n    AUTHORIZATION_PASSWORD: djwqiod910321\n  gitlab.com:project/test-group/test-project.git: # another syntax\n    AUTHORIZATION_PASSWORD: djwqiod910321\n\ngroup:\n  gitlab.com/test-group/:\n    # Will be type Variable and only available for remotes that include group named 'test-group'\n    DOCKER_LOGIN_PASSWORD: dij3213n123n12in3\n\nglobal:\n  # Will be type File, because value is a file path\n  KNOWN_HOSTS: '~/.ssh/known_hosts'\n  DEPLOY_ENV_SPECIFIC:\n    type: variable # Optional and defaults to variable\n    values:\n      '*production*': 'Im production only value'\n      'staging': 'Im staging only value'\n  FILE_CONTENT_IN_VALUES:\n    type: file\n    values:\n      '*': |\n        Im staging only value\n        I'm great for certs n' stuff\n```\n\nVariables will now appear in your jobs, if project or group matches git remote, globals are always present\n\n### Remote file variables\n\n```shell\ngitlab-ci-local --remote-variables git@gitlab.com:firecow/example.git=gitlab-variables.yml=master\n```\n\n### Project file variables\n\nPut a file like this in `$CWD/.gitlab-ci-local-variables.yml`\n\n```yaml\n---\nAUTHORIZATION_PASSWORD: djwqiod910321\nDOCKER_LOGIN_PASSWORD: dij3213n123n12in3\n# Will be type File, because value is a file path\nKNOWN_HOSTS: '~/.ssh/known_hosts'\n```\n\nVariables will now appear in your jobs.\n\n### Decorators\n\n#### The `@Description` decorator\n\nAdds descriptive text to `gitlab-ci-local --list`\n\n```yml\n# @Description Install npm packages\nnpm-install:\n  image: node\n  artifacts:\n    paths:\n      - node_modules/\n  script:\n    - npm install --no-audit\n```\n\n![description-decorator](./docs/images/description-decorator.png)\n\n#### The `@Interactive` decorator\n\n```yml\n# @Interactive\ninteractive-shell:\n  rules:\n    - if: $GITLAB_CI == 'false'\n      when: manual\n  script:\n    - docker run -it debian bash\n```\n\n![description-decorator](./docs/images/interactive-decorator.png)\n\n#### The `@InjectSSHAgent` decorator\n\n```yml\n# @InjectSSHAgent\nneed-ssh:\n  image: kroniak/ssh-client\n  script:\n    - ssh-add -L\n```\n\n#### The `@NoArtifactsToSource` decorator\n\nPrevent artifacts from being copied to source folder\n\n```yml\n# @NoArtifactsToSource\nproduce:\n  stage: build\n  script: mkdir -p path/ && touch path/file1\n  artifacts: { paths: [ path/ ] }\n```\n\nA global configuration is possible when setting the following flag\n\n```shell\ngitlab-ci-local --no-artifacts-to-source\n```\n\n### Includes\n\nIncludes from external sources are only fetched once. Use `--fetch-includes` to invoke an external fetching routine.\n\n### Artifacts\n\nShell executor jobs copies artifacts to host/cwd directory. Use --shell-isolation option to mimic correct artifact\nhandling for shell jobs.\n\nDocker executor copies artifacts to and from .gitlab-ci-local/artifacts\n\n## Development\n\nYou need nodejs 18+\n\n### Scripts\n\n```bash\n# Install node_modules\nnpm install\n\n# Compiled typescript to javascript\nnpm run build\n\n# Run all tests\nnpm run test\n\n# Run individual test-case\nnpx jest tests/test-cases/cache-paths-not-array\n```\n\n![example](./docs/images/example.png)\n\nIt's also possible to run individual `.gitlab-ci.yml`, via `node src/index.js --cwd examples/docker-compose-nodejs`\n\n### Package binaries\n\n```bash\nnpm run pkg-linux\nnpm run pkg-win\nnpm run pkg-macos\nnpm run pkg-all\n```"
}
