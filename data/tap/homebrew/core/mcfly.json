{
  "name": "mcfly",
  "full_name": "mcfly",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Fly through your shell history",
  "license": "MIT",
  "homepage": "https://github.com/cantino/mcfly",
  "versions": {
    "stable": "0.8.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/cantino/mcfly/archive/v0.8.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "727fc98b7291cc5b79c90a48d2e4460bc71550f221be8d2dad2377580f9b2d72"
    },
    "head": {
      "url": "https://github.com/cantino/mcfly.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mcfly/blobs/sha256:f67220a70aae9b0456e64905e9abf6d9491c2faec821ce74fbe11306e6b5ad95",
          "sha256": "f67220a70aae9b0456e64905e9abf6d9491c2faec821ce74fbe11306e6b5ad95"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mcfly/blobs/sha256:9bfdd45848293e58bf64db6e6c33630314049c4bbff7099a9ded4162f21cbb53",
          "sha256": "9bfdd45848293e58bf64db6e6c33630314049c4bbff7099a9ded4162f21cbb53"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mcfly/blobs/sha256:4baac51490a81cfa298c10d88c2f8352f8ce461bdd9aebfdd0fcfbc20cc6b173",
          "sha256": "4baac51490a81cfa298c10d88c2f8352f8ce461bdd9aebfdd0fcfbc20cc6b173"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mcfly/blobs/sha256:c0a3b4b449fdfaf0dae1b40559ca7c2dcce8b42e3a53a685ae34a189db5e7b05",
          "sha256": "c0a3b4b449fdfaf0dae1b40559ca7c2dcce8b42e3a53a685ae34a189db5e7b05"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mcfly/blobs/sha256:166c303a51dd6bfd7df625a34555f92e1b28d5971fbb02debbd0df877027ded5",
          "sha256": "166c303a51dd6bfd7df625a34555f92e1b28d5971fbb02debbd0df877027ded5"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mcfly/blobs/sha256:4b38d58778c3515f4122d9d28063a97ab43261dfb347dac7bc504dede6349ac7",
          "sha256": "4b38d58778c3515f4122d9d28063a97ab43261dfb347dac7bc504dede6349ac7"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mcfly/blobs/sha256:f17b293954a7e6a9666b6aef067a284cb365e64d1bb6ee47d7f8d939715833dc",
          "sha256": "f17b293954a7e6a9666b6aef067a284cb365e64d1bb6ee47d7f8d939715833dc"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/mcfly.rb",
  "ruby_source_checksum": {
    "sha256": "aa8413b85796fa7d17eeade3005d7d80788c029586cf09f32bab797c3097a6d4"
  },
  "date_added": "2021-12-20T07:43:20+00:00",
  "readme": "> **Seeking co-maintainers**:\n> I don't have much time to maintain this project these days. If someone would like to jump in and become a co-maintainer, it would be appreciated!\n\n![Build Status](https://github.com/cantino/mcfly/actions/workflows/mean_bean_ci.yml/badge.svg)\n[![](https://img.shields.io/crates/v/mcfly.svg)](https://crates.io/crates/mcfly)\n\n# McFly - fly through your shell history\n\n<img src=\"/docs/screenshot.png\" alt=\"screenshot\" width=\"400\">\n\nMcFly replaces your default `ctrl-r` shell history search with an intelligent search engine that takes into account\nyour working directory and the context of recently executed commands. McFly's suggestions are prioritized\nin real time with a small neural network.\n\nTL;DR: an upgraded `ctrl-r` where history results make sense for what you're working on right now.\n\n## Features\n\n* Rebinds `ctrl-r` to bring up a full-screen reverse history search prioritized with a small neural network.\n* Augments your shell history to track command exit status, timestamp, and execution directory in a SQLite database.\n* Maintains your normal shell history file as well so that you can stop using McFly whenever you want.\n* Unicode support throughout.\n* Includes a simple action to scrub any history item from the McFly database and your shell history files.\n* Designed to be extensible for other shells in the future.\n* Written in Rust, so it's fast and safe.\n* You can type `%` to match any number of characters when searching.\n\n## Prioritization\n\nThe key feature of McFly is smart command prioritization powered by a small neural network that runs\nin real time. The goal is for the command you want to run to always be one of the top suggestions.\n\nWhen suggesting a command, McFly takes into consideration:\n\n* The directory where you ran the command. You're likely to run that command in the same directory in the future.\n* What commands you typed before the command (e.g., the command's execution context).\n* How often you run the command.\n* When you last ran the command.\n* If you've selected the command in McFly before.\n* The command's historical exit status. You probably don't want to run old failed commands.\n\n## Installation\n\n### Install with Homebrew (on OS X or Linux)\n\n1. Install the tap:\n    ```bash\n    brew tap cantino/mcfly\n    ```\n1. Install `mcfly`:\n    ```bash\n    brew install cantino/mcfly/mcfly\n    ```\n1. Add the following to the end of your `~/.bashrc`, `~/.zshrc`, or `~/.config/fish/config.fish` file:\n\n    Bash:\n    ```bash\n    eval \"$(mcfly init bash)\"\n    ```\n\n    Zsh:\n    ```bash\n    eval \"$(mcfly init zsh)\"\n    ```\n\n    Fish:\n    ```bash\n    mcfly init fish | source\n    ```\n1. Run `. ~/.bashrc` / `. ~/.zshrc` / `source ~/.config/fish/config.fish` or restart your terminal emulator.\n\n#### Uninstalling with Homebrew\n\n1. Remove `mcfly`:\n    ```bash\n    brew uninstall mcfly\n    ```\n1. Remove the tap:\n    ```bash\n    brew untap cantino/mcfly\n    ```\n1. Remove the lines you added to `~/.bashrc` / `~/.zshrc` / `~/.config/fish/config.fish`.\n\n### Install with MacPorts (on OS X)\n\n1. Update the ports tree\n    ```bash\n    sudo port selfupdate\n    ```\n1. Install `mcfly`:\n    ```bash\n    sudo port install mcfly\n    ```\n1. Add the following to the end of your `~/.bashrc`, `~/.zshrc`, or `~/.config/fish/config.fish` file, as appropriate:\n\n    Bash:\n    ```bash\n    eval \"$(mcfly init bash)\"\n    ```\n\n    Zsh:\n    ```bash\n    eval \"$(mcfly init zsh)\"\n    ```\n\n    Fish:\n    ```bash\n    mcfly init fish | source\n    ```\n1. Run `. ~/.bashrc` / `. ~/.zshrc` / `source ~/.config/fish/config.fish` or restart your terminal emulator.\n\n#### Uninstalling with MacPorts\n\n1. Remove `mcfly`:\n    ```bash\n    sudo port uninstall mcfly\n    ```\n1. Remove the lines you added to `~/.bashrc` / `~/.zshrc` / `~/.config/fish/config.fish`.\n\n### Installing using our install script\n\n1. `curl -LSfs https://raw.githubusercontent.com/cantino/mcfly/master/ci/install.sh | sh -s -- --git cantino/mcfly`\n\n2. Add the following to the end of your `~/.bashrc`, `~/.zshrc`, or `~/.config/fish/config.fish` file, respectively:\n\n   Bash:\n\n   ```bash\n   eval \"$(mcfly init bash)\"\n   ```\n\n   Zsh:\n\n   ```bash\n   eval \"$(mcfly init zsh)\"\n   ```\n\n   Fish:\n\n   ```bash\n   mcfly init fish | source\n   ```\n\n3. Run `. ~/.bashrc` / `. ~/.zshrc` / `source ~/.config/fish/config.fish` or restart your terminal emulator.\n\n### Installing manually from GitHub\n\n1. Download the [latest release from GitHub](https://github.com/cantino/mcfly/releases).\n1. Install to a location in your `$PATH`. (For example, you could create a directory at `~/bin`, copy `mcfly` to this location, and add `export PATH=\"$PATH:$HOME/bin\"` to your `.bashrc` / `.zshrc`, or run `set -Ua fish_user_paths \"$HOME/bin\"` for fish.)\n1. Add the following to the end of your `~/.bashrc`, `~/.zshrc`, or `~/.config/fish/config.fish` file, respectively:\n\n    Bash:\n    ```bash\n    eval \"$(mcfly init bash)\"\n    ```\n\n    Zsh:\n    ```bash\n    eval \"$(mcfly init zsh)\"\n    ```\n\n    Fish:\n    ```bash\n    mcfly init fish | source\n    ```\n1. Run `. ~/.bashrc` / `. ~/.zshrc` / `source ~/.config/fish/config.fish` or restart your terminal emulator.\n\n### Install manually from source\n\n1. [Install Rust 1.40 or later](https://www.rust-lang.org/tools/install)\n1. Run `git clone https://github.com/cantino/mcfly` and `cd mcfly`\n1. Run `cargo install --path .`\n1. Ensure `~/.cargo/bin` is in your `$PATH`.\n1. Add the following to the end of your `~/.bashrc`, `~/.zshrc`, or `~/.config/fish/config.fish` file, respectively:\n\n    Bash:\n    ```bash\n    eval \"$(mcfly init bash)\"\n    ```\n\n    Zsh:\n    ```bash\n    eval \"$(mcfly init zsh)\"\n    ```\n\n    Fish:\n    ```bash\n    mcfly init fish | source\n    ```\n1. Run `. ~/.bashrc` / `. ~/.zshrc` / `source ~/.config/fish/config.fish` or restart your terminal emulator.\n\n### Install by [Zinit](https://github.com/zdharma-continuum/zinit)\n\n* Add below code to your zshrc.\n\n    ```zsh\n    zinit ice lucid wait\"0a\" from\"gh-r\" as\"program\" atload'eval \"$(mcfly init zsh)\"'\n    zinit light cantino/mcfly\n    ```\n* It will download mcfly and install for you.\n* `$(mcfly init zsh)` will be executed after prompt\n\n## iTerm2\n\nTo avoid McFly's UI messing up your scrollback history in iTerm2, make sure this option is unchecked:\n\n<img src=\"/docs/iterm2.jpeg\" alt=\"iterm2 UI instructions\">\n\n## Settings\nA number of settings can be set via environment variables. To set a setting you should add the following snippets to your `~/.bashrc` / `~/.zshrc` / `~/.config/fish/config.fish`.\n\n### Light Mode\nTo swap the color scheme for use in a light terminal, set the environment variable `MCFLY_LIGHT`.\n\nbash / zsh:\n```bash\nexport MCFLY_LIGHT=TRUE\n```\n\nfish:\n```bash\nset -gx MCFLY_LIGHT TRUE\n```\n\nTip: on macOS you can use the following snippet for color scheme to be configured based on system-wide settings:\n\nbash / zsh:\n```bash\nif [[ \"$(defaults read -g AppleInterfaceStyle 2&>/dev/null)\" != \"Dark\" ]]; then\n    export MCFLY_LIGHT=TRUE\nfi\n```\n\n\n### VIM Key Scheme\nBy default Mcfly uses an `emacs` inspired key scheme. If you would like to switch to the `vim` inspired key scheme, set the environment variable `MCFLY_KEY_SCHEME`.\n\nbash / zsh:\n```bash\nexport MCFLY_KEY_SCHEME=vim\n```\n\nfish:\n```bash\nset -gx MCFLY_KEY_SCHEME vim\n```\n\n### Fuzzy Searching\nTo enable fuzzy searching, set `MCFLY_FUZZY` to an integer. 0 is off; higher numbers weight toward shorter matches. Values in the 2-5 range get good results so far; try a few and [report what works best for you](https://github.com/cantino/mcfly/issues/183)!\n\nbash / zsh:\n```bash\nexport MCFLY_FUZZY=2\n```\n\nfish:\n```bash\nset -gx MCFLY_FUZZY 2\n```\n\n### Results Count\nTo change the maximum number of results shown, set `MCFLY_RESULTS` (default: 10).\n\nbash / zsh:\n```bash\nexport MCFLY_RESULTS=50\n```\n\nfish:\n```bash\nset -gx MCFLY_RESULTS 50\n```\n\n### Delete without confirmation\nTo delete without confirmation, set `MCFLY_DELETE_WITHOUT_CONFIRM` to true.\n\nbash / zsh:\n```bash\nexport MCFLY_DELETE_WITHOUT_CONFIRM=true\n```\n\nfish:\n```bash\nset -gx MCFLY_DELETE_WITHOUT_CONFIRM true\n```\n\n### Interface view\nTo change interface view, set `MCFLY_INTERFACE_VIEW` (default: `TOP`).\nAvailable options: `TOP` and `BOTTOM`\n\nbash / zsh:\n```bash\nexport MCFLY_INTERFACE_VIEW=BOTTOM\n```\n\nfish:\n```bash\nset -gx MCFLY_INTERFACE_VIEW BOTTOM\n```\n\n### Disable menu interface\nTo disable the menu interface, set the environment variable `MCFLY_DISABLE_MENU`.\n\nbash / zsh:\n```bash\nexport MCFLY_DISABLE_MENU=TRUE\n```\n\nfish:\n```bash\nset -gx MCFLY_DISABLE_MENU TRUE\n```\n\n### Results sorting\nTo change the sorting of results shown, set `MCFLY_RESULTS_SORT` (default: RANK).\nPossible values `RANK` and `LAST_RUN`\n\nbash / zsh:\n```bash\nexport MCFLY_RESULTS_SORT=LAST_RUN\n```\n\nfish:\n```bash\nset -gx MCFLY_RESULTS_SORT LAST_RUN\n```\n\n### Custom Prompt\nTo change the prompt, set `MCFLY_PROMPT` (default: `$`).\n\nbash / zsh:\n```bash\nexport MCFLY_PROMPT=\"❯\"\n```\n\nfish:\n```bash\nset -gx MCFLY_PROMPT \"❯\"\n```\nNote that only single-character-prompts are allowed. setting `MCFLY_PROMPT` to `\"<str>\"` will reset it to the default prompt.\n\n### Database Location\n\nMcFly stores its SQLite database in the standard location for the OS. On OS X, this is in `~/Library/Application Support/McFly` and on Linux it is in `$XDG_DATA_DIR/mcfly/history.db` (default would be `~/.local/share/mcfly/history.db`). For legacy support, if `~/.mcfly/` exists, it is used instead.\n\n### Slow startup\n\nIf you have a very large history database and you notice that McFly launches slowly, you can set `MCFLY_HISTORY_LIMIT` to something like 10000 to limit how many records are considered when searching. In this example, McFly would search only the latest 10,000 entries.\n\n## HISTTIMEFORMAT\n\nMcFly currently doesn't parse or use `HISTTIMEFORMAT`.\n\n## Possible Future Features\n\n* Add a screencast to README.\n* Learn common command options and autocomplete them in the suggestion UI?\n* Sort command line args when coming up with the template matching string.\n* Possible prioritization improvements:\n  * Cross validation & explicit training set selection.\n  * Learn command embeddings\n\n## Development\n\n### Contributing\n\nContributions and bug fixes are encouraged! However, we may not merge PRs that increase complexity significantly beyond what is already required to maintain the project. If you're in doubt, feel free to open an issue and ask.\n\n### Running tests\n\n`cargo test`\n\n### Releasing (notes for @cantino)\n\n1. Edit `Cargo.toml` and bump the version.\n1. Edit CHANGELOG.txt\n1. Run `cargo clippy` and `cargo fmt`.\n1. Recompile (`cargo build`).\n1. `git add -p`\n1. `git ci -m 'Bumping to vx.x.x'`\n1. `git tag vx.x.x`\n1. `git push origin head --tags`\n1. Let the build finish.\n1. Edit the new Release on Github.\n1. Edit `pkg/brew/mcfly.rb` and update the version and SHAs. (`shasum -a 256 ...`)\n1. Edit `../homebrew-mcfly/pkg/brew/mcfly.rb` too.\n  1. `cp pkg/brew/mcfly.rb ../homebrew-mcfly/pkg/brew/mcfly.rb`\n  1. Compare with `diff ../homebrew-mcfly/pkg/brew/mcfly.rb ../mcfly/pkg/brew/mcfly.rb ; diff ../homebrew-mcfly/HomebrewFormula/mcfly.rb ../mcfly/HomebrewFormula/mcfly.rb`\n1. `git add -p && git ci -m 'Update homebrew' && git push`\n1. `cd ../homebrew-mcfly && git add -p && git ci -m 'Update homebrew' && git push && cd ../mcfly`\n1. `cargo publish`"
}
