{
  "name": "tagref",
  "full_name": "tagref",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Refer to other locations in your codebase",
  "license": "MIT",
  "homepage": "https://github.com/stepchowfun/tagref",
  "versions": {
    "stable": "1.8.4",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/stepchowfun/tagref/archive/v1.8.4.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "dfa5e59312c06a3bf5dceee12045e193b6ae3d4eeb7fab42f1c1edb3f9fe838e"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tagref/blobs/sha256:70c1adcf722b7d54cea4361e0282d67f432154f7c13f7a79f29439427d173b34",
          "sha256": "70c1adcf722b7d54cea4361e0282d67f432154f7c13f7a79f29439427d173b34"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tagref/blobs/sha256:1638f0e7c3f0e448a3bce949fb7624335a6fc4a492b4aa9111ef15ad72462220",
          "sha256": "1638f0e7c3f0e448a3bce949fb7624335a6fc4a492b4aa9111ef15ad72462220"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tagref/blobs/sha256:70558da90d6dc09e838cee7f2e4df5c3720416650ff10b5ec9adbea4b457db82",
          "sha256": "70558da90d6dc09e838cee7f2e4df5c3720416650ff10b5ec9adbea4b457db82"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tagref/blobs/sha256:3afd1c563d3dbc8dc539f534d30c5c2fe183318db294b34a1293ca2be87e28c5",
          "sha256": "3afd1c563d3dbc8dc539f534d30c5c2fe183318db294b34a1293ca2be87e28c5"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tagref/blobs/sha256:d81c5188dd14f91040a01427e3df8a9291b48eccc3ec74122ae79541c7edcc79",
          "sha256": "d81c5188dd14f91040a01427e3df8a9291b48eccc3ec74122ae79541c7edcc79"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tagref/blobs/sha256:151a4439dab0defdb5fa0afb9291b297cd606aa6f7359a0248c9d56f86694ce0",
          "sha256": "151a4439dab0defdb5fa0afb9291b297cd606aa6f7359a0248c9d56f86694ce0"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tagref/blobs/sha256:b00e8b3f2574d8bbc289853bf76d2aa1fe63151ea34192855f469a60000c0e66",
          "sha256": "b00e8b3f2574d8bbc289853bf76d2aa1fe63151ea34192855f469a60000c0e66"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/tagref.rb",
  "ruby_source_checksum": {
    "sha256": "93a66af6fb4e456a651901e6b73260f4db60ef9d0baddb4224a0a46c0dc92498"
  },
  "date_added": "2022-02-09T19:24:35+00:00",
  "readme": "# Tagref\n\n[![Build status](https://github.com/stepchowfun/tagref/workflows/Continuous%20integration/badge.svg?branch=main)](https://github.com/stepchowfun/tagref/actions?query=branch%3Amain)\n\nTagref helps you maintain cross-references in your code. You can use it to help keep things in sync, document assumptions, manage invariants, etc. Airbnb uses it for their front-end monorepo. You should use it too!\n\nTagref works with any programming language, and it respects your `.gitignore` file as well as other common filter files. It's recommended to set up Tagref as an automated continuous integration (CI) check. Tagref is fast and almost certainly won't be the bottleneck in your CI.\n\n## What is it?\n\nWhen writing code, it's common to refer to other parts of the codebase in comments. A fragile way to do that is to mention a file path and a line number. For example:\n\n```python\n# Keep this in sync with controllers/profile.py:304.\n```\n\nUnfortunately, as we all know, this is brittle:\n\n1. The file might be renamed or deleted.\n2. As the code evolves, the line numbers may shift.\n\nA more robust strategy is to reference a specific commit. At least then you know the reader will be able to find the line that you're referencing:\n\n```python\n# Keep this in sync with controllers/profile.py@55217c6:304.\n```\n\nBut that approach isn't ideal, since the current version of the code may have diverged from the referenced commit in non-trivial ways.\n\n*Tagref* solves this problem in a better way. It allows you to annotate your code with *tags* (in comments), which can be referenced from other parts of the codebase. For example, you might have a tag like this:\n\n```python\n# [tag:cities_nonempty] This function always returns a non-empty list.\ndef get_cities():\n  return ['San Francisco', 'Tokyo']\n```\n\nElsewhere, suppose you're writing some code which depends on that postcondition. You can make that clear by referencing the tag:\n\n```python\ncities = get_cities()\n\nfirst_city = cities[0] # This is safe due to [ref:cities_nonempty].\n```\n\nTagref ensures such references remain valid. If someone tries to delete or rename the tag, Tagref will complain. More precisely, it checks the following:\n\n1. References actually point to tags. A tag cannot be deleted or renamed without updating the references that point to it.\n2. Tags are unique. There is never any ambiguity about which tag is being referenced.\n\nNote that, in the example above, Tagref won't ensure that the `get_cities` function actually returns a non-empty list. It isn't magic! It only checks the two conditions above.\n\n## Usage\n\nThe easiest way to use Tagref is to run the `tagref` command with no arguments. It will recursively scan the working directory and check the two conditions described above. Here are the supported command-line options:\n\n```\nUSAGE:\n    tagref [SUBCOMMAND]\n\nOPTIONS:\n    -h, --help\n            Prints help information\n\n    -p, --path <PATH>...\n            Adds the path of a directory to scan [default: .]\n\n    -r, --ref-prefix <REF_PREFIX>\n            Sets the prefix used for locating references [default: ref]\n\n    -t, --tag-prefix <TAG_PREFIX>\n            Sets the prefix used for locating tags [default: tag]\n\n    -v, --version\n            Prints version information\n\nSUBCOMMANDS:\n    check\n            Checks all the tags and references (default)\n\n    help\n            Prints this message or the help of the given subcommand(s)\n\n    list-refs\n            Lists all the references\n\n    list-tags\n            Lists all the tags\n\n    list-unused\n            Lists the unreferenced tags\n```\n\n## Installation instructions\n\n### Installation on macOS or Linux (AArch64 or x86-64)\n\nIf you're running macOS or Linux (AArch64 or x86-64), you can install Tagref with this command:\n\n```sh\ncurl https://raw.githubusercontent.com/stepchowfun/tagref/main/install.sh -LSfs | sh\n```\n\nThe same command can be used again to update to the latest version.\n\nThe installation script supports the following optional environment variables:\n\n- `VERSION=x.y.z` (defaults to the latest version)\n- `PREFIX=/path/to/install` (defaults to `/usr/local/bin`)\n\nFor example, the following will install Tagref into the working directory:\n\n```sh\ncurl https://raw.githubusercontent.com/stepchowfun/tagref/main/install.sh -LSfs | PREFIX=. sh\n```\n\nIf you prefer not to use this installation method, you can download the binary from the [releases page](https://github.com/stepchowfun/tagref/releases), make it executable (e.g., with `chmod`), and place it in some directory in your [`PATH`](https://en.wikipedia.org/wiki/PATH_\\(variable\\)) (e.g., `/usr/local/bin`).\n\n### Installation on Windows (AArch64 or x86-64)\n\nIf you're running Windows (AArch64 or x86-64), download the latest binary from the [releases page](https://github.com/stepchowfun/tagref/releases) and rename it to `tagref` (or `tagref.exe` if you have file extensions visible). Create a directory called `Tagref` in your `%PROGRAMFILES%` directory (e.g., `C:\\Program Files\\Tagref`), and place the renamed binary in there. Then, in the \"Advanced\" tab of the \"System Properties\" section of Control Panel, click on \"Environment Variables...\" and add the full path to the new `Tagref` directory to the `PATH` variable under \"System variables\". Note that the `Program Files` directory might have a different name if Windows is configured for a language other than English.\n\nTo update to an existing installation, simply replace the existing binary.\n\n### Installation with Homebrew\n\nIf you have [Homebrew](https://brew.sh/), you can install Tagref as follows:\n\n```sh\nbrew install tagref\n```\n\nYou can update an existing installation with `brew upgrade tagref`.\n\n### Installation with Cargo\n\nIf you have [Cargo](https://doc.rust-lang.org/cargo/), you can install Tagref as follows:\n\n```sh\ncargo install tagref\n```\n\nYou can run that command with `--force` to update an existing installation.\n\n## Acknowledgements\n\nThe idea for Tagref was inspired by [the GHC notes convention](https://ghc.haskell.org/trac/ghc/wiki/Commentary/CodingStyle#Commentsinthesourcecode). [This article](http://www.aosabook.org/en/ghc.html) has more insights into how the GHC developers manage their codebase."
}
