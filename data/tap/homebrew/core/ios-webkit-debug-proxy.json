{
  "name": "ios-webkit-debug-proxy",
  "full_name": "ios-webkit-debug-proxy",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "DevTools proxy for iOS devices",
  "license": "BSD-3-Clause",
  "homepage": "https://github.com/google/ios-webkit-debug-proxy",
  "versions": {
    "stable": "1.9.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/google/ios-webkit-debug-proxy/archive/v1.9.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "ba9bb2feaa976ad999e9e405d8cd8794cdf3546130a79f4785235200ead3c96c"
    },
    "head": {
      "url": "https://github.com/google/ios-webkit-debug-proxy.git",
      "branch": "master"
    }
  },
  "revision": 1,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/ios-webkit-debug-proxy/blobs/sha256:98a52dee813f9b7cc3bb923f01229d5b11641e18562f22ef52e96e2b248bbb6b",
          "sha256": "98a52dee813f9b7cc3bb923f01229d5b11641e18562f22ef52e96e2b248bbb6b"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/ios-webkit-debug-proxy/blobs/sha256:5268a6ef7b32c2cd9d88e35e9e5667a7127258dd23c22a824e74bd4487e686fb",
          "sha256": "5268a6ef7b32c2cd9d88e35e9e5667a7127258dd23c22a824e74bd4487e686fb"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/ios-webkit-debug-proxy/blobs/sha256:3d693f91e25d8b165037afcbc36e14d8d54c8317bd01c770e5077a0ea4a0e72d",
          "sha256": "3d693f91e25d8b165037afcbc36e14d8d54c8317bd01c770e5077a0ea4a0e72d"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/ios-webkit-debug-proxy/blobs/sha256:777efb32172aa98ef7cde6fd34107cd7fb42f132e12c8595bc2d5ad1c674e217",
          "sha256": "777efb32172aa98ef7cde6fd34107cd7fb42f132e12c8595bc2d5ad1c674e217"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/ios-webkit-debug-proxy/blobs/sha256:e17aec779a16ba66f75eb9bbbc76db078192ee15b5f87490e2ccfc54f699d4c8",
          "sha256": "e17aec779a16ba66f75eb9bbbc76db078192ee15b5f87490e2ccfc54f699d4c8"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/ios-webkit-debug-proxy/blobs/sha256:df411040e0e3babe6a487de5930b3ed7387610d1673ee42679780a34f72f3557",
          "sha256": "df411040e0e3babe6a487de5930b3ed7387610d1673ee42679780a34f72f3557"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "autoconf",
    "automake",
    "libtool",
    "pkg-config"
  ],
  "dependencies": [
    "libimobiledevice",
    "libplist",
    "openssl@3"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/ios-webkit-debug-proxy.rb",
  "ruby_source_checksum": {
    "sha256": "c015efe3dacfb17320c169894f8442c3a88f6292ca3355b1fa897a1ebaa01e17"
  },
  "date_added": "2013-03-20T13:28:37-07:00",
  "readme": "# iOS WebKit Debug Proxy\n\nThe ios_webkit_debug_proxy (aka _iwdp_) proxies requests from usbmuxd daemon over a websocket connection, allowing developers to send commands to MobileSafari and UIWebViews on real and simulated iOS devices.\n\n## Installation\n\niOS WebKit Debug Proxy works on Linux, MacOS & Windows.\n\n### MacOS\n\nIt's easiest to install with [homebrew](http://brew.sh/):\n\n```console\nbrew install ios-webkit-debug-proxy\n```\n### Windows\nIt's easiest to install with [scoop](http://scoop.sh/):\n```\nscoop bucket add extras\nscoop install ios-webkit-debug-proxy\n```\nNote: you also need the latest version of [iTunes](https://www.apple.com/il/itunes/download/) installed.\n\n### Linux\n\nInstall dependencies available in apt repository:\n```console\nsudo apt-get install autoconf automake libusb-dev libusb-1.0-0-dev libplist-dev libtool libssl-dev\n```\n\nBuild and install dependencies that require more recent versions:\n- [libimobiledevice](https://github.com/libimobiledevice/libimobiledevice)\n- [libusbmuxd](https://github.com/libimobiledevice/libusbmuxd)\n- [usbmuxd](https://github.com/libimobiledevice/usbmuxd)\n- [libplist](https://github.com/libimobiledevice/libplist)\n\nBuild and install `ios-webkit-debug-proxy`:\n```console\ngit clone https://github.com/google/ios-webkit-debug-proxy.git\ncd ios-webkit-debug-proxy\n\n./autogen.sh\nmake\nsudo make install\n```\n\n## Usage\n\nOn Linux, you must run the `usbmuxd` daemon.  The above install adds a /lib/udev rule to start the daemon whenever a device is attached.\n\nTo verify that usbmuxd can list your attached device(s), ensure that `libimobiledevice-utils` is installed and then run `idevice_id -l`.\n\n### Start the simulator or device\n\nThe iOS Simulator is supported, but it must be started **before** the proxy.  The simulator can be started in XCode,  standalone, or via the command line:\n\n```sh\n# Xcode changes these paths frequently, so doublecheck them\nSDK_DIR=\"/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs\"\nSIM_APP=\"/Applications/Xcode.app/Contents/Developer/Applications/Simulator.app/Contents/MacOS/Simulator\"\n$SIM_APP -SimulateApplication $SDK_DIR/iPhoneSimulator8.4.sdk/Applications/MobileSafari.app/MobileSafari\n```\n\n#### Enable the inspector\n\nYour attached iOS devices must have â‰¥1 open browser tabs and the inspector enabled via:\n  `Settings > Safari > Advanced > Web Inspector = ON`\n\n### Start the proxy\n\n```console\nios_webkit_debug_proxy\n```\n\n* `--debug` for verbose output.\n* `--frontend` to specify a frontend\n* `--help` for more options.\n* `Ctrl-C` to quit. Also, the proxy can be left running as a background process.\n\n### Using with DevTools\n\nios_webkit_debug_proxy can be used with many tools such as Chrome DevTools and Safari Web Inspector.\n\n#### Chrome Devtools\n\nIn recent versions of Chrome and Safari there're major discrepancies between [Chrome Remote Debugging Protocol](https://developer.chrome.com/devtools/docs/debugger-protocol) and [Webkit Inspector Protocol](https://github.com/WebKit/webkit/tree/master/Source/JavaScriptCore/inspector/protocol), which means that newer versions of Chrome DevTools aren't compatible with Safari.\n\n#### Safari Web Inspector\nYou can use Safari Web Inspector extracted from Webkit sources, e.g. [artygus/webkit-webinspector](https://github.com/artygus/webkit-webinspector) or [HimbeersaftLP/ios-safari-remote-debug-kit](https://github.com/HimbeersaftLP/ios-safari-remote-debug-kit).\n\n#### Firefox DevTools via Valence\nAnother option is [mozilla/valence](https://github.com/mozilla/valence) which enables Firefox DevTools to be used with iOS.\n\n## Configuration\n\n### View and inspect debuggable tabs\n\nNavigate to [localhost:9221](http://localhost:9221). You'll see a listing of all connected devices.\n\nClick through to view tabs available on each, and click through again to open the DevTools for a tab.\n\n### Setting the DevTools UI URL\n\n[Chrome DevTools UI](https://developers.google.com/chrome-developer-tools/) used as a default frontend:\n\n    http://chrome-devtools-frontend.appspot.com/static/27.0.1453.93/devtools.html\n\nYou can use the `-f` argument to specify different frontend source, like Chrome's local DevTools, a local\n[Chromium checkout](https://chromium.googlesource.com/chromium/src/+/master/third_party/WebKit/Source/devtools/) or another URL:\n\n```console\n# examples:\nios_webkit_debug_proxy -f chrome-devtools://devtools/bundled/inspector.html\nios_webkit_debug_proxy -f ~/chromium/src/third_party/WebKit/Source/devtools/front_end/inspector.html\nios_webkit_debug_proxy -f http://foo.com:1234/bar/inspector.html\n```\n\nIf you use `-f chrome-devtools://devtools/bundled/inspector.html`, you won't be able to click the links shown in `localhost:9222` as Chrome blocks clicking these URLs. However, you can copy/paste them into the address bar.\n\nJust the same, you can apply the appropriate port (9222) and page (2) values below.\n\n    chrome-devtools://devtools/bundled/inspector.html?ws=localhost:9222/devtools/page/1\n\nThe `-f` value must end in \".html\". Due to security reasons, `https` URLs will not work; use `http` or force-allow with the URL bar's shield icon. As of Chrome 45, the primary URL [changed](https://codereview.chromium.org/1144393004/) from `devtools.html` to `inspector.html`.\n\nTo disable the frontend proxy, use the `--no-frontend` argument.\n\n#### Port assigment\n\nThe default configuration works well for most developers. The device_id-to-port assignment defaults to:\n\n    :9221 for the device list\n    :9222 for the first iOS device that is attached\n    :9223 for the second iOS device that is attached\n    ...\n    :9322 for the max device\n\nIf a port is in use then the next available port will be used, up to the range limit.\n\nThe port assignment is first-come-first-serve but is preserved if a device is detached and reattached, assuming that the proxy is not restarted, e.g.:\n\n  1. start the proxy\n  1. the device list gets :9221\n  1. attach A gets :9222\n  1. attach B gets :9223\n  1. detach A, doesn't affect B's port\n  1. attach C gets :9224 (not :9222)\n  1. reattach A gets :9222 again (not :9225)\n\nThe port assignment rules can be set via the command line with `-c`.  The default is equivalent to:\n\n    ios_webkit_debug_proxy -c null:9221,:9222-9322\n\nwhere \"null\" represents the device list.  The following example restricts the proxy to a single device and port:\n\n    ios_webkit_debug_proxy -c 4ea8dd11e8c4fbc1a2deadbeefa0fd3bbbb268c7:9227\n\n\n### Troubleshooting\n\n##### undefined reference to symbol 'log10@@GLIBC_2.2.5'\n```console\n/usr/bin/ld: ios_webkit_debug_proxy-char_buffer.o: undefined reference to symbol 'log10@@GLIBC_2.2.5'\n//lib/x86_64-linux-gnu/libm.so.6: error adding symbols: DSO missing from command line\n```\n\nRun this before `make`: `./configure LIBS=\"-lm\"`\n\n##### error while loading shared libraries: libimobiledevice.so.6\n```console\nios_webkit_debug_proxy: error while loading shared libraries: libimobiledevice.so.6: cannot open shared object file: No such file or directory\n```\n\nRun `sudo ldconfig`\n\n##### ssl sendq retry failed: Undefined error: 0\n\nshould only happen with versions > 1.8.5, make sure ios-webkit-debug-proxy is built with same version of libssl that libimobildevice was built with\n\n##### idevice_id not found\n\nThe `idevice_id` executable may be found as part of the libimobiledevice-utils package.\n\n##### could not start com.apple.webinspector! success\n\n[Remove and rebuild libimobiledevice](https://github.com/google/ios-webkit-debug-proxy/issues/82#issuecomment-74205898).\n\n##### Could not connect to lockdownd (or doesn't work with iOS10+)\n> Could not connect to lockdownd. Exiting.: No such file or directory. Unable to attach <long id> inspector ios_webkit_debug_proxy\n\nCheck the device for [a prompt to trust the connected computer](http://i.stack.imgur.com/hPaqX.png). Choose \"Trust\" and try again.\n\n> Could not connect to lockdownd. Exiting.: Broken pipe. Unable to attach <long id> inspector\n\nor\n\n> Could not connect to lockdownd, error code -\\<number\\>. Exiting.\n\nMake sure you're using latest version of ios-webkit-debug-proxy\n\n##### Inspectable pages list is empty for iOS >= 12.2\n\nMake sure you're using latest version of ios-webkit-debug-proxy\n\n##### Can not see Simulator\n\n  - Make sure you started simulator before the proxy\n  - Check that webinspector switch is enabled (Settings -> Safari -> Advanced -> Web Inspector)\n  - Most likely simulator's web inspector daemon listens on ipv6 interface, check that you have `::1 localhost` line in `/etc/hosts`\n\n##### Building under Rosetta (OS X)\n\nlibimobildevice formulae [depends on](https://github.com/Homebrew/homebrew-core/blob/d6c416caf0622f2aac47742bca679c3510d0b1d9/Formula/libimobiledevice.rb#L30) openssl@1.1, which is key-only and requires the following env paths for the build\n\n```console\nexport PKG_CONFIG_PATH=\"/usr/local/opt/openssl@1.1/lib/pkgconfig\"\nexport LDFLAGS=\"-L/usr/local/opt/openssl@1.1/lib\"\nexport CPPFLAGS=\"-I/usr/local/opt/openssl@1.1/include\"\n```\n\n##### If no luck so far...\nLastly, always try replugging in the USB cable.\n\n\n## IWDP Clients\n\nJSON-formatted APIs are provided for programmatic clients.\n  * <http://localhost:9221/json> will list all devices\n  * <http://localhost:9222/json> to list device \":9222\"'s tabs\n  * [ws://localhost:9222/devtools/page/1]() to inspect a tab.\n\nSee the [examples/README](examples/README.md) for example clients: NodeJS, C, clientside JS, websocket and more.\n\n## Design\n\n![Alt overview](overview.png \"Overview\")\n\nView the [design document](design.md) for an overview of the source layout and architecture.\n\n## License and Copyright\n\nGoogle BSD license <https://developers.google.com/google-bsd-license>\nCopyright 2012 Google Inc.  <wrightt@google.com>\n\nThe proxy uses the following open-source packages:\n   - [libplist 2.2.0](http://cgit.sukimashita.com/libplist.git)\n   - [libusbmuxd 2.0.0](http://cgit.sukimashita.com/usbmuxd.git/)\n   - [libimobiledevice 1.3.0](http://cgit.sukimashita.com/libimobiledevice.git)"
}
