{
  "name": "cascadia",
  "full_name": "cascadia",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Go cascadia package command-line CSS selector",
  "license": "MIT",
  "homepage": "https://github.com/suntong/cascadia",
  "versions": {
    "stable": "1.3.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/suntong/cascadia/archive/refs/tags/v1.3.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "1ee285d683aa3956dbeb28cd9ee2c60f0ab3a5da8e66a98ca3fb718d3214b775"
    },
    "head": {
      "url": "https://github.com/suntong/cascadia.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cascadia/blobs/sha256:506f6721049179118bea0514854909832198d552c52bb122f1648c17b91ab7dc",
          "sha256": "506f6721049179118bea0514854909832198d552c52bb122f1648c17b91ab7dc"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cascadia/blobs/sha256:506f6721049179118bea0514854909832198d552c52bb122f1648c17b91ab7dc",
          "sha256": "506f6721049179118bea0514854909832198d552c52bb122f1648c17b91ab7dc"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cascadia/blobs/sha256:506f6721049179118bea0514854909832198d552c52bb122f1648c17b91ab7dc",
          "sha256": "506f6721049179118bea0514854909832198d552c52bb122f1648c17b91ab7dc"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cascadia/blobs/sha256:bd7802721fdc17cfa6a5c99688899786c5d850679c83a3fa9cbbdb91a490ae53",
          "sha256": "bd7802721fdc17cfa6a5c99688899786c5d850679c83a3fa9cbbdb91a490ae53"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cascadia/blobs/sha256:bd7802721fdc17cfa6a5c99688899786c5d850679c83a3fa9cbbdb91a490ae53",
          "sha256": "bd7802721fdc17cfa6a5c99688899786c5d850679c83a3fa9cbbdb91a490ae53"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cascadia/blobs/sha256:bd7802721fdc17cfa6a5c99688899786c5d850679c83a3fa9cbbdb91a490ae53",
          "sha256": "bd7802721fdc17cfa6a5c99688899786c5d850679c83a3fa9cbbdb91a490ae53"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cascadia/blobs/sha256:526b3788f4ac0884adfd8b6603bb0e8fe5719d77cca281ad5846b45f3c729106",
          "sha256": "526b3788f4ac0884adfd8b6603bb0e8fe5719d77cca281ad5846b45f3c729106"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/cascadia.rb",
  "ruby_source_checksum": {
    "sha256": "2ea3d9dbb6880fe02ac28dfc0dd56ad43a4edb85733bb543a53b6bf64ca39532"
  },
  "date_added": "2023-01-09T04:23:33+00:00",
  "readme": "# cascadia\n<!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section -->\n[![All Contributors](https://img.shields.io/badge/all_contributors-6-orange.svg?style=flat-square)](#contributors-)\n<!-- ALL-CONTRIBUTORS-BADGE:END -->\n\n[![MIT License](http://img.shields.io/badge/License-MIT-blue.svg)](LICENSE)\n[![GoDoc](https://godoc.org/github.com/suntong/cascadia?status.svg)](http://godoc.org/github.com/suntong/cascadia)\n[![Go Report Card](https://goreportcard.com/badge/github.com/suntong/cascadia)](https://goreportcard.com/report/github.com/suntong/cascadia)\n[![Build Status](https://github.com/suntong/cascadia/actions/workflows/go-release-build.yml/badge.svg?branch=master)](https://github.com/suntong/cascadia/actions/workflows/go-release-build.yml)\n[![PoweredBy WireFrame](https://github.com/go-easygen/wireframe/blob/master/PoweredBy-WireFrame-B.svg)](http://godoc.org/github.com/go-easygen/wireframe)\n\n\n\n## TOC\n- [cascadia - CSS selector CLI tool](#cascadia---css-selector-cli-tool)\n- [Usage](#usage)\n  - [$ cascadia](#-cascadia)\n  - [Examples](#examples)\n- [Download/install binaries](#downloadinstall-binaries)\n  - [The binary executables](#the-binary-executables)\n  - [Distro package](#distro-package)\n  - [Debian package](#debian-package)\n- [Install Source](#install-source)\n- [Author](#author)\n- [Contributors](#contributors-)\n\n## cascadia - CSS selector CLI tool\n\nThe [Go Cascadia package](https://github.com/andybalholm/cascadia) implements CSS selectors for html. This is the command line tool, started as a thin wrapper around that package, but growing into a better tool to test CSS selectors without writing Go code:\n\n## Usage\n\n### $ cascadia\n```sh\ncascadia wrapper\nVersion 1.3.0 built on 2023-06-30\nCopyright (C) 2016-2023, Tong Sun\n\nCommand line interface to go cascadia CSS selectors package\n\nUsage:\n  cascadia -i in -c css -o [Options...]\n\nOptions:\n\n  -h, --help        display help information \n  -i, --in         *The html/xml file to read from (or stdin) \n  -o, --out        *The output file (or stdout) \n  -c, --css        *CSS selectors (can provide more if not using --piece) \n  -t, --text        Text output for none-block selection mode \n  -R, --Raw         Raw text output, no trimming of leading and trailing white space \n  -p, --piece       sub CSS selectors within -css to split that block up into pieces\n\t\t\tformat: PieceName=[PieceStyle:]selector_string\n\t\t\t PieceStyle:\n\t\t\t  RAW : will return the selected as-is\n\t\t\t  ATTR : will return the value of attribute selector_string\n\t\t\t Else the text will be returned \n  -d, --delimiter   delimiter for pieces csv output [=\t]\n  -w, --wrap-html   wrap up the output with html tags \n  -y, --style       style component within the wrapped html head \n  -b, --base        base href tag used in the wrapped up html \n  -q, --quiet       be quiet\n```\n\nIts output has two modes, _none-block selection mode_ and _block selection mode_, depending on whether the `--piece` parameter is given on the command line or not.\n\nFor details about the concept of block and pieces, check out [andrew-d/goscrape](https://github.com/andrew-d/goscrape) (in fact, `cascadia` was initially developed just for it, so that I don't need to tweak Go code, build & run it just to test out the block and pieces selectors). Here is the exception:\n\n- Inside each page, there's 1 or more *blocks* - some logical method of splitting up a page into subcomponents.\n- Inside each block, you define some number of *pieces* of data that you wish\n  to extract.  Each piece consists of a name, a selector, and what data to\n  extract from the current block.\n\nThis all sounds rather complicated, but in practice it's quite simple. See the next section for details.\n\nIn summary,\n\n- The none-block selection mode will output the selection as HTML source by default\n  * but if `-t`, or `--text` cli option is provided, the none-block selection mode will [output as text](https://github.com/suntong/cascadia/issues/6#issuecomment-980757881) instead.\n    - By default, such text output will get their leading and trailing white space trimmed.\n    - However, if `-R`, or `--Raw` cli option is provided, no trimming will be done.\n- The block selection mode will output HTML as text in a `tsv`/`csv` table form by default\n  * if the `--piece` selection is prefixed with `RAW:`, then that specific block selection will output in HTML instead. See the following for details.\n\n### Examples\n\nAll the three `-i -o -c` options are required. By default it reads from `stdin` and output to `stdout`:\n\n```sh\n$ echo '<input type=\"radio\" name=\"Sex\" value=\"F\" />' | tee /tmp/cascadia.xml | cascadia -i -o -c 'input[name=Sex][value=F]'\n1 elements for 'input[name=Sex][value=F]':\n<input type=\"radio\" name=\"Sex\" value=\"F\"/>\n```\n\nEither the input or the output can be followed by a file name:\n\n\n```sh\n$ cascadia -i /tmp/cascadia.xml -o -c 'input[name=Sex][value=F]'\n1 elements for 'input[name=Sex][value=F]':\n<input type=\"radio\" name=\"Sex\" value=\"F\"/>\n```\n\n\n```sh\n$ cascadia -i /tmp/cascadia.xml -c 'input[name=Sex][value=F]' -o /tmp/out.html\n1 elements for 'input[name=Sex][value=F]':\n\n$ cat /tmp/out.html\n<input type=\"radio\" name=\"Sex\" value=\"F\"/>\n```\n\nMore other options can be applied too:\n\n```sh\n# using --wrap-html\n$ cascadia -i /tmp/cascadia.xml -c 'input[name=Sex][value=F]' -o /tmp/out.html -w\n1 elements for 'input[name=Sex][value=F]':\n\n$ cat /tmp/out.html\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<base href=\"\">\n\n</head>\n<body>\n<input type=\"radio\" name=\"Sex\" value=\"F\"/>\n</body>\n\n# using --wrap-html with --style\n$ cascadia -i /tmp/cascadia.xml -c 'input[name=Sex][value=F]' -o /tmp/out.html -w -y '<link rel=\"stylesheet\" href=\"styles.css\">'\n1 elements for 'input[name=Sex][value=F]':\n\n$ cat /tmp/out.html\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<base href=\"\">\n<link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n<input type=\"radio\" name=\"Sex\" value=\"F\"/>\n</body>\n```\n\n- For more on using the `--style` option, check out [\"adding styles\"](https://github.com/suntong/cascadia/wiki/Adding-styles).\n- For more examples, check out the [wiki](https://github.com/suntong/cascadia/wiki/), which includes but not limits to, \n\n  * [None-block selection mode](https://github.com/suntong/cascadia/wiki#none-block-selection-mode)\n    * [Multi-selection](https://github.com/suntong/cascadia/wiki#multi-selection)\n  * [Block selection mode](https://github.com/suntong/cascadia/wiki#block-selection-mode)\n    * [Block selection mode HTML output](https://github.com/suntong/cascadia/wiki#block-selection-mode-html-output)\n    * [Block selection mode table output](https://github.com/suntong/cascadia/wiki#block-selection-mode-table-output)\n    * [Attribute selection](https://github.com/suntong/cascadia/wiki#attribute-selection)\n    * [Twitter Search](https://github.com/suntong/cascadia/wiki#twitter-search)\n  * [Reconstruct the separated pages](https://github.com/suntong/cascadia/wiki#reconstruct-the-separated-pages)\n  * [More On CSS Selector](https://github.com/suntong/cascadia/wiki#more-on-css-selector)\n\n## Install Debian/Ubuntu package\n\n    sudo apt install -y cascadia\n\n## Download/install binaries\n\n- The latest binary executables are available \nas the result of the Continuous-Integration (CI) process.\n- I.e., they are built automatically right from the source code at every git release by [GitHub Actions](https://docs.github.com/en/actions).\n- There are two ways to get/install such binary executables\n  * Using the **binary executables** directly, or\n  * Using **packages** for your distro\n\n### The binary executables\n\n- The latest binary executables are directly available under  \nhttps://github.com/suntong/cascadia/releases/latest \n- Pick & choose the one that suits your OS and its architecture. E.g., for Linux, it would be the `cascadia_verxx_linux_amd64.tar.gz` file. \n- Available OS for binary executables are\n  * Linux\n  * Mac OS (darwin)\n  * Windows\n- If your OS and its architecture is not available in the download list, please let me know and I'll add it.\n- The manual installation is just to unpack it and move/copy the binary executable to somewhere in `PATH`. For example,\n\n``` sh\ntar -xvf cascadia_*_linux_amd64.tar.gz\nsudo mv -v cascadia_*_linux_amd64/cascadia /usr/local/bin/\nrmdir -v cascadia_*_linux_amd64\n```\n\n\n### Distro package\n\n- [Packages available for Linux distros](https://cloudsmith.io/~suntong/repos/repo/packages/) are\n  * [Alpine Linux](https://cloudsmith.io/~suntong/repos/repo/setup/#formats-alpine)\n  * [Debian](https://cloudsmith.io/~suntong/repos/repo/setup/#formats-deb)\n  * [RedHat](https://cloudsmith.io/~suntong/repos/repo/setup/#formats-rpm)\n\nThe repo setup instruction url has been given above.\nFor example, for [Debian](https://cloudsmith.io/~suntong/repos/repo/setup/#formats-deb) --\n\n### Debian package\n\n\n```sh\ncurl -1sLf \\\n  'https://dl.cloudsmith.io/public/suntong/repo/setup.deb.sh' \\\n  | sudo -E bash\n\n# That's it. You then can do your normal operations, like\n\nsudo apt update\napt-cache policy cascadia\n\nsudo apt install -y cascadia\n```\n\n## Install Source\n\nTo install the source code instead:\n\n```\ngo install github.com/suntong/cascadia@latest\n```\n\n## Author\n\nTong SUN  \n![suntong from cpan.org](https://img.shields.io/badge/suntong-%40cpan.org-lightgrey.svg \"suntong from cpan.org\")\n\n_Powered by_ [**WireFrame**](https://github.com/go-easygen/wireframe)  \n[![PoweredBy WireFrame](https://github.com/go-easygen/wireframe/blob/master/PoweredBy-WireFrame-Y.svg)](http://godoc.org/github.com/go-easygen/wireframe)  \nthe _one-stop wire-framing solution_ for Go cli based projects, from _init_ to _deploy_.\n## Contributors ✨\n\nThanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/suntong\"><img src=\"https://avatars.githubusercontent.com/u/422244?v=4?s=100\" width=\"100px;\" alt=\"suntong\"/><br /><sub><b>suntong</b></sub></a><br /><a href=\"https://github.com/suntong/cascadia/commits?author=suntong\" title=\"Code\">💻</a> <a href=\"#ideas-suntong\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#design-suntong\" title=\"Design\">🎨</a> <a href=\"#data-suntong\" title=\"Data\">🔣</a> <a href=\"https://github.com/suntong/cascadia/commits?author=suntong\" title=\"Tests\">⚠️</a> <a href=\"https://github.com/suntong/cascadia/issues?q=author%3Asuntong\" title=\"Bug reports\">🐛</a> <a href=\"https://github.com/suntong/cascadia/commits?author=suntong\" title=\"Documentation\">📖</a> <a href=\"#blog-suntong\" title=\"Blogposts\">📝</a> <a href=\"#example-suntong\" title=\"Examples\">💡</a> <a href=\"#tutorial-suntong\" title=\"Tutorials\">✅</a> <a href=\"#tool-suntong\" title=\"Tools\">🔧</a> <a href=\"#platform-suntong\" title=\"Packaging/porting to new platform\">📦</a> <a href=\"https://github.com/suntong/cascadia/pulls?q=is%3Apr+reviewed-by%3Asuntong\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#question-suntong\" title=\"Answering Questions\">💬</a> <a href=\"#maintenance-suntong\" title=\"Maintenance\">🚧</a> <a href=\"#infra-suntong\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/hoshsadiq\"><img src=\"https://avatars.githubusercontent.com/u/600045?v=4?s=100\" width=\"100px;\" alt=\"Hosh\"/><br /><sub><b>Hosh</b></sub></a><br /><a href=\"https://github.com/suntong/cascadia/commits?author=hoshsadiq\" title=\"Code\">💻</a> <a href=\"https://github.com/suntong/cascadia/issues?q=author%3Ahoshsadiq\" title=\"Bug reports\">🐛</a> <a href=\"#userTesting-hoshsadiq\" title=\"User Testing\">📓</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/mh-cbon\"><img src=\"https://avatars.githubusercontent.com/u/17096799?v=4?s=100\" width=\"100px;\" alt=\"mh-cbon\"/><br /><sub><b>mh-cbon</b></sub></a><br /><a href=\"https://github.com/suntong/cascadia/issues?q=author%3Amh-cbon\" title=\"Bug reports\">🐛</a> <a href=\"#ideas-mh-cbon\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#userTesting-mh-cbon\" title=\"User Testing\">📓</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.digglife.net\"><img src=\"https://avatars.githubusercontent.com/u/1468378?v=4?s=100\" width=\"100px;\" alt=\"朱聖黎 (Zhu Sheng Li)\"/><br /><sub><b>朱聖黎 (Zhu Sheng Li)</b></sub></a><br /><a href=\"https://github.com/suntong/cascadia/issues?q=author%3Adigglife\" title=\"Bug reports\">🐛</a> <a href=\"#userTesting-digglife\" title=\"User Testing\">📓</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/himcc\"><img src=\"https://avatars.githubusercontent.com/u/3031794?v=4?s=100\" width=\"100px;\" alt=\"himcc\"/><br /><sub><b>himcc</b></sub></a><br /><a href=\"https://github.com/suntong/cascadia/commits?author=himcc\" title=\"Code\">💻</a> <a href=\"https://github.com/suntong/cascadia/issues?q=author%3Ahimcc\" title=\"Bug reports\">🐛</a> <a href=\"#userTesting-himcc\" title=\"User Testing\">📓</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"http://www.devalias.net/\"><img src=\"https://avatars.githubusercontent.com/u/753891?v=4?s=100\" width=\"100px;\" alt=\"Glenn 'devalias' Grant\"/><br /><sub><b>Glenn 'devalias' Grant</b></sub></a><br /><a href=\"https://github.com/suntong/cascadia/commits?author=0xdevalias\" title=\"Code\">💻</a> <a href=\"https://github.com/suntong/cascadia/issues?q=author%3A0xdevalias\" title=\"Bug reports\">🐛</a> <a href=\"#userTesting-0xdevalias\" title=\"User Testing\">📓</a></td>\n    </tr>\n  </tbody>\n</table>\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!"
}
