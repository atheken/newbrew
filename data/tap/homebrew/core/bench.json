{
  "name": "bench",
  "full_name": "bench",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Command-line benchmark tool",
  "license": "BSD-3-Clause",
  "homepage": "https://github.com/Gabriella439/bench",
  "versions": {
    "stable": "1.0.12",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://hackage.haskell.org/package/bench-1.0.12/bench-1.0.12.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "a6376f4741588201ab6e5195efb1e9921bc0a899f77a5d9ac84a5db32f3ec9eb"
    },
    "head": {
      "url": "https://github.com/Gabriella439/bench.git",
      "branch": "main"
    }
  },
  "revision": 1,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bench/blobs/sha256:a975d4ed8425503adbd49345a5679f53057eff242dd39cd7bdf42e926b94d06f",
          "sha256": "a975d4ed8425503adbd49345a5679f53057eff242dd39cd7bdf42e926b94d06f"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bench/blobs/sha256:117af640f3037233d19685c1dc525fa7de4f6aa45bc38d8473d163c5591aed8c",
          "sha256": "117af640f3037233d19685c1dc525fa7de4f6aa45bc38d8473d163c5591aed8c"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bench/blobs/sha256:2666513d2557abb201a807607752b3f46fe17ea317962f6091eca10394721d78",
          "sha256": "2666513d2557abb201a807607752b3f46fe17ea317962f6091eca10394721d78"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bench/blobs/sha256:c092373768cce8b0beee7c4a110afd4eca5a4cc57090a87ac065d58eb72f376a",
          "sha256": "c092373768cce8b0beee7c4a110afd4eca5a4cc57090a87ac065d58eb72f376a"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bench/blobs/sha256:c9ee5713f0c97785f37506da9e34f4cda353beaad06a5209fce27aeb93e3f770",
          "sha256": "c9ee5713f0c97785f37506da9e34f4cda353beaad06a5209fce27aeb93e3f770"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bench/blobs/sha256:b1eccbf77a04e4de1a59a0eed5c0f6e2d8b6b191736ee9ad4fdea9a173010651",
          "sha256": "b1eccbf77a04e4de1a59a0eed5c0f6e2d8b6b191736ee9ad4fdea9a173010651"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bench/blobs/sha256:493de8888b6fe1745a887cda10a421448a08943496124b1cb49cc02453002638",
          "sha256": "493de8888b6fe1745a887cda10a421448a08943496124b1cb49cc02453002638"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bench/blobs/sha256:cd0e9ae0bc13d3db0330ae839689d9b2d129bc0bf0c1b7165033968a9e6a0f22",
          "sha256": "cd0e9ae0bc13d3db0330ae839689d9b2d129bc0bf0c1b7165033968a9e6a0f22"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bench/blobs/sha256:a03594dd8b0b772b8fa105fdb2426b318267f5527d994e4ae6961aaf11c7b008",
          "sha256": "a03594dd8b0b772b8fa105fdb2426b318267f5527d994e4ae6961aaf11c7b008"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cabal-install",
    "ghc@9.2"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "zlib"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "2706c66e8def3eeba4d9bf1adf66221c8ad70701",
  "ruby_source_path": "Formula/bench.rb",
  "ruby_source_checksum": {
    "sha256": "92e1ed6ede721aabbaf2c4e34b96b8aadc5b9bcb107d294cfcf62afc53ce8bb8"
  },
  "date_added": "2017-10-09T06:52:38-07:00",
  "readme": "# Bench v1.0.12\n\nThis project provides the `bench` command-line tool, which is a more powerful\nalternative to the `time` command.  Use `bench` to benchmark a command using\nHaskell's `criterion` library.\n\nKey features:\n\n* Repeated runs\n* Detailed statistical output\n* Gorgeous HTML output (via the `--output` flag)\n  ([Example](http://www.serpentine.com/criterion/fibber.html))\n* Also supports CSV or templated output\n\n## Quick Start\n\nYou can install `bench` on macOS via [Homebrew](http://braumeister.org/formula/bench):\n\n```bash\n$ brew install bench\n```\n\n... or you can install `bench` using Haskell's `stack` tool.  To do that, first\ndownload the [Haskell toolchain](https://www.haskell.org/downloads#minimal),\nwhich provides the `stack` tool, then run:\n\n```bash\n$ stack setup\n$ stack install bench\n```\n\n`stack install` will install `bench` to `~/.local/bin` or something similar.\nMake sure that the installation directory is on your executable search path\nbefore running `bench`.  `stack` will remind you to do this if you forget.\n\nAnother alternative is to use [Nix package manager](https://nixos.org/nix/). After its installation just execute:\n\n```$ nix-env -i bench```\n\nOnce you've installed `bench` (either by download or installation via `stack` or Nix),\nyou can begin benchmarking programs:\n\n```bash\n$ bench 'sleep 1'  # Don't forget to quote the command line\nbenchmarking sleep 1\ntime                 1.003 s    (1.002 s .. 1.003 s)\n                     1.000 R²   (1.000 R² .. 1.000 R²)\nmean                 1.003 s    (1.003 s .. 1.003 s)\nstd dev              92.92 μs   (0.0 s .. 101.8 μs)\nvariance introduced by outliers: 19% (moderately inflated)\n\n$ bench true\nbenchmarking true\ntime                 410.3 μs   (382.3 μs .. 443.3 μs)\n                     0.974 R²   (0.961 R² .. 0.987 R²)\nmean                 420.7 μs   (406.8 μs .. 435.7 μs)\nstd dev              47.69 μs   (40.09 μs .. 57.91 μs)\nvariance introduced by outliers: 81% (severely inflated)\n```\n\nAll output from the command being benchmarked is discarded.\n\nMultiple commands are also supported:\n\n```bash\n$ bench id ls \"sleep 0.1\"\nbenchmarking bench/id\ntime                 4.798 ms   (4.764 ms .. 4.833 ms)\n                     0.999 R²   (0.998 R² .. 1.000 R²)\nmean                 4.909 ms   (4.879 ms .. 4.953 ms)\nstd dev              104.6 μs   (78.91 μs .. 135.7 μs)\n\nbenchmarking bench/ls\ntime                 2.941 ms   (2.889 ms .. 3.006 ms)\n                     0.996 R²   (0.992 R² .. 0.998 R²)\nmean                 3.051 ms   (3.015 ms .. 3.094 ms)\nstd dev              129.7 μs   (104.3 μs .. 178.3 μs)\nvariance introduced by outliers: 25% (moderately inflated)\n\nbenchmarking bench/sleep 0.1\ntime                 109.9 ms   (108.5 ms .. 111.0 ms)\n                     1.000 R²   (1.000 R² .. 1.000 R²)\nmean                 109.2 ms   (108.5 ms .. 109.7 ms)\nstd dev              903.0 μs   (676.4 μs .. 1.212 ms)\n```\n\nYou can also output an HTML file graphing the distribution of\ntimings by using the `--output` flag:\n\n```bash\n$ bench 'ls /usr/bin | wc -l' --output example.html\nbenchmarking ls /usr/bin | wc -l\ntime                 6.716 ms   (6.645 ms .. 6.807 ms)\n                     0.999 R²   (0.999 R² .. 0.999 R²)\nmean                 7.005 ms   (6.897 ms .. 7.251 ms)\nstd dev              462.0 μs   (199.3 μs .. 809.2 μs)\nvariance introduced by outliers: 37% (moderately inflated)\n```\n\n... and if you open that page in your browser you will\nget something that looks like this:\n\n![](http://i.imgur.com/2MCKBc2.png)\n\n## Usage\n\n```\n$ bench --help\nCommand-line tool to benchmark other programs\n\nUsage: bench COMMAND ([-I|--ci CI] [-G|--no-gc] [-L|--time-limit SECS]\n             [--resamples COUNT] [--regress RESP:PRED..] [--raw FILE]\n             [-o|--output FILE] [--csv FILE] [--junit FILE]\n             [-v|--verbosity LEVEL] [-t|--template FILE] [-m|--match MATCH]\n             [NAME...] | [-n|--iters ITERS] [-m|--match MATCH] [NAME...] |\n             [-l|--list] | [--version])\n\nAvailable options:\n  -h,--help                Show this help text\n  COMMAND                  The command line to benchmark\n  -I,--ci CI               Confidence interval\n  -G,--no-gc               Do not collect garbage between iterations\n  -L,--time-limit SECS     Time limit to run a benchmark\n  --resamples COUNT        Number of bootstrap resamples to perform\n  --regress RESP:PRED..    Regressions to perform\n  --raw FILE               File to write raw data to\n  -o,--output FILE         File to write report to\n  --csv FILE               File to write CSV summary to\n  --junit FILE             File to write JUnit summary to\n  -v,--verbosity LEVEL     Verbosity level\n  -t,--template FILE       Template to use for report\n  -m,--match MATCH         How to match benchmark names (\"prefix\" or \"glob\")\n  -n,--iters ITERS         Run benchmarks, don't analyse\n  -m,--match MATCH         How to match benchmark names (\"prefix\" or \"glob\")\n  -l,--list                List benchmarks\n  --version                Show version info\n```\n\n## Development Status\n\n[![Build Status](https://travis-ci.org/Gabriel439/bench.png)](https://travis-ci.org/Gabriel439/bench)\n\nThis is a pretty simple utility which just wraps `criterion` in a command-line\ntool, so I don't expect this project to change much.  However, only time will\ntell.\n\n## License (BSD 3-clause)\n\nCopyright Gabriella Gonzalez (c) 2016\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright\n  notice, this list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above\n  copyright notice, this list of conditions and the following\n  disclaimer in the documentation and/or other materials provided\n  with the distribution.\n\n* Neither the name of  nor the names of other\n  contributors may be used to endorse or promote products derived\n  from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
}
