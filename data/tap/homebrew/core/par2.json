{
  "name": "par2",
  "full_name": "par2",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Parchive: Parity Archive Volume Set for data recovery",
  "license": "GPL-2.0",
  "homepage": "https://github.com/Parchive/par2cmdline",
  "versions": {
    "stable": "0.8.1",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/Parchive/par2cmdline/releases/download/v0.8.1/par2cmdline-0.8.1.tar.bz2",
      "tag": null,
      "revision": null,
      "checksum": "5fcd712cae2b73002b0bf450c939b211b3d1037f9bb9c3ae52d6d24a0ba075e4"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/par2/blobs/sha256:4a78c87048a0affed47c398b897881db15e3bb45e1e36d5120beb40c13f30c1c",
          "sha256": "4a78c87048a0affed47c398b897881db15e3bb45e1e36d5120beb40c13f30c1c"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/par2/blobs/sha256:fb4dab9fec0be03e27ff19f97c08170b4603f01c232eb0b75f0f2422e34a9b19",
          "sha256": "fb4dab9fec0be03e27ff19f97c08170b4603f01c232eb0b75f0f2422e34a9b19"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/par2/blobs/sha256:1a31a28b5aa927f4b5fbf4778e0df5ce27e567cfd1db41f60ad5374c70a7d24b",
          "sha256": "1a31a28b5aa927f4b5fbf4778e0df5ce27e567cfd1db41f60ad5374c70a7d24b"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/par2/blobs/sha256:8b2bc4895eb17efe76871c2ea199119f2bbb0cba1c54d8bb468a6cc833e73ae5",
          "sha256": "8b2bc4895eb17efe76871c2ea199119f2bbb0cba1c54d8bb468a6cc833e73ae5"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/par2/blobs/sha256:21124f8c1c080a67ee9ad88adbf361163031672a0a7446fead075644628bb56d",
          "sha256": "21124f8c1c080a67ee9ad88adbf361163031672a0a7446fead075644628bb56d"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/par2/blobs/sha256:8379fe417ad00b81929cef774072179d9f2497156a5b06b706a6cf182d2f93dd",
          "sha256": "8379fe417ad00b81929cef774072179d9f2497156a5b06b706a6cf182d2f93dd"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/par2/blobs/sha256:26609c45028599a4845f68cda2a5cd08c2a0dc37ae3987d4abf86aed99499f50",
          "sha256": "26609c45028599a4845f68cda2a5cd08c2a0dc37ae3987d4abf86aed99499f50"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/par2/blobs/sha256:cded10d8f18c5ab236ceb624854afb672681bd1a86f21e47d70de793db378580",
          "sha256": "cded10d8f18c5ab236ceb624854afb672681bd1a86f21e47d70de793db378580"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/par2/blobs/sha256:35477bcfecd91b7fe885739737f576b63545aab51ba997bc60f9a74927b775dc",
          "sha256": "35477bcfecd91b7fe885739737f576b63545aab51ba997bc60f9a74927b775dc"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/par2/blobs/sha256:68a34f74212b806d82f10515575e8f62a90eb2066d6fffb24c5f422a380854fb",
          "sha256": "68a34f74212b806d82f10515575e8f62a90eb2066d6fffb24c5f422a380854fb"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/par2.rb",
  "ruby_source_checksum": {
    "sha256": "8916993c41342f10138607f50d776b4496d3e6875a03316a096b91b2a10cd127"
  },
  "date_added": "2009-09-29T23:52:21+01:00",
  "readme": "# Looking for maintainer\n\nSince I find it hard to make time for this project I would like to find someone who would step in and take over the maintainership of par2cmdline. I still use the program but it does everything I need.\n\nIf you are interested please send an email to: ike.devolder@gmail.com\n\n# par2cmdline\n\n**par2cmdline** is a PAR 2.0 compatible file verification and repair tool.\n\nTo see the ongoing development see: <https://github.com/parchive/par2cmdline>\n\nOpenMP multithreading was originally developed by Jussi Kansanen: <https://github.com/jkansanen/par2cmdline-mt>\n\nThe original development was done on Sourceforge but stalled.\n\nFor more information from the original authors see <http://parchive.sourceforge.net>\n\nThis is also the place for details on the PAR 2.0 specification and discussion of all things PAR.\n\n## What exactly is par2cmdline?\n\npar2cmdline is a program for creating and using PAR2 files to detect damage in data files and repair them if necessary. It can be used with any kind of file.\n\n## Why is PAR 2.0 better than PAR 1.0?\n\n * It is not necessary to split a single large file into many equal-sized small files (although you can still do so if you wish).\n\n * There is no loss of efficiency when operating on multiple files of different sizes.\n\n * It is possible to repair damaged files (using exactly the amount of recovery data that corresponds to the amount of damage), rather than requiring the complete reconstruction of the damaged file.\n\n * Recovery files may be of different sizes making it possible to obtain exactly the amount of recovery data required to carry out a repair.\n\n * Because damaged data files are still useable during the recovery process, less recovery data is required to achieve a successful repair. It is therefore not necessary to create as much recovery data in the first place to achieve the same level of protection.\n\n * You can protect up to 32768 files rather than the 256 that PAR 1.0 is limited to.\n\n * Damaged or incomplete recovery files can also be used during the recovery process in the same way that damaged data files can.\n\n * PAR 2.0 requires less recovery data to provide the same level of  protection from damage compared with PAR 1.0.\n\n## Does PAR 2.0 have any disadvantages?\n\nYes, there is one disadvantage:\n\n * All PAR 2.0 program will take somewhat longer to create recovery files than a PAR 1.0 program does.\n\nThis disadvantage is considerably mitigated by the fact that you don't need to create as much recovery data in the first place to provide the same level of protection against loss and damage.\n\n## Compiling par2cmdline\n\nYou should have received par2cmdline in the form of source code which you can compile on your computer. You may optionally have received a precompiled version of the program for your operating system.\n\nIf you have only downloaded a precompiled executable, then the source code should be available from the same location where you downloaded the executable from.\n\nIf you have MS Visual Studio .NET, then just open the *par2cmdline.sln* file and compile. You should then copy *par2cmdline.exe* to an appropriate location that is on your path.\n\nTo compile on Linux and other Unix variants use the following commands:\n\n    ./automake.sh\n    ./configure\n    make\n    make check\n    make install\n\nFor FreeBSD you must install the following dependencies:\n\n    pkg install git automake openmp\n\nOpenMP will only be available for 64bit systems in FreeBSD.\n\nFor macOS you can install llvm via homebrew to get OpenMP support.\n\nSee *INSTALL* for full details on how to use the *configure* script.\n\n## Using par2cmdline\n\nThe command line parameters for par2cmdline are as follow:\n\n    par2 -h  : show this help\n    par2 -V  : show version\n    par2 -VV : show version and copyright\n\n    par2 c(reate) [options] <PAR2 file> [files]\n    par2 v(erify) [options] <PAR2 file> [files]\n    par2 r(epair) [options] <PAR2 file> [files]\n\n  Also:\n\n    par2create [options] <PAR2 file> [files]\n    par2verify [options] <PAR2 file> [files]\n    par2repair [options] <PAR2 file> [files]\n\n  Options:\n\n    -a<file> : Set the main PAR2 archive name\n               required on create, optional for verify and repair\n    -b<n>    : Set the Block-Count\n    -s<n>    : Set the Block-Size (don't use both -b and -s)\n    -r<n>    : Level of redundancy (%)\n    -r<c><n> : Redundancy target size, <c>=g(iga),m(ega),k(ilo) bytes\n    -c<n>    : Recovery block count (don't use both -r and -c)\n    -f<n>    : First Recovery-Block-Number\n    -u       : Uniform recovery file sizes\n    -l       : Limit size of recovery files (don't use both -u and -l)\n    -n<n>    : Number of recovery files (don't use both -n and -l)\n    -m<n>    : Memory (in MB) to use\n    -t<n>    : Number of threads to use (Auto-detected)\n    -v [-v]  : Be more verbose\n    -q [-q]  : Be more quiet (-qq gives silence)\n    -p       : Purge backup files and par files on successful recovery or\n               when no recovery is needed\n    -R       : Recurse into subdirectories (only useful on create)\n    -N       : data skipping (find badly mispositioned data blocks)\n    -S<n>    : Skip leaway (distance +/- from expected block position)\n    -B<path> : Set the basepath to use as reference for the datafiles\n    --       : Treat all following arguments as filenames\n\nIf you wish to create PAR2 files for a single source file, you may leave out the name of the PAR2 file from the command line. par2cmdline will then assume that you wish to base the filenames for the PAR2 files on the name of the source file.\n\nYou may also leave off the .par2 file extension when verifying and repairing.\n\n## Creating PAR2 files\n\nWith PAR 2.0 you can create PAR2 recovery files for as few as 1 or as many as 32768 files. If you wanted to create PAR1 recovery files for a single file you were forced to split the file into multiple parts and RAR was frequently used for this purpose. You do NOT need to split files with PAR 2.0.\n\nTo create PAR 2 recovery files for a single data file (e.g. one called *test.mpg*), you can use the following command:\n\n    par2 create test.mpg.par2 test.mpg\n\nIf *test.mpg* is an 800 MB file, then this will create a total of 8 PAR2 files with the following filenames (taking roughly 6 minutes on a PC with a 1500 MHz CPU):\n\n    test.mpg.par2          - This is an index file for verification only\n    test.mpg.vol00+01.par2 - Recovery file with 1 recovery block\n    test.mpg.vol01+02.par2 - Recovery file with 2 recovery blocks\n    test.mpg.vol03+04.par2 - Recovery file with 4 recovery blocks\n    test.mpg.vol07+08.par2 - Recovery file with 8 recovery blocks\n    test.mpg.vol15+16.par2 - Recovery file with 16 recovery blocks\n    test.mpg.vol31+32.par2 - Recovery file with 32 recovery blocks\n    test.mpg.vol63+37.par2 - Recovery file with 37 recovery blocks\n\nThe *test.mpg.par2* file is 39 KB in size and the other files vary in size from 443 KB to 15 MB.\n\nThese PAR2 files will enable the recovery of up to 100 errors totalling 40 MB of lost or damaged data from the original *test.mpg* file when it and the PAR2 files are posted on UseNet.\n\nWhen posting on UseNet it is recommended that you use the `-s` option to set a blocksize that is equal to the Article size that you will use to post the data file. If you wanted to post the test.mpg file using an article size of 300 KB then the command you would type is:\n\n    par2 create -s307200 test.mpg.par2 test.mpg\n\nThis will create 9 PAR2 files instead of 8, and they will be capable of correcting up to 134 errors totalling 40 MB. It will take roughly 8 minutes to create the recovery files this time.\n\nIn both of these two examples, the total quantity of recovery data created was 40 MB (which is 5% of 800 MB). If you wish to create a greater or lesser quantity of recovery data, you can use the `-r` option.\n\nTo create 10% recovery data instead of the default of 5% and also to use a block size of 300 KB, you would use the following command:\n\n    par2 create -s307200 -r10 test.mpg.par2 test.mpg\n\nThis would also create 9 PAR2 files, but they would be able to correct up to 269 errors totalling 80 MB. Since twice as much recovery data is created, it will take about 16 minutes to do so with a 1500 MHz CPU.\n\nThe `-u` and `-n` options can be used to control exactly how many recovery files are created and how the recovery blocks are distributed among them. They do not affect the total quantity of recovery data created.\n\nThe `-f` option is used when you create additional recovery data e.g. if you have already created 10% and want another 5% then you might use the following command:\n\n    par2 create -s307200 -r5 -f300 test.mpg.par2 test.mpg\n\nThis specifies the same block size (which is a requirement for additional recovery files), 5% recovery data, and a first block number of 300.\n\nThe `-m` option controls how much memory par2cmdline uses. It defaults to 16 MB unless you override it.\n\nWhen creating PAR2 recovery files you might want to fill up a storage medium like a DVD or a Blu-Ray. Therefore we can set the target size of the recovery files by issuing the following command:\n\n    par2 create -rm200 recovery.par2 *\n\nIt makes no sense to set an insanely high recovery size. The command will make that the resulting sum of the PAR2 files approaches the requested size. It is an estimate so don't go too crazy.\n\n## Creating PAR2 files for multiple data files\n\nWhen creating PAR2 recovery files from multiple data files, you must specify the base filename to use for the par2 files and the names of all of the data files.\n\nIf *test.mpg* had been split into multiple RAR files, then you could use:\n\n    par2 create test.mpg.rar.par2 test.mpg.part*.rar\n\nThe filename _test.mpg.rar.par2_ states what you want the PAR2 files to be called and _test.mpg.part*.rar_ should select all of the RAR files.\n\n## Verifying and repairing\n\nWhen using PAR2 recovery files to verify or repair the data files from which they were created, you only need to specify the filename of one of the PAR2 files to par2cmdline:\n\n    par2 verify test.mpg.par2\n\nThis tells par2cmdline to use the information in _test.mpg.par2_ to verify the data files.\n\npar2cmdline will automatically search for the other PAR2 files that were created and use the information they contain to determine the filenames of the original data files and then to verify them.\n\nIf all of the data files are OK, then par2cmdline will report that repair will not be required.\n\nIf any of the data files are missing or damaged, par2cmdline will report the details of what it has found. If the recovery files contain enough recovery blocks to repair the damage, you will be told that repair is possible. Otherwise you will be told exactly how many recovery blocks will be required in order to repair.\n\nTo carry out a repair use the following command:\n\n    par2 repair test.mpg.par2\n\nThis tells par2cmdline to verify and if possible repair any damaged or missing files. When a repair is carried out, each file that is repaired will be verified to confirm that the repair was successful.\n\n## Misnamed and incomplete data files\n\nIf any of the recovery files or data files have a wrong filename, then par2cmdline will not automatically find and scan them.\n\nTo have par2cmdline scan such files, you must include them on the command line when attempting to verify or repair.\n\ne.g.:\n\n    par2 r test.mpg.par2 other.mpg\n\nThis tells par2cmdline to scan the file called *other.mpg* to see if it contains any data belonging to the original data files.\n\nIf one of the extra files specified in this way is an exact match for a data file, then the repair process will rename the file so that it has the correct filename.\n\nBecause par2cmdline is designed to be able to find good data within a damaged file, it can do the same with incomplete files downloaded from UseNet. If some of the articles for a file are missing, you should still download the file and save it to disk for par2cmdline to scan. If you do this then you may find that you can carry out a repair in a situation where you would not otherwise have sufficient recovery data.\n\nYou can have par2cmdline scan all files that are in the current directory using a command such as:\n\n    par2 r test.mpg.par2 *\n\n## What to do when you are told you need more recovery blocks\n\nIf par2cmdline determines that any of the data files are damaged or missing and finds that there is insufficient recovery data to effect a repair, you will be told that you need a certain number of recovery blocks. You can obtain these by downloading additional recovery files.\n\nIn order to make things easy, PAR2 files have filenames that tell you exactly how many recovery blocks each one contains.\n\nAssuming that the following command was used to create recovery data:\n\n    par2 c -b1000 -r5 test.mpg\n\nThen the recovery files that are created would be called:\n\n    test.mpg.par2\n    test.mpg.vol00+01.par2\n    test.mpg.vol01+02.par2\n    test.mpg.vol03+04.par2\n    test.mpg.vol07+08.par2\n    test.mpg.vol15+16.par2\n    test.mpg.vol31+19.par2\n\nThe first file in this list does not contain any recovery data, it only contains information to verify the data files.\n\nEach of the other files contains a different number of recovery blocks. The number after the '+' sign is the number of recovery blocks and the number preceding the '+' sign is the block number of the first recovery block in that file.\n\nIf par2cmdline told you that you needed 10 recovery blocks, then you would need *test.mpg.vol01+02.par2* and *test.mpg.vol07+08.par*. You might of course choose to fetch *test.mpg.vol15+16.par2* instead (in which case you would have an extra 6 recovery blocks which would not be used for the repair).\n\n## Reed-Solomon Coding\n\nPAR2 uses Reed-Solomon Coding to perform its calculations. For details of this coding technique try the following link:\n\n[**A Tutorial on Reed-Solomon Coding for Fault-Tolerance in RAID-like Systems**](http://web.eecs.utk.edu/~plank/plank/papers/CS-96-332.html)"
}
