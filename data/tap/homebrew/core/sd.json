{
  "name": "sd",
  "full_name": "sd",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Intuitive find & replace CLI",
  "license": "MIT",
  "homepage": "https://github.com/chmln/sd",
  "versions": {
    "stable": "0.7.6",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/chmln/sd/archive/v0.7.6.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "faf33a97797b95097c08ebb7c2451ac9835907254d89863b10ab5e0813b5fe5f"
    }
  },
  "revision": 1,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sd/blobs/sha256:271c6437b052266f984385bc9b2c858f5b3a49b64dc2cc5b7c6d59ee1f8b5fd6",
          "sha256": "271c6437b052266f984385bc9b2c858f5b3a49b64dc2cc5b7c6d59ee1f8b5fd6"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sd/blobs/sha256:835707d1e97370f90da250af0530a0fbeac76a5dc9ffb23f9fe3bcae92de89dc",
          "sha256": "835707d1e97370f90da250af0530a0fbeac76a5dc9ffb23f9fe3bcae92de89dc"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sd/blobs/sha256:9cff9381bd1df190b0ce4f1707d06b061f4f3da260feffd6598d0f8bfc1862b1",
          "sha256": "9cff9381bd1df190b0ce4f1707d06b061f4f3da260feffd6598d0f8bfc1862b1"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sd/blobs/sha256:7a96cfa7331341b29fd88b3db25b2c18467e93cbfc7c0045bc923c0aabfe361d",
          "sha256": "7a96cfa7331341b29fd88b3db25b2c18467e93cbfc7c0045bc923c0aabfe361d"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sd/blobs/sha256:dcbc3366946b79448289b73a88e26e2686a9847fe8c6f68abe6e421e54a23551",
          "sha256": "dcbc3366946b79448289b73a88e26e2686a9847fe8c6f68abe6e421e54a23551"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sd/blobs/sha256:d33e64b4ef076ac70f487f5095b94ce9d9f306ba8036f2015cfa381fbcec86aa",
          "sha256": "d33e64b4ef076ac70f487f5095b94ce9d9f306ba8036f2015cfa381fbcec86aa"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sd/blobs/sha256:4361d802ac3d701e6779538f8329148635c9facac816d04df5efd75928d6186f",
          "sha256": "4361d802ac3d701e6779538f8329148635c9facac816d04df5efd75928d6186f"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sd/blobs/sha256:2314e052715a9a728694c5dead51555f276b7e51cea9c1bf7be6e1e51af0bfe8",
          "sha256": "2314e052715a9a728694c5dead51555f276b7e51cea9c1bf7be6e1e51af0bfe8"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/sd.rb",
  "ruby_source_checksum": {
    "sha256": "474fa99b80f627a2fa7ecafb9dcf491c1a29aa98f5c788197f40b6f188ad8541"
  },
  "date_added": "2019-03-03T08:52:57+11:00",
  "readme": "# sd - s[earch] & d[isplace]\n\n`sd` is an intuitive find & replace CLI.\n\n## The Pitch\n\nWhy use it over any existing tools?\n\n**Painless regular expressions**\n\n`sd` uses regex syntax that you already know from JavaScript and Python. Forget about dealing with quirks of `sed` or `awk` - get productive immediately.\n\n**String-literal mode**\n\nNon-regex find & replace. No more backslashes or remembering which characters are special and need to be escaped.\n\n**Easy to read, easy to write**\n\nFind & replace expressions are split up, which makes them easy to read and write. No more messing with unclosed and escaped slashes.\n\n**Smart, common-sense defaults**\n\nDefaults follow common sense and are tailored for typical daily use.\n\n## Comparison to sed\n\nWhile sed does a whole lot more, `sd` focuses on doing just one thing and doing it well.\n\nSome cherry-picked examples, where `sd` shines:\n\n- Simpler syntax for replacing all occurrences:\n  - sd: `sd before after`\n  - sed: `sed s/before/after/g`\n- Replace newlines with commas:\n  - sd: `sd '\\n' ','`\n  - sed: `sed ':a;N;$!ba;s/\\n/,/g'`\n- Extracting stuff out of strings containing slashes:\n  - sd: `echo \"sample with /path/\" | sd '.*(/.*/)' '$1'`\n  - sed: use different delimiters every time depending on expression so that the command is not completely unreadable\n    - `echo \"sample with /path/\" | sed -E 's/.*(\\\\/.*\\\\/)/\\1/g'`\n    - `echo \"sample with /path/\" | sed -E 's|.*(/.*/)|\\1|g'`\n- In place modification of files:\n  - sd: `sd before after file.txt`\n  - sed: you need to remember to use `-e` or else some platforms will consider the next argument to be a backup suffix\n    - `sed -i -e 's/before/after/g' file.txt`\n\n## Benchmarks\n\n**Simple replacement on ~1.5 gigabytes of JSON**\n\n```sh\nhyperfine --warmup 3 --export-markdown out.md \\\n  'sed -E \"s/\\\"/'\"'\"'/g\" *.json > /dev/null' \\\n  'sed    \"s/\\\"/'\"'\"'/g\" *.json > /dev/null' \\\n  'sd     \"\\\"\" \"'\"'\"'\"   *.json > /dev/null'\n```\n\n| Command | Mean [s] | Min…Max [s] |\n|:---|---:|---:|\n| `sed -E \"s/\\\"/'/g\" *.json > /dev/null` | 2.338 ± 0.008 | 2.332…2.358 |\n| `sed    \"s/\\\"/'/g\" *.json > /dev/null` | 2.365 ± 0.009 | 2.351…2.378 |\n| `sd     \"\\\"\" \"'\"   *.json > /dev/null` | **0.997 ± 0.006** | 0.987…1.007 |\n\nResult: ~2.35 times faster\n\n**Regex replacement on a ~55M json file**:\n\n```sh\nhyperfine --warmup 3 --export-markdown out.md \\\n  'sed -E \"s:(\\w+):\\1\\1:g\"    dump.json > /dev/null' \\\n  'sed    \"s:\\(\\w\\+\\):\\1\\1:g\" dump.json > /dev/null' \\\n  'sd     \"(\\w+)\" \"$1$1\"      dump.json > /dev/null'\n```\n\n| Command | Mean [s] | Min…Max [s] |\n|:---|---:|---:|\n| `sed -E \"s:(\\w+):\\1\\1:g\"    dump.json > /dev/null` | 11.315 ± 0.215 | 11.102…11.725 |\n| `sed    \"s:\\(\\w\\+\\):\\1\\1:g\" dump.json > /dev/null` | 11.239 ± 0.208 | 11.057…11.762 |\n| `sd     \"(\\w+)\" \"$1$1\"      dump.json > /dev/null` | **0.942 ± 0.004** | 0.936…0.951 |\n\nResult: ~11.93 times faster\n\n## Installation\n\nInstall through\n[`cargo`](https://doc.rust-lang.org/cargo/getting-started/installation.html) with\n`cargo install sd`, or through various package managers\n\n[![Packaging status](https://repology.org/badge/vertical-allrepos/sd-find-replace.svg)](https://repology.org/project/sd-find-replace/versions)\n\n## Quick Guide\n\n1. **String-literal mode**. By default, expressions are treated as regex. Use `-s` or `--string-mode` to disable regex.\n\n\n```sh\n> echo 'lots((([]))) of special chars' | sd -s '((([])))' ''\nlots of special chars\n```\n\n\n2. **Basic regex use** - let's trim some trailing whitespace\n\n```sh\n> echo 'lorem ipsum 23   ' | sd '\\s+$' ''\nlorem ipsum 23\n```\n\n3. **Capture groups**\n\nIndexed capture groups:\n\n```sh\n> echo 'cargo +nightly watch' | sd '(\\w+)\\s+\\+(\\w+)\\s+(\\w+)' 'cmd: $1, channel: $2, subcmd: $3'\ncmd: cargo, channel: nightly, subcmd: watch\n```\n\nNamed capture groups:\n\n```sh\n> echo \"123.45\" | sd '(?P<dollars>\\d+)\\.(?P<cents>\\d+)' '$dollars dollars and $cents cents'\n123 dollars and 45 cents\n```\n\nIn the unlikely case you stumble upon ambiguities, resolve them by using `${var}` instead of `$var`. Here's an example:\n\n```sh\n> echo '123.45' | sd '(?P<dollars>\\d+)\\.(?P<cents>\\d+)' '$dollars_dollars and $cents_cents'\n and\n\n> echo '123.45' | sd '(?P<dollars>\\d+)\\.(?P<cents>\\d+)' '${dollars}_dollars and ${cents}_cents'\n123_dollars and 45_cents\n```\n\n4. **Find & replace in a file**\n\n```sh\n> sd 'window.fetch' 'fetch' http.js\n```\n\nThat's it. The file is modified in-place.\n\nTo preview changes:\n\n```sh\n> sd -p 'window.fetch' 'fetch' http.js\n```\n\n5. **Find & replace across project**\n\nThis example uses [fd](https://github.com/sharkdp/fd).\n\nGood ol' unix philosophy to the rescue.\n\n```sh\nfd --type file --exec sd 'from \"react\"' 'from \"preact\"'\n```\n\nSame, but with backups (consider version control).\n\n```bash\nfd --type file --exec cp {} {}.bk \\; --exec sd 'from \"react\"' 'from \"preact\"'\n```\n\n### Edge cases\nsd will interpret every argument starting with `-` as a (potentially unknown) flag.\nThe common convention of using `--` to signal the end of flags is respected:\n\n```bash\n$ echo \"./hello foo\" | sd \"foo\" \"-w\"\nerror: Found argument '-w' which wasn't expected, or isn't valid in this context\n\nUSAGE:\n    sd [OPTIONS] <find> <replace-with> [files]...\n\nFor more information try --help\n$ echo \"./hello foo\" | sd \"foo\" -- \"-w\"\n./hello -w\n$ echo \"./hello --foo\" | sd -- \"--foo\" \"-w\"\n./hello -w\n```\n\n### Escaping special characters\nTo escape the `$` character, use `$$`:\n\n```bash\n❯ echo \"foo\" | sd 'foo' '$$bar'\n$bar\n```"
}
