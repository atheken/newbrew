{
  "name": "oha",
  "full_name": "oha",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "HTTP load generator, inspired by rakyll/hey with tui animation",
  "license": "MIT",
  "homepage": "https://github.com/hatoo/oha/",
  "versions": {
    "stable": "0.6.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/hatoo/oha/archive/refs/tags/v0.6.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "53c1f56b0541e8d2c56be60972543da0141a2a1dda09128410bdb8e010adab6a"
    },
    "head": {
      "url": "https://github.com/hatoo/oha.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/oha/blobs/sha256:6bfed134b89b7e5b1d46920b78b420d3f336c3dad6bdaef68999d6dc552e79ae",
          "sha256": "6bfed134b89b7e5b1d46920b78b420d3f336c3dad6bdaef68999d6dc552e79ae"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/oha/blobs/sha256:fc1ccb9a903956594d5157f115404437f6f1757f5134c80fac04950799fafb9d",
          "sha256": "fc1ccb9a903956594d5157f115404437f6f1757f5134c80fac04950799fafb9d"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/oha/blobs/sha256:f2851a801cb77206c610faf98a40d7b2b1da079d23865e15b834c093ec8bf320",
          "sha256": "f2851a801cb77206c610faf98a40d7b2b1da079d23865e15b834c093ec8bf320"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/oha/blobs/sha256:64354228dc0a3f2f763f368b71c08fe3d389155a15bda304c2f65398c86cb174",
          "sha256": "64354228dc0a3f2f763f368b71c08fe3d389155a15bda304c2f65398c86cb174"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/oha/blobs/sha256:468e08511605c7f0219a01554fbb01f87132dc9bd9a01b9741d997732de271b2",
          "sha256": "468e08511605c7f0219a01554fbb01f87132dc9bd9a01b9741d997732de271b2"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/oha/blobs/sha256:90ad07808dbb9a6f311ba4a4fb7f49c2ad2566dfd85f28fde6519cb1e3707be4",
          "sha256": "90ad07808dbb9a6f311ba4a4fb7f49c2ad2566dfd85f28fde6519cb1e3707be4"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/oha/blobs/sha256:ed7ed309ba3ee11b0555a02e1d55c6ac35b0c213dab4e273358b3f8fd01c179f",
          "sha256": "ed7ed309ba3ee11b0555a02e1d55c6ac35b0c213dab4e273358b3f8fd01c179f"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust",
    "pkg-config"
  ],
  "dependencies": [
    "openssl@3"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/oha.rb",
  "ruby_source_checksum": {
    "sha256": "2b736dc40aee6dd47c7d3fb305b9fac7ec3c5ed5ec4108396a1643f8e060f14f"
  },
  "date_added": "2020-04-29T04:00:12+00:00",
  "readme": "# oha (おはよう)\n\n[![GitHub Actions](https://github.com/hatoo/oha/workflows/CI/badge.svg)](https://github.com/hatoo/oha/actions?query=workflow%3ACI)\n[![Crates.io](https://img.shields.io/crates/v/oha.svg)](https://crates.io/crates/oha)\n[![Arch Linux](https://img.shields.io/archlinux/v/extra/x86_64/oha)](https://archlinux.org/packages/extra/x86_64/oha/)\n[![Homebrew](https://img.shields.io/homebrew/v/oha)](https://formulae.brew.sh/formula/oha)\n[![Gitter](https://img.shields.io/gitter/room/hatoo/oha)](https://gitter.im/hatoo-oha/community#)\n\noha is a tiny program that sends some load to a web application and show realtime tui inspired by [rakyll/hey](https://github.com/rakyll/hey).\n\nThis program is written in Rust and powered by [tokio](https://github.com/tokio-rs/tokio) and beautiful tui by [tui-rs](https://github.com/fdehau/tui-rs).\n\n![demo](demo.gif)\n\n# Installation\n\nThis program is built on stable Rust.\n\n    cargo install oha\n\nYou can optionally build oha against [rustls](https://github.com/rustls/rustls) instead of [native-tls](https://github.com/sfackler/rust-native-tls).\n\n    cargo install --no-default-features --features rustls oha\n\n## On Arch Linux\n\n    pacman -S oha\n\n## On macOS (Homebrew)\n\n    brew install oha\n\n## On Debian ([Azlux's repository](http://packages.azlux.fr/))\n\n    echo \"deb http://packages.azlux.fr/debian/ buster main\" | sudo tee /etc/apt/sources.list.d/azlux.list\n    wget -qO - https://azlux.fr/repo.gpg.key | sudo apt-key add -\n    apt update\n    apt install oha\n\n# Platform\n\n- Linux - Tested on Ubuntu 18.04 gnome-terminal\n- Windows 10 - Tested on Windows Powershell\n- MacOS - Tested on iTerm2\n\n# Usage\n\n`-q` option works different from [rakyll/hey](https://github.com/rakyll/hey). It's set overall query per second instead of for each workers.\n\n```sh\nOhayou(おはよう), HTTP load generator, inspired by rakyll/hey with tui animation.\n\nUsage: oha [FLAGS] [OPTIONS] <url>\n\nArguments:\n  <URL>  Target URL.\n\nOptions:\n  -n <N_REQUESTS>                     Number of requests to run. [default: 200]\n  -c <N_WORKERS>                      Number of workers to run concurrently. You may should increase limit to number of open files for larger `-c`. [default: 50]\n  -z <DURATION>                       Duration of application to send requests. If duration is specified, n is ignored.\n                                      Examples: -z 10s -z 3m.\n  -q <QUERY_PER_SECOND>               Rate limit for all, in queries per second (QPS)\n      --burst-delay <BURST_DURATION>  Introduce delay between a predefined number of requests.\n                                      Note: If qps is specified, burst will be ignored\n      --burst-rate <BURST_REQUESTS>   Rates of requests for burst. Default is 1\n                                      Note: If qps is specified, burst will be ignored\n      --rand-regex-url                Generate URL by rand_regex crate but dot is disabled for each query e.g. http://127.0.0.1/[a-z][a-z][0-9]. Currently dynamic scheme, host and port with keep-alive are not works well. See https://docs.rs/rand_regex/latest/rand_regex/struct.Regex.html for details of syntax.\n      --max-repeat <MAX_REPEAT>       A parameter for the '--rand-regex-url'. The max_repeat parameter gives the maximum extra repeat counts the x*, x+ and x{n,} operators will become. [default: 4]\n      --latency-correction            Correct latency to avoid coordinated omission problem. It's ignored if -q is not set.\n      --no-tui                        No realtime tui\n  -j, --json                          Print results as JSON\n      --fps <FPS>                     Frame per second for tui. [default: 16]\n  -m, --method <METHOD>               HTTP method [default: GET]\n  -H <HEADERS>                        Custom HTTP header. Examples: -H \"foo: bar\"\n  -t <TIMEOUT>                        Timeout for each request. Default to infinite.\n  -A <ACCEPT_HEADER>                  HTTP Accept Header.\n  -d <BODY_STRING>                    HTTP request body.\n  -D <BODY_PATH>                      HTTP request body from file.\n  -T <CONTENT_TYPE>                   Content-Type.\n  -a <BASIC_AUTH>                     Basic authentication, username:password\n      --http-version <HTTP_VERSION>   HTTP version. Available values 0.9, 1.0, 1.1.\n      --host <HOST>                   HTTP Host header\n      --disable-compression           Disable compression.\n  -r, --redirect <REDIRECT>           Limit for number of Redirect. Set 0 for no redirection. [default: 10]\n      --disable-keepalive             Disable keep-alive, prevents re-use of TCP connections between different HTTP requests.\n      --ipv6                          Lookup only ipv6.\n      --ipv4                          Lookup only ipv4.\n      --insecure                      Accept invalid certs.\n      --connect-to <CONNECT_TO>       Override DNS resolution and default port numbers with strings like 'example.org:443:localhost:8443'\n      --disable-color                 Disable the color scheme.\n      --unix-socket <UNIX_SOCKET>     Connect to a unix socket instead of the domain in the URL. Only for non-HTTPS URLs.\n  -h, --help                          Print help\n  -V, --version                       Print version\n```\n\n# Tips\n\n## Stress test in more realistic condition\n\n`oha` uses default options inherited from [rakyll/hey](https://github.com/rakyll/hey) but you may need to change options to stress test in more realistic condition.\n\nI suggest to run `oha` with following options.\n\n```sh\noha <-z or -n> -c <number of concurrent connections> -q <query per seconds> --latency-correction --disable-keepalive <target-address>\n```\n\n- --disable-keepalive\n\n    In real, user doesn't query same URL using [Keep-Alive](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Keep-Alive). You may want to run without `Keep-Alive`.\n- --latency-correction\n\n    You can avoid `Coordinated Omission Problem` by using `--latency-correction`.\n\n## Burst feature\n\nYou can use `--burst-delay` along with `--burst-rate` option to introduce delay between a defined number of requests.\n\n```sh\noha -n 10 --burst-delay 2s --burst-rate 4\n```\n\nIn this particular scenario, every 2 seconds, 4 requests will be processed, and after 6s the total of 10 requests will be processed. \n*NOTE: If you don't set `--burst-rate` option, the amount is default to 1*\n\n## Dynamic url feature\n\nYou can use `--rand-regex-url` option to generate random url for each connection.\n\n```sh\noha --rand-regex-url http://127.0.0.1/[a-z][a-z][0-9]\n```\n\nEach Urls are generated by [rand_regex](https://github.com/kennytm/rand_regex) crate but regex's dot is disabled since it's not useful for this purpose and it's very incovenient if url's dots are interpreted as regex's dot.\n\nOptionaly you can set `--max-repeat` option to limit max repeat count for each regex. e.g http://127.0.0.1/[a-z]* with `--max-repeat 4` will generate url like http://127.0.0.1/[a-z]{0,4}\n\nCurrently dynamic scheme, host and port with keep-alive are not works well.\n\n# Contribution\n\nFeel free to help us!\n\nHere are some issues to improving.\n\n- Write tests\n- Improve tui design.\n  - Show more information?\n  - There are no color in realtime tui now. I want help from someone who has some color sense.\n- Improve speed\n  - I'm new to tokio. I think there are some space to optimize query scheduling.\n- Output like CSV or JSON format.\n- Improve histogram in summary output\n  - It uses very simple algorithm now."
}
