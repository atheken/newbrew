{
  "name": "urlfinder",
  "full_name": "urlfinder",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Extracting URLs and subdomains from JS files on a website",
  "license": "MIT",
  "homepage": "https://github.com/pingc0y/URLFinder",
  "versions": {
    "stable": "2023.5.11",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/pingc0y/URLFinder/archive/refs/tags/2023.5.11.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "b64ad1690c3f9fe42903b6f4d02dda724ab38e2da77183b13d7eae6040bc47b5"
    },
    "head": {
      "url": "https://github.com/pingc0y/URLFinder.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/urlfinder/blobs/sha256:5f0811a60f05f9e710aa850e29d7349c98c5a84cfb13e2ec526de4c2772580f7",
          "sha256": "5f0811a60f05f9e710aa850e29d7349c98c5a84cfb13e2ec526de4c2772580f7"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/urlfinder/blobs/sha256:5f0811a60f05f9e710aa850e29d7349c98c5a84cfb13e2ec526de4c2772580f7",
          "sha256": "5f0811a60f05f9e710aa850e29d7349c98c5a84cfb13e2ec526de4c2772580f7"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/urlfinder/blobs/sha256:5f0811a60f05f9e710aa850e29d7349c98c5a84cfb13e2ec526de4c2772580f7",
          "sha256": "5f0811a60f05f9e710aa850e29d7349c98c5a84cfb13e2ec526de4c2772580f7"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/urlfinder/blobs/sha256:92b9eb4709bba949c8712cf2296d7293ebec619b8f29b657554b4780582d3bf6",
          "sha256": "92b9eb4709bba949c8712cf2296d7293ebec619b8f29b657554b4780582d3bf6"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/urlfinder/blobs/sha256:92b9eb4709bba949c8712cf2296d7293ebec619b8f29b657554b4780582d3bf6",
          "sha256": "92b9eb4709bba949c8712cf2296d7293ebec619b8f29b657554b4780582d3bf6"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/urlfinder/blobs/sha256:92b9eb4709bba949c8712cf2296d7293ebec619b8f29b657554b4780582d3bf6",
          "sha256": "92b9eb4709bba949c8712cf2296d7293ebec619b8f29b657554b4780582d3bf6"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/urlfinder/blobs/sha256:f19ac1ec01277bb2248c29d73b8101f0946580cbaa850948e00dce6fb2841d5a",
          "sha256": "f19ac1ec01277bb2248c29d73b8101f0946580cbaa850948e00dce6fb2841d5a"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/urlfinder.rb",
  "ruby_source_checksum": {
    "sha256": "31253e8359ac950ab7c7de0dcb8aed68f5d832addaa35a24733e757407647b8f"
  },
  "date_added": "2023-07-28T14:21:49-04:00",
  "readme": "## URLFinder\n\nURLFinder是一款快速、全面、易用的页面信息提取工具  \n\n用于分析页面中的js与url,查找隐藏在其中的敏感信息或未授权api接口  \n\n大致执行流程:  \n\n<img src=\"https://github.com/pingc0y/URLFinder/raw/master/img/process.png\" width=\"85%\"  />\n\n\n\n有什么需求或bug欢迎各位师傅提交lssues\n\n## 快速使用\n单url \n```\n显示全部状态码\nURLFinder.exe -u http://www.baidu.com -s all -m 3\n\n显示200和403状态码\nURLFinder.exe -u http://www.baidu.com -s 200,403 -m 3\n```\n批量url  \n```\n结果分开保存\nURLFinder.exe -s all -m 3 -f url.txt -o d:/\n\n结果统一保存\nURLFinder.exe -s all -m 3 -ff url.txt -o d:/\n```\n参数（更多参数使用 -i 配置）：  \n```\n-a  自定义user-agent请求头  \n-b  自定义baseurl路径  \n-c  请求添加cookie  \n-d  指定获取的域名,支持正则表达式\n-f  批量url抓取,需指定url文本路径  \n-ff 与-f区别：全部抓取的数据,视为同一个url的结果来处理（只打印一份结果 | 只会输出一份结果） \n-h  帮助信息   \n-i  加载yaml配置文件,可自定义请求头、抓取规则等（不存在时,会在当前目录创建一个默认yaml配置文件）  \n-m  抓取模式：\n        1  正常抓取（默认）\n        2  深入抓取 （URL深入一层 JS深入三层 防止抓偏）\n        3  安全深入抓取（过滤delete,remove等敏感路由） \n-max 最大抓取数\n-o  结果导出到csv、json、html文件,需指定导出文件目录（.代表当前目录）\n-s  显示指定状态码,all为显示全部  \n-t  设置线程数（默认50）\n-time 设置超时时间（默认5,单位秒）\n-u  目标URL  \n-x  设置代理,格式: http://username:password@127.0.0.1:8877\n-z  提取所有目录对404链接进行fuzz(只对主域名下的链接生效,需要与 -s 一起使用）  \n        1  目录递减fuzz  \n        2  2级目录组合fuzz\n        3  3级目录组合fuzz（适合少量链接使用）\n```\n## 使用截图\n\n[![0.jpg](https://github.com/pingc0y/URLFinder/raw/master/img/0.jpg)](https://github.com/pingc0y/URLFinder/raw/master/img/0.jpg)   \n[![1.jpg](https://github.com/pingc0y/URLFinder/raw/master/img/1.jpg)](https://github.com/pingc0y/URLFinder/raw/master/img/1.jpg)  \n[![2.jpg](https://github.com/pingc0y/URLFinder/raw/master/img/2.jpg)](https://github.com/pingc0y/URLFinder/raw/master/img/2.jpg)  \n[![3.jpg](https://github.com/pingc0y/URLFinder/raw/master/img/3.jpg)](https://github.com/pingc0y/URLFinder/raw/master/img/3.jpg)  \n[![4.jpg](https://github.com/pingc0y/URLFinder/raw/master/img/4.jpg)](https://github.com/pingc0y/URLFinder/raw/master/img/4.jpg)  \n[![5.jpg](https://github.com/pingc0y/URLFinder/raw/master/img/5.jpg)](https://github.com/pingc0y/URLFinder/raw/master/img/5.jpg)\n\n## 部分说明  \n\nfuzz功能是基于抓到的404目录和路径。将其当作字典,随机组合并碰撞出有效路径,从而解决路径拼接错误的问题\n\n结果会优先显示输入的url顶级域名,其他域名不做区分显示在 other    \n\n结果会优先显示200,按从小到大排序（输入的域名最优先,就算是404也会排序在其他子域名的200前面）  \n\n为了更好的兼容和防止漏抓链接,放弃了低误报率,错误的链接会变多但漏抓概率变低,可通过 ‘-s 200’ 筛选状态码过滤无效的链接（但不推荐只看200状态码）  \n##  编译  \n以下是在windows环境下,编译出各平台可执行文件的命令  \n\n```\nSET CGO_ENABLED=0\nSET GOOS=windows\nSET GOARCH=amd64\ngo build -ldflags \"-s -w\" -o ./URLFinder-windows-amd64.exe\n\nSET CGO_ENABLED=0\nSET GOOS=windows\nSET GOARCH=386\ngo build -ldflags \"-s -w\" -o ./URLFinder-windows-386.exe\n\nSET CGO_ENABLED=0\nSET GOOS=linux\nSET GOARCH=amd64\ngo build -ldflags \"-s -w\" -o ./URLFinder-linux-amd64\n\nSET CGO_ENABLED=0\nSET GOOS=linux\nSET GOARCH=arm64\ngo build -ldflags \"-s -w\" -o ./URLFinder-linux-arm64\n\nSET CGO_ENABLED=0\nSET GOOS=linux\nSET GOARCH=386\ngo build -ldflags \"-s -w\" -o ./URLFinder-linux-386\n\nSET CGO_ENABLED=0\nSET GOOS=darwin\nSET GOARCH=amd64\ngo build -ldflags \"-s -w\" -o ./URLFinder-macos-amd64\n\nSET CGO_ENABLED=0\nSET GOOS=darwin\nSET GOARCH=arm64\ngo build -ldflags \"-s -w\" -o ./URLFinder-macos-arm64\n```\n\n\n## 更新说明\n2023/5/11  \n变化 -i 配置文件可自定义：线程数、抓取深度、敏感路由、超时时间、最大抓取数   \n新增 -time 设置超时时间  \n新增 -max 设置最大抓取数  \n新增 添加版本更新提示  \n修复 已知bug  \n\n2023/5/5   \n修复 多个任务时html结果混乱  \n新增 结果添加302跳转信息  \n变化 未获取到数据时不打印与输出结果  \n\n2023/4/22   \n修复 已知bug  \n变化 -d 改为正则表达式  \n变化 打印显示抓取来源  \n新增 敏感信息增加Other  \n新增 -ff 全部抓取的数据,视为同一个url的结果来处理（只打印一份结果 | 只会输出一份结果） \n\n2023/2/21   \n修复 已知bug\n\n2023/2/3   \n新增 域名信息展示  \n变化 -i配置文件可配置抓取规则等   \n\n2023/1/29  \n新增 -b 设置baseurl路径  \n新增 -o json、html格式导出  \n新增 部分敏感信息获取  \n新增 默认会进行简单的js爆破  \n变化 能抓到更多链接,但垃圾数据变多  \n变化 代理设置方式变更\n\n2022/10/25  \n新增 -t 设置线程数(默认50)  \n新增 -z 对主域名的404链接fuzz测试  \n优化 部分细节  \n\n2022/10/6  \n新增 -x http代理设置  \n修改 多个相同域名导出时覆盖问题处理  \n\n2022/9/23  \n新增 对base标签的兼容  \n修复 正则bug  \n\n2022/9/16  \n新增 -m 3 安全的深入抓取,过滤delete、remove等危险URL   \n新增 -d 获取指定域名资源  \n新增 -o 导出到文件显示获取来源source  \n修复 已知bug  \n\n2022/9/15  \n修复 某种情况下的数组越界  \n\n2022/9/12  \n修复 linux与mac下的配置文件生成错误  \n修复 已知逻辑bug  \n\n2022/9/5  \n新增 链接存在标题时,显示标题  \n新增 -i 参数,加载yaml配置文件（目前只支持配置请求头headers）  \n修改 部分代码逻辑  \n修复 当ip存在端口时,导出会去除端口\n\n2022/8/29  \n新增 抓取url数量显示  \n优化 部分代码  \n新增 提供各平台可执行文件\n\n2022/8/27   \n新增 -o 改为自定义文件目录  \n新增 导出文件改为csv后缀,表格查看更方便  \n修复 已知正则bug\n\n2022/8/19  \n优化 加长超时时间避免误判    \n\n2022/8/5  \n新增 状态码过滤  \n新增 状态码验证显示进度  \n修复 域名带端口输出本地错误问题  \n\n2022/7/25   \n优化 js规则  \n优化 排序  \n新增 根据状态码显示彩色字体  \n\n2022/7/6   \n完善 规则  \n\n2022/6/27   \n优化 规则  \n新增 提供linux成品程序  \n\n2022/6/21   \n修改 获取状态码从自动改为手动（-s）  \n新增 显示响应内容大小  \n\n2022/6/16   \n优化 提取规则增强兼容性  \n修复 数组越界错误处理  \n\n2022/6/14  \n修复 部分网站返回空值的问题  \n\n2022/6/13  \n新增 自定义user-agent请求头功能  \n新增 批量url抓取功能  \n新增 结果导出功能  \n优化 过滤规则  \n优化 结果排版  \n\n2022/6/8  \n修复 忽略ssl证书错误  \n\n# 开发由来\n致敬JSFinder！开发此工具的初衷是因为经常使用 JSFinder 时会返回空或链接不完整,而且作者已经很久没有更新修复 bug 了。因此,萌生了自己开发一款类似工具的想法。"
}
