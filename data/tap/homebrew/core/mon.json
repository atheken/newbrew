{
  "name": "mon",
  "full_name": "mon",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Monitor hosts/services/whatever and alert about problems",
  "license": "MIT",
  "homepage": "https://github.com/tj/mon",
  "versions": {
    "stable": "1.2.3",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/tj/mon/archive/1.2.3.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "978711a1d37ede3fc5a05c778a2365ee234b196a44b6c0c69078a6c459e686ac"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mon/blobs/sha256:51930349a969998d73df25075032c233871f445a9e7419f90419103c223110f5",
          "sha256": "51930349a969998d73df25075032c233871f445a9e7419f90419103c223110f5"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mon/blobs/sha256:3f814c697e985f27214f721e5205baa19e3673f94b905975f2cf65bf8e47bd07",
          "sha256": "3f814c697e985f27214f721e5205baa19e3673f94b905975f2cf65bf8e47bd07"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mon/blobs/sha256:65f144b16a687002f9d30ac665886aa8b06bb914e4ff0fe04e692a6a153eb76b",
          "sha256": "65f144b16a687002f9d30ac665886aa8b06bb914e4ff0fe04e692a6a153eb76b"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mon/blobs/sha256:44084ac7f259335761c5569cb0f59d00df44c39b5fea84d763140c364b3b9459",
          "sha256": "44084ac7f259335761c5569cb0f59d00df44c39b5fea84d763140c364b3b9459"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mon/blobs/sha256:33b0a9658fe9c49984aeb76681165f01f586f25489b389db158bcbaac2a6ae2f",
          "sha256": "33b0a9658fe9c49984aeb76681165f01f586f25489b389db158bcbaac2a6ae2f"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mon/blobs/sha256:6530e73e7a94297f2646a079361df7076cbc6a881b5baf227a703f1edd92cecc",
          "sha256": "6530e73e7a94297f2646a079361df7076cbc6a881b5baf227a703f1edd92cecc"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mon/blobs/sha256:becdcce9ec6a3ec5156cf27db02c50c26e99a9db9626c864abf9eb2f178ea57e",
          "sha256": "becdcce9ec6a3ec5156cf27db02c50c26e99a9db9626c864abf9eb2f178ea57e"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mon/blobs/sha256:ac4640eab6cb255b7cc14f7009b5e8c5a18f9b623559950a1e6d55eb134d483e",
          "sha256": "ac4640eab6cb255b7cc14f7009b5e8c5a18f9b623559950a1e6d55eb134d483e"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mon/blobs/sha256:66fe59cb8307fd1371885fe1739a824d01becb1644a8480f8e27584726494f09",
          "sha256": "66fe59cb8307fd1371885fe1739a824d01becb1644a8480f8e27584726494f09"
        },
        "sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mon/blobs/sha256:0d22815460538deda7a6a979d0b7dcdf38124ed9473764f6a90d8252cb9bf1aa",
          "sha256": "0d22815460538deda7a6a979d0b7dcdf38124ed9473764f6a90d8252cb9bf1aa"
        },
        "el_capitan": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mon/blobs/sha256:4f2d05a85fac75167df3a445a0803f7d5eddb2bacf967b10738db5066955024a",
          "sha256": "4f2d05a85fac75167df3a445a0803f7d5eddb2bacf967b10738db5066955024a"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/mon/blobs/sha256:98cf650f601c5c437802ac8a979d24bdd8fe39cef4a3937f440109c91cadd69a",
          "sha256": "98cf650f601c5c437802ac8a979d24bdd8fe39cef4a3937f440109c91cadd69a"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/mon.rb",
  "ruby_source_checksum": {
    "sha256": "b247b47e8a8aba3cc2b1c31c34e13a8faa3add02665e18ddcc3577274f885196"
  },
  "date_added": "2013-01-19T15:16:12-08:00",
  "readme": "# mon(1)\n\n  Super-simple monitoring program.\n\n  `mon` spawned from the needlessly complex\n  frustration that tools like [monit](http://mmonit.com/monit/)\n  provide, with their awkward DSLs and setup. `mon` is written\n  in C, uses less than 400kb of memory, and is incredibly simple\n  to set up.\n\n## Installation\n\n```\n$ make install\n```\n\n Too lazy to clone?:\n\n```\n$ (mkdir /tmp/mon && cd /tmp/mon && curl -L# https://github.com/tj/mon/archive/master.tar.gz | tar zx --strip 1 && make install && rm -rf /tmp/mon)\n```\n\n## Usage\n\n```\n\nUsage: mon [options] <command>\n\nOptions:\n\n  -V, --version                 output program version\n  -h, --help                    output help information\n  -l, --log <path>              specify logfile [mon.log]\n  -s, --sleep <sec>             sleep seconds before re-executing [1]\n  -S, --status                  check status of --pidfile\n  -p, --pidfile <path>          write pid to <path>\n  -m, --mon-pidfile <path>      write mon(1) pid to <path>\n  -P, --prefix <str>            add a log prefix\n  -d, --daemonize               daemonize the program\n  -a, --attempts <n>            retry attempts within 60 seconds [10]\n  -R, --on-restart <cmd>        execute <cmd> on restarts\n  -E, --on-error <cmd>          execute <cmd> on error\n\n```\n\n## Example\n\n  The most simple use of `mon(1)` is to simply keep a command running:\n\n```js\n$ mon ./myprogram\nmon : pid 50395\nmon : child 50396\nmon : sh -c \"./example/program.sh\"\none\ntwo\nthree\n```\n\n  You may daemonize mon and disassociate from the term with `-d`:\n\n```js\n$ mon ./myprogram -d\nmon : pid 50413\n```\n\n## Failure alerts\n\n `mon(1)` will continue to attempt restarting your program unless the maximum number\n of `--attempts` has been exceeded within 60 seconds. Each time a restart is performed\n the `--on-restart` command is executed, and when `mon(1)` finally bails the `--on-error`\n command is then executed before mon itself exits and gives up.\n\n  For example the following will echo \"hey\" three times before mon realizes that\n  the program is unstable, since it's exiting immediately, thus finally invoking\n  `./email.sh`, or any other script you like.\n\n```js\nmon \"echo hey\" --attempts 3 --on-error ./email.sh\nmon : child 48386\nmon : sh -c \"echo hey\"\nhey\nmon : last restart less than one second ago\nmon : 3 attempts remaining\nmon : child 48387\nmon : sh -c \"echo hey\"\nhey\nmon : last restart less than one second ago\nmon : 2 attempts remaining\nmon : child 48388\nmon : sh -c \"echo hey\"\nhey\nmon : last restart less than one second ago\nmon : 1 attempts remaining\nmon : 3 restarts within less than one second, bailing\nmon : on error `sh test.sh`\nemailed failure notice to tobi@ferret-land.com\nmon : bye :)\n```\n\n  __NOTE__: The process id is passed as an argument to both `--on-error` and `--on-restart` scripts.\n\n## Managing several mon(1) processes\n\n  `mon(1)` is designed to monitor a single program only, this means a few things,\n  firstly that a single `mon(1)` may crash and it will not influence other programs,\n  secondly that the \"configuration\" for `mon(1)` is simply a shell script,\n  no need for funky weird inflexible DSLs.\n\n```bash\n#!/usr/bin/env bash\n\npids=\"/var/run\"\napp=\"/www/example.com\"\n\nmon -d redis-server -p $pids/redis.pid\nmon -d \"node $app/app\" -p $pids/app-0.pid\nmon -d \"node $app/jobs\" -p $pids/jobs-0.pid\nmon -d \"node $app/jobs\" -p $pids/jobs-1.pid\nmon -d \"node $app/jobs\" -p $pids/jobs-2.pid\nmon -d \"node $app/image\" -p $pids/image-0.pid\nmon -d \"node $app/image\" -p $pids/image-1.pid\nmon -d \"node $app/image-broker\" -p $pids/image-broker.pid\n```\n\n  I highly recommend checking out jgallen23's [mongroup(1)](https://github.com/jgallen23/mongroup),\n  which provides a great interface for managing any number of `mon(1)` instances.\n\n## Logs\n\n  By default `mon(1)` logs to stdio, however when daemonized it will default\n  to writing a log file named `./mon.log`. If you have several instances you may\n  wish to `--prefix` the log lines, or specify separate files.\n\n## Signals\n\n  - __SIGQUIT__ graceful shutdown\n  - __SIGTERM__ graceful shutdown\n\n## Links\n\n  Tools built with `mon(1)`:\n\n  - [mongroup(1)](https://github.com/jgallen23/mongroup) - monitor a group of processes (shell script)\n  - [node-mongroup](https://github.com/visionmedia/node-mongroup) - node implementation of mongroup(1)\n\n# License\n\n  MIT\n\n# Build Status\n\n  [![Build Status](https://travis-ci.org/visionmedia/mon.png)](http://travis-ci.org/visionmedia/mon)"
}
