{
  "name": "git-credential-oauth",
  "full_name": "git-credential-oauth",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Git credential helper that authenticates in browser using OAuth",
  "license": "Apache-2.0",
  "homepage": "https://github.com/hickford/git-credential-oauth",
  "versions": {
    "stable": "0.9.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/hickford/git-credential-oauth/archive/refs/tags/v0.9.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "b44562f1ca85984de25560629e322eb19e43661542b12018183d020f78d04655"
    },
    "head": {
      "url": "https://github.com/hickford/git-credential-oauth.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-credential-oauth/blobs/sha256:9cc80fc915b93c9eb0eb504ae9857052507748729795390c41c1de313bed2e9d",
          "sha256": "9cc80fc915b93c9eb0eb504ae9857052507748729795390c41c1de313bed2e9d"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-credential-oauth/blobs/sha256:9cc80fc915b93c9eb0eb504ae9857052507748729795390c41c1de313bed2e9d",
          "sha256": "9cc80fc915b93c9eb0eb504ae9857052507748729795390c41c1de313bed2e9d"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-credential-oauth/blobs/sha256:9cc80fc915b93c9eb0eb504ae9857052507748729795390c41c1de313bed2e9d",
          "sha256": "9cc80fc915b93c9eb0eb504ae9857052507748729795390c41c1de313bed2e9d"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-credential-oauth/blobs/sha256:50b4811dbbc6c5db0c96980e5ee659a078e4e3f07594c8ef893a3dea83605c0e",
          "sha256": "50b4811dbbc6c5db0c96980e5ee659a078e4e3f07594c8ef893a3dea83605c0e"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-credential-oauth/blobs/sha256:50b4811dbbc6c5db0c96980e5ee659a078e4e3f07594c8ef893a3dea83605c0e",
          "sha256": "50b4811dbbc6c5db0c96980e5ee659a078e4e3f07594c8ef893a3dea83605c0e"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-credential-oauth/blobs/sha256:50b4811dbbc6c5db0c96980e5ee659a078e4e3f07594c8ef893a3dea83605c0e",
          "sha256": "50b4811dbbc6c5db0c96980e5ee659a078e4e3f07594c8ef893a3dea83605c0e"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/git-credential-oauth/blobs/sha256:d0d4f7ba52516a4e95e0db03541eb4d48ea98c921a5559582e0ca62b4f63942b",
          "sha256": "d0d4f7ba52516a4e95e0db03541eb4d48ea98c921a5559582e0ca62b4f63942b"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/git-credential-oauth.rb",
  "ruby_source_checksum": {
    "sha256": "3ec352c10a3225bcce03e259e64d7e14cc9be4c32562396bd8d88e0aeb2c6c81"
  },
  "date_added": "2023-06-02T06:23:23+01:00",
  "readme": "git-credential-oauth\n====================\n\n*No more passwords! No more personal access tokens! No more SSH keys!*\n\ngit-credential-oauth is a Git credential helper that securely authenticates to GitHub, GitLab, BitBucket and Gerrit using [OAuth](https://datatracker.ietf.org/wg/oauth/about/).\n\nThe first time you authenticate, the helper opens a browser window to the host.\nSubsequent authentication within storage lifetime is non interactive.\n\n## Motivation\n\nGit assumes users can type a password from memory, but hosts such as GitHub no longer accept passwords without two-factor authentication.\nPersonal access tokens are easy enough to copy and paste but awkward to store securely.\n[git-credential-cache](https://git-scm.com/docs/git-credential-cache) works well for passwords but not personal access tokens because the token is lost when the cache expires.\nAll in all, the usability is so poor that the [most popular advice on StackOverflow](https://stackoverflow.com/a/35942890/284795) is to insecurely save credentials in plaintext!\n\nOAuth has multiple advantages over personal access tokens or SSH:\n\n| Advantage                                  | OAuth | Personal access token | SSH |\n|--------------------------------------------|-------|-----------------------|-----|\n| Clone public repo without setup            | âœ“     | âœ“                     | ðŸ—™   |\n| Authenticate to popular hosts without setup| âœ“     | ðŸ—™                     | ðŸ—™   |\n| Server authenticity verified automatically | âœ“     | âœ“                     | ðŸ—™   |\n| Protections against token theft[^1] | [âœ“](https://www.ietf.org/archive/id/draft-ietf-oauth-security-topics-22.html#name-refresh-token-protection)     | ðŸ—™                     | *only if key has passphrase*   |\n\n[^1]: Scenario: an old disk backup is leaked.\n\n## Installation\n\n**Download** binary from https://github.com/hickford/git-credential-oauth/releases.\n\nThen test that Git can find the application:\n\n\tgit credential-oauth\n\nIf you have problems, make sure that the binary is [located in the path](https://superuser.com/a/284351/62691) and [is executable](https://askubuntu.com/a/229592/18504).\n\n### Linux\n\n[Several Linux distributions](https://repology.org/project/git-credential-oauth/versions) include a git-credential-oauth package including [Fedora](https://packages.fedoraproject.org/pkgs/git-credential-oauth/git-credential-oauth/), [Debian](https://tracker.debian.org/pkg/git-credential-oauth) and [Ubuntu](https://packages.ubuntu.com/lunar/git-credential-oauth).\n\n[![Packaging status](https://repology.org/badge/vertical-allrepos/git-credential-oauth.svg?exclude_unsupported=1&header=)](https://repology.org/project/git-credential-oauth/versions)\n\n### macOS\n\n#### Homebrew\n\nmacOS users can install from [Homebrew](https://formulae.brew.sh/formula/git-credential-oauth#default):\n\n\tbrew install git-credential-oauth\n\t\n#### MacPorts\n\nmacOS users can alternatively install via [MacPorts](https://ports.macports.org/port/git-credential-oauth/):\n\n\tsudo port install git-credential-oauth\n\n### Go users\n\nGo users can install the latest release to `~/go/bin` with:\n\n\tgo install github.com/hickford/git-credential-oauth@latest\n\n## Configuration\n\nAs a convenience, you can run:\n\n```sh\ngit credential-oauth configure\n```\n\nThis uses the recommended config below.\n\n### How it works\n\nGit is cleverly designed to [support multiple credential helpers](https://git-scm.com/docs/gitcredentials#_custom_helpers). To fill credentials, Git calls each helper in turn until it has the information it needs. git-credential-oauth is a read-only credential-generating helper, designed to be configured in combination with a storage helper.\n\nTo configure together with [git-credential-cache](https://git-scm.com/docs/git-credential-cache):\n\n```sh\ngit config --global --unset-all credential.helper\ngit config --global --add credential.helper \"cache --timeout 7200\" # two hours\ngit config --global --add credential.helper oauth\n```\n\nYou may choose a different storage helper such as `osxkeychain`, `wincred` or `libsecret`, but git-credential-oauth must be configured last. This ensures Git checks for *stored* credentials before generating *new* credentials.\n\n**Windows users** must use storage helper `wincred` because [git-credential-cache isn't available on Windows](https://github.com/git-for-windows/git/issues/3892).\n\n### Manual config\n\nEdit your [global git config](https://git-scm.com/docs/git-config#FILES) `~/.gitconfig` to include the following lines:\n\n```ini\n[credential]\n\thelper = cache --timeout 7200\t# two hours\n\thelper = oauth\n```\n\n### Unconfiguration\n\nEdit `~/.gitconfig` manually, or run:\n\n\tgit config --global --unset-all credential.helper oauth\n\n## Custom hosts\n\nTo use with a custom host, eg. `gitlab.example.com`:\n\n1. Register an OAuth application on the host. The [GitLab instructions](https://docs.gitlab.com/ee/integration/oauth_provider.html#user-owned-applications) are typical.\n\t* Specify name `git-credential-oauth`\n\t* Specify redirect URI `http://127.0.0.1`.\n\t* Select scopes for read and write Git operations.\n2. Adjust the config commands below with the generated client id and *space-separated* scopes.\n3. Share the config commands with colleagues so they can skip the registration step.\n\n```sh\ngit config --global credential.https://gitlab.example.com.oauthClientId <CLIENTID>\ngit config --global credential.https://gitlab.example.com.oauthScopes read_repository write_repository\ngit config --global credential.https://gitlab.example.com.oauthAuthURL /oauth/authorize\ngit config --global credential.https://gitlab.example.com.oauthTokenURL /oauth/token\n```\n\nWould you like to see universal GitLab support? *Vote for [GitLab issue #374172](https://gitlab.com/gitlab-org/gitlab/-/issues/374172).\n\n## Philosophy\n\n* Do one thing well, namely OAuth authentication.\n* Interoperate with other credential helpers.\n* [Contribute upstream](https://lore.kernel.org/git/?q=f%3Ahickford+s%3Acredential) to improve the ecosystem.\n\n## Comparison with Git Credential Manager\n\n[Git Credential Manager](https://github.com/GitCredentialManager/git-credential-manager) (GCM) is an excellent credential helper with broader functionality. However because it's developed in .NET, GCM is [prohibitively difficult for Linux distributions to package](https://github.com/dotnet/source-build/discussions/2960).\n\n|                | Git Credential Manager | git-credential-oauth |\n|----------------|------------------------|----------------------|\n| Cross platform | âœ“                      | âœ“                     |\n| Linux arm64 support            | ðŸ—™               | âœ“                            |\n| Packaged in Linux distributions               | ðŸ—™            | âœ“ ([many](https://repology.org/project/git-credential-oauth/versions)) |\n| Installation size (Linux) | [82 MB](https://github.com/git-ecosystem/git-credential-manager/issues/1212#issuecomment-1530304873) | 5 MB                 |\n| Installation size (Windows) | 4 MB | 5 MB                 |\n| Ships with Git for Windows | âœ“ | ðŸ—™ |\n| Credential storage | In built | Used together with any storage helper |\n| Development    | .NET                   | Go                   |\n| Lines of code | 40,000 | 400 |\n| Minimum HTTP requests | 1 | 0 |\n| Authentication to Azure DevOps | âœ“ | ðŸ—™ (try [git-credential-azure](https://github.com/hickford/git-credential-azure)) |\n| Hosts with default config | 4 | 12 |\n\nThe maintainer personally uses GCM on Windows and git-credential-oauth on Linux.\n\n## Development\n\nInstall locally with `go install .`.\n\n### Debugging\n\nUse the `-verbose` flag to print more details:\n\n```sh\ngit config --global --unset-all credential.helper oauth\ngit config --global --add credential.helper \"oauth -verbose\"\n```\n\nYou can also test git-credential-oauth in isolation:\n\n```\necho host=gitlab.com\\nprotocol=https | git-credential-oauth -verbose get\n```\n\nYou can test configured helpers in combination with `git credential fill`, eg.\n\n```\necho url=https://gitlab.com | git credential fill\n```\n\nTo see which helpers Git calls, set `export GIT_TRACE=1`.\n\n## See also\n\n* [git-credential-azure](https://github.com/hickford/git-credential-azure): a Git credential manager that authenticates to Azure Repos\n* [Git Credential Manager](https://github.com/git-ecosystem/git-credential-manager)"
}
