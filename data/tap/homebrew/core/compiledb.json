{
  "name": "compiledb",
  "full_name": "compiledb",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Generate a Clang compilation database for Make-based build systems",
  "license": "GPL-3.0-or-later",
  "homepage": "https://github.com/nickdiego/compiledb",
  "versions": {
    "stable": "0.10.1",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://files.pythonhosted.org/packages/76/62/30fb04404b1d4a454f414f792553d142e8acc5da27fddcce911fff0fe570/compiledb-0.10.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "06bb47dd1fa04de3a12720379ff382d40441074476db7c16a27e2ad79b7e966e"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/compiledb/blobs/sha256:99d4ad0e016adfa94460cc9c886cc8dcceacba9ccbaf51d04d8e3b7028d58d61",
          "sha256": "99d4ad0e016adfa94460cc9c886cc8dcceacba9ccbaf51d04d8e3b7028d58d61"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/compiledb/blobs/sha256:bd93b12502449ec25be15c4e247b940ba85f4fb51d641f750268967331fba099",
          "sha256": "bd93b12502449ec25be15c4e247b940ba85f4fb51d641f750268967331fba099"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/compiledb/blobs/sha256:e8d9505131e721298fad7ab7b89bc042954ec8275e8b17a396c931c2b1d84389",
          "sha256": "e8d9505131e721298fad7ab7b89bc042954ec8275e8b17a396c931c2b1d84389"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/compiledb/blobs/sha256:ce10a050579461e0cc548dd2c9a6306618c9912f2390aa0d84c2cf0b25db1d93",
          "sha256": "ce10a050579461e0cc548dd2c9a6306618c9912f2390aa0d84c2cf0b25db1d93"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/compiledb/blobs/sha256:a2572bb2b079e002259858088496a61d9bc76d7ffadd6e37b8cbd05cbc3495d6",
          "sha256": "a2572bb2b079e002259858088496a61d9bc76d7ffadd6e37b8cbd05cbc3495d6"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/compiledb/blobs/sha256:52aa66cc118dd3c8105ea952276c6227dad47a1634b2c8b533f1b305035f9a22",
          "sha256": "52aa66cc118dd3c8105ea952276c6227dad47a1634b2c8b533f1b305035f9a22"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/compiledb/blobs/sha256:5a2d47563121d3383bf89e2b5c2f0ccd72d90d7df1e54b4bb4c8873bb9492565",
          "sha256": "5a2d47563121d3383bf89e2b5c2f0ccd72d90d7df1e54b4bb4c8873bb9492565"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/compiledb/blobs/sha256:980ef38bab346737d8d166410fa7bc46d32a86ee11fcf1b438b8bfda06e180a0",
          "sha256": "980ef38bab346737d8d166410fa7bc46d32a86ee11fcf1b438b8bfda06e180a0"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "python@3.11"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/compiledb.rb",
  "ruby_source_checksum": {
    "sha256": "c715df7e4505fe070b64b551d22d62421cc4db21b0cc688ea6b9aa1bb855c9c4"
  },
  "date_added": "2022-03-29T08:58:59+00:00",
  "readme": "# Compilation Database Generator\n\n[![CircleCI branch](https://img.shields.io/circleci/project/github/nickdiego/compiledb/master.svg)](https://circleci.com/gh/nickdiego/compiledb)\n[![PyPI](https://img.shields.io/pypi/v/compiledb.svg)](https://pypi.org/project/compiledb/)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/compiledb.svg)](https://pypi.org/project/compiledb)\n[![GitHub](https://img.shields.io/github/license/nickdiego/compiledb.svg)](https://github.com/nickdiego/compiledb/blob/master/LICENSE)\n\nTool for generating [Clang's JSON Compilation Database][compdb] file for GNU\n`make`-based build systems.\n\nIt's aimed mainly at non-cmake (cmake already generates compilation database)\nlarge codebases. Inspired by projects like [YCM-Generator][ycm-gen] and [Bear][bear],\nbut faster (mainly with large projects), since in most cases it **doesn't need a clean\nbuild** (as the mentioned tools do) to generate the compilation database file, to\nachieve this it uses the make options such as `-n`/`--dry-run` and `-k`/`--keep-going`\nto extract the compile commands. Also, it's more **cross-compiling friendly** than\nYCM-generator's fake-toolchanin approach.\n\n## Installation\n\n```\n# pip install compiledb\n```\n- Supports Python 2.x and 3.x (for now, tested only with 2.7 and 3.6 versions)\n- For bash completion support, add the content of `sh-completion/compiledb.bash` file\n  to your `.bashrc` file, for example.\n- _ZSH completion coming soon :)_\n\n## Usage\n\n`compiledb` provides a `make` python wrapper script which, besides to execute the make\nbuild command, updates the JSON compilation database file corresponding to that build,\nresulting in a command-line interface similar to [Bear][bear].\n\nTo generate `compile_commands.json` file using compiledb's \"make wrapper\" script,\nexecuting Makefile target `all`:\n```bash\n$ compiledb make\n```\n\n`compiledb` forwards all the options/arguments passed after `make` subcommand to GNU Make,\nso one can, for example, generate `compile_commands.json` using `core/main.mk`\nas main makefile (`-f` flag), starting the build from `build` directory (`-C` flag):\n```bash\n$ compiledb make -f core/main.mk -C build\n```\n\nBy default, `compiledb make` generates the compilation database and runs the actual build\ncommand requested (acting as a make wrapper), the build step can be skipped using the `-n`\nor `--no-build` options.\n```bash\n$ compiledb -n make\n```\n\n`compiledb` base command has been designed so that it can be used to parse compile commands\nfrom arbitrary text files (or stdin), assuming it has a build log (ideally generated using\n`make -Bnwk` command), and generates the corresponding JSON Compilation database.\n\nFor example, to generate the compilation database from `build-log.txt` file, use the following\ncommand.\n```bash\n$ compiledb --parse build-log.txt\n```\n\nor its equivalent:\n```bash\n$ compiledb < build-log.txt\n```\n\nOr even, to pipe make's output and print the compilation database to the standard output:\n```bash\n$ make -Bnwk | compiledb -o-\n```\n\nBy default `compiledb` generates a JSON compilation database in the \"arguments\" list\n[format](https://clang.llvm.org/docs/JSONCompilationDatabase.html). The \"command\" string\nformat is also supported through the use of the `--command-style` flag:\n```bash\n$ compiledb --command-style make\n```\n\n## Testing / Contributing\n\nI've implemented this tool because I needed to index some [AOSP][aosp]'s modules for navigating\nand studying purposes (after having no satisfatory results with current tools available by the\ntime such as [YCM-Generator][ycm] and [Bear][bear]). So I've reworked YCM-Generator, which resulted\nin the initial version of [compiledb/parser.py](compiledb/parser.py) and used successfully to generate\n`compile_commands.json` for some AOSP modules in ~1min running in a [Docker][docker] container and then\ncould use it with some great tools, such as:\n\n- [Vim][vim] + [YouCompleteMe][ycm] + [rtags][rtags] + [chromatica.nvim][chrom]\n- [Neovim][neovim] + [LanguageClient-neovim][lsp] + [cquery][cquery] + [deoplete][deoplete]\n- [Neovim][neovim] + [ALE][ale] + [ccls][ccls]\n\nNotice:\n- _Windows: tested on Windows 10 with cmd, wsl(Ubuntu), mingw32_\n- _Linux: tested only on Arch Linux and Ubuntu 18 so far_\n- _Mac: tested on macOS 10.13 and 10.14_\n\nPatches are always welcome :)\n\n## License\nGNU GPLv3\n\n[compdb]: https://clang.llvm.org/docs/JSONCompilationDatabase.html\n[ycm]: https://github.com/Valloric/YouCompleteMe\n[rtags]: https://github.com/Andersbakken/rtags\n[chrom]: https://github.com/arakashic/chromatica.nvim\n[ycm-gen]: https://github.com/rdnetto/YCM-Generator\n[bear]: https://github.com/rizsotto/Bear\n[aosp]: https://source.android.com/\n[docker]: https://www.docker.com/\n[vim]: https://www.vim.org/\n[neovim]: https://neovim.io/\n[lsp]: https://github.com/autozimu/LanguageClient-neovim\n[cquery]: https://github.com/cquery-project/cquery\n[deoplete]: https://github.com/Shougo/deoplete.nvim\n[ccls]: https://github.com/MaskRay/ccls\n[ale]: https://github.com/w0rp/ale"
}
