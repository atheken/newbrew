{
  "name": "homeassistant-cli",
  "full_name": "homeassistant-cli",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Command-line utility for Home Assistant",
  "license": "Apache-2.0",
  "homepage": "https://github.com/home-assistant-ecosystem/home-assistant-cli",
  "versions": {
    "stable": "0.9.6",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/home-assistant-ecosystem/home-assistant-cli/archive/refs/tags/0.9.6.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "f971ac78a74922f4555ee7f77e327d8008819a8a83db1ad8037c0601e74a40ba"
    },
    "head": {
      "url": "https://github.com/home-assistant-ecosystem/home-assistant-cli.git",
      "branch": "dev"
    }
  },
  "revision": 3,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/homeassistant-cli/blobs/sha256:69319c985b20ebf194daa3b28e5cf24c95b7ddfb61c08e6839765e4cbcd3c8e7",
          "sha256": "69319c985b20ebf194daa3b28e5cf24c95b7ddfb61c08e6839765e4cbcd3c8e7"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/homeassistant-cli/blobs/sha256:88a45e79d4520f28cf08ebda6ae24d31b0d0a5df49b9bc561c1725ec2b756dbe",
          "sha256": "88a45e79d4520f28cf08ebda6ae24d31b0d0a5df49b9bc561c1725ec2b756dbe"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/homeassistant-cli/blobs/sha256:64b1671bb4183b2fb4292f70100dcde29d6c4c60173c753b0340bf431431f49a",
          "sha256": "64b1671bb4183b2fb4292f70100dcde29d6c4c60173c753b0340bf431431f49a"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/homeassistant-cli/blobs/sha256:615ce1545b3580b574efc7bc0d0fc16766ffcb4a7ba9b4e8b4743deaff62609f",
          "sha256": "615ce1545b3580b574efc7bc0d0fc16766ffcb4a7ba9b4e8b4743deaff62609f"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/homeassistant-cli/blobs/sha256:a40d0db805471fbda4bf6742e4d3a3b0c7102e73c4047161a8a123ae9d56b999",
          "sha256": "a40d0db805471fbda4bf6742e4d3a3b0c7102e73c4047161a8a123ae9d56b999"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/homeassistant-cli/blobs/sha256:d5dd5dbe684f92460a434f5d6ba78cf7beeab0b8af997b83574004a809b29e36",
          "sha256": "d5dd5dbe684f92460a434f5d6ba78cf7beeab0b8af997b83574004a809b29e36"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/homeassistant-cli/blobs/sha256:f3502eb0ab5127896525ca86271ce7834c0075d42357c1168527fafb9fc12744",
          "sha256": "f3502eb0ab5127896525ca86271ce7834c0075d42357c1168527fafb9fc12744"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "python-tabulate",
    "python@3.11",
    "six"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/homeassistant-cli.rb",
  "ruby_source_checksum": {
    "sha256": "8bd36e1365503c09f871c9daac07892c5e8a016625e3c4ed862aeef5a70e93d2"
  },
  "date_added": "2019-02-26T11:04:39+01:00",
  "readme": "Home Assistant Command-line Interface (``hass-cli``)\n====================================================\n\n|Coverage| |License| |PyPI|\n\nThe Home Assistant Command-line interface (``hass-cli``) allows one to\nwork with a local or a remote `Home Assistant <https://home-assistant.io>`_\nCore or Home Assistant (former Hass.io) instance directly from the command-line.\n\n.. image:: https://asciinema.org/a/216235.png\n      :alt: hass-cli screencast\n      :target: https://asciinema.org/a/216235?autoplay=1&speed=1\n\n\nInstallation\n============\n\nTo use latest release:\n\n.. code:: bash\n\n    $ pip install homeassistant-cli\n\nTo use latest pre-release from ``dev`` branch:\n\n.. code:: bash\n\n   $ pip install git+https://github.com/home-assistant-ecosystem/home-assistant-cli@dev\n\nThe developers of `hass-cli` usually provide up-to-date `packages <https://src.fedoraproject.org/rpms/home-assistant-cli>`_ for recent Fedora and EPEL releases. Use ``dnf`` for the installation:\n\n.. code:: bash\n\n   $ sudo  dnf -y install home-assistant-cli\n\nThe community is providing support for macOS through `homebew <https://formulae.brew.sh/formula/homeassistant-cli#default>`_.\n\n.. code:: bash\n\n   $ brew install homeassistant-cli\n\nKeep in mind that the available releases in the distribution could be out-dated.\n\n``home-assistant-cli`` is also available for NixOS.\n\nTo use the tool on NixOS. Keep in mind that the latest release could only\nbe available in the ``unstable`` channel.\n\n.. code:: bash\n\n   $ nix-env -iA nixos.home-assistant-cli\n\nDocker\n-------\n\nIf you do not have a Python setup you can try use ``hass-cli`` via a container\nusing Docker.\n\n.. code:: bash\n\n   $ docker run homeassistant/home-assistant-cli\n\n\nTo make auto-completion and access environment work like other scripts you'll\nneed to create a script file to execute.\n\n.. code:: bash\n\n   $ curl https://raw.githubusercontent.com/home-assistant/home-assistant-cli/master/docker-hass-cli > hass-cli\n   $ chmod +x hass-cli\n\n\nNow put the ``hass-cli`` script into your path and you can use it like if you\nhad installed it via command line as long as you don't need file system access\n(like for ``hass-cli template``).\n\nSetup\n======\n\nTo get started you'll need to have or generate a long lasting token format\non your Home Assistant profile page (i.e. https://localhost:8123/profile\nthen scroll down to \"Long-Lived Access Tokens\").\n\nThen you can use ``--server`` and ``--token`` parameter on each call or as is\nrecommended setup ``HASS_SERVER`` and ``HASS_TOKEN`` environment variables.\n\n.. code:: bash\n\n    $ export HASS_SERVER=https://homeassistant.local:8123\n    $ export HASS_TOKEN=<secret>\n\nOnce that is enabled, run one of the following commands to enable\nautocompletion for ``hass-cli`` commands.\n\n.. code:: bash\n\n  $ source <(_HASS_CLI_COMPLETE=bash_source hass-cli) # for bash\n  $ source <(_HASS_CLI_COMPLETE=zsh_source hass-cli)  # for zsh\n  $ eval (_HASS_CLI_COMPLETE=fish_source hass-cli)    # for fish\n\nUsage\n=======\n\nNote: Below is listed **some** of the features, make sure to use ``--help`` and\nautocompletion to learn more of the features as they become available.\n\nMost commands returns a table version of what the Home Assistant API returns.\nFor example to get basic info about your Home Assistant server you use ``info``:\n\n.. code:: bash\n\n   $ hass-cli info\n     BASE_URL                           LOCATION         REQUIRES_API_PASWORD  VERSION\n     https://home-assistant.local:8123  Fort of Solitude False                 0.86.2\n\nIf you prefer yaml you can use ``--output=yaml``:\n\n.. code:: bash\n\n    $ hass-cli --output yaml info\n      base_url: https://home-assistant.local:8123\n      location_name: Wayne Manor\n      requires_api_password: false\n      version: 0.86.2\n\nTo get list of states you use `state list`:\n\n.. code:: bash\n\n    $ hass-cli state list\n    ENTITY                                                     DESCRIPTION                                     STATE\n    zone.school                                                School                                          zoning\n    zone.home                                                  Andersens                                       zoning\n    sun.sun                                                    Sun                                             below_horizon\n    camera.babymonitor                                         babymonitor                                     idle\n    timer.timer_office_lights                                                                                  idle\n    timer.timer_small_bathroom                                                                                 idle\n    [...]\n\n\nYou can use ``--no-headers`` to suppress the header.\n\n``--table-format`` let you select which table format you want. Default is\n``simple`` but you can use any of the formats supported by https://pypi.org/project/tabulate/:\n``plain``, ``simple``, ``github``, ``grid``, ``fancy_grid``, ``pipe``,\n``orgtbl``, ``rst``, ``mediawiki``, ``html``, ``latex``, ``latex_raw``,\n``latex_booktabs`` or ``tsv``\n\nFinally, you can also via ``--columns`` control which data you want shown.\nEach column has a name and a jsonpath. The default setup for entities are:\n\n``--columns=ENTITY=entity_id,DESCRIPTION=attributes.friendly_name,STATE=state,CHANGED=last_changed``\n\nIf you for example just wanted the name and all attributes you could do:\n\n.. code:: bash\n\n   $ hass-cli --columns=ENTITY=\"entity_id,ATTRIBUTES=attributes[*]\" state list zone\n   ENTITY             ATTRIBUTES\n   zone.school        {'friendly_name': 'School', 'hidden': True, 'icon': 'mdi:school', 'latitude': 7.011023, 'longitude': 16.858151, 'radius': 50.0}\n   zone.unnamed_zone  {'friendly_name': 'Unnamed zone', 'hidden': True, 'icon': 'mdi:home', 'latitude': 37.006476, 'longitude': 2.861699, 'radius': 50.0}\n   zone.home          {'friendly_name': 'Andersens', 'hidden': True, 'icon': 'mdi:home', 'latitude': 27.006476, 'longitude': 7.861699, 'radius': 100}\n\nYou can get more details about a state by using ``yaml`` or ``json`` output\nformat. In this example we use the shorthand of output: ``-o``:\n\n.. code:: bash\n\n    $ hass-cli -o yaml state get light.guestroom_light                                                                                                                                                                       ◼\n    attributes:\n      friendly_name: Guestroom Light\n      supported_features: 61\n    context:\n      id: 84d52fe306ec4895948b546b492702a4\n      user_id: null\n    entity_id: light.guestroom_light\n    last_changed: '2018-12-10T18:33:51.883238+00:00'\n    last_updated: '2018-12-10T18:33:51.883238+00:00'\n    state: 'off'\n\nYou can edit state via an editor:\n\n.. code:: bash\n\n    $ hass-cli state edit light.guestroom_light\n\nThis will open the current state in your favorite editor and any changes you\nsave will be used for an update.\n\nYou can also explicitly create/edit via the ``--json`` flag:\n\n.. code:: bash\n\n  $ hass-cli state edit sensor.test --json='{ \"state\":\"off\"}'\n\nList possible services with or without a regular expression filter:\n\n.. code:: bash\n\n    $ hass-cli service list 'home.*toggle'\n      DOMAIN         SERVICE    DESCRIPTION\n      homeassistant  toggle     Generic service to toggle devices on/off...\n\nFor more details the YAML format is useful:\n\n.. code:: bash\n\n    $ hass-cli -o yaml service list homeassistant.toggle\n    homeassistant:\n      services:\n        toggle:\n          description: Generic service to toggle devices on/off under any domain. Same\n            usage as the light.turn_on, switch.turn_on, etc. services.\n          fields:\n            entity_id:\n              description: The entity_id of the device to toggle on/off.\n              example: light.living_room\n\nYou can get history about one or more entities, here getting state changes for the last\n50 minutes:\n\n.. code:: bash\n\n   $ hass-cli state history --since 50m light.kitchen_light_1 binary_sensor.presence_kitchen\n     ENTITY                          DESCRIPTION      STATE    CHANGED\n     binary_sensor.presence_kitchen  Kitchen Motion   off      2019-01-27T23:19:55.322474+00:00\n     binary_sensor.presence_kitchen  Kitchen Motion   on       2019-01-27T23:21:44.015071+00:00\n     binary_sensor.presence_kitchen  Kitchen Motion   off      2019-01-27T23:22:02.330566+00:00\n     light.kitchen_light_1           Kitchen Light 1  on       2019-01-27T23:19:55.322474+00:00\n     light.kitchen_light_1           Kitchen Light 1  off      2019-01-27T23:36:45.254266+00:00\n\nThe data is sorted by default as Home Assistant returns it, thus for history it is useful\nto sort by a property:\n\n.. code:: bash\n\n   $ hass-cli --sort-by last_changed state history --since 50m  light.kitchen_light_1 binary_sensor.presence_kitchen\n   ENTITY                          DESCRIPTION      STATE    CHANGED\n   binary_sensor.presence_kitchen  Kitchen Motion   off      2019-01-27T23:18:00.717611+00:00\n   light.kitchen_light_1           Kitchen Light 1  on       2019-01-27T23:18:00.717611+00:00\n   binary_sensor.presence_kitchen  Kitchen Motion   on       2019-01-27T23:18:12.135015+00:00\n   binary_sensor.presence_kitchen  Kitchen Motion   off      2019-01-27T23:18:30.417064+00:00\n   light.kitchen_light_1           Kitchen Light 1  off      2019-01-27T23:36:45.254266+00:00\n\nNote: the `--sort-by` argument is referring to the attribute in the underlying\n``json``/``yaml`` NOT the column name. The advantage for this is that it can\nbe used for sorting on any property even if not included in the default output.\n\nAreas and Device Registry\n-------------------------\n\nSince v0.87 of Home Assistant there is a notion of Areas in the Device registry. ``hass-cli`` lets\nyou list devices and areas and assign areas to devices.\n\nListing devices and areas works similar to list Entities.\n\n.. code:: bash\n\n   $ hass-cli device list\n   ID                                NAME                           MODEL                            MANUFACTURER        AREA\n   a3852c3c3ebd47d3acac195478ca6f8b  Basement stairs motion         SML001                           Philips             c6c962b892064a218e968fcaee7950c8\n   880a944e74db4bb48ea3db6dd24af357  Basement Light 2               TRADFRI bulb GU10 WS 400lm       IKEA of Sweden      c6c962b892064a218e968fcaee7950c8\n   657c3cc908594479aab819ff80d0c710  Office                         Hue white lamp                   Philips             None\n   [...]\n\n   $ hass-cli area list\n   ID                                NAME\n   295afc88012341ecb897cd12d3fbc6b4  Bathroom\n   9e08d89203804d5db995c3d0d5dbd91b  Winter Garden\n   8816ee92b7b84f54bbb30a68b877e739  Office\n   [...]\n\n\nYou can create and delete areas:\n\n.. code:: bash\n\n   $ hass-cli area delete \"Old Shed\"\n   -  id: 1\n      type: result\n      success: true\n      result: success\n\n   $ hass-cli area create \"New Shed\"\n   -  id: 1\n      type: result\n      success: true\n      result:\n          area_id: cdd09a80f03a4cc59d2943053c0414c0\n          name: New Shed\n\nYou can assign area to a specific device. Here the Kitchen\narea gets assigned to device named \"Cupboard Light\".\n\n.. code:: bash\n\n   $ hass-cli device assign Kitchen \"Cupboard Light\"\n\nBesides assigning individual devices you can assign in bulk:\n\n.. code:: bash\n\n   $ hass-cli device assign Kitchen --match \"Kitchen Light\"\n\nThe above line will assign Kitchen area to all devices with substring \"Kitchen Light\".\n\nYou can also combine individual and matched devices in one line:\n\n.. code:: bash\n\n   $ hass-cli device assign Kitchen --match \"Kitchen Light\" eab9930f8652408882cc8cb604651c60 Cupboard\n\nAbove will assign area named \"Kitchen\" to all devices having substring \"Kitchen Light\" and to\nspecific area with id \"eab9930...\" or named \"Cupboard\".\n\nEvents\n------\n\nYou can subscribe and watch all or a specific event type using ``event watch``.\n\n.. code:: bash\n\n   $ hass-cli event watch\n\nThis will watch for all event types, you can limit to a specific event type\nby specifying it as an argument:\n\n.. code:: bash\n\n   $ hass-cli event watch deconz_event\n\n\nHome Assistant (former Hass.io)\n-------------------------------\n\nIf you are using Home Assistant (former Hass.io) there are commands available\nfor you to interact with Home Assistant services/systems. This includes the\nunderlying services like the supervisor.\n\nCheck the Supervisor release you are running:\n\n.. code:: bash\n\n   $ hass-cli ha supervisor info\n   result: ok\n   data:\n    version: '217'\n    version_latest: '217'\n    channel: stable\n    [...]\n\nCheck the Core release you are using at the moment:\n\n.. code:: bash\n\n   $ hass-cli ha core info\n   result: ok\n   data:\n       version: 0.108.2\n       version_latest: 0.108.3\n       [...]\n\nUpdate Core to the latest available release:\n\n.. code:: bash\n\n   $ hass-cli ha core update\n\n\nOther\n-----\n\nYou can call services:\n\n.. code:: bash\n\n    $ hass-cli service call deconz.device_refresh\n\nWith arguments:\n\n.. code:: bash\n\n    $ hass-cli service call homeassistant.toggle --arguments entity_id=light.office_light\n\n\nOpen a map for your Home Assistant location:\n\n.. code:: bash\n\n    $ hass-cli map\n\nRender templates server side:\n\n.. code:: bash\n\n    $ hass-cli template motionlight.yaml.j2 motiondata.yaml\n\nRender templates client (local) side:\n\n.. code:: bash\n\n    $ hass-cli template --local lovelace-template.yaml\n\n\nAuto-completion\n###############\n\nAs described above you can use ``source <(hass-cli completion zsh)`` to\nquickly and easy enable auto completion. If you do it from your ``.bashrc``\nor ``.zshrc`` it's recommend to use the form below as that does not trigger\na run of ``hass-cli`` itself.\n\nFor zsh:\n\n.. code:: bash\n\n  eval \"$(_HASS_CLI_COMPLETE=source_zsh hass-cli)\"\n\n\nFor bash:\n\n.. code:: bash\n\n  eval \"$(_HASS_CLI_COMPLETE=source hass-cli)\"\n\n\nOnce enabled there is autocompletion for commands and for certain attributes like entities:\n\n.. code:: bash\n\n  $ hass-cli state get light.<TAB>                                                                                                                                                                    ⏎ ✱ ◼\n  light.kitchen_light_5          light.office_light             light.basement_light_4         light.basement_light_9         light.dinner_table_light_4     light.winter_garden_light_2    light.kitchen_light_2\n  light.kitchen_table_light_1    light.hallroom_light_2         light.basement_light_5         light.basement_light_10        light.dinner_table_wall_light  light.winter_garden_light_4    light.kitchen_table_light_2\n  light.kitchen_light_1          light.hallroom_light_1         light.basement_light_6         light.small_bathroom_light     light.dinner_table_light_5     light.winter_garden_light_3    light.kitchen_light_4\n  [...]\n\n\nNote: For this to work you'll need to have setup the following environment\nvariables if your Home Assistant installation is secured and not running on\nlocalhost:8123:\n\n.. code:: bash\n\n   export HASS_SERVER=http://homeassistant.local:8123\n   export HASS_TOKEN=eyJ0eXAiO-----------------------ed8mj0NP8\n\n\nHelp\n####\n\n.. code:: bash\n\n    $ hass-cli\n    Usage: hass-cli [OPTIONS] COMMAND [ARGS]...\n\n      Command line interface for Home Assistant.\n\n    Options:\n      -l, --loglevel LVL              Either CRITICAL, ERROR, WARNING, INFO or\n                                      DEBUG\n      --version                       Show the version and exit.\n      -s, --server TEXT               The server URL or `auto` for automatic\n                                      detection. Can also be set with the\n                                      environment variable HASS_SERVER.  [default:\n                                      auto]\n      --token TEXT                    The Bearer token for Home Assistant\n                                      instance. Can also be set with the\n                                      environment variable HASS_TOKEN.\n      --password TEXT                 The API password for Home Assistant\n                                      instance. Can also be set with the\n                                      environment variable HASS_PASSWORD.\n      --timeout INTEGER               Timeout for network operations.  [default:\n                                      5]\n      -o, --output [json|yaml|table|ndjson|auto]\n                                      Output format.  [default: auto]\n      -v, --verbose                   Enables verbose mode.\n      -x                              Print backtraces when exception occurs.\n      --cert TEXT                     Path to client certificate file (.pem) to\n                                      use when connecting.\n      --insecure                      Ignore SSL Certificates. Allow to connect to\n                                      servers with self-signed certificates. Be\n                                      careful!\n      --debug                         Enables debug mode.\n      --columns TEXT                  Custom columns key=value list. Example:\n                                      ENTITY=entity_id,\n                                      NAME=attributes.friendly_name\n      --no-headers                    When printing tables don't use headers\n                                      (default: print headers)\n      --table-format TEXT             Which table format to use.\n      --sort-by TEXT                  Sort table by the jsonpath expression.\n                                      Example: last_changed\n      --help                          Show this message and exit.\n\n    Commands:\n      area        Get info and operate on areas from Home Assistant...\n      completion  Output shell completion code for the specified shell (bash or...\n      config      Get configuration from a Home Assistant instance.\n      device      Get info and operate on devices from Home Assistant...\n      discover    Discovery for the local network.\n      entity      Get info on entities from Home Assistant.\n      event       Interact with events.\n      ha          Home Assistant (former Hass.io) commands.\n      info        Get basic info from Home Assistant.\n      map         Show the location of the config or an entity on a map.\n      raw         Call the raw API (advanced).\n      service     Call and work with services.\n      state       Get info on entity state from Home Assistant.\n      system      System details and operations for Home Assistant.\n      template    Render templates on server or locally.\n\n\nClone the git repository and\n\n.. code:: bash\n\n    $ pip3 install --editable .\n\n\n\nDevelopment\n###########\n\nDeveloping is (re)using as much as possible from\n`Home Assistant development setup <https://developers.home-assistant.io/docs/en/development_environment.html>`_.\n\nRecommended way to develop is to use virtual environment to ensure isolation\nfrom rest of your system using the following steps:\n\nClone the git repository and do the following:\n\n.. code:: bash\n\n    $ python3 -m venv .\n    $ source bin/activate\n    $ script/setup\n\n\nafter this you should be able to edit the source code and running ``hass-cli``\ndirectly:\n\n.. code:: bash\n\n    $ hass-cli\n\n.. |License| image:: https://img.shields.io/badge/License-Apache%202.0-blue.svg\n   :target: https://github.com/home-assistant/home-assistant-cli/blob/master/LICENSE\n   :alt: License\n.. |PyPI| image:: https://img.shields.io/pypi/v/homeassistant_cli.svg\n   :target: https://pypi.org/project/homeassistant_cli/\n   :alt: PyPI release\n.. |Coverage| image:: https://coveralls.io/repos/github/home-assistant/home-assistant-cli/badge.svg?branch=dev\n    :target: https://coveralls.io/github/home-assistant/home-assistant-cli?branch=dev\n    :alt: Coveralls\n.. |Docker| image:: https://img.shields.io/docker/pulls/homeassistant/home-assistant-cli.svg?style=flat\n    :target: https://hub.docker.com/r/homeassistant/home-assistant-cli\n    :alt: Docker"
}
