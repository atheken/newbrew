{
  "name": "lr",
  "full_name": "lr",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "File list utility with features from ls(1), find(1), stat(1), and du(1)",
  "license": "MIT",
  "homepage": "https://github.com/leahneukirchen/lr",
  "versions": {
    "stable": "1.5.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/leahneukirchen/lr/archive/refs/tags/v1.5.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "3c9337b9d924f2318083edc72fa9dfcf571a4af2a411abf57ad12baa5e27cc4a"
    },
    "head": {
      "url": "https://github.com/leahneukirchen/lr.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/lr/blobs/sha256:4ef4b3efd8f0b8e68cb1d02f600cfae5c780c4227ddf0193e010f3a328e95f23",
          "sha256": "4ef4b3efd8f0b8e68cb1d02f600cfae5c780c4227ddf0193e010f3a328e95f23"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/lr/blobs/sha256:772570dfa98bac636b0285407a8bdc0b987288a37d2c2d2a21ad448fadc60e65",
          "sha256": "772570dfa98bac636b0285407a8bdc0b987288a37d2c2d2a21ad448fadc60e65"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/lr/blobs/sha256:dadc15568d278a97b4bc79e4218680f9f4f3a4d4cc5da6117ffb70093e7aa0e9",
          "sha256": "dadc15568d278a97b4bc79e4218680f9f4f3a4d4cc5da6117ffb70093e7aa0e9"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/lr/blobs/sha256:8cb55dda590f5e3e42ee33b7b92e45db3c92f28036b271b0ca391e2a98afeda6",
          "sha256": "8cb55dda590f5e3e42ee33b7b92e45db3c92f28036b271b0ca391e2a98afeda6"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/lr/blobs/sha256:13dca68cb7edf7dacb30fb894688e9c6384b6e26cc39d47018f5a5baf2120cca",
          "sha256": "13dca68cb7edf7dacb30fb894688e9c6384b6e26cc39d47018f5a5baf2120cca"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/lr/blobs/sha256:0a4acf369b4f1056a98a7bc61daa685df1254a087087a5a528d34fc9d561ca39",
          "sha256": "0a4acf369b4f1056a98a7bc61daa685df1254a087087a5a528d34fc9d561ca39"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/lr/blobs/sha256:1b0e58ef6033c28d27113e53b22f28ac674a4f58d869a362dcdba5427068640a",
          "sha256": "1b0e58ef6033c28d27113e53b22f28ac674a4f58d869a362dcdba5427068640a"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/lr.rb",
  "ruby_source_checksum": {
    "sha256": "b10e8295472df3169383f7c361c87c6e7b195425e63b896b7c44dd8655af68f9"
  },
  "date_added": "2023-07-04T08:48:39-04:00",
  "readme": "## lr: list files, recursively\n\n`lr` is a new tool for generating file listings, which includes the\nbest features of `ls(1)`, `find(1)`, `stat(1)` and `du(1)`.\n\n`lr` has been tested on Linux 4.1, FreeBSD 10.2, OpenBSD 5.7,\nNetBSD 5.2.3, DragonFlyBSD 5.0, Mac OS X 10.10, OmniOS 5.11 and Cygwin 1.7.32.\nIt will likely work on other Unix-like systems with C99, but you'll\nneed to port `scan_filesystems` for `fstype` to work.\n\n## Screenshot\n\n![Screenshot of lr -AFGl -ovh](lr.png)\n\n## Benefits\n\nOver find:\n* friendly and logical C-style filter syntax\n* getopt is used, can mix filters and arguments in any order\n* can sort\n* compute directory sizes\n* can strip leading `./`\n* can do breadth first search\n\nOver ls:\n* sorts over all files, not per directory\n* copy & paste file names from the output since they are relative to pwd\n* ISO dates\n* powerful filters\n\n## Rosetta stone\n\n* `ls`: `lr -1 | column`\n* `find .`: `lr` (or `lr -U` for speed.)\n* `ls -l`: `lr -1l`\n* `ls -ltrc`: `lr -l1Aoc`\n* `find . -name '*.c'`: `lr -t 'name ~~ \"*.c\"'`\n* `find . -regex '.*c'`: `lr -t 'path =~ \"c$\"'`\n* `find -L /proc/*/fd -maxdepth 1 -type f -links 0 -printf '%b %p\\n'`:\n`lr -UL1 -t 'type == f && links == 0' -f '%b %p\\n' /proc/*/fd`\n* `find \"${@:-.}\" -name HEAD -execdir sh -c 'git rev-parse --resolve-git-dir . >/dev/null 2>/dev/null && pwd' ';'`: `lr -0U -t 'name == \"HEAD\"' \"$@\" | xe -0 -s 'cd ${1%/*} && git rev-parse --resolve-git-dir . >/dev/null && pwd; true' 2>/dev/null`\n* Filter list of files for existence: `xe lr -dQU <list`\n* replacement for who(1): `lr -om -t 'name =~ \"[0-9][0-9]*$\" && uid != 0' -f '%u\\t%p\\t%CY-%Cm-%Cd %CH:%CM\\n' /dev/pts /dev/tty*`\n* Find files with setuid or setgid: `lr -t 'mode | 06000' /usr/bin` or `lr -t 'mode = \"u+s\" || mode = \"g+s\"' /usr/bin`\n* Find files with non-umask permissions: `lr -t '!(mode = \"=rw,+X\")' -l`\n* Find broken symlinks: `lr -L -t 'type = l'`\n\n## Usage:\n\n\tlr [-0|-F|-l [-TA|-TC|-TM]|-S|-f FMT] [-B|-D] [-H|-L] [-1AGPQXdhsx] [-U|-W|-o ORD] [-e REGEX]* [-t TEST]* PATH...\n\nThe special path argument `-` makes `lr` read file names from standard\ninput, instead of traversing path.\n\n* `-0`: output filenames separated by NUL bytes.\n  Likewise, read input filenames separated by NUL bytes.\n* `-F`: output filenames and an indicator of their file type (`*/=>@|`).\n* `-l`: long output a la `ls -l` (implies `-Q`).\n* `-TA`: with `-l`, output atime.\n* `-TC`: with `-l`, output ctime.\n* `-TM`: with `-l`, output mtime (default).\n* `-S`: BSD stat(1)-inspired output (implies `-Q`).\n* `-f FMT`: custom formatting, see below.\n* `-B`: breadth first traversal.\n* `-D`: depth first traversal. `prune` does not work, but `entries`\n  and `total` are computed on the fly.\n* `-H`: only follow symlinks on command line.\n* `-L`: follow all symlinks.\n* `-1`: don't go below one level of directories.\n* `-A`: don't list files starting with a dot.\n* `-G`: colorize output to tty.  Use twice to force colorize.\n* `-X`: print OSC 8 hyperlinks to tty.  Use twice to force.\n* `-P`: quote file names using `$'...'` syntax.\n* `-Q`: shell quote file names (default for output to TTY).\n* `-d`: don't enter directories.\n* `-h`: print human readable size for `-l` (also `%s`).\n* `-s`: strip directory prefix passed on command line.\n* `-x`: don't enter other filesystems.\n* `-U`: don't sort results, print during traversal.\n* `-W`: sort results by name and print during traversal.\n* `-o ORD`: sort according to the string `ORD`, see below.\n* `-e REGEX`: only show files where basename matches `REGEX`.\n* `-t TEST`: only show files matching all `TEST`s, see below.\n\n## Output formatting:\n\n* `\\a`, `\\b`, `\\f`, `\\n`, `\\r`, `\\v`, `\\0` as in C.\n* `%%`: plain `%`.\n* `%s`: file size in bytes.\n* `%S`: file size, with human readable unit.\n* `%b`: file size in 512-byte blocks.\n* `%k`: file size in 1024-byte blocks.\n* `%d`: path depth.\n* `%D`: device number (`stat.st_dev`).\n* `%R`: device ID for special files (`stat.st_rdev`).\n* `%i`: inode number.\n* `%I`: one space character for every depth level.\n* `%p`: full path (`%P` if `-s`).\n* `%P`: full path without command line argument prefix.\n* `%l`: symlink target.\n* `%n`: number of hardlinks.\n* `%F`: file indicator type symbol (`*/=>@|`).\n* `%f`: file basename (everything after last `/`).\n* `%A-`, `%C-`, `%T-`: relative age for atime/ctime/mtime.\n* `%Ax`, `%Cx`, `%Tx`: result of `strftime` for `%x` on atime/ctime/mtime.\n* `%m`: octal file permissions.\n* `%M`: ls-style symbolic file permissions.\n* `%y`: ls-style symbolic file type (`bcdfls`).\n* `%g`: group name.\n* `%G`: numeric gid.\n* `%u`: user name.\n* `%U`: numeric uid.\n* `%e`: number of entries in directories.\n* `%t`: total size used by accepted files in directories (only with `-D`).\n* `%Y`: type of the filesystem the file resides on.\n* `%x`: Linux-only: a combination of: `#` for files with security capabilities, `+` for files with an ACL, `@` for files with other extended attributes.\n\n## Sort order\n\nSort order is string consisting of the following letters.\nUppercase letters reverse sorting.\nE.g. `Sn` sorts first by size, smallest last, and then by name (in\ncase sizes are equal).\n\nDefault: `n`.\n\n* `a`: atime.\n* `c`: ctime.\n* `d`: path depth.\n* `e`: file extension.\n* `f`: file basename.\n* `i`: inode number.\n* `m`: mtime.\n* `n`: file name.\n* `p`: directory name.\n* `s`: file size.\n* `t`: file type.  This sorts all directories before other files.\n* `v`: file name as version numbers (sorts \"2\" before \"10\").\n\n## Filter expressions\n\n`lr` filters are given by the following EBNF:\n\n\t<expr>     ::= <expr> || <expr>  -- disjunction\n\t             | <expr> && <expr>  -- conjunction\n\t             | <expr> ? <expr> : <expr>  -- ternary operator\n\t             | ! <expr>          -- negation\n\t             | ( <expr )\n\t             | <timeprop> <numop> <dur>\n\t             | <numprop> <numop> <num>\n\t             | <strprop> <strop> <str>\n\t             | <typetest>\n\t             | <modetest>\n\t             | prune             -- do not traverse into subdirectories\n\t             | print             -- always true value\n\t             | skip              -- always false value\n\t             | color <num>       -- always true value, override 256-color\n\n        <timeprop> ::= atime | ctime | mtime\n\t\n\t<numprop>  ::= depth | dev | entries | gid | inode\n\t             | links | mode | rdev | size | total | uid\n\t\n\t<numop>    ::= <= | < | >= | > | == | = | !=\n\n        <dur>      ::= \"./path\"          -- mtime of relative path\n                     | \"/path\"           -- mtime of absolute path\n                     | \"YYYY-MM-DD HH:MM:SS\"\n                     | \"YYYY-MM-DD\"      -- at midnight\n                     | \"HH:MM:SS\"        -- today\n                     | \"HH:MM\"           -- today\n                     | \"-[0-9]+d\"        -- n days ago at midnight\n                     | \"-[0-9]+h\"        -- n hours before now\n                     | \"-[0-9]+m\"        -- n minutes before now\n                     | \"-[0-9]+s\"        -- n seconds before now\n                     | [0-9]+            -- absolute epoch time\n\t\n\t<num>      ::= [0-9]+ ( c        -- *1\n\t                      | b        -- *512\n\t                      | k        -- *1024\n\t                      | M        -- *1024*1024\n\t                      | G        -- *1024*1024*1024\n\t                      | T )?     -- *1024*1024*1024*1024\n\t\n\t<strprop>  ::= fstype | group | name | path | target | user | xattr\n\t\n\t<strop>    ::= == | = | !=       -- string (in)equality\n\t             | ===    | !===     -- case insensitive string (in)equality\n\t             | ~~     | !~~      -- glob (fnmatch)\n\t             | ~~~    | !~~~     -- case insensitive glob (fnmatch)\n\t             | =~     | !=~ | !~ -- POSIX Extended Regular Expressions\n\t             | =~~    | !=~~     -- case insensitive POSIX Extended Regular Expressions\n\t\n\t<str>      ::= \" ([^\"] | \"\")+ \"  -- use \"\" for a single \" inside \"\n\t             | $[A-Za-z0-9_]     -- environment variable\n\n\t<typetest> ::= type ( == | = | != ) ( b | c | d | p | f | l )\n\n\t<modetest> ::= mode ( == | =     -- exact permissions\n\t                    | &          -- check if all bits of <octal> set\n\t                    | |          -- check if any bit of <octal> set\n\t                    ) <octal>\n\t             | mode = \"<chmod>\"  -- check if symbolic mode is satisfied\n\t\n\t<octal> ::= [0-7]+\n\n\t<chmod> ::= <clause> (, <clause>)+\n\n\t<clause> ::= [guoa]* [+-=] [rwxXstugo]*  -- see chmod(1)\n\n## EWONTFIX\n\nThe following features won't be implemented:\n\n* `-exec`: use `-0` and `xargs`\n  (or even better [xe](https://github.com/leahneukirchen/xe)).\n* columns: use `column`, `git-column` (supports colors), Plan 9 `mc`.\n  (e.g. `lr -1AGFs | git column --mode=dense --padding=2`)\n\n## \"Screenshots\"\n\nDefault output, sorted by name:\n\n```\n% lr\n.\n.git\n.git/HEAD\n.git/config\n[...]\nMakefile\nREADME.md\nlr.c\n```\n\nLong output format:\n\n```\n% lr -l\ndrwxrwxr-x 3 chris users   120 2015-10-27 13:56 ./\ndrwxrwxr-x 7 chris users   240 2015-10-27 13:56 .git/\n-rw-rw-r-- 1 chris users    23 2015-10-27 13:56 .git/HEAD\n-rw-rw-r-- 1 chris users   257 2015-10-27 13:56 .git/config\n[...]\n-rw-rw-r-- 1 chris users   297 2015-10-27 13:56 Makefile\n-rw-rw-r-- 1 chris users  5828 2015-10-27 13:56 README.md\n-rw-rw-r-- 1 chris users 27589 2015-10-27 13:56 lr.c\n```\n\nSimple test:\n\n```\n% lr -F -t 'type == d'\n./\n.git/\n.git/hooks/\n.git/info/\n.git/logs/\n.git/logs/refs/\n.git/logs/refs/heads/\n.git/logs/refs/remotes/\n.git/logs/refs/remotes/origin/\n.git/objects/\n.git/objects/info/\n.git/objects/pack/\n.git/refs/\n.git/refs/heads/\n.git/refs/remotes/\n.git/refs/remotes/origin/\n.git/refs/tags/\n```\n\nList regular files by size, largest first:\n\n```\n% lr -f '%S %f\\n' -1 -t 'type == f' -oS\n  27K lr.c\n 5.7K README.md\n  297 Makefile\n```\n\nList directory total sizes, indented:\n\n```\n% lr -D -t 'type == d' -f '%I%I%t %p\\n'\n172 .\n  132 .git\n    40 .git/hooks\n    4 .git/info\n    12 .git/logs\n      8 .git/logs/refs\n        4 .git/logs/refs/heads\n        4 .git/logs/refs/remotes\n          4 .git/logs/refs/remotes/origin\n    48 .git/objects\n      0 .git/objects/info\n      48 .git/objects/pack\n    8 .git/refs\n      4 .git/refs/heads\n      4 .git/refs/remotes\n        4 .git/refs/remotes/origin\n      0 .git/refs/tags\n```\n\nList all files, but print them in red if they match \"havoc\":\n\n```\n% lr -G -t 'name =~ \"havoc\" && color 160 || print'\n```\n\nDo not enter `.git` or `.hg` directories:\n\n```\n% lr -t 'name = \".git\" || name = \".hg\" ? prune : print' .\n```\n\n## Installation\n\nUse `make all` to build, `make install` to install relative to `PREFIX`\n(`/usr/local` by default).  The `DESTDIR` convention is respected.\nYou can also just copy the binary into your `PATH`.\n\n## Copyright\n\nCopyright (C) 2015-2023 Leah Neukirchen <purl.org/net/chneukirchen>\n\nLicensed under the terms of the MIT license, see lr.c."
}
