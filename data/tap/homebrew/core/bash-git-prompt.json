{
  "name": "bash-git-prompt",
  "full_name": "bash-git-prompt",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Informative, fancy bash prompt for Git users",
  "license": "BSD-2-Clause",
  "homepage": "https://github.com/magicmonty/bash-git-prompt",
  "versions": {
    "stable": "2.7.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/magicmonty/bash-git-prompt/archive/2.7.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "5e5fc6f5133b65760fede8050d4c3bc8edb8e78bc7ce26c16db442aa94b8a709"
    },
    "head": {
      "url": "https://github.com/magicmonty/bash-git-prompt.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/bash-git-prompt/blobs/sha256:aba8fdb7276afbd19020d92a907102912674172b4ff9d4883e349fd73fd69995",
          "sha256": "aba8fdb7276afbd19020d92a907102912674172b4ff9d4883e349fd73fd69995"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": "You should add the following to your .bashrc (or .bash_profile):\n  if [ -f \"$HOMEBREW_PREFIX/opt/bash-git-prompt/share/gitprompt.sh\" ]; then\n    __GIT_PROMPT_DIR=\"$HOMEBREW_PREFIX/opt/bash-git-prompt/share\"\n    source \"$HOMEBREW_PREFIX/opt/bash-git-prompt/share/gitprompt.sh\"\n  fi\n",
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "2706c66e8def3eeba4d9bf1adf66221c8ad70701",
  "ruby_source_path": "Formula/bash-git-prompt.rb",
  "ruby_source_checksum": {
    "sha256": "daa73fa86cabef4a3616c994b2f537d0d18c0cf10031db6bce890b35f60863cc"
  },
  "date_added": "2014-09-15T10:30:51+01:00",
  "readme": "# Informative git prompt for bash and fish\n\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/magicmonty/bash-git-prompt?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\nThis prompt is a port of the \"Informative git prompt for zsh\" which you can\nfind [here](https://github.com/olivierverdier/zsh-git-prompt)\n\nA ``bash`` prompt that displays information about the current git repository.\nIn particular the branch name, difference with remote branch, number of files\nstaged, changed, etc.\n\n`gitstatus.sh` and `git-prompt-help.sh` added by [AKS](http://github.com/aks).\n\n## Examples\n\nThe prompt may look like the following:\n\n![Example prompt](gitprompt.png)\n\n* ``(master↑3|✚1)``: on branch ``master``, ahead of remote by 3 commits, 1 file changed but not staged\n* ``(status|●2)``: on branch ``status``, 2 files staged\n* ``(master|✚7…)``: on branch ``master``, 7 files changed, some files untracked\n* ``(master|✖2✚3)``: on branch ``master``, 2 conflicts, 3 files changed\n* ``(master|⚑2)``: on branch ``master``, 2 stash entries\n* ``(experimental↓2↑3|✔)``: on branch ``experimental``; your branch has diverged by 3 commits, remote by 2 commits; the repository is otherwise clean\n* ``(:70c2952|✔)``: not on any branch; parent commit has hash ``70c2952``; the repository is otherwise clean\n\n##  Prompt Structure\n\nBy default, the general appearance of the prompt is::\n\n    (<branch> <upstream branch> <branch tracking>|<local status>)\n\nThe symbols are as follows:\n\n- Local Status Symbols\n  - ``✔``: repository clean\n  - ``●n``: there are ``n`` staged files\n  - ``✖n``: there are ``n`` files with merge conflicts\n  - ``✖-n``: there are ``n`` staged files waiting for removal\n  - ``✚n``: there are ``n`` changed but *unstaged* files\n  - ``…n``: there are ``n`` untracked files\n  - ``⚑n``: there are ``n`` stash entries\n- Upstream branch\n  - Shows the remote tracking branch\n  - Disabled by default\n  - Enable by setting `GIT_PROMPT_SHOW_UPSTREAM=1`\n- Branch Tracking Symbols\n  - ``↑n``: ahead of remote by ``n`` commits\n  - ``↓n``: behind remote by ``n`` commits\n  - ``↓m↑n``: branches diverged, other by ``m`` commits, yours by ``n`` commits\n  - ``L``: local branch, not remotely tracked\n- Branch Symbol:<br />\n  \tWhen the branch name starts with a colon ``:``, it means it's actually a hash, not a branch (although it should be pretty clear, unless you name your branches like hashes :-)\n\n## Installation\n\n### via [Homebrew][homebrew] on Mac OS X\n\n- Run `brew update`\n\n- Run `brew install bash-git-prompt` for the last stable release or `brew install --HEAD bash-git-prompt` for the\n   latest version directly from the repository\n\n- Now you can source the file in your `~/.bash_profile` as follows:\n\n```sh\nif [ -f \"$(brew --prefix)/opt/bash-git-prompt/share/gitprompt.sh\" ]; then\n  __GIT_PROMPT_DIR=$(brew --prefix)/opt/bash-git-prompt/share\n  GIT_PROMPT_ONLY_IN_REPO=1\n  source \"$(brew --prefix)/opt/bash-git-prompt/share/gitprompt.sh\"\nfi\n```\n\n### via Git clone\n\n- Clone this repository to your home directory.\n\n```sh\ngit clone https://github.com/magicmonty/bash-git-prompt.git ~/.bash-git-prompt --depth=1\n```\n\nAdd to the `~/.bashrc`:\n```\nif [ -f \"$HOME/.bash-git-prompt/gitprompt.sh\" ]; then\n    GIT_PROMPT_ONLY_IN_REPO=1\n    source $HOME/.bash-git-prompt/gitprompt.sh\nfi\n```\n\n### install for the fish shell\n\n- If you cloned the repo to a directory other then `~/.bash-git-prompt` , set `__GIT_PROMPT_DIR` in `~/.config/fish/config.fish`\n   to that path\n\n- To install as an option in the fish_config GUI\n\n```sh\nsudo install -m 666 gitprompt.fish /usr/share/fish/tools/web_config/sample_prompts/\nfish_config\n```\n   to install the bash-git-prompt as a choice under the prompt tab of the web config. Selecting this will copy it to\n   ~/.config/fish/functions/fish_prompt.fish\n\n- You can also do\n\n```sh\nmkdir -p ~/.config/fish/functions/\ncp gitprompt.fish ~/.config/fish/functions/fish_prompt.fish\n```\n   to overwrite the current prompt with the bash-git-prompt directly\n\n\n### All configs for .bashrc\n\n```sh\n\n# Set config variables first\nGIT_PROMPT_ONLY_IN_REPO=1\n\n# GIT_PROMPT_FETCH_REMOTE_STATUS=0   # uncomment to avoid fetching remote status\n# GIT_PROMPT_IGNORE_SUBMODULES=1 # uncomment to avoid searching for changed files in submodules\n# GIT_PROMPT_WITH_VIRTUAL_ENV=0 # uncomment to avoid setting virtual environment infos for node/python/conda environments\n# GIT_PROMPT_VIRTUAL_ENV_AFTER_PROMPT=1 # uncomment to place virtual environment infos between prompt and git status (instead of left to the prompt)\n\n# GIT_PROMPT_SHOW_UPSTREAM=1 # uncomment to show upstream tracking branch\n# GIT_PROMPT_SHOW_UNTRACKED_FILES=normal # can be no, normal or all; determines counting of untracked files\n\n# GIT_PROMPT_SHOW_CHANGED_FILES_COUNT=0 # uncomment to avoid printing the number of changed files\n\n# GIT_PROMPT_STATUS_COMMAND=gitstatus_pre-1.7.10.sh # uncomment to support Git older than 1.7.10\n\n# GIT_PROMPT_START=...    # uncomment for custom prompt start sequence\n# GIT_PROMPT_END=...      # uncomment for custom prompt end sequence\n\n# as last entry source the gitprompt script\n# GIT_PROMPT_THEME=Custom # use custom theme specified in file GIT_PROMPT_THEME_FILE (default ~/.git-prompt-colors.sh)\n# GIT_PROMPT_THEME_FILE=~/.git-prompt-colors.sh\n# GIT_PROMPT_THEME=Solarized # use theme optimized for solarized color scheme\nsource ~/.bash-git-prompt/gitprompt.sh\n```\n\nYou can set the `GIT_PROMPT_SHOW_UNTRACKED_FILES` variable to `no` or `normal` to speed things up if you have lots of\nuntracked files in your repository. This can be the case for build systems that put their build artifacts in\nthe subdirectory structure of the git repository. Setting it to `all` will count all untracked files, including files\nlisted in .gitignore.\n\n- `cd` to a git repository and test it!\n\n#### Themes\n\nThe most settings are now stored in theme files. To select a theme, set the variable `GIT_PROMPT_THEME` to the name\nof the theme located in `<INSTALLDIR>/themes` without the extension `.bgptheme` like this:\n\n```sh\nGIT_PROMPT_THEME=Solarized\n```\n\nIf you set `GIT_PROMPT_THEME` to `Custom`, then the `.git-prompt-colors.sh` in the home directory will be used.\nThis file can now be generated with the command `git_prompt_make_custom_theme [<Name of base theme>]`. If the name of\nthe base theme is ommitted or the theme file is not found, then the Default theme is used. If you have already a custom\n`.git-prompt-colors.sh` in your home directory, an error message will be shown.\n\nYou can display a list of available themes with `git_prompt_list_themes` (the current theme is highlighted)\n\n**If you omit the `GIT_PROMPT_THEME` variable, the Default theme is used or, if you have a custom `.git-prompt-colors.sh`\nin your home directory, then the Custom theme is used.**\n\n##### Ubuntu Themes\n\nUbuntu requires a bit more spacing for some characters so it has its own themes.\n\nThese can be listed with `git_prompt_list_themes`:\n```sh\ngit_prompt_list_themes | grep Ubuntu\n```\n\n##### Theme structure\n\nPlease see the ``Custom.bgptemplate`` in the ``themes`` subdirectory of the installation directory!\n\nA theme consists of a function `override_git_prompt_colors()` which defines at least the variable `GIT_PROMPT_THEME_NAME`\n with a unique theme identifier and a call to the function `reload_git_prompt_colors <ThemeName>` like follows:\n\n```sh\noverride_git_prompt_colors() {\n  GIT_PROMPT_THEME_NAME=\"Custom\" # needed for reload optimization, should be unique\n\n  # Place your overrides here\n  ...\n}\n\n# load the theme\nreload_git_prompt_colors \"Custom\"\n```\n\nThe advantage of this approach is, that you only need to specify the parts, that are different to the Default theme.\n\nIf you use a custom theme in `.git-prompt-colors.sh`, please set `GIT_PROMPT_THEME_NAME=\"Custom\"`.\n\n#### Further customizations\n\n- You can define `GIT_PROMPT_START` and `GIT_PROMPT_END` to tweak your prompt.\n\n- The default colors are defined within `prompt-colors.sh`, which is sourced by\n  `gitprompt.sh`.  The colors used for various git status are defined in\n  `themes/Default.bgptheme`.  Both of these files may be overridden by copying\n  them to $HOME with a `.` prefix.  They can also be placed in `$HOME/lib`\n  without the leading `.`.  The defaults are the original files in the\n  `~/.bash-git-prompt` directory.\n\n- You can use `GIT_PROMPT_START_USER`, `GIT_PROMPT_START_ROOT`,\n  `GIT_PROMPT_END_USER` and `GIT_PROMPT_END_ROOT` in your\n  `.git-prompt-colors.sh` to tweak your prompt. You can also override the start\n  and end of the prompt by setting `GIT_PROMPT_START` and `GIT_PROMPT_END`\n  before you source the `gitprompt.sh`.\n\n- The current git repo information is obtained by the script `gitstatus.sh`.\n- You can define `prompt_callback` function to tweak your prompt dynamically.\n\n```sh\nfunction prompt_callback {\n    if [ `jobs | wc -l` -ne 0 ]; then\n        echo -n \" jobs:\\j\"\n    fi\n}\n```\n\n- There are two helper functions that can be used within `prompt_callback`:\n    - `gp_set_window_title <String>` - sets the window title to the given string (should work for XTerm type terminals like in OS X or Ubuntu)\n    - `gp_truncate_pwd` - a function that returns the current PWD truncated to fit the current terminal width. Specify the length to truncate to as a parameter. Otherwise it defaults to 1/3 of the terminal width.\n\n- If you want to show the git prompt only if you are in a git repository you\n  can set `GIT_PROMPT_ONLY_IN_REPO=1` before sourcing the gitprompt script\n\n- You can show an abbreviated `username/repo` in the prompt by setting `GIT_PROMPT_WITH_USERNAME_AND_REPO=1` and setting the placeholder `_USERNAME_REPO_` in your `GIT_PROMPT_PREFIX`. You can also add a `GIT_PROMPT_USERNAME_REPO_SEPARATOR=\" | \"` so the `username/repo` is nicely separated if there is a remote and if there is no remote, neither the username/repo part nor the separator will be shown. See the theme `Single_line_username_repo.bgptheme` for an example.\n\n\n- There is an indicator at the start of the prompt, which shows\n  the result of the last executed command by if you put the placeholder\n  `_LAST_COMMAND_INDICATOR_` in any of the prompt templates.\n  It is now by default activated in the default theme:\n\n```sh\n  GIT_PROMPT_START_USER=\"_LAST_COMMAND_INDICATOR_ ${Yellow}${PathShort}${ResetColor}\"\n  GIT_PROMPT_START_ROOT=\"_LAST_COMMAND_INDICATOR_ ${GIT_PROMPT_START_USER}\"\n```\n\n  If you want to display the exit code too, you can use the placeholder\n  ``_LAST_COMMAND_STATE_`` in ``GIT_PROMPT_COMMAND_OK`` or ``GIT_PROMPT_COMMAND_FAIL``\n  in your ``.git-prompt-colors.sh``:\n\n```sh\nGIT_PROMPT_COMMAND_OK=\"${Green}✔ \" # displays as ✔\nGIT_PROMPT_COMMAND_FAIL=\"${Red}✘-_LAST_COMMAND_STATE_ \" # displays as ✘-1 for exit code 1\n```\n\n- It is now possible to disable the fetching of the remote repository either\n  globally by setting ``GIT_PROMPT_FETCH_REMOTE_STATUS=0`` in your .bashrc or\n  on a per repository basis by creating a file named ``.bash-git-rc`` with the\n  content ``FETCH_REMOTE_STATUS=0`` in the root of your git repository.\n\n- You can also ignore a repository completely by creating a file named ``.bash-git-rc`` with the\n  content ``GIT_PROMPT_IGNORE=1`` in the root of your git repository.\n\n- If you have a repository with many untracked files, the git prompt can become very slow.\n  You can disable the display of untracked files on a per repository basis by setting\n  ``GIT_PROMPT_SHOW_UNTRACKED_FILES=no`` in your ``.bash-git-rc`` in the repository or\n  by disabling it globally in your ``.bashrc``\n\n- If you have a repository with a deep submodule hierarchy, this can also affect performance.\n  You can disable searching for changes in submodules on a per repository basis by setting\n  ``GIT_PROMPT_IGNORE_SUBMODULES=1`` in your ``.bash-git-rc``\n\n- You can get help on the git prompt with the function ``git_prompt_help``.\n  Examples are available with ``git_prompt_examples``.\n  A list of all available named colors is available with `git_prompt_color_samples`\n\n- If you make any changes to any file that is sourced by `gitprompt.sh`, you\n  should run this command, so that the next prompt update will find all the\n  files and source them anew.\n\n```sh\ngit_prompt_reset\n```\n\n- You can disable/enable gitprompt by running:\n\n```sh\ngit_prompt_toggle\n```\n\n\n**Enjoy!**\n\n## Alternative RPM Install\n\nThis project ships an RPM spec to simplify installation on RHEL and\nclones. If you wish to install from RPM, you may first build the RPM\nfrom scratch by following this procedure:\n* Clone this repository and tag the release with a version number\n\n````sh\n    git tag -a -m \"Tag release 1.1\" 1.1\n````\n\n* Run the following command to create a tarball:\n\n````sh\n    VER=$(git describe)\n    # replace dash with underscore to work around\n    # rpmbuild does not allow dash in version string\n    VER=${VER//\\-/_}\n    git archive                                \\\n        --format tar                           \\\n        --prefix=bash-git-prompt-${VER}/       \\\n        HEAD                                   \\\n        --  *.sh                               \\\n            *.fish                             \\\n            README.md                          \\\n            themes                             \\\n      > bash-git-prompt-${VER}.tar\n    mkdir -p /tmp/bash-git-prompt-${VER}\n    sed \"s/Version:.*/Version:        ${VER}/\"          \\\n        bash-git-prompt.spec                            \\\n      > /tmp/bash-git-prompt-${VER}/bash-git-prompt.spec\n    OLDDIR=$(pwd)\n    cd /tmp\n    tar -uf ${OLDDIR}/bash-git-prompt-${VER}.tar      \\\n            bash-git-prompt-${VER}/bash-git-prompt.spec\n    cd ${OLDDIR}\n    gzip bash-git-prompt-${VER}.tar\n    mv bash-git-prompt-${VER}.tar.gz bash-git-prompt-${VER}.tgz\n````\n\n* Log into an RHEL or clones host and run:\n\n````sh\nrpmbuild -ta bash-git-prompt-xxx.tar.gz\n````\nThen you may publish or install the rpm from \"~/rpmbuild/RPMS/noarch\".\n\n## License\nThis code is under the [BSD 2 Clause (NetBSD) license][license].\n\n## Who Are You?\nThe current maintainer of the original bash-git-prompt is [Martin Gondermann][magicmonty].\n\n## Contributing\nIf you want to contribute you can look for issues with the label [up-for-grabs][upforgrabs].\nPlease leave a comment on the issue, that you want to fix it, so others know, the labels are \"taken\".\n\nPull requests are welcome. I will check them and merge them, if I think they help the project.\n\n## Similar projects\nhttps://github.com/ohmybash/oh-my-bash\n\n## Donations\nI accept tips through [Flattr][flattr].\n\n[![Flattr](http://api.flattr.com/button/flattr-badge-large.png)](https://flattr.com/submit/auto?user_id=magicmonty&url=https%3A%2F%2Fgithub.com%2Fmagicmonty%2Fbash-git-prompt)\n\n[blog post]: http://sebastiancelis.com/2009/nov/16/zsh-prompt-git-users/\n[tip]:https://www.gittip.com/magicmonty/\n[magicmonty]: http://blog.pagansoft.de/pages/about.html\n[license]:https://github.com/magicmonty/bash-git-prompt/tree/master/LICENSE.txt\n[flattr]: https://flattr.com/submit/auto?user_id=magicmonty&url=https%3A%2F%2Fgithub.com%2Fmagicmonty%2Fbash-git-prompt\n[homebrew]: http://brew.sh/\n[upforgrabs]: https://github.com/magicmonty/bash-git-prompt/labels/up-for-grabs"
}
