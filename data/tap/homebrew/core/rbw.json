{
  "name": "rbw",
  "full_name": "rbw",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Unofficial Bitwarden CLI client",
  "license": "MIT",
  "homepage": "https://github.com/doy/rbw",
  "versions": {
    "stable": "1.8.3",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/doy/rbw/archive/refs/tags/1.8.3.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "fc04572a7215f89de018621c003c38c0400befd02e16efe8a00677d88ebe3c35"
    },
    "head": {
      "url": "https://github.com/doy/rbw.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rbw/blobs/sha256:78fd9b44cb21072e127a576e5c9b63439db314aa3f728bc72962ff0d88cf6b37",
          "sha256": "78fd9b44cb21072e127a576e5c9b63439db314aa3f728bc72962ff0d88cf6b37"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rbw/blobs/sha256:a94805df40043b4ca6ebd656fa56e6cf7ab5bc6b314ca3a10abc969c936e0941",
          "sha256": "a94805df40043b4ca6ebd656fa56e6cf7ab5bc6b314ca3a10abc969c936e0941"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rbw/blobs/sha256:9553694afb068155c24633827e5d7723df11935e6b0d69c5de63212b69a7e37c",
          "sha256": "9553694afb068155c24633827e5d7723df11935e6b0d69c5de63212b69a7e37c"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rbw/blobs/sha256:b6b87134a462a889b6935f5c59a262c4d624d0d076e0f6fcf25c467b13b415a8",
          "sha256": "b6b87134a462a889b6935f5c59a262c4d624d0d076e0f6fcf25c467b13b415a8"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rbw/blobs/sha256:c7439f1649f77598556647738ff2c366b65901b58a35b212507ce2d413fda90e",
          "sha256": "c7439f1649f77598556647738ff2c366b65901b58a35b212507ce2d413fda90e"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rbw/blobs/sha256:d39d862eaee12f64a7c434ec43df2480816e8fa4fcd3ad6a50b1694798cf4ad9",
          "sha256": "d39d862eaee12f64a7c434ec43df2480816e8fa4fcd3ad6a50b1694798cf4ad9"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rbw/blobs/sha256:0d98962a383cb80cd37720ddb32cd66013a600cc3d2c1d066d8e0722355631ad",
          "sha256": "0d98962a383cb80cd37720ddb32cd66013a600cc3d2c1d066d8e0722355631ad"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [
    "pinentry"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/rbw.rb",
  "ruby_source_checksum": {
    "sha256": "f760f53ffcac94bef0c8d4f5915d700b8eb04d123ec47feb6dbd3a7a92a265d5"
  },
  "date_added": "2021-10-14T08:53:21+00:00",
  "readme": "# rbw\n\nThis is an unofficial command line client for\n[Bitwarden](https://bitwarden.com/). Although it does come with its own\n[command line client](https://help.bitwarden.com/article/cli/), this client is\nlimited by being stateless - to use it, you're required to manually lock and\nunlock the client, and pass the temporary keys around in environment variables,\nwhich makes it very difficult to use. This client avoids this problem by\nmaintaining a background process which is able to hold the keys in memory,\nsimilar to the way that `ssh-agent` or `gpg-agent` work. This allows the client\nto be used in a much simpler way, with the background agent taking care of\nmaintaining the necessary state.\n\n## Maintenance\n\nI consider `rbw` to be essentially feature-complete for me at this point. While\nI still use it on a daily basis, and will continue to fix regressions as they\noccur, I am unlikely to spend time implementing new features on my own. If you\nwould like to see new functionality in `rbw`, I am more than happy to review\nand merge pull requests implementing those features.\n\n## Installation\n\n### Arch Linux\n\n`rbw` is available in the [community\nrepository](https://archlinux.org/packages/community/x86_64/rbw/).\nAlternatively, you can install\n[`rbw-git`](https://aur.archlinux.org/packages/rbw-git/) from the AUR, which\nwill always build from the latest master commit.\n\n### Debian/Ubuntu\n\nYou can download a Debian package from\n[https://git.tozt.net/rbw/releases/deb/\n](https://git.tozt.net/rbw/releases/deb/). The packages are signed by\n[`minisign`](https://github.com/jedisct1/minisign), and can be verified using\nthe public key `RWTM0AZ5RpROOfAIWx1HvYQ6pw1+FKwN6526UFTKNImP/Hz3ynCFst3r`.\n\n### Alpine\n\n`rbw` is available in the [testing repository](https://pkgs.alpinelinux.org/packages?name=rbw).\nIf you are not using the `edge` version of alpine you have to [enable the repository manually](https://wiki.alpinelinux.org/wiki/Repositories#Testing).\n\n### Other\n\nWith a working Rust installation, `rbw` can be installed via `cargo install\nrbw`. This requires that the\n[`pinentry`](https://www.gnupg.org/related_software/pinentry/index.en.html)\nprogram is installed (to display password prompts).\n\n## Configuration\n\nConfiguration options are set using the `rbw config` command. Available\nconfiguration options:\n\n* `email`: The email address to use as the account name when logging into the\n  Bitwarden server. Required.\n* `base_url`: The URL of the Bitwarden server to use. Defaults to the official\n  server at `https://api.bitwarden.com/` if unset.\n* `identity_url`: The URL of the Bitwarden identity server to use. If unset,\n  will use the `/identity` path on the configured `base_url`, or\n  `https://identity.bitwarden.com/` if no `base_url` is set.\n* `notifications_url`: The URL of the Bitwarden notifications server to use.\n  If unset, will use the `/notifications` path on the configured `base_url`,\n  or `https://notifications.bitwarden.com/` if no `base_url` is set.\n* `lock_timeout`: The number of seconds to keep the master keys in memory for\n  before requiring the password to be entered again. Defaults to `3600` (one\n  hour).\n* `sync_interval`: `rbw` will automatically sync the database from the server\n  at an interval of this many seconds, while the agent is running. Setting\n  this value to `0` disables this behavior. Defaults to `3600` (one hour).\n* `pinentry`: The\n  [pinentry](https://www.gnupg.org/related_software/pinentry/index.html)\n  executable to use. Defaults to `pinentry`.\n\n## Usage\n\nCommands can generally be used directly, and will handle logging in or\nunlocking as necessary. For instance, running `rbw ls` will run `rbw unlock` to\nunlock the password database before generating the list of entries (but will\nnot attempt to log in to the server), `rbw sync` will automatically run `rbw\nlogin` to log in to the server before downloading the password database (but\nwill not unlock the database), and `rbw add` will do both.\n\nLogging into the server and unlocking the database will only be done as\nnecessary, so running `rbw login` when you are already logged in will do\nnothing, and similarly for `rbw unlock`. If necessary, you can explicitly log\nout by running `rbw purge`, and you can explicitly lock the database by running\n`rbw lock` or `rbw stop-agent`.\n\n`rbw help` can be used to get more information about the available\nfunctionality.\n\nRun `rbw get <name>` to get your passwords. If you also want to get the username\nor the note associated, you can use the flag `--full`. You can also use the flag\n`--field={field}` to get whatever default or custom field you want. The `--raw`\nflag will show the output as JSON.\n\n*Note to users of the official Bitwarden server (at bitwarden.com)*: The\nofficial server has a tendency to detect command line traffic as bot traffic\n(see [this issue](https://github.com/bitwarden/cli/issues/383) for details). In\norder to use `rbw` with the official Bitwarden server, you will need to first\nrun `rbw register` to register each device using `rbw` with the Bitwarden\nserver. This will prompt you for your personal API key which you can find using\nthe instructions [here](https://bitwarden.com/help/article/personal-api-key/).\n\n## Related projects\n\n* [rofi-rbw](https://github.com/fdw/rofi-rbw): A rofi frontend for Bitwarden\n* [bw-ssh](https://framagit.org/Glandos/bw-ssh/): Manage SSH key passphrases in Bitwarden"
}
