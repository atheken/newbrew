{
  "name": "vert",
  "full_name": "vert",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Command-line version testing",
  "license": "MIT",
  "homepage": "https://github.com/Masterminds/vert",
  "versions": {
    "stable": "0.1.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/Masterminds/vert/archive/v0.1.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "96e22de4c03c0a5ae1afb26c717f211c85dd74c8b7a9605ff525c87e66d19007"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vert/blobs/sha256:ca2bb8a7baed5c1492df0b25d59fe36c64322eafd1e88e68b6c8c59461ecf392",
          "sha256": "ca2bb8a7baed5c1492df0b25d59fe36c64322eafd1e88e68b6c8c59461ecf392"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vert/blobs/sha256:fefcb555229fd32ff09eba5ae165b7c94900c062d495af82535eb2ce4cc0ea57",
          "sha256": "fefcb555229fd32ff09eba5ae165b7c94900c062d495af82535eb2ce4cc0ea57"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vert/blobs/sha256:850d7a05d18ea7a91664f0e520c7c9c8db83611eab597da8c71d1c35c3103264",
          "sha256": "850d7a05d18ea7a91664f0e520c7c9c8db83611eab597da8c71d1c35c3103264"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vert/blobs/sha256:197d3e5dd45083a371c761a33654937bf1c61bd94ba8d1ef063090e8d90a8b62",
          "sha256": "197d3e5dd45083a371c761a33654937bf1c61bd94ba8d1ef063090e8d90a8b62"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vert/blobs/sha256:fe4638da084954ff52f94c69318502808134ab73d84f1acac44bb62d3922af5c",
          "sha256": "fe4638da084954ff52f94c69318502808134ab73d84f1acac44bb62d3922af5c"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vert/blobs/sha256:a2fbb031b72d6b4524dc31add5536acef1fdb913c5db28240bd4352c107da638",
          "sha256": "a2fbb031b72d6b4524dc31add5536acef1fdb913c5db28240bd4352c107da638"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vert/blobs/sha256:b7c63c671335e19afca83f08091a987c35576eb4cb94f1d7b00490d1448f3e77",
          "sha256": "b7c63c671335e19afca83f08091a987c35576eb4cb94f1d7b00490d1448f3e77"
        },
        "sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vert/blobs/sha256:e189a592a062ef9e2cc19506f99272ffc9f97f3e529a54eddd7287f0c9574935",
          "sha256": "e189a592a062ef9e2cc19506f99272ffc9f97f3e529a54eddd7287f0c9574935"
        },
        "el_capitan": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vert/blobs/sha256:534043c69cbd56a22d656ba873e180e628b3a0ace433d8f020b886212afa050e",
          "sha256": "534043c69cbd56a22d656ba873e180e628b3a0ace433d8f020b886212afa050e"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/vert/blobs/sha256:ed8cfcf0ce2cb0fcf0ad6bccea62e3726009131681e68c85e60d88b9135d10b6",
          "sha256": "ed8cfcf0ce2cb0fcf0ad6bccea62e3726009131681e68c85e60d88b9135d10b6"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "dep",
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": true,
  "disable_date": "2022-09-14",
  "disable_reason": "unmaintained",
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/vert.rb",
  "ruby_source_checksum": {
    "sha256": "d0a91b39de265087aec22a10372a7e18d2e5a27bcedb52cf2c6351897fb3c5c6"
  },
  "date_added": "2017-12-01T09:18:37-08:00",
  "readme": "# vert: A command-line version comparison tool\n[![Stability: Active](https://masterminds.github.io/stability/active.svg)](https://masterminds.github.io/stability/active.html)\n[![Build Status](https://travis-ci.org/Masterminds/vert.svg?branch=master)](https://travis-ci.org/Masterminds/vert)\n\n\nvert (Version Tester) is a simple command line tool for comparing two or\nmore versions, or testing versions against fuzzy version rules.\n\n## Basic Usage\n\nVert takes at least two arguments: A base version, and one or more\nversions to compare to the base. The base version is special, in that it\ncan be a fuzzy version specification rather than an exact version.\n\n```\n$ vert 1.0.0 1.0.0\n1.0.0\n$ echo $?\n0\n```\n\nWhen `vert` runs, it will print a normalized string of any version that\nmatches, and then will set the exit code to the number of version match\nfailures that it saw.\n\n`vert` understands SemVer v2 versions, so the following will also pass:\n\n```\n$ vert v1.0.0 1\n1.0.0\n$ echo $?\n0\n```\n\nThere are three things to note:\n\n- A leading `v` is ignored.\n- Numbers are expanded to a full SemVer string, thus `1` is expanded to\n  `1.0.0` and `1.1` is expaneded to `1.1.0`\n- The output is normalized to the form `X.Y.Z[-PRERELEASE][+BUILD]`\n\nA failed comparison looks like this:\n\n```\n$ vert 1.0.0 1.2.0\n$ echo $?\n1\n```\n\nFailed version comparisons to not print any text unless the given base\nversion is malformed:\n\n```\n$ vert 1.zoo.cheese 1.1.1\nCould not parse constraint 1.zoo.cheese\n```\n\nBase versions can be fuzzy:\n\n- `vert \">1.0\" 1.1`\n- `vert \"^2\" 2.1.3`\n- `vert \">1.1.2,<1.3.4\" 1.2`\n\nAnd `vert` understands alpha/beta markers:\n\n```\nvert \">1.0.0-alpha.1\" 1.0.0-beta.1\n1.0.0-beta.1\n```\n\nMultiple versions can be compared at once, and using the `-s` flag, you\ncan even sort the output:\n\n```\n$ vert ^1 1.1.1 1.0.1 1.2.3 1.0.2 0.9 2.0\n1.1.1\n1.0.1\n1.2.3\n1.0.2\n$ echo $?\n2\n```\n\nIn the above, we asked vert for all of the version in the `1.X.Y` range\n(`^1`), and then gave it a list of versions, including some outside of\nthat range.\n\n`vert` returned a list of versions that match. Via the return code, we\ncan see that two failed to match. To see which failed, we can use the\n`-f` flag:\n\n```\n$ vert -f ^1 1.1.1 1.0.1 1.2.3 1.0.2 0.9 2.0\n0.9.0\n2.0.0\n```\n\nWe can sort output using the `-s` flag:\n\n```\nvert -s ^1 1.1.1 1.0.1 1.2.3 1.0.2 0.9 2.0\n1.0.1\n1.0.2\n1.1.1\n1.2.3\n```\n\nFinally, `vert` can transform `git describe` versions into SemVer,\nassuming the Git tags are SemVer:\n\n```\n$ vert -g ^1 $(git describe --tags)\n1.0.1+32.fef45\n```\n\nIn the future, we'd like to add more transformations. If you have any\nideas, please let us know in the issue queue.\n\n## Installation\n\nAssuming you have make, [Go](http://golang.org) version 1.5.1 or later and\n[dep](https://github.com/golang/dep), you can simply run `make`:\n\n```\n$ make all\ndep ensure\ndep status\nPROJECT                        CONSTRAINT  VERSION  REVISION  LATEST   PKGS USED\ngithub.com/Masterminds/semver  ^1.0.0      v1.4.0   15d8430   15d8430  1\ngithub.com/urfave/cli          ^1.0.0      v1.20.0  cfb3883   cfb3883  1\ngo test .\nok  \tgithub.com/Masterminds/vert\t0.006s\ngo build -o vert vert.go\ninstall -d /usr/local/bin/\ninstall -m 755 ./vert /usr/local/bin/vert\n```\n\nThis will install into `/usr/local/bin/vert`."
}
