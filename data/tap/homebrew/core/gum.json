{
  "name": "gum",
  "full_name": "gum",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Tool for glamorous shell scripts",
  "license": "MIT",
  "homepage": "https://github.com/charmbracelet/gum",
  "versions": {
    "stable": "0.11.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/charmbracelet/gum/archive/v0.11.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "51c715634c0b9c690874d1a4c42f5057797585353d8af3d9f8d86ed2d216c250"
    },
    "head": {
      "url": "https://github.com/charmbracelet/gum.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gum/blobs/sha256:4b1db2205018f5fc41ca20af214a612dc62634c0c61e7319a3ebc3c6cb0c453a",
          "sha256": "4b1db2205018f5fc41ca20af214a612dc62634c0c61e7319a3ebc3c6cb0c453a"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gum/blobs/sha256:4b1db2205018f5fc41ca20af214a612dc62634c0c61e7319a3ebc3c6cb0c453a",
          "sha256": "4b1db2205018f5fc41ca20af214a612dc62634c0c61e7319a3ebc3c6cb0c453a"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gum/blobs/sha256:69dcc08e6af7d63cd9fb280c102b831be2f9c31bc5b6829d965bd44a451805bb",
          "sha256": "69dcc08e6af7d63cd9fb280c102b831be2f9c31bc5b6829d965bd44a451805bb"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gum/blobs/sha256:6af2bf3b2d7f66e200c2b553c828bd3b913cd8b6c34036cfd126a2d3e75d41c9",
          "sha256": "6af2bf3b2d7f66e200c2b553c828bd3b913cd8b6c34036cfd126a2d3e75d41c9"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gum/blobs/sha256:6af2bf3b2d7f66e200c2b553c828bd3b913cd8b6c34036cfd126a2d3e75d41c9",
          "sha256": "6af2bf3b2d7f66e200c2b553c828bd3b913cd8b6c34036cfd126a2d3e75d41c9"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gum/blobs/sha256:6af2bf3b2d7f66e200c2b553c828bd3b913cd8b6c34036cfd126a2d3e75d41c9",
          "sha256": "6af2bf3b2d7f66e200c2b553c828bd3b913cd8b6c34036cfd126a2d3e75d41c9"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gum/blobs/sha256:26e6aff009fad33922da529846d3c081953fe1ca216fd2acc3ee97faed64a744",
          "sha256": "26e6aff009fad33922da529846d3c081953fe1ca216fd2acc3ee97faed64a744"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/gum.rb",
  "ruby_source_checksum": {
    "sha256": "9391711b85b5d24862fb98dab0998ee196431749de6724482b94eec8288bde14"
  },
  "date_added": "2022-07-31T15:41:06+00:00",
  "readme": "Gum\n===\n\n<p>\n    <a href=\"https://stuff.charm.sh/gum/nutritional-information.png\" target=\"_blank\"><img src=\"https://stuff.charm.sh/gum/gum.png\" alt=\"Gum Image\" width=\"450\" /></a>\n    <br><br>\n    <a href=\"https://github.com/charmbracelet/gum/releases\"><img src=\"https://img.shields.io/github/release/charmbracelet/gum.svg\" alt=\"Latest Release\"></a>\n    <a href=\"https://pkg.go.dev/github.com/charmbracelet/gum?tab=doc\"><img src=\"https://godoc.org/github.com/golang/gddo?status.svg\" alt=\"Go Docs\"></a>\n    <a href=\"https://github.com/charmbracelet/gum/actions\"><img src=\"https://github.com/charmbracelet/gum/workflows/build/badge.svg\" alt=\"Build Status\"></a>\n</p>\n\nA tool for glamorous shell scripts. Leverage the power of\n[Bubbles](https://github.com/charmbracelet/bubbles) and [Lip\nGloss](https://github.com/charmbracelet/lipgloss) in your scripts and aliases\nwithout writing any Go code!\n\n<img alt=\"Shell running the ./demo.sh script\" width=\"600\" src=\"https://stuff.charm.sh/gum/demo.gif\">\n\nThe above example is running from a single shell script ([source](./examples/demo.sh)).\n\n## Tutorial\n\nGum provides highly configurable, ready-to-use utilities to help you write\nuseful shell scripts and dotfiles aliases with just a few lines of code.\n\nLet's build a simple script to help you write [Conventional\nCommits](https://www.conventionalcommits.org/en/v1.0.0/#summary) for your\ndotfiles.\n\nStart with a `#!/bin/sh`.\n```bash\n#!/bin/sh\n```\n\nAsk for the commit type with `gum choose`:\n\n```bash\ngum choose \"fix\" \"feat\" \"docs\" \"style\" \"refactor\" \"test\" \"chore\" \"revert\"\n```\n\n> Tip: this command itself will print to `stdout` which is not all that useful.\nTo make use of the command later on you can save the stdout to a `$VARIABLE` or\n`file.txt`.\n\nPrompt for an (optional) scope for the commit:\n\n```bash\ngum input --placeholder \"scope\"\n```\n\nPrompt for a commit message:\n\n```bash\ngum input --placeholder \"Summary of this change\"\n```\n\nPrompt for a detailed (multi-line) explanation of the changes:\n\n```bash\ngum write --placeholder \"Details of this change (CTRL+D to finish)\"\n```\n\nPrompt for a confirmation before committing:\n> `gum confirm` exits with status `0` if confirmed and status `1` if cancelled.\n\n```bash\ngum confirm \"Commit changes?\" && git commit -m \"$SUMMARY\" -m \"$DESCRIPTION\"\n```\n\nPutting it all together...\n\n```bash\n#!/bin/sh\nTYPE=$(gum choose \"fix\" \"feat\" \"docs\" \"style\" \"refactor\" \"test\" \"chore\" \"revert\")\nSCOPE=$(gum input --placeholder \"scope\")\n\n# Since the scope is optional, wrap it in parentheses if it has a value.\ntest -n \"$SCOPE\" && SCOPE=\"($SCOPE)\"\n\n# Pre-populate the input with the type(scope): so that the user may change it\nSUMMARY=$(gum input --value \"$TYPE$SCOPE: \" --placeholder \"Summary of this change\")\nDESCRIPTION=$(gum write --placeholder \"Details of this change (CTRL+D to finish)\")\n\n# Commit these changes\ngum confirm \"Commit changes?\" && git commit -m \"$SUMMARY\" -m \"$DESCRIPTION\"\n```\n\n<img alt=\"Running the ./examples/commit.sh script to commit to git\" width=\"600\" src=\"https://stuff.charm.sh/gum/commit_2.gif\">\n\n## Installation\n\nUse a package manager:\n\n```bash\n# macOS or Linux\nbrew install gum\n\n# Arch Linux (btw)\npacman -S gum\n\n# Nix\nnix-env -iA nixpkgs.gum\n# Or, with flakes\nnix run \"github:charmbracelet/gum\" -- --help\n\n# Debian/Ubuntu\nsudo mkdir -p /etc/apt/keyrings\ncurl -fsSL https://repo.charm.sh/apt/gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/charm.gpg\necho \"deb [signed-by=/etc/apt/keyrings/charm.gpg] https://repo.charm.sh/apt/ * *\" | sudo tee /etc/apt/sources.list.d/charm.list\nsudo apt update && sudo apt install gum\n\n# Fedora/RHEL\necho '[charm]\nname=Charm\nbaseurl=https://repo.charm.sh/yum/\nenabled=1\ngpgcheck=1\ngpgkey=https://repo.charm.sh/yum/gpg.key' | sudo tee /etc/yum.repos.d/charm.repo\nsudo yum install gum\n\n# Alpine\napk add gum\n\n# Android (via termux)\npkg install gum\n\n# Windows (via WinGet or Scoop)\nwinget install charmbracelet.gum\nscoop install charm-gum\n```\n\nOr download it:\n\n* [Packages][releases] are available in Debian, RPM, and Alpine formats\n* [Binaries][releases] are available for Linux, macOS, Windows, FreeBSD, OpenBSD, and NetBSD\n\nOr just install it with `go`:\n\n```bash\ngo install github.com/charmbracelet/gum@latest\n```\n\n[releases]: https://github.com/charmbracelet/gum/releases\n\n## Customization\n\n`gum` is designed to be embedded in scripts and supports all sorts of use\ncases. Components are configurable and customizable to fit your theme and\nuse case.\n\nYou can customize with `--flags`. See `gum <command> --help` for a full view of\neach command's customization and configuration options.\n\nFor example, let's use an `input` and change the cursor color, prompt color,\nprompt indicator, placeholder text, width, and pre-populate the value:\n\n```bash\ngum input --cursor.foreground \"#FF0\" --prompt.foreground \"#0FF\" --prompt \"* \" \\\n    --placeholder \"What's up?\" --width 80 --value \"Not much, hby?\"\n```\n\nYou can also use `ENVIRONMENT_VARIABLES` to customize `gum` by default, this is\nuseful to keep a consistent theme for all your `gum` commands.\n\n```bash\nexport GUM_INPUT_CURSOR_FOREGROUND=\"#FF0\"\nexport GUM_INPUT_PROMPT_FOREGROUND=\"#0FF\"\nexport GUM_INPUT_PLACEHOLDER=\"What's up?\"\nexport GUM_INPUT_PROMPT=\"* \"\nexport GUM_INPUT_WIDTH=80\n\n# Uses values configured through environment variables above but can still be\n# overridden with flags.\ngum input\n```\n\n<img alt=\"Gum input displaying most customization options\" width=\"600\" src=\"https://stuff.charm.sh/gum/customization.gif\">\n\n## Interaction\n\n#### Input\n\nPrompt for input with a simple command.\n\n```bash\ngum input > answer.txt\n```\n\nPrompt for sensitive input with the `--password` flag.\n\n```bash\ngum input --password > password.txt\n```\n\n<img src=\"https://stuff.charm.sh/gum/input_1.gif\" width=\"600\" alt=\"Shell running gum input typing Not much, you?\" />\n\n#### Write\n\nPrompt for some multi-line text.\n\nNote: `CTRL+D` is used to complete text entry. `CTRL+C` and `esc` will cancel.\n\n```bash\ngum write > story.txt\n```\n\n<img src=\"https://stuff.charm.sh/gum/write.gif\" width=\"600\" alt=\"Shell running gum write typing a story\" />\n\n#### Filter\n\nUse fuzzy matching to filter a list of values:\n\n```bash\necho Strawberry >> flavors.txt\necho Banana >> flavors.txt\necho Cherry >> flavors.txt\ncat flavors.txt | gum filter > selection.txt\n```\n\n<img src=\"https://stuff.charm.sh/gum/filter.gif\" width=\"600\" alt=\"Shell running gum filter on different bubble gum flavors\" />\n\nYou can also select multiple items with the `--limit` flag, which determines\nthe maximum number of items that can be chosen.\n\n```bash\ncat flavors.txt | gum filter --limit 2\n```\n\nOr, allow any number of selections with the `--no-limit` flag.\n\n```bash\ncat flavors.txt | gum filter --no-limit\n```\n\n#### Choose\n\nChoose an option from a list of choices.\n\n```bash\necho \"Pick a card, any card...\"\nCARD=$(gum choose --height 15 {{A,K,Q,J},{10..2}}\" \"{♠,♥,♣,♦})\necho \"Was your card the $CARD?\"\n```\n\nYou can also select multiple items with the `--limit` flag, which determines\nthe maximum of items that can be chosen.\n\n```bash\necho \"Pick your top 5 songs.\"\ncat songs.txt | gum choose --limit 5\n```\n\nOr, allow any number of selections with the `--no-limit` flag.\n\n```bash\necho \"What do you need from the grocery store?\"\ncat foods.txt | gum choose --no-limit\n```\n\n<img src=\"https://stuff.charm.sh/gum/choose.gif\" width=\"600\" alt=\"Shell running gum choose with numbers and gum flavors\" />\n\n#### Confirm\n\nConfirm whether to perform an action. Exits with code `0` (affirmative) or `1`\n(negative) depending on selection.\n\n```bash\ngum confirm && rm file.txt || echo \"File not removed\"\n```\n\n<img src=\"https://stuff.charm.sh/gum/confirm_2.gif\" width=\"600\" alt=\"Shell running gum confirm\" />\n\n#### File\n\nPrompt the user to select a file from the file tree.\n\n```bash\nEDITOR $(gum file $HOME)\n```\n\n<img src=\"https://stuff.charm.sh/gum/file.gif\" width=\"600\" alt=\"Shell running gum file\" />\n\n#### Pager\n\nScroll through a long document with line numbers and a fully customizable viewport.\n\n```bash\ngum pager < README.md\n```\n\n<img src=\"https://stuff.charm.sh/gum/pager.gif\" width=\"600\" alt=\"Shell running gum pager\" />\n\n#### Spin\n\nDisplay a spinner while running a script or command. The spinner will\nautomatically stop after the given command exits.\n\nTo view or pipe the command's output, use the `--show-output` flag.\n\n```bash\ngum spin --spinner dot --title \"Buying Bubble Gum...\" -- sleep 5\n```\n\n<img src=\"https://stuff.charm.sh/gum/spin.gif\" width=\"600\" alt=\"Shell running gum spin while sleeping for 5 seconds\" />\n\nAvailable spinner types include: `line`, `dot`, `minidot`, `jump`, `pulse`, `points`, `globe`, `moon`, `monkey`, `meter`, `hamburger`.\n\n#### Table\n\nSelect a row from some tabular data.\n\n```bash\ngum table < flavors.csv | cut -d ',' -f 1\n```\n\n<img src=\"https://stuff.charm.sh/gum/table.gif\" width=\"600\" alt=\"Shell running gum table\" />\n\n## Styling\n\n#### Style\n\nPretty print any string with any layout with one command.\n\n```bash\ngum style \\\n\t--foreground 212 --border-foreground 212 --border double \\\n\t--align center --width 50 --margin \"1 2\" --padding \"2 4\" \\\n\t'Bubble Gum (1¢)' 'So sweet and so fresh!'\n```\n\n<img src=\"https://stuff.charm.sh/gum/style.gif\" width=\"600\" alt=\"Bubble Gum, So sweet and so fresh!\" />\n\n## Layout\n\n#### Join\n\nCombine text vertically or horizontally. Use this command with `gum style` to\nbuild layouts and pretty output.\n\nTip: Always wrap the output of `gum style` in quotes to preserve newlines\n(`\\n`) when using it as an argument in the `join` command.\n\n```bash\nI=$(gum style --padding \"1 5\" --border double --border-foreground 212 \"I\")\nLOVE=$(gum style --padding \"1 4\" --border double --border-foreground 57 \"LOVE\")\nBUBBLE=$(gum style --padding \"1 8\" --border double --border-foreground 255 \"Bubble\")\nGUM=$(gum style --padding \"1 5\" --border double --border-foreground 240 \"Gum\")\n\nI_LOVE=$(gum join \"$I\" \"$LOVE\")\nBUBBLE_GUM=$(gum join \"$BUBBLE\" \"$GUM\")\ngum join --align center --vertical \"$I_LOVE\" \"$BUBBLE_GUM\"\n```\n\n<img src=\"https://stuff.charm.sh/gum/join.gif\" width=\"600\" alt=\"I LOVE Bubble Gum written out in four boxes with double borders around them.\" />\n\n## Format\n\n`format` processes and formats bodies of text. `gum format` can parse markdown,\ntemplate strings, and named emojis.\n\n```bash\n# Format some markdown\ngum format -- \"# Gum Formats\" \"- Markdown\" \"- Code\" \"- Template\" \"- Emoji\"\necho \"# Gum Formats\\n- Markdown\\n- Code\\n- Template\\n- Emoji\" | gum format\n\n# Syntax highlight some code\ncat main.go | gum format -t code\n\n# Render text any way you want with templates\necho '{{ Bold \"Tasty\" }} {{ Italic \"Bubble\" }} {{ Color \"99\" \"0\" \" Gum \" }}' \\\n    | gum format -t template\n\n# Display your favorite emojis!\necho 'I :heart: Bubble Gum :candy:' | gum format -t emoji\n```\n\nFor more information on template helpers, see the [Termenv\ndocs](https://github.com/muesli/termenv#template-helpers). For a full list of\nnamed emojis see the [GitHub API](https://api.github.com/emojis).\n\n<img src=\"https://stuff.charm.sh/gum/format.gif\" width=\"600\" alt=\"Running gum format for different types of formats\" />\n\n## Examples\n\nSee the [examples](./examples/) directory for more real world use cases.\n\nHow to use `gum` in your daily workflows:\n\n#### Write a commit message\n\nPrompt for input to write git commit messages with a short summary and\nlonger details with `gum input` and `gum write`.\n\nBonus points: use `gum filter` with the [Conventional Commits\nSpecification](https://www.conventionalcommits.org/en/v1.0.0/#summary) as a\nprefix for your commit message.\n\n```bash\ngit commit -m \"$(gum input --width 50 --placeholder \"Summary of changes\")\" \\\n           -m \"$(gum write --width 80 --placeholder \"Details of changes (CTRL+D to finish)\")\"\n```\n\n#### Open files in your `$EDITOR`\n\nBy default, `gum filter` will display a list of all files (searched\nrecursively) through your current directory, with some sensible ignore settings\n(`.git`, `node_modules`). You can use this command to easily to pick a file and\nopen it in your `$EDITOR`.\n\n```bash\n$EDITOR $(gum filter)\n```\n\n#### Connect to a TMUX session\n\nPick from a running `tmux` session and attach to it. Or, if you're already in a\n`tmux` session, switch sessions.\n\n```bash\nSESSION=$(tmux list-sessions -F \\#S | gum filter --placeholder \"Pick session...\")\ntmux switch-client -t $SESSION || tmux attach -t $SESSION\n```\n\n<img src=\"https://stuff.charm.sh/gum/pick-tmux-session.gif\" width=\"600\" alt=\"Picking a tmux session with gum filter\" />\n\n#### Pick commit hash from your Git history\n\nFilter through your git history searching for commit messages, copying the\ncommit hash of the commit you select.\n\n```bash\ngit log --oneline | gum filter | cut -d' ' -f1 # | copy\n```\n\n<img src=\"https://stuff.charm.sh/gum/pick-commit.gif\" width=\"600\" alt=\"Picking a commit with gum filter\" />\n\n#### Skate Passwords\n\nBuild a simple (encrypted) password selector with [Skate](https://github.com/charmbracelet/skate).\n\nSave all your passwords to [Skate](https://github.com/charmbracelet/skate) with `skate set github@pass.db PASSWORD`, etc...\n\n```\nskate list -k | gum filter | xargs skate get\n```\n\n<img src=\"https://stuff.charm.sh/gum/skate-pass.gif\" width=\"600\" alt=\"Selecting a skate value with gum\" />\n\n#### Choose packages to uninstall\n\nList all packages installed by your package manager (we'll use `brew`) and\nchoose which packages to uninstall.\n\n```bash\nbrew list | gum choose --no-limit | xargs brew uninstall\n```\n\n#### Choose branches to delete\n\nList all branches and choose which branches to delete.\n\n```bash\ngit branch | cut -c 3- | gum choose --no-limit | xargs git branch -D\n```\n\n#### Choose pull request to checkout\n\nList all PRs for the current GitHub repository and checkout the chosen PR (using [`gh`](https://cli.github.com/)).\n\n```bash\ngh pr list | cut -f1,2 | gum choose | cut -f1 | xargs gh pr checkout\n```\n\n#### Pick command from shell history\n\nPick a previously executed command from your shell history to execute, copy,\nedit, etc...\n\n```bash\ngum filter < $HISTFILE --height 20\n```\n\n#### Sudo password input\n\nSee visual feedback when entering password with masked characters with `gum\ninput --password`.\n\n```bash\nalias please=\"gum input --password | sudo -nS\"\n```\n\n## Feedback\n\nWe’d love to hear your thoughts on this project. Feel free to drop us a note!\n\n* [Twitter](https://twitter.com/charmcli)\n* [The Fediverse](https://mastodon.social/@charmcli)\n* [Discord](https://charm.sh/chat)\n\n## License\n\n[MIT](https://github.com/charmbracelet/gum/raw/main/LICENSE)\n\n***\n\nPart of [Charm](https://charm.sh).\n\n<a href=\"https://charm.sh/\"><img alt=\"The Charm logo\" src=\"https://stuff.charm.sh/charm-badge.jpg\" width=\"400\" /></a>\n\nCharm热爱开源 • Charm loves open source"
}
