{
  "name": "overmind",
  "full_name": "overmind",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Process manager for Procfile-based applications and tmux",
  "license": "MIT",
  "homepage": "https://github.com/DarthSim/overmind",
  "versions": {
    "stable": "2.4.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/DarthSim/overmind/archive/v2.4.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "6936349e4a2d5fdae97ba35f4e0f92f3e466fd439b217ef3e84cf469e7a18816"
    },
    "head": {
      "url": "https://github.com/DarthSim/overmind.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/overmind/blobs/sha256:984c9e975dda90a96ded9fa43a6b70110c80ef3efc4604ceb274547a035c22c4",
          "sha256": "984c9e975dda90a96ded9fa43a6b70110c80ef3efc4604ceb274547a035c22c4"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/overmind/blobs/sha256:3d26b6161cefed451e50c007ba9bb6601a8e0ca21f297720a74bfd38075866e1",
          "sha256": "3d26b6161cefed451e50c007ba9bb6601a8e0ca21f297720a74bfd38075866e1"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/overmind/blobs/sha256:8eb53694a8b87289a4f2dc5a307926ce841becb78f141a625608c8ec2d798a33",
          "sha256": "8eb53694a8b87289a4f2dc5a307926ce841becb78f141a625608c8ec2d798a33"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/overmind/blobs/sha256:bae2f9b47e7fb846de0b69cf21e464e2896777fb189a2aa557a2afd69e9d8fd7",
          "sha256": "bae2f9b47e7fb846de0b69cf21e464e2896777fb189a2aa557a2afd69e9d8fd7"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/overmind/blobs/sha256:ca5d5836b5710febf70d33af79e507cccd6e505d39d8c2943067f36f649786ae",
          "sha256": "ca5d5836b5710febf70d33af79e507cccd6e505d39d8c2943067f36f649786ae"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/overmind/blobs/sha256:10e30d50a5e5b5eb170652d62c0e8dee30a5d0d545bcd8a8a7e365b4d931602f",
          "sha256": "10e30d50a5e5b5eb170652d62c0e8dee30a5d0d545bcd8a8a7e365b4d931602f"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/overmind/blobs/sha256:71554c46da7c312dd2a56e5c8f37dde2923adbc4fdb1e448d0a748c0bf1e54bd",
          "sha256": "71554c46da7c312dd2a56e5c8f37dde2923adbc4fdb1e448d0a748c0bf1e54bd"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [
    "tmux"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/overmind.rb",
  "ruby_source_checksum": {
    "sha256": "cacca3e9c8c57dd56a8b4cecbeb5c3ef113ad5df99eeb4d5823c8ee96afe94cc"
  },
  "date_added": "2017-06-12T16:54:24-07:00",
  "readme": "<p align=\"center\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"logo-dark.svg\" />\n    <img src=\"logo.svg\" alt=\"Overmind\" />\n  </picture>\n</p>\n\n<p align=\"center\">\n  <a href=\"https://github.com/DarthSim/overmind/releases/latest\"><img alt=\"Release\" src=\"https://img.shields.io/github/release/DarthSim/overmind.svg?style=for-the-badge\" /></a>\n  <a href=\"https://github.com/DarthSim/overmind/actions\"><img alt=\"GH Build\" src=\"https://img.shields.io/github/actions/workflow/status/DarthSim/overmind/build.yml?branch=master&label=Build&style=for-the-badge\" /></a>\n  <a href=\"https://github.com/DarthSim/overmind/actions\"><img alt=\"GH Lint\" src=\"https://img.shields.io/github/actions/workflow/status/DarthSim/overmind/lint.yml?branch=master&label=Lint&style=for-the-badge\" /></a>\n</p>\n\n---\n\nOvermind is a process manager for Procfile-based applications and [tmux](https://tmux.github.io/). With Overmind, you can easily run several processes from your `Procfile` in a single terminal.\n\nProcfile is a simple format to specify types of processes your application provides (such as web application server, background queue process, front-end builder) and commands to run those processes. It can significantly simplify process management for developers and is used by popular hosting platforms, such as Heroku and Deis. You can learn more about the `Procfile` format [here](https://devcenter.heroku.com/articles/procfile).\n\nThere are some good Procfile-based process management tools, including [foreman](https://github.com/ddollar/foreman) by David Dollar, which started it all. The problem with most of those tools is that processes you want to manage start to think they are logging their output into a file, and that can lead to all sorts of problems: severe lagging, and losing or breaking colored output. Tools can also add vanity information (unneeded timestamps in logs). Overmind was created to fix those problems once and for all.\n\nSee this article for a good intro and all the juicy details! [Introducing\nOvermind and Hivemind](https://evilmartians.com/chronicles/introducing-overmind-and-hivemind)\n\n<a href=\"https://evilmartians.com/?utm_source=opensource\">\n  <picture>\n    <source\n      media=\"(prefers-color-scheme: dark)\"\n      srcset=\"https://evilmartians.com/badges/sponsored-by-evil-martians_v2.0_for-dark-bg@2x.png\"\n    >\n    <img\n      src=\"https://evilmartians.com/badges/sponsored-by-evil-martians_v2.0@2x.png\"\n      alt=\"Sponsored by Evil Martians\"\n      width=\"236\"\n      height=\"54\"\n    >\n  </picture>\n</a>\n\n## Overmind features\n\nYou may know several Procfile process management tools, but Overmind has some unique, _extraterrestrial_ powers others don't:\n\n* Overmind starts processes in a tmux session, so you can easily connect to any process and gain control over it;\n* Overmind can restart a single process on the fly — you don't need to restart the whole stack;\n* Overmind allows a specified process to die without interrupting all of the other ones;\n* Overmind can restart specified processes automatically when they die;\n* Overmind uses tmux's control mode to capture process output — so it won't be clipped, delayed, and it won't break colored output;\n* Overmind can read environment variables from a file and use them as parameters so that you can configure Overmind behavior globally and/or per directory.\n\n**If a lot of those features seem like overkill for you, especially the tmux integration, you should take a look at Overmind's little sister — [Hivemind](https://github.com/DarthSim/hivemind)!**\n\n![Overmind screenshot](http://i.imgur.com/lfrFKMf.png)\n\n## Installation\n\n**Note:** At the moment, Overmind supports Linux, *BSD, and macOS only.\n\nOvermind works with [tmux](https://tmux.github.io/), so you need to install it first:\n\n```bash\n# on macOS (with homebrew)\n$ brew install tmux\n\n# on Ubuntu\n$ apt-get install tmux\n```\n\n**Note:** You can find installation manuals for other systems here: https://github.com/tmux/tmux\n\nThere are three ways to install Overmind:\n\n### With Homebrew (macOS)\n\n```bash\nbrew install overmind\n```\n\n### Download the latest Overmind release binary\n\nYou can download the latest release [here](https://github.com/DarthSim/overmind/releases/latest).\n\n### Build Overmind from source\n\nYou need Go 1.21 or later to build the project.\n\n```bash\n$ go install github.com/DarthSim/overmind/v2\n```\n\nThe Overmind binary will be installed to `$(go env GOPATH)/bin`. Make sure that you added it to your `PATH`.\n\n**Note:** You can update Overmind the same way.\n\n## Usage\n\n**In short:** You can get help by running `overmind -h` and `overmind help [command]`.\n\n### Running processes\n\nOvermind reads the list of processes you want to manage from a file named `Procfile`. It may look like this:\n\n```Procfile\nweb: bin/rails server\nworker: bundle exec sidekiq\nassets: gulp watch\n```\n\nTo get started, you just need to run Overmind from your working directory containing a `Procfile`:\n\n```bash\n$ overmind start\n```\n\nYou can also use the short alias:\n\n```bash\n$ overmind s\n```\n\n#### Specifying a Procfile\n\nIf a `Procfile` isn't located in your working directory, you can specify the exact path:\n\n```bash\n$ overmind start -f path/to/your/Procfile\n$ OVERMIND_PROCFILE=path/to/your/Procfile overmind start\n```\n\n#### Specifying the ports\n\nOvermind sets the environment variable `PORT` for each process in your Procfile so that you can do things like this:\n\n```Procfile\nweb: bin/rails server -p $PORT\n```\n\nOvermind assigns the port base (5000 by default) to `PORT` for the first process and increases `PORT` by port step (100 by default) for each subsequent one. You can specify the port base and port step like this:\n\n```bash\n$ overmind start -p 3000 -P 10\n$ OVERMIND_PORT=3000 OVERMIND_PORT_STEP=10 overmind start\n```\n\n#### Disabling `PORT`\n\nIf you don't want Overmind to set the `PORT` variable, you can disable it:\n\n```bash\n$ overmind start -N\n$ OVERMIND_NO_PORT=1 overmind start\n```\n\n#### Running only the specified processes\n\nYou can specify the names of processes you want to run:\n\n```bash\n$ overmind start -l web,sidekiq\n$ OVERMIND_PROCESSES=web,sidekiq overmind start\n```\n\n#### Not running the specified processes\n\nSimilar to the above, if there are some processes in the Procfile that you do not want to run:\n\n```bash\n$ overmind start -x web,sidekiq\n$ OVERMIND_IGNORED_PROCESSES=web,sidekiq overmind start\n```\n\nThis takes precedence over the previous `-l` flag. i.e. if you:\n\n```bash\n$ overmind start -l web -x web\n$ OVERMIND_IGNORED_PROCESSES=web OVERMIND_PROCESSES=web overmind start\n```\n\nNothing will start.\n\n#### Scaling processes (formation)\n\nBy default, Overmind starts one instance of each process, but you can set the number of each process instances to run:\n\n```bash\n$ overmind start -m web=2,worker=5\n$ OVERMIND_FORMATION=web=2,worker=5 overmind start\n```\n\nThere is a special name `all` that you can use to scale all processes at once:\n\n```bash\n$ overmind start -m all=2,worker=5\n$ OVERMIND_FORMATION=all=2,worker=5 overmind start\n```\n\nIf you set instances number of some process to zero, this process won't be run:\n\n```bash\n$ overmind start -m some_production_task=0\n$ OVERMIND_FORMATION=some_production_task=0 overmind start\n```\n\n#### Processes that can die\n\nUsually, when a process dies, Overmind will interrupt all other processes. However, you can specify processes that can die without interrupting all other ones:\n\n```bash\n$ overmind start -c assets,npm_install\n$ OVERMIND_CAN_DIE=assets,npm_install overmind start\n```\n\nAlso, you can allow all processes to die:\n\n```bash\n$ overmind start --any-can-die\n$ OVERMIND_ANY_CAN_DIE=1 overmind start\n```\n\n#### Auto-restarting processes\n\nIf some of your processes tend to randomly crash, you can tell Overmind to restart them automatically when they die:\n\n```bash\n$ overmind start -r rails,webpack\n$ OVERMIND_AUTO_RESTART=rails,webpack overmind start\n```\n\n#### Specifying the colors\n\nOvermind colorizes process names with different colors. It may happen that these colors don't match well with your color scheme. In that case, you can specify your own colors using xterm color codes:\n\n```bash\n$ overmind start -b 123,123,125,126,127\n$ OVERMIND_COLORS=123,123,125,126,127 overmind start\n```\n\nIf you want Overmind to always use these colors, you can specify them in the [environment file](https://github.com/DarthSim/overmind#overmind-environment) located in your home directory.\n\n### Show timestamps\n\nBy default, Overmind doesn't show timestamps in its output since it expects your processes to add timestamps to their own output. But you can make Overmind to add timestamps to its output:\n\n```bash\n$ overmind start -T\n$ OVERMIND_SHOW_TIMESTAMPS=1 overmind start\n```\n\n### Connecting to a process\n\nIf you need to gain access to process input, you can connect to its `tmux` window:\n\n```bash\n$ overmind connect <process_name>\n```\n\nYou can safely disconnect from the window by hitting `Ctrl b` (or your tmux prefix) and then `d`.\n\nYou can omit the process name to connect to the first process defined in the Procfile.\n\n### Restarting a process\n\nYou can restart a single process without restarting all the other ones:\n\n```bash\n$ overmind restart sidekiq\n```\n\nYou can restart multiple processes the same way:\n\n```bash\n$ overmind restart sidekiq assets\n```\n\nIt's also possible to use wildcarded process names:\n\n```bash\n$ overmind restart 'sidekiq*'\n```\n\nWhen the command is called without any arguments, it will restart all the processes.\n\n### Stopping a process\n\nYou can stop a single process without stopping all the other ones:\n\n```bash\n$ overmind stop sidekiq\n```\n\nYou can stop multiple processes the same way:\n\n```bash\n$ overmind stop sidekiq assets\n```\n\nIt's also possible to use wildcarded process names:\n\n```bash\n$ overmind stop 'sidekiq*'\n```\n\nWhen the command is called without any arguments, it will stop all the processes without stopping Overmind itself.\n\n### Killing processes\n\nIf something goes wrong, you can kill all running processes:\n\n```bash\n$ overmind kill\n```\n\n### Overmind environment\n\nIf you need to set specific environment variables before running a `Procfile`, you can specify them in the `.overmind.env` file in the current working directory, your home directory, or/and in the `.env` file in in the current working directory. The file should contain `variable=value` pairs, one per line:\n\n```\nPATH=$PATH:/additional/path\nOVERMIND_CAN_DIE=npm_install\nOVERMIND_PORT=3000\n```\n\nFor example, if you want to use a separate `Procfile.dev` by default on a local environment, create `.overmind.env` file with `OVERMIND_PROCFILE=Procfile.dev`. Now, Overmind uses `Procfile.dev` by default.\n\nYou can specify additional env files to load with `OVERMIND_ENV` variable:\n\n```bash\n$ OVERMIND_ENV=./.env.local,./.env.development overmind s\n```\n\nThe files will be loaded in the following order:\n\n* `~/.overmind.env`\n* `./.overmind.env`\n* `./.env`\n* `$OVERMIND_ENV`\n\nYou can also opt to skip loading the `.env` file entirely (`.overmind.env` will still be read) by setting the variable `OVERMIND_SKIP_ENV`.\n\n#### Running a command in the Overmind environment\n\nSince you set up an environment with `.env` files, you may want to run a command inside this environment. You can do this using `run` command:\n\n```bash\n$ overmind run yarn install\n```\n\n### Run as a daemon\n\nOvermind can be run as a daemon:\n\n```bash\n$ overmind start -D\n$ OVERMIND_DAEMONIZE=1 overmind start\n```\n\nUse the `echo` command for the logs:\n\n```bash\n$ overmind echo\n```\n\nYou can quit daemonized Overmind with `quit`:\n\n```bash\n$ overmind quit\n```\n\n### Specifying a socket\n\nOvermind receives commands via a Unix socket. Usually, it opens a socket named `.overmind.sock` in a working directory, but you can specify the full path:\n\n```bash\n$ overmind start -s path/to/socket\n$ OVERMIND_SOCKET=path/to/socket overmind start\n```\n\nAll other commands support the same flag:\n\n```bash\n$ overmind connect -s path/to/socket web\n$ overmind restart -s path/to/socket sidekiq\n$ overmind kill -s path/to/socket\n```\n\n#### Using TCP network\n\nOvermind can bind its command center to a TCP address instead of Unix socket. This is useful when you run it on a remote machine.\n\n```bash\n$ overmind start -s \"0.0.0.0:4321\" -S \"tcp\"\n$ OVERMIND_SOCKET=\"0.0.0.0:4321\" OVERMIND_NETWORK=\"tcp\" overmind start\n```\n\nYou need to pass the same flags to other commands:\n\n```bash\n$ overmind connect -s \"0.0.0.0:4321\" -S \"tcp\" web\n```\n\n### Specifying tmux config\n\nOvermind can use a specified tmux config. This is useful if you want to differentiate from your main tmux window, for example adding a custom status line for Overmind or a different prefix key.\n\n```bash\novermind start -F ~/overmind.tmux.conf\nOVERMIND_TMUX_CONFIG=~/.overmind.tmux.conf overmind start\n```\n\n## Known issues\n\n### Overmind uses the system Ruby/Node/etc instead of a custom-defined one\n\nThis may happen if your Ruby/Node/etc version manager isn't configured properly. Make sure that the path to your custom binaries is included in your `PATH` before the system binaries path.\n\n### Overmind does not stop the Docker process properly\n\nUnfortunately, this is how Docker works. When you send `SIGINT` to a `docker run ...` process, it just detaches container and exits. You can solve this by using named containers and signal traps:\n\n```procfile\nmydocker: trap 'docker stop mydocker' EXIT > /dev/null; docker run --name mydocker ...\n```\n\n### Overmind can't start because of a `bind: invalid argument` error\n\nAll operating systems have limits on Unix socket path length. Try to use a shorter socket path.\n\n### Overmind exits after `pg_ctl --wait start` and keeps PostgreSQL server running\n\nSince version 12.0 `pg_ctl --wait start` exits right after starting the server. Just use the `postgres` command directly.\n\n## Author\n\nSergey \"DarthSim\" Aleksandrovich\n\nHighly inspired by [Foreman](https://github.com/ddollar/foreman).\n\nMany thanks to @antiflasher for the awesome logo.\n\n## License\n\nOvermind is licensed under the MIT license.\n\nSee LICENSE for the full license text."
}
