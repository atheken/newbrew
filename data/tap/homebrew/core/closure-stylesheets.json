{
  "name": "closure-stylesheets",
  "full_name": "closure-stylesheets",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Extended CSS preprocessor, linter, and internationalizer",
  "license": "Apache-2.0",
  "homepage": "https://github.com/google/closure-stylesheets",
  "versions": {
    "stable": "1.5.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/google/closure-stylesheets/releases/download/v1.5.0/closure-stylesheets.jar",
      "tag": null,
      "revision": null,
      "checksum": "aa4e9b23093187a507a4560d13e59411fc92e285bc911b908a6bcf39479df03c"
    }
  },
  "revision": 1,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/closure-stylesheets/blobs/sha256:7e1f8c96098f6c2fd2cba714bce4da004aa5687ca5a4a1d745460f53f337b982",
          "sha256": "7e1f8c96098f6c2fd2cba714bce4da004aa5687ca5a4a1d745460f53f337b982"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "openjdk"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": true,
  "disable_date": "2022-12-30",
  "disable_reason": "repo_archived",
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/closure-stylesheets.rb",
  "ruby_source_checksum": {
    "sha256": "995e4ea34c50ff46d55b0319c29379909681f79f70c8ddc47fdf72a3b21fc3c4"
  },
  "date_added": "2016-12-02T09:05:44+00:00",
  "readme": "This project is officially end-of-life. Users are welcome to maintain it in a\nfork, but there will be no more Google-authored changes published. While Closure\nStylesheets was ahead of its time when it was first released in 2011, it has\nsince been outpaced by much more active projects with wider community support.\nEven within Google, we're working on moving all CSS compilation infrastructure\nto a combination of [Sass] and [PostCSS] plugins, including [Autoprefixer],\n[RTLCSS], [cssnano], [postcss-rename], [Stylelint], and a few internal plugins\nthat we hope to one day share with the world. [Custom properties] and [`calc()`]\nare excellent standard CSS options that are widely supported in modern browsers.\n\n[Sass]: https://sass-lang.com\n[PostCSS]: https://postcss.org\n[Autoprefixer]: https://autoprefixer.github.io/\n[RTLCSS]: https://rtlcss.com\n[cssnano]: https://cssnano.co/\n[postcss-rename]: https://github.com/google/postcss-rename\n[stylelint]: https://stylelint.io/\n[Custom properties]: https://developer.mozilla.org/en-US/docs/Web/CSS/--*\n[`calc()`]: https://developer.mozilla.org/en-US/docs/Web/CSS/calc()\n\n---\n\n# Closure Stylesheets\n\nClosure Stylesheets is an extension to CSS that adds\n**[variables](#variables)**, **[functions](#functions)**,\n**[conditionals](#conditionals)**, and **[mixins](#mixins)** to standard\nCSS. The tool also supports **[minification](#minification)**,\n**[linting](#linting)**, **[RTL flipping](#rtl-flipping)**, and CSS class\n**[renaming](#renaming)**.\n\n## Get Closure Stylesheets!\n\nClosure Stylesheets is available as a Java jar named `closure-stylesheets.jar`.\nYou can either [download] a precompiled jar or [build it from source].\n\nUsing Closure Stylesheets requires Java. To make sure that Java is installed\ncorrectly, try running the following command to print the list of command-line\noptions for Closure Stylesheets:\n\n```\njava -jar closure-stylesheets.jar --help\n```\n\n[download]: https://github.com/google/closure-stylesheets/releases\n[build it from source]: https://github.com/google/closure-stylesheets/wiki/Building-From-Source.md\n\n\n## CSS Extensions\n\nInternally at Google, Closure Stylesheets are frequently referred to as \"Google\nStylesheets\" or \"GSS\", so you will see references to GSS in the\n[source code](https://github.com/google/closure-stylesheets). Some\ndevelopers prefer to be explicit about which files use the Closure Stylesheets\nextensions to CSS by using a **`.gss`** file extension.\n\n### Variables\n\nVariables can be defined in Closure Stylesheets using **`@def`** followed by a\nvariable name and then a value. Variables can also be defined in terms of other\nvariables. Consider the following file, **`variable-example.gss`**:\n\n```css\n@def BG_COLOR              rgb(235, 239, 249);\n\n@def DIALOG_BORDER_COLOR   rgb(107, 144, 218);\n@def DIALOG_BG_COLOR       BG_COLOR;\n\nbody {\n  background-color: BG_COLOR;\n}\n\n.dialog {\n  background-color: DIALOG_BG_COLOR;\n  border: 1px solid DIALOG_BORDER_COLOR;\n}\n```\n\nRunning **`java -jar closure-stylesheets.jar --pretty-print\nvariable-example.gss`** will print:\n\n```css\nbody {\n  background-color: #ebeff9;\n}\n.dialog {\n  background-color: #ebeff9;\n  border: 1px solid #6b90da;\n}\n```\n\n### Functions\n\nClosure Stylesheets provides support for several arithmetic functions:\n\n  * `add()`\n  * `sub()`\n  * `mult()`\n  * `divide()`\n  * `min()`\n  * `max()`\n\nEach of these functions can take a variable number arguments. Arguments may be\npurely numeric or CSS sizes with units (though `mult()` and `divide()` only\nallow the first argument to have a unit). When units such as `px` are specified\nas part of an argument, all arguments to the function must have the same\nunit. That is, you may do `add(3px, 5px)` or `add(3ex, 5ex)`, but you cannot do\n`add(3px, 5ex)`. Here is an example of when it might be helpful to use `add()`:\n\n```css\n@def LEFT_HAND_NAV_WIDTH    180px;\n@def LEFT_HAND_NAV_PADDING  3px;\n\n.left_hand_nav {\n  position: absolute;\n  width: LEFT_HAND_NAV_WIDTH;\n  padding: LEFT_HAND_NAV_PADDING;\n}\n\n.content {\n  position: absolute;\n  margin-left: add(LEFT_HAND_NAV_PADDING,  /* padding left */\n                   LEFT_HAND_NAV_WIDTH,\n                   LEFT_HAND_NAV_PADDING); /* padding right */\n\n}\n```\n\nRunning **`java -jar closure-stylesheets.jar --pretty-print\nfunctions-example.gss`** will print:\n\n```css\n.left_hand_nav {\n  position: absolute;\n  width: 180px;\n  padding: 3px;\n}\n.content {\n  position: absolute;\n  margin-left: 186px;\n}\n```\n\nAlthough these functions are not as full-featured as\n[CSS3 calc()](http://www.w3.org/TR/css3-values/#calc) because they do not allow\nyou to mix units as `calc()` does, they can still help produce more maintainable\nstylesheets.\n\n\nThere are also built-in functions that deal with colors. For now, you need to\n[see the code](https://github.com/google/closure-stylesheets/blob/master/src/com/google/common/css/compiler/gssfunctions/GssFunctions.java)\nfor details, but here are the functions and the arguments that they take:\n\n  * `blendColorsHsb(startColor, endColor)` blends using HSB values\n  * `blendColorsRgb(startColor, endColor)` blends using RGB values\n  * `makeMutedColor(backgroundColor, foregroundColor [, saturationLoss])`\n  * `addHsbToCssColor(baseColor, hueToAdd, saturationToAdd, brightnessToAdd)`\n  * `makeContrastingColor(color, similarityIndex)`\n  * `adjustBrightness(color, brightness)`\n  * `saturateColor(color, saturationToAdd)` increase saturation in HSL color space\n  * `desaturateColor(color, saturationToRemove)` decrease saturation in HSL color space\n  * `greyscale(color)` full desaturation of a color in HSL color space\n  * `lighten(color, lightnessToAdd)` increase the lightness in HSL color space\n  * `darken(color, lightnessToRemove)` decrease the lightness in HSL color space\n  * `spin(color, hueAngle)` increase or decrease hue of the color, like rotating in a color wheel\n\nThere is also a `selectFrom()` function that behaves like the ternary operator:\n\n```css\n/* Implies MYDEF = FOO ? BAR : BAZ; */\n@def MYDEF selectFrom(FOO, BAR, BAZ);\n```\n\nThis could be used with `@def FOO true;` to have the effect of `@def MYDEF =\nBAR`.\n\nIt is also possible to define your own functions in Java by implementing\n[GssFunctionMapProvider](https://github.com/google/closure-stylesheets/blob/master/src/com/google/common/css/GssFunctionMapProvider.java)\nand passing the fully-qualified class name to Closure Stylesheets via the\n**`--gss-function-map-provider`** flag. If you choose to do this, you will\nlikely want to compose\n[DefaultGssFunctionMapProvider](https://github.com/google/closure-stylesheets/blob/master/src/com/google/common/css/compiler/gssfunctions/DefaultGssFunctionMapProvider.java)\nso that your\n[GssFunctionMapProvider](https://github.com/google/closure-stylesheets/blob/master/src/com/google/common/css/GssFunctionMapProvider.java)\nprovides your custom functions in addition to the built-in arithmetic functions.\n\n### Mixins\n\nMixins make it possible to reuse a list of parameterized declarations. A mixin\ndefinition (**`@defmixin`**) can be seen as a function with arguments that\ncontains a list of declarations. At the place where a mixin is used\n(**`@mixin`**), the values for the arguments are defined and the declarations\nare inserted. A mixin can be used in any place where declarations are allowed.\n\nThe names of the arguments in the **`@defmixin`** declaration must be all\nuppercase.\n\nGlobal constants defined with **`@def`** can be used in combination with\nmixins. They can be used both within the definition of a mixin, or as an\nargument when using a mixin.\n\nFor example, consider defining a mixin in **`mixin-simple-example.gss`** that\ncould be used to create a shorthand for declaring the dimensions of an element:\n\n```css\n@defmixin size(WIDTH, HEIGHT) {\n  width: WIDTH;\n  height: HEIGHT;\n}\n\n.logo {\n  @mixin size(150px, 55px);\n  background-image: url('http://www.google.com/images/logo_sm.gif');\n}\n```\n\nRunning **`java -jar closure-stylesheets.jar --pretty-print\nmixin-simple-example.gss`** prints:\n\n```css\n.logo {\n  width: 150px;\n  height: 55px;\n  background-image: url('http://www.google.com/images/logo_sm.gif');\n}\n```\n\nMixins are even more compelling when you consider using them to abstract away\ncross-browser behavior for styles such as gradients:\n\n```css\n@defmixin gradient(POS, HSL1, HSL2, HSL3, COLOR, FALLBACK_COLOR) {\n  background-color: FALLBACK_COLOR; /* fallback color if gradients are not supported */\n  background-image: -webkit-linear-gradient(POS, hsl(HSL1, HSL2, HSL3), COLOR);               /* Chrome 10+,Safari 5.1+ */\n  /* @alternate */ background-image: -moz-linear-gradient(POS, hsl(HSL1, HSL2, HSL3), COLOR); /* FF3.6+ */\n  /* @alternate */ background-image: -ms-linear-gradient(POS, hsl(HSL1, HSL2, HSL3), COLOR);  /* IE10 */\n  /* @alternate */ background-image: -o-linear-gradient(POS, hsl(HSL1, HSL2, HSL3), COLOR);   /* Opera 11.10+ */\n}\n\n.header {\n  @mixin gradient(top, 0%, 50%, 70%, #cc0000, #f07575);\n}\n```\n\nThe above is compiled to:\n\n```css\n.header {\n  background-color: #f07575;\n  background-image: -webkit-linear-gradient(top,hsl(0%,50%,70%) ,#cc0000);\n  background-image: -moz-linear-gradient(top,hsl(0%,50%,70%) ,#cc0000);\n  background-image: -ms-linear-gradient(top,hsl(0%,50%,70%) ,#cc0000);\n  background-image: -o-linear-gradient(top,hsl(0%,50%,70%) ,#cc0000);\n}\n```\n\nSee the section on [linting](#linting) for more details on the\n**`@alternate`** annotation.\n\n### Conditionals\n\nVariables can be defined using conditionals with **`@if`**, **`@elseif`**, and\n**`@else`**. The following is a real-world example adapted from the\n[Closure Library](https://github.com/google/closure-library/blob/master/closure/goog/css/common.css),\nwhich defines a cross-browser CSS class to apply the style **`display:\ninline-block`**. The Closure Library example uses browser hacks to define\n`.goog-inline-block`, but it can be done explicitly in Closure Stylesheets by\nusing conditionals as shown in **`conditionals-example.gss`**:\n\n```css\n@if (BROWSER_IE) {\n  @if (BROWSER_IE6) {\n    @def GOOG_INLINE_BLOCK_DISPLAY  inline;\n  } @elseif (BROWSER_IE7) {\n    @def GOOG_INLINE_BLOCK_DISPLAY  inline;\n  } @else {\n    @def GOOG_INLINE_BLOCK_DISPLAY  inline-block;\n  }\n} @elseif (BROWSER_FF2) {\n  @def GOOG_INLINE_BLOCK_DISPLAY    -moz-inline-box;\n} @else {\n  @def GOOG_INLINE_BLOCK_DISPLAY    inline-block;\n}\n\n.goog-inline-block {\n  position: relative;\n  display: GOOG_INLINE_BLOCK_DISPLAY;\n}\n```\n\nValues for the conditionals can be set via a **`--define`** flag. By default,\nall conditional variables are assumed to be false, so running **`java -jar\nclosure-stylesheets.jar --pretty-print conditionals-example.gss`** will print:\n\n```css\n.goog-inline-block {\n  position: relative;\n  display: inline-block;\n}\n```\n\nwhereas **`java -jar closure-stylesheets.jar --define BROWSER_FF2 --pretty-print\nconditionals-example.gss`** will print:\n\n```css\n.goog-inline-block {\n  position: relative;\n  display: -moz-inline-box;\n}\n```\n\nIt is also possible to specify the `--define` flag multiple times, so **`java\n-jar closure-stylesheets.jar --define BROWSER_IE --define BROWSER_IE6\n--pretty-print conditionals-example.gss`** will print:\n\n```css\n.goog-inline-block {\n  position: relative;\n  display: inline;\n}\n```\n\nAdmittedly, to get the benefit of serving the CSS specific to a particular user\nagent, one must generate a separate stylesheet for each user agent and then\nserve it appropriately.\n\n## Additional Features\n\nThe Closure Stylesheets tool also offers some features that are not extensions\nto CSS.\n\n### Minification\n\nYou can concatenate and minify a list of stylesheets with the following command:\n\n```\njava -jar closure-stylesheets.jar input1.css input2.css input3.css\n```\n\nThis will print the minified output to standard out. You can also specify a file\nto write the output to using the **`--output-file`** option:\n\n```\njava -jar closure-stylesheets.jar --output-file output.css input1.css input2.css input3.css\n```\n\nOf course, the **`>`** operator also works just as well:\n\n```\njava -jar closure-stylesheets.jar input1.css input2.css input3.css > output.css\n```\n\nIf you would like to create a vendor-specific stylesheet, you can use the\n**`--vendor`** flag. Current recognized vendors are: **`WEBKIT`**,\n**`MOZILLA`**, **`OPERA`**, **`MICROSOFT`**, and **`KONQUEROR`**. When this flag\nis present, all vendor-specific properties for other vendors will be removed.\n\n### Linting\n\nClosure Stylesheets performs some static checks on your CSS. For example, its\nmost basic function is to ensure that your CSS parses: if there are any parse\nerrors, Closure Stylesheets will print the errors to standard error and return\nwith an exit code of 1.\n\n#### `--allowed-non-standard-function`, `--allow-unrecognized-functions`\n\nIt will also error out when there are unrecognized function names or duplicate\nstyle declarations. For example, if you ran Closure Stylesheets on\n**`linting-example.gss`**:\n\n```css\n.logo {\n  width: 150px;\n  height: 55px;\n  background-image: urel('http://www.google.com/images/logo_sm.gif');\n  border-color: #DCDCDC;\n  border-color: rgba(0, 0, 0, 0.1);\n}\n```\n\nThen you would get the following output:\n\n```\nUnknown function \\\"urel\\\" in linting-example.gss at line 4 column 21:\n  background-image: urel('http://www.google.com/images/logo_sm.gif');\n                    ^\n\nDetected multiple identical, non-alternate declarations in the same ruleset.\nIf this is intentional please use the /* @alternate */ annotation.\nborder-color:[rgba(0,0,0,0.1)] in linting-example.gss at line 7 column 1:\n}\n^\n\n2 error(s)\n```\n\nIn this particular case, the function `urel()` should have been `url()`, though\nif you are using a function that is not on the whitelist (see\n[CssFunctionNode](https://github.com/google/closure-stylesheets/blob/master/src/com/google/common/css/compiler/ast/CssFunctionNode.java)\nfor the list of recognized functions, which is admittedly incomplete), then you\ncan specify **`--allowed-non-standard-function`** to identify additional\nfunctions that should be whitelisted:\n\n```\njava -jar closure-stylesheets.jar --allowed-non-standard-function urel linting-example.gss\n```\n\nThe `--allowed-non-standard-function` flag may be specified multiple times.\n\nIt is also possible to disable the check for unknown functions altogether using\nthe **`--allow-unrecognized-functions`** flag.\n\nFurther, in this example, the multiple declarations of `border-color` are\nintentional. They are arranged so that user agents that recognize `rgba()` will\nuse the second declaration whereas those that do not will fall back on the first\ndeclaration. In order to suppress this error, use the `/* @alternate */`\nannotation that the error message suggests as follows:\n\n```css\n.logo {\n  width: 150px;\n  height: 55px;\n  background-image: url('http://www.google.com/images/logo_sm.gif');\n  border-color: #DCDCDC;\n  /* @alternate */ border-color: rgba(0, 0, 0, 0.1);\n}\n```\n\nThis signals that the re-declaration is intentional, which silences the\nerror. It is also common to use this technique with multiple `background`\ndeclarations that use `-webkit-linear-gradient`, `-moz-linear-gradient`, etc. In\ngeneral, using [conditionals](#Conditionals.md) to select the appropriate\ndeclaration based on user agent is preferred; however, that requires the\nadditional overhead of doing user agent detection and serving the appropriate\nstylesheet, so using the `@alternate` annotation is a simpler solution.\n\n#### `--allow-unrecognized-properties`, `--allowed-unrecognized-property`\n\nBy default, Closure Stylesheets validates the names of CSS properties used in a\nstylesheet. We have attempted to capture all legal properties in the\n[hardcoded list of recognized properties](https://github.com/google/closure-stylesheets/blob/master/src/com/google/common/css/compiler/ast/Property.java)\nthat is bundled with Closure Stylesheets. However, you can allow properties that\naren't in the list with the **`--allowed-unrecognized-property`** flag. Consider\nthe file **`bleeding-edge.gss`**:\n\n```css\n.amplifier {\n  /* A hypothetical CSS property recognized by the latest version of WebKit. */\n  -webkit-amp-volume: 11;\n}\n```\n\nThen running the following:\n\n```\njava -jar closure-stylesheets.jar bleeding-edge.gss\n```\n\nwould yield the following error:\n\n```\n-webkit-amp-volume is an unrecognized property in bleeding-edge.gss at line 3 column 3:\n  -webkit-amp-volume: 11;\n  ^\n\n1 error(s)\n```\n\nYou can whitelist `-webkit-amp-volume` with the\n**`--allowed-unrecognized-property`** flag as follows:\n\n```\njava -jar closure-stylesheets.jar \\\\\n    --allowed-unrecognized-property -webkit-amp-volume bleeding-edge.gss\n```\n\nLike `--allowed-non-standard-function`, `--allowed-unrecognized-property` may be\nspecified multiple times, once for each property to whitelist. We discourage\nusing the blanket `--allow-unrecognized-properties` because it lets through\neverything, including simple spelling mistakes.\n\nNote that some recognized properties will emit warnings. These warnings will not\nbe silenced with the `--allowed-unrecognized-property` flag.\n\n### RTL Flipping\n\nClosure Stylesheets has support for generating left-to-right (LTR) as well as\nright-to-left (RTL) stylesheets. By default, LTR is the assumed directionality\nfor both the input and output, though those settings can be overridden by\n**`--input-orientation`** and **`--output-orientation`**, respectively.\n\nFor example, consider the following stylesheet, **`rtl-example.gss`**, which is\ndesigned for an LTR page:\n\n```css\n.logo {\n  margin-left: 10px;\n}\n\n.shortcut_accelerator {\n  /* Keyboard shortcuts are untranslated; always left-to-right. */\n  /* @noflip */ direction: ltr;\n  border-right:\\t2px solid #ccc;\n  padding: 0 2px 0 4px;\n}\n```\n\nGenerating the equivalent stylesheet to use on an RTL version of the page can be\nachieved by running **`java -jar closure-stylesheets.jar --pretty-print\n--output-orientation RTL rtl-example.gss`**, which prints:\n\n```css\n.logo {\n  margin-right: 10px;\n}\n.shortcut_accelerator {\n  direction: ltr;\n  border-left: 2px solid #ccc;\n  padding: 0 4px 0 2px;\n}\n```\n\nNote how the following properties were changed:\n  * **`margin-left`** became **`margin-right`**\n  * **`border-right`** became **`border-left`**\n  * The right and left values of **`padding`** were flipped.\n\nHowever, the **`direction`** property was unchanged because of the special\n**`@noflip`** annotation. The annotation may also appear on the line before the\nproperty instead of alongside it:\n\n```css\n  /* @noflip */\n  direction: ltr;\n```\n\n### Renaming\n\nClosure Stylesheets makes it possible to rename CSS class names in the generated\nstylesheet, which helps reduce the size of the CSS that is sent down to your\nusers. Of course, this is not particularly useful unless the class names are\nrenamed consistently in the HTML and JavaScript files that use the\nCSS. Fortunately, you can use the\n[Closure Compiler](https://developers.google.com/closure/compiler/) to update the class\nnames in your JavaScript and\n[Closure Templates](https://developers.google.com/closure/templates/) to update the\nclass names in your HTML.\n\nTo get the benefits of CSS renaming in Closure, instead of referencing a CSS\nclass name as a string literal, you must use that string literal as an argument\nto `goog.getCssName()`:\n\n```javascript\n// Do the following instead of goog.dom.getElementByClass('dialog-content'):\nvar element = goog.dom.getElementByClass(goog.getCssName('dialog-content'));\n```\n\nSimilarly, in a Closure Template, you must wrap references to CSS classes with\nthe\n[css command](https://developers.google.com/closure/templates/docs/commands#css):\n\n```html\n{namespace example}\n\n/**\n * @param title\n */\n{template .dialog}\n<div class=\\\"{css('dialog-content')}\\\">\n  <div class=\\\"{css('dialog-title')}\\\">{$title}</title>\n  {call .content data=\\\"all\\\" /}\n</div>\n{/template}\n```\n\nWhen you generate the JavaScript for the template, be sure to use the\n`--cssHandlingScheme GOOG` option with `SoyToJsSrcCompiler`. This ensures that\nthe generated JavaScript code will also use `goog.getCssName()`. For example, if\nthe above were named **`dialog.soy`**, then the following command would be used\nto create **`dialog.soy.js`**:\n\n```\njava -jar SoyToJsSrcCompiler.jar \\\\\n    --shouldProvideRequireSoyNamespaces \\\\\n    --codeStyle concat \\\\\n    --cssHandlingScheme GOOG \\\\\n    --outputPathFormat '{INPUT_FILE_NAME_NO_EXT}.soy.js' \\\\\n    dialog.soy\n```\n\nThe contents of the generated **`dialog.soy.js`** file are:\n\n```javascript\n// This file was automatically generated from dialog.soy.\n// Please don't edit this file by hand.\n\ngoog.provide('example');\n\ngoog.require('soy');\ngoog.require('example');\n\n\nexample.dialog = function(opt_data) {\n  return '<div class=\\\"' + goog.getCssName('dialog-content') + '\\\"><div class=\\\"' +\n      goog.getCssName('dialog-title') + '\\\">' + soy.$$escapeHtml(opt_data.title) +\n      '</title>' + example.content(opt_data) + '</div>';\n};\n```\n\nNote the uses of `goog.getCssName()` in the generated JavaScript file.\n\nNow that all references to CSS class names are wrapped in `goog.getCssName()`,\nit is possible to leverage renaming. By default, `goog.getCssName()` simply\nreturns the argument that was passed to it, so no renaming is done unless a\n_renaming map_ has been set.\n\nWhen running Closure Library code without processing it with the Closure\nCompiler, it is possible to set a renaming map by defining a global variable\nnamed `CLOSURE_CSS_NAME_MAPPING` in JavaScript code that is loaded before the\nClosure Library's `base.js` file. For example, if you defined your CSS in a file\nnamed **`dialog.gss`**:\n\n```css\n.dialog-content {\n  padding: 10px;\n}\n\n.dialog-title {\n  font-weight: bold;\n}\n```\n\nThen you would run the following command to generate a stylesheet\n(**`dialog.css`**) with renamed classes, as well as the mapping data as a\nJavaScript file (**`renaming_map.js`**):\n\n```\njava -jar closure-stylesheets.jar \\\\\n    --pretty-print \\\\\n    --output-file dialog.css \\\\\n    --output-renaming-map-format CLOSURE_UNCOMPILED \\\\\n    --rename CLOSURE \\\\\n    --output-renaming-map renaming_map.js \\\\\n    dialog.gss\n```\n\nThe generated **`dialog.css`** would be as follows:\n\n```css\n.a-b {\n  padding: 10px;\n}\n.a-c {\n  font-weight: bold;\n}\n```\n\nwhile the generated **`renaming_map.js`** would be:\n\n```javascript\nCLOSURE_CSS_NAME_MAPPING = {\n  \\\"dialog\\\": \\\"a\\\",\n  \\\"content\\\": \\\"b\\\",\n  \\\"title\\\": \\\"c\\\"\n};\n```\n\nAn HTML file that uses the renaming map must be sure to include both the\ngenerated stylesheet with renamed class names as well as the renaming map:\n\n```html\n<!doctype html>\n<html>\n<head>\n  <link rel=\\\"stylesheet\\\" href=\\\"dialog.css\\\" type=\\\"text/css\\\">\n</head>\n<body>\n\n  <script src=\\\"renaming_map.js\\\"></script>\n  <script src=\\\"path/to/base.js\\\"></script>\n  <script>\n    goog.require('example');\n  </script>\n  <script>\n    // Your application logic that uses example.dialog() and other code.\n  </script>\n\n</body>\n</html>\n```\n\nThis ensures that when **`goog.getCssName('dialog-content')`** is called, it\nreturns **`'a-b'`**. In this way, the abbreviated name is used in place of the\noriginal name throughout the code.\n\nAn astute reader will note that so far, we have reduced only the size of the\nstylesheet, but not the JavaScript. To reduce the size of the JavaScript code,\nwe must use the [Closure Compiler](https://developers.google.com/closure/compiler/) in\neither\n[SIMPLE or ADVANCED](https://developers.google.com/closure/compiler/docs/compilation_levels)\nmode with the **`--process_closure_primitives`** flag enabled (it is enabled by\ndefault). When enabled, if it finds a call to **`goog.setCssNameMapping()`** in\nany of its inputs, it will use the argument to `goog.setCssNameMapping()` as the\nbasis of a renaming map that is applied at compile time. To create the\nappropriate renaming map with Closure Stylesheets, use **`CLOSURE_COMPILED`** as\nthe argument to **`--output-renaming-map-format`**:\n\n```\njava -jar closure-stylesheets.jar \\\\\n    --pretty-print \\\\\n    --output-file dialog.css \\\\\n    --output-renaming-map-format CLOSURE_COMPILED \\\\\n    --rename CLOSURE \\\\\n    --output-renaming-map renaming_map.js \\\\\n    dialog.gss\n```\n\nThis yields the following content for **`renaming_map.js`**:\n\n```javascript\ngoog.setCssNameMapping({\n  \\\"dialog\\\": \\\"a\\\",\n  \\\"content\\\": \\\"b\\\",\n  \\\"title\\\": \\\"c\\\"\n});\n```\n\nNow **`renaming_map.js`** is a suitable input for the Closure Compiler. Recall\nour original snippet of JavaScript code:\n\n```javascript\nvar element = goog.dom.getElementByClass(goog.getCssName('dialog-content'));\n```\n\nIf passed to the Closure Compiler in SIMPLE mode along with\n**`renaming_map.js`**, it will be transformed to the following after\ncompilation:\n\n```javascript\nvar element = goog.dom.getElementByClass(\\\"a-b\\\");\n```\n\nThis achieves the goal of reducing both CSS and JS file sizes without changing\nthe behavior of the application.\n\nAdmittedly, using CSS renaming is a fairly advanced option that requires a\nwell-organized build system to ensure that the appropriate CSS and JS assets are\nproduced for both development and production. See MoreOnCssRenaming for more\ndetails on this topic.\n\n**Note:** it is also possible to exclude certain class names from being renamed\nby using the **`--excluded_classes_from_renaming`** flag. This may be necessary\nif some of your HTML is generated by a process that does not take CSS renaming\ninto account. For example, if you are using a Python Django server and are using\nits template system, then any CSS classes used in those templates will not be\nrenamed (unless you introduce a process to do so). In order to ensure that the\nJS and CSS that use the HTML reference CSS classes consistently, each CSS class\nin the Django template should be passed as an argument to Closure Stylesheets\nwith the **`--excluded_classes_from_renaming`** flag when generating the CSS.\n\nReferences to CSS class names that are excluded from renaming should _never_ be\nwrapped in `goog.getCssName()`, or else they run the risk of being partially\nrenamed."
}
