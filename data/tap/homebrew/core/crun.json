{
  "name": "crun",
  "full_name": "crun",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Fast and lightweight fully featured OCI runtime and C library",
  "license": "GPL-2.0-or-later or LGPL-2.1-or-later",
  "homepage": "https://github.com/containers/crun",
  "versions": {
    "stable": "1.8.6",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/containers/crun/releases/download/1.8.6/crun-1.8.6.tar.xz",
      "tag": null,
      "revision": null,
      "checksum": "1808235641932a89efc42756db7774e1337c130ed8307b8b588542ca372d9467"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/crun/blobs/sha256:b96e19179ed452a93fdb5caa1d4b284c9c6645978651aafd332fec085476a894",
          "sha256": "b96e19179ed452a93fdb5caa1d4b284c9c6645978651aafd332fec085476a894"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "autoconf",
    "automake",
    "go-md2man",
    "libtool",
    "pkg-config",
    "python@3.11"
  ],
  "dependencies": [
    "libcap",
    "libseccomp",
    "systemd",
    "yajl"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [
    {
      "name": "linux",
      "cask": null,
      "download": null,
      "version": null,
      "contexts": [],
      "specs": [
        "stable"
      ]
    }
  ],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/crun.rb",
  "ruby_source_checksum": {
    "sha256": "78e7f5522a0cb35d823146fbe6e2146e20d3c985211a523578095fe44ec8631e"
  },
  "date_added": "2021-07-16T05:35:29+00:00",
  "readme": "<p align=\"center\">\n  <img src=\"docs/crun.svg\" width=\"450\" height=\"450\">\n</p>\n\n[![Coverity Status](https://scan.coverity.com/projects/17787/badge.svg)](https://scan.coverity.com/projects/giuseppe-crun)\n[![CodeQL](https://github.com/containers/crun/workflows/CodeQL/badge.svg)](https://github.com/containers/crun/actions?query=workflow%3ACodeQL)\n\nA fast and low-memory footprint OCI Container Runtime fully written in\nC.\n\ncrun conforms to the OCI Container Runtime specifications\n(<https://github.com/opencontainers/runtime-spec>).\n\n## Documentation\n\nThe user documentation is available [here](crun.1.md).\n\n## Why another implementation?\n\nWhile most of the tools used in the Linux containers ecosystem are\nwritten in Go, I believe C is a better fit for a lower level tool like a\ncontainer runtime. runc, the most used implementation of the OCI runtime\nspecs written in Go, re-execs itself and use a module written in C for\nsetting up the environment before the container process starts.\n\ncrun aims to be also usable as a library that can be easily included in\nprograms without requiring an external process for managing OCI\ncontainers.\n\n## Performance\n\ncrun is faster than runc and has a much lower memory footprint.\n\nThis is the elapsed time on my machine for running sequentially 100\ncontainers, the containers run `/bin/true`:\n\n|               |    crun |   runc |       % |\n| ------------- | ------: | -----: | ------: |\n| 100 /bin/true | 0:01.69 | 0:3.34 | \\-49.4% |\n\ncrun requires fewer resources, so it is also possible to set stricter\nlimits on the memory allowed in the container:\n\n```console\n# podman --runtime /usr/bin/runc run --rm --memory 4M fedora echo it works\nError: container_linux.go:346: starting container process caused \"process_linux.go:327: getting pipe fds for pid 13859 caused \\\"readlink /proc/13859/fd/0: no such file or directory\\\"\": OCI runtime command not found error\n\n# podman --runtime /usr/bin/crun run --rm --memory 4M fedora echo it works\nit works\n```\n\ncrun could go much lower than that, and require \\< 1M. The used 4MB is a\nhard limit set directly in Podman before calling the OCI runtime.\n\n## Dependencies\n\nThese dependencies are required for the build:\n\n### Fedora\n\n```console\n$ sudo dnf install -y make python git gcc automake autoconf libcap-devel \\\n    systemd-devel yajl-devel libseccomp-devel pkg-config libgcrypt-devel \\\n    go-md2man glibc-static python3-libmount libtool\n```\n\n### RHEL/CentOS 8\n\n```console\n$ sudo yum --enablerepo='*' --disablerepo='media-*' install -y make automake \\\n    autoconf gettext \\\n    libtool gcc libcap-devel systemd-devel yajl-devel libgcrypt-devel \\\n    glibc-static libseccomp-devel python36 git\n```\n\ngo-md2man is not available on RHEL/CentOS 8, so if you'd like to build\nthe man page, you also need to manually install go-md2man. It can be\ninstalled with:\n\n```console\n$ sudo yum --enablerepo='*' install -y golang\n$ export GOPATH=$HOME/go\n$ go get github.com/cpuguy83/go-md2man\n$ export PATH=$PATH:$GOPATH/bin\n```\n\n### Ubuntu\n\n```console\n$ sudo apt-get install -y make git gcc build-essential pkgconf libtool \\\n   libsystemd-dev libprotobuf-c-dev libcap-dev libseccomp-dev libyajl-dev \\\n   libgcrypt20-dev go-md2man autoconf python3 automake\n```\n\n### Alpine\n\n```console\n# apk add gcc automake autoconf libtool gettext pkgconf git make musl-dev \\\n    python3 libcap-dev libseccomp-dev yajl-dev argp-standalone go-md2man\n```\n\n### Tumbleweed\n\n```console\n# zypper install make automake autoconf gettext libtool gcc libcap-devel \\\nsystemd-devel libyajl-devel libseccomp-devel python3 go-md2man \\\nglibc-static;\n```\n\nNote that Tumbleweed requires you to specify libseccomp's header file location\nas a compiler flag.\n\n```console\n# ./autogen.sh\n# ./configure CFLAGS='-I/usr/include/libseccomp'\n# make\n```\n\n## Build\n\nUnless you are also building the Python bindings, Python is needed only\nby libocispec to generate the C parser at build time, it won't be used\nafterwards.\n\nOnce all the dependencies are installed:\n\n```console\n$ ./autogen.sh\n$ ./configure\n$ make\n```\n\nTo install into default PREFIX (`/usr/local`):\n\n```console\n$ sudo make install\n```\n\n### Shared Libraries\n\nThe previous build instructions do not enable shared libraries, therefore you will be unable to use libcrun. If you wish to build the shared libraries you can change the previous `./configure` statement to `./configure --enable-shared`.\n\n## Static build\n\nIt is possible to build a statically linked binary of crun by using the\nofficially provided\n[nix](https://nixos.org/nixos/packages.html?attr=crun&channel=nixpkgs-unstable&query=crun)\npackage and the derivation of it [within this repository](nix/). The\nbuilds are completely reproducible and will create a x86\\_64/amd64\nstripped ELF binary for [glibc](https://www.gnu.org/software/libc).\n\n### Nix\n\nTo build the binaries by locally installing the nix package manager:\n\n```console\n$ curl -L https://nixos.org/nix/install | sh\n$ git clone --recursive https://github.com/containers/crun.git && cd crun\n$ nix build -f nix/\n$ ./result/bin/crun --version\n```\n\n### Ansible\n\nAn [Ansible Role](https://github.com/alvistack/ansible-role-crun) is\nalso available to automate the installation of the above statically\nlinked binary on its supported OS:\n\n```console\n$ sudo su -\n# mkdir -p ~/.ansible/roles\n# cd ~/.ansible/roles\n# git clone https://github.com/alvistack/ansible-role-crun.git crun\n# cd ~/.ansible/roles/crun\n# pip3 install --upgrade --ignore-installed --requirement requirements.txt\n# molecule converge\n# molecule verify\n```\n\n## Lua bindings\n\nA Lua binding is available. See [the README](lua/README.md) for more information."
}
