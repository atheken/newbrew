{
  "name": "crane",
  "full_name": "crane",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Tool for interacting with remote images and registries",
  "license": "Apache-2.0",
  "homepage": "https://github.com/google/go-containerregistry",
  "versions": {
    "stable": "0.15.2",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/google/go-containerregistry/archive/v0.15.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "9bebb3c42666bf082d7639cfe38295f2572f387b78bfaa1da8f8cd1e5bbb1060"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/crane/blobs/sha256:ca0e5626f8f7299ae25515eb484fa3bc3b933dc59955607e8607d83e069a5376",
          "sha256": "ca0e5626f8f7299ae25515eb484fa3bc3b933dc59955607e8607d83e069a5376"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/crane/blobs/sha256:ca0e5626f8f7299ae25515eb484fa3bc3b933dc59955607e8607d83e069a5376",
          "sha256": "ca0e5626f8f7299ae25515eb484fa3bc3b933dc59955607e8607d83e069a5376"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/crane/blobs/sha256:ca0e5626f8f7299ae25515eb484fa3bc3b933dc59955607e8607d83e069a5376",
          "sha256": "ca0e5626f8f7299ae25515eb484fa3bc3b933dc59955607e8607d83e069a5376"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/crane/blobs/sha256:b1d56c4a2311b2e65a3074be00dfce5184de2c9d2faa5985232fec9f5a539ac3",
          "sha256": "b1d56c4a2311b2e65a3074be00dfce5184de2c9d2faa5985232fec9f5a539ac3"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/crane/blobs/sha256:b1d56c4a2311b2e65a3074be00dfce5184de2c9d2faa5985232fec9f5a539ac3",
          "sha256": "b1d56c4a2311b2e65a3074be00dfce5184de2c9d2faa5985232fec9f5a539ac3"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/crane/blobs/sha256:b1d56c4a2311b2e65a3074be00dfce5184de2c9d2faa5985232fec9f5a539ac3",
          "sha256": "b1d56c4a2311b2e65a3074be00dfce5184de2c9d2faa5985232fec9f5a539ac3"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/crane/blobs/sha256:b81e001fac4b7e116dc9e91eb0808b36b2c861ff28488da4653059fe84b779d3",
          "sha256": "b81e001fac4b7e116dc9e91eb0808b36b2c861ff28488da4653059fe84b779d3"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/crane.rb",
  "ruby_source_checksum": {
    "sha256": "9cecb40d0fd0c80fa61336eb94595065efbfa427fda80d1713eced6ccf9e20c0"
  },
  "date_added": "2021-01-19T08:42:06+00:00",
  "readme": "# go-containerregistry\n\n[![GitHub Actions Build Status](https://github.com/google/go-containerregistry/workflows/Build/badge.svg)](https://github.com/google/go-containerregistry/actions?query=workflow%3ABuild)\n[![GoDoc](https://godoc.org/github.com/google/go-containerregistry?status.svg)](https://godoc.org/github.com/google/go-containerregistry)\n[![Code Coverage](https://codecov.io/gh/google/go-containerregistry/branch/main/graph/badge.svg)](https://codecov.io/gh/google/go-containerregistry)\n\n## Introduction\n\nThis is a golang library for working with container registries.\nIt's largely based on the [Python library of the same name](https://github.com/google/containerregistry).\n\nThe following diagram shows the main types that this library handles.\n![OCI image representation](images/ociimage.jpeg)\n\n## Philosophy\n\nThe overarching design philosophy of this library is to define interfaces that present an immutable\nview of resources (e.g. [`Image`](https://godoc.org/github.com/google/go-containerregistry/pkg/v1#Image),\n[`Layer`](https://godoc.org/github.com/google/go-containerregistry/pkg/v1#Layer),\n[`ImageIndex`](https://godoc.org/github.com/google/go-containerregistry/pkg/v1#ImageIndex)),\nwhich can be backed by a variety of medium (e.g. [registry](./pkg/v1/remote/README.md),\n[tarball](./pkg/v1/tarball/README.md), [daemon](./pkg/v1/daemon/README.md), ...).\n\nTo complement these immutable views, we support functional mutations that produce new immutable views\nof the resulting resource (e.g. [mutate](./pkg/v1/mutate/README.md)).  The end goal is to provide a\nset of versatile primitives that can compose to do extraordinarily powerful things efficiently and easily.\n\nBoth the resource views and mutations may be lazy, eager, memoizing, etc, and most are optimized\nfor common paths based on the tooling we have seen in the wild (e.g. writing new images from disk\nto the registry as a compressed tarball).\n\n\n### Experiments\n\nOver time, we will add new functionality under experimental environment variables listed here.\n\n| Env Var | Value(s) | What is does |\n|---------|----------|--------------|\n| `GGCR_EXPERIMENT_ESTARGZ` | `\"1\"` | ⚠️DEPRECATED⚠️: When enabled this experiment will direct `tarball.LayerFromOpener` to emit [estargz](https://github.com/opencontainers/image-spec/issues/815) compatible layers, which enable them to be lazily loaded by an appropriately configured containerd. |\n\n\n### `v1.Image`\n\n#### Sources\n\n* [`remote.Image`](https://godoc.org/github.com/google/go-containerregistry/pkg/v1/remote#Image)\n* [`tarball.Image`](https://godoc.org/github.com/google/go-containerregistry/pkg/v1/tarball#Image)\n* [`daemon.Image`](https://godoc.org/github.com/google/go-containerregistry/pkg/v1/daemon#Image)\n* [`layout.Image`](https://godoc.org/github.com/google/go-containerregistry/pkg/v1/layout#Path.Image)\n* [`random.Image`](https://godoc.org/github.com/google/go-containerregistry/pkg/v1/random#Image)\n\n#### Sinks\n\n* [`remote.Write`](https://godoc.org/github.com/google/go-containerregistry/pkg/v1/remote#Write)\n* [`tarball.Write`](https://godoc.org/github.com/google/go-containerregistry/pkg/v1/tarball#Write)\n* [`daemon.Write`](https://godoc.org/github.com/google/go-containerregistry/pkg/v1/daemon#Write)\n* [`legacy/tarball.Write`](https://godoc.org/github.com/google/go-containerregistry/pkg/legacy/tarball#Write)\n* [`layout.AppendImage`](https://godoc.org/github.com/google/go-containerregistry/pkg/v1/layout#Path.AppendImage)\n\n### `v1.ImageIndex`\n\n#### Sources\n\n* [`remote.Index`](https://godoc.org/github.com/google/go-containerregistry/pkg/v1/remote#Index)\n* [`random.Index`](https://godoc.org/github.com/google/go-containerregistry/pkg/v1/random#Index)\n* [`layout.ImageIndexFromPath`](https://godoc.org/github.com/google/go-containerregistry/pkg/v1/layout#ImageIndexFromPath)\n\n#### Sinks\n\n* [`remote.WriteIndex`](https://godoc.org/github.com/google/go-containerregistry/pkg/v1/remote#WriteIndex)\n* [`layout.Write`](https://godoc.org/github.com/google/go-containerregistry/pkg/v1/layout#Write)\n\n### `v1.Layer`\n\n#### Sources\n\n* [`remote.Layer`](https://godoc.org/github.com/google/go-containerregistry/pkg/v1/remote#Layer)\n* [`tarball.LayerFromFile`](https://godoc.org/github.com/google/go-containerregistry/pkg/v1/tarball#LayerFromFile)\n* [`random.Layer`](https://godoc.org/github.com/google/go-containerregistry/pkg/v1/random#Layer)\n* [`stream.Layer`](https://godoc.org/github.com/google/go-containerregistry/pkg/v1/stream#Layer)\n\n#### Sinks\n\n* [`remote.WriteLayer`](https://godoc.org/github.com/google/go-containerregistry/pkg/v1/remote#WriteLayer)\n\n## Overview\n\n### `mutate`\n\nThe simplest use for these libraries is to read from one source and write to another.\n\nFor example,\n\n * `crane pull` is `remote.Image -> tarball.Write`,\n * `crane push` is `tarball.Image -> remote.Write`,\n * `crane cp` is `remote.Image -> remote.Write`.\n\nHowever, often you actually want to _change something_ about an image.\nThis is the purpose of the [`mutate`](pkg/v1/mutate) package, which exposes\nsome commonly useful things to change about an image.\n\n### `partial`\n\nIf you're trying to use this library with a different source or sink than it already supports,\nit can be somewhat cumbersome. The `Image` and `Layer` interfaces are pretty wide, with a lot\nof redundant information. This is somewhat by design, because we want to expose this information\nas efficiently as possible where we can, but again it is a pain to implement yourself.\n\nThe purpose of the [`partial`](pkg/v1/partial) package is to make implementing a `v1.Image`\nmuch easier, by filling in all the derived accessors for you if you implement a minimal\nsubset of `v1.Image`.\n\n### `transport`\n\nYou might think our abstractions are bad and you just want to authenticate\nand send requests to a registry.\n\nThis is the purpose of the [`transport`](pkg/v1/remote/transport) and [`authn`](pkg/authn) packages.\n\n## Tools\n\nThis repo hosts some tools built on top of the library.\n\n### `crane`\n\n[`crane`](cmd/crane/README.md) is a tool for interacting with remote images\nand registries.\n\n### `gcrane`\n\n[`gcrane`](cmd/gcrane/README.md) is a GCR-specific variant of `crane` that has\nricher output for the `ls` subcommand and some basic garbage collection support.\n\n### `krane`\n\n[`krane`](cmd/krane/README.md) is a drop-in replacement for `crane` that supports\ncommon Kubernetes-based workload identity mechanisms using [`k8schain`](#k8schain)\nas a fallback to traditional authentication mechanisms.\n\n### `k8schain`\n\n[`k8schain`](pkg/authn/k8schain/README.md) implements the authentication\nsemantics used by kubelets in a way that is easily consumable by this library.\n\n`k8schain` is not a standalone tool, but it is linked here for visibility.\n\n### Emeritus: [`ko`](https://github.com/google/ko)\n\nThis tool was originally developed in this repo but has since been moved to its\nown repo."
}
