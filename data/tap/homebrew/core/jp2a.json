{
  "name": "jp2a",
  "full_name": "jp2a",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Convert JPG images to ASCII",
  "license": "GPL-2.0-or-later",
  "homepage": "https://github.com/Talinx/jp2a",
  "versions": {
    "stable": "1.1.1",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/Talinx/jp2a/releases/download/v1.1.1/jp2a-1.1.1.tar.bz2",
      "tag": null,
      "revision": null,
      "checksum": "3b91f26f79eca4e963b1b1ae2473722a706bf642218f20bfe4ade5333aebb106"
    }
  },
  "revision": 0,
  "version_scheme": 1,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/jp2a/blobs/sha256:4e250080a0acfad041dd4ab5246745289b412b70bde5e5faf5a5a7772c77ac5c",
          "sha256": "4e250080a0acfad041dd4ab5246745289b412b70bde5e5faf5a5a7772c77ac5c"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/jp2a/blobs/sha256:6671f5e26d2f10f2babad8e13f87e554b774e033c7c990bff7f832084af26e80",
          "sha256": "6671f5e26d2f10f2babad8e13f87e554b774e033c7c990bff7f832084af26e80"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/jp2a/blobs/sha256:4f40ed84caf4c25b97d185bcfbf0ac9a02be69b92476568627c429faa4360e63",
          "sha256": "4f40ed84caf4c25b97d185bcfbf0ac9a02be69b92476568627c429faa4360e63"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/jp2a/blobs/sha256:cda95f11e31d42ef0489ad9b7e3a42fcd1689214b97809ba8d4117c3797e38bf",
          "sha256": "cda95f11e31d42ef0489ad9b7e3a42fcd1689214b97809ba8d4117c3797e38bf"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/jp2a/blobs/sha256:c3cdaa3c306dd0b8ca5ea9af175748274f651778f01126ad2e31efc8c8edcff7",
          "sha256": "c3cdaa3c306dd0b8ca5ea9af175748274f651778f01126ad2e31efc8c8edcff7"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/jp2a/blobs/sha256:145e3daceb2d06c33703e0897d40838cde1236a09ca84ca25b7c2fad5682dfed",
          "sha256": "145e3daceb2d06c33703e0897d40838cde1236a09ca84ca25b7c2fad5682dfed"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/jp2a/blobs/sha256:1f0de0b9e6c0216bd53dd2bb7a978f29caa841cc3bdddaad9ddd8a3d7b1797b8",
          "sha256": "1f0de0b9e6c0216bd53dd2bb7a978f29caa841cc3bdddaad9ddd8a3d7b1797b8"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "jpeg-turbo",
    "libpng"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/jp2a.rb",
  "ruby_source_checksum": {
    "sha256": "a7e1375661e2e3f340641f8787bbd9ffef99868336a026782030937a8e5614ba"
  },
  "date_added": "2011-10-03T18:49:34-07:00",
  "readme": "jp2a\n====\n\n![full-check](https://github.com/Talinx/jp2a/workflows/full-check/badge.svg?branch=master)\n\n\njp2a is a simple JPEG/PNG to ASCII converter.\n\nThe source is available at <https://github.com/Talinx/jp2a>. This project\nused to be hosted on SourceForge.\n\nLicense\n-------\n\nCopyright 2006-2016 Christian Stigen Larsen and 2020 Christoph Raitzig  \nDistributed under the GNU General Public License v2.\n\nYou can read the full license in the file COPYING.  jp2a also uses other\nlibraries.  These licenses can be found in the file LICENSES.\n\nExample: Oswald the lucky rabbit\n--------------------------------\n                                                                 ......\n                                                         .:lOKMMMMMMMMMM0l\n                                                    .;dOMMMMMMMMMMMMMMMMMMW.\n                                                .ckWMMMMMMMMMMMMMMMMMMMMMMMO\n                                             .dXMMMMMMMMMMMMMMMMMMMMMMMMMMO\n                                          .xWMMMMMMMMMMMMMMMMMMMMMMMMMMO:.\n                                        lXMMMMMMMMMMMMMMMMMMMMMWOOxc'\n                    .;lxOOOOOxdl:.    cMMMMMMMMMMMMMMMMWKklc'..\n                'llc..   ..:oMMMMMMKxNMMMMMMMMMM0kl:'.\n              :0'             cMMMMMMMMMMMMWd'.\n            .K:l0              .MMMMMMMMMMl.\n           ,K    W              ,MMMMMMMMMMMMN0dl'\n           M.    M               MMMMMMMMMMMMMMMMMMKx:.\n          cMMK                   WMMMMMMMMMMMMMMMMMMMMMXd'\n          NMMM:                  MMMMMMMMMMMXWMMMMMMMMMMMMNd'\n          KMMMW                  MMMMMMMMMMM' ;XMMMMMMMMMMMMMWd'\n           MMMM                 XMMMMMMMMMMM    dMMMMMMMMMMMMMMMNc\n      ''   NMKWl'             .KMMMMMMMMMMM'     :MMMMMMMMMMMMMMMMMd\n     KMWMKOk    '           ,lXMMMMMMMMMMM;       .KMMMMMMMMMMMMMMMM0\n     KMMMMM.                    .cOMMMMMW'          kMMMMMMMMMMMMMMMMX\n      cOXMNXl.            ......   .MWd. .0cc:'      .NMMMMMMMMMMMMMMMk\n            .cololoxKWWWXWMMMMMMM:  M   c:. .l0ok      oMMMMMMMMMMMMMMM\n                      .'Mo,MMMMNk:lO' :l  .OMMMMl       .OMMMMMMMMMMMMN\n                       X0'OkxkxOK;.  :: ,.XMMMMMMO    :O   lXMMMMMMMMk\n                        kc,,o0M0.:;c'N  ko;lMMMMMM:'xMMMNWKO,.clxdl:.\n                       ;00xkM:d ,   ..     oMMMMMM cMMMMMMMMl\n                       c   N0l       .  .l:;;oKMMk  MMMMMMMMM0\n                       O   ,.ocOc..l..k'   .:c;'O   0MMMMMMMX.\n                      X     N..l  .c           K.   OMMMMMMM\n                     .'     c.     :           M .  OMMM0,.;\n                    :,   N.;W       ;          O...o .,.\n                    d    M  ;X'     :l             :\n                    d..':. lcKol,,,,'.:c,,'.cd;'o,'.\n                      . ;:,WMMMMMMXx,; M0XXNNWM.\n                           MMMMMMMM   .MMMMMMMM\n                           MMMMMMMM   .MMMMMMMM.\n                          :ONMMMMMM0:':MMMMMMMMM:\n                ;c:,'',::lX'  '',''   .MMMMMMMMMMWK:c:\n               x.          .lloc;.',lxl..lKMMMMMKl   M\n              0           .;,;'......;::c'  ..     ;dl;l'\n             ;O:        .d'              .lkk::::;,     'k\n             N.'oc'.    M                   :            X\n              lo:. ',::xN:                             .x0'\n                .,lccccM .ll,.                . ;;:::;c'.0\n                       .kl.  .c::lcccccc:cc::;  .''clccl.\n                          'lcl:lc::,,'::cc:cc:c,..\n\nThe Oswald character is Copyright Walt Disney, and, unfortunately, not in the\npublic domain.  However, I believe that I can use this picture under the fair\nuse clause, for demonstrational purposes, especially in low-resolution, ASCII\nformat. If I am wrong, I will promptly remove it.\n\nInstallation\n------------\n\nLook in your system's package manager. I don't maintain Windows binaries\nanymore.\n\nDocker\n------\n\nYou can run jp2a using [Docker](https://www.docker.com/):\n```\ndocker run -t --rm -e COLORTERM=\"$COLORTERM\" -v \"$(pwd)\":/app talinx/jp2a [options] <filenames or URLs>\n```\nSee [hub.docker.com/r/talinx/jp2a](https://hub.docker.com/r/talinx/jp2a) for details.\n\nBuilding\n--------\n\n`jp2a` can be compiled as usual: `./configure && make && make install`\n\nIf you want to compile after cloning the git repo (i.e. generate the `configure` script yourself), you need autotools, automake and autoconf-archive. You may need to specify the path to jpeglib. I usually just do\n\n    autoreconf -vi\n    ./configure --with-jpeg-prefix=/usr/local \\\n                --with-curl-config=`which curl-config`\n    make -j\n\nBefore installing, you may want to check that jp2a works by running `src/jp2a`\non some `.jpg` and `.png` files. You can also use `make check`. When you're ready to install,\n\n    make -j install\n\nExtract the archive and follow the instructions inside 'install.txt' to build and\ninstall it. For a default install, the corresponding `.so` (shared object) files\nwill be present in `/usr/local/lib/`\n\nNext, run the command `ldconfig` (escalated privileges may be required) to configure dynamic linker run-time bindings. See\nits man page for more details. The configure command should work after that.\n\nIf configure can't automatically find jpeglib, specify with\n\n    ./configure --with-jpeg-include=PATH --with-jpeg-lib=PATH\n\nor you can just type the prefix\n\n    ./configure --with-jpeg-prefix=/usr/local/\n\nYou can also compile jp2a with libcurl, so it can automatically download images\nfrom the net:\n\n    ./configure --enable-curl\n\nThis will look for `curl-config` in $PATH, but you can specify it directly with\n`--with-curl-config=PATH` if you need to.\n\n### Runtime dependencies\n- [jpeglib](https://www.ijg.org/) or [libjpeg-turbo](https://libjpeg-turbo.org/)\n- [libpng](http://libpng.org/pub/png/libpng.html)\n- [curl](https://curl.haxx.se/) (optional)\n- [ncurses](https://invisible-island.net/ncurses/ncurses.html) (optional)\n\n### Build dependencies\n- make (e.g. [GNU Make](https://www.gnu.org/software/make/))\n- a C compiler like [gcc](https://gcc.gnu.org/)\n\nIf you generate the `configure` script yourself (i.e. run `autoreconf`) you also need these:\n\n- autotools\n- [automake](https://www.gnu.org/software/automake/)\n- [autoconf](https://www.gnu.org/software/autoconf/autoconf.html)\n- [autoconf-archive](https://www.gnu.org/software/autoconf-archive/)\n\nWindows\n-------\n\n### Cross compiling\n\nYou can cross compile.\n\n### WSL\n\nYou can use the Windows Subsystem for Linux.\n\n### Compile with `configure`\n\nThe `configure` script requires a Bourne shell, so you got to install one (e.g. Bash).\nThe easiest way is to install [Cygwin](https://cygwin.com/). Make sure to install the used libraries (curl, jpeglib, libpng, ncurses) as well as gcc and make.\nOpen Cygwin and proceed as usual: `./configure && make && make install`\n\nYou can also \"cross compile\" with Cygwin so that you get a binary that does not depend on Cygwin.\n\n### Compile without `configure`\n\nYou need a working jpeglib for Windows and set up include paths yourself.\nYou will need to manually type out a `config.h` file. Example:\n\n    WIN32\n    NDEBUG\n    _CONSOLE\n    PACKAGE_STRING=\\\"jp2a x.x.x-win32\\\"\n    PACKAGE_BUGREPORT=\\\"chris-r@posteo.net\\\"\n    HAVE_STRING_H\n    HAVE_STDLIB_H\n    FEAT_CURL\n    HAVE_CURL_CURL_H\n    CURL_STATICLIB\n    FEAT_TERMLIB\n\nYou need to add jpeg.lib to the linker. If you want libcurl support, you need\nthat as well. It should be available from https://curl.haxx.se"
}
