{
  "name": "jabba",
  "full_name": "jabba",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Cross-platform Java Version Manager",
  "license": "Apache-2.0",
  "homepage": "https://github.com/Jabba-Team/jabba",
  "versions": {
    "stable": "0.12.2",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/Jabba-Team/jabba/archive/0.12.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "44bd276fde1eaab56dc8a32ec409ba6eee5007f3a640951b3e8908c50f032bcd"
    },
    "head": {
      "url": "https://github.com/Jabba-Team/jabba.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/jabba/blobs/sha256:6a27f8c6f6c058bfbc5f98d6ad1037013c1849f80f4d05cda274fa8a8d1e6159",
          "sha256": "6a27f8c6f6c058bfbc5f98d6ad1037013c1849f80f4d05cda274fa8a8d1e6159"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/jabba/blobs/sha256:16c46cd77f9daea31252b1cc479ed71a598ba385a984a16fd8d4b33303b32808",
          "sha256": "16c46cd77f9daea31252b1cc479ed71a598ba385a984a16fd8d4b33303b32808"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/jabba/blobs/sha256:91ac15457375b816ee6b90ed999d105414463cae66df68db4829513f0324d386",
          "sha256": "91ac15457375b816ee6b90ed999d105414463cae66df68db4829513f0324d386"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/jabba/blobs/sha256:3faf882dd022a5691e5e7a1d3db04104bdc17d0674abe69a6ef7dc1405a44104",
          "sha256": "3faf882dd022a5691e5e7a1d3db04104bdc17d0674abe69a6ef7dc1405a44104"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/jabba/blobs/sha256:c3ecfed12f4067413173cdf391b9ba9b1e9e66eee20ed80ef32a58757167dde6",
          "sha256": "c3ecfed12f4067413173cdf391b9ba9b1e9e66eee20ed80ef32a58757167dde6"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/jabba/blobs/sha256:ef83f5290a46b7f0d121b1eccf40869b964b0a8134e6cdb033d2715719086e3e",
          "sha256": "ef83f5290a46b7f0d121b1eccf40869b964b0a8134e6cdb033d2715719086e3e"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/jabba/blobs/sha256:4e4532d576e0f24ee5b043b7a554569c3014a163f71a3cf2177ffa9ffc4026e2",
          "sha256": "4e4532d576e0f24ee5b043b7a554569c3014a163f71a3cf2177ffa9ffc4026e2"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": "Add the following line to your ~/.bashrc or ~/.zshrc file:\n  [ -s \"$HOMEBREW_PREFIX/opt/jabba/share/jabba/jabba.sh\" ] && . \"$HOMEBREW_PREFIX/opt/jabba/share/jabba/jabba.sh\"\n\nIf you use the Fish shell then add the following line to your ~/.config/fish/config.fish:\n  [ -s \"$HOMEBREW_PREFIX/opt/jabba/share/jabba/jabba.fish\" ]; and source \"$HOMEBREW_PREFIX/opt/jabba/share/jabba/jabba.fish\"\n",
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/jabba.rb",
  "ruby_source_checksum": {
    "sha256": "26c3d28fcceee644b717611669de91ab44d0f6f18707a107f3542f0b4ae9e568"
  },
  "date_added": "2017-11-02T14:40:38-04:00",
  "readme": "# jabba ![Latest Version](https://img.shields.io/badge/latest-0.12.1-blue.svg) [![Actions Status](https://github.com/Jabba-Team/jabba/workflows/make%20Jabba/badge.svg)](https://github.com/Jabba-Team/jabba/actions)\n\nJava Version Manager inspired by [nvm](https://github.com/creationix/nvm) (Node.js). Written in Go.\n\nThe goal is to provide unified pain-free experience of **installing** (and **switching** between different versions of) JDK regardless of\nthe OS (macOS, Linux x86/x86_64/ARMv7+, Windows x86_64). \n\nThis is a community fork of the [original project](https://github.com/shyiko/jabba) and is currently a work in progress. There may be some out of date instructions in the README, please bear with us while we get things going.\n\n`jabba install`\n\nThe JDK index is powered by [DiscoAPI](https://github.com/foojayio/discoapi) as such some of the JDK's may be named slightly differently from the old index\nThe index will give you the list of jdks for your OS and architecture \n\n- [Oracle JDK](http://www.oracle.com/technetwork/java/javase/archive-139210.html) (latest-version only)\n- [Oracle Server JRE](http://www.oracle.com/technetwork/java/javase/downloads/server-jre8-downloads-2133154.html) (latest-version only), \n- [Adopt OpenJDK](https://adoptopenjdk.net/) <sup>(jabba >=0.8.0 is required)</sup> \n  - Hotspot \n  - [Eclipse OpenJ9](https://www.eclipse.org/openj9/oj9_faq.html)\n- [Zulu OpenJDK](http://zulu.org/) <sup>(jabba >=0.3.0 is required)</sup>\n- [IBM SDK, Java Technology Edition](https://developer.ibm.com/javasdk/) <sup>(jabba >=0.6.0 is required)</sup> \n- [GraalVM CE](https://www.graalvm.org/)\n- [OpenJDK](http://openjdk.java.net/)\n- [OpenJDK Reference Implementation](http://openjdk.java.net/)\n- [OpenJDK with Shenandoah GC](https://wiki.openjdk.java.net/display/shenandoah/Main) <sup>(jabba >=0.10.0 is required)\n- [Liberica JDK](https://bell-sw.com/)\n- [Amazon Corretto](https://aws.amazon.com/corretto/)\n</sup>\n\n... and from custom URLs.\n\n## Installation\n\n#### macOS / Linux\n\n> (in bash/zsh/...)\n\n```sh\nexport JABBA_VERSION=...\ncurl -sL https://github.com/Jabba-Team/jabba/raw/main/install.sh | bash && . ~/.jabba/jabba.sh\n```\n\n> Use the same command to upgrade, you can also upgrade from shyiko's 0.11.2 by running this command\n\nThe script modifies common shell rc files by default. To skip these provide the `--skip-rc` flag to `install.sh` like so:\n\n```sh\nexport JABBA_VERSION=...\ncurl -sL https://github.com/Jabba-Team/jabba/raw/main/install.sh | bash -s -- --skip-rc && . ~/.jabba/jabba.sh\n```\n\nMake sure to source `jabba.sh` in your environment if you skip it:\n\n```sh\nexport JABBA_VERSION=...\n[ -s \"$JABBA_HOME/jabba.sh\" ] && source \"$JABBA_HOME/jabba.sh\"\n```\n\n> In [fish](https://fishshell.com/) command looks a little bit different -\n> export JABBA_VERSION=...\n`curl -sL https://github.com/Jabba-Team/jabba/raw/main/install.sh | bash; and . ~/.jabba/jabba.fish` \n\n> If you don't have `curl` installed - replace `curl -sL` with `wget -qO-`.\n\n> If you are behind a proxy see -\n[curl](https://curl.haxx.se/docs/manpage.html#ENVIRONMENT) / \n[wget](https://www.gnu.org/software/wget/manual/wget.html#Proxies) manpage. \nUsually simple `http_proxy=http://proxy-server:port https_proxy=http://proxy-server:port curl -sL ...` is enough. \n\n**NOTE**: The brew package currently points to 0.11.2 of shyiko's jabba.\n\n#### Docker\n\nWhile you can use the same snippet as above, chances are you don't want jabba binary & shell \nintegration script(s) to be included in the final Docker image, all you want is a JDK. Here is the `Dockerfile` showing how this can be done:\n\n```dockerfile\nFROM buildpack-deps:jessie-curl\n\nRUN curl -sL https://github.com/Jabba-Team/jabba/raw/main/install.sh | \\\n    JABBA_COMMAND=\"install 1.15.0 -o /jdk\" bash\n\nENV JAVA_HOME /jdk\nENV PATH $JAVA_HOME/bin:$PATH\n```\n\n> (when `JABBA_COMMAND` env variable is set `install.sh` downloads `jabba` binary, executes specified command and then deletes the binary)\n\n```sh\n$ docker build -t <image_name>:<image_tag> .\n$ docker run -it --rm <image_name>:<image_tag> java -version\n\njava version \"1.15.0....\n```\n\n#### Windows 10\n\n> (in powershell)\n\n```powershell\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nInvoke-Expression (\n  Invoke-WebRequest https://github.com/Jabba-Team/jabba/raw/main/install.ps1 -UseBasicParsing\n).Content\n```\n\n> Use the same command to upgrade, you can also upgrade from shyiko's 0.11.2 by running this command\n\n## Usage\n\n```sh\n# list available JDK's\njabba ls-remote\n# you can use any valid semver range to narrow down the list\njabba ls-remote zulu@~1.8.60\njabba ls-remote \"*@>=1.6.45 <1.9\" --latest=minor\n\n# install Oracle JDK\njabba install 1.15.0\n# install Oracle Server JRE\njabba install sjre@1.8  \n# install Eclipse Temurin / Adoptium (Hotspot)\njabba install temurin@1.8-0\n# install Adopt OpenJDK (Hotspot)\njabba install aoj@1.8-0\n# install Adopt OpenJDK (Eclipse OpenJ9)\njabba install aoj_openj9@1.9-0\n# install Zulu OpenJDK\njabba install zulu@1.8\njabba install zulu@~1.8.144 # same as \"zulu@>=1.8.144 <1.9\" \n# install IBM SDK, Java Technology Edition\njabba install semeru@1.8\n# install GraalVM CE\njabba install graalvm@1.0-0\n# install Oracle OpenJDK\njabba install oracle_open_jdk@1.10-0\n# install Microsoft OpenJDK\njabba install microsoft@11.0.16\n# install OpenJDK with Shenandoah GC\njabba install openjdk-shenandoah@1.10-0\n\n# install from custom URL\n# (supported qualifiers: zip (since 0.3.0), tgz, tgx (since 0.10.0), dmg, bin, exe)\njabba install 1.8.0-custom=tgz+http://example.com/distribution.tar.gz\njabba install 1.8.0-custom=tgx+http://example.com/distribution.tar.xz\njabba install 1.8.0-custom=zip+file:///opt/distribution.zip\n\n# uninstall JDK\njabba uninstall zulu@1.6.77\n\n# link system JDK\njabba link system@1.8.72 /Library/Java/JavaVirtualMachines/jdk1.8.0_72.jdk\n\n# list all installed JDK's\njabba ls\n\n# switch to a different version of JDK (it must be already `install`ed)\njabba use aoj@1.8\njabba use zulu@~1.6.97\n\necho \"1.8\" > .jabbarc\n# switch to the JDK specified in .jabbarc (since 0.5.0)\njabba use\n\n# set default java version on shell (since 0.2.0)\n# this version will automatically be \"jabba use\"d every time you open up a new terminal\njabba alias default 1.8\n```\n\n> `.jabbarc` has to be a valid YAML file. JDK version can be specified as `jdk: 1.8` or simply as `1.8` \n(same as `~1.8`, `1.8.x` `\">=1.8.0 <1.9.0\"` (mind the quotes)).\n\n> jsyk: **jabba** keeps everything under `~/.jabba` (on Linux/Mac OS X) / `%USERPROFILE%/.jabba` (on Windows). If at any point of time you decide to uninstall **jabba** - just remove this directory. \n\nFor more information see `jabba --help`.  \n\n## Development\n\n> PREREQUISITE: [go1.8](https://github.com/moovweb/gvm)\n\n```sh\ngit clone https://github.com/Jabba-Team/jabba $GOPATH/src/github.com/Jabba-Team/jabba \ncd $GOPATH/src/github.com/Jabba-Team/jabba \nmake fetch\n\ngo run jabba.go\n\n# to test a change\nmake test # or \"test-coverage\" if you want to get a coverage breakdown\n\n# to make a build\nmake build # or \"build-release\" (latter is cross-compiling jabba to different OSs/ARCHs)   \n```\n\n## FAQ\n\n**Q**: What if I already have `java` installed?\n\nA: It's fine. You can switch between system JDK and `jabba`-provided one whenever you feel like it (`jabba use ...` / `jabba deactivate`). \nThey are not gonna conflict with each other.\n\n**Q**: How do I switch `java` globally?\n\nA: **jabba** doesn't have this functionality built-in because the exact way varies greatly between the operation systems and usually \ninvolves elevated permissions. But. Here are the snippets that <u>should</u> work:    \n\n* Windows\n\n> (in powershell as administrator)\n\n```\n# select jdk\njabba use ...\n\n# modify global PATH & JAVA_HOME\n$envRegKey = [Microsoft.Win32.Registry]::LocalMachine.OpenSubKey('SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment', $true)\n$envPath=$envRegKey.GetValue('Path', $null, \"DoNotExpandEnvironmentNames\").replace('%JAVA_HOME%\\bin;', '')\n[Environment]::SetEnvironmentVariable('JAVA_HOME', \"$(jabba which $(jabba current))\", 'Machine')\n[Environment]::SetEnvironmentVariable('PATH', \"%JAVA_HOME%\\bin;$envPath\", 'Machine')\n```\n\n* Linux\n\n> (tested on Debian/Ubuntu)\n\n```\n# select jdk\njabba use ...\n\nsudo update-alternatives --install /usr/bin/java java ${JAVA_HOME%*/}/bin/java 20000\nsudo update-alternatives --install /usr/bin/javac javac ${JAVA_HOME%*/}/bin/javac 20000\n```\n\n> To switch between multiple GLOBAL alternatives use `sudo update-alternatives --config java`.\n\n## License\n\n[Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)\n\nBy using this software you agree to\n- [Oracle Binary Code License Agreement for the Java SE Platform Products and JavaFX](http://www.oracle.com/technetwork/java/javase/terms/license/index.html)\n- [Oracle Technology Network Early Adopter Development License Agreement](http://www.oracle.com/technetwork/licenses/ea-license-noexhibits-1938914.html) in case of EA releases\n- Apple's Software License Agreement in case of \"Java for OS X\"\n- [International License Agreement for Non-Warranted Programs](http://www14.software.ibm.com/cgi-bin/weblap/lap.pl?la_formnum=&li_formnum=L-PMAA-A3Z8P2&l=en) in case of IBM SDK, Java Technology Edition.\n\nThis software is for educational purposes only.  \nUse it at your own risk. "
}
