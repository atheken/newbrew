{
  "name": "grex",
  "full_name": "grex",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Command-line tool for generating regular expressions",
  "license": "Apache-2.0",
  "homepage": "https://github.com/pemistahl/grex",
  "versions": {
    "stable": "1.4.2",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/pemistahl/grex/archive/v1.4.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "bdf8476433be13d2307fc2829cd68b15f71391f537adfc6d90d04092573d7bc4"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/grex/blobs/sha256:ca449c20202e83a85b4dabf23c499b09312099dedbe8800eb3f272d8c8589fe3",
          "sha256": "ca449c20202e83a85b4dabf23c499b09312099dedbe8800eb3f272d8c8589fe3"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/grex/blobs/sha256:ff9ee16e6ad69a5f6daacc00be72d0c38d2709a3dc5ad0d4b8c4022407492c91",
          "sha256": "ff9ee16e6ad69a5f6daacc00be72d0c38d2709a3dc5ad0d4b8c4022407492c91"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/grex/blobs/sha256:67957a017ab461f469b5dcf66ff38ff9dc913bd933e461acbe016e97a7e80915",
          "sha256": "67957a017ab461f469b5dcf66ff38ff9dc913bd933e461acbe016e97a7e80915"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/grex/blobs/sha256:cf9477e7d94edc47295178fc7df625d33696269ad835a272eb8fce9582e4be0c",
          "sha256": "cf9477e7d94edc47295178fc7df625d33696269ad835a272eb8fce9582e4be0c"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/grex/blobs/sha256:b8b146b8be16cf1366cee3e2f531e6db078d2eb0872bcf9c6f390e98c2de723d",
          "sha256": "b8b146b8be16cf1366cee3e2f531e6db078d2eb0872bcf9c6f390e98c2de723d"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/grex/blobs/sha256:b363a6d2bf28124e8b98d3b5556957b71c7af5e9e4dfd39aded5f01a839c3b39",
          "sha256": "b363a6d2bf28124e8b98d3b5556957b71c7af5e9e4dfd39aded5f01a839c3b39"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/grex/blobs/sha256:d73168a364e0b758b216696a7f6b529df9df4961fec7eca84a28686921a10c42",
          "sha256": "d73168a364e0b758b216696a7f6b529df9df4961fec7eca84a28686921a10c42"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/grex.rb",
  "ruby_source_checksum": {
    "sha256": "6a14409563da03944f1d32229cec25ce1e82f95116ec7fa982cbea3cf24fdcdf"
  },
  "date_added": "2020-02-04T14:58:02-05:00",
  "readme": "<div align=\"center\">\n\n  ![grex](https://raw.githubusercontent.com/pemistahl/grex/main/logo.png)\n\n  <br>\n\n  [![build status](https://github.com/pemistahl/grex/actions/workflows/build.yml/badge.svg)](https://github.com/pemistahl/grex/actions/workflows/build.yml)\n  [![docs.rs](https://docs.rs/grex/badge.svg)](https://docs.rs/grex)\n  [![codecov](https://codecov.io/gh/pemistahl/grex/branch/main/graph/badge.svg)](https://codecov.io/gh/pemistahl/grex)\n  [![dependency status](https://deps.rs/crate/grex/1.4.2/status.svg)](https://deps.rs/crate/grex/1.4.2)\n  [![demo](https://img.shields.io/badge/-Demo%20Website-orange?logo=HTML5&labelColor=white)](https://pemistahl.github.io/grex-js/)\n  \n  [![downloads](https://img.shields.io/crates/d/grex.svg)](https://crates.io/crates/grex)\n  [![crates.io](https://img.shields.io/crates/v/grex.svg)](https://crates.io/crates/grex)\n  [![lib.rs](https://img.shields.io/badge/lib.rs-v1.4.2-blue)](https://lib.rs/crates/grex)\n  [![license](https://img.shields.io/badge/license-Apache%202.0-blue.svg)](https://www.apache.org/licenses/LICENSE-2.0)\n\n  [![Linux Download](https://img.shields.io/badge/Linux%20Download-v1.4.2-blue?logo=Linux)](https://github.com/pemistahl/grex/releases/download/v1.4.2/grex-v1.4.2-x86_64-unknown-linux-musl.tar.gz)\n  [![MacOS Download](https://img.shields.io/badge/macOS%20x86%20Download-v1.4.2-blue?logo=Apple)](https://github.com/pemistahl/grex/releases/download/v1.4.2/grex-v1.4.2-x86_64-apple-darwin.tar.gz)\n  [![MacOS ARM Download](https://img.shields.io/badge/macOS%20ARM%20Download-v1.4.2-blue?logo=Apple)](https://github.com/pemistahl/grex/releases/download/v1.4.2/grex-v1.4.2-aarch64-apple-darwin.tar.gz)\n  [![Windows Download](https://img.shields.io/badge/Windows%20Download-v1.4.2-blue?logo=Windows)](https://github.com/pemistahl/grex/releases/download/v1.4.2/grex-v1.4.2-x86_64-pc-windows-msvc.zip)\n</div>\n\n<br>\n\n![grex demo](https://raw.githubusercontent.com/pemistahl/grex/main/demo.gif)\n\n<br>\n\n## 1. What does this tool do?\n\n*grex* is a library as well as a command-line utility that is meant to simplify the often \ncomplicated and tedious task of creating regular expressions. It does so by automatically \ngenerating a single regular expression from user-provided test cases. The resulting\nexpression is guaranteed to match the test cases which it was generated from.\n\nThis project has started as a Rust port of the JavaScript tool \n[*regexgen*](https://github.com/devongovett/regexgen) written by \n[Devon Govett](https://github.com/devongovett). Although a lot of further useful features \ncould be added to it, its development was apparently ceased several years ago. The plan \nis now to add these new features to *grex* as Rust really shines when it comes to \ncommand-line tools. *grex* offers all features that *regexgen* provides, and more.\n\nThe philosophy of this project is to generate the most specific regular expression \npossible by default which exactly matches the given input only and nothing else. \nWith the use of command-line flags (in the CLI tool) or preprocessing methods \n(in the library), more generalized expressions can be created.\n\nThe produced expressions are [Perl-compatible regular expressions](https://www.pcre.org) which are also \ncompatible with the regular expression parser in Rust's [*regex* crate](https://crates.io/crates/regex).\nOther regular expression parsers or respective libraries from other programming languages \nhave not been tested so far, but they ought to be mostly compatible as well.\n\n## 2. Do I still need to learn to write regexes then?\n\n**Definitely, yes!** Using the standard settings, *grex* produces a regular expression that is guaranteed\nto match only the test cases given as input and nothing else. \nThis has been verified by [property tests](https://github.com/pemistahl/grex/blob/main/tests/property_tests.rs).\nHowever, if the conversion to shorthand character classes such as `\\w` is enabled, the resulting regex matches\na much wider scope of test cases. Knowledge about the consequences of this conversion is essential for finding\na correct regular expression for your business domain.\n\n*grex* uses an algorithm that tries to find the shortest possible regex for the given test cases.\nVery often though, the resulting expression is still longer or more complex than it needs to be.\nIn such cases, a more compact or elegant regex can be created only by hand.\nAlso, every regular expression engine has different built-in optimizations. *grex* does not know anything\nabout those and therefore cannot optimize its regexes for a specific engine.\n\n**So, please learn how to write regular expressions!** The currently best use case for *grex* is to find\nan initial correct regex which should be inspected by hand if further optimizations are possible.  \n\n## 3. Current Features\n- literals\n- character classes\n- detection of common prefixes and suffixes\n- detection of repeated substrings and conversion to `{min,max}` quantifier notation\n- alternation using `|` operator\n- optionality using `?` quantifier\n- escaping of non-ascii characters, with optional conversion of astral code points to surrogate pairs\n- case-sensitive or case-insensitive matching\n- capturing or non-capturing groups\n- optional anchors `^` and `$`\n- fully compliant to [Unicode Standard 15.0](https://unicode.org/versions/Unicode15.0.0)\n- fully compatible with [*regex* crate 1.9.0+](https://crates.io/crates/regex)\n- correctly handles graphemes consisting of multiple Unicode symbols\n- reads input strings from the command-line or from a file\n- produces more readable expressions indented on multiple using optional verbose mode \n- optional syntax highlighting for nicer output in supported terminals\n\n## 4. How to install?\n\n### 4.1 The command-line tool\n\nYou can download the self-contained executable for your platform above and put it in a place of your choice. \nAlternatively, pre-compiled 64-Bit binaries are available within the package managers [Scoop](https://scoop.sh) \n(for Windows), [Homebrew](https://brew.sh) (for macOS and Linux), [MacPorts](https://www.macports.org) (for macOS), and [Huber](https://github.com/innobead/huber) (for macOS, Linux and Windows). \n[Raúl Piracés](https://github.com/piraces) has contributed a [Chocolatey Windows package](https://community.chocolatey.org/packages/grex).\n\n*grex* is also hosted on [crates.io](https://crates.io/crates/grex), \nthe official Rust package registry. If you are a Rust developer and already have the Rust \ntoolchain installed, you can install by compiling from source using \n[*cargo*](https://doc.rust-lang.org/cargo/), the Rust package manager.\nSo the summary of your installation options is:\n\n```\n( brew | cargo | choco | huber | port | scoop ) install grex\n```\n\n### 4.2 The library\n\nIn order to use *grex* as a library, simply add it as a dependency to your `Cargo.toml` file:\n\n```toml\n[dependencies]\ngrex = { version = \"1.4.2\", default-features = false }\n```\n\nThe dependency *clap* is only needed for the command-line tool.\nBy disabling the default features, the download and compilation of clap is prevented for the library.\n\n## 5. How to use?\n\nDetailed explanations of the available settings are provided in the [library section](#52-the-library).\nAll settings can be freely combined with each other.\n\n### 5.1 The command-line tool\n\nTest cases are passed either directly (`grex a b c`) or from a file (`grex -f test_cases.txt`).\n*grex* is able to receive its input from Unix pipelines as well, e.g. `cat test_cases.txt | grex -`.\n\nThe following table shows all available flags and options:\n\n```\n$ grex -h\n\ngrex 1.4.2\n© 2019-today Peter M. Stahl <pemistahl@gmail.com>\nLicensed under the Apache License, Version 2.0\nDownloadable from https://crates.io/crates/grex\nSource code at https://github.com/pemistahl/grex\n\ngrex generates regular expressions from user-provided test cases.\n\nUsage: grex [OPTIONS] {INPUT...|--file <FILE>}\n\nInput:\n  [INPUT]...         One or more test cases separated by blank space\n  -f, --file <FILE>  Reads test cases on separate lines from a file\n\nDigit Options:\n  -d, --digits      Converts any Unicode decimal digit to \\d\n  -D, --non-digits  Converts any character which is not a Unicode decimal digit to \\D\n\nWhitespace Options:\n  -s, --spaces      Converts any Unicode whitespace character to \\s\n  -S, --non-spaces  Converts any character which is not a Unicode whitespace character to \\S\n\nWord Options:\n  -w, --words      Converts any Unicode word character to \\w\n  -W, --non-words  Converts any character which is not a Unicode word character to \\W\n\nEscaping Options:\n  -e, --escape           Replaces all non-ASCII characters with unicode escape sequences\n      --with-surrogates  Converts astral code points to surrogate pairs if --escape is set\n\nRepetition Options:\n  -r, --repetitions\n          Detects repeated non-overlapping substrings and converts them to {min,max} quantifier\n          notation\n      --min-repetitions <QUANTITY>\n          Specifies the minimum quantity of substring repetitions to be converted if --repetitions\n          is set [default: 1]\n      --min-substring-length <LENGTH>\n          Specifies the minimum length a repeated substring must have in order to be converted if\n          --repetitions is set [default: 1]\n\nAnchor Options:\n      --no-start-anchor  Removes the caret anchor `^` from the resulting regular expression\n      --no-end-anchor    Removes the dollar sign anchor `$` from the resulting regular expression\n      --no-anchors       Removes the caret and dollar sign anchors from the resulting regular\n                         expression\n\nDisplay Options:\n  -x, --verbose   Produces a nicer-looking regular expression in verbose mode\n  -c, --colorize  Provides syntax highlighting for the resulting regular expression\n\nMiscellaneous Options:\n  -i, --ignore-case     Performs case-insensitive matching, letters match both upper and lower case\n  -g, --capture-groups  Replaces non-capturing groups with capturing ones\n  -h, --help            Prints help information\n  -v, --version         Prints version information\n\n \n```\n\n### 5.2 The library\n\n#### 5.2.1 Default settings\n\nTest cases are passed either from a collection via [`RegExpBuilder::from()`](https://docs.rs/grex/1.4.2/grex/struct.RegExpBuilder.html#method.from) \nor from a file via [`RegExpBuilder::from_file()`](https://docs.rs/grex/1.4.2/grex/struct.RegExpBuilder.html#method.from_file).\nIf read from a file, each test case must be on a separate line. Lines may be ended with either a newline `\\n` or a carriage\nreturn with a line feed `\\r\\n`.\n\n```rust\nuse grex::RegExpBuilder;\n\nlet regexp = RegExpBuilder::from(&[\"a\", \"aa\", \"aaa\"]).build();\nassert_eq!(regexp, \"^a(?:aa?)?$\");\n```\n\n#### 5.2.2 Convert to character classes\n\n```rust\nuse grex::RegExpBuilder;\n\nlet regexp = RegExpBuilder::from(&[\"a\", \"aa\", \"123\"])\n    .with_conversion_of_digits()\n    .with_conversion_of_words()\n    .build();\nassert_eq!(regexp, \"^(\\\\d\\\\d\\\\d|\\\\w(?:\\\\w)?)$\");\n```\n\n#### 5.2.3 Convert repeated substrings\n\n```rust\nuse grex::RegExpBuilder;\n\nlet regexp = RegExpBuilder::from(&[\"aa\", \"bcbc\", \"defdefdef\"])\n    .with_conversion_of_repetitions()\n    .build();\nassert_eq!(regexp, \"^(?:a{2}|(?:bc){2}|(?:def){3})$\");\n```\n\nBy default, *grex* converts each substring this way which is at least a single character long \nand which is subsequently repeated at least once. You can customize these two parameters if you like.\n\nIn the following example, the test case `aa` is not converted to `a{2}` because the repeated substring \n`a` has a length of 1, but the minimum substring length has been set to 2.\n\n```rust\nuse grex::RegExpBuilder;\n\nlet regexp = RegExpBuilder::from(&[\"aa\", \"bcbc\", \"defdefdef\"])\n    .with_conversion_of_repetitions()\n    .with_minimum_substring_length(2)\n    .build();\nassert_eq!(regexp, \"^(?:aa|(?:bc){2}|(?:def){3})$\");\n```\n\nSetting a minimum number of 2 repetitions in the next example, only the test case `defdefdef` will be\nconverted because it is the only one that is repeated twice.\n\n```rust\nuse grex::RegExpBuilder;\n\nlet regexp = RegExpBuilder::from(&[\"aa\", \"bcbc\", \"defdefdef\"])\n    .with_conversion_of_repetitions()\n    .with_minimum_repetitions(2)\n    .build();\nassert_eq!(regexp, \"^(?:bcbc|aa|(?:def){3})$\");\n```\n\n#### 5.2.4 Escape non-ascii characters\n\n```rust\nuse grex::RegExpBuilder;\n\nlet regexp = RegExpBuilder::from(&[\"You smell like 💩.\"])\n    .with_escaping_of_non_ascii_chars(false)\n    .build();\nassert_eq!(regexp, \"^You smell like \\\\u{1f4a9}\\\\.$\");\n```\n\nOld versions of JavaScript do not support unicode escape sequences for the astral code planes \n(range `U+010000` to `U+10FFFF`). In order to support these symbols in JavaScript regular \nexpressions, the conversion to surrogate pairs is necessary. More information on that matter \ncan be found [here](https://mathiasbynens.be/notes/javascript-unicode).\n\n```rust\nuse grex::RegExpBuilder;\n\nlet regexp = RegExpBuilder::from(&[\"You smell like 💩.\"])\n    .with_escaped_non_ascii_chars(true)\n    .build();\nassert_eq!(regexp, \"^You smell like \\\\u{d83d}\\\\u{dca9}\\\\.$\");\n```\n\n#### 5.2.5 Case-insensitive matching\n\nThe regular expressions that *grex* generates are case-sensitive by default.\nCase-insensitive matching can be enabled like so:\n\n```rust\nuse grex::RegExpBuilder;\n\nlet regexp = RegExpBuilder::from(&[\"big\", \"BIGGER\"])\n    .with_case_insensitive_matching()\n    .build();\nassert_eq!(regexp, \"(?i)^big(?:ger)?$\");\n```\n\n#### 5.2.6 Capturing Groups\n\nNon-capturing groups are used by default. \nExtending the previous example, you can switch to capturing groups instead.\n\n```rust\nuse grex::RegExpBuilder;\n\nlet regexp = RegExpBuilder::from(&[\"big\", \"BIGGER\"])\n    .with_case_insensitive_matching()\n    .with_capturing_groups()\n    .build();\nassert_eq!(regexp, \"(?i)^big(ger)?$\");\n```\n\n#### 5.2.7 Verbose mode\n\nIf you find the generated regular expression hard to read, you can enable verbose mode.\nThe expression is then put on multiple lines and indented to make it more pleasant to the eyes.\n\n```rust\nuse grex::RegExpBuilder;\nuse indoc::indoc;\n\nlet regexp = RegExpBuilder::from(&[\"a\", \"b\", \"bcd\"])\n    .with_verbose_mode()\n    .build();\n\nassert_eq!(regexp, indoc!(\n    r#\"\n    (?x)\n    ^\n      (?:\n        b\n        (?:\n          cd\n        )?\n        |\n        a\n      )\n    $\"#\n));\n```\n\n#### 5.2.8 Disable anchors\n\nBy default, the anchors `^` and `$` are put around every generated regular expression in order\nto ensure that it matches only the test cases given as input. Often enough, however, it is\ndesired to use the generated pattern as part of a larger one. For this purpose, the anchors\ncan be disabled, either separately or both of them.\n\n```rust\nuse grex::RegExpBuilder;\n\nlet regexp = RegExpBuilder::from(&[\"a\", \"aa\", \"aaa\"])\n    .without_anchors()\n    .build();\nassert_eq!(regexp, \"a(?:aa?)?\");\n```\n\n### 5.3 Examples\n\nThe following examples show the various supported regex syntax features:\n\n```shell\n$ grex a b c\n^[a-c]$\n\n$ grex a c d e f\n^[ac-f]$\n\n$ grex a b x de\n^(?:de|[abx])$\n\n$ grex abc bc\n^a?bc$\n\n$ grex a b bc\n^(?:bc?|a)$\n\n$ grex [a-z]\n^\\[a\\-z\\]$\n\n$ grex -r b ba baa baaa\n^b(?:a{1,3})?$\n\n$ grex -r b ba baa baaaa\n^b(?:a{1,2}|a{4})?$\n\n$ grex y̆ a z\n^(?:y̆|[az])$\nNote: \nGrapheme y̆ consists of two Unicode symbols:\nU+0079 (Latin Small Letter Y)\nU+0306 (Combining Breve)\n\n$ grex \"I ♥ cake\" \"I ♥ cookies\"\n^I ♥ c(?:ookies|ake)$\nNote:\nInput containing blank space must be \nsurrounded by quotation marks.\n```\n\nThe string `\"I ♥♥♥ 36 and ٣ and 💩💩.\"` serves as input for the following examples using the command-line notation:\n\n```shell\n$ grex <INPUT>\n^I ♥♥♥ 36 and ٣ and 💩💩\\.$\n\n$ grex -e <INPUT>\n^I \\u{2665}\\u{2665}\\u{2665} 36 and \\u{663} and \\u{1f4a9}\\u{1f4a9}\\.$\n\n$ grex -e --with-surrogates <INPUT>\n^I \\u{2665}\\u{2665}\\u{2665} 36 and \\u{663} and \\u{d83d}\\u{dca9}\\u{d83d}\\u{dca9}\\.$\n\n$ grex -d <INPUT>\n^I ♥♥♥ \\d\\d and \\d and 💩💩\\.$\n\n$ grex -s <INPUT>\n^I\\s♥♥♥\\s36\\sand\\s٣\\sand\\s💩💩\\.$\n\n$ grex -w <INPUT>\n^\\w ♥♥♥ \\w\\w \\w\\w\\w \\w \\w\\w\\w 💩💩\\.$\n\n$ grex -D <INPUT>\n^\\D\\D\\D\\D\\D\\D36\\D\\D\\D\\D\\D٣\\D\\D\\D\\D\\D\\D\\D\\D$\n\n$ grex -S <INPUT>\n^\\S \\S\\S\\S \\S\\S \\S\\S\\S \\S \\S\\S\\S \\S\\S\\S$\n\n$ grex -dsw <INPUT>\n^\\w\\s♥♥♥\\s\\d\\d\\s\\w\\w\\w\\s\\d\\s\\w\\w\\w\\s💩💩\\.$\n\n$ grex -dswW <INPUT>\n^\\w\\s\\W\\W\\W\\s\\d\\d\\s\\w\\w\\w\\s\\d\\s\\w\\w\\w\\s\\W\\W\\W$\n\n$ grex -r <INPUT>\n^I ♥{3} 36 and ٣ and 💩{2}\\.$\n\n$ grex -er <INPUT>\n^I \\u{2665}{3} 36 and \\u{663} and \\u{1f4a9}{2}\\.$\n\n$ grex -er --with-surrogates <INPUT>\n^I \\u{2665}{3} 36 and \\u{663} and (?:\\u{d83d}\\u{dca9}){2}\\.$\n\n$ grex -dgr <INPUT>\n^I ♥{3} \\d(\\d and ){2}💩{2}\\.$\n\n$ grex -rs <INPUT>\n^I\\s♥{3}\\s36\\sand\\s٣\\sand\\s💩{2}\\.$\n\n$ grex -rw <INPUT>\n^\\w ♥{3} \\w(?:\\w \\w{3} ){2}💩{2}\\.$\n\n$ grex -Dr <INPUT>\n^\\D{6}36\\D{5}٣\\D{8}$\n\n$ grex -rS <INPUT>\n^\\S \\S(?:\\S{2} ){2}\\S{3} \\S \\S{3} \\S{3}$\n\n$ grex -rW <INPUT>\n^I\\W{5}36\\Wand\\W٣\\Wand\\W{4}$\n\n$ grex -drsw <INPUT>\n^\\w\\s♥{3}\\s\\d(?:\\d\\s\\w{3}\\s){2}💩{2}\\.$\n\n$ grex -drswW <INPUT>\n^\\w\\s\\W{3}\\s\\d(?:\\d\\s\\w{3}\\s){2}\\W{3}$\n```                                                                                                                            \n\n## 6. How to build?\n\nIn order to build the source code yourself, you need the \n[stable Rust toolchain](https://www.rust-lang.org/tools/install) installed on your machine \nso that [*cargo*](https://doc.rust-lang.org/cargo/), the Rust package manager is available.\n**Please note**: Rust >= 1.70.0 is required to build the CLI. For the library part, Rust < 1.70.0 is sufficient.\n\n```shell\ngit clone https://github.com/pemistahl/grex.git\ncd grex\ncargo build\n```\n\nThe source code is accompanied by an extensive test suite consisting of unit tests, integration \ntests and property tests. For running them, simply say:\n\n```shell\ncargo test\n```\n\nBenchmarks measuring the performance of several settings can be run with:\n\n```shell\ncargo bench\n```\n\n## 7. WebAssembly support\n\nThis library can be compiled to [WebAssembly (WASM)](https://webassembly.org) which allows to use *grex*\nin any JavaScript-based project, be it in the browser or in the back end running on [Node.js](https://nodejs.org).\n\nThe easiest way to compile is to use [`wasm-pack`](https://rustwasm.github.io/wasm-pack). After the installation,\nyou can, for instance, build the library with the web target so that it can be directly used in the browser:\n\n    wasm-pack build --target web\n\nThis creates a directory named `pkg` on the top-level of this repository, containing the compiled wasm files\nand JavaScript and TypeScript bindings. In an HTML file, you can then call *grex* like the following, for instance:\n\n```html\n<script type=\"module\">\n    import init, { RegExpBuilder } from \"./pkg/grex.js\";\n\n    init().then(_ => {\n        alert(RegExpBuilder.from([\"hello\", \"world\"]).build());\n    });\n</script>\n```\n\nThere are also some integration tests available both for Node.js and for the browsers Chrome, Firefox and Safari.\nTo run them, simply say:\n\n    wasm-pack test --node --headless --chrome --firefox --safari\n\nIf the tests fail to start in Safari, you need to enable Safari's web driver first by running:\n\n    sudo safaridriver --enable\n\nThe output of `wasm-pack` will be hosted in a [separate repository](https://github.com/pemistahl/grex-js) which\nallows to add further JavaScript-related configuration, tests and documentation. *grex* will then be added to the\n[npm registry](https://www.npmjs.com) as well, allowing for an easy download and installation within every JavaScript\nor TypeScript project.\n\nThere is a [demo website](https://pemistahl.github.io/grex-js/) available where you can give grex a try.\n\n![demo website](https://raw.githubusercontent.com/pemistahl/grex/main/website.jpg)\n\n## 8. How does it work?\n\n1. A [deterministic finite automaton](https://en.wikipedia.org/wiki/Deterministic_finite_automaton) (DFA) \nis created from the input strings.\n\n2. The number of states and transitions between states in the DFA is reduced by applying \n[Hopcroft's DFA minimization algorithm](https://en.wikipedia.org/wiki/DFA_minimization#Hopcroft.27s_algorithm).\n\n3. The minimized DFA is expressed as a system of linear equations which are solved with \n[Brzozowski's algebraic method](http://cs.stackexchange.com/questions/2016/how-to-convert-finite-automata-to-regular-expressions#2392), \nresulting in the final regular expression.\n\n## 9. What's next for version 1.5.0?\n\nTake a look at the [planned issues](https://github.com/pemistahl/grex/milestone/5).\n\n## 10. Contributions\n\nIn case you want to contribute something to *grex*, I encourage you to do so.\nDo you have ideas for cool features? Or have you found any bugs so far? \nFeel free to open an issue or send a pull request. It's very much appreciated. :-)"
}
