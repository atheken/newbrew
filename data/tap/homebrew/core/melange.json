{
  "name": "melange",
  "full_name": "melange",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Build APKs from source code",
  "license": "Apache-2.0",
  "homepage": "https://github.com/chainguard-dev/melange",
  "versions": {
    "stable": "0.4.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/chainguard-dev/melange/archive/refs/tags/v0.4.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "a4ea8012098a6667075bd982e9a979fcb97dd705f8e9388ed2789b3004b0331a"
    },
    "head": {
      "url": "https://github.com/chainguard-dev/melange.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/melange/blobs/sha256:74cf0738405917f8f4afc54de58e8bce20bb3aec6dff00670bfb0215f419ec18",
          "sha256": "74cf0738405917f8f4afc54de58e8bce20bb3aec6dff00670bfb0215f419ec18"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/melange/blobs/sha256:74cf0738405917f8f4afc54de58e8bce20bb3aec6dff00670bfb0215f419ec18",
          "sha256": "74cf0738405917f8f4afc54de58e8bce20bb3aec6dff00670bfb0215f419ec18"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/melange/blobs/sha256:74cf0738405917f8f4afc54de58e8bce20bb3aec6dff00670bfb0215f419ec18",
          "sha256": "74cf0738405917f8f4afc54de58e8bce20bb3aec6dff00670bfb0215f419ec18"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/melange/blobs/sha256:0fdf490c69c9e8106d92985beb88c69f0fe2d9106ba58b9db6d0a9e73ce9971b",
          "sha256": "0fdf490c69c9e8106d92985beb88c69f0fe2d9106ba58b9db6d0a9e73ce9971b"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/melange/blobs/sha256:0fdf490c69c9e8106d92985beb88c69f0fe2d9106ba58b9db6d0a9e73ce9971b",
          "sha256": "0fdf490c69c9e8106d92985beb88c69f0fe2d9106ba58b9db6d0a9e73ce9971b"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/melange/blobs/sha256:0fdf490c69c9e8106d92985beb88c69f0fe2d9106ba58b9db6d0a9e73ce9971b",
          "sha256": "0fdf490c69c9e8106d92985beb88c69f0fe2d9106ba58b9db6d0a9e73ce9971b"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/melange/blobs/sha256:8bade127728dcf59b272ff7cf00beb1996ba28f9ad05c7252d30133b50443316",
          "sha256": "8bade127728dcf59b272ff7cf00beb1996ba28f9ad05c7252d30133b50443316"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/melange.rb",
  "ruby_source_checksum": {
    "sha256": "d2b45b73321a54be7e40d5163de46663939ecbc0e2eba9302e196705e541cc2d"
  },
  "date_added": "2023-05-26T17:14:47-04:00",
  "readme": "# melange\n\nBuild apk packages using declarative pipelines.\n\nCommonly used to provide custom packages for container images built with [apko][apko]. The majority\nof apks are built for use with either the [Wolfi](https://github.com/wolfi-dev) or [Alpine Linux](https://www.alpinelinux.org/) ecosystems.\n\nKey features:\n\n - **Pipeline-oriented builds.** Every step of the build pipeline is defined and\n   controlled by you, unlike traditional package managers which have distinct\n   phases.\n - **Multi-architecture by default.** QEMU is used to emulate various\n   architectures, avoiding the need for cross-compilation steps.\n\n## Why\n\nSecure software factories are the evolution of DevOps, allowing a\nuser to prove the provenance of all artifacts incorporated\ninto a software appliance.  By building and capturing software\nartifacts into packages, DevOps teams can manage their software\nartifacts as if they were any other component of an image.\n\nThis is especially useful when building software appliances in\nthe form of OCI container images with [apko][apko].\n\n   [apko]: https://github.com/chainguard-dev/apko\n\n## Installation\n\nYou can install Melange from Homebrew:\n\n```shell\nbrew install melange\n```\n\nYou can also install Melange from source:\n\n```shell\ngo install chainguard.dev/melange@latest\n```\n\nYou can also use the Melange container image:\n\n```shell\ndocker run cgr.dev/chainguard/melange version\n```\n\nTo use the examples, you'll generally want to mount your current directory into the container and provide elevated privileges, e.g.:\n\n```shell\ndocker run --privileged -v \"$PWD\":/work cgr.dev/chainguard/melange build examples/gnu-hello.yaml\n```\n\nRunning outside of a container requires [Docker](https://docs.docker.com/get-docker/), but should also work with other runtimes such as [podman](https://podman.io/getting-started/installation).\n\nAlternatively, if you're on a Mac, you can use the [melange instructions for Lima](https://github.com/chainguard-dev/melange/blob/main/mac/README.md#Lima) to run an Alpine Linux VM.\n\n## Quickstart\n\nA melange build file looks like:\n\n```yaml\npackage:\n  name: hello\n  version: 2.12\n  epoch: 0\n  description: \"the GNU hello world program\"\n  copyright:\n    - paths:\n      - \"*\"\n      attestation: |\n        Copyright 1992, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2005,\n        2006, 2007, 2008, 2010, 2011, 2013, 2014, 2022 Free Software Foundation,\n        Inc.\n      license: GPL-3.0-or-later\n  dependencies:\n    runtime:\n\nenvironment:\n  contents:\n    repositories:\n      - https://dl-cdn.alpinelinux.org/alpine/edge/main\n    packages:\n      - alpine-baselayout-data\n      - busybox\n      - build-base\n      - scanelf\n      - ssl_client\n      - ca-certificates-bundle\n\npipeline:\n  - uses: fetch\n    with:\n      uri: https://ftp.gnu.org/gnu/hello/hello-${{package.version}}.tar.gz\n      expected-sha256: cf04af86dc085268c5f4470fbae49b18afbc221b78096aab842d934a76bad0ab\n  - uses: autoconf/configure\n  - uses: autoconf/make\n  - uses: autoconf/make-install\n  - uses: strip\n```\n\nWe can build this with:\n\n```shell\nmelange build examples/gnu-hello.yaml\n```\n\nor, with Docker:\n\n```shell\ndocker run --privileged --rm -v \"${PWD}\":/work \\\n  cgr.dev/chainguard/melange build examples/gnu-hello.yaml\n```\n\nThis will create a `packages` folder, with an entry for each architecture supported by the package. If you only want to build for the current architecture, you can add `--arch $(uname -m)` to the build command. Inside the architecture directory you should find apk files for each package built in the pipeline.\n\nIf you want to sign your apks, create a signing key with the `melange keygen` command:\n\n```shell\nmelange keygen\n```\n```\n generating keypair with a 4096 bit prime, please wait...\n wrote private key to melange.rsa\n wrote public key to melange.rsa.pub\n```\n\nAnd then pass the `--signing-key` argument to `melange build`.\n\n## Debugging melange Builds\n\nTo include debug-level information on melange builds, edit your `melange.yaml` file and include `set -x` in your pipeline. You can add this flag at any point of your pipeline commands to further debug a specific section of your build.\n\n```yaml\n...\npipeline:\n  - name: Build Minicli application\n    runs: |\n      set -x\n      APP_HOME=\"${{targets.destdir}}/usr/share/hello-minicli\"\n...\n```\n\n## Default Substitutions\n\nMelange provides the following default substitutions which can be referenced in the build file pipeline:\n\n| **Substitution**         | **Description**                                   |\n|--------------------------|---------------------------------------------------|\n| `${{package.name}}`      | Package name                                      |\n| `${{package.version}}`   | Package version                                   |\n| `${{package.epoch}}`     | Package epoch                                     |\n| `${{targets.destdir}}`   | Directory where targets will be stored            |\n| `${{targets.subpkgdir}}` | Directory where subpackage targets will be stored |\n\nAn example build file pipeline with substitutions:\n\n```yaml\npipeline:\n  - name: 'Create tmp dir'\n    runs: mkdir ${{targets.destdir}}/var/lib/${{package.name}}/tmp\n```\n\n## Usage with apko\n\nTo use a melange built apk in apko, either upload it to a package repository or use a \"local\" repository. Using a local repository allows a melange build and apko build to run in the same directory (or GitHub repo) without using external storage.\nAn example of this approach can be seen in the [nginx-image-demo repo](https://github.com/chainguard-dev/nginx-image-demo/).\n\n### Coming soon: Keyless signatures\n\nWe are working to enable keyless signatures using [Sigstore Fulcio](https://github.com/SigStore/fulcio), which can be used with traditional signed indices to remove the need to have sensitive key material inside the build environment."
}
