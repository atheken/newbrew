{
  "name": "swiftplantuml",
  "full_name": "swiftplantuml",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Generate UML class diagrams from Swift sources",
  "license": "MIT",
  "homepage": "https://github.com/MarcoEidinger/SwiftPlantUML",
  "versions": {
    "stable": "0.7.6",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/MarcoEidinger/SwiftPlantUML/archive/0.7.6.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "d4d57be917fcf86e534877c19c56b0507cf26b7c63e55b5926cf9c6cd5922f8f"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/swiftplantuml/blobs/sha256:64b7368a338264ea5d909349c6056f1d34be8a32cdfd9fceb2e55bfda11d3a76",
          "sha256": "64b7368a338264ea5d909349c6056f1d34be8a32cdfd9fceb2e55bfda11d3a76"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/swiftplantuml/blobs/sha256:92f1c20a5e5b57f5a18cb947a6666d348469be9a0db42d41cb99488a3b90e1ab",
          "sha256": "92f1c20a5e5b57f5a18cb947a6666d348469be9a0db42d41cb99488a3b90e1ab"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/swiftplantuml/blobs/sha256:0771dbc96974de310796084d08048aad85aa27f35ce1f082141ba69acf82a979",
          "sha256": "0771dbc96974de310796084d08048aad85aa27f35ce1f082141ba69acf82a979"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/swiftplantuml/blobs/sha256:206547259f05a648df243d6a7713a1762959b5f77e7509c5d21e5f484c6974cd",
          "sha256": "206547259f05a648df243d6a7713a1762959b5f77e7509c5d21e5f484c6974cd"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/swiftplantuml/blobs/sha256:924a8165c2ef5b47bf1ad0afd1ec81cb09ed60d040fba4628f5d8c0d6b3ade58",
          "sha256": "924a8165c2ef5b47bf1ad0afd1ec81cb09ed60d040fba4628f5d8c0d6b3ade58"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/swiftplantuml/blobs/sha256:45b0cef6a4db9677b6ee2e2291167dd99eb665ee7016a9497fa43cb6e96d1e21",
          "sha256": "45b0cef6a4db9677b6ee2e2291167dd99eb665ee7016a9497fa43cb6e96d1e21"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [
    {
      "name": "xcode",
      "cask": null,
      "download": null,
      "version": "12.2",
      "contexts": [
        "build"
      ],
      "specs": [
        "stable"
      ]
    },
    {
      "name": "macos",
      "cask": null,
      "download": null,
      "version": null,
      "contexts": [],
      "specs": [
        "stable"
      ]
    }
  ],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/swiftplantuml.rb",
  "ruby_source_checksum": {
    "sha256": "3961e8c3d1090e7da6cc87d94e059708af5a7aaf2c168ca84eb3d4ed46b8009d"
  },
  "date_added": "2021-11-15T07:59:02+00:00",
  "readme": "# SwiftPlantUML\n\nGenerate UML class diagrams from swift code with this Command Line Interface (CLI) and Swift Package.\n\n[![Build Status](https://github.com/MarcoEidinger/SwiftPlantUML/workflows/Swift/badge.svg)](https://github.com/MarcoEidinger/SwiftPlantUML/workflows/Swift)\n[![codecov](https://codecov.io/gh/MarcoEidinger/SwiftPlantUML/branch/main/graph/badge.svg)](https://codecov.io/gh/MarcoEidinger/SwiftPlantUML)\n[![codebeat badge](https://codebeat.co/badges/ef555787-2240-40be-9433-f3fa141d43a9)](https://codebeat.co/projects/github-com-marcoeidinger-swiftplantuml-main)\n[![docs](https://marcoeidinger.github.io/SwiftPlantUML/badge.svg)](https://marcoeidinger.github.io/SwiftPlantUML/)\n[![Xcode Extension](https://img.shields.io/badge/Xcode%20extension-available-brightgreen)](https://github.com/MarcoEidinger/SwiftPlantUML-Xcode-Extension)\n[![Twitter](https://img.shields.io/badge/twitter-@MarcoEidinger-blue.svg)](http://twitter.com/MarcoEidinger)\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/5206/badge)](https://bestpractices.coreinfrastructure.org/projects/5206)\n\nUse one or more Swift files as input for a diagram to visualize `class`, `struct`, `protocol`, `enum` and `extension` types\nwith their instance and static members as well as their inheritance and implementation relationships\n\n![Example Diagram](https://github.com/MarcoEidinger/SwiftPlantUML/raw/main/.assets/exampleDiagram.svg)\n\n<details>\n  <summary><strong>Table of Contents</strong> (click to expand)</summary>\n\n<!-- toc -->\n\n- [SwiftPlantUML](#swiftplantuml)\n  - [Usage](#usage)\n    - [Command Line](#command-line)\n    - [Swift package](#swift-package)\n    - [Xcode source editor extension](#xcode-source-editor-extension)\n  - [Installation](#installation)\n    - [Using Homebrew](#using-homebrew)\n    - [Using Mint](#using-mint)\n    - [Installing from source](#installing-from-source)\n    - [Note: Working with Multiple Swift Versions](#note-working-with-multiple-swift-versions)\n  - [Configuration](#configuration)\n    - [Options](#options)\n      - [Theming](#theming)\n    - [Examples](#examples)\n    - [Code Completion during Editing](#code-completion-during-editing)\n  - [Large Diagrams](#large-diagrams)\n  - [Generate UML documentation from a binary framework](#generate-uml-documentation-from-a-binary-framework)\n  - [Planned improvements](#planned-improvements)\n  - [Known limitations](#known-limitations)\n  - [Logging](#logging)\n  - [Manual page](#manual-page)\n  - [Acknowledgements](#acknowledgements)\n\n<!-- tocstop -->\n\n</details>\n\n## Usage\n\n### Command Line\n\nExample to generate and render diagram, based on a single Swift file, in your browser:\n\n```\nswiftplantuml ./Tests/SwiftPlantUMLFrameworkTests/TestData/basics.txt\n```\n\nRun `swiftplantuml` in the directory containing the Swift files to be considered for diagram generation. Directories\nwill be searched recursively.\n\n```\n$ swiftplantuml classdiagram --help\nOVERVIEW: Generate PlantUML script and view it and diagram in browser\n\nUSAGE: swift-plant-uml classdiagram [--config <config>] [--exclude <exclude> ...] [--output <format>] [--sdk <sdk>] [--verbose] [<paths> ...]\n\nARGUMENTS:\n  <paths>                 List of paths to the files or directories containing\n                          swift sources\n\nOPTIONS:\n  --config <config>       Path to custom configuration filed (otherwise will\n                          search for `.swiftplantuml.yml` in current directory)\n  --exclude <exclude>     paths to ignore source files. Takes precedence over\n                          arguments\n  --output <format>       Defines output format. Options: browser,\n                          browserImageOnly, consoleOnly\n  --sdk <sdk>             MacOSX SDK path used to handle type inference\n                          resolution, usually `$(xcrun --show-sdk-path -sdk\n                          macosx)`\n  --hide-extensions/--merge-extensions/--show-extensions\n                          Decide if/how Swift extensions shall be considered for class diagram generation (default:\n                          hideExtensions)\n  --verbose               Verbose\n  --version               Show the version.\n  -h, --help              Show help information.\n```\n\nAs `classdiagram` is the default subcommand you can omit it.\n\nNote: unknown type in diagrams for variables declared with type inference (e.g. `var hasBasket = false`) *unless* you specify `sdk` argument\n\n<details>\n  <summary><strong>Type inference details</strong> (click to expand)</summary>\n\nIn the following example the property `hasBasket` is of type `Bool` but the type is inferred and not explicitly declared.\n\n```swift\nclass Bicycle: Vehicle {\n    var hasBasket = false\n}\n```\n\nSwiftPlantUML requires the macosx SDK in order to properly recognize the inferred type. If you have Xcode installed (which includes the macosx SDK) then use `--sdk $(xcrun --show-sdk-path -sdk macosx)`.\n\n|                    | No inferred type (*default*) | inferred type |\n|--------------------|-------------------|-----------------------|\n| Generated PlantUML |  `~hasBasket`                 |  `~hasBasket : Bool` \n| Command            | `swiftplantuml classdiagram Tests/SwiftPlantUMLFrameworkTests/TestData/demo.txt`                  | `swiftplantuml classdiagram Tests/SwiftPlantUMLFrameworkTests/TestData/demo.txt --sdk $(xcrun --show-sdk-path -sdk macosx)`                      |                     |\n\n</details>\n\n### Swift package\n\n```swift\ndependencies: [\n    .package(url: \"https://github.com/MarcoEidinger/SwiftPlantUML.git\", .upToNextMajor(from: \"0.5.0\"))\n]\n```\n\nThis project has yet to reach a major version. Anything may change at anytime, and the public API should not be considered stable. However, I'll try to reserve breaking changes for new minor versions. You might feel more comfortable pinning the version to `.upToNextMinor` or even to an `.exact` version.\n\n[API documentation](https://marcoeidinger.github.io/SwiftPlantUML/)\n\n### Xcode source editor extension\n\nSee [MarcoEidinger/SwiftPlantUML-Xcode-Extension](https://github.com/MarcoEidinger/SwiftPlantUML-Xcode-Extension) for more details\n\n## Installation\n\n### Using [Homebrew](https://brew.sh/)\n\n```\nbrew install swiftplantuml\n```\n\n> previously you were able to use `brew install MarcoEidinger/formulae/swiftplantuml` (and you still can)\n\n### Using [Mint](https://github.com/yonaskolb/mint)\n\n```\n$ mint install MarcoEidinger/SwiftPlantUML\n```\n\n### Installing from source\n\nYou can also build and install from source by cloning this project and running\n`make install` (Xcode 12 or later).\n\nManually\nRun the following commands to build and install manually:\n\n```\n$ git clone https://github.com/MarcoEidinger/SwiftPlantUML.git\n$ cd SwiftPlantUML\n$ make install\n```\n\n### Note: Working with Multiple Swift Versions\n\nSwiftPlantUML hooks into SourceKit and therefore needs a Swift toolschain.\n\nYou should always run SwiftPlantUML with the same toolchain you use to compile your code.\n\nYou may want to override SwiftPlantUML's default Swift toolchain if you have multiple toolchains or Xcodes installed.\n\nHere's the order in which SwiftPlantUML determines which Swift toolchain to use:\n\n- `$XCODE_DEFAULT_TOOLCHAIN_OVERRIDE`\n- `$TOOLCHAIN_DIR or $TOOLCHAINS`\n- `xcrun -find swift`\n- `/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain`\n- `/Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain`\n- `~/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain`\n- `~/Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain`\n\n`sourcekitd.framework` is expected to be found in the usr/lib/ subdirectory of the value passed in the paths above.\n\nSo if you encounter **Fatal error: Loading sourcekitd.framework/Versions/A/sourcekitd failed** then please check result of `xcode-select -p` to see if that directory subsequently contains a Swift toolschain. You can use `sudo xcode-select -s <pathToYourXcodeInstallation>` to rectify the situation, e.g. \n\n`sudo xcode-select -s /Applications/Xcode.app/Contents/Developer`\n\n## Configuration\nConfigure SwiftPlantUML by adding a `.swiftplantuml.yml` file from the directory you'll run SwiftPlantUML from. Note: the same configuration options can be set programmatically with `Configuration`.\n\n### Options\n\nYou can\n- include/exclude files (wildcards supported)\n- include/exclude elements by name (wildcards supported)\n- limit elements and members based on their access level, e.g. show only `public` types\n- hide extensions or merge extensions (with their known type)\n\n| Show Extensions  (Default)                                   | Merge Extensions                                             | Hide Extensions                                              |\n| ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| ![Show Extensions](.assets/extensionExamples/ShowExtensions.svg) | ![Merge Extensions](.assets/extensionExamples/MergeExtensions.svg) | ![Hide Extensions](.assets/extensionExamples/HideExtensions.svg) |\n| Clutter but represents codebase accurately                   | Reduced clutter. No loss of information                      | No clutter but loss of information                           |\n\n- hide nested types\n- hide member access level attribute\n- configure styles, use [skin parameters](https://plantuml.com/skinparam) and even include external files or [themes](./THEMING.md)\n- exclude inheritance relationships based on parent (wildcards supported), e.g. do not show inheritance to `Codable`\n\n#### Theming\n\n|                     Default                     | Amiga                                       | Reddress-darkblue                                            | Sketchy Outline                                              | Many More Available                        |\n| :---------------------------------------------: | ------------------------------------------- | ------------------------------------------------------------ | ------------------------------------------------------------ | ------------------------------------------ |\n| ![default](.assets/themingExamples/default.svg) | ![amiga](.assets/themingExamples/amiga.svg) | ![reddress-darkblue](.assets/themingExamples/reddress-darkblue.svg) | ![sketchy-outline](.assets/themingExamples/sketchy-outline.svg) | See [here](./THEMING.md) for more examples |\n\n### Examples\n\nSimple Example:\n\n```yml\nfiles:\n    exclude:\n    - \"Tests/**/*.swift\" # paths to ignore for diagram. Takes precedence over `included`.\nelements:\n  havingAccessLevel:\n  - public\n  - open\n  showMembersWithAccessLevel:\n  - public\n  - open\n  showNestedTypes: false\n  showExtensions: merged\ntheme: plain # see https://plantuml.com/theme\ntexts:\n  title: |\n    <u>Formatted</u> title example\n    on <i>several</i> lines and using <font color=red>html</font>\nskinparamCommands: # see https://plantuml.com/skinparam\n- skinparam classBackgroundColor PaleGreen\n- skinparam classArrowColor SeaGreen\n- skinparam classBorderColor SpringGreen\n- skinparam stereotypeCBackgroundColor YellowGreen\n- skinparam stereotypeCBackgroundColor<< Foo >> DimGray\nrelationships:\n  inheritance:\n    label: \"inherits from\"\n    style:\n      lineStyle: dotted\n      lineColor: DarkViolet\n      textColor: DarkViolet\n    exclude:\n    - \"Codable\"\n```\n\nRich example: [here](./Configuration/Examples/Rich/.swiftplantuml.yml)\n\n### Code Completion during Editing\n\n![codeCompletion](https://user-images.githubusercontent.com/4176826/211212524-1700c32f-b094-49ce-b191-c1492b90da30.gif)\n\n\nTo get code completion during editing use Visual Studio Code, the [YAML extension created by Red Hat](https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml) and the [JSON schema for SwiftPlantUML](./Configuration/Schema/json-schema-swiftplantuml.json).\n\nIn Visual Studio Code:  <kbd>Code</kbd> -> <kbd>Preferences</kbd> -> <kbd>Settings</kbd> -> search for yaml\n\n<img width=\"503\" alt=\"Screen Shot 2021-02-27 at 5 57 49 AM\" src=\"https://user-images.githubusercontent.com/4176826/109389381-1b7b0380-78c1-11eb-9ba2-0b553aa4dd14.png\">\n\nClick on `Edit in settings.json` and add the respective entry:\n\n```json\n\"yaml.schemas\": {\"https://raw.githubusercontent.com/MarcoEidinger/SwiftPlantUML/main/Configuration/Schema/json-schema-swiftplantuml.json\": \"/.swiftplantuml.yml\" }\n```\n\n## Large Diagrams\n\nOnline tools like [PlantText](https://www.planttext.com/) do not support large diagrams. If your diagram image is incompletely rendered (or not visible at all) by PlantText in the browser then \n- [download PlantUML](https://plantuml.com/download) Java archive to your machine\n- use `swiftplantuml` to generate the script and\n- generate the actual image with `plantuml` locally\n\nHere is the respective command (which assumes that `plantuml.jar` was downloaded in the current directory from which `swifptlantuml` runs)\n\n```bash\nswiftplantuml ./Sources/ --output consoleOnly > sources.txt | java -DPLANTUML_LIMIT_SIZE=8192 -jar plantuml.jar $1\n```\n\nThis will result in the creation of `sources.png` file containing the class diagram up to the size limit.\n\nPlantUML limits image width and height to 4096 with the option to override this limit (`-DPLANTUML_LIMIT_SIZE`) of which I made use in the command above.\n\nIn the table below you see the difference of class diagram output based on the same script. FYI: this script/diagram has 63 entities.\n\n|PlantText Output|PlantUML Output (Default Size Limit)|PlantUML Output (Custom Size Limit)|\n|---|---|---|\n|![sources_planttext](https://user-images.githubusercontent.com/4176826/109912328-ae6cc280-7c60-11eb-9761-fab6c2fc6e4e.png)|![sources_plantumljar](https://user-images.githubusercontent.com/4176826/109912309-a2810080-7c60-11eb-8baf-85585b12984b.png)|![sources_plantumljar_increasedlimit](https://user-images.githubusercontent.com/4176826/109913177-51720c00-7c62-11eb-9757-9d312712c6b5.png)|\n\n## Generate UML documentation from a binary framework\n\nYou can use `swifplantuml` to parse the `.swiftmodule` file of a binary framework, for details and a concrete example please read my article [Generate UML documentation from a binary framework (xcframework)](https://blog.eidinger.info/generate-uml-documentation-from-a-binary-framework-xcframework).\n\n## Planned improvements\n- being able to render associations between elements\n\n## Known limitations\nSee [Large Diagrams](#large-diagrams)\n\n## Logging\n\nCLI will log only error messages per default.\n\nTo log messages with lower priority (warning, info, debug) use the `--verbose` option.\n\nNote: using `--output consoleOnly`, to print the PlantUML script in the console, will log any messages into a log file. This has the advantage that you can pipe the PlantUML script into a file without problems. You can tail the log file with `tail -f /tmp/swiftplantuml.log`\n\n## Manual page\n\nInstalling `swiftplantuml` with Homebrew or from source (`make install`) will also install a man page which you can view with:\n\n```man swiftplantuml```\n\n![manual page for swiftplantuml](https://user-images.githubusercontent.com/4176826/187481252-d6100a7c-1f6e-4589-9361-c4ab3cca4e42.png)\n\n## Acknowledgements\n\nThis project was inspired by https://github.com/palaniraja/swiftuml and its various predecessors. Out of personal preference I chose to start a new project. I wanted to provide a tool for Swift developers written in Swift! This will hopefully allow me and potential contributors to work on planned improvements faster and more efficient. \n\nLast but not least a big shoutout to the great developers of [PlantUML](https://github.com/plantuml/plantuml) and the people who operate the related online servers / tools available on http://plantuml.com/ and https://www.planttext.com/ "
}
