{
  "name": "naga-cli",
  "full_name": "naga-cli",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Shader translation command-line tool",
  "license": "Apache-2.0 or MIT",
  "homepage": "https://github.com/gfx-rs/naga",
  "versions": {
    "stable": "0.13.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/gfx-rs/naga/archive/refs/tags/v0.13.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "126393320084c6bb5aa3916f9edc8de80824e9eb169db805432226eef4a56b15"
    },
    "head": {
      "url": "https://github.com/gfx-rs/naga.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/naga-cli/blobs/sha256:c543c9fdd14ecad2e76a70bf0f68e00d3250c0feb16c349cc41f874120aa7418",
          "sha256": "c543c9fdd14ecad2e76a70bf0f68e00d3250c0feb16c349cc41f874120aa7418"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/naga-cli/blobs/sha256:de5e76261c1506daac39a7e8a011e9d58032cceb476d965756d6f9bd9ae9c42d",
          "sha256": "de5e76261c1506daac39a7e8a011e9d58032cceb476d965756d6f9bd9ae9c42d"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/naga-cli/blobs/sha256:8eba7c210d9e603094835c4260f7bf8c283feca150d31bb22c5299411f214a93",
          "sha256": "8eba7c210d9e603094835c4260f7bf8c283feca150d31bb22c5299411f214a93"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/naga-cli/blobs/sha256:b503d864cdcd12579cb770f37d680e5993ae8eb2f94a09bcea7f532cfa36a109",
          "sha256": "b503d864cdcd12579cb770f37d680e5993ae8eb2f94a09bcea7f532cfa36a109"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/naga-cli/blobs/sha256:ff9c1f73090bb5c15b22ebf24d1599ffb2fc2cd4446995c2d38f073102c8325c",
          "sha256": "ff9c1f73090bb5c15b22ebf24d1599ffb2fc2cd4446995c2d38f073102c8325c"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/naga-cli/blobs/sha256:adf516821a40526a2dd8eefb680c202f50ccccf1c23423cdc7500edd1fd6bd5c",
          "sha256": "adf516821a40526a2dd8eefb680c202f50ccccf1c23423cdc7500edd1fd6bd5c"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/naga-cli/blobs/sha256:734bb3da70b49386352ad5161f8bfc402738c84aff4c7454d15ee1be414715b7",
          "sha256": "734bb3da70b49386352ad5161f8bfc402738c84aff4c7454d15ee1be414715b7"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [
    "naga"
  ],
  "conflicts_with_reasons": [
    "both install `naga` binary"
  ],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/naga-cli.rb",
  "ruby_source_checksum": {
    "sha256": "16b03d26deaa151cca255b68470a6b0d65a7a0558849a54cb555563488d8f33c"
  },
  "date_added": "2022-12-11T19:54:51+00:00",
  "readme": "# Naga\n\n[![Matrix](https://img.shields.io/badge/Matrix-%23naga%3Amatrix.org-blueviolet.svg)](https://matrix.to/#/#naga:matrix.org)\n[![Crates.io](https://img.shields.io/crates/v/naga.svg?label=naga)](https://crates.io/crates/naga)\n[![Docs.rs](https://docs.rs/naga/badge.svg)](https://docs.rs/naga)\n[![Build Status](https://github.com/gfx-rs/naga/workflows/pipeline/badge.svg)](https://github.com/gfx-rs/naga/actions)\n![MSRV](https://img.shields.io/badge/rustc-1.65+-blue.svg)\n[![codecov.io](https://codecov.io/gh/gfx-rs/naga/branch/master/graph/badge.svg?token=9VOKYO8BM2)](https://codecov.io/gh/gfx-rs/naga)\n\nThe shader translation library for the needs of [wgpu](https://github.com/gfx-rs/wgpu).\n\n## Supported end-points\n\nFront-end       |       Status       | Feature | Notes |\n--------------- | ------------------ | ------- | ----- |\nSPIR-V (binary) | :white_check_mark: | spv-in  |       |\nWGSL            | :white_check_mark: | wgsl-in | Fully validated |\nGLSL            | :ok:               | glsl-in | GLSL 440+ and Vulkan semantics only |\n\nBack-end        |       Status       | Feature  | Notes |\n--------------- | ------------------ | -------- | ----- |\nSPIR-V          | :white_check_mark: | spv-out  |       |\nWGSL            | :ok:               | wgsl-out |       |\nMetal           | :white_check_mark: | msl-out  |       |\nHLSL            | :white_check_mark: | hlsl-out | Shader Model 5.0+ (DirectX 11+) |\nGLSL            | :ok:               | glsl-out | GLSL 330+ and GLSL ES 300+ |\nAIR             |                    |          |       |\nDXIL/DXIR       |                    |          |       |\nDXBC            |                    |          |       |\nDOT (GraphViz)  | :ok:               | dot-out  | Not a shading language |\n\n:white_check_mark: = Primary support — :ok: = Secondary support — :construction: = Unsupported, but support in progress\n\n## Conversion tool\n\nNaga can be used as a CLI, which allows to test the conversion of different code paths.\n\nFirst, install `naga-cli` from crates.io or directly from GitHub.\n\n```bash\n# release version\ncargo install naga-cli\n\n# development version\ncargo install naga-cli --git https://github.com/gfx-rs/naga.git\n```\n\nThen, you can run `naga` command.\n\n```bash\nnaga my_shader.wgsl # validate only\nnaga my_shader.spv my_shader.txt # dump the IR module into a file\nnaga my_shader.spv my_shader.metal --flow-dir flow-dir # convert the SPV to Metal, also dump the SPIR-V flow graph to `flow-dir`\nnaga my_shader.wgsl my_shader.vert --profile es310 # convert the WGSL to GLSL vertex stage under ES 3.20 profile\n```\n\nAs naga includes a default binary target, you can also use `cargo run` without installation. This is useful when you develop naga itself, or investigate the behavior of naga at a specific commit (e.g. [wgpu](https://github.com/gfx-rs/wgpu) might pin a different version of naga than the `HEAD` of this repository).\n\n```bash\ncargo run my_shader.wgsl\n```\n\n## Development workflow\n\nThe main instrument aiding the development is the good old `cargo test --all-features --workspace`,\nwhich will run the unit tests, and also update all the snapshots. You'll see these\nchanges in git before committing the code.\n\nIf working on a particular front-end or back-end, it may be convenient to\nenable the relevant features in `Cargo.toml`, e.g.\n```toml\ndefault = [\"spv-out\"] #TEMP!\n```\nThis allows IDE basic checks to report errors there, unless your IDE is sufficiently configurable already.\n\nFinally, when changes to the snapshots are made, we should verify that the produced shaders\nare indeed valid for the target platforms they are compiled for:\n```bash\ncargo xtask validate spv # for Vulkan shaders, requires SPIRV-Tools installed\ncargo xtask validate msl # for Metal shaders, requires XCode command-line tools installed\ncargo xtask validate glsl # for OpenGL shaders, requires GLSLang installed\ncargo xtask validate dot # for dot files, requires GraphViz installed\ncargo xtask validate wgsl # for WGSL shaders\ncargo xtask validate hlsl dxc # for HLSL shaders via DXC\ncargo xtask validate hlsl fxc # for HLSL shaders via FXC\n```"
}
