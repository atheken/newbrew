{
  "name": "kubespy",
  "full_name": "kubespy",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Tools for observing Kubernetes resources in realtime",
  "license": "Apache-2.0",
  "homepage": "https://github.com/pulumi/kubespy",
  "versions": {
    "stable": "0.6.2",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/pulumi/kubespy/archive/v0.6.2.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "17a1c75357557f2caa9a6f781bcf628323b4cae42a05b123cd2d73f0bf9bd73c"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kubespy/blobs/sha256:5d2185d63e9cd41c6d28aa2a1433d43ea08b334d326ffebe29ea7b63baaeb056",
          "sha256": "5d2185d63e9cd41c6d28aa2a1433d43ea08b334d326ffebe29ea7b63baaeb056"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kubespy/blobs/sha256:06167bc087e73dcd0e5a49f6e71b6a73fcba89989a9fee7c37ddb9cc68d5c076",
          "sha256": "06167bc087e73dcd0e5a49f6e71b6a73fcba89989a9fee7c37ddb9cc68d5c076"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kubespy/blobs/sha256:e4d63724253e368ba65d670a373a7581ed55abb56ae4a28deb053f4276434cf0",
          "sha256": "e4d63724253e368ba65d670a373a7581ed55abb56ae4a28deb053f4276434cf0"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kubespy/blobs/sha256:383354122647beb2a09d537c82255f6fedddc606db8f40d55e036156ad7f600c",
          "sha256": "383354122647beb2a09d537c82255f6fedddc606db8f40d55e036156ad7f600c"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kubespy/blobs/sha256:db91d1f2fe51df06c3abf142758420bd969ca20a0fd5e575abf7afe2689cbc12",
          "sha256": "db91d1f2fe51df06c3abf142758420bd969ca20a0fd5e575abf7afe2689cbc12"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kubespy/blobs/sha256:9ea4bfb1eb75049dfe3a2a5dcf21166c7c060a47fa04dd75452eb8dff9976620",
          "sha256": "9ea4bfb1eb75049dfe3a2a5dcf21166c7c060a47fa04dd75452eb8dff9976620"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kubespy/blobs/sha256:6ad332e5eb24531a527b253931487b8f2935cb190ccd72ecb98b2141b91f8d68",
          "sha256": "6ad332e5eb24531a527b253931487b8f2935cb190ccd72ecb98b2141b91f8d68"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/kubespy.rb",
  "ruby_source_checksum": {
    "sha256": "f934e8eb8e1e85e16d6668ddcd3ae9724d2079ee68f4985b04e8b00c0716ec18"
  },
  "date_added": "2018-11-22T10:47:11+01:00",
  "readme": "# kubespy: tools for observing Kubernetes resources in real time\n\nWhat happens when you boot up a `Pod`? What happens to a `Service` before it is allocated a public\nIP address? How often is a `Deployment`'s status changing?\n\n**`kubespy` is a small tool that makes it easy to observe how Kubernetes resources change in real\ntime,** derived from the work we did to make Kubernetes deployments predictable in [Pulumi's CLI](https://www.pulumi.com/kubernetes/). Run `kubespy` at any point in time, and it will watch and report information about a\nKubernetes resource continuously until you kill it.\n\n## Examples\n\n`kubespy trace deployment nginx` will \"trace\" the complex changes a complex Kubernetes resource\nmakes in the cluster (in this case, a `Deployment` called `nginx`), and aggregate them into a\nhigh-level summary, which is updated in real time.\n\n![Changes](images/trace-deployment/trace-deployment-rollout.gif \"Changes a Deployment rolls out a new change, in real time\")\n\n`kubespy status v1 Pod nginx` will wait for a `Pod` called `nginx` to be created, and then continuously emit changes made to its `.status` field, as syntax-highlighted JSON diffs:\n\n![Changes](images/status.gif \"Changes a Pod undergoes as it starts, in real time\")\n\n## Installation\n\nYou can install kubespy in the following ways:\n\n### Homebrew (Mac)\n\nPrerequisite: [homebrew](https://docs.brew.sh/Installation)\n\n```bash\nbrew install kubespy\n```\n\n### Binary\n\nGet the [latest release](https://github.com/pulumi/kubespy/releases),\nrename it to `kubespy`, run `chmod +x kubespy` to make it executable and move it in your path (can be /usr/local/bin).\n\n### Kubectl Plugin\n\nPrerequisite: kubectl v1.12.0 or later\n\nWith kubectl v1.12.0 introducing [easy pluggability](https://kubernetes.io/docs/tasks/extend-kubectl/kubectl-plugins/) of external functions, kubespy can be invoked as `kubectl spy` just by renaming it to `kubectl-spy` and having it available in your path.\n\n### via Golang\n\nPrerequisite: [Go](https://golang.org/) version 1.11 or later\n\nkubespy can be installed via golang by running the following:\n\n```sh\ngit clone git@github.com:pulumi/kubespy.git\ncd kubespy\n# If $GOPATH is not set, you can run `go build` instead, and then put in a\n# binary directory on your path\nGO111MODULE=on go install\n```\n\n## Usage\n\n`kubespy` has four commands:\n\n-   `status <apiVersion> <kind> [<namespace>/]<name>`, which in real time emits all changes made to\n    the `.status` field of an arbitrary Kubernetes resource, as a JSON diff.\n-   `changes <apiVersion> <kind> [<namespace>/]<name>`, which in real time emits all changes to any\n    field in a Kubernetes resource, as a JSON diff.\n-   `trace <kind> [<namespace>/]<name>`, which \"traces\" the changes a complex Kubernetes resource\n    makes throughout a cluster, and aggregates them into a high-level summary, which is updated in\n    real time.\n-   `record <apiVersion> <kind> [<namespace>/]<name>`, which in real time emits all changes to any\n    field in a Kubernetes resource, as a JSON array.\n\nSeveral more commands are planned as well.\n\n## Examples\n\nFor a concrete example you can run using either `Pulumi CLI` or `kubectl`, check out [examples/trivial-pulumi-example](https://github.com/pulumi/kubespy/tree/master/examples/trivial-pulumi-example).\n\n## Features\n\n-   [x] Supports any resources the API server knows about, including CRDs (_i.e._, uses the discovery\n        client to discover the available API resources, and allows users to query any of them).\n-   [x] Displays changes to API objects in real time.\n-   [ ] Supports case-insensitive aliases (_e.g._ `kubespy status v1 pod <name>` instead of\n        `kubespy status v1 Pod <name>`).\n-   [ ] Supports status updates from regex and/or fuzzy matching (_i.e._, make it easy to watch the\n        status of `Pod`s generated by `Deployment`s and `ReplicaSet`s)."
}
