{
  "name": "zsh-autosuggestions",
  "full_name": "zsh-autosuggestions",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Fish-like fast/unobtrusive autosuggestions for zsh",
  "license": "MIT",
  "homepage": "https://github.com/zsh-users/zsh-autosuggestions",
  "versions": {
    "stable": "0.7.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/zsh-users/zsh-autosuggestions/archive/v0.7.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "ccd97fe9d7250b634683c651ef8a2fe3513ea917d1b491e8696a2a352b714f08"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zsh-autosuggestions/blobs/sha256:4537653cbf3540a0785481966b36291255839f1be4012a22409ef97c46a1860b",
          "sha256": "4537653cbf3540a0785481966b36291255839f1be4012a22409ef97c46a1860b"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    {
      "zsh": "test"
    }
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": "To activate the autosuggestions, add the following at the end of your .zshrc:\n\n  source $HOMEBREW_PREFIX/share/zsh-autosuggestions/zsh-autosuggestions.zsh\n\nYou will also need to restart your terminal for this change to take effect.\n",
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/zsh-autosuggestions.rb",
  "ruby_source_checksum": {
    "sha256": "97ccf7102b60c440486c167162d250f5271fb3c0a231510a86490cba7ec35b5a"
  },
  "date_added": "2016-04-02T18:30:24+01:00",
  "readme": "# zsh-autosuggestions\n\n_[Fish](http://fishshell.com/)-like fast/unobtrusive autosuggestions for zsh._\n\nIt suggests commands as you type based on history and completions.\n\nRequirements: Zsh v4.3.11 or later\n\n[![CircleCI](https://img.shields.io/circleci/build/github/zsh-users/zsh-autosuggestions.svg)](https://circleci.com/gh/zsh-users/zsh-autosuggestions)\n[![Chat on Gitter](https://img.shields.io/gitter/room/zsh-users/zsh-autosuggestions.svg)](https://gitter.im/zsh-users/zsh-autosuggestions)\n\n<a href=\"https://asciinema.org/a/37390\" target=\"_blank\"><img src=\"https://asciinema.org/a/37390.png\" width=\"400\" /></a>\n\n\n## Installation\n\nSee [INSTALL.md](INSTALL.md).\n\n\n## Usage\n\nAs you type commands, you will see a completion offered after the cursor in a muted gray color. This color can be changed by setting the `ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE` variable. See [configuration](#configuration).\n\nIf you press the <kbd>â†’</kbd> key (`forward-char` widget) or <kbd>End</kbd> (`end-of-line` widget) with the cursor at the end of the buffer, it will accept the suggestion, replacing the contents of the command line buffer with the suggestion.\n\nIf you invoke the `forward-word` widget, it will partially accept the suggestion up to the point that the cursor moves to.\n\n\n## Configuration\n\nYou may want to override the default global config variables. Default values of these variables can be found [here](src/config.zsh).\n\n**Note:** If you are using Oh My Zsh, you can put this configuration in a file in the `$ZSH_CUSTOM` directory. See their comments on [overriding internals](https://github.com/robbyrussell/oh-my-zsh/wiki/Customization#overriding-internals).\n\n\n### Suggestion Highlight Style\n\nSet `ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE` to configure the style that the suggestion is shown with. The default is `fg=8`, which will set the foreground color to color 8 from the [256-color palette](https://upload.wikimedia.org/wikipedia/commons/1/15/Xterm_256color_chart.svg). If your terminal only supports 8 colors, you will need to use a number between 0 and 7.\n\nBackground color can also be set, and the suggestion can be styled bold, underlined, or standout. For example, this would show suggestions with bold, underlined, pink text on a cyan background:\n\n```sh\nZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=\"fg=#ff00ff,bg=cyan,bold,underline\"\n```\n\nFor more info, read the Character Highlighting section of the zsh manual: `man zshzle` or [online](http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html#Character-Highlighting).\n\n**Note:** Some iTerm2 users have reported [not being able to see the suggestions](https://github.com/zsh-users/zsh-autosuggestions/issues/416#issuecomment-486516333). If this affects you, the problem is likely caused by incorrect color settings. In order to correct this, go into iTerm2's setting, navigate to profile > colors and make sure that the colors for Basic Colors > Background and ANSI Colors > Bright Black are **different**.\n\n\n### Suggestion Strategy\n\n`ZSH_AUTOSUGGEST_STRATEGY` is an array that specifies how suggestions should be generated. The strategies in the array are tried successively until a suggestion is found. There are currently three built-in strategies to choose from:\n\n- `history`: Chooses the most recent match from history.\n- `completion`: Chooses a suggestion based on what tab-completion would suggest. (requires `zpty` module, which is included with zsh since 4.0.1)\n- `match_prev_cmd`: Like `history`, but chooses the most recent match whose preceding history item matches the most recently executed command ([more info](src/strategies/match_prev_cmd.zsh)). Note that this strategy won't work as expected with ZSH options that don't preserve the history order such as `HIST_IGNORE_ALL_DUPS` or `HIST_EXPIRE_DUPS_FIRST`.\n\nFor example, setting `ZSH_AUTOSUGGEST_STRATEGY=(history completion)` will first try to find a suggestion from your history, but, if it can't find a match, will find a suggestion from the completion engine.\n\n\n### Widget Mapping\n\nThis plugin works by triggering custom behavior when certain [zle widgets](http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html#Zle-Widgets) are invoked. You can add and remove widgets from these arrays to change the behavior of this plugin:\n\n- `ZSH_AUTOSUGGEST_CLEAR_WIDGETS`: Widgets in this array will clear the suggestion when invoked.\n- `ZSH_AUTOSUGGEST_ACCEPT_WIDGETS`: Widgets in this array will accept the suggestion when invoked.\n- `ZSH_AUTOSUGGEST_EXECUTE_WIDGETS`: Widgets in this array will execute the suggestion when invoked.\n- `ZSH_AUTOSUGGEST_PARTIAL_ACCEPT_WIDGETS`: Widgets in this array will partially accept the suggestion when invoked.\n- `ZSH_AUTOSUGGEST_IGNORE_WIDGETS`: Widgets in this array will not trigger any custom behavior.\n\nWidgets that modify the buffer and are not found in any of these arrays will fetch a new suggestion after they are invoked.\n\n**Note:** A widget shouldn't belong to more than one of the above arrays.\n\n\n### Disabling suggestion for large buffers\n\nSet `ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE` to an integer value to disable autosuggestion for large buffers. The default is unset, which means that autosuggestion will be tried for any buffer size. Recommended value is 20.\nThis can be useful when pasting large amount of text in the terminal, to avoid triggering autosuggestion for strings that are too long.\n\n### Asynchronous Mode\n\nSuggestions are fetched asynchronously by default in zsh versions 5.0.8 and greater. To disable asynchronous suggestions and fetch them synchronously instead, `unset ZSH_AUTOSUGGEST_USE_ASYNC` after sourcing the plugin.\n\nAlternatively, if you are using a version of zsh older than 5.0.8 and want to enable asynchronous mode, set the `ZSH_AUTOSUGGEST_USE_ASYNC` variable after sourcing the plugin (it can be set to anything). Note that there is [a bug](https://github.com/zsh-users/zsh-autosuggestions/issues/364#issuecomment-481423232) in versions of zsh older than 5.0.8 where <kbd>ctrl</kbd> + <kbd>c</kbd> will fail to reset the prompt immediately after fetching a suggestion asynchronously.\n\n### Disabling automatic widget re-binding\n\nSet `ZSH_AUTOSUGGEST_MANUAL_REBIND` (it can be set to anything) to disable automatic widget re-binding on each precmd. This can be a big boost to performance, but you'll need to handle re-binding yourself if any of the widget lists change or if you or another plugin wrap any of the autosuggest widgets. To re-bind widgets, run `_zsh_autosuggest_bind_widgets`.\n\n### Ignoring history suggestions that match a pattern\n\nSet `ZSH_AUTOSUGGEST_HISTORY_IGNORE` to a [glob pattern](http://zsh.sourceforge.net/Doc/Release/Expansion.html#Glob-Operators) to prevent offering suggestions for history entries that match the pattern. For example, set it to `\"cd *\"` to never suggest any `cd` commands from history. Or set to `\"?(#c50,)\"` to never suggest anything 50 characters or longer.\n\n**Note:** This only affects the `history` and `match_prev_cmd` suggestion strategies.\n\n### Skipping completion suggestions for certain cases\n\nSet `ZSH_AUTOSUGGEST_COMPLETION_IGNORE` to a [glob pattern](http://zsh.sourceforge.net/Doc/Release/Expansion.html#Glob-Operators) to prevent offering completion suggestions when the buffer matches that pattern. For example, set it to `\"git *\"` to disable completion suggestions for git subcommands.\n\n**Note:** This only affects the `completion` suggestion strategy.\n\n\n### Key Bindings\n\nThis plugin provides a few widgets that you can use with `bindkey`:\n\n1. `autosuggest-accept`: Accepts the current suggestion.\n2. `autosuggest-execute`: Accepts and executes the current suggestion.\n3. `autosuggest-clear`: Clears the current suggestion.\n4. `autosuggest-fetch`: Fetches a suggestion (works even when suggestions are disabled).\n5. `autosuggest-disable`: Disables suggestions.\n6. `autosuggest-enable`: Re-enables suggestions.\n7. `autosuggest-toggle`: Toggles between enabled/disabled suggestions.\n\nFor example, this would bind <kbd>ctrl</kbd> + <kbd>space</kbd> to accept the current suggestion.\n\n```sh\nbindkey '^ ' autosuggest-accept\n```\n\n\n## Troubleshooting\n\nIf you have a problem, please search through [the list of issues on GitHub](https://github.com/zsh-users/zsh-autosuggestions/issues?q=) to see if someone else has already reported it.\n\n### Reporting an Issue\n\nBefore reporting an issue, please try temporarily disabling sections of your configuration and other plugins that may be conflicting with this plugin to isolate the problem.\n\nWhen reporting an issue, please include:\n\n- The smallest, simplest `.zshrc` configuration that will reproduce the problem. See [this comment](https://github.com/zsh-users/zsh-autosuggestions/issues/102#issuecomment-180944764) for a good example of what this means.\n- The version of zsh you're using (`zsh --version`)\n- Which operating system you're running\n\n\n## Uninstallation\n\n1. Remove the code referencing this plugin from `~/.zshrc`.\n\n2. Remove the git repository from your hard drive\n\n    ```sh\n    rm -rf ~/.zsh/zsh-autosuggestions # Or wherever you installed\n    ```\n\n\n## Development\n\n### Build Process\n\nEdit the source files in `src/`. Run `make` to build `zsh-autosuggestions.zsh` from those source files.\n\n\n### Pull Requests\n\nPull requests are welcome! If you send a pull request, please:\n\n- Request to merge into the `develop` branch (*NOT* `master`)\n- Match the existing coding conventions.\n- Include helpful comments to keep the barrier-to-entry low for people new to the project.\n- Write tests that cover your code as much as possible.\n\n\n### Testing\n\nTests are written in ruby using the [`rspec`](http://rspec.info/) framework. They use [`tmux`](https://tmux.github.io/) to drive a pseudoterminal, sending simulated keystrokes and making assertions on the terminal content.\n\nTest files live in `spec/`. To run the tests, run `make test`. To run a specific test, run `TESTS=spec/some_spec.rb make test`. You can also specify a `zsh` binary to use by setting the `TEST_ZSH_BIN` environment variable (ex: `TEST_ZSH_BIN=/bin/zsh make test`).\n\nA docker image for testing is available [on docker hub](https://hub.docker.com/r/ericfreese/zsh-autosuggestions-test). It comes with ruby, the bundler dependencies, and all supported versions of zsh installed.\n\nPull the docker image with:\n\n```sh\ndocker pull ericfreese/zsh-autosuggestions-test\n```\n\nTo run the tests for a specific version of zsh (where `<version>` below is substituted with the contents of a line from the [`ZSH_VERSIONS`](ZSH_VERSIONS) file):\n\n```sh\ndocker run -it -e TEST_ZSH_BIN=zsh-<version> -v $PWD:/zsh-autosuggestions zsh-autosuggestions-test make test\n```\n\n\n## License\n\nThis project is licensed under [MIT license](http://opensource.org/licenses/MIT).\nFor the full text of the license, see the [LICENSE](LICENSE) file."
}
