{
  "name": "pipgrip",
  "full_name": "pipgrip",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Lightweight pip dependency resolver",
  "license": "BSD-3-Clause",
  "homepage": "https://github.com/ddelange/pipgrip",
  "versions": {
    "stable": "0.10.4",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://files.pythonhosted.org/packages/4c/fc/48fb28d8615c2bdbc2555da0c2f2f52a20d95ba606a4d5f4f67aad6fbd46/pipgrip-0.10.4.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "ccdd5068d0171093e3a8e2670dceb17e609ed1ed05a7d533d41678e48e938e31"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pipgrip/blobs/sha256:c18cb820ee0e1bc055151788d53615de04d92906cfa797fd1f7ae0845bd37bc1",
          "sha256": "c18cb820ee0e1bc055151788d53615de04d92906cfa797fd1f7ae0845bd37bc1"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pipgrip/blobs/sha256:4355b59405f1da21ae2e551cb93be0cac817d110ac351d1de15cd2d494a7490c",
          "sha256": "4355b59405f1da21ae2e551cb93be0cac817d110ac351d1de15cd2d494a7490c"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pipgrip/blobs/sha256:6aae463dd8bb2149655b22555385a4130de5ccd91d73fa4513b3d6b8d856befb",
          "sha256": "6aae463dd8bb2149655b22555385a4130de5ccd91d73fa4513b3d6b8d856befb"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pipgrip/blobs/sha256:13d25363d7a764ee74e3f4b065bb5f22031acde890a96ceedc5b4d40c495cec7",
          "sha256": "13d25363d7a764ee74e3f4b065bb5f22031acde890a96ceedc5b4d40c495cec7"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pipgrip/blobs/sha256:f979a0ef7ad5ac34d753eea71cedc1c91470793afe243eca1a2915df07f316f2",
          "sha256": "f979a0ef7ad5ac34d753eea71cedc1c91470793afe243eca1a2915df07f316f2"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pipgrip/blobs/sha256:755f6718559d08e0e346542743dfcae15f3e3af7ec18c637780706e3073cf7b4",
          "sha256": "755f6718559d08e0e346542743dfcae15f3e3af7ec18c637780706e3073cf7b4"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pipgrip/blobs/sha256:0b788320b39cf5db887f51d994170a33fe4c19431bb914a5f327b5a6ad83a3c9",
          "sha256": "0b788320b39cf5db887f51d994170a33fe4c19431bb914a5f327b5a6ad83a3c9"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "python@3.11",
    "six"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/pipgrip.rb",
  "ruby_source_checksum": {
    "sha256": "bef30e91042523251837276e16e27989567d0ca0dacca51b96f018e7951b9e4e"
  },
  "date_added": "2020-07-23T07:09:02+00:00",
  "readme": "# pipgrip\n\n[![build](https://img.shields.io/github/actions/workflow/status/ddelange/pipgrip/main.yml?branch=master&logo=github&cacheSeconds=86400)](https://github.com/ddelange/pipgrip/actions?query=branch%3Amaster)\n[![codecov](https://img.shields.io/codecov/c/github/ddelange/pipgrip/master?logo=codecov&logoColor=white)](https://codecov.io/gh/ddelange/pipgrip)\n[![pypi](https://img.shields.io/pypi/v/pipgrip.svg?logo=pypi&logoColor=white)](https://pypi.org/project/pipgrip/)\n[![homebrew](https://img.shields.io/homebrew/v/pipgrip?logo=homebrew&logoColor=white)](https://formulae.brew.sh/formula/pipgrip)\n[![python](https://img.shields.io/pypi/pyversions/pipgrip.svg?logo=python&logoColor=white)](https://pypi.org/project/pipgrip/)\n[![downloads](https://pepy.tech/badge/pipgrip)](https://pypistats.org/packages/pipgrip)\n\n[pipgrip](https://github.com/ddelange/pipgrip) is a lightweight pip dependency resolver with deptree preview functionality based on the [PubGrub algorithm](https://medium.com/@nex3/pubgrub-2fb6470504f), which is also used by [poetry](https://github.com/python-poetry/poetry). For one or more [PEP 508](https://www.python.org/dev/peps/pep-0508/) dependency specifications, pipgrip recursively fetches/builds the Python wheels necessary for version solving, and optionally renders the full resulting dependency tree.\n\n```\n$ pipgrip --tree fastapi~=0.94\n\nfastapi~=0.94 (0.95.1)\n├── pydantic!=1.7,!=1.7.1,!=1.7.2,!=1.7.3,!=1.8,!=1.8.1,<2.0.0,>=1.6.2 (1.10.7)\n│   └── typing-extensions>=4.2.0 (4.5.0)\n└── starlette<0.27.0,>=0.26.1 (0.26.1)\n    └── anyio<5,>=3.4.0 (3.6.2)\n        ├── idna>=2.8 (3.4)\n        └── sniffio>=1.1 (1.3.0)\n```\n\n#### pipgrip vs. poetry\n\n[poetry](https://github.com/python-poetry/poetry) offers package management with dependency resolution, essentially replacing pip/setuptools. This means that poetry packages don't contain `setup.py`, and hence are not compatible with `pip install -e`: poetry projects would have to be converted to setuptools-based projects with e.g. [dephell](https://github.com/dephell/dephell). To avoid such hassle, pipgrip only requires the selected package(s) + dependencies to be available to pip in the usual way.\n\n#### pipgrip vs. pipdeptree\n\nFor offline usage, [pipdeptree](https://github.com/naiquevin/pipdeptree) can inspect the current environment and show how the currently installed packages relate to each other. This however requires the packages to be pip-installed, and (despite warnings about e.g. cyclic dependencies) offers no form of dependency resolution since it's only based on the (single) package versions installed in the environment. Such shortcomings are avoided when using pipgrip, since **packages don't need to be installed and all versions available to pip are considered**.\n\n## Installation\n\nThis pure-Python, OS independent package is available on [PyPI](https://pypi.org/project/pipgrip/):\n\n```\npip install pipgrip\n```\n\n## Usage\n\nThis package can be used to:\n\n- **Render** an exhaustive dependency tree for any given pip-compatible package(s):\n  - `pipgrip --tree requests`\n- **Alleviate** [Python dependency hell](https://medium.com/knerd/the-nine-circles-of-python-dependency-hell-481d53e3e025) by resolving the latest viable combination of required packages\n- **Avoid** bugs by running pipgrip as a stage in CI pipelines\n- **Detect** version conflicts for given constraints and give human readable feedback about it\n- **Warn** for cyclic dependencies in local projects [and install them anyway]:\n  - `pipgrip -v --tree . [--install -e]`\n- **Install** complex packages without worries:\n  - `pipgrip --install aiobotocore[awscli]`\n- **Generate** a lockfile with a complete working set of dependencies for reproducible installs:\n  - `pipgrip --lock aiobotocore[awscli] && pip install aiobotocore[awscli] --constraint ./pipgrip.lock`\n- **Combine** dependency trees of multiple packages into one unified set of pinned packages:\n  - `pipgrip .[boto3] s3transfer==0.2.1 s3fs smart_open[s3]`\n\nSee also [known caveats](#known-caveats).\n\nOptionally, the environment variable `PIPGRIP_ADDITIONAL_REQUIREMENTS` can be populated with space/newline separated requirements, which will be appended to the requirements passed via CLI.\n\n```\n$ pipgrip --help\n\nUsage: pipgrip [OPTIONS] [DEPENDENCIES]...\n\n  pipgrip is a lightweight pip dependency resolver with deptree preview\n  functionality based on the PubGrub algorithm, which is also used by poetry. For\n  one or more PEP 508 dependency specifications, pipgrip recursively\n  fetches/builds the Python wheels necessary for version solving, and optionally\n  renders the full resulting dependency tree.\n\nOptions:\n  --install                     Install full dependency tree after resolving.\n  -e, --editable                Install a project in editable mode.\n  --user                        Install to the Python user install directory for\n                                your platform -- typically ~/.local/, or\n                                %APPDATA%\\Python on Windows.\n  -r, --requirements-file FILE  Install from the given requirements file. This\n                                option can be used multiple times.\n  --lock                        Write out pins to './pipgrip.lock'.\n  --pipe                        Output space-separated pins instead of newline-\n                                separated pins.\n  --json                        Output pins as JSON dict instead of newline-\n                                separated pins. Combine with --tree for a detailed\n                                nested JSON dependency tree.\n  --sort                        Sort pins alphabetically before writing out. Can\n                                be used bare, or in combination with --lock,\n                                --pipe, --json, --tree-json, or --tree-json-exact.\n  --tree                        Output human readable dependency tree (top-down).\n                                Combine with --json for a detailed nested JSON\n                                dependency tree. Use --tree-json instead for a\n                                simplified JSON dependency tree (requirement\n                                strings as keys, dependencies as values), or\n                                --tree-json-exact for exact pins as keys.\n  --tree-ascii                  Output human readable dependency tree with ASCII\n                                tree markers.\n  --reversed-tree               Output human readable dependency tree (bottom-up).\n  --max-depth INTEGER           Maximum (JSON) tree rendering depth (default -1).\n  --cache-dir DIRECTORY         Use a custom cache dir.\n  --no-cache-dir                Disable pip cache for the wheels downloaded by\n                                pipper. Overrides --cache-dir.\n  --index-url TEXT              Base URL of the Python Package Index (default\n                                https://pypi.org/simple).\n  --extra-index-url TEXT        Extra URLs of package indexes to use in addition\n                                to --index-url.\n  --threads INTEGER             Maximum amount of threads to use for running\n                                concurrent pip subprocesses.\n  --pre                         Include pre-release and development versions. By\n                                default, pip implicitly excludes pre-releases\n                                (unless specified otherwise by PEP 440).\n  -v, --verbose                 Control verbosity: -v will print cyclic\n                                dependencies (WARNING), -vv will show solving\n                                decisions (INFO), -vvv for development (DEBUG).\n  -h, --help                    Show this message and exit.\n```\n\n#### Dependency trees\n\nExhaustive dependency trees without the need to install any packages ([at most build some wheels](https://github.com/ddelange/pipgrip/issues/40)).\n\n```\n$ pipgrip --tree pipgrip\n\npipgrip (0.10.6)\n├── anytree>=2.4.1 (2.9.0)\n│   └── six (1.16.0)\n├── click>=7 (8.1.6)\n├── packaging>=17 (23.1)\n├── pip>=22.2 (23.2.1)\n├── setuptools>=38.3 (68.0.0)\n└── wheel (0.41.1)\n```\n\nFor more details/further processing, combine `--tree` with `--json` for a detailed nested JSON dependency tree. See also `--tree-ascii` (no unicode tree markers), and `--tree-json` & `--tree-json-exact` (simplified JSON dependency trees).\n\n#### Lockfile generation\n\nUsing the `--lock` option, resolved (pinned) dependencies are additionally written to `./pipgrip.lock`.\n\n```\n$ pipgrip --tree --lock botocore==1.13.48 'boto3>=1.10,<1.10.50'\n\nbotocore==1.13.48 (1.13.48)\n├── docutils<0.16,>=0.10 (0.15.2)\n├── jmespath<1.0.0,>=0.7.1 (0.9.5)\n├── python-dateutil<3.0.0,>=2.1 (2.8.1)\n│   └── six>=1.5 (1.14.0)\n└── urllib3<1.26,>=1.20 (1.25.8)\nboto3<1.10.50,>=1.10 (1.10.48)\n├── botocore<1.14.0,>=1.13.48 (1.13.48)\n│   ├── docutils<0.16,>=0.10 (0.15.2)\n│   ├── jmespath<1.0.0,>=0.7.1 (0.9.5)\n│   ├── python-dateutil<3.0.0,>=2.1 (2.8.1)\n│   │   └── six>=1.5 (1.14.0)\n│   └── urllib3<1.26,>=1.20 (1.25.8)\n├── jmespath<1.0.0,>=0.7.1 (0.9.5)\n└── s3transfer<0.3.0,>=0.2.0 (0.2.1)\n    └── botocore<2.0.0,>=1.12.36 (1.13.48)\n        ├── docutils<0.16,>=0.10 (0.15.2)\n        ├── jmespath<1.0.0,>=0.7.1 (0.9.5)\n        ├── python-dateutil<3.0.0,>=2.1 (2.8.1)\n        │   └── six>=1.5 (1.14.0)\n        └── urllib3<1.26,>=1.20 (1.25.8)\n\n$ cat ./pipgrip.lock\n\nbotocore==1.13.48\ndocutils==0.15.2\njmespath==0.9.5\npython-dateutil==2.8.1\nsix==1.14.0\nurllib3==1.25.8\nboto3==1.10.48\ns3transfer==0.2.1\n```\n\nNOTE:\nSince the selected botocore version is older than the one required by the recent versions of boto3, all boto3 versions will be checked for compatibility with botocore==1.13.48.\n\n#### Version conflicts\n\nIf version conflicts exist for the given (ranges of) package version(s), a verbose explanation is raised.\n\n```\n$ pipgrip auto-sklearn~=0.6 dragnet==2.0.4\n\nError: Because dragnet (2.0.4) depends on scikit-learn (>=0.15.2,<0.21.0)\n and auto-sklearn (0.6.0) depends on scikit-learn (<0.22,>=0.21.0), dragnet (2.0.4) is incompatible with auto-sklearn (0.6.0).\nAnd because no versions of auto-sklearn match >0.6.0,<1.0, dragnet (2.0.4) is incompatible with auto-sklearn (>=0.6.0,<1.0).\nSo, because root depends on both auto-sklearn (~=0.6) and dragnet (==2.0.4), version solving failed.\n```\n\nNOTE:\nIf older versions of auto-sklearn are allowed, PubGrub will try all acceptable versions of auto-sklearn. In this case, auto-sklearn==0.5.2 requires scikit-learn (<0.20,>=0.19), making it compatible with dragnet==2.0.4.\n\n#### Cyclic dependencies\n\nIf cyclic dependencies are found, it is noted in the resulting tree.\n\n```\n$ pipgrip --tree -v keras==2.2.2\n\nWARNING: Cyclic dependency found: keras depends on keras-applications and vice versa.\nWARNING: Cyclic dependency found: keras depends on keras-preprocessing and vice versa.\nkeras==2.2.2 (2.2.2)\n├── h5py (2.10.0)\n│   ├── numpy>=1.7 (1.18.1)\n│   └── six (1.14.0)\n├── keras-applications==1.0.4 (1.0.4)\n│   ├── h5py (2.10.0)\n│   │   ├── numpy>=1.7 (1.18.1)\n│   │   └── six (1.14.0)\n│   ├── keras>=2.1.6 (2.2.2, cyclic)\n│   └── numpy>=1.9.1 (1.18.1)\n├── keras-preprocessing==1.0.2 (1.0.2)\n│   ├── keras>=2.1.6 (2.2.2, cyclic)\n│   ├── numpy>=1.9.1 (1.18.1)\n│   ├── scipy>=0.14 (1.4.1)\n│   │   └── numpy>=1.13.3 (1.18.1)\n│   └── six>=1.9.0 (1.14.0)\n├── numpy>=1.9.1 (1.18.1)\n├── pyyaml (5.3)\n├── scipy>=0.14 (1.4.1)\n│   └── numpy>=1.13.3 (1.18.1)\n└── six>=1.9.0 (1.14.0)\n```\n\n## Known caveats\n\n- PubGrub doesn't support [version epochs](https://www.python.org/dev/peps/pep-0440/#version-epochs), the [main reason](https://github.com/pypa/pip/issues/8203#issuecomment-704931138) PyPA chose [resolvelib](https://github.com/sarugaku/resolvelib) over PubGrub for their new resolver.\n- Package names are canonicalised in wheel metadata, resulting in e.g. `path.py -> path-py` and `keras_preprocessing -> keras-preprocessing` in output.\n- [VCS Support](https://pip.pypa.io/en/stable/topics/vcs-support): combining VCS requirements with `--editable`, as well as the [`@ -e svn+`](https://pip.pypa.io/en/stable/topics/vcs-support/#subversion) pattern are not supported.\n- Similar to setuptools' `install_requires`, omitting the `projectname @` prefix is not supported neither for VCS requirements (like `pip install git+https...`), nor for [PEP 440](https://www.python.org/dev/peps/pep-0440) direct references (like `pip install https...`).\n- Parsing requirements files (`-r`) does not support: [custom file encodings](https://pip.pypa.io/en/stable/reference/requirements-file-format/#encoding), [line continuations](https://pip.pypa.io/en/stable/reference/requirements-file-format/#line-continuations), [global/per-requirement options](https://pip.pypa.io/en/stable/reference/requirements-file-format/#supported-options)\n- `--reversed-tree` isn't implemented yet.\n- Since `pip install -r` does not accept `.` as requirement, it is omitted from `--lock` output. So when installing local projects, either `--pipe` or `--install` should be used (the latter basically does `pipgrip --lock . && pip install . --constraint ./pipgrip.lock`).\n- Local paths are not supported (like `pip install -e ../aiobotocore[boto3]`), except for the current directory (like `pipgrip --install -e .[boto3]`).\n\n## Development\n\n[![gitmoji](https://img.shields.io/badge/gitmoji-%20%F0%9F%98%9C%20%F0%9F%98%8D-ffdd67)](https://github.com/carloscuesta/gitmoji-cli)\n[![pre-commit](https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white)](https://github.com/pre-commit/pre-commit)\n[![black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/python/black)\n\nRun `make help` for options like installing for development, linting and testing.\n\n## See also\n\n- [PubGrub spec](https://github.com/dart-lang/pub/blob/SDK-2.2.1-dev.3.0/doc/solver.md)\n- [pip now has a dependency resolver](https://github.com/pypa/pip/issues/988#issuecomment-735776472)\n- [pipdeptree](https://github.com/naiquevin/pipdeptree)\n- [mixology](https://github.com/sdispater/mixology)\n- [poetry-semver](https://github.com/python-poetry/semver)\n- [johnnydep](https://github.com/wimglenn/johnnydep)\n\n-----\n\nBSD 3-Clause License\n\nCopyright (c) 2020, ddelange\\\nAll rights reserved."
}
