{
  "name": "pipenv",
  "full_name": "pipenv",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Python dependency management tool",
  "license": "MIT",
  "homepage": "https://github.com/pypa/pipenv",
  "versions": {
    "stable": "2023.7.23",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://files.pythonhosted.org/packages/6f/7f/389e0d3839c53a7ab5e99fe0dcd0dbd8c4ea269acf95861fb7cb2ca2ef1a/pipenv-2023.7.23.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "77b1ba91d3cbfa85acb05fb447f5c8ab452dc377e0aea0f3ded8b2c36b669a45"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pipenv/blobs/sha256:6a1c543e9be92cad8402e757ee97f04896bb83396b3f7ce99cfe11631ccf4352",
          "sha256": "6a1c543e9be92cad8402e757ee97f04896bb83396b3f7ce99cfe11631ccf4352"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pipenv/blobs/sha256:9d715fd87ab2a0215339bb38ad3b9cf22d73e92a36ca1033afee850536254cf1",
          "sha256": "9d715fd87ab2a0215339bb38ad3b9cf22d73e92a36ca1033afee850536254cf1"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pipenv/blobs/sha256:d0282adfe9940080f93e5799117f1c139a5fe524b9a1958f67d437fc17c7d829",
          "sha256": "d0282adfe9940080f93e5799117f1c139a5fe524b9a1958f67d437fc17c7d829"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pipenv/blobs/sha256:401b4e55cfcb22f33e4771ea7ecb0bdd5ca9f15b9cd050529761dfa4158ed38b",
          "sha256": "401b4e55cfcb22f33e4771ea7ecb0bdd5ca9f15b9cd050529761dfa4158ed38b"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pipenv/blobs/sha256:b06b21566ceaa3efa57308b528acae77d57e9abb2cd49b137ac18fea5d9587b7",
          "sha256": "b06b21566ceaa3efa57308b528acae77d57e9abb2cd49b137ac18fea5d9587b7"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pipenv/blobs/sha256:4982294606a6dd74db20da018eac874b6b55a70d93f2515f2c6799daf94d293d",
          "sha256": "4982294606a6dd74db20da018eac874b6b55a70d93f2515f2c6799daf94d293d"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pipenv/blobs/sha256:61ca8783c7868e256ac05da5eaa548f6744f1c9ca9b140b0acdc1d890e415dbc",
          "sha256": "61ca8783c7868e256ac05da5eaa548f6744f1c9ca9b140b0acdc1d890e415dbc"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "python@3.11"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": true,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/pipenv.rb",
  "ruby_source_checksum": {
    "sha256": "44ae3b963861d62aea55526064decdcc532112485875f0404884335d349bd54d"
  },
  "date_added": "2017-10-29T07:35:00-07:00",
  "readme": "Pipenv: Python Development Workflow for Humans\n==============================================\n\n[![image](https://img.shields.io/pypi/v/pipenv.svg)](https://python.org/pypi/pipenv)\n[![image](https://img.shields.io/pypi/l/pipenv.svg)](https://python.org/pypi/pipenv)\n[![CI](https://github.com/pypa/pipenv/actions/workflows/ci.yaml/badge.svg)](https://github.com/pypa/pipenv/actions/workflows/ci.yaml)\n[![image](https://img.shields.io/pypi/pyversions/pipenv.svg)](https://python.org/pypi/pipenv)\n\n------------------------------------------------------------------------\n\n**Pipenv** is a Python virtualenv management tool that supports a multitude of systems and nicely bridges the gaps between pip, python (using system python, pyenv or asdf) and virtualenv.\n*Linux, macOS, and Windows are all first-class citizens in pipenv.*\n\nPipenv automatically creates and manages a virtualenv for your projects, as well as adds/removes packages from your `Pipfile` as you install/uninstall packages. It also generates a project `Pipfile.lock`, which is used to produce deterministic builds.\n\nPipenv is primarily meant to provide users and developers of applications with an easy method to arrive at a consistent working project environment.\n\nThe problems that Pipenv seeks to solve are multi-faceted:\n\n- You no longer need to use `pip` and `virtualenv` separately: they work together.\n- Managing a `requirements.txt` file with package hashes can be problematic.  Pipenv uses `Pipfile` and `Pipfile.lock` to separate abstract dependency declarations from the last tested combination.\n- Hashes are documented in the lock file which are verified during install. Security considerations are put first.\n- Strongly encourage the use of the latest versions of dependencies to minimize security risks [arising from outdated components](https://www.owasp.org/index.php/Top_10-2017_A9-Using_Components_with_Known_Vulnerabilities).\n- Gives you insight into your dependency graph (e.g. `$ pipenv graph`).\n- Streamline development workflow by supporting local customizations with `.env` files.\n\nTable Of Contents\n------------------\n\n- [Pipenv](#pipenv-python-development-workflow-for-humans)\n\n- [Installation](#installation)\n\n- [Features](#features)\n\n- [Basic Concepts](#basic-concepts)\n\n- [Other Commands](#other-commands)\n\n- [Shell Completion](#shell-completion)\n\n- [Usage](#usage)\n\n    - [Usage Examples](#usage-examples)\n\n    - [Commands](#commands)\n\n    - [Locate the Project](#locate-the-project)\n\n    - [Locate the virtualenv](#locate-the-virtualenv)\n\n    - [Locate the Python Interpreter](#locate-the-python-interpreter)\n\n    - [Install Packages](#install-packages)\n\n    - [Installing from git](#installing-from-git)\n\n    - [Install a dev dependency](#install-a-dev-dependency)\n\n    - [Show a dependency graph](#show-a-dependency-graph)\n\n    - [Generate a lockfile](#generate-a-lockfile)\n\n    - [Install all dev dependencies](#install-all-dev-dependencies)\n\n    - [Uninstall everything](#uninstall-everything)\n\n    - [Use the shell](#use-the-shell)\n\n- [Documentation](#documentation)\n\nInstallation\n------------\n\n**Pipenv can be installed with Python 3.7 and above.**\n\nFor most users, we recommend installing Pipenv using `pip`:\n\n    pip install --user pipenv\n\nOr, if you\\'re using Fedora:\n\n    sudo dnf install pipenv\n\nOr, if you\\'re using FreeBSD:\n\n    pkg install py39-pipenv\n\nOr, if you\\'re using Gentoo:\n\n    sudo emerge pipenv\n\nOr, if you\\'re using Void Linux:\n\n    sudo xbps-install -S python3-pipenv\n\nAlternatively, some users prefer to use [Pipx](https://pypi.org/p/pipx):\n\n    pipx install pipenv\n\nRefer to the [documentation](https://pipenv.pypa.io/en/latest/#install-pipenv-today) for latest instructions.\n\n‚ú®üç∞‚ú®\n\nFeatures\n----------\n\n-   Enables truly *deterministic builds*, while easily specifying *only\n    what you want*.\n-   Generates and checks file hashes for locked dependencies.\n-   Automatically install required Pythons, if `pyenv` or `asdf` is available.\n-   Automatically finds your project home, recursively, by looking for a\n    `Pipfile`.\n-   Automatically generates a `Pipfile`, if one doesn\\'t exist.\n-   Automatically creates a virtualenv in a standard location.\n-   Automatically adds/removes packages to a `Pipfile` when they are installed/uninstalled.\n-   Automatically loads `.env` files, if they exist.\n\nFor command reference, see [Commands](https://pipenv.pypa.io/en/latest/commands/).\n\n### Basic Concepts\n\n-   A virtualenv will automatically be created, when one doesn\\'t exist.\n-   When no parameters are passed to `install`, all packages\n    `[packages]` specified will be installed.\n-   Otherwise, whatever virtualenv defaults to will be the default.\n\n\n### Shell Completion\n\nTo enable completion in fish, add this to your configuration `~/.config/fish/completions/pipenv.fish`:\n\n    eval (env _PIPENV_COMPLETE=fish_source pipenv)\n\nThere is also a [fish plugin](https://github.com/fisherman/pipenv), which will automatically\nactivate your subshells for you!\n\nAlternatively, with zsh, add this to your configuration `~/.zshrc`:\n\n    eval \"$(_PIPENV_COMPLETE=zsh_source pipenv)\"\n\nAlternatively, with bash, add this to your configuration `~/.bashrc` or `~/.bash_profile`:\n\n    eval \"$(_PIPENV_COMPLETE=bash_source pipenv)\"\n\nMagic shell completions are now enabled!\n\nUsage\n-------\n\n    $ pipenv --help\n    Usage: pipenv [OPTIONS] COMMAND [ARGS]...\n\n    Options:\n      --where                         Output project home information.\n      --venv                          Output virtualenv information.\n      --py                            Output Python interpreter information.\n      --envs                          Output Environment Variable options.\n      --rm                            Remove the virtualenv.\n      --bare                          Minimal output.\n      --man                           Display manpage.\n      --support                       Output diagnostic information for use in\n                                      GitHub issues.\n      --site-packages / --no-site-packages\n                                      Enable site-packages for the virtualenv.\n                                      [env var: PIPENV_SITE_PACKAGES]\n      --python TEXT                   Specify which version of Python virtualenv\n                                      should use.\n      --clear                         Clears caches (pipenv, pip).  [env var:\n                                      PIPENV_CLEAR]\n      -q, --quiet                     Quiet mode.\n      -v, --verbose                   Verbose mode.\n      --pypi-mirror TEXT              Specify a PyPI mirror.\n      --version                       Show the version and exit.\n      -h, --help                      Show this message and exit.\n\n\n   ### Usage Examples:\n\n      Create a new project using Python 3.7, specifically:\n      $ pipenv --python 3.7\n\n      Remove project virtualenv (inferred from current directory):\n      $ pipenv --rm\n\n      Install all dependencies for a project (including dev):\n      $ pipenv install --dev\n\n      Create a lockfile containing pre-releases:\n      $ pipenv lock --pre\n\n      Show a graph of your installed dependencies:\n      $ pipenv graph\n\n      Check your installed dependencies for security vulnerabilities:\n      $ pipenv check\n\n      Install a local setup.py into your virtual environment/Pipfile:\n      $ pipenv install -e .\n\n      Use a lower-level pip command:\n      $ pipenv run pip freeze\n\n   ### Commands:\n\n      check         Checks for PyUp Safety security vulnerabilities and against\n                    PEP 508 markers provided in Pipfile.\n      clean         Uninstalls all packages not specified in Pipfile.lock.\n      graph         Displays currently-installed dependency graph information.\n      install       Installs provided packages and adds them to Pipfile, or (if no\n                    packages are given), installs all packages from Pipfile.\n      lock          Generates Pipfile.lock.\n      open          View a given module in your editor.\n      requirements  Generate a requirements.txt from Pipfile.lock.\n      run           Spawns a command installed into the virtualenv.\n      scripts       Lists scripts in current environment config.\n      shell         Spawns a shell within the virtualenv.\n      sync          Installs all packages specified in Pipfile.lock.\n      uninstall     Uninstalls a provided package and removes it from Pipfile.\n      update        Runs lock, then sync.\n      upgrade       Update the lock of the specified dependency / sub-dependency,\n                    but does not actually install the packages.\n      verify        Verify the hash in Pipfile.lock is up-to-date.\n\n\n### Locate the project:\n\n    $ pipenv --where\n    /Users/kennethreitz/Library/Mobile Documents/com~apple~CloudDocs/repos/kr/pipenv/test\n\n### Locate the virtualenv:\n\n    $ pipenv --venv\n    /Users/kennethreitz/.local/share/virtualenvs/test-Skyy4vre\n\n### Locate the Python interpreter:\n\n    $ pipenv --py\n    /Users/kennethreitz/.local/share/virtualenvs/test-Skyy4vre/bin/python\n\n### Install packages:\n\n    $ pipenv install\n    Creating a virtualenv for this project...\n    ...\n    No package provided, installing all dependencies.\n    Virtualenv location: /Users/kennethreitz/.local/share/virtualenvs/test-EJkjoYts\n    Installing dependencies from Pipfile.lock...\n    ...\n\n    To activate this project's virtualenv, run the following:\n    $ pipenv shell\n\n### Installing from git:\n\nYou can install packages with pipenv from git and other version control systems using URLs formatted according to the following rule:\n\n    <vcs_type>+<scheme>://<location>/<user_or_organization>/<repository>@<branch_or_tag>#<package_name>\n\nThe only optional section is the `@<branch_or_tag>` section.  When using git over SSH, you may use the shorthand vcs and scheme alias `git+git@<location>:<user_or_organization>/<repository>@<branch_or_tag>#<package_name>`. Note that this is translated to `git+ssh://git@<location>` when parsed.\n\nValid values for `<vcs_type>` include `git`, `bzr`, `svn`, and `hg`.  Valid values for `<scheme>` include `http,`, `https`, `ssh`, and `file`.  In specific cases you also have access to other schemes: `svn` may be combined with `svn` as a scheme, and `bzr` can be combined with `sftp` and `lp`.\n\nNote that it is **strongly recommended** that you install any version-controlled dependencies in editable mode, using `pipenv install -e`, in order to ensure that dependency resolution can be performed with an up to date copy of the repository each time it is performed, and that it includes all known dependencies.\n\nBelow is an example usage which installs the git repository located at `https://github.com/requests/requests.git` from tag `v2.19.1` as package name `requests`:\n\n    $ pipenv install -e git+https://github.com/requests/requests.git@v2.19#egg=requests\n    Creating a Pipfile for this project...\n    Installing -e git+https://github.com/requests/requests.git@v2.19.1#egg=requests...\n    [...snipped...]\n    Adding -e git+https://github.com/requests/requests.git@v2.19.1#egg=requests to Pipfile's [packages]...\n    [...]\n\nYou can read more about [pip's implementation of vcs support here](https://pip.pypa.io/en/stable/topics/vcs-support/).\n\n### Install a dev dependency:\n\n    $ pipenv install pytest --dev\n    Installing pytest...\n    ...\n    Adding pytest to Pipfile's [dev-packages]...\n\n### Show a dependency graph:\n\n    $ pipenv graph\n    requests==2.18.4\n      - certifi [required: >=2017.4.17, installed: 2017.7.27.1]\n      - chardet [required: >=3.0.2,<3.1.0, installed: 3.0.4]\n      - idna [required: >=2.5,<2.7, installed: 2.6]\n      - urllib3 [required: <1.23,>=1.21.1, installed: 1.22]\n\n### Generate a lockfile:\n\n    $ pipenv lock\n    Assuring all dependencies from Pipfile are installed...\n    Locking [dev-packages] dependencies...\n    Locking [packages] dependencies...\n    Note: your project now has only default [packages] installed.\n    To install [dev-packages], run: $ pipenv install --dev\n\n### Install all dev dependencies:\n\n    $ pipenv install --dev\n    Pipfile found at /Users/kennethreitz/repos/kr/pip2/test/Pipfile. Considering this to be the project home.\n    Pipfile.lock out of date, updating...\n    Assuring all dependencies from Pipfile are installed...\n    Locking [dev-packages] dependencies...\n    Locking [packages] dependencies...\n\n### Uninstall everything:\n\n    $ pipenv uninstall --all\n    No package provided, un-installing all dependencies.\n    Found 25 installed package(s), purging...\n    ...\n    Environment now purged and fresh!\n\n### Use the shell:\n\n    $ pipenv shell\n    Loading .env environment variables...\n    Launching subshell in virtual environment. Type 'exit' or 'Ctrl+D' to return.\n    $ ‚ñØ\n\nDocumentation\n---------------\n\nDocumentation resides over at [pipenv.pypa.io](https://pipenv.pypa.io/en/latest/)."
}
