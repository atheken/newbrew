{
  "name": "gcalcli",
  "full_name": "gcalcli",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Easily access your Google Calendar(s) from a command-line",
  "license": "MIT",
  "homepage": "https://github.com/insanum/gcalcli",
  "versions": {
    "stable": "4.3.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://files.pythonhosted.org/packages/e8/d9/9d1f03b9b47c3082bf664a2f789a3aded0674dca9e0b894540d754b937cc/gcalcli-4.3.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "d00081460276027196e8fb957880b29ba4f22ea43136f9e232a9408016abc110"
    },
    "head": {
      "url": "https://github.com/insanum/gcalcli.git",
      "branch": "master"
    }
  },
  "revision": 4,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gcalcli/blobs/sha256:7f246e95721ecb4a382f003980d24319162ff4da0f75d3b505c41e535ee81d8d",
          "sha256": "7f246e95721ecb4a382f003980d24319162ff4da0f75d3b505c41e535ee81d8d"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gcalcli/blobs/sha256:3ad0bf9cc0bb35e9bc57f99ddfb19aed07ae4b306ca3f2900f5f1d77f4717f73",
          "sha256": "3ad0bf9cc0bb35e9bc57f99ddfb19aed07ae4b306ca3f2900f5f1d77f4717f73"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gcalcli/blobs/sha256:fd9b9875506d02339df421f5cf39dbf4a8a422d166123efd66e917da6c02185c",
          "sha256": "fd9b9875506d02339df421f5cf39dbf4a8a422d166123efd66e917da6c02185c"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gcalcli/blobs/sha256:65c6738544131dc9ce8ee5e4e8d539619d0d08e5aed6e5f5e5b6c058c2c19b4a",
          "sha256": "65c6738544131dc9ce8ee5e4e8d539619d0d08e5aed6e5f5e5b6c058c2c19b4a"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gcalcli/blobs/sha256:71291260bed99af269e946dacf2cf4c37fbbdae194f704a2d532c7fb8362eec8",
          "sha256": "71291260bed99af269e946dacf2cf4c37fbbdae194f704a2d532c7fb8362eec8"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gcalcli/blobs/sha256:88f5e347283d280a706f8d6e2f1442f9b44aa79c7cd45bb822b07ea801935295",
          "sha256": "88f5e347283d280a706f8d6e2f1442f9b44aa79c7cd45bb822b07ea801935295"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gcalcli/blobs/sha256:c647103aa7fb67e6d6c9fd97a86380d87042f64fc585222e3d0b26b48c4ddd9a",
          "sha256": "c647103aa7fb67e6d6c9fd97a86380d87042f64fc585222e3d0b26b48c4ddd9a"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "python@3.11",
    "six"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/gcalcli.rb",
  "ruby_source_checksum": {
    "sha256": "3277e04d21e274fb9ad28d14822b45f0604b066189685bebc070a8bd3c2ecde8"
  },
  "date_added": "2020-10-18T16:40:10+00:00",
  "readme": "gcalcli\n=======\n[![Build Status](https://travis-ci.org/insanum/gcalcli.svg?branch=master)](https://travis-ci.org/insanum/gcalcli)\n\n#### Google Calendar Command Line Interface\n\ngcalcli is a Python application that allows you to access your Google\nCalendar(s) from a command line. It's easy to get your agenda, search for\nevents, add new events, delete events, edit events, see recently updated\nevents, and even import those annoying ICS/vCal invites from Microsoft\nExchange and/or other sources. Additionally, gcalcli can be used as a reminder\nservice and execute any application you want when an event is coming up.\n\ngcalcli uses the [Google Calendar API version 3](https://developers.google.com/google-apps/calendar/).\n\nRequirements\n------------\n\n* [Python3](http://www.python.org)\n* [dateutil](http://www.labix.org/python-dateutil)\n* [Google API Client](https://developers.google.com/api-client-library/python)\n* [httplib2](https://github.com/httplib2/httplib2)\n* [oauth2client](https://github.com/google/oauth2client)\n* [parsedatetime](https://github.com/bear/parsedatetime)\n* A love for the command line!\n\n### Optional packages\n\n* [vobject](http://vobject.skyhouseconsulting.com) Python module\n  Used for ics/vcal importing.\n\nInstallation\n------------\n\nCheck your OS distribution for packages.\n\n### Debian/Ubuntu\n\n```sh\napt-get install gcalcli\n```\n\n### Void Linux \n```sh\nxbps-install gcalcli\n```\n\n### Install using [Nix](https://nixos.org/nix/)\n\n```sh\nnix-env -i gcalcli\n```\n\n### Install using [Homebrew](https://brew.sh/) (MacOS)\n\n```sh\nbrew install gcalcli\n```\n\n\n### Install from PyPI\n\n```sh\npip install gcalcli\n```\n\n### Install from source\n\n```sh\ngit clone https://github.com/insanum/gcalcli.git\ncd gcalcli\npython setup.py install\n```\n\n### Install optional package\n\n```sh\npip install vobject\n```\n\nFeatures\n--------\n\n * OAuth2 authention with your Google account\n * list your calendars\n * show an agenda using a specified start/end date and time\n * show updates since a specified datetime for events between a start/end date and time\n * find conflicts between events matching search term\n * ascii text graphical calendar display with variable width\n * search for past and/or future events\n * \"quick add\" new events to a specified calendar\n * \"add\" a new event to a specified calendar (interactively or automatically)\n * \"delete\" event(s) from a calendar(s) (interactively or automatically)\n * \"edit\" event(s) interactively\n * import events from ICS/vCal files to a specified calendar\n * easy integration with your favorite mail client (attachment handler)\n * run as a cron job and execute a command for reminders\n * work against specific calendars (by calendar name w/ regex)\n * flag file support for specifying option defaults\n * colored output and unicode character support\n * super fun hacking with shell scripts, cron, screen, tmux, conky, etc\n\nScreenshots\n-----------\n\n![gcalcli 5](https://github.com/insanum/gcalcli/raw/master/docs/gcalcli_5.png)\n\n![gcalcli 1](https://github.com/insanum/gcalcli/raw/master/docs/gcalcli_1.png)\n\n![gcalcli 2](https://github.com/insanum/gcalcli/raw/master/docs/gcalcli_2.png)\n\n![gcalcli 3](https://github.com/insanum/gcalcli/raw/master/docs/gcalcli_3.png)\n\n![gcalcli 4](https://github.com/insanum/gcalcli/raw/master/docs/gcalcli_4.png)\n\nHowTo\n-----\n\n#### Usage\n\n`gcalcli` provides a series of subcommands with the following functionality:\n\n    list                list available calendars\n    edit                edit calendar events\n    agenda              get an agenda for a time period\n    updates             get updates since a datetime for a time period\n    calw                get a week-based agenda in calendar format\n    calm                get a month agenda in calendar format\n    quick               quick-add an event to a calendar\n    add                 add a detailed event to the calendar\n    import              import an ics/vcal file to a calendar\n    remind              execute command if event occurs within <mins> time\n\nSee the manual (`man (1) gcalcli`), or run with `--help`/`-h` for detailed usage.\n\n#### Login Information\n\nOAuth2 is used for authenticating with your Google account. The resulting token\nis placed in the `~/.gcalcli_oauth` file. When you first start gcalcli the\nauthentication process will proceed. Simply follow the instructions.\n\n**You currently have to use your own Calendar API token.** Our Calendar API token is restricted to few users only and waits for Google's approval to be unlocked.\n\n1. [Create a New Project](https://console.developers.google.com/projectcreate) within the Google developer console\n   1. Activate the \"Create\" button.\n2. [Enable the Google Calendar API](https://console.developers.google.com/apis/api/calendar-json.googleapis.com/)\n   1. Activate the \"Enable\" button.\n3. [Create OAuth2 consent screen](https://console.developers.google.com/apis/credentials/consent/edit;newAppInternalUser=false) for an \"UI /Desktop Application\".\n   1. Fill out required App information section\n      1. Specify App name. Example: \"gcalcli\"\n      2. Specify User support email. Example: your@gmail.com\n   2. Fill out required Developer contact information\n      1. Specify Email addresses. Example: your@gmail.com\n   3. Activate the \"Save and continue\" button.\n   4. Scopes: activate the \"Save and continue\" button.\n   5. Test users\n      1. Add your@gmail.com\n      2. Activate the \"Save and continue\" button.\n4. [Create OAuth Client ID](https://console.developers.google.com/apis/credentials/oauthclient)\n   1. Specify Application type: Desktop app.\n   2. Activate the \"Create\" button.\n5. Grab your newly created Client ID (in the form \"xxxxxxxxxxxxxxx.apps.googleusercontent.com\") and Client Secret from the Credentials page.\n6. Call `gcalcli` with your Client ID and Client Secret to login via the OAuth2 Authorization Screen.\n   ` gcalcli --client-id=xxxxxxxxxxxxxxx.apps.googleusercontent.com --client-secret=xxxxxxxxxxxxxxxxx list`.\n   In most shells, putting a space before the command will keep it, and therefore your secrets, out of history. Check with `history | tail`.\n7. This should automatically open the OAuth2 authorization screen in your default browser.\n\n#### HTTP Proxy Support\n\ngcalcli will automatically work with an HTTP Proxy simply by setting up some\nenvironment variables used by the gdata Python module:\n\n```\nhttp_proxy\nhttps_proxy\nproxy-username or proxy_username\nproxy-password or proxy_password\n```\n\nNote that these environment variables must be lowercase.\n\n#### Flag File\n\n`gcalcli` is able to read default configuration information from a flag file.\nThis file is located, by default, at '~/.gcalclirc'.  The flag file takes one\ncommand line parameter per line.\n\nIn the current version, the flag file only supports the global options (options\nagainst the `gcalcli` program itself).  The plan, longer term, is to support a\na configuration formation (probably toml or ini), which will allow for\nconfiguration of subcommands (such as `add`, `agenda`, `calw`, etc.)\n\nExample:\n\n```\n--nocache\n--nocolor\n--default-calendar=CALENDAR_NAME\n--client-secret=API_KEY\n```\n\nNote that long options require an equal sign if specifying a parameter.  With\nshort options the equal sign is optional.\n\n#### Configuration Folders\n\ngcalcli is able to store all its necessary information in a specific folder (use\nthe --configFolder option.) Each folder will contain 2 files: oauth and cache.\nAn optional 3rd file, gcalclirc, can be present for specific flags that you only\nwant to apply when using this configuration folder.\n\n#### Importing VCS/VCAL/ICS Files from Exchange (or other)\n\nImporting events from files is easy with gcalcli. The 'import' command accepts\na filename on the command line or can read from standard input. Here is a script\nthat can be used as an attachment handler for Thunderbird or in a mailcap entry\nwith Mutt (or in Mutt you could just use the attachment viewer and pipe command):\n\n```sh\n#!/bin/bash\n\nTERMINAL=evilvte\nCONFIG=~/.gcalclirc\n\n$TERMINAL -e bash -c \"echo 'Importing invite...' ; \\\n                      gcalcli --detail-url=short \\\n                              --calendar='Eric Davis' \\\n                              import -v \\\"$1\\\" ; \\\n                      read -p 'press enter to exit: '\"\n```\n\nNote that with Thunderbird you'll have to have the 'Show All Body Parts'\nextension installed for seeing the calendar attachments when not using\n'Lightning'. See this\n[bug report](https://bugzilla.mozilla.org/show_bug.cgi?id=505024)\nfor more details.\n\n#### Event Popup Reminders\n\nThe 'remind' command for gcalcli is used to execute any command as an event\nnotification. This can be a notify-send or an xmessage-like popup or whatever\nelse you can think of. gcalcli does not contain a daemon so you'll have to use\nsome other tool to ensure gcalcli is run in a timely manner for notifications.\nTwo options are using cron or a loop inside a shell script.\n\nCron:\n```sh\n% crontab -l\n*/10 * * * * /usr/bin/gcalcli remind\n```\n\nShell script like your .xinitrc so notifications only occur when you're logged\nin via X:\n```sh\n#!/bin/bash\n\n[[ -x /usr/bin/dunst ]] && /usr/bin/dunst -config ~/.dunstrc &\n\nif [ -x /usr/bin/gcalcli ]; then\n  while true; do\n    /usr/bin/gcalcli --calendar=\"davis\" remind\n    sleep 300\n  done &\nfi\n\nexec herbstluftwm # :-)\n```\n\nBy default gcalcli executes the notify-send command for notifications. Most\ncommon Linux desktop enviroments already contain a DBUS notification daemon\nthat supports libnotify so it should automagically just work. If you're like\nme and use nothing that is common I highly recommend the\n[dunst](https://github.com/knopwob/dunst) dmenu'ish notification daemon.\n\nNote that each time you run this you will get a reminder if you're still inside\nthe event duration.  Also note that due to time slip between machines, gcalcli\nwill give you a ~5 minute margin of error.  Plan your cron jobs accordingly.\n\n#### Agenda On Your Root Desktop\n\nPut your agenda on your desktop using\n[Conky](https://github.com/brndnmtthws/conky). The '--conky' option causes\ngcalcli to output Conky color sequences. Note that you need to use the Conky\n'execpi' command for the gcalcli output to be parsed for color sequences. Add\nthe following to your .conkyrc:\n\n```\n${execpi 300 gcalcli --conky agenda}\n```\n\nTo also get a graphical calendar that shows the next three weeks add:\n\n```\n${execpi 300 gcalcli --conky calw 3}\n```\n\nYou may need to increase the `text_buffer_size` in your conkyrc file.  Users\nhave reported that the default of 256 bytes is too small for busy calendars.\n\nAdditionaly you need to set `--lineart=unicode` to output unicode-characters\nfor box drawing. To avoid misaligned borders use a monospace font like 'DejaVu\nSans Mono'. On Python2 it might be necessary to set the environment variable\n`PYTHONIOENCODING=utf8` if you are using characters beyond ascii. For\nexample:\n```\n${font DejaVu Sans Mono:size=9}${execpi 300 export PYTHONIOENCODING=utf8 && gcalcli --conky --lineart=unicode calw 3}\n```\n\n#### Agenda Integration With tmux\n\nPut your next event in the left of your 'tmux' status line.  Add the following\nto your tmux.conf file:\n\n```\nset-option -g status-interval 60\nset-option -g status-left \"#[fg=blue,bright]#(gcalcli agenda | head -2 | tail -1)#[default]\"\n```\n\n#### Agenda Integration With screen\n\nPut your next event in your 'screen' hardstatus line.  First add a cron job\nthat will dump you agenda to a text file:\n\n```\n% crontab -e\n```\n\nThen add the following line:\n\n```\n*/5 * * * * gcalcli --nocolor --nostarted agenda \"`date`\" > /tmp/gcalcli_agenda.txt\n```\n\nNext create a simple shell script that will extract the first agenda line.\nLet's call this script 'screen_agenda':\n\n```\n#!/bin/bash\nhead -2 /tmp/gcalcli_agenda.txt | tail -1\n```\n\nNext configure screen's hardstatus line to gather data from a backtick command.\nOf course your hardstatus line is most likely very different than this (Mine\nis!):\n\n```\nbacktick 1 60 60 screen_agenda\nhardstatus \"[ %1` ]\"\n```"
}
