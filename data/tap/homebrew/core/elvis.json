{
  "name": "elvis",
  "full_name": "elvis",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Erlang Style Reviewer",
  "license": "Apache-2.0",
  "homepage": "https://github.com/inaka/elvis",
  "versions": {
    "stable": "1.1.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/inaka/elvis/archive/refs/tags/1.1.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "4afa3629f95997449ec9ce15a4aa59dd8fece5a5320e23e1d1c7590d1831d953"
    },
    "head": {
      "url": "https://github.com/inaka/elvis.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/elvis/blobs/sha256:210984b57d5962ef212e888f437e57096523f5f69213b8d6ed955e06e12c3853",
          "sha256": "210984b57d5962ef212e888f437e57096523f5f69213b8d6ed955e06e12c3853"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/elvis/blobs/sha256:484b57c447562c600cfa29ac602785be86aa4e8b761d0876fb9c329907101a97",
          "sha256": "484b57c447562c600cfa29ac602785be86aa4e8b761d0876fb9c329907101a97"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/elvis/blobs/sha256:d3368f9a7586dbb61126f781336e0cc9ccc30791c0f7b4ea2d99e7ba6ef6d1df",
          "sha256": "d3368f9a7586dbb61126f781336e0cc9ccc30791c0f7b4ea2d99e7ba6ef6d1df"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/elvis/blobs/sha256:ff296bea3962c667a33530101225b5cf52bfc1f349cb935ba68b12e113afa452",
          "sha256": "ff296bea3962c667a33530101225b5cf52bfc1f349cb935ba68b12e113afa452"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/elvis/blobs/sha256:b08e0a5e40f231fb03d6507c9cca0fdd5f4e246b6e48f979d03e9c453837db19",
          "sha256": "b08e0a5e40f231fb03d6507c9cca0fdd5f4e246b6e48f979d03e9c453837db19"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/elvis/blobs/sha256:0249893c657ebda3b0d781d485bb969da79957cad9aaca612de41ed13aba09f3",
          "sha256": "0249893c657ebda3b0d781d485bb969da79957cad9aaca612de41ed13aba09f3"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/elvis/blobs/sha256:9c14bf947e1c2bf32b8a72385d8773262c3c344c55be92f6bd221144d3655806",
          "sha256": "9c14bf947e1c2bf32b8a72385d8773262c3c344c55be92f6bd221144d3655806"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/elvis/blobs/sha256:9a3250151dc4ab48cfe4ddcf67bb48d48b57870171e1ba9331470505bd48e42e",
          "sha256": "9a3250151dc4ab48cfe4ddcf67bb48d48b57870171e1ba9331470505bd48e42e"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rebar3"
  ],
  "dependencies": [
    "erlang"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/elvis.rb",
  "ruby_source_checksum": {
    "sha256": "298a7fb87527f3efd03e07b6f54249e726e81bc380ed07457f9ef69a84e3bb8c"
  },
  "date_added": "2022-01-23T23:14:20+00:00",
  "readme": "# elvis [![Build Status](https://github.com/inaka/elvis/workflows/build/badge.svg)](https://github.com/inaka/elvis)\n\n![Elvis Presley dancing](https://www.reactiongifs.com/wp-content/uploads/2013/01/elvis-dance.gif)\n\nCommand-line interface for Elvis, the Erlang style reviewer.\n\n## Contact Us\n\nIf you find any **bugs** or have a **problem** while using this library, please\n[open an issue](https://github.com/inaka/elvis/issues/new) in this repo\n(or a pull request :)).\n\n## Installation\n\n1. Clone the repo\n2. `rebar3 compile`\n\n## Usage\n\nIn any `elvis`-enabled product, `elvis rock` will trigger a rule check.\n\n### Script\n\n`elvis` can be turned into a script by executing `rebar3 escriptize`. This will\ngenerate an `elvis` self-contained executable script, from which you can get\nhelp by typing `elvis help`. A list of available commands can be shown using the\n`--commands` option (i.e. `elvis --commands`).\n\nTo run `elvis` from the terminal use the `rock` command (i.e. `elvis\nrock`). There's no need to specify a configuration file path if you have an\n`elvis.config` file in the same location where you are executing the script,\notherwise a configuration file can be specified through the use of the\n`--config` (or just `-c`) option.\n\n```bash\nelvis rock --config config/elvis.config\n```\n\nIn `0.3.0` a new option was introduced in order to run elvis checks only on the source files that have changed since a particular branch of commit. Example usage would be `elvis git-branch origin/HEAD`.\n\n## Benefits\n\n- Enables consistency in style across all your code base.\n- Encourages the development team to sit down and talk about code conventions.\n- Allows continuous monitoring of code quality.\n- Helps developers avoid repeated mistakes that can be automatically detected.\n- Provides homogenisation among the different projects in a company, therefore facilitating project switching for developers and as well allowing easier code sharing between projects\n\n### Webhook\n\nThere's also a way to use `elvis` as a GitHub [webhook][webhooks] for\n`pull request` (PR) events by calling the `elvis_webhook:event/1` function. This will add\na comment in each file and rule that is broken, analyzing only the files\nassociated with the PR.\n\n#### Running the webhook on your servers\n\nSince GitHub's API needs a valid user and password to allow the creation of\nreviews on PRs, the parameters `github_user` and `github_password` need to be\nadded to `elvis`'s [configuration](#configuration) and also the credentials used\nmust be from an admin of the repo or someone with permissions for requesting changes\non PRs.\n\nThe `elvis_webhook:event/1` function takes a map containing the keys `headers` and `body`,\nwhose values should be the map of headers and the body from the GitHub's event\nrequest.\n\n```erlang\nHeaders = #{<<\"X-GitHub-Event\">>, <<\"pull_request\">>},\nBody = <<\"{}\">>, %% JSON data form GitHub's event.\nRequest = #{headers => Headers, body => Body},\nelvis:webhook(Request).\n```\n\n### Git hook\n\n`elvis` can also be used as a [`git` pre-commit hook][pre-commit]\nusing the `git-hook` command, just use something like the following as\nyour pre-commit script:\n\n```bash\n#!/bin/sh\n#\n# Runs elvis rules to staged files where applicable.\n\nelvis git-hook\n```\n\nAs the comment states, `elvis` will search for files that match the `filter` of\neach rule group (see [configuration](#configuration)) among the staged files,\nget their staged content and run the rules specified in the configuration.\nIf any rule fails then `elvis` exits with a non-zero code,\nwhich signals `git` that the commit shouldn't be made.\n\nMake sure your pre-commit hook script is executable (i.e. by running\n`chmod +x pre-commit`), otherwise `git` won't be able to run it.\n\n### Erlang Shell\n\nIf you only need to use `elvis` in the Erlang shell you might want to\nconsider only including the [`elvis_core`](https://github.com/inaka/elvis_core)\nlibrary as a dependency.\n\n## Configuration\n\nTo provide a default configuration for `elvis` you should either create an\n`elvis.config` file located in the root directory or set the following\nenvironment values in your [configuration][config] file:\n\n```erlang\n[\n {\n   elvis,\n   [\n    {config, [...]},\n    {output_format, plain},\n\n    %% Only necessary for the 'webhook' functionality\n    {github_user, \"user\"},\n    {github_password, \"password\"}\n   ]\n }\n].\n```\n\nThe `config` and `output_format` are explained in [`elvis_core`](https://github.com/inaka/elvis_core).\n\nThe GitHub configuration parameters `github_user` and `github_password` are\nrequired only when `elvis` is used as a [webhook](#webhook).\n\n### elvis.config\n\nIn your `elvis.config` file you can setup which rules should be\napplied, on what files and in which directories to do it.\n\nThe configuration is in Erlang format, it is not that hard to write\nbut it is easier if you use the `elvis.config` file in this reposiotry\nas a template.\n\nIn the `elvis.config` file you create an elvis config where for a set\nof directories, you want to run a ruleset (or specific rules) on a set\nof files.\n\nFor example, configure to check all erlang files under the `src`\ndirectory using the ruleset `erl_files`:\n\n```erlang\n[\n {\n   elvis,\n   [\n    {config,\n     [#{dirs => [\"src\"],\n        filter => \"*.erl\",\n        ruleset => erl_files\n       }\n     ]\n    }\n   ]\n }\n].\n```\n\nYou can use four different rulesets `erl_files`, `makefiles`, `rebar_config` or `elvis_config`.\n\n## Implemented Rules\n\nA reference of all rules implemented in Elvis can be found in this `elvis_core`'s [RULES.md](https://github.com/inaka/elvis_core/blob/main/RULES.md).\n\n## User Defined Rules\n\nIf you have implemented an Elvis rule that's in your local repo or in one of\nyour dependencies, you can add this rule to your `elvis.config` file and\ntell Elvis where to find the `.beam` that contains the compiled rule using\nthe `--code-path` (`-p`) option.\n\nFor example if the rule is in one of your deps, you could run Elvis in the\nfollowing way:\n\n```shell\nelvis rock -p deps/elvis_rules/ebin -c elvis.config\n```\n\n## Dependencies\n\n- Erlang/OTP 24+\n- git\n\n## References\n\nInspired on [HoundCI][houndci]\n\n  [houndci]: https://houndci.com/\n  [pre-commit]: https://git-scm.com/book/en/Customizing-Git-Git-Hooks#Client-Side-Hooks\n  [config]: https://www.erlang.org/doc/man/config.html\n  [webhooks]: https://developer.github.com/v3/repos/hooks/"
}
