{
  "name": "evtx",
  "full_name": "evtx",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Windows XML Event Log parser",
  "license": "Apache-2.0 or MIT",
  "homepage": "https://github.com/omerbenamram/evtx",
  "versions": {
    "stable": "0.8.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/omerbenamram/evtx/archive/refs/tags/v0.8.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "a42133deecbe47ade28e14ed55e4e87a2c9b5d9400867eacec8b32070a2cd95e"
    },
    "head": {
      "url": "https://github.com/omerbenamram/evtx.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/evtx/blobs/sha256:c89cce02eb42c8ffeff871f32f50bce01ca94d822dab012aa27cf138579665e1",
          "sha256": "c89cce02eb42c8ffeff871f32f50bce01ca94d822dab012aa27cf138579665e1"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/evtx/blobs/sha256:3e750b8532e6e8c3b08ee0b20f373b1f5baeef338ecead535efd37f59e8a29b3",
          "sha256": "3e750b8532e6e8c3b08ee0b20f373b1f5baeef338ecead535efd37f59e8a29b3"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/evtx/blobs/sha256:be9205c5372de648dd450bf3c8a8517900a4f1a92cfaeaa1f83bdc126e4244f7",
          "sha256": "be9205c5372de648dd450bf3c8a8517900a4f1a92cfaeaa1f83bdc126e4244f7"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/evtx/blobs/sha256:ddac9599c1e47f77ee5ae33494d613a2fdc2a96ac64afc29990c0429c640107d",
          "sha256": "ddac9599c1e47f77ee5ae33494d613a2fdc2a96ac64afc29990c0429c640107d"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/evtx/blobs/sha256:8e624562b6931b531fb1911296f3d404376b1cf14a61b7bb7e768a6c5698d98d",
          "sha256": "8e624562b6931b531fb1911296f3d404376b1cf14a61b7bb7e768a6c5698d98d"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/evtx/blobs/sha256:aae2a058428541d793bc5cbdd31b9c01b30d7add7f19e12532ae5158dbfe4366",
          "sha256": "aae2a058428541d793bc5cbdd31b9c01b30d7add7f19e12532ae5158dbfe4366"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/evtx/blobs/sha256:14305e3adbec154630f7de1e926f3a27b36d7fa091b0ca9b11cf1a0d2e772a7f",
          "sha256": "14305e3adbec154630f7de1e926f3a27b36d7fa091b0ca9b11cf1a0d2e772a7f"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/evtx.rb",
  "ruby_source_checksum": {
    "sha256": "8e646df390d83406b41a7f01ece7c317634abb1c323097c62666a7ba2a749fba"
  },
  "date_added": "2022-12-13T05:31:45+00:00",
  "readme": "<h1 align=\"center\"><img style=\"padding:0;vertical-align:bottom;\" height=\"32\" width=\"32\" src=\"/eventvwr.ico\"/> EVTX</h1>\n<div align=\"center\">\n <p>\n  <strong>\n   A cross-platform parser for the Windows XML EventLog format\n  </strong>\n  \n </p>\n</div>\n\n<br />\n\n<div align=\"center\">\n  <!-- Crates version -->\n  <a href=\"https://crates.io/crates/evtx\">\n    <img src=\"https://img.shields.io/crates/v/evtx.svg?style=flat-square\"\n    alt=\"Crates.io version\" />\n  </a>\n  <!-- Downloads -->\n  <a href=\"https://crates.io/crates/evtx\">\n    <img src=\"https://img.shields.io/crates/d/evtx.svg?style=flat-square\"\n      alt=\"Download\" />\n  </a>\n  <!-- docs.rs docs -->\n  <a href=\"https://docs.rs/evtx\">\n    <img src=\"https://img.shields.io/badge/docs-latest-blue.svg?style=flat-square\"\n      alt=\"docs.rs docs\" />\n  </a>\n   <a href=\"https://github.com/rust-secure-code/safety-dance/\">\n    <img src=\"https://img.shields.io/badge/unsafe-forbidden-success.svg\"\n      alt=\"safety-dance\" />\n  </a>\n  <a href=\"https://github.com/omerbenamram/evtx/actions/workflows/test.yml\">\n    <img src=\"https://github.com/omerbenamram/evtx/actions/workflows/test.yml/badge.svg\"\n      alt=\"Build status\" />\n  </a>\n</div>\n\n</br>\n\n## Features\n\n - üîí Implemented using 100% safe rust - and works on all platforms supported by rust (that have stdlib).\n - ‚ö° Fast - see benchmarks below. It's faster than any other implementation by order(s) of magnitude!\n - üöÄ Multi-threaded.\n - ‚ú® Supports XML and JSON outputs, both being directly constructed from the token tree and independent of each other (no xml2json conversion is performed!)\n - ‚õèÔ∏è Supports some basic recovery of missing records/chunks!\n - üêç Python bindings are available as well at https://github.com/omerbenamram/pyevtx-rs (and at PyPi https://pypi.org/project/evtx/)\n\n## Installation (associated binary utility):\n  - Download latest executable release from https://github.com/omerbenamram/evtx/releases\n    - Releases are automatically built for for Windows, macOS, and Linux. (64-bit executables only)\n  - Build from sources using  `cargo install evtx`\n  \n# `evtx_dump` (Binary utility):\nThe main binary utility provided with this crate is `evtx_dump`, and it provides a quick way to convert `.evtx` files to \ndifferent output formats.\n\nSome examples\n  - `evtx_dump <evtx_file>` will dump contents of evtx records as xml.\n  - `evtx_dump -o json <evtx_file>` will dump contents of evtx records as JSON. \n  - `evtx_dump -f <output_file> -o json <input_file>` will dump contents of evtx records as JSON to a given file.\n\n`evtx_dump` can be combined with [fd](https://github.com/sharkdp/fd) for convenient batch processing of files:\n  - `fd -e evtx -x evtx_dump -o jsonl` will scan a folder and dump all evtx files to a single jsonlines file.\n  - `fd -e evtx -x evtx_dump '{}' -f '{.}.xml` will create an xml file next to each evtx file, for all files in folder recursively!\n  - If the source of the file needs to be added to json, `xargs` (or `gxargs` on mac) and `jq` can be used: `fd -a -e evtx | xargs -I input sh -c \"evtx_dump -o jsonl input | jq --arg path \"input\" '. + {path: \\$path}'\"`\n  \n**Note:** by default, `evtx_dump` will try to utilize multithreading, this means that the records may be returned out of order.\n\nTo force single threaded usage (which will also ensure order), `-t 1` can be passed.\n\n## Example usage (as library):\n```rust\nuse evtx::EvtxParser;\nuse std::path::PathBuf;\n\nfn main() {\n    // Change this to a path of your .evtx sample. \n    let fp = PathBuf::from(format!(\"{}/samples/security.evtx\", std::env::var(\"CARGO_MANIFEST_DIR\").unwrap())); \n    \n    let mut parser = EvtxParser::from_path(fp).unwrap();\n    for record in parser.records() {\n        match record {\n            Ok(r) => println!(\"Record {}\\n{}\", r.event_record_id, r.data),\n            Err(e) => eprintln!(\"{}\", e),\n        }\n    }\n}\n```\n\nThe parallel version is enabled when compiling with feature \"multithreading\" (enabled by default).\n\n## Performance benchmarking\n\nWhen using multithreading - `evtx` is significantly faster than any other parser available.\nFor single core performance, it is both the fastest and the only cross-platform parser than supports both xml and JSON outputs.\n\nPerformance was benched on my machine using `hyperfine` (statistical measurements tool).\n\nI'm running tests on a 12-Core AMD Ryzen 3900X.\n\nTests are running under WSL2, on a linux filesystem (so there shouldn't be any overhead incurred from reading windows mounts).\n\nLibraries benched:\n\n- `python-evtx`(https://github.com/williballenthin/python-evtx) - With CPython and PyPy\n- `libevtx`(https://github.com/libyal/libevtx)\n- `golang-evtx`(https://github.com/0xrawsec/golang-evtx.git) - only JSON (uses multithreading)\n- `evtx`(https://github.com/Velocidex/evtx) - only JSON.\n- `evtx` (This library)\n\n\n|                  | evtx (1 thread)      | evtx (8 threads)      | evtx (24 threads)         | libevtx (C)          | velocidex/evtx (go)  | golang-evtx (uses multiprocessing) | python-evtx (CPython 3.7.6) | python-evtx (PyPy 7.3.0) |\n|------------------|----------------------|-----------------------|---------------------------|----------------------|----------------------|------------------------------------|-----------------------------|--------------------------|\n| 30MB evtx (XML)  | 1.155 s  ¬±   0.008 s | 277.4 ms  ¬±    5.8 ms | **177.1 ms  ¬±    4.5 ms** | 4.509 s  ¬±   0.100 s | No support           | No support                         | 4m11.046s (ran once)        | 1m12.828s (ran once)     |\n| 30MB evtx (JSON) | 1.631 s  ¬±   0.006 s | 341.6 ms  ¬±    7.3 ms | **207.2 ms  ¬±    7.2 ms** | No support           | 5.587 s  ¬±   0.086 s | 2.216 s  ¬±   0.027 s               | No support                  | No support               |\n\n**Note**: numbers shown are `real-time` measurements (time it takes for invocation to complete). `user-time` measurements are higher when more using multithreading/multiprocessing, because of the synchronization overhead.\n\nWith 8 threads - `evtx` is more than **650x** faster than `python-evtx` when dumping xml logs.\n\nWith maximum viable threads (number of logical cores) - `evtx` is about **8-10x** faster `golang-evtx`. Both implementations utilize similar multithreading strategies.\n\n## Caveats\n\n- Currently unimplemented:\n   - CDATA nodes.\n   - EVTHandle node type.\n\nIf the parser errors on any of these nodes, feel free to open an issue or drop me an email with a sample.\n\n## License\n\nLicensed under either of\n\n * Apache License, Version 2.0, ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\n### Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any\nadditional terms or conditions."
}
