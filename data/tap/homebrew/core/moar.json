{
  "name": "moar",
  "full_name": "moar",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Nice to use pager for humans",
  "license": "BSD-2-Clause",
  "homepage": "https://github.com/walles/moar",
  "versions": {
    "stable": "1.15.3",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/walles/moar/archive/refs/tags/v1.15.3.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "9cbfd11cc128052c66dde381d77b2c4bfb1260feb1e0a0d23119844b274fe659"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/moar/blobs/sha256:da788e88c609f20550140faebd8accf8aee1b72379637c62e44c030dfdad3090",
          "sha256": "da788e88c609f20550140faebd8accf8aee1b72379637c62e44c030dfdad3090"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/moar/blobs/sha256:da788e88c609f20550140faebd8accf8aee1b72379637c62e44c030dfdad3090",
          "sha256": "da788e88c609f20550140faebd8accf8aee1b72379637c62e44c030dfdad3090"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/moar/blobs/sha256:da788e88c609f20550140faebd8accf8aee1b72379637c62e44c030dfdad3090",
          "sha256": "da788e88c609f20550140faebd8accf8aee1b72379637c62e44c030dfdad3090"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/moar/blobs/sha256:497d2e7fc772727f3ae20fe359149b4f3e789b29ef303d8bf7be3b8706c5b5ec",
          "sha256": "497d2e7fc772727f3ae20fe359149b4f3e789b29ef303d8bf7be3b8706c5b5ec"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/moar/blobs/sha256:497d2e7fc772727f3ae20fe359149b4f3e789b29ef303d8bf7be3b8706c5b5ec",
          "sha256": "497d2e7fc772727f3ae20fe359149b4f3e789b29ef303d8bf7be3b8706c5b5ec"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/moar/blobs/sha256:497d2e7fc772727f3ae20fe359149b4f3e789b29ef303d8bf7be3b8706c5b5ec",
          "sha256": "497d2e7fc772727f3ae20fe359149b4f3e789b29ef303d8bf7be3b8706c5b5ec"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/moar/blobs/sha256:426d91653bbf5d7a1a66c22d8ee068832aa159d1cddea528a261faa875c6e00c",
          "sha256": "426d91653bbf5d7a1a66c22d8ee068832aa159d1cddea528a261faa875c6e00c"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/moar.rb",
  "ruby_source_checksum": {
    "sha256": "b10237a1322ae6bab1dbfbfa3307f7e1056f10d6ba827d8f105fabd0895d2b6a"
  },
  "date_added": "2021-06-10T23:29:59+00:00",
  "readme": "[![Linux CI](https://github.com/walles/moar/actions/workflows/linux-ci.yml/badge.svg?branch=master)](https://github.com/walles/moar/actions/workflows/linux-ci.yml?query=branch%3Amaster)\n[![Windows CI](https://github.com/walles/moar/actions/workflows/windows-ci.yml/badge.svg?branch=master)](https://github.com/walles/moar/actions/workflows/windows-ci.yml?query=branch%3Amaster)\n\nMoar is a pager. It reads and displays UTF-8 encoded text from files or\npipelines.\n\n`moar` is designed to just do the right thing without any configuration:\n\n![Moar displaying its own source code](screenshot.png)\n\nThe intention is that Moar should be trivial to get into if you have previously\nbeen using [Less](http://www.greenwoodsoftware.com/less/). If you come from Less\nand find Moar confusing or hard to migrate to, [please report\nit](https://github.com/walles/moar/issues)!\n\nDoing the right thing includes:\n\n- **Syntax highlight** source code by default using\n  [Chroma](https://github.com/alecthomas/chroma)\n- **Search is incremental** / find-as-you-type just like in\n  [Chrome](http://www.google.com/chrome) or\n  [Emacs](http://www.gnu.org/software/emacs/)\n- Search becomes case sensitive if you add any UPPER CASE characters\n  to your search terms, just like in Emacs\n- [Regexp](http://en.wikipedia.org/wiki/Regular_expression#Basic_concepts)\n  search if your search string is a valid regexp\n- Supports displaying ANSI color coded texts (like the output from\n  `git diff` [| `riff`](https://github.com/walles/riff) for example)\n- Supports UTF-8 input and output\n- **Automatic decompression** when viewing [compressed text\n  files](https://github.com/walles/moar/issues/97#issuecomment-1191415680)\n  (`.gz`, `.bz2`, `.xz`)\n- The position in the file is always shown\n- Supports **word wrapping** (on actual word boundaries) if requested using\n  `--wrap` or by pressing <kbd>w</kbd>\n- [**Follows output** as long as you are on the last line](https://github.com/walles/moar/issues/108#issuecomment-1331743242),\n  just like `tail -f`\n- Renders [terminal\n  hyperlinks](https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda)\n  properly\n\n[For compatibility reasons](https://github.com/walles/moar/issues/14), `moar`\nuses the formats declared in these environment variables if present:\n\n- `LESS_TERMCAP_md`: Man page <b>bold</b>\n- `LESS_TERMCAP_us`: Man page <u>underline</u>\n- `LESS_TERMCAP_so`: [Status bar and search hits](https://github.com/walles/moar/issues/114)\n\nFor configurability reasons, `moar` reads extra command line options from the\n`MOAR` environment variable.\n\nMoar is used as the default pager by:\n\n- [`px` / `ptop`](https://github.com/walles/px), `ps` and `top` for human beings\n- [`riff`](https://github.com/walles/riff), a diff filter highlighting which line parts have changed\n\n# Installing\n\n## Using [Homebrew](https://brew.sh/)\n\n```sh\nbrew install moar\n```\n\nThen whenever you want to upgrade to the latest release:\n\n```sh\nbrew upgrade\n```\n\n## Using [MacPorts](https://www.macports.org/)\n\n```sh\nsudo port install moar\n```\n\nMore info [here](https://ports.macports.org/port/moar/).\n\n## Using [Gentoo](https://gentoo.org/)\n\n```sh\nemerge --ask --verbose sys-apps/moar\n```\n\nMore info [here](https://packages.gentoo.org/packages/sys-apps/moar).\n\n## Using [Arch Linux](https://archlinux.org/)\n\n```sh\nyay -S moar\n```\n\nMore info [here](https://aur.archlinux.org/packages/moar-git).\n\n## Manual Install\n\n1. Download `moar` for your platform from\n   <https://github.com/walles/moar/releases/latest>\n1. `chmod a+x moar-*-*-*`\n1. `sudo mv moar-*-*-* /usr/local/bin/moar`\n\nAnd now you can just invoke `moar` from the prompt!\n\nTry `moar --help` to see options.\n\nIf a binary for your platform is not available, please\n[file a ticket](https://github.com/walles/moar/releases) or contact\n<johan.walles@gmail.com>.\n\n## Debian / Ubuntu\n\n[A Request for Packaging is open](https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=944035),\nplease help!\n\n# Configuring\n\nDo `moar --help` for an up to date list of options.\n\nEnvironment variable `MOAR` can be used to set default options.\n\nFor example:\n\n```bash\nexport MOAR='--statusbar=bold --no-linenumbers'\n```\n\n## Setting `moar` as your default pager\n\nSet it as your default pager by adding...\n\n```bash\nexport PAGER=/usr/local/bin/moar\n```\n\n... to your `.bashrc`.\n\n# Issues\n\nIssues are tracked [here](https://github.com/walles/moar/issues), or\nyou can send questions to <johan.walles@gmail.com>.\n\n# Packaging\n\nIf you package `moar`, do include [the man page](moar.1) in your package.\n\n# Embedding\n\nHere's one way to embed `moar` in your app:\n\n```go\npackage main\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\n\t\"github.com/walles/moar/m\"\n)\n\nfunc main() {\n\tbuf := new(bytes.Buffer)\n\tfor range [99]struct{}{} {\n\t\tfmt.Fprintln(buf, \"Moar\")\n\t}\n\n\terr := m.NewPager(m.NewReaderFromStream(\"Moar\", buf)).Page()\n\tif err != nil {\n\t\t// Handle paging problems\n\t\tpanic(err)\n\t}\n}\n```\n\n`m.Reader` can also be initialized using `NewReaderFromText()` or\n`NewReaderFromFilename()`.\n\n# Developing\n\nYou need the [go tools](https://golang.org/doc/install).\n\nRun tests:\n\n```bash\n./test.sh\n```\n\nTo run tests in 32 bit mode, either do `GOARCH=386 ./test.sh` if you're on\nLinux, or `docker build . -f Dockerfile-test-386` (tested on macOS).\n\nRun microbenchmarks:\n\n```bash\ngo test -benchmem -run='^$' -bench=. . ./...\n```\n\nProfiling `BenchmarkPlainTextSearch()`. Try replacing `-alloc_objects` with\n`-alloc_space` or change the `-focus` function:\n\n```bash\ngo test -memprofilerate 1 -memprofile profile.out -benchmem -run='^$' -bench '^BenchmarkPlainTextSearch$' github.com/walles/moar/m && go tool pprof -alloc_objects -focus findFirstHit -relative_percentages -web profile.out\n```\n\nBuild + run:\n\n```bash\n./moar.sh ...\n```\n\nInstall (into `/usr/local/bin`) from source:\n\n```bash\n./install.sh\n```\n\n# Making a new Release\n\nMake sure that [screenshot.png](screenshot.png) matches moar's current UI.\nIf it doesn't, scale a window to 81x16 characters and make a new one.\n\nExecute `release.sh` and follow instructions.\n\n# TODO\n\n- Searching for something above us should wrap the search.\n\n- Enable exiting using ^c (without restoring the screen).\n\n- Start at a certain line if run as `moar file.txt:42`\n\n- Handle search hits to the right of the right screen edge. Searching forwards\n  should move first right, then to the left edge and down. Searching backwards\n  should move first left, then up and to the right edge (if needed for showing\n  search hits).\n\n- Support viewing multiple files by pushing them in reverse order on the view\n  stack.\n\n- Incremental search using ^s and ^r like in Emacs\n\n- Retain the search string when pressing / to search a second time.\n\n## Done\n\n- Add `>` markers at the end of lines being cut because they are too long\n\n- Doing moar on an arbitrary binary (like `/bin/ls`) should put all\n  line-continuation markers at the rightmost column. This really means our\n  truncation code must work even with things like tabs and various control\n  characters.\n\n- Make sure search hits are highlighted even when we have to scroll right\n  to see them\n\n- Change out-of-file visualization to writing `---` after the end of the file\n  and leaving the rest of the screen blank.\n\n- Exit search on pressing up / down / pageup / pagedown keys and\n  scroll. I attempted to do that spontaneously, so it's probably a\n  good idea.\n\n- Remedy all FIXMEs in this README file\n\n- Release the `go` version as the new `moar`, replacing the previous Ruby\n  implementation\n\n- Add licensing information (same as for the Ruby branch)\n\n- Make sure `git grep` output gets highlighted properly.\n\n- Handle all kinds of line endings.\n\n- Make sure version information is printed if there are warnings.\n\n- Add spinners while file is still loading\n\n- Make `tail -f /dev/null` exit properly, fix\n  <https://github.com/walles/moar/issues/7>.\n\n- Showing unicode search hits should highlight the correct chars\n\n- [Word wrap text rather than character wrap it](m/linewrapper.go).\n\n- Arrow keys up / down while in line wrapping mode should scroll by screen line,\n  not by input file line.\n\n- Define 'g' to prompt for a line number to go to."
}
