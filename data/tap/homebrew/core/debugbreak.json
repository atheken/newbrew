{
  "name": "debugbreak",
  "full_name": "debugbreak",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Break into the debugger programmatically",
  "license": "BSD-2-Clause",
  "homepage": "https://github.com/scottt/debugbreak",
  "versions": {
    "stable": "1.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/scottt/debugbreak/archive/refs/tags/v1.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "62089680cc1cd0857519e2865b274ed7534bfa7ddfce19d72ffee41d4921ae2f"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/debugbreak/blobs/sha256:28fd8c0c9145f462c3a20f34c9ddc837f6719446cc562473f9822539321b8d36",
          "sha256": "28fd8c0c9145f462c3a20f34c9ddc837f6719446cc562473f9822539321b8d36"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/debugbreak.rb",
  "ruby_source_checksum": {
    "sha256": "7e9d2f7c64cd9c24b89b63147fddea4128269a38340c61880429b27c5142090c"
  },
  "date_added": "2023-05-14T12:57:34-04:00",
  "readme": "# Debug Break\n\n[debugbreak.h](https://github.com/scottt/debugbreak/blob/master/debugbreak.h) allows you to put breakpoints in your C/C++ code with a call to **debug_break()**:\n```C\n#include <stdio.h>\n#include \"debugbreak.h\"\n\nint main()\n{\n\tdebug_break(); /* will break into debugger */\n\tprintf(\"hello world\\n\");\n\treturn 0;\n}\n```\n* Include one header file and insert calls to `debug_break()` in the code where you wish to break into the debugger.\n* Supports GCC, Clang and MSVC.\n* Works well on ARM, AArch64, i686, x86-64, POWER and has a fallback code path for other architectures.\n* Works like the **DebugBreak()** fuction provided by [Windows](http://msdn.microsoft.com/en-us/library/ea9yy3ey.aspx) and [QNX](http://www.qnx.com/developers/docs/6.3.0SP3/neutrino/lib_ref/d/debugbreak.html).\n\n**License**: the very permissive [2-Clause BSD](https://github.com/scottt/debugbreak/blob/master/COPYING).\n\nKnown Problem: if continuing execution after a debugbreak breakpoint hit doesn't work (e.g. on ARM or POWER), see [HOW-TO-USE-DEBUGBREAK-GDB-PY.md](HOW-TO-USE-DEBUGBREAK-GDB-PY.md) for a workaround.\n\nImplementation Notes\n================================\n\nThe requirements for the **debug_break()** function are:\n* Act as a compiler code motion barrier\n* Don't cause the compiler optimizers to think the code following it can be removed\n* Trigger a software breakpoint hit when executed (e.g. **SIGTRAP** on Linux)\n* GDB commands like **continue**, **next**, **step**, **stepi** must work after a **debug_break()** hit\n\nIdeally, both GCC and Clang would provide a **__builtin_debugtrap()** that satisfies the above on all architectures and operating systems. Unfortunately, that is not the case (yet).\nGCC's [__builtin_trap()](http://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html#index-g_t_005f_005fbuiltin_005ftrap-3278) causes the optimizers to think the code follwing can be removed ([test/trap.c](https://github.com/scottt/debugbreak/blob/master/test/trap.c)):\n```C\n#include <stdio.h>\n\nint main()\n{\n\t__builtin_trap();\n\tprintf(\"hello world\\n\");\n\treturn 0;\n}\n```\ncompiles to:\n```\nmain\n0x0000000000400390 <+0>:     0f 0b\tud2    \n```\nNotice how the call to `printf()` is not present in the assembly output. \n\nFurther, on i386 / x86-64 **__builtin_trap()** generates an **ud2** instruction which triggers **SIGILL** instead of **SIGTRAP**. This makes it necessary to change GDB's default behavior on **SIGILL** to not terminate the process being debugged:\n```\n(gdb) handle SIGILL stop nopass\n```\nEven after this, continuing execution in GDB doesn't work well on some GCC, GDB combinations. See [GCC Bugzilla 84595](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=84595).\n\nOn ARM, **__builtin_trap()** generates a call to **abort()**, making it even less suitable.\n\n**debug_break()** generates an **int3** instruction on i386 / x86-64 ([test/break.c](https://github.com/scottt/debugbreak/blob/master/test/break.c)):\n```C\n#include <stdio.h>\n#include \"debugbreak.h\"\n   \nint main()\n{\n\tdebug_break();\n\tprintf(\"hello world\\n\");\n\treturn 0;\n}\n```\ncompiles to:\n```\nmain\n0x00000000004003d0 <+0>:     50\tpush   %rax\n0x00000000004003d1 <+1>:     cc\tint3   \n0x00000000004003d2 <+2>:     bf a0 05 40 00\tmov    $0x4005a0,%edi\n0x00000000004003d7 <+7>:     e8 d4 ff ff ff\tcallq  0x4003b0 <puts@plt>\n0x00000000004003dc <+12>:    31 c0\txor    %eax,%eax\n0x00000000004003de <+14>:    5a\tpop    %rdx\n0x00000000004003df <+15>:    c3\tretq   \n```\nwhich correctly trigges **SIGTRAP** and single-stepping in GDB after a **debug_break()** hit works well.\n\nClang / LLVM also has a **__builtin_trap()** that generates **ud2** but further provides **__builtin_debugtrap()** that generates **int3** on i386 / x86-64 ([original LLVM intrinsic](http://lists.llvm.org/pipermail/llvm-commits/Week-of-Mon-20120507/142621.html), [further fixes](https://reviews.llvm.org/rL166300#96cef7d3), [Clang builtin support](https://reviews.llvm.org/rL166298)).\n\nOn ARM, **debug_break()** generates **.inst 0xe7f001f0** in ARM mode and **.inst 0xde01** in Thumb mode which correctly triggers **SIGTRAP** on Linux. Unfortunately, stepping in GDB after a **debug_break()** hit doesn't work and requires a workaround like:\n```\n(gdb) set $l = 2\n(gdb) tbreak *($pc + $l)\n(gdb) jump   *($pc + $l)\n(gdb) # Change $l from 2 to 4 for ARM mode\n```\nto jump over the instruction.\nA new GDB command, **debugbreak-step**, is defined in [debugbreak-gdb.py](https://github.com/scottt/debugbreak/blob/master/debugbreak-gdb.py) to automate the above. See [HOW-TO-USE-DEBUGBREAK-GDB-PY.md](HOW-TO-USE-DEBUGBREAK-GDB-PY.md) for sample usage.\n```\n$ arm-none-linux-gnueabi-gdb -x debugbreak-gdb.py test/break-c++\n<...>\n(gdb) run\nProgram received signal SIGTRAP, Trace/breakpoint trap.\nmain () at test/break-c++.cc:6\n6\t\tdebug_break();\n\n(gdb) debugbreak-step\n\n7\t\tstd::cout << \"hello, world\\n\";\n```\n\nOn AArch64, **debug_break()** generates **.inst 0xd4200000**.\n\nSee table below for the behavior of **debug_break()** on other architecturs.\n\nBehavior on Different Architectures\n----------------\n\n| Architecture       | debug_break() |\n| -------------      | ------------- |\n| x86/x86-64         | `int3`  |\n| ARM mode, 32-bit   | `.inst 0xe7f001f0`  |\n| Thumb mode, 32-bit | `.inst 0xde01`  |\n| AArch64, ARMv8     | `.inst 0xd4200000` |\n| POWER              | `.4byte 0x7d821008` |\n| RISC-V             | `.4byte 0x00100073` |\n| MSVC compiler      | `__debugbreak` |\n| Apple compiler on AArch64     | `__builtin_trap()` |\n| Otherwise          | `raise(SIGTRAP)` |"
}
