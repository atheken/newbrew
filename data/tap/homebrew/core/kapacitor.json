{
  "name": "kapacitor",
  "full_name": "kapacitor",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Open source time series data processor",
  "license": "MIT",
  "homepage": "https://github.com/influxdata/kapacitor",
  "versions": {
    "stable": "1.6.6",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/influxdata/kapacitor.git",
      "tag": "v1.6.6",
      "revision": "79897085a4802304bb2fb052035bac4d16913302",
      "checksum": null
    },
    "head": {
      "url": "https://github.com/influxdata/kapacitor.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kapacitor/blobs/sha256:82a7eae9df12d924844d669cd098e4d2c627b6ddbe88b46a4fbb4a95f773ca05",
          "sha256": "82a7eae9df12d924844d669cd098e4d2c627b6ddbe88b46a4fbb4a95f773ca05"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kapacitor/blobs/sha256:753eb96876f6b4ee37822cf96328b4bd52dd97300230384f145947ce92317b96",
          "sha256": "753eb96876f6b4ee37822cf96328b4bd52dd97300230384f145947ce92317b96"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kapacitor/blobs/sha256:51d79f3c8df3812c2a2afa242d9b5d5e58463bd13845e4c6dca8bc1b8dc77213",
          "sha256": "51d79f3c8df3812c2a2afa242d9b5d5e58463bd13845e4c6dca8bc1b8dc77213"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kapacitor/blobs/sha256:62acbd5f2cd1f6178338868d5d1a2ff93c7a2a46f9bc569f4b5d3b9380f74426",
          "sha256": "62acbd5f2cd1f6178338868d5d1a2ff93c7a2a46f9bc569f4b5d3b9380f74426"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kapacitor/blobs/sha256:8abe8b6727275b75d12fc5a014847ac2e882d2b2730f8fea6989197a68f46edd",
          "sha256": "8abe8b6727275b75d12fc5a014847ac2e882d2b2730f8fea6989197a68f46edd"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kapacitor/blobs/sha256:7778f76687401b5b649c3cd490b9b19aa97dbb6a72fe714084acec78680b38b5",
          "sha256": "7778f76687401b5b649c3cd490b9b19aa97dbb6a72fe714084acec78680b38b5"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/kapacitor/blobs/sha256:a9c728517d5c4fd80f8e9dbe70813fa657ecc4314334cc452890967cfecb3efd",
          "sha256": "a9c728517d5c4fd80f8e9dbe70813fa657ecc4314334cc452890967cfecb3efd"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go",
    "rust",
    "pkg-config"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": true,
  "service": {
    "run": [
      "/home/linuxbrew/.linuxbrew/opt/kapacitor/bin/kapacitord",
      "-config",
      "/home/linuxbrew/.linuxbrew/etc/kapacitor.conf"
    ],
    "run_type": "immediate",
    "keep_alive": {
      "successful_exit": false
    },
    "working_dir": "/home/linuxbrew/.linuxbrew/var",
    "log_path": "/home/linuxbrew/.linuxbrew/var/log/kapacitor.log",
    "error_log_path": "/home/linuxbrew/.linuxbrew/var/log/kapacitor.log"
  },
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/kapacitor.rb",
  "ruby_source_checksum": {
    "sha256": "f6b6a8856184c8b3e4b8eda1a2924f654cf9eca47f898ad151a33d736beb16a7"
  },
  "date_added": "2015-12-09T09:34:40+00:00",
  "readme": "# Kapacitor [![Circle CI](https://circleci.com/gh/influxdata/kapacitor/tree/master.svg?style=svg&circle-token=78c97422cf89526309e502a290c230e8a463229f)](https://circleci.com/gh/influxdata/kapacitor/tree/master) [![Docker pulls](https://img.shields.io/docker/pulls/library/kapacitor.svg)](https://hub.docker.com/_/kapacitor/)\nOpen source framework for processing, monitoring, and alerting on time series data\n\n# Installation\n\nKapacitor has two binaries:\n\n* kapacitor – a CLI program for calling the Kapacitor API.\n* kapacitord – the Kapacitor server daemon.\n\nYou can either download the binaries directly from the [downloads](https://influxdata.com/downloads/#kapacitor) page or go get them:\n\n```sh\ngo get github.com/influxdata/kapacitor/cmd/kapacitor\ngo get github.com/influxdata/kapacitor/cmd/kapacitord\n```\n\n# Configuration\nAn example configuration file can be found [here](https://github.com/influxdata/kapacitor/blob/master/etc/kapacitor/kapacitor.conf)\n\nKapacitor can also provide an example config for you using this command:\n\n```sh\nkapacitord config\n```\n\n\n# Getting Started\n\nThis README gives you a high level overview of what Kapacitor is and what its like to use it. As well as some details of how it works.\nTo get started using Kapacitor see [this guide](https://docs.influxdata.com/kapacitor/latest/introduction/getting-started/). After you finish the getting started exercise you can check out the [TICKscripts](https://github.com/influxdata/kapacitor/tree/master/examples/telegraf) for different Telegraf plugins.\n\n# Basic Example\n\nKapacitor uses a DSL named [TICKscript](https://docs.influxdata.com/kapacitor/latest/tick/) to define tasks.\n\nA simple TICKscript that alerts on high cpu usage looks like this:\n\n```javascript\nstream\n    |from()\n        .measurement('cpu_usage_idle')\n        .groupBy('host')\n    |window()\n        .period(1m)\n        .every(1m)\n    |mean('value')\n    |eval(lambda: 100.0 - \"mean\")\n        .as('used')\n    |alert()\n        .message('{{ .Level}}: {{ .Name }}/{{ index .Tags \"host\" }} has high cpu usage: {{ index .Fields \"used\" }}')\n        .warn(lambda: \"used\" > 70.0)\n        .crit(lambda: \"used\" > 85.0)\n\n        // Send alert to hander of choice.\n\n        // Slack\n        .slack()\n        .channel('#alerts')\n\n        // VictorOps\n        .victorOps()\n        .routingKey('team_rocket')\n\n        // PagerDuty\n        .pagerDuty()\n```\n\nPlace the above script into a file `cpu_alert.tick` then run these commands to start the task:\n\n```sh\n# Define the task (assumes cpu data is in db 'telegraf')\nkapacitor define \\\n    cpu_alert \\\n    -type stream \\\n    -dbrp telegraf.default \\\n    -tick ./cpu_alert.tick\n# Start the task\nkapacitor enable cpu_alert\n```"
}
