{
  "name": "httpry",
  "full_name": "httpry",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Packet sniffer for displaying and logging HTTP traffic",
  "license": "GPL-2.0",
  "homepage": "https://github.com/jbittel/httpry",
  "versions": {
    "stable": "0.1.8",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/jbittel/httpry/archive/httpry-0.1.8.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "b3bcbec3fc6b72342022e940de184729d9cdecb30aa754a2c994073447468cf0"
    },
    "head": {
      "url": "https://github.com/jbittel/httpry.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/httpry/blobs/sha256:2a55a20ab1f6989ce19201f8f542961cf83dedb772a32006f600270ee199b551",
          "sha256": "2a55a20ab1f6989ce19201f8f542961cf83dedb772a32006f600270ee199b551"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/httpry/blobs/sha256:35b7bf13b5cb242152bddbdd26ffc2d3102849a0ff8c95f5b7fac5ee818cd0ae",
          "sha256": "35b7bf13b5cb242152bddbdd26ffc2d3102849a0ff8c95f5b7fac5ee818cd0ae"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/httpry/blobs/sha256:96df271f206bb36741a419eb5dced955578cb462c849da52e61778102f8629d2",
          "sha256": "96df271f206bb36741a419eb5dced955578cb462c849da52e61778102f8629d2"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/httpry/blobs/sha256:20c4af64c9155666c8c0c777c065aef44bb29e35c339e280d3e834b5759cd026",
          "sha256": "20c4af64c9155666c8c0c777c065aef44bb29e35c339e280d3e834b5759cd026"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/httpry/blobs/sha256:31a42f2ee46af90cf63b5da4cf20066a8a35cb4f977794e94e1179bd2df01169",
          "sha256": "31a42f2ee46af90cf63b5da4cf20066a8a35cb4f977794e94e1179bd2df01169"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/httpry/blobs/sha256:4be4a4e9939e75e8eb4854df6003265f986ada5b2d08ba96fbaf355323f184f2",
          "sha256": "4be4a4e9939e75e8eb4854df6003265f986ada5b2d08ba96fbaf355323f184f2"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/httpry/blobs/sha256:322f399002eec5d9116942db65d231d7eed5bb1b46e9959cdb48c6eb10f41339",
          "sha256": "322f399002eec5d9116942db65d231d7eed5bb1b46e9959cdb48c6eb10f41339"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/httpry/blobs/sha256:32bdf2c6b873fc531455da9f4658746c650203a017c8b367172efde8aa93f9ba",
          "sha256": "32bdf2c6b873fc531455da9f4658746c650203a017c8b367172efde8aa93f9ba"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/httpry/blobs/sha256:349ba4f39066cb02c151ab0f274f6bb9f4ee2cf558abdb2c5a3ecf0e563874fc",
          "sha256": "349ba4f39066cb02c151ab0f274f6bb9f4ee2cf558abdb2c5a3ecf0e563874fc"
        },
        "sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/httpry/blobs/sha256:71014794d2a136fea229dd19d6fe7dc136037c074a817d70bd7b13713653f19f",
          "sha256": "71014794d2a136fea229dd19d6fe7dc136037c074a817d70bd7b13713653f19f"
        },
        "el_capitan": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/httpry/blobs/sha256:56d6a77e429bf9dde3d5e5edb9959fc7ed913430236cf628e0aec6445c07c85a",
          "sha256": "56d6a77e429bf9dde3d5e5edb9959fc7ed913430236cf628e0aec6445c07c85a"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/httpry/blobs/sha256:362c2d3249eec72e7baebdde1a8c0a2e6a2b005e70b516733b96fa01e2aaf55e",
          "sha256": "362c2d3249eec72e7baebdde1a8c0a2e6a2b005e70b516733b96fa01e2aaf55e"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "libpcap"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/httpry.rb",
  "ruby_source_checksum": {
    "sha256": "1f27121db3a9f26042326c23884adde5e5e69f20ce02a1a3cbb2eb520e711983"
  },
  "date_added": "2011-09-02T10:19:58-07:00",
  "readme": "\n                        _     _   _\n                       | |   | | | |\n                       | |__ | |_| |_ _ __  _ __ _   _\n                       | '_ \\| __| __| '_ \\| '__| | | |\n                       | | | | |_| |_| |_) | |  | |_| |\n                       |_| |_|\\__|\\__| .__/|_|   \\__, |\n                                     | |          __/ |\n                                     |_|         |___/\n\n\n                  HTTP logging and information retrieval tool\n                                 version 0.1.8\n\n         Copyright (c) 2005-2014 Jason Bittel <jason.bittel@gmail.com>\n\n                For further information about the program, see:\n                   http://dumpsterventures.com/jason/httpry\n\n       For modification and redistribution information, see COPYING file\n\n\n--{ ABOUT }--\n\nhttpry is a tool designed for displaying and logging HTTP traffic. It is not\nintended to perform analysis itself, but instead to capture, parse and/or\nlog the traffic for later analysis. It can be run in real-time displaying\nthe live traffic on the wire, or as a daemon process that logs to an output\nfile. It is written to be as lightweight and flexible as possible, so that\nit can be easily adaptable to different applications. It does not display\nthe raw HTTP data transferred, but instead focuses on parsing and displaying\nthe request/response line along with associated header fields.\n\n\"How is this tool useful?\" you may ask. Here's just a few ideas:\n\n > See what users on your network are browsing online\n > Check for proper server configuration (or improper, as the case may be)\n > Research patterns in HTTP usage\n > Watch for dangerous downloaded files\n > Verify the enforcement of HTTP policy on your network\n > Extract HTTP statistics out of saved capture files\n > It's just plain fun to watch in realtime\n\nIn addition to the core program, there are several Perl scripts included\nfor processing httpry log files. They should be useful for a number of\ngeneric situations, and can serve as a useful starting point for your own\nlog parsing toolset. More information about these scripts can be found in\nthe doc/perl-tools file.\n\n\n--{ INSTALLATION }--\n\nhttpry should compile on almost any *nix based OS with a relatively recent\nversion of libpcap (specifically tested against 1.1.1 and newer). To compile\nand install, run these commands in the base httpry directory:\n\n $ make\n # make install\n\nwhich compiles the program and copies the binary and man page to their\nappropriate locations. You can run the binary from the compilation directory\nif you don't want to install it. To uninstall the program, run:\n\n # make uninstall\n\nfrom the installation directory, or manually delete the executable and man\npage.\n\n\n--{ USAGE }--\n\nRunning httpry with no options will cause it to listen on the first network\ndevice and output to the console with some sane defaults. The -h switch will\nprint out an abbreviated description of the available options to change the\ndefaults. This section describes these options in greater detail.\n\nhttpry [ -dFhpqs ] [ -b file ] [ -f format ] [ -i device ] [ -l threshold ]\n       [ -m methods ] [ -n count ] [ -o file ] [ -P file ] [ -r file ]\n       [ -S bytes ] [ -t seconds ] [ -u user ] [ 'expression' ]\n\n-b file\nWrite all processed HTTP packets to a binary pcap dump file. Useful for\nfurther analysis of logged data.\n\n-d\nRun the program as a daemon process. All program status output will be sent\nto syslog. A pid file is created for the process in /var/run/httpry.pid by\ndefault. Requires an output file specified with -o.\n\n-f format\nProvide a comma-delimited string specifying the parsed HTTP data to output.\nSee the doc/format-string file for further information regarding available\noptions and syntax.\n\n-F\nDisable all output buffering. This may be helpful when piping httpry output\ninto another program.\n\n-h\nDisplay a brief summary of these options.\n\n-i device\nSpecify an ethernet interface for the program to listen on. If not specified,\nthe program will poll the system for a list of interfaces and select the\nfirst one found.\n\n-l threshold\nSpecify a requests per second rate threshold value when running in rate\nstatistics mode (-s). Only hosts with a rps value greater than or equal to\nthis number will be displayed. Defaults to 1.\n\n-m methods\nProvide a comma-delimited string that specifies the request methods to parse.\nThe program defaults to parsing all of the standard RFC2616 method strings if\nthis option is not set. See the doc/method-string file for more information.\n\n-n count\nParse this number of HTTP packets and then exit. Defaults to 0, which means\nloop forever.\n\n-o file\nSpecify an output file for writing parsed packet data.\n\n-p\nDo not put the NIC in promiscuous mode on startup. Note that the NIC could\nalready be in that mode for another reason.\n\n-P file\nSpecify a path and filename for creating the PID file in daemon mode.\n\n-q\nSuppress non-critical output (startup banner, statistics, etc.).\n\n-r file\nProvide an input capture file to read from instead of performing\na live capture. This option does not require root privileges.\n\n-s\nRun httpry in an HTTP request per second display mode. This periodically\ndisplays the rate per active host and total rate at a specified interval.\n\n-S\nSpecify a number of bytes to skip in the ethernet header. This allows for\ncustom header offsets to be accounted for.\n\n-t seconds\nSpecify the host statistics display interval in seconds when running in\nrate statistics mode (-s). Defaults to 5 seconds.\n\n-u user\nSpecify an alternate user to take ownership of the process and any output\nfiles. You will need root privileges to do this; it will switch to the new\nuser after initialization.\n\n'expression'\nSpecify a bpf-style capture filter, overriding the default. Here are a few\nbasic examples, starting with the default filter:\n\n 'tcp port 80 or 8080'\n 'tcp dst port 80'\n 'tcp dst port 80 and src host 192.168.1.1'\n\nThese filters will capture all web traffic both directions on two common\nports, capture only requests made to port 80, and capture requests to port\n80 by a particular host, respectively. See 'man tcpdump' for further\ninformation on the syntax and available primitives.\n\n\n--{ KNOWN ISSUES }--\n\nIt is worth noting that httpry is rather naive when it comes to parsing HTTP\npackets. It does not perform any reordering or reassembly of packets and\nsimply searches the start of each packet for HTTP data and ignores the packet\nif it does not find valid data. HTTP packets that are fragmented within the\nrequest/response line will be parsed to the end of the packet and any header\ndata present in subsequent packets will not be parsed."
}
