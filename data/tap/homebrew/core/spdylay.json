{
  "name": "spdylay",
  "full_name": "spdylay",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Experimental implementation of SPDY protocol versions 2, 3, and 3.1",
  "license": "MIT",
  "homepage": "https://github.com/tatsuhiro-t/spdylay",
  "versions": {
    "stable": "1.4.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/tatsuhiro-t/spdylay/archive/v1.4.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "31ed26253943b9d898b936945a1c68c48c3e0974b146cef7382320a97d8f0fa0"
    }
  },
  "revision": 3,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/spdylay/blobs/sha256:d4a310199a7b40dea729051d4dbc6fd44480d29d2ef619f6ad3a0d7d86e9762e",
          "sha256": "d4a310199a7b40dea729051d4dbc6fd44480d29d2ef619f6ad3a0d7d86e9762e"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/spdylay/blobs/sha256:1edca89e855c54de431b99ab1f0a083438b56d56a770ef019f3638b69a3cbfae",
          "sha256": "1edca89e855c54de431b99ab1f0a083438b56d56a770ef019f3638b69a3cbfae"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/spdylay/blobs/sha256:9e3aebfe4d65aa4acb6e16343f58b4fe26159a4ba4ae2a6209911147f16d8f77",
          "sha256": "9e3aebfe4d65aa4acb6e16343f58b4fe26159a4ba4ae2a6209911147f16d8f77"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/spdylay/blobs/sha256:667267cd379da8478b31574c5e25bf3f8e150c6f80ab59c2278bec042c71c7aa",
          "sha256": "667267cd379da8478b31574c5e25bf3f8e150c6f80ab59c2278bec042c71c7aa"
        },
        "catalina": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/spdylay/blobs/sha256:5607031eb5776de5b4a68e8c50f312771cae89e8b2266df60718b2e07e35d070",
          "sha256": "5607031eb5776de5b4a68e8c50f312771cae89e8b2266df60718b2e07e35d070"
        },
        "mojave": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/spdylay/blobs/sha256:9906d0abfcd17c86df23c18b1ed112de0266ccbc7a50c24f741f78bffa552540",
          "sha256": "9906d0abfcd17c86df23c18b1ed112de0266ccbc7a50c24f741f78bffa552540"
        },
        "high_sierra": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/spdylay/blobs/sha256:c89edde9d9229dbe524d28b661265349af72a2dac0b85f066751d4716effe1ab",
          "sha256": "c89edde9d9229dbe524d28b661265349af72a2dac0b85f066751d4716effe1ab"
        },
        "sierra": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/spdylay/blobs/sha256:2f24051eb854a2345e88a1e023aa76fa6c2cb7522ec0fd7644af15694b456f27",
          "sha256": "2f24051eb854a2345e88a1e023aa76fa6c2cb7522ec0fd7644af15694b456f27"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/spdylay/blobs/sha256:86dc964a1409f31c97cde673a4f6862af83e38bf7fc67636499eaea916a67f68",
          "sha256": "86dc964a1409f31c97cde673a4f6862af83e38bf7fc67636499eaea916a67f68"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "autoconf",
    "automake",
    "libtool",
    "pkg-config"
  ],
  "dependencies": [
    "libevent",
    "openssl@1.1"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "xz",
    "zlib"
  ],
  "uses_from_macos_bounds": [
    {},
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": true,
  "disable_date": "2022-07-31",
  "disable_reason": "is deprecated and not supported by most websites",
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/spdylay.rb",
  "ruby_source_checksum": {
    "sha256": "a9fa5628add50ce54b0e6c6692a1a2839bbaa19b64fb6fcf3edf6133deffdbcd"
  },
  "date_added": "2013-03-07T16:24:53-06:00",
  "readme": "Spdylay - SPDY C Library\n========================\n\nThis is an experimental implementation of Google's SPDY protocol in C.\n\nThis library provides SPDY version 2, 3 and 3.1 framing layer\nimplementation.  It does not perform any I/O operations.  When the\nlibrary needs them, it calls the callback functions provided by the\napplication. It also does not include any event polling mechanism, so\nthe application can freely choose the way of handling events. This\nlibrary code does not depend on any particular SSL library (except for\nexample programs which depend on OpenSSL 1.0.1 or later).\n\nThis project also develops SPDY client, server and proxy on top of\nSpdylay library. See `SPDY Client and Server Programs`_ section.\n\nDevelopment Status\n------------------\n\nMost of the SPDY/2, SPDY/3 and SPDY/3.1 functionality has been\nimplemented.  In both versions, the direct support of server-push has\nnot been available yet.  The application can achieve server-push using\nprimitive APIs though.\n\nAs described below, we can create SPDY client and server with the\ncurrent Spdylay API.\n\nRequirements\n------------\n\nThe following packages are needed to build the library:\n\n* pkg-config >= 0.20\n* zlib >= 1.2.3\n\nTo build and run the unit test programs, the following packages are\nneeded:\n\n* cunit >= 2.1\n\nTo build and run the example programs, the following packages are\nneeded:\n\n* OpenSSL >= 1.0.1\n\nTo enable ``-a`` option (getting linked assets from the downloaded\nresource) in ``spdycat`` (one of the example program), the following\npackages are needed:\n\n* libxml2 >= 2.7.7\n\nTo build SPDY/HTTPS to HTTP reverse proxy ``shrpx`` (one of the\nexample program), the following packages are needed:\n\n* libevent-openssl >= 2.0.8\n\nIf you are using Ubuntu 12.04, you need the following packages\ninstalled::\n\n    $ apt-get install autoconf automake autotools-dev libtool pkg-config zlib1g-dev libcunit1-dev libssl-dev libxml2-dev libevent-dev\n\nBuild from git\n--------------\n\nBuilding from git is easy, but please be sure that at least autoconf 2.68 is\nused::\n\n    $ autoreconf -i\n    $ automake\n    $ autoconf\n    $ ./configure\n    $ make\n\nBuilding documentation\n----------------------\n\nTo build documentation, run::\n\n    $ make html\n\nThe documents will be generated under ``doc/manual/html/``.\n\nThe generated documents will not be installed with ``make install``.\n\nBuilding Android binary\n------------------------\n\nIn this section, we briefly describe how to build Android binary using\n`Android NDK <http://developer.android.com/tools/sdk/ndk/index.html>`_\ncross-compiler on Debian Linux.\n\nWe offer ``android-config`` and ``android-make`` scripts to make the\nbuild easier. To make these script work, NDK toolchain must be\ninstalled in the following way. First, let introduce ``ANDROID_HOME``\nenvironment variable. We need to install toolchain under\n``$ANDROID_HOME/toolchain``. An user can freely choose the path for\n``ANDROID_HOME``.  For example, to install toolchain under\n``$ANDROID_HOME/toolchain``, do this in the the directory where NDK is\nunpacked::\n\n    $ build/tools/make-standalone-toolchain.sh --platform=android-9 --install-dir=$ANDROID_HOME/toolchain\n\nThe platform level is not important here because we don't use Android\nspecific C/C++ API.\n\nThe dependent libraries, such as OpenSSL and libevent should be built\nwith the toolchain and installed under ``$ANDROID_HOME/usr/local``.\nWe recommend to build these libraries as static library to make the\ndeployment easier. libxml2 support is currently disabled.\n\nWe use zlib which comes with Android NDK, so we don't have to build it\nby ourselves.\n\nBefore running ``android-config`` and ``android-make``,\n``ANDOIRD_HOME`` environment variable must be set to point to the\ncorrect path.\n\nAfter ``android-config``, run ``android-make`` to compile sources.\n``android-make`` is just include path to cross compiler in ``PATH``\nand run make. So if you include path to corss compiler by yourself,\nyou can just run make to build spdylay and tools as usual.\n\nAPI\n---\n\nThe public API reference is available on online. Visit\nhttp://tatsuhiro-t.github.io/spdylay/.  All public APIs are in\n*spdylay/spdylay.h*. All public API functions as well as the callback\nfunction typedefs are documented.\n\nSPDY Client and Server Programs\n-------------------------------\n\nThe *src* directory contains SPDY client and server implementations\nusing Spdylay library. These programs are intended to make sure that\nSpdylay API is acutally usable for real implementation and also for\ndebugging purposes. Please note that OpenSSL with `NPN\n<http://technotes.googlecode.com/git/nextprotoneg.html>`_ support is\nrequired in order to build and run these programs.  At the time of\nthis writing, the OpenSSL 1.0.1 supports NPN.\n\nSpdycat - SPDY client\n+++++++++++++++++++++\n\nThe SPDY client is called ``spdycat``. It is a dead simple downloader\nlike wget/curl. It connects to SPDY server and gets resources given in\nthe command-line::\n\n    $ src/spdycat -h\n    Usage: spdycat [-Oansv23] [-t <SECONDS>] [-w <WINDOW_BITS>] [--cert=<CERT>]\n                   [--key=<KEY>] [--no-tls] [-d <FILE>] [-m <N>] [-p <PROXY_HOST>]\n                   [-P <PROXY_PORT>] <URI>...\n\n    OPTIONS:\n        -v, --verbose      Print debug information such as reception/\n                           transmission of frames and name/value pairs.\n        -n, --null-out     Discard downloaded data.\n        -O, --remote-name  Save download data in the current directory.\n                           The filename is dereived from URI. If URI\n                           ends with '/', 'index.html' is used as a\n                           filename. Not implemented yet.\n        -2, --spdy2        Only use SPDY/2.\n        -3, --spdy3        Only use SPDY/3.\n        --spdy3-1          Only use SPDY/3.1.\n        -t, --timeout=<N>  Timeout each request after <N> seconds.\n        -w, --window-bits=<N>\n                           Sets the initial window size to 2**<N>.\n        -a, --get-assets   Download assets such as stylesheets, images\n                           and script files linked from the downloaded\n                           resource. Only links whose origins are the\n                           same with the linking resource will be\n                           downloaded.\n        -s, --stat         Print statistics.\n        -H, --header       Add a header to the requests.\n        --cert=<CERT>      Use the specified client certificate file.\n                           The file must be in PEM format.\n        --key=<KEY>        Use the client private key file. The file\n                           must be in PEM format.\n        --no-tls           Disable SSL/TLS. Use -2, -3 or --spdy3-1 to\n                           specify SPDY protocol version to use.\n        -d, --data=<FILE>  Post FILE to server. If - is given, data\n                           will be read from stdin.\n        -m, --multiply=<N> Request each URI <N> times. By default, same\n                           URI is not requested twice. This option\n                           disables it too.\n        -p, --proxy=<HOST> Use this host as a SPDY proxy\n        -P, --proxy-port=<PORT>\n                           Use this as the port of the SPDY proxy if\n                           one is set\n        --color            Force colored log output.\n\n    $ src/spdycat -nv https://www.google.com/\n    [  0.021] NPN select next protocol: the remote server offers:\n              * spdy/4a4\n              * spdy/3.1\n              * spdy/3\n              * http/1.1\n              NPN selected the protocol: spdy/3.1\n    [  0.029] Handshake complete\n    [  0.029] recv SETTINGS frame <version=3, flags=0, length=20>\n              (niv=2)\n              [4(1):100]\n              [7(0):1048576]\n    [  0.029] recv WINDOW_UPDATE frame <version=3, flags=0, length=8>\n              (stream_id=0, delta_window_size=983040)\n    [  0.029] send SYN_STREAM frame <version=3, flags=1, length=221>\n              (stream_id=1, assoc_stream_id=0, pri=3)\n              :host: www.google.com\n              :method: GET\n              :path: /\n              :scheme: https\n              :version: HTTP/1.1\n              accept: */*\n              accept-encoding: gzip, deflate\n              user-agent: spdylay/1.2.0-DEV\n    [  0.080] recv SYN_REPLY frame <version=3, flags=0, length=619>\n              (stream_id=1)\n              :status: 302 Found\n              :version: HTTP/1.1\n              alternate-protocol: 443:quic\n              cache-control: private\n              content-length: 262\n              content-type: text/html; charset=UTF-8\n              date: Tue, 19 Nov 2013 13:47:18 GMT\n              location: https://www.google.co.jp/\n              server: gws\n              x-frame-options: SAMEORIGIN\n              x-xss-protection: 1; mode=block\n    [  0.080] recv DATA frame (stream_id=1, flags=1, length=262)\n    [  0.080] send GOAWAY frame <version=3, flags=0, length=8>\n              (last_good_stream_id=0)\n\nSpdyd - SPDY server\n+++++++++++++++++++\n\nSPDY server is called ``spdyd`` and serves static files. It is single\nthreaded and multiplexes connections using non-blocking socket. The\nstatic files are read using blocking I/O system call, ``read(2)``. It\nspeaks SPDY/2 and SPDY/3::\n\n    $ src/spdyd --htdocs=/your/htdocs/ -v 3000 server.key server.crt\n    IPv4: listen on port 3000\n    IPv6: listen on port 3000\n    The negotiated next protocol: spdy/3.1\n    [id=1] [  1.296] send SETTINGS frame <version=3, flags=0, length=12>\n              (niv=1)\n              [4(0):100]\n    [id=1] [  1.297] recv SYN_STREAM frame <version=3, flags=1, length=228>\n              (stream_id=1, assoc_stream_id=0, pri=3)\n              :host: localhost:3000\n              :method: GET\n              :path: /README\n              :scheme: https\n              :version: HTTP/1.1\n              accept: */*\n              accept-encoding: gzip, deflate\n              user-agent: spdylay/1.2.0-DEV\n    [id=1] [  1.297] send SYN_REPLY frame <version=3, flags=0, length=116>\n              (stream_id=1)\n              :status: 200 OK\n              :version: HTTP/1.1\n              cache-control: max-age=3600\n              content-length: 66\n              date: Tue, 19 Nov 2013 14:35:24 GMT\n              last-modified: Tue, 17 Jan 2012 15:39:01 GMT\n              server: spdyd spdylay/1.2.0-DEV\n    [id=1] [  1.297] send DATA frame (stream_id=1, flags=0, length=66)\n    [id=1] [  1.297] send DATA frame (stream_id=1, flags=1, length=0)\n    [id=1] [  1.297] stream_id=1 closed\n    [id=1] [  1.297] recv GOAWAY frame <version=3, flags=0, length=8>\n              (last_good_stream_id=0)\n    [id=1] [  1.297] closed\n\nCurrently, ``spdyd`` needs ``epoll`` or ``kqueue``.\n\nShrpx - A reverse proxy for SPDY/HTTPS\n++++++++++++++++++++++++++++++++++++++\n\nFor shrpx users who uses shrpx as SPDY proxy: Please consider\nmigrating to nghttpx developed at `nghttp2 project\n<https://nghttp2.org>`_.  nghttpx supports SPDY proxy too.\n\nThe ``shrpx`` is a multi-threaded reverse proxy for SPDY/HTTPS.  It\nconverts SPDY/HTTPS traffic to plain HTTP.  It is initially developed\nas a reverse proxy, but now it has other operation modes such as a\nfrontend forward proxy.  For example, with ``--spdy-proxy`` (``-s`` in\nshorthand) option, it can be used as secure SPDY proxy with a proxy\n(e.g., Squid) in the backend.  With ``--cliet-proxy`` (``-p``) option,\nit acts like an ordinaly forward proxy but expects secure SPDY proxy\nin the backend. Thus it becomes an adapter to secure SPDY proxy for\nclients which does not support secure SPDY proxy. The another notable\noperation mode is ``--spdy-relay``, which just relays SPDY/HTTPS\ntraffic to the backend in SPDY. The following table summarizes the\noperation modes.\n\n================== ========== ======= =============\nMode option        Frontend   Backend Note\n================== ========== ======= =============\ndefault            SPDY/HTTPS HTTP    Reverse proxy\n``--spdy``         SPDY/HTTPS HTTP    SPDY proxy\n``--spdy-relay``   SPDY/HTTPS SPDY\n``--client``       HTTP       SPDY\n``--client-proxy`` HTTP       SPDY    Forward proxy\n================== ========== ======= =============\n\nThe ``shrpx`` supports configuration file. See ``--conf`` option and\nsample configuration file ``shrpx.conf.sample``.\n\nWe briefly describe the architecture of ``shrpx`` here.  It has a\ndedicated thread which listens on server sockets.  When it accepted\nthe incoming connection, it passes the file descriptor of the incoming\nconnection to one of the worker thread.  Each worker thread has its\nown event loop and can handle many connections using non-blocking I/O.\nThe number of worker thread can be specified using the command-line\noption. The `libevent <http://libevent.org/>`_ is used to handle\nlow-level network I/O.\n\nHere is the command-line options::\n\n    $ src/shrpx -h\n    Usage: shrpx [-Dh] [-s|--client|-p] [-b <HOST,PORT>]\n                 [-f <HOST,PORT>] [-n <CORES>] [-c <NUM>] [-L <LEVEL>]\n                 [OPTIONS...] [<PRIVATE_KEY> <CERT>]\n\n    A reverse proxy for SPDY/HTTPS.\n\n    Positional arguments:\n        <PRIVATE_KEY>      Set path to server's private key. Required\n                           unless either -p or --client is specified.\n        <CERT>             Set path to server's certificate. Required\n                           unless either -p or --client is specified.\n\n    OPTIONS:\n\n      Connections:\n        -b, --backend=<HOST,PORT>\n                           Set backend host and port.\n                           Default: '127.0.0.1,80'\n        -f, --frontend=<HOST,PORT>\n                           Set frontend host and port.\n                           Default: '0.0.0.0,3000'\n        --backlog=<NUM>    Set listen backlog size.\n                           Default: 256\n        --backend-ipv4     Resolve backend hostname to IPv4 address\n                           only.\n        --backend-ipv6     Resolve backend hostname to IPv6 address\n                           only.\n\n      Performance:\n        -n, --workers=<CORES>\n                           Set the number of worker threads.\n                           Default: 1\n        --read-rate=<RATE> Set maximum average read rate on frontend\n                           connection. Setting 0 to this option means\n                           read rate is unlimited.\n                           Default: 1048576\n        --read-burst=<SIZE>\n                           Set maximum read burst size on frontend\n                           connection. Setting 0 to this option means\n                           read burst size is unlimited.\n                           Default: 4194304\n        --write-rate=<RATE>\n                           Set maximum average write rate on frontend\n                           connection. Setting 0 to this option means\n                           write rate is unlimited.\n                           Default: 0\n        --write-burst=<SIZE>\n                           Set maximum write burst size on frontend\n                           connection. Setting 0 to this option means\n                           write burst size is unlimited.\n                           Default: 0\n\n      Timeout:\n        --frontend-spdy-read-timeout=<SEC>\n                           Specify read timeout for SPDY frontend\n                           connection. Default: 180\n        --frontend-read-timeout=<SEC>\n                           Specify read timeout for non-SPDY frontend\n                           connection. Default: 180\n        --frontend-write-timeout=<SEC>\n                           Specify write timeout for both SPDY and\n                           non-SPDY frontends.\n                           connection. Default: 60\n        --backend-read-timeout=<SEC>\n                           Specify read timeout for backend connection.\n                           Default: 900\n        --backend-write-timeout=<SEC>\n                           Specify write timeout for backend\n                           connection. Default: 60\n        --backend-keep-alive-timeout=<SEC>\n                           Specify keep-alive timeout for backend\n                           connection. Default: 60\n        --backend-http-proxy-uri=<URI>\n                           Specify proxy URI in the form\n                           http://[<USER>:<PASS>@]<PROXY>:<PORT>. If\n                           a proxy requires authentication, specify\n                           <USER> and <PASS>. Note that they must be\n                           properly percent-encoded. This proxy is used\n                           when the backend connection is SPDY. First,\n                           make a CONNECT request to the proxy and\n                           it connects to the backend on behalf of\n                           shrpx. This forms tunnel. After that, shrpx\n                           performs SSL/TLS handshake with the\n                           downstream through the tunnel. The timeouts\n                           when connecting and making CONNECT request\n                           can be specified by --backend-read-timeout\n                           and --backend-write-timeout options.\n\n      SSL/TLS:\n        --ciphers=<SUITE>  Set allowed cipher list. The format of the\n                           string is described in OpenSSL ciphers(1).\n                           If this option is used, --honor-cipher-order\n                           is implicitly enabled.\n        --honor-cipher-order\n                           Honor server cipher order, giving the\n                           ability to mitigate BEAST attacks.\n        -k, --insecure     When used with -p or --client, don't verify\n                           backend server's certificate.\n        --cacert=<PATH>    When used with -p or --client, set path to\n                           trusted CA certificate file.\n                           The file must be in PEM format. It can\n                           contain multiple certificates. If the\n                           linked OpenSSL is configured to load system\n                           wide certificates, they are loaded\n                           at startup regardless of this option.\n        --private-key-passwd-file=<FILEPATH>\n                           Path to file that contains password for the\n                           server's private key. If none is given and\n                           the private key is password protected it'll\n                           be requested interactively.\n        --subcert=<KEYPATH>:<CERTPATH>\n                           Specify additional certificate and private\n                           key file. Shrpx will choose certificates\n                           based on the hostname indicated by client\n                           using TLS SNI extension. This option can be\n                           used multiple times.\n        --backend-tls-sni-field=<HOST>\n                           Explicitly set the content of the TLS SNI\n                           extension.  This will default to the backend\n                           HOST name.\n        --dh-param-file=<PATH>\n                           Path to file that contains DH parameters in\n                           PEM format. Without this option, DHE cipher\n                           suites are not available.\n        --verify-client    Require and verify client certificate.\n        --verify-client-cacert=<PATH>\n                           Path to file that contains CA certificates\n                           to verify client certificate.\n                           The file must be in PEM format. It can\n                           contain multiple certificates.\n        --client-private-key-file=<PATH>\n                           Path to file that contains client private\n                           key used in backend client authentication.\n        --client-cert-file=<PATH>\n                           Path to file that contains client\n                           certificate used in backend client\n                           authentication.\n        --tls-proto-list=<LIST>\n                           Comma delimited list of SSL/TLS protocol to\n                           be enabled.\n                           The following protocols are available:\n                           TLSv1.2, TLSv1.1, TLSv1.0, SSLv3\n                           The name matching is done in case-insensitive\n                           manner.\n                           The parameter must be delimited by a single\n                           comma only and any white spaces are treated\n                           as a part of protocol string.\n                           Default: TLSv1.2,TLSv1.1,TLSv1.0\n\n      SPDY:\n        -c, --spdy-max-concurrent-streams=<NUM>\n                           Set the maximum number of the concurrent\n                           streams in one SPDY session.\n                           Default: 100\n        --frontend-spdy-window-bits=<N>\n                           Sets the per-stream initial window size of\n                           SPDY frontend connection to 2**<N>.\n                           Default: 16\n        --frontend-spdy-connection-window-bits=<N>\n                           Sets the per-connection window size of SPDY\n                           frontend connection to 2**<N>.\n                           Default: 16\n        --frontend-spdy-no-tls\n                           Disable SSL/TLS on frontend SPDY\n                           connections. SPDY protocol must be specified\n                           using --frontend-spdy-proto. This option\n                           also disables frontend HTTP/1.1.\n        --frontend-spdy-proto\n                           Specify SPDY protocol used in frontend\n                           connection if --frontend-spdy-no-tls is\n                           used. Default: spdy/3.1\n        --backend-spdy-window-bits=<N>\n                           Sets the per-stream initial window size of\n                           SPDY backend connection to 2**<N>.\n                           Default: 16\n        --backend-spdy-connection-window-bits=<N>\n                           Sets the per-connection window size of SPDY\n                           backend connection to 2**<N>.\n                           Default: 16\n        --backend-spdy-no-tls\n                           Disable SSL/TLS on backend SPDY connections.\n                           SPDY protocol must be specified using\n                           --backend-spdy-proto\n        --backend-spdy-proto\n                           Specify SPDY protocol used in backend\n                           connection if --backend-spdy-no-tls is used.\n                           Default: spdy/3.1\n\n      Mode:\n        -s, --spdy-proxy   Enable secure SPDY proxy mode.\n        --spdy-bridge      Communicate with the backend in SPDY. Thus\n                           the incoming SPDY/HTTPS connections are\n                           converted to SPDY connection and relayed to\n                           the backend. See --backend-http-proxy-uri\n                           option if you are behind the proxy and want\n                           to connect to the outside SPDY proxy.\n        --client           Instead of accepting SPDY/HTTPS connection,\n                           accept HTTP connection and communicate with\n                           backend server in SPDY. To use shrpx as\n                           a forward proxy, use -p option instead.\n        -p, --client-proxy Like --client option, but it also requires\n                           the request path from frontend must be\n                           an absolute URI, suitable for use as a\n                           forward proxy.\n\n      Logging:\n        -L, --log-level=<LEVEL>\n                           Set the severity level of log output.\n                           INFO, WARNING, ERROR and FATAL.\n                           Default: WARNING\n        --accesslog        Print simple accesslog to stderr.\n        --syslog           Send log messages to syslog.\n        --syslog-facility=<FACILITY>\n                           Set syslog facility.\n                           Default: daemon\n\n      Misc:\n        --add-x-forwarded-for\n                           Append X-Forwarded-For header field to the\n                           downstream request.\n        --no-via           Don't append to Via header field. If Via\n                           header field is received, it is left\n                           unaltered.\n        -D, --daemon       Run in a background. If -D is used, the\n                           current working directory is changed to '/'.\n        --pid-file=<PATH>  Set path to save PID of this program.\n        --user=<USER>      Run this program as USER. This option is\n                           intended to be used to drop root privileges.\n        --conf=<PATH>      Load configuration from PATH.\n                           Default: /etc/shrpx/shrpx.conf\n        -v, --version      Print version and exit.\n        -h, --help         Print this help and exit.\n\nFor those of you who are curious, ``shrpx`` is an abbreviation of\n\"Spdy/https to Http Reverse ProXy\".\n\nWithout any of ``-s``, ``--spdy-bridge``, ``-p`` and ``--client``\noptions, ``shrpx`` works as reverse proxy to the backend server::\n\n    Client <-- (SPDY, HTTPS) --> Shrpx <-- (HTTP) --> Web Server\n                            [reverse proxy]\n\nWith ``-s`` option, it works as secure SPDY proxy::\n\n    Client <-- (SPDY, HTTPS) --> Shrpx <-- (HTTP) --> Proxy\n                              [SPDY proxy]            (e.g., Squid)\n\nThe ``Client`` in the above is needs to be configured to use shrpx as\nsecure SPDY proxy.\n\nAt the time of this writing, Chrome is the only browser which supports\nsecure SPDY proxy. The one way to configure Chrome to use secure SPDY\nproxy is create proxy.pac script like this::\n\n    function FindProxyForURL(url, host) {\n        return \"HTTPS SERVERADDR:PORT\";\n    }\n\n``SERVERADDR`` and ``PORT`` is the hostname/address and port of the\nmachine shrpx is running.  Please note that Chrome requires valid\ncertificate for secure SPDY proxy.\n\nThen run chrome with the following arguments::\n\n    $ google-chrome --proxy-pac-url=file:///path/to/proxy.pac --use-npn\n\n.. note::\n\n   At the time of this writing, Chrome 24 limits the maximum\n   concurrent connections to the proxy to 32. And due to the\n   limitation of socket pool handling in Chrome, it is quickly filled\n   up if SPDY proxy is used and many SPDY sessions are established. If\n   it reaches the limit, the new connections are simply blocked until\n   existing connections are timed out. (See `Chrome Issue 92244\n   <https://code.google.com/p/chromium/issues/detail?id=92244>`_). The\n   workaround is make the number of maximum connections high, say, 99,\n   which is the highest. To do this, you need to change so called\n   Policy setup.  See `Policy Templates\n   <http://dev.chromium.org/administrators/policy-templates>`_ for\n   details how to change Policy setup on the platform you use.  The\n   Policy name we are looking for is `MaxConnectionsPerProxy\n   <http://dev.chromium.org/administrators/policy-list-3#MaxConnectionsPerProxy>`_\n   For example, if you are using Linux, follow the instruction\n   described in `Linux Quick Start\n   <http://dev.chromium.org/administrators/linux-quick-start>`_ and\n   create ``/etc/opt/chrome/policies/managed/test_policy.json`` file\n   with the following content and restart Chrome::\n\n       {\n           \"MaxConnectionsPerProxy\" :99\n       }\n\nWith ``--spdy-bridge``, it accepts SPDY/HTTPS connections and\ncommunicates with backend in SPDY::\n\n    Client <-- (SPDY, HTTPS) --> Shrpx <-- (SPDY) --> Web or SPDY Proxy etc\n                              [SPDY bridge]           (e.g., shrpx -s)\n\nWith ``-p`` option, it works as forward proxy and expects that the\nbackend is secure SPDY proxy::\n\n    Client <-- (HTTP) --> Shrpx <-- (SPDY) --> Secure SPDY Proxy\n                     [forward proxy]         (e.g., shrpx -s or node-spdyproxy)\n\nThe ``Client`` is needs to be configured to use shrpx as forward proxy.\n\nIn this configuration, clients which do not support secure SPDY proxy\ncan use secure SPDY proxy through ``shrpx``. Putting ``shrpx`` in the\nsame box or same network with the clients, this configuration can\nbring the benefits of secure SPDY proxy to those clients. Since the\nmaximum number of connections per server still applies in proxy\nconnection, the performance gain is not obvious. For example, if the\nmaximum number of connections per server is 6, after sending 6\nrequests to the proxy, client blocks further requests, which kills\nperformance which might be gained in SPDY connection.  For clients\nwhich can tweak these values (e.g.,\n``network.http.max-connections-per-server`` in Firefox), increasing\nthem may improve the performance.\n\nWith ``--client`` option, it works as reverse proxy and expects that\nthe backend is SPDY-enabled Web server::\n\n    Client <-- (HTTP) --> Shrpx <-- (SPDY) --> Web Server\n                     [reverse proxy]\n\nFor the operation modes which talk to the backend in SPDY, the backend\nconnections can be tunneled though HTTP proxy. The proxy is specified\nusing ``--backend-http-proxy-uri`` option. The following figure\nillustrates the example of ``--spdy-bridge`` and\n``--backend-http-proxy-uri`` option to talk to the outside SPDY proxy\nthrough HTTP proxy::\n\n    Client <-- (SPDY, HTTPS) --> Shrpx <-- (SPDY) --\n                             [SPDY bridge]\n\n            --===================---> SPDY Proxy\n              (HTTP proxy tunnel)     (e.g., shrpx -s)\n\nExamples\n--------\n\nThe *examples* directory contains a simple SPDY client implementation\nin C.\n\nPython-Spdylay - Python Wrapper\n-------------------------------\n\nThe library comes with Python wrapper ``python-spdylay``. See\n``python`` directory."
}
