{
  "name": "dscanner",
  "full_name": "dscanner",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Analyses e.g. the style and syntax of D code",
  "license": "BSL-1.0",
  "homepage": "https://github.com/dlang-community/D-Scanner",
  "versions": {
    "stable": "0.15.2",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/dlang-community/D-Scanner.git",
      "tag": "v0.15.2",
      "revision": "1201a68f662a300eacae4f908a87d4cd57f2032e",
      "checksum": null
    },
    "head": {
      "url": "https://github.com/dlang-community/D-Scanner.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dscanner/blobs/sha256:135c33db9a535d0c6b1c4ad21899663d2cf20d15279421273d7ba81b548babcb",
          "sha256": "135c33db9a535d0c6b1c4ad21899663d2cf20d15279421273d7ba81b548babcb"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dscanner/blobs/sha256:f7df8505b212231cd76276d1e11b9f9bd9794527cefb81ef077ac4d6e870b504",
          "sha256": "f7df8505b212231cd76276d1e11b9f9bd9794527cefb81ef077ac4d6e870b504"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dscanner/blobs/sha256:11e1b62ebf7c2955101c1d7d0aa933d594709eaada2dc9de080238f617a3cb73",
          "sha256": "11e1b62ebf7c2955101c1d7d0aa933d594709eaada2dc9de080238f617a3cb73"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dscanner/blobs/sha256:5f9e5546dcccee737c540b09ddc4920c59a52f04f99a35d949ed1a42ec9475f0",
          "sha256": "5f9e5546dcccee737c540b09ddc4920c59a52f04f99a35d949ed1a42ec9475f0"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dscanner/blobs/sha256:64a56095f35e980d12527e2b42224755fc15f23f771995c5368db7b0012a694c",
          "sha256": "64a56095f35e980d12527e2b42224755fc15f23f771995c5368db7b0012a694c"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dscanner/blobs/sha256:ee3d570973017105d7f4803bd22677ed0b16f2e512545c13fec63c5f22581639",
          "sha256": "ee3d570973017105d7f4803bd22677ed0b16f2e512545c13fec63c5f22581639"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/dscanner/blobs/sha256:1216ef19a42105de9617742024eca673eb221d711526bf6dd2204537a70afd34",
          "sha256": "1216ef19a42105de9617742024eca673eb221d711526bf6dd2204537a70afd34"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "dmd"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/dscanner.rb",
  "ruby_source_checksum": {
    "sha256": "d12b81cc9067ed544ae1ef26632ec4dc55c3e27b3c801f2ae32fa1f86cac8ff2"
  },
  "date_added": "2016-08-16T12:21:14+01:00",
  "readme": "# D-Scanner\n\n[![CI status](https://github.com/dlang-community/D-Scanner/actions/workflows/default.yml/badge.svg)](https://github.com/dlang-community/D-Scanner/actions?query=workflow%3A%22run+tests%22)\n[![Latest version](https://img.shields.io/dub/v/dscanner.svg)](http://code.dlang.org/packages/dscanner)\n[![License](https://img.shields.io/dub/l/dscanner.svg)](http://code.dlang.org/packages/dscanner)\n\nD-Scanner is a tool for analyzing D source code\n\n### Building and installing\nFirst make sure that you have all the source code. Run ```git submodule update --init --recursive```\nafter cloning the project.\n\nTo build D-Scanner, run ```make``` (or the build.bat file on Windows).\nThe build time can be rather long with the -inline flag on front-end versions\nolder than 2.066, so you may wish to remove it from the build script. The\nmakefile has \"ldc\" and \"gdc\" targets if you'd prefer to compile with one of these\ncompilers instead of DMD. To install, simply place the generated binary (in the\n\"bin\" folder) somewhere on your $PATH.\n\n### Testing\nTesting does not work with DUB.\nUnder linux or OSX run the tests with `make test`.\nUnder Windows run the tests with `build.bat test`.\n\n### Installing with DUB\n\n```sh\n> dub fetch dscanner && dub run dscanner\n```\n\n## Installing with Docker\n\nWith Docker no installation is required:\n\n```sh\ndocker run --rm -v $(pwd):/src dlangcommunity/dscanner\n```\n\n# Usage\nThe following examples assume that we are analyzing a simple file called helloworld.d\n\n```d\nimport std.stdio;\nvoid main(string[] args)\n{\n\twriteln(\"Hello World\");\n}\n```\n\n## Linting\n\nUse\n\n```sh\ndscanner lint source/\n```\n\nto view a human readable list of issues.\n\nDiagnostic types can be enabled/disabled using a configuration file, check out\nthe `--config` argument / `dscanner.ini` file for more info. Tip: some IDEs that\nintegrate D-Scanner may have helpers to configure the diagnostics or help\ngenerate the dscanner.ini file.\n<!--\nIDE list for overview:\ncode-d has an \"insert default dscanner.ini content\" command + proprietary\n\tdisabling per-line (we really need to bring that into standard D-Scanner)\n-->\n\n## Auto-Fixing issues\n\nUse\n\n```sh\ndscanner fix source/\n```\n\nto interactively fix all fixable issues within the source directory. Call with\n`--applySingle` to automatically apply fixes that don't have multiple automatic\nsolutions.\n\n## Tooling integration\n\nMany D editors already ship with D-Scanner.\n\nFor a CLI / tool parsable output use either\n\n```sh\ndscanner -S source/\n# or\ndscanner --report source/\n```\n\nThe `--report` switch includes all information, plus cheap to compute autofixes\nthat are already resolved ahead of time, as well as the names for the autofixes\nthat need to be resolved using the `--resolveMessage` switch like described\nbelow.\n\nYou can also specify custom formats using `-f` / `--errorFormat`, where there\nare also built-in formats for GitHub Actions:\n\n```sh\n# for GitHub actions: (automatically adds annotations to files in PRs)\ndscanner -S -f github source/\n# custom format:\ndscanner -S -f '{filepath}({line}:{column})[{type}]: {message}' source/\n```\n\nTo resolve automatic issue fixes for a given location use\n\n```sh\n# collecting automatic issue fixes\n# --resolveMessage <line>:<column> <filename>\ndscanner --resolveMessage 11:3 file.d\n# --resolveMessage b<byteIndex> <filename>\ndscanner --resolveMessage b512 file.d\n# <filename> may be omitted to read from stdin\n```\n\noutputs JSON:\n\n```json\n// list of available auto-fixes at the given location\n[\n\t{\n\t\t\"name\": \"Make function const\",\n\t\t// byte range `[start, end)` what code to replace\n\t\t// this is sorted by range[0]\n\t\t\"replacements\": [\n\t\t\t// replace: range[0] < range[1], newText != \"\"\n\t\t\t{\"range\": [10, 14], \"newText\": \"const \"},\n\t\t\t// insert: range[0] == range[1], newText != \"\"\n\t\t\t{\"range\": [20, 20], \"newText\": \"auto\"},\n\t\t\t// remove: range[0] < range[1], newText == \"\"\n\t\t\t{\"range\": [30, 40], \"newText\": \"\"},\n\t\t]\n\t}\n]\n```\n\nAlgorithm to apply replacements:\n```d\nforeach_reverse (r; replacements)\n\tcodeBytes = codeBytes[0 .. r.range[0]] ~ r.newText ~ codeBytes[r.range[1] .. $];\n```\n\nReplacements are non-overlapping, sorted by `range[0]` in ascending order. When\ncombining multiple different replacements, you first need to sort them by\n`range[0]` to apply using the algorithm above.\n\n## Other features\n\n### Token Count\nThe \"--tokenCount\" or \"-t\" option prints the number of tokens in the given file\n\n\t$ dscanner --tokenCount helloworld.d\n\t20\n\n### Import Listing\nThe \"--imports\" or \"-i\" option prints a listing of modules imported by the given\nsource file.\n\n\t$ dscanner --imports helloworld.d\n\tstd.stdio\n\nPassing \"-I\" arguments (import locations) will cause D-Scanner to also attempt\nto resolve the locations of the imported modules.\n\n    $ dscanner --imports helloworld.d -I ~/.dvm/compilers/dmd-2.071.1-b2/src/phobos/ -I ~/.dvm/compilers/dmd-2.071.1-b2/src/druntime/src/\n\t/home/brian/.dvm/compilers/dmd-2.071.1-b2/src/phobos/std/stdio.d\n\nRemember to pass map the import locations when you use Docker:\n\n\tdocker run --rm -v $(pwd):/src -v /usr/include/dlang/dmd:/d dlangcommunity/dscanner --imports helloworld.d -I/d\n\t/d/std/stdio.d\n\nThe \"--recursiveImports\" option is similar to \"--imports\", except that it lists\nimports of imports (and so on) recursively. The recursive import option requires\nimport paths to be specified in order to work correctly.\n\nLimitations:\n* The import listing feature DOES NOT IGNORE imports that may be unused to to `version` or `static if`.\n* The import listing DOES NOT INCLUDE imports introduced by mixins.\n\n### Syntax Check\nThe \"--syntaxCheck\" or \"-s\" option prints a listing of any errors or warnings found\nwhile lexing or parsing the given source file. It does not do any semantic\nanalysis and it does not compile the code. The format of the errors or\nwarnings can be configured with the \"--errorFormat\" or \"-f\" option.\n\n### Style Check\nThe \"--styleCheck\" or \"-S\" option runs some basic static analysis checks against\nthe given source files, the sources contained in the given folders, or the sources contained in the current working directory (when nothing is supplied).\nThe format of the errors or warnings can be configured with the \"--errorFormat\" or \"-f\" option.\n\n#### Skip style checks in the tests\nStatic checks in the unit tests can produce irrelevant warnings. For example,\nit's legit to declare a variable that's not used if the goal is to verify that\na templatized function can be instantiated by inference of the type of this variable.\nTo avoid these cases, it's possible to pass the \"--skipTests\" option.\n\n#### Configuration\nBy default all checks are enabled. Individual checks can be enabled or disabled\nby using a configuration file. Such a file can be placed, for example, is the root directory of your project.\nRunning ```dscanner --defaultConfig``` will generate a default configuration file and print the file's location.\nYou can also specify the path to a configuration file by using the \"--config\" option if\nyou want to override the default or the local settings.\n\nFor each check, three values are possible:\n* `\"disabled\"`: the check is not performed.\n* `\"enabled\"`: the check is performed.\n* `\"skip-unittest\"`: the check is performed but not in the unit tests.\n\nAny other value deactivates a check.\n\nNote that the \"--skipTests\" option is the equivalent of changing each\n`\"enabled\"` check by a `\"skip-unittest\"` check.\n\n#### Implemented checks\n* Old alias syntax (i.e \"alias a b;\" should be replaced with \"alias b = a;\").\n* Implicit concatenation of string literals.\n* Complex number literals (e.g. \"1.23i\").\n* Empty declarations (i.e. random \";\" characters).\n* enum array literals in struct/class bodies.\n* Avoid Pokémon exception handling.\n* opCmp or opEquals, or toHash not declared \"const\".\n* Format numbers for readability.\n* *delete* keyword is deprecated.\n* \"fish operators\" (floating point operators) are deprecated.\n* Left side of a *foreach* or *foreach\\_reverse* range expression is larger than the right.\n* Left side of a slice expression is larger than the right.\n* Variable, struct, class, union, module, package, and interface names that do not comply with Phobos style guidelines.\n* Struct constructors that have a single parameter that has a default argument.\n* Assign expressions where the left side of the '=' operator is the same as the right.\n* 'if' statements where the 'else' block is the same as the 'if' block.\n* ||, &&, and == expressions where the left and right sides of the operator are identical.\n* && and || expressions where the order of operations is confusing.\n* Unused variables.\n* Unused parameters (check is skipped if function is marked \"override\").\n* Duplicate attributes.\n* Declaring opEquals without toHash.\n* Undocumented public declarations.\n* Subtraction from .length properties. (These may be unsigned and could lead to integer underflow)\n* Class, struct, and union member variables whose names conflict with built-in type properties.\n* Confusing asm syntax.\n* Placement of const, immutable, or inout before a function return type instead of after the parameters.\n* Functions in interface declarations redundantly marked 'abstract'.\n* Declaring a variable with the same name as a label.\n* Variables that could have been declared const or immutable (experimental)\n* Redundant parenthesis.\n* Unused labels.\n* Lines longer than `max_line_length` characters.\n* Incorrect infinite range definitions.\n* Some assertions that check conditions that will always be true.\n* Auto functions without return statement. The compiler doesn't see an omission and it infers 'void' as return type.\n* `final` attribute is used but in this context it's a noop.\n* Check for properly documented public functions (\"Returns\" and \"Params\" sections). Initially implemented to lint Phobos. By default disabled.\n* Check for explicitly annotated unittests (_@system_ or _@safe_). Initially implemented to lint Phobos. By default disabled.\n* Check for that imports are sorted. Initially implemented to lint Phobos. By default disabled.\n* Virtual calls inside classes constructors.\n* Useless initializers.\n* Allman brace style\n* Redundant visibility attributes\n* Public declarations without a documented unittest. By default disabled.\n* Asserts without an explanatory message. By default disabled.\n* Indentation of if constraints\n* Check that `@trusted` is not applied to a whole scope. Trusting a whole scope can be a problem when new declarations are added and if they are not verified manually to be trustable.\n* Redundant storage class attributes\n* Cyclomatic complexity threshold per function and unittest (starts at 1, increased by 1 at each `if`, switch `case`, loop, `&&`, `||`, `?:`, `throw`, `catch`, `return`, `break`, `continue`, `goto` and function literal)\n\n#### Wishlist\n\n[See this list of open issues](https://github.com/Hackerpilot/Dscanner/issues?q=is%3Aopen+is%3Aissue+label%3Aenhancement) for the wishlist.\n\n### Reports\nThe \"--report\" option writes a JSON report on the static analysis checks\ndocument above to standard output. This file is usually used by the D plugin for\nSonarQube located [here](https://github.com/economicmodeling/sonar-d-plugin).\n\nUsing option \"--reportFormat sonarQubeGenericIssueData\" a report in a sonar-scanner\nsupported [Generic Issue Data format](https://docs.sonarqube.org/latest/analysis/generic-issue/) can be created.\n\n    $ dscanner --reportFormat sonarQubeGenericIssueData . > sonar-generic-issue-data.json\n\nReference the report filename in sonar-project.properties using key \"sonar.externalIssuesReportPaths\"\n\n    sonar.externalIssuesReportPaths=sonar-generic-issue-data.json\n\n### Find Declaration\nAck, grep, and The Silver Searcher are useful for finding usages of symbols, but\ntheir signal to noise ratio is not very good when searching for a symbol's\ndeclaration. The \"--declaration\" or \"-d\" options allow you to search for a\nsymbols declaration. For example:\n\n\t$ dscanner -d TokenStructure\n\t./libdparse/src/std/lexer.d(248:8)\n\n### Line of Code Count\nThe \"--sloc\" or \"-l\" option prints the number of lines of code in the file.\nInstead of simply printing the number of line breaks, this counts the number of\nsemicolon, while, if, do, else, switch, for, foreach, foreach\\_reverse, default,\nand case tokens in the file.\n\n\t$ ./dscanner --sloc helloworld.d\n\t2\n\n### Syntax Highlighting\nThe \"--highlight\" option prints the given source file as syntax-highlighted HTML\nto the standard output. The CSS styling is currently hard-coded to use the\n[Solarized](http://ethanschoonover.com/solarized) color scheme.\n\n\tNo example. It would take up too much space\n\n### CTAGS Output\nThe \"--ctags\" or \"-c\" option generates CTAGS information and writes it to the\nstandard output. Directory arguments are scanned recursively for `.d` and `.di`\nfiles.\n\n\t$ dscanner --ctags helloworld.d\n\t!_TAG_FILE_FORMAT\t2\n\t!_TAG_FILE_SORTED\t1\n\t!_TAG_FILE_AUTHOR\tBrian Schott\n\t!_TAG_PROGRAM_URL\thttps://github.com/Hackerpilot/Dscanner/\n\tmain\thelloworld.d\t3;\"\tf\tarity:1\n\nCTAGS output uses the following tag kinds:\n\n* g -- enum declarataion\n* e -- enum member\n* v -- variable declaration\n* i -- interface declaration\n* c -- class declaration\n* s -- struct declaration\n* f -- function declaration\n* u -- union declaration\n* T -- template declaration\n* a -- alias declarataion\n\nMore information on the CTAGS format can be found [here](http://ctags.sourceforge.net/FORMAT).\n\n### Etags Output\nThe `--etags`, `-e`, and `--etagsAll` options are similar to `--ctags` except\nthat an Emacs-compatible tags file is generated. The `--etagsAll` option\ngenerates tags for private and package declarations in addition to what\n`--etags` and `-e` generate.\n\n### Outline\nThe \"--outline\" option parses the given D source file and writes an simple\noutline of the file's declarations to stdout.\n\n### Configuration\n\nIf a `dscanner.ini` file is locate in the working directory or any of it's\nparents, it overrides any other configuration files.\n\nAs final location, D-Scanner uses the configuration file given in\n`$HOME/.config/dscanner/dscanner.ini`. Run `--defaultConfig` to regenerate it.\n\nThe `--config` option allows one to use a custom configuration file path.\n\n### AST Dump\nThe \"--ast\" or \"--xml\" options will dump the complete abstract syntax tree of\nthe given source file to standard output in XML format.\n\n```sh\n$ dscanner --ast helloworld.d\n```\n\n```xml\n<module>\n<declaration>\n<importDeclaration>\n<singleImport>\n<identifierChain>\n<identifier>std</identifier>\n<identifier>stdio</identifier>\n</identifierChain>\n</singleImport>\n</importDeclaration>\n</declaration>\n<declaration>\n<functionDeclaration line=\"3\">\n<name>main</name>\n<type pretty=\"void\">\n<type2>\nvoid\n</type2>\n</type>\n<parameters>\n<parameter>\n<name>args</name>\n<type pretty=\"string[]\">\n<type2>\n<symbol>\n<identifierOrTemplateChain>\n<identifierOrTemplateInstance>\n<identifier>string</identifier>\n</identifierOrTemplateInstance>\n</identifierOrTemplateChain>\n</symbol>\n</type2>\n<typeSuffix type=\"[]\"/>\n</type>\n<identifier>args</identifier>\n</parameter>\n</parameters>\n<functionBody>\n<blockStatement>\n<declarationsAndStatements>\n<declarationOrStatement>\n<statement>\n<statementNoCaseNoDefault>\n<expressionStatement>\n<expression>\n<assignExpression>\n<functionCallExpression>\n<unaryExpression>\n<primaryExpression>\n<identifierOrTemplateInstance>\n<identifier>writeln</identifier>\n</identifierOrTemplateInstance>\n</primaryExpression>\n</unaryExpression>\n<arguments>\n<argumentList>\n<assignExpression>\n<primaryExpression>\n<stringLiteral>Hello World</stringLiteral>\n</primaryExpression>\n</assignExpression>\n</argumentList>\n</arguments>\n</functionCallExpression>\n</assignExpression>\n</expression>\n</expressionStatement>\n</statementNoCaseNoDefault>\n</statement>\n</declarationOrStatement>\n</declarationsAndStatements>\n</blockStatement>\n</functionBody>\n</functionDeclaration>\n</declaration>\n</module>\n```\n\nFor more readable output, pipe the command through [xmllint](http://xmlsoft.org/xmllint.html)\nusing its formatting switch.\n\n\t$ dscanner --ast helloworld.d | xmllint --format -\n\nSelecting modules for a specific check\n--------------------------------------\n\nIt is possible to create a new section `analysis.config.ModuleFilters` in the `dscanner.ini`.\nIn this optional section a comma-separated list of inclusion and exclusion selectors can\nbe specified for every check on which selective filtering should be applied.\nThese given selectors match on the module name and partial matches (`std.` or `.foo.`) are possible.\nMoreover, every selectors must begin with either `+` (inclusion) or `-` (exclusion).\nExclusion selectors take precedence over all inclusion operators.\nOf course, for every check a different selector set can given:\n\n```ini\n[analysis.config.ModuleFilters]\nfinal_attribute_check = \"+std.foo,+std.bar\"\nuseless_initializer = \"-std.\"\n```\n\nA few examples:\n\n- `+std.`: Includes all modules matching `std.`\n- `+std.bitmanip,+std.json`: Applies the check only for these two modules\n- `-std.bitmanip,-std.json`: Applies the check for all modules, but these two\n- `+.bar`: Includes all modules matching `.bar` (e.g. `foo.bar`, `a.b.c.barros`)\n- `-etc.`: Excludes all modules from `.etc`\n- `+std,-std.internal`: Includes entire `std`, except for the internal modules"
}
