{
  "name": "rtl_433",
  "full_name": "rtl_433",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Program to decode radio transmissions from devices",
  "license": "GPL-2.0-or-later",
  "homepage": "https://github.com/merbanan/rtl_433",
  "versions": {
    "stable": "22.11",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/merbanan/rtl_433.git",
      "tag": "22.11",
      "revision": "c3c58d81e72ec3d80af480a7c2ef7995ef66147f",
      "checksum": null
    },
    "head": {
      "url": "https://github.com/merbanan/rtl_433.git",
      "branch": "master"
    }
  },
  "revision": 1,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/rtl_433/blobs/sha256:a2567ae5b1e95bbe323493563c57f9214c01d2ed23aa3fddca341386bdb22869",
          "sha256": "a2567ae5b1e95bbe323493563c57f9214c01d2ed23aa3fddca341386bdb22869"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/rtl_433/blobs/sha256:29bf211dc690fec048e76155bb10a518e7319d4dc1ebbbd191a915f07fdbf943",
          "sha256": "29bf211dc690fec048e76155bb10a518e7319d4dc1ebbbd191a915f07fdbf943"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/rtl_433/blobs/sha256:e89d9e40b7b637abe061f1d302105efc08e403fb5d24b682660fde4d1890bd18",
          "sha256": "e89d9e40b7b637abe061f1d302105efc08e403fb5d24b682660fde4d1890bd18"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/rtl_433/blobs/sha256:bae66790200f8ba134f7f80984f5a6a4b0c5e8677db0dfe903854cfe3cc25e63",
          "sha256": "bae66790200f8ba134f7f80984f5a6a4b0c5e8677db0dfe903854cfe3cc25e63"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/rtl_433/blobs/sha256:21302023e56d72a5ab3c85cad90d17d6d9cf5827a2afdbb69991b37c778d7d38",
          "sha256": "21302023e56d72a5ab3c85cad90d17d6d9cf5827a2afdbb69991b37c778d7d38"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/rtl_433/blobs/sha256:ac70a060db70e27692b7e480d1dab3e8f5f52dbde2d681f7c49c7211c81bed9f",
          "sha256": "ac70a060db70e27692b7e480d1dab3e8f5f52dbde2d681f7c49c7211c81bed9f"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rtl_433/blobs/sha256:692e370f6028edeb4ad904df1404e28e33d450925a8510a35f7b2f71501472f0",
          "sha256": "692e370f6028edeb4ad904df1404e28e33d450925a8510a35f7b2f71501472f0"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake",
    "pkg-config"
  ],
  "dependencies": [
    "librtlsdr",
    "libusb",
    "openssl@3"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/rtl_433.rb",
  "ruby_source_checksum": {
    "sha256": "09f6d2da63b61093b3ff92b78b874b2a6d704d592c6d74f4ae76e5377e916bac"
  },
  "date_added": "2021-02-11T12:43:47+00:00",
  "readme": "# rtl_433\n\nrtl_433 (despite the name) is a generic data receiver, mainly for the 433.92 MHz, 868 MHz (SRD), 315 MHz, 345 MHz, and 915 MHz ISM bands.\n\nThe official source code is in the https://github.com/merbanan/rtl_433/ repository.\nFor more documentation and related projects see the https://triq.org/ site.\n\nIt works with [RTL-SDR](https://github.com/osmocom/rtl-sdr/) and/or [SoapySDR](https://github.com/pothosware/SoapySDR/).\nActively tested and supported are Realtek RTL2832 based DVB dongles (using RTL-SDR) and LimeSDR ([LimeSDR USB](https://www.crowdsupply.com/lime-micro/limesdr) and [LimeSDR mini](https://www.crowdsupply.com/lime-micro/limesdr-mini) engineering samples kindly provided by [MyriadRf](https://myriadrf.org/)), PlutoSDR, HackRF One (using SoapySDR drivers), as well as SoapyRemote.\n\n![rtl_433 screenshot](./docs/screenshot.png)\n\n## Building / Installation\n\nrtl_433 is written in portable C (C99 standard) and known to compile on Linux (also embedded), MacOS, and Windows systems.\nOlder compilers and toolchains are supported as a key-goal.\nLow resource consumption and very few dependencies allow rtl_433 to run on embedded hardware like (repurposed) routers.\nSystems with 32-bit i686 and 64-bit x86-64 as well as (embedded) ARM, like the Raspberry Pi and PlutoSDR are well supported.\n\nSee [BUILDING.md](docs/BUILDING.md)\n\nOn Debian (sid) or Ubuntu (19.10+), `apt-get install rtl-433` for other distros check https://repology.org/project/rtl-433/versions\n\nOn FreeBSD, `pkg install rtl-433`.\n\nOn MacOS, `brew install rtl_433`.\n\nDocker images with rtl_433 are available [on the github page of hertzg](https://github.com/hertzg/rtl_433_docker).\n\n## How to add support for unsupported sensors\n\nSee [CONTRIBUTING.md](./docs/CONTRIBUTING.md).\n\n## Running\n\n    rtl_433 -h\n\n```\n\n\t\t= General options =\n  [-V] Output the version string and exit\n  [-v] Increase verbosity (can be used multiple times).\n       -v : verbose notice, -vv : verbose info, -vvv : debug, -vvvv : trace.\n  [-c <path>] Read config options from a file\n\t\t= Tuner options =\n  [-d <RTL-SDR USB device index> | :<RTL-SDR USB device serial> | <SoapySDR device query> | rtl_tcp | help]\n  [-g <gain> | help] (default: auto)\n  [-t <settings>] apply a list of keyword=value settings to the SDR device\n       e.g. for SoapySDR -t \"antenna=A,bandwidth=4.5M,rfnotch_ctrl=false\"\n       for RTL-SDR use \"direct_samp[=1]\", \"offset_tune[=1]\", \"digital_agc[=1]\", \"biastee[=1]\"\n  [-f <frequency>] Receive frequency(s) (default: 433920000 Hz)\n  [-H <seconds>] Hop interval for polling of multiple frequencies (default: 600 seconds)\n  [-p <ppm_error>] Correct rtl-sdr tuner frequency offset error (default: 0)\n  [-s <sample rate>] Set sample rate (default: 250000 Hz)\n  [-D restart | pause | quit | manual] Input device run mode options.\n\t\t= Demodulator options =\n  [-R <device> | help] Enable only the specified device decoding protocol (can be used multiple times)\n       Specify a negative number to disable a device decoding protocol (can be used multiple times)\n  [-X <spec> | help] Add a general purpose decoder (prepend -R 0 to disable all decoders)\n  [-Y auto | classic | minmax] FSK pulse detector mode.\n  [-Y level=<dB level>] Manual detection level used to determine pulses (-1.0 to -30.0) (0=auto).\n  [-Y minlevel=<dB level>] Manual minimum detection level used to determine pulses (-1.0 to -99.0).\n  [-Y minsnr=<dB level>] Minimum SNR to determine pulses (1.0 to 99.0).\n  [-Y autolevel] Set minlevel automatically based on average estimated noise.\n  [-Y squelch] Skip frames below estimated noise level to reduce cpu load.\n  [-Y ampest | magest] Choose amplitude or magnitude level estimator.\n\t\t= Analyze/Debug options =\n  [-A] Pulse Analyzer. Enable pulse analysis and decode attempt.\n       Disable all decoders with -R 0 if you want analyzer output only.\n  [-y <code>] Verify decoding of demodulated test data (e.g. \"{25}fb2dd58\") with enabled devices\n\t\t= File I/O options =\n  [-S none | all | unknown | known] Signal auto save. Creates one file per signal.\n       Note: Saves raw I/Q samples (uint8 pcm, 2 channel). Preferred mode for generating test files.\n  [-r <filename> | help] Read data from input file instead of a receiver\n  [-w <filename> | help] Save data stream to output file (a '-' dumps samples to stdout)\n  [-W <filename> | help] Save data stream to output file, overwrite existing file\n\t\t= Data output options =\n  [-F log | kv | json | csv | mqtt | influx | syslog | trigger | null | help] Produce decoded output in given format.\n       Append output to file with :<filename> (e.g. -F csv:log.csv), defaults to stdout.\n       Specify host/port for syslog with e.g. -F syslog:127.0.0.1:1514\n  [-M time[:<options>] | protocol | level | noise[:<secs>] | stats | bits | help] Add various meta data to each output.\n  [-K FILE | PATH | <tag> | <key>=<tag>] Add an expanded token or fixed tag to every output line.\n  [-C native | si | customary] Convert units in decoded output.\n  [-n <value>] Specify number of samples to take (each sample is an I/Q pair)\n  [-T <seconds>] Specify number of seconds to run, also 12:34 or 1h23m45s\n  [-E hop | quit] Hop/Quit after outputting successful event(s)\n  [-h] Output this usage help and exit\n       Use -d, -g, -R, -X, -F, -M, -r, -w, or -W without argument for more help\n\n\n\n\t\t= Supported device protocols =\n    [01]  Silvercrest Remote Control\n    [02]  Rubicson, TFA 30.3197 or InFactory PT-310 Temperature Sensor\n    [03]  Prologue, FreeTec NC-7104, NC-7159-675 temperature sensor\n    [04]  Waveman Switch Transmitter\n    [06]* ELV EM 1000\n    [07]* ELV WS 2000\n    [08]  LaCrosse TX Temperature / Humidity Sensor\n    [10]  Acurite 896 Rain Gauge\n    [11]  Acurite 609TXC Temperature and Humidity Sensor\n    [12]  Oregon Scientific Weather Sensor\n    [13]* Mebus 433\n    [14]* Intertechno 433\n    [15]  KlikAanKlikUit Wireless Switch\n    [16]  AlectoV1 Weather Sensor (Alecto WS3500 WS4500 Ventus W155/W044 Oregon)\n    [17]  Cardin S466-TX2\n    [18]  Fine Offset Electronics, WH2, WH5, Telldus Temperature/Humidity/Rain Sensor\n    [19]  Nexus, FreeTec NC-7345, NX-3980, Solight TE82S, TFA 30.3209 temperature/humidity sensor\n    [20]  Ambient Weather F007TH, TFA 30.3208.02, SwitchDocLabs F016TH temperature sensor\n    [21]  Calibeur RF-104 Sensor\n    [22]  X10 RF\n    [23]  DSC Security Contact\n    [24]* Brennenstuhl RCS 2044\n    [25]  Globaltronics GT-WT-02 Sensor\n    [26]  Danfoss CFR Thermostat\n    [29]  Chuango Security Technology\n    [30]  Generic Remote SC226x EV1527\n    [31]  TFA-Twin-Plus-30.3049, Conrad KW9010, Ea2 BL999\n    [32]  Fine Offset Electronics WH1080/WH3080 Weather Station\n    [33]  WT450, WT260H, WT405H\n    [34]  LaCrosse WS-2310 / WS-3600 Weather Station\n    [35]  Esperanza EWS\n    [36]  Efergy e2 classic\n    [37]* Inovalley kw9015b, TFA Dostmann 30.3161 (Rain and temperature sensor)\n    [38]  Generic temperature sensor 1\n    [39]  WG-PB12V1 Temperature Sensor\n    [40]  Acurite 592TXR Temp/Humidity, 592TX Temp, 5n1 Weather Station, 6045 Lightning, 899 Rain, 3N1, Atlas\n    [41]  Acurite 986 Refrigerator / Freezer Thermometer\n    [42]  HIDEKI TS04 Temperature, Humidity, Wind and Rain Sensor\n    [43]  Watchman Sonic / Apollo Ultrasonic / Beckett Rocket oil tank monitor\n    [44]  CurrentCost Current Sensor\n    [45]  emonTx OpenEnergyMonitor\n    [46]  HT680 Remote control\n    [47]  Conrad S3318P, FreeTec NC-5849-913 temperature humidity sensor\n    [48]  Akhan 100F14 remote keyless entry\n    [49]  Quhwa\n    [50]  OSv1 Temperature Sensor\n    [51]  Proove / Nexa / KlikAanKlikUit Wireless Switch\n    [52]  Bresser Thermo-/Hygro-Sensor 3CH\n    [53]  Springfield Temperature and Soil Moisture\n    [54]  Oregon Scientific SL109H Remote Thermal Hygro Sensor\n    [55]  Acurite 606TX Temperature Sensor\n    [56]  TFA pool temperature sensor\n    [57]  Kedsum Temperature & Humidity Sensor, Pearl NC-7415\n    [58]  Blyss DC5-UK-WH\n    [59]  Steelmate TPMS\n    [60]  Schrader TPMS\n    [61]* LightwaveRF\n    [62]* Elro DB286A Doorbell\n    [63]  Efergy Optical\n    [64]* Honda Car Key\n    [67]  Radiohead ASK\n    [68]  Kerui PIR / Contact Sensor\n    [69]  Fine Offset WH1050 Weather Station\n    [70]  Honeywell Door/Window Sensor, 2Gig DW10/DW11, RE208 repeater\n    [71]  Maverick ET-732/733 BBQ Sensor\n    [72]* RF-tech\n    [73]  LaCrosse TX141-Bv2, TX141TH-Bv2, TX141-Bv3, TX141W, TX145wsdth, (TFA, ORIA) sensor\n    [74]  Acurite 00275rm,00276rm Temp/Humidity with optional probe\n    [75]  LaCrosse TX35DTH-IT, TFA Dostmann 30.3155 Temperature/Humidity sensor\n    [76]  LaCrosse TX29IT, TFA Dostmann 30.3159.IT Temperature sensor\n    [77]  Vaillant calorMatic VRT340f Central Heating Control\n    [78]  Fine Offset Electronics, WH25, WH32B, WH24, WH65B, HP1000, Misol WS2320 Temperature/Humidity/Pressure Sensor\n    [79]  Fine Offset Electronics, WH0530 Temperature/Rain Sensor\n    [80]  IBIS beacon\n    [81]  Oil Ultrasonic STANDARD FSK\n    [82]  Citroen TPMS\n    [83]  Oil Ultrasonic STANDARD ASK\n    [84]  Thermopro TP11 Thermometer\n    [85]  Solight TE44/TE66, EMOS E0107T, NX-6876-917\n    [86]  Wireless Smoke and Heat Detector GS 558\n    [87]  Generic wireless motion sensor\n    [88]  Toyota TPMS\n    [89]  Ford TPMS\n    [90]  Renault TPMS\n    [91]  inFactory, nor-tec, FreeTec NC-3982-913 temperature humidity sensor\n    [92]  FT-004-B Temperature Sensor\n    [93]  Ford Car Key\n    [94]  Philips outdoor temperature sensor (type AJ3650)\n    [95]  Schrader TPMS EG53MA4, PA66GF35\n    [96]  Nexa\n    [97]  ThermoPro TP08/TP12/TP20 thermometer\n    [98]  GE Color Effects\n    [99]  X10 Security\n    [100]  Interlogix GE UTC Security Devices\n    [101]* Dish remote 6.3\n    [102]  SimpliSafe Home Security System (May require disabling automatic gain for KeyPad decodes)\n    [103]  Sensible Living Mini-Plant Moisture Sensor\n    [104]  Wireless M-Bus, Mode C&T, 100kbps (-f 868.95M -s 1200k)\n    [105]  Wireless M-Bus, Mode S, 32.768kbps (-f 868.3M -s 1000k)\n    [106]* Wireless M-Bus, Mode R, 4.8kbps (-f 868.33M)\n    [107]* Wireless M-Bus, Mode F, 2.4kbps\n    [108]  Hyundai WS SENZOR Remote Temperature Sensor\n    [109]  WT0124 Pool Thermometer\n    [110]  PMV-107J (Toyota) TPMS\n    [111]  Emos TTX201 Temperature Sensor\n    [112]  Ambient Weather TX-8300 Temperature/Humidity Sensor\n    [113]  Ambient Weather WH31E Thermo-Hygrometer Sensor, EcoWitt WH40 rain gauge\n    [114]  Maverick et73\n    [115]  Honeywell ActivLink, Wireless Doorbell\n    [116]  Honeywell ActivLink, Wireless Doorbell (FSK)\n    [117]* ESA1000 / ESA2000 Energy Monitor\n    [118]* Biltema rain gauge\n    [119]  Bresser Weather Center 5-in-1\n    [120]  Digitech XC-0324 / AmbientWeather FT005TH temp/hum sensor\n    [121]  Opus/Imagintronix XT300 Soil Moisture\n    [122]* FS20\n    [123]* Jansite TPMS Model TY02S\n    [124]  LaCrosse/ELV/Conrad WS7000/WS2500 weather sensors\n    [125]  TS-FT002 Wireless Ultrasonic Tank Liquid Level Meter With Temperature Sensor\n    [126]  Companion WTR001 Temperature Sensor\n    [127]  Ecowitt Wireless Outdoor Thermometer WH53/WH0280/WH0281A\n    [128]  DirecTV RC66RX Remote Control\n    [129]* Eurochron temperature and humidity sensor\n    [130]  IKEA Sparsnas Energy Meter Monitor\n    [131]  Microchip HCS200/HCS300 KeeLoq Hopping Encoder based remotes\n    [132]  TFA Dostmann 30.3196 T/H outdoor sensor\n    [133]  Rubicson 48659 Thermometer\n    [134]  AOK Weather Station rebrand Holman Industries iWeather WS5029, Conrad AOK-5056, Optex 990018\n    [135]  Philips outdoor temperature sensor (type AJ7010)\n    [136]  ESIC EMT7110 power meter\n    [137]  Globaltronics QUIGG GT-TMBBQ-05\n    [138]  Globaltronics GT-WT-03 Sensor\n    [139]  Norgo NGE101\n    [140]  Elantra2012 TPMS\n    [141]  Auriol HG02832, HG05124A-DCF, Rubicson 48957 temperature/humidity sensor\n    [142]  Fine Offset Electronics/ECOWITT WH51, SwitchDoc Labs SM23 Soil Moisture Sensor\n    [143]  Holman Industries iWeather WS5029 weather station (older PWM)\n    [144]  TBH weather sensor\n    [145]  WS2032 weather station\n    [146]  Auriol AFW2A1 temperature/humidity sensor\n    [147]  TFA Drop Rain Gauge 30.3233.01\n    [148]  DSC Security Contact (WS4945)\n    [149]  ERT Standard Consumption Message (SCM)\n    [150]* Klimalogg\n    [151]  Visonic powercode\n    [152]  Eurochron EFTH-800 temperature and humidity sensor\n    [153]  Cotech 36-7959, SwitchDocLabs FT020T wireless weather station with USB\n    [154]  Standard Consumption Message Plus (SCMplus)\n    [155]  Fine Offset Electronics WH1080/WH3080 Weather Station (FSK)\n    [156]  Abarth 124 Spider TPMS\n    [157]  Missil ML0757 weather station\n    [158]  Sharp SPC775 weather station\n    [159]  Insteon\n    [160]  ERT Interval Data Message (IDM)\n    [161]  ERT Interval Data Message (IDM) for Net Meters\n    [162]* ThermoPro-TX2 temperature sensor\n    [163]  Acurite 590TX Temperature with optional Humidity\n    [164]  Security+ 2.0 (Keyfob)\n    [165]  TFA Dostmann 30.3221.02 T/H Outdoor Sensor\n    [166]  LaCrosse Technology View LTV-WSDTH01 Breeze Pro Wind Sensor\n    [167]  Somfy RTS\n    [168]  Schrader TPMS SMD3MA4 (Subaru) 3039 (Infiniti, Nissan, Renault)\n    [169]* Nice Flor-s remote control for gates\n    [170]  LaCrosse Technology View LTV-WR1 Multi Sensor\n    [171]  LaCrosse Technology View LTV-TH Thermo/Hygro Sensor\n    [172]  Bresser Weather Center 6-in-1, 7-in-1 indoor, soil, new 5-in-1, 3-in-1 wind gauge, Froggit WH6000, Ventus C8488A\n    [173]  Bresser Weather Center 7-in-1\n    [174]  EcoDHOME Smart Socket and MCEE Solar monitor\n    [175]  LaCrosse Technology View LTV-R1, LTV-R3 Rainfall Gauge, LTV-W1/W2 Wind Sensor\n    [176]  BlueLine Innovations Power Cost Monitor\n    [177]  Burnhard BBQ thermometer\n    [178]  Security+ (Keyfob)\n    [179]  Cavius smoke, heat and water detector\n    [180]  Jansite TPMS Model Solar\n    [181]  Amazon Basics Meat Thermometer\n    [182]  TFA Marbella Pool Thermometer\n    [183]  Auriol AHFL temperature/humidity sensor\n    [184]  Auriol AFT 77 B2 temperature sensor\n    [185]  Honeywell CM921 Wireless Programmable Room Thermostat\n    [186]  Hyundai TPMS (VDO)\n    [187]  RojaFlex shutter and remote devices\n    [188]  Marlec Solar iBoost+ sensors\n    [189]  Somfy io-homecontrol\n    [190]  Ambient Weather WH31L (FineOffset WH57) Lightning-Strike sensor\n    [191]  Markisol, E-Motion, BOFU, Rollerhouse, BF-30x, BF-415 curtain remote\n    [192]  Govee Water Leak Detector H5054, Door Contact Sensor B5023\n    [193]  Clipsal CMR113 Cent-a-meter power meter\n    [194]  Inkbird ITH-20R temperature humidity sensor\n    [195]  RainPoint soil temperature and moisture sensor\n    [196]  Atech-WS308 temperature sensor\n    [197]  Acurite Grill/Meat Thermometer 01185M\n    [198]* EnOcean ERP1\n    [199]  Linear Megacode Garage/Gate Remotes\n    [200]* Auriol 4-LD5661 temperature/rain sensor\n    [201]  Unbranded SolarTPMS for trucks\n    [202]  Funkbus / Instafunk (Berker, Gira, Jung)\n    [203]  Porsche Boxster/Cayman TPMS\n    [204]  Jasco/GE Choice Alert Security Devices\n    [205]  Telldus weather station FT0385R sensors\n    [206]  LaCrosse TX34-IT rain gauge\n    [207]  SmartFire Proflame 2 remote control\n    [208]  AVE TPMS\n    [209]  SimpliSafe Gen 3 Home Security System\n    [210]  Yale HSA (Home Security Alarm), YES-Alarmkit\n    [211]  Regency Ceiling Fan Remote (-f 303.75M to 303.96M)\n    [212]  Renault 0435R TPMS\n    [213]  Fine Offset Electronics WS80 weather station\n    [214]  EMOS E6016 weatherstation with DCF77\n    [215]  Emax W6, rebrand Altronics x7063/4, Optex 990040/50/51, Orium 13093/13123, Infactory FWS-1200, Newentor Q9, Otio 810025, Protmex PT3390A, Jula Marquant 014331/32, Weather Station or temperature/humidity sensor\n    [216]* ANT and ANT+ devices\n    [217]  EMOS E6016 rain gauge\n    [218]  Microchip HCS200/HCS300 KeeLoq Hopping Encoder based remotes (FSK)\n    [219]  Fine Offset Electronics WH45 air quality sensor\n    [220]  Maverick XR-30 BBQ Sensor\n    [221]  Fine Offset Electronics WN34 temperature sensor\n    [222]  Rubicson Pool Thermometer 48942\n    [223]  Badger ORION water meter, 100kbps (-f 916.45M -s 1200k)\n    [224]  GEO minim+ energy monitor\n    [225]  TyreGuard 400 TPMS\n    [226]  Kia TPMS (-s 1000k)\n    [227]  SRSmith Pool Light Remote Control SRS-2C-TX (-f 915M)\n    [228]  Neptune R900 flow meters\n    [229]* WEC-2103 temperature/humidity sensor\n    [230]  Vauno EN8822C\n    [231]  Govee Water Leak Detector H5054\n    [232]  TFA Dostmann 14.1504.V2 Radio-controlled grill and meat thermometer\n    [233]* CED7000 Shot Timer\n    [234]  Watchman Sonic Advanced / Plus\n    [235]  Oil Ultrasonic SMART FSK\n    [236]  Gasmate BA1008 meat thermometer\n    [237]  Flowis flow meters\n    [238]  Wireless M-Bus, Mode T, 32.768kbps (-f 868.3M -s 1000k)\n    [239]  Revolt NC-5642 Energy Meter\n    [240]  LaCrosse TX31U-IT, The Weather Channel WS-1910TWC-IT\n    [241]  EezTire E618 (TPMS10ATC)\n    [242]* Baldr / RainPoint rain gauge.\n    [243]  Celsia CZC1 Thermostat\n    [244]  Fine Offset Electronics WS90 weather station\n    [245]* ThermoPro TX-2C Thermometer\n    [246]  TFA 30.3151 Weather Station\n\n* Disabled by default, use -R n or a conf file to enable\n\n\n\t\t= Input device selection =\n\tRTL-SDR device driver is available.\n  [-d <RTL-SDR USB device index>] (default: 0)\n  [-d :<RTL-SDR USB device serial (can be set with rtl_eeprom -s)>]\n\tTo set gain for RTL-SDR use -g <gain> to set an overall gain in dB.\n\tSoapySDR device driver is available.\n  [-d \"\"] Open default SoapySDR device\n  [-d driver=rtlsdr] Open e.g. specific SoapySDR device\n\tTo set gain for SoapySDR use -g ELEM=val,ELEM=val,... e.g. -g LNA=20,TIA=8,PGA=2 (for LimeSDR).\n  [-d rtl_tcp[:[//]host[:port]] (default: localhost:1234)\n\tSpecify host/port to connect to with e.g. -d rtl_tcp:127.0.0.1:1234\n\n\n\t\t= Gain option =\n  [-g <gain>] (default: auto)\n\tFor RTL-SDR: gain in dB (\"0\" is auto).\n\tFor SoapySDR: gain in dB for automatic distribution (\"\" is auto), or string of gain elements.\n\tE.g. \"LNA=20,TIA=8,PGA=2\" for LimeSDR.\n\n\n\t\t= Flex decoder spec =\nUse -X <spec> to add a flexible general purpose decoder.\n\n<spec> is \"key=value[,key=value...]\"\nCommon keys are:\n\tname=<name> (or: n=<name>)\n\tmodulation=<modulation> (or: m=<modulation>)\n\tshort=<short> (or: s=<short>)\n\tlong=<long> (or: l=<long>)\n\tsync=<sync> (or: y=<sync>)\n\treset=<reset> (or: r=<reset>)\n\tgap=<gap> (or: g=<gap>)\n\ttolerance=<tolerance> (or: t=<tolerance>)\n\tpriority=<n> : run decoder only as fallback\nwhere:\n<name> can be any descriptive name tag you need in the output\n<modulation> is one of:\n\tOOK_MC_ZEROBIT :  Manchester Code with fixed leading zero bit\n\tOOK_PCM :         Non Return to Zero coding (Pulse Code)\n\tOOK_RZ :          Return to Zero coding (Pulse Code)\n\tOOK_PPM :         Pulse Position Modulation\n\tOOK_PWM :         Pulse Width Modulation\n\tOOK_DMC :         Differential Manchester Code\n\tOOK_PIWM_RAW :    Raw Pulse Interval and Width Modulation\n\tOOK_PIWM_DC :     Differential Pulse Interval and Width Modulation\n\tOOK_MC_OSV1 :     Manchester Code for OSv1 devices\n\tFSK_PCM :         FSK Pulse Code Modulation\n\tFSK_PWM :         FSK Pulse Width Modulation\n\tFSK_MC_ZEROBIT :  Manchester Code with fixed leading zero bit\n<short>, <long>, <sync> are nominal modulation timings in us,\n<reset>, <gap>, <tolerance> are maximum modulation timings in us:\nPCM/RZ  short: Nominal width of pulse [us]\n         long: Nominal width of bit period [us]\nPPM     short: Nominal width of '0' gap [us]\n         long: Nominal width of '1' gap [us]\nPWM     short: Nominal width of '1' pulse [us]\n         long: Nominal width of '0' pulse [us]\n         sync: Nominal width of sync pulse [us] (optional)\ncommon    gap: Maximum gap size before new row of bits [us]\n        reset: Maximum gap size before End Of Message [us]\n    tolerance: Maximum pulse deviation [us] (optional).\nAvailable options are:\n\tbits=<n> : only match if at least one row has <n> bits\n\trows=<n> : only match if there are <n> rows\n\trepeats=<n> : only match if some row is repeated <n> times\n\t\tuse opt>=n to match at least <n> and opt<=n to match at most <n>\n\tinvert : invert all bits\n\treflect : reflect each byte (MSB first to MSB last)\n\tdecode_uart : UART 8n1 (10-to-8) decode\n\tdecode_dm : Differential Manchester decode\n\tmatch=<bits> : only match if the <bits> are found\n\tpreamble=<bits> : match and align at the <bits> preamble\n\t\t<bits> is a row spec of {<bit count>}<bits as hex number>\n\tunique : suppress duplicate row output\n\n\tcountonly : suppress detailed row output\n\nE.g. -X \"n=doorbell,m=OOK_PWM,s=400,l=800,r=7000,g=1000,match={24}0xa9878c,repeats>=3\"\n\n\n\n\t\t= Output format option =\n  [-F log|kv|json|csv|mqtt|influx|syslog|trigger|null] Produce decoded output in given format.\n\tWithout this option the default is LOG and KV output. Use \"-F null\" to remove the default.\n\tAppend output to file with :<filename> (e.g. -F csv:log.csv), defaults to stdout.\n\tSpecify MQTT server with e.g. -F mqtt://localhost:1883\n\tAdd MQTT options with e.g. -F \"mqtt://host:1883,opt=arg\"\n\tMQTT options are: user=foo, pass=bar, retain[=0|1], <format>[=topic]\n\tSupported MQTT formats: (default is all)\n\t  events: posts JSON event data\n\t  states: posts JSON state data\n\t  devices: posts device and sensor info in nested topics\n\tThe topic string will expand keys like [/model]\n\tE.g. -F \"mqtt://localhost:1883,user=USERNAME,pass=PASSWORD,retain=0,devices=rtl_433[/id]\"\n\tWith MQTT each rtl_433 instance needs a distinct driver selection. The MQTT Client-ID is computed from the driver string.\n\tIf you use multiple RTL-SDR, perhaps set a serial and select by that (helps not to get the wrong antenna).\n\tSpecify InfluxDB 2.0 server with e.g. -F \"influx://localhost:9999/api/v2/write?org=<org>&bucket=<bucket>,token=<authtoken>\"\n\tSpecify InfluxDB 1.x server with e.g. -F \"influx://localhost:8086/write?db=<db>&p=<password>&u=<user>\"\n\t  Additional parameter -M time:unix:usec:utc for correct timestamps in InfluxDB recommended\n\tSpecify host/port for syslog with e.g. -F syslog:127.0.0.1:1514\n\n\n\t\t= Meta information option =\n  [-M time[:<options>]|protocol|level|noise[:<secs>]|stats|bits] Add various metadata to every output line.\n\tUse \"time\" to add current date and time meta data (preset for live inputs).\n\tUse \"time:rel\" to add sample position meta data (preset for read-file and stdin).\n\tUse \"time:unix\" to show the seconds since unix epoch as time meta data. This is always UTC.\n\tUse \"time:iso\" to show the time with ISO-8601 format (YYYY-MM-DD\"T\"hh:mm:ss).\n\tUse \"time:off\" to remove time meta data.\n\tUse \"time:usec\" to add microseconds to date time meta data.\n\tUse \"time:tz\" to output time with timezone offset.\n\tUse \"time:utc\" to output time in UTC.\n\t\t(this may also be accomplished by invocation with TZ environment variable set).\n\t\t\"usec\" and \"utc\" can be combined with other options, eg. \"time:iso:utc\" or \"time:unix:usec\".\n\tUse \"replay[:N]\" to replay file inputs at (N-times) realtime.\n\tUse \"protocol\" / \"noprotocol\" to output the decoder protocol number meta data.\n\tUse \"level\" to add Modulation, Frequency, RSSI, SNR, and Noise meta data.\n\tUse \"noise[:<secs>]\" to report estimated noise level at intervals (default: 10 seconds).\n\tUse \"stats[:[<level>][:<interval>]]\" to report statistics (default: 600 seconds).\n\t  level 0: no report, 1: report successful devices, 2: report active devices, 3: report all\n\tUse \"bits\" to add bit representation to code outputs (for debug).\n\n\n\t\t= Read file option =\n  [-r <filename>] Read data from input file instead of a receiver\n\tParameters are detected from the full path, file name, and extension.\n\n\tA center frequency is detected as (fractional) number suffixed with 'M',\n\t'Hz', 'kHz', 'MHz', or 'GHz'.\n\n\tA sample rate is detected as (fractional) number suffixed with 'k',\n\t'sps', 'ksps', 'Msps', or 'Gsps'.\n\n\tFile content and format are detected as parameters, possible options are:\n\t'cu8', 'cs16', 'cf32' ('IQ' implied), and 'am.s16'.\n\n\tParameters must be separated by non-alphanumeric chars and are case-insensitive.\n\tOverrides can be prefixed, separated by colon (':')\n\n\tE.g. default detection by extension: path/filename.am.s16\n\tforced overrides: am:s16:path/filename.ext\n\n\tReading from pipes also support format options.\n\tE.g reading complex 32-bit float: CU32:-\n\n\n\t\t= Write file option =\n  [-w <filename>] Save data stream to output file (a '-' dumps samples to stdout)\n  [-W <filename>] Save data stream to output file, overwrite existing file\n\tParameters are detected from the full path, file name, and extension.\n\n\tFile content and format are detected as parameters, possible options are:\n\t'cu8', 'cs8', 'cs16', 'cf32' ('IQ' implied),\n\t'am.s16', 'am.f32', 'fm.s16', 'fm.f32',\n\t'i.f32', 'q.f32', 'logic.u8', 'ook', and 'vcd'.\n\n\tParameters must be separated by non-alphanumeric chars and are case-insensitive.\n\tOverrides can be prefixed, separated by colon (':')\n\n\tE.g. default detection by extension: path/filename.am.s16\n\tforced overrides: am:s16:path/filename.ext\n\n```\n\n\nSome examples:\n\n| Command | Description\n|---------|------------\n| `rtl_433` | Default receive mode, use the first device found, listen at 433.92 MHz at 250k sample rate.\n| `rtl_433 -C si` | Default receive mode, also convert units to metric system.\n| `rtl_433 -f 868M -s 1024k` | Listen at 868 MHz and 1024k sample rate.\n| `rtl_433 -M hires -M level` | Report microsecond accurate timestamps and add reception levels (depending on gain).\n| `rtl_433 -R 1 -R 8 -R 43` | Enable only specific decoders for desired devices.\n| `rtl_433 -A` | Enable pulse analyzer. Summarizes the timings of pulses, gaps, and periods. Can be used with `-R 0` to disable decoders.\n| `rtl_433 -S all -T 120` | Save all detected signals (`g###_###M_###k.cu8`). Run for 2 minutes.\n| `rtl_433 -K FILE -r file_name` | Read a saved data file instead of receiving live data. Tag output with filenames.\n| `rtl_433 -F json -M utc \\| mosquitto_pub -t home/rtl_433 -l` | Will pipe the output to network as JSON formatted MQTT messages. A test MQTT client can be found in `examples/mqtt_rtl_433_test_client.py`.\n| `rtl_433 -f 433.53M -f 434.02M -H 15` | Will poll two frequencies with 15 seconds hop interval.\n\n## Google Group\n\nJoin the Google group, rtl_433, for more information about rtl_433:\nhttps://groups.google.com/forum/#!forum/rtl_433\n\n\n## Troubleshooting\n\nIf you see this error:\n\n    Kernel driver is active, or device is claimed by second instance of librtlsdr.\n    In the first case, please either detach or blacklist the kernel module\n    (dvb_usb_rtl28xxu), or enable automatic detaching at compile time.\n\nthen\n\n    sudo rmmod rtl2832_sdr dvb_usb_rtl28xxu rtl2832\n\nor add\n\n    blacklist dvb_usb_rtl28xxu\n\nto /etc/modprobe.d/blacklist.conf\n\n## Releases\n\nVersion numbering scheme used is year.month. We try to keep the API compatible between releases but focus is on maintainablity."
}
