{
  "name": "ccheck",
  "full_name": "ccheck",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Check X509 certificate expiration from the command-line, with TAP output",
  "license": "GPL-2.0",
  "homepage": "https://github.com/nerdlem/ccheck",
  "versions": {
    "stable": "1.0.1",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/nerdlem/ccheck/archive/v1.0.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "2325ea8476cce5111b8f848ca696409092b1d1d9c41bd46de7e3145374ed32cf"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ccheck/blobs/sha256:44342aa8159dc8a960a1c59447e4de8a178cf1e6ed40baae0ebdd7fd3a58f194",
          "sha256": "44342aa8159dc8a960a1c59447e4de8a178cf1e6ed40baae0ebdd7fd3a58f194"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ccheck/blobs/sha256:eefb4874302348bbafd636ba38bc958b940c488a0acafc92357002d47e8fadf3",
          "sha256": "eefb4874302348bbafd636ba38bc958b940c488a0acafc92357002d47e8fadf3"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ccheck/blobs/sha256:a31268fedbbe48cd989d6900c96b34b98e8354fe1e397dc96fb454a32376528e",
          "sha256": "a31268fedbbe48cd989d6900c96b34b98e8354fe1e397dc96fb454a32376528e"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ccheck/blobs/sha256:74350527eafdf458bb565391577cced252ce386c30bc03e8a3692fcb4198b933",
          "sha256": "74350527eafdf458bb565391577cced252ce386c30bc03e8a3692fcb4198b933"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ccheck/blobs/sha256:f4784bc20e952229a571074101e28e68c82393c0ef224b141a0cecd93fa641b1",
          "sha256": "f4784bc20e952229a571074101e28e68c82393c0ef224b141a0cecd93fa641b1"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ccheck/blobs/sha256:226e757f5a2253c0dacce3e97e6b325e9bb889c1ba775fb7cb38a9b797458b73",
          "sha256": "226e757f5a2253c0dacce3e97e6b325e9bb889c1ba775fb7cb38a9b797458b73"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ccheck/blobs/sha256:edc3a16f072eeca5647916de805bc80a753d00548b860a052f670b4698464632",
          "sha256": "edc3a16f072eeca5647916de805bc80a753d00548b860a052f670b4698464632"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ccheck/blobs/sha256:4afea0fa685001ecf5777cb37975074cc382f2282bfe7fbaf9543c3b520272df",
          "sha256": "4afea0fa685001ecf5777cb37975074cc382f2282bfe7fbaf9543c3b520272df"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ccheck/blobs/sha256:564171a220f9f031bd04044319b1e99e0a294208b3e804513ee0fe607525fe81",
          "sha256": "564171a220f9f031bd04044319b1e99e0a294208b3e804513ee0fe607525fe81"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ccheck/blobs/sha256:441d2d833959bcf2908a40acf3677e974c2409719f2d353289431cb0bea40d04",
          "sha256": "441d2d833959bcf2908a40acf3677e974c2409719f2d353289431cb0bea40d04"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/ccheck.rb",
  "ruby_source_checksum": {
    "sha256": "54acb934d1eb46160c57ab29230c1cc0ce9ace951cc02dfc53e7e482beeb3a95"
  },
  "date_added": "2020-03-20T11:07:37-04:00",
  "readme": "[![GoDoc](https://godoc.org/github.com/nerdlem/ccheck?status.svg)](https://godoc.org/github.com/nerdlem/ccheck)\n[![Go Report Card](https://goreportcard.com/badge/github.com/nerdlem/ccheck)](https://goreportcard.com/report/github.com/nerdlem/ccheck)\n[![Build Status](https://travis-ci.org/nerdlem/ccheck.svg?branch=master)](https://travis-ci.org/nerdlem/ccheck)\n\n# ccheck, simple X509 certificate checker with TAP output\n\nThis tool simplifies handling of PEM certificates. It allows for easy filtering of certificates based on the days until expiration. It's use is reminiscent of the `grep` utility.\n\nIt can produce [Test Anything Protocol](http://testanything.org/) which makes this tool useful as part of test suites that deal with TLS certificate expiration.\n\n## Examples\n\nErrors are sent to `STDERR`, the listing of certificates that satisfy the given criteria is sent to `STDOUT` but can be suppressed by using `--quiet` in the command line. TAP output is triggered by the `--tap` command line option.\n\n### TAP — Test Anything Protocol — support\n\nTAP-formatted test results provide output that can be captured by more elaborate test suites:\n\n```\n$ ccheck --input-file certificate.list --tap --num-workers 6\n1..0\nnot ok 1 - losmunoz.com:443 x509: certificate is valid for *.athena.pics, athena.pics, not losmunoz.com TLS\nok 2 - libertad.link:443 expires in 59 days (took 0.384 secs) TLS\nok 3 - esmtp.email:443 expires in 59 days (took 0.384 secs) TLS\nok 4 - lem.click:443 expires in 64 days (took 0.384 secs) TLS\nok 5 - lem.link:443 expires in 64 days (took 0.384 secs) TLS\nok 6 - quad.click:443 expires in 70 days (took 0.384 secs) TLS\nok 7 - google.com:443 expires in 58 days (took 0.181 secs) TLS\nnot ok 8 - cert/google-chain.pem certificate is expired TLS\nok 9 - allaboutworms.com:443 expires in 39 days (took 0.291 secs) TLS\nok 10 - outlook.com:443 expires in 414 days (took 0.249 secs) TLS\nok 11 - tupsiquiatra.expert:443 expires in 59 days (took 0.276 secs) TLS\nok 12 - isipp.com:443 expires in 39 days (took 0.283 secs) TLS\nok 13 - suretymail.com:443 expires in 39 days (took 0.283 secs) TLS\n1..13\n```\n\n### JSON support\n\nOutput can be produced in JSON. Each spec provided in the command line will generate an entry in an array, with all available test information.\n\n```\n$ ccheck --json --starttls outlook.office365.com:110\n[{\"spec\":\"outlook.office365.com:110\",\"result\":{\"success\":true,\"days_left\":705,\"cert\":{\"Raw\":\"MIIIszCCB5u⋯\n⋮\n```\n\n### Custom certificate expiration check\n\nCheck whether a given certificate will expire _soon_, or within 10,000 days as in this example. Also whether the certificate is valid for the DNS name provided, is applicable:\n\n```\n$ ccheck --min-days 10000 google.com:443 || echo The end is near\ngoogle.com:443: expires in 58 days, TLS\nThe end is near\n```\n\nSpecifying 0 days with `--min-days` disables the expiration checking.\n\n### SNI support\n\nWhen specifying hostnames for remote connections, the desired SNI can be added between parentheses as per the following example:\n\n```\n$ ccheck --min-days 10000 '172.217.2.206(google.com):443' || echo The end is near\ngoogle.com:443: expires in 58 days, TLS\nThe end is near\n```\n\n### Certificate validation\n\nBy default, `ccheck` verifies that the certificate is valid for the domain name being used for testing. This can be disabled with the `--skip-verify` option:\n\n```\n$ ccheck losmunoz.com:443 || echo failed\nlosmunoz.com:443: x509: certificate is valid for *.athena.pics, athena.pics, not losmunoz.com, TLS\nfailed\n\n$ ccheck --skip-verify losmunoz.com:443 || echo failed\nlosmunoz.com:443 TLS\n```\n\n### Custom client certificate, custom Root CA processing\n\nThe `--client-cert` and `--client-key` allows for the specification of a custom client certificate pair.\n\n```\n$ ccheck --tap my.server:9990\n1..0\nnot ok 1 - my.server:9990 remote error: tls: handshake failure TLS\nexit status 2\n\n$ ccheck --tap --client-cert client.crt --client-key client.pem my.server:9990\n1..0\nok 1 - my.server:9990 expires in 117 days (took 0.059 secs) TLS\n```\n\n`--root-certs` allows for specifying custom root CA certificates for validation of the received server certificate.\n\n```\n$ ccheck --tap --root-certs my-custom-CA.crt www.google.com:443\n1..0\nnot ok 1 - www.google.com:443 x509: certificate signed by unknown authority TLS\nexit status 2\n```\n\n### Certificates in local PEM files\n\nCertificates can also be placed in local files:\n\n```\n$ ccheck ./cert/google-chain.pem && echo all is fine\n./cert/google-chain.pem TLS\nall is fine\n```\n\nThe tests use a local copy of a current Google certificate chain. To quickly get an up-to-date copy, use the following command:\n\n```\nopenssl s_client -connect google.com:443 -showcerts < /dev/null > google-chain.pem\n```\n\n### STARTTLS certificate validation\n\nWhen using the `--starttls` command line option, `ccheck` will assume a connection to an ESMTP server and fetch the TLS certificates after issuing the `STARTTLS` command to start a new TLS session. This is useful to test submission servers as in this example:\n\n```\n$ ccheck --num-workers 10 --tap --starttls smtp.outlook.com:587 smtp.gmail.com:587 mx.libertad.link:587 mail.gmx.com:587\nTAP version 13\nok 1 - smtp.gmail.com:587 expires in 63 days (took 0.820 secs) TLS\nok 2 - mx.libertad.link:587 expires in 46 days (took 1.837 secs) TLS\nok 3 - mail.gmx.com:587 expires in 446 days (took 2.499 secs) TLS\nok 4 - smtp.outlook.com:587 expires in 726 days (took 5.841 secs) TLS\n1..4\n```\n\n### PostgreSQL certificate validation\n\nThe `--postgres` command line flag instructs `ccheck` to treat the connection coordinates as the hostname and port number of a PostgreSQL database server. It then attempts a connection and uses the native line protocol to start a TLS session in which the server certificates are obtained and tested:\n\n```\n$ ccheck --tap --postgres babar.elephantsql.com:5432\nTAP version 13\nnot ok 1 - babar.elephantsql.com:5432 x509: certificate is valid for ip-10-164-15-12.ec2.internal, not babar.elephantsql.com Pg\n1..1\n```\n\nIn the case above, the TLS certificate does not match the host name, so normal validation fails. If you're simply interested in checking the expiration date, you can add the `--skip-verify` flag as follows:\n\n```\n$ ccheck --tap --skip-verify --postgres babar.elephantsql.com:5432\nTAP version 13\nok 1 - babar.elephantsql.com:5432 expires in 1647 days (took 0.427 secs) Pg\n1..1\n```\n\n### Dump certificate chain\n\nThe `chain` command provides a friendly text representation of the certificate chain sent by the TLS server, helpful for auditing certificate lineage.\n\n```\n$ ccheck chain www.google.com:443\n* spec www.google.com:443\n  [chain 0]\n    [cert 0.0]\n      Subject: CN=www.google.com,O=Google LLC,L=Mountain View,ST=California,C=US\n      Issuer: CN=Google Internet Authority G3,O=Google Trust Services,C=US\n      Serial: 126424242915129058616365655790524652180\n      Dates: 2019-04-16 09:58:34 +0000 UTC to 2019-07-09 09:52:00 +0000 UTC\n      Signature Algorithm: SHA256-RSA\n      CA: false\n        DNS: www.google.com\n    [cert 0.1]\n      Subject: CN=Google Internet Authority G3,O=Google Trust Services,C=US\n      Issuer: CN=GlobalSign,OU=GlobalSign Root CA - R2,O=GlobalSign\n      Serial: 149685795415515161014990164765\n      Dates: 2017-06-15 00:00:42 +0000 UTC to 2021-12-15 00:00:42 +0000 UTC\n      Signature Algorithm: SHA256-RSA\n      CA: true\n    [cert 0.2]\n      Subject: CN=GlobalSign,OU=GlobalSign Root CA - R2,O=GlobalSign\n      Issuer: CN=GlobalSign,OU=GlobalSign Root CA - R2,O=GlobalSign\n      Serial: 4835703278459682885658125\n      Dates: 2006-12-15 08:00:00 +0000 UTC to 2021-12-15 08:00:00 +0000 UTC\n      Signature Algorithm: SHA1-RSA\n      CA: true\n```\n\n### Specify list of certificates to check via a file\n\nTo ease testing, a list of certificate specs can be placed on a file:\n\n```\n$ ccheck --input-file certificate.list\nlem.click:443 TLS\nlem.link:443 TLS\nlosmunoz.com:443: x509: certificate is valid for *.athena.pics, athena.pics, not losmunoz.com TLS\nquad.click:443 TLS\nesmtp.email:443 TLS\nlibertad.link:443 TLS\nallaboutworms.com:443 TLS\ngoogle.com:443 TLS\nisipp.com:443 TLS\noutlook.com:443 TLS\nsuretymail.com:443 TLS\ntupsiquiatra.expert:443 TLS\ncert/google-chain.pem TLS\n```\n\n### Parallel checks for faster processing\n\nChecks can be made in parallel, using the `--num-workers` command line option. See the difference.\n\n```\n$ time ccheck -i certificate.list > /dev/null\n\nreal\t0m2.348s\nuser\t0m0.092s\nsys\t0m0.029s\n\n$ time ccheck -i certificate.list --num-workers 6 > /dev/null\n\nreal\t0m0.595s\nuser\t0m0.092s\nsys\t0m0.026s\n```\n\n### Munin plugin mode\n\nBy simply adding a symbolic link from your `/etc/munin/plugins` directory to `ccheck`, a configuration file can take care of checking all your certificates with a handy graph and email when expiration – or an error – shows up. See the accompanying `ccheck-munin.conf` file for more information on how to configure your automatic tests.\n\n`ccheck` detects it's being run by `munin-node` by looking for the `MUNIN_VERSION` environment variable."
}
