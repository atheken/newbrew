{
  "name": "travis",
  "full_name": "travis",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Command-line client for Travis CI",
  "license": "MIT",
  "homepage": "https://github.com/travis-ci/travis.rb/",
  "versions": {
    "stable": "1.11.1",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/travis-ci/travis.rb/archive/v1.11.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "438b30362b54ed5c8668abf4212f239ac9081ab3aeb7cb9a24a9bf4b044495c3"
    }
  },
  "revision": 2,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/travis/blobs/sha256:e9e8e09727abc98e24bdaf545d9ef09360fd81cb127846092b50b43d2c3e1b3a",
          "sha256": "e9e8e09727abc98e24bdaf545d9ef09360fd81cb127846092b50b43d2c3e1b3a"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/travis/blobs/sha256:b7d1ee73323d634a7f225b3cc9b933aee4422b8443a131726da6d716e4f2b2a9",
          "sha256": "b7d1ee73323d634a7f225b3cc9b933aee4422b8443a131726da6d716e4f2b2a9"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/travis/blobs/sha256:8d2540127e9a316a2e567293bc9cfeaeb63275f022dd0eb4dec07321dda25b01",
          "sha256": "8d2540127e9a316a2e567293bc9cfeaeb63275f022dd0eb4dec07321dda25b01"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/travis/blobs/sha256:7aeace183f49a6013abc90794b05ce3085ef895a04b9610ba09eb950c77277be",
          "sha256": "7aeace183f49a6013abc90794b05ce3085ef895a04b9610ba09eb950c77277be"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/travis/blobs/sha256:642811990a08cc4e35765e2433f8f14b45b0f84fc46cd8e2470d76d92d78a605",
          "sha256": "642811990a08cc4e35765e2433f8f14b45b0f84fc46cd8e2470d76d92d78a605"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/travis/blobs/sha256:9738d5d44d319450e07e59d8ac47e50e60c45076bab8a873e9e1b6447b99471e",
          "sha256": "9738d5d44d319450e07e59d8ac47e50e60c45076bab8a873e9e1b6447b99471e"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/travis/blobs/sha256:f522e0528bfe365b56f461472f766ddc861c360e858a915ed670570a41150704",
          "sha256": "f522e0528bfe365b56f461472f766ddc861c360e858a915ed670570a41150704"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "pkg-config"
  ],
  "dependencies": [
    "ruby"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "982192bf852eebace6c92c1e792d894990b8620e",
  "ruby_source_path": "Formula/travis.rb",
  "ruby_source_checksum": {
    "sha256": "fd5a746d53af7acebb847ebce493e97cb113e36022c070512303364f38b100cf"
  },
  "date_added": "2017-12-23T07:16:52-08:00",
  "readme": "# The Travis Client [![Build Status](https://travis-ci.com/travis-ci/travis.rb.svg?branch=master)](https://travis-ci.com/travis-ci/travis.rb)\n\n![The Travis Mascot](https://about.travis-ci.org/images/travis-mascot-200px.png)\n\nThe [travis gem](https://rubygems.org/gems/travis) includes both a [command line client](#command-line-client) and a [Ruby library](#ruby-library) to interface with a Travis CI service. Both work with [travis-ci.org](https://travis-ci.org), [travis-ci.com](https://travis-ci.com) or any custom Travis CI setup you might have. Check out the [installation instructions](#installation) to get it running in no time.\n\n## Table of Contents\n\n* [Command Line Client](#command-line-client)\n    * [Non-API Commands](#non-api-commands)\n        * [`help`](#help) - helps you out when in dire need of information\n        * [`version`](#version) - outputs the client version\n    * [General API Commands](#general-api-commands)\n        * [`accounts`](#accounts) - displays accounts and their subscription status\n        * [`console`](#console) - interactive shell; requires `pry`\n        * [`endpoint`](#endpoint) - displays or changes the API endpoint\n        * [`login`](#login) - authenticates against the API and stores the token\n        * [`monitor`](#monitor) - live monitor for what's going on\n        * [`raw`](#raw) - makes an (authenticated) API call and prints out the result\n        * [`report`](#report) - generates a report useful for filing issues\n        * [`repos`](#repos) - lists repositories the user has certain permissions on\n        * [`sync`](#sync) - triggers a new sync with GitHub\n        * [`lint`](#lint) - display warnings for a .travis.yml\n        * [`token`](#token) - outputs the secret API token\n        * [`whatsup`](#whatsup) - lists most recent builds\n        * [`whoami`](#whoami) - outputs the current user\n    * [Repository Commands](#repository-commands)\n        * [`branches`](#branches) - displays the most recent build for each branch\n        * [`cache`](#cache) - lists or deletes repository caches\n        * [`cancel`](#cancel) - cancels a job or build\n        * [`disable`](#disable) - disables a project\n        * [`enable`](#enable) - enables a project\n        * [`encrypt`](#encrypt) - encrypts values for the .travis.yml\n        * [`encrypt-file`](#encrypt-file) - encrypts a file and adds decryption steps to .travis.yml\n        * [`env`](#env) - show or modify build environment variables\n        * [`history`](#history) - displays a project's build history\n        * [`init`](#init) - generates a .travis.yml and enables the project\n        * [`logs`](#logs) - streams test logs\n        * [`open`](#open) - opens a build or job in the browser\n        * [`pubkey`](#pubkey) - prints out a repository's public key\n        * [`requests`](#requests) - lists recent requests\n        * [`restart`](#restart) - restarts a build or job\n        * [`settings`](#settings) - access repository settings\n        * [`setup`](#setup) - sets up an addon or deploy target\n        * [`show`](#show) - displays a build or job\n        * [`sshkey`](#sshkey) - checks, updates or deletes an SSH key\n        * [`status`](#status) - checks status of the latest build\n    * [Travis CI and Travis CI Enterprise](#travis-ci-and-travis-ci-enterprise)\n    * [Environment Variables](#environment-variables)\n    * [Desktop Notifications](#desktop-notifications)\n    * [Plugins](#plugins)\n        * [Official Plugins](#official-plugins)\n* [Ruby Library](#ruby-library)\n    * [Authentication](#authentication)\n    * [Using Pro](#using-pro)\n    * [Entities](#entities)\n        * [Stateful Entities](#stateful-entities)\n        * [Repositories](#repositories)\n        * [Builds](#builds)\n        * [Jobs](#jobs)\n        * [Artifacts](#artifacts)\n        * [Users](#users)\n        * [Commits](#commits)\n        * [Caches](#caches)\n        * [Repository Settings](#repository-settings)\n        * [Build Environment Variables](#build-environment-variables)\n    * [Listening for Events](#listening-for-events)\n    * [Dealing with Sessions](#dealing-with-sessions)\n    * [Using Namespaces](#using-namespaces)\n* [Installation](#installation)\n    * [Updating your Ruby](#updating-your-ruby)\n        * [Mac OS X via Homebrew](#mac-os-x-via-homebrew)\n        * [Windows](#windows)\n        * [Other Unix systems](#other-unix-systems)\n        * [Ruby versioning tools](#ruby-versioning-tools)\n    * [Troubleshooting](#troubleshooting)\n        * [Ubuntu](#ubuntu)\n        * [Mac OS X](#mac-os-x)\n        * [Upgrading from travis-cli](#upgrading-from-travis-cli)\n* [Version History](#version-history)\n\n## Command Line Client\n\n![](http://about.travis-ci.org/images/new-tricks.png)\n\nThere are three types of commands: [Non-API Commands](#non-api-commands), [General API Commands](#general-api-commands) and [Repository Commands](#repository-commands). All commands take the form of `travis COMMAND [ARGUMENTS] [OPTIONS]`. You can get a list of commands by running [`help`](#help).\n\n### Non-API Commands\n\nEvery Travis command takes three global options:\n\n    -h, --help                       Display help\n    -i, --[no-]interactive           be interactive and colorful\n    -E, --[no-]explode               don't rescue exceptions\n\nThe `--help` option is equivalent to running `travis help COMMAND`.\n\nThe `--interactive` options determines whether to include additional information and colors in the output or not (except on Windows, we never display colors on Windows, sorry). If you don't set this option explicitly, you will run in interactive mode if you invoke the command directly in a shell and in non-interactive mode if you pipe it somewhere.\n\nYou probably want to use `--explode` if you are working on a patch for the Travis client, as it will give you the Ruby exception instead of a nice error message.\n\n#### `help`\n\nThe `help` command will inform you about the arguments and options that the commands take, for instance:\n\n``` console\n$ travis help help\nUsage: travis help [command] [options]\n    -h, --help                       Display help\n    -i, --[no-]interactive           be interactive and colorful\n    -E, --[no-]explode               don't rescue exceptions\n```\n\nRunning `help` without a command name will give you a list of all available commands.\n\n#### `version`\n\nAs you might have guessed, this command prints out the client's version.\n\n### General API Commands\n\nAPI commands inherit all options from [Non-API Commands](#non-api-commands).\n\nAdditionally, every API command understands the following options:\n\n    -e, --api-endpoint URL           Travis API server to talk to\n        --com                        short-cut for --api-endpoint 'https://api.travis-ci.com/'\n        --pro                        short-cut for --api-endpoint 'https://api.travis-ci.com/'\n        --org                        short-cut for --api-endpoint 'https://api.travis-ci.org/'\n    -t, --token [ACCESS_TOKEN]       access token to use\n        --debug                      show API requests\n        --adapter ADAPTER            Faraday adapter to use for HTTP requests\n\nYou can supply an access token via `--token` if you want to make an authenticated call. If you don't have an access token stored for the API endpoint, it will remember it for subsequent requests. Keep in mind, this is not the \"Travis token\" used when setting up GitHub hooks (due to security). You probably don't have an access token handy right now. Don't worry, usually you won't use this option but instead just do a [`travis login`](#login).\n\nThe `--debug` option will print HTTP requests to STDERR. Like `--explode`, this is really helpful when contributing to this project.\n\nThere are many libraries out there to do HTTP requests in Ruby. You can switch amongst common ones with `--adapter`:\n\n``` console\n$ travis show --adapter net-http\n...\n$ gem install excon\n...\n$ travis show --adapter excon\n...\n```\n\n#### `accounts`\n\nThe accounts command can be used to list all the accounts you can set up repositories for.\n\n``` console\n$ travis accounts\nrkh (Konstantin Haase): subscribed, 160 repositories\nsinatra (Sinatra): subscribed, 9 repositories\nrack (Official Rack repositories): subscribed, 3 repositories\ntravis-ci (Travis CI): subscribed, 57 repositories\n...\n```\n\n#### `console`\n\nProvides an interactive shell via [pry](http://pry.github.io/).\n\nRunning `travis console` gives you an interactive Ruby session with all the [entities](#entities) imported into global namespace.\n\nThis has advantages over `irb -r travis`, such as:\n* It will take care of authentication, setting the correct endpoint, etc.\n* It also allows you to pass in `--debug` if you are curious as to what's actually going on.\n\n``` console\n$ travis console\n>> User.current\n=> #<User: rkh>\n>> Repository.find('sinatra/sinatra')\n=> #<Repository: sinatra/sinatra>\n>> _.last_build\n=> #<Travis::Client::Build: sinatra/sinatra#360>\n```\n\n    Interactive shell; requires `pry`.\n    Usage: travis console [OPTIONS]\n    -h, --help                       Display help\n    -i, --[no-]interactive           be interactive and colorful\n    -E, --[no-]explode               don't rescue exceptions\n        --skip-version-check         don't check if travis client is up to date\n        --skip-completion-check      don't check if auto-completion is set up\n    -e, --api-endpoint URL           Travis API server to talk to\n    -I, --[no-]insecure              do not verify SSL certificate of API endpoint\n        --pro                        short-cut for --api-endpoint 'https://api.travis-ci.com/'\n        --com                        short-cut for --api-endpoint 'https://api.travis-ci.com/'\n        --org                        short-cut for --api-endpoint 'https://api.travis-ci.org/'\n        --staging                    talks to staging system\n    -t, --token [ACCESS_TOKEN]       access token to use\n        --debug                      show API requests\n        --debug-http                 show HTTP(S) exchange\n    -X, --enterprise [NAME]          use enterprise setup (optionally takes name for multiple setups)\n        --adapter ADAPTER            Faraday adapter to use for HTTP requests\n    -x, --eval LINE                  run line of ruby\n\n#### `endpoint`\n\nPrints out the API endpoint you're talking to.\n\n``` console\n$ travis endpoint\nAPI endpoint: https://api.travis-ci.org/\n```\n\nHandy for using it when working with shell scripts:\n\n``` console\n$ curl \"$(travis endpoint)/docs\" > docs.html\n```\n\nIt can also be used to set the default API endpoint used for [General API Commands](#general-api-commands):\n\n``` console\n$ travis endpoint --com --set-default\nAPI endpoint: https://api.travis-ci.com/ (stored as default)\n```\n\nYou can use `--drop-default` to remove the setting again:\n\n``` console\n$ travis endpoint --drop-default\ndefault API endpoint dropped (was https://api.travis-ci.com/)\n```\n\n#### `login`\n\nThe `login` command will, well, log you in. That way, all subsequent commands that run against the same endpoint will be authenticated.\n\n``` console\n$ travis login --pro --github-token ghp_********\nSuccessfully logged in as rkh!\n```\n\nYou need to use a GitHub token and supply it via `--github-token`. Travis CI will not store the token, though - after all, it already should have a valid token for you in the database.\n*NOTE*: When creating a GitHub token, see [GitHub Permissions used by travis-ci.com](https://docs.travis-ci.com/user/github-oauth-scopes/#travis-ci-for-private-projects) or [GitHub Permissions used by travis-ci.org](https://docs.travis-ci.com/user/github-oauth-scopes/#travis-ci-for-open-source-projects). The token permissions are dependent on use of travis-ci.com or travis-ci.org and not if they are public or private repositories.\n\nA third option is for the really lazy: `--auto`. In this mode the client will try to find a GitHub token for you and just use that. This will only work if you have a [global GitHub token](https://help.github.com/articles/git-over-https-using-oauth-token) stored in your [.netrc](http://blogdown.io/c4d42f87-80dd-45d5-8927-4299cbdf261c/posts/574baa68-f663-4dcf-88b9-9d41310baf2f). If you haven't heard of this, it's worth looking into in general. Again: Travis CI will not store that token.\n\n#### `logout`\n\nThis command makes Travis CI forget your access token.\n\n``` console\n$ travis logout --com\nSuccessfully logged out!\n```\n\n#### `monitor`\n\n    Usage: travis monitor [options]\n        -h, --help                       Display help\n        -i, --[no-]interactive           be interactive and colorful\n        -E, --[no-]explode               don't rescue exceptions\n            --skip-version-check         don't check if travis client is up to date\n        -e, --api-endpoint URL           Travis API server to talk to\n            --com                        short-cut for --api-endpoint 'https://api.travis-ci.com/'\n            --org                        short-cut for --api-endpoint 'https://api.travis-ci.org/'\n        -t, --token [ACCESS_TOKEN]       access token to use\n            --debug                      show API requests\n        -X, --enterprise [NAME]          use enterprise setup (optionally takes name for multiple setups)\n        -m, --my-repos                   Only monitor my own repositories\n        -r, --repo SLUG                  monitor given repository (can be used more than once)\n        -R, --store-repo SLUG            like --repo, but remembers value for current directory\n        -n, --[no-]notify [TYPE]         send out desktop notifications (optional type: osx, growl, libnotify)\n        -b, --builds                     only monitor builds, not jobs\n        -p, --push                       monitor push events\n        -P, --pull                       monitor pull request events\n\nWith `monitor` you can watch a live stream of what's going on:\n\n``` console\n$ travis monitor\nMonitoring travis-ci.org:\n2013-08-05 01:22:40 questmaster/FATpRemote#45 started\n2013-08-05 01:22:40 questmaster/FATpRemote#45.1 started\n2013-08-05 01:22:41 grangier/python-goose#33.1 passed\n2013-08-05 01:22:42 plataformatec/simple_form#666 passed\n...\n```\n\nYou can limit it to a single repository via `--repo SLUG`.\n\nBy default, you will receive events for both builds and jobs, you can limit it to builds only via `--build` (short `-b`):\n\n``` console\n$ travis monitor\nMonitoring travis-ci.org:\n2013-08-05 01:22:40 questmaster/FATpRemote#45 started\n2013-08-05 01:22:42 plataformatec/simple_form#666 passed\n...\n```\n\nSimilarly, you can limit it to builds/jobs for pull requests via `--pull` and for normal pushes via `--push`.\n\nThe monitor command can also send out [desktop notifications](#desktop-notifications):\n\n``` console\n$ travis monitor --com -n\nMonitoring travis-ci.com:\n...\n```\n\nWhen monitoring specific repositories, notifications will be turned on by default. Disable with `--no-notify`.\n\n#### `raw`\n\nThis is really helpful both when working on this client and when exploring the [Travis API](https://api.travis-ci.org). It will simply fire a request against the API endpoint, parse the output and pretty print it. Keep in mind that the client takes care of authentication for you:\n\n``` console\n$ travis raw /repos/travis-ci/travis.rb\n{\"repo\"=>\n  {\"id\"=>409371,\n   \"slug\"=>\"travis-ci/travis.rb\",\n   \"description\"=>\"Travis CI Client (CLI and Ruby library)\",\n   \"last_build_id\"=>4251410,\n   \"last_build_number\"=>\"77\",\n   \"last_build_state\"=>\"passed\",\n   \"last_build_duration\"=>351,\n   \"last_build_language\"=>nil,\n   \"last_build_started_at\"=>\"2013-01-19T18:00:49Z\",\n   \"last_build_finished_at\"=>\"2013-01-19T18:02:17Z\"}}\n```\n\nUse `--json` if you'd rather prefer the output to be JSON.\n\n#### `report`\n\nWhen inspecting a bug or reporting an issue, it can be handy to include a report about the system and configuration used for running a command.\n\n``` console\n$ travis report --com\nSystem\nRuby:                     Ruby 2.0.0-p195\nOperating System:         Mac OS X 10.8.5\nRubyGems:                 RubyGems 2.0.7\n\nCLI\nVersion:                  1.5.8\nPlugins:                  \"travis-as-user\", \"travis-build\", \"travis-cli-pr\"\nAuto-Completion:          yes\nLast Version Check:       2013-11-02 16:25:03 +0100\n\nSession\nAPI Endpoint:             https://api.travis-ci.com/\nLogged In:                as \"rkh\"\nVerify SSL:               yes\nEnterprise:               no\n\nEndpoints\npro:                      https://api.travis-ci.com/ (access token, current)\norg:                      https://api.travis-ci.org/ (access token)\n\nLast Exception\nAn error occurred running `travis whoami --com`:\n    Travis::Client::Error: access denied\n        from ...\n\n\nFor issues with the command line tool, please visit https://github.com/travis-ci/travis.rb/issues.\nFor Travis CI in general, go to https://github.com/travis-ci/travis-ci/issues or email support@travis-ci.com.\n```\n\nThis command can also list all known repos and the endpoint to use for them via the `--known-repos` option.\n\n#### `repos`\n\n    Lists repositories the user has certain permissions on.\n    Usage: travis repos [options]\n        -h, --help                       Display help\n        -i, --[no-]interactive           be interactive and colorful\n        -E, --[no-]explode               don't rescue exceptions\n            --skip-version-check         don't check if travis client is up to date\n            --skip-completion-check      don't check if auto-completion is set up\n        -e, --api-endpoint URL           Travis API server to talk to\n        -I, --[no-]insecure              do not verify SSL certificate of API endpoint\n            --com                        short-cut for --api-endpoint 'https://api.travis-ci.com/'\n            --org                        short-cut for --api-endpoint 'https://api.travis-ci.org/'\n        -t, --token [ACCESS_TOKEN]       access token to use\n            --debug                      show API requests\n        -X, --enterprise [NAME]          use enterprise setup (optionally takes name for multiple setups)\n            --adapter ADAPTER            Faraday adapter to use for HTTP requests\n        -m, --match PATTERN              only list repositories matching the given pattern (shell style)\n        -o, --owner LOGIN                only list repos for a certain owner\n        -n, --name NAME                  only list repos with a given name\n        -a, --active                     only list active repositories\n        -A, --inactive                   only list inactive repositories\n        -d, --admin                      only list repos with (or without) admin access\n        -D, --no-admin                   only list repos without admin access\n\nLists repositories and displays whether these are active or not. Has a variety of options to filter repositories.\n\n``` console\n$ travis repos -m 'rkh/travis-*'\nrkh/travis-chat (active: yes, admin: yes, push: yes, pull: yes)\nDescription: example app demoing travis-sso usage\n\nrkh/travis-encrypt (active: yes, admin: yes, push: yes, pull: yes)\nDescription: proof of concept in browser encryption of travis settings\n\nrkh/travis-lite (active: no, admin: yes, push: yes, pull: yes)\nDescription: Travis CI without the JavaScript\n\nrkh/travis-surveillance (active: no, admin: yes, push: yes, pull: yes)\nDescription: Veille sur un projet.\n```\n\nIn non-interactive mode, it will only output the repository slug, which goes well with xargs:\n\n``` console\n$ travis repos --active --owner travis-ci | xargs -I % travis disable -r %\ntravis-ci/artifacts: disabled :(\ntravis-ci/canary: disabled :(\ntravis-ci/docs-travis-ci-com: disabled :(\ntravis-ci/dpl: disabled :(\ntravis-ci/gh: disabled :(\n...\n```\n\n#### `sync`\n\n    Usage: travis sync [options]\n        -h, --help                       Display help\n        -i, --[no-]interactive           be interactive and colorful\n        -E, --[no-]explode               don't rescue exceptions\n        -e, --api-endpoint URL           Travis API server to talk to\n            --com                        short-cut for --api-endpoint 'https://api.travis-ci.com/'\n            --org                        short-cut for --api-endpoint 'https://api.travis-ci.org/'\n        -t, --token [ACCESS_TOKEN]       access token to use\n            --debug                      show API requests\n        -c, --check                      only check the sync status\n        -b, --background                 will trigger sync but not block until sync is done\n        -f, --force                      will force sync, even if one is already running\n\nSometimes the info Travis CI has about users and repositories become out of date. If that should happen, you can manually trigger a sync:\n\n``` console\n$ travis sync\nsynchronizing: ........... done\n```\n\nThe command blocks until the synchronization is done. You can avoid that with `--background`:\n\n``` console\n$ travis sync --background\nstarting synchronization\n```\n\nIf you just want to know if your account is being synchronized right now, use `--check`:\n\n``` console\n$ travis sync --check\nrkh is currently syncing\n```\n\n#### `lint`\n\nThis checks a `.travis.yml` file for any issues it might detect.\n\nBy default, it will read a file named `.travis.yml` in the current directory:\n\n``` console\n$ travis lint\nWarnings for .travis.yml:\n[x] your repository must be feature flagged for the os setting to be used\n```\n\nYou can also give it a path to a different file:\n\n``` console\n$ travis lint example.yml\n...\n```\n\nOr pipe the content into it:\n\n``` console\n$ echo \"foo: bar\" | travis lint\nWarnings for STDIN:\n[x] unexpected key foo, dropping\n[x] missing key language, defaulting to ruby\n```\n\nLike the [`status` command](#status), you can use `-q` to suppress any output, and `-x` to have it set the exit code to 1 if there are any warnings.\n\n``` console\n$ travis lint -qx || echo \".travis.yml does not validate\"\n```\n\n#### `token`\n\nIn order to use the Ruby library you will need to obtain an access token first. To do this simply run the `travis login` command. Once logged in you can check your token with `travis token`:\n\n``` console\n$ travis token\nYour access token is super-secret\n```\n\nYou can use that token for instance with curl:\n\n``` console\n$ curl -H \"Authorization: token $(travis token)\" https://api.travis-ci.org/users/\n{\"login\":\"rkh\",\"name\":\"Konstantin Haase\",\"email\":\"konstantin.haase@gmail.com\",\"gravatar_id\":\"5c2b452f6eea4a6d84c105ebd971d2a4\",\"locale\":\"en\",\"is_syncing\":false,\"synced_at\":\"2013-01-21T20:31:06Z\"}\n```\n\nNote that if you just need it for looking at API payloads, that we also have the [`raw`](#raw) command.\n\n#### `whatsup`\n\nIt's just a tiny feature, but it allows you to take a look at repositories that have recently seen some action (ie the left hand sidebar on [travis-ci.org](https://travis-ci.org)):\n\n``` console\n$ travis whatsup\nmysociety/fixmystreet started: #154\neloquent/typhoon started: #228\nPajk/apipie-rails started: #84\nqcubed/framework failed: #21\n...\n```\n\nIf you only want to see what happened in your repositories, add the `--my-repos` flag (short: `-m`):\n\n``` console\n$ travis whatsup -m\ntravis-ci/travis.rb passed: #169\nrkh/dpl passed: #50\nrubinius/rubinius passed: #3235\nsinatra/sinatra errored: #619\nrtomayko/tilt failed: #162\nruby-no-kai/rubykaigi2013 passed: #50\nrack/rack passed: #519\n...\n```\n\n#### `whoami`\n\nThis command is useful to verify that you're in fact logged in:\n\n``` console\n$ travis whoami\nYou are rkh (Konstantin Haase)\n```\n\nAgain, like most other commands, goes well with shell scripting:\n\n``` console\n$ git clone \"https://github.com/$(travis whoami)/some_project\"\n```\n\n### Repository Commands\n\n    -h, --help                       Display help\n    -i, --[no-]interactive           be interactive and colorful\n    -E, --[no-]explode               don't rescue exceptions\n        --skip-version-check         don't check if travis client is up to date\n        --skip-completion-check      don't check if auto-completion is set up\n    -e, --api-endpoint URL           Travis API server to talk to\n    -I, --[no-]insecure              do not verify SSL certificate of API endpoint\n        --com                        short-cut for --api-endpoint 'https://api.travis-ci.com/'\n        --org                        short-cut for --api-endpoint 'https://api.travis-ci.org/'\n    -t, --token [ACCESS_TOKEN]       access token to use\n        --debug                      show API requests\n    -X, --enterprise [NAME]          use enterprise setup (optionally takes name for multiple setups)\n    -r, --repo SLUG                  repository to use (will try to detect from current git clone)\n    -R, --store-repo SLUG            like --repo, but remembers value for current directory\n\nRepository commands have all the options [General API Commands](#general-api-commands) have.\n\nAdditionally, you can specify the Repository to talk to by providing `--repo owner/name`. However, if you invoke the command inside a clone of the project, the client will figure out this option on its own. Note that it uses the tracked [git remote](http://www.kernel.org/pub/software/scm/git/docs/git-remote.html) for the current branch (and defaults to 'origin' if no tracking is set) to do so. You can use `--store-repo SLUG` once to override it permanently.\n\nIt will also automatically pick [travis-ci.com](https://travis-ci.com) if it is a private project. You can of course override this decision with `--com`, `--org` or `--api-endpoint URL`\n\n#### `branches`\n\nDisplays the most recent build for each branch:\n\n``` console\n$ travis branches\nhh-add-warning-old-style:                  #35   passed     Add a warning if old-style encrypt is being used\nhh-multiline-encrypt:                      #55   passed     Merge branch 'master' into hh-multiline-encrypt\nrkh-show-logs-history:                     #72   passed     regenerate gemspec\nrkh-debug:                                 #75   passed     what?\nhh-add-clear-cache-to-global-session:      #135  passed     Add clear_cache(!) to Travis::Namespace\nhh-annotations:                            #146  passed     Initial annotation support\nhh-remove-newlines-from-encrypted-string:  #148  errored    Remove all whitespace from an encrypted string\nversion-check:                             #157  passed     check travis version for updates from time to time\nmaster:                                    #163  passed     add Repository#branches and Repository#branch(name)\n```\n\nFor more fine grained control and older builds on a specific branch, see [`history`](#history).\n\n#### `cache`\n\n    Lists or deletes repository caches.\n    Usage: travis cache [options]\n        -h, --help                       Display help\n        -i, --[no-]interactive           be interactive and colorful\n        -E, --[no-]explode               don't rescue exceptions\n            --skip-version-check         don't check if travis client is up to date\n            --skip-completion-check      don't check if auto-completion is set up\n        -e, --api-endpoint URL           Travis API server to talk to\n        -I, --[no-]insecure              do not verify SSL certificate of API endpoint\n            --com                        short-cut for --api-endpoint 'https://api.travis-ci.com/'\n            --org                        short-cut for --api-endpoint 'https://api.travis-ci.org/'\n        -t, --token [ACCESS_TOKEN]       access token to use\n            --debug                      show API requests\n        -X, --enterprise [NAME]          use enterprise setup (optionally takes name for multiple setups)\n        -r, --repo SLUG                  repository to use (will try to detect from current git clone)\n        -R, --store-repo SLUG            like --repo, but remembers value for current directory\n        -d, --delete                     delete listed caches\n        -b, --branch BRANCH              only list/delete caches on given branch\n        -m, --match STRING               only list/delete caches where slug matches given string\n        -f, --force                      do not ask user to confirm deleting the caches\n\nLists or deletes [directory caches](http://about.travis-ci.org/docs/user/caching/) for a repository:\n\n``` console\n$ travis cache\nOn branch master:\ncache--rvm-2.0.0--gemfile-Gemfile      last modified: 2013-11-04 13:45:44  size: 62.21 MiB\ncache--rvm-ruby-head--gemfile-Gemfile  last modified: 2013-11-04 13:46:55  size: 62.65 MiB\n\nOn branch example:\ncache--rvm-2.0.0--gemfile-Gemfile      last modified: 2013-11-04 13:45:44  size: 62.21 MiB\n\nOverall size of above caches: 187.07 MiB\n```\n\nYou can filter by branch:\n\n``` console\n$ travis cache --branch master\nOn branch master:\ncache--rvm-2.0.0--gemfile-Gemfile      last modified: 2013-11-04 13:45:44  size: 62.21 MiB\ncache--rvm-ruby-head--gemfile-Gemfile  last modified: 2013-11-04 13:46:55  size: 62.65 MiB\n\nOverall size of above caches: 124.86 MiB\n```\n\nAnd by matching against the slug:\n\n``` console\n$ travis cache --match 2.0.0\nOn branch master:\ncache--rvm-2.0.0--gemfile-Gemfile  last modified: 2013-11-04 13:45:44  size: 62.21 MiB\n\nOverall size of above caches: 62.21 MiB\n```\n\nYou can also use this command to delete caches:\n\n``` console\n$ travis cache -b example -m 2.0.0 --delete\nDANGER ZONE: Do you really want to delete all caches on branch example that match 2.0.0? |no| yes\nDeleted the following caches:\n\nOn branch example:\ncache--rvm-2.0.0--gemfile-Gemfile  last modified: 2013-11-04 13:45:44  size: 62.21 MiB\n\nOverall size of above caches: 62.21 MiB\n```\n\n#### `cancel`\n\nThis command will cancel the latest build:\n\n``` console\n$ travis cancel\nbuild #85 has been canceled\n```\n\nYou can also cancel any build by giving a build number:\n\n``` console\n$ travis cancel 57\nbuild #57 has been canceled\n```\n\nOr a single job:\n\n``` console\n$ travis cancel 57.1\njob #57.1 has been canceled\n```\n\n#### `disable`\n\nIf you want to turn off a repository temporarily or indefinitely, you can do so with the `disable` command:\n\n``` console\n$ travis disable\ntravis-ci/travis.rb: disabled :(\n```\n\n#### `enable`\n\nWith the `enable` command, you can easily activate a project on Travis CI:\n\n``` console\n$ travis enable\ntravis-ci/travis.rb: enabled :)\n```\n\nIt even works when enabling a repo Travis didn't know existed by triggering a sync:\n\n``` console\n$ travis enable -r rkh/test\nrepository not known to Travis CI (or no access?)\ntriggering sync: ............. done\nrkh/test: enabled\n```\n\nIf you don't want the sync to be triggered, use `--skip-sync`.\n\n#### `encrypt`\n\n    Encrypts values for the .travis.yml.\n    Usage: travis encrypt [ARGS..] [OPTIONS]\n        -h, --help                       Display help\n        -i, --[no-]interactive           be interactive and colorful\n        -E, --[no-]explode               don't rescue exceptions\n            --skip-version-check         don't check if travis client is up to date\n            --skip-completion-check      don't check if auto-completion is set up\n        -e, --api-endpoint URL           Travis API server to talk to\n        -I, --[no-]insecure              do not verify SSL certificate of API endpoint\n            --pro                        short-cut for --api-endpoint 'https://api.travis-ci.com/'\n            --com                        short-cut for --api-endpoint 'https://api.travis-ci.com/'\n            --org                        short-cut for --api-endpoint 'https://api.travis-ci.org/'\n            --staging                    talks to staging system\n        -t, --token [ACCESS_TOKEN]       access token to use\n            --debug                      show API requests\n            --debug-http                 show HTTP(S) exchange\n        -X, --enterprise [NAME]          use enterprise setup (optionally takes name for multiple setups)\n            --adapter ADAPTER            Faraday adapter to use for HTTP requests\n        -r, --repo SLUG                  repository to use (will try to detect from current git clone)\n        -R, --store-repo SLUG            like --repo, but remembers value for current directory\n        -a, --add [KEY]                  adds it to .travis.yml under KEY (default: env.global)\n        -s, --[no-]split                 treat each line as a separate input\n        -p, --append                     don't override existing values, instead treat as list\n        -x, --override                   override existing value\n\nThis command is useful to encrypt [environment variables](http://about.travis-ci.org/docs/user/encryption-keys/) or deploy keys for private dependencies.\n\n``` console\n$ travis encrypt FOO=bar\nPlease add the following to your .travis.yml file:\n\n  secure: \"gSly+Kvzd5uSul15CVaEV91ALwsGSU7yJLHSK0vk+oqjmLm0jp05iiKfs08j\\n/Wo0DG8l4O9WT0mCEnMoMBwX4GiK4mUmGdKt0R2/2IAea+M44kBoKsiRM7R3\\n+62xEl0q9Wzt8Aw3GCDY4XnoCyirO49DpCH6a9JEAfILY/n6qF8=\"\n\nPro Tip™: You can add it automatically by running with --add.\n```\n\nFor deploy keys, it is really handy to pipe them into the command:\n\n``` console\n$ cat id_rsa | travis encrypt\n```\n\nAnother use case for piping files into it: If you have a file with sensitive environment variables, like foreman's [.env](http://ddollar.github.com/foreman/#ENVIRONMENT) file, you can tell the client to encrypt every line separately via `--split`:\n\n``` console\n$ cat .env | travis encrypt --split\nPlease add the following to your .travis.yml file:\n\n  secure: \"KmMdcwTWGubXVRu93/lY1NtyHxrjHK4TzCfemgwjsYzPcZuPmEA+pz+umQBN\\n1ZhzUHZwDNsDd2VnBgYq27ZdcS2cRvtyI/IFuM/xJoRi0jpdTn/KsXR47zeE\\nr2bFxRqrdY0fERVHSMkBiBrN/KV5T70js4Y6FydsWaQgXCg+WEU=\"\n  secure: \"jAglFtDjncy4E3upL/RF0ZOcmJ2UMrqHFCLQwU8PBdurhTMBeTw+IO6cXx5z\\nU5zqvPYo/ghZ8mMuUhvHiGDM6m6OlMP7+l10VTxH1CoVew2NcQvRdfK3P+4S\\nZJ43Hyh/ZLCjft+JK0tBwoa3VbH2+ZTzkRZQjdg54bE16C7Mf1A=\"\n\nPro Tip: You can add it automatically by running with --add.\n```\n\nAs suggested, the client can also add them to your `.travis.yml` for you:\n\n``` console\n$ travis encrypt FOO=bar --add\n```\n\nThis will by default add it as global variables for every job. You can also add it as matrix entries by providing a key:\n\n``` console\n$ travis encrypt FOO=bar --add env.matrix\n```\n\nThere are two ways the client can treat existing values:\n\n* Turn existing value into a list if it isn't already, append new value to that list. This is the default behavior for keys that start with `env.` and can be enforced with `--append`.\n* Replace existing value. This is the default behavior for keys that do not start with `env.` and can be enforced with `--override`.\n\n#### `encrypt-file`\n\n    Encrypts a file and adds decryption steps to .travis.yml.\n    Usage: travis encrypt-file INPUT_PATH [OUTPUT_PATH] [OPTIONS]\n        -h, --help                       Display help\n        -i, --[no-]interactive           be interactive and colorful\n        -E, --[no-]explode               don't rescue exceptions\n            --skip-version-check         don't check if travis client is up to date\n            --skip-completion-check      don't check if auto-completion is set up\n        -e, --api-endpoint URL           Travis API server to talk to\n        -I, --[no-]insecure              do not verify SSL certificate of API endpoint\n            --pro                        short-cut for --api-endpoint 'https://api.travis-ci.com/'\n            --com                        short-cut for --api-endpoint 'https://api.travis-ci.com/'\n            --org                        short-cut for --api-endpoint 'https://api.travis-ci.org/'\n            --staging                    talks to staging system\n        -t, --token [ACCESS_TOKEN]       access token to use\n            --debug                      show API requests\n            --debug-http                 show HTTP(S) exchange\n        -X, --enterprise [NAME]          use enterprise setup (optionally takes name for multiple setups)\n            --adapter ADAPTER            Faraday adapter to use for HTTP requests\n        -r, --repo SLUG                  repository to use (will try to detect from current git clone)\n        -R, --store-repo SLUG            like --repo, but remembers value for current directory\n        -K, --key KEY                    encryption key to be used (randomly generated otherwise)\n            --iv IV                      encryption IV to be used (randomly generated otherwise)\n        -d, --decrypt                    decrypt the file instead of encrypting it, requires key and iv\n        -f, --force                      override output file if it exists\n        -p, --print-key                  print (possibly generated) key and iv\n        -w, --decrypt-to PATH            where to write the decrypted file to on the Travis CI VM\n        -a, --add [STAGE]                automatically add command to .travis.yml (default stage is before_install)\n\nThis command will encrypt a file for you using a symmetric encryption (AES-256), and it will store the secret in a [secure variable](#env). It will output the command you can use in your build script to decrypt the file.\n\n``` console\n$ travis encrypt-file bacon.txt\nencrypting bacon.txt for rkh/travis-encrypt-file-example\nstoring result as bacon.txt.enc\nstoring secure env variables for decryption\n\nPlease add the following to your build script (before_install stage in your .travis.yml, for instance):\n\n    openssl aes-256-cbc -K $encrypted_0a6446eb3ae3_key -iv $encrypted_0a6446eb3ae3_key -in bacon.txt.enc -out bacon.txt -d\n\nPro Tip: You can add it automatically by running with --add.\n\nMake sure to add bacon.txt.enc to the git repository.\nMake sure not to add bacon.txt to the git repository.\nCommit all changes to your .travis.yml.\n```\n\nYou can also use `--add` to have it automatically add the decrypt command to your `.travis.yml`\n\n``` console\n$ travis encrypt-file bacon.txt --add\nencrypting bacon.txt for rkh/travis-encrypt-file-example\nstoring result as bacon.txt.enc\nstoring secure env variables for decryption\n\nMake sure to add bacon.txt.enc to the git repository.\nMake sure not to add bacon.txt to the git repository.\nCommit all changes to your .travis.yml.\n```\n\n#### `env`\n\n    Show or modify build environment variables.\n\n    Usage: travis env list [options]\n           travis env set name value [options]\n           travis env unset [names..] [options]\n           travis env copy [names..] [options]\n           travis env clear [OPTIONS]\n\n        -h, --help                       Display help\n        -i, --[no-]interactive           be interactive and colorful\n        -E, --[no-]explode               don't rescue exceptions\n            --skip-version-check         don't check if travis client is up to date\n            --skip-completion-check      don't check if auto-completion is set up\n        -e, --api-endpoint URL           Travis API server to talk to\n        -I, --[no-]insecure              do not verify SSL certificate of API endpoint\n            --com                        short-cut for --api-endpoint 'https://api.travis-ci.com/'\n            --org                        short-cut for --api-endpoint 'https://api.travis-ci.org/'\n            --staging                    talks to staging system\n        -t, --token [ACCESS_TOKEN]       access token to use\n            --debug                      show API requests\n        -X, --enterprise [NAME]          use enterprise setup (optionally takes name for multiple setups)\n            --adapter ADAPTER            Faraday adapter to use for HTTP requests\n            --as USER                    authenticate as given user\n        -r, --repo SLUG                  repository to use (will try to detect from current git clone)\n        -R, --store-repo SLUG            like --repo, but remembers value for current directory\n        -P, --[no-]public                make new values public\n        -p, --[no-]private               make new values private\n        -u, --[no-]unescape              do not escape values\n        -f, --force                      do not ask for confirmation when clearing out all variables\n\nYou can set, list and unset environment variables, or copy them from the current environment:\n\n``` console\n$ travis env set foo bar --public\n[+] setting environment variable $foo\n$ travis env list\n# environment variables for travis-ci/travis.rb\nfoo=bar\n\n$ export foo=foobar\n$ travis env copy foo bar\n[+] setting environment variable $foo\n[+] setting environment variable $bar\n$ travis env list\n# environment variables for travis-ci/travis.rb\nfoo=foobar\nbar=[secure]\n$ travis env unset foo bar\n[x] removing environment variable $foo\n[x] removing environment variable $bar\n```\n\n#### `history`\n\n    Displays a project's build history.\n    Usage: travis history [options]\n        -h, --help                       Display help\n        -i, --[no-]interactive           be interactive and colorful\n        -E, --[no-]explode               don't rescue exceptions\n            --skip-version-check         don't check if travis client is up to date\n            --skip-completion-check      don't check if auto-completion is set up\n        -e, --api-endpoint URL           Travis API server to talk to\n        -I, --[no-]insecure              do not verify SSL certificate of API endpoint\n            --com                        short-cut for --api-endpoint 'https://api.travis-ci.com/'\n            --org                        short-cut for --api-endpoint 'https://api.travis-ci.org/'\n        -t, --token [ACCESS_TOKEN]       access token to use\n            --debug                      show API requests\n        -X, --enterprise [NAME]          use enterprise setup (optionally takes name for multiple setups)\n        -r, --repo SLUG                  repository to use (will try to detect from current git clone)\n        -R, --store-repo SLUG            like --repo, but remembers value for current directory\n        -a, --after BUILD                Only show history after a given build number\n        -p, --pull-request NUMBER        Only show history for the given Pull Request\n        -b, --branch BRANCH              Only show history for the given branch\n        -l, --limit LIMIT                Maximum number of history items\n        -d, --date                       Include date in output\n            --[no-]all                   Display all history items\n\nYou can check out what the recent builds look like:\n\n``` console\n$ travis history\n#77 passed:   master fix name clash\n#76 failed:   master Merge pull request #11 from travis-ci/rkh-show-logs-history\n#75 passed:   rkh-debug what?\n#74 passed:   rkh-debug all tests pass locally and on the travis vm I spin up :(\n#73 failed:   Pull Request #11 regenerate gemspec\n#72 passed:   rkh-show-logs-history regenerate gemspec\n#71 failed:   Pull Request #11 spec fix for (older) rubinius\n#70 passed:   rkh-show-logs-history spec fix for (older) rubinius\n#69 failed:   Pull Request #11 strange fix for rubinius\n#68 failed:   rkh-show-logs-history strange fix for rubinius\n```\n\nBy default, it will display the last 10 builds. You can limit (or extend) the number of builds with `--limit`:\n\n``` console\n$ travis history --limit 2\n#77 passed:   master fix name clash\n#76 failed:   master Merge pull request #11 from travis-ci/rkh-show-logs-history\n```\n\nYou can use `--after` to display builds after a certain build number (or, well, before, but it's called after to use the same phrases as the API):\n\n``` console\n$ travis history --limit 2 --after 76\n#75 passed:   rkh-debug what?\n#74 passed:   rkh-debug all tests pass locally and on the travis vm I spin up :(\n```\n\nYou can also limit the history to builds for a certain branch:\n\n``` console\n$ travis history --limit 3 --branch master\n#77 passed:   master fix name clash\n#76 failed:   master Merge pull request #11 from travis-ci/rkh-show-logs-history\n#57 passed:   master Merge pull request #5 from travis-ci/hh-multiline-encrypt\n```\n\nOr a certain Pull Request:\n\n``` console\n$ travis history --limit 3 --pull-request 5\n#56 passed:   Pull Request #5 Merge branch 'master' into hh-multiline-encrypt\n#49 passed:   Pull Request #5 improve output\n#48 passed:   Pull Request #5 let it generate accessor for line splitting automatically\n```\n\n#### `init`\n\n    Usage: travis init [language] [file] [options]\n        -h, --help                       Display help\n        -i, --[no-]interactive           be interactive and colorful\n        -E, --[no-]explode               don't rescue exceptions\n            --skip-version-check         don't check if travis client is up to date\n        -e, --api-endpoint URL           Travis API server to talk to\n            --com                        short-cut for --api-endpoint 'https://api.travis-ci.com/'\n            --org                        short-cut for --api-endpoint 'https://api.travis-ci.org/'\n        -t, --token [ACCESS_TOKEN]       access token to use\n            --debug                      show API requests\n            --adapter ADAPTER            Faraday adapter to use for HTTP requests\n        -r, --repo SLUG                  repository to use (will try to detect from current git clone)\n        -R, --store-repo SLUG            like --repo, but remembers value for current directory\n        -s, --skip-sync                  don't trigger a sync if the repo is unknown\n        -f, --force                      override .travis.yml if it already exists\n        -k, --skip-enable                do not enable project, only add .travis.yml\n        -p, --print-conf                 print generated config instead of writing to file\n            --script VALUE               sets script option in .travis.yml (can be used more than once)\n            --before-script VALUE        sets before_script option in .travis.yml (can be used more than once)\n            --after-script VALUE         sets after_script option in .travis.yml (can be used more than once)\n            --after-success VALUE        sets after_success option in .travis.yml (can be used more than once)\n            --install VALUE              sets install option in .travis.yml (can be used more than once)\n            --before-install VALUE       sets before_install option in .travis.yml (can be used more than once)\n            --compiler VALUE             sets compiler option in .travis.yml (can be used more than once)\n            --otp-release VALUE          sets otp_release option in .travis.yml (can be used more than once)\n            --go VALUE                   sets go option in .travis.yml (can be used more than once)\n            --jdk VALUE                  sets jdk option in .travis.yml (can be used more than once)\n            --node-js VALUE              sets node_js option in .travis.yml (can be used more than once)\n            --perl VALUE                 sets perl option in .travis.yml (can be used more than once)\n            --php VALUE                  sets php option in .travis.yml (can be used more than once)\n            --python VALUE               sets python option in .travis.yml (can be used more than once)\n            --rvm VALUE                  sets rvm option in .travis.yml (can be used more than once)\n            --scala VALUE                sets scala option in .travis.yml (can be used more than once)\n            --env VALUE                  sets env option in .travis.yml (can be used more than once)\n            --gemfile VALUE              sets gemfile option in .travis.yml (can be used more than once)\n\nWhen setting up a new project, you can run `travis init` to generate a `.travis.yml` and [enable](#enable) the project:\n\n``` console\n$ travis init java\n.travis.yml file created!\ntravis-ci/java-example: enabled :)\n```\n\nYou can also set certain values via command line flags (see list above):\n\n``` console\n$ travis init c --compiler clang\n.travis.yml file created!\ntravis-ci/c-example: enabled :)\n```\n\n#### `logs`\n\nGiven a job number, logs simply prints out that job's logs. By default it will display the first job of the latest build.\n\n``` console\n$ travis logs\ndisplaying logs for travis-ci/travis.rb#317.1\n[... more logs ...]\nYour bundle is complete! Use `bundle show [gemname]` to see where a bundled gem is installed.\n$ bundle exec rake\n/home/travis/.rvm/rubies/ruby-1.8.7-p371/bin/ruby -S rspec spec -c\n..............................................................................................................................................................................................................................................................................\n\nFinished in 4.46 seconds\n270 examples, 0 failures\n\nDone. Build script exited with: 0\n```\n\nThe info line about the job being displayed is written to stderr, the logs itself are written to stdout.\n\nIt takes an optional argument that can be a job number:\n\n``` console\n$ travis logs 100.3\ndisplaying logs for travis-ci/travis.rb#100.3\n```\n\nA build number (in which case it will pick the build's first job):\n\n``` console\n$ travis logs 100\ndisplaying logs for travis-ci/travis.rb#100.1\n```\n\nJust the job suffix, which will pick the corresponding job from the latest build:\n\n``` console\n$ travis logs .2\ndisplaying logs for travis-ci/travis.rb#317.2\n```\n\nA branch name:\n\n``` console\n$ travis logs ghe\ndisplaying logs for travis-ci/travis.rb#270.1\n```\n\nYou can delete the logs with the `--delete` flag, which optionally takes a reason as argument:\n\n``` console\n$ travis logs --delete\nDANGER ZONE: Do you really want to delete the build log for travis-ci/travis.rb#559.1? |no| yes\ndeleting log for travis-ci/travis.rb#559.1\n$ travis logs 1.7 --delete \"contained confidential data\" --force\ndeleting log for travis-ci/travis.rb#1.7\n```\n\n#### `open`\n\nOpens the project view in the Travis CI web interface. If you pass it a build or job number, it will open that specific view:\n\n``` console\n$ travis open\n```\n\nIf you just want the URL printed out instead of opened in a browser, pass `--print`.\n\nIf instead you want to open the repository, compare or pull request view on GitHub, use `--github`.\n\n``` console\n$ travis open 56 --print --github\nweb view: https://github.com/travis-ci/travis.rb/pull/5\n```\n\n#### `pubkey`\n\nOutputs the public key for a repository.\n\n``` console\n$ travis pubkey\nPublic key for travis-ci/travis.rb:\n\nssh-rsa ...\n$ travis pubkey -r rails/rails > rails.key\n```\n\nThe `--pem` flag will print out the key PEM encoded:\n\n``` console\n$ travis pubkey --pem\nPublic key for travis-ci/travis.rb:\n\n-----BEGIN PUBLIC KEY-----\n...\n-----END PUBLIC KEY-----\n```\n\nWhereas the `--fingerprint` flag will print out the key's fingerprint:\n\n``` console\n$ travis pubkey --fingerprint\nPublic key for travis-ci/travis.rb:\n\n9f:57:01:4b:af:42:67:1e:b4:3c:0f:b6:cd:cc:c0:04\n```\n\n#### `requests`\n\nWith the `requests` command, you can list the build requests received by Travis CI from GitHub. This is handy for figuring out why a repository might not be building.\n\n``` console\n$ travis requests -r sinatra/sinatra\npush to master accepted (triggered new build)\n  abc51e2 - Merge pull request #847 from gogotanaka/add_readme_ja\n  received at: 2014-02-16 09:26:36\n\nPR #843 rejected (skipped through commit message)\n  752201c - Update Spanish README with tense, verb, and word corrections. [ci skip]\n  received at: 2014-02-16 05:07:16\n```\n\nYou can use `-l`/`--limit` to limit the number of requests displayed.\n\n#### `restart`\n\nThis command will restart the latest build:\n\n``` console\n$ travis restart\nbuild #85 has been restarted\n```\n\nYou can also restart any build by giving a build number:\n\n``` console\n$ travis restart 57\nbuild #57 has been restarted\n```\n\nOr a single job:\n\n``` console\n$ travis restart 57.1\njob #57.1 has been restarted\n```\n\n##### `settings`\n\nCertain repository settings can be read via the CLI:\n\n``` console\n$ travis settings\nSettings for travis-ci/travis.rb:\n[-] builds_only_with_travis_yml    Only run builds with a .travis.yml\n[+] build_pushes                   Build pushes\n[+] build_pull_requests            Build pull requests\n[-] maximum_number_of_builds       Maximum number of concurrent builds\n```\n\nYou can also filter the settings by passing them in as arguments:\n\n``` console\n$ travis settings build_pushes build_pull_requests\nSettings for travis-ci/travis.rb:\n[+] build_pushes                   Build pushes\n[+] build_pull_requests            Build pull requests\n```\n\nIt is also possible to change these settings via `--enable`, `--disable` and `--set`:\n\n``` console\n$ travis settings build_pushes --disable\nSettings for travis-ci/travis.rb:\n[-] build_pushes                   Build pushes\n$ travis settings maximum_number_of_builds --set 1\nSettings for travis-ci/travis.rb:\n  1 maximum_number_of_builds       Maximum number of concurrent builds\n```\n\nOr, alternatively, you can use `-c` to configure the settings interactively:\n\n``` console\n$ travis settings -c\nSettings for travis-ci/travis.rb:\nOnly run builds with a .travis.yml? |yes| no\nBuild pushes? |no| yes\nBuild pull requests? |yes|\nMaximum number of concurrent builds: |1| 5\n```\n\n#### `setup`\n\nHelps you configure Travis addons.\n\n    Usage: travis setup service [options]\n        -h, --help                       Display help\n        -i, --[no-]interactive           be interactive and colorful\n        -E, --[no-]explode               don't rescue exceptions\n            --skip-version-check         don't check if travis client is up to date\n        -e, --api-endpoint URL           Travis API server to talk to\n            --com                        short-cut for --api-endpoint 'https://api.travis-ci.com/'\n            --org                        short-cut for --api-endpoint 'https://api.travis-ci.org/'\n        -t, --token [ACCESS_TOKEN]       access token to use\n            --debug                      show API requests\n            --adapter ADAPTER            Faraday adapter to use for HTTP requests\n        -r, --repo SLUG                  repository to use (will try to detect from current git clone)\n        -R, --store-repo SLUG            like --repo, but remembers value for current directory\n        -f, --force                      override config section if it already exists\n\nAvailable services: `anynines`, `appfog`, `artifacts`, `biicode`, `cloudcontrol`, `cloudfiles`, `cloudfoundry`, `cloud66`, `codedeploy`, `deis`, `divshot`, `elasticbeanstalk`, `engineyard`, `gcs`, `hackage`, `heroku`, `modulus`, `npm`, `ninefold`, `nodejitsu`, `openshift`, `opsworks`, `pypi`, `releases`, `rubygems`, `s3` and `sauce_connect`.\n\nExample:\n\n``` console\n$ travis setup heroku\nDeploy only from travis-ci/travis-chat? |yes|\nEncrypt API key? |yes|\n```\n\n#### `show`\n\nDisplays general info about the latest build:\n\n``` console\n$ travis show\nBuild #77: fix name clash\nState:         passed\nType:          push\nCompare URL:   https://github.com/travis-ci/travis.rb/compare/7cc9b739b0b6...39b66ee24abe\nDuration:      5 min 51 sec\nStarted:       2013-01-19 19:00:49\nFinished:      2013-01-19 19:02:17\n\n#77.1 passed:    45 sec         rvm: 1.8.7\n#77.2 passed:    50 sec         rvm: 1.9.2\n#77.3 passed:    45 sec         rvm: 1.9.3\n#77.4 passed:    46 sec         rvm: 2.0.0\n#77.5 failed:    1 min 18 sec   rvm: jruby (failure allowed)\n#77.6 passed:    1 min 27 sec   rvm: rbx\n```\n\nAny other build:\n\n``` console\n$ travis show 1\nBuild #1: add .travis.yml\nState:         failed\nType:          push\nCompare URL:   https://github.com/travis-ci/travis.rb/compare/ad817bc37c76...b8c5d3b463e2\nDuration:      3 min 16 sec\nStarted:       2013-01-13 23:15:22\nFinished:      2013-01-13 23:21:38\n\n#1.1 failed:     21 sec         rvm: 1.8.7\n#1.2 failed:     34 sec         rvm: 1.9.2\n#1.3 failed:     24 sec         rvm: 1.9.3\n#1.4 failed:     52 sec         rvm: 2.0.0\n#1.5 failed:     38 sec         rvm: jruby\n#1.6 failed:     27 sec         rvm: rbx\n```\n\nThe last build for a given branch:\n\n``` console\n$ travis show rkh-debug\nBuild #75: what?\nState:         passed\nType:          push\nBranch:        rkh-debug\nCompare URL:   https://github.com/travis-ci/travis.rb/compare/8d4aa5254359...7ef33d5e5993\nDuration:      6 min 16 sec\nStarted:       2013-01-19 18:51:17\nFinished:      2013-01-19 18:52:43\n\n#75.1 passed:    1 min 10 sec   rvm: 1.8.7\n#75.2 passed:    51 sec         rvm: 1.9.2\n#75.3 passed:    36 sec         rvm: 1.9.3\n#75.4 passed:    48 sec         rvm: 2.0.0\n#75.5 failed:    1 min 26 sec   rvm: jruby (failure allowed)\n#75.6 passed:    1 min 25 sec   rvm: rbx\n```\n\nOr a job:\n\n``` console\n$ travis show 77.3\nJob #77.3: fix name clash\nState:         passed\nType:          push\nCompare URL:   https://github.com/travis-ci/travis.rb/compare/7cc9b739b0b6...39b66ee24abe\nDuration:      45 sec\nStarted:       2013-01-19 19:00:49\nFinished:      2013-01-19 19:01:34\nAllow Failure: false\nConfig:        rvm: 1.9.3\n```\n\n#### `sshkey`\n\n    Checks, updates or deletes an SSH key.\n    Usage: travis sshkey [OPTIONS]\n        -h, --help                       Display help\n        -i, --[no-]interactive           be interactive and colorful\n        -E, --[no-]explode               don't rescue exceptions\n        -e, --api-endpoint URL           Travis API server to talk to\n        -I, --[no-]insecure              do not verify SSL certificate of API endpoint\n            --com                        short-cut for --api-endpoint 'https://api.travis-ci.com/'\n            --org                        short-cut for --api-endpoint 'https://api.travis-ci.org/'\n        -t, --token [ACCESS_TOKEN]       access token to use\n            --debug                      show API requests\n        -X, --enterprise [NAME]          use enterprise setup (optionally takes name for multiple setups)\n        -r, --repo SLUG                  repository to use (will try to detect from current git clone)\n        -R, --store-repo SLUG            like --repo, but remembers value for current directory\n        -D, --delete                     remove SSH key\n        -d, --description DESCRIPTION    set description\n        -u, --upload FILE                upload key from given file\n        -s, --stdin                      upload key read from stdin\n        -c, --check                      set exit code depending on key existing\n        -g, --generate                   generate SSH key and set up for given GitHub user\n        -p, --passphrase PASSPHRASE      pass phrase to decrypt with when using --upload\n\n*This feature is for [private and Enterprise](#travis-ci-and-travis-ci-enterprise) only.*\n\nWith the `sshkey` command you can check if there is a custom SSH key set up. Custom SSH keys are used for cloning the repository.\n\n``` console\n$ travis sshkey\nNo custom SSH key installed.\n```\n\nYou can also use it to upload an SSH key:\n\n``` console\n$ travis sshkey --upload ~/.ssh/id_rsa\nKey description: Test Key\nupdating ssh key for travis-pro/test-project with key from /Users/konstantin/.ssh/id_rsa\nCurrent SSH key: Test Key\n```\n\nAnd to remove it again:\n\n``` console\n$ travis sshkey --delete\nDANGER ZONE: Remove SSH key for travis-pro/test-project? |no| yes\nremoving ssh key for travis-pro/test-project\nNo custom SSH key installed.\n```\n\nYou can also have it generate a key for a given GitHub user (for instance, for a dedicated CI user that only has read access). The public key will automatically be added to GitHub and the private key to Travis CI:\n\n``` console\n$ travis sshkey --generate\nWe need the GitHub login for the account you want to add the key to.\nThis information will not be sent to Travis CI, only to api.github.com.\nThe password will not be displayed.\n\nUsername: travisbot\nPassword for travisbot: **************\n\nGenerating RSA key.\nUploading public key to GitHub.\nUploading private key to Travis CI.\n```\n\nSee [Private Dependencies](https://docs.travis-ci.com/user/private-dependencies/) for an in-detail description.\n\n#### `status`\n\n    Usage: travis status [options]\n        -h, --help                       Display help\n        -i, --[no-]interactive           be interactive and colorful\n        -E, --[no-]explode               don't rescue exceptions\n        -e, --api-endpoint URL           Travis API server to talk to\n            --com                        short-cut for --api-endpoint 'https://api.travis-ci.com/'\n            --org                        short-cut for --api-endpoint 'https://api.travis-ci.org/'\n        -t, --token [ACCESS_TOKEN]       access token to use\n            --debug                      show API requests\n        -r, --repo SLUG                  repository to use (will try to detect from current git clone)\n        -R, --store-repo SLUG            like --repo, but remembers value for current directory\n        -x, --[no-]exit-code             sets the exit code to 1 if the build failed\n        -q, --[no-]quiet                 does not print anything\n        -p, --[no-]fail-pending          sets the status code to 1 if the build is pending\n\nOutputs a one line status message about the project's last build. With `-q` that line will even not be printed out. How's that useful? Combine it with `-x` and the exit code will be 1 if the build failed, with `-p` and it will be 1 for a pending build.\n\n``` console\n$ travis status -qpx && cap deploy\n```\n\n### Travis CI and Travis CI Enterprise\n\nBy default, [General API Commands](#general-api-commands) will talk to [api.travis-ci.org](https://api.travis-ci.org). You can change this by supplying `--com` for [api.travis-ci.com](https://api.travis-ci.com) or `--api-endpoint` with your own endpoint. Note that all [Repository Commands](#repository-commands) will try to figure out the API endpoint to talk to automatically depending on the project's visibility on GitHub.\n\n``` console\n$ travis login --com\n...\n$ travis monitor --com -m\n...\n```\n\nThe custom `--api-endpoint` option is handy for local development:\n\n``` console\n$ travis whatsup --api-endpoint http://localhost:3000\n...\n```\n\nIf you have a Travis Enterprise setup in house, you can use the `--enterprise` option (or short `-X`). It will ask you for the enterprise domain the first time it is used.\n\n``` console\n$ travis login -X\nEnterprise domain: travisci.example.com\n...\n$ travis whatsup -X\n...\n```\n\nNote that currently [Repository Commands](#repository-commands) will not be able to detect Travis Enterprise automatically. You will have to use the `-X` flag at least once per repository. The command line tool will remember the API endpoint for subsequent commands issued against the same repository.\n\n### Environment Variables\n\nYou can set the following environment variables to influence the travis behavior:\n\n* `$TRAVIS_TOKEN` - access token to use when the `--token` flag is not used\n* `$TRAVIS_ENDPOINT` - API endpoint to use when the `--api-endpoint`, `--org` or `--com` flag is not used\n* `$TRAVIS_CONFIG_PATH` - directory to store configuration in (defaults to ~/.travis)\n\n### Desktop Notifications\n\nSome commands support sending desktop notifications. The following notification systems are currently supported:\n\n* **Notification Center** - requires Mac OSX 10.8 or later and [Notification Center](http://support.apple.com/kb/ht5362) must be running under the system executing the `travis` command.\n* **Growl** - [growlnotify](http://growl.info/downloads#generaldownloads) has to be installed and [Growl](https://itunes.apple.com/us/app/growl/id467939042?mt=12&ign-mpt=uo%3D4) needs to be running. Does currently not support the Windows version of Growl.\n* **libnotify** - needs [libnotify](http://www.linuxfromscratch.org/blfs/view/svn/x/libnotify.html) installed, including the `notify-send` executable.\n\n### Plugins\n\nThe `travis` binary has rudimentary support for plugins: It tries to load all files matching `~/.travis/*/init.rb`. Note that the APIs plugins use are largely semi-private. That is, they should remain stable, but are not part of the public API covered by semantic versioning. You can list the installed plugins via [`travis report`](#report).\n\nIt is possible to define new commands directly in the [init.rb](https://github.com/travis-ci/travis-build/blob/master/init.rb) or to set up [lazy-loading](https://github.com/travis-ci/travis-cli-pr/blob/master/init.rb) for these.\n\n#### Official Plugins\n\n* [travis-cli-gh](https://github.com/travis-ci/travis-cli-gh#readme): Plugin for interacting with the GitHub API.\n\n## Ruby Library\n\nThere are two approaches of using the Ruby library, one straight forward with one global session:\n\n``` ruby\nrequire 'travis'\n\nrails = Travis::Repository.find('rails/rails')\nputs \"oh no\" unless rails.green?\n```\n\nAnd one where you have to instantiate your own session:\n\n``` ruby\nrequire 'travis/client'\n\nclient = Travis::Client.new\nrails  = client.repo('rails/rails')\nputs \"oh no\" unless rails.green?\n```\n\nFor most parts, those are pretty much the same, the entities you get back look the same, etc, except one offers nice constants as part of the API, the other doesn't. In fact the \"global\" session style uses `Travis::Client` internally.\n\nSo, which one to choose? The global style has one session, whereas with the client style, you have one session per client instance. Each session has its own cache and identity map. This might matter for long running processes. If you use a new session for separate units of work, you can be pretty sure to not leak any objects. On the other hand using the constants or reusing the same session might save you from unnecessary HTTP requests.\n\nIn either way, if you should use the first approach or long living clients, here is how you make sure not to have stale data around:\n\n``` ruby\nTravis.clear_cache\nclient.clear_cache\n```\n\nNote that this will still keep the identity map around, it will only drop all attributes. To clear the identity map, you can use the `clear_cache!` method. However, if you do that, you should not keep old instances of any entities (like repositories, etc) around.\n\n### Authentication\n\nAuthentication is pretty easy, you just need to set an access token:\n\n``` ruby\nrequire 'travis'\n\nTravis.access_token = \"...\"\nputs \"Hello #{Travis::User.current.name}!\"\n```\n\nOr with your own client instance:\n\n``` ruby\nrequire 'travis/client'\n\nclient = Travis::Client.new(access_token: \"...\")\nputs \"Hello #{client.user.name}\"\n```\n\nSee [the token command](#token) for obtaining the access token used by the CLI.\n\nIf you don't have an access token for Travis CI, you can use a GitHub access token to get one:\n\n``` ruby\nrequire 'travis'\n\nTravis.github_auth(\"...\")\nputs \"Hello #{Travis::User.current.name}!\"\n```\n\nTravis CI will not store that token.\n\nThere is also `travis/auto_login`, which will try to read the CLI configuration or .netrc for a Travis CI or GitHub token to authenticate with automatically:\n\n``` ruby\nrequire 'travis/auto_login'\nputs \"Hello #{Travis::User.current.name}!\"\n```\n\n### Using Pro\n\nUsing the library with private projects pretty much works the same, except you use `Travis::Pro`.\n\nKeep in mind that you need to authenticate.\n\n``` ruby\nrequire 'travis/pro'\n\nTravis::Pro.access_token = '...'\nuser = Travis::Pro::User.current\n\nputs \"Hello #{user.name}!\"\n```\n\nThere is also `travis/pro/auto_login`, which will try to read the CLI configuration or .netrc for a Travis CI or GitHub token to authenticate with automatically:\n\n``` ruby\nrequire 'travis/pro/auto_login'\nputs \"Hello #{Travis::Pro::User.current.name}!\"\n```\n\n### Entities\n\nEntities are like the models in the Travis Client land. They keep the data and it's usually them you talk to if you want something.\nThey are pretty much normal Ruby objects.\n\nThe Travis session will cache all entities, so don't worry about loading the same one twice.\nOnce you got a hold of one, you can easily reload it at any time if you want to make sure the data is fresh:\n\n``` ruby\nrails = Travis::Repository.find('rails/rails')\nsleep 1.hour\nrails.reload\n```\n\nThe travis gem supports lazy and partial loading, so if you want to make sure you have all the data, just call load.\n\n``` ruby\nrails.load\n```\n\nThis is not something you should usually do, as partial loading is actually your friend (keeps requests to a minimum).\n\n\n#### Stateful Entities\n\n[Repositories](#repositories), [Builds](#builds) and [Jobs](#jobs) all are basically state machines, which means they implement the following methods:\n\n``` ruby\nrequire 'travis'\nbuild = Travis::Repository.find('rails/rails').last_build\n\np build.canceled?\np build.created?\np build.errored?\np build.failed?\np build.finished?\np build.green?\np build.passed?\np build.pending?\np build.queued?\np build.red?\np build.running?\np build.started?\np build.successful?\np build.unsuccessful?\np build.yellow?\np build.color\n```\n\nBuilds and jobs also have a `state` method. For repositories, use `last_build.state`.\n\n#### Repositories\n\nRepositories are probably one of the first entities you'll load. It's pretty straight forward, too.\n\n``` ruby\nrequire 'travis'\n\nTravis::Repository.find('rails/rails')            # find by slug\nTravis::Repository.find(891)                      # find by id\nTravis::Repository.find_all(owner_name: 'rails')  # all repos in the rails organization\nTravis::Repository.current                        # repos that see some action right now\n\n# all repos with the same owner as the repo with id 891\nTravis::Repository.find(891).owner.repositories\n```\n\nOnce you have a repository, you can for instance encrypt some strings with its private key:\n\n``` ruby\nrequire 'travis'\n\nTravis::Repository.find('rails/rails')\nputs repo.encrypt('FOO=bar')\n```\n\nRepositories are [stateful](#stateful-entities).\n\nYou can enable or disable a repository with the methods that go by the same name.\n\n``` ruby\nrails.disable\nsystem \"push all the things\"\nrails.enable\n```\n\nIf you want to enable a new project, you might have to do a sync first.\n\n#### Builds\n\nYou could load a build by its id using `Travis::Build.find`. But most of the time you won't have the id handy, so you'd usually start with a repository.\n\n``` ruby\nrequire 'travis'\nrails = Travis::Repository.find('rails/rails')\n\nrails.last_build               # the latest build\nrails.recent_builds            # the last 20 or so builds (don't rely on that number)\nrails.builds(after_number: 42) # the last 20 or so builds *before* 42\nrails.build(42)                # build with the number 42 (not the id!)\nrails.builds                   # Enumerator for #each_build\n\n# this will loop through all builds\nrails.each_build do |build|\n  puts \"#{build.number}: #{build.state}\"\nend\n\n# this will loop through all builds before build 42\nrails.each_build(after_number: 42) do |build|\n  puts \"#{build.number}: #{build.state}\"\nend\n```\n\nNote that `each_build` (and thus `builds` without and argument) is lazy and uses pagination, so you can safely do things like this:\n\n``` ruby\nbuild = rails.builds.detect { |b| b.failed? }\nputs \"Last failing Rails build: #{build.number}\"\n```\n\nWithout having to load more than 6000 builds.\n\nYou can restart a build, if the current user has sufficient permissions on the repository:\n\n``` ruby\nrails.last_build.restart\n```\n\nSame goes for canceling it:\n\n``` ruby\nrails.last_build.cancel\n```\n\nYou can also retrieve a Hash mapping branch names to the latest build on that given branch via `branches` or use the `branch` method to get the last build for a specific branch:\n\n``` ruby\nif rails.branch('4-0-stable').green?\n  puts \"Time for another 4.0.x release!\"\nend\n\ncount = rails.branches.size\nputs \"#{count} rails branches tested on travis\"\n```\n\n#### Jobs\n\nJobs behave a lot like [builds](#builds), and similar to them, you probably don't have the id ready. You can get the jobs from a build:\n\n``` ruby\nrails.last_build.jobs.each do |job|\n  puts \"#{job.number} took #{job.duration} seconds\"\nend\n```\n\nIf you have the job number, you can also reach a job directly from the repository:\n\n``` ruby\nrails.job('5000.1')\n```\n\nLike builds, you can also restart singe jobs:\n\n``` ruby\nrails.job('5000.1').restart\n```\n\nSame goes for canceling it:\n\n``` ruby\nrails.job('5000.1').cancel\n```\n\n#### Artifacts\n\nThe artifacts you usually care for are probably logs. You can reach them directly from a build:\n\n``` ruby\nrequire 'travis'\n\nrepo = Travis::Repository.find('travis-ci/travis.rb')\njob  = repo.last_build.jobs.first\nputs job.log.body\n```\n\nIf you plan to print out the body, be aware that it might contain malicious escape codes. For this reason, we added `colorized_body`, which removes all the unprintable characters, except for ANSI color codes, and `clean_body` which also removes the color codes.\n\n``` ruby\nputs job.log.colorized_body\n````\n\nYou can stream a body for a job that is currently running by passing a block:\n\n``` ruby\njob.log.body { |chunk| print chunk }\n```\n\n#### Users\n\nThe only user you usually get access to is the currently authenticated one.\n\n``` ruby\nrequire 'travis'\n\nTravis.access_token = '...'\nuser = Travis::User.current\n\nputs \"Hello, #{user.login}! Or should I call you... #{user.name.upcase}!?\"\n```\n\nIf some data gets out of sync between GitHub and Travis, you can use the user object to trigger a new sync.\n\n``` ruby\nTravis::User.current.sync\n```\n\n#### Commits\n\nCommits cannot be loaded directly. They come as a byproduct of [jobs](#jobs) and [builds](#builds).\n\n``` ruby\nrequire 'travis'\n\nrepo   = Travis::Repository.find('travis-ci/travis.rb')\ncommit = repo.last_build.commit\n\nputs \"Last tested commit: #{commit.short_sha} on #{commit.branch} by #{commit.author_name} - #{commit.subject}\"\n```\n\n#### Caches\n\nCaches can be fetched for a repository.\n\n``` ruby\nrequire 'travis/pro'\n\nTravis::Pro.access_token = \"MY SECRET TOKEN\"\nrepo = Travis::Pro::Repository.find(\"my/rep\")\n\nrepo.caches.each do |cache|\n  puts \"#{cache.branch}: #{cache.size}\"\n  cache.delete\nend\n```\n\nIt is also possible to delete multiple caches with a single API call:\n\n``` ruby\nrepo.delete_caches(branch: \"master\", match: \"rbx\")\n```\n\n#### Repository Settings\n\nYou can access a repositories settings via `Repository#settings`:\n\n``` ruby\nrequire 'travis'\n\nTravis.access_token = \"MY SECRET TOKEN\"\nsettings = Travis::Repository.find('my/repo').settings\n\nif settings.build_pushes?\n  settings.build_pushes  = false\n  settings.save\nend\n```\n\n#### Build Environment Variables\n\nYou can access environment variables via `Repository#env_vars`:\n\n``` ruby\nrequire 'travis'\n\nTravis.access_token = \"MY SECRET TOKEN\"\nenv_vars = Travis::Repository.find('my/repo').env_vars\n\nenv_vars['foo'] = 'bar'\nenv_vars.upsert('foo', 'foobar', public: true)\nenv_vars.each { |var| var.delete }\n```\n\n### Dealing with Sessions\n\nUnder the hood the session is where the fun is happening. Most methods on the constants and entities just wrap methods on your session, so you don't have to pass the session around all the time or even see it if you don't want to.\n\nThere are two levels of session methods, the higher level methods from the `Travis::Client::Methods` mixin, which are also available from `Travis`, `Travis::Pro` or any custom [Namespace](#using-namespaces).\n\n``` ruby\nrequire 'travis/client/session'\nsession = Travis::Client::Session.new\n\nsession.access_token = \"secret_token\"           # access token to use\nsession.api_endpoint = \"http://localhost:3000/\" # api endpoint to talk to\nsession.github_auth(\"github_token\")             # log in with a github token\nsession.repos(owner_name: 'travis-ci')          # all travis-ci/* projects\nsession.repo('travis-ci/travis.rb')             # this project\nsession.repo(409371)                            # same as the one above\nsession.build(4266036)                          # build with id 4266036\nsession.job(4266037)                            # job with id 4266037\nsession.artifact(42)                            # artifact with id 42\nsession.log(42)                                 # same as above\nsession.user                                    # the current user, if logged in\nsession.restart(session.build(4266036))         # restart some build\nsession.cancel(session.build(4266036))          # cancel some build\n```\n\nYou can add these methods to any object responding to `session` via said mixin.\n\nBelow this, there is a second API, close to the HTTP level:\n\n``` ruby\nrequire 'travis/client/session'\nsession = Travis::Client::Session.new\n\nsession.instrument do |description, block|\n  time = Time.now\n  block.call\n  puts \"#{description} took #{Time.now - time} seconds\"\nend\n\nsession.connection = Faraday::Connection.new\n\nsession.get_raw('/repos/rails/rails') # => {\"repo\" => {\"id\" => 891, \"slug\" => \"rails/rails\", ...}}\nsession.get('/repos/rails/rails')     # => {\"repo\" => #<Travis::Client::Repository: rails/rails>}\nsession.headers['Foo'] = 'Bar'        # send a custom HTTP header with every request\n\nrails = session.find_one(Travis::Client::Repository, 'rails/rails')\n\nsession.find_many(Travis::Client::Repository)  # repositories with the latest builds\nsession.find_one_or_many(Travis::Client::User) # the current user (you could also use find_one here)\n\nsession.reload(rails)\nsession.reset(rails)  # lazy reload\n\nsession.clear_cache   # empty cached attributes\nsession.clear_cache!  # empty identity map\n```\n\n### Listening for Events\n\nYou can use the `listen` method to listen for events on repositories, builds or jobs:\n\n``` ruby\nrequire 'travis'\n\nrails   = Travis::Repository.find(\"rails/rails\")\nsinatra = Travis::Repository.find(\"sinatra/sinatra\")\n\nTravis.listen(rails, sinatra) do |stream|\n  stream.on('build:started', 'build:finished') do |event|\n    # ie \"rails/rails just passed\"\n    puts \"#{event.repository.slug} just #{event.build.state}\"\n  end\nend\n```\n\nCurrent events are `build:created`, `build:started`, `build:finished`, `job:created`, `job:started`, `job:finished` and `job:log` (the last one only when subscribing to jobs explicitly). Not passing any arguments to `listen` will monitor the global stream.\n\n### Using Namespaces\n\n`Travis` and `Travis::Pro` are just two different namespaces for two different Travis sessions. A namespace is a Module, exposing the higher level [session methods](#dealing-with-sessions). It also has a dummy constant for every [entity](#entities), wrapping `find_one` (aliased to `find`) and `find_many` (aliased to `find_all`) for you, so you don't have to keep track of the session or hand in the entity class. You can easily create your own namespace:\n\n``` ruby\nrequire 'travis/client'\nMyTravis = Travis::Client::Namespaces.new(\"http://localhost:3000\")\n\nMyTravis.access_token = \"...\"\nMyTravis::Repository.find(\"foo/bar\")\n```\n\nSince namespaces are Modules, you can also include them.\n\n``` ruby\nrequire 'travis/client'\n\nclass MyTravis\n  include Travis::Client::Namespaces.new\nend\n\nMyTravis::Repository.find('rails/rails')\n```\n\n## Installation\n\nMake sure you have at least [Ruby](http://www.ruby-lang.org/en/downloads/) 2.3.0 (2.6.0 recommended) installed.\n\nYou can check your Ruby version by running `ruby -v`:\n\n    $ ruby -v\n    ruby 2.3.0p0 (2015-12-25 revision 53290) [x86_64-linux]\n\nThen run:\n\nOn OSX and Linux:\n\n    $ gem install travis --no-document\n\n(For older versions of `gem`, replace `--no-document` with `--no-rdoc --no-ri`.)\n\nOn Windows:\n\n    $ gem install travis\n\nIf you do not have write access to the system gem directory, you'll need to perform a local install by adding ```--user-install```. You also need to ensure the local gem directory is on your PATH.\n\nNow make sure everything is working:\n\n    $ travis version\n    1.10.0\n\nSee also [Note on Ubuntu](#ubuntu) below.\n\n### Note on Ruby 2.3\n\nFor Ruby 2.3.x, be sure to have a compatible version of `faraday` installed; e.g.,\n\n    $ gem install faraday -v 1.0.1\n\n### Development Version\n\nYou can also install the development version via RubyGems:\n\n    $ gem install travis --pre\n\nWe automatically publish a new development version after every successful build.\n\n### Running Locally\n\nIf you want to try out your changes locally:\n\n```\nbundle install # install the dependencies\nbundle exec bin/travis a-command # run your command\n```\n\n### Updating your Ruby\n\nIf you have an outdated Ruby version, or your OS doesn't come with Ruby pre-installed,\nyou should use your package system or a Ruby Installer to install a recent Ruby.\n\n#### Mac OS X via Homebrew\n\nYou can use [Homebrew](http://mxcl.github.io/homebrew/) to install a recent version:\n\n    $ brew install ruby\n    $ gem update --system\n\n#### Windows\n\nOn Windows, we recommend using the [RubyInstaller](http://rubyinstaller.org/), which includes the latest version of Ruby.\n\n#### Other Unix systems\n\nOn other Unix systems, like Linux, use your package system to install Ruby.\n\nDebian, Ubuntu:\n\n    $ sudo apt-get update\n    $ sudo apt-get install ruby\n\nFor other Linux distributions, refer to their respective documentation.\n\n#### Ruby versioning tools\n\nAlternatively, you can use a Ruby version management tool such as [rvm](https://rvm.io/rvm/install/), [rbenv](http://rbenv.org/) or [chruby](https://github.com/postmodern/chruby). This is only recommended if you need to run multiple versions of Ruby.\n\nYou can of course always compile Ruby from source, though then you are left with the hassle of keeping it up to date and making sure that everything is set up properly.\n\n### Troubleshooting\n\n#### Upgrading from travis-cli\n\nIf you have the old `travis-cli` gem installed, you should `gem uninstall travis-cli`, just to be sure, as it ships with an executable that is also named `travis`.\n\n#### `uninitialized constant Faraday::Error::ConnectionFailed`\n\nYou might see this error message if you have Typhoeus version prior to version 1.4.0\nand Faraday 1.0 and up.\nYou can eradicate this problem by either:\n\n1. Update Typhoeus to version 1.4.0 or later\n1. Remove typhoeus entirely\n\nSee https://github.com/travis-ci/travis.rb/issues/768#issuecomment-700220351 for more details.\n\n## Version History\n\n### 1.11.1\n\n* Fix `travis sshkey --generate` https://github.com/travis-ci/travis.rb/pull/820\n\n### 1.11.0\n\n* Removed authentication with password https://github.com/travis-ci/travis.rb/pull/811\n\n### 1.10.1\n\n* Fix `travis monitor` command https://github.com/travis-ci/travis.rb/pull/770\n\n### 1.10.0 (September 22, 2020)\n\n* Requires Ruby 2.3.0 or later (2.6.0 or later is recommended)\n* Display a meaningful message when Travis API is unavailable. https://github.com/travis-ci/travis.rb/issues/753\n* Eschew `which` to find a command on the system. https://github.com/travis-ci/travis.rb/pull/765\n* Fix `--list-github-token` flag. https://github.com/travis-ci/travis.rb/pull/766\n* FFI is no longer required. https://github.com/travis-ci/travis.rb/pull/758\n* Typhoeus is no longer required, but remains supported (used if installed). https://github.com/travis-ci/travis.rb/pull/756\n\n### 1.9.1 (May 19, 2020)\n\n* Fix `--no-interactive` flag in `encrypt` and `encrypt-file` commands https://github.com/travis-ci/travis.rb/pull/738\n* Display commit SHA in `show` https://github.com/travis-ci/travis.rb/pull/739\n* Display more helpful message when GitHub token given by `--github-token` is\n  deficient https://github.com/travis-ci/travis.rb/issues/708\n* Fix `--pull-request` flag in `history` command https://github.com/travis-ci/travis.rb/issues/382\n\n### 1.9.0 (April 27, 2020)\n\n* Require Ruby 2.3 and up\n* Add Ruby 2.7 support\n\n* Validate `-r` argument form https://github.com/travis-ci/travis.rb/issues/281\n* Verify `.travis.yml` is valid before sending to the server https://github.com/travis-ci/travis.rb/issues/706\n* Skip version check if rubygems.org is down https://github.com/travis-ci/travis.rb/issues/246\n* Documentation updates\n  https://github.com/travis-ci/travis.rb/pull/641\n  https://github.com/travis-ci/travis.rb/pull/567\n  https://github.com/travis-ci/travis.rb/pull/446\n  https://github.com/travis-ci/travis.rb/pull/363\n  https://github.com/travis-ci/travis.rb/pull/665\n  https://github.com/travis-ci/travis.rb/pull/737\n* Fix `json` dependency https://github.com/travis-ci/travis.rb/issues/508\n* Add `bash` template https://github.com/travis-ci/travis.rb/pull/332\n* Add `elixir` template https://github.com/travis-ci/travis.rb/pull/471\n* Hardcode `pgrep` path https://github.com/travis-ci/travis.rb/pull/570\n* Fix `travis restart` command https://github.com/travis-ci/travis.rb/pull/416\n* Define `skip_cleanup` for `setup` command if using `dpl` v1 https://github.com/travis-ci/travis.rb/pull/704\n* Prevent `.bashrc` from failing when init file is not present https://github.com/travis-ci/travis.rb/pull/595\n\n### 1.8.13 (April 7, 2020)\n\n* Add support for [`gh`](https://github.com/travis-ci/gh) [0.16.0](https://rubygems.org/gems/gh/versions/0.16.0)\n\n### 1.8.12 (March 23, 2020)\n\n* Fix `encrypt-file` command (https://github.com/travis-ci/travis.rb/pull/715)\n* Fix `console` command (https://github.com/travis-ci/travis.rb/issues/654)\n* Ask for confirmation when `encrypt` and `encrypt-file` commands receive\n  `-a`, `--add` flag (https://github.com/travis-ci/travis.rb/issues/651)\n\n### 1.8.11 (March 2, 2020)\n\n* Generate unique key-iv pair for each file (https://github.com/travis-ci/travis.rb/pull/678)\n* Add logout command\n\n### 1.8.10 (May 5, 2019)\n\n### 1.8.8 (March 3, 2017)\n\n* Fix auto-login for when token is locally available\n\n### 1.8.0 (July 15, 2015)\n\n* Fix listener for pusher changes on [travis-ci.org](https://travis-ci.org).\n* Change `monitor` command to only monitor personal repositories if `common` channel is not available.\n\n### 1.7.7 (May 26, 2015)\n\n* Fix `travis whatsup` for fresh Travis Enterprise installations.\n\n### 1.7.6 (April 08, 2015)\n\n* Add support for \"received\" build state.\n* Fix issue with archived logs.\n* On version check, do not kill the process if a newer version has been released.\n\n### 1.7.5 (January 15, 2015)\n\n* Add support for url.<remote>.insteadOf\n* Fix packaging error with 1.7.4, in which Code Deploy setup code was not included\n\n### 1.7.4 (November 12, 2014)\n\n* Add `travis setup codedeploy`\n\n### 1.7.3 (November 10, 2014)\n\n* Add `travis setup biicode`\n* Add `travis env clear`\n* Print error message if `travis login` is run for a GitHub account unknown to the Travis CI setup.\n* Fix bug in S3 ACL settings.\n* Make `travis console` work with newer pry versions.\n\n### 1.7.2 (September 17, 2014)\n\n* Add `travis setup elasticbeanstalk`.\n* Properly display educational accounts in `travis accounts`.\n* Upgrade go version default for `travis init`.\n* Fix SSL verification issue on OS X Yosemite and certain Linux setups.\n* Be more forgiving with outdated API version (Enterprise).\n* Better handling of multibyte characters in archived logs.\n* Use more restrictive permissions for the config file.\n\n### 1.7.1 (August 9, 2014)\n\n* Better error message when trying to encrypt a string that is too long.\n* Fix Validation failed error using `travis sshkey --upload`.\n\n### 1.7.0 (August 5, 2014)\n\n* Add `travis encrypt-file`.\n* Add `--store-repo`/`-R` to repository commands to permanently store the slug for a repository.\n* Announce repository slug when first detected, ask for confirmation in interactive mode.\n* Have `travis repos` only print repository slugs in non-interactive mode.\n* Add `travis/auto_login` and `travis/pro/auto_login` to the Ruby API for easy authentication.\n* Add `--fingerprint` to `pubkey` command.\n* Add `fingerprint` to `Repository#public_key`.\n* Display better error messages for user errors (user data validation failing, etc).\n* Have `travis sshkey --upload` check that the content is a private key.\n* Make `travis sshkey --upload` prompt for and remove the pass phrase if the key is encrypted.\n\n### 1.6.17 (July 25, 2014)\n\n* Add `travis sshkey` and corresponding Ruby API.\n* Make desktop notifications work on Mac OS X 10.10.\n\n### 1.6.16 (July 19, 2014)\n\n* Fix check for updates.\n\n### 1.6.15 (July 18, 2014)\n\n* Add `travis env [list|add|set|copy]`.\n* Add `Repository#env_vars`.\n* Add `travis setup ghc`.\n* Add `Log#delete_body`, `Job#delete_log` and `Build#delete_logs` to Ruby API.\n* Add `--delete`, `--force` and `--no-stream` options to `travis logs`.\n* Add `acl` option to `travis setup s3`.\n* Add `--set` option to `travis settings`, support non-boolean values.\n* Expose `maximum_number_of_builds` setting.\n* Give GitHub OAuth token generated by `travis setup releases` a proper description.\n* Proper handling for empty or broken config files.\n* Reset terminal colors after `travis logs`.\n\n### 1.6.14 (June 17, 2014)\n\n* Add `travis lint` command and Ruby API.\n\n### 1.6.13 (June 15, 2014)\n\n* Added Deis and Hackage setup support.\n\n### 1.6.12 (June 12, 2014)\n\n* Added artifacts setup support.\n\n### 1.6.11 (May 12, 2014)\n\n* Added Cloud 66 and Ninefold setup support.\n* Require typhoeus 0.6.8 and later.\n\n### 1.6.10 (April 24, 2014)\n\n* Better CloudFoundry support\n* Update Faraday to version 0.9.\n\n### 1.6.9 (April 9, 2014)\n\n* Add `--limit` to `travis requests`.\n* Add `--committer` option to `travis history`.\n* Avoid error when running `travis login` with a revoked token.\n* Add `travis setup releases`.\n* Desktop notifications via libnotify are now transient (disappear on their own if the user is active).\n* Update Rubinius version generated by `travis init ruby`.\n* Improve setup when running `travis` executable that has not been installed via RubyGems.\n\n### 1.6.8 (March 12, 2014)\n\n* Display annotations in `travis show`.\n* Add `travis requests` to see build requests Travis CI has received.\n* Improve annotation support in the Ruby library.\n* Add `Repository#requests` to Ruby library.\n* Fix behavior for missing entities.\n\n### 1.6.7 (January 30, 2014)\n\n* Properly display OS for projects tested on multiple operating systems.\n* Better error message when using an invalid access token.\n* Fix desktop notifications using libnotify (Linux/BSD).\n* `travis branches` preserves branch name when displaying Pull Request builds.\n* Add `travis setup modulus`.\n* Ruby library now supports build annotations.\n* Document plugin support.\n* Do not have the client raise on unknown API entities.\n* Do not try and resolve missing commit data (as it will lead to a 404).\n\n### 1.6.6 (December 16, 2013)\n\n* Fix `travis login --com` for new users.\n\n### 1.6.5 (December 16, 2013)\n\n* Add `travis settings` command for accessing repository settings.\n* Add `travis setup opsworks`.\n* Add `travis console -x` to run a line of Ruby code with a valid session.\n* Add authentication and streaming example for Ruby library.\n* Add Ruby API for dealing with repository settings.\n* Improve `travis login` and `travis login --auto`. Add ability to load GitHub token from Keychain.\n* Only ask for GitHub two-factor auth token if two-factor auth is actually required.\n* Fix access right check for `travis caches`.\n\n### 1.6.4 (December 16, 2013)\n\nRelease was yanked. See 1.6.5 for changes.\n\n### 1.6.3 (November 27, 2013)\n\n* Fix OS detection on Windows.\n* Add `travis repos` command.\n* Add `travis setup cloudfiles`.\n* Add `travis setup divshot`.\n* Add `--date` flag to `travis history`.\n* Add upload and target directory options to `travis setup s3`.\n* Include commit message in desktop notifications.\n* Check if Notification Center or Growl is actually running before sending out notifications.\n* Better documentation for desktop notifications.\n* Improved handling of pusher errors when streaming.\n* Add ability to load archived logs from different host.\n* User proper API endpoint for streaming logs, as old endpoint has been removed.\n* Make tests run on Rubinius 2.x.\n\n### 1.6.2 (November 8, 2013)\n\n* Remove worker support, as API endpoints have been removed from Travis CI.\n* Improve OS detection.\n* Fix `travis report`.\n* Fix issues with new payload for permissions endpoint (used by `travis monitor`).\n* Improve default logic for whether `travis monitor` should display desktop notifications.\n* Make desktop notifications work on Mac OSX 10.9.\n* Increase and improve debug output.\n* Only load pry if console command is actually invoked, not when it is loaded (for instance by `travis help`).\n\n### 1.6.1 (November 4, 2013)\n\n* Update autocompletion when updating travis gem.\n\n### 1.6.0 (November 4, 2013)\n\n* Add `travis cache` to list and delete directory caches.\n* Add `travis report` to give a report of the system, endpoint, configuration and last exception.\n* Add `Cache` entity.\n* Keep `travis monitor` running on API errors.\n\n### 1.5.8 (October 24, 2013)\n\n* Fix bug in completion code that stopped command line client from running.\n\n### 1.5.7 (October 24, 2013)\n\n* Improve logic for automatically figuring out a repository slug based on the tracked git remote.\n* Display error if argument passed to `-r` is not a full slug.\n* Do not automatically install shell completion on gem installation.\n* Add Travis CI mascot as logo to desktop notifications.\n* Improve OSX and Growl notifications.\n* Require user to be logged in for all commands issued against an enterprise installation.\n* Improve error message when not logged in for enterprise installations.\n* Fix API endpoint detection for enterprise installations.\n* Make streaming API, and thus the `monitor` and `logs` command, work with enterprise installations.\n* Add `--build`, `--push` and `--pull` flags to monitor command to allow filtering events.\n\n### 1.5.6 (October 22, 2013)\n\n* Add `travis setup appfog` and `travis setup s3`.\n* Use new API for fetching a single branch for Repository#branch. This also circumvents the 25 branches limit.\n* Start publishing gem prereleases after successful builds.\n* Have `travis logs` display first job for a build if a build number is given (or for the last build if called without arguments)\n* Add support for branch names to `travis logs`.\n* Add support for just using the job suffix with `travis logs`.\n* Improve error message if job cannot be found/identified by `travis logs`.\n* Add `travis logout` for removing access token.\n* Improve error message for commands that require user to be logged in.\n* Add `account` method for fetching a single account to `Travis::Client::Methods`.\n* Allow creating account objects for any account, not just these the user is part of. Add `Account#member?` to check for membership.\n* Add `Account#repositories` to load all repos for a given account.\n* Add `Repository#owner_name` and `Repository#owner` to load the account owning a repository.\n* Add `Repository#member?` to check if the current user is a member of a repository.\n* Add `Build#pull_request_number` and `Build#pull_request_title`.\n* Remove trailing new lines from string passed to `travis encrypt`.\n* Fix double `provider` entry generated by `travis setup engineyard`.\n* Only load auto-completions if available.\n* Fix and improve growl notifications.\n* Fix GitHub host detection `travis login --auto`.\n* API endpoint may now include a path all the requests will be prefixed with.\n* Allow overriding SSL options in Ruby client.\n* Add `--insecure` to turn off SSL verification.\n* Add `--enterprise`/`-X` option for Travis Enterprise integration.\n\n### 1.5.5 (October 2, 2013)\n\n* Add `travis setup pypi`\n* Add `travis setup npm`\n* When loading accounts, set all flag to true.\n* Fix bug where session.config would be nil instead of a hash.\n\n### 1.5.4 (September 7, 2013)\n\n* Make `travis monitor` send out desktop notifications.\n* List available templates on `travis init --help`.\n* List available services on `travis setup --help`.\n* Make `travis setup cloudfoundry` detect the target automatically if possible\n* Have `travis setup` ask if you want to deploy/release from current branch if not on master.\n* Give autocompletion on zsh [superpowers](http://ascii.io/a/5139).\n* Add `Repository#github_language`.\n* `travis init` now is smarter when it comes to detecting the template to use (ie, \"CoffeeScript\" will be mapped to \"node_js\")\n* Running `travis init` without a language will now use `Repository#github_language` as default language rather than ruby.\n* Make `travis login` and `travis login --auto` work with GitHub Enterprise.\n* Make `travis login` work with two factor authentication.\n* Add `travis endpoint --github`.\n* Make `travis accounts` handle accounts without name better.\n\n### 1.5.3 (August 22, 2013)\n\n* Fix issues on Windows.\n* Improve `travis setup rubygems` (automatically figure out API token for newer RubyGems versions, offer to only release tagged commits, allow changing gem name).\n* Add command descriptions to help pages.\n* Smarter check if travis gem is outdated.\n* Better error messages for non-existing build/job numbers.\n\n### 1.5.2 (August 18, 2013)\n\n* Add `travis cancel`.\n* Add `Build#cancel` and `Job#cancel` to Ruby API.\n* Add `travis setup cloudfoundry`.\n* Add `--set-default` and `--drop-default` to `travis endpoint`.\n* Make it possible to configure cli via env variables (`$TRAVIS_TOKEN`, `$TRAVIS_ENDPOINT` and `$TRAVIS_CONFIG_PATH`).\n* Improve `travis setup cloudcontrol`.\n\n### 1.5.1 (August 15, 2013)\n\n* Add `travis setup engineyard`.\n* Add `travis setup cloudcontrol`.\n* Silence warnings when running `travis help` or `travis console`.\n\n### 1.5.0 (August 7, 2013)\n\n* Add `travis setup rubygems`.\n* Add `travis accounts`.\n* Add `travis monitor`.\n* Make `travis logs` stream.\n* Add Broadcast entity.\n* Add streaming body API.\n* Add event listener API.\n* Add simple plugin system (will load any ~/.travis/*/init.rb when running cli).\n* Implement shell completion for bash and zsh.\n* Be smarter about warnings when running `travis encrypt`.\n* Improve documentation.\n\n### 1.4.0 (July 26, 2013)\n\n* Add `travis init`\n* Improve install documentation, especially for people from outside the Ruby community\n* Improve error message on an expired token\n* Add Account entity to library\n* Switch to Typhoeus as default HTTP adapter\n* Fix tests for forks\n\n### 1.3.1 (July 21, 2013)\n\n* Add `travis whatsup --my-repos`, which corresponds to the \"My Repositories\" tab in the web interface\n* It is now recommended to use Ruby 2.0, any Ruby version prior to 1.9.3 will lead to a warning being displayed. Disable with `--skip-version-check`.\n* Add `--override` and `--append` to `travis encrypt`, make default behavior depend on key.\n* Add shorthand for `travis encrypt --add`.\n\n### 1.3.0 (July 20, 2013)\n\n* Add `travis setup [heroku|openshift|nodejitsu|sauce_connect]`\n* Add `travis branches`\n* Add Repository#branch and Repository#branches\n* Improve `--help`\n* Improve error message when calling `travis logs` with a matrix build number\n* Check if travis gem is up to date from time to time (CLI only, not when used as library)\n\n### 1.2.8 (July 19, 2013)\n\n* Make pubkey print out key in ssh encoding, add --pem flag for old format\n* Fix more encoding issues\n* Fix edge cases that broke history view\n\n### 1.2.7 (July 15, 2013)\n\n* Add pubkey command\n* Remove all whitespace from an encrypted string\n\n### v1.2.6 (July 7, 2013)\n\n* Improve output of history command\n\n### v1.2.5 (July 7, 2013)\n\n* Fix encoding issue\n\n### v1.2.4 (July 7, 2013)\n\n* Allow empty commit message\n\n### v1.2.3 (June 27, 2013)\n\n* Fix encoding issue\n* Will detect github repo from other remotes besides origin\n* Add clear_cache(!) to Travis::Namespace\n\n### v1.2.2 (May 24, 2013)\n\n* Fixed `travis disable`.\n* Fix edge cases around `travis encrypt`.\n\n### v1.2.1 (May 24, 2013)\n\n* Builds with high build numbers are properly aligned when running `travis history`.\n* Don't lock against a specific backports version, makes it easier to use it as a Ruby library.\n* Fix encoding issues.\n\n### v1.2.0 (February 22, 2013)\n\n* add `--adapter` to API endpoints\n* added branch to `show`\n* fix bug where colors were not used if stdin is a pipe\n* make `encrypt` options `--split` and `--add` work together properly\n* better handling of missing or empty `.travis.yml` when running `encrypt --add`\n* fix broken example code\n* no longer require network connection to automatically detect repository slug\n* add worker support to the ruby library\n* adjust artifacts/logs code to upstream api changes\n\n### v1.1.3 (January 26, 2013)\n\n* use persistent HTTP connections (performance for commands with example api requests)\n* include round trip time in debug output\n\n### v1.1.2 (January 24, 2013)\n\n* `token` command\n* no longer wrap $stdin in delegator (caused bug on some Linux systems)\n* correctly detect when running on Windows, even on JRuby\n\n### v1.1.1 (January 22, 2013)\n\n* Make pry a runtime dependency rather than a development dependency.\n\n### v1.1.0 (January 21, 2013)\n\n* New commands: `console`, `status`, `show`, `logs`, `history`, `restart`, `sync`, `enable`, `disable`, `open` and `whatsup`.\n* `--debug` option for all API commands.\n* `--split` option for `encrypt`.\n* Fix `--add` option for `encrypt` (was naming key `secret` instead of `secure`).\n* First class representation for builds, commits and jobs in the Ruby library.\n* Print warning when running \"encrypt owner/project data\", as it's not supported by the new client.\n* Improved documentation.\n\n### v1.0.3 (January 15, 2013)\n\n* Fix `-r slug` for repository commands. (#3)\n\n### v1.0.2 (January 14, 2013)\n\n* Only bundle CA certs needed to verify Travis CI and GitHub domains.\n* Make tests pass on Windows.\n\n### v1.0.1 (January 14, 2013)\n\n* Improve `encrypt --add` behavior.\n\n### v1.0.0 (January 14, 2013)\n\n* Fist public release.\n* Improved documentation.\n\n### v1.0.0pre2  (January 14, 2013)\n\n* Added Windows support.\n* Suggestion to run `travis login` will add `--org` if needed.\n\n### v1.0.0pre (January 13, 2013)\n\n* Initial public prerelease."
}
