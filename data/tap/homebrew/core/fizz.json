{
  "name": "fizz",
  "full_name": "fizz",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "C++14 implementation of the TLS-1.3 standard",
  "license": "BSD-3-Clause",
  "homepage": "https://github.com/facebookincubator/fizz",
  "versions": {
    "stable": "2023.07.24.00",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/facebookincubator/fizz/releases/download/v2023.07.24.00/fizz-v2023.07.24.00.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "5d063620c36cf1a6fc9e996fdec30a0717ae15ac494126c753a618c01a684854"
    },
    "head": {
      "url": "https://github.com/facebookincubator/fizz.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/fizz/blobs/sha256:bbef91e37b870130c49e29fdd69b33df8a42e378ddd7f7fa7c30205b4c060d60",
          "sha256": "bbef91e37b870130c49e29fdd69b33df8a42e378ddd7f7fa7c30205b4c060d60"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/fizz/blobs/sha256:c7147868c46601d18a1ac803484ea114ba9f43f95f5d2b1cbca4154765e1389e",
          "sha256": "c7147868c46601d18a1ac803484ea114ba9f43f95f5d2b1cbca4154765e1389e"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/fizz/blobs/sha256:6fc2846982139b4de0bff2144fef7c87f4ae121775fb4358c437126eb50e37c0",
          "sha256": "6fc2846982139b4de0bff2144fef7c87f4ae121775fb4358c437126eb50e37c0"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/fizz/blobs/sha256:9e55bfb7cb40253a6f5196772d0de7faf88305693a4556bead35d9617ee32270",
          "sha256": "9e55bfb7cb40253a6f5196772d0de7faf88305693a4556bead35d9617ee32270"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/fizz/blobs/sha256:bd8f9fc0966e1f3caaa271bdcfa542acfe673bd3b06c1dcea5e690b328437a44",
          "sha256": "bd8f9fc0966e1f3caaa271bdcfa542acfe673bd3b06c1dcea5e690b328437a44"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/fizz/blobs/sha256:5889cad51feca87aa896fb0b33a341416f837904f5424509274751ba1c28f31e",
          "sha256": "5889cad51feca87aa896fb0b33a341416f837904f5424509274751ba1c28f31e"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/fizz/blobs/sha256:7e2feda62a1f310ee452085e224c284e85b4dbda9ad8fc01f10e0f7f6e354b5d",
          "sha256": "7e2feda62a1f310ee452085e224c284e85b4dbda9ad8fc01f10e0f7f6e354b5d"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [
    "boost",
    "double-conversion",
    "fmt",
    "folly",
    "gflags",
    "glog",
    "libevent",
    "libsodium",
    "lz4",
    "openssl@3",
    "snappy",
    "zstd"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/fizz.rb",
  "ruby_source_checksum": {
    "sha256": "2324fe999c9e84c50b89dff0304ced588184b71c04ec5927fc43670c1122a351"
  },
  "date_added": "2020-11-02T21:24:12+00:00",
  "readme": "<p align=\"center\">\n  <img width=\"500\" height=\"216\" alt=\"Fizz\" src=\"logo2x.png\">\n</p>\n\n[![Support Ukraine](https://img.shields.io/badge/Support-Ukraine-FFD500?style=flat&labelColor=005BBB)](https://opensource.fb.com/support-ukraine)\n![linux](https://github.com/facebookincubator/fizz/workflows/linux/badge.svg?branch=main)\n![mac](https://github.com/facebookincubator/fizz/workflows/mac/badge.svg?branch=main)\n![windows](https://github.com/facebookincubator/fizz/workflows/windows/badge.svg?branch=main)\n\nFizz is a TLS 1.3 implementation.\n\nFizz currently supports TLS 1.3 drafts 28, 26 (both wire-compatible with the\nfinal specification), and 23. All major handshake modes are supported, including\nPSK resumption, early data, client authentication, and HelloRetryRequest.\n\nMore background and details are available on the\n[Facebook Code Blog](https://engineering.fb.com/2018/08/06/security/fizz/).\n\n## Dependencies\n\nFizz largely depends on three libraries: [folly](https://www.github.com/facebook/folly),\n[OpenSSL](https://www.openssl.org/), and [libsodium](https://github.com/jedisct1/libsodium).\n\n## Source Layout\n- `fizz/crypto`:   Cryptographic primitive implementations (most are wrapping\n                   OpenSSL or libsodium)\n- `fizz/record`:   TLS 1.3 record layer parsing\n- `fizz/protocol`: Common protocol code shared between client and server\n- `fizz/client`:   Client protocol implementation\n- `fizz/server`:   Server protocol implementation\n- `fizz/tool`:     Example CLI app source\n\n## Design\n\nThe core protocol implementations are in `ClientProtocol` and `ServerProtocol`.\n`FizzClientContext` and `FizzServerContext` provide configuration options.\n`FizzClient` and `FizzServer` (which both inherit from `FizzBase`) provide\napplications with an interface to interact with the state machine.\n`FizzClient`/`FizzServer` receives events from the application layer, invokes the\ncorrect event handler, and invokes the application `ActionVisitor` to process the\nactions.\n\n`AsyncFizzClient` and `AsyncFizzServer` provide implementations of the folly\n`AsyncTransportWrapper` interface. They own an underlying transport (for example\n`AsyncSocket`) and perform the TLS handshake and encrypt/decrypt application\ndata.\n\n## Features\n\nFizz has several important features needed from a modern TLS library.\n\n### Performance\n\nFizz supports scatter/gather IO by default via folly's IOBufs, and will encrypt\ndata in-place whenever possible, saving memcpys. Due to this and several\nother optimizations, we found in our load balancer benchmarks that Fizz has 10%\nhigher throughput than our prior SSL library which uses folly's\n[AsyncSSLSocket](https://github.com/facebook/folly/blob/master/folly/io/async/AsyncSSLSocket.h).\nFizz also consumes less memory per connection than AsyncSSLSocket.\n\n### Async by default\n\nFizz has asynchronous APIs to be able to offload functions like certificate\nsigning and ticket decryption. The API is based on folly's\n[Futures](https://github.com/facebook/folly/tree/master/folly/futures) for painless\nasync programming.\n\n### TLS features\n\nFizz supports APIs like exported keying material as well as zero-copy APIs\nneeded to use TLS in other protocols like QUIC.\n\n### Secure design abstractions\n\nFizz is built on a custom state machine which uses the power of the C++ type system\nto treat states and actions as types of their own. As the code changes, this allows us\nto catch invalid state transitions as compilation errors instead of runtime errors and\nhelps us move fast.\n\n## Sample Applications\n\nFizz includes an example program that showcases the basic client/server functionality\nsupported by Fizz. The binary is called `fizz` and it has similar usage to the\n`openssl` or `bssl` commands.\n\nFor example, to start a TLS server on port 443 with a specified cert:\n```sh\nfizz server -accept 443 -cert foo.pem -key foo.key\n```\n\nThen, on the same host, you can connect with:\n\n```sh\nfizz client -connect localhost:443\n```\n\nBoth ends will echo whatever data they receive and send any terminal input to the\npeer. Hitting CTRL+D on either end will terminate the connection.\n\nThe source code for this program can be found under `fizz/tool`.\n\n## Building\n\n### Ubuntu 16.04 LTS\n\nTo begin, you should install the dependencies we need for build. This largely\nconsists of [folly](https://github.com/facebook/folly)'s dependencies, as well as\n[libsodium](https://github.com/jedisct1/libsodium).\n\n```sh\nsudo apt-get install \\\n    g++ \\\n    cmake \\\n    libboost-all-dev \\\n    libevent-dev \\\n    libdouble-conversion-dev \\\n    libgoogle-glog-dev \\\n    libgflags-dev \\\n    libiberty-dev \\\n    liblz4-dev \\\n    liblzma-dev \\\n    libsnappy-dev \\\n    make \\\n    zlib1g-dev \\\n    binutils-dev \\\n    libjemalloc-dev \\\n    libssl-dev \\\n    pkg-config \\\n    libsodium-dev\n```\n\nThen, build and install folly:\n\n```sh\ngit clone https://github.com/facebook/folly\nmkdir folly/build_ && cd folly/build_\ncmake ..\nmake -j $(nproc)\nsudo make install\n```\n\nAnd lastly, build and install fizz.\n\n```sh\ncd ../..\ngit clone https://github.com/facebookincubator/fizz\nmkdir fizz/build_ && cd fizz/build_\ncmake ../fizz\nmake -j $(nproc)\nsudo make install\n```\n\n### Building on Mac\n\nThe following instructions were tested on MacOS High Sierra\nwith Xcode 9.4.1. They should work with later Xcode versions as well.\n\nRun the helper script from within the `fizz` subdirectory. The helper\nscript assumes that you have homebrew installed and are using homebrew\nas your package manager. To install homebrew use the instructions on\nthe homebrew [website](https://brew.sh/).\n\nIt will install and link the required dependencies and also build folly.\nThis may take several minutes the first time.\n\n```sh\ncd fizz\n./mac-build.sh\n```\n\nAfter building, the directory `out/` will contain the libraries as well as\n`out/bin` will contain the `ClientSocket` and `ServerSocket` binaries.\nRunning it again will be faster and only rebuild `fizz`.\n\nYou can also install both `fizz` as well as `folly` to a custom directory\nusing the build script, by supplying an `INSTALL_PREFIX` env var.\n\n```sh\nINSTALL_PREFIX=/usr/local ./mac-build.sh\n```\n\nYou might need to run the script as root to install to certain directories.\n\n## Contributing\n\nWe'd love to have your help in making Fizz better. If you're interested, please\nread our guide to [guide to contributing](CONTRIBUTING.md)\n\n## License\nFizz is BSD licensed, as found in the LICENSE file.\n\n## Reporting and Fixing Security Issues\n\nPlease do not open GitHub issues or pull requests - this makes the problem\nimmediately visible to everyone, including malicious actors. Security issues in\nFizz can be safely reported via Facebook's Whitehat Bug Bounty program:\n\nhttps://www.facebook.com/whitehat\n\nFacebook's security team will triage your report and determine whether or not is\nit eligible for a bounty under our program."
}
