{
  "name": "cmark-gfm",
  "full_name": "cmark-gfm",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "C implementation of GitHub Flavored Markdown",
  "license": "BSD-2-Clause",
  "homepage": "https://github.com/github/cmark-gfm",
  "versions": {
    "stable": "0.29.0.gfm.13",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/github/cmark-gfm/archive/0.29.0.gfm.13.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "5abc61798ebd9de5660bc076443c07abad2b8d15dbc11094a3a79644b8ad243a"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cmark-gfm/blobs/sha256:db367b57679f3f5ff972e89fb35c51fb30bbb343ce8e13b9202bf202ca8ae24b",
          "sha256": "db367b57679f3f5ff972e89fb35c51fb30bbb343ce8e13b9202bf202ca8ae24b"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cmark-gfm/blobs/sha256:88f430ffc95c1e948082963bd58dc7b710033f69b7aa74b11d4f4fd7c567603a",
          "sha256": "88f430ffc95c1e948082963bd58dc7b710033f69b7aa74b11d4f4fd7c567603a"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cmark-gfm/blobs/sha256:1cc456ff30491754d4ee3a1197e3e409ca1f5563183b50bbde899e0864f8942e",
          "sha256": "1cc456ff30491754d4ee3a1197e3e409ca1f5563183b50bbde899e0864f8942e"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cmark-gfm/blobs/sha256:e69573db28aff177eec22651c2ccb5b7be8863b8d4f1edd816ab67eb9da9c05b",
          "sha256": "e69573db28aff177eec22651c2ccb5b7be8863b8d4f1edd816ab67eb9da9c05b"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cmark-gfm/blobs/sha256:4cca4929db9ff31ee827b74d4683662af0a48e4577f95507216073ffff37a22b",
          "sha256": "4cca4929db9ff31ee827b74d4683662af0a48e4577f95507216073ffff37a22b"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/cmark-gfm/blobs/sha256:f0ae4dd8836af5cb5e7de552916c9c8dc9fe2b839c79be70f504cf5777ec14e6",
          "sha256": "f0ae4dd8836af5cb5e7de552916c9c8dc9fe2b839c79be70f504cf5777ec14e6"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cmark-gfm/blobs/sha256:9cc57585e59c81673c7cb0c374c59f900778886de3329127706534eb8851a0b5",
          "sha256": "9cc57585e59c81673c7cb0c374c59f900778886de3329127706534eb8851a0b5"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake",
    "python@3.11"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [
    "cmark"
  ],
  "conflicts_with_reasons": [
    "both install a `cmark.h` header"
  ],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/cmark-gfm.rb",
  "ruby_source_checksum": {
    "sha256": "eaf0f71301d38f54214039c712ea65e1270463964549eb30e77a17bb2028915d"
  },
  "date_added": "2017-05-01T17:12:07-04:00",
  "readme": "cmark-gfm\n=========\n\n![Actions CI](https://github.com/github/cmark-gfm/actions/workflows/ci.yml/badge.svg)\n\n`cmark-gfm` is an extended version of the C reference implementation of\n[CommonMark], a rationalized version of Markdown syntax with a spec.  This\nrepository adds GitHub Flavored Markdown extensions to\n[the upstream implementation], as defined in [the spec].\n\nThe rest of the README is preserved as-is from the upstream source.  Note that\nthe library and binaries produced by this fork are suffixed with `-gfm` in\norder to distinguish them from the upstream.\n\n---\n\nIt provides a shared library (`libcmark`) with functions for parsing\nCommonMark documents to an abstract syntax tree (AST), manipulating\nthe AST, and rendering the document to HTML, groff man, LaTeX,\nCommonMark, or an XML representation of the AST.  It also provides a\ncommand-line program (`cmark`) for parsing and rendering CommonMark\ndocuments.\n\nAdvantages of this library:\n\n- **Portable.**  The library and program are written in standard\n  C99 and have no external dependencies.  They have been tested with\n  MSVC, gcc, tcc, and clang.\n\n- **Fast.** cmark can render a Markdown version of *War and Peace* in\n  the blink of an eye (127 milliseconds on a ten year old laptop,\n  vs. 100-400 milliseconds for an eye blink).  In our [benchmarks],\n  cmark is 10,000 times faster than the original `Markdown.pl`, and\n  on par with the very fastest available Markdown processors.\n\n- **Accurate.** The library passes all CommonMark conformance tests.\n\n- **Standardized.** The library can be expected to parse CommonMark\n  the same way as any other conforming parser.  So, for example,\n  you can use `commonmark.js` on the client to preview content that\n  will be rendered on the server using `cmark`.\n\n- **Robust.** The library has been extensively fuzz-tested using\n  [american fuzzy lop].  The test suite includes pathological cases\n  that bring many other Markdown parsers to a crawl (for example,\n  thousands-deep nested bracketed text or block quotes).\n\n- **Flexible.** CommonMark input is parsed to an AST which can be\n  manipulated programmatically prior to rendering.\n\n- **Multiple renderers.**  Output in HTML, groff man, LaTeX, CommonMark,\n  and a custom XML format is supported. And it is easy to write new\n  renderers to support other formats.\n\n- **Free.** BSD2-licensed.\n\nIt is easy to use `libcmark` in python, lua, ruby, and other dynamic\nlanguages: see the `wrappers/` subdirectory for some simple examples.\n\nThere are also libraries that wrap `libcmark` for\n[Go](https://github.com/rhinoman/go-commonmark),\n[Haskell](https://hackage.haskell.org/package/cmark),\n[Ruby](https://github.com/gjtorikian/commonmarker),\n[Lua](https://github.com/jgm/cmark-lua),\n[Perl](https://metacpan.org/release/CommonMark),\n[Python](https://pypi.python.org/pypi/paka.cmark),\n[R](https://cran.r-project.org/package=commonmark),\n[Tcl](https://github.com/apnadkarni/tcl-cmark),\n[Scala](https://github.com/sparsetech/cmark-scala) and\n[Node.js](https://github.com/killa123/node-cmark).\n\nInstalling\n----------\n\nBuilding the C program (`cmark`) and shared library (`libcmark`)\nrequires [cmake].  If you modify `scanners.re`, then you will also\nneed [re2c] \\(>= 0.14.2\\), which is used to generate `scanners.c` from\n`scanners.re`.  We have included a pre-generated `scanners.c` in\nthe repository to reduce build dependencies.\n\nIf you have GNU make, you can simply `make`, `make test`, and `make\ninstall`.  This calls [cmake] to create a `Makefile` in the `build`\ndirectory, then uses that `Makefile` to create the executable and\nlibrary.  The binaries can be found in `build/src`.  The default\ninstallation prefix is `/usr/local`.  To change the installation\nprefix, pass the `INSTALL_PREFIX` variable if you run `make` for the\nfirst time: `make INSTALL_PREFIX=path`.\n\nFor a more portable method, you can use [cmake] manually. [cmake] knows\nhow to create build environments for many build systems.  For example,\non FreeBSD:\n\n    mkdir build\n    cd build\n    cmake ..  # optionally: -DCMAKE_INSTALL_PREFIX=path\n    make      # executable will be created as build/src/cmark\n    make test\n    make install\n\nOr, to create Xcode project files on OSX:\n\n    mkdir build\n    cd build\n    cmake -G Xcode ..\n    open cmark.xcodeproj\n\nThe GNU Makefile also provides a few other targets for developers.\nTo run a benchmark:\n\n    make bench\n\nFor more detailed benchmarks:\n\n    make newbench\n\nTo run a test for memory leaks using `valgrind`:\n\n    make leakcheck\n\nTo reformat source code using `clang-format`:\n\n    make format\n\nTo run a \"fuzz test\" against ten long randomly generated inputs:\n\n    make fuzztest\n\nTo do a more systematic fuzz test with [american fuzzy lop]:\n\n    AFL_PATH=/path/to/afl_directory make afl\n\nFuzzing with [libFuzzer] is also supported but, because libFuzzer is still\nunder active development, may not work with your system-installed version of\nclang. Assuming LLVM has been built in `$HOME/src/llvm/build` the fuzzer can be\nrun with:\n\n    CC=\"$HOME/src/llvm/build/bin/clang\" LIB_FUZZER_PATH=\"$HOME/src/llvm/lib/Fuzzer/libFuzzer.a\" make libFuzzer\n\nTo make a release tarball and zip archive:\n\n    make archive\n\nInstalling (Windows)\n--------------------\n\nTo compile with MSVC and NMAKE:\n\n    nmake\n\nYou can cross-compile a Windows binary and dll on linux if you have the\n`mingw32` compiler:\n\n    make mingw\n\nThe binaries will be in `build-mingw/windows/bin`.\n\nUsage\n-----\n\nInstructions for the use of the command line program and library can\nbe found in the man pages in the `man` subdirectory.\n\nSecurity\n--------\n\nBy default, the library will scrub raw HTML and potentially\ndangerous links (`javascript:`, `vbscript:`, `data:`, `file:`).\n\nTo allow these, use the option `CMARK_OPT_UNSAFE` (or\n`--unsafe`) with the command line program. If doing so, we\nrecommend you use a HTML sanitizer specific to your needs to\nprotect against [XSS\nattacks](http://en.wikipedia.org/wiki/Cross-site_scripting).\n\nContributing\n------------\n\nThere is a [forum for discussing\nCommonMark](http://talk.commonmark.org); you should use it instead of\ngithub issues for questions and possibly open-ended discussions.\nUse the [github issue tracker](http://github.com/commonmark/CommonMark/issues)\nonly for simple, clear, actionable issues.\n\nAuthors\n-------\n\nJohn MacFarlane wrote the original library and program.\nThe block parsing algorithm was worked out together with David\nGreenspan. Vicent Marti optimized the C implementation for\nperformance, increasing its speed tenfold.  Kārlis Gaņģis helped\nwork out a better parsing algorithm for links and emphasis,\neliminating several worst-case performance issues.\nNick Wellnhofer contributed many improvements, including\nmost of the C library's API and its test harness.\n\n[benchmarks]: benchmarks.md\n[the spec]: https://github.github.com/gfm/\n[the upstream implementation]: https://github.com/jgm/cmark\n[CommonMark]: http://commonmark.org\n[cmake]: http://www.cmake.org/download/\n[re2c]: http://re2c.org\n[commonmark.js]: https://github.com/commonmark/commonmark.js\n[Build Status]: https://img.shields.io/travis/github/cmark-gfm/master.svg?style=flat\n[Windows Build Status]: https://ci.appveyor.com/api/projects/status/wv7ifhqhv5itm3d5?svg=true\n[american fuzzy lop]: http://lcamtuf.coredump.cx/afl/\n[libFuzzer]: http://llvm.org/docs/LibFuzzer.html"
}
