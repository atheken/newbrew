{
  "name": "sdl12-compat",
  "full_name": "sdl12-compat",
  "tap": "homebrew/core",
  "oldname": "sdl",
  "oldnames": [
    "sdl"
  ],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "SDL 1.2 compatibility layer that uses SDL 2.0 behind the scenes",
  "license": "Zlib and MIT-0",
  "homepage": "https://github.com/libsdl-org/sdl12-compat",
  "versions": {
    "stable": "1.2.64",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/libsdl-org/sdl12-compat/archive/refs/tags/release-1.2.64.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "3e308e817c7f0c6383225485e9a67bf1119ad684b8cc519038671cc1b5d29861"
    },
    "head": {
      "url": "https://github.com/libsdl-org/sdl12-compat.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/sdl12-compat/blobs/sha256:ebad05b905bb7c02a03774c61739a80c873452c71005bd530f2a8631b90d18c7",
          "sha256": "ebad05b905bb7c02a03774c61739a80c873452c71005bd530f2a8631b90d18c7"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/sdl12-compat/blobs/sha256:575e6be5525e92350ec8dd7bd2d4c5bc20e448f0f5f010633b5267eb5d9175df",
          "sha256": "575e6be5525e92350ec8dd7bd2d4c5bc20e448f0f5f010633b5267eb5d9175df"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/sdl12-compat/blobs/sha256:f3e027271fb43a3f7143116a44e76517f8e43fad149d44ef9689811f7ebf3f8a",
          "sha256": "f3e027271fb43a3f7143116a44e76517f8e43fad149d44ef9689811f7ebf3f8a"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/sdl12-compat/blobs/sha256:118f7c1daf22008b15b5853a93409f4cadbb73a6f43e25ddb7eb2d313d92ed37",
          "sha256": "118f7c1daf22008b15b5853a93409f4cadbb73a6f43e25ddb7eb2d313d92ed37"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/sdl12-compat/blobs/sha256:ed617022ec1e5e89c89fa4e34c607da0ddf27fb069b0fe5c7a72beb5a58b76a1",
          "sha256": "ed617022ec1e5e89c89fa4e34c607da0ddf27fb069b0fe5c7a72beb5a58b76a1"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/sdl12-compat/blobs/sha256:1636d3ca1c576aa88eb2cd946927467ec2627f2ec55d0b395c3a43141416c862",
          "sha256": "1636d3ca1c576aa88eb2cd946927467ec2627f2ec55d0b395c3a43141416c862"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/sdl12-compat/blobs/sha256:94fa84a28db17c9590035b1788a3935803d5eafded2c01560f6e1d14dd0f28ef",
          "sha256": "94fa84a28db17c9590035b1788a3935803d5eafded2c01560f6e1d14dd0f28ef"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "cmake"
  ],
  "dependencies": [
    "sdl2"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/sdl12-compat.rb",
  "ruby_source_checksum": {
    "sha256": "03b22deaf967efe701515a686523e51d89dd93842a644b0e77ce94d3e7920f03"
  },
  "date_added": "2022-03-06T14:17:31+00:00",
  "readme": "# Simple DirectMedia Layer (SDL) sdl12-compat\n\nhttps://www.libsdl.org/\n\nThis is the Simple DirectMedia Layer, a general API that provides low\nlevel access to audio, keyboard, mouse, joystick, 3D hardware via OpenGL,\nand 2D framebuffer across multiple platforms.\n\nThis code is a compatibility layer; it provides a binary and source\ncompatible API for programs written against SDL 1.2, but it uses SDL 2.0\nbehind the scenes. If you are writing new code, please target SDL 2.0\ndirectly and do not use this layer.\n\nIf you absolutely must have the real SDL 1.2 (\"SDL 1.2 Classic\"), please use\nthe source tree at https://github.com/libsdl-org/SDL-1.2, which occasionally\ngets bug fixes but no formal release. But we strongly encourage you not to do\nthat.\n\n# How to use:\n\n- Build the library. This will need access to SDL2's headers (v2.0.7 or newer),\n[CMake](https://cmake.org/) and the build tools of your choice. Once built, you\nwill have a drop-in replacement that can be used with any existing binary\nthat relies on SDL 1.2. You can copy this library over the existing 1.2 build,\nor force it to take priority over a system copy with LD_LIBRARY_PATH, etc.\nAt runtime, sdl12-compat needs to be able to find a copy of SDL2 (v2.0.7 or\nnewer -- v2.0.12 or newer for Windows), so plan to include it with the library\nif necessary.\n\n- If you want to build an SDL 1.2 program from source code, we have included\ncompatibility headers, so that sdl12-compat can completely replace SDL 1.2\nat all points. These headers are just the bare minimum needed for source-level\ncompatibility and don't have a lot of documentation or fanciness at all. The\nnew headers are also under the zlib license. Note that sdl12-compat itself\ndoes not use these headers, so if you just want the library, you don't need\nthem.\n\n# Building the library:\n\nThese are quick-start instructions; there isn't anything out of the ordinary\nhere if you're used to using CMake. \n\nYou'll need to use CMake to build sdl12-compat. Download at\n[cmake.org](https://cmake.org/) or install from your package manager\n(`sudo apt-get install cmake` on Ubuntu, etc).\n\nPlease refer to the [CMake documentation](https://cmake.org/documentation/)\nfor complete details, as platform and build tool details vary.\n\nYou'll need a copy of SDL 2.0.x to build sdl12-compat, because we need the\nSDL2 headers. You can build this from source or install from a package\nmanager. Windows and Mac users can download prebuilt binaries from\n[SDL's download page](https://libsdl.org/download-2.0.php); make sure you\nget the \"development libraries\" and not \"runtime binaries\" there.\n\nLinux users might need some packages from their Linux distribution. On Ubuntu,\nyou might need to do:\n\n```bash\nsudo apt-get install build-essential cmake libsdl2-2.0-0 libsdl2-dev libgl-dev\n```\n\nNow just point CMake at sdl12-compat's directory. Here's a command-line\nexample:\n\n```bash\ncd sdl12-compat\ncmake -Bbuild -DCMAKE_BUILD_TYPE=Release .\ncmake --build build\n```\n\nOn Windows or macOS, you might prefer to use CMake's GUI, but it's the same\nidea: give it the directory where sdl12-compat is located, click \"Configure,\"\nchoose your favorite compiler, then click \"Generate.\" Now you have project\nfiles! Click \"Open Project\" to launch your development environment. Then you\ncan build however you like with Visual Studio, Xcode, etc.\n\nIf necessary, you might have to fill in the location of the SDL2 headers\nwhen using CMake. sdl12-compat does not need SDL2's library to _build_,\njust its headers (although it may complain about the missing library,\nyou can ignore that). From the command line, add\n`-DSDL2_INCLUDE_DIR=/path/to/SDL2/include`, or find this in the CMake\nGUI and set it appropriately, click \"Configure\" again, and then \"Generate.\"\n\nWhen the build is complete, you'll have a shared library you can drop in\nas a replacement for an existing SDL 1.2 build. This will also build\nthe original SDL 1.2 test apps, so you can verify the library is working.\n\n\n# Building for older CPU architectures on Linux:\n\nThere are a lot of binaries from many years ago that used SDL 1.2, which is\nto say they are for CPU architectures that are likely not your current\nsystem's.\n\nIf you want to build a 32-bit x86 library on an x86-64 Linux machine, for\ncompatibility with older games, you should install some basic 32-bit\ndevelopment libraries for your distribution. On Ubuntu, this would be:\n\n\n```bash\nsudo apt-get install gcc-multilib libsdl2-dev:i386\n```\n\n...and then add `-m32` to your build options:\n\n\n```bash\ncd sdl12-compat\ncmake -Bbuild32 -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_FLAGS=-m32\ncmake --build build32\n```\n\n\n# Building for older CPU architectures on macOS:\n\nmacOS users can try adding `-DCMAKE_OSX_ARCHITECTURES='arm64;x86_64'` instead\nof `-DCMAKE_C_FLAGS=-m32` to make a Universal Binary for both 64-bit Intel and\nApple Silicon machines. If you have an older (or much older!) version of Xcode,\nyou can try to build with \"i386\" or maybe even \"powerpc\" for 32-bit Intel or\nPowerPC systems, but Xcode (and macOS itself) has not supported either of\nthese for quite some time, and you will likely struggle to get SDL2 to compile\nhere in small ways, as well...but with some effort, it's maybe _possible_ to\nrun SDL2 and sdl12-compat on Apple's abandoned architectures.\n\n\n# Building for older CPU architectures on Windows:\n\nWindows users just select a 32-bit version of Visual Studio when running\nCMake, when it asks you what compiler to target in the CMake GUI.\n\n\n# Configuration options:\n\nsdl12-compat has a number of configuration options which can be used to work\naround issues with individual applications, or to better fit your system or\npreferences.\n\nThese options are all specified as environment variables, and can be set by\nrunning your application with them set on the command-line, for example:\n```\nSDL12COMPAT_HIGHDPI=1 SDL12COMPAT_OPENGL_SCALING=0 %command%\n```\nwill run `%command%` with high-dpi monitor support enabled, but OpenGL\nscaling support disabled.\n\n(While these environment variables are checked at various times throughout\nthe lifetime of the app, sdl12-compat expects these to be set before the\nprocess starts and not change during the life of the process, and any\nplaces where changing it later might affect operation is purely accidental\nand might change. That is to say: don't write an SDL 1.2-based app with\nplans to tweak these values on the fly!)\n\nThe available options are:\n\n- SDL12COMPAT_DEBUG_LOGGING: (checked at startup)\n  If enabled, print debugging messages to stderr.  These messages are\n  mostly useful to developers, or when trying to track down a specific\n  bug.\n\n- SDL12COMPAT_FAKE_CDROM_PATH: (checked during SDL_Init)\n  A path to a directory containing MP3 files (named trackXX.mp3, where\n  XX is a two-digit track number) to be used by applications which play\n  CD audio.  Using an absolute path is recommended: relative paths are\n  not guaranteed to work correctly.\n\n- SDL12COMPAT_OPENGL_SCALING: (checked during SDL_Init)\n  Enables scaling of OpenGL applications to the current desktop resolution.\n  If disabled, applications can change the real screen resolution.  This\n  option is enabled by default, but not all applications are compatible\n  with it: try changing this if you can only see a black screen.\n\n- SDL12COMPAT_FIX_BORDERLESS_FS_WIN: (checked during SDL_SetVideoMode)\n  Enables turning borderless windows at the desktop resolution into actual\n  fullscreen windows (so they'll go into a separate space on macOS and\n  properly hide dock windows on other desktop environments, etc).\n  If disabled, applications may not get the full display to theirselves as\n  they expect. This option is enabled by default, but this option is here\n  so it can be manually disabled, in case this causes some negative result\n  we haven't anticipated.\n\n- SDL12COMPAT_SCALE_METHOD: (checked during SDL_Init)\n  Choose the scaling method used when applications render at a non-native\n  resolution.  The options are `nearest`, for nearest-neighbour sampling\n  (more pixelated) and `linear` for bilinear sampling (blurrier).\n\n- SDL12COMPAT_HIGHDPI: (checked during SDL_SetVideoMode)\n  Advertise the application as supporting high-DPI displays.  Enabling\n  this will usually result in sharper graphics, but on some applications\n  text and other elements may become very small.\n\n- SDL12COMPAT_SYNC_TO_VBLANK: (checked during SDL_SetVideoMode)\n  Force the application to sync (or not sync) to the vertical blanking\n  interval (VSync).  When enabled, this will cap the application's\n  framerate to the screen's refresh rate (and may resolve issues with\n  screen tearing).\n\n- SDL12COMPAT_USE_KEYBOARD_LAYOUT: (checked during SDL_Init)\n  Make all keyboard input take the current keyboard layout into account.\n  This may need to be disabled for applications which provide their own\n  keyboard layout support, or if the position of the keys on the keyboard\n  is more important than the character they produce.  Note that text input\n  (in most applications) will take the keyboard layout into account\n  regardless of this option.\n\n- SDL12COMPAT_USE_GAME_CONTROLLERS: (checked during SDL_Init)\n  Use SDL2's higher-level Game Controller API to expose joysticks instead of\n  its lower-level joystick API. The benefit of this is that you can exert\n  more control over arbitrary hardware (deadzones, button mapping, device\n  name, etc), and button and axes layouts are consistent (what is physically\n  located where an Xbox360's \"A\" button is will always be SDL 1.2 joystick\n  button 0, \"B\" will be 1, etc). The downside is it might not expose all of\n  a given piece of hardware's functionality, or simply not make sense in\n  general...if you need to use a flight stick, for example, you should not\n  use this hint. If there is no known game controller mapping for a joystick,\n  and this hint is in use, it will not be listed as an availble device.\n\n- SDL12COMPAT_WINDOW_SCALING: (checked during SDL_SetVideoMode)\n  When creating non-fullscreen, non-resizable windows, use this variable to\n  size the window differently. If, for example, you have a 4K monitor and the\n  game is running in a window the size of a postage stamp, you might set this\n  to 2 to double the size of the window. Fractional values work, so \"1.5\"\n  might be a more-pleasing value on your hardware. You can even shrink the\n  window with values less than 1.0! When scaling a window like this,\n  sdl12-compat will use all the usual scaling options\n  (SDL12COMPAT_OPENGL_SCALING, SDL12COMPAT_SCALE_METHOD, etc). If sdl12-compat\n  can't scale the contents of the window for various technical reasons, it\n  will create the window at the originally-requested size. If this variable\n  isn't specified, it defaults to 1.0 (no scaling).\n\n- SDL12COMPAT_MAX_VIDMODE: (checked during SDL_Init)\n  This is a string in the form of `WxH`, where `W` is the maximum width\n  and `H` is the maximum height (for example: `640x480`). The list of valid\n  resolutions that will be reported by SDL_ListModes and SDL_VideoModeOK will\n  not include any dimensions that are wider or taller than these sizes. A size\n  of zero will be ignored, so for `0x480` a resolution of 1920x480 would be\n  accepted). If not specified, or set to `0x0`, no resolution clamping is done.\n  This is for old software-rendered games that might always choose the largest\n  resolution offered, but never conceived of 4K displays. In these cases, it\n  might be better for them to use a smaller resolution and let sdl12-compat\n  scale their output up with the GPU.\n\n- SDL_MOUSE_RELATIVE_SCALING: (checked during SDL_SetVideoMode)\n  If enabled, relative mouse motion is scaled when the application is\n  running at a non-native resolution.  This may be required with some\n  applications which use their own mouse cursors. See also:\n  https://wiki.libsdl.org/SDL_HINT_MOUSE_RELATIVE_SCALING\n\n- SDL12COMPAT_ALLOW_THREADED_DRAWS: (checked during SDL_Init)\n  Enabled by default.\n  If disabled, calls to `SDL_UpdateRects()` from non-main threads are\n  converted into requests for the main thread to carry out the update later.\n  The thread that called `SDL_SetVideoMode()` is treated as the main thread.\n\n- SDL12COMPAT_ALLOW_THREADED_PUMPS: (checked during SDL_Init)\n  Enabled by default.\n  If disabled, calls to `SDL_PumpEvents()` from non-main threads are\n  completely ignored.\n  The thread that called `SDL_SetVideoMode()` is treated as the main thread.\n\n- SDL12COMPAT_ALLOW_SYSWM: (checked during SDL_Init)\n  Enabled by default.\n  If disabled, SDL_SYSWMEVENT events will not be delivered to the app, and\n  SDL_GetWMInfo() will fail; this is useful if you have a program that\n  tries to access X11 directly through SDL's interfaces, but can survive\n  without it, becoming compatible with, for example, Wayland, or perhaps\n  just avoiding a bug in target-specific code. Note that sdl12-compat already\n  disallows SysWM things unless SDL2 is using its \"windows\" or \"x11\" video\n  backends, because SDL 1.2 didn't have wide support for its SysWM APIs\n  outside of Windows and X11 anyhow.\n\n\n# Compatibility issues with OpenGL scaling\n\nThe OpenGL scaling feature of sdl12-compat allows applications which wish to\nrun at a non-native screen resolution to do so without changing the system\nresolution. It does this by redirecting OpenGL rendering calls to a \"fake\"\nbackbuffer which is scaled when rendering.\n\nThis works well for simple applications, but for more complicated applications\nwhich use Frame Buffer Objects, sdl12-compat needs to intercept and redirect\nsome OpenGL calls. Applications which access these functions without going\nthough SDL (even if via a library) may not successfully render anything, or\nmay render incorrectly if OpenGL scaling is enabled.\n\nIn these cases, you can disable OpenGL scaling by setting the environment\nvariable:\n```\nSDL12COMPAT_OPENGL_SCALING=0\n```\n\n# Compatibility issues with applications directly accessing underlying APIs\n\nSome applications combine the use of SDL with direct access to the underlying\nOS or window system. When running these applications on the same OS and SDL\nvideo driver (e.g. a program written for X11 on Linux is run on X11 on Linux),\nsdl12-compat is usually compatible.\n\nHowever, if you wish to run an application on a different video driver, the\napplication will be unable to access the underlying API it is expecting, and\nmay fail. This often occurs trying to run applications written for X11 under\nWayland, and particularly affects a number of popular OpenGL extension loaders.\n\nIn this case, the best workaround is to run under a compatibility layer like\nXWayland, and set the SDL_VIDEODRIVER environment variable to the driver the\nprogram is expecting:\n```\nSDL_VIDEODRIVER=x11\n```"
}
