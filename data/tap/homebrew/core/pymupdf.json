{
  "name": "pymupdf",
  "full_name": "pymupdf",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Python bindings for the PDF toolkit and renderer MuPDF",
  "license": "AGPL-3.0-only",
  "homepage": "https://github.com/pymupdf/PyMuPDF",
  "versions": {
    "stable": "1.22.5",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://files.pythonhosted.org/packages/f6/6a/199e6b76f1cca112510171df0949af1fcf43536812441866e7c9e1d7b01e/PyMuPDF-1.22.5.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "5ec8d5106752297529d0d68d46cfc4ce99914aabd99be843f1599a1842d63fe9"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/pymupdf/blobs/sha256:e344a0f43c186b16265d59eb060279cab06f6616ec1bf6012acc2136fabcd94a",
          "sha256": "e344a0f43c186b16265d59eb060279cab06f6616ec1bf6012acc2136fabcd94a"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/pymupdf/blobs/sha256:88e71210e6af9f6c5da4c75c01e498ae9ed4204b1432497ae309130c71054697",
          "sha256": "88e71210e6af9f6c5da4c75c01e498ae9ed4204b1432497ae309130c71054697"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/pymupdf/blobs/sha256:1ed8350b7ed5247b64d7921a612fc8958801445aec5446372ea25648418329f4",
          "sha256": "1ed8350b7ed5247b64d7921a612fc8958801445aec5446372ea25648418329f4"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/pymupdf/blobs/sha256:e1fef6b977cf7f6ca6cee0fb0507e87b036b314e087461dba32e0624595d2972",
          "sha256": "e1fef6b977cf7f6ca6cee0fb0507e87b036b314e087461dba32e0624595d2972"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/pymupdf/blobs/sha256:c8e3e20c9c919adbe51131e9e54a2fa04a3a37bdd0e22a664d207bdc96042807",
          "sha256": "c8e3e20c9c919adbe51131e9e54a2fa04a3a37bdd0e22a664d207bdc96042807"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/pymupdf/blobs/sha256:b08f15abb4d746f6482da519605be8779651d9d89daf49da28e83ebf2e79ffbe",
          "sha256": "b08f15abb4d746f6482da519605be8779651d9d89daf49da28e83ebf2e79ffbe"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pymupdf/blobs/sha256:779784af438161aa105c9338e988da7fd22e92ce6b7537bd94aa037daceedd3d",
          "sha256": "779784af438161aa105c9338e988da7fd22e92ce6b7537bd94aa037daceedd3d"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "freetype",
    "swig"
  ],
  "dependencies": [
    "mupdf",
    "python@3.11",
    "gumbo-parser",
    "harfbuzz",
    "jbig2dec",
    "mujs",
    "openjpeg"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/pymupdf.rb",
  "ruby_source_checksum": {
    "sha256": "27634ed4d807a09c75db7c4be38aac079d6d14c554171179b9990fe837d49126"
  },
  "date_added": "2022-08-04T06:49:23+00:00",
  "readme": "# PyMuPDF 1.23.0rc2\n\n![logo](https://artifex.com/images/logos/py-mupdf-github-icon.png)\n\n\nRelease date: August 18, 2023\n\n\nOn **[PyPI](https://pypi.org/project/PyMuPDF)** since August 2016: [![Downloads](https://static.pepy.tech/personalized-badge/pymupdf?period=total&units=international_system&left_color=black&right_color=orange&left_text=Downloads)](https://pepy.tech/project/pymupdf)\n\n# Author\n[Artifex](mailto:support@artifex.com), based on code by [Jorj X. McKie](mailto:jorj.x.mckie@outlook.de) and [Ruikai Liu](mailto:lrk700@gmail.com).\n\n# Introduction\n\nPyMuPDF adds Python bindings and abstractions to [MuPDF](https://mupdf.com/), a lightweight PDF, XPS, and eBook viewer, renderer, and toolkit. Both PyMuPDF and MuPDF are maintained and developed by Artifex Software, Inc.\n\nMuPDF can access files in PDF, XPS, OpenXPS, CBZ, EPUB, MOBI and FB2 (eBooks) formats, and it is known for its top performance and exceptional rendering quality.\n\nWith PyMuPDF you can access files with extensions like `.pdf`, `.xps`, `.oxps`, `.cbz`, `.fb2`, `.mobi` or `.epub`. In addition, about 10 popular image formats can also be handled like documents: `.png`, `.jpg`, `.bmp`, `.tiff`, `.svg` etc.\n\n# Usage\nFor all supported document types (i.e. **_including images_**) you can\n* Decrypt the document.\n* Access meta information, links and bookmarks.\n* Render pages in raster formats (PNG and some others), or the vector format SVG.\n* Search for text.\n* Extract text and images.\n* Convert to other formats: PDF, (X)HTML, XML, JSON, text.\n* Do OCR (Optical Character Recognition) if Tesseract is installed.\n\n> To some degree, PyMuPDF can also be used as an [image converter](https://github.com/pymupdf/PyMuPDF/wiki/How-to-Convert-Images): it can read a range of input formats and can produce **Portable Network Graphics (PNG)**, **Portable Anymaps** (**PNM**, etc.), **Portable Arbitrary Maps (PAM)**, **Adobe PostScript** and **Adobe Photoshop** documents, making the use of other graphics packages obselete in these cases. But interfacing with e.g. PIL/Pillow for image input and output is easy as well.\n\nFor **PDF documents,** there exists a plethora of additional features: they can be created, joined or split up. Pages can be inserted, deleted, re-arranged or modified in many ways (including annotations and form fields).\n\n* Images and fonts can be extracted or inserted.\n    > You may want to have a look at [this](https://github.com/pymupdf/PyMuPDF-Utilities/blob/master/examples/edit-images/edit.py) cool GUI example script, which lets you **_insert, delete, replace_** or **_re-position_** images under your visual control.\n\n    > If [fontTools](https://pypi.org/project/fonttools/) is installed, subsets can be built for eligible fonts based on their usage in the document. Especially for new PDFs, this can lead to significant file size reductions.\n* Embedded files are fully supported.\n* PDFs can be reformatted to support double-sided printing, posterizing, applying logos or watermarks\n* Password protection is fully supported: decryption, encryption, encryption method selection, permission level and user / owner password setting.\n* Support of the **PDF Optional Content** concept for images, text and drawings.\n* Low-level PDF structures can be accessed and modified.\n* **Command line module** ``\"python -m fitz ...\"``. A versatile utility with the following features\n\n    - **encryption / decryption / optimization**\n    - creation of **sub-documents**\n    - document **joining**\n    - **image / font extraction**\n    - full support of **embedded files**\n    - **_layout-preserving text extraction_** (all documents)\n\n\nHave a look at the basic [demos](https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/demo), the [examples](https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/examples) (which contain complete, working programs), and [notebooks](https://github.com/pymupdf/PyMuPDF-Utilities/tree/master/jupyter-notebooks).\n\n\n# Documentation\n\nDocumentation is written using Sphinx and is available online. It is currently a combination of a reference guide and user manual.\n\n* You can view it online at [Read the Docs](https://pymupdf.readthedocs.io). This site also provides download options for PDF.\n* For a **quick start** look at the [tutorial](https://pymupdf.readthedocs.io/en/latest/tutorial.html) and the [recipes](https://pymupdf.readthedocs.io/en/latest/faq.html) chapters.\n\nThe latest changelog can be viewed [here](https://pymupdf.readthedocs.io/en/latest/changes.html).\n\n\n# Installation\n\nPyMuPDF **requires Python 3.8 or later**.\n\nFor versions 3.8 and up, Python wheels exist for **Windows** (32bit and 64bit), **Linux** (64bit, Intel and ARM) and **Mac OSX** (64bit, Intel only), so it can be installed from [PyPI](https://pypi.org/search/?q=pymupdf) in the usual way. To ensure pip support for the latest wheel platform tags, we strongly recommend to always upgrade pip first.\n\n    python -m pip install --upgrade pip\n    python -m pip install --upgrade pymupdf\n\nThere are **no mandatory** external dependencies. However, some **optional features** become available only if additional packages are installed:\n\n* [Pillow](https://pypi.org/project/Pillow/) for using pillow image output directly from PyMuPDF\n* [fontTools](https://pypi.org/project/fonttools/) for creating font subsets.\n* [pymupdf-fonts](https://pypi.org/project/pymupdf-fonts/) contains some nice fonts for your text output.\n* [Tesseract-OCR](https://github.com/tesseract-ocr/tesseract) for optical character recognition in images and document pages. Tesseract is separate software, not a Python package. To enable OCR functions in PyMuPDF, the system environment variable `\"TESSDATA_PREFIX\"` must be defined and contain the `tessdata` folder name of the Tesseract installation location.\n\n\nOlder wheels - also with support for older Python versions - can be found [here](https://github.com/pymupdf/PyMuPDF-Optional-Material/tree/master/wheels-upto-Py3.5) and on PyPI.\n\n> **Note:** If `pip` cannot find a wheel that is compatible with your platform, it will automatically build and install from source using the PyMuPDF sdist; this requires only that SWIG is installed on your system.\n\n\n# Alternative 'rebased' implementation.\n\nA new implementation of PyMuPDF is available as module `fitz_new`.\n\n*\n  Uses the [MuPDF C++ and Python\n  APIs](https://mupdf.readthedocs.io/en/latest/language-bindings.html)\n  instead of the MuPDF C API.\n\n* Use as a drop-in replace with: `import fitz_new as fitz`\n\n## Benefits\n\n* Access to the underlying MuPDF Python API.\n\n  The MuPDF Python API is available as `fitz_new.mupdf` - this is not possible\n  with native PyMuPDF, and can give useful flexibility to the user.\n\n* Simplified implementation.\n\n  The underlying MuPDF C++/Python APIs' automated reference counting, automatic\n  contexts, and native C++ and Python exceptions, make the implementation\n  simpler than classic PyMuPDF.\n\n  This also simplifies development of new PyMuPDF functionality.\n\n* Optional tracing of MuPDF C function calls using environment variables.\n\n  This is a feature of the MuPDF C++ and Python APIs, which can be\n  very useful during development and when reporting bugs. See:\n  <https://mupdf.readthedocs.io/en/latest/language-bindings.html#environmental-variables>\n\n* Possible future support for multithreaded use.\n\n  Classic PyMuPDF is explicitly single-threaded, but the MuPDF C++/Python APIs\n  have automated per-thread contexts.\n\n\n## Known issues\n\n*\n  `import fitz_new` is known to fail with a SEGV on Windows with Python-3.10.\n\n# Secondary wheel `PyMuPDFb`\n\nInstallation of PyMuPDF with pip will automatically install a second\nwheel called `PyMuPDFb` containing Python-independent libraries.\n\n\n# License and Copyright\n\nPyMuPDF and MuPDF are available under both, open-source AGPL and commercial license agreements.\n\nPlease read the full text of the [AGPL license agreement](https://www.gnu.org/licenses/agpl-3.0.html) (which is also included here in file COPYING) to ensure that your use case complies with the guidelines of this license. If you determine you cannot meet the requirements of the AGPL, please contact [Artifex](https://artifex.com/contact/pymupdf-inquiry.php) for more information regarding a commercial license.\n\nArtifex is the exclusive commercial licensing agent for MuPDF.\n\nArtifex, the Artifex logo, MuPDF, and the MuPDF logo are registered trademarks of Artifex Software Inc. PyMuPDF and the PyMuPDF logo are trademarks of Artifex Software, Inc. &copy; 2022 Artifex Software, Inc. All rights reserved.\n\n# Contact\nPlease use the [Discussions](https://github.com/pymupdf/PyMuPDF/discussions) menu for questions, comments, or asking for help, and submit issues [here](https://github.com/pymupdf/PyMuPDF/issues)."
}
