{
  "name": "pgsync",
  "full_name": "pgsync",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Sync Postgres data between databases",
  "license": "MIT",
  "homepage": "https://github.com/ankane/pgsync",
  "versions": {
    "stable": "0.7.4",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/ankane/pgsync/archive/v0.7.4.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "0d8c0d319374f658a8aacafb15edbc074328aaec503fa92aae6032d3e1f12e60"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": "/opt/homebrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/pgsync/blobs/sha256:2dfb0ba78422a71258c0046a1c59e433a7c70fd98e8564494b8878624e056756",
          "sha256": "2dfb0ba78422a71258c0046a1c59e433a7c70fd98e8564494b8878624e056756"
        },
        "arm64_monterey": {
          "cellar": "/opt/homebrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/pgsync/blobs/sha256:169345dc69a037d36dac2f0d54ffd229236bd62c86c97f85f07cced38f8c7f65",
          "sha256": "169345dc69a037d36dac2f0d54ffd229236bd62c86c97f85f07cced38f8c7f65"
        },
        "arm64_big_sur": {
          "cellar": "/opt/homebrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/pgsync/blobs/sha256:c3dd3f2937b118494d0002e08fd95ec0959b982396d9f3008d24f7ba05d84fec",
          "sha256": "c3dd3f2937b118494d0002e08fd95ec0959b982396d9f3008d24f7ba05d84fec"
        },
        "ventura": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/pgsync/blobs/sha256:c621ec145ac0bb5ba6297e2b24ee351c418e8144bc6d18c178c5a27c3e431a26",
          "sha256": "c621ec145ac0bb5ba6297e2b24ee351c418e8144bc6d18c178c5a27c3e431a26"
        },
        "monterey": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/pgsync/blobs/sha256:8f1be82ef9f91002531609773443d58aea9bfb0bd11e6979f7944680960e860e",
          "sha256": "8f1be82ef9f91002531609773443d58aea9bfb0bd11e6979f7944680960e860e"
        },
        "big_sur": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/pgsync/blobs/sha256:a38c199ddfda5b26938988cb5f575669e3bb0748c045ca5d49da6774988a09b2",
          "sha256": "a38c199ddfda5b26938988cb5f575669e3bb0748c045ca5d49da6774988a09b2"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/pgsync/blobs/sha256:6a6884e6e6c1ed462f3d06a42a2f1c3babfe12e25b9ae784f0072420b7c00344",
          "sha256": "6a6884e6e6c1ed462f3d06a42a2f1c3babfe12e25b9ae784f0072420b7c00344"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "libpq"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "ruby"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/pgsync.rb",
  "ruby_source_checksum": {
    "sha256": "d8bd2e13a5194d6654aa5de09fba7446f7ed0375f4f13c05d4cb3b4cce76a9b2"
  },
  "date_added": "2022-10-12T10:36:26+00:00",
  "readme": "# pgsync\n\nSync data from one Postgres database to another (like `pg_dump`/`pg_restore`). Designed for:\n\n- **speed** - tables are transferred in parallel\n- **security** - built-in methods to prevent sensitive data from ever leaving the server\n- **flexibility** - gracefully handles schema differences, like missing columns and extra columns\n- **convenience** - sync partial tables, groups of tables, and related records\n\n:tangerine: Battle-tested at [Instacart](https://www.instacart.com/opensource)\n\n[![Build Status](https://github.com/ankane/pgsync/workflows/build/badge.svg?branch=master)](https://github.com/ankane/pgsync/actions)\n\n## Installation\n\npgsync is a command line tool. To install, run:\n\n```sh\ngem install pgsync\n```\n\nThis will give you the `pgsync` command. If installation fails, you may need to install [dependencies](#dependencies).\n\nYou can also install it with Homebrew:\n\n```sh\nbrew install pgsync\n```\n\n## Setup\n\nIn your project directory, run:\n\n```sh\npgsync --init\n```\n\nThis creates `.pgsync.yml` for you to customize. We recommend checking this into your version control (assuming it doesn’t contain sensitive information). `pgsync` commands can be run from this directory or any subdirectory.\n\n## How to Use\n\nFirst, make sure your schema is set up in both databases. We recommend using a schema migration tool for this, but pgsync also provides a few [convenience methods](#schema). Once that’s done, you’re ready to sync data.\n\nSync tables\n\n```sh\npgsync\n```\n\nSync specific tables\n\n```sh\npgsync table1,table2\n```\n\nWorks with wildcards as well\n\n```sh\npgsync \"table*\"\n```\n\nSync specific rows (existing rows are overwritten)\n\n```sh\npgsync products \"where store_id = 1\"\n```\n\nYou can also preserve existing rows\n\n```sh\npgsync products \"where store_id = 1\" --preserve\n```\n\nOr truncate them\n\n```sh\npgsync products \"where store_id = 1\" --truncate\n```\n\n## Tables\n\nExclude specific tables\n\n```sh\npgsync --exclude table1,table2\n```\n\nAdd to `.pgsync.yml` to exclude by default\n\n```yml\nexclude:\n  - table1\n  - table2\n```\n\nSync tables from all schemas or specific schemas (by default, only the search path is synced)\n\n```sh\npgsync --all-schemas\n# or\npgsync --schemas public,other\n# or\npgsync public.table1,other.table2\n```\n\n## Groups\n\nDefine groups in `.pgsync.yml`:\n\n```yml\ngroups:\n  group1:\n    - table1\n    - table2\n```\n\nAnd run:\n\n```sh\npgsync group1\n```\n\n## Variables\n\nYou can also use groups to sync a specific record and associated records in other tables.\n\nTo get product `123` with its reviews, last 10 coupons, and store, use:\n\n```yml\ngroups:\n  product:\n    products: \"where id = {1}\"\n    reviews: \"where product_id = {1}\"\n    coupons: \"where product_id = {1} order by created_at desc limit 10\"\n    stores: \"where id in (select store_id from products where id = {1})\"\n```\n\nAnd run:\n\n```sh\npgsync product:123\n```\n\n## Schema\n\nSync the schema before the data (this wipes out existing data)\n\n```sh\npgsync --schema-first\n```\n\nSpecify tables\n\n```sh\npgsync table1,table2 --schema-first\n```\n\nSync the schema without data (this wipes out existing data)\n\n```sh\npgsync --schema-only\n```\n\npgsync does not try to sync Postgres extensions.\n\n## Sensitive Data\n\nPrevent sensitive data like email addresses from leaving the remote server.\n\nDefine rules in `.pgsync.yml`:\n\n```yml\ndata_rules:\n  email: unique_email\n  last_name: random_letter\n  birthday: random_date\n  users.auth_token:\n    value: secret\n  visits_count:\n    statement: \"(RANDOM() * 10)::int\"\n  encrypted_*: null\n```\n\n`last_name` matches all columns named `last_name` and `users.last_name` matches only the users table. Wildcards are supported, and the first matching rule is applied.\n\nOptions for replacement are:\n\n- `unique_email`\n- `unique_phone`\n- `unique_secret`\n- `random_letter`\n- `random_int`\n- `random_date`\n- `random_time`\n- `random_ip`\n- `value`\n- `statement`\n- `null`\n- `untouched`\n\nRules starting with `unique_` require the table to have a single column primary key. `unique_phone` requires a numeric primary key.\n\n## Foreign Keys\n\nForeign keys can make it difficult to sync data. Three options are:\n\n1. Defer constraints (recommended)\n2. Manually specify the order of tables\n3. Disable foreign key triggers, which can silently break referential integrity (not recommended)\n\nTo defer constraints, use:\n\n```sh\npgsync --defer-constraints\n```\n\nTo manually specify the order of tables, use `--jobs 1` so tables are synced one-at-a-time.\n\n```sh\npgsync table1,table2,table3 --jobs 1\n```\n\nTo disable foreign key triggers and potentially break referential integrity, use:\n\n```sh\npgsync --disable-integrity\n```\n\nThis requires superuser privileges on the `to` database. If syncing to (not from) Amazon RDS, use the `rds_superuser` role. If syncing to (not from) Heroku, there doesn’t appear to be a way to disable integrity.\n\n## Triggers\n\nDisable user triggers with:\n\n```sh\npgsync --disable-user-triggers\n```\n\n## Sequences\n\nSkip syncing sequences with:\n\n```sh\npgsync --no-sequences\n```\n\n## Append-Only Tables\n\nFor extremely large, append-only tables, sync in batches.\n\n```sh\npgsync large_table --in-batches\n```\n\nThe script will resume where it left off when run again, making it great for backfills.\n\n## Connection Security\n\nAlways make sure your [connection is secure](https://ankane.org/postgres-sslmode-explained) when connecting to a database over a network you don’t fully trust. Your best option is to connect over SSH or a VPN. Another option is to use `sslmode=verify-full`. If you don’t do this, your database credentials can be compromised.\n\n## Safety\n\nTo keep you from accidentally overwriting production, the destination is limited to `localhost` or `127.0.0.1` by default.\n\nTo use another host, add `to_safe: true` to your `.pgsync.yml`.\n\n## Multiple Databases\n\nTo use with multiple databases, run:\n\n```sh\npgsync --init db2\n```\n\nThis creates `.pgsync-db2.yml` for you to edit. Specify a database in commands with:\n\n```sh\npgsync --db db2\n```\n\n## Integrations\n\n- [Django](#django)\n- [Heroku](#heroku)\n- [Laravel](#laravel)\n- [Rails](#rails)\n\n### Django\n\nIf you run `pgsync --init` in a Django project, migrations will be excluded in `.pgsync.yml`.\n\n```yml\nexclude:\n  - django_migrations\n```\n\n### Heroku\n\nIf you run `pgsync --init` in a Heroku project, the `from` database will be set in `.pgsync.yml`.\n\n```yml\nfrom: $(heroku config:get DATABASE_URL)?sslmode=require\n```\n\n### Laravel\n\nIf you run `pgsync --init` in a Laravel project, migrations will be excluded in `.pgsync.yml`.\n\n```yml\nexclude:\n  - migrations\n```\n\n### Rails\n\nIf you run `pgsync --init` in a Rails project, Active Record metadata and schema migrations will be excluded in `.pgsync.yml`.\n\n```yml\nexclude:\n  - ar_internal_metadata\n  - schema_migrations\n```\n\n## Debugging\n\nTo view the SQL that’s run, use:\n\n```sh\npgsync --debug\n```\n\n## Other Commands\n\nHelp\n\n```sh\npgsync --help\n```\n\nVersion\n\n```sh\npgsync --version\n```\n\nList tables\n\n```sh\npgsync --list\n```\n\n## Scripts\n\nUse groups when possible to take advantage of parallelism.\n\nFor Ruby scripts, you may need to do:\n\n```rb\nBundler.with_unbundled_env do\n  system \"pgsync ...\"\nend\n```\n\n## Docker\n\nGet the [Docker image](https://hub.docker.com/r/ankane/pgsync) with:\n\n```sh\ndocker pull ankane/pgsync\nalias pgsync=\"docker run -ti ankane/pgsync\"\n```\n\nThis will give you the `pgsync` command.\n\n## Dependencies\n\nIf installation fails, your system may be missing Ruby or libpq.\n\nOn Mac, run:\n\n```sh\nbrew install libpq\n```\n\nOn Ubuntu, run:\n\n```sh\nsudo apt-get install ruby-dev libpq-dev build-essential\n```\n\n## Upgrading\n\nRun:\n\n```sh\ngem install pgsync\n```\n\nTo use master, run:\n\n```sh\ngem install specific_install\ngem specific_install https://github.com/ankane/pgsync.git\n```\n\nWith Homebrew, run:\n\n```sh\nbrew upgrade pgsync\n```\n\nWith Docker, run:\n\n```sh\ndocker pull ankane/pgsync\n```\n\n## Related Projects\n\nAlso check out:\n\n- [Dexter](https://github.com/ankane/dexter) - The automatic indexer for Postgres\n- [PgHero](https://github.com/ankane/pghero) - A performance dashboard for Postgres\n- [pgslice](https://github.com/ankane/pgslice) - Postgres partitioning as easy as pie\n\n## Thanks\n\nInspired by [heroku-pg-transfer](https://github.com/ddollar/heroku-pg-transfer).\n\n## History\n\nView the [changelog](https://github.com/ankane/pgsync/blob/master/CHANGELOG.md)\n\n## Contributing\n\nEveryone is encouraged to help improve this project. Here are a few ways you can help:\n\n- [Report bugs](https://github.com/ankane/pgsync/issues)\n- Fix bugs and [submit pull requests](https://github.com/ankane/pgsync/pulls)\n- Write, clarify, or fix documentation\n- Suggest or add new features\n\nTo get started with development:\n\n```sh\ngit clone https://github.com/ankane/pgsync.git\ncd pgsync\nbundle install\n\ncreatedb pgsync_test1\ncreatedb pgsync_test2\ncreatedb pgsync_test3\n\nbundle exec rake test\n```"
}
