{
  "name": "okta-aws-cli",
  "full_name": "okta-aws-cli",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Okta federated identity for AWS CLI",
  "license": "Apache-2.0",
  "homepage": "https://github.com/okta/okta-aws-cli",
  "versions": {
    "stable": "1.1.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/okta/okta-aws-cli/archive/refs/tags/v1.1.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "464e3db0fdb8aa5e2d1ef7bf7daff0fc65e2c3b9084f5f76a4ceaab7f9242ae5"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/okta-aws-cli/blobs/sha256:8f204d9160e8bd3528fa4e6f9e30e7c6db968ff127b9122116e2f54be7f408e1",
          "sha256": "8f204d9160e8bd3528fa4e6f9e30e7c6db968ff127b9122116e2f54be7f408e1"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/okta-aws-cli/blobs/sha256:8f204d9160e8bd3528fa4e6f9e30e7c6db968ff127b9122116e2f54be7f408e1",
          "sha256": "8f204d9160e8bd3528fa4e6f9e30e7c6db968ff127b9122116e2f54be7f408e1"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/okta-aws-cli/blobs/sha256:8f204d9160e8bd3528fa4e6f9e30e7c6db968ff127b9122116e2f54be7f408e1",
          "sha256": "8f204d9160e8bd3528fa4e6f9e30e7c6db968ff127b9122116e2f54be7f408e1"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/okta-aws-cli/blobs/sha256:d4de7ff74abe2b47136beb97a0da64b2ada03e8ca490ff7ea277b74dbcd888a3",
          "sha256": "d4de7ff74abe2b47136beb97a0da64b2ada03e8ca490ff7ea277b74dbcd888a3"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/okta-aws-cli/blobs/sha256:d4de7ff74abe2b47136beb97a0da64b2ada03e8ca490ff7ea277b74dbcd888a3",
          "sha256": "d4de7ff74abe2b47136beb97a0da64b2ada03e8ca490ff7ea277b74dbcd888a3"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/okta-aws-cli/blobs/sha256:d4de7ff74abe2b47136beb97a0da64b2ada03e8ca490ff7ea277b74dbcd888a3",
          "sha256": "d4de7ff74abe2b47136beb97a0da64b2ada03e8ca490ff7ea277b74dbcd888a3"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/okta-aws-cli/blobs/sha256:8938bd55e024b196de623d91da494f62eb4396d0380733e87e2aeb04ed62cd50",
          "sha256": "8938bd55e024b196de623d91da494f62eb4396d0380733e87e2aeb04ed62cd50"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/okta-aws-cli.rb",
  "ruby_source_checksum": {
    "sha256": "c279eb06b6d333e74af8e41b16c3f059df3042052bbfce01850818d18fc9994b"
  },
  "date_added": "2023-03-09T10:04:07+00:00",
  "readme": "# okta-aws-cli\n\nOkta authentication in support of AWS CLI operation. The `okta-aws-cli` CLI is\nnative to the Okta Identity Engine and its authentication flows. The CLI is not\ncompatible with Okta Classic orgs.\n\nThe Okta AWS Federation application is SAML based and the Okta AWS CLI interacts\nwith AWS IAM using \n[AssumeRoleWithSAML](https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoleWithSAML.html).\nOkta does not have an OIDC based AWS Federation application at this time.\n\n`okta-aws-cli` handles authentication through Okta and token exchange with AWS\nSTS to collect a proper IAM role for the AWS CLI operator.  The resulting\noutput is a set made up of  `Access Key ID`, `Secret Access Key`, and `Session\nToken` of [AWS\ncredentials](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html)\nfor the AWS CLI. The Okta AWS CLI expresses the AWS credentials as either\n[environment\nvariables](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html)\nor appended to an AWS CLI [credentials\nfile](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html).\nThe `Session Token` has an expiry of 60 minutes.\n\n```shell\n# *nix, export statements\n$ okta-aws-cli\nexport AWS_ACCESS_KEY_ID=ASIAUJHVCS6UQC52NOL7\nexport AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\nexport AWS_SESSION_TOKEN=AQoEXAMPLEH4aoAH0gNCAPyJxz4BlCFFxWNE1OPTgk5T...\n\n# *nix, eval export ENV vars into current shell\n$ eval `okta-aws-cli` && aws s3 ls\n2018-04-04 11:56:00 test-bucket\n2021-06-10 12:47:11 mah-bucket\n\nrem Windows setx statements\nC:\\> okta-aws-cli\nSETX AWS_ACCESS_KEY_ID ASIAUJHVCS6UQC52NOL7\nSETX AWS_SECRET_ACCESS_KEY wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\nSETX AWS_SESSION_TOKEN AQoEXAMPLEH4aoAH0gNCAPyJxz4BlCFFxWNE1OPTgk5T...\n\n```\n\n* [Requirements](#requirements)\n* [Recommendations](#recommendations)\n* [Installation](#installation)\n* [Configuration](#configuration)\n* [Operation](#operation)\n* Comparison\n  * [Nike gimme-aws-creds](#nike-gimme-aws-creds)\n  * [Versent saml2aws](#versent-saml2aws)\n* [Development](#development)\n* [Contributing](#contributing)\n* [References](#references)\n\n## Requirements\n\nThe Okta AWS CLI requires an OIE organization and an [OIDC Native\nApplication](https://developer.okta.com/blog/2021/11/12/native-sso) paired with\nan [Okta AWS Federation integration\napplication](https://www.okta.com/integrations/aws-account-federation/). The\nOkta AWS Fed app is itself paired with an [AWS IAM identity\nprovider](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create.html).\n\nThe OIDC Native Application requires Grant Types `Authorization Code`, `Device\nAuthorization` , and `Token Exchange`. These settings are in the Okta Admin UI\nat `Applications > [the OIDC app] > General Settings > Grant type`.\n\n If [Multiple AWS environments](#multiple-aws-environments) (see below) are to\n be supported by a single OIDC application, the OIDC app must have the\n `okta.apps.read` grant. Apps read and other application grants are configured\n at `Applications > [the OIDC app] > Okta API Scopes` in the Okta Admin UI.\n \nThe pairing with the AWS Federation Application is achieved in the Fed app's\nSign On Settings. These settings are in the Okta Admin UI at `Applications > [the\nAWS Fed app] > Sign On`. There are two values that need to be set on the Sign On\nform. The first is the `Allowed Web SSO Client` value which is the Client ID of\nthe OIDC Native Application. The second is `Identity Provider ARN (Required only\nfor SAML SSO)` value which is the AWS ARN of the associated IAM Identity\nProvider.\n\nOkta has a wizard to help establish the settings needed in AWS IAM, automatic\ngeneration of a SAML certificate for the IAM Identity Provider, and the settings\nneeded for the Okta AWS Federation app. Replace these required values in the\nURL below. Then follow the directions in that wizard.\n\n* Org Admin Domain - [ADMIN_DOMAIN] - example: `myorg-admin.okta.com`\n* Okta AWS Federation app Client ID - [CLIENT_ID] - example: `0oa555555aaaaaaZZZZZ`\n\n`https://saml-doc.okta.com/SAML_Docs/How-to-Configure-SAML-2.0-for-Amazon-Web-Service.html?baseAdminUrl=https://[ADMIN_DOMAIN]&app=amazon_aws&instanceId=[CLIENT_ID]`\n\n### Multiple AWS environments\n\n**NOTE**: Multiple AWS environments works correctly without extra configuration\nfor Admin users. See [\"Non-Admin Users\"](#non-admin-users) for extra\nconfiguration needed for non-admin users.\n\nTo support multiple AWS environments, associate additional AWS Federation\napplications with the OIDC app The OIDC app **must** have the `okta.apps.read`\ngrant. The following is an illustration of the association of objects that make\nup this kind of configuration.\n\n![okta-aws-cli supporting multiple AWS environments](./doc/multi-aws-environments.jpg)\n\n* All AWS Federation apps have the OIDC native app as their Allowed Web SSO client\n* Fed App #1 is linked with an IAM IdP that has two Roles, one for S3 read, and one for S3 read/write\n* Fed App #2 is linked to an IdP and Role dedicated to ec2 operations\n* Fed App #3 is oriented for an administrator is comprised of an IdP and Role with many different permissions\n\n#### Example select from multiple IdPs\n\n![select IdP](./doc/example-select-idp.png)\n\n#### Example select from multiple Roles\n\n![select Role](./doc/example-select-role.png)\n\n#### Example creds consumed for S3 operations\n\n![conclusion](./doc/example-conclusion.png)\n\n### Non-Admin Users\n\nMultiple AWS environments requires extra configuration for non-admin users.\nFollow these steps to support non-admin users.\n\n1) Create a custom admin role with the only permission being \"View application\nand their details\", and a resource set constrained to \"All AWS Account\nFederation apps\".\n\n2) Create a group that will contain the AWS custom admin role users.\n\n3) Add a rule on the admin console authentication policy that denies access if\nthe use is a member of the group from step 2.\n\n4) Assign non-admin users this custom role in step 1 and assign them to the\ngroup in step 2.\n\nThe \"Admin\" button will be visible on the Okta dashboard of non-admin users but\nthey will receive a 403 if they attempt to open the Admin UI.\n\nIt is on our feature backlog to get support into the Okta API to allow the\nmultiple AWS Fed apps feature into okta-aws-cli without needing this work\naround using a custom admin role.\n\n## Recommendations\n\nWe recommend that the AWS Federation Application and OIDC native application\nhave equivalent policies if not share the same policy. If the AWS Federation\napp has more stringent assurance requirements than the OIDC app a `400 Bad\nRequest` API error is likely to occur.\n\n## Installation\n\n### Binaries\n\nBinary releases for combinations of operating systems and architectures are\nposted to the [okta-aws-cli\nreleases](https://github.com/okta/okta-aws-cli/releases) section in Github. Each\nrelease includes CHANGELOG notes for that release.\n\n### OSX/Homebrew\n\nokta-aws-cli is distributed to OSX via [homebrew](https://brew.sh/)\n\n```\n$ brew install okta-aws-cli\n```\n\n### Local build/install\n\nSee [Development](#development) section.\n\nTL;DR run directly from source\n```\n$ go run cmd/okta-aws-cli/main.go --help\n```\n\nTL;DR build from source, installed into golang bin directory\n```\n$ make build\n```\n\n## Configuration\n\n**NOTE**: If your AWS IAM IdP is in a non-commercial region, such as GovCloud,\nthe environmental variable\n[`AWS_REGION`](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html)\nshould be set\n[accordingly](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html#cli-configure-quickstart-region).\n\nAt a minimum the Okta AWS CLI requires two configuration values. These are the\nvalues for the [Okta Org\ndomain](https://developer.okta.com/docs/guides/find-your-domain/main/), and the\nclient ID of the [OIDC Native\nApplication](https://developer.okta.com/blog/2021/11/12/native-sso).\n\nIf the OIDC Native App doesn't also have the `okta.apps.read` grant the client\nID of the [Okta AWS\nFederation](https://www.okta.com/integrations/aws-account-federation/)\nintegration application is also required.\n\nAn optional output format value can be configured. Default output format is as\n[environment\nvariables](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html)\nthat can be used for the AWS CLI configuration. Output can also be expressed as\n[credential file\nvalues](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html)\nfor AWS CLI configuration.\n\nConfiguration can be done with command line flags, environment variables, an\n`.env` file, or a combination of the three. The first value found in that\nevaluation order takes precedent.\n\nAlso see the CLI's online help `$ okta-aws-cli --help`\n\n| Name | ENV var and .env file value | Command line flag | Description |\n|-------|-----------------------------|-------------------|-------------|\n| Okta Org Domain (**required**) | `OKTA_ORG_DOMAIN` | `--org-domain [value]` | Full domain hostname of the Okta org e.g. `test.okta.com` |\n| OIDC Client ID (**required**) | `OKTA_OIDC_CLIENT_ID` | `--oidc-client-id [value]` | See [Allowed Web SSO Client](#allowed-web-sso-client) |\n| Okta AWS Account Federation integration app ID (optional) | `OKTA_AWS_ACCOUNT_FEDERATION_APP_ID` | `--aws-acct-fed-app-id [value]` | See [AWS Account Federation integration app](#aws-account-federation-integration-app). This value is only required if the OIDC app doesn't have the `okta.apps.read` grant for whatever reason |\n| Preselect the AWS IAM Identity Provider ARN (optional) | `OKTA_AWSCLI_IAM_IDP` | `--aws-iam-idp [value]` | Preselects the IdP list to this preferred IAM Identity Provider. If there are other IdPs available they will not be listed. |\n| Preselects the AWS IAM Role ARN to assume (optional) | `OKTA_AWSCLI_IAM_ROLE` | `--aws-iam-role [value]` | Preselects the role list to this preferred IAM role for the given IAM Identity Provider. If there are other Roles available they will not be listed. |\n| AWS Session Duration (optional) | `OKTA_AWSCLI_SESSION_DURATION` | `--session-duration [value]` | The lifetime, in seconds, of the AWS credentials. Must be between 60 and 43200. |\n| Output format (optional) | `OKTA_AWSCLI_FORMAT` | `--format [value]` | Default is `env-var`. Options: `env-var` for output to environment variables, `aws-credentials` for output to AWS credentials file |\n| Profile (optional) | `OKTA_AWSCLI_PROFILE` | `--profile [value]` | Default is `default`  |\n| Display QR Code (optional) | `OKTA_AWSCLI_QR_CODE=true` | `--qr-code` | `true` if flag is present  |\n| Automatically open the activation URL with the system web browser (optional) | `OKTA_AWSCLI_OPEN_BROWSER=true` | `--open-browser` | `true` if flag is present  |\n| Cache Okta access token at `$HOME/.okta/awscli-access-token.json` to reduce need to open device authorization URL | `OKTA_AWSCLI_CACHE_ACCESS_TOKEN=true` | `--cache-access-token` | `true` if flag is present  |\n| Alternate AWS credentials file path (optional) | `OKTA_AWSCLI_AWS_CREDENTIALS` | `--aws-credentials` | Path to alternative credentials file other than AWS CLI default |\n| (Over)write the given profile to the AWS credentials file (optional). WARNING: When enabled, overwriting can inadvertently remove dangling comments and extraneous formatting from the creds file. | `OKTA_AWSCLI_WRITE_AWS_CREDENTIALS=true` | `--write-aws-credentials` | `true` if flag is present  |\n| Emit deprecated AWS variable `aws_security_token` with duplicated value from `aws_session_token` | `OKTA_AWSCLI_LEGACY_AWS_VARIABLES=true` | `--legacy-aws-variables` | `true` if flag is present  |\n| Emit expiry timestamp `x_security_token_expires` in RFC3339 format for the session/security token (AWS credentials file only) | `OKTA_AWSCLI_EXPIRY_AWS_VARIABLES=true` | `--expiry-aws-variables` | `true` if flag is present  |\n| Print operational information to the screen for debugging purposes | `OKTA_AWSCLI_DEBUG=true` | `--debug` | `true` if flag is present  |\n| Verbosely print all API calls/responses to the screen | `OKTA_AWSCLI_DEBUG_API_CALLS=true` | `--debug-api-calls` | `true` if flag is present  |\n| HTTP/HTTPS Proxy support | `HTTP_PROXY` or `HTTPS_PROXY` | n/a | HTTP/HTTPS URL of proxy service (based on golang [net/http/httpproxy](https://pkg.go.dev/golang.org/x/net/http/httpproxy) package) |\n| Debug okta.yaml config file and exit | `OKTA_AWSCLI_DEBUG_CONFIG=true` | `--debug-config` | `true` if flag is present  |\n\n**NOTE**: If\n[`AWS_REGION`](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html)\nis set in the `.env` file it will be promoted into the okta-aws-cli runtime if\nit isn't also already set as an ENV VAR. This will allow operators making use of\nan `.env` file to have proper AWS API behavior in spefific regions, for instance\nin US govcloud and other non-North America regions.\n\n### Allowed Web SSO Client\n\nThis is the \"Allowed Web SSO Client\" value from the \"Sign On\" settings of an\n[AWS Account\nFederation\"](https://www.okta.com/integrations/aws-account-federation/)\nintegration app and is an Okta [OIDC Native\nApplication](https://developer.okta.com/blog/2021/11/12/native-sso) ID. The ID\nis the identifier of the client is Okta app acting as the IdP for AWS.\n\nExample: `0oa5wyqjk6Wm148fE1d7`\n\n### AWS Account Federation integration app\n\nID for the [AWS Account\nFederation\"](https://www.okta.com/integrations/aws-account-federation/)\nintegration app.\n\nExample: `0oa9x1rifa2H6Q5d8325`\n\n\n### Environment variables example\n\n```shell\nexport OKTA_ORG_DOMAIN=test.okta.com\nexport OKTA_OIDC_CLIENT_ID=0oa5wyqjk6Wm148fE1d7\n```\n\n### `.env` file variables example\n\n```\nOKTA_ORG_DOMAIN=test.okta.com\nOKTA_OIDC_CLIENT_ID=0oa5wyqjk6Wm148fE1d7\n```\n\n### Command line flags example\n\n#### OIDC client has `okta.apps.read` grant\n\n```shell\n\n$ okta-aws-cli --org-domain test.okta.com \\\n    --oidc-client-id 0oa5wyqjk6Wm148fE1d7\n```\n\n#### OIDC client **does not** have `okta.apps.read` grant\n\n```shell\n\n$ okta-aws-cli --org-domain test.okta.com \\\n    --oidc-client-id 0oa5wyqjk6Wm148fE1d7 \\\n    --aws-acct-fed-app-id 0oa9x1rifa2H6Q5d8325\n```\n\n### Friendly IdP and Role menu labels\n\nWhen the operator has many AWS Federation apps listing the AWS IAM IdP ARNs can\nmake it hard to read the list. The same can be said if an IdP has many IAM Role\nARNs associated with it. To make this easier to manage the operator can create\nan Okta config file in YAML format at `$HOME/.okta/okta.yaml` that allows them\nto set a map of alias labels for the ARN values.\n\n**NOTE**: The Okta language SDKs have standardized on using\n`$HOME/.okta/okta.yaml` as a configuration file and location. We will continue\nthat practice with read-only friendly okta-aws-cli application values.\n\n#### Before\n\n```\n? Choose an IdP:  [Use arrows to move, type to filter]\n> Fed App 1 Label\n  Fed App 2 Label\n  Fed App 3 Label\n  Fed App 4 Label\n\n? Choose a Role:  [Use arrows to move, type to filter]\n> Admin (arn:aws:iam::123456789012:role/admin)\n  Ops\n```\n\n#### Example `$HOME/.okta/okta.yaml`\n\n```yaml\n---\nawscli:\n  idps:\n    \"arn:aws:iam::123456789012:saml-provider/company-okta-idp\": \"Data Production\"\n    \"arn:aws:iam::012345678901:saml-provider/company-okta-idp\": \"Data Development\"\n    \"arn:aws:iam::901234567890:saml-provider/company-okta-idp\": \"Marketing Production\"\n    \"arn:aws:iam::890123456789:saml-provider/company-okta-idp\": \"Marketing Development\"\n  roles:\n    \"arn:aws:iam::123456789012:role/admin\": \"Prod Admin\"\n    \"arn:aws:iam::123456789012:role/operator\": \"Prod Ops\"\n    \"arn:aws:iam::012345678901:role/admin\": \"Dev Admin\"\n    \"arn:aws:iam::012345678901:role/operator\": \"Dev Ops\"\n```\n\n#### After\n\n```\n? Choose an IdP:  [Use arrows to move, type to filter]\n> Data Production\n  Data Development\n  Marketing Production\n  Marketing Development\n\n? Choose a Role:  [Use arrows to move, type to filter]\n> Prod Admin\n  Prod Ops\n```\n\n#### Debug okta.yaml\n\nokta-aws-cli has a debug option to check if the okta.yaml file is readable and\nin valid format.\n\n```\n$ okta-aws-cli --debug-config\n\nGiven this YAML as an example template of okta.yaml for reference:\n\n---\nawscli:\n  idps:\n    \"arn:aws:iam::123456789012:saml-provider/company-okta-idp\": \"Data Production\"\n    \"arn:aws:iam::012345678901:saml-provider/company-okta-idp\": \"Data Development\"\n  roles:\n    \"arn:aws:iam::123456789012:role/admin\": \"Prod Admin\"\n    \"arn:aws:iam::123456789012:role/operator\": \"Prod Ops\"\n    \"arn:aws:iam::012345678901:role/admin\": \"Dev Admin\"\n    \"arn:aws:iam::012345678901:role/operator\": \"Dev Ops\"\n\nfound home directory \"/Users/person\"\nokta.yaml is readable \"/Users/person/.okta/okta.yaml\"\nokta.yaml is valid yaml\nokta.yaml has root \"awscli\" section\nokta.yaml \"awscli.idps\" section is a map of 2 ARN string keys to friendly string label values\nokta.yaml \"awscli.roles\" section is a map of 4 ARN string keys to friendly string label values\nokta.yaml is OK\ndebugging okta-aws-cli config $HOME/.okta/okta.yaml is complete\n```\n\nIf any of the checks fail a warning and diagnostic message is given.\n\nokta-aws-cli will exit once the debug config operation is complete. It is not\nintended to be run with other flags.\n\n## Operation\n\nThe behavior of the Okta AWS CLI is to be friendly for shell input and\nscripting. Output of the command that is human oriented is done on `STDERR` and\noutput for the AWS CLI that can be consumed in scripting is done on `STDOUT`.\nThis allows for the command's results to be `eval`'d into the current shell as\n`eval` will only make use of `STDOUT` values.\n\n\n### Plain usage\n\n**NOTE**: example assumes other Okta AWS CLI configuration values have already been\nset by ENV variables or `.env` file.\n\n**NOTE**: output will be in `setx` statements if the runtime is Windows.\n\n**NOTE**: okta-aws-cli only needs to be called the first time to gather AWS\ncreds. Then called again once those creds have expired. It does not need to be\ncalled every time before each actual AWS CLI invocation.\n\n```shell\n$ okta-aws-cli\nOpen the following URL to begin Okta device authorization for the AWS CLI.\n\nhttps://test-org.okta.com/activate?user_code=ZNQZQXQQ\n\n? Choose an IdP: arn:aws:iam::123456789012:saml-provider/My_IdP\n? Choose a Role: arn:aws:iam::456789012345:role/My_Role\n\nexport AWS_ACCESS_KEY_ID=ASIAUJHVCS6UQC52NOL7\nexport AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\nexport AWS_SESSION_TOKEN=AQoEXAMPLEH4aoAH0gNCAPyJxz4BlCFFxWNE1OPTgk5T...\n\n$ export AWS_ACCESS_KEY_ID=ASIAUJHVCS6UQC52NOL7\n$ export AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\n$ export AWS_SESSION_TOKEN=AQoEXAMPLEH4aoAH0gNCAPyJxz4BlCFFxWNE1OPTgk5T...\n$ aws s3 ls\n2018-04-04 11:56:00 test-bucket\n2021-06-10 12:47:11 mah-bucket\n```\n\n### Scripted orientated usages\n\n**NOTE**: example assumes other Okta AWS CLI configuration values have already been\nset by ENV variables or `.env` file.\n\n```shell\n$ eval `okta-aws-cli` && aws s3 ls\n2018-04-04 11:56:00 test-bucket\n2021-06-10 12:47:11 mah-bucket\n\n$ eval `okta-aws-cli`\n\n$ aws s3 ls\n2018-04-04 11:56:00 test-bucket\n2021-06-10 12:47:11 mah-bucket\n\n$ aws s3 ls\n2018-04-04 11:56:00 test-bucket\n2021-06-10 12:47:11 mah-bucket\n```\n\n### AWS credentials file orientated usage\n\n**NOTE**: example assumes other Okta AWS CLI configuration values have already been\nset by ENV variables or `.env` file.\n\n```shell\n$ okta-aws-cli --profile test --format aws-credentials && \\\n  aws --profile test s3 ls\n\nOpen the following URL to begin Okta device authorization for the AWS CLI.\n\nhttps://test-org.okta.com/activate?user_code=ZNQZQXQQ\n\n? Choose an IdP: arn:aws:iam::123456789012:saml-provider/My_IdP\n? Choose a Role: arn:aws:iam::456789012345:role/My_Role\nWrote profile \"test\" to /Users/mikemondragon/.aws/credentials\n\n2018-04-04 11:56:00 test-bucket\n2021-06-10 12:47:11 mah-bucket\n```\n**NOTE**: Writing to the AWS credentials file will include the `x_security_token_expires` value in RFC3339 format. This allows tools dependent on valid AWS credentials to validate if they are expired or not, and potentially trigger a refresh if needed.\n\n**NOTE**: the Okta AWS CLI will only append to the AWS credentials file. Be sure to\ncomment out or remove previous named profiles from the credentials file.\nOtherwise an `Unable to parse config file` error like the following may occur.\n\n```shell\naws --profile example s3 ls\n\nUnable to parse config file: /home/user/.aws/credentials\n```\n\n### Help\n\n```shell\n$ okta-aws-cli --help\n```\n\n### Version\n\n```shell\n$ okta-aws-cli --version\n```\n\n## Comparison\n\n### Nike gimme-aws-creds\n\nThere are a number of differences in terms of operation and functionality\nbetween Okta AWS CLI and [Nike's\ngimme-aws-creds](https://github.com/Nike-Inc/gimme-aws-creds).\n\nThe Okta AWS CLI is native to the [Okta Identity\nEngine](https://help.okta.com/oie/en-us/Content/Topics/identity-engine/oie-index.htm).\nNo matter what kinds of authentication flows (multi-factors, assigned users,\netc.) have been applied to the Native OIDC application, the CLI works within\nthose constraints naturally. The Okta CLI is OIE only and will not work with\nClassic orgs.\n\nA simple URL is given to the operator to open in a browser and from there the\nCLI's authentication and authorization is initiated. The Okta AWS CLI doesn't\nprompt for passwords or any other user credentials itself, or offers to store\nuser credentials on a desktop keychain.\n\nThe configuration of the Okta AWS CLI is minimal with only two required values:\nOkta org domain name, and OIDC app id.\n\nThe Okta CLI is CLI flag and environment variable oriented and its default\noutput is as environment variables. It can also write to AWS credentials file.\nThe default writing option is an apped operation and can be explicitly set to\noverwrite previous values for a profile with the `--write-aws-credentials` flag.\n\n### Versent saml2aws\n\nThe comparison between Okta AWS CLI and [Versent\nsaml2aws](https://github.com/Versent/saml2aws) are identical to the comparison\nbetween Okta AWS CLI and [Nike gimme-aws-creds](#nike-gimme-aws-creds).\n\n## Development\n\nRun source code locally\n\n```\ngo run cmd/okta-aws-cli/main.go\n```\n\nInstall tools that the Makefile uses like `gofumpt` and `golint`\n\n```\nmake tools\n```\n\nBuilding\n\n```\nmake build\n```\n\nTesting\n\n```\nmake test\n```\n\nRun golang code quality control tools on the codebase (`go vet`, `golint`, etc.)\n\n```\nmake qc\n```\n\n## Contributing\n\nWe're happy to accept contributions and PRs! Please see the [contribution\nguide](CONTRIBUTING.md) to understand how to structure a contribution.\n\n## References\n\n* [Okta Developer Forum](https://devforum.okta.com/)\n* [Okta Developer Documentation](https://developer.okta.com/)\n* [okta-aws-cli issues](https://github.com/okta/okta-aws-cli/issues)\n* [okta-aws-cli releases](https://github.com/okta/okta-aws-cli/releases)"
}
