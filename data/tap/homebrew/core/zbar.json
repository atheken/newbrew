{
  "name": "zbar",
  "full_name": "zbar",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Suite of barcodes-reading tools",
  "license": "LGPL-2.1-only",
  "homepage": "https://github.com/mchehab/zbar",
  "versions": {
    "stable": "0.23.90",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://linuxtv.org/downloads/zbar/zbar-0.23.90.tar.bz2",
      "tag": null,
      "revision": null,
      "checksum": "9152c8fb302b3891e1cb9cc719883d2f4ccd2483e3430783a2cf2d93bd5901ad"
    },
    "head": {
      "url": "https://github.com/mchehab/zbar.git",
      "branch": "master"
    }
  },
  "revision": 4,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": "/opt/homebrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/zbar/blobs/sha256:a556e1d3761eef86b007225b17c1e2e3bd3d8f5c0586c96b9db95261012623e5",
          "sha256": "a556e1d3761eef86b007225b17c1e2e3bd3d8f5c0586c96b9db95261012623e5"
        },
        "arm64_monterey": {
          "cellar": "/opt/homebrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/zbar/blobs/sha256:ecb4a7174906195486f0f9badabc2e5affd732022fc9e3b832c1b7a462a3e203",
          "sha256": "ecb4a7174906195486f0f9badabc2e5affd732022fc9e3b832c1b7a462a3e203"
        },
        "arm64_big_sur": {
          "cellar": "/opt/homebrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/zbar/blobs/sha256:2e7a16f085ca08bd70c1ab3b8d88683281ea51481c3f1c26402c2b59f949fa6d",
          "sha256": "2e7a16f085ca08bd70c1ab3b8d88683281ea51481c3f1c26402c2b59f949fa6d"
        },
        "ventura": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/zbar/blobs/sha256:8349004627c6741ecc50f1e9410be7ac4149ec7ad326c2c8e6896f23986d2f70",
          "sha256": "8349004627c6741ecc50f1e9410be7ac4149ec7ad326c2c8e6896f23986d2f70"
        },
        "monterey": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/zbar/blobs/sha256:853aa15556c0ccd130dd35074cfd67840720583d3e8564f7c9c1fee101c5d9ac",
          "sha256": "853aa15556c0ccd130dd35074cfd67840720583d3e8564f7c9c1fee101c5d9ac"
        },
        "big_sur": {
          "cellar": "/usr/local/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/zbar/blobs/sha256:3b8169dcfeaed1f704084073f93c619510c415b37454d1a0858d5bd689b89911",
          "sha256": "3b8169dcfeaed1f704084073f93c619510c415b37454d1a0858d5bd689b89911"
        },
        "x86_64_linux": {
          "cellar": "/home/linuxbrew/.linuxbrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/zbar/blobs/sha256:ef7a2cf8345087907b68a3ba10874aca3bcc9a8f8f3bafcd30dc8df4c5255fab",
          "sha256": "ef7a2cf8345087907b68a3ba10874aca3bcc9a8f8f3bafcd30dc8df4c5255fab"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "pkg-config",
    "xmlto"
  ],
  "dependencies": [
    "imagemagick",
    "jpeg-turbo",
    "dbus"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/zbar.rb",
  "ruby_source_checksum": {
    "sha256": "e475ef065aeb4e2fe9bb50060500bdfa4665d7baeb0224b264467c90c3b90adb"
  },
  "head_dependencies": {
    "build_dependencies": [
      "autoconf",
      "automake",
      "gettext",
      "libtool",
      "pkg-config",
      "xmlto"
    ],
    "dependencies": [
      "imagemagick",
      "jpeg-turbo",
      "dbus"
    ],
    "test_dependencies": [],
    "recommended_dependencies": [],
    "optional_dependencies": [],
    "uses_from_macos": [],
    "uses_from_macos_bounds": []
  },
  "date_added": "2010-06-18T10:49:40-07:00",
  "readme": "ZBAR BAR CODE READER\n====================\n\nZBar Bar Code Reader is an open source software suite for reading bar\ncodes from various sources, such as video streams, image files and raw\nintensity sensors. It supports EAN-13/UPC-A, UPC-E, EAN-8, Code 128,\nCode 93, Code 39, Codabar, Interleaved 2 of 5, QR Code and SQ Code.\n\nIncluded with the library are basic applications for decoding captured bar\ncode images and using a video device (e.g. webcam) as a bar code scanner.\nFor application developers, language bindings are included for C, C++,\nPython 2 and Perl as well as GUI widgets for Qt, GTK and PyGTK 2.0.\n\nZbar also supports sending the scanned codes via dbus, allowing its\nintegration with other applications.\n\nCheck the ZBar home page for the latest release, mailing lists, etc.:\n\n- <https://github.com/mchehab/zbar>\n\nTarballs with ZBar can be obtained from:\n\n- <https://linuxtv.org/downloads/zbar/>\n\nSince ZBar version 0.23.90, binaries auto-generated from Github's\nActions workflows are auto-generated for each release:\n\n- <https://linuxtv.org/downloads/zbar/binaries/>\n\nThey contain binaries for:\n\n- Ubuntu SID, generated via pbuilder;\n- Mac OS;\n- Windows, for 4 different configurations:\n  - 32 bits/64 bits;\n  - Video for Windows (VfW) or DirectShow (DShow).\n\nLicense information can be found in `COPYING`.\n\nYou may find some outdated documentation at the original ZBar's\nsite at Sourceforge, but please notice that the content there is not\nupdated for ages:\n\thttp://zbar.sourceforge.net/\n\n\nBUILDING\n========\n\nSee `INSTALL.md` for generic configuration and build instructions.\n\nPlease notice that at least autotools related packages and a\nC compiler are needed, in order to generate the configure script.\n\nSo, on Debian, at least those packages are needed:\n\tautoconf autopoint pkg-config libtool gcc make\n\nIf you have installed all needed dependencies, all you need to do is to run:\n\n```\nautoreconf -vfi\n./configure\nmake\n```\n\n\n* NOTES\n\n\n  1) Currently, we maintain a Continuous Integration build test at\n     TravisCI:\n\n        <https://travis-ci.org/github/mchehab/zbar/>\n\n     Due to that, there are scripts meant to test ZBar build on\n     Linux, Windows and MacOS, that could be helpful. Please see\n     the `.travis.yml` file, and the corresponding scripts under `travis/`.\n\n  2) On version 0.23, since the support for gtk3 and python3 are new,\n     the default is to use gtk2 and python2.\n\n     If you want to use gtk3 and python3, you should have the development\n     packages for them, and run:\n```\nautoreconf -vfi\n./configure --with-gtk=auto --with-python=auto\nmake\n```\n\n  This will make the building system to seek for the latest versions\n  for gtk and python.\n\nThe scanner/decoder library itself only requires a few standard\nlibrary functions which should be available almost anywhere.\n\nThe zbarcam program uses the video4linux API (v4l1 or v4l2) to access\nthe video device.  This interface is part of the linux kernel, a 3.16\nkernel or upper is recommended for full support.  More information is\navailable at:\n\n- <http://www.linuxtv.org/wiki/>\n\n`pkg-config` is used to locate installed libraries.  You should have\ninstalled `pkg-config` if you need any of the remaining components.\npkg-config may be obtained from:\n\n- <http://pkg-config.freedesktop.org/>\n\nThe `zbarimg` program uses `ImageMagick` to read image files in many\ndifferent formats.  You will need at least `ImageMagick` version 6.2.6\nif you want to scan image files. You may also use `GraphicsMagick`\npackage instead.\n\n`ImageMagick` may be obtained from:\n\n- <http://www.imagemagick.org/>\n\nQt Widget\n---------\n\nThe Qt widget requires Qt4 or Qt5. You will need Qt if you would like to\nuse or develop a Qt GUI application with an integrated bar code\nscanning widget. Qt4 may be obtained from:\n\n- <https://www.qt.io/>\n\nGtk Widget\n----------\n\nThe GTK+ widget requires GTK+-2.x or GTK+3.x.  You will need GTK+ if you\nwould like to use or develop a GTK+ GUI application with an integrated bar\ncode scanning widget.  GTK+ may be obtained from:\n\n- <http://www.gtk.org/>\n\nPython widgets\n--------------\n\n**Python 2 legacy Gtk widget**\n\nThe PyGTK 2.0/pygobject 2.0 wrapper for the GTK+ 2.x widget requires Python 2,\nPyGTK. You will need to enable both pygtk2 and gtk2 if you would like to use\nor develop a Python 2  GUI application with an integrated bar code scanning\nwidget.  PyGTK may be obtained from:\n\n- <http://www.pygtk.org/>\n\n**Python 2 or 3 GIR Gtk widget**\n\nThe GObject Introspection (GIR) wrapper for GTK+ widget is compatible with\nPyGObject, with works with either Python version 2 or 3. You will need to\nenable both Gtk and Python in order to use or develop a Python application\nwith an integrated bar code scanning and webcam support. In order to build\nit, you need the required dependencies for GIR development. The actual\npackage depends on the distribution. On Fedora, it is `pygobject3-devel`.\nOn Debian/Ubuntu, it is `libgirepository1.0-dev` and `gir1.2-gtk-3.0`.\nWhile GIR builds with Gtk2, It is strongly recommended to use GTK+\nversion 3.x, as there are known issues with version 2.x and GIR, with\nwill likely make it to fail. A test script can be built and run with:\n`make check-gi`. Instructions about how to use are GIR on Python are\navailable at:\n\n- <https://pygobject.readthedocs.io/en/latest/>\n\n**Python bindings**\n\nThe Python bindings require Python 2 or 3 and provide only non-GUI functions.\nYou will need Python and PIL or Pillow if you would like to scan images or\nvideo directly using Python. Python is available from:\n\n- <http://python.org/>\n\nPerl Widget\n-----------\n\nThe Perl bindings require Perl (version 5).  You will need Perl if you\nwould like to scan images or video directly using Perl.  Perl is\navailable from:\n\n- <http://www.perl.org/>\n\nIf required libraries are not available you may disable building for\nthe corresponding component using configure (see configure --help).\n\nThe Perl bindings must be built separately after installing the\nlibrary.  see:\n\n- `perl/README`\n\nJava Widget\n-----------\n\nThe Java ZBar widget uses Java Native Interface (JNI), meaning that the\nwidget will contain machine-dependent code. It works with Java version\n7 and above.  Java open JDK is available from:\n\n- <https://openjdk.java.net/>\n\nRUNNING\n=======\n\n`make install` will install the library and application programs.  Run\n`zbarcam-qt` or `zbarcam` to start the video scanner. Use `zbarimg <file>`\nto decode a saved image file.\n\nCheck the manual to find specific options for each program.\n\nDBUS TESTING\n============\n\nIn order to test if dbus is working, you could use:\n\n\t$ dbus-monitor --system interface=org.linuxtv.Zbar1.Code\n\nor build the test programs with:\n\n\t$ make test_progs\n\nAnd run:\n\t$ ./test/test_dbus\n\nWith that, running this command on a separate shell:\n\n\t$ ./zbarimg/zbarimg examples/code-128.png\n\tCODE-128:https://github.com/mchehab/zbar\n\tscanned 1 barcode symbols from 1 images in 0.01 seconds\n\nWill produce this output at test_dbus shell window:\n\n\tWaiting for Zbar events\n\tType = CODE-128\n\tValue = https://github.com/mchehab/zbar\n\nREPORTING BUGS\n==============\n\nBugs can be reported on the project page:\n\n- <https://github.com/mchehab/zbar>\n\nPlease include the ZBar version number and a detailed description of\nthe problem.  You'll probably have better luck if you're also familiar\nwith the concepts from:\n\n- <http://www.catb.org/~esr/faqs/smart-questions.html>"
}
