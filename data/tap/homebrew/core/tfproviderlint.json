{
  "name": "tfproviderlint",
  "full_name": "tfproviderlint",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Terraform Provider Lint Tool",
  "license": "MPL-2.0",
  "homepage": "https://github.com/bflad/tfproviderlint",
  "versions": {
    "stable": "0.28.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/bflad/tfproviderlint/archive/v0.28.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "df66a164256ffbacbb260e445313c0666bb14ce4b8363f123903259ecc0f4eb5"
    },
    "head": {
      "url": "https://github.com/bflad/tfproviderlint.git",
      "branch": "main"
    }
  },
  "revision": 1,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tfproviderlint/blobs/sha256:cd36003e58d30dadaea71799a395ba6b6e351eec59ba2327b8e7578f46496ace",
          "sha256": "cd36003e58d30dadaea71799a395ba6b6e351eec59ba2327b8e7578f46496ace"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tfproviderlint/blobs/sha256:0b15d7545d090d848ea12f981fe19a1671c2deba219ce0a3dc216e9f781fd329",
          "sha256": "0b15d7545d090d848ea12f981fe19a1671c2deba219ce0a3dc216e9f781fd329"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tfproviderlint/blobs/sha256:0b15d7545d090d848ea12f981fe19a1671c2deba219ce0a3dc216e9f781fd329",
          "sha256": "0b15d7545d090d848ea12f981fe19a1671c2deba219ce0a3dc216e9f781fd329"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tfproviderlint/blobs/sha256:e09b93dbbacd69092e3b3a69fbd6ea34101224c2eb99332d643c18e1a95081dd",
          "sha256": "e09b93dbbacd69092e3b3a69fbd6ea34101224c2eb99332d643c18e1a95081dd"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tfproviderlint/blobs/sha256:5d9d0e0daed9c55ab38aceabebd89421d61cf56e600185189fa126941497f149",
          "sha256": "5d9d0e0daed9c55ab38aceabebd89421d61cf56e600185189fa126941497f149"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tfproviderlint/blobs/sha256:5d9d0e0daed9c55ab38aceabebd89421d61cf56e600185189fa126941497f149",
          "sha256": "5d9d0e0daed9c55ab38aceabebd89421d61cf56e600185189fa126941497f149"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tfproviderlint/blobs/sha256:5d9d0e0daed9c55ab38aceabebd89421d61cf56e600185189fa126941497f149",
          "sha256": "5d9d0e0daed9c55ab38aceabebd89421d61cf56e600185189fa126941497f149"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/tfproviderlint/blobs/sha256:76c181e440e93dca6784ff49c7592f2a039ba64785220c7f9eb66bdc73f3273a",
          "sha256": "76c181e440e93dca6784ff49c7592f2a039ba64785220c7f9eb66bdc73f3273a"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go@1.17"
  ],
  "dependencies": [],
  "test_dependencies": [
    "go@1.17"
  ],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": true,
  "deprecation_date": "2023-02-14",
  "deprecation_reason": "errors with Go 1.18 or later",
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/tfproviderlint.rb",
  "ruby_source_checksum": {
    "sha256": "2784b943a8d24b5894f30410fdd8a7ee3643673666d9c4b3bf88c6b7252e1125"
  },
  "date_added": "2021-11-14T01:54:54+00:00",
  "readme": "# tfproviderlint\n\nStatic analysis libraries and tooling for [Terraform Provider](https://www.terraform.io/docs/providers/index.html) code.\n\n[![PkgGoDev](https://pkg.go.dev/badge/github.com/bflad/tfproviderlint)](https://pkg.go.dev/github.com/bflad/tfproviderlint)\n\n## Install\n\n### Local Install\n\nRelease binaries are available in the [Releases](https://github.com/bflad/tfproviderlint/releases) section.\n\nTo instead use Go to install into your `$GOBIN` directory (e.g. `$GOPATH/bin`):\n\n```shell\ngo install github.com/bflad/tfproviderlint/cmd/tfproviderlint@latest\n```\n\nIf you wish to install the command which includes all linting checks, including [Extra Lint Checks](#extra-lint-checks):\n\n```shell\ngo install github.com/bflad/tfproviderlint/cmd/tfproviderlintx@latest\n```\n\n### Docker Install\n\n```shell\ndocker pull bflad/tfproviderlint\n```\n\n### Homebrew Install\n\n```shell\nbrew install bflad/tap/tfproviderlint\n```\n\n## Usage\n\nThe `tfproviderlint` and `tfproviderlintx` tools operate similarly except for which checks are available. Additional information about usage and configuration options can be found by passing the `help` argument:\n\n```shell\ntfproviderlint help\n```\n\nTo enable only specific checks, they can be passed in as flags:\n\n```shell\ntfproviderlint -AT001\n```\n\nTo enable all checks, but disable specific checks, they can be passed in as flags set to `false`:\n\n```shell\ntfproviderlint -AT001=false\n```\n\n### Local Usage\n\nTo report issues, change into the directory of the Terraform Provider code and run:\n\n```shell\ntfproviderlint ./...\n```\n\nTo apply automated fixes for checks that support them, change into the directory of the Terraform Provider code and run:\n\n```shell\ntfproviderlint -fix ./...\n```\n\nIt is also possible to run via [`go vet`](https://golang.org/cmd/vet/):\n\n```shell\ngo vet -vettool $(which tfproviderlint) ./...\n```\n\n### Docker Usage\n\nChange into the directory of the Terraform Provider code and run:\n\n```shell\ndocker run -v $(pwd):/src bflad/tfproviderlint ./...\n```\n\n### GitHub Action Usage\n\nA [GitHub Action](https://github.com/features/actions) is available: [tfproviderlint-github-action](https://github.com/bflad/tfproviderlint-github-action)\n\n## Standard Lint Checks\n\nStandard lint checks are enabled by default in the `tfproviderlint` tool. Opt-in checks can be found in the [Extra Lint Checks section](#extra-lint-checks). For additional information about each check, you can run `tfproviderlint help NAME`.\n\n### Standard Acceptance Test Checks\n\n| Check | Description | Type |\n|---|---|---|\n| [AT001](passes/AT001) | check for `TestCase` missing `CheckDestroy` | AST |\n| [AT002](passes/AT002) | check for acceptance test function names including the word import | AST |\n| [AT003](passes/AT003) | check for acceptance test function names missing an underscore | AST |\n| [AT004](passes/AT004) | check for `TestStep` `Config` containing provider configuration | AST |\n| [AT005](passes/AT005) | check for acceptance test function names missing `TestAcc` prefix | AST |\n| [AT006](passes/AT006) | check for acceptance test functions containing multiple `resource.Test()` invocations | AST |\n| [AT007](passes/AT007) | check for acceptance test functions containing multiple `resource.ParallelTest()` invocations | AST |\n| [AT008](passes/AT008) | check for acceptance test function declaration `*testing.T` parameter naming | AST |\n| [AT009](passes/AT009) | check for `acctest.RandStringFromCharSet()` calls that can be simplified to `acctest.RandString()` | AST |\n| [AT010](passes/AT010) | check for `TestCase` including `IDRefreshName` implementation | AST |\n| [AT011](passes/AT011) | check for `TestCase` including `IDRefreshIgnore` implementation without `IDRefreshName` | AST |\n| [AT012](passes/AT012) | check for files containing multiple acceptance test function name prefixes | AST |\n\n### Standard Resource Checks\n\n| Check | Description | Type |\n|---|---|---|\n| [R001](passes/R001) | check for `ResourceData.Set()` calls using complex key argument | AST |\n| [R002](passes/R002) | check for `ResourceData.Set()` calls using `*` dereferences | AST |\n| [R003](passes/R003) | check for `Resource` having `Exists` functions | AST |\n| [R004](passes/R004) | check for `ResourceData.Set()` calls using incompatible value types | AST |\n| [R005](passes/R005) | check for `ResourceData.HasChange()` calls that can be combined into one `HasChanges()` call | AST |\n| [R006](passes/R006) | check for `RetryFunc` that omit retryable errors | AST |\n| [R007](passes/R007) | check for deprecated `(schema.ResourceData).Partial` usage | AST |\n| [R008](passes/R008) | check for deprecated `(schema.ResourceData).SetPartial` usage | AST |\n| [R009](passes/R009) | check for Go panic usage | AST |\n| [R010](passes/R010) | check for `(schema.ResourceData).GetChange` assignment which should use `(schema.ResourceData).Get` | AST |\n| [R011](passes/R011) | check for `Resource` that configure `MigrateState` | AST |\n| [R012](passes/R012) | check for data source `Resource` that configure `CustomizeDiff` | AST |\n| [R013](passes/R013) | check for `map[string]*Resource` that resource names contain at least one underscore | AST |\n| [R014](passes/R014) | check for `CreateFunc`, `CreateContextFunc`, `DeleteFunc`, `DeleteContextFunc`, `ReadFunc`, `ReadContextFunc`, `UpdateFunc`, and `UpdateContextFunc` parameter naming | AST |\n| [R015](passes/R015) | check for `(*schema.ResourceData).SetId()` receiver method usage with unstable `resource.UniqueId()` value | AST |\n| [R016](passes/R016) | check for `(*schema.ResourceData).SetId()` receiver method usage with unstable `resource.PrefixedUniqueId()` value | AST |\n| [R017](passes/R017) | check for `(*schema.ResourceData).SetId()` receiver method usage with unstable `time.Now()` value | AST |\n| [R018](passes/R018) | check for `time.Sleep()` function usage | AST |\n| [R019](passes/R019) | check for `(*schema.ResourceData).HasChanges()` receiver method usage with many arguments | AST |\n\n### Standard Schema Checks\n\n| Check | Description | Type |\n|---|---|---|\n| [S001](passes/S001) | check for `Schema` of `TypeList` or `TypeSet` missing `Elem` | AST |\n| [S002](passes/S002) | check for `Schema` with both `Required` and `Optional` enabled | AST |\n| [S003](passes/S003) | check for `Schema` with both `Required` and `Computed` enabled | AST |\n| [S004](passes/S004) | check for `Schema` with both `Required` and `Default` configured | AST |\n| [S005](passes/S005) | check for `Schema` with both `Computed` and `Default` configured | AST |\n| [S006](passes/S006) | check for `Schema` of `TypeMap` missing `Elem` | AST |\n| [S007](passes/S007) | check for `Schema` with both `Required` and `ConflictsWith` configured | AST |\n| [S008](passes/S008) | check for `Schema` of `TypeList` or `TypeSet` with `Default` configured | AST |\n| [S009](passes/S009) | check for `Schema` of `TypeList` or `TypeSet` with `ValidateFunc` configured | AST |\n| [S010](passes/S010) | check for `Schema` of `Computed` only with `ValidateFunc` configured | AST |\n| [S011](passes/S011) | check for `Schema` of `Computed` only with `DiffSuppressFunc` configured | AST |\n| [S012](passes/S012) | check for `Schema` that `Type` is configured | AST |\n| [S013](passes/S013) | check for `map[string]*Schema` that one of `Computed`, `Optional`, or `Required` is configured | AST |\n| [S014](passes/S014) | check for `Schema` within `Elem` that `Computed`, `Optional`, and `Required` are not configured | AST |\n| [S015](passes/S015) | check for `map[string]*Schema` that attribute names are valid | AST |\n| [S016](passes/S016) | check for `Schema` that `Set` is only configured for `TypeSet` | AST |\n| [S017](passes/S017) | check for `Schema` that `MaxItems` and `MinItems` are only configured for `TypeList`, `TypeMap`, or `TypeSet` | AST |\n| [S018](passes/S018) | check for `Schema` that should use `TypeList` with `MaxItems: 1` | AST |\n| [S019](passes/S019) | check for `Schema` that should omit `Computed`, `Optional`, or `Required` set to `false` | AST |\n| [S020](passes/S020) | check for `Schema` of `Computed` only with `ForceNew` enabled | AST |\n| [S021](passes/S021) | check for `Schema` that should omit `ComputedWhen` | AST |\n| [S022](passes/S022) | check for `Schema` of `TypeMap` with invalid `Elem` of `*schema.Resource` | AST |\n| [S023](passes/S023) | check for `Schema` that should omit `Elem` with incompatible `Type` | AST |\n| [S024](passes/S024) | check for `Schema` that should omit `ForceNew` in data source schema attributes | AST |\n| [S025](passes/S025) | check for `Schema` of `Computed` only with `AtLeastOneOf` configured | AST |\n| [S026](passes/S026) | check for `Schema` of `Computed` only with `ConflictsWith` configured | AST |\n| [S027](passes/S027) | check for `Schema` of `Computed` only with `Default` configured | AST |\n| [S028](passes/S028) | check for `Schema` of `Computed` only with `DefaultFunc` configured | AST |\n| [S029](passes/S029) | check for `Schema` of `Computed` only with `ExactlyOneOf` configured | AST |\n| [S030](passes/S030) | check for `Schema` of `Computed` only with `InputDefault` configured | AST |\n| [S031](passes/S031) | check for `Schema` of `Computed` only with `MaxItems` configured | AST |\n| [S032](passes/S032) | check for `Schema` of `Computed` only with `MinItems` configured | AST |\n| [S033](passes/S033) | check for `Schema` of `Computed` only with `StateFunc` configured | AST |\n| [S034](passes/S034) | check for `Schema` that configure `PromoteSingle` | AST |\n| [S035](passes/S035) | check for `Schema` with invalid `AtLeastOneOf` attribute references | AST |\n| [S036](passes/S036) | check for `Schema` with invalid `ConflictsWith` attribute references | AST |\n| [S037](passes/S037) | check for `Schema` with invalid `ExactlyOneOf` attribute references | AST |\n\n### Standard Validation Checks\n\n| Check | Description | Type |\n|---|---|---|\n| [V001](passes/V001) | check for custom `SchemaValidateFunc` that implement `validation.StringMatch()` or `validation.StringDoesNotMatch()` | AST |\n| [V002](passes/V002) | check for deprecated `CIDRNetwork` validation function usage | AST |\n| [V003](passes/V003) | check for deprecated `IPRange` validation function usage | AST |\n| [V004](passes/V004) | check for deprecated `SingleIP` validation function usage | AST |\n| [V005](passes/V005) | check for deprecated `ValidateJsonString` validation function usage | AST |\n| [V006](passes/V006) | check for deprecated `ValidateListUniqueStrings` validation function usage | AST |\n| [V007](passes/V007) | check for deprecated `ValidateRegexp` validation function usage | AST |\n| [V008](passes/V008) | check for deprecated `ValidateRFC3339TimeString` validation function usage | AST |\n| [V009](passes/V009) | check for `validation.StringMatch()` call with empty message argument | AST |\n| [V010](passes/V010) | check for `validation.StringDoesNotMatch()` call with empty message argument | AST |\n| [V011](passes/V011) | check for custom `SchemaValidateFunc` that implement `validation.StringLenBetween()` | AST |\n| [V012](passes/V012) | check for custom `SchemaValidateFunc` that implement `validation.IntAtLeast()`, `validation.IntAtMost()`, or `validation.IntBetween()` | AST |\n| [V013](passes/V013) | check for custom `SchemaValidateFunc` that implement `validation.StringInSlice()` or `validation.StringNotInSlice()` | AST |\n| [V014](passes/V014) | check for custom `SchemaValidateFunc` that implement `validation.IntInSlice()` or `validation.IntNotInSlice()` | AST |\n\n## Extra Lint Checks\n\nExtra lint checks are not included in the `tfproviderlint` tool and must be accessed via the `tfproviderlintx` tool or [added to a custom lint tool](#implementing-a-custom-lint-tool). Generally these represent advanced Terraform Plugin SDK functionality that is not appropriate for all Terraform Providers.\n\n### Extra Acceptance Test Checks\n\n| Check | Description | Type |\n|---|---|---|\n| [XAT001](xpasses/XAT001) | check for `TestCase` missing `ErrorCheck` | AST |\n\n### Extra Resource Checks\n\n| Check | Description | Type |\n|---|---|---|\n| [XR001](xpasses/XR001) | check for usage of `ResourceData.GetOkExists()` calls | AST |\n| [XR002](xpasses/XR002) | check for `Resource` that should implement `Importer` | AST |\n| [XR003](xpasses/XR003) | check for `Resource` that should implement `Timeouts` | AST |\n| [XR004](xpasses/XR004) | check for `ResourceData.Set()` calls that should implement error checking with complex values | AST |\n| [XR005](xpasses/XR005) | check for `Resource` that `Description` is configured | AST |\n| [XR006](xpasses/XR006) | check for `Resource` that implements `Timeouts` for missing `Create`, `Delete`, `Read`, or `Update` implementation | AST |\n| [XR007](xpasses/XR007) | check for `os/exec.Command` usage | AST |\n| [XR008](xpasses/XR008) | check for `os/exec.CommandContext` usage | AST |\n\n### Extra Schema Checks\n\n| Check | Description | Type |\n|---|---|---|\n| [XS001](xpasses/XS001) | check for `map[string]*Schema` that `Description` is configured | AST |\n| [XS002](xpasses/XS002) | check for `map[string]*Schema` that keys are in alphabetical order | AST |\n\n## Development and Testing\n\nThis project is built on the [`go/analysis`](https://godoc.org/golang.org/x/tools/go/analysis) framework and uses [Go Modules](https://github.com/golang/go/wiki/Modules) for dependency management.\n\nHelpful tooling for development:\n\n* [`astdump`](https://github.com/wingyplus/astdump): a tool for displaying the AST form of Go file\n* [`ssadump`](https://godoc.org/golang.org/x/tools/cmd/ssadump): a tool for displaying and interpreting the SSA form of Go programs\n\n## Go Compatibility\n\nThis project follows the [Go support policy](https://golang.org/doc/devel/release.html#policy) for versions. The two latest major releases of Go are supported by the project.\n\nCurrently, that means Go **1.19** or later must be used when including this project as a dependency.\n\n### Adding an Analyzer\n\n* Create new analyzer in `passes/` (or `xpasses/` for extra checks)\n* If the `Analyzer` reports issues, add to `AllChecks` variable in `passes/checks.go` (or `xpasses/checks.go` for extra checks)\n* Since the [`analysistest` package](https://godoc.org/golang.org/x/tools/go/analysis/analysistest) does not support Go Modules currently, each analyzer that implements testing must add a symlink to the top level `vendor` directory in the `testdata/src/a` directory. e.g. `ln -s ../../../../../vendor passes/NAME/testdata/src/a/vendor`\n\n### Implementing SuggestedFixes Testing\n\nThe upstream `analysistest` package now contains functionality to verify `SuggestedFixes` via `RunWithSuggestedFixes`.\n\n```go\nimport (\n  \"testing\"\n\n  \"golang.org/x/tools/go/analysis/analysistest\"\n)\n\nfunc TestAnalyzerFixes(t *testing.T) {\n  testdata := analysistest.TestData()\n  analysistest.RunWithSuggestedFixes(t, testdata, Analyzer, \"a\")\n}\n```\n\nTo setup the expected file content verification, the testing expects a file suffixed with `.golden` (e.g. `testdata/src/a/main.go.golden`).\n\n### Implementing a Custom Lint Tool\n\nThe `go/analysis` framework and this codebase are designed for flexibility. You may wish to permanently disable certain default checks or even implement your own provider-specific checks. An example of how to incorporate all default and extra checks in a CLI command can be found in `cmd/tfproviderlintx`. To permanently exclude checks, each desired `Analyzer` must be individually included, similar to how `AllChecks()` is built in `passes/checks.go`.\n\nThe `passes` directory also includes the underlying `Analyzer` which iteratively gather AST-based information about the Terraform Provider code being analyzed. For example, `passes/helper/resource/retryfuncinfo` returns information from all named and anonymous declarations of `helper/resource.RetryFunc()`.\n\nPrimatives for working with Terraform Plugin SDK primatives can be found in `helper/terraformtype`. Primatives for working with the Go AST can be found in `helper/astutils`.\n\n### Updating Dependencies\n\nDependency updates are managed by [Dependabot](https://docs.github.com/en/code-security/dependabot).\n\n### Unit Testing\n\n```shell\ngo test ./...\n```\n\n### Local Install Testing\n\n```shell\ngo install ./cmd/tfproviderlint\n```"
}
