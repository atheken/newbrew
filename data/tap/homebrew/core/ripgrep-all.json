{
  "name": "ripgrep-all",
  "full_name": "ripgrep-all",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [
    "rga"
  ],
  "versioned_formulae": [],
  "desc": "Wrapper around ripgrep that adds multiple rich file types",
  "license": "AGPL-3.0",
  "homepage": "https://github.com/phiresky/ripgrep-all",
  "versions": {
    "stable": "0.9.6",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/phiresky/ripgrep-all/archive/v0.9.6.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "8cd7c5d13bd90ef0582168cd2bef73ca13ca6e0b1ecf24b9a5cd7cb886259023"
    },
    "head": {
      "url": "https://github.com/phiresky/ripgrep-all.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 1,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ripgrep-all/blobs/sha256:e84c224329f6ec5448e37681f45769a9ab72c6935288db2ea36bcf284b134057",
          "sha256": "e84c224329f6ec5448e37681f45769a9ab72c6935288db2ea36bcf284b134057"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ripgrep-all/blobs/sha256:20bdd6f136760c89ba299a97dab08ae2393bb7ae585cf1fff2369fadb6b85bd2",
          "sha256": "20bdd6f136760c89ba299a97dab08ae2393bb7ae585cf1fff2369fadb6b85bd2"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ripgrep-all/blobs/sha256:ee9f510ddf55cddfa9c7e7299c1793a0076ba0a9a1a1141a012e31f52a78e2e0",
          "sha256": "ee9f510ddf55cddfa9c7e7299c1793a0076ba0a9a1a1141a012e31f52a78e2e0"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ripgrep-all/blobs/sha256:efd9dc53dee198f51ca84e1c0ebc1202a49f1c78989cd13729cdb33a23b38c66",
          "sha256": "efd9dc53dee198f51ca84e1c0ebc1202a49f1c78989cd13729cdb33a23b38c66"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ripgrep-all/blobs/sha256:37a8535f3c8c7018cf61513d94066004f4245d6df4fca2cfd8137ff3a4472614",
          "sha256": "37a8535f3c8c7018cf61513d94066004f4245d6df4fca2cfd8137ff3a4472614"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ripgrep-all/blobs/sha256:416071978569fb7aab9af008025b98def9ed0187de27d2c69106ec92021755b8",
          "sha256": "416071978569fb7aab9af008025b98def9ed0187de27d2c69106ec92021755b8"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ripgrep-all/blobs/sha256:151485dced116e5a0d6bcb7d02795518b31726919ae9e93a891339a123fcf19e",
          "sha256": "151485dced116e5a0d6bcb7d02795518b31726919ae9e93a891339a123fcf19e"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ripgrep-all/blobs/sha256:217efb369c00a588b6081bf888a6647a388a46b04618bcb118de7d28f3202973",
          "sha256": "217efb369c00a588b6081bf888a6647a388a46b04618bcb118de7d28f3202973"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [
    "ripgrep"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    {
      "zip": "test"
    }
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/ripgrep-all.rb",
  "ruby_source_checksum": {
    "sha256": "011a48f51b7bf66be40b07874580f6385c2a9b3325e116b3c25feb73f28fc686"
  },
  "date_added": "2019-09-23T22:10:32+02:00",
  "readme": "# rga: ripgrep, but also search in PDFs, E-Books, Office documents, zip, tar.gz, etc.\n\nrga is a line-oriented search tool that allows you to look for a regex in a multitude of file types. rga wraps the awesome [ripgrep] and enables it to search in pdf, docx, sqlite, jpg, movie subtitles (mkv, mp4), etc.\n\n[ripgrep]: https://github.com/BurntSushi/ripgrep\n\n[![github repo](https://img.shields.io/badge/repo-github.com%2Fphiresky%2Fripgrep--all-informational.svg)](https://github.com/phiresky/ripgrep-all)\n[![Crates.io](https://img.shields.io/crates/v/ripgrep-all.svg)](https://crates.io/crates/ripgrep-all)\n[![fearless concurrency](https://img.shields.io/badge/concurrency-fearless-success.svg)](https://www.reddit.com/r/rustjerk/top/?sort=top&t=all)\n\nFor more detail, see this introductory blogpost: https://phiresky.github.io/blog/2019/rga--ripgrep-for-zip-targz-docx-odt-epub-jpg/\n\nrga will recursively descend into archives and match text in every file type it knows.\n\nHere is an [example directory](https://github.com/phiresky/ripgrep-all/tree/master/exampledir/demo) with different file types:\n\n```\ndemo/\n├── greeting.mkv\n├── hello.odt\n├── hello.sqlite3\n└── somearchive.zip\n├── dir\n│ ├── greeting.docx\n│ └── inner.tar.gz\n│ └── greeting.pdf\n└── greeting.epub\n```\n\n![rga output](doc/demodir.png)\n\n## Integration with fzf\n\n![rga-fzf](doc/rga-fzf.gif)\n\nSee [the wiki](https://github.com/phiresky/ripgrep-all/wiki/fzf-Integration) for instructions of integrating rga with fzf.\n\n## INSTALLATION\n\nLinux x64, macOS and Windows binaries are available [in GitHub Releases][latestrelease].\n\n[latestrelease]: https://github.com/phiresky/ripgrep-all/releases/latest\n\n### Linux\n\n#### Arch Linux\n\n`pacman -S ripgrep-all`.\n\n#### Nix\n\n`nix-env -iA nixpkgs.ripgrep-all`\n\n#### Debian-based\n\ndownload the [rga binary][latestrelease] and get the dependencies like this:\n\n`apt install ripgrep pandoc poppler-utils ffmpeg`\n\nIf ripgrep is not included in your package sources, get it from [here](https://github.com/BurntSushi/ripgrep/releases).\n\nrga will search for all binaries it calls in \\$PATH and the directory itself is in.\n\n### Windows\n\nInstall ripgrep-all via [Chocolatey](https://chocolatey.org/packages/ripgrep-all):\n\n```\nchoco install ripgrep-all\n```\n\nNote that installing via chocolatey or scoop is the only supported download method. If you download the binary from releases manually, you will not get the dependencies (for example pdftotext from poppler).\n\nIf you get an error like `VCRUNTIME140.DLL could not be found`, you need to install [vc_redist.x64.exe](https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads).\n\n### Homebrew/Linuxbrew\n\n`rga` can be installed with [Homebrew](https://formulae.brew.sh/formula/ripgrep-all#default):\n\n`brew install rga`\n\nTo install the dependencies that are each not strictly necessary but very useful:\n\n`brew install pandoc poppler ffmpeg`\n\n### Compile from source\n\nrga should compile with stable Rust (v1.36.0+, check with `rustc --version`). To build it, run the following (or the equivalent in your OS):\n\n```\n   ~$ apt install build-essential pandoc poppler-utils ffmpeg ripgrep cargo\n   ~$ cargo install --locked ripgrep_all\n   ~$ rga --version    # this should work now\n```\n\n## Available Adapters\n\nrga works with _adapters_ that adapt various file formats. It comes with a few adapters integrated:\n\n```\nrga --rga-list-adapters\n```\n\nYou can also add **custom adapters**. See [the wiki](https://github.com/phiresky/ripgrep-all/wiki) for more information.\n\n<!-- this part generated by update-readme.sh -->\n\nAdapters:\n\n- **pandoc**\n  Uses pandoc to convert binary/unreadable text documents to plain markdown-like text\n  Runs: pandoc --from= --to=plain --wrap=none --markdown-headings=atx  \n   Extensions: .epub, .odt, .docx, .fb2, .ipynb\n\n- **poppler**\n  Uses pdftotext (from poppler-utils) to extract plain text from PDF files\n  Runs: pdftotext - -  \n   Extensions: .pdf  \n   Mime Types: application/pdf\n\n- **postprocpagebreaks**\n  Adds the page number to each line for an input file that specifies page breaks as ascii page break character.\n  Mainly to be used internally by the poppler adapter.  \n   Extensions: .asciipagebreaks\n\n- **ffmpeg**\n  Uses ffmpeg to extract video metadata/chapters, subtitles, lyrics, and other metadata  \n   Extensions: .mkv, .mp4, .avi, .mp3, .ogg, .flac, .webm\n\n- **zip**\n  Reads a zip file as a stream and recurses down into its contents  \n   Extensions: .zip, .jar  \n   Mime Types: application/zip\n\n- **decompress**\n  Reads compressed file as a stream and runs a different extractor on the contents.  \n   Extensions: .tgz, .tbz, .tbz2, .gz, .bz2, .xz, .zst  \n   Mime Types: application/gzip, application/x-bzip, application/x-xz, application/zstd\n\n- **tar**\n  Reads a tar file as a stream and recurses down into its contents  \n   Extensions: .tar\n\n- **sqlite**\n  Uses sqlite bindings to convert sqlite databases into a simple plain text format  \n   Extensions: .db, .db3, .sqlite, .sqlite3  \n   Mime Types: application/x-sqlite3\n\nThe following adapters are disabled by default, and can be enabled using '--rga-adapters=+foo,bar':\n\n## USAGE:\n\n> rga \\[RGA OPTIONS\\] \\[RG OPTIONS\\] PATTERN \\[PATH \\...\\]\n\n## FLAGS:\n\n**\\--rga-accurate**\n\n> Use more accurate but slower matching by mime type\n>\n> By default, rga will match files using file extensions. Some programs,\n> such as sqlite3, don\\'t care about the file extension at all, so users\n> sometimes use any or no extension at all. With this flag, rga will try\n> to detect the mime type of input files using the magic bytes (similar\n> to the \\`file\\` utility), and use that to choose the adapter.\n> Detection is only done on the first 8KiB of the file, since we can\\'t\n> always seek on the input (in archives).\n\n**\\--rga-no-cache**\n\n> Disable caching of results\n>\n> By default, rga caches the extracted text, if it is small enough, to a\n> database in \\${XDG*CACHE_DIR-\\~/.cache}/ripgrep-all on Linux,\n> *\\~/Library/Caches/ripgrep-all\\_ on macOS, or\n> C:\\\\Users\\\\username\\\\AppData\\\\Local\\\\ripgrep-all on Windows. This way,\n> repeated searches on the same set of files will be much faster. If you\n> pass this flag, all caching will be disabled.\n\n**-h**, **\\--help**\n\n> Prints help information\n\n**\\--rga-list-adapters**\n\n> List all known adapters\n\n**\\--rga-print-config-schema**\n\n> Print the JSON Schema of the configuration file\n\n**\\--rg-help**\n\n> Show help for ripgrep itself\n\n**\\--rg-version**\n\n> Show version of ripgrep itself\n\n**-V**, **\\--version**\n\n> Prints version information\n\n## OPTIONS:\n\n**\\--rga-adapters=**\\<adapters\\>\\...\n\n> Change which adapters to use and in which priority order (descending)\n>\n> \\\"foo,bar\\\" means use only adapters foo and bar. \\\"-bar,baz\\\" means\n> use all default adapters except for bar and baz. \\\"+bar,baz\\\" means\n> use all default adapters and also bar and baz.\n\n**\\--rga-cache-compression-level=**\\<compression-level\\>\n\n> ZSTD compression level to apply to adapter outputs before storing in\n> cache db\n>\n> Ranges from 1 - 22 \\[default: 12\\]\n\n**\\--rga-config-file=**\\<config-file-path\\>\n\n**\\--rga-max-archive-recursion=**\\<max-archive-recursion\\>\n\n> Maximum nestedness of archives to recurse into \\[default: 4\\]\n\n**\\--rga-cache-max-blob-len=**\\<max-blob-len\\>\n\n> Max compressed size to cache\n>\n> Longest byte length (after compression) to store in cache. Longer\n> adapter outputs will not be cached and recomputed every time.\n>\n> Allowed suffixes on command line: k M G \\[default: 2000000\\]\n\n**\\--rga-cache-path=**\\<path\\>\n\n> Path to store cache db \\[default: /home/phire/.cache/ripgrep-all\\]\n\n**-h** shows a concise overview, **\\--help** shows more detail and\nadvanced options.\n\nAll other options not shown here are passed directly to rg, especially\n\\[PATTERN\\] and \\[PATH \\...\\]\n\n<!-- end of part generated by update-readme.sh -->\n\n## Development\n\nTo enable debug logging:\n\n```bash\nexport RUST_LOG=debug\nexport RUST_BACKTRACE=1\n```\n\nAlso remember to disable caching with `--rga-no-cache` or clear the cache\n(`~/Library/Caches/rga` on macOS, `~/.cache/rga` on other Unixes,\nor `C:\\Users\\username\\AppData\\Local\\rga` on Windows)\nto debug the adapters.\n\n### Nix and Direnv\n\nYou can use the provided [`flake.nix`](./flake.nix) to setup all build- and\nrun-time dependencies:\n\n1. Enable [Flakes](https://nixos.wiki/wiki/Flakes) in your Nix configuration.\n1. Add [`direnv`](https://direnv.net/) to your profile:\n   `nix profile install nixpkgs#direnv`\n1. `cd` into the directory where you have cloned this directory.\n1. Allow use of [`.envrc`](./.envrc): `direnv allow`\n1. After the dependencies have been installed, your shell will now have all of\n   the necessary development dependencies."
}
