{
  "name": "chart-testing",
  "full_name": "chart-testing",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Testing and linting Helm charts",
  "license": "Apache-2.0",
  "homepage": "https://github.com/helm/chart-testing",
  "versions": {
    "stable": "3.9.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/helm/chart-testing.git",
      "tag": "v3.9.0",
      "revision": "88cc7026481da7468e34a614b8ca4f0da42c063c",
      "checksum": null
    },
    "head": {
      "url": "https://github.com/helm/chart-testing.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/chart-testing/blobs/sha256:0cdcc408a6a87349a6e42f4e0c81967274a34569b9ed00f0b7064320463fa42c",
          "sha256": "0cdcc408a6a87349a6e42f4e0c81967274a34569b9ed00f0b7064320463fa42c"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/chart-testing/blobs/sha256:0cdcc408a6a87349a6e42f4e0c81967274a34569b9ed00f0b7064320463fa42c",
          "sha256": "0cdcc408a6a87349a6e42f4e0c81967274a34569b9ed00f0b7064320463fa42c"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/chart-testing/blobs/sha256:0cdcc408a6a87349a6e42f4e0c81967274a34569b9ed00f0b7064320463fa42c",
          "sha256": "0cdcc408a6a87349a6e42f4e0c81967274a34569b9ed00f0b7064320463fa42c"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/chart-testing/blobs/sha256:5908cc67c2a3664c1ec17f437537703c67779852bb00a5fe27131d2daef434a5",
          "sha256": "5908cc67c2a3664c1ec17f437537703c67779852bb00a5fe27131d2daef434a5"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/chart-testing/blobs/sha256:5908cc67c2a3664c1ec17f437537703c67779852bb00a5fe27131d2daef434a5",
          "sha256": "5908cc67c2a3664c1ec17f437537703c67779852bb00a5fe27131d2daef434a5"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/chart-testing/blobs/sha256:5908cc67c2a3664c1ec17f437537703c67779852bb00a5fe27131d2daef434a5",
          "sha256": "5908cc67c2a3664c1ec17f437537703c67779852bb00a5fe27131d2daef434a5"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/chart-testing/blobs/sha256:5317a23611aed11ccb204e575df76e5e2f3742624f75f1065af45c08e9df6c4c",
          "sha256": "5317a23611aed11ccb204e575df76e5e2f3742624f75f1065af45c08e9df6c4c"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [
    "yamale"
  ],
  "test_dependencies": [
    "helm",
    "yamllint"
  ],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/chart-testing.rb",
  "ruby_source_checksum": {
    "sha256": "0e04c130064cb87ec39d231abc5b9ff76f16ce2f76531f59adacf06b482b0052"
  },
  "date_added": "2020-07-28T10:43:19+00:00",
  "readme": "# Chart Testing\n\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n[![Go Report Card](https://goreportcard.com/badge/github.com/helm/chart-testing)](https://goreportcard.com/report/github.com/helm/chart-testing)\n![ci](https://github.com/helm/chart-testing/workflows/ci/badge.svg)\n\n`ct` is the the tool for testing Helm charts.\nIt is meant to be used for linting and testing pull requests.\nIt automatically detects charts changed against the target branch.\n\n## Installation\n\n### Prerequisites\n\nIt is recommended to use the provided Docker image which can be [found on Quay](https://quay.io/helmpack/chart-testing/).\nIt comes with all necessary tools installed.\n\n* [Helm](http://helm.sh)\n* [Git](https://git-scm.com) (2.17.0 or later)\n* [Yamllint](https://github.com/adrienverge/yamllint)\n* [Yamale](https://github.com/23andMe/Yamale)\n* [Kubectl](https://kubernetes.io/docs/reference/kubectl/overview/)\n\n### Binary Distribution\n\nDownload the release distribution for your OS from the Releases page:\n\nhttps://github.com/helm/chart-testing/releases\n\nUnpack the `ct` binary, add it to your PATH, and you are good to go!\n\n### Docker Image\n\nA Docker image is available at `quay.io/helmpack/chart-testing` with list of\navailable tags [here](https://quay.io/repository/helmpack/chart-testing?tab=tags).\n\n### Homebrew\n\n```console\n$ brew install chart-testing\n```\n\n## Usage\n\nSee documentation for individual commands:\n\n* [ct](doc/ct.md)\n* [ct install](doc/ct_install.md)\n* [ct lint](doc/ct_lint.md)\n* [ct lint-and-install](doc/ct_lint-and-install.md)\n* [ct list-changed](doc/ct_list-changed.md)\n* [ct version](doc/ct_version.md)\n\nFor a more extensive how-to guide, please see:\n\n* [charts-repo-actions-demo](https://github.com/helm/charts-repo-actions-demo)\n\n## Configuration\n\n`ct` is a command-line application.\nAll command-line flags can also be set via environment variables or config file.\nEnvironment variables must be prefixed with `CT_`.\nUnderscores must be used instead of hyphens.\n\nCLI flags, environment variables, and a config file can be mixed.\nThe following order of precedence applies:\n\n1. CLI flags\n1. Environment variables\n1. Config file\n\nNote that linting requires config file for [yamllint](https://github.com/adrienverge/yamllint) and [yamale](https://github.com/23andMe/Yamale).\nIf not specified, these files are search in the current directory, the `.ct` directory in current directory, `$HOME/.ct`, and `/etc/ct`, in that order.\nSamples are provided in the [etc](etc) folder.\n\n### Examples\n\nThe following example show various way of configuring the same thing:\n\n#### CLI\n\n#### Remote repo\n\nWith remote repo:\n\n    ct install --remote upstream --chart-dirs stable,incubator --build-id pr-42\n\n#### Local repo\n\nIf you have a chart in current directory and ct installed on the host then you can run:\n\n    ct install --chart-dirs . --charts .\n\nWith docker it works with:\n\n    docker run -it --network host --workdir=/data --volume ~/.kube/config:/root/.kube/config:ro --volume $(pwd):/data quay.io/helmpack/chart-testing:v3.7.1 ct install --chart-dirs . --charts .\n\nNotice that `workdir` param is important and must be the same as volume mounted.\n\n\n#### Environment Variables\n\n    export CT_REMOTE=upstream\n    export CT_CHART_DIRS=stable,incubator\n    export CT_BUILD_ID\n\n    ct install\n\n#### Config File\n\n`config.yaml`:\n\n```yaml\nremote: upstream\nchart-dirs:\n  - stable\n  - incubator\nbuild-id: pr-42\n```\n\n#### Config Usage\n\n    ct install --config config.yaml\n\n\n`ct` supports any format [Viper](https://github.com/spf13/viper) can read, i. e. JSON, TOML, YAML, HCL, and Java properties files.\n\nNotice that if no config file is specified, then `ct.yaml` (or any of the supported formats) is loaded from the current directory, `$HOME/.ct`, or `/etc/ct`, in that order, if found.\n\n\n#### Using private chart repositories\n\nWhen adding chart-repos you can specify additional arguments for the `helm repo add` command using `helm-repo-extra-args` on a per-repo basis.\nThis could for example be used to authenticate a private chart repository.\n\n`config.yaml`:\n\n```yaml\nchart-repos:\n  - incubator=https://incubator.io\n  - basic-auth=https://private.com\n  - ssl-repo=https://self-signed.ca\nhelm-repo-extra-args:\n  - ssl-repo=--ca-file ./my-ca.crt\n```\n\n    ct install --config config.yaml --helm-repo-extra-args \"basic-auth=--username user --password secret\"\n\n## Building from Source\n\n`ct` is built using Go 1.13 or higher.\n\n`build.sh` is used to build and release the tool.\nIt uses [Goreleaser](https://goreleaser.com/) under the covers.\n\nNote: on MacOS you will need `GNU Coreutils readlink`.\nYou can install it with:\n\n```console\nbrew install coreutils\n```\n\nThen add `gnubin` to your `$PATH`, with:\n\n```console\necho 'export PATH=\"$(brew --prefix coreutils)/libexec/gnubin:$PATH\"' >> ~/.bash_profile\nbash --login\n```\n\nTo use the build script:\n\n```console\n$ ./build.sh -h\nUsage: build.sh <options>\n\nBuild ct using Goreleaser.\n\n    -h, --help      Display help\n    -d, --debug     Display verbose output and run Goreleaser with --debug\n    -r, --release   Create a release using Goreleaser. This includes the creation\n                    of a GitHub release and building and pushing the Docker image.\n                    If this flag is not specified, Goreleaser is run with --snapshot\n```\n\n## Releasing\n\n### Prepare Release\n\nBefore a release is created, versions have to be updated in the examples.\nA pull request needs to be created for this, which should be merged right before the release is cut.\nHere's a previous one for reference: https://github.com/helm/chart-testing/pull/89\n\n### Create Release\n\nThe release workflow is [dispatched from github actions](https://github.com/helm/chart-testing/actions)\nVersions must start with a lower-case `v`, e. g. `v3.7.1`.\n\n## Supported versions\n\nThe previous MAJOR version will be supported for three months after each new MAJOR release.\n\nWithin this support window, pull requests for the previous MAJOR version should be made against the previous release branch.\nFor example, if the current MAJOR version is `v2`, the pull request base branch should be `release-v1`.\n\n## Upgrading\n\nWhen upgrading from `< v2.0.0` you will also need to change the usage in your scripts.\nThis is because, while the [v2.0.0](https://github.com/helm/chart-testing/releases/tag/v2.0.0) release has parity with `v1`, it was refactored from a bash library to Go so there are minor syntax differences.\nCompare [v1 usage](https://github.com/helm/chart-testing/tree/release-v1#usage) with this (`v2`) version's README [usage](#usage) section above."
}
