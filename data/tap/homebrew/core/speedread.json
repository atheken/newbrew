{
  "name": "speedread",
  "full_name": "speedread",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Simple terminal-based rapid serial visual presentation (RSVP) reader",
  "license": "MIT",
  "homepage": "https://github.com/pasky/speedread",
  "versions": {
    "stable": "1.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/pasky/speedread/archive/v1.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "a65f5bec427e66893663bcfc49a22e43169dd35976302eaed467eec2a5aafc1b"
    },
    "head": {
      "url": "https://github.com/pasky/speedread.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/speedread/blobs/sha256:98128adedcde823bb5ac289120ae88f07d3d041b778cd5cf0c100eb87df303d2",
          "sha256": "98128adedcde823bb5ac289120ae88f07d3d041b778cd5cf0c100eb87df303d2"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/speedread.rb",
  "ruby_source_checksum": {
    "sha256": "9804c1a47d07d6476ce2483c4e397530d100c5c73643246a8cd06cee12039530"
  },
  "date_added": "2016-01-28T12:49:16+01:00",
  "readme": "speedread\n=========\n\nA simple terminal-based open source Spritz-alike.\n\nThis command line filter shows input text as a per-word RSVP (rapid\nserial visual presentation) aligned on optimal reading points.  This\nkind of input mode allows reading text at a much more rapid pace than\nusual as the eye can stay fixed on a single place.\n\nBasic Example\n-------------\n\n\tcat tea.txt | ./speedread -w 250\n\nThe default of 250 words per minute is very timid, designed so that you get\nused to this.  Be sure to try cranking this up, 500wpm should still be fairly\neasy to follow even for beginners.\n\n![250wpm example](doc/speedread-250.gif)\n![500wpm example](doc/speedread-500.gif)\n![750wpm example](doc/speedread-750.gif)\n![1000wpm example](doc/speedread-1000.gif)\n\nControls\n--------\n\nspeedread is slightly interactive, with these controls accepted:\n\n  * [ - slow down by 10%\n  * ] - speed up by 10%\n  * space - pause (and show the last two lines of context)\n\nIntegration Recipes\n-------------------\n\nYou can connect mutt with speedread by putting a macro like this in your\n~/.muttrc (or pressing ':' in running mutt and pasting it):\n\n\tmacro pager R \"<enter-command>set pipe_decode=yes<enter>v|grep -v '^>' | ~/speedread/speedread<enter><enter-command>unset pipe_decode<enter>q\" \"speedread\"\n\nThen, just press R when viewing a message.  Unfortunately, it does not\nwork with non-ASCII messages (probably due to mutt limitations).\n\nTODO\n----\n\nNot sure if I will ever get around to these...\n\n  * Better word timing! Instead of just pausing longer at commas and\n    full-stops, distribute time better. Some short words like \"not\"\n    and \"can\" could often get missed the way things are now.\n  * Support for seeking back/forward.\n  * Automatically adjust wpm on trained content difficulty (look-ahead)?\n  * More controls, explore how can interactivity enhance usefulness of this.\n  * Make various timing and ORP coefficients configurable.\n  * Add a (Cairo-based?) simplistic graphical frontend (keeping with the\n    filter philosophy). This would allow better eye guidance and large font.\n  * An elinks-based recipe for reading websites this way.\n\nCheck out also [OpenSpritz](https://github.com/Miserlou/Glance-Bookmarklet) or\n[spritz-js](https://github.com/richardtagger/spritz-js) if you want to\nget this functionality in the web context."
}
