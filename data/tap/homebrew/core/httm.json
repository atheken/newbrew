{
  "name": "httm",
  "full_name": "httm",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Interactive, file-level Time Machine-like tool for ZFS/btrfs",
  "license": "MPL-2.0",
  "homepage": "https://github.com/kimono-koans/httm",
  "versions": {
    "stable": "0.30.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/kimono-koans/httm/archive/refs/tags/0.30.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "8e829c5ea6c1c34f392ea1900df7191eb521ecd126a4495933c41f81482f65a6"
    },
    "head": {
      "url": "https://github.com/kimono-koans/httm.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/httm/blobs/sha256:01b5f3b48c216451c5b0a76744866be0e00e7ecf2be3982cf80347c81ce00808",
          "sha256": "01b5f3b48c216451c5b0a76744866be0e00e7ecf2be3982cf80347c81ce00808"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/httm/blobs/sha256:bb05500d474f1bf6f9c501642be876321209cb7432a064268887b018508699be",
          "sha256": "bb05500d474f1bf6f9c501642be876321209cb7432a064268887b018508699be"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/httm/blobs/sha256:7ea5b8436e50f82526e989e852242dae9565f5a4ad3495397ac5f5c3287772e1",
          "sha256": "7ea5b8436e50f82526e989e852242dae9565f5a4ad3495397ac5f5c3287772e1"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/httm/blobs/sha256:4a1b8ec3a35ac25bab361641f860c07aa9d136a74cdbdcf036661140b4e9cebf",
          "sha256": "4a1b8ec3a35ac25bab361641f860c07aa9d136a74cdbdcf036661140b4e9cebf"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/httm/blobs/sha256:1f8aa17cd7445af1fe6795a94ddcb54be77371910f19713ee042541bfc0ca728",
          "sha256": "1f8aa17cd7445af1fe6795a94ddcb54be77371910f19713ee042541bfc0ca728"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/httm/blobs/sha256:0610b3bb04a1ee19e23fb4ed5a84dd8e19fcbef6ec66124992b7e3879a8fb7e6",
          "sha256": "0610b3bb04a1ee19e23fb4ed5a84dd8e19fcbef6ec66124992b7e3879a8fb7e6"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/httm/blobs/sha256:cc1bb5f5807243fd03d39ef95ddc22eb11586a38c3acb36783bf9ab54982b1dc",
          "sha256": "cc1bb5f5807243fd03d39ef95ddc22eb11586a38c3acb36783bf9ab54982b1dc"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/httm.rb",
  "ruby_source_checksum": {
    "sha256": "f018184c85906dd7ac50cd2c6564be50da6c30ba75db3d1a7ad9c25d884fbf8e"
  },
  "date_added": "2022-12-19T14:04:11+00:00",
  "readme": "[![asciicast](https://asciinema.org/a/529608.svg)](https://asciinema.org/a/529608)\n\n# `httm`\n\n*The dream of a CLI Time Machine is still alive with `httm`.*\n\n`httm` prints the size, date and corresponding locations of available unique versions (deduplicated by modify time and size) of files residing on snapshots, but can also be used *interactively* to select and restore files, even snapshot mounts by file! `httm` might change the way you use snapshots (because ZFS/BTRFS/NILFS2 aren't designed for finding for unique file versions) or the Time Machine concept (because `httm` is very fast!).\n\n`httm` boasts an array of seductive features, like:\n\n* Search for versions of multiple files on distinct datasets simultaneously\n* Search for and recursively list deleted files.  *Even browse files hidden behind deleted directories*.\n* List file snapshots from *all* local pools (detect local snapshot versions *as well as* locally replicated snapshot versions)!\n* List file snapshots from remote backup pools (even overlay replicated remote snapshot directories over live directories).\n* For use with `rsync`-ed non-ZFS/BTRFS/NILFS2 local datasets (like ext4, APFS, or NTFS), not just ZFS/BTRFS/NILFS2.\n* Optionally preview snapshot file versions with a custom command (default is a `diff` compare to the live version)\n* List or even snapshot the mounts for a file directly\n* Roll *forward* to a previous snapshots, instead of rolling back (avoids destroying interstitial snapshots)\n* Guard any restore actions with precautionary snapshots\n* List snapshot names, even prune snapshots, which include a file name\n* Shortcut features: only display last snapshot, omit duplicates of the live file, etc.\n* Uniqueness level: Like `rsync`, `httm` can determine whether file is unique based solely on metadata, or use checksums\n* 4 native interactive modes: browse, select, prune and restore\n* ANSI `ls` colors from your environment\n* Detect and display only categories of the numbers of unique file versions available (`multiple`, `single`, `single-with-snap`,..., etc.)\n* Select from several formatting styles (newline, null, tab delimited, JSON, etc.).  Parseable ... or not ...  oh my!\n* Packaged scripts which help you, and show you how to, use `httm`: [ounce](https://github.com/kimono-koans/httm/blob/master/scripts/ounce.bash), [bowie](https://github.com/kimono-koans/httm/blob/master/scripts/bowie.bash), and [nicotine](https://github.com/kimono-koans/httm/blob/master/scripts/nicotine.bash)\n* Supports ZFS/BTRFS/NILFS2 snapshots\n\nUse in combination with you favorite shell's hot keys for even more fun.\n\nInspired by the [findoid](https://github.com/jimsalterjrs/sanoid) script, [fzf](https://github.com/junegunn/fzf) and many [zsh](https://www.zsh.org) key bindings.\n\n## Install via Native Packages\n\nFor Debian-based distributions (like Ubuntu), I maintain an (unsupported) personal package archive, or PPA.  See the [linked repository](https://github.com/kimono-koans/ppa).\n\nFor Debian-based and Redhat-based Linux distributions (like Ubuntu or Fedora, etc.), also check the [tagged releases](https://github.com/kimono-koans/httm/tags) for native packages for your distribution.  For Redhat-based Linux distributions, you may need to use the `--replacefiles` option when installing via `rpm -i`, see the linked [issue](https://github.com/kimono-koans/httm/issues/51).\n\nYou may also create and install your own native package from the latest sources, for Debian-based and Redhat-based Linux distributions, like so:\n\n```bash\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\ncargo install cargo-deb \ngit clone https://github.com/kimono-koans/httm.git\ncd ./httm/; cargo deb\n# to install on a Debian/Ubuntu-based system\ndpkg -i ./target/debian/httm_*.deb\n# or convert to RPM \nalien -r ./target/debian/httm_*.deb\n# and install on a Redhat-based system\nrpm -i --replacefiles ./httm_*.rpm\n```\n\nFor Arch-based Linux distributions, you can create and install your own native package from the latest sources, like so:\n\n```bash\n# you need to edit the PKGBUILD as needed to conform to the latest release\nwget https://raw.githubusercontent.com/kimono-koans/httm/master/packaging/arch/PKGBUILD\nmakepkg -si\n```\n\nFor MacOS users, a user from the community (very exciting) has posted a [formulae](https://formulae.brew.sh/formula/httm) for [Homebrew](https://brew.sh).\n\n## Install via Source\n\nThe `httm` project contains only a few components:\n\n1. The `httm` executable.  To build and install:\n\n    ```bash\n    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n    latest=\"(wget -nv -O - \"https://api.github.com/repos/kimono-koans/httm/releases/latest\" 2>/dev/null | grep tag_name | cut -d: -f2 | cut -d'\"' -f2)\"\n    cargo install --git https://github.com/kimono-koans/httm.git --tag \"$latest\"\n    ```\n\n2. The optional `zsh` hot-key bindings: Use `ESC+s` to select snapshots filenames to be dropped to your command line (for instance after the `cat` command), or use `ESC+m` to browse for all of a file's snapshots. After you install the `httm` binary, to copy the hot key script to your home directory, and source that script within your `.zshrc`:\n\n    ```bash\n    httm --install-zsh-hot-keys\n    ```\n\n3. The optional `man` page: `cargo` has no native facilities for man page installation (though it may in the future!).  You can use `manpath` to see the various directories your system uses and decide which directory works best for you.  To install, just copy it to a directory in your `man` path, like so:\n\n    ```bash\n    cp ./httm/httm.1 /usr/local/share/man/man1/\n    ```\n\n4. The optional scripts.  See script usage below, in the Example Usage section, or follow the links ([ounce](https://github.com/kimono-koans/httm/blob/master/scripts/ounce.bash), [bowie](https://github.com/kimono-koans/httm/blob/master/scripts/bowie.bash), and [nicotine](https://github.com/kimono-koans/httm/blob/master/scripts/nicotine.bash)), for more information.  To install, just copy it to a directory in your path, like so:\n\n    ```bash\n    cp ./httm/scripts/ounce.bash /usr/local/bin/ounce\n    cp ./httm/scripts/bowie.bash /usr/local/bin/bowie\n    cp ./httm/scripts/nicotine.bash /usr/local/bin/nicotine\n    chmod +x /usr/local/bin/bowie /usr/local/bin/ounce /usr/local/bin/nicotine\n    ```\n\n### Caveats\n\nRight now, you will need to use a Unix-ish-y Rust-supported platform to build and install (that is: Linux, Solaris/illumos, the BSDs).  Note, your platform *does not* need to support ZFS/BTRFS/NILFS2 to use `httm`.  And there is no fundamental reason a non-interactive Windows version of `httm` could not be built, as it once did build, but Windows platform support is not a priority for me right now.  Contributions from users are, of course, very welcome.\n\nOn FreeBSD, after a fresh minimal install, the interactive modes may not render properly, see the linked [issue](https://github.com/kimono-koans/httm/issues/20) for the fix.\n\nOn some Linux distributions, which include old versions of `libc`, `cargo` may require building with `musl` instead, see the linked [issue](https://github.com/kimono-koans/httm/issues/17).\n\n## Example Usage\n\nNote: Users may need to use `sudo` (or equivalent) to view versions on BTRFS or NILFS2 datasets, as BTRFS or NILFS2 snapshots may require root permissions in order to be visible.\n\nLike other UNIX utilities (such as `cat`, `uniq`, `sort`), if you include no path/s as arguments, then `httm` will pause waiting for input on stdin:\n\n```bash\n# Press CTRL+C to send a SIGINT and quit the program\n➜ httm \n# Pipe output of find command to httm\n➜ find . -maxdepth 1 | httm\n```\n\nPrint all unique versions of your history file:\n\n```bash\n➜ httm ~/.histfile\n```\n\nPrint all unique versions of your history file, as formatted JSON:\n\n```bash\n➜ httm --json ~/.histfile\n```\n\nPrint all files on snapshots deleted from your home directory, recursive:\n\n```bash\n➜ httm -d -R ~\n```\n\nPrint all files on snapshots deleted from your home directory, recursive, newline delimited, piped to a text file:\n\n```bash\n# pseudo live file versions\n➜ httm -d -n -R --no-snap ~ > pseudo-live-versions.txt\n# unique snapshot versions\n➜ httm -d -n -R --no-live ~ > deleted-unique-versions.txt\n```\n\nBrowse all files in your home directory, recursively, and view unique versions on local snapshots:\n\n```bash\n➜ httm -i -R ~\n```\n\nBrowse all files deleted from your home directory, recursively, and view unique versions on all local and alternative replicated dataset snapshots:\n\n```bash\n➜ httm -d=only -i -a -R ~\n```\n\nBrowse all files in your home directory, recursively, and view unique versions on local snapshots, to select and ultimately restore to your working directory:\n\n```bash\n➜ httm -r -R ~\n```\n\nView unique versions of a file for recovery (shortcut, no need to browse a directory):\n\n```bash\n➜ httm -r /var/log/samba/log.smbd\n```\n\nView `bowie`-formatted `diff` of each unique snapshot of `~/.zshrc` against the live file version:\n\n```bash\n➜ httm --preview -s ~/.zshrc\n```\n\nView `cat` output of each unique snapshot of `~/.zshrc`:\n\n```bash\n➜ httm --preview=\"cat {snap_file}\" -s ~/.zshrc\n```\n\nRecover the last-in-time unique file version (shortcut, no need to browse a directory or select from among other unique versions):\n\n```bash\n➜ httm -l -r /var/log/samba/log.smbd\n```\n\nSnapshot the dataset upon which `/etc/samba/smb.conf` is located:\n\n```bash\n➜ sudo httm -S /etc/samba/smb.conf\n```\n\nBrowse all files, recursively, in a folder backed up via `rsync` to a remote share, and view unique versions on remote snapshots directly (only available for BTRFS Snapper and ZFS datasets).  \n\n```bash\n# mount the share\n➜ open smb://<your name>@<your remote share>.local/Home\n# execute httm\n➜ httm -i -R /Volumes/Home\n```\n\nBrowse all files, recursively, in your MacOS home directory backed up via `rsync` to a ZFS or BTRFS Snapper remote share, shared via `smbd`, and view unique versions on remote snapshots. Note: The difference from above is, here, you're browsing files from a \"live\" directory:\n\n```bash\n# mount the share\n➜ open smb://<your name>@<your remote share>.local/Home\n# execute httm\n➜ httm -i -R --map-aliases /Users/<your name>:/Volumes/Home ~\n```\n\nView the differences between each unique snapshot version of the `httm` `man` page and each previous version (this simple script is the basis for [bowie](https://github.com/kimono-koans/httm/blob/master/scripts/bowie.bash)):\n\n```bash\nfilename=\"./httm/httm.1\"\n# previous version is unset\nprevious_version=\"\"\nfor current_version in $(httm -n --omit-ditto $filename); do\n    # check if initial \"previous_version\" needs to be set\n    if [[ -z \"$previous_version\" ]]; then\n        previous_version=\"$current_version\"\n        continue\n    fi\n\n    # print that current version and previous version differ\n    diff -q \"$previous_version\" \"$current_version\"\n    # print the difference between that current version and previous_version\n    diff \"$previous_version\" \"$current_version\"\n\n    # set current_version to previous_version\n    previous_version=\"$current_version\"\ndone\n```\n\nCreate a simple `tar` archive of all unique versions of your `/var/log/syslog`:\n\n```bash\n➜ httm -n --omit-ditto /var/log/syslog | tar -zcvf all-versions-syslog.tar.gz -T -\n```\n\nCreate a *kinda fancy* `tar` archive of all unique versions of your `/var/log/syslog`:\n\n```bash\nfile=\"/var/log/syslog\"\ndir_name=\"${$(dirname $file)/\\//}\"\nbase_dir=\"$(basename $file)_all_versions\"\n# squash extra directories by \"transforming\" them to simply snapshot names \nhttm -n --omit-ditto \"$file\" | \\\ntar \\\n--transform=\"flags=r;s|$dir_name|$base_dir|\" \\\n--transform=\"flags=r;s|.zfs/snapshot/||\" \\\n--show-transformed-names \\\n-zcvf \"all-versions-$(basename $file).tar.gz\" -T  -\n```\n\nCreate a *super fancy* `git` archive of all unique versions of `/var/log/syslog` (this simple script is the basis for [nicotine](https://github.com/kimono-koans/httm/blob/master/scripts/nicotine.bash)):\n\n```bash\n# create variable for file name\nfile=\"/var/log/syslog\"\n# create git repo\nmkdir ./archive-git; cd ./archive-git; git init\n# copy each version to repo and commit after each copy\nfor version in $(httm -n --omit-ditto $file); do\n    cp \"$version\" ./\n    git add \"./$(basename $version)\"\n    # modify commit date to match snapshot modify date-time\n    git commit -m \"httm commit from ZFS snapshot\" \\\n    --date \"$(date -d \"$(stat -c %y $version)\")\"\ndone\n# create git tar.gz archive\ntar -zcvf \"../all-versions-$(basename $file).tar.gz\" \"./\"\n# and to view\ngit log --stat\n```\n\nUse [ounce](https://github.com/kimono-koans/httm/blob/master/scripts/ounce.bash) (codename: \"dimebag\"), a wrapper script for `httm`, for no mental overhead, non-periodic dynamic snapshots:\n\n```bash\n# request ZFS snapshot privileges\n➜ ounce --give-priv\n# here you create a \"dummyfile\", ounce will add a snapshot of \"dummyfile\" \n# before you remove it, and httm will allow you to view the snapshot created\n➜ touch ~/dummyfile; ounce rm ~/dummyfile; httm ~/dummyfile\n────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\nWed Feb 15 12:59:42 2023  0 bytes  \"/home/kimono/.zfs/snapshot/snap_2023-02-15-12:59:42_ounceSnapFileMount/dummyfile\"\n────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n                                   \"/home/kimono/dummyfile\"\n────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n# use as an alias around programs which modify files/dirs\n➜ printf \"\n# ounce aliases \nalias vim=\\\"ounce --trace vim\\\"\nalias emacs=\\\"ounce --trace emacs\\\"\nalias nano=\\\"ounce --trace nano\\\"\nalias rm=\\\"ounce rm\\\"\" >> ~/.zsh_aliases\n```\n\nUse [bowie](https://github.com/kimono-koans/httm/blob/master/scripts/bowie.bash), a wrapper script for `httm`, to display the difference between unique snapshot versions and the live file:\n\n```bash\n➜ bowie ~/.zshrc\n/home/kimono/.zshrc\n__\nFiles /home/kimono/.zfs/snapshot/snap_2023-02-14-13:42:11_ounceSnapFileMount/.zshrc and /home/kimono/.zshrc differ\n1c1\n< ### If you come from bash you might have to change your $PATH.\n---\n> # If you come from bash you might have to change your $PATH.\n```\n\nUse [nicotine](https://github.com/kimono-koans/httm/blob/master/scripts/nicotine.bash), a wrapper script for `httm`, to convert unique snapshot file versions to `git` archives:\n\n```bash\n➜ nicotine .zshrc\nnicotine git archive created successfully: /home/kimono/zshrc-git.tar.gz\n```\n\nRoll *forward* to a previous ZFS snapshot, instead of rolling back (this avoids destroying interstitial snapshots):\n\n```bash\n➜ sudo httm --roll-forward=rpool/scratch@snap_2023-04-01-15:26:06_httmSnapFileMount\n[sudo] password for kimono:\nhttm took a pre-execution snapshot named: rpool/scratch@snap_pre_2023-04-01-15:27:38_httmSnapRollForward\n...\nhttm roll forward completed successfully.\nhttm took a post-execution snapshot named: rpool/scratch@snap_post_2023-04-01-15:28:40_:snap_2023-04-01-15:26:06_httmSnapFileMount:_httmSnapRollForward\n```\n\n## Yo, @kimono-koans, where do your snapshots come from?\n\nIf you'd like to read more about how someone else/I personally create snapshots, you might try my [A Somewhat Opinionated Guide to Effective ZFS Snapshots](https://kimono-koans.github.io/opinionated-guide/).\n\n## I know what you're thinking, but slow your roll\n\n![To be clear, httm is *not*...](https://i.pinimg.com/originals/23/7f/2a/237f2ab8765663c721325366406197b7.gif)\n\n## License\n\nhttm is licensed under the MPL 2.0 License - see the LICENSE file for more details."
}
