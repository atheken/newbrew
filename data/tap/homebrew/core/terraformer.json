{
  "name": "terraformer",
  "full_name": "terraformer",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "CLI tool to generate terraform files from existing infrastructure",
  "license": "Apache-2.0",
  "homepage": "https://github.com/GoogleCloudPlatform/terraformer",
  "versions": {
    "stable": "0.8.24",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/GoogleCloudPlatform/terraformer/archive/0.8.24.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "d366476777b31149738b8e5f916e080d54403fb4ca7a6e97edc885d3623a5f19"
    },
    "head": {
      "url": "https://github.com/GoogleCloudPlatform/terraformer.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terraformer/blobs/sha256:df018b019428be95a8d6c65a919c9c55d886e7f4824cda47ab436431ae97acce",
          "sha256": "df018b019428be95a8d6c65a919c9c55d886e7f4824cda47ab436431ae97acce"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terraformer/blobs/sha256:5fa2ea9f7724c5049821dc933c4f3ea7294a284bcdeb48d557dcdc87174b1b1c",
          "sha256": "5fa2ea9f7724c5049821dc933c4f3ea7294a284bcdeb48d557dcdc87174b1b1c"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terraformer/blobs/sha256:94d5886c4a51100252320605c5c325d1887d567ce544f4561f3b66c98c812c61",
          "sha256": "94d5886c4a51100252320605c5c325d1887d567ce544f4561f3b66c98c812c61"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terraformer/blobs/sha256:e37409d64ec97c2d9fb4875e4dc972bd5a721f31519a4d801f7c10df6e0769f7",
          "sha256": "e37409d64ec97c2d9fb4875e4dc972bd5a721f31519a4d801f7c10df6e0769f7"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terraformer/blobs/sha256:1134403c3c57f14169abc8e4ce5623141bf156740af30aa27230df8b0ee99781",
          "sha256": "1134403c3c57f14169abc8e4ce5623141bf156740af30aa27230df8b0ee99781"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terraformer/blobs/sha256:d2add2d2853942105421257b897d2ac86445edd26b521da08ea8a2470ffa48e7",
          "sha256": "d2add2d2853942105421257b897d2ac86445edd26b521da08ea8a2470ffa48e7"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/terraformer/blobs/sha256:6b1e541f2a8f8b3cd4c811a531d879e2ce60d99672cc49e1e8c1e83c7e669076",
          "sha256": "6b1e541f2a8f8b3cd4c811a531d879e2ce60d99672cc49e1e8c1e83c7e669076"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/terraformer.rb",
  "ruby_source_checksum": {
    "sha256": "3ff0097364ff66151c5c93e2af09493810ddfb9b392a2c3006e267a85b6704a4"
  },
  "date_added": "2019-06-07T13:46:57+02:00",
  "readme": "# Terraformer\n\n[![tests](https://github.com/GoogleCloudPlatform/terraformer/actions/workflows/test.yml/badge.svg)](https://github.com/GoogleCloudPlatform/terraformer/actions/workflows/test.yml)\n[![linter](https://github.com/GoogleCloudPlatform/terraformer/actions/workflows/linter.yml/badge.svg)](https://github.com/GoogleCloudPlatform/terraformer/actions/workflows/linter.yml)\n[![Go Report Card](https://goreportcard.com/badge/github.com/GoogleCloudPlatform/terraformer)](https://goreportcard.com/report/github.com/GoogleCloudPlatform/terraformer)\n[![AUR package](https://img.shields.io/aur/version/terraformer)](https://aur.archlinux.org/packages/terraformer/)\n[![Homebrew](https://img.shields.io/badge/dynamic/json.svg?url=https://formulae.brew.sh/api/formula/terraformer.json&query=$.versions.stable&label=homebrew)](https://formulae.brew.sh/formula/terraformer)\n\nA CLI tool that generates `tf`/`json` and `tfstate` files based on existing infrastructure\n(reverse Terraform).\n\n*   Disclaimer: This is not an official Google product\n*   Created by: Waze SRE\n\n![Waze SRE logo](assets/waze-sre-logo.png)\n\n# Table of Contents\n- [Demo GCP](#demo-gcp)\n- [Capabilities](#capabilities)\n- [Installation](#installation)\n- [Supported Providers](/docs)\n    * Major Cloud\n        * [Google Cloud](/docs/gcp.md)\n        * [AWS](/docs/aws.md)\n        * [Azure](/docs/azure.md)\n        * [AliCloud](/docs/alicloud.md)\n        * [IBM Cloud](/docs/ibmcloud.md)\n    * Cloud\n        * [DigitalOcean](/docs/digitalocean.md)\n        * [Equinix Metal](/docs/equinixmetal.md)\n        * [Fastly](/docs/fastly.md)\n        * [Heroku](/docs/heroku.md)\n        * [LaunchDarkly](/docs/launchdarkly.md)\n        * [Linode](/docs/linode.md)\n        * [NS1](/docs/ns1.md)\n        * [OpenStack](/docs/openstack.md)\n        * [TencentCloud](/docs/tencentcloud.md)\n        * [Vultr](/docs/vultr.md)\n        * [Yandex Cloud](/docs/yandex.md)\n        * [Ionos Cloud](/docs/ionoscloud.md)\n    * Infrastructure Software\n        * [Kubernetes](/docs/kubernetes.md)\n        * [OctopusDeploy](/docs/octopus.md)\n        * [RabbitMQ](/docs/rabbitmq.md)\n    * Network\n        * [Cloudflare](/docs/cloudflare.md)\n        * [Myrasec](/docs/myrasec.md)\n        * [PAN-OS](/docs/panos.md)\n    * VCS\n        * [Azure DevOps](/docs/azuredevops.md)\n        * [GitHub](/docs/github.md)\n        * [Gitlab](/docs/gitlab.md)\n    * Monitoring & System Management\n        * [Datadog](/docs/datadog.md)\n        * [New Relic](/docs/relic.md)\n        * [Mackerel](/docs/mackerel.md)\n        * [PagerDuty](/docs/pagerduty.md)\n        * [Opsgenie](/docs/opsgenie.md)\n        * [Honeycomb.io](/docs/honeycombio.md)\n        * [Opal](/docs/opal.md)\n    * Community\n        * [Keycloak](/docs/keycloak.md)\n        * [Logz.io](/docs/logz.md)\n        * [Commercetools](/docs/commercetools.md)\n        * [Mikrotik](/docs/mikrotik.md)\n        * [Xen Orchestra](/docs/xen.md)\n        * [GmailFilter](/docs/gmailfilter.md)\n        * [Grafana](/docs/grafana.md)\n        * [Vault](/docs/vault.md)\n    * Identity\n        * [Okta](/docs/okta.md)\n        * [Auth0](/docs/auth0.md)\n        * [AzureAD](/docs/azuread.md)\n- [Contributing](#contributing)\n- [Developing](#developing)\n- [Infrastructure](#infrastructure)\n- [Stargazers over time](#stargazers-over-time)\n\n## Demo GCP\n[![asciicast](https://asciinema.org/a/243961.svg)](https://asciinema.org/a/243961)\n\n## Capabilities\n\n1.  Generate `tf`/`json` + `tfstate` files from existing infrastructure for all\n    supported objects by resource.\n2.  Remote state can be uploaded to a GCS bucket.\n3.  Connect between resources with `terraform_remote_state` (local and bucket).\n4.  Save `tf`/`json` files using a custom folder tree pattern.\n5.  Import by resource name and type.\n6.  Support terraform 0.13 (for terraform 0.11 use v0.7.9).\n\nTerraformer uses Terraform providers and is designed to easily support newly added resources.\nTo upgrade resources with new fields, all you need to do is upgrade the relevant Terraform providers.\n```\nImport current state to Terraform configuration from a provider\n\nUsage:\n   import [provider] [flags]\n   import [provider] [command]\n\nAvailable Commands:\n  list        List supported resources for a provider\n\nFlags:\n  -b, --bucket string         gs://terraform-state\n  -c, --connect                (default true)\n  -ะก, --compact                (default false)\n  -x, --excludes strings      firewalls,networks\n  -f, --filter strings        compute_firewall=id1:id2:id4\n  -h, --help                  help for google\n  -O, --output string         output format hcl or json (default \"hcl\")\n  -o, --path-output string     (default \"generated\")\n  -p, --path-pattern string   {output}/{provider}/ (default \"{output}/{provider}/{service}/\")\n      --projects strings\n  -z, --regions strings       europe-west1, (default [global])\n  -r, --resources strings     firewall,networks or * for all services\n  -s, --state string          local or bucket (default \"local\")\n  -v, --verbose               verbose mode\n  -n, --retry-number          number of retries to perform if refresh fails\n  -m, --retry-sleep-ms        time in ms to sleep between retries\n\nUse \" import [provider] [command] --help\" for more information about a command.\n```\n#### Permissions\n\nThe tool requires read-only permissions to list service resources.\n\n#### Resources\n\nYou can use `--resources` parameter to tell resources from what service you want to import.\n\nTo import resources from all services, use `--resources=\"*\"` . If you want to exclude certain services, you can combine the parameter with `--excludes` to exclude resources from services you don't want to import e.g. `--resources=\"*\" --excludes=\"iam\"`.\n\n#### Filtering\n\nFilters are a way to choose which resources `terraformer` imports. It's possible to filter resources by its identifiers or attributes. Multiple filtering values are separated by `:`. If an identifier contains this symbol, value should be wrapped in `'` e.g. `--filter=resource=id1:'project:dataset_id'`. Identifier based filters will be executed before Terraformer will try to refresh remote state.\n\nUse `Type` when you need to filter only one of several types of resources. Multiple filters can be combined when importing different resource types. An example would be importing all AWS security groups from a specific AWS VPC:\n```\nterraformer import aws -r sg,vpc --filter Type=sg;Name=vpc_id;Value=VPC_ID --filter Type=vpc;Name=id;Value=VPC_ID\n```\nNotice how the `Name` is different for `sg` than it is for `vpc`.\n\n##### Migration state version\nFor terraform >= 0.13, you can use `replace-provider` to migrate state from previous versions.\n\nExample usage:\n```\nterraform state replace-provider -auto-approve \"registry.terraform.io/-/aws\" \"hashicorp/aws\"\n```\n\n##### Resource ID\n\nFiltering is based on Terraform resource ID patterns. To find valid ID patterns for your resource, check the import part of the [Terraform documentation][terraform-providers].\n\n[terraform-providers]: https://www.terraform.io/docs/providers/\n\nExample usage:\n\n```\nterraformer import aws --resources=vpc,subnet --filter=vpc=myvpcid --regions=eu-west-1\n```\nWill only import the vpc with id `myvpcid`. This form of filters can help when it's necessary to select resources by its identifiers.\n\n##### Field name only\n\nIt is possible to filter by specific field name only. It can be used e.g. when you want to retrieve resources only with a specific tag key.\n\nExample usage:\n\n```\nterraformer import aws --resources=s3 --filter=\"Name=tags.Abc\" --regions=eu-west-1\n```\nWill only import the s3 resources that have tag `Abc`. This form of filters can help when the field values are not important from filtering perspective.\n\n##### Field with dots\n\nIt is possible to filter by a field that contains a dot.\n\nExample usage:\n\n```\nterraformer import aws --resources=s3 --filter=\"Name=tags.Abc.def\" --regions=eu-west-1\n```\nWill only import the s3 resources that have tag `Abc.def`.\n\n#### Planning\n\nThe `plan` command generates a planfile that contains all the resources set to be imported. By modifying the planfile before running the `import` command, you can rename or filter the resources you'd like to import.\n\nThe rest of subcommands and parameters are identical to the `import` command.\n\n```\n$ terraformer plan google --resources=networks,firewall --projects=my-project --regions=europe-west1-d\n(snip)\n\nSaving planfile to generated/google/my-project/terraformer/plan.json\n```\n\nAfter reviewing/customizing the planfile, begin the import by running `import plan`.\n\n```\n$ terraformer import plan generated/google/my-project/terraformer/plan.json\n```\n\n### Resource structure\n\nTerraformer by default separates each resource into a file, which is put into a given service directory.\n\nThe default path for resource files is `{output}/{provider}/{service}/{resource}.tf` and can vary for each provider.\n\nIt's possible to adjust the generated structure by:\n1. Using `--compact` parameter to group resource files within a single service into one `resources.tf` file\n2. Adjusting the `--path-pattern` parameter and passing e.g. `--path-pattern {output}/{provider}/` to generate resources for all services in one directory\n\nIt's possible to combine `--compact` `--path-pattern` parameters together.\n\n### Installation\n\nBoth Terraformer and a Terraform provider plugin need to be installed.\n\n#### Terraformer\n\nFrom source:\n1.  Run `git clone <terraformer repo> && cd terraformer/`\n2.  Run `go mod download`\n3.  Run `go build -v` for all providers OR build with one provider\n`go run build/main.go {google,aws,azure,kubernetes,etc}`\n\nFrom releases:\n* Linux\n```\nexport PROVIDER={all,google,aws,kubernetes}\ncurl -LO \"https://github.com/GoogleCloudPlatform/terraformer/releases/download/$(curl -s https://api.github.com/repos/GoogleCloudPlatform/terraformer/releases/latest | grep tag_name | cut -d '\"' -f 4)/terraformer-${PROVIDER}-linux-amd64\"\nchmod +x terraformer-${PROVIDER}-linux-amd64\nsudo mv terraformer-${PROVIDER}-linux-amd64 /usr/local/bin/terraformer\n```\n* MacOS\n```\nexport PROVIDER={all,google,aws,kubernetes}\ncurl -LO \"https://github.com/GoogleCloudPlatform/terraformer/releases/download/$(curl -s https://api.github.com/repos/GoogleCloudPlatform/terraformer/releases/latest | grep tag_name | cut -d '\"' -f 4)/terraformer-${PROVIDER}-darwin-amd64\"\nchmod +x terraformer-${PROVIDER}-darwin-amd64\nsudo mv terraformer-${PROVIDER}-darwin-amd64 /usr/local/bin/terraformer\n```\n* Windows\n1. Install Terraform - https://www.terraform.io/downloads\n2. Download exe file for required provider from here - https://github.com/GoogleCloudPlatform/terraformer/releases\n3. Add the exe file path to path variable\n\nFrom a package manager:\n- [Homebrew](https://brew.sh/) users can use `brew install terraformer`.\n- [MacPorts](https://www.macports.org/) users can use `sudo port install terraformer`.\n- [Chocolatey](https://chocolatey.org/) users can use `choco install terraformer`.\n\n#### Terraform Providers\n\nCreate a working folder and initialize the Terraform provider plugin.  This folder will be where you run Terraformer commands.\n\nRun ```terraform init``` against a ```versions.tf``` file to install the plugins required for your platform. For example, if you need plugins for the google provider, ```versions.tf``` should contain:\n```\nterraform {\n  required_providers {\n    google = {\n      source = \"hashicorp/google\"\n    }\n  }\n  required_version = \">= 0.13\"\n}\n```\n\nOr, copy your Terraform provider's plugin(s) from the list below to folder `~/.terraform.d/plugins/`, as appropriate.\n\nLinks to download Terraform provider plugins:\n* Major Cloud\n    * Google Cloud provider >2.11.0 - [here](https://releases.hashicorp.com/terraform-provider-google/)\n    * AWS provider >2.25.0 - [here](https://releases.hashicorp.com/terraform-provider-aws/)\n    * Azure provider >1.35.0 - [here](https://releases.hashicorp.com/terraform-provider-azurerm/)\n    * Alicloud provider >1.57.1 - [here](https://releases.hashicorp.com/terraform-provider-alicloud/)\n* Cloud\n    * DigitalOcean provider >1.9.1 - [here](https://releases.hashicorp.com/terraform-provider-digitalocean/)\n    * Heroku provider >2.2.1 - [here](https://releases.hashicorp.com/terraform-provider-heroku/)\n    * LaunchDarkly provider >=2.1.1 - [here](https://releases.hashicorp.com/terraform-provider-launchdarkly/)\n    * Linode provider >1.8.0 - [here](https://releases.hashicorp.com/terraform-provider-linode/)\n    * OpenStack provider >1.21.1 - [here](https://releases.hashicorp.com/terraform-provider-openstack/)\n    * TencentCloud provider >1.50.0 - [here](https://releases.hashicorp.com/terraform-provider-tencentcloud/)\n    * Vultr provider >1.0.5 - [here](https://releases.hashicorp.com/terraform-provider-vultr/)\n    * Yandex provider >0.42.0 - [here](https://releases.hashicorp.com/terraform-provider-yandex/)\n    * Ionoscloud provider >6.3.3 - [here](https://github.com/ionos-cloud/terraform-provider-ionoscloud/releases)\n* Infrastructure Software\n    * Kubernetes provider >=1.9.0 - [here](https://releases.hashicorp.com/terraform-provider-kubernetes/)\n    * RabbitMQ provider >=1.1.0 - [here](https://releases.hashicorp.com/terraform-provider-rabbitmq/)\n* Network\n    * Myrasec provider >1.44 - [here](https://github.com/Myra-Security-GmbH/terraform-provider-myrasec)\n    * Cloudflare provider >1.16 - [here](https://releases.hashicorp.com/terraform-provider-cloudflare/)\n    * Fastly provider >0.16.1 - [here](https://releases.hashicorp.com/terraform-provider-fastly/)\n    * NS1 provider >1.8.3 - [here](https://releases.hashicorp.com/terraform-provider-ns1/)\n    * PAN-OS provider >= 1.8.3 - [here](https://github.com/PaloAltoNetworks/terraform-provider-panos)\n* VCS\n    * GitHub provider >=2.2.1 - [here](https://releases.hashicorp.com/terraform-provider-github/)\n* Monitoring & System Management\n    * Datadog provider >2.1.0 - [here](https://releases.hashicorp.com/terraform-provider-datadog/)\n    * New Relic provider >2.0.0 - [here](https://releases.hashicorp.com/terraform-provider-newrelic/)\n    * Mackerel provider > 0.0.6 - [here](https://github.com/mackerelio-labs/terraform-provider-mackerel)\n    * Pagerduty >=1.9 - [here](https://releases.hashicorp.com/terraform-provider-pagerduty/)\n    * Opsgenie >= 0.6.0 [here](https://releases.hashicorp.com/terraform-provider-opsgenie/)\n    * Honeycomb.io >= 0.10.0 - [here](https://github.com/honeycombio/terraform-provider-honeycombio/releases)\n    * Opal >= 0.0.2 - [here](https://github.com/opalsecurity/terraform-provider-opal/releases)\n* Community\n    * Keycloak provider >=1.19.0 - [here](https://github.com/mrparkers/terraform-provider-keycloak/)\n    * Logz.io provider >=1.1.1 - [here](https://github.com/jonboydell/logzio_terraform_provider/)\n    * Commercetools provider >= 0.21.0 - [here](https://github.com/labd/terraform-provider-commercetools)\n    * Mikrotik provider >= 0.2.2 - [here](https://github.com/ddelnano/terraform-provider-mikrotik)\n    * Xen Orchestra provider >= 0.18.0 - [here](https://github.com/ddelnano/terraform-provider-xenorchestra)\n    * GmailFilter provider >= 1.0.1 - [here](https://github.com/yamamoto-febc/terraform-provider-gmailfilter)\n    * Vault provider - [here](https://github.com/hashicorp/terraform-provider-vault)\n    * Auth0 provider - [here](https://github.com/alexkappa/terraform-provider-auth0)\n    * AzureAD provider - [here](https://github.com/hashicorp/terraform-provider-azuread)\n\nInformation on provider plugins:\nhttps://www.terraform.io/docs/configuration/providers.html\n\n\n## High-Level steps to add new provider\n * Initialize provider details in cmd/root.go and create a provider initialization file in the terraformer/cmd folder\n * Create a folder under terraformer/providers/ for your provider\n * Create two files under this folder\n   * <provide_name>_provider.go\n   * <provide_name>_service.go\n* Initialize all provider's supported services in <provide_name>_provider.go file\n* Create script for each supported service in same folder\n\n## Contributing\n\nIf you have improvements or fixes, we would love to have your contributions.\nPlease read CONTRIBUTING.md for more information on the process we would like\ncontributors to follow.\n\n## Developing\n\nTerraformer was built so you can easily add new providers of any kind.\n\nProcess for generating `tf`/`json` + `tfstate` files:\n\n1.  Call GCP/AWS/other api and get list of resources.\n2.  Iterate over resources and take only the ID (we don't need mapping fields!).\n3.  Call to provider for readonly fields.\n4.  Call to infrastructure and take tf + tfstate.\n\n## Infrastructure\n\n1.  Call to provider using the refresh method and get all data.\n2.  Convert refresh data to go struct.\n3.  Generate HCL file - `tf`/`json` files.\n4.  Generate `tfstate` files.\n\nAll mapping of resource is made by providers and Terraform. Upgrades are needed only\nfor providers.\n\n##### GCP compute resources\n\nFor GCP compute resources, use generated code from\n`providers/gcp/gcp_compute_code_generator`.\n\nTo regenerate code:\n\n```\ngo run providers/gcp/gcp_compute_code_generator/*.go\n```\n\n### Similar projects\n\n#### [terraforming](https://github.com/dtan4/terraforming)\n\n##### Terraformer Benefits\n\n* Simpler to add new providers and resources - already supports AWS, GCP, GitHub, Kubernetes, and Openstack. Terraforming supports only AWS.\n* Better support for HCL + tfstate, including updates for Terraform 0.12.\n* If a provider adds new attributes to a resource, there is no need change Terraformer code - just update the Terraform provider on your laptop.\n* Automatically supports connections between resources in HCL files.\n\n##### Comparison\n\nTerraforming gets all attributes from cloud APIs and creates HCL and tfstate files with templating. Each attribute in the API needs to map to attribute in Terraform. Generated files from templating can be broken with illegal syntax. When a provider adds new attributes the terraforming code needs to be updated.\n\nTerraformer instead uses Terraform provider files for mapping attributes, HCL library from Hashicorp, and Terraform code.\n\nLook for S3 support in terraforming here and official S3 support\nTerraforming lacks full coverage for resources - as an example you can see that 70% of S3 options are not supported:\n\n* terraforming - https://github.com/dtan4/terraforming/blob/master/lib/terraforming/template/tf/s3.erb\n* official S3 support - https://www.terraform.io/docs/providers/aws/r/s3_bucket\n\n## Stargazers over time\n\n[![Stargazers over time](https://starchart.cc/GoogleCloudPlatform/terraformer.svg)](https://starchart.cc/GoogleCloudPlatform/terraformer)"
}
