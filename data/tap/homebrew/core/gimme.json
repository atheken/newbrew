{
  "name": "gimme",
  "full_name": "gimme",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Shell script to install any Go version",
  "license": "MIT",
  "homepage": "https://github.com/travis-ci/gimme",
  "versions": {
    "stable": "1.5.5",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/travis-ci/gimme/archive/v1.5.5.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "7854c3f90c2274e14041138f53c9c0bf671be86e49dfb4a61b024270a514fb40"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "all": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gimme/blobs/sha256:fd677d17e7c2316bce3c567ce9cc708b2c3e6bf57ed867f64554e202b7b78746",
          "sha256": "fd677d17e7c2316bce3c567ce9cc708b2c3e6bf57ed867f64554e202b7b78746"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/gimme.rb",
  "ruby_source_checksum": {
    "sha256": "821cb46cdd8e63b976c6ec005765ef57228d2f81d8df349842fdab81ad2e3d5e"
  },
  "date_added": "2015-07-29T01:02:07+02:00",
  "readme": "# gimme [![Build Status](https://travis-ci.com/travis-ci/gimme.svg?branch=master)](https://travis-ci.com/travis-ci/gimme)\n\nInstall go, yay!\n\n`gimme` is a shell script that knows how to install [go](https://golang.org).  Fancy! :tada:\n\n## Installation & usage\n\nInstall from github:\n\n``` bash\n# assumes ~/bin exists and is in $PATH, so adjust accordingly!\n\ncurl -sL -o ~/bin/gimme https://raw.githubusercontent.com/travis-ci/gimme/master/gimme\nchmod +x ~/bin/gimme\n```\n\n[Homebrew](http://brew.sh) (OS X):\n\n```bash\nbrew install gimme\n```\n\n[Arch AUR](https://aur.archlinux.org/) (Arch Linux), substituting `yaourt` with\nhowever you prefer to install from AUR:\n\n``` bash\n# latest released version\nyaourt -S gimme\n\n# current git HEAD revision\nyaourt -S gimme-git\n```\n\nThen check the help text a la:\n\n``` bash\ngimme -h\n\n# or\n\ngimme --help\n\n# or\n\ngimme help\n\n# or\n\ngimme wat\n```\n\nTo install and use version 1.4, for example:\n``` bash\neval \"$(GIMME_GO_VERSION=1.4 gimme)\"\n\n# or:\n\neval \"$(gimme 1.4)\"\n\n# or if you can't stand the thought of using `eval`:\n\ngimme 1.4\nsource ~/.gimme/envs/go1.4.env\n```\n\nOr run without installing gimme:\n\n``` bash\neval \"$(curl -sL https://raw.githubusercontent.com/travis-ci/gimme/master/gimme | GIMME_GO_VERSION=1.4 bash)\"\n```\n\nTo install and use the current stable release of Go:\n\n``` bash\ngimme stable\n```\n\nTo install the previous minor release of Go:\n\n``` bash\ngimme oldstable\n```\n\nOr to install and use the development version (master branch) of Go:\n\n``` bash\ngimme master\n```\n\nTo list installed versions of Go:\n\n``` bash\ngimme -l\n\n# or\n\ngimme --list\n\n# or\n\ngimme list\n```\n\nTo force re-installation of an existing Go version:\n``` bash\ngimme --force 1.4.1\n\n# or\n\ngimme -f 1.4.1\n\n# or even\n\ngimme force 1.4.1\n```\n\nTo get the version of gimme:\n``` bash\ngimme -V\n\n# or\n\ngimme --version\n\n# or even\n\ngimme version\n```\n\n### `.travis.yml`\n\nThe original goal of this project was trivial cross-compilation within Travis.  The following is an example `.travis.yml` file to accomplish this for a normal Go project:\n\n```yaml\nlanguage: go\n\nenv:\n    - GIMME_OS=linux GIMME_ARCH=amd64\n    - GIMME_OS=darwin GIMME_ARCH=amd64\n    - GIMME_OS=windows GIMME_ARCH=amd64\n\ninstall:\n    - go get -d -v ./...\n\nscript:\n    - go build -v ./...\n```\n\n## Available Versions\n\n### Policy of Gimme\n\nGimme only supports downloading versions which the Go developers make\navailable.  If a version of Go is withdrawn, then Gimme has no logic\nto go look elsewhere for that version.  Thus as the Go Maintainers withdraw\nold releases, they'll stop being available for Gimme to fetch.\n\nBecause Gimme caches builds, a testing framework which preserves that cache\nmight still have older releases available, leading to sporadic failures.  The\nonly fix is to switch to only requesting currently available versions of Go.\n\nThe environment variable `$GIMME_DOWNLOAD_BASE` can be used to point Gimme\nat another location, so if you need to keep working with older Go releases,\nthen you can maintain your own software artifact mirror which preserves those\nversions and point Gimme at that instead.\n\n### Asking Gimme about Available Versions\n\nInvoke `gimme -k` or `gimme --known` to have Gimme report the versions which\ncan be installed; invoking `gimme stable` installs the version which the Go\nMaintainers have declared to be stable, and `gimme oldstable` installs the last\nstable release one minor version before the current stable. Both of these\ninvolve making network requests to retrieve this information, although the\n`--known` output is cached.  (Use `--force-known-update` to ignore the cache).\n\nThe `stable` request retrieves <https://golang.org/VERSION?m=text> and reports\nthat. The `oldstable` request does the same and downgrades it by one minor\nversion.\n\nThe `known` request retrieves <https://golang.org/dl> and parses the page to\nfind releases.  This is not the same as the location where the images are\nretrieved from, thus it's possible for `known` to know about more or fewer\nversions than are actually available.  We proceed on the basis that the\ndocumented releases are suitable and undocumented releases no longer are.\n\nThis `known` list also includes any versions locally known.\n\n### Asking Gimme what a version is\n\nGimme now supports the concept of `.x`, as a version suffix; eg, `1.10.x`\nmight be `1.10` before the release of `1.10.1` but become `1.10.1` once that's\navailable.\n\nTo make this easier, and reduce duplicate invocations, Gimme now supports a\n\"query\" which, instead of producing normal output, just prints the resolution\nof a version specifier.  This is the `--resolve` option.  It handles the `.x`\nsuffix, the `stable` string, and the `oldstable` string; all other inputs are\npassed through unchanged, although unknown names will be accompanied by an\nerror message and an exit code of 2.  A valid version identifier, even if not\ncurrently downloadable from upstream, will resolve successfully.  \"Can resolve\"\nis not \"exists\".\n\nThus given a list of versions to invoke against, tooling might do a first pass\nto use `--resolve` on each and de-duplicate, so that if an alias and a\nhard-coded version map to the same version, then only one invocation needs to\nhappen.\n\nGimme only supports `.x` at the end of a version specifier.  \nThe `--resolve` option must be given a version on the command-line afterwards,\nnot by any other means.  \nThe `--resolve` option and mechanism ignores any installed versions and relies\nsolely upon upstream-exposed lists of available versions and resolvable tags.  \nA git tag named ending `.x` will never be found.  \nUse of `.x` will not find release candidates, alphas, betas or other\nnon-release versions: it's only for finding the last stable release.  \nUse of `${GIMME_TYPE}` to override `auto` and prevent `git` will affect\n`--resolve` by inhibiting use of git tags as valid names.  This is a feature.\n\nNote that because Gimme supports version identifiers which are git tags,\n`--resolve` defaults to handling this too.  This means that `--resolve` can be\nheavy-weight: without the Go repo cloned, first the entire Go repo must be\ncloned.  We default to \"correct\".  To avoid this, export `GIMME_TYPE=binary`\nand disable the git resolution mechanism."
}
