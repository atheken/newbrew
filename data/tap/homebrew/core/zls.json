{
  "name": "zls",
  "full_name": "zls",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Language Server for Zig",
  "license": "MIT",
  "homepage": "https://github.com/zigtools/zls",
  "versions": {
    "stable": "0.10.0",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/zigtools/zls.git",
      "tag": "0.10.0",
      "revision": "7ef224467ab2f3179058981740e942977892e7b9",
      "checksum": null
    },
    "head": {
      "url": "https://github.com/zigtools/zls.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zls/blobs/sha256:57e41a00eacea3a15f363470b5a64f6da2a7002cd69692df83910cbeee3bbe0b",
          "sha256": "57e41a00eacea3a15f363470b5a64f6da2a7002cd69692df83910cbeee3bbe0b"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zls/blobs/sha256:7f7686c0ea862ad5ab3ae4431dafadf9a28951bb7854e7e7c02c359d63caf0dd",
          "sha256": "7f7686c0ea862ad5ab3ae4431dafadf9a28951bb7854e7e7c02c359d63caf0dd"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zls/blobs/sha256:c75a6b48d33d6b129b020c0e227f6df7107dcbbf9a296d74f52397d8b2234836",
          "sha256": "c75a6b48d33d6b129b020c0e227f6df7107dcbbf9a296d74f52397d8b2234836"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zls/blobs/sha256:ba4279657dc4293a8261202ba7553a3f72254556e7b32b0c49586090f0ccb9af",
          "sha256": "ba4279657dc4293a8261202ba7553a3f72254556e7b32b0c49586090f0ccb9af"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zls/blobs/sha256:035e8403b2a33986d35251e49a1db2e18f1892bd1a3f029e069e44179537d5ca",
          "sha256": "035e8403b2a33986d35251e49a1db2e18f1892bd1a3f029e069e44179537d5ca"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zls/blobs/sha256:8883d3da3be2111f3b1c569027d6454ac627891de95d3268303275f995473ff3",
          "sha256": "8883d3da3be2111f3b1c569027d6454ac627891de95d3268303275f995473ff3"
        },
        "x86_64_linux": {
          "cellar": "/home/linuxbrew/.linuxbrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/zls/blobs/sha256:96c162fc09934028b9d3e2f10703e1f2f23c4ce8c9737b5e62fc4b54805f075e",
          "sha256": "96c162fc09934028b9d3e2f10703e1f2f23c4ce8c9737b5e62fc4b54805f075e"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [
    "zig"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/zls.rb",
  "ruby_source_checksum": {
    "sha256": "40a5ea4f9572ba94f83fb1286239d70081957e3f1feedb93ab66d90338f1793b"
  },
  "date_added": "2023-02-23T16:20:52+00:00",
  "readme": "<img src=\"https://raw.githubusercontent.com/zigtools/install-zls/main/img/zls-opt.svg\" alt=\"Zig Language Server\" width=200>\n\n[![CI](https://github.com/zigtools/zls/workflows/CI/badge.svg)](https://github.com/zigtools/zls/actions)\n\n**Need support? Wanna help out? Join our [Discord server](https://discord.gg/5m5U3qpUhk)!**\n\nThe Zig Language Server (zls) is a tool that implements Microsoft's Language Server Protocol for Zig in Zig. In simpler terms: it'll provide you with completions, go-to definition, [etc.](#features) when you write Zig code!\n\n<!-- omit in toc -->\n## Table Of Contents\n\n- [Installation](#installation)\n  - [From Source](#from-source)\n    - [Build Options](#build-options)\n    - [Updating Data Files](#updating-data-files)\n  - [Configuration Options](#configuration-options)\n  - [Per-build Configuration Options](#per-build-configuration-options)\n    - [`BuildOption`](#buildoption)\n- [Features](#features)\n- [Using as a library](#using-as-a-library)\n- [Related Projects](#related-projects)\n- [Quick Thanks :)](#quick-thanks-)\n- [License](#license)\n\n## Installation\n\n<!-- omit in toc -->\n### [See the `install zls` tool](https://zigtools.github.io/install-zls/) for editor and binary installation instructions.\n\n### From Source\n\nBuilding `zls` is very easy. You will need [a build of Zig master](https://ziglang.org/download/) to build zls.\n\n```bash\ngit clone https://github.com/zigtools/zls\ncd zls\nzig build -Doptimize=ReleaseSafe\n```\n\n#### Build Options\n\n| Option | Type | Default Value | What it Does |\n| --- | --- | --- | --- |\n| `-Ddata_version` | `string` (like 0.7.1 or 0.9.0) | master | The data file version. This selects the files in the `src/data` folder that correspond to the Zig version being served.|\n\n### Configuration Options\n\nYou can configure zls by editing your `zls.json` configuration file.\nRunning `zls --show-config-path` will show a path to an already existing `zls.json` or a path to the local configuration folder instead.\n\nzls will look for a `zls.json` configuration file in multiple locations with the following priority:\n- In the local configuration folder of your OS (as provided by [known-folders](https://github.com/ziglibs/known-folders/blob/master/RESOURCES.md#folder-list))\n- In the global configuration folder of your OS (as provided by [known-folders](https://github.com/ziglibs/known-folders/blob/master/RESOURCES.md#folder-list))\n\nThe following options are currently available.\n\n<!-- DO NOT EDIT | THIS SECTION IS AUTO-GENERATED | DO NOT EDIT -->\n| Option | Type | Default value | What it Does |\n| --- | --- | --- | --- |\n| `enable_snippets` | `bool` | `true` | Enables snippet completions when the client also supports them |\n| `enable_argument_placeholders` | `bool` | `true` | Whether to enable function argument placeholder completions |\n| `enable_ast_check_diagnostics` | `bool` | `true` | Whether to enable ast-check diagnostics |\n| `enable_build_on_save` | `bool` | `false` | Whether to enable build-on-save diagnostics |\n| `enable_autofix` | `bool` | `true` | Whether to automatically fix errors on save. Currently supports adding and removing discards. |\n| `enable_import_embedfile_argument_completions` | `bool` | `true` | Whether to enable import/embedFile argument completions |\n| `semantic_tokens` | `enum` | `.full` | Set level of semantic tokens. Partial only includes information that requires semantic analysis. |\n| `enable_inlay_hints` | `bool` | `true` | Enables inlay hint support when the client also supports it |\n| `inlay_hints_show_builtin` | `bool` | `true` | Enable inlay hints for builtin functions |\n| `inlay_hints_exclude_single_argument` | `bool` | `true` | Don't show inlay hints for single argument calls |\n| `inlay_hints_hide_redundant_param_names` | `bool` | `false` | Hides inlay hints when parameter name matches the identifier (e.g. foo: foo) |\n| `inlay_hints_hide_redundant_param_names_last_token` | `bool` | `false` | Hides inlay hints when parameter name matches the last token of a parameter node (e.g. foo: bar.foo, foo: &foo) |\n| `operator_completions` | `bool` | `true` | Enables `*` and `?` operators in completion lists |\n| `warn_style` | `bool` | `false` | Enables warnings for style guideline mismatches |\n| `highlight_global_var_declarations` | `bool` | `false` | Whether to highlight global var declarations |\n| `dangerous_comptime_experiments_do_not_enable` | `bool` | `false` | Whether to use the comptime interpreter |\n| `include_at_in_builtins` | `bool` | `false` | Whether the @ sign should be part of the completion of builtins |\n| `skip_std_references` | `bool` | `false` | When true, skips searching for references in std. Improves lookup speed for functions in user's code. Renaming and go-to-definition will continue to work as is |\n| `max_detail_length` | `usize` | `1048576` | The detail field of completions is truncated to be no longer than this (in bytes) |\n| `prefer_ast_check_as_child_process` | `bool` | `true` | Can be used in conjuction with `enable_ast_check_diagnostics` to favor using `zig ast-check` instead of ZLS's fork |\n| `record_session` | `bool` | `false` | When true, zls will record all request is receives and write in into `record_session_path`, so that they can replayed with `zls replay` |\n| `record_session_path` | `?[]const u8` | `null` | Output file path when `record_session` is set. The recommended file extension *.zlsreplay |\n| `replay_session_path` | `?[]const u8` | `null` | Used when calling `zls replay` for specifying the replay file. If no extra argument is given `record_session_path` is used as the default path. |\n| `builtin_path` | `?[]const u8` | `null` | Path to 'builtin;' useful for debugging, automatically set if let null |\n| `zig_lib_path` | `?[]const u8` | `null` | Zig library path, e.g. `/path/to/zig/lib/zig`, used to analyze std library imports |\n| `zig_exe_path` | `?[]const u8` | `null` | Zig executable path, e.g. `/path/to/zig/zig`, used to run the custom build runner. If `null`, zig is looked up in `PATH`. Will be used to infer the zig standard library path if none is provided |\n| `build_runner_path` | `?[]const u8` | `null` | Path to the `build_runner.zig` file provided by zls. null is equivalent to `${executable_directory}/build_runner.zig` |\n| `global_cache_path` | `?[]const u8` | `null` | Path to a directory that will be used as zig's cache. null is equivalent to `${KnownFolders.Cache}/zls` |\n| `build_runner_global_cache_path` | `?[]const u8` | `null` | Path to a directory that will be used as the global cache path when executing a projects build.zig. null is equivalent to the path shown by `zig env` |\n<!-- DO NOT EDIT -->\n\n### Per-build Configuration Options\n\nThe following options can be set on a per-project basis by placing `zls.build.json` in the project root directory next to `build.zig`.\n\n| Option | Type | Default value | What it Does |\n| --- | --- | --- | --- |\n| `relative_builtin_path` | `?[]const u8` | `null` | If present, this path is used to resolve `@import(\"builtin\")` |\n| `build_options` | `?[]BuildOption` | `null` | If present, this contains a list of user options to pass to the build. This is useful when options are used to conditionally add packages in `build.zig`. |\n\n#### `BuildOption`\n\n`BuildOption` is defined as follows:\n\n```zig\nconst BuildOption = struct {\n    name: []const u8,\n    value: ?[]const u8 = null,\n};\n```\n\nWhen `value` is present, the option will be passed the same as in `zig build -Dname=value`. When `value` is `null`, the option will be passed as a flag instead as in `zig build -Dflag`.\n\n## Features\n\n`zls` supports most language features, including simple type function support, using namespace, payload capture type resolution, custom packages, cImport and others. Support for comptime and semantic analysis is Work-in-Progress.\n\nThe following LSP features are supported:\n- Completions\n- Hover\n- Goto definition/declaration\n- Document symbols\n- Find references\n- Rename symbol\n- Formatting using `zig fmt`\n- Semantic token highlighting\n- Inlay hints\n- Code actions\n- Selection ranges\n- Folding regions\n\n## Using as a library\n\nYou can use zls as a library! [Check out this demo repo](https://github.com/zigtools/zls-as-lib-demo) for a good reference.\n\n## Related Projects\n\n- [`sublime-zig-language` by @prime31](https://github.com/prime31/sublime-zig-language)\n  - Supports basic language features\n  - Uses data provided by `src/data` to perform builtin autocompletion\n- [`zig-lsp` by @xackus](https://github.com/xackus/zig-lsp)\n  - Inspiration for `zls`\n- [`known-folders` by @ziglibs](https://github.com/ziglibs/known-folders)\n  - Provides API to access known folders on Linux, Windows and Mac OS\n- [`zls` by @zigtools](https://github.com/zigtools/zls)\n  - Used by many zls developers to more efficiently work on zls\n\n## Quick Thanks :)\n\nWe'd like to take a second to thank all our awesome [contributors](https://github.com/zigtools/zls/graphs/contributors) and donators/backers/sponsors; if you have time or money to spare, consider partaking in either of these options - they help keep zls awesome for everyone!\n\n[![OpenCollective Backers](https://opencollective.com/zigtools/backers.svg?width=890&limit=1000)](https://opencollective.com/zigtools#category-CONTRIBUTE)\n\n## License\n\nMIT"
}
