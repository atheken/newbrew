{
  "name": "zet",
  "full_name": "zet",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "CLI utility to find the union, intersection, and set difference of files",
  "license": "Apache-2.0 or MIT",
  "homepage": "https://github.com/yarrow/zet",
  "versions": {
    "stable": "1.0.0",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/yarrow/zet/archive/refs/tags/v1.0.0.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "792a1a1de73bf4145ccaa71f8e6bb34b62e690270a432c4de4d8639e1a741b5b"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zet/blobs/sha256:a977d485854acff1b6b576819a3b9686da637c5bf575354bb018cb714df729ad",
          "sha256": "a977d485854acff1b6b576819a3b9686da637c5bf575354bb018cb714df729ad"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zet/blobs/sha256:8eeb54767d8aa63e78d9edc5e89206bdd834deec2493646206f8c443e0a1b125",
          "sha256": "8eeb54767d8aa63e78d9edc5e89206bdd834deec2493646206f8c443e0a1b125"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zet/blobs/sha256:a5819d888c2a9660cde2099fd573f14fb0ac22d285c7ee0b02a9a7b64b5cbd5d",
          "sha256": "a5819d888c2a9660cde2099fd573f14fb0ac22d285c7ee0b02a9a7b64b5cbd5d"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zet/blobs/sha256:872a4d30a206f9005d0499433381274d42845e6d0d59d7f7a5011523f1b05be4",
          "sha256": "872a4d30a206f9005d0499433381274d42845e6d0d59d7f7a5011523f1b05be4"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zet/blobs/sha256:a7f6ad7f96700aed729f8cd4ff4dec39d5fec30d8339cce3c6593a623c87db96",
          "sha256": "a7f6ad7f96700aed729f8cd4ff4dec39d5fec30d8339cce3c6593a623c87db96"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zet/blobs/sha256:db4fbf1c9b0f2d3353b5f7c871c53af25d20b3f9e5f801349fa37ad2f5ad1c39",
          "sha256": "db4fbf1c9b0f2d3353b5f7c871c53af25d20b3f9e5f801349fa37ad2f5ad1c39"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/zet/blobs/sha256:4330a52a92ce81dfc0e26bbeacfd8141e176c09e9a9dd05905d5e84c277197e5",
          "sha256": "4330a52a92ce81dfc0e26bbeacfd8141e176c09e9a9dd05905d5e84c277197e5"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/zet.rb",
  "ruby_source_checksum": {
    "sha256": "cd838e91a0deed8010477af65cc86fd9e3ca1f99d42d9e089eaafa8c901d5bdb"
  },
  "date_added": "2021-07-17T23:09:35+00:00",
  "readme": "zet: Take the union, intersection, difference, etc of files — compare to `uniq` and `comm`.\n===========================================================================================\n\n`zet` is a command-line utility for doing set operations on files considered as\nsets of lines. For instance, `zet union x y z` outputs the lines that occur in\nany of `x`, `y`, or `z`, `zet intersect x y z` those that occur in all of them, and `zet diff x y z` those that occur in `x` but not in `y` or `z`. `zet` always removes duplicate lines, printing each output line only once, and prints lines in the order of their first appearance in its input. \n\n[![Build status](https://github.com/yarrow/zet/actions/workflows/ci.yml/badge.svg)](https://github.com/yarrow/zet/actions)\n[![Crates.io](https://img.shields.io/crates/v/zet.svg)](https://crates.io/crates/zet)\n\nHere are the subcommands of `zet` and what they do:\n\n* `zet union x y z` outputs the lines that occur in any of `x`, `y`, or `z`.\n* `zet intersect x y z` outputs the lines that occur in all of `x`, `y`, and `z`.\n* `zet diff x y z` outputs the lines that occur in `x` but not in `y` or `z`.\n* `zet single x y z` outputs the lines that occur exactly once in the entire input.\n* `zet single --file x y z` outputs the lines that occur in exactly one of `x`,\n  `y`, or `z`. (Output would include, say, a line that occurs, say, twice in `y`\n  but not in `x` or `z`) \n* `zet multiple x y z` outputs the lines that occur more than once in the entire input.\n* `zet multiple --files x y z` outputs the lines that occur in two or more of `x`, `y`,\n  and `z` (but not a line that occurs twice in `y` but not in `x` or `z`).\n\nThe `--count-lines` flag makes `zet` show the number of times each line occurs in the input.\nThe `--count-files` flag shows the number of files each line occurs in.\nThe `-c` or `--count` flags act like `--count-lines`, unless `--files` is in effect, in which case they act like `--count-files`. The `--count-none` flag turns off counting, and can be used to override the other count flags. (In the usual POSIX convention, the last count flag given will override any previous count flag.)\n\n## Example\n\nSuppose you maintain three mailing lists on a site that lets you download membership lists as CSV files, and add new members by uploading a CSV file in the same format. You have three lists, `a`, `b`, and `c` that people have joined, and you want to create two new lists: `everyone`, whose membership should be those who have joined any of `a`, `b`, and `c`; and `big-fans`, whose membership should those who have signed up for all three of `a`, `b`, and `c`.\n\nYou've downloaded the membership lists `a`, `b`, and `c` to `a.csv`, `b.csv`, and `c.csv`. To create the membership list for `everyone` and `big-fans`, you can use `zet`:\n\n```console\n$ zet union a.csv b.csv c.csv > everyone.csv\n$ zet intersect a.csv b.csv c.csv > big-fans.csv\n```\n\nAlas, by the time you create `everyone` and `big-fans`, new people have joined the `a`, `b`, and `c` lists. So you download the current membership of those lists to `a-now.csv`, `b-now.csv`, and `c-now.csv`.  You create `delta-everyone.csv` and `delta-big-fans.csv`, containing the membership records of people who should be added to the `everyone` list and `big-fan` list respectively:\n\n```console\n$ zet union a-now.csv b-now.csv c-now.csv | zet diff - everyone.csv > delta-everyone.csv\n$ zet intersect a-now.csv b-now.csv c-now.csv | zet diff - big-fans.csv > delta-big-fans.csv\n```\n\n## Comparisons to other commands\nSome `zet` subcommands are similar to traditional Unix commands:\n\n  Zet           | Traditional\n  ---           | -----------\n  zet union     | uniq\n  zet intersect | comm -12\n  zet diff      | comm -23\n  zet single    | uniq -u\n  zet multiple  | uniq -d\n\nDifferences:\n* `zet`'s input need not be sorted, and it outputs lines in the order of their\n  first appearance in the input. It can take multiple input files (rather than\n  just one (like `uniq`) or two (like `comm`).\n* Unlike `comm`, `zet` always removes duplicate lines — so `zet diff a b` is\n  more similar to `comm -23 a b | uniq` than to `comm -23 a b` alone.\n* `zet` has no `-i` or `-ignore-case` option, unlike `uniq` and `comm`.For\n  large files, `zet` is about 4.5 times faster than `uniq` and 10 times faster\n  than `comm` (see [benchmark details](doc/zet-vs-other-commands.md)). But\n  `zet` takes much more memory than `uniq` or `comm`: `zet` reads its first\n  file argument into memory, and (for `union`, `single`, and `multiple`)\n  allocates additional space for each line encountered that wasn't in the first\n  file. In contrast `uniq` and `comm` take an essentially fixed amount of\n  space, no matter how large the input, since they depend on the input(s) being\n  sorted. So `zet` is faster until it runs into a memory limit, at which point\n  it stops working.\n\nThe [`huniq`](https://crates.io/crates/huniq) command is slightly faster than\n`zet union` and takes less memory, because it keeps only a hash of each line in\nmemory rather than the whole line. (In theory, `huniq` might fail to output a\nline whose hash is the same as another, different, line). But `zet union\n--count` is slightly faster than `huniq -c`, because `huniq -c` sorts its input\nin order to count lines.\n\n## Notes\n\n* As stated above, each output line occurs only once, and the lines are output\n  in the same order as they are encountered.\n* When no file path is given on the command line, zet reads from standard\n  input.\n* When a file argument is `-`, `zet` reads from standard input rather than the\n  file named `-`. (That file can be passed to zet as `./-`)\n* Zet translates UTF-16LE and UTF-16BE files to UTF-8, and ignores Byte Order\n  Marks (BOMs) when comparing lines. It prepends a BOM to its output if and\n  only if its first file argument begins with a BOM.\n* Zet ignores all lines endings (`\\r\\n` or `\\n`) when comparing lines, so two\n  input lines compare the same if their only difference is that one ends in\n  `\\r\\n` and the other in `\\r`. Zet ends each output line with `\\r\\n` if the\n  first line of its first file argument ends in `\\r\\n`, and `\\n` otherwise (if\n  the first line ends in `\\n` or the first file has only one line and that line\n  has no line terminator.)\n* Zet reads its entire first input file into memory. Its memory usage is\n  closely proportional to the size of its first input (`zet intersect` and `zet\n  diff`) or the larger of the size of its first input and the size of its\n  output (`zet union`, `zet single`, and `zet multiple`).\n\n## License\n\nLicensed under either of\n\n * Apache License, Version 2.0\n   ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n * MIT license\n   ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)\n\nat your option.\n\n## Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be\ndual licensed as above, without any additional terms or conditions."
}
