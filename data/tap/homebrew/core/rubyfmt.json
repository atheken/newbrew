{
  "name": "rubyfmt",
  "full_name": "rubyfmt",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Ruby autoformatter",
  "license": "MIT",
  "homepage": "https://github.com/fables-tales/rubyfmt",
  "versions": {
    "stable": "0.8.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/fables-tales/rubyfmt.git",
      "tag": "v0.8.1",
      "revision": "266b47b4666106e579626b1823100ccedf5cbbc3",
      "checksum": null
    },
    "head": {
      "url": "https://github.com/fables-tales/rubyfmt.git",
      "branch": "trunk"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rubyfmt/blobs/sha256:ffe2557b460a78c161959cc03999ad288d33ade3e4f73f412fd24b2f465b7601",
          "sha256": "ffe2557b460a78c161959cc03999ad288d33ade3e4f73f412fd24b2f465b7601"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rubyfmt/blobs/sha256:0dfe25a13c4da055ae4ff958e30e308df845672985bf5b22ff659304716f556f",
          "sha256": "0dfe25a13c4da055ae4ff958e30e308df845672985bf5b22ff659304716f556f"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rubyfmt/blobs/sha256:09a2ee947086e1b2b8bd58c077a23279e13439ec1e5ba915ebaaf78bb1368da7",
          "sha256": "09a2ee947086e1b2b8bd58c077a23279e13439ec1e5ba915ebaaf78bb1368da7"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rubyfmt/blobs/sha256:e3c7a4b275561ff64c5df8c0bd1c829f8366ed9d943e45c75e8c716ea2a77bd9",
          "sha256": "e3c7a4b275561ff64c5df8c0bd1c829f8366ed9d943e45c75e8c716ea2a77bd9"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rubyfmt/blobs/sha256:4cc3b3a8c815a97fb043ddccbd6af3686dee3abfa863b64f7cc8f89c1c772aed",
          "sha256": "4cc3b3a8c815a97fb043ddccbd6af3686dee3abfa863b64f7cc8f89c1c772aed"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rubyfmt/blobs/sha256:cb93fe3e235c3b4e177e7287e1a0aef59f547ff2100f28ee62ae51534e6c0260",
          "sha256": "cb93fe3e235c3b4e177e7287e1a0aef59f547ff2100f28ee62ae51534e6c0260"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "autoconf",
    "automake",
    "bison",
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "ruby"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/rubyfmt.rb",
  "ruby_source_checksum": {
    "sha256": "7d4fc235daebd31f524e565b02a1efec8b5109fe289acd5d5abc3b3edd6cc762"
  },
  "date_added": "2020-02-04T14:44:39-05:00",
  "readme": "# How do I pronounce `rubyfmt`\n* en: Ruby format\n* jp: ルビーフォーマット\n\n## How do I use it\n\n\n### Install from `brew`\n\nOn Mac and Linux, `rubyfmt` can be installed with [Homebrew](https://brew.sh/):\n\n```bash\nbrew install rubyfmt\n```\n\n### Build from source\n\n1. Make sure you've got cargo installed\n2. Run `make all`\n3. Copy target/release/rubyfmt-main to somewhere on your path as `rubyfmt`\n\nRubyfmt supports the following CLI invocations:\n\n* `<whatever> | rubyfmt` pipe from standard in\n* `rubyfmt -i -- files or directories` to format files and directories in place\n* `rubyfmt -- files or directories` output rubyfmtted code to STDOUT.\n* `rubyfmt -c -- files or directories` output a diff of input and rubyformatted input.\n* `rubyfmt --header-opt-in -- files or directories` to format files only with a `# rubyfmt: true` comment at the top of the file\n* `rubyfmt --header-opt-out -- files or directories` to skip formatting files with a `# rubyfmt: false` comment at the top of the file\n\n`rubyfmt` also supports ignoring files with a `.rubyfmtignore` file when present in the root of the working directory.\n`.rubyfmtignore` uses the same syntax as `.gitignore`, so you can choose to ignore whole directories or use globs as needed.\nBy default, `rubyfmt` also ignores files in `.gitignore` during file traversal, but you can force these files to be formatted by using the `--include-gitignored` flag.\n\n## Editor Support\n\n### Vim\n\nWe aren't currently tested with any vim plugin managers, however, adding the\nplugin from a git clone is fairly easy:\n\n* Run `cargo build --release`\n* Add `source /path/to/rubyfmt.vim` to your `~/.vimrc` (e.g. [my dotfiles](https://github.com/penelopezone/dotfiles/commit/2c0e9c1215de368e64e063021e9523aa349c5454#diff-2152fa38b4d8bb10c75d6339a959650dR253) please note, this line is commented)\n* Add `let g:rubyfmt_path = /path/to/target/release/rubyfmt-main` beneath the source line\n\n### Neovim + LSP + null-ls\n\nIf you use the popular [null-ls](https://github.com/jose-elias-alvarez/null-ls.nvim) LSP plugin to manage formatters, it supports `rubyfmt` out of the box. You can add the formatter to your existing `setup()` configuration:\n\n```diff\nlocal null_ls = require(\"null-ls\")\n\nnull_ls.setup({\n  sources = {\n+   null_ls.builtins.formatting.rubyfmt,\n  },\n})\n```\n\nRead more in the [null-ls documentation](https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/doc/BUILTINS.md#rubyfmt).\n\n### Visual Studio Code\n\nRubyfmt is a supported formatter in the popular\n[vscode ruby extension](https://marketplace.visualstudio.com/items?itemName=rebornix.Ruby).\nYou should copy `rubyfmt-main` to be called `rubyfmt` on your PATH .\nOnce installed, add the following to vscode's `settings.json` file:\n\n``` json\n  \"ruby.useLanguageServer\": true,\n  \"ruby.format\": \"rubyfmt\",\n  \"[ruby]\": {\n      \"editor.formatOnSave\": true\n  },\n```\n\n### RubyMine (and similar Jetbrains family IDE)\n\n[Install](https://www.jetbrains.com/help/ruby/settings-tools-file-watchers.html) the File Watchers plugin and go to `File | Settings | Tools | File Watchers`. Now import `watchers.xml` from `editor_plugins/rubymine/`. Optionally set `Level` to `Global` to have it available across all projects.\n\nSee [this reference](https://www.jetbrains.com/help/ruby/using-file-watchers.html#ws_filewatcher_type_and_location_of_input_files) on using file watchers to learn more.\n\n### Sublime Text\n\nInstall the [rubyfmt plugin](https://github.com/toreriklinnerud/sublime-rubyfmt/) from [Package Control](https://packagecontrol.io): Install Package -> rubyfmt.\n\nRuby files are formatted on save or by pressing `Alt + ;` or on macOS: `Cmd + ;`. `rubyfmt` is assumed to be on path.\n\nOverridable default settings:\n ``` json\n {\n   \"ruby_executable\": \"ruby\",\n   \"rubyfmt_executable\": \"rubyfmt\",\n   \"format_on_save\": true,\n }\n ```\n\n ### Atom\n\nInstall the [rubyfmt package](https://github.com/toreriklinnerud/atom-rubyfmt/) from Settings > Packages.\n\nRuby files are formatted on save or by pressing `Alt + ;` or on macOS: `Cmd + ;` `rubyfmt` is assumed to be on path. See the package settings for more options.\n\n## Contributing\n\nPlease checkout [our contributing guide](./CONTRIBUTING.md)"
}
