{
  "name": "cbindgen",
  "full_name": "cbindgen",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Project for generating C bindings from Rust code",
  "license": "MPL-2.0",
  "homepage": "https://github.com/mozilla/cbindgen",
  "versions": {
    "stable": "0.24.6",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/mozilla/cbindgen/archive/refs/tags/v0.24.6.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "af0591e687128f7fb4300b0fe24c6091f24593d3a8acadf4fe860bd82c20c4c5"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cbindgen/blobs/sha256:7b1338c2d9993ef251a5f4bef30e84faffd829b5e6f3356a913aa1925b920bc7",
          "sha256": "7b1338c2d9993ef251a5f4bef30e84faffd829b5e6f3356a913aa1925b920bc7"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cbindgen/blobs/sha256:719d92a84950014bec92d2ff31617080ddc6d7fd7af3b9ebb00cb32c85d6d4c5",
          "sha256": "719d92a84950014bec92d2ff31617080ddc6d7fd7af3b9ebb00cb32c85d6d4c5"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cbindgen/blobs/sha256:293f958b49e0707ef8908b0eb97181c426fe619e6440c399c188116e98a11337",
          "sha256": "293f958b49e0707ef8908b0eb97181c426fe619e6440c399c188116e98a11337"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cbindgen/blobs/sha256:d959fe4eeeecaa1c9f6c040b4fee08d40744404eafc83d495138bd931cd096d3",
          "sha256": "d959fe4eeeecaa1c9f6c040b4fee08d40744404eafc83d495138bd931cd096d3"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cbindgen/blobs/sha256:9a5db4574eea9fde760d8a7b3a3f06258ef1b1e944abc92ed0fccd1262535127",
          "sha256": "9a5db4574eea9fde760d8a7b3a3f06258ef1b1e944abc92ed0fccd1262535127"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cbindgen/blobs/sha256:9c555fc199fbb8a56ce5dc00d75ef2a54d399e6b2f69a1ae577a13dffd73f92d",
          "sha256": "9c555fc199fbb8a56ce5dc00d75ef2a54d399e6b2f69a1ae577a13dffd73f92d"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/cbindgen/blobs/sha256:a2256beab40556351f3ffb921ce8a8b53cfedd2dfcb4f83750ef1f8343ea8366",
          "sha256": "a2256beab40556351f3ffb921ce8a8b53cfedd2dfcb4f83750ef1f8343ea8366"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/cbindgen.rb",
  "ruby_source_checksum": {
    "sha256": "e02f988462339bf04023ac85650eea0f703152c78e574dcc2f7e24655a568462"
  },
  "date_added": "2022-10-10T16:24:58+00:00",
  "readme": "# `cbindgen` &emsp; [![Build Status]][actions] [![Latest Version]][crates.io] [![Api Rustdoc]][rustdoc] [![Rust](https://img.shields.io/badge/rust-1.57%2B-blue.svg?maxAge=3600)](https://github.com/eqrion/cbindgen)\n\n[Build Status]: https://github.com/eqrion/cbindgen/workflows/cbindgen/badge.svg\n[actions]: https://github.com/eqrion/cbindgen/actions\n[Latest Version]: https://img.shields.io/crates/v/cbindgen.svg\n[crates.io]: https://crates.io/crates/cbindgen\n[Api Rustdoc]: https://img.shields.io/badge/api-rustdoc-blue.svg\n[rustdoc]: https://docs.rs/cbindgen\n\n[Read the full user docs here!](docs.md)\n\ncbindgen creates C/C++11 headers for Rust libraries which expose a public C API.\n\nWhile you could do this by hand, it's not a particularly good use of your time.\nIt's also much more likely to be error-prone than machine-generated headers that\nare based on your actual Rust code. The cbindgen developers have also worked\nclosely with the developers of Rust to ensure that the headers we generate\nreflect actual guarantees about Rust's type layout and ABI.\n\nC++ headers are nice because we can use operator overloads, constructors, enum\nclasses, and templates to make the API more ergonomic and Rust-like. C headers\nare nice because you can be more confident that whoever you're interoperating\nwith can handle them. With cbindgen *you don't need to choose*! You can just\ntell it to emit both from the same Rust library.\n\nThere are two ways to use cbindgen: as a standalone program, or as a library\n(presumably in your build.rs). There isn't really much practical difference,\nbecause cbindgen is a simple rust library with no interesting dependencies.\n\nUsing it as a program means people building your software will need it\ninstalled. Using it in your library means people may have to build cbindgen more\nfrequently (e.g. every time they update their rust compiler).\n\nIt's worth noting that the development of cbindgen has been largely adhoc, as\nfeatures have been added to support the usecases of the maintainers. This means\ncbindgen may randomly fail to support some particular situation simply because\nno one has put in the effort to handle it yet. [Please file an issue if you run\ninto such a situation](https://github.com/eqrion/cbindgen/issues/new). Although\nsince we all have other jobs, you might need to do the implementation work too\n:)\n\n# Quick Start\n\nTo install cbindgen, you just need to run\n\n```text\ncargo install --force cbindgen\n```\n\n(--force just makes it update to the latest cbindgen if it's already installed)\n\nOr with Homebrew, run\n\n```text\nbrew install cbindgen\n```\n\nTo use cbindgen you need two things:\n\n* A configuration (cbindgen.toml, which can be empty to start)\n* A Rust crate with a public C API\n\nThen all you need to do is run it:\n\n```text\ncbindgen --config cbindgen.toml --crate my_rust_library --output my_header.h\n```\n\nThis produces a header file for C++.  For C, add the `--lang c` switch.\n\nSee `cbindgen --help` for more options.\n\n[Read the full user docs here!](docs.md)\n\n[Get a template cbindgen.toml here.](template.toml)\n\n# Examples\n\nWe don't currently have a nice tailored example application, but [the\ntests](tests/rust/) contain plenty of interesting examples of our features.\n\nYou may also find it interesting to browse the projects that are using cbindgen\nin production:\n\n* [milksnake](https://github.com/getsentry/milksnake)\n* [webrender](https://searchfox.org/mozilla-central/source/gfx/webrender_bindings) ([generated header](https://searchfox.org/mozilla-central/source/__GENERATED__/gfx/webrender_bindings/webrender_ffi_generated.h))\n* [stylo](https://searchfox.org/mozilla-central/source/layout/style) ([generated header](https://searchfox.org/mozilla-central/source/__GENERATED__/layout/style/ServoStyleConsts.h))\n* [maturin](https://github.com/PyO3/maturin)\n\nIf you're using `cbindgen` and would like to be added to this list, please open\na pull request!\n\n# Releases\n\ncbindgen doesn't have a fixed release calendar, please file an issue requesting\na release if there's something fixed in trunk that you need released. Ping\n`@emilio` for increased effect."
}
