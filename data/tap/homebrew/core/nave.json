{
  "name": "nave",
  "full_name": "nave",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Virtual environments for Node.js",
  "license": "ISC",
  "homepage": "https://github.com/isaacs/nave",
  "versions": {
    "stable": "3.5.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/isaacs/nave/archive/v3.5.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "a3d84ce87980fd8d1d98876bfc82b1c85eb22f6fab4ef971a81a1e36028da76a"
    },
    "head": {
      "url": "https://github.com/isaacs/nave.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/nave/blobs/sha256:2c6dac4fcbb6d1b0c9e0f2046ca1a2dda7b79f76258c94e240ed328ea0b5226d",
          "sha256": "2c6dac4fcbb6d1b0c9e0f2046ca1a2dda7b79f76258c94e240ed328ea0b5226d"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/nave/blobs/sha256:2c6dac4fcbb6d1b0c9e0f2046ca1a2dda7b79f76258c94e240ed328ea0b5226d",
          "sha256": "2c6dac4fcbb6d1b0c9e0f2046ca1a2dda7b79f76258c94e240ed328ea0b5226d"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/nave/blobs/sha256:2c6dac4fcbb6d1b0c9e0f2046ca1a2dda7b79f76258c94e240ed328ea0b5226d",
          "sha256": "2c6dac4fcbb6d1b0c9e0f2046ca1a2dda7b79f76258c94e240ed328ea0b5226d"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/nave/blobs/sha256:2f9651e421727a2314a952f1ffe678b308205abfed8144ac56b4178244a9c4b4",
          "sha256": "2f9651e421727a2314a952f1ffe678b308205abfed8144ac56b4178244a9c4b4"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/nave/blobs/sha256:2f9651e421727a2314a952f1ffe678b308205abfed8144ac56b4178244a9c4b4",
          "sha256": "2f9651e421727a2314a952f1ffe678b308205abfed8144ac56b4178244a9c4b4"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/nave/blobs/sha256:2f9651e421727a2314a952f1ffe678b308205abfed8144ac56b4178244a9c4b4",
          "sha256": "2f9651e421727a2314a952f1ffe678b308205abfed8144ac56b4178244a9c4b4"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/nave/blobs/sha256:2c6dac4fcbb6d1b0c9e0f2046ca1a2dda7b79f76258c94e240ed328ea0b5226d",
          "sha256": "2c6dac4fcbb6d1b0c9e0f2046ca1a2dda7b79f76258c94e240ed328ea0b5226d"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/nave.rb",
  "ruby_source_checksum": {
    "sha256": "278ad8b6be327af5750e6bfca9102ac8970830742c2d012d4b7fe1f4c564cadc"
  },
  "date_added": "2015-01-05T18:42:51+00:00",
  "readme": "# nave\n\nVirtual Environments for Node.\n\nSwitch out your node version and global npm install space in one\ncommand.  Supports named environments. Uses subshells by default so\nthat you can `^D` or `exit` out of an environment quickly.\n\nNo need to edit `.bashrc` or `.profile`, just install and go.\n\n## Installation\n\nIf you want a global `nave` command, you could install this thing with\nnpm.  But that's not really necessary.  You can run the `nave.sh`\nshell script from here, or symlink it wherever you want, or even\njust download the script and just put it where you want it.\n\n```\ncurl https://raw.githubusercontent.com/isaacs/nave/main/nave.sh > /usr/local/bin/nave\nchmod 0755 /usr/local/bin/nave\n```\n\n### with [npm](http://npm.im)\n\nIf you have npm, presumably you already have Node, so it's a tiny bit\nsilly, but maybe you like installing the top-level Node some other\nway, and install your subshell version switcher with npm.  Why is a\nbash program in npm anyway?  It's fine.  Bits don't judge.\n\n```\nnpm install -g nave\n```\n\n## Usage\n\nTo use a version of node, you do this:\n\n```\nnave use <some version>\n```\n\nIf you want to name a virtual env, you can do this:\n\n```\nnave use <some name>\n```\n\nIf that virtual env doesn't already exist, it'll prompt you to choose\na version.\n\nBoth of these commands drop you into a subshell.  Exit the shell with\n`exit` or `^D` to go back from whence you came.\n\nHere's the full usage statement:\n\n```\nUsage: nave <cmd>\n\nCOMMANDS\n\n  install <version>     Install the version specified (ex: 12.8.0)\n  install <name> <ver>  Install the version as a named env\n  use <version>         Enter a subshell where <version> is being used\n  use <ver> <program>   Enter a subshell, and run \"<program>\", then exit\n  use <name> <ver>      Create a named env, using the specified version.\n                        If the name already exists, but the version differs,\n                        then it will update the link.\n  usemain <version>     Install in /usr/local/bin (ie, use as your main nodejs)\n  clean <version>       Delete the source code for <version>\n  uninstall <version>   Delete the install for <version>\n  ls                    List versions currently installed\n  ls-remote             List remote node versions\n  ls-all                List remote and local node versions\n  latest                Show the most recent dist version\n  cache                 Clear or view the cache\n  help                  Output help information\n  auto                  Find a .naverc and then be in that env\n                        If no .naverc is found, then alias for 'nave exit'\n  auto <dir>            cd into <dir>, then find a .naverc, and be in that env\n                        If no .naverc is found, then alias for 'nave exit' in\n                        the specified directory.\n  auto <dir> <cmd>      cd into <dir>, then find a .naverc, and run a command\n                        in that env\n                        If no .naverc is found, then alias for 'nave exit <cmd>'\n                        in the specified directory.\n  should-auto           Exits with 1 if the nave auto env already\n                        matches the config, or 0 if a change should\n                        be made (ie, by calling 'nave auto')\n                        An explicit call to 'nave use' or 'nave exit' will\n                        tell nave that it should NOT auto.\n  get <variable>        Print out various nave config values.\n  exit                  Unset all the NAVE environs (use with 'exec')\n  exit <cmd>            Run the specified command in a nave-free environment\n                        (Note that nave will still set NAVE_EXIT=1 in order to\n                        prevent 'nave should-auto' from evaluating true.)\n\nVERSION STRINGS\n\n  Any command that calls for a version can be provided any of the\n  following \"version-ish\" identifies:\n\n  - x.y.z       A specific SemVer tuple\n  - x.y         Major and minor version number\n  - x           Just a major version number\n  - lts         The most recent LTS (long-term support) node version\n  - lts/<name>  The latest in a named LTS set. (argon, boron, etc.)\n  - lts/*       Same as just \"lts\"\n  - latest      The most recent (non-LTS) version\n  - stable      Backwards-compatible alias for \"lts\".\n\n  To exit a nave subshell, type 'exit' or press ^D.\n  To run nave *without* a subshell, do 'exec nave use <version>'.\n  To clear the settings from a nave env, use 'exec nave exit'\n\nENVIRONMENT VARIABLES\n\n  The following environment variables can be set to change nave's behavior.\n\n  NAVE_DIR        Root directory for nave to operate in.  Defaults to\n                  $XDG_CONFIG_HOME/nave if set (eg, ~/.config/nave), or\n                  ~/.nave otherwise.\n  NAVE_NPX        Set this to '1' to add node_modules/.bin to the PATH\n  NAVE_DEBUG      Set this to '1' to run in debug mode.\n  NAVE_CACHE_DUR  Duration in seconds to cache version information (86400)\n  NAVEUA          User-agent header to send when fetching version information\n  NAVE_SRC_ONLY   Set to '1' to *only* build node from source, and never use\n                  binary distributions.  (This is much slower!)\n  NAVE_JOBS       Set to the number of JOBS to use when building node.\n                  Defaults to the number of CPUs on the system.\n  NODEDIST        The distribution server to fetch node from.  Defaults to\n                  https://nodejs.org/dist\n  NAVE_CONFIG     Arguments to pass to ./configure when building from source.\n\n  Nave sets the following environment variables when in use:\n\n  NAVE            A descriptive string of the nave setting in use.\n  NAVENAME        The name, in named subshells, otherwise $NAVEVERSION\n  NAVEVERSION     The version of node in use.\n  NAVELVL         The number of subshells currently in use (like bash $SHLVL)\n  NAVE_LOGIN      '1' in interactive nave subshells, '0' otherwise.\n  NAVE_ROOT       Location of nave installed environments\n  NAVE_SRC        Location of downloaded Node.js source\n  NAVE_AUTO_RC    The .naverc file used by 'nave auto'\n  NAVE_AUTO_CFG   The contents of the .naverc file used by 'nave auto'\n\nCONFIGURATION FILES\n\n  Nave subshells will source the same .bashrc, .bash_profile, .zprofile, etc.\n  configuration files as normal shells, based on whether it is being run as a\n  login shell, or to run a specific command.\n\n  In addition, the following files are sourced in all nave subshells if found,\n  after the normal shell profile files, in the following order, based on the\n  resulting environment variables described above. When run in a subdirectory,\n  nave will walk up the directory tree looking for any of these that it finds,\n  but will not walk up further than any folder containing a '.git' entry.\n\n    .nave_profile_${NAVE}\n    .nave_profile_${NAVENAME}, if a named environment\n    .nave_profile_${NAVEVERSION}, eg .nave_profile_16.19.0\n    .nave_profile_${NAVEVERSION major.minor}, eg .nave_profile_16.19\n    .nave_profile_${NAVEVERSION major}, eg .nave_profile_16\n    .nave_profile\n\n  Finally, it will always source ${NAVEDIR}/../.naverc if present.\n  (eg, ~/.config/.naverc)\n\n  These may be used to set project-specific confirations, env variables, or\n  other behavior based on the Nave environment in use, without the use of\n  configuration files in the home directory.\n\n  The 'nave auto' command will walk up the directory tree looking for a\n  '.naverc' or '.nvmrc' file, and use the contents as arguments to 'nave use'.\n```\n\n## Subshell-free operation\n\nIf you prefer to not enter a subshell, just run nave with `exec`\n\n```bash\nexec nave use lts/argon\n```\n\nYou could even add something like this to your `.bashrc` file to save\non typing:\n\n```bash\nn () {\n  exec nave \"$@\"\n}\n```\n\n## Running shell script with specific version of Node.js\n\nIf there is need to run a shell script with version of node.js provided by nave following snippet can be inserted into script:\n```bash\n[ \"${IN_SUBSHELL}\" != \"$0\" ] && exec env IN_SUBSHELL=\"$0\" nave use 5.0.0 bash \"$0\" \"$@\" || :\n```\n\n## AUTOMAGICAL!\n\nYou can put a `.naverc` file in the root of your project (or\nanywhere).  This file should contain the version that you want to use.\nIt can be something like `lts/boron` or `16` or `latest`\n\n```\necho lts/boron > ~/projects/my-project/.naverc\n```\n\nThen you can run `nave auto` to load the appropriate environment.\n\n### BUT THAT'S NOT NEARLY MAGICAL OR AUTO ENOUGH FOR ME THOUGH\n\nIf you want to get even more absurd/automated, put this in your bash\nsettings (like `~/.bashrc` or whatever)\n\n```\nalias cd='exec nave auto'\n```\n\nand then every time you `cd` into a different folder, it'll\nautomatically load the correct nave settings, or exit nave-land if no\nautomatic stuff could be found.\n\nNote that doing this will also cause it to *exit* the nave environment\nwhen you cd to a directory that doesn't have a nave setting, so it can\ninterfere with \"normal\" nave operation.\n\nAlso, aliasing `cd` is a very all-consuming type of change to make to\none's system.  You might wish to give it some other name, so that you\ncan switch directories without affecting environment variables as a\npotentially surprising side effect, or even just run `exec nave auto`\nas an explicit action whenever you want this behavior to happen.\n\nBottom line, it's your shell, and I hope that this helps you enjoy it\nmore :)\n\n### NO THAT'S TOO MAGICAL, BE JUST SLIGHTLY LESS MAGICAL THAN THAT\n\nOk, put this snippet in a `PROMPT_COMMAND` export in your bash\nprofile (`.bashrc` or `.bash_profile` or whatever you use for\nthat).\n\n```bash\nexport PROMPT_COMMAND='nave should-auto && exec nave auto'\n```\n\nNow you'll always be in the configured nave environment in any\nproject with a `.naverc` (or `.nvmrc`), and always _not_ in a\nnave environment in your main shell in any folder that isn't\nset up for nave auto.\n\nThis has no effect on the normal nave subshells you get from\n`nave use`.\n\nThe output of your `PROMPT_COMMAND` is used for the main bash\nprompt, so you can also do some fancy stuff like this:\n\n```bash\n__prompt () {\n  if nave should-auto; then\n    exec nave auto\n  if\n  # Show the nave version in white-on-blue, but the \"normal\" node\n  # version in green\n  if [ \"$NAVE\" != \"\" ]; then\n    echo -ne \" \\033[44;37mnode@$NAVE\\033[0m\"\n  else\n    echo -ne \" \\033[32mnode@$(node -p 'process.version.slice(1)' 2>/dev/null)\\033[0m\"\n  fi\n}\nPS1=\"\\\\$ \"\nexport PROMPT_COMMAND='__prompt'\n```\n\n## env vars\n\n* `$NAVE` The current shell.  Either a version, or a name and version.\n* `$NAVE_NPX` Set to `\"1\"` to add `node_modules/.bin` to the\n  `$PATH` in all nave shells (including the main shell when `exec\n  nave auto` is used).\n* `$NAVE_AUTO_RC` The `.naverc` file found by `nave auto`.\n* `$NAVE_AUTO_CFG` The contents of the `.naverc` file that was\n  read when entering the `nave auto` environment.\n* `$NAVENAME` The name of the current shell.  Equal to `$NAVEVERSION`\n  in unnammed environments.\n* `$NAVEVERSION` The version of node that the current shell is\n  pointing to.  (This should comply with `node -v`.)\n* `$NAVELVL` The level of nesting in the subshell.\n* `$NAVE_DEBUG` Set to 1 to run nave in `bash -x` style.\n* `$NAVE_DIR` Set to the location where you'd like nave to do its\n  business.  Defaults to `~/.nave`.\n* `$NAVE_CONFIG` Set this to an array of arguments to pass to\n  `./configure`.  Defaults to `(\"--debug\")`.  (Note that parens are\n  required to supply multiple arguments.  I use `(\"--debug\"\n  \"--without-npm\")` on my own system, since I'm usually using nave to\n  test npm, so installing it in the subshell doesn't help much.)  This\n  can be set in the `~/.naverc` file, or in your normal\n  `~/.bash{rc,_profile}` files.\n* `$NAVE_JOBS` If set, this will be the number of jobs to run when\n  building node.  If this isn't set, it'll use the `$JOBS` env, then\n  try to guess a reasonable value based on the number of CPUs, then\n  fall back on 2 if `sysctl -n hw.ncpu` fails.\n* `$NAVE_SRC_ONLY` Set to `\"1\"` to only build from source, rather than\n  fetching binaries.\n\n## Contributing\n\nPatches welcome!  Before spending too much time on a patch or feature\nrequest, please [post an issue](/isaacs/nave/issues) to see if it's\nsomething that's going to be accepted or have unforeseen consequences.\n\nPatches will usually not be accepted if they break tests or cause coverage\nto drop below 100%.  You can run tests with:\n\n```\nnpm test\n# or...\nbash test/run.sh\n```\n\nAnd you can check coverage with:\n\n```\nnpm run cov\n# or...\nCOV=1 bash test/run.sh && open coverage-all/kcov-merged/nave.sh.*.html\n```\n\nThe latest coverage report can be found at\n<https://isaacs.github.io/nave/kcov-merged/index.html>\n\n## Compatibility\n\nNave is a bash program.  It can still do most of its functionality if you\nuse zsh or fish as your shell, as long as you have bash _somewhere_, but\nsome of the magical stuff won't work (since obviously that has to run\ninline in your shell with `exec`).\n\nNave requires bash.  It will probably never work on Windows, or other\nsystems lack a native Bourne Again Shell.  Sorry.  (Patches welcome if you\ncan get it to work properly on Windows that _do_ have bash, like WSL and\nCygwin.)\n\nNave logins work with any shell, but executing a command in the nave\nenvironment (ie, `nave use 12 node program.js`) requires that your shell\nsupport the `-c` argument.  (Bash, sh, zsh, and fish all work fine.)\n\n## Configuration\n\nNave will source `~/.naverc` on initialization of a new subshell, if it\nexists and is readable.\n\nYou may control the place where nave puts things by setting the\n`NAVE_DIR` environment variable.  However, note that this must be set\nsomewhere *other* than `~/.naverc`, since it needs to be set in the\n*parent* shell where the `nave` command is invoked.\n\nBy default, nave puts its stuff in `~/.nave/`.  If this directory does\nnot exist and cannot be created, then it will attempt to use the location\nof the nave.sh bash script itself.  If it cannot write to this location,\nthen it will exit with an error.\n\n## Credits\n\nnave borrows concepts, inspiration, and code from Tim Caswell's \"nvm\"\nand Kris Kowal's \"sea\" programs.\n\nSea is really nice, but is very tied to Narwhal.  Also, it's a\nrequire.paths manager, which nave is not.\n\nNvm is also really nice, but has to be sourced rather than being run, and\nthus is a little bit wonky for some use cases.  But it doesn't involve\nsubshells, which makes it better for some others."
}
