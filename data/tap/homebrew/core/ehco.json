{
  "name": "ehco",
  "full_name": "ehco",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Network relay tool and a typo :)",
  "license": "GPL-3.0-only",
  "homepage": "https://github.com/Ehco1996/ehco",
  "versions": {
    "stable": "1.1.2",
    "head": null,
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/Ehco1996/ehco.git",
      "tag": "v1.1.2",
      "revision": "3f649b356a33e317e4eaeeeca4590eedbd360892",
      "checksum": null
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ehco/blobs/sha256:adc2421757412baad839943b30e3bd213b52f1171771881b211926506174b1e5",
          "sha256": "adc2421757412baad839943b30e3bd213b52f1171771881b211926506174b1e5"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ehco/blobs/sha256:0ecd00961cfe17e5062878d61d3fa2553a659c43a2e1712f355a6ff706f2ed38",
          "sha256": "0ecd00961cfe17e5062878d61d3fa2553a659c43a2e1712f355a6ff706f2ed38"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ehco/blobs/sha256:10eb331567404c720188b82e8d8e0f11471af79ce6798370eac2d1d3ab47f59e",
          "sha256": "10eb331567404c720188b82e8d8e0f11471af79ce6798370eac2d1d3ab47f59e"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ehco/blobs/sha256:655e6f2667f39ddee1bd70c116782e98003bd5d5f19bb0c95f4b2efdced38833",
          "sha256": "655e6f2667f39ddee1bd70c116782e98003bd5d5f19bb0c95f4b2efdced38833"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ehco/blobs/sha256:e240c690c54ed6a593b6a56414c5b0c134336487ab5c4f10cd39ecf139e2eac1",
          "sha256": "e240c690c54ed6a593b6a56414c5b0c134336487ab5c4f10cd39ecf139e2eac1"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ehco/blobs/sha256:a82d6204833781c529f828e61833a5a62aaaa06bee39bc417f3749d7da429ac3",
          "sha256": "a82d6204833781c529f828e61833a5a62aaaa06bee39bc417f3749d7da429ac3"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ehco/blobs/sha256:a34305a19622c8cf08f7992bc34e0b47202fb35a7187e7c90b50055613457252",
          "sha256": "a34305a19622c8cf08f7992bc34e0b47202fb35a7187e7c90b50055613457252"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/ehco/blobs/sha256:566974576744f5056e4a7d4f5d3b14b0b6a4af3f25a8751f5fa5c1cf901c6e83",
          "sha256": "566974576744f5056e4a7d4f5d3b14b0b6a4af3f25a8751f5fa5c1cf901c6e83"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go@1.19"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    {
      "netcat": "test"
    }
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/ehco.rb",
  "ruby_source_checksum": {
    "sha256": "a0567448a500b511c9550e9eaf35bf79dae2046695e01e41530de18a52563319"
  },
  "date_added": "2021-05-19T21:50:20+00:00",
  "readme": "# ehco\n\n[![Go Report Card](https://goreportcard.com/badge/github.com/Ehco1996/ehco)](https://goreportcard.com/report/github.com/Ehco1996/ehco)\n[![go.dev reference](https://img.shields.io/badge/go.dev-reference-007d9c?logo=go&logoColor=white&style=flat-square)](https://pkg.go.dev/github.com/Ehco1996/ehco)\n[![Docker Pulls](https://img.shields.io/docker/pulls/ehco1996/ehco)](https://hub.docker.com/r/ehco1996/ehco)\n\nehco is a network relay tool and a typo :)\n\n[see Readme in English here](README_EN.md)\n\n## 视频安装教程\n\n本隧道和 [django-sspanel](https://github.com/Ehco1996/django-sspanel)深度对接，可以很方便的管理中转节点\n\n* 面板视频安装教程: [地址](https://youtu.be/BRHcdGeufvY)\n\n* 隧道后端对接视频教程: [地址](https://youtu.be/R4U0NZaMUeY)\n\n## 安装\n\n### go get\n\n```bash\ngo get -u \"github.com/Ehco1996/ehco/cmd/ehco\"\n```\n\n### 从release下载编译好的文件\n\n> ehco 的可执行文件可以从项目的[release](https://github.com/Ehco1996/ehco/releases)页面下载\n\n### docker image\n\n `docker pull ehco1996/ehco`\n\n## 主要功能\n\n* tcp/udp relay\n* tcp relay over wss\n* 从配置文件启动 支持多端口转发\n* 从远程启动\n* benchmark\n* grafana 监控报警\n* 热重载配置\n* 内嵌了完整版本的 [xray](https://github.com/XTLS/Xray-core) 后端\n\n## 中转使用说明\n\n使用隧道需要至少两台主机, 并且在两台主机上都安装了ehco\n\n* 中转机器 A 假设机器A的IP是 1.1.1.1\n* 落地机器 B 假设机器B的IP是 2.2.2.2 并且落地机器B的5555端口跑着一个SS/v2ray/任意tcp/udp服务\n\n### 案例一 不用隧道直接通过中转机器中转用户流量\n\n直接在中转机器A上输入: `ehco  -l 0.0.0.0:1234 -r 2.2.2.2:5555`\n\n> 该命令表示将所有从中转机器A的1234端口进入的流量直接转发到落地机器B的5555端口\n\n用户即可通过 中转机器A的1234端口访问到落地机器B的5555端口的SS/v2ray服务了\n\n### 案例二 用mwss隧道中转用户流量\n\n在落地机器B上输入: `ehco  -l 0.0.0.0:443 -lt mwss -r 127.0.0.1:5555`\n\n> 该命令表示将所有从落地机器B的443端口进入的wss流量解密后转发到落地机器B的5555端口\n\n在中转机器A上输入: `ehco  -l 0.0.0.0:1234 -r wss://2.2.2.2:443 -tt mwss`\n\n> 该命令表示将所有从A的1234端口进入的流量通过wss加密后转发到落地机器B的443端口\n\n用户即可通过 中转机器A的1234端口访问到落地机器B的5555端口的SS/v2ray服务了\n\n## Xray 功能使用说明\n\n### 内置 xray 后端\n\n从 `v1.1.2` 开始，ehco 内置了完整版本的 [xray](https://github.com/XTLS/Xray-core) 后端，可以通过标准的 xray 配置文件来启动内置的 xray server, 配置的 key 为 `xray_config`：\n\n* 单端口多用户的 ss [xray_ss.json](examples/xray_ss.json)\n* 单端口多用户的 trojan [xray_trojan.json](examples/xray_trojan.json)\n\n### 用户流量同步\n\n从 `v1.1.2` 开始，ehco 支持通过 api 下方用户配置和上报用户流量，配置的 key 为 `sync_traffic_endpoint`：\n\nehco 会每隔 60s 发送一次 GET 请求，从 `sync_traffic_endpoint` 同步一次用户配置，到 xray server 里，期望的 API 返回格式如下：\n\n```json\n{\n    \"users\": [\n        {\n            \"user_id\": 1,\n            \"method\": \"user1\",\n            \"password\": 1024,\n            \"level\": 1024,\n            \"upload_traffic\": 1024,\n            \"download_traffic\": 1024,\n            \"protocol\": \"trojan/ss\"\n        },\n        {\n            \"user_id\": 2,\n            \"method\": \"user1\",\n            \"password\": 1024,\n            \"level\": 1024,\n            \"upload_traffic\": 1024,\n            \"download_traffic\": 1024,\n            \"protocol\": \"trojan/ss\"\n        },\n    ]\n}\n```\n\nehco 会每隔 60s 发送一次 POST 请求至 `sync_traffic_endpoint` ，上报当前 xray server 所有用户的流量使用情况，发送的请求格式如下：\n\n```json\n{\n    \"data\": [\n        {\n            \"user_id\": 1,\n            \"upload_traffic\": 1024,\n            \"download_traffic\": 1024,\n        },\n        {\n            \"user_id\": 2,\n            \"upload_traffic\": 1024,\n            \"download_traffic\": 1024,\n        },\n    ]\n}\n```\n\n需要注意的是，如果想使用此功能，对 xray 的完整配置文件有如下限制\n\n* 的配置文件必须包开启 `stats` 和 `api` 功能\n* ss inbound 的 `tag` 必须为 `ss_proxy`\n* trojan inbound 的 `tag` 必须为 `trojan_proxy`\n\n一个完整的例子可以参考 [xray_ss.json](examples/xray_ss.json) 和 [xray_trojan.json](examples/xray_trojan.json)\n\n## 配置文件\n\n> ehco支持从 `配置文件` / `http接口` 里读取 `json` 格式的配置并启动\n\n配置文件格式要求如下(更多例子可以参考项目里的 [config.json](examples/config.json) 文件):\n\n```json\n{\n    \"web_port\": 9000,\n    \"web_token\": \"\",\n    \"enable_ping\": false,\n    \"relay_configs\": [\n        {\n            \"listen\": \"127.0.0.1:1234\",\n            \"listen_type\": \"raw\",\n            \"transport_type\": \"raw\",\n            \"tcp_remotes\": [\n                \"0.0.0.0:5201\"\n            ],\n            \"udp_remotes\": [\n                \"0.0.0.0:5201\"\n            ]\n        },\n    ]\n}\n```\n\n### 热重载配置\n\n> 大于 1.1.0 版本的 ehco 支持热重载配置\n\n```sh\n# 使用配置文件启动 ehco\nehco  -c config.json\n\n# 更新配置文件后可以使用 kill -HUP pid 命令来重新加载配置\nkill -HUP pid\n\n# 重载成功可以看到如下信息\n[cfg-reload] Got A HUP Signal! Now Reloading Conf ...\nLoad Config From file:config.json\n[cfg-reload] starr new relay name=[At=127.0.0.1:12342 Over=raw TCP-To=[0.0.0.0:5201] UDP-To=[0.0.0.0:5201] Through=raw]\n[relay] Close relay [At=127.0.0.1:1234 Over=raw TCP-To=[0.0.0.0:5201] UDP-To=[0.0.0.0:5201] Through=raw]\n[relay] Start UDP relay [At=127.0.0.1:12342 Over=raw TCP-To=[0.0.0.0:5201] UDP-To=[0.0.0.0:5201] Through=raw]\n[relay] Start TCP relay [At=127.0.0.1:12342 Over=raw TCP-To=[0.0.0.0:5201] UDP-To=[0.0.0.0:5201] Through=raw]\n```\n\n## 监控报警\n\n* dashboard 和 prometheus 规则可以从`monitor`文件夹下找到，可以自行导入\n\n* 类似 Smokeing Ping 的延迟监控\n\n![](monitor/ping.png)\n\n* 流量监控\n\n![](monitor/traffic.png)\n\n## Benchmark(Apple m1)\n\niperf:\n\n```sh\n# run iperf server on 5201\niperf3 -s\n\n# 直接转发\n# run relay server listen 1234 to 9001 (raw)\ngo run cmd/ehco/main.go -l 0.0.0.0:1234 -r 0.0.0.0:5201\n\n# 直接转发END\n\n# 通过ws隧道转发\n# listen 1235 relay over ws to 1236\ngo run cmd/ehco/main.go -l 0.0.0.0:1235  -r ws://0.0.0.0:1236 -tt ws\n\n# listen 1236 through ws relay to 5201\ngo run cmd/ehco/main.go -l 0.0.0.0:1236 -lt ws -r 0.0.0.0:5201\n# 通过ws隧道转发END\n\n# 通过wss隧道转发\n# listen 1234 relay over wss to 1236\ngo run cmd/ehco/main.go -l 0.0.0.0:1235  -r wss://0.0.0.0:1236 -tt wss\n\n# listen 1236 through wss relay to 5201\ngo run cmd/ehco/main.go -l 0.0.0.0:1236 -lt wss -r 0.0.0.0:5201\n# 通过wss隧道转发END\n\n# 通过mwss隧道转发 和wss相比 速度会慢，但是能减少延迟\n# listen 1237 relay over mwss to 1238\ngo run cmd/ehco/main.go -l 0.0.0.0:1237  -r wss://0.0.0.0:1238 -tt mwss\n\n# listen 1238 through mwss relay to 5201\ngo run cmd/ehco/main.go -l 0.0.0.0:1238 -lt mwss -r 0.0.0.0:5201\n# 通过mwss隧道转发END\n\n# run through file\ngo run cmd/ehco/main.go -c config.json\n\n# benchmark tcp\niperf3 -c 0.0.0.0 -p 1234\n\n# benchmark tcp through wss\niperf3 -c 0.0.0.0 -p 1235\n\n# benchmark upd\niperf3 -c 0.0.0.0 -p 1234 -u -b 1G --length 1024\n\n```\n\n| iperf | raw | relay(raw) | relay(ws) |relay(wss) | relay(mwss) | relay(mtcp) |\n| ---- | ----  | ---- | ---- | ---- | ---- | ---- |\n| tcp  | 123 Gbits/sec | 55 Gbits/sec | 41 Gbits/sec | 10 Gbits/sec | 5.78 Gbits/sec | 22.2 Gbits/sec |\n| udp  | 14.5 Gbits/sec | 3.3 Gbits/sec | 直接转发 | 直接转发 | 直接转发 | 直接转发 |"
}
