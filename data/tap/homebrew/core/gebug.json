{
  "name": "gebug",
  "full_name": "gebug",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Debug Dockerized Go applications better",
  "license": "Apache-2.0",
  "homepage": "https://github.com/moshebe/gebug",
  "versions": {
    "stable": "1.0.7",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/moshebe/gebug/archive/refs/tags/v1.0.7.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "3dac2b9b1f9a3d5fa8c19fceb7f77ea8ce003504239a2744bfc3c492b96a2e56"
    },
    "head": {
      "url": "https://github.com/moshebe/gebug.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gebug/blobs/sha256:e2af5ddd3ad9ce2496222ef20875a777fe323c1e3cc2e3d8e706c1ef439c8069",
          "sha256": "e2af5ddd3ad9ce2496222ef20875a777fe323c1e3cc2e3d8e706c1ef439c8069"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gebug/blobs/sha256:e2af5ddd3ad9ce2496222ef20875a777fe323c1e3cc2e3d8e706c1ef439c8069",
          "sha256": "e2af5ddd3ad9ce2496222ef20875a777fe323c1e3cc2e3d8e706c1ef439c8069"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gebug/blobs/sha256:e2af5ddd3ad9ce2496222ef20875a777fe323c1e3cc2e3d8e706c1ef439c8069",
          "sha256": "e2af5ddd3ad9ce2496222ef20875a777fe323c1e3cc2e3d8e706c1ef439c8069"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gebug/blobs/sha256:c8480f6e58a565ae8fe846128699ffd3a8a3990277468ff89a3a0f9098c5dea4",
          "sha256": "c8480f6e58a565ae8fe846128699ffd3a8a3990277468ff89a3a0f9098c5dea4"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gebug/blobs/sha256:c8480f6e58a565ae8fe846128699ffd3a8a3990277468ff89a3a0f9098c5dea4",
          "sha256": "c8480f6e58a565ae8fe846128699ffd3a8a3990277468ff89a3a0f9098c5dea4"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gebug/blobs/sha256:c8480f6e58a565ae8fe846128699ffd3a8a3990277468ff89a3a0f9098c5dea4",
          "sha256": "c8480f6e58a565ae8fe846128699ffd3a8a3990277468ff89a3a0f9098c5dea4"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/gebug/blobs/sha256:4b1810e5b52e8f5f5c9829025e39111c452b3a474fdb171d535d74d9a8492d68",
          "sha256": "4b1810e5b52e8f5f5c9829025e39111c452b3a474fdb171d535d74d9a8492d68"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [
    "docker"
  ],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/gebug.rb",
  "ruby_source_checksum": {
    "sha256": "e28a61acb2d31da51bef29f4d2508cd2fb59eb92ef4aba3711a6a574f29cbfdd"
  },
  "date_added": "2022-10-10T16:24:18+00:00",
  "readme": "![Alt text](assets/logo.png?raw=true\"Gebug\")\n\nA tool that makes debugging of Dockerized Go applications super easy by enabling Debugger and Hot-Reload features, seamlessly.  \n\n![](https://github.com/moshebe/gebug/workflows/lint/badge.svg)\n![](https://github.com/moshebe/gebug/workflows/test/badge.svg)\n![](https://github.com/moshebe/gebug/workflows/telegram/badge.svg)\n[![codecov](https://codecov.io/gh/moshebe/gebug/branch/master/graph/badge.svg)](https://codecov.io/gh/moshebe/gebug)\n[![PkgGoDev](https://pkg.go.dev/badge/github.com/moshebe/gebug)](https://pkg.go.dev/github.com/moshebe/gebug)\n[![Go Report Card](https://goreportcard.com/badge/github.com/moshebe/gebug)](https://goreportcard.com/report/github.com/moshebe/gebug)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n---\n# Installation\n### [Homebrew](https://brew.sh/) (Linux/macOS)\n```shell\nbrew install gebug\n```\n### [Go](https://golang.org) (Linux/Windows/macOS/any other platform supported by Go)\nIf you have Go 1.16+, you can install latest released version of `gebug` directly from source by running:\n```shell\ngo install github.com/moshebe/gebug@latest\n```\n\n# Usage\n```\nâžœ gebug --help\nGebug helps you setup a fully suited debugging environment of Go application running inside a container.\nIt enables options like connecting with remote debugger and breakpoints inside the code or \nuse hot-reload features which auto-build and run upon new change detected on the source code.\n\nUsage:\n  gebug [command]\n\nAvailable Commands:\n  clean       Clean Gebug stack\n  destroy     Destroy the Gebug project\n  help        Help about any command\n  init        Initialize a Gebug project\n  start       Start Gebug services\n  ui          Start Gebug web UI\n  version     Gebug's version\n\nFlags:\n  -h, --help             help for gebug\n  -v, --verbose          enable verbose mode\n  -w, --workdir string   your Go application root directory (default \".\")\n\nUse \"gebug [command] --help\" for more information about a command.\n```\n\n# Demo\n#### Configure workspace for Hot-Reload\n![](assets/demo-hot-reload.gif)\n\n#### Goland Debugger\n![](assets/demo-goland-debugger.gif)\n\n#### Visual Studio Code Debugger\n![](assets/demo-vscode-debugger.gif)\n\n\n\n# How Does It Work\n\nNothing special, no voodoo. Gebug just handles the Dockerfile and docker-compose configuration files generation with a easy-to-use command line utility.    \nYou can find the generated files in your project under `.gebug` directory.  \nWe are all programmers and I know you like to play with your toys, so feel free to edit any of those files in order to fit your use-case. \nJust make sure to run `gebug start --skip-generate` so the next run won't override your changes.\n\nLet's examine the `config.yaml` fields so you will feel more comfortable editing as you wish:\n\n| Field            \t| Default                          \t    | Description                                                                                                                                                                                                                             \t|\n|------------------\t|---------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\t|\n| name             \t|                                \t    | application/project name                                                                                                                                                                                                                \t|\n| output_binary    \t| /app                           \t    | output binary artifact inside the runtime container                                                                                                                                                                                     \t|\n| build_command    \t| go build -o {{.output_binary}}  \t    | build command inside the runtime container.  Note you can reference other configuration fields. When enabling Debugger `-gcflags=\"all=-N -l\"` will be appended  to the build command to stop compiler optimization and symbol removing \t|\n| run_command      \t| {.output_binary}}              \t    | run command, probably most of the time will just be the binary artifact path                                                                                                                                                            \t|\n| runtime_image    \t| golang:1.20                    \t    | base Docker image for the runtime container                                                                                                                                                                                             \t|\n| debugger_enabled \t| false                            \t    | whether to enable delve debugger inside the container or just use hot-reload                                                                                                                                                            \t|\n| debugger_port    \t| 40000                            \t    | delve debugger listen port, relevant only if `debugger_enabled` was set                                                                                                                                                                 \t|\n| expose_ports     \t| []                               \t    | list of ports to expose inside the container. Uses the same syntax as docker-compose for mapping between host and container ports(e.g: \"8080:8080\"). No need to add the delve debugger listen port as it will be auto-added            \t|\n| networks     \t    | []                               \t    | list of docker external networks to join. if no network is selected, a new one will be created                                                                                                                                            |\n| environment     \t| []                               \t    | list of environment variables to be set inside the container. Syntax: `FOO=BAR` or just `FOO` which will take the variable `FOO` from host and set it with its value                                                                      |\n\n# Web UI\nIf you prefer a web interface over a terminal or YAML file, you can simply run the following command in your Gebug project directory\n```\ngebug ui\n``` \nA simple web application will be opened and let you control the Gebug configuration of your project directly from your browser.  \n\n![](assets/demo-webui.gif)\n \n# License\nGebug is released under the Apache 2.0 license. See LICENSE."
}
