{
  "name": "hydra",
  "full_name": "hydra",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Network logon cracker which supports many services",
  "license": "AGPL-3.0-only",
  "homepage": "https://github.com/vanhauser-thc/thc-hydra",
  "versions": {
    "stable": "9.5",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/vanhauser-thc/thc-hydra/archive/v9.5.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "9dd193b011fdb3c52a17b0da61a38a4148ffcad731557696819d4721d1bee76b"
    },
    "head": {
      "url": "https://github.com/vanhauser-thc/thc-hydra.git",
      "branch": "master"
    }
  },
  "revision": 1,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/hydra/blobs/sha256:4233b96be61ab5a51cc06ce000551cdda2930b9908520c4431e7f8a6778fc08c",
          "sha256": "4233b96be61ab5a51cc06ce000551cdda2930b9908520c4431e7f8a6778fc08c"
        },
        "arm64_monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/hydra/blobs/sha256:d6027630cf3aaa8c88dcb70e0d4f8cb202a1eab7b8b2ad348ff4c60753fcf457",
          "sha256": "d6027630cf3aaa8c88dcb70e0d4f8cb202a1eab7b8b2ad348ff4c60753fcf457"
        },
        "arm64_big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/hydra/blobs/sha256:fc87e1cf552aafa0b3948c475b2a2ea5a89feb39572393f80ff17db9623c5e8c",
          "sha256": "fc87e1cf552aafa0b3948c475b2a2ea5a89feb39572393f80ff17db9623c5e8c"
        },
        "ventura": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/hydra/blobs/sha256:7166d64116322a253217a1363c32838ff3003d3d2ab70299a9b89e6503278a35",
          "sha256": "7166d64116322a253217a1363c32838ff3003d3d2ab70299a9b89e6503278a35"
        },
        "monterey": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/hydra/blobs/sha256:6a3c2fce671fa1b2ae2ce7291f9300d180ed1595176d6fc7d7c8cbc67530081e",
          "sha256": "6a3c2fce671fa1b2ae2ce7291f9300d180ed1595176d6fc7d7c8cbc67530081e"
        },
        "big_sur": {
          "cellar": ":any",
          "url": "https://ghcr.io/v2/homebrew/core/hydra/blobs/sha256:d0dce2ce89065f3026e5e07bfd3935e17b4e4e21357a03d77806766bef2766e1",
          "sha256": "d0dce2ce89065f3026e5e07bfd3935e17b4e4e21357a03d77806766bef2766e1"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/hydra/blobs/sha256:aa4a0a0ba72ad73ea3d23e84bef1ff6ecb0a88ea3c307c8997a6c9f95af9aa2b",
          "sha256": "aa4a0a0ba72ad73ea3d23e84bef1ff6ecb0a88ea3c307c8997a6c9f95af9aa2b"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "pkg-config"
  ],
  "dependencies": [
    "libssh",
    "mysql-client",
    "openssl@3",
    "pcre2"
  ],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "ncurses"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [],
  "conflicts_with": [
    "ory-hydra"
  ],
  "conflicts_with_reasons": [
    "both install `hydra` binaries"
  ],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/hydra.rb",
  "ruby_source_checksum": {
    "sha256": "0b93437c5058476cc00e364251f24b97336002d0878ef6f1506c8ccd21c179b9"
  },
  "date_added": "2010-09-17T08:41:40-07:00",
  "readme": "\n\t\t\t\t  H Y D R A\n\n                      (c) 2001-2023 by van Hauser / THC\n             <vh@thc.org> https://github.com/vanhauser-thc/thc-hydra\n       many modules were written by David (dot) Maciejak @ gmail (dot) com\n                 BFG code by Jan Dlabal <dlabaljan@gmail.com>\n\n  \t\t    Licensed under AGPLv3 (see LICENSE file)\n\n           Please do not use in military or secret service organizations,\n                          or for illegal purposes.\n      (This is the wish of the author and non-binding. Many people working\n       in these organizations do not care for laws and ethics anyways.\n            You are not one of the \"good\" ones if you ignore this.)\n\n           NOTE: no this is not meant to be a markdown doc! old school!\n\n\nHydra in the most current github state can be directly downloaded via docker:\n```\ndocker pull vanhauser/hydra\n```\n\n\nINTRODUCTION\n------------\nNumber one of the biggest security holes are passwords, as every password\nsecurity study shows.\nThis tool is a proof of concept code, to give researchers and security\nconsultants the possibility to show how easy it would be to gain unauthorized\naccess from remote to a system.\n\nTHIS TOOL IS FOR LEGAL PURPOSES ONLY!\n\nThere are already several login hacker tools available, however, none does\neither support more than one protocol to attack or support parallelized\nconnects.\n\nIt was tested to compile cleanly on Linux, Windows/Cygwin, Solaris,\nFreeBSD/OpenBSD, QNX (Blackberry 10) and MacOS.\n\nCurrently this tool supports the following protocols:\n Asterisk, AFP, Cisco AAA, Cisco auth, Cisco enable, CVS, Firebird, FTP,\n HTTP-FORM-GET, HTTP-FORM-POST, HTTP-GET, HTTP-HEAD, HTTP-POST, HTTP-PROXY,\n HTTPS-FORM-GET, HTTPS-FORM-POST, HTTPS-GET, HTTPS-HEAD, HTTPS-POST,\n HTTP-Proxy, ICQ, IMAP, IRC, LDAP, MEMCACHED, MONGODB, MS-SQL, MYSQL, NCP, NNTP, Oracle Listener,\n Oracle SID, Oracle, PC-Anywhere, PCNFS, POP3, POSTGRES, Radmin, RDP, Rexec, Rlogin,\n Rsh, RTSP, SAP/R3, SIP, SMB, SMTP, SMTP Enum, SNMP v1+v2+v3, SOCKS5,\n SSH (v1 and v2), SSHKEY, Subversion, Teamspeak (TS2), Telnet, VMware-Auth,\n VNC and XMPP.\n\nHowever the module engine for new services is very easy so it won't take a\nlong time until even more services are supported.\nYour help in writing, enhancing or fixing modules is highly appreciated!! :-)\n\n\n\nWHERE TO GET\n------------\nYou can always find the newest release/production version of hydra at its\nproject page at https://github.com/vanhauser-thc/thc-hydra/releases\nIf you are interested in the current development state, the public development\nrepository is at Github:\n  svn co https://github.com/vanhauser-thc/thc-hydra\n or\n  git clone https://github.com/vanhauser-thc/thc-hydra\nUse the development version at your own risk. It contains new features and\nnew bugs. Things might not work!\n\nAlternatively (and easier) to can pull it as a docker container:\n```\ndocker pull vanhauser/hydra\n```\n\n\nHOW TO COMPILE\n--------------\nTo configure, compile and install hydra, just type:\n\n```\n./configure\nmake\nmake install\n```\n\nIf you want the ssh module, you have to setup libssh (not libssh2!) on your\nsystem,  get it from https://www.libssh.org, for ssh v1 support you also need\nto add \"-DWITH_SSH1=On\" option in the cmake command line.\nIMPORTANT: If you compile on MacOS then you must do this - do not install libssh via brew!\n\nIf you use Ubuntu/Debian, this will install supplementary libraries needed\nfor a few optional modules (note that some might not be available on your distribution):\n\n```\napt-get install libssl-dev libssh-dev libidn11-dev libpcre3-dev \\\n                 libgtk2.0-dev libmysqlclient-dev libpq-dev libsvn-dev \\\n                 firebird-dev libmemcached-dev libgpg-error-dev \\\n                 libgcrypt11-dev libgcrypt20-dev\n```\n\nThis enables all optional modules and features with the exception of Oracle,\nSAP R/3, NCP and the apple filing protocol - which you will need to download and\ninstall from the vendor's web sites.\n\nFor all other Linux derivates and BSD based systems, use the system\nsoftware installer and look for similarly named libraries like in the\ncommand above. In all other cases, you have to download all source libraries\nand compile them manually.\n\n\n\nSUPPORTED PLATFORMS\n-------------------\n- All UNIX platforms (Linux, *BSD, Solaris, etc.)\n- MacOS (basically a BSD clone)\n- Windows with Cygwin (both IPv4 and IPv6)\n- Mobile systems based on Linux, MacOS or QNX (e.g. Android, iPhone, Blackberry 10, Zaurus, iPaq)\n\n\n\nHOW TO USE\n----------\nIf you just enter `hydra`, you will see a short summary of the important\noptions available.\nType `./hydra -h` to see all available command line options.\n\nNote that NO login/password file is included. Generate them yourself.\nA default password list is however present, use \"dpl4hydra.sh\" to generate\na list.\n\nFor Linux users, a GTK GUI is available, try `./xhydra`\n\nFor the command line usage, the syntax is as follows:\n For attacking one target or a network, you can use the new \"://\" style:\n  hydra [some command line options] PROTOCOL://TARGET:PORT/MODULE-OPTIONS\n The old mode can be used for these too, and additionally if you want to\n specify your targets from a text file, you *must* use this one:\n\n```\nhydra [some command line options] [-s PORT] TARGET PROTOCOL [MODULE-OPTIONS]\n```\n\nVia the command line options you specify which logins to try, which passwords,\nif SSL should be used, how many parallel tasks to use for attacking, etc.\n\nPROTOCOL is the protocol you want to use for attacking, e.g. ftp, smtp,\nhttp-get or many others are available\nTARGET is the target you want to attack\nMODULE-OPTIONS are optional values which are special per PROTOCOL module\n\nFIRST - select your target\n you have three options on how to specify the target you want to attack:\n 1. a single target on the command line: just put the IP or DNS address in\n 2. a network range on the command line: CIDR specification like \"192.168.0.0/24\"\n 3. a list of hosts in a text file: one line per entry (see below)\n\nSECOND - select your protocol\n Try to avoid telnet, as it is unreliable to detect a correct or false login attempt.\n Use a port scanner to see which protocols are enabled on the target.\n\nTHIRD - check if the module has optional parameters\n hydra -U PROTOCOL\n e.g. hydra -U smtp\n\nFOURTH - the destination port\n this is optional, if no port is supplied the default common port for the\n PROTOCOL is used.\n If you specify SSL to use (\"-S\" option), the SSL common port is used by default.\n\n\nIf you use \"://\" notation, you must use \"[\" \"]\" brackets if you want to supply\nIPv6 addresses or CIDR (\"192.168.0.0/24\") notations to attack:\n  hydra [some command line options] ftp://[192.168.0.0/24]/\n  hydra [some command line options] -6 smtps://[2001:db8::1]/NTLM\n\nNote that everything hydra does is IPv4 only!\nIf you want to attack IPv6 addresses, you must add the \"-6\" command line option.\nAll attacks are then IPv6 only!\n\nIf you want to supply your targets via a text file, you can not use the ://\nnotation but use the old style and just supply the protocol (and module options):\n  hydra [some command line options] -M targets.txt ftp\nYou can also supply the port for each target entry by adding \":<port>\" after a\ntarget entry in the file, e.g.:\n\n```\nfoo.bar.com\ntarget.com:21\nunusual.port.com:2121\ndefault.used.here.com\n127.0.0.1\n127.0.0.1:2121\n```\n\nNote that if you want to attach IPv6 targets, you must supply the -6 option\nand *must* put IPv6 addresses in brackets in the file(!) like this:\n\n```\nfoo.bar.com\ntarget.com:21\n[fe80::1%eth0]\n[2001::1]\n[2002::2]:8080\n[2a01:24a:133:0:00:123:ff:1a]\n```\n\nLOGINS AND PASSWORDS\n--------------------\nYou have many options on how to attack with logins and passwords\nWith -l for login and -p for password you tell hydra that this is the only\nlogin and/or password to try.\nWith -L for logins and -P for passwords you supply text files with entries.\ne.g.:\n\n```\nhydra -l admin -p password ftp://localhost/\nhydra -L default_logins.txt -p test ftp://localhost/\nhydra -l admin -P common_passwords.txt ftp://localhost/\nhydra -L logins.txt -P passwords.txt ftp://localhost/\n```\n\nAdditionally, you can try passwords based on the login via the \"-e\" option.\nThe \"-e\" option has three parameters:\n\n```\ns - try the login as password\nn - try an empty password\nr - reverse the login and try it as password\n```\n\nIf you want to, e.g. try \"try login as password and \"empty password\", you \nspecify \"-e sn\" on the command line.\n\nBut there are two more modes for trying passwords than -p/-P:\nYou can use text file which where a login and password pair is separated by a colon,\ne.g.:\n\n```\nadmin:password\ntest:test\nfoo:bar\n```\n\nThis is a common default account style listing, that is also generated by the\ndpl4hydra.sh default account file generator supplied with hydra.\nYou use such a text file with the -C option - note that in this mode you\ncan not use -l/-L/-p/-P options (-e nsr however you can).\nExample:\n\n```\nhydra -C default_accounts.txt ftp://localhost/\n```\n\nAnd finally, there is a bruteforce mode with the -x option (which you can not\nuse with -p/-P/-C):\n\n```\n-x minimum_length:maximum_length:charset\n```\n\nthe charset definition is `a` for lowercase letters, `A` for uppercase letters,\n`1` for numbers and for anything else you supply it is their real representation.\nExamples:\n\n```\n-x 1:3:a generate passwords from length 1 to 3 with all lowercase letters\n-x 2:5:/ generate passwords from length 2 to 5 containing only slashes\n-x 5:8:A1 generate passwords from length 5 to 8 with uppercase and numbers\n-x '3:3:aA1&~#\\\\ \"\\'<{([-|_^@)]=}>$%*?./§,;:!`' -v generates lenght 3 passwords with all 95 characters, and verbose. \n```\n\nExample:\n\n```\nhydra -l ftp -x 3:3:a ftp://localhost/\n```\n\nSPECIAL OPTIONS FOR MODULES\n---------------------------\nVia the third command line parameter (TARGET SERVICE OPTIONAL) or the -m\ncommand line option, you can pass one option to a module.\nMany modules use this, a few require it!\n\nTo see the special option of a module, type:\n\n  hydra -U <module>\n\ne.g.\n\n  ./hydra -U http-post-form\n\nThe special options can be passed via the -m parameter, as 3rd command line\noption or in the service://target/option format.\n\nExamples (they are all equal):\n\n```\n./hydra -l test -p test -m PLAIN 127.0.0.1 imap\n./hydra -l test -p test 127.0.0.1 imap PLAIN\n./hydra -l test -p test imap://127.0.0.1/PLAIN\n```\n\nRESTORING AN ABORTED/CRASHED SESSION\n------------------------------------\nWhen hydra is aborted with Control-C, killed or crashes, it leaves a\n\"hydra.restore\" file behind which contains all necessary information to\nrestore the session. This session file is written every 5 minutes.\nNOTE: the hydra.restore file can NOT be copied to a different platform (e.g.\nfrom little endian to big endian, or from Solaris to AIX)\n\nHOW TO SCAN/CRACK OVER A PROXY\n------------------------------\nThe environment variable HYDRA_PROXY_HTTP defines the web proxy (this works\njust for the http services!).\nThe following syntax is valid:\n\n```\nHYDRA_PROXY_HTTP=\"http://123.45.67.89:8080/\"\nHYDRA_PROXY_HTTP=\"http://login:password@123.45.67.89:8080/\"\nHYDRA_PROXY_HTTP=\"proxylist.txt\"\n```\n\nThe last example is a text file containing up to 64 proxies (in the same\nformat definition as the other examples).\n\nFor all other services, use the HYDRA_PROXY variable to scan/crack.\nIt uses the same syntax. eg:\n\n```\nHYDRA_PROXY=[connect|socks4|socks5]://[login:password@]proxy_addr:proxy_port\n```\n\nfor example:\n\n```\nHYDRA_PROXY=connect://proxy.anonymizer.com:8000\nHYDRA_PROXY=socks4://auth:pw@127.0.0.1:1080\nHYDRA_PROXY=socksproxylist.txt\n```\n\nADDITIONAL HINTS\n----------------\n* sort your password files by likelihood and use the -u option to find\n  passwords much faster!\n* uniq your dictionary files! this can save you a lot of time :-)\n    cat words.txt | sort | uniq > dictionary.txt\n* if you know that the target is using a password policy (allowing users\n  only to choose a password with a minimum length of 6, containing a least one\n  letter and one number, etc. use the tool pw-inspector which comes along\n  with the hydra package to reduce the password list:\n    cat dictionary.txt | pw-inspector -m 6 -c 2 -n > passlist.txt\n\n\nRESULTS OUTPUT\n--------------\n\nThe results are output to stdio along with the other information.  Via the -o\ncommand line option, the results can also be written to a file.  Using -b,\nthe format of the output can be specified.  Currently, these are supported:\n\n* `text`   - plain text format\n* `jsonv1` - JSON data using version 1.x of the schema (defined below).\n* `json`   - JSON data using the latest version of the schema, currently there\n             is only version 1.\n\nIf using JSON output, the results file may not be valid JSON if there are\nserious errors in booting Hydra.\n\n\nJSON Schema\n-----------\nHere is an example of the JSON output.  Notes on some of the fields:\n\n* `errormessages` - an array of zero or more strings that are normally printed\n   to stderr at the end of the Hydra's run.  The text is very free form.\n* `success` - indication if Hydra ran correctly without error (**NOT** if\n   passwords were detected).  This parameter is either the JSON value `true`\n   or `false` depending on completion.  \n* `quantityfound` - How many username+password combinations discovered.\n* `jsonoutputversion` - Version of the schema, 1.00, 1.01, 1.11, 2.00,\n   2.03, etc.  Hydra will make second tuple of the version to always be two\n   digits to make it easier for downstream processors (as opposed to v1.1 vs\n   v1.10).  The minor-level versions are additive, so 1.02 will contain more\n   fields than version 1.00 and will be backward compatible.  Version 2.x will\n   break something from version 1.x output.  \n\nVersion 1.00 example:\n```\n{\n    \"errormessages\": [\n        \"[ERROR] Error Message of Something\",\n        \"[ERROR] Another Message\",\n        \"These are very free form\"\n    ],\n    \"generator\": {\n        \"built\": \"2021-03-01 14:44:22\",\n        \"commandline\": \"hydra -b jsonv1 -o results.json ... ...\",\n        \"jsonoutputversion\": \"1.00\",\n        \"server\": \"127.0.0.1\",\n        \"service\": \"http-post-form\",\n        \"software\": \"Hydra\",\n        \"version\": \"v8.5\"\n    },\n    \"quantityfound\": 2,\n    \"results\": [\n        {\n            \"host\": \"127.0.0.1\",\n            \"login\": \"bill@example.com\",\n            \"password\": \"bill\",\n            \"port\": 9999,\n            \"service\": \"http-post-form\"\n        },\n        {\n            \"host\": \"127.0.0.1\",\n            \"login\": \"joe@example.com\",\n            \"password\": \"joe\",\n            \"port\": 9999,\n            \"service\": \"http-post-form\"\n        }\n    ],\n    \"success\": false\n}\n```\n\n\nSPEED\n-----\nthrough the parallelizing feature, this password cracker tool can be very\nfast, however it depends on the protocol. The fastest are generally POP3\nand FTP.\nExperiment with the task option (-t) to speed things up! The higher - the\nfaster ;-) (but too high - and it disables the service)\n\n\n\nSTATISTICS\n----------\nRun against a SuSE Linux 7.2 on localhost with a \"-C FILE\" containing\n295 entries (294 tries invalid logins, 1 valid). Every test was run three\ntimes (only for \"1 task\" just once), and the average noted down.\n\n```\n\t\t\tP A R A L L E L    T A S K S\nSERVICE\t1\t4\t8\t16\t32\t50\t64\t100\t128\n------- --------------------------------------------------------------------\ntelnet\t23:20\t5:58\t2:58\t1:34\t1:05\t0:33\t0:45*\t0:25*\t0:55*\nftp\t45:54\t11:51\t5:54\t3:06\t1:25\t0:58\t0:46\t0:29\t0:32\npop3\t92:10\t27:16\t13:56\t6:42\t2:55\t1:57\t1:24\t1:14\t0:50\nimap\t31:05\t7:41\t3:51\t1:58\t1:01\t0:39\t0:32\t0:25\t0:21\n```\n\n(*)\nNote: telnet timings can be VERY different for 64 to 128 tasks! e.g. with\n128 tasks, running four times resulted in timings between 28 and 97 seconds!\nThe reason for this is unknown...\n\nguesses per task (rounded up):\n\t\n  295\t74\t38\t19\t10\t6\t5\t3\t3\n\nguesses possible per connect (depends on the server software and config):\n\t\n  telnet\t4\n\tftp\t6\n\tpop3\t1\n\timap\t3\n\n\n\nBUGS & FEATURES\n---------------\nHydra:\nEmail me or David if you find bugs or if you have written a new module.\nvh@thc.org (and put \"antispam\" in the subject line)\n\n\nYou should use PGP to encrypt emails to vh@thc.org :\n\n```\n-----BEGIN PGP PUBLIC KEY BLOCK-----\nVersion: GnuPG v3.3.3 (vh@thc.org)\n\n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\nzB3yrr+vYBT0uDWmxwPjiJs=\n=ytEf\n-----END PGP PUBLIC KEY BLOCK-----\n```"
}
