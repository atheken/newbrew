{
  "name": "wellington",
  "full_name": "wellington",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Project-focused tool to manage Sass and spriting",
  "license": "Apache-2.0",
  "homepage": "https://github.com/wellington/wellington",
  "versions": {
    "stable": "1.0.5",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/wellington/wellington/archive/v1.0.5.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "e2379722849cdd8e5f094849290aacba4b789d4d65c733dec859565c728e7205"
    },
    "head": {
      "url": "https://github.com/wellington/wellington.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/wellington/blobs/sha256:7141518809cbba8d42a2ff794af1fab87c327748020ae47d148f78ef3fdad0ad",
          "sha256": "7141518809cbba8d42a2ff794af1fab87c327748020ae47d148f78ef3fdad0ad"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/wellington/blobs/sha256:f247dbeda01b8853ec7c6bc57fe172ffc8f3c65be366623fe11c1583f75a725c",
          "sha256": "f247dbeda01b8853ec7c6bc57fe172ffc8f3c65be366623fe11c1583f75a725c"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/wellington/blobs/sha256:27f36c238e415ad9209494e1760b9bcb64fddc52fd45c8b7a4cd218e603e6503",
          "sha256": "27f36c238e415ad9209494e1760b9bcb64fddc52fd45c8b7a4cd218e603e6503"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/wellington/blobs/sha256:fb33ee897dbb2534defdf1cd8e37b2cded9404c2c6e3c337cb292cbfec7f3fec",
          "sha256": "fb33ee897dbb2534defdf1cd8e37b2cded9404c2c6e3c337cb292cbfec7f3fec"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/wellington/blobs/sha256:712fce49467b7fdaf6a2113bd61bd35b067dedaa3021914ce1b1654d7e8ea416",
          "sha256": "712fce49467b7fdaf6a2113bd61bd35b067dedaa3021914ce1b1654d7e8ea416"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/wellington/blobs/sha256:1042d237d74c534c987e63bb1e4eef6ec4070a1c9b080e52283d65c5edd9e40a",
          "sha256": "1042d237d74c534c987e63bb1e4eef6ec4070a1c9b080e52283d65c5edd9e40a"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/wellington/blobs/sha256:9aaeb3a098cbee88efc4e60d1edbfec242d6b2271f821b4d096fe6acb3d16987",
          "sha256": "9aaeb3a098cbee88efc4e60d1edbfec242d6b2271f821b4d096fe6acb3d16987"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/wellington/blobs/sha256:a49538429713f2f7b979ab533d4231de84140d9e4e63b5658941552c1c99117a",
          "sha256": "a49538429713f2f7b979ab533d4231de84140d9e4e63b5658941552c1c99117a"
        },
        "high_sierra": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/wellington/blobs/sha256:53a61eeebc1e787fa7870437ce089276c5f1daad26430078e988d1b6aa50c7b8",
          "sha256": "53a61eeebc1e787fa7870437ce089276c5f1daad26430078e988d1b6aa50c7b8"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/wellington/blobs/sha256:1efe7a942728970650560a933ba9344e79cf5a63e96c18553cef995ab77445ef",
          "sha256": "1efe7a942728970650560a933ba9344e79cf5a63e96c18553cef995ab77445ef"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go@1.19"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "aa66a84309b297ea296f7a4b9c424b5c0ec4875c",
  "ruby_source_path": "Formula/wellington.rb",
  "ruby_source_checksum": {
    "sha256": "383d95c9dabaec9461414fc065ad6146ee38c189f356aad32bb43888d8d6c73c"
  },
  "date_added": "2015-01-05T19:15:47+00:00",
  "readme": "[![Circle CI](https://circleci.com/gh/wellington/wellington/tree/master.svg?style=svg)](https://circleci.com/gh/wellington/wellington/tree/master)\n[![Coverage Status](https://coveralls.io/repos/wellington/wellington/badge.png?branch=master)](https://coveralls.io/r/wellington/wellington?branch=master)\n[![Report Card](http://goreportcard.com/badge/wellington/wellington)](http://goreportcard.com/report/wellington/wellington)\n[![Appveyor](https://ci.appveyor.com/api/projects/status/1apfkxe0369ce26d/branch/master?svg=true)](https://ci.appveyor.com/project/drewwells/wellington/branch/master)\n\n\nWellington\n===========\n\n[![Join the chat at https://gitter.im/wellington/wellington](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/wellington/wellington?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nWellington adds spriting to the lightning fast [libsass](http://libsass.org/). No need to learn a new tool, this all happens right in your Sass!\n\nOS Support\n============\nBinaries are provided for Linux and OS X. Building from source will work on any os libSass supports. Windows support has been dropped due to Issue [#160](https://github.com/wellington/wellington/issues/160)\n\n#### Use with Grunt or Gulp\n\nSee the [Grunt example](https://github.com/wellington/grunt-wellington/tree/master/examples/watch)\nSee the [Gulp Example](https://github.com/wellington/wellington/tree/master/examples/gulp)\n\n### Speed Matters\n\nBenchmarks\n```\n# 40,000 line of code Sass project with 1200 images\nwt         3.679s\ncompass   73.800s\n# 20x faster!\n```\n\nFor more benchmarks, see [realbench](https://github.com/wellington/realbench#results-early-2015-macbook-pro)\n\n#### What it does\n\nwt is a Sass preprocessor tool geared towards projects written in Sass. It focuses on tasks that make working on a Sass site friendlier and much faster. wt extends the Sass language to include spriting and image operations not currently possible in the core language.\n\n```\n$images: sprite-map(\"sprites/*.png\");\ndiv {\n  width: image-width(sprite-file($images, \"cat\"));\n  height: image-height(sprite-file($images, \"cat\"));\n  background: sprite($images, \"cat\");\n}\n```\n\nThe output CSS\n```\ndiv {\n  width: 140px;\n  height: 79px;\n  background: url(\"genimg/sprites-wehqi.png\") 0px 0px;\n}\n```\n\n#### Available commands\n\n```bash\n$ wt -h\n\nwt is a Sass project tool made to handle large projects. It uses the libSass compiler for efficiency and speed.\n\nUsage:\n  wt [flags]\n  wt [command]\n\nAvailable Commands:\n  serve       Starts a http server that will convert Sass to CSS\n  compile     Compile Sass stylesheets to CSS\n  watch       Watch Sass files for changes and rebuild CSS\n\nFlags:\n  -b, --build=\"\": Path to target directory to place generated CSS, relative paths inside project directory are preserved\n      --comment[=true]: Turn on source comments\n  -c, --config=\"\": Temporarily disabled: Location of the config file\n      --cpuprofile=\"\": Go runtime cpu profilling for debugging\n      --css-dir=\"\": Compass backwards compat, does nothing. Reference locations relative to Sass project directory\n      --debug[=false]: Show detailed debug information\n  -d, --dir=\"\": Path to locate images for spriting and image functions\n      --font=\".\": Path to directory containing fonts\n      --gen=\".\": Path to place generated images\n      --images-dir=\"\": Compass backwards compat, use -d instead\n      --javascripts-dir=\"\": Compass backwards compat, ignored\n      --no-line-comments[=false]: UNSUPPORTED: Disable line comments\n  -p, --proj=\"\": Path to directory containing Sass stylesheets\n      --relative-assets[=false]: UNSUPPORTED: Make compass asset helpers generate relative urls to assets.\n      --sass-dir=\"\": Compass backwards compat, use -p instead\n  -s, --style=\"nested\": nested style of output CSS\n                        available options: nested, expanded, compact, compressed\n      --time[=false]: Retrieve timing information\n  -v, --version[=false]: Show the app version\n\nUse \"wt [command] --help\" for more information about a command.\n```\n\n#### Try before you buy\n\nYou can try out Wellington on Codepen, fork the [Wellington Playground](http://codepen.io/pen/def?fork=KwggLx)! This live example has images you can use, or you can bring your Sass.\n\nThere are many examples on Codepen just see the Wellington [collection](http://codepen.io/collection/DbNZQJ/)\n\n#### Installation\n\nWellington can be installed via brew\n\n\tbrew install wellington\n\twt -h\n\n\n#### Building from source\nInstall Go and add $GOPATH/bin to your $PATH. [Detailed instructions](https://golang.org/doc/install). Wellington requires Go 1.3.1+.\n\n```\ngo get -u github.com/wellington/wellington/wt\n\n# You should now have wt in your path\nwt -h\n```\n\nOr, use wellington from a docker container\n\n\tdocker run -v $(pwd):/data -it drewwells/wellington wt compile proj.scss\n\n## Documentation\n\n### Why?\n\nSass is a fantastic language. It adds a lot of power to standard CSS. If only our clients were happy with the functionality that Sass provided. For the life of Sass, there has been only one tool that attempted to extend Sass for everything that's needed to build a site. While Ruby is great for development, it does have some drawbacks. As our Sass powered website grew, Compass and Ruby Sass started to become a real drag on build times and development happiness. A typical build including transpiling Sass to CSS, RequireJS JavaScript, and minfication of CSS, JS, and images would spend half the time processing the Sass.\n\nThere had to be a better way. Libsass was starting to gain some traction, but it didn't do everything we needed. So I wrote Wellington to be a drop in replacement for the spriting functions familar to those used to Compass. This makes it super simple to swap out Compass with Wellington in your Sass projects.\n\n### See how the sausage is made\n\nTesting\n\n    make test\n\nProfiling\n\n\tmake profile\n\nSet your fork as the origin.\n\n    cd $GOPATH/src/github.com/wellington/wellington\n\tgit remote rm origin\n\tgit remote add origin git@github.com:username/wellington.git\n\nBuild a Docker Container. The wt container is 33.6 MB in size, but builds in a much larger container 844.7 MB.\n\n\tmake build\n\tmake docker #launch a container\n\nPlease use pull requests for contributing code.  [CircleCI](https://circleci.com/gh/wellington/wellington) will automatically test and lint your contributions.  Thanks for helping!\n\n### Getting Help\n\nAsk questions in the QA forum on [Google Group](https://groups.google.com/forum/#!forum/wellington-development)\n\n### License\n\nWellington is licensed under MIT.\n\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/wellington/wellington/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")"
}
