{
  "name": "swiftdraw",
  "full_name": "swiftdraw",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Convert SVG into PDF, PNG, JPEG or SF Symbol",
  "license": "Zlib",
  "homepage": "https://github.com/swhitty/SwiftDraw",
  "versions": {
    "stable": "0.14.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/swhitty/SwiftDraw/archive/0.14.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "297cc70ebf350d14ebfd48b319ca6cd706311e0ce57f085178a0bbc8591a9f09"
    },
    "head": {
      "url": "https://github.com/swhitty/SwiftDraw.git",
      "branch": "main"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/swiftdraw/blobs/sha256:176262559a36e0bbe95ff361292df2d0692ef7451d394f045df45c2e3394562f",
          "sha256": "176262559a36e0bbe95ff361292df2d0692ef7451d394f045df45c2e3394562f"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/swiftdraw/blobs/sha256:030ab1dda64e6be2cd5b29437cf162cb269bd01b339ebb377572ec8dc597651f",
          "sha256": "030ab1dda64e6be2cd5b29437cf162cb269bd01b339ebb377572ec8dc597651f"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/swiftdraw/blobs/sha256:a6a6831f0649221be46a576985355ea8b896ba1d138d039b44d2dac68ca03f51",
          "sha256": "a6a6831f0649221be46a576985355ea8b896ba1d138d039b44d2dac68ca03f51"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/swiftdraw/blobs/sha256:ba33ea20488197f0c925202281e89e2db163299acbe3149196e3baf9cbc6100f",
          "sha256": "ba33ea20488197f0c925202281e89e2db163299acbe3149196e3baf9cbc6100f"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/swiftdraw/blobs/sha256:e8af09248e5a115f463f96b62f429c9f9cf61a96ab90d30032ef4ebdbffa86f5",
          "sha256": "e8af09248e5a115f463f96b62f429c9f9cf61a96ab90d30032ef4ebdbffa86f5"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/swiftdraw/blobs/sha256:42b420507632dae15daa8ffc903243e73cc60bb4cf0e3c07d71a8c74d9f370e3",
          "sha256": "42b420507632dae15daa8ffc903243e73cc60bb4cf0e3c07d71a8c74d9f370e3"
        },
        "x86_64_linux": {
          "cellar": "/home/linuxbrew/.linuxbrew/Cellar",
          "url": "https://ghcr.io/v2/homebrew/core/swiftdraw/blobs/sha256:71812c45b3fbeb326a318b40acd93b6bf13fade9e0cee5ef64831b1e3ad20c9f",
          "sha256": "71812c45b3fbeb326a318b40acd93b6bf13fade9e0cee5ef64831b1e3ad20c9f"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [
    "swift"
  ],
  "uses_from_macos_bounds": [
    {}
  ],
  "requirements": [
    {
      "name": "xcode",
      "cask": null,
      "download": null,
      "version": "12.5",
      "contexts": [
        "build"
      ],
      "specs": [
        "stable",
        "head"
      ]
    }
  ],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/swiftdraw.rb",
  "ruby_source_checksum": {
    "sha256": "e51698cc2201942d3847f20342055d66ee287f8691cb89d7290d4f5135fca9fa"
  },
  "date_added": "2022-08-22T07:57:12+00:00",
  "readme": "[![Build](https://github.com/swhitty/SwiftDraw/actions/workflows/build.yml/badge.svg)](https://github.com/swhitty/SwiftDraw/actions/workflows/build.yml)\n[![CodeCov](https://codecov.io/gh/swhitty/SwiftDraw/graphs/badge.svg)](https://codecov.io/gh/swhitty/SwiftDraw)\n[![Platforms](https://img.shields.io/badge/platforms-iOS%20|%20Mac%20|%20Linux-lightgray.svg)](https://github.com/swhitty/SwiftDraw/blob/main/Package.swift)\n[![Swift 5.4](https://img.shields.io/badge/swift-5.4-red.svg?style=flat)](https://developer.apple.com/swift)\n[![License](https://img.shields.io/badge/license-zlib-lightgrey.svg)](https://opensource.org/licenses/Zlib)\n[![Twitter](https://img.shields.io/badge/twitter-@simonwhitty-blue.svg)](http://twitter.com/simonwhitty)\n\n# Introduction\n**SwiftDraw** is Swift library for parsing and drawing SVG images and includes a command line tool to convert SVGs into SFSymbol, PNG, PDF and Swift source code.\n\n- [Usage](#usage)\n  - [iOS](#ios)\n  - [macOS](#macos)\n- [Command Line Tool](#command-line-tool)\n  - [Installation](#installation)\n  - [Alignment](#alignment)\n  - [Swift Code Generation](#swift-code-generation)\n- [Credits](#credits)\n\n## Usage\n\nVector images can be easily loaded and rasterized to `UIImage` or `NSImage`:\n\n```swift\nlet svg = SVG(named: \"sample.svg\", in: .main)!\nimageView.image = svg.rasterize()\n```\n\nRasterize to any size:\n\n```swift\nlet svg = SVG(named: \"sample.svg\", in: .main)!\nimageView.image = svg.rasterize(with: CGSize(width: 640, height: 480))\n```\n\nCrop the image using insets:\n\n```swift\nlet svg = SVG(named: \"sample.svg\", in: .main)!\nimageView.image = svg.rasterize(insets: .init(top: 10, left: 0, bottom: 10, bottom: 0))\n```\n\nAdd padding using negative insets:\n\n```swift\nlet svg = SVG(named: \"sample.svg\", in: .main)!\nimageView.image = svg.rasterize(insets: .init(top: -10, left: -10, bottom: -10, bottom: -10))\n```\n\n### iOS\n\nCreate a `UIImage` directly from an SVG within a bundle, `Data` or file `URL`:\n\n```swift\nimport SwiftDraw\nlet image = UIImage(svgNamed: \"sample.svg\")\n```\n\n### macOS\n\nCreate an `NSImage` directly from an SVG within a bundle, `Data` or file `URL`:\n\n```swift\nimport SwiftDraw\nlet image = NSImage(svgNamed: \"sample.svg\")\n```\n\n## Command line tool\n\nThe command line tool converts SVGs to other formats: PNG, JPEG, SFSymbol and Swift source code.\n\n```\ncopyright (c) 2023 Simon Whitty\n\nusage: swiftdraw <file.svg> [--format png | pdf | jpeg | swift | sfsymbol] [--size wxh] [--scale 1x | 2x | 3x]\n\n<file> svg file to be processed\n\nOptions:\n --format      format to output image: png | pdf | jpeg | swift | sfsymbol\n --size        size of output image: 100x200\n --scale       scale of output image: 1x | 2x | 3x\n --insets      crop inset of output image: top,left,bottom,right\n --precision   maximum number of decimal places\n --output      optional path of output file\n\n --hideUnsupportedFilters   hide elements with unsupported filters.\n\nAvailable keys for --format swift:\n --api                api of generated code:  appkit | uikit\n\nAvailable keys for --format sfsymbol:\n --insets             alignment of regular variant: top,left,bottom,right | auto\n --ultralight         svg file of ultralight variant\n --ultralightInsets   alignment of ultralight variant: top,left,bottom,right | auto\n --black              svg file of black variant\n --blackInsets        alignment of black variant: top,left,bottom,right | auto\n```\n\n```bash\n$ swiftdraw simple.svg --format png --scale 3x\n```\n\n```bash\n$ swiftdraw simple.svg --format pdf\n```\n\n### Installation\n\nYou can install the `swiftdraw` command-line tool on macOS using [Homebrew](http://brew.sh/). Assuming you already have Homebrew installed, just type:\n\n```bash\n$ brew install swiftdraw\n```\n\nTo update to the latest version once installed:\n\n```bash\n$ brew upgrade swiftdraw\n```\n\nAlternatively download the latest command line tool [here](https://github.com/swhitty/SwiftDraw/releases/latest/download/SwiftDraw.dmg).\n\n### SF Symbol\n\nCustom SF Symbols can be created from a single SVG.  SwiftDraw expands strokes, winds paths using the [non-zero rule](https://en.wikipedia.org/wiki/Nonzero-rule) and aligns elements generating a symbol that can be imported directly into Xcode.\n\n<big><pre>\n$ swiftdraw [key.svg](https://github.com/swhitty/SwiftDraw/blob/main/Samples.bundle/key/key.svg) --format sfsymbol\n</pre></big>\n<img src=\"https://github.com/swhitty/SwiftDraw/blob/main/Samples.bundle/key/key-single.svg\" width=\"400\" />\n\nOptional variants `--ultralight` and `--black` can also be provided:\n\n<big><pre>\n$ swiftdraw [key.svg](https://github.com/swhitty/SwiftDraw/blob/main/Samples.bundle/key/key.svg) --format sfsymbol --ultralight [key-ultralight.svg](https://github.com/swhitty/SwiftDraw/blob/main/Samples.bundle/key/key-ultralight.svg) --black [key-black.svg](https://github.com/swhitty/SwiftDraw/blob/main/Samples.bundle/key/key-black.svg)\n</pre></big>\n<img src=\"https://github.com/swhitty/SwiftDraw/blob/main/Samples.bundle/key/key-symbol.svg\" width=\"400\" />\n\n#### Alignment\n\nBy default, SwiftDraw automatically sizes and aligns the content to the template guides.  The auto alignment insets are output by the tool:\n\n```bash\n$ swiftdraw simple.svg --format sfsymbol --insets auto\nAlignment: --insets 30,30,30,30\n```\n\nInsets can be provided in the form `--insets top,left,bottom,right` specifying a `Double` or `auto` for each edge:\n\n```bash\n$ swiftdraw simple.svg --format sfsymbol --insets 40,auto,40,auto\nAlignment: --insets 40,30,40,30\n```\n\nVariants can also be aligned using `--ultralightInsets` and `--blackInsets`.\n\n### Swift Code Generation\n\nSwift source code can also be generated from an SVG using the tool:\n\n```bash\n$ swiftdraw simple.svg --format swift\n```\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"160\" height=\"160\">\n  <rect width=\"160\" height=\"160\" fill=\"snow\" />\n  <path d=\"m 80 30 a 50 50 0 1 0 50 50 h -50 z\" fill=\"pink\" stroke=\"black\" stroke-width=\"2\"/>\n</svg>\n```\n\n```swift\nextension UIImage {\n  static func svgSimple(size: CGSize = CGSize(width: 160.0, height: 160.0)) -> UIImage {\n    let f = UIGraphicsImageRendererFormat.preferred()\n    f.opaque = false\n    let scale = CGSize(width: size.width / 160.0, height: size.height / 160.0)\n    return UIGraphicsImageRenderer(size: size, format: f).image {\n      drawSimple(in: $0.cgContext, scale: scale)\n    }\n  }\n\n  private static func drawSimple(in ctx: CGContext, scale: CGSize) {\n    ctx.scaleBy(x: scale.width, y: scale.height)\n    let rgb = CGColorSpaceCreateDeviceRGB()\n    let color1 = CGColor(colorSpace: rgb, components: [1, 0.98, 0.98, 1])!\n    ctx.setFillColor(color1)\n    ctx.fill(CGRect(x: 0, y: 0, width: 160, height: 160))\n    let color2 = CGColor(colorSpace: rgb, components: [1, 0.753, 0.796, 1])!\n    ctx.setFillColor(color2)\n    let path = CGMutablePath()\n    path.move(to: CGPoint(x: 80, y: 30))\n    path.addCurve(to: CGPoint(x: 30, y: 80),\n                   control1: CGPoint(x: 52.39, y: 30),\n                   control2: CGPoint(x: 30, y: 52.39))\n    path.addCurve(to: CGPoint(x: 80, y: 130),\n                   control1: CGPoint(x: 30, y: 107.61),\n                   control2: CGPoint(x: 52.39, y: 130))\n    path.addCurve(to: CGPoint(x: 130, y: 80),\n                   control1: CGPoint(x: 107.61, y: 130),\n                   control2: CGPoint(x: 130, y: 107.61))\n    path.addLine(to: CGPoint(x: 80, y: 80))\n    path.closeSubpath()\n    ctx.addPath(path)\n    ctx.fillPath()\n    ctx.setLineCap(.butt)\n    ctx.setLineJoin(.miter)\n    ctx.setLineWidth(2)\n    ctx.setMiterLimit(4)\n    let color3 = CGColor(colorSpace: rgb, components: [0, 0, 0, 1])!\n    ctx.setStrokeColor(color3)\n    ctx.addPath(path)\n    ctx.strokePath()\n  }\n}\n```\n\nSource code can be generated using [www.whileloop.com/swiftdraw](https://www.whileloop.com/swiftdraw).\n\n\n# Credits\n\nSwiftDraw is primarily the work of [Simon Whitty](https://github.com/swhitty).\n\n([Full list of contributors](https://github.com/swhitty/SwiftDraw/graphs/contributors))"
}
