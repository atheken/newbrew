{
  "name": "rswift",
  "full_name": "rswift",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Get strong typed, autocompleted resources like images, fonts and segues",
  "license": "MIT",
  "homepage": "https://github.com/mac-cain13/R.swift",
  "versions": {
    "stable": "7.3.2",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/mac-cain13/R.swift/releases/download/7.3.2/rswift-7.3.2-source.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "706b01bc517ffad0ef93a3ef4698377676d335005030ec00fbeaa1a9ae699577"
    },
    "head": {
      "url": "https://github.com/mac-cain13/R.swift.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rswift/blobs/sha256:b00dd4ed8e276e791c76953ccc4ffd06e18706d1500fdd6d288d1c65ba9c81c0",
          "sha256": "b00dd4ed8e276e791c76953ccc4ffd06e18706d1500fdd6d288d1c65ba9c81c0"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rswift/blobs/sha256:f0acecba238b6d6a01fc46b4efc5acbec6c5dcf08c98e398d73aaf4b6da719c6",
          "sha256": "f0acecba238b6d6a01fc46b4efc5acbec6c5dcf08c98e398d73aaf4b6da719c6"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rswift/blobs/sha256:fc56c6138e812ae7501339ed6c925b1d6e137a37c1193747bb00dd26e4a9d67f",
          "sha256": "fc56c6138e812ae7501339ed6c925b1d6e137a37c1193747bb00dd26e4a9d67f"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/rswift/blobs/sha256:d4bd872647c09e96fce4e91765eedcb2321f6e19807a4524b2c5bab1dc291266",
          "sha256": "d4bd872647c09e96fce4e91765eedcb2321f6e19807a4524b2c5bab1dc291266"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [
    {
      "name": "macos",
      "cask": null,
      "download": null,
      "version": null,
      "contexts": [],
      "specs": [
        "stable",
        "head"
      ]
    },
    {
      "name": "xcode",
      "cask": null,
      "download": null,
      "version": "13.3",
      "contexts": [],
      "specs": [
        "stable",
        "head"
      ]
    }
  ],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/rswift.rb",
  "ruby_source_checksum": {
    "sha256": "75f6908ec935906b06a4f238ad9a707d0384101406934f626a3e7d69e39f7042"
  },
  "date_added": "2016-02-11T16:20:25+01:00",
  "readme": "# R.swift [![Version](https://img.shields.io/cocoapods/v/R.swift.svg?style=flat)](https://cocoapods.org/pods/R.swift) [![License](https://img.shields.io/cocoapods/l/R.swift.svg?style=flat)](License) ![Platform](https://img.shields.io/cocoapods/p/R.swift.svg?style=flat)\n\n_Get strong typed, autocompleted resources like images, fonts and segues in Swift projects_\n\n## Why use this?\n\nIt makes your code that uses resources:\n- **Fully typed**, less casting and guessing what a method will return\n- **Compile time checked**, no more incorrect strings that make your app crash at runtime\n- **Autocompleted**, never have to guess that image name again\n\nCurrently you type:\n```swift\nlet icon = UIImage(named: \"settings-icon\")\nlet font = UIFont(name: \"San Francisco\", size: 42)\nlet color = UIColor(named: \"indicator highlight\")\nlet viewController = CustomViewController(nibName: \"CustomView\", bundle: nil)\nlet string = String(format: NSLocalizedString(\"welcome.withName\", comment: \"\"), locale: NSLocale.current, \"Arthur Dent\")\n```\n\nWith R.swift it becomes:\n```swift\nlet icon = R.image.settingsIcon()\nlet font = R.font.sanFrancisco(size: 42)\nlet color = R.color.indicatorHighlight()\nlet viewController = CustomViewController(nib: R.nib.customView)\nlet string = R.string.localizable.welcomeWithName(\"Arthur Dent\")\n```\n\nCheck out [more examples](Documentation/Examples.md) or hear about [how Fabric.app uses R.swift](https://academy.realm.io/posts/slug-javi-soto-building-fabric-in-swift/#rswift-2956)!\n\n## Demo\n\n**Autocompleted images:**\n\n![Autocompleted images](Documentation/Images/DemoUseImage.gif)\n\n**Compiletime checked images:**\n\n![Compiletime checked images](Documentation/Images/DemoRenameImage.gif)\n\nThis is only the beginning, check out [more examples](Documentation/Examples.md)!\n\n## CocoaHeadsNL presentation\n\nMathijs Kadijk presented R.swift at the September 2016 CocoaHeadsNL meetup.\nTalking about the ideas behind R.swift and demonstrating how to move from plain stringly-typed iOS code to statically typed code.\n\n<a href=\"https://www.youtube.com/embed/C8kRUTV9TOA\"><img src=\"https://i.ytimg.com/vi/C8kRUTV9TOA/maxresdefault.jpg\" width=\"560\" alt=\"R.swift presentation at CocoaHeadsNL\"></a>\n\n## Features\n\nAfter installing R.swift into your project you can use the `R`-struct to access resources. If the struct is outdated just build and R.swift will correct any missing/changed/added resources.\n\nR.swift currently supports these types of resources:\n- [Images](Documentation/Examples.md#images)\n- [Fonts](Documentation/Examples.md#custom-fonts)\n- [Resource files](Documentation/Examples.md#resource-files)\n- [Colors](Documentation/Examples.md#colors)\n- [Localized strings](Documentation/Examples.md#localized-strings)\n- [Storyboards](Documentation/Examples.md#storyboards)\n- [Segues](Documentation/Examples.md#segues)\n- [Nibs](Documentation/Examples.md#nibs)\n- [Reusable cells](Documentation/Examples.md#reusable-table-view-cells)\n\nRuntime validation with [`R.validate()`](Documentation/Examples.md#runtime-validation):\n- If all images used in storyboards and nibs are available\n- If all named colors used in storyboards and nibs are available\n- If all view controllers with storyboard identifiers can be loaded\n- If all custom fonts can be loaded\n\n## Q&A\n\n- [Why was R.swift created?](Documentation/QandA.md#why-was-rswift-created)\n- [Why should I choose R.swift over alternative X or Y?](Documentation/QandA.md#why-should-i-choose-rswift-over-alternative-x-or-y)\n- [What are the requirements to run R.swift?](Documentation/QandA.md#what-are-the-requirements-to-run-rswift)\n- [How to use methods with a `Void` argument?](Documentation/QandA.md#how-to-use-methods-with-a-void-argument)\n- [How to fix missing imports in the generated file?](Documentation/QandA.md#how-to-fix-missing-imports-in-the-generated-file)\n- [How to use classes with the same name as their module?](Documentation/QandA.md#how-to-use-classes-with-the-same-name-as-their-module)\n- [Can I ignore resources?](Documentation/Ignoring.md)\n- [Can I use R.swift in a library?](Documentation/QandA.md#can-i-use-rswift-in-a-library)\n- [How does R.swift work?](Documentation/QandA.md#how-does-rswift-work)\n- [How to upgrade to a new major version?](Documentation/Migration.md)\n- [How can I only run specific generators?](Documentation/Ignoring.md#only-run-specific-generators-exclude-rsomething)\n\n## Installation\n\nAs of Rswift 7, Swift Package Manager is the recommended method of installation.\n\n[Demo video: Updating from R.swift 6 to Rswift 7](https://youtu.be/icihJ_hin3I?t=66) (Starting at 1:06, this describes the installation of Rswift 7).\n\n### Xcode project - SPM\n\n1. In Project Settings, on the tab \"Package Dependencies\", click \"+\" and add `github.com/mac-cain13/R.swift`\n2. Select your target, on the tab \"General\", in the section \"Frameworks, Libraries, and Embeded Content\", click \"+\" and add `RswiftLibrary`\n3. Select your target, on the tab \"Build Phases\", in the section \"Run Build Tool Plug-ins\", click \"+\" and add `RswiftGenerateInternalResources`\n4. Right-click on your project, click `RswiftModifyXcodePackages`, click `Run`, click `Allow Command to Change Files`\n5. Build your project, now the `R` struct should be available in your code, use auto-complete to explore all static references\n\n_Screenshot of the Build Phase can be found [here](Documentation/Images/RunBuildToolPluginsRswift.png)_\n\n### Package.swift based SPM project\n\n1. Add a dependency in Package.swift:\n    ```swift\n    dependencies: [\n        .package(url: \"https://github.com/mac-cain13/R.swift.git\", from: \"7.0.0\")\n    ]\n    ```\n2. For each relevant target, add a dependency and a plugin\n    ```swift\n    .target(\n        name: \"Example\",\n        dependencies: [.product(name: \"RswiftLibrary\", package: \"R.swift\")],\n        plugins: [.plugin(name: \"RswiftGeneratePublicResources\", package: \"R.swift\")]\n    )\n    ```\n3. Build your project, now the `R` struct should be available in your code, use auto-complete to explore all static references\n\n<details>\n<summary><h3>CocoaPods</h3></summary>\n\n1. Add `pod 'R.swift'` to your [Podfile](http://cocoapods.org/#get_started) and run `pod install`\n2. In Xcode: Click on your project in the file list, choose your target under `TARGETS`, click the `Build Phases` tab and add a `New Run Script Phase` by clicking the little plus icon in the top left\n3. Drag the new `Run Script` phase **above** the `Compile Sources` phase and **below** `Check Pods Manifest.lock`, expand it and paste the following script:\n   ```bash\n   \"$PODS_ROOT/R.swift/rswift\" generate \"$SRCROOT/R.generated.swift\"\n   ```\n4. Add `$SRCROOT/R.generated.swift` to the \"Output Files\" of the Build Phase\n5. Uncheck \"Based on dependency analysis\" so that R.swift is run on each build\n6. Build your project, in Finder you will now see a `R.generated.swift` in the `$SRCROOT`-folder, drag the `R.generated.swift` files into your project and **uncheck** `Copy items if needed`\n\n_Screenshot of the Build Phase can be found [here](Documentation/Images/BuildPhaseExample.png)_\n\n_Tip:_ Add the `*.generated.swift` pattern to your `.gitignore` file to prevent unnecessary conflicts.\n</details>\n\n\n<details>\n<summary><h3>Mint</h3></summary>\n\n0. Add the [R.swift](https://github.com/mac-cain13/R.swift) library to your project\n1. Add `mac-cain13/R.swift` to your [Mintfile](https://github.com/yonaskolb/Mint#mintfile) and run `mint bootstrap`  to install this package without linking it globally (recommended)\n2. In Xcode: Click on your project in the file list, choose your target under `TARGETS`, click the `Build Phases` tab and add a `New Run Script Phase` by clicking the little plus icon in the top left\n3. Drag the new `Run Script` phase **above** the `Compile Sources` phase, expand it and paste the following script:  \n   ```bash\n   if mint list | grep -q 'R.swift'; then\n     mint run R.swift@v7.0.1 rswift generate \"$SRCROOT/R.generated.swift\"\n   else\n     echo \"error: R.swift not installed; run 'mint bootstrap' to install\"\n     return -1\n   fi\n   ```\n4. Add `$SRCROOT/R.generated.swift` to the \"Output Files\" of the Build Phase\n5. Uncheck \"Based on dependency analysis\" so that R.swift is run on each build\n6. Build your project, in Finder you will now see a `R.generated.swift` in the `$SRCROOT`-folder, drag the `R.generated.swift` files into your project and **uncheck** `Copy items if needed`\n\n_Tip:_ Add the `*.generated.swift` pattern to your `.gitignore` file to prevent unnecessary conflicts.\n</details>\n\n\n<details>\n<summary><h3>Homebrew</h3></summary>\n\nR.swift is also available through [Homebrew](http://brew.sh). This makes it possible to install R.swift globally on your system. Install R.swift by running: `brew install rswift`. The Homebrew formula is maintained by [@tomasharkema](https://github.com/tomasharkema).\n</details>\n\n<details>\n<summary><h3>Manually</h3></summary>\n\n0. Add the [R.swift](https://github.com/mac-cain13/R.swift) library to your project\n1. [Download](https://github.com/mac-cain13/R.swift/releases) a R.swift release, unzip it and put it into your source root directory\n2. In Xcode: Click on your project in the file list, choose your target under `TARGETS`, click the `Build Phases` tab and add a `New Run Script Phase` by clicking the little plus icon in the top left\n3. Drag the new `Run Script` phase **above** the `Compile Sources` phase, expand it and paste the following script:  \n   ```bash\n   \"$SRCROOT/rswift\" generate \"$SRCROOT/R.generated.swift\"\n   ```\n4. Add `$SRCROOT/R.generated.swift` to the \"Output Files\" of the Build Phase\n5. Uncheck \"Based on dependency analysis\" so that R.swift is run on each build\n6. Build your project, in Finder you will now see a `R.generated.swift` in the `$SRCROOT`-folder, drag the `R.generated.swift` files into your project and **uncheck** `Copy items if needed`\n\n_Screenshot of the Build Phase can be found [here](Documentation/Images/ManualBuildPhaseExample.png)_\n\n_Tip:_ Add the `*.generated.swift` pattern to your `.gitignore` file to prevent unnecessary conflicts.\n</details>\n\n\n## Contribute\n\nWe'll love contributions, read the [contribute docs](Documentation/Contribute.md) for info on how to report issues, submit ideas and submit pull requests!\n\n## License\n\n[R.swift](https://github.com/mac-cain13/R.swift) and [R.swift.Library](https://github.com/mac-cain13/R.swift.Library) are created by [Mathijs Kadijk](https://github.com/mac-cain13) and released under a [MIT License](License).\n\nSpecial thanks to [Tom Lokhorst](https://github.com/tomlokhorst) for his major contributions and help maintaining this project."
}
