{
  "name": "juliaup",
  "full_name": "juliaup",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Julia installer and version multiplexer",
  "license": "MIT",
  "homepage": "https://github.com/JuliaLang/juliaup",
  "versions": {
    "stable": "1.11.22",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/JuliaLang/juliaup/archive/v1.11.22.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "8a0b4540262a8bea9e61a4f287ced32ec4ad2ac4cb528a1b473eea6f139256df"
    },
    "head": {
      "url": "https://github.com/JuliaLang/juliaup.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/juliaup/blobs/sha256:62612166c99ee481b315dbd7818b05c59dd0300aea5c383bbcb554ea56b5e1e3",
          "sha256": "62612166c99ee481b315dbd7818b05c59dd0300aea5c383bbcb554ea56b5e1e3"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/juliaup/blobs/sha256:7ac9c072d4e8bdd390c87cd27c5518cbf7c7b62c23e75e8db726cb01d345176e",
          "sha256": "7ac9c072d4e8bdd390c87cd27c5518cbf7c7b62c23e75e8db726cb01d345176e"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/juliaup/blobs/sha256:2a2796a4550575d76741de55203e9e6159206b67515eb054cd32a5e6d0e2bc3c",
          "sha256": "2a2796a4550575d76741de55203e9e6159206b67515eb054cd32a5e6d0e2bc3c"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/juliaup/blobs/sha256:49dcc9990817251b6850cc1201c61f1c07aadf5122a3b19e88d852dc639134dc",
          "sha256": "49dcc9990817251b6850cc1201c61f1c07aadf5122a3b19e88d852dc639134dc"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/juliaup/blobs/sha256:658d83b029f3f7ea09642f4457024faf15c3edaaa71421ffa1871c7e1c177c46",
          "sha256": "658d83b029f3f7ea09642f4457024faf15c3edaaa71421ffa1871c7e1c177c46"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/juliaup/blobs/sha256:0d8a814414ce16253382f9b6723583c3bbfbb2e846ab9230583732df59d8488d",
          "sha256": "0d8a814414ce16253382f9b6723583c3bbfbb2e846ab9230583732df59d8488d"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/juliaup/blobs/sha256:0edfd0e3b8e99c0796d47532ef161f01e63a4de76e92e499ae43caf8c9f71593",
          "sha256": "0edfd0e3b8e99c0796d47532ef161f01e63a4de76e92e499ae43caf8c9f71593"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "rust"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [
    "julia"
  ],
  "conflicts_with_reasons": [
    "both install `julia` binaries"
  ],
  "link_overwrite": [],
  "caveats": null,
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": null,
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/juliaup.rb",
  "ruby_source_checksum": {
    "sha256": "be7ef352298c6986fb0af196690da3201d9fc68a3ff27fe2ebc5601e0a99b51e"
  },
  "date_added": "2022-01-19T10:38:28+00:00",
  "readme": "# Juliaup - Julia version manager\n\nThis repository contains a cross-platform installer for the Julia programming language.\n\nThe installer also bundles a full Julia version manager called `juliaup`. One can use `juliaup` to install specific Julia versions, it alerts users when new Julia versions are released and provides a convenient Julia release channel abstraction.\n\n## Status\n\nThis installer is considered production ready. \n\n## Installation\n\nOn all platforms it is recommended that you first uninstall any previous Julia versions and undo any modifications you might have made to put `julia` on the `PATH` before you install Julia with the installer in this repository.\n\n### Windows\n\nOn Windows Julia and Juliaup can be installed directly from the Windows store [here](https://www.microsoft.com/store/apps/9NJNWW8PVKMN). One can also install exactly the same version by executing\n\n```\nwinget install julia -s msstore\n```\n\non a command line.\n\nIf the Windows Store is blocked on a system, we have an alternative [MSIX App Installer](https://learn.microsoft.com/en-us/windows/msix/app-installer/app-installer-file-overview) based setup. Note that this is currently experimental, please report back successes and failures [here](https://github.com/JuliaLang/juliaup/issues/343). To use the App Installer version, download [this](https://install.julialang.org/Julia.appinstaller) file and open it by double clicking on it.\n\n### Mac and Linux\n\nJuliaup can be installed on Linux or Mac by executing\n\n```\ncurl -fsSL https://install.julialang.org | sh\n```\n\nin a shell.\n\n#### Command line arguments\n\nOne can pass various command line arguments to the Julia installer. The syntax for installer arguments is\n\n```bash\ncurl -fsSL https://install.julialang.org | sh -s -- <ARGS>\n```\n\nHere `<ARGS>` should be replaced with one or more of the following arguments:\n- `--yes` (or `-y`): Run the installer in a non-interactive mode. All configuration values use their default.\n- `--default-channel <NAME>`: Configure the default channel. For example `--default-channel lts` would install the `lts` channel and configure it as the default.\n\n### Software Repositories\n\n**Important note:** As of now, we strongly recommend to install Juliaup via the Windows Store or `curl` command above rather than through OS-specific software repositories (see below) as the Juliaup variants provided by the latter currently have some drawbacks (that we hope to lift in the future).\n\n##### [Homebrew](https://brew.sh)\n\n```\nbrew install juliaup\n```\n\n##### [Arch Linux - AUR](https://aur.archlinux.org/packages/juliaup/)\n\nOn Arch Linux, Juliaup is available [in the Arch User Repository (AUR)](https://aur.archlinux.org/packages/juliaup/).\n\n##### [openSUSE Tumbleweed](https://get.opensuse.org/tumbleweed/)\n\nOn openSUSE Tumbleweed, Juliaup is available. To install, run with root privileges:\n\n```sh\nzypper install juliaup\n```\n\n##### [cargo](https://crates.io/crates/juliaup/)\n\nTo install via Rust's cargo, run:\n\n```sh\ncargo install juliaup\n```\n\n## Using Juliaup\n\nOnce you have installed Juliaup, `julia` is on the `PATH`, and on Windows there is a start menu shortcut and it will show up as a profile in Windows Terminal. Any of those will start Julia. The VS Code extension will also automatically find this Julia installation.\n\nHere are some of the things you can do with `juliaup`:\n- `juliaup list` lists all the available channels.\n- `juliaup update` installs the latest available Julia version for all your channels.\n- `juliaup update release` updates the `release` channel to the latest version.\n- `juliaup status` shows you which Julia versions you have installed and which one is configured as the default.\n- `juliaup add 1.5.1` adds Julia 1.5.1 to your system (it can then be launched via the command `julia +1.5.1`).\n- `juliaup default 1.5.3` configures the `julia` command to start Julia 1.5.3.\n- `juliaup default 1.6` configures the `julia` command to start the latest 1.6.x version of Julia you have installed on your system (and inform you if there is a newer version in 1.6.x available).\n- `juliaup default release` configures the `julia` command to start the latest stable version of Julia (this is also the default value).\n- `juliaup remove 1.5.3` deletes Julia 1.5.3 from your system.\n- `juliaup add 1.6.1~x86` installs the 32 bit version of Julia 1.6.1 on your system.\n- `juliaup default 1.6~x86` configures the `julia` command to start the latest 1.6.x 32 bit version of Julia you have installed on your system.\n- `juliaup link dev ~/juliasrc/julia` configures the `dev` channel to use a binary that you provide that is located at `~/juliasrc/julia`. You can then use `dev` as if it was a system provided channel, i.e. make it the default or use it with the `+` version selector. You can use other names than `dev` and link as many versions into `juliaup` as you want.\n- `juliaup self update` installs the latest version, which is necessary if new releases reach the beta channel, etc.\n- `juliaup self uninstall` uninstalls Juliaup. Note that on some platforms this command is not available, in those situations one should use platform specific methods to uninstall Juliaup.\n- `juliaup override status` shows all configured directory overrides.\n- `juliaup override set lts` sets a directory override for the current working directory to the `lts` channel.\n- `juliaup override unset` removes a directory override for the current working directory.\n- `juliaup override set --path foo/bar lts` sets a directory override for the path `foo/bar` to the `lts` channel.\n- `juliaup override unset --path foo/bar` removes a directory override for the path `foo/bar`.\n- `juliaup override unset --nonexistent` removes all directory overrides for paths that no longer exist.\n- `juliaup` shows you what other commands are available.\n\nThe available system provided channels are:\n- `release`: always points to the latest stable version.\n- `lts`: always points to the latest long term supported version.\n- `beta`: always points to the latest beta version if one exists. If a newer release candidate exists, it will point to that, and if there is neither a beta or rc candidate available it will point to the same version as the `release` channel.\n- `rc`: same as `beta`, but only starts with release candidate versions.\n- specific versions, e.g. `1.5.4`.\n- minor version channels, e.g. `1.5`.\n- major version channels, e.g. `1`.\n\nAll of these channels can be combined with the `~x86`, `~x64` or `~aarch64` suffix to download a specific platform version.\n\n## Using installed Julia versions\n\nTo launch the default Julia version simply run `julia` in your terminal.\n\nTo launch a specific Julia version, say in channel `release`, run `julia +release`.\n\n## Overrides\n\nThe Julia launcher `julia` automatically determines which specific version of Julia to launch. There are several ways to control and override which Juliaup channel should be used:\n\n1. A command line Julia version specifier, such as `julia +release`.\n2. The `JULIAUP_CHANNEL` environment variable.\n3. A directory override, set with the `juliaup override set` command.\n3. The default Juliaup channel.\n\nThe channel is used in the order listed above, using the first available option.\n\n## Juliaup server\n\nJuliaup by default downloads julia binary tarballs from the official server \"https://julialang-s3.julialang.org\".\nIf requested, the environment variable `JULIAUP_SERVER` can be used to tell Juliaup to use a third-party mirror server.\n\n## Development guides\n\nFor juliaup developers, information on how to build juliaup locally, update julia versions, and release updates\ncan be found in the wiki https://github.com/JuliaLang/juliaup/wiki\n\nTo use unstable preview versions of juliaup (e.g. to gt a patch before it makes it into the latest release), use\n\n```\ncurl -fsSL https://install.julialang.org/releasepreview | sh\n```\n\n## More information\n\n[This JuliaCon 2021 talk](https://www.youtube.com/watch?v=rFlbjWC6zYA) is a short introduction to Juliaup. Note that the video was recorded before the Linux and Mac versions were finished, but all the information about `juliaup` itself applies equally on Linux and Mac.\n\n[This JuliaCon 2022 talk](https://www.youtube.com/watch?v=14zfdbzq5BM) provides some background on the design of Juliaup."
}
