{
  "name": "piknik",
  "full_name": "piknik",
  "tap": "homebrew/core",
  "oldname": null,
  "oldnames": [],
  "aliases": [],
  "versioned_formulae": [],
  "desc": "Copy/paste anything over the network",
  "license": "BSD-2-Clause",
  "homepage": "https://github.com/jedisct1/piknik",
  "versions": {
    "stable": "0.10.1",
    "head": "HEAD",
    "bottle": true
  },
  "urls": {
    "stable": {
      "url": "https://github.com/jedisct1/piknik/archive/0.10.1.tar.gz",
      "tag": null,
      "revision": null,
      "checksum": "9172acb424d864ba3563bbdb0cd2307815129027eec1a6ca04aee17da7f936c2"
    },
    "head": {
      "url": "https://github.com/jedisct1/piknik.git",
      "branch": "master"
    }
  },
  "revision": 0,
  "version_scheme": 0,
  "bottle": {
    "stable": {
      "rebuild": 0,
      "root_url": "https://ghcr.io/v2/homebrew/core",
      "files": {
        "arm64_ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/piknik/blobs/sha256:ad21c6f5534120bf7b51f809e0441ed40d6c1647fd3df8ae5324f44b4b11d04f",
          "sha256": "ad21c6f5534120bf7b51f809e0441ed40d6c1647fd3df8ae5324f44b4b11d04f"
        },
        "arm64_monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/piknik/blobs/sha256:3b11a027946eda7b8937861f4458d6d0a8e320fb297fa44ea8a84883e5614b9f",
          "sha256": "3b11a027946eda7b8937861f4458d6d0a8e320fb297fa44ea8a84883e5614b9f"
        },
        "arm64_big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/piknik/blobs/sha256:b503df3a16dfdf25219a598da5ae3c17676ee2367c0db0837403a6f728e4fcb4",
          "sha256": "b503df3a16dfdf25219a598da5ae3c17676ee2367c0db0837403a6f728e4fcb4"
        },
        "ventura": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/piknik/blobs/sha256:6124866e63102b6c82103a39a6d6287ed0808648e619af94d8ef44df915e22c1",
          "sha256": "6124866e63102b6c82103a39a6d6287ed0808648e619af94d8ef44df915e22c1"
        },
        "monterey": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/piknik/blobs/sha256:28f6e0672fa5745285ec63560821f35c6bf604fa42ad80828bd2ca70eb5d94df",
          "sha256": "28f6e0672fa5745285ec63560821f35c6bf604fa42ad80828bd2ca70eb5d94df"
        },
        "big_sur": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/piknik/blobs/sha256:48b98419184b858ff308f4ed96f0ff001f757524c38705337a25adfb960a85ea",
          "sha256": "48b98419184b858ff308f4ed96f0ff001f757524c38705337a25adfb960a85ea"
        },
        "catalina": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/piknik/blobs/sha256:d454877b9f650eaa1fcd22ccad12c62a69d2ab21b48a16481d4be17067236233",
          "sha256": "d454877b9f650eaa1fcd22ccad12c62a69d2ab21b48a16481d4be17067236233"
        },
        "mojave": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/piknik/blobs/sha256:8afe990d9ff9828b6148928d27c9535fd31b7f8082db341cf962dfbf1e895b96",
          "sha256": "8afe990d9ff9828b6148928d27c9535fd31b7f8082db341cf962dfbf1e895b96"
        },
        "x86_64_linux": {
          "cellar": ":any_skip_relocation",
          "url": "https://ghcr.io/v2/homebrew/core/piknik/blobs/sha256:8d9a86776e5339217206d091bc5b37921db0c11c82b8a068108e41ef76c23fde",
          "sha256": "8d9a86776e5339217206d091bc5b37921db0c11c82b8a068108e41ef76c23fde"
        }
      }
    }
  },
  "keg_only": false,
  "keg_only_reason": null,
  "options": [],
  "build_dependencies": [
    "go"
  ],
  "dependencies": [],
  "test_dependencies": [],
  "recommended_dependencies": [],
  "optional_dependencies": [],
  "uses_from_macos": [],
  "uses_from_macos_bounds": [],
  "requirements": [],
  "conflicts_with": [],
  "conflicts_with_reasons": [],
  "link_overwrite": [],
  "caveats": "In order to get convenient shell aliases, add the following to your shell\nprofile e.g. ~/.profile or ~/.zshrc:\n  . $HOMEBREW_PREFIX/etc/profile.d/piknik.sh\n",
  "installed": [],
  "linked_keg": null,
  "pinned": false,
  "outdated": false,
  "deprecated": false,
  "deprecation_date": null,
  "deprecation_reason": null,
  "disabled": false,
  "disable_date": null,
  "disable_reason": null,
  "post_install_defined": false,
  "service": {
    "run": [
      "/home/linuxbrew/.linuxbrew/opt/piknik/bin/piknik",
      "-server"
    ],
    "run_type": "immediate"
  },
  "tap_git_head": "4eeae4ea50839e967536ba646d5e0ed6fbcbad7f",
  "ruby_source_path": "Formula/piknik.rb",
  "ruby_source_checksum": {
    "sha256": "c57f1c05451280e1cdddfa2a5978af893faed78dfd920076bc7f859c3b5873a9"
  },
  "date_added": "2016-10-12T20:18:19+01:00",
  "readme": "[![Latest release](https://img.shields.io/github/release/jedisct1/piknik.svg)](https://github.com/jedisct1/piknik/releases/latest)\n[![Build status](https://travis-ci.com/jedisct1/piknik.svg?branch=master)](https://travis-ci.com/jedisct1/piknik?branch=master)\n![CodeQL scan](https://github.com/jedisct1/piknik/workflows/Code%20scanning%20-%20action/badge.svg)\n\n# Piknik\n\nCopy/paste anything over the network!\n\n[[watch a demo on Asciinema](https://asciinema.org/a/80708)] -\n[[download the source code / binaries](https://github.com/jedisct1/piknik/releases/latest)]\n\n![Piknik](https://raw.github.com/jedisct1/piknik/master/piknik.png)\n\nEver needed a copy/paste clipboard that works over the network?\n\nPiknik seamlessly and securely transfers URLs, code snippets, documents, virtually anything between arbitrary hosts.\n\nNo SSH needed, and hosts can sit behind NAT gateways, on different networks.\n\nFill in the clipboard (\"copy\") with whatever comes in to the standard input:\n\n```sh\n$ pkc\nclipboard content\n```\n\nMagically retrieve that content from any other host having Piknik installed with the same configuration:\n\n```sh\n$ pkp\nclipboard content\n```\n\nBoom.\n\nObviously, it can be used to transfer files as well:\n\n```sh\n$ pkc < kitten.gif\n$ pkp > kittencopy.gif\n```\n\n```sh\n$ tar cvf - *.txt | pkc\n$ pkp | tar xvf -\n```\n\nIn order to work around firewalls/NAT gatways, the clipboard content transits over TCP via a staging server.\n\nNothing transits without end-to-end encryption; the server cannot learn much about what the clipboard actually contains.\n\nData can be shared between different operating systems, including MacOS, Linux and Windows.\n\n## Installation\n\n### Option 1: use precompiled binaries\n\nPrecompiled binaries for MacOS, Linux (i386, x86_64, ARM), Win32, Win64, DragonflyBSD, NetBSD and FreeBSD can be downloaded here:\nhttps://github.com/jedisct1/piknik/releases/latest\n\n### Option 2 (on MacOS): use Homebrew\n\n```sh\n$ brew install piknik\n```\n\n### Option 3: compile the source code\n\nThis project is written in Go.\n\nGo >= 1.11 is required, as well as the following incantation:\n\n```sh\n$ go build\n```\n\nThe `piknik` executable file should then be available in current path.\n\n## Setup\n\nPiknik requires a bunch of keys. Generate them all with\n\n```sh\n$ piknik -genkeys\n```\n\nThis generates random keys (highly recommended).\n\nYou will need to copy parts (not all!) of that command's output to a `piknik.toml` configuration file.\n\nA temporary alternative is to derive the keys from a password. The same password will always generate the same set of keys, on all platforms. In order to do so, add the `-password` switch:\n\n```sh\n$ piknik -genkeys -password\n```\n\nThe output of the `-genkeys` command is all you need to build a configuration file.\n\nOnly copy the section for servers on the staging server. Only copy the section for clients on the clients.\n\nIs a host gonna act both as a staging server and as a client? Ponder on it before copying the \"hybrid\" section, but it's there, just in case.\n\nThe default location for the configuration file is `~/.piknik.toml`. With the exception of Windows, where dot-files are not so common. On that platform, the file is simply called `piknik.toml`.\n\nSample configuration file for a staging server:\n\n```toml\nListen = \"0.0.0.0:8075\"         # Edit appropriately\nPsk    = \"bf82bab384697243fbf616d3428477a563e33268f0f2307dd14e7245dd8c995d\"\nSignPk = \"0c41ca9b0a1b5fe4daae789534e72329a93a352a6ad73d6f1d368d8eff37271c\"\n```\n\nSample configuration file for clients:\n\n```toml\nConnect   = \"127.0.0.1:8075\"    # Edit appropriately\nPsk       = \"bf82bab384697243fbf616d3428477a563e33268f0f2307dd14e7245dd8c995d\"\nSignPk    = \"0c41ca9b0a1b5fe4daae789534e72329a93a352a6ad73d6f1d368d8eff37271c\"\nSignSk    = \"cecf1d92052f7ba87da36ac3e4a745b64ade8f9e908e52b4f7cd41235dfe7481\"\nEncryptSk = \"2f530eb85e59c1977fce726df9f87345206f2a3d40bf91f9e0e9eeec2c59a3e4\"\n```\n\nDo not use these, uh? Get your very own keys with the `piknik -genkeys` command.\nEdit the `Connect` and `Listen` properties to reflect the staging server IP and port.\nAnd `chmod 600 ~/.piknik.toml` might not be a bad idea.\n\nDon't like the default config file location? Use the `-config` switch.\n\n## Usage (staging server)\n\nRun the following command on the staging server (or use `runit`, `openrc`, `systemd`, whatever to run it as a background service):\n\n```sh\n$ piknik -server\n```\n\nThe staging server has to be publicly accessible. At the very least, it must be reachable by the clients over TCP with the port you specify in the configuration.\n\nCommands without a valid API key (present in the client configuration file) will be rejected by the server.\n\n## Usage (clients)\n\n```sh\n$ piknik -copy\n```\n\nCopy the standard input to the clipboard.\n\n```sh\n$ piknik -paste\n```\n\nRetrieve the content of the clipboard and spit it to the standard output.\n`-paste` is actually a no-op. This is the default action if `-copy` was not specified.\n\n```sh\n$ piknik -move\n```\n\nRetrieve the content of the clipboard, spit it to the standard output\nand clear the clipboard. Not necessarily in this order.\nOnly one lucky client will have the privilege to see the content.\n\nThat's it.\n\nFeed it anything. Text, binary data, whatever. As long as it fits in memory.\n\n## Suggested shell aliases\n\nWait. Where are the `pkc` and `pkp` commands mentioned earlier?\n\nSample shell aliases:\n\n```sh\n# pko <content> : copy <content> to the clipboard\npko() {\n    echo \"$*\" | piknik -copy\n}\n\n# pkf <file> : copy the content of <file> to the clipboard\npkf() {\n    piknik -copy < $1\n}\n\n# pkc : read the content to copy to the clipboard from STDIN\nalias pkc='piknik -copy'\n\n# pkp : paste the clipboard content\nalias pkp='piknik -paste'\n\n# pkm : move the clipboard content\nalias pkm='piknik -move'\n\n# pkz : delete the clipboard content\nalias pkz='piknik -copy < /dev/null'\n\n# pkfr [<dir>] : send a whole directory to the clipboard, as a tar archive\npkfr() {\n    tar czpvf - ${1:-.} | piknik -copy\n}\n\n# pkpr : extract clipboard content sent using the pkfr command\nalias pkpr='piknik -paste | tar xzpvf -'\n```\n\n## Piknik integration in third-party packages\n\n* The [Piknik package for Atom](https://atom.io/packages/piknik)\nallows copying/pasting text between hosts running the Atom text editor.\n* The [Piknik package for Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=jedisct1.piknik)\nallows copying/pasting text between hosts running the Visual Studio Code text editor.\n\n## Use cases\n\nUse it to:\n\n* Securely send passwords, API keys, URLs from one host to another\n* Share a clipboard with your teammates (which can be a lot of fun)\n* Copy data from/to isolated VMs, without the VMWare tools or shared volumes (great for unsupported operating systems and malware sandboxes)\n* Copy files from/to a Windows machine, without Samba or SSH\n* Transfer data between hosts sitting behind firewalls/NAT gateways\n* Easily copy configuration files to multiple hosts\n* Start a slow download at the office, retrieve it later at home\n* Quickly backup a file to the cloud before messing with it\n* ...and more!\n\n## Protocol\n\nCommon definitions:\n\n```text\nk: API key\nek: 256-bit symmetric encryption key\nekid: encryption key id encoded as a 64-bit little endian integer\nm: plaintext\nct: XChaCha20 ek,n (m)\nHk,s: BLAKE2b(domain=\"SK\", key=k, salt=s, size=32)\nLen(x): x encoded as a 64-bit little endian unsigned integer\nn: random 192-bit nonce\nr: random 256-bit client nonce\nr': random 256-bit server nonce\nts: Unix timestamp as a 64-bit little endian integer\nSig: Ed25519\nv: 6\n```\n\nCopy:\n\n```text\n-> v || r || h0\nh0 := Hk,0(v || r)\n\n<- v || r' || h1\nh1 := Hk,1(v || r' || h0)\n\n-> 'S' || h2 || Len(ekid || n || ct) || ts || s || ekid || n || ct\ns := Sig(ekid || n || ct)\nh2 := Hk,2(h1 || 'S' || ts || s)\n\n<- Hk,3(h2)\n```\n\nMove/Paste:\n\n```text\nMove:  opcode := 'M'\nPaste: opcode := 'G'\n\n-> v || r || h0\nh0 := Hk,0(v || r)\n\n<- v || r' || h1\nh1 := Hk,1(v || r' || H0)\n\n-> opcode || h2\nh2 := Hk,2(h1 || opcode)\n\n<- Hk,3(h2 || ts || s) || Len(ekid || n || ct) || ts || s || ekid || n || ct\ns := Sig(ekid || n || ct)\n```\n\n## License\n\n[ISC](https://en.wikipedia.org/wiki/ISC_license).\n\n## Credits\n\nPiknik diagram by [EasyPi](https://easypi.herokuapp.com/copy-paste-anything-over-network/)."
}
